#ifndef INCLUDED_UI_JQUERY
#define INCLUDED_UI_JQUERY

var $ = (function(g) { 
	function resolve(o,a,c) { 
		switch (typeof(a)) { 
		case "array": for (var i=0,l=a.length;i<l;++i) resolve(o,a,c); return;
		case "object": this.push(a); return;
		default: a = c || _.global;
		case "string": // css query
		}
	}
	function $(a,c) { 
		if (this==g) return new _(a,c);
		resolve(this,a,c);
		}
	}
	var _ = $.prototype = [];
	_.each = function(f) {
		for (var i=0;i<this.length;++i) f.call(this[i],f,i);
		return this;
	};
	_.set = function(a,b) { 
		return this.each(b==null?function(){for(var j in a) $.attr(this,j,a[j])}
						 :function(){$.attr(this,a,b)}
		);
	};
	_.val = function(h) { 
		return h==null&&this.length?this[0].value:this.set("value",h);
	};
	_.toggle = function() { 
		return this.each(function(){
			var d = $.getCSS(this,"display");
			(d=="none"||d=="")?$(this).show():$(this).hide;
		});
	};
	_.show = function() { 
		return this.each(function(){
			this.style.display = this.$$oldblock ? this.$$oldblock : '';
			if ($.getCSS(this,"display")=="none") this.style.display = 'block';
		});
	};
	_.hide = function() { 
		return this.each(function(){
			this.$$oldblock = $.getCSS(this,"display");
			if (this.$$oldblock == "none") this.$$oldblock = 'block';
			this.style.display = 'none';
		});
	};
	return $;
})(this);
#endif // INCLUDED_UNDERSCORE vim:ts=4

