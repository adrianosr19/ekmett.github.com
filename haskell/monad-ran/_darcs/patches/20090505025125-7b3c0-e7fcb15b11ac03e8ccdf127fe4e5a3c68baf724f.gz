[writer
ekmett@gmail.com**20090505025125
 Ignore-this: e401a204a9bd433ce0f34b7220f9e0bb
] {
hunk ./Control/Monad/Codensity.hs 72
+    f `catchError` h = lift $ lowerCodensity f `catchError` (lowerCodensity . h)
hunk ./Control/Monad/Ran.hs 1
-{-# LANGUAGE RankNTypes, FlexibleInstances, FlexibleContexts, TypeFamilies, MultiParamTypeClasses, MagicHash, UnboxedTuples, UndecidableInstances  #-}
+{-# LANGUAGE RankNTypes, FlexibleInstances, FlexibleContexts, TypeFamilies, MultiParamTypeClasses, MagicHash, UnboxedTuples, UndecidableInstances, TypeSynonymInstances  #-}
hunk ./Control/Monad/Ran.hs 49
+import Text.Read hiding (get)
+import Text.Show
+
hunk ./Control/Monad/Ran.hs 56
-    type G f    :: * -> *
-    type H f    :: * -> *
-    liftRan       :: f a -> Ran f a
-    lowerRan      :: Ran f a -> f a
+    type G f :: * -> *
+    type H f :: * -> *
+    liftRan  :: f a -> Ran f a
+    lowerRan :: Ran f a -> f a
hunk ./Control/Monad/Ran.hs 96
-    liftRan = codensityRan
+    liftRan  = codensityRan
hunk ./Control/Monad/Ran.hs 116
+instance Alternative (Codensity f) => Alternative (Ran (Codensity f)) where
+    empty = liftRan empty
+    m <|> n = liftRan (lowerRan m <|> lowerRan n)
+
+{-
hunk ./Control/Monad/Ran.hs 124
+-}
hunk ./Control/Monad/Ran.hs 155
--- TODO: the other instances for Ran (Codensity f)
--- MonadIO, MonadState, etc.
+-- TODO: any other instances for Ran (Codensity f)
hunk ./Control/Monad/Ran.hs 162
-    lowerRan = flip getRan Identity
+    lowerRan  = flip getRan Identity
hunk ./Control/Monad/Ran.hs 175
+instance Eq a => Eq (Ran Identity a) where
+    Ran f == Ran g = runIdentity (f Identity) == runIdentity (g Identity)
+
+instance Ord a => Ord (Ran Identity a) where
+    Ran f `compare` Ran g = runIdentity (f Identity) `compare` runIdentity (g Identity)
+
+instance Show a => Show (Ran Identity a) where
+    showsPrec d (Ran f) = showParen (d > 10) $
+        showString "return " . showsPrec 11 (runIdentity (f Identity))
+    
+instance Read a => Read (Ran Identity a) where
+    readPrec = parens $ prec 10 $ do
+        Ident "return" <- lexP
+        m <- step readPrec
+        return (return m)
+
+-- Codensity (Reader s)
+-- forall o. (a -> s -> o) -> s -> o
+instance RanIso (State s) where
+    type G (State s) = (->) s
+    type H (State s) = (->) s
+    liftRan (State g)  = Ran (\f -> uncurry f . g)
+    lowerRan (Ran f)  = State (f (,))
+
+instance Pointed (Ran (State s)) where
+    point = returnRanCodensity
+
+instance Applicative (Ran (State s)) where
+    pure = returnRanCodensity
+    (<*>) = apRanCodensity
+
+instance Monad (Ran (State s)) where
+    return = returnRanCodensity
+    (>>=) = bindRanCodensity
+
+instance MonadState s (Ran (State s)) where
+    get = Ran (\k s -> k s s)
+    put s = Ran (\k _ -> k () s)
+
+-- embedded as CPS'd State rather than directly to avoid superfluous 'mappend mempty' calls for expensive monoids
+-- forall o. (a -> w -> o) -> w -> o
+instance Monoid w => RanIso (Writer w) where
+    type G (Writer w) = (->) w
+    type H (Writer w) = (->) w
+    liftRan (Writer (a,w')) = Ran (\f w -> f a (w `mappend` w'))
+    lowerRan (Ran f) = Writer (f (,) mempty)
+
+instance Monoid w => Pointed (Ran (Writer w)) where
+    point = returnRanCodensity
+
+instance Monoid w => Applicative (Ran (Writer w)) where
+    pure = returnRanCodensity
+    (<*>) = apRanCodensity
+
+instance Monoid w => Monad (Ran (Writer w)) where
+    return = returnRanCodensity
+    (>>=) = bindRanCodensity
+
+instance Monoid w => MonadWriter w (Ran (Writer w)) where
+    tell w'        = Ran (\f w -> f () (w `mappend` w'))
+    listen (Ran f) = Ran (\g -> f (\a w -> g (a,w) w))
+    pass (Ran f)   = Ran (\g -> f (\(a,p) w -> g a (p w)))
+
hunk ./Control/Monad/Ran.hs 257
-    liftRan (IO s) = liftRanWorld s
-    lowerRan s = IO (lowerRanWorld s)
+    liftRan (IO a) = liftRanWorld a
+    lowerRan a     = IO (lowerRanWorld a)
hunk ./Control/Monad/Ran.hs 271
+instance MonadPlus (Ran IO) where
+    mzero = liftIO mzero
+    m `mplus` n = m `catchError` const n
+
+instance MonadError IOError (Ran IO) where
+    throwError = liftIO . ioError
+    catchError m h = liftRan (lowerRan m `catch` (lowerRan . h))
+
hunk ./Control/Monad/Ran.hs 287
-    lowerRan r = ST (lowerRanWorld r)
+    lowerRan r     = ST (lowerRanWorld r)
hunk ./Control/Monad/Ran.hs 341
--- as per Maybe, this Monoid turns a semigroup into a monoid
hunk ./Control/Monad/Ran.hs 350
+instance Eq a => Eq (Ran Maybe a) where
+    f == g = lowerRan f == lowerRan g
+
+instance Ord a => Ord (Ran Maybe a) where
+    f `compare` g = lowerRan f `compare` lowerRan g
+
+instance Show a => Show (Ran Maybe a) where
+    showsPrec d f = showParen (d > 10) $
+        showString "liftRan " . showsPrec 11 (lowerRan f)
+    
+instance Read a => Read (Ran Maybe a) where
+    readPrec = parens $ prec 10 $ do
+        Ident "liftRan " <- lexP
+        m <- step readPrec
+        return (liftRan m)
+
hunk ./Control/Monad/Ran.hs 369
-data ErrorTH e m o = ErrorTH { getErrorTH :: (e -> G m o) -> H m o }
-
hunk ./Control/Monad/Ran.hs 371
-instance Error e => RanIso (Either e) where
+instance RanIso (Either e) where
hunk ./Control/Monad/Ran.hs 395
-        
+
+instance Error e => MonadFix (Ran (Either e)) where
+    mfix f = m where
+        m = f (fromRight m)
+        fromRight (Ran r) = getErrorH (r Identity) (\_ -> error "mfix (Ran (Either e)): empty mfix argument")
+
+instance (Eq a, Eq b) => Eq (Ran (Either a) b) where
+    f == g = lowerRan f == lowerRan g
+
+instance (Ord a, Ord b) => Ord (Ran (Either a) b) where
+    f `compare` g = lowerRan f `compare` lowerRan g
+
+instance (Show a, Show b) => Show (Ran (Either a) b) where
+    showsPrec d f = showParen (d > 10) $
+        showString "liftRan " . showsPrec 11 (lowerRan f)
+    
+instance (Read a, Read b) => Read (Ran (Either a) b) where
+    readPrec = parens $ prec 10 $ do
+        Ident "liftRan " <- lexP
+        m <- step readPrec
+        return (liftRan m)
+
+
+-- Yoneda (Reader r) ~ forall o. (a -> o) -> r -> o ~ forall o. (a -> Identity o) -> r -> o
+instance RanIso ((->)e) where
+    type G ((->) e) = Identity
+    type H ((->) e) = (->) e
+    liftRan m = Ran (\f -> liftM (runIdentity . f) m)
+    lowerRan (Ran f) = f Identity
+
+instance Pointed (Ran ((->)e)) where
+    point = return
+
+instance Applicative (Ran ((->)e)) where
+    pure = return
+    Ran f <*> Ran g = Ran (\k r -> runIdentity (k (f Identity r (g Identity r))))
+
+instance Monad (Ran ((->)e)) where
+    return a = Ran (\f _ -> runIdentity (f a))
+    Ran f >>= h = Ran (\k r -> getRan (h (f Identity r)) k r)
+    
+instance MonadReader e (Ran ((->)e)) where 
+    ask = Ran (\k r -> runIdentity (k r))
+    local f (Ran m) = Ran (\k r -> m k (f r))
+
+instance Monoid m => Monoid (Ran ((->)e) m) where
+    mempty = return mempty
+    Ran a `mappend` Ran b = Ran (\k r -> runIdentity (k (a Identity r `mappend` b Identity r)))
+
+
+
+
+
hunk ./Control/Monad/Ran.hs 449
+data ErrorTH e m o = ErrorTH { getErrorTH :: (e -> G m o) -> H m o }
hunk ./Control/Monad/Ran.hs 458
--- Codensity f
--- forall o. (a -> f o) -> f o 
-instance RMonad (Codensity f) where
-    type G (Codensity f) = f
-    type H (Codensity f) = f
-    liftRan (Codensity f) = Ran f
-    lowerRan (Ran f) = Codensity f
-
--- Yoneda (Reader r)
--- forall o. (a -> o) -> r -> o
-instance RMonad (Reader e) where
-    type G (Reader e) = Identity
-    type H (Reader e) = Reader e
-    liftRan m = Ran (\f -> liftM (runIdentity . f) m)
-    lowerRan (Ran f) = f Identity
-
--- embedded as CPS'd State to avoid superfluous 'mappend mempty' calls
--- specialized Codensity (Reader w)
--- forall o. (a -> w -> o) -> w -> o
-instance Monoid w => RMonad (Writer w) where
-    type G (Writer w) = (->) w
-    type H (Writer w) = (->) w
-    liftRan (Writer (a,w'))  = Ran (\f w -> f a (w `mappend` w'))
-    lowerRan (Ran f) = Writer (f (,) mempty)
-    -- forall o. (a -> w -> o) -> o
-    -- type H (Writer w) = Identity
-
--- Codensity (Reader s)
--- forall o. (a -> s -> o) -> s -> o
-instance RMonad (State s) where
-    type G (State s) = (->) s
-    type H (State s) = (->) s
-    liftRan (State g)  = Ran (\f -> uncurry f . g)
-    lowerRan (Ran f)  = State (f (,))
hunk ./Control/Monad/Ran.hs 459
--- Codensity (Const r)
hunk ./Control/Monad/Yoneda.hs 7
-    , runYoneda
+    , lowerYoneda
hunk ./Control/Monad/Yoneda.hs 53
-    local f = lift . local f . runYoneda 
+    local f = lift . local f . lowerYoneda 
hunk ./Control/Monad/Yoneda.hs 57
-    listen = lift . listen . runYoneda
-    pass = lift . pass . runYoneda
+    listen = lift . listen . lowerYoneda
+    pass = lift . pass . lowerYoneda
hunk ./Control/Monad/Yoneda.hs 71
+    catchError m h = lift $ lowerYoneda m `catchError` (lowerYoneda . h)
hunk ./Control/Monad/Yoneda.hs 73
-instance MonadFix m => MonadFix (Yoneda m)
+instance MonadFix m => MonadFix (Yoneda m) where
+    mfix f = lift $ mfix (lowerYoneda . f)
hunk ./Control/Monad/Yoneda.hs 76
-runYoneda :: Yoneda f a -> f a 
-runYoneda (Yoneda f) = f id
+lowerYoneda :: Yoneda f a -> f a 
+lowerYoneda (Yoneda f) = f id
}
