[auto
ekmett@gmail.com**20090506050611
 Ignore-this: a704ac24c0c6b504b0286882405a9975
] {
hunk ./Control/Monad/Ran.hs 10
+    IncoherentInstances,
hunk ./Control/Monad/Ran.hs 29
--- and use @liftRan :: RanIso m => m a -> Ran m a@ and
--- and @lowerRan :: RanIso m => Ran m a -> m a@ to extract
+-- and use @liftRan :: RanFunctor m => m a -> Ran m a@ and
+-- and @lowerRan :: RanFunctor m => Ran m a -> m a@ to extract
hunk ./Control/Monad/Ran.hs 49
---
hunk ./Control/Monad/Ran.hs 55
-    , RApplicative
-    , RMonad
-    , RanIso
+    , RanApplicative
+    , RanMonad
+    , RanFunctor
hunk ./Control/Monad/Ran.hs 67
-      -- * Default definitions for common extension patterns
+      -- * Default definitions for common extensions
hunk ./Control/Monad/Ran.hs 78
-      -- * Pointed Functors
-    , Pointed(..)
-      -- * The Yoneda Lemma
+      -- * The Yoneda Lemma is a right-Kan extension
hunk ./Control/Monad/Ran.hs 81
-      -- * The codensity monad of a functor
+      -- * The codensity monad of a functor is a right-Kan extension
hunk ./Control/Monad/Ran.hs 85
-    , lowerCodensityPointed
hunk ./Control/Monad/Ran.hs 87
--- Finding the right Kan extension
+-- All you need to do is find the right Kan extension.
hunk ./Control/Monad/Ran.hs 89
--- TODO: MonadError e (Ran (StateT s m), MonadCont (Ran (StateT s m))
--- TODO: MonadError e (Ran (SS.StateT s m), MonadCont (Ran (SS.StateT s m))
--- TODO: Eq,Ord,Show,etc. instance for Ran (WriterT w m)!
-
+-- TODO: MonadError e (Ran (StateT s m)),     MonadCont (Ran (StateT s m))
+-- TODO: MonadError e (Ran (SS.StateT s m)),  MonadCont (Ran (SS.StateT s m))
+-- TODO: MonadError e (Ran (WriterT w m)),    MonadCont (Ran (WriterT w m)),    Eq,Ord,Show,etc. instance for Ran (WriterT w m)
+-- TODO: MonadError e (Ran (SW.WriterT w m)), MonadCont (Ran (SW.WriterT w m)), Eq,Ord,Show,etc. instance for Ran (SW.WriterT w m)
+-- TODO: MonadError e (Ran (ReaderT e m)),    MonadCont (ReaderT e m), MonadFix (ReaderT e m), MonadPlus (ReaderT e m)
hunk ./Control/Monad/Ran.hs 125
-class RanIso f where
+class RanFunctor f where
hunk ./Control/Monad/Ran.hs 132
-    liftRanT :: (RanIso m, RanIso (t m)) => Ran m a -> Ran (t m) a
-    outRan :: (RanIso m, RanIso (t m)) => Ran (t m) a -> t (Ran m) a
-    inRan :: (RanIso m, RanIso (t m)) => t (Ran m) a -> Ran (t m) a
+    liftRanT :: (RanFunctor m, RanFunctor (t m)) => Ran m a -> Ran (t m) a
+    outRan :: (RanFunctor m, RanFunctor (t m)) => Ran (t m) a -> t (Ran m) a
+    inRan :: (RanFunctor m, RanFunctor (t m)) => t (Ran m) a -> Ran (t m) a
hunk ./Control/Monad/Ran.hs 136
-instance RanIso f => Functor (Ran f) where
+instance RanFunctor f => Functor (Ran f) where
hunk ./Control/Monad/Ran.hs 139
-class (Monad (Ran f), Monad f, RanIso f) => RMonad f 
-instance (Monad (Ran f), Monad f, RanIso f) => RMonad f
+class    (Monad (Ran f), Monad f, RanFunctor f) => RanMonad f 
+instance (Monad (Ran f), Monad f, RanFunctor f) => RanMonad f
hunk ./Control/Monad/Ran.hs 142
-class (Applicative (Ran f), Applicative f, RanIso f) => RApplicative f 
-instance (Applicative (Ran f), Applicative f, RanIso f) => RApplicative f
+class    (Applicative (Ran f), Applicative f, RanFunctor f) => RanApplicative f 
+instance (Applicative (Ran f), Applicative f, RanFunctor f) => RanApplicative f
hunk ./Control/Monad/Ran.hs 145
-returnRanCodensity :: (RanIso m, G m ~ H m) => a -> Ran m a
+returnRanCodensity :: (RanFunctor m, G m ~ H m) => a -> Ran m a
hunk ./Control/Monad/Ran.hs 148
-bindRanCodensity :: (RanIso m, G m ~ H m) => Ran m a -> (a -> Ran m b) -> Ran m b
+bindRanCodensity :: (RanFunctor m, G m ~ H m) => Ran m a -> (a -> Ran m b) -> Ran m b
hunk ./Control/Monad/Ran.hs 151
-apRanCodensity :: (RanIso m, G m ~ H m) => Ran m (a -> b) -> Ran m a -> Ran m b
+apRanCodensity :: (RanFunctor m, G m ~ H m) => Ran m (a -> b) -> Ran m a -> Ran m b
hunk ./Control/Monad/Ran.hs 154
-liftRanCodensity :: (RanIso m, G m ~ H m, Monad (G m)) => G m a -> Ran m a
+liftRanCodensity :: (RanFunctor m, G m ~ H m, Monad (G m)) => G m a -> Ran m a
hunk ./Control/Monad/Ran.hs 157
-lowerRanCodensity :: (RanIso m, G m ~ H m, Monad (G m)) => Ran m a -> G m a 
+lowerRanCodensity :: (RanFunctor m, G m ~ H m, Monad (G m)) => Ran m a -> G m a 
hunk ./Control/Monad/Ran.hs 160
-mfixRanCodensity :: (RanIso m, G m ~ H m, MonadFix (G m)) => (a -> Ran m a) -> Ran m a
+mfixRanCodensity :: (RanFunctor m, G m ~ H m, MonadFix (G m)) => (a -> Ran m a) -> Ran m a
hunk ./Control/Monad/Ran.hs 163
-mfixRan :: (RanIso m, MonadFix m) => (a -> Ran m a) -> Ran m a
+mfixRan :: (RanFunctor m, MonadFix m) => (a -> Ran m a) -> Ran m a
hunk ./Control/Monad/Ran.hs 167
-instance RanIso Identity where
+instance RanFunctor Identity where
hunk ./Control/Monad/Ran.hs 173
-instance Pointed (Ran Identity) where
-    point = returnRanCodensity
-
hunk ./Control/Monad/Ran.hs 197
-instance RanIso (State s) where
+instance RanFunctor (State s) where
hunk ./Control/Monad/Ran.hs 203
-instance Pointed (Ran (State s)) where
-    point = returnRanCodensity
-
hunk ./Control/Monad/Ran.hs 217
-instance Monoid w => RanIso (Writer w) where
+instance Monoid w => RanFunctor (Writer w) where
hunk ./Control/Monad/Ran.hs 223
-instance Monoid w => Pointed (Ran (Writer w)) where
-    point = returnRanCodensity
-
hunk ./Control/Monad/Ran.hs 249
-instance RanIso IO where
+instance RanFunctor IO where
hunk ./Control/Monad/Ran.hs 278
-instance RanIso (ST s) where
+instance RanFunctor (ST s) where
hunk ./Control/Monad/Ran.hs 298
-instance RanIso STM where
+instance RanFunctor STM where
hunk ./Control/Monad/Ran.hs 313
--- TODO: make a MonadSTM class
+-- TODO: a MonadSTM class?
hunk ./Control/Monad/Ran.hs 318
-instance RanIso (Yoneda f) where
+instance RanFunctor (Yoneda f) where
hunk ./Control/Monad/Ran.hs 330
-instance Pointed f => Pointed (Ran (Yoneda f)) where
-    point = liftRan . point
-
hunk ./Control/Monad/Ran.hs 372
--- note Endo is not a Hask Functor and Maybe is not a Codensity monad, so this is trickier
-instance RanIso Maybe where
+-- note Endo is not a Hask Functor and Maybe is not a Codensity monad, so this is trickier the what has come above
+
+instance RanFunctor Maybe where
hunk ./Control/Monad/Ran.hs 422
-instance RanIso (Either e) where
+instance RanFunctor (Either e) where
hunk ./Control/Monad/Ran.hs 439
---  catchError f h = Ran (\k -> ErrorH (\e -> getErrorH (getRan f k) e))
---  catchError :: Ran (Either e) a -> (e -> Ran (Either e) a -> Ran (Either e) a
hunk ./Control/Monad/Ran.hs 465
+-- Anonymous Reader
hunk ./Control/Monad/Ran.hs 468
-instance RanIso ((->)e) where
+instance RanFunctor ((->)e) where
hunk ./Control/Monad/Ran.hs 474
-instance Pointed (Ran ((->)e)) where
-    point = return
-
hunk ./Control/Monad/Ran.hs 490
+-- Reader
hunk ./Control/Monad/Ran.hs 493
-instance RanIso (Reader e) where
+instance RanFunctor (Reader e) where
hunk ./Control/Monad/Ran.hs 499
-instance Pointed (Ran (Reader e)) where
-    point = return
-
hunk ./Control/Monad/Ran.hs 516
-newtype RWSG w s o = RWSG { getRWSG :: s -> w -> o } 
-newtype RWSH r w s o = RWSH { getRWSH :: r -> s -> w -> o }
-
--- Lazy RWS
-
--- RWS r w s a ~ forall o. (a -> s -> w -> o) -> r -> s -> w -> o ~ forall o. (a -> RWSG w s o) -> RWSH r w s -> o
-instance Monoid w => RanIso (RWS r w s) where
-    type G (RWS r w s) = RWSG w s 
-    type H (RWS r w s) = RWSH r w s
-    liftRan (RWS m) = Ran (\k -> RWSH(\r s w -> let ~(a,s,w) = m r s in getRWSG (k a) s w))
-    lowerRan (Ran m) = RWS (\r s -> getRWSH (m (\a -> RWSG(\s' w -> (a,s',w)))) r s mempty)
-
-instance Monoid w => Pointed (Ran (RWS r w s)) where
-    point = return
-
-instance Monoid w => Applicative (Ran (RWS r w s)) where
-    pure = return
-    Ran f <*> Ran g = Ran (\k -> RWSH (\r -> getRWSH (f (\f' -> RWSG (getRWSH (g (k . f')) r))) r))
-
-instance Monoid w => Monad (Ran (RWS r w s)) where
-    return a = Ran (\k -> RWSH (\_ -> getRWSG (k a))) 
-    Ran f >>= h = Ran (\k -> RWSH (\r -> getRWSH (f (\a -> RWSG (getRWSH (getRan (h a) k) r))) r))
-
-instance Monoid w => MonadReader r (Ran (RWS r w s)) where 
-    ask = Ran (\k -> RWSH (\r -> getRWSG (k r)))
-    local f (Ran m) = Ran (\k -> RWSH (\r -> getRWSH (m k) (f r)))
-
-instance Monoid w => MonadWriter w (Ran (RWS r w s)) where
-    tell w = Ran (\k -> RWSH (\_ s w' -> getRWSG (k ()) s (w `mappend` w')))
-    listen (Ran m) = Ran (\k -> m (\a -> RWSG (\s w -> getRWSG (k (a,w)) s w)))
-    pass (Ran m)   = Ran (\k -> m (\ ~(a,p) -> RWSG (\s w -> getRWSG (k a) s (p w))))
-
-instance Monoid w => MonadState s (Ran (RWS r w s)) where
-    get = Ran (\k -> RWSH (\_ s -> getRWSG (k s) s))
-    put s = Ran (\k -> RWSH (\_ _ -> getRWSG (k ()) s))
-
--- Strict RWS
-
--- RWS r w s a ~ forall o. (a -> s -> w -> o) -> r -> s -> w -> o ~ forall o. (a -> RWSG w s o) -> RWSH r w s -> o
-instance Monoid w => RanIso (SR.RWS r w s) where
-    type G (SR.RWS r w s) = RWSG w s 
-    type H (SR.RWS r w s) = RWSH r w s
-    liftRan (SR.RWS m) = Ran (\k -> RWSH(\r s w -> let (a,s,w) = m r s in getRWSG (k a) s w))
-    lowerRan (Ran m) = SR.RWS (\r s -> getRWSH (m (\a -> RWSG(\s' w -> (a,s',w)))) r s mempty)
-
-instance Monoid w => Pointed (Ran (SR.RWS r w s)) where
-    point = return
-
-instance Monoid w => Applicative (Ran (SR.RWS r w s)) where
-    pure = return
-    Ran f <*> Ran g = Ran (\k -> RWSH (\r -> getRWSH (f (\f' -> RWSG (getRWSH (g (k . f')) r))) r))
-
-instance Monoid w => Monad (Ran (SR.RWS r w s)) where
-    return a = Ran (\k -> RWSH (\_ -> getRWSG (k a))) 
-    Ran f >>= h = Ran (\k -> RWSH (\r -> getRWSH (f (\a -> RWSG (getRWSH (getRan (h a) k) r))) r))
-
-instance Monoid w => MonadReader r (Ran (SR.RWS r w s)) where 
-    ask = Ran (\k -> RWSH (\r -> getRWSG (k r)))
-    local f (Ran m) = Ran (\k -> RWSH (\r -> getRWSH (m k) (f r)))
-
-instance Monoid w => MonadWriter w (Ran (SR.RWS r w s)) where
-    tell w = Ran (\k -> RWSH (\_ s w' -> getRWSG (k ()) s (w `mappend` w')))
-    listen (Ran m) = Ran (\k -> m (\a -> RWSG (\s w -> getRWSG (k (a,w)) s w)))
-    pass (Ran m)   = Ran (\k -> m (\(a,p) -> RWSG (\s w -> getRWSG (k a) s (p w))))
hunk ./Control/Monad/Ran.hs 517
-instance Monoid w => MonadState s (Ran (SR.RWS r w s)) where
-    get = Ran (\k -> RWSH (\_ s -> getRWSG (k s) s))
-    put s = Ran (\k -> RWSH (\_ _ -> getRWSG (k ()) s))
-
--- Ran Transformers
+-- ReaderT 
hunk ./Control/Monad/Ran.hs 520
-instance RanIso m => RanIso (ReaderT e m) where
+instance RanFunctor m => RanFunctor (ReaderT e m) where
hunk ./Control/Monad/Ran.hs 531
-instance RMonad m => Pointed (Ran (ReaderT e m)) where
-    point = inRan . return
-
-instance RMonad m => Applicative (Ran (ReaderT e m)) where
+instance RanMonad m => Applicative (Ran (ReaderT e m)) where
hunk ./Control/Monad/Ran.hs 535
-instance (RMonad m, MonadPlus (Ran m)) => Alternative (Ran (ReaderT e m)) where
+instance (RanMonad m, MonadPlus (Ran m)) => Alternative (Ran (ReaderT e m)) where
hunk ./Control/Monad/Ran.hs 539
-instance RMonad m => Monad (Ran (ReaderT e m)) where
+instance RanMonad m => Monad (Ran (ReaderT e m)) where
hunk ./Control/Monad/Ran.hs 543
-instance (RMonad m, MonadState s (Ran m)) => MonadState s (Ran (ReaderT e m)) where
+instance (RanMonad m, MonadState s (Ran m)) => MonadState s (Ran (ReaderT e m)) where
hunk ./Control/Monad/Ran.hs 547
-instance RMonad m => MonadReader r (Ran (ReaderT r m)) where
+instance RanMonad m => MonadReader r (Ran (ReaderT r m)) where
hunk ./Control/Monad/Ran.hs 551
-instance (RMonad m, MonadWriter w (Ran m)) => MonadWriter w (Ran (ReaderT e m)) where
+instance (RanMonad m, MonadWriter w (Ran m)) => MonadWriter w (Ran (ReaderT e m)) where
hunk ./Control/Monad/Ran.hs 556
-instance (RMonad m, MonadIO (Ran m)) => MonadIO (Ran (ReaderT e m)) where
+instance (RanMonad m, MonadIO (Ran m)) => MonadIO (Ran (ReaderT e m)) where
hunk ./Control/Monad/Ran.hs 559
-instance (RMonad m, MonadPlus (Ran m)) => MonadPlus (Ran (ReaderT e m)) where
+instance (RanMonad m, MonadPlus (Ran m)) => MonadPlus (Ran (ReaderT e m)) where
hunk ./Control/Monad/Ran.hs 563
-instance (RMonad m, MonadFix (Ran m)) => MonadFix (Ran (ReaderT e m)) where
+instance (RanMonad m, MonadFix (Ran m)) => MonadFix (Ran (ReaderT e m)) where
hunk ./Control/Monad/Ran.hs 566
--- TODO: instance MonadError (ReaderT e m), MonadCont (ReaderT e m), MonadFix (ReaderT e m), ...
--- MonadPlus (ReaderT e m), MonadFix (ReaderT e m)
hunk ./Control/Monad/Ran.hs 567
+-- ErrorT 
hunk ./Control/Monad/Ran.hs 569
--- | @ErrorT e (Ran_g h) a = Ran_g (ErrorTH e h) a@
+-- @ErrorT e (Ran_g h) a = Ran_g (ErrorTH e h) a@
hunk ./Control/Monad/Ran.hs 573
-instance (RanIso m, Error e) => RanIso (ErrorT e m) where
+instance (RanFunctor m, Error e) => RanFunctor (ErrorT e m) where
hunk ./Control/Monad/Ran.hs 579
-unwrapErrorT :: (RanIso m) => Ran (ErrorT a m) b -> Ran m (Either a b)
+unwrapErrorT :: (RanFunctor m) => Ran (ErrorT a m) b -> Ran m (Either a b)
hunk ./Control/Monad/Ran.hs 582
-wrapErrorT :: (RanIso m) => Ran m (Either a b) -> Ran (ErrorT a m) b
+wrapErrorT :: (RanFunctor m) => Ran m (Either a b) -> Ran (ErrorT a m) b
hunk ./Control/Monad/Ran.hs 590
-instance (RMonad m, Error e) => Pointed (Ran (ErrorT e m)) where
-    point = inRan . return
-
-instance (RMonad m, Error e) => Applicative (Ran (ErrorT e m)) where
+instance (RanMonad m, Error e) => Applicative (Ran (ErrorT e m)) where
hunk ./Control/Monad/Ran.hs 594
-instance (RMonad m, Error e, MonadPlus (Ran m)) => Alternative (Ran (ErrorT e m)) where
+instance (RanMonad m, Error e, MonadPlus (Ran m)) => Alternative (Ran (ErrorT e m)) where
hunk ./Control/Monad/Ran.hs 598
-instance (RMonad m, Error e)  => Monad (Ran (ErrorT e m)) where
+instance (RanMonad m, Error e)  => Monad (Ran (ErrorT e m)) where
hunk ./Control/Monad/Ran.hs 602
-instance (RMonad m, Error e, MonadState s (Ran m)) => MonadState s (Ran (ErrorT e m)) where
+instance (RanMonad m, Error e, MonadState s (Ran m)) => MonadState s (Ran (ErrorT e m)) where
hunk ./Control/Monad/Ran.hs 606
-instance (RMonad m, Error e, MonadReader r (Ran m)) => MonadReader r (Ran (ErrorT e m)) where
+instance (RanMonad m, Error e, MonadReader r (Ran m)) => MonadReader r (Ran (ErrorT e m)) where
hunk ./Control/Monad/Ran.hs 610
-instance (RMonad m, Error e, MonadWriter w (Ran m)) => MonadWriter w (Ran (ErrorT e m)) where
+instance (RanMonad m, Error e, MonadWriter w (Ran m)) => MonadWriter w (Ran (ErrorT e m)) where
hunk ./Control/Monad/Ran.hs 615
-instance (RMonad m, Error e, MonadRWS r w s (Ran m)) => MonadRWS r w s (Ran (ErrorT e m))
+instance (RanMonad m, Error e, MonadRWS r w s (Ran m)) => MonadRWS r w s (Ran (ErrorT e m))
hunk ./Control/Monad/Ran.hs 617
-instance (RMonad m, Error e, MonadIO (Ran m)) => MonadIO (Ran (ErrorT e m)) where
+instance (RanMonad m, Error e, MonadIO (Ran m)) => MonadIO (Ran (ErrorT e m)) where
hunk ./Control/Monad/Ran.hs 620
-instance (RMonad m, Error e, MonadFix (Ran m)) => MonadFix (Ran (ErrorT e m)) where
+instance (RanMonad m, Error e, MonadFix (Ran m)) => MonadFix (Ran (ErrorT e m)) where
hunk ./Control/Monad/Ran.hs 623
-instance (RanIso m, Eq (Ran m (Either a b))) => Eq (Ran (ErrorT a m) b) where
+instance (RanFunctor m, Eq (Ran m (Either a b))) => Eq (Ran (ErrorT a m) b) where
hunk ./Control/Monad/Ran.hs 626
-instance (RanIso m, Ord (Ran m (Either a b))) => Ord (Ran (ErrorT a m) b) where
+instance (RanFunctor m, Ord (Ran m (Either a b))) => Ord (Ran (ErrorT a m) b) where
hunk ./Control/Monad/Ran.hs 629
-instance (RanIso m, Show (Ran m (Either a b))) => Show (Ran (ErrorT a m) b) where
+instance (RanFunctor m, Show (Ran m (Either a b))) => Show (Ran (ErrorT a m) b) where
hunk ./Control/Monad/Ran.hs 633
-instance (RanIso m, Read (Ran m (Either a b))) => Read (Ran (ErrorT a m) b) where
+instance (RanFunctor m, Read (Ran m (Either a b))) => Read (Ran (ErrorT a m) b) where
hunk ./Control/Monad/Ran.hs 638
--- Lazy Writer
+-- Lazy Writer as State
hunk ./Control/Monad/Ran.hs 640
-instance (Monoid w, RanIso m) => RanIso (WriterT w m) where
+instance (Monoid w, RanFunctor m) => RanFunctor (WriterT w m) where
hunk ./Control/Monad/Ran.hs 655
-instance (Monoid w, RMonad m) => Pointed (Ran (WriterT w m)) where
-    point = inRan . return
+instance (Monoid w, RanMonad m) => Applicative (Ran (WriterT w m)) where
+    pure = inRan . return
+    f <*> g = inRan (outRan f `ap` outRan g)
+
+instance (Monoid w, RanMonad m, MonadPlus (Ran m)) => Alternative (Ran (WriterT w m)) where
+    empty = inRan mzero
+    f <|> g = inRan (outRan f `mplus` outRan g)
+
+instance (Monoid w, RanMonad m) => Monad (Ran (WriterT w m)) where
+    return = inRan . return
+    m >>= f = inRan (outRan m >>= outRan . f)
+
+instance (Monoid w, RanMonad m, MonadState s (Ran m)) => MonadState s (Ran (WriterT w m)) where
+    get = inRan get
+    put = inRan . put
+
+instance (Monoid w, RanMonad m) => MonadWriter w (Ran (WriterT w m)) where
+    tell = inRan . tell
+    listen = inRan . listen . outRan
+    pass = inRan . pass . outRan
+
+instance (Monoid w, RanMonad m, MonadReader e (Ran m)) => MonadReader e (Ran (WriterT w m)) where
+    ask = inRan ask
+    local f = inRan . local f . outRan
+
+instance (Monoid w, RanMonad m, MonadIO (Ran m)) => MonadIO (Ran (WriterT w m)) where
+    liftIO = inRan . liftIO
+
+instance (Monoid w, RanMonad m, MonadPlus (Ran m)) => MonadPlus (Ran (WriterT w m)) where
+    mzero = inRan mzero
+    a `mplus` b = inRan (outRan a `mplus` outRan b)
+
+instance (Monoid w, RanMonad m, MonadFix (Ran m)) => MonadFix (Ran (WriterT w m)) where
+    mfix f = inRan $ mfix (outRan . f)
+
+-- Strict Writer as State
+
+instance (Monoid w, RanFunctor m) => RanFunctor (SW.WriterT w m) where
+    type G (SW.WriterT w m) = ReaderT w (G m)
+    type H (SW.WriterT w m) = ReaderT w (H m)
+
+    liftRan (SW.WriterT m) 
+        = Ran (\k -> ReaderT (\w -> getRan (liftRan m) (\ ~(a,w') -> runReaderT (k a) (w `mappend` w'))))
hunk ./Control/Monad/Ran.hs 699
-instance (Monoid w, RMonad m) => Applicative (Ran (WriterT w m)) where
+    lowerRan (Ran m) 
+        = SW.WriterT (lowerRan (Ran (\k -> runReaderT (m (\a -> ReaderT (\w' -> k (a,w')))) mempty)))
+
+instance Monoid w => RanTrans (SW.WriterT w) where
+    liftRanT (Ran m) = Ran (\k -> ReaderT (\w -> m (\a -> runReaderT (k a) w)))
+    outRan (Ran m)   = SW.WriterT (Ran (\k -> runReaderT (m (\a -> ReaderT (\w -> k (a,w)))) mempty))
+    inRan (SW.WriterT m) = Ran (\k -> ReaderT (\w -> getRan m (\ ~(a,w') -> runReaderT (k a) (w `mappend` w'))))
+    
+instance (Monoid w, RanMonad m) => Applicative (Ran (SW.WriterT w m)) where
hunk ./Control/Monad/Ran.hs 711
-instance (Monoid w, RMonad m, MonadPlus (Ran m)) => Alternative (Ran (WriterT w m)) where
+instance (Monoid w, RanMonad m, MonadPlus (Ran m)) => Alternative (Ran (SW.WriterT w m)) where
hunk ./Control/Monad/Ran.hs 715
-instance (Monoid w, RMonad m) => Monad (Ran (WriterT w m)) where
+instance (Monoid w, RanMonad m) => Monad (Ran (SW.WriterT w m)) where
hunk ./Control/Monad/Ran.hs 719
-instance (Monoid w, RMonad m, MonadState s (Ran m)) => MonadState s (Ran (WriterT w m)) where
+instance (Monoid w, RanMonad m, MonadState s (Ran m)) => MonadState s (Ran (SW.WriterT w m)) where
hunk ./Control/Monad/Ran.hs 723
-instance (Monoid w, RMonad m) => MonadWriter w (Ran (WriterT w m)) where
+instance (Monoid w, RanMonad m) => MonadWriter w (Ran (SW.WriterT w m)) where
hunk ./Control/Monad/Ran.hs 728
-instance (Monoid w, RMonad m, MonadReader e (Ran m)) => MonadReader e (Ran (WriterT w m)) where
+instance (Monoid w, RanMonad m, MonadReader e (Ran m)) => MonadReader e (Ran (SW.WriterT w m)) where
hunk ./Control/Monad/Ran.hs 732
-instance (Monoid w, RMonad m, MonadIO (Ran m)) => MonadIO (Ran (WriterT w m)) where
+instance (Monoid w, RanMonad m, MonadIO (Ran m)) => MonadIO (Ran (SW.WriterT w m)) where
hunk ./Control/Monad/Ran.hs 735
-instance (Monoid w, RMonad m, MonadPlus (Ran m)) => MonadPlus (Ran (WriterT w m)) where
+instance (Monoid w, RanMonad m, MonadPlus (Ran m)) => MonadPlus (Ran (SW.WriterT w m)) where
hunk ./Control/Monad/Ran.hs 739
-instance (Monoid w, RMonad m, MonadFix (Ran m)) => MonadFix (Ran (WriterT w m)) where
+instance (Monoid w, RanMonad m, MonadFix (Ran m)) => MonadFix (Ran (SW.WriterT w m)) where
hunk ./Control/Monad/Ran.hs 744
-instance RanIso m => RanIso (StateT s m) where
+instance RanFunctor m => RanFunctor (StateT s m) where
hunk ./Control/Monad/Ran.hs 758
-instance RMonad m => Pointed (Ran (StateT e m)) where
-    point = inRan . return
-
-instance RMonad m => Applicative (Ran (StateT e m)) where
+instance RanMonad m => Applicative (Ran (StateT e m)) where
hunk ./Control/Monad/Ran.hs 762
-instance (RMonad m, MonadPlus (Ran m)) => Alternative (Ran (StateT s m)) where
+instance (RanMonad m, MonadPlus (Ran m)) => Alternative (Ran (StateT s m)) where
hunk ./Control/Monad/Ran.hs 766
-instance RMonad m => Monad (Ran (StateT s m)) where
+instance RanMonad m => Monad (Ran (StateT s m)) where
hunk ./Control/Monad/Ran.hs 770
-instance RMonad m => MonadState s (Ran (StateT s m)) where
+instance RanMonad m => MonadState s (Ran (StateT s m)) where
hunk ./Control/Monad/Ran.hs 774
-instance (RMonad m, MonadWriter w (Ran m)) => MonadWriter w (Ran (StateT s m)) where
+instance (RanMonad m, MonadWriter w (Ran m)) => MonadWriter w (Ran (StateT s m)) where
hunk ./Control/Monad/Ran.hs 779
-instance (RMonad m, MonadReader e (Ran m)) => MonadReader e (Ran (StateT s m)) where
+instance (RanMonad m, MonadReader e (Ran m)) => MonadReader e (Ran (StateT s m)) where
hunk ./Control/Monad/Ran.hs 783
-instance (RMonad m, MonadIO (Ran m)) => MonadIO (Ran (StateT s m)) where
+instance (RanMonad m, MonadIO (Ran m)) => MonadIO (Ran (StateT s m)) where
hunk ./Control/Monad/Ran.hs 786
-instance (RMonad m, MonadPlus (Ran m)) => MonadPlus (Ran (StateT s m)) where
+instance (RanMonad m, MonadPlus (Ran m)) => MonadPlus (Ran (StateT s m)) where
hunk ./Control/Monad/Ran.hs 790
-instance (RMonad m, MonadFix (Ran m)) => MonadFix (Ran (StateT s m)) where
+instance (RanMonad m, MonadFix (Ran m)) => MonadFix (Ran (StateT s m)) where
hunk ./Control/Monad/Ran.hs 793
-
-
hunk ./Control/Monad/Ran.hs 795
-instance RanIso m => RanIso (SS.StateT s m) where
+instance RanFunctor m => RanFunctor (SS.StateT s m) where
hunk ./Control/Monad/Ran.hs 809
-instance RMonad m => Pointed (Ran (SS.StateT e m)) where
-    point = inRan . return
-
-instance RMonad m => Applicative (Ran (SS.StateT e m)) where
+instance RanMonad m => Applicative (Ran (SS.StateT e m)) where
hunk ./Control/Monad/Ran.hs 813
-instance (RMonad m, MonadPlus (Ran m)) => Alternative (Ran (SS.StateT s m)) where
+instance (RanMonad m, MonadPlus (Ran m)) => Alternative (Ran (SS.StateT s m)) where
hunk ./Control/Monad/Ran.hs 817
-instance RMonad m => Monad (Ran (SS.StateT s m)) where
+instance RanMonad m => Monad (Ran (SS.StateT s m)) where
hunk ./Control/Monad/Ran.hs 821
-instance RMonad m => MonadState s (Ran (SS.StateT s m)) where
+instance RanMonad m => MonadState s (Ran (SS.StateT s m)) where
hunk ./Control/Monad/Ran.hs 825
-instance (RMonad m, MonadWriter w (Ran m)) => MonadWriter w (Ran (SS.StateT s m)) where
+instance (RanMonad m, MonadWriter w (Ran m)) => MonadWriter w (Ran (SS.StateT s m)) where
hunk ./Control/Monad/Ran.hs 830
-instance (RMonad m, MonadReader e (Ran m)) => MonadReader e (Ran (SS.StateT s m)) where
+instance (RanMonad m, MonadReader e (Ran m)) => MonadReader e (Ran (SS.StateT s m)) where
hunk ./Control/Monad/Ran.hs 834
-instance (RMonad m, MonadIO (Ran m)) => MonadIO (Ran (SS.StateT s m)) where
+instance (RanMonad m, MonadIO (Ran m)) => MonadIO (Ran (SS.StateT s m)) where
hunk ./Control/Monad/Ran.hs 837
-instance (RMonad m, MonadPlus (Ran m)) => MonadPlus (Ran (SS.StateT s m)) where
+instance (RanMonad m, MonadPlus (Ran m)) => MonadPlus (Ran (SS.StateT s m)) where
hunk ./Control/Monad/Ran.hs 841
-instance (RMonad m, MonadFix (Ran m)) => MonadFix (Ran (SS.StateT s m)) where
+instance (RanMonad m, MonadFix (Ran m)) => MonadFix (Ran (SS.StateT s m)) where
hunk ./Control/Monad/Ran.hs 844
+-- Lazy RwS Transformer
+
hunk ./Control/Monad/Ran.hs 850
-instance (Monoid w, RanIso m) => RanIso (RWST r w s m) where
+instance (Monoid w, RanFunctor m) => RanFunctor (RWST r w s m) where
hunk ./Control/Monad/Ran.hs 861
-instance (RMonad m, Monoid w) => Pointed (Ran (RWST r w s m)) where
-    point = inRan . return
-
-instance (RMonad m, Monoid w) => Applicative (Ran (RWST r w s m)) where
+instance (RanMonad m, Monoid w) => Applicative (Ran (RWST r w s m)) where
hunk ./Control/Monad/Ran.hs 865
-instance (RMonad m, MonadPlus (Ran m), Monoid w) => Alternative (Ran (RWST r w s m)) where
+instance (RanMonad m, MonadPlus (Ran m), Monoid w) => Alternative (Ran (RWST r w s m)) where
hunk ./Control/Monad/Ran.hs 869
-instance (RMonad m, Monoid w) => Monad (Ran (RWST r w s m)) where
+instance (RanMonad m, Monoid w) => Monad (Ran (RWST r w s m)) where
hunk ./Control/Monad/Ran.hs 873
-instance (RMonad m, Monoid w) => MonadState s (Ran (RWST r w s m)) where
+instance (RanMonad m, Monoid w) => MonadState s (Ran (RWST r w s m)) where
hunk ./Control/Monad/Ran.hs 877
-instance (RMonad m, Monoid w) => MonadWriter w (Ran (RWST r w s m)) where
+instance (RanMonad m, Monoid w) => MonadWriter w (Ran (RWST r w s m)) where
hunk ./Control/Monad/Ran.hs 882
-instance (RMonad m, Monoid w) => MonadReader r (Ran (RWST r w s m)) where
+instance (RanMonad m, Monoid w) => MonadReader r (Ran (RWST r w s m)) where
hunk ./Control/Monad/Ran.hs 886
-instance (RMonad m, Monoid w, MonadIO (Ran m)) => MonadIO (Ran (RWST r w s m)) where
+instance (RanMonad m, Monoid w, MonadIO (Ran m)) => MonadIO (Ran (RWST r w s m)) where
hunk ./Control/Monad/Ran.hs 889
-instance (RMonad m, Monoid w, MonadPlus (Ran m)) => MonadPlus (Ran (RWST r w s m)) where
+instance (RanMonad m, Monoid w, MonadPlus (Ran m)) => MonadPlus (Ran (RWST r w s m)) where
hunk ./Control/Monad/Ran.hs 893
-instance (RMonad m, Monoid w, MonadFix (Ran m)) => MonadFix (Ran (RWST r w s m)) where
+instance (RanMonad m, Monoid w, MonadFix (Ran m)) => MonadFix (Ran (RWST r w s m)) where
hunk ./Control/Monad/Ran.hs 896
--- Strict RWS
+-- Strict RWS Transformer
hunk ./Control/Monad/Ran.hs 899
-instance (Monoid w, RanIso m) => RanIso (SR.RWST r w s m) where
+instance (Monoid w, RanFunctor m) => RanFunctor (SR.RWST r w s m) where
hunk ./Control/Monad/Ran.hs 910
-instance (RMonad m, Monoid w) => Pointed (Ran (SR.RWST r w s m)) where
-    point = inRan . return
-
-instance (RMonad m, Monoid w) => Applicative (Ran (SR.RWST r w s m)) where
+instance (RanMonad m, Monoid w) => Applicative (Ran (SR.RWST r w s m)) where
hunk ./Control/Monad/Ran.hs 914
-instance (RMonad m, MonadPlus (Ran m), Monoid w) => Alternative (Ran (SR.RWST r w s m)) where
+instance (RanMonad m, MonadPlus (Ran m), Monoid w) => Alternative (Ran (SR.RWST r w s m)) where
hunk ./Control/Monad/Ran.hs 918
-instance (RMonad m, Monoid w) => Monad (Ran (SR.RWST r w s m)) where
+instance (RanMonad m, Monoid w) => Monad (Ran (SR.RWST r w s m)) where
hunk ./Control/Monad/Ran.hs 922
-instance (RMonad m, Monoid w) => MonadState s (Ran (SR.RWST r w s m)) where
+instance (RanMonad m, Monoid w) => MonadState s (Ran (SR.RWST r w s m)) where
hunk ./Control/Monad/Ran.hs 926
-instance (RMonad m, Monoid w) => MonadWriter w (Ran (SR.RWST r w s m)) where
+instance (RanMonad m, Monoid w) => MonadWriter w (Ran (SR.RWST r w s m)) where
hunk ./Control/Monad/Ran.hs 931
-instance (RMonad m, Monoid w) => MonadReader r (Ran (SR.RWST r w s m)) where
+instance (RanMonad m, Monoid w) => MonadReader r (Ran (SR.RWST r w s m)) where
hunk ./Control/Monad/Ran.hs 935
-instance (RMonad m, Monoid w, MonadIO (Ran m)) => MonadIO (Ran (SR.RWST r w s m)) where
+instance (RanMonad m, Monoid w, MonadIO (Ran m)) => MonadIO (Ran (SR.RWST r w s m)) where
hunk ./Control/Monad/Ran.hs 938
-instance (RMonad m, Monoid w, MonadPlus (Ran m)) => MonadPlus (Ran (SR.RWST r w s m)) where
+instance (RanMonad m, Monoid w, MonadPlus (Ran m)) => MonadPlus (Ran (SR.RWST r w s m)) where
hunk ./Control/Monad/Ran.hs 942
-instance (RMonad m, Monoid w, MonadFix (Ran m)) => MonadFix (Ran (SR.RWST r w s m)) where
+instance (RanMonad m, Monoid w, MonadFix (Ran m)) => MonadFix (Ran (SR.RWST r w s m)) where
hunk ./Control/Monad/Ran.hs 944
-{-
--- (a -> r) -> r
-instance RMonad (Cont r) where
-    type G (Cont r) = Const r
-    type H (Cont r) = Const r
-
--- (a -> G m r) -> H m r
-data ContT r f a = ConstT { getConstT :: f r } 
-instance RMonad m => RMonad (ContT r m) where
-    type G (ContT r m) = ConstT r (G m)
-    type H (ContT r m) = ConstT r (H m)
--}
hunk ./Control/Monad/Ran.hs 946
--- | A pointed functor is a functor with a discriminated family of f-coalgebras
-class Functor f => Pointed f where
-    point :: a -> f a
-
-instance Pointed Maybe where point = Just
-instance Pointed [] where point = return
-instance Pointed (Cont r) where point = return
-instance Monad m => Pointed (ContT r m) where point = return
-instance Pointed Identity where point = Identity
-instance Pointed (Either a) where point = Right
-instance (Error e, Monad m) => Pointed (ErrorT e m) where point = return
-instance Pointed (Reader r) where point = return
-instance Monad m => Pointed (ReaderT r m) where point = return
-instance Pointed ((->)r) where point = return
-instance Pointed (SS.State w) where point = return
-instance Pointed (State w) where point = return
-instance Monad m => Pointed (SS.StateT w m) where point = return
-instance Monad m => Pointed (StateT w m) where point = return
-instance Monoid w => Pointed (SW.Writer w) where point = return
-instance Monoid w => Pointed (Writer w) where point = return
-instance (Monoid w, Monad m) => Pointed (SW.WriterT w m) where point = return
-instance (Monoid w, Monad m) => Pointed (WriterT w m) where point = return
-instance Monoid w => Pointed (SR.RWS r w s) where point = return
-instance Monoid w => Pointed (RWS r w s) where point = return
-instance (Monoid w, Monad m) => Pointed (SR.RWST r w s m) where point = return
-instance (Monoid w, Monad m) => Pointed (RWST r w s m) where point = return
-instance Monad m => Pointed (ListT m) where point = return
hunk ./Control/Monad/Ran.hs 955
-instance Pointed (Codensity f) where
-    point x = Codensity (\k -> k x)
-
hunk ./Control/Monad/Ran.hs 1002
-lowerCodensityPointed :: Applicative f => Codensity f a -> f a
-lowerCodensityPointed = flip getCodensity pure
-
hunk ./Control/Monad/Ran.hs 1004
-instance RanIso (Codensity f) where
+instance RanFunctor (Codensity f) where
hunk ./Control/Monad/Ran.hs 1016
-instance Pointed (Ran (Codensity f)) where
-    point = returnRanCodensity
-
hunk ./Control/Monad/Ran.hs 1069
-instance Pointed f => Pointed (Yoneda f) where
-    point a = Yoneda (\f -> point (f a))
-
hunk ./Control/Monad/Ran.hs 1113
+-- Cont
+
+-- (a -> r) -> r ~ forall o. (a -> Const r o) -> Const r o
+instance RanFunctor (Cont r) where
+    type G (Cont r) = Const r
+    type H (Cont r) = Const r
+    liftRan (Cont f) = Ran (\k -> Const (f (getConst . k)))
+    lowerRan (Ran f) = Cont (\k -> getConst (f (Const . k)))
+    
+instance Applicative (Ran (Cont r)) where
+    pure = returnRanCodensity
+    (<*>) = apRanCodensity
+
+instance Monad (Ran (Cont r)) where
+    return = returnRanCodensity
+    (>>=) = bindRanCodensity
+
+instance MonadCont (Ran (Cont r)) where
+    callCC f = Ran (\c -> getRan (f (\a -> Ran (\_ -> Const (getConst (c a))))) c)
+
+-- (a -> m r) -> m r 
+data ConstT r f a = ConstT { getConstT :: f r } 
+instance RanFunctor (ContT r m) where
+    type G (ContT r m) = ConstT r m
+    type H (ContT r m) = ConstT r m
+    liftRan (ContT f) = Ran (\k -> ConstT (f (getConstT . k)))
+    lowerRan (Ran f) = ContT (\k -> getConstT (f (ConstT . k)))
+
+instance Monad (Ran (ContT r m)) where
+    return = returnRanCodensity
+    (>>=) = bindRanCodensity
+
+instance MonadCont (Ran (ContT r m)) where
+    callCC f = Ran (\c -> getRan (f (\a -> Ran (\_ -> ConstT (getConstT (c a))))) c)
hunk ./monad-ran.cabal 2
-version:                0.0.10
+version:                0.1.0
hunk ./monad-ran.cabal 6
-category:               Control
+category:               Control, Monads
hunk ./monad-ran.cabal 11
-synopsis:               Fast implementations of monads and monad transformers using right Kan extensions
+synopsis:               Fast monads and monad transformers
}
