[auto
ekmett@gmail.com**20090414092313
 Ignore-this: 20f047b16d7941f6434a242697086013
] {
hunk ./Control/Monad/Ran.hs 4
-    ( Yoneda(..)
+    ( 
+      -- * The Yoneda Lemma
+      Yoneda(..)
+      -- * The codensity monad of a functor
hunk ./Control/Monad/Ran.hs 9
+      -- * A right Kan extension monad transformer
hunk ./Control/Monad/Ran.hs 11
+      -- * Representing monads as right Kan extensions
hunk ./Control/Monad/Ran.hs 20
+import Data.Maybe (maybe)
hunk ./Control/Monad/Ran.hs 31
+-- | The Yoneda lemma
+
hunk ./Control/Monad/Ran.hs 52
+-- | The Codensity monad of a functor/monad generated by a functor
+
hunk ./Control/Monad/Ran.hs 65
-    m >>= k = Codensity (\c -> getCodensity m (\a -> getCodensity (k a) c))
+    Codensity m >>= k = Codensity (\c -> m (\a -> getCodensity (k a) c))
hunk ./Control/Monad/Ran.hs 76
--- .. Pointed
+-- .. runCodensityPointed
hunk ./Control/Monad/Ran.hs 78
+-- | A right Kan extension transformer for a monad
hunk ./Control/Monad/Ran.hs 81
-class Monad f => RMonad f where
+instance RMonad m => Functor (Ran m) where
+    fmap f m = Ran (\k -> getRan m (k . f))
+
+class (Monad (Ran f), Monad f) => RMonad f where
hunk ./Control/Monad/Ran.hs 104
--- Yoneda Endo
--- forall o. (a -> o) -> o -> o
+instance Monad (Ran Identity) where
+    return a = Ran (\k -> k a)
+    Ran m >>= k = Ran (\c -> m (\a -> getRan (k a) c))
+
+-- Yoneda Endo a ~ forall o. (a -> o) -> o -> o ~ forall o. (a -> Identity o) -> Endo o
hunk ./Control/Monad/Ran.hs 112
-    toRan (Just x) = Ran (\k -> Endo (\_ -> runIdentity (k x)))
-    toRan Nothing = Ran (\_ -> Endo id)
-    fromRan (Ran f) = appEndo (f (Identity . Just)) Nothing
+    toRan = maybe mempty return 
+    fromRan f = appEndo (getRan f (Identity . return)) mempty
+
+instance Monad (Ran Maybe) where
+    return x = Ran (\k -> Endo (\_ -> runIdentity (k x)))
+    Ran m >>= k = Ran (\c -> Endo (\z -> m (\a -> appEndo (getRan (k a) c) z)))
+    fail = mempty
+
+instance MonadPlus (Ran Maybe) where
+    mempty = Ran (\_ -> Endo id)
+    Ran m `mplus` n = Ran (\k -> Endo (\z -> appEndo (getRan m k) (appEndo (getRan n k) z)) 
hunk ./Control/Monad/Ran.hs 124
--- Yoneda (ErrorH b)
--- forall o. (a -> o) -> (b -> o) -> o
-instance Error b => RMonad (Either b) where
+-- Yoneda (ErrorH e) ~ forall o. (a -> o) -> (e -> o) -> o
+instance Error e => RMonad (Either e) where
hunk ./Control/Monad/Ran.hs 129
-    toRan (Left x) = Ran (\_ -> ErrorH (\k -> k x))
+    toRan (Left x) = Ran (\_ -> ErrorH (\e -> e x))
hunk ./Control/Monad/Ran.hs 132
+instance Error e => Monad (Ran (Either e)) where
+    return x = Ran (\k -> ErrorH (\_ -> runIdentity (k x)))
+    fail = throwError . strMsg
+--  m >>= k = Ran (\c -> ErrorH (\e -> m (\a -> getErrorH (getRan (k a) c) e)))
+
+instance Error e => MonadError (Ran (Either e)) where
+    throwError x = Ran (\_ -> ErrorH (\e -> e x))
+--  catchError f h = Ran (\k -> ErrorH (\e -> getErrorH (getRan f k) e))
+
+instance Error e => MonadPlus (Ran (Either e)) where
+    mempty = throwError noMsg
+        
+    
+
+
hunk ./Control/Monad/Ran.hs 184
-    toRan (Writer w')  = Ran (\f w -> uncurry f (w `mappend` w')
-    fromRan (Ran f)    = Writer (f (,) mempty)
+    toRan (Writer (a,w'))  = Ran (\f w -> f a (w `mappend` w'))
+    fromRan (Ran f) = Writer (f (,) mempty)
hunk ./Control/Monad/Ran.hs 208
--- forall o. (a -> G m (w -> o)) -> H m (w -> o) ?
hunk ./Control/Monad/Ran.hs 209
+-- forall o. (a -> G m (w -> o)) -> H m (w -> o) ?
hunk ./Control/Monad/Ran.hs 215
+-- forall o. (a -> G m (s -> o)) -> H m (s -> o) ?
}
