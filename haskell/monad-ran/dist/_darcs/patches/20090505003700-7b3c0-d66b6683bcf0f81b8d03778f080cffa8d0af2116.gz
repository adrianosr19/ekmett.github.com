[new stuff
ekmett@gmail.com**20090505003700
 Ignore-this: 801a14d5a566a19e54fc197784a9af61
] {
addfile ./doc/html/monad-ran/Control-Functor-Pointed.html
hunk ./doc/html/monad-ran/Control-Functor-Pointed.html 1
+<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd">
+<!--Rendered using the Haskell Html Library v0.2-->
+<HTML
+><HEAD
+><META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=UTF-8"
+><TITLE
+>Control.Functor.Pointed</TITLE
+><LINK HREF="haddock.css" REL="stylesheet" TYPE="text/css"
+><SCRIPT SRC="haddock-util.js" TYPE="text/javascript"
+></SCRIPT
+></HEAD
+><BODY
+><TABLE CLASS="vanilla" CELLSPACING="0" CELLPADDING="0"
+><TR
+><TD CLASS="topbar"
+><TABLE CLASS="vanilla" CELLSPACING="0" CELLPADDING="0"
+><TR
+><TD
+><IMG SRC="haskell_icon.gif" WIDTH="16" HEIGHT="16" ALT=" "
+></TD
+><TD CLASS="title"
+>monad-ran-0.0.7: Fast implementations of monads and monad transformers using right Kan extensions</TD
+><TD CLASS="topbut"
+><A HREF="src/Control-Functor-Pointed.html"
+>Source code</A
+></TD
+><TD CLASS="topbut"
+><A HREF="index.html"
+>Contents</A
+></TD
+><TD CLASS="topbut"
+><A HREF="doc-index.html"
+>Index</A
+></TD
+></TR
+></TABLE
+></TD
+></TR
+><TR
+><TD CLASS="modulebar"
+><TABLE CLASS="vanilla" CELLSPACING="0" CELLPADDING="0"
+><TR
+><TD
+><FONT SIZE="6"
+>Control.Functor.Pointed</FONT
+></TD
+><TD ALIGN="right"
+><TABLE CLASS="narrow" CELLSPACING="0" CELLPADDING="0"
+><TR
+><TD CLASS="infohead"
+>Portability</TD
+><TD CLASS="infoval"
+>portable</TD
+></TR
+><TR
+><TD CLASS="infohead"
+>Stability</TD
+><TD CLASS="infoval"
+>experimental</TD
+></TR
+><TR
+><TD CLASS="infohead"
+>Maintainer</TD
+><TD CLASS="infoval"
+>Edward Kmett &lt;ekmett@gmail.com&gt;</TD
+></TR
+></TABLE
+></TD
+></TR
+></TABLE
+></TD
+></TR
+><TR
+><TD CLASS="s15"
+></TD
+></TR
+><TR
+><TD CLASS="section1"
+>Description</TD
+></TR
+><TR
+><TD CLASS="doc"
+></TD
+></TR
+><TR
+><TD CLASS="s15"
+></TD
+></TR
+><TR
+><TD CLASS="s15"
+></TD
+></TR
+><TR
+><TD CLASS="section1"
+>Documentation</TD
+></TR
+><TR
+><TD CLASS="s15"
+></TD
+></TR
+><TR
+><TD CLASS="topdecl"
+><TABLE CLASS="declbar"
+><TR
+><TD CLASS="declname"
+><SPAN CLASS="keyword"
+>class</SPAN
+> <A HREF="/usr/local/share/doc/ghc/libraries/base/Control-Monad.html#t%3AFunctor"
+>Functor</A
+> f =&gt; <A NAME="t%3APointed"
+></A
+><B
+>Pointed</B
+> f  <SPAN CLASS="keyword"
+>where</SPAN
+></TD
+><TD CLASS="declbut"
+><A HREF="src/Control-Functor-Pointed.html#Pointed"
+>Source</A
+></TD
+></TR
+></TABLE
+></TD
+></TR
+><TR
+><TD CLASS="body"
+><TABLE CLASS="vanilla" CELLSPACING="0" CELLPADDING="0"
+><TR
+><TD CLASS="s8"
+></TD
+></TR
+><TR
+><TD CLASS="section4"
+>Methods</TD
+></TR
+><TR
+><TD CLASS="body"
+><TABLE CLASS="vanilla" CELLSPACING="0" CELLPADDING="0"
+><TR
+><TD CLASS="topdecl"
+><TABLE CLASS="declbar"
+><TR
+><TD CLASS="declname"
+><A NAME="v%3Apoint"
+></A
+><B
+>point</B
+> ::  a -&gt; f a</TD
+><TD CLASS="declbut"
+><A HREF="src/Control-Functor-Pointed.html#point"
+>Source</A
+></TD
+></TR
+></TABLE
+></TD
+></TR
+></TABLE
+></TD
+></TR
+><TR
+><TD CLASS="s8"
+></TD
+></TR
+><TR
+><TD CLASS="section4"
+><IMG SRC="minus.gif" CLASS="coll" ONCLICK="toggle(this,'i:Pointed')" ALT="show/hide"
+> Instances</TD
+></TR
+><TR
+><TD CLASS="body"
+><DIV ID="i:Pointed" STYLE="display:block;"
+><TABLE CLASS="vanilla" CELLSPACING="1" CELLPADDING="0"
+><TR
+><TD CLASS="decl"
+><A HREF="Control-Functor-Pointed.html#t%3APointed"
+>Pointed</A
+> []</TD
+></TR
+><TR
+><TD CLASS="decl"
+><A HREF="Control-Functor-Pointed.html#t%3APointed"
+>Pointed</A
+> <A HREF="/usr/local/share/doc/ghc/libraries/base/Data-Maybe.html#t%3AMaybe"
+>Maybe</A
+></TD
+></TR
+><TR
+><TD CLASS="decl"
+><A HREF="Control-Functor-Pointed.html#t%3APointed"
+>Pointed</A
+> <A HREF="/usr/local/share/doc/ghc/libraries/mtl/Control-Monad-Identity.html#t%3AIdentity"
+>Identity</A
+></TD
+></TR
+><TR
+><TD CLASS="decl"
+><A HREF="Control-Functor-Pointed.html#t%3APointed"
+>Pointed</A
+> ((-&gt;) r)</TD
+></TR
+><TR
+><TD CLASS="decl"
+><A HREF="Control-Functor-Pointed.html#t%3APointed"
+>Pointed</A
+> (<A HREF="/usr/local/share/doc/ghc/libraries/base/Data-Either.html#t%3AEither"
+>Either</A
+> a)</TD
+></TR
+><TR
+><TD CLASS="decl"
+><A HREF="Control-Functor-Pointed.html#t%3APointed"
+>Pointed</A
+> (<A HREF="/usr/local/share/doc/ghc/libraries/mtl/Control-Monad-Cont.html#t%3ACont"
+>Cont</A
+> r)</TD
+></TR
+><TR
+><TD CLASS="decl"
+><A HREF="/usr/local/share/doc/ghc/libraries/base/Data-Monoid.html#t%3AMonoid"
+>Monoid</A
+> w =&gt; <A HREF="Control-Functor-Pointed.html#t%3APointed"
+>Pointed</A
+> (<A HREF="/usr/local/share/doc/ghc/libraries/mtl/Control-Monad-Writer-Strict.html#t%3AWriter"
+>Writer</A
+> w)</TD
+></TR
+><TR
+><TD CLASS="decl"
+><A HREF="/usr/local/share/doc/ghc/libraries/base/Data-Monoid.html#t%3AMonoid"
+>Monoid</A
+> w =&gt; <A HREF="Control-Functor-Pointed.html#t%3APointed"
+>Pointed</A
+> (<A HREF="/usr/local/share/doc/ghc/libraries/mtl/Control-Monad-Writer-Lazy.html#t%3AWriter"
+>Writer</A
+> w)</TD
+></TR
+><TR
+><TD CLASS="decl"
+><A HREF="Control-Functor-Pointed.html#t%3APointed"
+>Pointed</A
+> (<A HREF="/usr/local/share/doc/ghc/libraries/mtl/Control-Monad-State-Strict.html#t%3AState"
+>State</A
+> w)</TD
+></TR
+><TR
+><TD CLASS="decl"
+><A HREF="Control-Functor-Pointed.html#t%3APointed"
+>Pointed</A
+> (<A HREF="/usr/local/share/doc/ghc/libraries/mtl/Control-Monad-State-Lazy.html#t%3AState"
+>State</A
+> w)</TD
+></TR
+><TR
+><TD CLASS="decl"
+><A HREF="Control-Functor-Pointed.html#t%3APointed"
+>Pointed</A
+> (<A HREF="/usr/local/share/doc/ghc/libraries/mtl/Control-Monad-Reader.html#t%3AReader"
+>Reader</A
+> r)</TD
+></TR
+><TR
+><TD CLASS="decl"
+><A HREF="/usr/local/share/doc/ghc/libraries/base/Control-Monad.html#t%3AMonad"
+>Monad</A
+> m =&gt; <A HREF="Control-Functor-Pointed.html#t%3APointed"
+>Pointed</A
+> (<A HREF="/usr/local/share/doc/ghc/libraries/mtl/Control-Monad-List.html#t%3AListT"
+>ListT</A
+> m)</TD
+></TR
+><TR
+><TD CLASS="decl"
+><A HREF="Control-Functor-Pointed.html#t%3APointed"
+>Pointed</A
+> f =&gt; <A HREF="Control-Functor-Pointed.html#t%3APointed"
+>Pointed</A
+> (<A HREF="Control-Monad-Yoneda.html#t%3AYoneda"
+>Yoneda</A
+> f)</TD
+></TR
+><TR
+><TD CLASS="decl"
+><A HREF="Control-Functor-Pointed.html#t%3APointed"
+>Pointed</A
+> (<A HREF="Control-Monad-Codensity.html#t%3ACodensity"
+>Codensity</A
+> f)</TD
+></TR
+><TR
+><TD CLASS="decl"
+><A HREF="Control-Functor-Pointed.html#t%3APointed"
+>Pointed</A
+> (<A HREF="Control-Monad-Ran.html#t%3ARan"
+>Ran</A
+> <A HREF="/usr/local/share/doc/ghc/libraries/mtl/Control-Monad-Identity.html#t%3AIdentity"
+>Identity</A
+>)</TD
+></TR
+><TR
+><TD CLASS="decl"
+><A HREF="Control-Functor-Pointed.html#t%3APointed"
+>Pointed</A
+> f =&gt; <A HREF="Control-Functor-Pointed.html#t%3APointed"
+>Pointed</A
+> (<A HREF="Control-Monad-Ran.html#t%3ARan"
+>Ran</A
+> (<A HREF="Control-Monad-Yoneda.html#t%3AYoneda"
+>Yoneda</A
+> f))</TD
+></TR
+><TR
+><TD CLASS="decl"
+><A HREF="Control-Functor-Pointed.html#t%3APointed"
+>Pointed</A
+> (<A HREF="Control-Monad-Ran.html#t%3ARan"
+>Ran</A
+> (<A HREF="Control-Monad-Codensity.html#t%3ACodensity"
+>Codensity</A
+> f))</TD
+></TR
+><TR
+><TD CLASS="decl"
+><A HREF="/usr/local/share/doc/ghc/libraries/base/Control-Monad.html#t%3AMonad"
+>Monad</A
+> m =&gt; <A HREF="Control-Functor-Pointed.html#t%3APointed"
+>Pointed</A
+> (<A HREF="/usr/local/share/doc/ghc/libraries/mtl/Control-Monad-Cont.html#t%3AContT"
+>ContT</A
+> r m)</TD
+></TR
+><TR
+><TD CLASS="decl"
+>(<A HREF="/usr/local/share/doc/ghc/libraries/base/Data-Monoid.html#t%3AMonoid"
+>Monoid</A
+> w, <A HREF="/usr/local/share/doc/ghc/libraries/base/Control-Monad.html#t%3AMonad"
+>Monad</A
+> m) =&gt; <A HREF="Control-Functor-Pointed.html#t%3APointed"
+>Pointed</A
+> (<A HREF="/usr/local/share/doc/ghc/libraries/mtl/Control-Monad-Writer-Strict.html#t%3AWriterT"
+>WriterT</A
+> w m)</TD
+></TR
+><TR
+><TD CLASS="decl"
+>(<A HREF="/usr/local/share/doc/ghc/libraries/base/Data-Monoid.html#t%3AMonoid"
+>Monoid</A
+> w, <A HREF="/usr/local/share/doc/ghc/libraries/base/Control-Monad.html#t%3AMonad"
+>Monad</A
+> m) =&gt; <A HREF="Control-Functor-Pointed.html#t%3APointed"
+>Pointed</A
+> (<A HREF="/usr/local/share/doc/ghc/libraries/mtl/Control-Monad-Writer-Lazy.html#t%3AWriterT"
+>WriterT</A
+> w m)</TD
+></TR
+><TR
+><TD CLASS="decl"
+><A HREF="/usr/local/share/doc/ghc/libraries/base/Control-Monad.html#t%3AMonad"
+>Monad</A
+> m =&gt; <A HREF="Control-Functor-Pointed.html#t%3APointed"
+>Pointed</A
+> (<A HREF="/usr/local/share/doc/ghc/libraries/mtl/Control-Monad-State-Strict.html#t%3AStateT"
+>StateT</A
+> w m)</TD
+></TR
+><TR
+><TD CLASS="decl"
+><A HREF="/usr/local/share/doc/ghc/libraries/base/Control-Monad.html#t%3AMonad"
+>Monad</A
+> m =&gt; <A HREF="Control-Functor-Pointed.html#t%3APointed"
+>Pointed</A
+> (<A HREF="/usr/local/share/doc/ghc/libraries/mtl/Control-Monad-State-Lazy.html#t%3AStateT"
+>StateT</A
+> w m)</TD
+></TR
+><TR
+><TD CLASS="decl"
+><A HREF="/usr/local/share/doc/ghc/libraries/base/Control-Monad.html#t%3AMonad"
+>Monad</A
+> m =&gt; <A HREF="Control-Functor-Pointed.html#t%3APointed"
+>Pointed</A
+> (<A HREF="/usr/local/share/doc/ghc/libraries/mtl/Control-Monad-Reader.html#t%3AReaderT"
+>ReaderT</A
+> r m)</TD
+></TR
+><TR
+><TD CLASS="decl"
+>(<A HREF="/usr/local/share/doc/ghc/libraries/mtl/Control-Monad-Error-Class.html#t%3AError"
+>Error</A
+> e, <A HREF="/usr/local/share/doc/ghc/libraries/base/Control-Monad.html#t%3AMonad"
+>Monad</A
+> m) =&gt; <A HREF="Control-Functor-Pointed.html#t%3APointed"
+>Pointed</A
+> (<A HREF="/usr/local/share/doc/ghc/libraries/mtl/Control-Monad-Error.html#t%3AErrorT"
+>ErrorT</A
+> e m)</TD
+></TR
+><TR
+><TD CLASS="decl"
+><A HREF="/usr/local/share/doc/ghc/libraries/base/Data-Monoid.html#t%3AMonoid"
+>Monoid</A
+> w =&gt; <A HREF="Control-Functor-Pointed.html#t%3APointed"
+>Pointed</A
+> (<A HREF="/usr/local/share/doc/ghc/libraries/mtl/Control-Monad-RWS-Strict.html#t%3ARWS"
+>RWS</A
+> r w s)</TD
+></TR
+><TR
+><TD CLASS="decl"
+><A HREF="/usr/local/share/doc/ghc/libraries/base/Data-Monoid.html#t%3AMonoid"
+>Monoid</A
+> w =&gt; <A HREF="Control-Functor-Pointed.html#t%3APointed"
+>Pointed</A
+> (<A HREF="/usr/local/share/doc/ghc/libraries/mtl/Control-Monad-RWS-Lazy.html#t%3ARWS"
+>RWS</A
+> r w s)</TD
+></TR
+><TR
+><TD CLASS="decl"
+>(<A HREF="/usr/local/share/doc/ghc/libraries/base/Data-Monoid.html#t%3AMonoid"
+>Monoid</A
+> w, <A HREF="/usr/local/share/doc/ghc/libraries/base/Control-Monad.html#t%3AMonad"
+>Monad</A
+> m) =&gt; <A HREF="Control-Functor-Pointed.html#t%3APointed"
+>Pointed</A
+> (<A HREF="/usr/local/share/doc/ghc/libraries/mtl/Control-Monad-RWS-Strict.html#t%3ARWST"
+>RWST</A
+> r w s m)</TD
+></TR
+><TR
+><TD CLASS="decl"
+>(<A HREF="/usr/local/share/doc/ghc/libraries/base/Data-Monoid.html#t%3AMonoid"
+>Monoid</A
+> w, <A HREF="/usr/local/share/doc/ghc/libraries/base/Control-Monad.html#t%3AMonad"
+>Monad</A
+> m) =&gt; <A HREF="Control-Functor-Pointed.html#t%3APointed"
+>Pointed</A
+> (<A HREF="/usr/local/share/doc/ghc/libraries/mtl/Control-Monad-RWS-Lazy.html#t%3ARWST"
+>RWST</A
+> r w s m)</TD
+></TR
+></TABLE
+></DIV
+></TD
+></TR
+></TABLE
+></TD
+></TR
+><TR
+><TD CLASS="s15"
+></TD
+></TR
+><TR
+><TD CLASS="botbar"
+>Produced by <A HREF="http://www.haskell.org/haddock/"
+>Haddock</A
+> version 2.3.0</TD
+></TR
+></TABLE
+></BODY
+></HTML
+>
addfile ./doc/html/monad-ran/Control-Monad-CPS-Maybe.html
hunk ./doc/html/monad-ran/Control-Monad-CPS-Maybe.html 1
+<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd">
+<!--Rendered using the Haskell Html Library v0.2-->
+<HTML
+><HEAD
+><META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=UTF-8"
+><TITLE
+>Control.Monad.CPS.Maybe</TITLE
+><LINK HREF="haddock.css" REL="stylesheet" TYPE="text/css"
+><SCRIPT SRC="haddock-util.js" TYPE="text/javascript"
+></SCRIPT
+></HEAD
+><BODY
+><TABLE CLASS="vanilla" CELLSPACING="0" CELLPADDING="0"
+><TR
+><TD CLASS="topbar"
+><TABLE CLASS="vanilla" CELLSPACING="0" CELLPADDING="0"
+><TR
+><TD
+><IMG SRC="haskell_icon.gif" WIDTH="16" HEIGHT="16" ALT=" "
+></TD
+><TD CLASS="title"
+>monad-ran-0.0.7: Fast implementations of monads and monad transformers using right Kan extensions</TD
+><TD CLASS="topbut"
+><A HREF="src/Control-Monad-CPS-Maybe.html"
+>Source code</A
+></TD
+><TD CLASS="topbut"
+><A HREF="index.html"
+>Contents</A
+></TD
+><TD CLASS="topbut"
+><A HREF="doc-index.html"
+>Index</A
+></TD
+></TR
+></TABLE
+></TD
+></TR
+><TR
+><TD CLASS="modulebar"
+><TABLE CLASS="vanilla" CELLSPACING="0" CELLPADDING="0"
+><TR
+><TD
+><FONT SIZE="6"
+>Control.Monad.CPS.Maybe</FONT
+></TD
+></TR
+></TABLE
+></TD
+></TR
+><TR
+><TD CLASS="s15"
+></TD
+></TR
+><TR
+><TD CLASS="s15"
+></TD
+></TR
+><TR
+><TD CLASS="s15"
+></TD
+></TR
+><TR
+><TD CLASS="section1"
+>Documentation</TD
+></TR
+><TR
+><TD CLASS="s15"
+></TD
+></TR
+><TR
+><TD CLASS="topdecl"
+><TABLE CLASS="declbar"
+><TR
+><TD CLASS="declname"
+><SPAN CLASS="keyword"
+>newtype</SPAN
+>  <A NAME="t%3AMaybe%27"
+></A
+><B
+>Maybe'</B
+> a </TD
+><TD CLASS="declbut"
+><A HREF="src/Control-Monad-CPS-Maybe.html#Maybe%27"
+>Source</A
+></TD
+></TR
+></TABLE
+></TD
+></TR
+><TR
+><TD CLASS="body"
+><TABLE CLASS="vanilla" CELLSPACING="0" CELLPADDING="0"
+><TR
+><TD CLASS="section4"
+>Constructors</TD
+></TR
+><TR
+><TD CLASS="body"
+><TABLE CLASS="vanilla" CELLSPACING="5" CELLPADDING="0"
+><TR
+><TD CLASS="arg"
+><A NAME="v%3AMaybe%27"
+></A
+><B
+>Maybe'</B
+></TD
+><TD CLASS="rdoc"
+></TD
+></TR
+><TR
+><TD CLASS="body" COLSPAN="2"
+><TABLE CLASS="vanilla" CELLSPACING="1" CELLPADDING="0"
+><TR
+><TD CLASS="arg"
+><A NAME="v%3AgetMaybe%27"
+></A
+><B
+>getMaybe'</B
+> :: <SPAN CLASS="keyword"
+>forall</SPAN
+> o.  (a -&gt; o) -&gt; o -&gt; o</TD
+><TD CLASS="rdoc"
+></TD
+></TR
+></TABLE
+></TD
+></TR
+></TABLE
+></TD
+></TR
+><TR
+><TD CLASS="section4"
+><IMG SRC="minus.gif" CLASS="coll" ONCLICK="toggle(this,'i:Maybe%27')" ALT="show/hide"
+> Instances</TD
+></TR
+><TR
+><TD CLASS="body"
+><DIV ID="i:Maybe%27" STYLE="display:block;"
+><TABLE CLASS="vanilla" CELLSPACING="1" CELLPADDING="0"
+><TR
+><TD CLASS="decl"
+><A HREF="/usr/local/share/doc/ghc/libraries/base/Control-Monad.html#t%3AMonad"
+>Monad</A
+> <A HREF="Control-Monad-CPS-Maybe.html#t%3AMaybe%27"
+>Maybe'</A
+></TD
+></TR
+><TR
+><TD CLASS="decl"
+><A HREF="/usr/local/share/doc/ghc/libraries/base/Control-Monad.html#t%3AFunctor"
+>Functor</A
+> <A HREF="Control-Monad-CPS-Maybe.html#t%3AMaybe%27"
+>Maybe'</A
+></TD
+></TR
+></TABLE
+></DIV
+></TD
+></TR
+></TABLE
+></TD
+></TR
+><TR
+><TD CLASS="s15"
+></TD
+></TR
+><TR
+><TD CLASS="topdecl"
+><TABLE CLASS="declbar"
+><TR
+><TD CLASS="declname"
+><A NAME="v%3Amaybe%27"
+></A
+><B
+>maybe'</B
+> ::  a -&gt; (b -&gt; a) -&gt; <A HREF="Control-Monad-CPS-Maybe.html#t%3AMaybe%27"
+>Maybe'</A
+> b -&gt; a</TD
+><TD CLASS="declbut"
+><A HREF="src/Control-Monad-CPS-Maybe.html#maybe%27"
+>Source</A
+></TD
+></TR
+></TABLE
+></TD
+></TR
+><TR
+><TD CLASS="s15"
+></TD
+></TR
+><TR
+><TD CLASS="botbar"
+>Produced by <A HREF="http://www.haskell.org/haddock/"
+>Haddock</A
+> version 2.3.0</TD
+></TR
+></TABLE
+></BODY
+></HTML
+>
addfile ./doc/html/monad-ran/Control-Monad-Codensity.html
hunk ./doc/html/monad-ran/Control-Monad-Codensity.html 1
+<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd">
+<!--Rendered using the Haskell Html Library v0.2-->
+<HTML
+><HEAD
+><META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=UTF-8"
+><TITLE
+>Control.Monad.Codensity</TITLE
+><LINK HREF="haddock.css" REL="stylesheet" TYPE="text/css"
+><SCRIPT SRC="haddock-util.js" TYPE="text/javascript"
+></SCRIPT
+></HEAD
+><BODY
+><TABLE CLASS="vanilla" CELLSPACING="0" CELLPADDING="0"
+><TR
+><TD CLASS="topbar"
+><TABLE CLASS="vanilla" CELLSPACING="0" CELLPADDING="0"
+><TR
+><TD
+><IMG SRC="haskell_icon.gif" WIDTH="16" HEIGHT="16" ALT=" "
+></TD
+><TD CLASS="title"
+>monad-ran-0.0.7: Fast implementations of monads and monad transformers using right Kan extensions</TD
+><TD CLASS="topbut"
+><A HREF="src/Control-Monad-Codensity.html"
+>Source code</A
+></TD
+><TD CLASS="topbut"
+><A HREF="index.html"
+>Contents</A
+></TD
+><TD CLASS="topbut"
+><A HREF="doc-index.html"
+>Index</A
+></TD
+></TR
+></TABLE
+></TD
+></TR
+><TR
+><TD CLASS="modulebar"
+><TABLE CLASS="vanilla" CELLSPACING="0" CELLPADDING="0"
+><TR
+><TD
+><FONT SIZE="6"
+>Control.Monad.Codensity</FONT
+></TD
+></TR
+></TABLE
+></TD
+></TR
+><TR
+><TD CLASS="s15"
+></TD
+></TR
+><TR
+><TD
+><TABLE CLASS="vanilla" CELLSPACING="0" CELLPADDING="0"
+><TR
+><TD CLASS="section4"
+><B
+>Contents</B
+></TD
+></TR
+><TR
+><TD
+><DL
+><DT
+><A HREF="#1"
+>The codensity monad of a functor
+</A
+></DT
+></DL
+></TD
+></TR
+></TABLE
+></TD
+></TR
+><TR
+><TD CLASS="s15"
+></TD
+></TR
+><TR
+><TD CLASS="s15"
+></TD
+></TR
+><TR
+><TD CLASS="section1"
+>Synopsis</TD
+></TR
+><TR
+><TD CLASS="s15"
+></TD
+></TR
+><TR
+><TD CLASS="body"
+><TABLE CLASS="vanilla" CELLSPACING="0" CELLPADDING="0"
+><TR
+><TD CLASS="decl"
+><SPAN CLASS="keyword"
+>data</SPAN
+>  <A HREF="#t%3ACodensity"
+>Codensity</A
+> f a = <A HREF="#v%3ACodensity"
+>Codensity</A
+> {<TABLE CLASS="vanilla" CELLSPACING="0" CELLPADDING="0"
+><TR
+><TD CLASS="recfield"
+><A HREF="#v%3AgetCodensity"
+>getCodensity</A
+> :: <SPAN CLASS="keyword"
+>forall</SPAN
+> b.  (a -&gt; f b) -&gt; f b</TD
+></TR
+></TABLE
+>}</TD
+></TR
+><TR
+><TD CLASS="s8"
+></TD
+></TR
+><TR
+><TD CLASS="decl"
+><A HREF="#v%3AlowerCodensity"
+>lowerCodensity</A
+> :: <A HREF="/usr/local/share/doc/ghc/libraries/base/Control-Monad.html#t%3AMonad"
+>Monad</A
+> m =&gt; <A HREF="Control-Monad-Codensity.html#t%3ACodensity"
+>Codensity</A
+> m a -&gt; m a</TD
+></TR
+><TR
+><TD CLASS="s8"
+></TD
+></TR
+><TR
+><TD CLASS="decl"
+><A HREF="#v%3AlowerCodensityApp"
+>lowerCodensityApp</A
+> :: <A HREF="/usr/local/share/doc/ghc/libraries/base/Control-Applicative.html#t%3AApplicative"
+>Applicative</A
+> f =&gt; <A HREF="Control-Monad-Codensity.html#t%3ACodensity"
+>Codensity</A
+> f a -&gt; f a</TD
+></TR
+><TR
+><TD CLASS="s8"
+></TD
+></TR
+><TR
+><TD CLASS="decl"
+><A HREF="#v%3AlowerCodensityPointed"
+>lowerCodensityPointed</A
+> :: <A HREF="/usr/local/share/doc/ghc/libraries/base/Control-Applicative.html#t%3AApplicative"
+>Applicative</A
+> f =&gt; <A HREF="Control-Monad-Codensity.html#t%3ACodensity"
+>Codensity</A
+> f a -&gt; f a</TD
+></TR
+></TABLE
+></TD
+></TR
+><TR
+><TD CLASS="s15"
+></TD
+></TR
+><TR
+><TD CLASS="s15"
+></TD
+></TR
+><TR
+><TD CLASS="section1"
+><A NAME="1"
+>The codensity monad of a functor
+</A
+></TD
+></TR
+><TR
+><TD CLASS="s15"
+></TD
+></TR
+><TR
+><TD CLASS="topdecl"
+><TABLE CLASS="declbar"
+><TR
+><TD CLASS="declname"
+><SPAN CLASS="keyword"
+>data</SPAN
+>  <A NAME="t%3ACodensity"
+></A
+><B
+>Codensity</B
+> f a </TD
+><TD CLASS="declbut"
+><A HREF="src/Control-Monad-Codensity.html#Codensity"
+>Source</A
+></TD
+></TR
+></TABLE
+></TD
+></TR
+><TR
+><TD CLASS="body"
+><TABLE CLASS="vanilla" CELLSPACING="0" CELLPADDING="0"
+><TR
+><TD CLASS="ndoc"
+>The Codensity monad of a functor/monad generated by a functor
+</TD
+></TR
+><TR
+><TD CLASS="section4"
+>Constructors</TD
+></TR
+><TR
+><TD CLASS="body"
+><TABLE CLASS="vanilla" CELLSPACING="5" CELLPADDING="0"
+><TR
+><TD CLASS="arg"
+><A NAME="v%3ACodensity"
+></A
+><B
+>Codensity</B
+></TD
+><TD CLASS="rdoc"
+></TD
+></TR
+><TR
+><TD CLASS="body" COLSPAN="2"
+><TABLE CLASS="vanilla" CELLSPACING="1" CELLPADDING="0"
+><TR
+><TD CLASS="arg"
+><A NAME="v%3AgetCodensity"
+></A
+><B
+>getCodensity</B
+> :: <SPAN CLASS="keyword"
+>forall</SPAN
+> b.  (a -&gt; f b) -&gt; f b</TD
+><TD CLASS="rdoc"
+></TD
+></TR
+></TABLE
+></TD
+></TR
+></TABLE
+></TD
+></TR
+><TR
+><TD CLASS="section4"
+><IMG SRC="minus.gif" CLASS="coll" ONCLICK="toggle(this,'i:Codensity')" ALT="show/hide"
+> Instances</TD
+></TR
+><TR
+><TD CLASS="body"
+><DIV ID="i:Codensity" STYLE="display:block;"
+><TABLE CLASS="vanilla" CELLSPACING="1" CELLPADDING="0"
+><TR
+><TD CLASS="decl"
+><A HREF="/usr/local/share/doc/ghc/libraries/mtl/Control-Monad-Trans.html#t%3AMonadTrans"
+>MonadTrans</A
+> <A HREF="Control-Monad-Codensity.html#t%3ACodensity"
+>Codensity</A
+></TD
+></TR
+><TR
+><TD CLASS="decl"
+><A HREF="/usr/local/share/doc/ghc/libraries/mtl/Control-Monad-RWS-Class.html#t%3AMonadRWS"
+>MonadRWS</A
+> r w s m =&gt; <A HREF="/usr/local/share/doc/ghc/libraries/mtl/Control-Monad-RWS-Class.html#t%3AMonadRWS"
+>MonadRWS</A
+> r w s (<A HREF="Control-Monad-Codensity.html#t%3ACodensity"
+>Codensity</A
+> m)</TD
+></TR
+><TR
+><TD CLASS="decl"
+><A HREF="/usr/local/share/doc/ghc/libraries/mtl/Control-Monad-Error-Class.html#t%3AMonadError"
+>MonadError</A
+> e m =&gt; <A HREF="/usr/local/share/doc/ghc/libraries/mtl/Control-Monad-Error-Class.html#t%3AMonadError"
+>MonadError</A
+> e (<A HREF="Control-Monad-Codensity.html#t%3ACodensity"
+>Codensity</A
+> m)</TD
+></TR
+><TR
+><TD CLASS="decl"
+><A HREF="/usr/local/share/doc/ghc/libraries/mtl/Control-Monad-Reader-Class.html#t%3AMonadReader"
+>MonadReader</A
+> r m =&gt; <A HREF="/usr/local/share/doc/ghc/libraries/mtl/Control-Monad-Reader-Class.html#t%3AMonadReader"
+>MonadReader</A
+> r (<A HREF="Control-Monad-Codensity.html#t%3ACodensity"
+>Codensity</A
+> m)</TD
+></TR
+><TR
+><TD CLASS="decl"
+><A HREF="/usr/local/share/doc/ghc/libraries/mtl/Control-Monad-State-Class.html#t%3AMonadState"
+>MonadState</A
+> s m =&gt; <A HREF="/usr/local/share/doc/ghc/libraries/mtl/Control-Monad-State-Class.html#t%3AMonadState"
+>MonadState</A
+> s (<A HREF="Control-Monad-Codensity.html#t%3ACodensity"
+>Codensity</A
+> m)</TD
+></TR
+><TR
+><TD CLASS="decl"
+><A HREF="/usr/local/share/doc/ghc/libraries/mtl/Control-Monad-Writer-Class.html#t%3AMonadWriter"
+>MonadWriter</A
+> w m =&gt; <A HREF="/usr/local/share/doc/ghc/libraries/mtl/Control-Monad-Writer-Class.html#t%3AMonadWriter"
+>MonadWriter</A
+> w (<A HREF="Control-Monad-Codensity.html#t%3ACodensity"
+>Codensity</A
+> m)</TD
+></TR
+><TR
+><TD CLASS="decl"
+><A HREF="/usr/local/share/doc/ghc/libraries/base/Control-Monad.html#t%3AMonad"
+>Monad</A
+> (<A HREF="Control-Monad-Codensity.html#t%3ACodensity"
+>Codensity</A
+> f)</TD
+></TR
+><TR
+><TD CLASS="decl"
+><A HREF="/usr/local/share/doc/ghc/libraries/base/Control-Monad.html#t%3AFunctor"
+>Functor</A
+> (<A HREF="Control-Monad-Codensity.html#t%3ACodensity"
+>Codensity</A
+> k)</TD
+></TR
+><TR
+><TD CLASS="decl"
+><A HREF="/usr/local/share/doc/ghc/libraries/base/Control-Monad.html#t%3AMonadPlus"
+>MonadPlus</A
+> m =&gt; <A HREF="/usr/local/share/doc/ghc/libraries/base/Control-Monad.html#t%3AMonadPlus"
+>MonadPlus</A
+> (<A HREF="Control-Monad-Codensity.html#t%3ACodensity"
+>Codensity</A
+> m)</TD
+></TR
+><TR
+><TD CLASS="decl"
+><A HREF="/usr/local/share/doc/ghc/libraries/base/Control-Applicative.html#t%3AApplicative"
+>Applicative</A
+> (<A HREF="Control-Monad-Codensity.html#t%3ACodensity"
+>Codensity</A
+> f)</TD
+></TR
+><TR
+><TD CLASS="decl"
+><A HREF="/usr/local/share/doc/ghc/libraries/mtl/Control-Monad-Trans.html#t%3AMonadIO"
+>MonadIO</A
+> m =&gt; <A HREF="/usr/local/share/doc/ghc/libraries/mtl/Control-Monad-Trans.html#t%3AMonadIO"
+>MonadIO</A
+> (<A HREF="Control-Monad-Codensity.html#t%3ACodensity"
+>Codensity</A
+> m)</TD
+></TR
+><TR
+><TD CLASS="decl"
+><A HREF="Control-Functor-Pointed.html#t%3APointed"
+>Pointed</A
+> (<A HREF="Control-Monad-Codensity.html#t%3ACodensity"
+>Codensity</A
+> f)</TD
+></TR
+><TR
+><TD CLASS="decl"
+>RanIso (<A HREF="Control-Monad-Codensity.html#t%3ACodensity"
+>Codensity</A
+> f)</TD
+></TR
+></TABLE
+></DIV
+></TD
+></TR
+></TABLE
+></TD
+></TR
+><TR
+><TD CLASS="s15"
+></TD
+></TR
+><TR
+><TD CLASS="topdecl"
+><TABLE CLASS="declbar"
+><TR
+><TD CLASS="declname"
+><A NAME="v%3AlowerCodensity"
+></A
+><B
+>lowerCodensity</B
+> :: <A HREF="/usr/local/share/doc/ghc/libraries/base/Control-Monad.html#t%3AMonad"
+>Monad</A
+> m =&gt; <A HREF="Control-Monad-Codensity.html#t%3ACodensity"
+>Codensity</A
+> m a -&gt; m a</TD
+><TD CLASS="declbut"
+><A HREF="src/Control-Monad-Codensity.html#lowerCodensity"
+>Source</A
+></TD
+></TR
+></TABLE
+></TD
+></TR
+><TR
+><TD CLASS="s15"
+></TD
+></TR
+><TR
+><TD CLASS="topdecl"
+><TABLE CLASS="declbar"
+><TR
+><TD CLASS="declname"
+><A NAME="v%3AlowerCodensityApp"
+></A
+><B
+>lowerCodensityApp</B
+> :: <A HREF="/usr/local/share/doc/ghc/libraries/base/Control-Applicative.html#t%3AApplicative"
+>Applicative</A
+> f =&gt; <A HREF="Control-Monad-Codensity.html#t%3ACodensity"
+>Codensity</A
+> f a -&gt; f a</TD
+><TD CLASS="declbut"
+><A HREF="src/Control-Monad-Codensity.html#lowerCodensityApp"
+>Source</A
+></TD
+></TR
+></TABLE
+></TD
+></TR
+><TR
+><TD CLASS="s15"
+></TD
+></TR
+><TR
+><TD CLASS="topdecl"
+><TABLE CLASS="declbar"
+><TR
+><TD CLASS="declname"
+><A NAME="v%3AlowerCodensityPointed"
+></A
+><B
+>lowerCodensityPointed</B
+> :: <A HREF="/usr/local/share/doc/ghc/libraries/base/Control-Applicative.html#t%3AApplicative"
+>Applicative</A
+> f =&gt; <A HREF="Control-Monad-Codensity.html#t%3ACodensity"
+>Codensity</A
+> f a -&gt; f a</TD
+><TD CLASS="declbut"
+><A HREF="src/Control-Monad-Codensity.html#lowerCodensityPointed"
+>Source</A
+></TD
+></TR
+></TABLE
+></TD
+></TR
+><TR
+><TD CLASS="s15"
+></TD
+></TR
+><TR
+><TD CLASS="botbar"
+>Produced by <A HREF="http://www.haskell.org/haddock/"
+>Haddock</A
+> version 2.3.0</TD
+></TR
+></TABLE
+></BODY
+></HTML
+>
hunk ./doc/html/monad-ran/Control-Monad-Ran.html 22
->monad-ran-0.0.6: Implementations of common monads and monad transformers as right Kan extensions</TD
+>monad-ran-0.0.7: Fast implementations of monads and monad transformers using right Kan extensions</TD
hunk ./doc/html/monad-ran/Control-Monad-Ran.html 56
+><TD
+><TABLE CLASS="vanilla" CELLSPACING="0" CELLPADDING="0"
+><TR
+><TD CLASS="section4"
+><B
+>Contents</B
+></TD
+></TR
+><TR
+><TD
+><DL
+><DT
+><A HREF="#1"
+>The Yoneda Lemma
+</A
+></DT
+><DT
+><A HREF="#2"
+>The codensity monad of a functor
+</A
+></DT
+><DT
+><A HREF="#3"
+>A right Kan extension monad transformer
+</A
+></DT
+><DT
+><A HREF="#4"
+>Representing monads as right Kan extensions
+</A
+></DT
+></DL
+></TD
+></TR
+></TABLE
+></TD
+></TR
+><TR
hunk ./doc/html/monad-ran/Control-Monad-Ran.html 103
->Documentation</TD
+>Synopsis</TD
+></TR
+><TR
+><TD CLASS="s15"
+></TD
+></TR
+><TR
+><TD CLASS="body"
+><TABLE CLASS="vanilla" CELLSPACING="0" CELLPADDING="0"
+><TR
+><TD CLASS="decl"
+><SPAN CLASS="keyword"
+>data</SPAN
+>  <A HREF="#t%3AYoneda"
+>Yoneda</A
+> f a = <A HREF="#v%3AYoneda"
+>Yoneda</A
+> {<TABLE CLASS="vanilla" CELLSPACING="0" CELLPADDING="0"
+><TR
+><TD CLASS="recfield"
+><A HREF="#v%3AgetYoneda"
+>getYoneda</A
+> :: <SPAN CLASS="keyword"
+>forall</SPAN
+> b.  (a -&gt; b) -&gt; f b</TD
+></TR
+></TABLE
+>}</TD
+></TR
+><TR
+><TD CLASS="s8"
+></TD
+></TR
+><TR
+><TD CLASS="decl"
+><SPAN CLASS="keyword"
+>data</SPAN
+>  <A HREF="#t%3ACodensity"
+>Codensity</A
+> f a = <A HREF="#v%3ACodensity"
+>Codensity</A
+> {<TABLE CLASS="vanilla" CELLSPACING="0" CELLPADDING="0"
+><TR
+><TD CLASS="recfield"
+><A HREF="#v%3AgetCodensity"
+>getCodensity</A
+> :: <SPAN CLASS="keyword"
+>forall</SPAN
+> b.  (a -&gt; f b) -&gt; f b</TD
+></TR
+></TABLE
+>}</TD
+></TR
+><TR
+><TD CLASS="s8"
+></TD
+></TR
+><TR
+><TD CLASS="decl"
+><SPAN CLASS="keyword"
+>data</SPAN
+>  <A HREF="#t%3ARan"
+>Ran</A
+> m a = <A HREF="#v%3ARan"
+>Ran</A
+> {<TABLE CLASS="vanilla" CELLSPACING="0" CELLPADDING="0"
+><TR
+><TD CLASS="recfield"
+><A HREF="#v%3AgetRan"
+>getRan</A
+> :: <SPAN CLASS="keyword"
+>forall</SPAN
+> b.  (a -&gt; <A HREF="Control-Monad-Ran.html#t%3AG"
+>G</A
+> m b) -&gt; <A HREF="Control-Monad-Ran.html#t%3AH"
+>H</A
+> m b</TD
+></TR
+></TABLE
+>}</TD
+></TR
+><TR
+><TD CLASS="s8"
+></TD
+></TR
+><TR
+><TD CLASS="decl"
+><SPAN CLASS="keyword"
+>class</SPAN
+> (<A HREF="/usr/local/share/doc/ghc/libraries/base/Control-Monad.html#t%3AMonad"
+>Monad</A
+> (<A HREF="Control-Monad-Ran.html#t%3ARan"
+>Ran</A
+> f), <A HREF="/usr/local/share/doc/ghc/libraries/base/Control-Monad.html#t%3AMonad"
+>Monad</A
+> f, RanIso f) =&gt; <A HREF="#t%3ARMonad"
+>RMonad</A
+> f </TD
+></TR
+><TR
+><TD CLASS="s8"
+></TD
+></TR
+><TR
+><TD CLASS="decl"
+><A HREF="#v%3AliftRan"
+>liftRan</A
+> :: RanIso f =&gt; f a -&gt; <A HREF="Control-Monad-Ran.html#t%3ARan"
+>Ran</A
+> f a</TD
+></TR
+><TR
+><TD CLASS="s8"
+></TD
+></TR
+><TR
+><TD CLASS="decl"
+><A HREF="#v%3AlowerRan"
+>lowerRan</A
+> :: RanIso f =&gt; <A HREF="Control-Monad-Ran.html#t%3ARan"
+>Ran</A
+> f a -&gt; f a</TD
+></TR
+></TABLE
+></TD
+></TR
+><TR
+><TD CLASS="s15"
+></TD
+></TR
+><TR
+><TD CLASS="s15"
+></TD
+></TR
+><TR
+><TD CLASS="section1"
+><A NAME="1"
+>The Yoneda Lemma
+</A
+></TD
hunk ./doc/html/monad-ran/Control-Monad-Ran.html 261
-><A HREF="src/Control-Monad-Ran.html#Yoneda"
+><A HREF="src/Control-Monad-Yoneda.html#Yoneda"
hunk ./doc/html/monad-ran/Control-Monad-Ran.html 328
+><A HREF="/usr/local/share/doc/ghc/libraries/mtl/Control-Monad-RWS-Class.html#t%3AMonadRWS"
+>MonadRWS</A
+> r w s f =&gt; <A HREF="/usr/local/share/doc/ghc/libraries/mtl/Control-Monad-RWS-Class.html#t%3AMonadRWS"
+>MonadRWS</A
+> r w s (<A HREF="Control-Monad-Ran.html#t%3AYoneda"
+>Yoneda</A
+> f)</TD
+></TR
+><TR
+><TD CLASS="decl"
+><A HREF="/usr/local/share/doc/ghc/libraries/mtl/Control-Monad-Error-Class.html#t%3AMonadError"
+>MonadError</A
+> e f =&gt; <A HREF="/usr/local/share/doc/ghc/libraries/mtl/Control-Monad-Error-Class.html#t%3AMonadError"
+>MonadError</A
+> e (<A HREF="Control-Monad-Ran.html#t%3AYoneda"
+>Yoneda</A
+> f)</TD
+></TR
+><TR
+><TD CLASS="decl"
+><A HREF="/usr/local/share/doc/ghc/libraries/mtl/Control-Monad-Reader-Class.html#t%3AMonadReader"
+>MonadReader</A
+> r f =&gt; <A HREF="/usr/local/share/doc/ghc/libraries/mtl/Control-Monad-Reader-Class.html#t%3AMonadReader"
+>MonadReader</A
+> r (<A HREF="Control-Monad-Ran.html#t%3AYoneda"
+>Yoneda</A
+> f)</TD
+></TR
+><TR
+><TD CLASS="decl"
+><A HREF="/usr/local/share/doc/ghc/libraries/mtl/Control-Monad-State-Class.html#t%3AMonadState"
+>MonadState</A
+> s f =&gt; <A HREF="/usr/local/share/doc/ghc/libraries/mtl/Control-Monad-State-Class.html#t%3AMonadState"
+>MonadState</A
+> s (<A HREF="Control-Monad-Ran.html#t%3AYoneda"
+>Yoneda</A
+> f)</TD
+></TR
+><TR
+><TD CLASS="decl"
+><A HREF="/usr/local/share/doc/ghc/libraries/mtl/Control-Monad-Writer-Class.html#t%3AMonadWriter"
+>MonadWriter</A
+> w f =&gt; <A HREF="/usr/local/share/doc/ghc/libraries/mtl/Control-Monad-Writer-Class.html#t%3AMonadWriter"
+>MonadWriter</A
+> w (<A HREF="Control-Monad-Ran.html#t%3AYoneda"
+>Yoneda</A
+> f)</TD
+></TR
+><TR
+><TD CLASS="decl"
hunk ./doc/html/monad-ran/Control-Monad-Ran.html 396
+><A HREF="/usr/local/share/doc/ghc/libraries/base/Control-Monad-Fix.html#t%3AMonadFix"
+>MonadFix</A
+> m =&gt; <A HREF="/usr/local/share/doc/ghc/libraries/base/Control-Monad-Fix.html#t%3AMonadFix"
+>MonadFix</A
+> (<A HREF="Control-Monad-Ran.html#t%3AYoneda"
+>Yoneda</A
+> m)</TD
+></TR
+><TR
+><TD CLASS="decl"
+><A HREF="/usr/local/share/doc/ghc/libraries/base/Control-Monad.html#t%3AMonadPlus"
+>MonadPlus</A
+> f =&gt; <A HREF="/usr/local/share/doc/ghc/libraries/base/Control-Monad.html#t%3AMonadPlus"
+>MonadPlus</A
+> (<A HREF="Control-Monad-Ran.html#t%3AYoneda"
+>Yoneda</A
+> f)</TD
+></TR
+><TR
+><TD CLASS="decl"
hunk ./doc/html/monad-ran/Control-Monad-Ran.html 426
-><A HREF="/usr/local/share/doc/ghc/libraries/base/Control-Monad.html#t%3AMonad"
->Monad</A
-> f =&gt; <A HREF="Control-Monad-Ran.html#t%3ARMonad"
->RMonad</A
+><A HREF="/usr/local/share/doc/ghc/libraries/base/Control-Applicative.html#t%3AAlternative"
+>Alternative</A
+> f =&gt; <A HREF="/usr/local/share/doc/ghc/libraries/base/Control-Applicative.html#t%3AAlternative"
+>Alternative</A
hunk ./doc/html/monad-ran/Control-Monad-Ran.html 434
+><TR
+><TD CLASS="decl"
+><A HREF="/usr/local/share/doc/ghc/libraries/mtl/Control-Monad-Trans.html#t%3AMonadIO"
+>MonadIO</A
+> f =&gt; <A HREF="/usr/local/share/doc/ghc/libraries/mtl/Control-Monad-Trans.html#t%3AMonadIO"
+>MonadIO</A
+> (<A HREF="Control-Monad-Ran.html#t%3AYoneda"
+>Yoneda</A
+> f)</TD
+></TR
+><TR
+><TD CLASS="decl"
+><A HREF="Control-Functor-Pointed.html#t%3APointed"
+>Pointed</A
+> f =&gt; <A HREF="Control-Functor-Pointed.html#t%3APointed"
+>Pointed</A
+> (<A HREF="Control-Monad-Ran.html#t%3AYoneda"
+>Yoneda</A
+> f)</TD
+></TR
+><TR
+><TD CLASS="decl"
+>RanIso (<A HREF="Control-Monad-Ran.html#t%3AYoneda"
+>Yoneda</A
+> f)</TD
+></TR
hunk ./doc/html/monad-ran/Control-Monad-Ran.html 472
+><TD CLASS="section1"
+><A NAME="2"
+>The codensity monad of a functor
+</A
+></TD
+></TR
+><TR
+><TD CLASS="s15"
+></TD
+></TR
+><TR
hunk ./doc/html/monad-ran/Control-Monad-Ran.html 495
-><A HREF="src/Control-Monad-Ran.html#Codensity"
+><A HREF="src/Control-Monad-Codensity.html#Codensity"
hunk ./doc/html/monad-ran/Control-Monad-Ran.html 506
+><TD CLASS="ndoc"
+>The Codensity monad of a functor/monad generated by a functor
+</TD
+></TR
+><TR
hunk ./doc/html/monad-ran/Control-Monad-Ran.html 567
+><A HREF="/usr/local/share/doc/ghc/libraries/mtl/Control-Monad-RWS-Class.html#t%3AMonadRWS"
+>MonadRWS</A
+> r w s m =&gt; <A HREF="/usr/local/share/doc/ghc/libraries/mtl/Control-Monad-RWS-Class.html#t%3AMonadRWS"
+>MonadRWS</A
+> r w s (<A HREF="Control-Monad-Ran.html#t%3ACodensity"
+>Codensity</A
+> m)</TD
+></TR
+><TR
+><TD CLASS="decl"
+><A HREF="/usr/local/share/doc/ghc/libraries/mtl/Control-Monad-Error-Class.html#t%3AMonadError"
+>MonadError</A
+> e m =&gt; <A HREF="/usr/local/share/doc/ghc/libraries/mtl/Control-Monad-Error-Class.html#t%3AMonadError"
+>MonadError</A
+> e (<A HREF="Control-Monad-Ran.html#t%3ACodensity"
+>Codensity</A
+> m)</TD
+></TR
+><TR
+><TD CLASS="decl"
+><A HREF="/usr/local/share/doc/ghc/libraries/mtl/Control-Monad-Reader-Class.html#t%3AMonadReader"
+>MonadReader</A
+> r m =&gt; <A HREF="/usr/local/share/doc/ghc/libraries/mtl/Control-Monad-Reader-Class.html#t%3AMonadReader"
+>MonadReader</A
+> r (<A HREF="Control-Monad-Ran.html#t%3ACodensity"
+>Codensity</A
+> m)</TD
+></TR
+><TR
+><TD CLASS="decl"
+><A HREF="/usr/local/share/doc/ghc/libraries/mtl/Control-Monad-State-Class.html#t%3AMonadState"
+>MonadState</A
+> s m =&gt; <A HREF="/usr/local/share/doc/ghc/libraries/mtl/Control-Monad-State-Class.html#t%3AMonadState"
+>MonadState</A
+> s (<A HREF="Control-Monad-Ran.html#t%3ACodensity"
+>Codensity</A
+> m)</TD
+></TR
+><TR
+><TD CLASS="decl"
+><A HREF="/usr/local/share/doc/ghc/libraries/mtl/Control-Monad-Writer-Class.html#t%3AMonadWriter"
+>MonadWriter</A
+> w m =&gt; <A HREF="/usr/local/share/doc/ghc/libraries/mtl/Control-Monad-Writer-Class.html#t%3AMonadWriter"
+>MonadWriter</A
+> w (<A HREF="Control-Monad-Ran.html#t%3ACodensity"
+>Codensity</A
+> m)</TD
+></TR
+><TR
+><TD CLASS="decl"
hunk ./doc/html/monad-ran/Control-Monad-Ran.html 633
+><A HREF="/usr/local/share/doc/ghc/libraries/base/Control-Monad.html#t%3AMonadPlus"
+>MonadPlus</A
+> m =&gt; <A HREF="/usr/local/share/doc/ghc/libraries/base/Control-Monad.html#t%3AMonadPlus"
+>MonadPlus</A
+> (<A HREF="Control-Monad-Ran.html#t%3ACodensity"
+>Codensity</A
+> m)</TD
+></TR
+><TR
+><TD CLASS="decl"
hunk ./doc/html/monad-ran/Control-Monad-Ran.html 651
-><A HREF="Control-Monad-Ran.html#t%3ARMonad"
->RMonad</A
+><A HREF="/usr/local/share/doc/ghc/libraries/mtl/Control-Monad-Trans.html#t%3AMonadIO"
+>MonadIO</A
+> m =&gt; <A HREF="/usr/local/share/doc/ghc/libraries/mtl/Control-Monad-Trans.html#t%3AMonadIO"
+>MonadIO</A
+> (<A HREF="Control-Monad-Ran.html#t%3ACodensity"
+>Codensity</A
+> m)</TD
+></TR
+><TR
+><TD CLASS="decl"
+><A HREF="Control-Functor-Pointed.html#t%3APointed"
+>Pointed</A
hunk ./doc/html/monad-ran/Control-Monad-Ran.html 667
+><TR
+><TD CLASS="decl"
+>RanIso (<A HREF="Control-Monad-Ran.html#t%3ACodensity"
+>Codensity</A
+> f)</TD
+></TR
hunk ./doc/html/monad-ran/Control-Monad-Ran.html 685
+><TD CLASS="section1"
+><A NAME="3"
+>A right Kan extension monad transformer
+</A
+></TD
+></TR
+><TR
+><TD CLASS="s15"
+></TD
+></TR
+><TR
hunk ./doc/html/monad-ran/Control-Monad-Ran.html 719
+><TD CLASS="ndoc"
+>A right Kan extension transformer for a monad
+</TD
+></TR
+><TR
hunk ./doc/html/monad-ran/Control-Monad-Ran.html 765
-></TABLE
-></TD
-></TR
hunk ./doc/html/monad-ran/Control-Monad-Ran.html 766
-><TD CLASS="s15"
-></TD
+><TD CLASS="section4"
+><IMG SRC="minus.gif" CLASS="coll" ONCLICK="toggle(this,'i:Ran')" ALT="show/hide"
+> Instances</TD
hunk ./doc/html/monad-ran/Control-Monad-Ran.html 771
-><TD CLASS="topdecl"
-><TABLE CLASS="declbar"
+><TD CLASS="body"
+><DIV ID="i:Ran" STYLE="display:block;"
+><TABLE CLASS="vanilla" CELLSPACING="1" CELLPADDING="0"
hunk ./doc/html/monad-ran/Control-Monad-Ran.html 775
-><TD CLASS="declname"
-><SPAN CLASS="keyword"
->class</SPAN
-> <A HREF="/usr/local/share/doc/ghc/libraries/base/Control-Monad.html#t%3AMonad"
->Monad</A
-> f =&gt; <A NAME="t%3ARMonad"
-></A
-><B
->RMonad</B
-> f  <SPAN CLASS="keyword"
->where</SPAN
-></TD
-><TD CLASS="declbut"
-><A HREF="src/Control-Monad-Ran.html#RMonad"
->Source</A
-></TD
+><TD CLASS="decl"
+><A HREF="/usr/local/share/doc/ghc/libraries/mtl/Control-Monad-RWS-Class.html#t%3AMonadRWS"
+>MonadRWS</A
+> r w s f =&gt; <A HREF="/usr/local/share/doc/ghc/libraries/mtl/Control-Monad-RWS-Class.html#t%3AMonadRWS"
+>MonadRWS</A
+> r w s (<A HREF="Control-Monad-Ran.html#t%3ARan"
+>Ran</A
+> (<A HREF="Control-Monad-Ran.html#t%3AYoneda"
+>Yoneda</A
+> f))</TD
hunk ./doc/html/monad-ran/Control-Monad-Ran.html 786
-></TABLE
-></TD
+><TR
+><TD CLASS="decl"
+><A HREF="/usr/local/share/doc/ghc/libraries/mtl/Control-Monad-RWS-Class.html#t%3AMonadRWS"
+>MonadRWS</A
+> r w s m =&gt; <A HREF="/usr/local/share/doc/ghc/libraries/mtl/Control-Monad-RWS-Class.html#t%3AMonadRWS"
+>MonadRWS</A
+> r w s (<A HREF="Control-Monad-Ran.html#t%3ARan"
+>Ran</A
+> (<A HREF="Control-Monad-Ran.html#t%3ACodensity"
+>Codensity</A
+> m))</TD
hunk ./doc/html/monad-ran/Control-Monad-Ran.html 799
-><TD CLASS="body"
-><TABLE CLASS="vanilla" CELLSPACING="0" CELLPADDING="0"
+><TD CLASS="decl"
+><A HREF="/usr/local/share/doc/ghc/libraries/mtl/Control-Monad-Error-Class.html#t%3AMonadError"
+>MonadError</A
+> e f =&gt; <A HREF="/usr/local/share/doc/ghc/libraries/mtl/Control-Monad-Error-Class.html#t%3AMonadError"
+>MonadError</A
+> e (<A HREF="Control-Monad-Ran.html#t%3ARan"
+>Ran</A
+> (<A HREF="Control-Monad-Ran.html#t%3AYoneda"
+>Yoneda</A
+> f))</TD
+></TR
hunk ./doc/html/monad-ran/Control-Monad-Ran.html 811
-><TD CLASS="s8"
-></TD
+><TD CLASS="decl"
+><A HREF="/usr/local/share/doc/ghc/libraries/mtl/Control-Monad-Error-Class.html#t%3AError"
+>Error</A
+> e =&gt; <A HREF="/usr/local/share/doc/ghc/libraries/mtl/Control-Monad-Error-Class.html#t%3AMonadError"
+>MonadError</A
+> e (<A HREF="Control-Monad-Ran.html#t%3ARan"
+>Ran</A
+> (<A HREF="/usr/local/share/doc/ghc/libraries/base/Data-Either.html#t%3AEither"
+>Either</A
+> e))</TD
hunk ./doc/html/monad-ran/Control-Monad-Ran.html 823
-><TD CLASS="section4"
->Associated Types</TD
+><TD CLASS="decl"
+><A HREF="/usr/local/share/doc/ghc/libraries/mtl/Control-Monad-Error-Class.html#t%3AMonadError"
+>MonadError</A
+> e m =&gt; <A HREF="/usr/local/share/doc/ghc/libraries/mtl/Control-Monad-Error-Class.html#t%3AMonadError"
+>MonadError</A
+> e (<A HREF="Control-Monad-Ran.html#t%3ARan"
+>Ran</A
+> (<A HREF="Control-Monad-Ran.html#t%3ACodensity"
+>Codensity</A
+> m))</TD
hunk ./doc/html/monad-ran/Control-Monad-Ran.html 835
-><TD CLASS="body"
-><TABLE CLASS="vanilla" CELLSPACING="0" CELLPADDING="0"
+><TD CLASS="decl"
+><A HREF="/usr/local/share/doc/ghc/libraries/mtl/Control-Monad-Reader-Class.html#t%3AMonadReader"
+>MonadReader</A
+> r f =&gt; <A HREF="/usr/local/share/doc/ghc/libraries/mtl/Control-Monad-Reader-Class.html#t%3AMonadReader"
+>MonadReader</A
+> r (<A HREF="Control-Monad-Ran.html#t%3ARan"
+>Ran</A
+> (<A HREF="Control-Monad-Ran.html#t%3AYoneda"
+>Yoneda</A
+> f))</TD
+></TR
hunk ./doc/html/monad-ran/Control-Monad-Ran.html 847
-><TD CLASS="topdecl"
-><TABLE CLASS="declbar"
+><TD CLASS="decl"
+><A HREF="/usr/local/share/doc/ghc/libraries/mtl/Control-Monad-Reader-Class.html#t%3AMonadReader"
+>MonadReader</A
+> r m =&gt; <A HREF="/usr/local/share/doc/ghc/libraries/mtl/Control-Monad-Reader-Class.html#t%3AMonadReader"
+>MonadReader</A
+> r (<A HREF="Control-Monad-Ran.html#t%3ARan"
+>Ran</A
+> (<A HREF="Control-Monad-Ran.html#t%3ACodensity"
+>Codensity</A
+> m))</TD
+></TR
hunk ./doc/html/monad-ran/Control-Monad-Ran.html 859
-><TD CLASS="declname"
-><SPAN CLASS="keyword"
->type</SPAN
-> <A NAME="t%3AG"
-></A
-><B
->G</B
-> f :: * -&gt; *</TD
-><TD CLASS="declbut"
-><A HREF="src/Control-Monad-Ran.html#G"
->Source</A
-></TD
+><TD CLASS="decl"
+><A HREF="/usr/local/share/doc/ghc/libraries/mtl/Control-Monad-State-Class.html#t%3AMonadState"
+>MonadState</A
+> s f =&gt; <A HREF="/usr/local/share/doc/ghc/libraries/mtl/Control-Monad-State-Class.html#t%3AMonadState"
+>MonadState</A
+> s (<A HREF="Control-Monad-Ran.html#t%3ARan"
+>Ran</A
+> (<A HREF="Control-Monad-Ran.html#t%3AYoneda"
+>Yoneda</A
+> f))</TD
hunk ./doc/html/monad-ran/Control-Monad-Ran.html 870
-></TABLE
-></TD
+><TR
+><TD CLASS="decl"
+><A HREF="/usr/local/share/doc/ghc/libraries/mtl/Control-Monad-State-Class.html#t%3AMonadState"
+>MonadState</A
+> s m =&gt; <A HREF="/usr/local/share/doc/ghc/libraries/mtl/Control-Monad-State-Class.html#t%3AMonadState"
+>MonadState</A
+> s (<A HREF="Control-Monad-Ran.html#t%3ARan"
+>Ran</A
+> (<A HREF="Control-Monad-Ran.html#t%3ACodensity"
+>Codensity</A
+> m))</TD
hunk ./doc/html/monad-ran/Control-Monad-Ran.html 883
-><TD CLASS="s8"
-></TD
+><TD CLASS="decl"
+><A HREF="/usr/local/share/doc/ghc/libraries/mtl/Control-Monad-Writer-Class.html#t%3AMonadWriter"
+>MonadWriter</A
+> w f =&gt; <A HREF="/usr/local/share/doc/ghc/libraries/mtl/Control-Monad-Writer-Class.html#t%3AMonadWriter"
+>MonadWriter</A
+> w (<A HREF="Control-Monad-Ran.html#t%3ARan"
+>Ran</A
+> (<A HREF="Control-Monad-Ran.html#t%3AYoneda"
+>Yoneda</A
+> f))</TD
hunk ./doc/html/monad-ran/Control-Monad-Ran.html 895
-><TD CLASS="topdecl"
-><TABLE CLASS="declbar"
+><TD CLASS="decl"
+><A HREF="/usr/local/share/doc/ghc/libraries/mtl/Control-Monad-Writer-Class.html#t%3AMonadWriter"
+>MonadWriter</A
+> w m =&gt; <A HREF="/usr/local/share/doc/ghc/libraries/mtl/Control-Monad-Writer-Class.html#t%3AMonadWriter"
+>MonadWriter</A
+> w (<A HREF="Control-Monad-Ran.html#t%3ARan"
+>Ran</A
+> (<A HREF="Control-Monad-Ran.html#t%3ACodensity"
+>Codensity</A
+> m))</TD
+></TR
hunk ./doc/html/monad-ran/Control-Monad-Ran.html 907
-><TD CLASS="declname"
-><SPAN CLASS="keyword"
->type</SPAN
-> <A NAME="t%3AH"
-></A
-><B
->H</B
-> f :: * -&gt; *</TD
-><TD CLASS="declbut"
-><A HREF="src/Control-Monad-Ran.html#H"
->Source</A
-></TD
+><TD CLASS="decl"
+><A HREF="/usr/local/share/doc/ghc/libraries/base/Control-Monad.html#t%3AMonad"
+>Monad</A
+> (<A HREF="Control-Monad-Ran.html#t%3ARan"
+>Ran</A
+> <A HREF="/usr/local/share/doc/ghc/libraries/base/System-IO.html#t%3AIO"
+>IO</A
+>)</TD
hunk ./doc/html/monad-ran/Control-Monad-Ran.html 916
-></TABLE
-></TD
+><TR
+><TD CLASS="decl"
+><A HREF="/usr/local/share/doc/ghc/libraries/mtl/Control-Monad-Error-Class.html#t%3AError"
+>Error</A
+> e =&gt; <A HREF="/usr/local/share/doc/ghc/libraries/base/Control-Monad.html#t%3AMonad"
+>Monad</A
+> (<A HREF="Control-Monad-Ran.html#t%3ARan"
+>Ran</A
+> (<A HREF="/usr/local/share/doc/ghc/libraries/base/Data-Either.html#t%3AEither"
+>Either</A
+> e))</TD
hunk ./doc/html/monad-ran/Control-Monad-Ran.html 928
-></TABLE
-></TD
+><TR
+><TD CLASS="decl"
+><A HREF="/usr/local/share/doc/ghc/libraries/base/Control-Monad.html#t%3AMonad"
+>Monad</A
+> (<A HREF="Control-Monad-Ran.html#t%3ARan"
+>Ran</A
+> <A HREF="/usr/local/share/doc/ghc/libraries/base/GHC-Conc.html#t%3ASTM"
+>STM</A
+>)</TD
hunk ./doc/html/monad-ran/Control-Monad-Ran.html 939
-><TD CLASS="s8"
-></TD
+><TD CLASS="decl"
+><A HREF="/usr/local/share/doc/ghc/libraries/base/Control-Monad.html#t%3AMonad"
+>Monad</A
+> (<A HREF="Control-Monad-Ran.html#t%3ARan"
+>Ran</A
+> (<A HREF="/usr/local/share/doc/ghc/libraries/base/Control-Monad-ST.html#t%3AST"
+>ST</A
+> s))</TD
hunk ./doc/html/monad-ran/Control-Monad-Ran.html 949
-><TD CLASS="section4"
->Methods</TD
+><TD CLASS="decl"
+><A HREF="/usr/local/share/doc/ghc/libraries/base/Control-Monad.html#t%3AMonad"
+>Monad</A
+> (<A HREF="Control-Monad-Ran.html#t%3ARan"
+>Ran</A
+> <A HREF="/usr/local/share/doc/ghc/libraries/base/Data-Maybe.html#t%3AMaybe"
+>Maybe</A
+>)</TD
hunk ./doc/html/monad-ran/Control-Monad-Ran.html 959
-><TD CLASS="body"
-><TABLE CLASS="vanilla" CELLSPACING="0" CELLPADDING="0"
+><TD CLASS="decl"
+><A HREF="/usr/local/share/doc/ghc/libraries/base/Control-Monad.html#t%3AMonad"
+>Monad</A
+> (<A HREF="Control-Monad-Ran.html#t%3ARan"
+>Ran</A
+> <A HREF="/usr/local/share/doc/ghc/libraries/mtl/Control-Monad-Identity.html#t%3AIdentity"
+>Identity</A
+>)</TD
+></TR
hunk ./doc/html/monad-ran/Control-Monad-Ran.html 969
-><TD CLASS="topdecl"
-><TABLE CLASS="declbar"
+><TD CLASS="decl"
+><A HREF="/usr/local/share/doc/ghc/libraries/base/Control-Monad.html#t%3AMonad"
+>Monad</A
+> f =&gt; <A HREF="/usr/local/share/doc/ghc/libraries/base/Control-Monad.html#t%3AMonad"
+>Monad</A
+> (<A HREF="Control-Monad-Ran.html#t%3ARan"
+>Ran</A
+> (<A HREF="Control-Monad-Ran.html#t%3AYoneda"
+>Yoneda</A
+> f))</TD
+></TR
hunk ./doc/html/monad-ran/Control-Monad-Ran.html 981
-><TD CLASS="declname"
-><A NAME="v%3AtoRan"
-></A
-><B
->toRan</B
-> ::  f a -&gt; <A HREF="Control-Monad-Ran.html#t%3ARan"
+><TD CLASS="decl"
+><A HREF="/usr/local/share/doc/ghc/libraries/base/Control-Monad.html#t%3AMonad"
+>Monad</A
+> (<A HREF="Control-Monad-Ran.html#t%3ARan"
hunk ./doc/html/monad-ran/Control-Monad-Ran.html 986
-> f a</TD
-><TD CLASS="declbut"
-><A HREF="src/Control-Monad-Ran.html#toRan"
->Source</A
-></TD
+> (<A HREF="Control-Monad-Ran.html#t%3ACodensity"
+>Codensity</A
+> f))</TD
hunk ./doc/html/monad-ran/Control-Monad-Ran.html 990
-></TABLE
-></TD
+><TR
+><TD CLASS="decl"
+>RanIso f =&gt; <A HREF="/usr/local/share/doc/ghc/libraries/base/Control-Monad.html#t%3AFunctor"
+>Functor</A
+> (<A HREF="Control-Monad-Ran.html#t%3ARan"
+>Ran</A
+> f)</TD
hunk ./doc/html/monad-ran/Control-Monad-Ran.html 999
-><TD CLASS="s8"
-></TD
+><TD CLASS="decl"
+><A HREF="/usr/local/share/doc/ghc/libraries/base/Control-Monad-Fix.html#t%3AMonadFix"
+>MonadFix</A
+> m =&gt; <A HREF="/usr/local/share/doc/ghc/libraries/base/Control-Monad-Fix.html#t%3AMonadFix"
+>MonadFix</A
+> (<A HREF="Control-Monad-Ran.html#t%3ARan"
+>Ran</A
+> (<A HREF="Control-Monad-Ran.html#t%3AYoneda"
+>Yoneda</A
+> m))</TD
hunk ./doc/html/monad-ran/Control-Monad-Ran.html 1011
-><TD CLASS="topdecl"
-><TABLE CLASS="declbar"
+><TD CLASS="decl"
+><A HREF="/usr/local/share/doc/ghc/libraries/base/Control-Monad-Fix.html#t%3AMonadFix"
+>MonadFix</A
+> m =&gt; <A HREF="/usr/local/share/doc/ghc/libraries/base/Control-Monad-Fix.html#t%3AMonadFix"
+>MonadFix</A
+> (<A HREF="Control-Monad-Ran.html#t%3ARan"
+>Ran</A
+> (<A HREF="Control-Monad-Ran.html#t%3ACodensity"
+>Codensity</A
+> m))</TD
+></TR
hunk ./doc/html/monad-ran/Control-Monad-Ran.html 1023
-><TD CLASS="declname"
-><A NAME="v%3AfromRan"
-></A
-><B
->fromRan</B
-> ::  <A HREF="Control-Monad-Ran.html#t%3ARan"
+><TD CLASS="decl"
+><A HREF="/usr/local/share/doc/ghc/libraries/mtl/Control-Monad-Error-Class.html#t%3AError"
+>Error</A
+> e =&gt; <A HREF="/usr/local/share/doc/ghc/libraries/base/Control-Monad.html#t%3AMonadPlus"
+>MonadPlus</A
+> (<A HREF="Control-Monad-Ran.html#t%3ARan"
hunk ./doc/html/monad-ran/Control-Monad-Ran.html 1030
-> f a -&gt; f a</TD
-><TD CLASS="declbut"
-><A HREF="src/Control-Monad-Ran.html#fromRan"
->Source</A
-></TD
+> (<A HREF="/usr/local/share/doc/ghc/libraries/base/Data-Either.html#t%3AEither"
+>Either</A
+> e))</TD
hunk ./doc/html/monad-ran/Control-Monad-Ran.html 1034
-></TABLE
-></TD
+><TR
+><TD CLASS="decl"
+><A HREF="/usr/local/share/doc/ghc/libraries/base/Control-Monad.html#t%3AMonadPlus"
+>MonadPlus</A
+> (<A HREF="Control-Monad-Ran.html#t%3ARan"
+>Ran</A
+> <A HREF="/usr/local/share/doc/ghc/libraries/base/Data-Maybe.html#t%3AMaybe"
+>Maybe</A
+>)</TD
hunk ./doc/html/monad-ran/Control-Monad-Ran.html 1044
-></TABLE
-></TD
+><TR
+><TD CLASS="decl"
+><A HREF="/usr/local/share/doc/ghc/libraries/base/Control-Monad.html#t%3AMonadPlus"
+>MonadPlus</A
+> f =&gt; <A HREF="/usr/local/share/doc/ghc/libraries/base/Control-Monad.html#t%3AMonadPlus"
+>MonadPlus</A
+> (<A HREF="Control-Monad-Ran.html#t%3ARan"
+>Ran</A
+> (<A HREF="Control-Monad-Ran.html#t%3AYoneda"
+>Yoneda</A
+> f))</TD
hunk ./doc/html/monad-ran/Control-Monad-Ran.html 1057
-><TD CLASS="s8"
-></TD
+><TD CLASS="decl"
+><A HREF="/usr/local/share/doc/ghc/libraries/base/Control-Monad.html#t%3AMonadPlus"
+>MonadPlus</A
+> f =&gt; <A HREF="/usr/local/share/doc/ghc/libraries/base/Control-Monad.html#t%3AMonadPlus"
+>MonadPlus</A
+> (<A HREF="Control-Monad-Ran.html#t%3ARan"
+>Ran</A
+> (<A HREF="Control-Monad-Ran.html#t%3ACodensity"
+>Codensity</A
+> f))</TD
hunk ./doc/html/monad-ran/Control-Monad-Ran.html 1069
-><TD CLASS="section4"
-><IMG SRC="minus.gif" CLASS="coll" ONCLICK="toggle(this,'i:RMonad')" ALT="show/hide"
-> Instances</TD
+><TD CLASS="decl"
+><A HREF="/usr/local/share/doc/ghc/libraries/base/Control-Applicative.html#t%3AApplicative"
+>Applicative</A
+> (<A HREF="Control-Monad-Ran.html#t%3ARan"
+>Ran</A
+> <A HREF="/usr/local/share/doc/ghc/libraries/base/System-IO.html#t%3AIO"
+>IO</A
+>)</TD
hunk ./doc/html/monad-ran/Control-Monad-Ran.html 1079
-><TD CLASS="body"
-><DIV ID="i:RMonad" STYLE="display:block;"
-><TABLE CLASS="vanilla" CELLSPACING="1" CELLPADDING="0"
+><TD CLASS="decl"
+><A HREF="/usr/local/share/doc/ghc/libraries/base/Control-Applicative.html#t%3AApplicative"
+>Applicative</A
+> (<A HREF="Control-Monad-Ran.html#t%3ARan"
+>Ran</A
+> <A HREF="/usr/local/share/doc/ghc/libraries/base/GHC-Conc.html#t%3ASTM"
+>STM</A
+>)</TD
+></TR
hunk ./doc/html/monad-ran/Control-Monad-Ran.html 1090
-><A HREF="Control-Monad-Ran.html#t%3ARMonad"
->RMonad</A
+><A HREF="/usr/local/share/doc/ghc/libraries/base/Control-Applicative.html#t%3AApplicative"
+>Applicative</A
+> (<A HREF="Control-Monad-Ran.html#t%3ARan"
+>Ran</A
+> (<A HREF="/usr/local/share/doc/ghc/libraries/base/Control-Monad-ST.html#t%3AST"
+>ST</A
+> s))</TD
+></TR
+><TR
+><TD CLASS="decl"
+><A HREF="/usr/local/share/doc/ghc/libraries/base/Control-Applicative.html#t%3AApplicative"
+>Applicative</A
+> (<A HREF="Control-Monad-Ran.html#t%3ARan"
+>Ran</A
hunk ./doc/html/monad-ran/Control-Monad-Ran.html 1106
-></TD
+>)</TD
hunk ./doc/html/monad-ran/Control-Monad-Ran.html 1110
-><A HREF="Control-Monad-Ran.html#t%3ARMonad"
->RMonad</A
+><A HREF="/usr/local/share/doc/ghc/libraries/base/Control-Applicative.html#t%3AApplicative"
+>Applicative</A
+> (<A HREF="Control-Monad-Ran.html#t%3ARan"
+>Ran</A
hunk ./doc/html/monad-ran/Control-Monad-Ran.html 1116
-></TD
+>)</TD
hunk ./doc/html/monad-ran/Control-Monad-Ran.html 1120
-><A HREF="/usr/local/share/doc/ghc/libraries/mtl/Control-Monad-Error-Class.html#t%3AError"
->Error</A
-> b =&gt; <A HREF="Control-Monad-Ran.html#t%3ARMonad"
->RMonad</A
-> (<A HREF="/usr/local/share/doc/ghc/libraries/base/Data-Either.html#t%3AEither"
->Either</A
-> b)</TD
+><A HREF="/usr/local/share/doc/ghc/libraries/base/Control-Applicative.html#t%3AApplicative"
+>Applicative</A
+> f =&gt; <A HREF="/usr/local/share/doc/ghc/libraries/base/Control-Applicative.html#t%3AApplicative"
+>Applicative</A
+> (<A HREF="Control-Monad-Ran.html#t%3ARan"
+>Ran</A
+> (<A HREF="Control-Monad-Ran.html#t%3AYoneda"
+>Yoneda</A
+> f))</TD
hunk ./doc/html/monad-ran/Control-Monad-Ran.html 1132
-><A HREF="Control-Monad-Ran.html#t%3ARMonad"
->RMonad</A
-> (<A HREF="/usr/local/share/doc/ghc/libraries/mtl/Control-Monad-Cont.html#t%3ACont"
->Cont</A
-> r)</TD
+><A HREF="/usr/local/share/doc/ghc/libraries/base/Control-Applicative.html#t%3AApplicative"
+>Applicative</A
+> (<A HREF="Control-Monad-Ran.html#t%3ARan"
+>Ran</A
+> (<A HREF="Control-Monad-Ran.html#t%3ACodensity"
+>Codensity</A
+> f))</TD
hunk ./doc/html/monad-ran/Control-Monad-Ran.html 1142
-><A HREF="/usr/local/share/doc/ghc/libraries/base/Data-Monoid.html#t%3AMonoid"
->Monoid</A
-> w =&gt; <A HREF="Control-Monad-Ran.html#t%3ARMonad"
->RMonad</A
-> (<A HREF="/usr/local/share/doc/ghc/libraries/mtl/Control-Monad-Writer-Lazy.html#t%3AWriter"
->Writer</A
-> w)</TD
+><A HREF="/usr/local/share/doc/ghc/libraries/base/Control-Applicative.html#t%3AAlternative"
+>Alternative</A
+> f =&gt; <A HREF="/usr/local/share/doc/ghc/libraries/base/Control-Applicative.html#t%3AAlternative"
+>Alternative</A
+> (<A HREF="Control-Monad-Ran.html#t%3ARan"
+>Ran</A
+> (<A HREF="Control-Monad-Ran.html#t%3AYoneda"
+>Yoneda</A
+> f))</TD
hunk ./doc/html/monad-ran/Control-Monad-Ran.html 1154
-><A HREF="Control-Monad-Ran.html#t%3ARMonad"
->RMonad</A
-> (<A HREF="/usr/local/share/doc/ghc/libraries/mtl/Control-Monad-State-Lazy.html#t%3AState"
->State</A
-> s)</TD
+><A HREF="/usr/local/share/doc/ghc/libraries/base/Control-Monad.html#t%3AMonadPlus"
+>MonadPlus</A
+> f =&gt; <A HREF="/usr/local/share/doc/ghc/libraries/base/Control-Applicative.html#t%3AAlternative"
+>Alternative</A
+> (<A HREF="Control-Monad-Ran.html#t%3ARan"
+>Ran</A
+> (<A HREF="Control-Monad-Ran.html#t%3ACodensity"
+>Codensity</A
+> f))</TD
hunk ./doc/html/monad-ran/Control-Monad-Ran.html 1166
-><A HREF="Control-Monad-Ran.html#t%3ARMonad"
->RMonad</A
-> (<A HREF="/usr/local/share/doc/ghc/libraries/mtl/Control-Monad-Reader.html#t%3AReader"
->Reader</A
-> e)</TD
+><A HREF="/usr/local/share/doc/ghc/libraries/mtl/Control-Monad-Trans.html#t%3AMonadIO"
+>MonadIO</A
+> (<A HREF="Control-Monad-Ran.html#t%3ARan"
+>Ran</A
+> <A HREF="/usr/local/share/doc/ghc/libraries/base/System-IO.html#t%3AIO"
+>IO</A
+>)</TD
hunk ./doc/html/monad-ran/Control-Monad-Ran.html 1176
-><A HREF="Control-Monad-Ran.html#t%3ARMonad"
->RMonad</A
+><A HREF="/usr/local/share/doc/ghc/libraries/mtl/Control-Monad-Trans.html#t%3AMonadIO"
+>MonadIO</A
+> f =&gt; <A HREF="/usr/local/share/doc/ghc/libraries/mtl/Control-Monad-Trans.html#t%3AMonadIO"
+>MonadIO</A
+> (<A HREF="Control-Monad-Ran.html#t%3ARan"
+>Ran</A
+> (<A HREF="Control-Monad-Ran.html#t%3AYoneda"
+>Yoneda</A
+> f))</TD
+></TR
+><TR
+><TD CLASS="decl"
+><A HREF="/usr/local/share/doc/ghc/libraries/mtl/Control-Monad-Trans.html#t%3AMonadIO"
+>MonadIO</A
+> f =&gt; <A HREF="/usr/local/share/doc/ghc/libraries/mtl/Control-Monad-Trans.html#t%3AMonadIO"
+>MonadIO</A
+> (<A HREF="Control-Monad-Ran.html#t%3ARan"
+>Ran</A
hunk ./doc/html/monad-ran/Control-Monad-Ran.html 1196
-> f)</TD
+> f))</TD
hunk ./doc/html/monad-ran/Control-Monad-Ran.html 1200
-><A HREF="/usr/local/share/doc/ghc/libraries/base/Control-Monad.html#t%3AMonad"
->Monad</A
-> f =&gt; <A HREF="Control-Monad-Ran.html#t%3ARMonad"
->RMonad</A
+><A HREF="Control-Functor-Pointed.html#t%3APointed"
+>Pointed</A
+> (<A HREF="Control-Monad-Ran.html#t%3ARan"
+>Ran</A
+> <A HREF="/usr/local/share/doc/ghc/libraries/mtl/Control-Monad-Identity.html#t%3AIdentity"
+>Identity</A
+>)</TD
+></TR
+><TR
+><TD CLASS="decl"
+><A HREF="Control-Functor-Pointed.html#t%3APointed"
+>Pointed</A
+> f =&gt; <A HREF="Control-Functor-Pointed.html#t%3APointed"
+>Pointed</A
+> (<A HREF="Control-Monad-Ran.html#t%3ARan"
+>Ran</A
hunk ./doc/html/monad-ran/Control-Monad-Ran.html 1218
-> f)</TD
+> f))</TD
hunk ./doc/html/monad-ran/Control-Monad-Ran.html 1222
-><A HREF="Control-Monad-Ran.html#t%3ARMonad"
->RMonad</A
-> m =&gt; <A HREF="Control-Monad-Ran.html#t%3ARMonad"
->RMonad</A
-> (<A HREF="/usr/local/share/doc/ghc/libraries/mtl/Control-Monad-Cont.html#t%3AContT"
->ContT</A
-> r m)</TD
+><A HREF="Control-Functor-Pointed.html#t%3APointed"
+>Pointed</A
+> (<A HREF="Control-Monad-Ran.html#t%3ARan"
+>Ran</A
+> (<A HREF="Control-Monad-Ran.html#t%3ACodensity"
+>Codensity</A
+> f))</TD
hunk ./doc/html/monad-ran/Control-Monad-Ran.html 1232
->(<A HREF="/usr/local/share/doc/ghc/libraries/base/Data-Monoid.html#t%3AMonoid"
+><A HREF="/usr/local/share/doc/ghc/libraries/base/Data-Monoid.html#t%3AMonoid"
hunk ./doc/html/monad-ran/Control-Monad-Ran.html 1234
-> w, <A HREF="Control-Monad-Ran.html#t%3ARMonad"
->RMonad</A
-> m) =&gt; <A HREF="Control-Monad-Ran.html#t%3ARMonad"
->RMonad</A
-> (<A HREF="/usr/local/share/doc/ghc/libraries/mtl/Control-Monad-Writer-Lazy.html#t%3AWriterT"
->WriterT</A
-> w m)</TD
+> a =&gt; <A HREF="/usr/local/share/doc/ghc/libraries/base/Data-Monoid.html#t%3AMonoid"
+>Monoid</A
+> (<A HREF="Control-Monad-Ran.html#t%3ARan"
+>Ran</A
+> <A HREF="/usr/local/share/doc/ghc/libraries/base/Data-Maybe.html#t%3AMaybe"
+>Maybe</A
+> a)</TD
+></TR
+></TABLE
+></DIV
+></TD
+></TR
+></TABLE
+></TD
hunk ./doc/html/monad-ran/Control-Monad-Ran.html 1250
-><TD CLASS="decl"
-><A HREF="Control-Monad-Ran.html#t%3ARMonad"
->RMonad</A
-> m =&gt; <A HREF="Control-Monad-Ran.html#t%3ARMonad"
->RMonad</A
-> (<A HREF="/usr/local/share/doc/ghc/libraries/mtl/Control-Monad-State-Lazy.html#t%3AStateT"
->StateT</A
-> s m)</TD
+><TD CLASS="s15"
+></TD
hunk ./doc/html/monad-ran/Control-Monad-Ran.html 1254
-><TD CLASS="decl"
-><A HREF="Control-Monad-Ran.html#t%3ARMonad"
->RMonad</A
-> m =&gt; <A HREF="Control-Monad-Ran.html#t%3ARMonad"
->RMonad</A
-> (<A HREF="/usr/local/share/doc/ghc/libraries/mtl/Control-Monad-Reader.html#t%3AReaderT"
->ReaderT</A
-> e m)</TD
+><TD CLASS="section1"
+><A NAME="4"
+>Representing monads as right Kan extensions
+</A
+></TD
hunk ./doc/html/monad-ran/Control-Monad-Ran.html 1261
-><TD CLASS="decl"
->(<A HREF="Control-Monad-Ran.html#t%3ARMonad"
->RMonad</A
-> m, <A HREF="/usr/local/share/doc/ghc/libraries/mtl/Control-Monad-Error-Class.html#t%3AError"
->Error</A
-> b) =&gt; <A HREF="Control-Monad-Ran.html#t%3ARMonad"
->RMonad</A
-> (<A HREF="/usr/local/share/doc/ghc/libraries/mtl/Control-Monad-Error.html#t%3AErrorT"
->ErrorT</A
-> b m)</TD
+><TD CLASS="s15"
+></TD
+></TR
+><TR
+><TD CLASS="topdecl"
+><TABLE CLASS="declbar"
+><TR
+><TD CLASS="declname"
+><SPAN CLASS="keyword"
+>class</SPAN
+> (<A HREF="/usr/local/share/doc/ghc/libraries/base/Control-Monad.html#t%3AMonad"
+>Monad</A
+> (<A HREF="Control-Monad-Ran.html#t%3ARan"
+>Ran</A
+> f), <A HREF="/usr/local/share/doc/ghc/libraries/base/Control-Monad.html#t%3AMonad"
+>Monad</A
+> f, RanIso f) =&gt; <A NAME="t%3ARMonad"
+></A
+><B
+>RMonad</B
+> f </TD
+><TD CLASS="declbut"
+><A HREF="src/Control-Monad-Ran.html#RMonad"
+>Source</A
+></TD
hunk ./doc/html/monad-ran/Control-Monad-Ran.html 1288
-></DIV
hunk ./doc/html/monad-ran/Control-Monad-Ran.html 1290
+><TR
+><TD CLASS="body"
+><TABLE CLASS="vanilla" CELLSPACING="0" CELLPADDING="0"
hunk ./doc/html/monad-ran/Control-Monad-Ran.html 1305
-><A NAME="v%3AtoRan"
+><A NAME="v%3AliftRan"
hunk ./doc/html/monad-ran/Control-Monad-Ran.html 1308
->toRan</B
-> :: <A HREF="Control-Monad-Ran.html#t%3ARMonad"
->RMonad</A
-> f =&gt; f a -&gt; <A HREF="Control-Monad-Ran.html#t%3ARan"
+>liftRan</B
+> :: RanIso f =&gt; f a -&gt; <A HREF="Control-Monad-Ran.html#t%3ARan"
hunk ./doc/html/monad-ran/Control-Monad-Ran.html 1313
-><A HREF="src/Control-Monad-Ran.html#toRan"
+><A HREF="src/Control-Monad-Ran.html#liftRan"
hunk ./doc/html/monad-ran/Control-Monad-Ran.html 1329
-><A NAME="v%3AfromRan"
+><A NAME="v%3AlowerRan"
hunk ./doc/html/monad-ran/Control-Monad-Ran.html 1332
->fromRan</B
-> :: <A HREF="Control-Monad-Ran.html#t%3ARMonad"
->RMonad</A
-> f =&gt; <A HREF="Control-Monad-Ran.html#t%3ARan"
+>lowerRan</B
+> :: RanIso f =&gt; <A HREF="Control-Monad-Ran.html#t%3ARan"
hunk ./doc/html/monad-ran/Control-Monad-Ran.html 1337
-><A HREF="src/Control-Monad-Ran.html#fromRan"
+><A HREF="src/Control-Monad-Ran.html#lowerRan"
addfile ./doc/html/monad-ran/Control-Monad-Yoneda.html
hunk ./doc/html/monad-ran/Control-Monad-Yoneda.html 1
+<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd">
+<!--Rendered using the Haskell Html Library v0.2-->
+<HTML
+><HEAD
+><META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=UTF-8"
+><TITLE
+>Control.Monad.Yoneda</TITLE
+><LINK HREF="haddock.css" REL="stylesheet" TYPE="text/css"
+><SCRIPT SRC="haddock-util.js" TYPE="text/javascript"
+></SCRIPT
+></HEAD
+><BODY
+><TABLE CLASS="vanilla" CELLSPACING="0" CELLPADDING="0"
+><TR
+><TD CLASS="topbar"
+><TABLE CLASS="vanilla" CELLSPACING="0" CELLPADDING="0"
+><TR
+><TD
+><IMG SRC="haskell_icon.gif" WIDTH="16" HEIGHT="16" ALT=" "
+></TD
+><TD CLASS="title"
+>monad-ran-0.0.7: Fast implementations of monads and monad transformers using right Kan extensions</TD
+><TD CLASS="topbut"
+><A HREF="src/Control-Monad-Yoneda.html"
+>Source code</A
+></TD
+><TD CLASS="topbut"
+><A HREF="index.html"
+>Contents</A
+></TD
+><TD CLASS="topbut"
+><A HREF="doc-index.html"
+>Index</A
+></TD
+></TR
+></TABLE
+></TD
+></TR
+><TR
+><TD CLASS="modulebar"
+><TABLE CLASS="vanilla" CELLSPACING="0" CELLPADDING="0"
+><TR
+><TD
+><FONT SIZE="6"
+>Control.Monad.Yoneda</FONT
+></TD
+></TR
+></TABLE
+></TD
+></TR
+><TR
+><TD CLASS="s15"
+></TD
+></TR
+><TR
+><TD
+><TABLE CLASS="vanilla" CELLSPACING="0" CELLPADDING="0"
+><TR
+><TD CLASS="section4"
+><B
+>Contents</B
+></TD
+></TR
+><TR
+><TD
+><DL
+><DT
+><A HREF="#1"
+>The Yoneda Lemma
+</A
+></DT
+></DL
+></TD
+></TR
+></TABLE
+></TD
+></TR
+><TR
+><TD CLASS="s15"
+></TD
+></TR
+><TR
+><TD CLASS="s15"
+></TD
+></TR
+><TR
+><TD CLASS="section1"
+>Synopsis</TD
+></TR
+><TR
+><TD CLASS="s15"
+></TD
+></TR
+><TR
+><TD CLASS="body"
+><TABLE CLASS="vanilla" CELLSPACING="0" CELLPADDING="0"
+><TR
+><TD CLASS="decl"
+><SPAN CLASS="keyword"
+>data</SPAN
+>  <A HREF="#t%3AYoneda"
+>Yoneda</A
+> f a = <A HREF="#v%3AYoneda"
+>Yoneda</A
+> {<TABLE CLASS="vanilla" CELLSPACING="0" CELLPADDING="0"
+><TR
+><TD CLASS="recfield"
+><A HREF="#v%3AgetYoneda"
+>getYoneda</A
+> :: <SPAN CLASS="keyword"
+>forall</SPAN
+> b.  (a -&gt; b) -&gt; f b</TD
+></TR
+></TABLE
+>}</TD
+></TR
+><TR
+><TD CLASS="s8"
+></TD
+></TR
+><TR
+><TD CLASS="decl"
+><A HREF="#v%3ArunYoneda"
+>runYoneda</A
+> ::  <A HREF="Control-Monad-Yoneda.html#t%3AYoneda"
+>Yoneda</A
+> f a -&gt; f a</TD
+></TR
+></TABLE
+></TD
+></TR
+><TR
+><TD CLASS="s15"
+></TD
+></TR
+><TR
+><TD CLASS="s15"
+></TD
+></TR
+><TR
+><TD CLASS="section1"
+><A NAME="1"
+>The Yoneda Lemma
+</A
+></TD
+></TR
+><TR
+><TD CLASS="s15"
+></TD
+></TR
+><TR
+><TD CLASS="topdecl"
+><TABLE CLASS="declbar"
+><TR
+><TD CLASS="declname"
+><SPAN CLASS="keyword"
+>data</SPAN
+>  <A NAME="t%3AYoneda"
+></A
+><B
+>Yoneda</B
+> f a </TD
+><TD CLASS="declbut"
+><A HREF="src/Control-Monad-Yoneda.html#Yoneda"
+>Source</A
+></TD
+></TR
+></TABLE
+></TD
+></TR
+><TR
+><TD CLASS="body"
+><TABLE CLASS="vanilla" CELLSPACING="0" CELLPADDING="0"
+><TR
+><TD CLASS="section4"
+>Constructors</TD
+></TR
+><TR
+><TD CLASS="body"
+><TABLE CLASS="vanilla" CELLSPACING="5" CELLPADDING="0"
+><TR
+><TD CLASS="arg"
+><A NAME="v%3AYoneda"
+></A
+><B
+>Yoneda</B
+></TD
+><TD CLASS="rdoc"
+></TD
+></TR
+><TR
+><TD CLASS="body" COLSPAN="2"
+><TABLE CLASS="vanilla" CELLSPACING="1" CELLPADDING="0"
+><TR
+><TD CLASS="arg"
+><A NAME="v%3AgetYoneda"
+></A
+><B
+>getYoneda</B
+> :: <SPAN CLASS="keyword"
+>forall</SPAN
+> b.  (a -&gt; b) -&gt; f b</TD
+><TD CLASS="rdoc"
+></TD
+></TR
+></TABLE
+></TD
+></TR
+></TABLE
+></TD
+></TR
+><TR
+><TD CLASS="section4"
+><IMG SRC="minus.gif" CLASS="coll" ONCLICK="toggle(this,'i:Yoneda')" ALT="show/hide"
+> Instances</TD
+></TR
+><TR
+><TD CLASS="body"
+><DIV ID="i:Yoneda" STYLE="display:block;"
+><TABLE CLASS="vanilla" CELLSPACING="1" CELLPADDING="0"
+><TR
+><TD CLASS="decl"
+><A HREF="/usr/local/share/doc/ghc/libraries/mtl/Control-Monad-Trans.html#t%3AMonadTrans"
+>MonadTrans</A
+> <A HREF="Control-Monad-Yoneda.html#t%3AYoneda"
+>Yoneda</A
+></TD
+></TR
+><TR
+><TD CLASS="decl"
+><A HREF="/usr/local/share/doc/ghc/libraries/mtl/Control-Monad-RWS-Class.html#t%3AMonadRWS"
+>MonadRWS</A
+> r w s f =&gt; <A HREF="/usr/local/share/doc/ghc/libraries/mtl/Control-Monad-RWS-Class.html#t%3AMonadRWS"
+>MonadRWS</A
+> r w s (<A HREF="Control-Monad-Yoneda.html#t%3AYoneda"
+>Yoneda</A
+> f)</TD
+></TR
+><TR
+><TD CLASS="decl"
+><A HREF="/usr/local/share/doc/ghc/libraries/mtl/Control-Monad-Error-Class.html#t%3AMonadError"
+>MonadError</A
+> e f =&gt; <A HREF="/usr/local/share/doc/ghc/libraries/mtl/Control-Monad-Error-Class.html#t%3AMonadError"
+>MonadError</A
+> e (<A HREF="Control-Monad-Yoneda.html#t%3AYoneda"
+>Yoneda</A
+> f)</TD
+></TR
+><TR
+><TD CLASS="decl"
+><A HREF="/usr/local/share/doc/ghc/libraries/mtl/Control-Monad-Reader-Class.html#t%3AMonadReader"
+>MonadReader</A
+> r f =&gt; <A HREF="/usr/local/share/doc/ghc/libraries/mtl/Control-Monad-Reader-Class.html#t%3AMonadReader"
+>MonadReader</A
+> r (<A HREF="Control-Monad-Yoneda.html#t%3AYoneda"
+>Yoneda</A
+> f)</TD
+></TR
+><TR
+><TD CLASS="decl"
+><A HREF="/usr/local/share/doc/ghc/libraries/mtl/Control-Monad-State-Class.html#t%3AMonadState"
+>MonadState</A
+> s f =&gt; <A HREF="/usr/local/share/doc/ghc/libraries/mtl/Control-Monad-State-Class.html#t%3AMonadState"
+>MonadState</A
+> s (<A HREF="Control-Monad-Yoneda.html#t%3AYoneda"
+>Yoneda</A
+> f)</TD
+></TR
+><TR
+><TD CLASS="decl"
+><A HREF="/usr/local/share/doc/ghc/libraries/mtl/Control-Monad-Writer-Class.html#t%3AMonadWriter"
+>MonadWriter</A
+> w f =&gt; <A HREF="/usr/local/share/doc/ghc/libraries/mtl/Control-Monad-Writer-Class.html#t%3AMonadWriter"
+>MonadWriter</A
+> w (<A HREF="Control-Monad-Yoneda.html#t%3AYoneda"
+>Yoneda</A
+> f)</TD
+></TR
+><TR
+><TD CLASS="decl"
+><A HREF="/usr/local/share/doc/ghc/libraries/base/Control-Monad.html#t%3AMonad"
+>Monad</A
+> f =&gt; <A HREF="/usr/local/share/doc/ghc/libraries/base/Control-Monad.html#t%3AMonad"
+>Monad</A
+> (<A HREF="Control-Monad-Yoneda.html#t%3AYoneda"
+>Yoneda</A
+> f)</TD
+></TR
+><TR
+><TD CLASS="decl"
+><A HREF="/usr/local/share/doc/ghc/libraries/base/Control-Monad.html#t%3AFunctor"
+>Functor</A
+> (<A HREF="Control-Monad-Yoneda.html#t%3AYoneda"
+>Yoneda</A
+> f)</TD
+></TR
+><TR
+><TD CLASS="decl"
+><A HREF="/usr/local/share/doc/ghc/libraries/base/Control-Monad-Fix.html#t%3AMonadFix"
+>MonadFix</A
+> m =&gt; <A HREF="/usr/local/share/doc/ghc/libraries/base/Control-Monad-Fix.html#t%3AMonadFix"
+>MonadFix</A
+> (<A HREF="Control-Monad-Yoneda.html#t%3AYoneda"
+>Yoneda</A
+> m)</TD
+></TR
+><TR
+><TD CLASS="decl"
+><A HREF="/usr/local/share/doc/ghc/libraries/base/Control-Monad.html#t%3AMonadPlus"
+>MonadPlus</A
+> f =&gt; <A HREF="/usr/local/share/doc/ghc/libraries/base/Control-Monad.html#t%3AMonadPlus"
+>MonadPlus</A
+> (<A HREF="Control-Monad-Yoneda.html#t%3AYoneda"
+>Yoneda</A
+> f)</TD
+></TR
+><TR
+><TD CLASS="decl"
+><A HREF="/usr/local/share/doc/ghc/libraries/base/Control-Applicative.html#t%3AApplicative"
+>Applicative</A
+> f =&gt; <A HREF="/usr/local/share/doc/ghc/libraries/base/Control-Applicative.html#t%3AApplicative"
+>Applicative</A
+> (<A HREF="Control-Monad-Yoneda.html#t%3AYoneda"
+>Yoneda</A
+> f)</TD
+></TR
+><TR
+><TD CLASS="decl"
+><A HREF="/usr/local/share/doc/ghc/libraries/base/Control-Applicative.html#t%3AAlternative"
+>Alternative</A
+> f =&gt; <A HREF="/usr/local/share/doc/ghc/libraries/base/Control-Applicative.html#t%3AAlternative"
+>Alternative</A
+> (<A HREF="Control-Monad-Yoneda.html#t%3AYoneda"
+>Yoneda</A
+> f)</TD
+></TR
+><TR
+><TD CLASS="decl"
+><A HREF="/usr/local/share/doc/ghc/libraries/mtl/Control-Monad-Trans.html#t%3AMonadIO"
+>MonadIO</A
+> f =&gt; <A HREF="/usr/local/share/doc/ghc/libraries/mtl/Control-Monad-Trans.html#t%3AMonadIO"
+>MonadIO</A
+> (<A HREF="Control-Monad-Yoneda.html#t%3AYoneda"
+>Yoneda</A
+> f)</TD
+></TR
+><TR
+><TD CLASS="decl"
+><A HREF="Control-Functor-Pointed.html#t%3APointed"
+>Pointed</A
+> f =&gt; <A HREF="Control-Functor-Pointed.html#t%3APointed"
+>Pointed</A
+> (<A HREF="Control-Monad-Yoneda.html#t%3AYoneda"
+>Yoneda</A
+> f)</TD
+></TR
+><TR
+><TD CLASS="decl"
+>RanIso (<A HREF="Control-Monad-Yoneda.html#t%3AYoneda"
+>Yoneda</A
+> f)</TD
+></TR
+></TABLE
+></DIV
+></TD
+></TR
+></TABLE
+></TD
+></TR
+><TR
+><TD CLASS="s15"
+></TD
+></TR
+><TR
+><TD CLASS="topdecl"
+><TABLE CLASS="declbar"
+><TR
+><TD CLASS="declname"
+><A NAME="v%3ArunYoneda"
+></A
+><B
+>runYoneda</B
+> ::  <A HREF="Control-Monad-Yoneda.html#t%3AYoneda"
+>Yoneda</A
+> f a -&gt; f a</TD
+><TD CLASS="declbut"
+><A HREF="src/Control-Monad-Yoneda.html#runYoneda"
+>Source</A
+></TD
+></TR
+></TABLE
+></TD
+></TR
+><TR
+><TD CLASS="s15"
+></TD
+></TR
+><TR
+><TD CLASS="botbar"
+>Produced by <A HREF="http://www.haskell.org/haddock/"
+>Haddock</A
+> version 2.3.0</TD
+></TR
+></TABLE
+></BODY
+></HTML
+>
hunk ./doc/html/monad-ran/doc-index.html 7
->monad-ran-0.0.6: Implementations of common monads and monad transformers as right Kan extensions (Index)</TITLE
+>monad-ran-0.0.7: Fast implementations of monads and monad transformers using right Kan extensions (Index)</TITLE
hunk ./doc/html/monad-ran/doc-index.html 22
->monad-ran-0.0.6: Implementations of common monads and monad transformers as right Kan extensions</TD
+>monad-ran-0.0.7: Fast implementations of monads and monad transformers using right Kan extensions</TD
hunk ./doc/html/monad-ran/doc-index.html 56
-><A HREF="Control-Monad-Ran.html#t%3ACodensity"
+><A HREF="Control-Monad-Codensity.html#t%3ACodensity"
+>Control.Monad.Codensity</A
+>, <A HREF="Control-Monad-Ran.html#t%3ACodensity"
hunk ./doc/html/monad-ran/doc-index.html 66
-><A HREF="Control-Monad-Ran.html#v%3ACodensity"
+><A HREF="Control-Monad-Codensity.html#v%3ACodensity"
+>Control.Monad.Codensity</A
+>, <A HREF="Control-Monad-Ran.html#v%3ACodensity"
hunk ./doc/html/monad-ran/doc-index.html 74
->fromRan</TD
+>G</TD
hunk ./doc/html/monad-ran/doc-index.html 76
-><A HREF="Control-Monad-Ran.html#v%3AfromRan"
+><A HREF="Control-Monad-Ran.html#t%3AG"
hunk ./doc/html/monad-ran/doc-index.html 82
->G</TD
+>getCodensity</TD
hunk ./doc/html/monad-ran/doc-index.html 84
-><A HREF="Control-Monad-Ran.html#t%3AG"
+><A HREF="Control-Monad-Codensity.html#v%3AgetCodensity"
+>Control.Monad.Codensity</A
+>, <A HREF="Control-Monad-Ran.html#v%3AgetCodensity"
hunk ./doc/html/monad-ran/doc-index.html 92
->getCodensity</TD
+>getMaybe'</TD
hunk ./doc/html/monad-ran/doc-index.html 94
-><A HREF="Control-Monad-Ran.html#v%3AgetCodensity"
->Control.Monad.Ran</A
+><A HREF="Control-Monad-CPS-Maybe.html#v%3AgetMaybe%27"
+>Control.Monad.CPS.Maybe</A
hunk ./doc/html/monad-ran/doc-index.html 110
-><A HREF="Control-Monad-Ran.html#v%3AgetYoneda"
+><A HREF="Control-Monad-Yoneda.html#v%3AgetYoneda"
+>Control.Monad.Yoneda</A
+>, <A HREF="Control-Monad-Ran.html#v%3AgetYoneda"
hunk ./doc/html/monad-ran/doc-index.html 125
+><TD CLASS="indexentry"
+>liftRan</TD
+><TD CLASS="indexlinks"
+><A HREF="Control-Monad-Ran.html#v%3AliftRan"
+>Control.Monad.Ran</A
+></TD
+></TR
+><TR CLASS="indexrow"
+><TD CLASS="indexentry"
+>lowerCodensity</TD
+><TD CLASS="indexlinks"
+><A HREF="Control-Monad-Codensity.html#v%3AlowerCodensity"
+>Control.Monad.Codensity</A
+></TD
+></TR
+><TR CLASS="indexrow"
+><TD CLASS="indexentry"
+>lowerCodensityApp</TD
+><TD CLASS="indexlinks"
+><A HREF="Control-Monad-Codensity.html#v%3AlowerCodensityApp"
+>Control.Monad.Codensity</A
+></TD
+></TR
+><TR CLASS="indexrow"
+><TD CLASS="indexentry"
+>lowerCodensityPointed</TD
+><TD CLASS="indexlinks"
+><A HREF="Control-Monad-Codensity.html#v%3AlowerCodensityPointed"
+>Control.Monad.Codensity</A
+></TD
+></TR
+><TR CLASS="indexrow"
+><TD CLASS="indexentry"
+>lowerRan</TD
+><TD CLASS="indexlinks"
+><A HREF="Control-Monad-Ran.html#v%3AlowerRan"
+>Control.Monad.Ran</A
+></TD
+></TR
+><TR CLASS="indexrow"
+><TD CLASS="indexentry" COLSPAN="2"
+>Maybe'</TD
+></TR
+><TR CLASS="indexrow"
+><TD CLASS="indexannot"
+>1 (Type/Class)</TD
+><TD CLASS="indexlinks"
+><A HREF="Control-Monad-CPS-Maybe.html#t%3AMaybe%27"
+>Control.Monad.CPS.Maybe</A
+></TD
+></TR
+><TR CLASS="indexrow"
+><TD CLASS="indexannot"
+>2 (Data Constructor)</TD
+><TD CLASS="indexlinks"
+><A HREF="Control-Monad-CPS-Maybe.html#v%3AMaybe%27"
+>Control.Monad.CPS.Maybe</A
+></TD
+></TR
+><TR CLASS="indexrow"
+><TD CLASS="indexentry"
+>maybe'</TD
+><TD CLASS="indexlinks"
+><A HREF="Control-Monad-CPS-Maybe.html#v%3Amaybe%27"
+>Control.Monad.CPS.Maybe</A
+></TD
+></TR
+><TR CLASS="indexrow"
+><TD CLASS="indexentry"
+>point</TD
+><TD CLASS="indexlinks"
+><A HREF="Control-Functor-Pointed.html#v%3Apoint"
+>Control.Functor.Pointed</A
+></TD
+></TR
+><TR CLASS="indexrow"
+><TD CLASS="indexentry"
+>Pointed</TD
+><TD CLASS="indexlinks"
+><A HREF="Control-Functor-Pointed.html#t%3APointed"
+>Control.Functor.Pointed</A
+></TD
+></TR
+><TR CLASS="indexrow"
hunk ./doc/html/monad-ran/doc-index.html 238
->toRan</TD
+>runYoneda</TD
hunk ./doc/html/monad-ran/doc-index.html 240
-><A HREF="Control-Monad-Ran.html#v%3AtoRan"
->Control.Monad.Ran</A
+><A HREF="Control-Monad-Yoneda.html#v%3ArunYoneda"
+>Control.Monad.Yoneda</A
hunk ./doc/html/monad-ran/doc-index.html 252
-><A HREF="Control-Monad-Ran.html#t%3AYoneda"
+><A HREF="Control-Monad-Yoneda.html#t%3AYoneda"
+>Control.Monad.Yoneda</A
+>, <A HREF="Control-Monad-Ran.html#t%3AYoneda"
hunk ./doc/html/monad-ran/doc-index.html 262
-><A HREF="Control-Monad-Ran.html#v%3AYoneda"
+><A HREF="Control-Monad-Yoneda.html#v%3AYoneda"
+>Control.Monad.Yoneda</A
+>, <A HREF="Control-Monad-Ran.html#v%3AYoneda"
hunk ./doc/html/monad-ran/index.html 7
->monad-ran-0.0.6: Implementations of common monads and monad transformers as right Kan extensions</TITLE
+>monad-ran-0.0.7: Fast implementations of monads and monad transformers using right Kan extensions</TITLE
hunk ./doc/html/monad-ran/index.html 22
->monad-ran-0.0.6: Implementations of common monads and monad transformers as right Kan extensions</TD
+>monad-ran-0.0.7: Fast implementations of monads and monad transformers using right Kan extensions</TD
hunk ./doc/html/monad-ran/index.html 37
->monad-ran-0.0.6: Implementations of common monads and monad transformers as right Kan extensions</TD
+>monad-ran-0.0.7: Fast implementations of monads and monad transformers using right Kan extensions</TD
hunk ./doc/html/monad-ran/index.html 41
->.
+>Fast implementations of monads and monad transformers using right Kan extensions
hunk ./doc/html/monad-ran/index.html 66
->Monad</TD
+>Functor</TD
hunk ./doc/html/monad-ran/index.html 77
+><A HREF="Control-Functor-Pointed.html"
+>Control.Functor.Pointed</A
+></TD
+><TD
+></TD
+><TD
+></TD
+></TR
+></TABLE
+></TD
+></TR
+><TR
+><TD STYLE="width: 48em"
+><IMG SRC="minus.gif" CLASS="coll" ONCLICK="toggle(this,'n:2')" ALT="show/hide"
+>Monad</TD
+><TD
+></TD
+><TD
+></TD
+></TR
+><TR
+><TD STYLE="padding: 0; padding-left: 2em" COLSPAN="3"
+><TABLE CLASS="vanilla2" CELLSPACING="0" CELLPADDING="0" ID="n:2" STYLE="display:block;"
+><TR
+><TD STYLE="width: 46em"
+><IMG SRC="minus.gif" CLASS="coll" ONCLICK="toggle(this,'n:3')" ALT="show/hide"
+>CPS</TD
+><TD
+></TD
+><TD
+></TD
+></TR
+><TR
+><TD STYLE="padding: 0; padding-left: 2em" COLSPAN="3"
+><TABLE CLASS="vanilla2" CELLSPACING="0" CELLPADDING="0" ID="n:3" STYLE="display:block;"
+><TR
+><TD STYLE="padding-left: 1.25em;width: 44em"
+><A HREF="Control-Monad-CPS-Maybe.html"
+>Control.Monad.CPS.Maybe</A
+></TD
+><TD
+></TD
+><TD
+></TD
+></TR
+></TABLE
+></TD
+></TR
+><TR
+><TD STYLE="padding-left: 1.25em;width: 46em"
+><A HREF="Control-Monad-Codensity.html"
+>Control.Monad.Codensity</A
+></TD
+><TD
+></TD
+><TD
+></TD
+></TR
+><TR
+><TD STYLE="padding-left: 1.25em;width: 46em"
hunk ./doc/html/monad-ran/index.html 145
+><TR
+><TD STYLE="padding-left: 1.25em;width: 46em"
+><A HREF="Control-Monad-Yoneda.html"
+>Control.Monad.Yoneda</A
+></TD
+><TD
+></TD
+><TD
+></TD
+></TR
binary ./doc/html/monad-ran/monad-ran.haddock
oldhex
*0d0cface000400000000000003c5000000000000025f0e00000000000000000000000000000000
*000000000000000100000000000000010000000000000000000000000000000100000000000000
*020000000000000000000000000000000100000000000000030000000000000000000000000000
*000100000000000000040000000000000000000000000000000100000000000000050000000000
*000000000000000000000100000000000000060000000000000000000000000000000100000000
*000000070000000000000000000000000000000100000000000000080000000000000000000000
*0000000001000000000000000900000000000000000000000000000001000000000000000a0000
*0000000000000000000000000001000000000000000b0000000000000000000000000000000100
*0000000000000c00000000000000000000000000000001000000000000000d0000000000000000
*0000000000000001010000000000000000000000000000000100000000000e0000000000000000
*000000000000000100000000000000020000000000000003000000000000000400000000000000
*050000000000000006000000000000000700000000000000080000000000000009000000000000
*000a000000000000000b000000000000000c000000000000000d0e000000000000000b00000000
*0000000c000000000000000d00000000000000080000000000000009000000000000000a000000
*000000000500000000000000060000000000000007000000000000000000000000000000010000
*00000000000200000000000000030000000000000004000000000000000e000000000000000000
*000000000000010300000000000000020000000000000000000000000000000103000000000000
*000300000000000000000000000000000001030000000000000004000000000000000000000000
*000000010000000000000000050000000000000000000000000000000100000000000000000600
*000000000000000000000000000001030000000000000007000000000000000000000000000000
*010100000000000000070000000000000000000000000000000100000000000000000800000000
*000000000000000000000001030000000000000009000000000000000000000000000000010100
*000000000000090000000000000000000000000000000100000000000000000a00000000000000
*00000000000000000103000000000000000b000000000000000000000000000000010100000000
*0000000b0000000000000000000000000000000100000000000000000c000000000000000d0000
*00000000000f6d6f6e61642d72616e2d302e302e360000000000000011436f6e74726f6c2e4d6f
*6e61642e52616e0000000000000006524d6f6e6164000000000000000147000000000000000148
*0000000000000005746f52616e000000000000000766726f6d52616e000000000000000352616e
*000000000000000667657452616e0000000000000009436f64656e73697479000000000000000c
*676574436f64656e736974790000000000000006596f6e6564610000000000000009676574596f
*6e656461
newhex
*0d0cface000400000000000009a600000000000007461800000000000000000000000000000000
*000000000000000100000000000000010000000000000000000000000000000100000000000000
*020000000000000000000000000000000100000000000000030000000000000000000000000000
*000100000000000000040000000000000000000000000000000200000000000000050000000000
*000000000000000000000200000000000000060000000000000000000000000000000300000000
*000000070000000000000000000000000000000300000000000000080000000000000000000000
*0000000003000000000000000900000000000000000000000000000003000000000000000a0000
*0000000000000000000000000004000000000000000b0000000000000000000000000000000400
*0000000000000c00000000000000000000000000000004000000000000000d0000000000000000
*0000000000000004000000000000000e0000000000000000000000000000000400000000000000
*0f0000000000000000000000000000000400000000000000100000000000000000000000000000
*000500000000000000110000000000000000000000000000000500000000000000120000000000
*000000000000000000000500000000000000130000000000000000000000000000000500000000
*000000140000000000000000000000000000000500000000000000150000000000000000000000
*000000000500000000000000160000000000000000000000000000000500000000000000170000
*000000000000000000000000000505000000000000000000000000000000010000000000040000
*000000000000000000000000000100000000000000020000000000000003040000000000000000
*000000000000000100000000000000020000000000000003000000000000000000000000000000
*02000108000000700000006f000000720000007400000061000000620000006c00000065010c00
*00006500000078000000700000006500000072000000690000006d000000650000006e00000074
*000000610000006c011f0000004500000064000000770000006100000072000000640000002000
*00004b0000006d000000650000007400000074000000200000003c000000650000006b0000006d
*00000065000000740000007400000040000000670000006d00000061000000690000006c000000
*2e000000630000006f0000006d0000003e00020000000000000004000000000000000502000000
*000000000400000000000000050000000000000000000000000000000300000000000400000000
*000000060000000000000007000000000000000800000000000000090400000000000000060000
*000000000007000000000000000800000000000000090000000000000000000000000000000400
*00000001000000000000000a030102200000005400000068000000650000002000000043000000
*6f00000064000000650000006e00000073000000690000007400000079000000200000006d0000
*006f0000006e0000006100000064000000200000006f0000006600000020000000610000002000
*000066000000750000006e00000063000000740000006f000000720102010000002f021d000000
*6d0000006f0000006e00000061000000640000002000000067000000650000006e000000650000
*007200000061000000740000006500000064000000200000006200000079000000200000006100
*00002000000066000000750000006e00000063000000740000006f000000720000000a06000000
*000000000a000000000000000b000000000000000c000000000000000d000000000000000e0000
*00000000000f06000000000000000a000000000000000b000000000000000c000000000000000d
*000000000000000e000000000000000f0000000000000000000000000000000500000000010000
*00000000001503022e000000410000002000000072000000690000006700000068000000740000
*00200000004b000000610000006e00000020000000650000007800000074000000650000006e00
*000073000000690000006f0000006e000000200000007400000072000000610000006e00000073
*000000660000006f000000720000006d000000650000007200000020000000660000006f000000
*720000002000000061000000200000006d0000006f0000006e00000061000000640000000a0e00
*0000000000000600000000000000070000000000000008000000000000000a000000000000000b
*000000000000000c00000000000000100000000000000011000000000000001200000000000000
*1300000000000000140000000000000015000000000000001600000000000000170e0000000000
*00000600000000000000070000000000000008000000000000000a000000000000000b00000000
*0000000c0000000000000015000000000000001600000000000000170000000000000010000000
*000000001100000000000000120000000000000013000000000000001400000000000000180000
*000000000000000000000000000103000000000000000600000000000000000000000000000001
*010000000000000006000000000000000000000000000000010000000000000000070000000000
*000000000000000000000100000000000000000800000000000000000000000000000002030000
*0000000000090000000000000000000000000000000200000000000000000a0000000000000000
*000000000000000303000000000000000b00000000000000000000000000000003010000000000
*00000b0000000000000000000000000000000300000000000000000c0000000000000000000000
*000000000300000000000000000d0000000000000000000000000000000403000000000000000e
*0000000000000000000000000000000401000000000000000e0000000000000000000000000000
*000400000000000000000f00000000000000000000000000000004000000000000000010000000
*000000000000000000000000040000000000000000110000000000000000000000000000000400
*000000000000001200000000000000000000000000000005030000000000000013000000000000
*000000000000000000050300000000000000140000000000000000000000000000000503000000
*000000001500000000000000000000000000000005000000000000000016000000000000000000
*000000000000050000000000000000170000000000000000000000000000000503000000000000
*001800000000000000000000000000000005010000000000000018000000000000000000000000
*00000005000000000000000019000000000000001a000000000000000f6d6f6e61642d72616e2d
*302e302e370000000000000017436f6e74726f6c2e4d6f6e61642e4350532e4d61796265000000
*0000000017436f6e74726f6c2e46756e63746f722e506f696e7465640000000000000014436f6e
*74726f6c2e4d6f6e61642e596f6e6564610000000000000017436f6e74726f6c2e4d6f6e61642e
*436f64656e736974790000000000000011436f6e74726f6c2e4d6f6e61642e52616e0000000000
*0000064d617962652700000000000000096765744d617962652700000000000000066d61796265
*270000000000000007506f696e7465640000000000000005706f696e740000000000000006596f
*6e6564610000000000000009676574596f6e656461000000000000000972756e596f6e65646100
*00000000000009436f64656e73697479000000000000000c676574436f64656e73697479000000
*000000000e6c6f776572436f64656e7369747900000000000000116c6f776572436f64656e7369
*747941707000000000000000156c6f776572436f64656e73697479506f696e7465640000000000
*000006524d6f6e616400000000000000014700000000000000014800000000000000076c696674
*52616e00000000000000086c6f77657252616e000000000000000352616e000000000000000667
*657452616e
addfile ./doc/html/monad-ran/src/Control-Functor-Pointed.html
hunk ./doc/html/monad-ran/src/Control-Functor-Pointed.html 1
+<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
+<html>
+<head>
+<!-- Generated by HsColour, http://www.cs.york.ac.uk/fp/darcs/hscolour/ -->
+<title>Control/Functor/Pointed.hs</title>
+<link type='text/css' rel='stylesheet' href='hscolour.css' />
+</head>
+<body>
+<pre><a name="line-1"></a><span class='hs-comment'>-------------------------------------------------------------------------------------------</span>
+<a name="line-2"></a><span class='hs-comment'>-- | </span>
+<a name="line-3"></a><span class='hs-comment'>-- Module       : Control.Functor.Pointed</span>
+<a name="line-4"></a><span class='hs-comment'>-- Copyright    : 2008 Edward Kmett</span>
+<a name="line-5"></a><span class='hs-comment'>-- License      : BSD</span>
+<a name="line-6"></a><span class='hs-comment'>--</span>
+<a name="line-7"></a><span class='hs-comment'>-- Maintainer   : Edward Kmett &lt;ekmett@gmail.com&gt;</span>
+<a name="line-8"></a><span class='hs-comment'>-- Stability    : experimental</span>
+<a name="line-9"></a><span class='hs-comment'>-- Portability  : portable</span>
+<a name="line-10"></a><span class='hs-comment'>--</span>
+<a name="line-11"></a><span class='hs-comment'>-------------------------------------------------------------------------------------------</span>
+<a name="line-12"></a>
+<a name="line-13"></a><span class='hs-keyword'>module</span> <span class='hs-conid'>Control</span><span class='hs-varop'>.</span><span class='hs-conid'>Functor</span><span class='hs-varop'>.</span><span class='hs-conid'>Pointed</span> 
+<a name="line-14"></a>    <span class='hs-layout'>(</span> <span class='hs-conid'>Pointed</span><span class='hs-layout'>(</span><span class='hs-keyglyph'>..</span><span class='hs-layout'>)</span>
+<a name="line-15"></a>    <span class='hs-layout'>)</span> <span class='hs-keyword'>where</span>
+<a name="line-16"></a>
+<a name="line-17"></a><span class='hs-keyword'>import</span> <span class='hs-conid'>Control</span><span class='hs-varop'>.</span><span class='hs-conid'>Monad</span><span class='hs-varop'>.</span><span class='hs-conid'>Identity</span>
+<a name="line-18"></a><span class='hs-keyword'>import</span> <span class='hs-conid'>Control</span><span class='hs-varop'>.</span><span class='hs-conid'>Monad</span><span class='hs-varop'>.</span><span class='hs-conid'>Reader</span>
+<a name="line-19"></a><span class='hs-keyword'>import</span> <span class='hs-keyword'>qualified</span> <span class='hs-conid'>Control</span><span class='hs-varop'>.</span><span class='hs-conid'>Monad</span><span class='hs-varop'>.</span><span class='hs-conid'>Writer</span><span class='hs-varop'>.</span><span class='hs-conid'>Lazy</span> <span class='hs-keyword'>as</span> <span class='hs-conid'>LW</span>
+<a name="line-20"></a><span class='hs-keyword'>import</span> <span class='hs-keyword'>qualified</span> <span class='hs-conid'>Control</span><span class='hs-varop'>.</span><span class='hs-conid'>Monad</span><span class='hs-varop'>.</span><span class='hs-conid'>Writer</span><span class='hs-varop'>.</span><span class='hs-conid'>Strict</span> <span class='hs-keyword'>as</span> <span class='hs-conid'>SW</span>
+<a name="line-21"></a><span class='hs-keyword'>import</span> <span class='hs-keyword'>qualified</span> <span class='hs-conid'>Control</span><span class='hs-varop'>.</span><span class='hs-conid'>Monad</span><span class='hs-varop'>.</span><span class='hs-conid'>State</span><span class='hs-varop'>.</span><span class='hs-conid'>Lazy</span> <span class='hs-keyword'>as</span> <span class='hs-conid'>LS</span>
+<a name="line-22"></a><span class='hs-keyword'>import</span> <span class='hs-keyword'>qualified</span> <span class='hs-conid'>Control</span><span class='hs-varop'>.</span><span class='hs-conid'>Monad</span><span class='hs-varop'>.</span><span class='hs-conid'>State</span><span class='hs-varop'>.</span><span class='hs-conid'>Strict</span> <span class='hs-keyword'>as</span> <span class='hs-conid'>SS</span>
+<a name="line-23"></a><span class='hs-keyword'>import</span> <span class='hs-keyword'>qualified</span> <span class='hs-conid'>Control</span><span class='hs-varop'>.</span><span class='hs-conid'>Monad</span><span class='hs-varop'>.</span><span class='hs-conid'>RWS</span><span class='hs-varop'>.</span><span class='hs-conid'>Lazy</span> <span class='hs-keyword'>as</span> <span class='hs-conid'>LR</span>
+<a name="line-24"></a><span class='hs-keyword'>import</span> <span class='hs-keyword'>qualified</span> <span class='hs-conid'>Control</span><span class='hs-varop'>.</span><span class='hs-conid'>Monad</span><span class='hs-varop'>.</span><span class='hs-conid'>RWS</span><span class='hs-varop'>.</span><span class='hs-conid'>Strict</span> <span class='hs-keyword'>as</span> <span class='hs-conid'>SR</span>
+<a name="line-25"></a><span class='hs-keyword'>import</span> <span class='hs-conid'>Control</span><span class='hs-varop'>.</span><span class='hs-conid'>Monad</span><span class='hs-varop'>.</span><span class='hs-conid'>Error</span>
+<a name="line-26"></a><span class='hs-keyword'>import</span> <span class='hs-conid'>Control</span><span class='hs-varop'>.</span><span class='hs-conid'>Monad</span><span class='hs-varop'>.</span><span class='hs-conid'>Cont</span>
+<a name="line-27"></a><span class='hs-keyword'>import</span> <span class='hs-conid'>Control</span><span class='hs-varop'>.</span><span class='hs-conid'>Monad</span><span class='hs-varop'>.</span><span class='hs-conid'>List</span>
+<a name="line-28"></a><span class='hs-keyword'>import</span> <span class='hs-conid'>Data</span><span class='hs-varop'>.</span><span class='hs-conid'>Monoid</span>
+<a name="line-29"></a>
+<a name="line-30"></a><a name="Pointed"></a><span class='hs-comment'>-- return</span>
+<a name="line-31"></a><a name="Pointed"></a><span class='hs-keyword'>class</span> <span class='hs-conid'>Functor</span> <span class='hs-varid'>f</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>Pointed</span> <span class='hs-varid'>f</span> <span class='hs-keyword'>where</span>
+<a name="line-32"></a>    <span class='hs-varid'>point</span> <span class='hs-keyglyph'>::</span> <span class='hs-varid'>a</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-varid'>f</span> <span class='hs-varid'>a</span>
+<a name="line-33"></a>
+<a name="line-34"></a><span class='hs-keyword'>instance</span> <span class='hs-conid'>Pointed</span> <span class='hs-conid'>Maybe</span> <span class='hs-keyword'>where</span> <span class='hs-varid'>point</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>Just</span>
+<a name="line-35"></a><span class='hs-keyword'>instance</span> <span class='hs-conid'>Pointed</span> <span class='hs-conid'>[]</span> <span class='hs-keyword'>where</span> <span class='hs-varid'>point</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>return</span>
+<a name="line-36"></a>
+<a name="line-37"></a><span class='hs-keyword'>instance</span> <span class='hs-conid'>Pointed</span> <span class='hs-layout'>(</span><span class='hs-conid'>Cont</span> <span class='hs-varid'>r</span><span class='hs-layout'>)</span> <span class='hs-keyword'>where</span> <span class='hs-varid'>point</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>return</span>
+<a name="line-38"></a><span class='hs-keyword'>instance</span> <span class='hs-conid'>Monad</span> <span class='hs-varid'>m</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>Pointed</span> <span class='hs-layout'>(</span><span class='hs-conid'>ContT</span> <span class='hs-varid'>r</span> <span class='hs-varid'>m</span><span class='hs-layout'>)</span> <span class='hs-keyword'>where</span> <span class='hs-varid'>point</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>return</span>
+<a name="line-39"></a>
+<a name="line-40"></a><span class='hs-keyword'>instance</span> <span class='hs-conid'>Pointed</span> <span class='hs-conid'>Identity</span> <span class='hs-keyword'>where</span> <span class='hs-varid'>point</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>Identity</span>
+<a name="line-41"></a>
+<a name="line-42"></a><span class='hs-keyword'>instance</span> <span class='hs-conid'>Pointed</span> <span class='hs-layout'>(</span><span class='hs-conid'>Either</span> <span class='hs-varid'>a</span><span class='hs-layout'>)</span> <span class='hs-keyword'>where</span> <span class='hs-varid'>point</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>Right</span>
+<a name="line-43"></a><span class='hs-keyword'>instance</span> <span class='hs-layout'>(</span><span class='hs-conid'>Error</span> <span class='hs-varid'>e</span><span class='hs-layout'>,</span> <span class='hs-conid'>Monad</span> <span class='hs-varid'>m</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>Pointed</span> <span class='hs-layout'>(</span><span class='hs-conid'>ErrorT</span> <span class='hs-varid'>e</span> <span class='hs-varid'>m</span><span class='hs-layout'>)</span> <span class='hs-keyword'>where</span> <span class='hs-varid'>point</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>return</span>
+<a name="line-44"></a>
+<a name="line-45"></a><span class='hs-keyword'>instance</span> <span class='hs-conid'>Pointed</span> <span class='hs-layout'>(</span><span class='hs-conid'>Reader</span> <span class='hs-varid'>r</span><span class='hs-layout'>)</span> <span class='hs-keyword'>where</span> <span class='hs-varid'>point</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>return</span>
+<a name="line-46"></a><span class='hs-keyword'>instance</span> <span class='hs-conid'>Monad</span> <span class='hs-varid'>m</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>Pointed</span> <span class='hs-layout'>(</span><span class='hs-conid'>ReaderT</span> <span class='hs-varid'>r</span> <span class='hs-varid'>m</span><span class='hs-layout'>)</span> <span class='hs-keyword'>where</span> <span class='hs-varid'>point</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>return</span>
+<a name="line-47"></a><span class='hs-keyword'>instance</span> <span class='hs-conid'>Pointed</span> <span class='hs-layout'>(</span><span class='hs-layout'>(</span><span class='hs-keyglyph'>-&gt;</span><span class='hs-layout'>)</span><span class='hs-varid'>r</span><span class='hs-layout'>)</span> <span class='hs-keyword'>where</span> <span class='hs-varid'>point</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>return</span>
+<a name="line-48"></a>
+<a name="line-49"></a><span class='hs-keyword'>instance</span> <span class='hs-conid'>Pointed</span> <span class='hs-layout'>(</span><span class='hs-conid'>SS</span><span class='hs-varop'>.</span><span class='hs-conid'>State</span> <span class='hs-varid'>w</span><span class='hs-layout'>)</span> <span class='hs-keyword'>where</span> <span class='hs-varid'>point</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>return</span>
+<a name="line-50"></a><span class='hs-keyword'>instance</span> <span class='hs-conid'>Pointed</span> <span class='hs-layout'>(</span><span class='hs-conid'>LS</span><span class='hs-varop'>.</span><span class='hs-conid'>State</span> <span class='hs-varid'>w</span><span class='hs-layout'>)</span> <span class='hs-keyword'>where</span> <span class='hs-varid'>point</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>return</span>
+<a name="line-51"></a><span class='hs-keyword'>instance</span> <span class='hs-conid'>Monad</span> <span class='hs-varid'>m</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>Pointed</span> <span class='hs-layout'>(</span><span class='hs-conid'>SS</span><span class='hs-varop'>.</span><span class='hs-conid'>StateT</span> <span class='hs-varid'>w</span> <span class='hs-varid'>m</span><span class='hs-layout'>)</span> <span class='hs-keyword'>where</span> <span class='hs-varid'>point</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>return</span>
+<a name="line-52"></a><span class='hs-keyword'>instance</span> <span class='hs-conid'>Monad</span> <span class='hs-varid'>m</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>Pointed</span> <span class='hs-layout'>(</span><span class='hs-conid'>LS</span><span class='hs-varop'>.</span><span class='hs-conid'>StateT</span> <span class='hs-varid'>w</span> <span class='hs-varid'>m</span><span class='hs-layout'>)</span> <span class='hs-keyword'>where</span> <span class='hs-varid'>point</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>return</span>
+<a name="line-53"></a>
+<a name="line-54"></a><span class='hs-keyword'>instance</span> <span class='hs-conid'>Monoid</span> <span class='hs-varid'>w</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>Pointed</span> <span class='hs-layout'>(</span><span class='hs-conid'>SW</span><span class='hs-varop'>.</span><span class='hs-conid'>Writer</span> <span class='hs-varid'>w</span><span class='hs-layout'>)</span> <span class='hs-keyword'>where</span> <span class='hs-varid'>point</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>return</span>
+<a name="line-55"></a><span class='hs-keyword'>instance</span> <span class='hs-conid'>Monoid</span> <span class='hs-varid'>w</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>Pointed</span> <span class='hs-layout'>(</span><span class='hs-conid'>LW</span><span class='hs-varop'>.</span><span class='hs-conid'>Writer</span> <span class='hs-varid'>w</span><span class='hs-layout'>)</span> <span class='hs-keyword'>where</span> <span class='hs-varid'>point</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>return</span>
+<a name="line-56"></a><span class='hs-keyword'>instance</span> <span class='hs-layout'>(</span><span class='hs-conid'>Monoid</span> <span class='hs-varid'>w</span><span class='hs-layout'>,</span> <span class='hs-conid'>Monad</span> <span class='hs-varid'>m</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>Pointed</span> <span class='hs-layout'>(</span><span class='hs-conid'>SW</span><span class='hs-varop'>.</span><span class='hs-conid'>WriterT</span> <span class='hs-varid'>w</span> <span class='hs-varid'>m</span><span class='hs-layout'>)</span> <span class='hs-keyword'>where</span> <span class='hs-varid'>point</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>return</span>
+<a name="line-57"></a><span class='hs-keyword'>instance</span> <span class='hs-layout'>(</span><span class='hs-conid'>Monoid</span> <span class='hs-varid'>w</span><span class='hs-layout'>,</span> <span class='hs-conid'>Monad</span> <span class='hs-varid'>m</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>Pointed</span> <span class='hs-layout'>(</span><span class='hs-conid'>LW</span><span class='hs-varop'>.</span><span class='hs-conid'>WriterT</span> <span class='hs-varid'>w</span> <span class='hs-varid'>m</span><span class='hs-layout'>)</span> <span class='hs-keyword'>where</span> <span class='hs-varid'>point</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>return</span>
+<a name="line-58"></a>
+<a name="line-59"></a><span class='hs-keyword'>instance</span> <span class='hs-conid'>Monoid</span> <span class='hs-varid'>w</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>Pointed</span> <span class='hs-layout'>(</span><span class='hs-conid'>SR</span><span class='hs-varop'>.</span><span class='hs-conid'>RWS</span> <span class='hs-varid'>r</span> <span class='hs-varid'>w</span> <span class='hs-varid'>s</span><span class='hs-layout'>)</span> <span class='hs-keyword'>where</span> <span class='hs-varid'>point</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>return</span>
+<a name="line-60"></a><span class='hs-keyword'>instance</span> <span class='hs-conid'>Monoid</span> <span class='hs-varid'>w</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>Pointed</span> <span class='hs-layout'>(</span><span class='hs-conid'>LR</span><span class='hs-varop'>.</span><span class='hs-conid'>RWS</span> <span class='hs-varid'>r</span> <span class='hs-varid'>w</span> <span class='hs-varid'>s</span><span class='hs-layout'>)</span> <span class='hs-keyword'>where</span> <span class='hs-varid'>point</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>return</span>
+<a name="line-61"></a><span class='hs-keyword'>instance</span> <span class='hs-layout'>(</span><span class='hs-conid'>Monoid</span> <span class='hs-varid'>w</span><span class='hs-layout'>,</span> <span class='hs-conid'>Monad</span> <span class='hs-varid'>m</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>Pointed</span> <span class='hs-layout'>(</span><span class='hs-conid'>SR</span><span class='hs-varop'>.</span><span class='hs-conid'>RWST</span> <span class='hs-varid'>r</span> <span class='hs-varid'>w</span> <span class='hs-varid'>s</span> <span class='hs-varid'>m</span><span class='hs-layout'>)</span> <span class='hs-keyword'>where</span> <span class='hs-varid'>point</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>return</span>
+<a name="line-62"></a><span class='hs-keyword'>instance</span> <span class='hs-layout'>(</span><span class='hs-conid'>Monoid</span> <span class='hs-varid'>w</span><span class='hs-layout'>,</span> <span class='hs-conid'>Monad</span> <span class='hs-varid'>m</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>Pointed</span> <span class='hs-layout'>(</span><span class='hs-conid'>LR</span><span class='hs-varop'>.</span><span class='hs-conid'>RWST</span> <span class='hs-varid'>r</span> <span class='hs-varid'>w</span> <span class='hs-varid'>s</span> <span class='hs-varid'>m</span><span class='hs-layout'>)</span> <span class='hs-keyword'>where</span> <span class='hs-varid'>point</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>return</span>
+<a name="line-63"></a>
+<a name="line-64"></a><span class='hs-keyword'>instance</span> <span class='hs-conid'>Monad</span> <span class='hs-varid'>m</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>Pointed</span> <span class='hs-layout'>(</span><span class='hs-conid'>ListT</span> <span class='hs-varid'>m</span><span class='hs-layout'>)</span> <span class='hs-keyword'>where</span> <span class='hs-varid'>point</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>return</span>
+</pre></body>
+</html>
addfile ./doc/html/monad-ran/src/Control-Monad-CPS-Maybe.html
hunk ./doc/html/monad-ran/src/Control-Monad-CPS-Maybe.html 1
+<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
+<html>
+<head>
+<!-- Generated by HsColour, http://www.cs.york.ac.uk/fp/darcs/hscolour/ -->
+<title>Control/Monad/CPS/Maybe.hs</title>
+<link type='text/css' rel='stylesheet' href='hscolour.css' />
+</head>
+<body>
+<pre><a name="line-1"></a><span class='hs-comment'>{-# LANGUAGE Rank2Types #-}</span>
+<a name="line-2"></a>
+<a name="line-3"></a><span class='hs-keyword'>module</span> <span class='hs-conid'>Control</span><span class='hs-varop'>.</span><span class='hs-conid'>Monad</span><span class='hs-varop'>.</span><span class='hs-conid'>CPS</span><span class='hs-varop'>.</span><span class='hs-conid'>Maybe</span>
+<a name="line-4"></a>    <span class='hs-layout'>(</span> <span class='hs-conid'>Maybe'</span><span class='hs-layout'>(</span><span class='hs-keyglyph'>..</span><span class='hs-layout'>)</span>
+<a name="line-5"></a>    <span class='hs-layout'>,</span> <span class='hs-varid'>maybe'</span>
+<a name="line-6"></a>    <span class='hs-layout'>)</span> <span class='hs-keyword'>where</span>
+<a name="line-7"></a>
+<a name="line-8"></a><a name="Maybe'"></a><span class='hs-keyword'>newtype</span> <span class='hs-conid'>Maybe'</span> <span class='hs-varid'>a</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>Maybe'</span> <span class='hs-layout'>{</span> <span class='hs-varid'>getMaybe'</span> <span class='hs-keyglyph'>::</span> <span class='hs-keyword'>forall</span> <span class='hs-varid'>o</span><span class='hs-varop'>.</span> <span class='hs-layout'>(</span><span class='hs-varid'>a</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-varid'>o</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-varid'>o</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-varid'>o</span> <span class='hs-layout'>}</span> 
+<a name="line-9"></a>
+<a name="line-10"></a><span class='hs-keyword'>instance</span> <span class='hs-conid'>Functor</span> <span class='hs-conid'>Maybe'</span> <span class='hs-keyword'>where</span>
+<a name="line-11"></a>    <span class='hs-varid'>fmap</span> <span class='hs-varid'>f</span> <span class='hs-layout'>(</span><span class='hs-conid'>Maybe'</span> <span class='hs-varid'>m</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>Maybe'</span> <span class='hs-layout'>(</span><span class='hs-keyglyph'>\</span><span class='hs-varid'>k</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-varid'>m</span> <span class='hs-layout'>(</span><span class='hs-varid'>k</span> <span class='hs-varop'>.</span> <span class='hs-varid'>f</span><span class='hs-layout'>)</span><span class='hs-layout'>)</span>
+<a name="line-12"></a>
+<a name="line-13"></a><span class='hs-keyword'>instance</span> <span class='hs-conid'>Monad</span> <span class='hs-conid'>Maybe'</span> <span class='hs-keyword'>where</span>
+<a name="line-14"></a>    <span class='hs-varid'>return</span> <span class='hs-varid'>a</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>Maybe'</span> <span class='hs-layout'>(</span><span class='hs-keyglyph'>\</span><span class='hs-varid'>k</span> <span class='hs-keyword'>_</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-varid'>k</span> <span class='hs-varid'>a</span><span class='hs-layout'>)</span>
+<a name="line-15"></a>    <span class='hs-conid'>Maybe'</span> <span class='hs-varid'>g</span> <span class='hs-varop'>&gt;&gt;=</span> <span class='hs-varid'>f</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>Maybe'</span> <span class='hs-layout'>(</span><span class='hs-keyglyph'>\</span><span class='hs-varid'>k</span> <span class='hs-varid'>z</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-varid'>g</span> <span class='hs-layout'>(</span><span class='hs-keyglyph'>\</span><span class='hs-varid'>a</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-varid'>getMaybe'</span> <span class='hs-layout'>(</span><span class='hs-varid'>f</span> <span class='hs-varid'>a</span><span class='hs-layout'>)</span> <span class='hs-varid'>k</span> <span class='hs-varid'>z</span><span class='hs-layout'>)</span> <span class='hs-varid'>z</span><span class='hs-layout'>)</span>
+<a name="line-16"></a>    
+<a name="line-17"></a><a name="maybe'"></a><span class='hs-definition'>maybe'</span> <span class='hs-keyglyph'>::</span> <span class='hs-varid'>a</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-layout'>(</span><span class='hs-varid'>b</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-varid'>a</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-conid'>Maybe'</span> <span class='hs-varid'>b</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-varid'>a</span>
+<a name="line-18"></a><span class='hs-definition'>maybe'</span> <span class='hs-varid'>a</span> <span class='hs-varid'>b</span> <span class='hs-layout'>(</span><span class='hs-conid'>Maybe'</span> <span class='hs-varid'>m</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>m</span> <span class='hs-varid'>b</span> <span class='hs-varid'>a</span>
+</pre></body>
+</html>
addfile ./doc/html/monad-ran/src/Control-Monad-Codensity.html
hunk ./doc/html/monad-ran/src/Control-Monad-Codensity.html 1
+<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
+<html>
+<head>
+<!-- Generated by HsColour, http://www.cs.york.ac.uk/fp/darcs/hscolour/ -->
+<title>Control/Monad/Codensity.hs</title>
+<link type='text/css' rel='stylesheet' href='hscolour.css' />
+</head>
+<body>
+<pre><a name="line-1"></a><span class='hs-comment'>{-# LANGUAGE Rank2Types, MultiParamTypeClasses, FlexibleInstances, FlexibleContexts, UndecidableInstances #-}</span>
+<a name="line-2"></a><span class='hs-comment'>-- Finding the right Kan extension</span>
+<a name="line-3"></a>
+<a name="line-4"></a><span class='hs-keyword'>module</span> <span class='hs-conid'>Control</span><span class='hs-varop'>.</span><span class='hs-conid'>Monad</span><span class='hs-varop'>.</span><span class='hs-conid'>Codensity</span>
+<a name="line-5"></a>    <span class='hs-layout'>(</span> <span class='hs-comment'>-- * The codensity monad of a functor</span>
+<a name="line-6"></a>      <span class='hs-conid'>Codensity</span><span class='hs-layout'>(</span><span class='hs-keyglyph'>..</span><span class='hs-layout'>)</span>
+<a name="line-7"></a>    <span class='hs-layout'>,</span> <span class='hs-varid'>lowerCodensity</span>
+<a name="line-8"></a>    <span class='hs-layout'>,</span> <span class='hs-varid'>lowerCodensityApp</span>
+<a name="line-9"></a>    <span class='hs-layout'>,</span> <span class='hs-varid'>lowerCodensityPointed</span>
+<a name="line-10"></a>    <span class='hs-layout'>)</span> <span class='hs-keyword'>where</span>
+<a name="line-11"></a>
+<a name="line-12"></a><span class='hs-keyword'>import</span> <span class='hs-conid'>Data</span><span class='hs-varop'>.</span><span class='hs-conid'>Monoid</span>
+<a name="line-13"></a><span class='hs-keyword'>import</span> <span class='hs-conid'>Data</span><span class='hs-varop'>.</span><span class='hs-conid'>Maybe</span> <span class='hs-layout'>(</span><span class='hs-varid'>maybe</span><span class='hs-layout'>)</span>
+<a name="line-14"></a><span class='hs-keyword'>import</span> <span class='hs-conid'>Control</span><span class='hs-varop'>.</span><span class='hs-conid'>Applicative</span>
+<a name="line-15"></a><span class='hs-keyword'>import</span> <span class='hs-conid'>Control</span><span class='hs-varop'>.</span><span class='hs-conid'>Monad</span>
+<a name="line-16"></a><span class='hs-keyword'>import</span> <span class='hs-conid'>Control</span><span class='hs-varop'>.</span><span class='hs-conid'>Monad</span><span class='hs-varop'>.</span><span class='hs-conid'>Trans</span>
+<a name="line-17"></a><span class='hs-keyword'>import</span> <span class='hs-conid'>Control</span><span class='hs-varop'>.</span><span class='hs-conid'>Monad</span><span class='hs-varop'>.</span><span class='hs-conid'>Identity</span>
+<a name="line-18"></a><span class='hs-keyword'>import</span> <span class='hs-conid'>Control</span><span class='hs-varop'>.</span><span class='hs-conid'>Monad</span><span class='hs-varop'>.</span><span class='hs-conid'>Cont</span><span class='hs-varop'>.</span><span class='hs-conid'>Class</span>
+<a name="line-19"></a><span class='hs-keyword'>import</span> <span class='hs-conid'>Control</span><span class='hs-varop'>.</span><span class='hs-conid'>Monad</span><span class='hs-varop'>.</span><span class='hs-conid'>State</span><span class='hs-varop'>.</span><span class='hs-conid'>Class</span>
+<a name="line-20"></a><span class='hs-keyword'>import</span> <span class='hs-conid'>Control</span><span class='hs-varop'>.</span><span class='hs-conid'>Monad</span><span class='hs-varop'>.</span><span class='hs-conid'>Error</span><span class='hs-varop'>.</span><span class='hs-conid'>Class</span>
+<a name="line-21"></a><span class='hs-keyword'>import</span> <span class='hs-conid'>Control</span><span class='hs-varop'>.</span><span class='hs-conid'>Monad</span><span class='hs-varop'>.</span><span class='hs-conid'>Reader</span><span class='hs-varop'>.</span><span class='hs-conid'>Class</span>
+<a name="line-22"></a><span class='hs-keyword'>import</span> <span class='hs-conid'>Control</span><span class='hs-varop'>.</span><span class='hs-conid'>Monad</span><span class='hs-varop'>.</span><span class='hs-conid'>Writer</span><span class='hs-varop'>.</span><span class='hs-conid'>Class</span>
+<a name="line-23"></a><span class='hs-keyword'>import</span> <span class='hs-conid'>Control</span><span class='hs-varop'>.</span><span class='hs-conid'>Monad</span><span class='hs-varop'>.</span><span class='hs-conid'>RWS</span><span class='hs-varop'>.</span><span class='hs-conid'>Class</span>
+<a name="line-24"></a><span class='hs-keyword'>import</span> <span class='hs-conid'>Control</span><span class='hs-varop'>.</span><span class='hs-conid'>Functor</span><span class='hs-varop'>.</span><span class='hs-conid'>Pointed</span>
+<a name="line-25"></a>
+<a name="line-26"></a><span class='hs-comment'>-- | The Codensity monad of a functor/monad generated by a functor</span>
+<a name="line-27"></a>
+<a name="line-28"></a><a name="Codensity"></a><span class='hs-keyword'>data</span> <span class='hs-conid'>Codensity</span> <span class='hs-varid'>f</span> <span class='hs-varid'>a</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>Codensity</span> <span class='hs-layout'>{</span> <span class='hs-varid'>getCodensity</span> <span class='hs-keyglyph'>::</span> <span class='hs-keyword'>forall</span> <span class='hs-varid'>b</span><span class='hs-varop'>.</span> <span class='hs-layout'>(</span><span class='hs-varid'>a</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-varid'>f</span> <span class='hs-varid'>b</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-varid'>f</span> <span class='hs-varid'>b</span> <span class='hs-layout'>}</span>
+<a name="line-29"></a>
+<a name="line-30"></a><span class='hs-keyword'>instance</span> <span class='hs-conid'>Functor</span> <span class='hs-layout'>(</span><span class='hs-conid'>Codensity</span> <span class='hs-varid'>k</span><span class='hs-layout'>)</span> <span class='hs-keyword'>where</span>
+<a name="line-31"></a>    <span class='hs-varid'>fmap</span> <span class='hs-varid'>f</span> <span class='hs-varid'>m</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>Codensity</span> <span class='hs-layout'>(</span><span class='hs-keyglyph'>\</span><span class='hs-varid'>k</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-varid'>getCodensity</span> <span class='hs-varid'>m</span> <span class='hs-layout'>(</span><span class='hs-varid'>k</span> <span class='hs-varop'>.</span> <span class='hs-varid'>f</span><span class='hs-layout'>)</span><span class='hs-layout'>)</span>
+<a name="line-32"></a>
+<a name="line-33"></a><span class='hs-keyword'>instance</span> <span class='hs-conid'>Pointed</span> <span class='hs-layout'>(</span><span class='hs-conid'>Codensity</span> <span class='hs-varid'>f</span><span class='hs-layout'>)</span> <span class='hs-keyword'>where</span>
+<a name="line-34"></a>    <span class='hs-varid'>point</span> <span class='hs-varid'>x</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>Codensity</span> <span class='hs-layout'>(</span><span class='hs-keyglyph'>\</span><span class='hs-varid'>k</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-varid'>k</span> <span class='hs-varid'>x</span><span class='hs-layout'>)</span>
+<a name="line-35"></a>
+<a name="line-36"></a><span class='hs-keyword'>instance</span> <span class='hs-conid'>Applicative</span> <span class='hs-layout'>(</span><span class='hs-conid'>Codensity</span> <span class='hs-varid'>f</span><span class='hs-layout'>)</span> <span class='hs-keyword'>where</span>
+<a name="line-37"></a>    <span class='hs-varid'>pure</span> <span class='hs-varid'>x</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>Codensity</span> <span class='hs-layout'>(</span><span class='hs-keyglyph'>\</span><span class='hs-varid'>k</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-varid'>k</span> <span class='hs-varid'>x</span><span class='hs-layout'>)</span>
+<a name="line-38"></a>    <span class='hs-conid'>Codensity</span> <span class='hs-varid'>f</span> <span class='hs-varop'>&lt;*&gt;</span> <span class='hs-conid'>Codensity</span> <span class='hs-varid'>x</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>Codensity</span> <span class='hs-layout'>(</span><span class='hs-keyglyph'>\</span><span class='hs-varid'>k</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-varid'>f</span> <span class='hs-layout'>(</span><span class='hs-keyglyph'>\</span><span class='hs-varid'>f'</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-varid'>x</span> <span class='hs-layout'>(</span><span class='hs-varid'>k</span> <span class='hs-varop'>.</span> <span class='hs-varid'>f'</span><span class='hs-layout'>)</span><span class='hs-layout'>)</span><span class='hs-layout'>)</span>
+<a name="line-39"></a>
+<a name="line-40"></a><span class='hs-keyword'>instance</span> <span class='hs-conid'>Monad</span> <span class='hs-layout'>(</span><span class='hs-conid'>Codensity</span> <span class='hs-varid'>f</span><span class='hs-layout'>)</span> <span class='hs-keyword'>where</span>
+<a name="line-41"></a>    <span class='hs-varid'>return</span> <span class='hs-varid'>x</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>Codensity</span> <span class='hs-layout'>(</span><span class='hs-keyglyph'>\</span><span class='hs-varid'>k</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-varid'>k</span> <span class='hs-varid'>x</span><span class='hs-layout'>)</span>
+<a name="line-42"></a>    <span class='hs-conid'>Codensity</span> <span class='hs-varid'>m</span> <span class='hs-varop'>&gt;&gt;=</span> <span class='hs-varid'>k</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>Codensity</span> 
+<a name="line-43"></a>        <span class='hs-layout'>(</span><span class='hs-keyglyph'>\</span><span class='hs-varid'>c</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-varid'>m</span> <span class='hs-layout'>(</span><span class='hs-keyglyph'>\</span><span class='hs-varid'>a</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-varid'>getCodensity</span> <span class='hs-layout'>(</span><span class='hs-varid'>k</span> <span class='hs-varid'>a</span><span class='hs-layout'>)</span> <span class='hs-varid'>c</span><span class='hs-layout'>)</span><span class='hs-layout'>)</span>
+<a name="line-44"></a>
+<a name="line-45"></a><span class='hs-keyword'>instance</span> <span class='hs-conid'>MonadIO</span> <span class='hs-varid'>m</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>MonadIO</span> <span class='hs-layout'>(</span><span class='hs-conid'>Codensity</span> <span class='hs-varid'>m</span><span class='hs-layout'>)</span> <span class='hs-keyword'>where</span>
+<a name="line-46"></a>    <span class='hs-varid'>liftIO</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>lift</span> <span class='hs-varop'>.</span> <span class='hs-varid'>liftIO</span>
+<a name="line-47"></a>
+<a name="line-48"></a><span class='hs-keyword'>instance</span> <span class='hs-conid'>MonadPlus</span> <span class='hs-varid'>m</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>MonadPlus</span> <span class='hs-layout'>(</span><span class='hs-conid'>Codensity</span> <span class='hs-varid'>m</span><span class='hs-layout'>)</span> <span class='hs-keyword'>where</span>
+<a name="line-49"></a>    <span class='hs-varid'>mzero</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>Codensity</span> <span class='hs-layout'>(</span><span class='hs-varid'>const</span> <span class='hs-varid'>mzero</span><span class='hs-layout'>)</span>
+<a name="line-50"></a>    <span class='hs-varid'>a</span> <span class='hs-varop'>`mplus`</span> <span class='hs-varid'>b</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>lift</span> <span class='hs-layout'>(</span><span class='hs-varid'>lowerCodensity</span> <span class='hs-varid'>a</span> <span class='hs-varop'>`mplus`</span> <span class='hs-varid'>lowerCodensity</span> <span class='hs-varid'>b</span><span class='hs-layout'>)</span>
+<a name="line-51"></a>
+<a name="line-52"></a><span class='hs-keyword'>instance</span> <span class='hs-conid'>MonadReader</span> <span class='hs-varid'>r</span> <span class='hs-varid'>m</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>MonadReader</span> <span class='hs-varid'>r</span> <span class='hs-layout'>(</span><span class='hs-conid'>Codensity</span> <span class='hs-varid'>m</span><span class='hs-layout'>)</span> <span class='hs-keyword'>where</span>
+<a name="line-53"></a>    <span class='hs-varid'>ask</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>lift</span> <span class='hs-varid'>ask</span>
+<a name="line-54"></a>    <span class='hs-varid'>local</span> <span class='hs-varid'>f</span> <span class='hs-varid'>m</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>Codensity</span> <span class='hs-layout'>(</span><span class='hs-keyglyph'>\</span><span class='hs-varid'>c</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-keyword'>do</span> <span class='hs-varid'>r</span> <span class='hs-keyglyph'>&lt;-</span> <span class='hs-varid'>ask</span><span class='hs-layout'>;</span> <span class='hs-varid'>local</span> <span class='hs-varid'>f</span> <span class='hs-layout'>(</span><span class='hs-varid'>getCodensity</span> <span class='hs-varid'>m</span> <span class='hs-layout'>(</span><span class='hs-varid'>local</span> <span class='hs-layout'>(</span><span class='hs-varid'>const</span> <span class='hs-varid'>r</span><span class='hs-layout'>)</span> <span class='hs-varop'>.</span> <span class='hs-varid'>c</span><span class='hs-layout'>)</span><span class='hs-layout'>)</span><span class='hs-layout'>)</span>
+<a name="line-55"></a>
+<a name="line-56"></a><span class='hs-keyword'>instance</span> <span class='hs-conid'>MonadWriter</span> <span class='hs-varid'>w</span> <span class='hs-varid'>m</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>MonadWriter</span> <span class='hs-varid'>w</span> <span class='hs-layout'>(</span><span class='hs-conid'>Codensity</span> <span class='hs-varid'>m</span><span class='hs-layout'>)</span> <span class='hs-keyword'>where</span>
+<a name="line-57"></a>    <span class='hs-varid'>tell</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>lift</span> <span class='hs-varop'>.</span> <span class='hs-varid'>tell</span>
+<a name="line-58"></a>    <span class='hs-varid'>listen</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>lift</span> <span class='hs-varop'>.</span> <span class='hs-varid'>listen</span> <span class='hs-varop'>.</span> <span class='hs-varid'>lowerCodensity</span>
+<a name="line-59"></a>    <span class='hs-varid'>pass</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>lift</span> <span class='hs-varop'>.</span> <span class='hs-varid'>pass</span> <span class='hs-varop'>.</span> <span class='hs-varid'>lowerCodensity</span>
+<a name="line-60"></a>
+<a name="line-61"></a><span class='hs-keyword'>instance</span> <span class='hs-conid'>MonadState</span> <span class='hs-varid'>s</span> <span class='hs-varid'>m</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>MonadState</span> <span class='hs-varid'>s</span> <span class='hs-layout'>(</span><span class='hs-conid'>Codensity</span> <span class='hs-varid'>m</span><span class='hs-layout'>)</span> <span class='hs-keyword'>where</span>
+<a name="line-62"></a>    <span class='hs-varid'>get</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>lift</span> <span class='hs-varid'>get</span>
+<a name="line-63"></a>    <span class='hs-varid'>put</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>lift</span> <span class='hs-varop'>.</span> <span class='hs-varid'>put</span>
+<a name="line-64"></a>
+<a name="line-65"></a><span class='hs-keyword'>instance</span> <span class='hs-conid'>MonadRWS</span> <span class='hs-varid'>r</span> <span class='hs-varid'>w</span> <span class='hs-varid'>s</span> <span class='hs-varid'>m</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>MonadRWS</span> <span class='hs-varid'>r</span> <span class='hs-varid'>w</span> <span class='hs-varid'>s</span> <span class='hs-layout'>(</span><span class='hs-conid'>Codensity</span> <span class='hs-varid'>m</span><span class='hs-layout'>)</span>
+<a name="line-66"></a>
+<a name="line-67"></a><span class='hs-comment'>-- instance MonadFix f =&gt; MonadFix (Codensity f) where</span>
+<a name="line-68"></a><span class='hs-comment'>--    mfix f = lift . mfix (lowerCodensity . f)</span>
+<a name="line-69"></a>
+<a name="line-70"></a><span class='hs-keyword'>instance</span> <span class='hs-conid'>MonadError</span> <span class='hs-varid'>e</span> <span class='hs-varid'>m</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>MonadError</span> <span class='hs-varid'>e</span> <span class='hs-layout'>(</span><span class='hs-conid'>Codensity</span> <span class='hs-varid'>m</span><span class='hs-layout'>)</span> <span class='hs-keyword'>where</span>
+<a name="line-71"></a>    <span class='hs-varid'>throwError</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>lift</span> <span class='hs-varop'>.</span> <span class='hs-varid'>throwError</span>
+<a name="line-72"></a><span class='hs-comment'>--    Codensity f `catchError` h = catchError . run</span>
+<a name="line-73"></a>
+<a name="line-74"></a><span class='hs-keyword'>instance</span> <span class='hs-conid'>MonadTrans</span> <span class='hs-conid'>Codensity</span> <span class='hs-keyword'>where</span>
+<a name="line-75"></a>    <span class='hs-varid'>lift</span> <span class='hs-varid'>m</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>Codensity</span> <span class='hs-layout'>(</span><span class='hs-varid'>m</span> <span class='hs-varop'>&gt;&gt;=</span><span class='hs-layout'>)</span>
+<a name="line-76"></a>
+<a name="line-77"></a><a name="lowerCodensity"></a><span class='hs-definition'>lowerCodensity</span> <span class='hs-keyglyph'>::</span> <span class='hs-conid'>Monad</span> <span class='hs-varid'>m</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>Codensity</span> <span class='hs-varid'>m</span> <span class='hs-varid'>a</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-varid'>m</span> <span class='hs-varid'>a</span>
+<a name="line-78"></a><span class='hs-definition'>lowerCodensity</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>flip</span> <span class='hs-varid'>getCodensity</span> <span class='hs-varid'>return</span>
+<a name="line-79"></a>
+<a name="line-80"></a><a name="lowerCodensityApp"></a><span class='hs-definition'>lowerCodensityApp</span> <span class='hs-keyglyph'>::</span> <span class='hs-conid'>Applicative</span> <span class='hs-varid'>f</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>Codensity</span> <span class='hs-varid'>f</span> <span class='hs-varid'>a</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-varid'>f</span> <span class='hs-varid'>a</span>
+<a name="line-81"></a><span class='hs-definition'>lowerCodensityApp</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>flip</span> <span class='hs-varid'>getCodensity</span> <span class='hs-varid'>pure</span>
+<a name="line-82"></a>
+<a name="line-83"></a><a name="lowerCodensityPointed"></a><span class='hs-definition'>lowerCodensityPointed</span> <span class='hs-keyglyph'>::</span> <span class='hs-conid'>Applicative</span> <span class='hs-varid'>f</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>Codensity</span> <span class='hs-varid'>f</span> <span class='hs-varid'>a</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-varid'>f</span> <span class='hs-varid'>a</span>
+<a name="line-84"></a><span class='hs-definition'>lowerCodensityPointed</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>flip</span> <span class='hs-varid'>getCodensity</span> <span class='hs-varid'>pure</span>
+<a name="line-85"></a>
+</pre></body>
+</html>
hunk ./doc/html/monad-ran/src/Control-Monad-Ran.html 9
-<pre><a name="line-1"></a><span class='hs-comment'>-- Finding the right Kan extension</span>
-<a name="line-2"></a>
-<a name="line-3"></a><span class='hs-keyword'>module</span> <span class='hs-conid'>Control</span><span class='hs-varop'>.</span><span class='hs-conid'>Monad</span><span class='hs-varop'>.</span><span class='hs-conid'>Ran</span> 
-<a name="line-4"></a>    <span class='hs-layout'>(</span> <span class='hs-conid'>Yoneda</span><span class='hs-layout'>(</span><span class='hs-keyglyph'>..</span><span class='hs-layout'>)</span>
-<a name="line-5"></a>    <span class='hs-layout'>,</span> <span class='hs-conid'>Codensity</span><span class='hs-layout'>(</span><span class='hs-keyglyph'>..</span><span class='hs-layout'>)</span>
-<a name="line-6"></a>    <span class='hs-layout'>,</span> <span class='hs-conid'>Ran</span><span class='hs-layout'>(</span><span class='hs-keyglyph'>..</span><span class='hs-layout'>)</span>
-<a name="line-7"></a>    <span class='hs-layout'>,</span> <span class='hs-conid'>RMonad</span>
-<a name="line-8"></a>    <span class='hs-layout'>,</span> <span class='hs-conid'>G</span>
-<a name="line-9"></a>    <span class='hs-layout'>,</span> <span class='hs-conid'>H</span>
-<a name="line-10"></a>    <span class='hs-layout'>,</span> <span class='hs-varid'>toRan</span>
-<a name="line-11"></a>    <span class='hs-layout'>,</span> <span class='hs-varid'>fromRan</span>
-<a name="line-12"></a>    <span class='hs-layout'>)</span> <span class='hs-keyword'>where</span>
-<a name="line-13"></a>
-<a name="line-14"></a><span class='hs-keyword'>import</span> <span class='hs-conid'>Data</span><span class='hs-varop'>.</span><span class='hs-conid'>Monoid</span>
-<a name="line-15"></a><span class='hs-keyword'>import</span> <span class='hs-conid'>Control</span><span class='hs-varop'>.</span><span class='hs-conid'>Applicative</span>
-<a name="line-16"></a><span class='hs-keyword'>import</span> <span class='hs-conid'>Control</span><span class='hs-varop'>.</span><span class='hs-conid'>Monad</span>
-<a name="line-17"></a><span class='hs-keyword'>import</span> <span class='hs-conid'>Control</span><span class='hs-varop'>.</span><span class='hs-conid'>Monad</span><span class='hs-varop'>.</span><span class='hs-conid'>Identity</span>
-<a name="line-18"></a><span class='hs-keyword'>import</span> <span class='hs-conid'>Control</span><span class='hs-varop'>.</span><span class='hs-conid'>Monad</span><span class='hs-varop'>.</span><span class='hs-conid'>Cont</span>
-<a name="line-19"></a><span class='hs-keyword'>import</span> <span class='hs-conid'>Control</span><span class='hs-varop'>.</span><span class='hs-conid'>Monad</span><span class='hs-varop'>.</span><span class='hs-conid'>State</span>
-<a name="line-20"></a><span class='hs-keyword'>import</span> <span class='hs-conid'>Control</span><span class='hs-varop'>.</span><span class='hs-conid'>Monad</span><span class='hs-varop'>.</span><span class='hs-conid'>Error</span>
-<a name="line-21"></a><span class='hs-keyword'>import</span> <span class='hs-conid'>Control</span><span class='hs-varop'>.</span><span class='hs-conid'>Monad</span><span class='hs-varop'>.</span><span class='hs-conid'>Reader</span>
-<a name="line-22"></a><span class='hs-keyword'>import</span> <span class='hs-conid'>Control</span><span class='hs-varop'>.</span><span class='hs-conid'>Monad</span><span class='hs-varop'>.</span><span class='hs-conid'>Writer</span>
-<a name="line-23"></a><span class='hs-keyword'>import</span> <span class='hs-conid'>Control</span><span class='hs-varop'>.</span><span class='hs-conid'>Monad</span><span class='hs-varop'>.</span><span class='hs-conid'>RWS</span>
-<a name="line-24"></a>
-<a name="line-25"></a><a name="Yoneda"></a><span class='hs-keyword'>data</span> <span class='hs-conid'>Yoneda</span> <span class='hs-varid'>f</span> <span class='hs-varid'>a</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>Yoneda</span> <span class='hs-layout'>{</span> <span class='hs-varid'>getYoneda</span> <span class='hs-keyglyph'>::</span> <span class='hs-keyword'>forall</span> <span class='hs-varid'>b</span><span class='hs-varop'>.</span> <span class='hs-layout'>(</span><span class='hs-varid'>a</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-varid'>b</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-varid'>f</span> <span class='hs-varid'>b</span> <span class='hs-layout'>}</span> 
-<a name="line-26"></a>
-<a name="line-27"></a><span class='hs-keyword'>instance</span> <span class='hs-conid'>Functor</span> <span class='hs-layout'>(</span><span class='hs-conid'>Yoneda</span> <span class='hs-varid'>f</span><span class='hs-layout'>)</span> <span class='hs-keyword'>where</span>
-<a name="line-28"></a>    <span class='hs-varid'>fmap</span> <span class='hs-varid'>f</span> <span class='hs-varid'>m</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>Yoneda</span> <span class='hs-layout'>(</span><span class='hs-keyglyph'>\</span><span class='hs-varid'>k</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-varid'>getYoneda</span> <span class='hs-varid'>m</span> <span class='hs-layout'>(</span><span class='hs-varid'>k</span> <span class='hs-varop'>.</span> <span class='hs-varid'>f</span><span class='hs-layout'>)</span><span class='hs-layout'>)</span>
-<a name="line-29"></a>
-<a name="line-30"></a><span class='hs-keyword'>instance</span> <span class='hs-conid'>Applicative</span> <span class='hs-varid'>f</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>Applicative</span> <span class='hs-layout'>(</span><span class='hs-conid'>Yoneda</span> <span class='hs-varid'>f</span><span class='hs-layout'>)</span> <span class='hs-keyword'>where</span>
-<a name="line-31"></a>    <span class='hs-varid'>pure</span> <span class='hs-varid'>a</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>Yoneda</span> <span class='hs-layout'>(</span><span class='hs-keyglyph'>\</span><span class='hs-varid'>f</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-varid'>pure</span> <span class='hs-layout'>(</span><span class='hs-varid'>f</span> <span class='hs-varid'>a</span><span class='hs-layout'>)</span><span class='hs-layout'>)</span>
-<a name="line-32"></a>    <span class='hs-varid'>m</span> <span class='hs-varop'>&lt;*&gt;</span> <span class='hs-varid'>n</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>Yoneda</span> <span class='hs-layout'>(</span><span class='hs-keyglyph'>\</span><span class='hs-varid'>f</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-varid'>getYoneda</span> <span class='hs-varid'>m</span> <span class='hs-layout'>(</span><span class='hs-varid'>f</span> <span class='hs-varop'>.</span><span class='hs-layout'>)</span> <span class='hs-varop'>&lt;*&gt;</span> <span class='hs-varid'>getYoneda</span> <span class='hs-varid'>n</span> <span class='hs-varid'>id</span><span class='hs-layout'>)</span>
-<a name="line-33"></a>
-<a name="line-34"></a><span class='hs-keyword'>instance</span> <span class='hs-conid'>Monad</span> <span class='hs-varid'>f</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>Monad</span> <span class='hs-layout'>(</span><span class='hs-conid'>Yoneda</span> <span class='hs-varid'>f</span><span class='hs-layout'>)</span> <span class='hs-keyword'>where</span>
-<a name="line-35"></a>    <span class='hs-varid'>return</span> <span class='hs-varid'>a</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>Yoneda</span> <span class='hs-layout'>(</span><span class='hs-keyglyph'>\</span><span class='hs-varid'>f</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-varid'>return</span> <span class='hs-layout'>(</span><span class='hs-varid'>f</span> <span class='hs-varid'>a</span><span class='hs-layout'>)</span><span class='hs-layout'>)</span>
-<a name="line-36"></a>    <span class='hs-varid'>m</span> <span class='hs-varop'>&gt;&gt;=</span> <span class='hs-varid'>k</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>Yoneda</span> <span class='hs-layout'>(</span><span class='hs-keyglyph'>\</span><span class='hs-varid'>f</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-varid'>getYoneda</span> <span class='hs-varid'>m</span> <span class='hs-varid'>id</span> <span class='hs-varop'>&gt;&gt;=</span> <span class='hs-keyglyph'>\</span><span class='hs-varid'>a</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-varid'>getYoneda</span> <span class='hs-layout'>(</span><span class='hs-varid'>k</span> <span class='hs-varid'>a</span><span class='hs-layout'>)</span> <span class='hs-varid'>f</span><span class='hs-layout'>)</span>
-<a name="line-37"></a>
-<a name="line-38"></a><span class='hs-keyword'>instance</span> <span class='hs-conid'>MonadTrans</span> <span class='hs-conid'>Yoneda</span> <span class='hs-keyword'>where</span>
-<a name="line-39"></a>    <span class='hs-varid'>lift</span> <span class='hs-varid'>m</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>Yoneda</span> <span class='hs-layout'>(</span><span class='hs-keyglyph'>\</span><span class='hs-varid'>f</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-varid'>liftM</span> <span class='hs-varid'>f</span> <span class='hs-varid'>m</span><span class='hs-layout'>)</span>
-<a name="line-40"></a>
-<a name="line-41"></a><a name="Codensity"></a><span class='hs-keyword'>data</span> <span class='hs-conid'>Codensity</span> <span class='hs-varid'>f</span> <span class='hs-varid'>a</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>Codensity</span> <span class='hs-layout'>{</span> <span class='hs-varid'>getCodensity</span> <span class='hs-keyglyph'>::</span> <span class='hs-keyword'>forall</span> <span class='hs-varid'>b</span><span class='hs-varop'>.</span> <span class='hs-layout'>(</span><span class='hs-varid'>a</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-varid'>f</span> <span class='hs-varid'>b</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-varid'>f</span> <span class='hs-varid'>b</span> <span class='hs-layout'>}</span>
+<pre><a name="line-1"></a><span class='hs-comment'>{-# LANGUAGE RankNTypes, FlexibleInstances, FlexibleContexts, TypeFamilies, MultiParamTypeClasses, MagicHash, UnboxedTuples, UndecidableInstances  #-}</span>
+<a name="line-2"></a><span class='hs-comment'>-- Finding the right Kan extension</span>
+<a name="line-3"></a>
+<a name="line-4"></a><span class='hs-keyword'>module</span> <span class='hs-conid'>Control</span><span class='hs-varop'>.</span><span class='hs-conid'>Monad</span><span class='hs-varop'>.</span><span class='hs-conid'>Ran</span> 
+<a name="line-5"></a>    <span class='hs-layout'>(</span> 
+<a name="line-6"></a>      <span class='hs-comment'>-- * The Yoneda Lemma</span>
+<a name="line-7"></a>      <span class='hs-conid'>Yoneda</span><span class='hs-layout'>(</span><span class='hs-keyglyph'>..</span><span class='hs-layout'>)</span>
+<a name="line-8"></a>      <span class='hs-comment'>-- * The codensity monad of a functor</span>
+<a name="line-9"></a>    <span class='hs-layout'>,</span> <span class='hs-conid'>Codensity</span><span class='hs-layout'>(</span><span class='hs-keyglyph'>..</span><span class='hs-layout'>)</span>
+<a name="line-10"></a>      <span class='hs-comment'>-- * A right Kan extension monad transformer</span>
+<a name="line-11"></a>    <span class='hs-layout'>,</span> <span class='hs-conid'>Ran</span><span class='hs-layout'>(</span><span class='hs-keyglyph'>..</span><span class='hs-layout'>)</span>
+<a name="line-12"></a>      <span class='hs-comment'>-- * Representing monads as right Kan extensions</span>
+<a name="line-13"></a>    <span class='hs-layout'>,</span> <span class='hs-conid'>RMonad</span>
+<a name="line-14"></a>    <span class='hs-layout'>,</span> <span class='hs-conid'>G</span>
+<a name="line-15"></a>    <span class='hs-layout'>,</span> <span class='hs-conid'>H</span>
+<a name="line-16"></a>    <span class='hs-layout'>,</span> <span class='hs-varid'>liftRan</span>
+<a name="line-17"></a>    <span class='hs-layout'>,</span> <span class='hs-varid'>lowerRan</span>
+<a name="line-18"></a>    <span class='hs-layout'>)</span> <span class='hs-keyword'>where</span>
+<a name="line-19"></a>
+<a name="line-20"></a><span class='hs-keyword'>import</span> <span class='hs-conid'>Data</span><span class='hs-varop'>.</span><span class='hs-conid'>Monoid</span>
+<a name="line-21"></a><span class='hs-keyword'>import</span> <span class='hs-conid'>Data</span><span class='hs-varop'>.</span><span class='hs-conid'>Maybe</span> <span class='hs-layout'>(</span><span class='hs-varid'>maybe</span><span class='hs-layout'>)</span>
+<a name="line-22"></a><span class='hs-keyword'>import</span> <span class='hs-conid'>Control</span><span class='hs-varop'>.</span><span class='hs-conid'>Applicative</span>
+<a name="line-23"></a><span class='hs-keyword'>import</span> <span class='hs-conid'>Control</span><span class='hs-varop'>.</span><span class='hs-conid'>Functor</span><span class='hs-varop'>.</span><span class='hs-conid'>Pointed</span>
+<a name="line-24"></a><span class='hs-keyword'>import</span> <span class='hs-conid'>Control</span><span class='hs-varop'>.</span><span class='hs-conid'>Monad</span>
+<a name="line-25"></a><span class='hs-keyword'>import</span> <span class='hs-conid'>Control</span><span class='hs-varop'>.</span><span class='hs-conid'>Monad</span><span class='hs-varop'>.</span><span class='hs-conid'>Yoneda</span>
+<a name="line-26"></a><span class='hs-keyword'>import</span> <span class='hs-conid'>Control</span><span class='hs-varop'>.</span><span class='hs-conid'>Monad</span><span class='hs-varop'>.</span><span class='hs-conid'>Codensity</span>
+<a name="line-27"></a><span class='hs-keyword'>import</span> <span class='hs-conid'>Control</span><span class='hs-varop'>.</span><span class='hs-conid'>Monad</span><span class='hs-varop'>.</span><span class='hs-conid'>Identity</span>
+<a name="line-28"></a><span class='hs-keyword'>import</span> <span class='hs-conid'>Control</span><span class='hs-varop'>.</span><span class='hs-conid'>Monad</span><span class='hs-varop'>.</span><span class='hs-conid'>Cont</span>
+<a name="line-29"></a><span class='hs-keyword'>import</span> <span class='hs-conid'>Control</span><span class='hs-varop'>.</span><span class='hs-conid'>Monad</span><span class='hs-varop'>.</span><span class='hs-conid'>State</span>
+<a name="line-30"></a><span class='hs-keyword'>import</span> <span class='hs-conid'>Control</span><span class='hs-varop'>.</span><span class='hs-conid'>Monad</span><span class='hs-varop'>.</span><span class='hs-conid'>Error</span>
+<a name="line-31"></a><span class='hs-keyword'>import</span> <span class='hs-conid'>Control</span><span class='hs-varop'>.</span><span class='hs-conid'>Monad</span><span class='hs-varop'>.</span><span class='hs-conid'>Reader</span>
+<a name="line-32"></a><span class='hs-keyword'>import</span> <span class='hs-conid'>Control</span><span class='hs-varop'>.</span><span class='hs-conid'>Monad</span><span class='hs-varop'>.</span><span class='hs-conid'>Writer</span>
+<a name="line-33"></a><span class='hs-keyword'>import</span> <span class='hs-conid'>Control</span><span class='hs-varop'>.</span><span class='hs-conid'>Monad</span><span class='hs-varop'>.</span><span class='hs-conid'>RWS</span>
+<a name="line-34"></a>
+<a name="line-35"></a><span class='hs-keyword'>import</span> <span class='hs-conid'>GHC</span><span class='hs-varop'>.</span><span class='hs-conid'>Prim</span>
+<a name="line-36"></a><span class='hs-keyword'>import</span> <span class='hs-conid'>GHC</span><span class='hs-varop'>.</span><span class='hs-conid'>IOBase</span> <span class='hs-varid'>hiding</span> <span class='hs-layout'>(</span><span class='hs-varid'>liftIO</span><span class='hs-layout'>)</span>
+<a name="line-37"></a><span class='hs-keyword'>import</span> <span class='hs-conid'>GHC</span><span class='hs-varop'>.</span><span class='hs-conid'>Conc</span>
+<a name="line-38"></a><span class='hs-keyword'>import</span> <span class='hs-conid'>GHC</span><span class='hs-varop'>.</span><span class='hs-conid'>ST</span>
+<a name="line-39"></a>
+<a name="line-40"></a><a name="Ran"></a><span class='hs-comment'>-- | A right Kan extension transformer for a monad</span>
+<a name="line-41"></a><a name="Ran"></a><span class='hs-keyword'>data</span> <span class='hs-conid'>Ran</span> <span class='hs-varid'>m</span> <span class='hs-varid'>a</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>Ran</span> <span class='hs-layout'>{</span> <span class='hs-varid'>getRan</span> <span class='hs-keyglyph'>::</span> <span class='hs-keyword'>forall</span> <span class='hs-varid'>b</span><span class='hs-varop'>.</span> <span class='hs-layout'>(</span><span class='hs-varid'>a</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-conid'>G</span> <span class='hs-varid'>m</span> <span class='hs-varid'>b</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-conid'>H</span> <span class='hs-varid'>m</span> <span class='hs-varid'>b</span> <span class='hs-layout'>}</span> 
hunk ./doc/html/monad-ran/src/Control-Monad-Ran.html 51
-<a name="line-43"></a><span class='hs-keyword'>instance</span> <span class='hs-conid'>Functor</span> <span class='hs-layout'>(</span><span class='hs-conid'>Codensity</span> <span class='hs-varid'>k</span><span class='hs-layout'>)</span> <span class='hs-keyword'>where</span>
-<a name="line-44"></a>    <span class='hs-varid'>fmap</span> <span class='hs-varid'>f</span> <span class='hs-varid'>m</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>Codensity</span> <span class='hs-layout'>(</span><span class='hs-keyglyph'>\</span><span class='hs-varid'>k</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-varid'>getCodensity</span> <span class='hs-varid'>m</span> <span class='hs-layout'>(</span><span class='hs-varid'>k</span> <span class='hs-varop'>.</span> <span class='hs-varid'>f</span><span class='hs-layout'>)</span><span class='hs-layout'>)</span>
-<a name="line-45"></a>
-<a name="line-46"></a><span class='hs-keyword'>instance</span> <span class='hs-conid'>Applicative</span> <span class='hs-layout'>(</span><span class='hs-conid'>Codensity</span> <span class='hs-varid'>f</span><span class='hs-layout'>)</span> <span class='hs-keyword'>where</span>
-<a name="line-47"></a>    <span class='hs-varid'>pure</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>return</span>
-<a name="line-48"></a>    <span class='hs-layout'>(</span><span class='hs-varop'>&lt;*&gt;</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>ap</span>
-<a name="line-49"></a>
-<a name="line-50"></a><span class='hs-keyword'>instance</span> <span class='hs-conid'>Monad</span> <span class='hs-layout'>(</span><span class='hs-conid'>Codensity</span> <span class='hs-varid'>f</span><span class='hs-layout'>)</span> <span class='hs-keyword'>where</span>
-<a name="line-51"></a>    <span class='hs-varid'>return</span> <span class='hs-varid'>x</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>Codensity</span> <span class='hs-layout'>(</span><span class='hs-keyglyph'>\</span><span class='hs-varid'>k</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-varid'>k</span> <span class='hs-varid'>x</span><span class='hs-layout'>)</span>
-<a name="line-52"></a>    <span class='hs-varid'>m</span> <span class='hs-varop'>&gt;&gt;=</span> <span class='hs-varid'>k</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>Codensity</span> <span class='hs-layout'>(</span><span class='hs-keyglyph'>\</span><span class='hs-varid'>c</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-varid'>getCodensity</span> <span class='hs-varid'>m</span> <span class='hs-layout'>(</span><span class='hs-keyglyph'>\</span><span class='hs-varid'>a</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-varid'>getCodensity</span> <span class='hs-layout'>(</span><span class='hs-varid'>k</span> <span class='hs-varid'>a</span><span class='hs-layout'>)</span> <span class='hs-varid'>c</span><span class='hs-layout'>)</span><span class='hs-layout'>)</span>
-<a name="line-53"></a>
-<a name="line-54"></a><span class='hs-keyword'>instance</span> <span class='hs-conid'>MonadTrans</span> <span class='hs-conid'>Codensity</span> <span class='hs-keyword'>where</span>
-<a name="line-55"></a>    <span class='hs-varid'>lift</span> <span class='hs-varid'>m</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>Codensity</span> <span class='hs-layout'>(</span><span class='hs-varid'>m</span> <span class='hs-varop'>&gt;&gt;=</span><span class='hs-layout'>)</span>
-<a name="line-56"></a>
-<a name="line-57"></a><a name="runCodensity"></a><span class='hs-definition'>runCodensity</span> <span class='hs-keyglyph'>::</span> <span class='hs-conid'>Monad</span> <span class='hs-varid'>m</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>Codensity</span> <span class='hs-varid'>m</span> <span class='hs-varid'>a</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-varid'>m</span> <span class='hs-varid'>a</span>
-<a name="line-58"></a><span class='hs-definition'>runCodensity</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>flip</span> <span class='hs-varid'>getCodensity</span> <span class='hs-varid'>return</span>
-<a name="line-59"></a>
-<a name="line-60"></a><a name="runCodensityApp"></a><span class='hs-definition'>runCodensityApp</span> <span class='hs-keyglyph'>::</span> <span class='hs-conid'>Applicative</span> <span class='hs-varid'>f</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>Codensity</span> <span class='hs-varid'>f</span> <span class='hs-varid'>a</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-varid'>f</span> <span class='hs-varid'>a</span>
-<a name="line-61"></a><span class='hs-definition'>runCodensityApp</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>flip</span> <span class='hs-varid'>getCodensity</span> <span class='hs-varid'>pure</span>
-<a name="line-62"></a>
-<a name="line-63"></a><span class='hs-comment'>-- .. Pointed</span>
-<a name="line-64"></a>
-<a name="line-65"></a><a name="Ran"></a><span class='hs-keyword'>data</span> <span class='hs-conid'>Ran</span> <span class='hs-varid'>m</span> <span class='hs-varid'>a</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>Ran</span> <span class='hs-layout'>{</span> <span class='hs-varid'>getRan</span> <span class='hs-keyglyph'>::</span> <span class='hs-keyword'>forall</span> <span class='hs-varid'>b</span><span class='hs-varop'>.</span> <span class='hs-layout'>(</span><span class='hs-varid'>a</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-conid'>G</span> <span class='hs-varid'>m</span> <span class='hs-varid'>b</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-conid'>H</span> <span class='hs-varid'>m</span> <span class='hs-varid'>b</span> <span class='hs-layout'>}</span> 
+<a name="line-43"></a><a name="Functor"></a><span class='hs-keyword'>class</span> <span class='hs-conid'>RanIso</span> <span class='hs-varid'>f</span> <span class='hs-keyword'>where</span>
+<a name="line-44"></a>    <span class='hs-keyword'>type</span> <span class='hs-conid'>G</span> <span class='hs-varid'>f</span>    <span class='hs-keyglyph'>::</span> <span class='hs-varop'>*</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-varop'>*</span>
+<a name="line-45"></a>    <span class='hs-keyword'>type</span> <span class='hs-conid'>H</span> <span class='hs-varid'>f</span>    <span class='hs-keyglyph'>::</span> <span class='hs-varop'>*</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-varop'>*</span>
+<a name="line-46"></a>    <span class='hs-varid'>liftRan</span>       <span class='hs-keyglyph'>::</span> <span class='hs-varid'>f</span> <span class='hs-varid'>a</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-conid'>Ran</span> <span class='hs-varid'>f</span> <span class='hs-varid'>a</span>
+<a name="line-47"></a>    <span class='hs-varid'>lowerRan</span>      <span class='hs-keyglyph'>::</span> <span class='hs-conid'>Ran</span> <span class='hs-varid'>f</span> <span class='hs-varid'>a</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-varid'>f</span> <span class='hs-varid'>a</span>
+<a name="line-48"></a>
+<a name="line-49"></a><span class='hs-keyword'>instance</span> <span class='hs-conid'>RanIso</span> <span class='hs-varid'>f</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>Functor</span> <span class='hs-layout'>(</span><span class='hs-conid'>Ran</span> <span class='hs-varid'>f</span><span class='hs-layout'>)</span> <span class='hs-keyword'>where</span>
+<a name="line-50"></a>    <span class='hs-varid'>fmap</span> <span class='hs-varid'>f</span> <span class='hs-varid'>m</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>Ran</span> <span class='hs-layout'>(</span><span class='hs-keyglyph'>\</span><span class='hs-varid'>k</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-varid'>getRan</span> <span class='hs-varid'>m</span> <span class='hs-layout'>(</span><span class='hs-varid'>k</span> <span class='hs-varop'>.</span> <span class='hs-varid'>f</span><span class='hs-layout'>)</span><span class='hs-layout'>)</span>
+<a name="line-51"></a>
+<a name="line-52"></a><a name="returnCodensity"></a><span class='hs-definition'>returnCodensity</span> <span class='hs-keyglyph'>::</span> <span class='hs-layout'>(</span><span class='hs-conid'>RanIso</span> <span class='hs-varid'>m</span><span class='hs-layout'>,</span> <span class='hs-conid'>G</span> <span class='hs-varid'>m</span> <span class='hs-keyglyph'>~</span> <span class='hs-conid'>H</span> <span class='hs-varid'>m</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-varid'>a</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-conid'>Ran</span> <span class='hs-varid'>m</span> <span class='hs-varid'>a</span>
+<a name="line-53"></a><span class='hs-definition'>returnCodensity</span> <span class='hs-varid'>a</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>Ran</span> <span class='hs-layout'>(</span><span class='hs-keyglyph'>\</span><span class='hs-varid'>k</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-varid'>k</span> <span class='hs-varid'>a</span><span class='hs-layout'>)</span>
+<a name="line-54"></a>
+<a name="line-55"></a><a name="bindCodensity"></a><span class='hs-definition'>bindCodensity</span> <span class='hs-keyglyph'>::</span> <span class='hs-layout'>(</span><span class='hs-conid'>RanIso</span> <span class='hs-varid'>m</span><span class='hs-layout'>,</span> <span class='hs-conid'>G</span> <span class='hs-varid'>m</span> <span class='hs-keyglyph'>~</span> <span class='hs-conid'>H</span> <span class='hs-varid'>m</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>Ran</span> <span class='hs-varid'>m</span> <span class='hs-varid'>a</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-layout'>(</span><span class='hs-varid'>a</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-conid'>Ran</span> <span class='hs-varid'>m</span> <span class='hs-varid'>b</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-conid'>Ran</span> <span class='hs-varid'>m</span> <span class='hs-varid'>b</span>
+<a name="line-56"></a><span class='hs-definition'>bindCodensity</span> <span class='hs-layout'>(</span><span class='hs-conid'>Ran</span> <span class='hs-varid'>m</span><span class='hs-layout'>)</span> <span class='hs-varid'>k</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>Ran</span> <span class='hs-layout'>(</span><span class='hs-keyglyph'>\</span><span class='hs-varid'>c</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-varid'>m</span> <span class='hs-layout'>(</span><span class='hs-keyglyph'>\</span><span class='hs-varid'>a</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-varid'>getRan</span> <span class='hs-layout'>(</span><span class='hs-varid'>k</span> <span class='hs-varid'>a</span><span class='hs-layout'>)</span> <span class='hs-varid'>c</span><span class='hs-layout'>)</span><span class='hs-layout'>)</span>
+<a name="line-57"></a>
+<a name="line-58"></a><a name="apCodensity"></a><span class='hs-definition'>apCodensity</span> <span class='hs-keyglyph'>::</span> <span class='hs-layout'>(</span><span class='hs-conid'>RanIso</span> <span class='hs-varid'>m</span><span class='hs-layout'>,</span> <span class='hs-conid'>G</span> <span class='hs-varid'>m</span> <span class='hs-keyglyph'>~</span> <span class='hs-conid'>H</span> <span class='hs-varid'>m</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>Ran</span> <span class='hs-varid'>m</span> <span class='hs-layout'>(</span><span class='hs-varid'>a</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-varid'>b</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-conid'>Ran</span> <span class='hs-varid'>m</span> <span class='hs-varid'>a</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-conid'>Ran</span> <span class='hs-varid'>m</span> <span class='hs-varid'>b</span>
+<a name="line-59"></a><span class='hs-definition'>apCodensity</span> <span class='hs-layout'>(</span><span class='hs-conid'>Ran</span> <span class='hs-varid'>f</span><span class='hs-layout'>)</span> <span class='hs-layout'>(</span><span class='hs-conid'>Ran</span> <span class='hs-varid'>x</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>Ran</span> <span class='hs-layout'>(</span><span class='hs-keyglyph'>\</span><span class='hs-varid'>k</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-varid'>f</span> <span class='hs-layout'>(</span><span class='hs-keyglyph'>\</span><span class='hs-varid'>f'</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-varid'>x</span> <span class='hs-layout'>(</span><span class='hs-varid'>k</span> <span class='hs-varop'>.</span> <span class='hs-varid'>f'</span><span class='hs-layout'>)</span><span class='hs-layout'>)</span><span class='hs-layout'>)</span>
+<a name="line-60"></a>
+<a name="line-61"></a><a name="RMonad"></a><span class='hs-keyword'>class</span> <span class='hs-layout'>(</span><span class='hs-conid'>Monad</span> <span class='hs-layout'>(</span><span class='hs-conid'>Ran</span> <span class='hs-varid'>f</span><span class='hs-layout'>)</span><span class='hs-layout'>,</span> <span class='hs-conid'>Monad</span> <span class='hs-varid'>f</span><span class='hs-layout'>,</span> <span class='hs-conid'>RanIso</span> <span class='hs-varid'>f</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>RMonad</span> <span class='hs-varid'>f</span> 
+<a name="line-62"></a><span class='hs-keyword'>instance</span> <span class='hs-layout'>(</span><span class='hs-conid'>Monad</span> <span class='hs-layout'>(</span><span class='hs-conid'>Ran</span> <span class='hs-varid'>f</span><span class='hs-layout'>)</span><span class='hs-layout'>,</span> <span class='hs-conid'>Monad</span> <span class='hs-varid'>f</span><span class='hs-layout'>,</span> <span class='hs-conid'>RanIso</span> <span class='hs-varid'>f</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>RMonad</span> <span class='hs-varid'>f</span>
+<a name="line-63"></a>
+<a name="line-64"></a><a name="RApplicative"></a><span class='hs-keyword'>class</span> <span class='hs-layout'>(</span><span class='hs-conid'>Applicative</span> <span class='hs-layout'>(</span><span class='hs-conid'>Ran</span> <span class='hs-varid'>f</span><span class='hs-layout'>)</span><span class='hs-layout'>,</span> <span class='hs-conid'>Applicative</span> <span class='hs-varid'>f</span><span class='hs-layout'>,</span> <span class='hs-conid'>RanIso</span> <span class='hs-varid'>f</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>RApplicative</span> <span class='hs-varid'>f</span> 
+<a name="line-65"></a><span class='hs-keyword'>instance</span> <span class='hs-layout'>(</span><span class='hs-conid'>Applicative</span> <span class='hs-layout'>(</span><span class='hs-conid'>Ran</span> <span class='hs-varid'>f</span><span class='hs-layout'>)</span><span class='hs-layout'>,</span> <span class='hs-conid'>Applicative</span> <span class='hs-varid'>f</span><span class='hs-layout'>,</span> <span class='hs-conid'>RanIso</span> <span class='hs-varid'>f</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>RApplicative</span> <span class='hs-varid'>f</span>
hunk ./doc/html/monad-ran/src/Control-Monad-Ran.html 75
-<a name="line-67"></a><a name="RMonad"></a><span class='hs-keyword'>class</span> <span class='hs-conid'>Monad</span> <span class='hs-varid'>f</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>RMonad</span> <span class='hs-varid'>f</span> <span class='hs-keyword'>where</span>
-<a name="line-68"></a>    <span class='hs-keyword'>type</span> <span class='hs-conid'>G</span> <span class='hs-varid'>f</span>    <span class='hs-keyglyph'>::</span> <span class='hs-varop'>*</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-varop'>*</span>
-<a name="line-69"></a>    <span class='hs-keyword'>type</span> <span class='hs-conid'>H</span> <span class='hs-varid'>f</span>    <span class='hs-keyglyph'>::</span> <span class='hs-varop'>*</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-varop'>*</span>
-<a name="line-70"></a>    <span class='hs-varid'>toRan</span>      <span class='hs-keyglyph'>::</span> <span class='hs-varid'>f</span> <span class='hs-varid'>a</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-conid'>Ran</span> <span class='hs-varid'>f</span> <span class='hs-varid'>a</span>
-<a name="line-71"></a>    <span class='hs-varid'>fromRan</span>    <span class='hs-keyglyph'>::</span> <span class='hs-conid'>Ran</span> <span class='hs-varid'>f</span> <span class='hs-varid'>a</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-varid'>f</span> <span class='hs-varid'>a</span>
-<a name="line-72"></a>
-<a name="line-73"></a><span class='hs-comment'>--class RMonadTrans t where</span>
-<a name="line-74"></a><span class='hs-comment'>--    liftR :: RMonad m =&gt; RanT m a -&gt; RanT (t m) a</span>
-<a name="line-75"></a>
-<a name="line-76"></a><a name="Hom"></a><span class='hs-comment'>-- utility bifunctors for definitions below</span>
-<a name="line-77"></a><a name="Hom"></a><span class='hs-keyword'>type</span> <span class='hs-conid'>Hom</span> <span class='hs-keyglyph'>=</span> <span class='hs-layout'>(</span><span class='hs-keyglyph'>-&gt;</span><span class='hs-layout'>)</span>
-<a name="line-78"></a><span class='hs-keyword'>type</span> <span class='hs-layout'>(</span><span class='hs-conop'>:-&gt;</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>ReaderT</span>
-<a name="line-79"></a>
-<a name="line-80"></a><a name="ErrorH"></a><span class='hs-keyword'>data</span> <span class='hs-conid'>ErrorH</span> <span class='hs-varid'>b</span> <span class='hs-varid'>r</span>  <span class='hs-keyglyph'>=</span> <span class='hs-conid'>ErrorH</span> <span class='hs-layout'>{</span> <span class='hs-varid'>getErrorH</span> <span class='hs-keyglyph'>::</span> <span class='hs-layout'>(</span><span class='hs-varid'>b</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-varid'>r</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-varid'>r</span> <span class='hs-layout'>}</span> 
-<a name="line-81"></a><a name="ErrorTH"></a><span class='hs-keyword'>data</span> <span class='hs-conid'>ErrorTH</span> <span class='hs-varid'>b</span> <span class='hs-varid'>m</span> <span class='hs-varid'>r</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>ErrorTH</span> <span class='hs-layout'>{</span> <span class='hs-varid'>getErrorTH</span> <span class='hs-keyglyph'>::</span> <span class='hs-layout'>(</span><span class='hs-varid'>b</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-conid'>G</span> <span class='hs-varid'>m</span> <span class='hs-varid'>r</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-conid'>H</span> <span class='hs-varid'>m</span> <span class='hs-varid'>r</span> <span class='hs-layout'>}</span>
-<a name="line-82"></a>
-<a name="line-83"></a><span class='hs-comment'>-- Yoneda Identity</span>
-<a name="line-84"></a><span class='hs-comment'>-- forall o. (a -&gt; o) -&gt; o</span>
-<a name="line-85"></a><span class='hs-keyword'>instance</span> <span class='hs-conid'>RMonad</span> <span class='hs-conid'>Identity</span> <span class='hs-keyword'>where</span>
-<a name="line-86"></a>    <span class='hs-keyword'>type</span> <span class='hs-conid'>G</span> <span class='hs-conid'>Identity</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>Identity</span>
-<a name="line-87"></a>    <span class='hs-keyword'>type</span> <span class='hs-conid'>H</span> <span class='hs-conid'>Identity</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>Identity</span>
-<a name="line-88"></a>    <span class='hs-varid'>toRan</span> <span class='hs-varid'>m</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>Ran</span> <span class='hs-layout'>(</span><span class='hs-varid'>m</span> <span class='hs-varop'>&gt;&gt;=</span><span class='hs-layout'>)</span>
-<a name="line-89"></a>    <span class='hs-varid'>fromRan</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>flip</span> <span class='hs-varid'>getRan</span> <span class='hs-conid'>Identity</span>
-<a name="line-90"></a>
-<a name="line-91"></a><span class='hs-comment'>-- Yoneda Endo</span>
-<a name="line-92"></a><span class='hs-comment'>-- forall o. (a -&gt; o) -&gt; o -&gt; o</span>
-<a name="line-93"></a><span class='hs-keyword'>instance</span> <span class='hs-conid'>RMonad</span> <span class='hs-conid'>Maybe</span> <span class='hs-keyword'>where</span>
-<a name="line-94"></a>    <span class='hs-keyword'>type</span> <span class='hs-conid'>G</span> <span class='hs-conid'>Maybe</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>Identity</span>
-<a name="line-95"></a>    <span class='hs-keyword'>type</span> <span class='hs-conid'>H</span> <span class='hs-conid'>Maybe</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>Endo</span>
-<a name="line-96"></a>    <span class='hs-varid'>toRan</span> <span class='hs-layout'>(</span><span class='hs-conid'>Just</span> <span class='hs-varid'>x</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>Ran</span> <span class='hs-layout'>(</span><span class='hs-keyglyph'>\</span><span class='hs-varid'>k</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-conid'>Endo</span> <span class='hs-layout'>(</span><span class='hs-keyglyph'>\</span><span class='hs-keyword'>_</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-varid'>runIdentity</span> <span class='hs-layout'>(</span><span class='hs-varid'>k</span> <span class='hs-varid'>x</span><span class='hs-layout'>)</span><span class='hs-layout'>)</span><span class='hs-layout'>)</span>
-<a name="line-97"></a>    <span class='hs-varid'>toRan</span> <span class='hs-conid'>Nothing</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>Ran</span> <span class='hs-layout'>(</span><span class='hs-keyglyph'>\</span><span class='hs-keyword'>_</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-conid'>Endo</span> <span class='hs-varid'>id</span><span class='hs-layout'>)</span>
-<a name="line-98"></a>    <span class='hs-varid'>fromRan</span> <span class='hs-layout'>(</span><span class='hs-conid'>Ran</span> <span class='hs-varid'>f</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>appEndo</span> <span class='hs-layout'>(</span><span class='hs-varid'>f</span> <span class='hs-layout'>(</span><span class='hs-conid'>Identity</span> <span class='hs-varop'>.</span> <span class='hs-conid'>Just</span><span class='hs-layout'>)</span><span class='hs-layout'>)</span> <span class='hs-conid'>Nothing</span>
-<a name="line-99"></a>
-<a name="line-100"></a><span class='hs-comment'>-- Yoneda (ErrorH b)</span>
-<a name="line-101"></a><span class='hs-comment'>-- forall o. (a -&gt; o) -&gt; (b -&gt; o) -&gt; o</span>
-<a name="line-102"></a><span class='hs-keyword'>instance</span> <span class='hs-conid'>Error</span> <span class='hs-varid'>b</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>RMonad</span> <span class='hs-layout'>(</span><span class='hs-conid'>Either</span> <span class='hs-varid'>b</span><span class='hs-layout'>)</span> <span class='hs-keyword'>where</span>
-<a name="line-103"></a>    <span class='hs-keyword'>type</span> <span class='hs-conid'>G</span> <span class='hs-layout'>(</span><span class='hs-conid'>Either</span> <span class='hs-varid'>b</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>Identity</span>
-<a name="line-104"></a>    <span class='hs-keyword'>type</span> <span class='hs-conid'>H</span> <span class='hs-layout'>(</span><span class='hs-conid'>Either</span> <span class='hs-varid'>b</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>ErrorH</span> <span class='hs-varid'>b</span>
+<a name="line-67"></a><span class='hs-comment'>-- The codensity monad as a right Kan extension of a functor along itself</span>
+<a name="line-68"></a><span class='hs-comment'>-- Many state-like monads can be CPS transformed into a codensity monad.</span>
+<a name="line-69"></a><span class='hs-keyword'>instance</span> <span class='hs-conid'>RanIso</span> <span class='hs-layout'>(</span><span class='hs-conid'>Codensity</span> <span class='hs-varid'>f</span><span class='hs-layout'>)</span> <span class='hs-keyword'>where</span>
+<a name="line-70"></a>    <span class='hs-keyword'>type</span> <span class='hs-conid'>G</span> <span class='hs-layout'>(</span><span class='hs-conid'>Codensity</span> <span class='hs-varid'>f</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>f</span>
+<a name="line-71"></a>    <span class='hs-keyword'>type</span> <span class='hs-conid'>H</span> <span class='hs-layout'>(</span><span class='hs-conid'>Codensity</span> <span class='hs-varid'>f</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>f</span>
+<a name="line-72"></a>    <span class='hs-varid'>liftRan</span> <span class='hs-layout'>(</span><span class='hs-conid'>Codensity</span> <span class='hs-varid'>f</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>Ran</span> <span class='hs-varid'>f</span>
+<a name="line-73"></a>    <span class='hs-varid'>lowerRan</span> <span class='hs-layout'>(</span><span class='hs-conid'>Ran</span> <span class='hs-varid'>f</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>Codensity</span> <span class='hs-varid'>f</span>
+<a name="line-74"></a>
+<a name="line-75"></a><a name="ranCodensity"></a><span class='hs-definition'>ranCodensity</span> <span class='hs-keyglyph'>::</span> <span class='hs-conid'>Ran</span> <span class='hs-layout'>(</span><span class='hs-conid'>Codensity</span> <span class='hs-varid'>f</span><span class='hs-layout'>)</span> <span class='hs-varid'>a</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-conid'>Codensity</span> <span class='hs-varid'>f</span> <span class='hs-varid'>a</span>
+<a name="line-76"></a><span class='hs-definition'>ranCodensity</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>lowerRan</span>
+<a name="line-77"></a>
+<a name="line-78"></a><a name="codensityRan"></a><span class='hs-definition'>codensityRan</span> <span class='hs-keyglyph'>::</span> <span class='hs-conid'>Codensity</span> <span class='hs-varid'>f</span> <span class='hs-varid'>a</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-conid'>Ran</span> <span class='hs-layout'>(</span><span class='hs-conid'>Codensity</span> <span class='hs-varid'>f</span><span class='hs-layout'>)</span> <span class='hs-varid'>a</span>
+<a name="line-79"></a><span class='hs-definition'>codensityRan</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>liftRan</span>
+<a name="line-80"></a>
+<a name="line-81"></a><a name="liftRanCodensity"></a><span class='hs-definition'>liftRanCodensity</span> <span class='hs-keyglyph'>::</span> <span class='hs-conid'>Monad</span> <span class='hs-varid'>f</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-varid'>f</span> <span class='hs-varid'>a</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-conid'>Ran</span> <span class='hs-layout'>(</span><span class='hs-conid'>Codensity</span> <span class='hs-varid'>f</span><span class='hs-layout'>)</span> <span class='hs-varid'>a</span>
+<a name="line-82"></a><span class='hs-definition'>liftRanCodensity</span> <span class='hs-varid'>f</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>Ran</span> <span class='hs-layout'>(</span><span class='hs-varid'>f</span> <span class='hs-varop'>&gt;&gt;=</span><span class='hs-layout'>)</span>
+<a name="line-83"></a>
+<a name="line-84"></a><a name="lowerRanCodensity"></a><span class='hs-definition'>lowerRanCodensity</span> <span class='hs-keyglyph'>::</span> <span class='hs-conid'>Monad</span> <span class='hs-varid'>f</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>Ran</span> <span class='hs-layout'>(</span><span class='hs-conid'>Codensity</span> <span class='hs-varid'>f</span><span class='hs-layout'>)</span> <span class='hs-varid'>a</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-varid'>f</span> <span class='hs-varid'>a</span> 
+<a name="line-85"></a><span class='hs-definition'>lowerRanCodensity</span> <span class='hs-layout'>(</span><span class='hs-conid'>Ran</span> <span class='hs-varid'>f</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>f</span> <span class='hs-varid'>return</span>
+<a name="line-86"></a>
+<a name="line-87"></a><span class='hs-keyword'>instance</span> <span class='hs-conid'>Pointed</span> <span class='hs-layout'>(</span><span class='hs-conid'>Ran</span> <span class='hs-layout'>(</span><span class='hs-conid'>Codensity</span> <span class='hs-varid'>f</span><span class='hs-layout'>)</span><span class='hs-layout'>)</span> <span class='hs-keyword'>where</span>
+<a name="line-88"></a>    <span class='hs-varid'>point</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>returnCodensity</span>
+<a name="line-89"></a>
+<a name="line-90"></a><span class='hs-keyword'>instance</span> <span class='hs-conid'>Applicative</span> <span class='hs-layout'>(</span><span class='hs-conid'>Ran</span> <span class='hs-layout'>(</span><span class='hs-conid'>Codensity</span> <span class='hs-varid'>f</span><span class='hs-layout'>)</span><span class='hs-layout'>)</span> <span class='hs-keyword'>where</span>
+<a name="line-91"></a>    <span class='hs-varid'>pure</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>returnCodensity</span>
+<a name="line-92"></a>    <span class='hs-layout'>(</span><span class='hs-varop'>&lt;*&gt;</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>apCodensity</span>
+<a name="line-93"></a>
+<a name="line-94"></a><span class='hs-keyword'>instance</span> <span class='hs-conid'>Monad</span> <span class='hs-layout'>(</span><span class='hs-conid'>Ran</span> <span class='hs-layout'>(</span><span class='hs-conid'>Codensity</span> <span class='hs-varid'>f</span><span class='hs-layout'>)</span><span class='hs-layout'>)</span> <span class='hs-keyword'>where</span>
+<a name="line-95"></a>    <span class='hs-varid'>return</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>returnCodensity</span>
+<a name="line-96"></a>    <span class='hs-layout'>(</span><span class='hs-varop'>&gt;&gt;=</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>bindCodensity</span>
+<a name="line-97"></a>
+<a name="line-98"></a><span class='hs-keyword'>instance</span> <span class='hs-conid'>MonadPlus</span> <span class='hs-varid'>f</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>Alternative</span> <span class='hs-layout'>(</span><span class='hs-conid'>Ran</span> <span class='hs-layout'>(</span><span class='hs-conid'>Codensity</span> <span class='hs-varid'>f</span><span class='hs-layout'>)</span><span class='hs-layout'>)</span> <span class='hs-keyword'>where</span>
+<a name="line-99"></a>    <span class='hs-varid'>empty</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>liftRan</span> <span class='hs-varid'>mzero</span>
+<a name="line-100"></a>    <span class='hs-varid'>m</span> <span class='hs-varop'>&lt;|&gt;</span> <span class='hs-varid'>n</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>liftRan</span> <span class='hs-layout'>(</span><span class='hs-varid'>lowerRan</span> <span class='hs-varid'>m</span> <span class='hs-varop'>`mplus`</span> <span class='hs-varid'>lowerRan</span> <span class='hs-varid'>n</span><span class='hs-layout'>)</span>
+<a name="line-101"></a>    
+<a name="line-102"></a><span class='hs-keyword'>instance</span> <span class='hs-conid'>MonadPlus</span> <span class='hs-varid'>f</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>MonadPlus</span> <span class='hs-layout'>(</span><span class='hs-conid'>Ran</span> <span class='hs-layout'>(</span><span class='hs-conid'>Codensity</span> <span class='hs-varid'>f</span><span class='hs-layout'>)</span><span class='hs-layout'>)</span> <span class='hs-keyword'>where</span>
+<a name="line-103"></a>    <span class='hs-varid'>mzero</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>liftRan</span> <span class='hs-varid'>mzero</span>
+<a name="line-104"></a>    <span class='hs-varid'>m</span> <span class='hs-varop'>`mplus`</span> <span class='hs-varid'>n</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>liftRan</span> <span class='hs-layout'>(</span><span class='hs-varid'>lowerRan</span> <span class='hs-varid'>m</span> <span class='hs-varop'>`mplus`</span> <span class='hs-varid'>lowerRan</span> <span class='hs-varid'>n</span><span class='hs-layout'>)</span>
hunk ./doc/html/monad-ran/src/Control-Monad-Ran.html 114
-<a name="line-106"></a><span class='hs-comment'>-- Yoneda (ErrorTH b m)</span>
-<a name="line-107"></a><span class='hs-comment'>-- forall o. (a -&gt; G m o) -&gt; (b -&gt; G m o) -&gt; H m o</span>
-<a name="line-108"></a><span class='hs-keyword'>instance</span> <span class='hs-layout'>(</span><span class='hs-conid'>RMonad</span> <span class='hs-varid'>m</span><span class='hs-layout'>,</span> <span class='hs-conid'>Error</span> <span class='hs-varid'>b</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>RMonad</span> <span class='hs-layout'>(</span><span class='hs-conid'>ErrorT</span> <span class='hs-varid'>b</span> <span class='hs-varid'>m</span><span class='hs-layout'>)</span> <span class='hs-keyword'>where</span>
-<a name="line-109"></a>   <span class='hs-keyword'>type</span> <span class='hs-conid'>G</span> <span class='hs-layout'>(</span><span class='hs-conid'>ErrorT</span> <span class='hs-varid'>b</span> <span class='hs-varid'>m</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>G</span> <span class='hs-varid'>m</span> 
-<a name="line-110"></a>   <span class='hs-keyword'>type</span> <span class='hs-conid'>H</span> <span class='hs-layout'>(</span><span class='hs-conid'>ErrorT</span> <span class='hs-varid'>b</span> <span class='hs-varid'>m</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>ErrorTH</span> <span class='hs-varid'>b</span> <span class='hs-varid'>m</span>
-<a name="line-111"></a>
-<a name="line-112"></a><span class='hs-comment'>-- Yoneda f</span>
-<a name="line-113"></a><span class='hs-comment'>-- forall o. (a -&gt; o) -&gt; f o </span>
-<a name="line-114"></a><span class='hs-keyword'>instance</span> <span class='hs-conid'>Monad</span> <span class='hs-varid'>f</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>RMonad</span> <span class='hs-layout'>(</span><span class='hs-conid'>Yoneda</span> <span class='hs-varid'>f</span><span class='hs-layout'>)</span> <span class='hs-keyword'>where</span>
-<a name="line-115"></a>    <span class='hs-keyword'>type</span> <span class='hs-conid'>G</span> <span class='hs-layout'>(</span><span class='hs-conid'>Yoneda</span> <span class='hs-varid'>f</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>Identity</span>
-<a name="line-116"></a>    <span class='hs-keyword'>type</span> <span class='hs-conid'>H</span> <span class='hs-layout'>(</span><span class='hs-conid'>Yoneda</span> <span class='hs-varid'>f</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>f</span>
+<a name="line-106"></a><span class='hs-keyword'>instance</span> <span class='hs-conid'>MonadIO</span> <span class='hs-varid'>f</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>MonadIO</span> <span class='hs-layout'>(</span><span class='hs-conid'>Ran</span> <span class='hs-layout'>(</span><span class='hs-conid'>Codensity</span> <span class='hs-varid'>f</span><span class='hs-layout'>)</span><span class='hs-layout'>)</span> <span class='hs-keyword'>where</span>
+<a name="line-107"></a>    <span class='hs-varid'>liftIO</span> <span class='hs-varid'>f</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>Ran</span> <span class='hs-layout'>(</span><span class='hs-varid'>liftIO</span> <span class='hs-varid'>f</span> <span class='hs-varop'>&gt;&gt;=</span><span class='hs-layout'>)</span>
+<a name="line-108"></a>
+<a name="line-109"></a><span class='hs-keyword'>instance</span> <span class='hs-conid'>MonadState</span> <span class='hs-varid'>s</span> <span class='hs-varid'>m</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>MonadState</span> <span class='hs-varid'>s</span> <span class='hs-layout'>(</span><span class='hs-conid'>Ran</span> <span class='hs-layout'>(</span><span class='hs-conid'>Codensity</span> <span class='hs-varid'>m</span><span class='hs-layout'>)</span><span class='hs-layout'>)</span> <span class='hs-keyword'>where</span>
+<a name="line-110"></a>    <span class='hs-varid'>get</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>Ran</span> <span class='hs-layout'>(</span><span class='hs-varid'>get</span> <span class='hs-varop'>&gt;&gt;=</span><span class='hs-layout'>)</span>
+<a name="line-111"></a>    <span class='hs-varid'>put</span> <span class='hs-varid'>s</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>Ran</span> <span class='hs-layout'>(</span><span class='hs-varid'>put</span> <span class='hs-varid'>s</span> <span class='hs-varop'>&gt;&gt;=</span><span class='hs-layout'>)</span>
+<a name="line-112"></a>
+<a name="line-113"></a><span class='hs-keyword'>instance</span> <span class='hs-conid'>MonadWriter</span> <span class='hs-varid'>w</span> <span class='hs-varid'>m</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>MonadWriter</span> <span class='hs-varid'>w</span> <span class='hs-layout'>(</span><span class='hs-conid'>Ran</span> <span class='hs-layout'>(</span><span class='hs-conid'>Codensity</span> <span class='hs-varid'>m</span><span class='hs-layout'>)</span><span class='hs-layout'>)</span> <span class='hs-keyword'>where</span>
+<a name="line-114"></a>    <span class='hs-varid'>tell</span> <span class='hs-varid'>w</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>Ran</span> <span class='hs-layout'>(</span><span class='hs-varid'>tell</span> <span class='hs-varid'>w</span> <span class='hs-varop'>&gt;&gt;=</span><span class='hs-layout'>)</span> 
+<a name="line-115"></a>    <span class='hs-varid'>listen</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>liftRanCodensity</span> <span class='hs-varop'>.</span> <span class='hs-varid'>listen</span> <span class='hs-varop'>.</span> <span class='hs-varid'>lowerRanCodensity</span>
+<a name="line-116"></a>    <span class='hs-varid'>pass</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>liftRanCodensity</span> <span class='hs-varop'>.</span> <span class='hs-varid'>pass</span> <span class='hs-varop'>.</span> <span class='hs-varid'>lowerRanCodensity</span>
hunk ./doc/html/monad-ran/src/Control-Monad-Ran.html 126
-<a name="line-118"></a><span class='hs-comment'>-- Codensity f</span>
-<a name="line-119"></a><span class='hs-comment'>-- forall o. (a -&gt; f o) -&gt; f o </span>
-<a name="line-120"></a><span class='hs-keyword'>instance</span> <span class='hs-conid'>RMonad</span> <span class='hs-layout'>(</span><span class='hs-conid'>Codensity</span> <span class='hs-varid'>f</span><span class='hs-layout'>)</span> <span class='hs-keyword'>where</span>
-<a name="line-121"></a>    <span class='hs-keyword'>type</span> <span class='hs-conid'>G</span> <span class='hs-layout'>(</span><span class='hs-conid'>Codensity</span> <span class='hs-varid'>f</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>f</span>
-<a name="line-122"></a>    <span class='hs-keyword'>type</span> <span class='hs-conid'>H</span> <span class='hs-layout'>(</span><span class='hs-conid'>Codensity</span> <span class='hs-varid'>f</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>f</span>
-<a name="line-123"></a>
-<a name="line-124"></a><span class='hs-comment'>-- Yoneda (Reader r)</span>
-<a name="line-125"></a><span class='hs-comment'>-- forall o. (a -&gt; o) -&gt; r -&gt; o</span>
-<a name="line-126"></a><span class='hs-keyword'>instance</span> <span class='hs-conid'>RMonad</span> <span class='hs-layout'>(</span><span class='hs-conid'>Reader</span> <span class='hs-varid'>e</span><span class='hs-layout'>)</span> <span class='hs-keyword'>where</span>
-<a name="line-127"></a>    <span class='hs-keyword'>type</span> <span class='hs-conid'>G</span> <span class='hs-layout'>(</span><span class='hs-conid'>Reader</span> <span class='hs-varid'>e</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>Identity</span>
-<a name="line-128"></a>    <span class='hs-keyword'>type</span> <span class='hs-conid'>H</span> <span class='hs-layout'>(</span><span class='hs-conid'>Reader</span> <span class='hs-varid'>e</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>Hom</span> <span class='hs-varid'>e</span>
-<a name="line-129"></a>
-<a name="line-130"></a><span class='hs-comment'>-- embedded as CPS'd State to avoid superfluous 'mappend mempty' calls</span>
-<a name="line-131"></a><span class='hs-comment'>-- specialized Codensity (Reader w)</span>
-<a name="line-132"></a><span class='hs-comment'>-- forall o. (a -&gt; w -&gt; o) -&gt; w -&gt; o</span>
-<a name="line-133"></a><span class='hs-keyword'>instance</span> <span class='hs-conid'>Monoid</span> <span class='hs-varid'>w</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>RMonad</span> <span class='hs-layout'>(</span><span class='hs-conid'>Writer</span> <span class='hs-varid'>w</span><span class='hs-layout'>)</span> <span class='hs-keyword'>where</span>
-<a name="line-134"></a>    <span class='hs-keyword'>type</span> <span class='hs-conid'>G</span> <span class='hs-layout'>(</span><span class='hs-conid'>Writer</span> <span class='hs-varid'>w</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>Hom</span> <span class='hs-varid'>w</span>
-<a name="line-135"></a>    <span class='hs-keyword'>type</span> <span class='hs-conid'>H</span> <span class='hs-layout'>(</span><span class='hs-conid'>Writer</span> <span class='hs-varid'>w</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>Hom</span> <span class='hs-varid'>w</span>
-<a name="line-136"></a>    <span class='hs-comment'>-- forall o. (a -&gt; w -&gt; o) -&gt; o</span>
-<a name="line-137"></a>    <span class='hs-comment'>-- type H (Writer w) = Identity</span>
-<a name="line-138"></a>
-<a name="line-139"></a><span class='hs-comment'>-- Codensity (Reader s)</span>
-<a name="line-140"></a><span class='hs-comment'>-- forall o. (a -&gt; s -&gt; o) -&gt; s -&gt; o</span>
-<a name="line-141"></a><span class='hs-keyword'>instance</span> <span class='hs-conid'>RMonad</span> <span class='hs-layout'>(</span><span class='hs-conid'>State</span> <span class='hs-varid'>s</span><span class='hs-layout'>)</span> <span class='hs-keyword'>where</span>
-<a name="line-142"></a>    <span class='hs-keyword'>type</span> <span class='hs-conid'>G</span> <span class='hs-layout'>(</span><span class='hs-conid'>State</span> <span class='hs-varid'>s</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>Hom</span> <span class='hs-varid'>s</span>
-<a name="line-143"></a>    <span class='hs-keyword'>type</span> <span class='hs-conid'>H</span> <span class='hs-layout'>(</span><span class='hs-conid'>State</span> <span class='hs-varid'>s</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>Hom</span> <span class='hs-varid'>s</span>
-<a name="line-144"></a>
-<a name="line-145"></a><span class='hs-comment'>-- Codensity (Const r)</span>
-<a name="line-146"></a><span class='hs-comment'>-- (a -&gt; r) -&gt; r</span>
-<a name="line-147"></a><span class='hs-keyword'>instance</span> <span class='hs-conid'>RMonad</span> <span class='hs-layout'>(</span><span class='hs-conid'>Cont</span> <span class='hs-varid'>r</span><span class='hs-layout'>)</span> <span class='hs-keyword'>where</span>
-<a name="line-148"></a>    <span class='hs-keyword'>type</span> <span class='hs-conid'>G</span> <span class='hs-layout'>(</span><span class='hs-conid'>Cont</span> <span class='hs-varid'>r</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>Const</span> <span class='hs-varid'>r</span>
-<a name="line-149"></a>    <span class='hs-keyword'>type</span> <span class='hs-conid'>H</span> <span class='hs-layout'>(</span><span class='hs-conid'>Cont</span> <span class='hs-varid'>r</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>Const</span> <span class='hs-varid'>r</span>
-<a name="line-150"></a>
-<a name="line-151"></a><span class='hs-comment'>-- forall o. (a -&gt; G m o) -&gt; r -&gt; H m o </span>
-<a name="line-152"></a><span class='hs-keyword'>instance</span> <span class='hs-conid'>RMonad</span> <span class='hs-varid'>m</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>RMonad</span> <span class='hs-layout'>(</span><span class='hs-conid'>ReaderT</span> <span class='hs-varid'>e</span> <span class='hs-varid'>m</span><span class='hs-layout'>)</span> <span class='hs-keyword'>where</span>
-<a name="line-153"></a>    <span class='hs-keyword'>type</span> <span class='hs-conid'>G</span> <span class='hs-layout'>(</span><span class='hs-conid'>ReaderT</span> <span class='hs-varid'>e</span> <span class='hs-varid'>m</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>G</span> <span class='hs-varid'>m</span>
-<a name="line-154"></a>    <span class='hs-keyword'>type</span> <span class='hs-conid'>H</span> <span class='hs-layout'>(</span><span class='hs-conid'>ReaderT</span> <span class='hs-varid'>e</span> <span class='hs-varid'>m</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>e</span> <span class='hs-conop'>:-&gt;</span> <span class='hs-conid'>H</span> <span class='hs-varid'>m</span>
-<a name="line-155"></a>
-<a name="line-156"></a><span class='hs-comment'>-- forall o. (a -&gt; w -&gt; G m o) -&gt; H m o</span>
-<a name="line-157"></a><span class='hs-keyword'>instance</span> <span class='hs-layout'>(</span><span class='hs-conid'>Monoid</span> <span class='hs-varid'>w</span><span class='hs-layout'>,</span> <span class='hs-conid'>RMonad</span> <span class='hs-varid'>m</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>RMonad</span> <span class='hs-layout'>(</span><span class='hs-conid'>WriterT</span> <span class='hs-varid'>w</span> <span class='hs-varid'>m</span><span class='hs-layout'>)</span> <span class='hs-keyword'>where</span>
-<a name="line-158"></a>    <span class='hs-keyword'>type</span> <span class='hs-conid'>G</span> <span class='hs-layout'>(</span><span class='hs-conid'>WriterT</span> <span class='hs-varid'>w</span> <span class='hs-varid'>m</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>w</span> <span class='hs-conop'>:-&gt;</span> <span class='hs-conid'>G</span> <span class='hs-varid'>m</span>
-<a name="line-159"></a>    <span class='hs-keyword'>type</span> <span class='hs-conid'>H</span> <span class='hs-layout'>(</span><span class='hs-conid'>WriterT</span> <span class='hs-varid'>w</span> <span class='hs-varid'>m</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>H</span> <span class='hs-varid'>m</span>
-<a name="line-160"></a>
-<a name="line-161"></a><span class='hs-comment'>-- forall o. (a -&gt; s -&gt; G m o) -&gt; s -&gt; H m o </span>
-<a name="line-162"></a><span class='hs-keyword'>instance</span> <span class='hs-conid'>RMonad</span> <span class='hs-varid'>m</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>RMonad</span> <span class='hs-layout'>(</span><span class='hs-conid'>StateT</span> <span class='hs-varid'>s</span> <span class='hs-varid'>m</span><span class='hs-layout'>)</span> <span class='hs-keyword'>where</span>
-<a name="line-163"></a>    <span class='hs-keyword'>type</span> <span class='hs-conid'>G</span> <span class='hs-layout'>(</span><span class='hs-conid'>StateT</span> <span class='hs-varid'>s</span> <span class='hs-varid'>m</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>s</span> <span class='hs-conop'>:-&gt;</span> <span class='hs-conid'>G</span> <span class='hs-varid'>m</span>
-<a name="line-164"></a>    <span class='hs-keyword'>type</span> <span class='hs-conid'>H</span> <span class='hs-layout'>(</span><span class='hs-conid'>StateT</span> <span class='hs-varid'>s</span> <span class='hs-varid'>m</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>s</span> <span class='hs-conop'>:-&gt;</span> <span class='hs-conid'>H</span> <span class='hs-varid'>m</span>
-<a name="line-165"></a>
-<a name="line-166"></a><a name="ConstT"></a><span class='hs-comment'>-- (a -&gt; G m r) -&gt; H m r</span>
-<a name="line-167"></a><a name="ConstT"></a><span class='hs-keyword'>data</span> <span class='hs-conid'>ConstT</span> <span class='hs-varid'>r</span> <span class='hs-varid'>f</span> <span class='hs-varid'>a</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>ConstT</span> <span class='hs-layout'>{</span> <span class='hs-varid'>getConstT</span> <span class='hs-keyglyph'>::</span> <span class='hs-varid'>f</span> <span class='hs-varid'>r</span> <span class='hs-layout'>}</span> 
-<a name="line-168"></a><span class='hs-keyword'>instance</span> <span class='hs-conid'>RMonad</span> <span class='hs-varid'>m</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>RMonad</span> <span class='hs-layout'>(</span><span class='hs-conid'>ContT</span> <span class='hs-varid'>r</span> <span class='hs-varid'>m</span><span class='hs-layout'>)</span> <span class='hs-keyword'>where</span>
-<a name="line-169"></a>    <span class='hs-keyword'>type</span> <span class='hs-conid'>G</span> <span class='hs-layout'>(</span><span class='hs-conid'>ContT</span> <span class='hs-varid'>r</span> <span class='hs-varid'>m</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>ConstT</span> <span class='hs-varid'>r</span> <span class='hs-layout'>(</span><span class='hs-conid'>G</span> <span class='hs-varid'>m</span><span class='hs-layout'>)</span>
-<a name="line-170"></a>    <span class='hs-keyword'>type</span> <span class='hs-conid'>H</span> <span class='hs-layout'>(</span><span class='hs-conid'>ContT</span> <span class='hs-varid'>r</span> <span class='hs-varid'>m</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>ConstT</span> <span class='hs-varid'>r</span> <span class='hs-layout'>(</span><span class='hs-conid'>H</span> <span class='hs-varid'>m</span><span class='hs-layout'>)</span>
+<a name="line-118"></a><span class='hs-keyword'>instance</span> <span class='hs-conid'>MonadReader</span> <span class='hs-varid'>r</span> <span class='hs-varid'>m</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>MonadReader</span> <span class='hs-varid'>r</span> <span class='hs-layout'>(</span><span class='hs-conid'>Ran</span> <span class='hs-layout'>(</span><span class='hs-conid'>Codensity</span> <span class='hs-varid'>m</span><span class='hs-layout'>)</span><span class='hs-layout'>)</span> <span class='hs-keyword'>where</span>
+<a name="line-119"></a>    <span class='hs-varid'>ask</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>Ran</span> <span class='hs-layout'>(</span><span class='hs-varid'>ask</span> <span class='hs-varop'>&gt;&gt;=</span><span class='hs-layout'>)</span>
+<a name="line-120"></a>    <span class='hs-varid'>local</span> <span class='hs-varid'>f</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>liftRanCodensity</span> <span class='hs-varop'>.</span> <span class='hs-varid'>local</span> <span class='hs-varid'>f</span> <span class='hs-varop'>.</span> <span class='hs-varid'>lowerRanCodensity</span>
+<a name="line-121"></a>
+<a name="line-122"></a><span class='hs-keyword'>instance</span> <span class='hs-conid'>MonadRWS</span> <span class='hs-varid'>r</span> <span class='hs-varid'>w</span> <span class='hs-varid'>s</span> <span class='hs-varid'>m</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>MonadRWS</span> <span class='hs-varid'>r</span> <span class='hs-varid'>w</span> <span class='hs-varid'>s</span> <span class='hs-layout'>(</span><span class='hs-conid'>Ran</span> <span class='hs-layout'>(</span><span class='hs-conid'>Codensity</span> <span class='hs-varid'>m</span><span class='hs-layout'>)</span><span class='hs-layout'>)</span>
+<a name="line-123"></a>    
+<a name="line-124"></a><span class='hs-keyword'>instance</span> <span class='hs-conid'>MonadFix</span> <span class='hs-varid'>m</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>MonadFix</span> <span class='hs-layout'>(</span><span class='hs-conid'>Ran</span> <span class='hs-layout'>(</span><span class='hs-conid'>Codensity</span> <span class='hs-varid'>m</span><span class='hs-layout'>)</span><span class='hs-layout'>)</span> <span class='hs-keyword'>where</span>
+<a name="line-125"></a>    <span class='hs-varid'>mfix</span> <span class='hs-varid'>f</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>liftRanCodensity</span> <span class='hs-varop'>$</span> <span class='hs-varid'>mfix</span> <span class='hs-layout'>(</span><span class='hs-varid'>lowerRanCodensity</span> <span class='hs-varop'>.</span> <span class='hs-varid'>f</span><span class='hs-layout'>)</span>
+<a name="line-126"></a>
+<a name="line-127"></a><span class='hs-keyword'>instance</span> <span class='hs-conid'>MonadError</span> <span class='hs-varid'>e</span> <span class='hs-varid'>m</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>MonadError</span> <span class='hs-varid'>e</span> <span class='hs-layout'>(</span><span class='hs-conid'>Ran</span> <span class='hs-layout'>(</span><span class='hs-conid'>Codensity</span> <span class='hs-varid'>m</span><span class='hs-layout'>)</span><span class='hs-layout'>)</span> <span class='hs-keyword'>where</span>
+<a name="line-128"></a>    <span class='hs-varid'>throwError</span> <span class='hs-varid'>e</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>Ran</span> <span class='hs-layout'>(</span><span class='hs-varid'>throwError</span> <span class='hs-varid'>e</span> <span class='hs-varop'>&gt;&gt;=</span><span class='hs-layout'>)</span>
+<a name="line-129"></a>    <span class='hs-varid'>m</span> <span class='hs-varop'>`catchError`</span> <span class='hs-varid'>h</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>liftRanCodensity</span> <span class='hs-layout'>(</span><span class='hs-varid'>lowerRanCodensity</span> <span class='hs-varid'>m</span> <span class='hs-varop'>`catchError`</span> <span class='hs-layout'>(</span><span class='hs-varid'>lowerRanCodensity</span> <span class='hs-varop'>.</span> <span class='hs-varid'>h</span><span class='hs-layout'>)</span><span class='hs-layout'>)</span>
+<a name="line-130"></a>
+<a name="line-131"></a><span class='hs-comment'>-- TODO: the other instances for Ran (Codensity f)</span>
+<a name="line-132"></a><span class='hs-comment'>-- MonadIO, MonadState, etc.</span>
+<a name="line-133"></a>
+<a name="line-134"></a><span class='hs-comment'>-- Yoneda Identity a ~ Codensity Identity a ~ forall o. (a -&gt; o) -&gt; o</span>
+<a name="line-135"></a><span class='hs-keyword'>instance</span> <span class='hs-conid'>RanIso</span> <span class='hs-conid'>Identity</span> <span class='hs-keyword'>where</span>
+<a name="line-136"></a>    <span class='hs-keyword'>type</span> <span class='hs-conid'>G</span> <span class='hs-conid'>Identity</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>Identity</span>
+<a name="line-137"></a>    <span class='hs-keyword'>type</span> <span class='hs-conid'>H</span> <span class='hs-conid'>Identity</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>Identity</span>
+<a name="line-138"></a>    <span class='hs-varid'>liftRan</span> <span class='hs-varid'>m</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>Ran</span> <span class='hs-layout'>(</span><span class='hs-varid'>m</span> <span class='hs-varop'>&gt;&gt;=</span><span class='hs-layout'>)</span>
+<a name="line-139"></a>    <span class='hs-varid'>lowerRan</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>flip</span> <span class='hs-varid'>getRan</span> <span class='hs-conid'>Identity</span>
+<a name="line-140"></a>
+<a name="line-141"></a><span class='hs-keyword'>instance</span> <span class='hs-conid'>Pointed</span> <span class='hs-layout'>(</span><span class='hs-conid'>Ran</span> <span class='hs-conid'>Identity</span><span class='hs-layout'>)</span> <span class='hs-keyword'>where</span>
+<a name="line-142"></a>    <span class='hs-varid'>point</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>returnCodensity</span>
+<a name="line-143"></a>
+<a name="line-144"></a><span class='hs-keyword'>instance</span> <span class='hs-conid'>Applicative</span> <span class='hs-layout'>(</span><span class='hs-conid'>Ran</span> <span class='hs-conid'>Identity</span><span class='hs-layout'>)</span> <span class='hs-keyword'>where</span>
+<a name="line-145"></a>    <span class='hs-varid'>pure</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>returnCodensity</span>
+<a name="line-146"></a>    <span class='hs-layout'>(</span><span class='hs-varop'>&lt;*&gt;</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>apCodensity</span>
+<a name="line-147"></a>
+<a name="line-148"></a><span class='hs-keyword'>instance</span> <span class='hs-conid'>Monad</span> <span class='hs-layout'>(</span><span class='hs-conid'>Ran</span> <span class='hs-conid'>Identity</span><span class='hs-layout'>)</span> <span class='hs-keyword'>where</span>
+<a name="line-149"></a>    <span class='hs-varid'>return</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>returnCodensity</span>
+<a name="line-150"></a>    <span class='hs-layout'>(</span><span class='hs-varop'>&gt;&gt;=</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>bindCodensity</span>
+<a name="line-151"></a>
+<a name="line-152"></a><a name="World"></a><span class='hs-keyword'>newtype</span> <span class='hs-conid'>World</span> <span class='hs-varid'>w</span> <span class='hs-varid'>a</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>World</span> <span class='hs-layout'>{</span> <span class='hs-varid'>runWorld</span> <span class='hs-keyglyph'>::</span> <span class='hs-conid'>State</span><span class='hs-cpp'>#</span> <span class='hs-varid'>w</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-varid'>a</span> <span class='hs-layout'>}</span> 
+<a name="line-153"></a>
+<a name="line-154"></a><a name="STret'"></a><span class='hs-comment'>-- homegrown STret with flopped arguments</span>
+<a name="line-155"></a><a name="STret'"></a><span class='hs-keyword'>data</span> <span class='hs-conid'>STret'</span> <span class='hs-varid'>s</span> <span class='hs-varid'>a</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>STret'</span> <span class='hs-varid'>a</span> <span class='hs-layout'>(</span><span class='hs-conid'>State</span><span class='hs-cpp'>#</span> <span class='hs-varid'>s</span><span class='hs-layout'>)</span>
+<a name="line-156"></a>
+<a name="line-157"></a><a name="liftRanWorld"></a><span class='hs-definition'>liftRanWorld</span> <span class='hs-keyglyph'>::</span> <span class='hs-layout'>(</span><span class='hs-conid'>G</span> <span class='hs-varid'>m</span> <span class='hs-keyglyph'>~</span> <span class='hs-conid'>World</span> <span class='hs-varid'>w</span><span class='hs-layout'>,</span> <span class='hs-conid'>H</span> <span class='hs-varid'>m</span> <span class='hs-keyglyph'>~</span> <span class='hs-conid'>World</span> <span class='hs-varid'>w</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-layout'>(</span><span class='hs-conid'>State</span><span class='hs-cpp'>#</span> <span class='hs-varid'>w</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-layout'>(</span><span class='hs-cpp'>#</span> <span class='hs-conid'>State</span><span class='hs-cpp'>#</span> <span class='hs-varid'>w</span><span class='hs-layout'>,</span> <span class='hs-varid'>a</span> <span class='hs-cpp'>#</span><span class='hs-layout'>)</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-conid'>Ran</span> <span class='hs-varid'>m</span> <span class='hs-varid'>a</span>
+<a name="line-158"></a><span class='hs-definition'>liftRanWorld</span> <span class='hs-varid'>f</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>Ran</span> <span class='hs-layout'>(</span><span class='hs-keyglyph'>\</span><span class='hs-varid'>k</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-conid'>World</span> <span class='hs-layout'>(</span><span class='hs-keyglyph'>\</span><span class='hs-varid'>w</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-keyword'>case</span> <span class='hs-varid'>f</span> <span class='hs-varid'>w</span> <span class='hs-keyword'>of</span> <span class='hs-layout'>(</span><span class='hs-cpp'>#</span> <span class='hs-varid'>w'</span><span class='hs-layout'>,</span> <span class='hs-varid'>a</span> <span class='hs-cpp'>#</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-varid'>runWorld</span> <span class='hs-layout'>(</span><span class='hs-varid'>k</span> <span class='hs-varid'>a</span><span class='hs-layout'>)</span> <span class='hs-varid'>w'</span><span class='hs-layout'>)</span><span class='hs-layout'>)</span>
+<a name="line-159"></a>
+<a name="line-160"></a><span class='hs-comment'>-- viewpatterned to eliminate named temporaries:</span>
+<a name="line-161"></a><span class='hs-comment'>-- liftRanWorld f = Ran (\k -&gt; World (\(f -&gt; (# w, (runWorld . k -&gt; j) #)) -&gt; j w))</span>
+<a name="line-162"></a>
+<a name="line-163"></a><a name="lowerRanWorld"></a><span class='hs-definition'>lowerRanWorld</span> <span class='hs-keyglyph'>::</span> <span class='hs-layout'>(</span><span class='hs-conid'>G</span> <span class='hs-varid'>m</span> <span class='hs-keyglyph'>~</span> <span class='hs-conid'>World</span> <span class='hs-varid'>w</span><span class='hs-layout'>,</span> <span class='hs-conid'>H</span> <span class='hs-varid'>m</span> <span class='hs-keyglyph'>~</span> <span class='hs-conid'>World</span> <span class='hs-varid'>w</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>Ran</span> <span class='hs-varid'>m</span> <span class='hs-varid'>a</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-conid'>State</span><span class='hs-cpp'>#</span> <span class='hs-varid'>w</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-layout'>(</span><span class='hs-cpp'>#</span> <span class='hs-conid'>State</span><span class='hs-cpp'>#</span> <span class='hs-varid'>w</span><span class='hs-layout'>,</span> <span class='hs-varid'>a</span> <span class='hs-cpp'>#</span><span class='hs-layout'>)</span>
+<a name="line-164"></a><span class='hs-definition'>lowerRanWorld</span> <span class='hs-layout'>(</span><span class='hs-conid'>Ran</span> <span class='hs-varid'>r</span><span class='hs-layout'>)</span> <span class='hs-varid'>w</span> <span class='hs-keyglyph'>=</span> <span class='hs-keyword'>case</span> <span class='hs-varid'>runWorld</span> <span class='hs-layout'>(</span><span class='hs-varid'>r</span> <span class='hs-layout'>(</span><span class='hs-conid'>World</span> <span class='hs-varop'>.</span> <span class='hs-conid'>STret'</span><span class='hs-layout'>)</span><span class='hs-layout'>)</span> <span class='hs-varid'>w</span> <span class='hs-keyword'>of</span> 
+<a name="line-165"></a>    <span class='hs-conid'>STret'</span> <span class='hs-varid'>b</span> <span class='hs-varid'>w''</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-layout'>(</span><span class='hs-cpp'>#</span> <span class='hs-varid'>w''</span><span class='hs-layout'>,</span> <span class='hs-varid'>b</span> <span class='hs-cpp'>#</span><span class='hs-layout'>)</span>
+<a name="line-166"></a>
+<a name="line-167"></a><span class='hs-comment'>-- Represent IO as the codensity of the RealWorld</span>
+<a name="line-168"></a><span class='hs-keyword'>instance</span> <span class='hs-conid'>RanIso</span> <span class='hs-conid'>IO</span> <span class='hs-keyword'>where</span>
+<a name="line-169"></a>    <span class='hs-keyword'>type</span> <span class='hs-conid'>G</span> <span class='hs-conid'>IO</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>World</span> <span class='hs-conid'>RealWorld</span>
+<a name="line-170"></a>    <span class='hs-keyword'>type</span> <span class='hs-conid'>H</span> <span class='hs-conid'>IO</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>World</span> <span class='hs-conid'>RealWorld</span>
+<a name="line-171"></a>    <span class='hs-varid'>liftRan</span> <span class='hs-layout'>(</span><span class='hs-conid'>IO</span> <span class='hs-varid'>s</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>liftRanWorld</span> <span class='hs-varid'>s</span>
+<a name="line-172"></a>    <span class='hs-varid'>lowerRan</span> <span class='hs-varid'>s</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>IO</span> <span class='hs-layout'>(</span><span class='hs-varid'>lowerRanWorld</span> <span class='hs-varid'>s</span><span class='hs-layout'>)</span>
+<a name="line-173"></a>
+<a name="line-174"></a><span class='hs-keyword'>instance</span> <span class='hs-conid'>Applicative</span> <span class='hs-layout'>(</span><span class='hs-conid'>Ran</span> <span class='hs-conid'>IO</span><span class='hs-layout'>)</span> <span class='hs-keyword'>where</span>
+<a name="line-175"></a>    <span class='hs-varid'>pure</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>returnCodensity</span>
+<a name="line-176"></a>    <span class='hs-layout'>(</span><span class='hs-varop'>&lt;*&gt;</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>apCodensity</span>
+<a name="line-177"></a>
+<a name="line-178"></a><span class='hs-keyword'>instance</span> <span class='hs-conid'>Monad</span> <span class='hs-layout'>(</span><span class='hs-conid'>Ran</span> <span class='hs-conid'>IO</span><span class='hs-layout'>)</span> <span class='hs-keyword'>where</span>
+<a name="line-179"></a>    <span class='hs-varid'>return</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>returnCodensity</span>
+<a name="line-180"></a>    <span class='hs-layout'>(</span><span class='hs-varop'>&gt;&gt;=</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>bindCodensity</span>
+<a name="line-181"></a>
+<a name="line-182"></a><span class='hs-keyword'>instance</span> <span class='hs-conid'>MonadIO</span> <span class='hs-layout'>(</span><span class='hs-conid'>Ran</span> <span class='hs-conid'>IO</span><span class='hs-layout'>)</span> <span class='hs-keyword'>where</span>
+<a name="line-183"></a>    <span class='hs-varid'>liftIO</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>liftRan</span>
+<a name="line-184"></a>
+<a name="line-185"></a><span class='hs-comment'>-- Represent ST s as the codensity of the world s</span>
+<a name="line-186"></a><span class='hs-keyword'>instance</span> <span class='hs-conid'>RanIso</span> <span class='hs-layout'>(</span><span class='hs-conid'>ST</span> <span class='hs-varid'>s</span><span class='hs-layout'>)</span> <span class='hs-keyword'>where</span>
+<a name="line-187"></a>    <span class='hs-keyword'>type</span> <span class='hs-conid'>G</span> <span class='hs-layout'>(</span><span class='hs-conid'>ST</span> <span class='hs-varid'>s</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>World</span> <span class='hs-varid'>s</span>
+<a name="line-188"></a>    <span class='hs-keyword'>type</span> <span class='hs-conid'>H</span> <span class='hs-layout'>(</span><span class='hs-conid'>ST</span> <span class='hs-varid'>s</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>World</span> <span class='hs-varid'>s</span>
+<a name="line-189"></a>    <span class='hs-varid'>liftRan</span> <span class='hs-layout'>(</span><span class='hs-conid'>ST</span> <span class='hs-varid'>s</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>liftRanWorld</span> <span class='hs-varid'>s</span>
+<a name="line-190"></a>    <span class='hs-varid'>lowerRan</span> <span class='hs-varid'>r</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>ST</span> <span class='hs-layout'>(</span><span class='hs-varid'>lowerRanWorld</span> <span class='hs-varid'>r</span><span class='hs-layout'>)</span>
+<a name="line-191"></a>
+<a name="line-192"></a><span class='hs-keyword'>instance</span> <span class='hs-conid'>Applicative</span> <span class='hs-layout'>(</span><span class='hs-conid'>Ran</span> <span class='hs-layout'>(</span><span class='hs-conid'>ST</span> <span class='hs-varid'>s</span><span class='hs-layout'>)</span><span class='hs-layout'>)</span> <span class='hs-keyword'>where</span>
+<a name="line-193"></a>    <span class='hs-varid'>pure</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>returnCodensity</span>
+<a name="line-194"></a>    <span class='hs-layout'>(</span><span class='hs-varop'>&lt;*&gt;</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>apCodensity</span>
+<a name="line-195"></a>
+<a name="line-196"></a><span class='hs-keyword'>instance</span> <span class='hs-conid'>Monad</span> <span class='hs-layout'>(</span><span class='hs-conid'>Ran</span> <span class='hs-layout'>(</span><span class='hs-conid'>ST</span> <span class='hs-varid'>s</span><span class='hs-layout'>)</span><span class='hs-layout'>)</span> <span class='hs-keyword'>where</span>
+<a name="line-197"></a>    <span class='hs-varid'>return</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>returnCodensity</span>
+<a name="line-198"></a>    <span class='hs-layout'>(</span><span class='hs-varop'>&gt;&gt;=</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>bindCodensity</span>
+<a name="line-199"></a>
+<a name="line-200"></a><span class='hs-comment'>-- todo make a MonadST class</span>
+<a name="line-201"></a>
+<a name="line-202"></a><span class='hs-comment'>-- Represent STM as the codensity of the RealWorld</span>
+<a name="line-203"></a><span class='hs-keyword'>instance</span> <span class='hs-conid'>RanIso</span> <span class='hs-conid'>STM</span> <span class='hs-keyword'>where</span>
+<a name="line-204"></a>    <span class='hs-keyword'>type</span> <span class='hs-conid'>G</span> <span class='hs-conid'>STM</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>World</span> <span class='hs-conid'>RealWorld</span>
+<a name="line-205"></a>    <span class='hs-keyword'>type</span> <span class='hs-conid'>H</span> <span class='hs-conid'>STM</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>World</span> <span class='hs-conid'>RealWorld</span>
+<a name="line-206"></a>    <span class='hs-varid'>liftRan</span> <span class='hs-layout'>(</span><span class='hs-conid'>STM</span> <span class='hs-varid'>s</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>liftRanWorld</span> <span class='hs-varid'>s</span>
+<a name="line-207"></a>    <span class='hs-varid'>lowerRan</span> <span class='hs-varid'>r</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>STM</span> <span class='hs-layout'>(</span><span class='hs-varid'>lowerRanWorld</span> <span class='hs-varid'>r</span><span class='hs-layout'>)</span>
+<a name="line-208"></a>
+<a name="line-209"></a><span class='hs-keyword'>instance</span> <span class='hs-conid'>Applicative</span> <span class='hs-layout'>(</span><span class='hs-conid'>Ran</span> <span class='hs-conid'>STM</span><span class='hs-layout'>)</span> <span class='hs-keyword'>where</span>
+<a name="line-210"></a>    <span class='hs-varid'>pure</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>returnCodensity</span>
+<a name="line-211"></a>    <span class='hs-layout'>(</span><span class='hs-varop'>&lt;*&gt;</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>apCodensity</span>
+<a name="line-212"></a>
+<a name="line-213"></a><span class='hs-keyword'>instance</span> <span class='hs-conid'>Monad</span> <span class='hs-layout'>(</span><span class='hs-conid'>Ran</span> <span class='hs-conid'>STM</span><span class='hs-layout'>)</span> <span class='hs-keyword'>where</span>
+<a name="line-214"></a>    <span class='hs-varid'>return</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>returnCodensity</span>
+<a name="line-215"></a>    <span class='hs-layout'>(</span><span class='hs-varop'>&gt;&gt;=</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>bindCodensity</span>
+<a name="line-216"></a>
+<a name="line-217"></a><span class='hs-comment'>-- TODO: make a MonadSTM class</span>
+<a name="line-218"></a>
+<a name="line-219"></a><span class='hs-comment'>-- Yoneda Endo a ~ forall o. (a -&gt; o) -&gt; o -&gt; o ~ forall o. (a -&gt; Identity o) -&gt; Endo o</span>
+<a name="line-220"></a><span class='hs-comment'>-- note Endo is not a Hask Functor and Maybe is not a Codensity monad, so this is trickier</span>
+<a name="line-221"></a><span class='hs-keyword'>instance</span> <span class='hs-conid'>RanIso</span> <span class='hs-conid'>Maybe</span> <span class='hs-keyword'>where</span>
+<a name="line-222"></a>    <span class='hs-keyword'>type</span> <span class='hs-conid'>G</span> <span class='hs-conid'>Maybe</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>Identity</span>
+<a name="line-223"></a>    <span class='hs-keyword'>type</span> <span class='hs-conid'>H</span> <span class='hs-conid'>Maybe</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>Endo</span>
+<a name="line-224"></a>    <span class='hs-varid'>liftRan</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>maybe</span> <span class='hs-varid'>mzero</span> <span class='hs-varid'>return</span>
+<a name="line-225"></a>    <span class='hs-varid'>lowerRan</span> <span class='hs-varid'>f</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>appEndo</span> <span class='hs-layout'>(</span><span class='hs-varid'>getRan</span> <span class='hs-varid'>f</span> <span class='hs-layout'>(</span><span class='hs-conid'>Identity</span> <span class='hs-varop'>.</span> <span class='hs-varid'>return</span><span class='hs-layout'>)</span><span class='hs-layout'>)</span> <span class='hs-varid'>mzero</span>
+<a name="line-226"></a>
+<a name="line-227"></a><span class='hs-keyword'>instance</span> <span class='hs-conid'>Monad</span> <span class='hs-layout'>(</span><span class='hs-conid'>Ran</span> <span class='hs-conid'>Maybe</span><span class='hs-layout'>)</span> <span class='hs-keyword'>where</span>
+<a name="line-228"></a>    <span class='hs-varid'>return</span> <span class='hs-varid'>x</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>Ran</span> <span class='hs-layout'>(</span><span class='hs-keyglyph'>\</span><span class='hs-varid'>k</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-conid'>Endo</span> <span class='hs-layout'>(</span><span class='hs-keyglyph'>\</span><span class='hs-keyword'>_</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-varid'>runIdentity</span> <span class='hs-layout'>(</span><span class='hs-varid'>k</span> <span class='hs-varid'>x</span><span class='hs-layout'>)</span><span class='hs-layout'>)</span><span class='hs-layout'>)</span>
+<a name="line-229"></a>    <span class='hs-conid'>Ran</span> <span class='hs-varid'>g</span> <span class='hs-varop'>&gt;&gt;=</span> <span class='hs-varid'>f</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>Ran</span> <span class='hs-layout'>(</span><span class='hs-keyglyph'>\</span><span class='hs-varid'>k</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-conid'>Endo</span> <span class='hs-layout'>(</span><span class='hs-keyglyph'>\</span><span class='hs-varid'>z</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-varid'>appEndo</span> <span class='hs-layout'>(</span><span class='hs-varid'>g</span> <span class='hs-layout'>(</span><span class='hs-keyglyph'>\</span><span class='hs-varid'>a</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-conid'>Identity</span> <span class='hs-layout'>(</span><span class='hs-varid'>appEndo</span> <span class='hs-layout'>(</span><span class='hs-varid'>getRan</span> <span class='hs-layout'>(</span><span class='hs-varid'>f</span> <span class='hs-varid'>a</span><span class='hs-layout'>)</span> <span class='hs-varid'>k</span><span class='hs-layout'>)</span> <span class='hs-varid'>z</span><span class='hs-layout'>)</span><span class='hs-layout'>)</span><span class='hs-layout'>)</span> <span class='hs-varid'>z</span><span class='hs-layout'>)</span><span class='hs-layout'>)</span>
+<a name="line-230"></a>    <span class='hs-varid'>fail</span> <span class='hs-keyword'>_</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>mzero</span>
+<a name="line-231"></a>
+<a name="line-232"></a><span class='hs-keyword'>instance</span> <span class='hs-conid'>Applicative</span> <span class='hs-layout'>(</span><span class='hs-conid'>Ran</span> <span class='hs-conid'>Maybe</span><span class='hs-layout'>)</span> <span class='hs-keyword'>where</span>
+<a name="line-233"></a>    <span class='hs-varid'>pure</span> <span class='hs-varid'>x</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>Ran</span> <span class='hs-layout'>(</span><span class='hs-keyglyph'>\</span><span class='hs-varid'>k</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-conid'>Endo</span> <span class='hs-layout'>(</span><span class='hs-keyglyph'>\</span><span class='hs-keyword'>_</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-varid'>runIdentity</span> <span class='hs-layout'>(</span><span class='hs-varid'>k</span> <span class='hs-varid'>x</span><span class='hs-layout'>)</span><span class='hs-layout'>)</span><span class='hs-layout'>)</span>
+<a name="line-234"></a>    <span class='hs-conid'>Ran</span> <span class='hs-varid'>f</span> <span class='hs-varop'>&lt;*&gt;</span> <span class='hs-conid'>Ran</span> <span class='hs-varid'>g</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>Ran</span> <span class='hs-layout'>(</span><span class='hs-keyglyph'>\</span><span class='hs-varid'>k</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-conid'>Endo</span> <span class='hs-layout'>(</span><span class='hs-keyglyph'>\</span><span class='hs-varid'>z</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-varid'>appEndo</span> <span class='hs-layout'>(</span><span class='hs-varid'>f</span> <span class='hs-layout'>(</span><span class='hs-keyglyph'>\</span><span class='hs-varid'>f'</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-conid'>Identity</span> <span class='hs-layout'>(</span><span class='hs-varid'>appEndo</span> <span class='hs-layout'>(</span><span class='hs-varid'>g</span> <span class='hs-layout'>(</span><span class='hs-varid'>k</span> <span class='hs-varop'>.</span> <span class='hs-varid'>f'</span><span class='hs-layout'>)</span><span class='hs-layout'>)</span> <span class='hs-varid'>z</span><span class='hs-layout'>)</span><span class='hs-layout'>)</span><span class='hs-layout'>)</span> <span class='hs-varid'>z</span><span class='hs-layout'>)</span><span class='hs-layout'>)</span>
+<a name="line-235"></a>
+<a name="line-236"></a><span class='hs-keyword'>instance</span> <span class='hs-conid'>MonadPlus</span> <span class='hs-layout'>(</span><span class='hs-conid'>Ran</span> <span class='hs-conid'>Maybe</span><span class='hs-layout'>)</span> <span class='hs-keyword'>where</span>
+<a name="line-237"></a>    <span class='hs-varid'>mzero</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>Ran</span> <span class='hs-layout'>(</span><span class='hs-keyglyph'>\</span><span class='hs-keyword'>_</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-conid'>Endo</span> <span class='hs-varid'>id</span><span class='hs-layout'>)</span>
+<a name="line-238"></a>    <span class='hs-conid'>Ran</span> <span class='hs-varid'>m</span> <span class='hs-varop'>`mplus`</span> <span class='hs-conid'>Ran</span> <span class='hs-varid'>n</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>Ran</span> <span class='hs-layout'>(</span><span class='hs-keyglyph'>\</span><span class='hs-varid'>k</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-conid'>Endo</span> <span class='hs-layout'>(</span><span class='hs-keyglyph'>\</span><span class='hs-varid'>z</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-varid'>appEndo</span> <span class='hs-layout'>(</span><span class='hs-varid'>m</span> <span class='hs-varid'>k</span><span class='hs-layout'>)</span> <span class='hs-layout'>(</span><span class='hs-varid'>appEndo</span> <span class='hs-layout'>(</span><span class='hs-varid'>n</span> <span class='hs-varid'>k</span><span class='hs-layout'>)</span> <span class='hs-varid'>z</span><span class='hs-layout'>)</span><span class='hs-layout'>)</span><span class='hs-layout'>)</span>
+<a name="line-239"></a>
+<a name="line-240"></a><span class='hs-comment'>-- as per Maybe, this Monoid turns a semigroup into a monoid</span>
+<a name="line-241"></a><span class='hs-keyword'>instance</span> <span class='hs-conid'>Monoid</span> <span class='hs-varid'>a</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>Monoid</span> <span class='hs-layout'>(</span><span class='hs-conid'>Ran</span> <span class='hs-conid'>Maybe</span> <span class='hs-varid'>a</span><span class='hs-layout'>)</span> <span class='hs-keyword'>where</span>
+<a name="line-242"></a>    <span class='hs-varid'>mempty</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>mzero</span>
+<a name="line-243"></a>    <span class='hs-conid'>Ran</span> <span class='hs-varid'>a</span> <span class='hs-varop'>`mappend`</span> <span class='hs-conid'>Ran</span> <span class='hs-varid'>b</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>Ran</span> <span class='hs-layout'>(</span><span class='hs-keyglyph'>\</span><span class='hs-varid'>k</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-conid'>Endo</span> <span class='hs-layout'>(</span><span class='hs-keyglyph'>\</span><span class='hs-varid'>z</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-varid'>appEndo</span> <span class='hs-layout'>(</span><span class='hs-varid'>a</span> <span class='hs-layout'>(</span><span class='hs-keyglyph'>\</span><span class='hs-varid'>a'</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-conid'>Identity</span> <span class='hs-layout'>(</span><span class='hs-varid'>appEndo</span> <span class='hs-layout'>(</span><span class='hs-varid'>b</span> <span class='hs-layout'>(</span><span class='hs-varid'>k</span> <span class='hs-varop'>.</span> <span class='hs-varid'>mappend</span> <span class='hs-varid'>a'</span><span class='hs-layout'>)</span><span class='hs-layout'>)</span> <span class='hs-varid'>z</span><span class='hs-layout'>)</span><span class='hs-layout'>)</span><span class='hs-layout'>)</span> <span class='hs-varid'>z</span><span class='hs-layout'>)</span><span class='hs-layout'>)</span>
+<a name="line-244"></a>
+<a name="line-245"></a><span class='hs-keyword'>type</span> <span class='hs-layout'>(</span><span class='hs-conop'>:-&gt;</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>ReaderT</span>
+<a name="line-246"></a>
+<a name="line-247"></a><a name="ErrorH"></a><span class='hs-keyword'>data</span> <span class='hs-conid'>ErrorH</span> <span class='hs-varid'>e</span> <span class='hs-varid'>o</span>  <span class='hs-keyglyph'>=</span> <span class='hs-conid'>ErrorH</span> <span class='hs-layout'>{</span> <span class='hs-varid'>getErrorH</span> <span class='hs-keyglyph'>::</span> <span class='hs-layout'>(</span><span class='hs-varid'>e</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-varid'>o</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-varid'>o</span> <span class='hs-layout'>}</span> 
+<a name="line-248"></a><a name="ErrorTH"></a><span class='hs-keyword'>data</span> <span class='hs-conid'>ErrorTH</span> <span class='hs-varid'>e</span> <span class='hs-varid'>m</span> <span class='hs-varid'>o</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>ErrorTH</span> <span class='hs-layout'>{</span> <span class='hs-varid'>getErrorTH</span> <span class='hs-keyglyph'>::</span> <span class='hs-layout'>(</span><span class='hs-varid'>e</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-conid'>G</span> <span class='hs-varid'>m</span> <span class='hs-varid'>o</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-conid'>H</span> <span class='hs-varid'>m</span> <span class='hs-varid'>o</span> <span class='hs-layout'>}</span>
+<a name="line-249"></a>
+<a name="line-250"></a>
+<a name="line-251"></a><span class='hs-comment'>-- Yoneda (ErrorH e) ~ forall o. (a -&gt; o) -&gt; (e -&gt; o) -&gt; o ~ forall o. (a -&gt; Identity o) -&gt; (e -&gt; o) -&gt; o ~ forall o. (a -&gt; Identity o) -&gt; ErrorH e o</span>
+<a name="line-252"></a><span class='hs-keyword'>instance</span> <span class='hs-conid'>Error</span> <span class='hs-varid'>e</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>RanIso</span> <span class='hs-layout'>(</span><span class='hs-conid'>Either</span> <span class='hs-varid'>e</span><span class='hs-layout'>)</span> <span class='hs-keyword'>where</span>
+<a name="line-253"></a>    <span class='hs-keyword'>type</span> <span class='hs-conid'>G</span> <span class='hs-layout'>(</span><span class='hs-conid'>Either</span> <span class='hs-varid'>e</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>Identity</span>
+<a name="line-254"></a>    <span class='hs-keyword'>type</span> <span class='hs-conid'>H</span> <span class='hs-layout'>(</span><span class='hs-conid'>Either</span> <span class='hs-varid'>e</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>ErrorH</span> <span class='hs-varid'>e</span>
+<a name="line-255"></a>    <span class='hs-varid'>liftRan</span> <span class='hs-layout'>(</span><span class='hs-conid'>Right</span> <span class='hs-varid'>a</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>Ran</span> <span class='hs-layout'>(</span><span class='hs-keyglyph'>\</span><span class='hs-varid'>k</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-conid'>ErrorH</span> <span class='hs-layout'>(</span><span class='hs-keyglyph'>\</span><span class='hs-keyword'>_</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-varid'>runIdentity</span> <span class='hs-layout'>(</span><span class='hs-varid'>k</span> <span class='hs-varid'>a</span><span class='hs-layout'>)</span><span class='hs-layout'>)</span><span class='hs-layout'>)</span>
+<a name="line-256"></a>    <span class='hs-varid'>liftRan</span> <span class='hs-layout'>(</span><span class='hs-conid'>Left</span> <span class='hs-varid'>x</span><span class='hs-layout'>)</span>  <span class='hs-keyglyph'>=</span> <span class='hs-conid'>Ran</span> <span class='hs-layout'>(</span><span class='hs-keyglyph'>\</span><span class='hs-keyword'>_</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-conid'>ErrorH</span> <span class='hs-layout'>(</span><span class='hs-keyglyph'>\</span><span class='hs-varid'>e</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-varid'>e</span> <span class='hs-varid'>x</span><span class='hs-layout'>)</span><span class='hs-layout'>)</span>
+<a name="line-257"></a>    <span class='hs-varid'>lowerRan</span>          <span class='hs-keyglyph'>=</span> <span class='hs-varid'>eitherRan</span> <span class='hs-conid'>Left</span> <span class='hs-conid'>Right</span>
+<a name="line-258"></a>
+<a name="line-259"></a><a name="eitherRan"></a><span class='hs-definition'>eitherRan</span> <span class='hs-keyglyph'>::</span> <span class='hs-layout'>(</span><span class='hs-varid'>e</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-varid'>b</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-layout'>(</span><span class='hs-varid'>a</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-varid'>b</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-conid'>Ran</span> <span class='hs-layout'>(</span><span class='hs-conid'>Either</span> <span class='hs-varid'>e</span><span class='hs-layout'>)</span> <span class='hs-varid'>a</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-varid'>b</span>
+<a name="line-260"></a><span class='hs-definition'>eitherRan</span> <span class='hs-varid'>f</span> <span class='hs-varid'>g</span> <span class='hs-layout'>(</span><span class='hs-conid'>Ran</span> <span class='hs-varid'>m</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>getErrorH</span> <span class='hs-layout'>(</span><span class='hs-varid'>m</span> <span class='hs-layout'>(</span><span class='hs-conid'>Identity</span> <span class='hs-varop'>.</span> <span class='hs-varid'>g</span><span class='hs-layout'>)</span><span class='hs-layout'>)</span> <span class='hs-varid'>f</span>
+<a name="line-261"></a>
+<a name="line-262"></a><span class='hs-keyword'>instance</span> <span class='hs-conid'>Error</span> <span class='hs-varid'>e</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>Monad</span> <span class='hs-layout'>(</span><span class='hs-conid'>Ran</span> <span class='hs-layout'>(</span><span class='hs-conid'>Either</span> <span class='hs-varid'>e</span><span class='hs-layout'>)</span><span class='hs-layout'>)</span> <span class='hs-keyword'>where</span>
+<a name="line-263"></a>    <span class='hs-varid'>return</span> <span class='hs-varid'>x</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>Ran</span> <span class='hs-layout'>(</span><span class='hs-keyglyph'>\</span><span class='hs-varid'>k</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-conid'>ErrorH</span> <span class='hs-layout'>(</span><span class='hs-keyglyph'>\</span><span class='hs-keyword'>_</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-varid'>runIdentity</span> <span class='hs-layout'>(</span><span class='hs-varid'>k</span> <span class='hs-varid'>x</span><span class='hs-layout'>)</span><span class='hs-layout'>)</span><span class='hs-layout'>)</span>
+<a name="line-264"></a>    <span class='hs-varid'>fail</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>throwError</span> <span class='hs-varop'>.</span> <span class='hs-varid'>strMsg</span>
+<a name="line-265"></a>    <span class='hs-conid'>Ran</span> <span class='hs-varid'>g</span> <span class='hs-varop'>&gt;&gt;=</span> <span class='hs-varid'>f</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>Ran</span> <span class='hs-layout'>(</span><span class='hs-keyglyph'>\</span><span class='hs-varid'>k</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-conid'>ErrorH</span> <span class='hs-layout'>(</span><span class='hs-keyglyph'>\</span><span class='hs-varid'>z</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-varid'>getErrorH</span> <span class='hs-layout'>(</span><span class='hs-varid'>g</span> <span class='hs-layout'>(</span><span class='hs-keyglyph'>\</span><span class='hs-varid'>a</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-conid'>Identity</span> <span class='hs-layout'>(</span><span class='hs-varid'>getErrorH</span> <span class='hs-layout'>(</span><span class='hs-varid'>getRan</span> <span class='hs-layout'>(</span><span class='hs-varid'>f</span> <span class='hs-varid'>a</span><span class='hs-layout'>)</span> <span class='hs-varid'>k</span><span class='hs-layout'>)</span> <span class='hs-varid'>z</span><span class='hs-layout'>)</span><span class='hs-layout'>)</span><span class='hs-layout'>)</span> <span class='hs-varid'>z</span><span class='hs-layout'>)</span><span class='hs-layout'>)</span>
+<a name="line-266"></a>
+<a name="line-267"></a><span class='hs-keyword'>instance</span> <span class='hs-conid'>Error</span> <span class='hs-varid'>e</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>MonadError</span> <span class='hs-varid'>e</span> <span class='hs-layout'>(</span><span class='hs-conid'>Ran</span> <span class='hs-layout'>(</span><span class='hs-conid'>Either</span> <span class='hs-varid'>e</span><span class='hs-layout'>)</span><span class='hs-layout'>)</span> <span class='hs-keyword'>where</span>
+<a name="line-268"></a>    <span class='hs-varid'>throwError</span> <span class='hs-varid'>x</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>Ran</span> <span class='hs-layout'>(</span><span class='hs-keyglyph'>\</span><span class='hs-keyword'>_</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-conid'>ErrorH</span> <span class='hs-layout'>(</span><span class='hs-keyglyph'>\</span><span class='hs-varid'>e</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-varid'>e</span> <span class='hs-varid'>x</span><span class='hs-layout'>)</span><span class='hs-layout'>)</span>
+<a name="line-269"></a><span class='hs-comment'>--  catchError f h = Ran (\k -&gt; ErrorH (\e -&gt; getErrorH (getRan f k) e))</span>
+<a name="line-270"></a><span class='hs-comment'>--  catchError :: Ran (Either e) a -&gt; (e -&gt; Ran (Either e) a -&gt; Ran (Either e) a</span>
+<a name="line-271"></a>    <span class='hs-conid'>Ran</span> <span class='hs-varid'>m</span> <span class='hs-varop'>`catchError`</span> <span class='hs-varid'>h</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>Ran</span> <span class='hs-layout'>(</span><span class='hs-keyglyph'>\</span><span class='hs-varid'>k</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-conid'>ErrorH</span> <span class='hs-layout'>(</span><span class='hs-keyglyph'>\</span><span class='hs-varid'>z</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-varid'>getErrorH</span> <span class='hs-layout'>(</span><span class='hs-varid'>m</span> <span class='hs-varid'>k</span><span class='hs-layout'>)</span> <span class='hs-layout'>(</span><span class='hs-keyglyph'>\</span><span class='hs-varid'>e</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-varid'>getErrorH</span> <span class='hs-layout'>(</span><span class='hs-varid'>getRan</span> <span class='hs-layout'>(</span><span class='hs-varid'>h</span> <span class='hs-varid'>e</span><span class='hs-layout'>)</span> <span class='hs-varid'>k</span><span class='hs-layout'>)</span> <span class='hs-varid'>z</span><span class='hs-layout'>)</span><span class='hs-layout'>)</span><span class='hs-layout'>)</span>
+<a name="line-272"></a>
+<a name="line-273"></a><span class='hs-keyword'>instance</span> <span class='hs-conid'>Error</span> <span class='hs-varid'>e</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>MonadPlus</span> <span class='hs-layout'>(</span><span class='hs-conid'>Ran</span> <span class='hs-layout'>(</span><span class='hs-conid'>Either</span> <span class='hs-varid'>e</span><span class='hs-layout'>)</span><span class='hs-layout'>)</span> <span class='hs-keyword'>where</span>
+<a name="line-274"></a>    <span class='hs-varid'>mzero</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>throwError</span> <span class='hs-varid'>noMsg</span>
+<a name="line-275"></a>    <span class='hs-conid'>Ran</span> <span class='hs-varid'>m</span> <span class='hs-varop'>`mplus`</span> <span class='hs-conid'>Ran</span> <span class='hs-varid'>n</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>Ran</span> <span class='hs-layout'>(</span><span class='hs-keyglyph'>\</span><span class='hs-varid'>k</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-conid'>ErrorH</span> <span class='hs-layout'>(</span><span class='hs-keyglyph'>\</span><span class='hs-varid'>z</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-varid'>getErrorH</span> <span class='hs-layout'>(</span><span class='hs-varid'>m</span> <span class='hs-varid'>k</span><span class='hs-layout'>)</span> <span class='hs-layout'>(</span><span class='hs-keyglyph'>\</span><span class='hs-keyword'>_</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-varid'>getErrorH</span> <span class='hs-layout'>(</span><span class='hs-varid'>n</span> <span class='hs-varid'>k</span><span class='hs-layout'>)</span> <span class='hs-varid'>z</span><span class='hs-layout'>)</span><span class='hs-layout'>)</span><span class='hs-layout'>)</span>
+<a name="line-276"></a>        
+<a name="line-277"></a><span class='hs-comment'>{-
+<a name="line-278"></a>-- Yoneda (ErrorTH b m)
+<a name="line-279"></a>-- forall o. (a -&gt; G m o) -&gt; (b -&gt; G m o) -&gt; H m o
+<a name="line-280"></a>-- forall o. (a -&gt; G m o) -&gt; H m ((b -&gt; G m o) -&gt; o) ?
+<a name="line-281"></a>instance (RMonad m, Error b) =&gt; RMonad (ErrorT b m) where
+<a name="line-282"></a>    type G (ErrorT b m) = G m 
+<a name="line-283"></a>    type H (ErrorT b m) = ErrorTH b m
+<a name="line-284"></a>
+<a name="line-285"></a>
+<a name="line-286"></a>-- Codensity f
+<a name="line-287"></a>-- forall o. (a -&gt; f o) -&gt; f o 
+<a name="line-288"></a>instance RMonad (Codensity f) where
+<a name="line-289"></a>    type G (Codensity f) = f
+<a name="line-290"></a>    type H (Codensity f) = f
+<a name="line-291"></a>    liftRan (Codensity f) = Ran f
+<a name="line-292"></a>    lowerRan (Ran f) = Codensity f
+<a name="line-293"></a>
+<a name="line-294"></a>-- Yoneda (Reader r)
+<a name="line-295"></a>-- forall o. (a -&gt; o) -&gt; r -&gt; o
+<a name="line-296"></a>instance RMonad (Reader e) where
+<a name="line-297"></a>    type G (Reader e) = Identity
+<a name="line-298"></a>    type H (Reader e) = Reader e
+<a name="line-299"></a>    liftRan m = Ran (\f -&gt; liftM (runIdentity . f) m)
+<a name="line-300"></a>    lowerRan (Ran f) = f Identity
+<a name="line-301"></a>
+<a name="line-302"></a>-- embedded as CPS'd State to avoid superfluous 'mappend mempty' calls
+<a name="line-303"></a>-- specialized Codensity (Reader w)
+<a name="line-304"></a>-- forall o. (a -&gt; w -&gt; o) -&gt; w -&gt; o
+<a name="line-305"></a>instance Monoid w =&gt; RMonad (Writer w) where
+<a name="line-306"></a>    type G (Writer w) = (-&gt;) w
+<a name="line-307"></a>    type H (Writer w) = (-&gt;) w
+<a name="line-308"></a>    liftRan (Writer (a,w'))  = Ran (\f w -&gt; f a (w `mappend` w'))
+<a name="line-309"></a>    lowerRan (Ran f) = Writer (f (,) mempty)
+<a name="line-310"></a>    -- forall o. (a -&gt; w -&gt; o) -&gt; o
+<a name="line-311"></a>    -- type H (Writer w) = Identity
+<a name="line-312"></a>
+<a name="line-313"></a>-- Codensity (Reader s)
+<a name="line-314"></a>-- forall o. (a -&gt; s -&gt; o) -&gt; s -&gt; o
+<a name="line-315"></a>instance RMonad (State s) where
+<a name="line-316"></a>    type G (State s) = (-&gt;) s
+<a name="line-317"></a>    type H (State s) = (-&gt;) s
+<a name="line-318"></a>    liftRan (State g)  = Ran (\f -&gt; uncurry f . g)
+<a name="line-319"></a>    lowerRan (Ran f)  = State (f (,))
+<a name="line-320"></a>
+<a name="line-321"></a>-- Codensity (Const r)
+<a name="line-322"></a>-- (a -&gt; r) -&gt; r
+<a name="line-323"></a>instance RMonad (Cont r) where
+<a name="line-324"></a>    type G (Cont r) = Const r
+<a name="line-325"></a>    type H (Cont r) = Const r
+<a name="line-326"></a>
+<a name="line-327"></a>-- forall o. (a -&gt; G m o) -&gt; r -&gt; H m o 
+<a name="line-328"></a>instance RMonad m =&gt; RMonad (ReaderT e m) where
+<a name="line-329"></a>    type G (ReaderT e m) = G m
+<a name="line-330"></a>    type H (ReaderT e m) = e :-&gt; H m
+<a name="line-331"></a>
+<a name="line-332"></a>-- forall o. (a -&gt; w -&gt; G m o) -&gt; H m o
+<a name="line-333"></a>-- forall o. (a -&gt; G m (w -&gt; o)) -&gt; H m (w -&gt; o) ?
+<a name="line-334"></a>instance (Monoid w, RMonad m) =&gt; RMonad (WriterT w m) where
+<a name="line-335"></a>    type G (WriterT w m) = w :-&gt; G m
+<a name="line-336"></a>    type H (WriterT w m) = H m
+<a name="line-337"></a>
+<a name="line-338"></a>-- forall o. (a -&gt; s -&gt; G m o) -&gt; s -&gt; H m o 
+<a name="line-339"></a>-- forall o. (a -&gt; G m (s -&gt; o)) -&gt; H m (s -&gt; o) ?
+<a name="line-340"></a>instance RMonad m =&gt; RMonad (StateT s m) where
+<a name="line-341"></a>    type G (StateT s m) = s :-&gt; G m
+<a name="line-342"></a>    type H (StateT s m) = s :-&gt; H m
+<a name="line-343"></a>
+<a name="line-344"></a>-- (a -&gt; G m r) -&gt; H m r
+<a name="line-345"></a>data ConstT r f a = ConstT { getConstT :: f r } 
+<a name="line-346"></a>instance RMonad m =&gt; RMonad (ContT r m) where
+<a name="line-347"></a>    type G (ContT r m) = ConstT r (G m)
+<a name="line-348"></a>    type H (ContT r m) = ConstT r (H m)
+<a name="line-349"></a>-}</span>
+<a name="line-350"></a>
+<a name="line-351"></a>
+<a name="line-352"></a>
+<a name="line-353"></a><span class='hs-comment'>-- Yoneda lemma as a right Kan extension along the identity functor</span>
+<a name="line-354"></a><span class='hs-keyword'>instance</span> <span class='hs-conid'>RanIso</span> <span class='hs-layout'>(</span><span class='hs-conid'>Yoneda</span> <span class='hs-varid'>f</span><span class='hs-layout'>)</span> <span class='hs-keyword'>where</span>
+<a name="line-355"></a>    <span class='hs-keyword'>type</span> <span class='hs-conid'>G</span> <span class='hs-layout'>(</span><span class='hs-conid'>Yoneda</span> <span class='hs-varid'>f</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>Identity</span>
+<a name="line-356"></a>    <span class='hs-keyword'>type</span> <span class='hs-conid'>H</span> <span class='hs-layout'>(</span><span class='hs-conid'>Yoneda</span> <span class='hs-varid'>f</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>f</span>
+<a name="line-357"></a>    <span class='hs-varid'>liftRan</span> <span class='hs-layout'>(</span><span class='hs-conid'>Yoneda</span> <span class='hs-varid'>f</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>Ran</span> <span class='hs-layout'>(</span><span class='hs-keyglyph'>\</span><span class='hs-varid'>b</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-varid'>f</span> <span class='hs-layout'>(</span><span class='hs-varid'>runIdentity</span> <span class='hs-varop'>.</span> <span class='hs-varid'>b</span><span class='hs-layout'>)</span><span class='hs-layout'>)</span>
+<a name="line-358"></a>    <span class='hs-varid'>lowerRan</span> <span class='hs-layout'>(</span><span class='hs-conid'>Ran</span> <span class='hs-varid'>f</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>Yoneda</span> <span class='hs-layout'>(</span><span class='hs-keyglyph'>\</span><span class='hs-varid'>b</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-varid'>f</span> <span class='hs-layout'>(</span><span class='hs-conid'>Identity</span> <span class='hs-varop'>.</span> <span class='hs-varid'>b</span><span class='hs-layout'>)</span><span class='hs-layout'>)</span>
+<a name="line-359"></a>
+<a name="line-360"></a><a name="ranYoneda"></a><span class='hs-definition'>ranYoneda</span> <span class='hs-keyglyph'>::</span> <span class='hs-conid'>Ran</span> <span class='hs-layout'>(</span><span class='hs-conid'>Yoneda</span> <span class='hs-varid'>f</span><span class='hs-layout'>)</span> <span class='hs-varid'>a</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-conid'>Yoneda</span> <span class='hs-varid'>f</span> <span class='hs-varid'>a</span>
+<a name="line-361"></a><span class='hs-definition'>ranYoneda</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>lowerRan</span>
+<a name="line-362"></a>
+<a name="line-363"></a><a name="yonedaRan"></a><span class='hs-definition'>yonedaRan</span> <span class='hs-keyglyph'>::</span> <span class='hs-conid'>Yoneda</span> <span class='hs-varid'>f</span> <span class='hs-varid'>a</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-conid'>Ran</span> <span class='hs-layout'>(</span><span class='hs-conid'>Yoneda</span> <span class='hs-varid'>f</span><span class='hs-layout'>)</span> <span class='hs-varid'>a</span>
+<a name="line-364"></a><span class='hs-definition'>yonedaRan</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>liftRan</span>
+<a name="line-365"></a>
+<a name="line-366"></a><span class='hs-keyword'>instance</span> <span class='hs-conid'>Pointed</span> <span class='hs-varid'>f</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>Pointed</span> <span class='hs-layout'>(</span><span class='hs-conid'>Ran</span> <span class='hs-layout'>(</span><span class='hs-conid'>Yoneda</span> <span class='hs-varid'>f</span><span class='hs-layout'>)</span><span class='hs-layout'>)</span> <span class='hs-keyword'>where</span>
+<a name="line-367"></a>    <span class='hs-varid'>point</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>liftRan</span> <span class='hs-varop'>.</span> <span class='hs-varid'>point</span>
+<a name="line-368"></a>
+<a name="line-369"></a><span class='hs-keyword'>instance</span> <span class='hs-conid'>Applicative</span> <span class='hs-varid'>f</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>Applicative</span> <span class='hs-layout'>(</span><span class='hs-conid'>Ran</span> <span class='hs-layout'>(</span><span class='hs-conid'>Yoneda</span> <span class='hs-varid'>f</span><span class='hs-layout'>)</span><span class='hs-layout'>)</span> <span class='hs-keyword'>where</span>
+<a name="line-370"></a>    <span class='hs-varid'>pure</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>liftRan</span> <span class='hs-varop'>.</span> <span class='hs-varid'>pure</span>
+<a name="line-371"></a>    <span class='hs-varid'>m</span> <span class='hs-varop'>&lt;*&gt;</span> <span class='hs-varid'>n</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>liftRan</span> <span class='hs-layout'>(</span><span class='hs-varid'>lowerRan</span> <span class='hs-varid'>m</span> <span class='hs-varop'>&lt;*&gt;</span> <span class='hs-varid'>lowerRan</span> <span class='hs-varid'>n</span><span class='hs-layout'>)</span>
+<a name="line-372"></a>
+<a name="line-373"></a><span class='hs-keyword'>instance</span> <span class='hs-conid'>Alternative</span> <span class='hs-varid'>f</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>Alternative</span> <span class='hs-layout'>(</span><span class='hs-conid'>Ran</span> <span class='hs-layout'>(</span><span class='hs-conid'>Yoneda</span> <span class='hs-varid'>f</span><span class='hs-layout'>)</span><span class='hs-layout'>)</span> <span class='hs-keyword'>where</span>
+<a name="line-374"></a>    <span class='hs-varid'>empty</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>liftRan</span> <span class='hs-varid'>empty</span>
+<a name="line-375"></a>    <span class='hs-varid'>m</span> <span class='hs-varop'>&lt;|&gt;</span> <span class='hs-varid'>n</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>liftRan</span> <span class='hs-layout'>(</span><span class='hs-varid'>lowerRan</span> <span class='hs-varid'>m</span> <span class='hs-varop'>&lt;|&gt;</span> <span class='hs-varid'>lowerRan</span> <span class='hs-varid'>n</span><span class='hs-layout'>)</span> 
+<a name="line-376"></a>
+<a name="line-377"></a><span class='hs-keyword'>instance</span> <span class='hs-conid'>Monad</span> <span class='hs-varid'>f</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>Monad</span> <span class='hs-layout'>(</span><span class='hs-conid'>Ran</span> <span class='hs-layout'>(</span><span class='hs-conid'>Yoneda</span> <span class='hs-varid'>f</span><span class='hs-layout'>)</span><span class='hs-layout'>)</span> <span class='hs-keyword'>where</span>
+<a name="line-378"></a>    <span class='hs-varid'>return</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>liftRan</span> <span class='hs-varop'>.</span> <span class='hs-varid'>return</span>
+<a name="line-379"></a>    <span class='hs-varid'>m</span> <span class='hs-varop'>&gt;&gt;=</span> <span class='hs-varid'>k</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>liftRan</span> <span class='hs-layout'>(</span><span class='hs-varid'>lowerRan</span> <span class='hs-varid'>m</span> <span class='hs-varop'>&gt;&gt;=</span> <span class='hs-varid'>lowerRan</span> <span class='hs-varop'>.</span> <span class='hs-varid'>k</span><span class='hs-layout'>)</span>
+<a name="line-380"></a>
+<a name="line-381"></a><span class='hs-keyword'>instance</span> <span class='hs-conid'>MonadPlus</span> <span class='hs-varid'>f</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>MonadPlus</span> <span class='hs-layout'>(</span><span class='hs-conid'>Ran</span> <span class='hs-layout'>(</span><span class='hs-conid'>Yoneda</span> <span class='hs-varid'>f</span><span class='hs-layout'>)</span><span class='hs-layout'>)</span> <span class='hs-keyword'>where</span>
+<a name="line-382"></a>    <span class='hs-varid'>mzero</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>liftRan</span> <span class='hs-varid'>mzero</span>
+<a name="line-383"></a>    <span class='hs-varid'>m</span> <span class='hs-varop'>`mplus`</span> <span class='hs-varid'>n</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>liftRan</span> <span class='hs-layout'>(</span><span class='hs-varid'>lowerRan</span> <span class='hs-varid'>m</span> <span class='hs-varop'>`mplus`</span> <span class='hs-varid'>lowerRan</span> <span class='hs-varid'>n</span><span class='hs-layout'>)</span>
+<a name="line-384"></a>
+<a name="line-385"></a><span class='hs-keyword'>instance</span> <span class='hs-conid'>MonadReader</span> <span class='hs-varid'>r</span> <span class='hs-varid'>f</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>MonadReader</span> <span class='hs-varid'>r</span> <span class='hs-layout'>(</span><span class='hs-conid'>Ran</span> <span class='hs-layout'>(</span><span class='hs-conid'>Yoneda</span> <span class='hs-varid'>f</span><span class='hs-layout'>)</span><span class='hs-layout'>)</span> <span class='hs-keyword'>where</span>
+<a name="line-386"></a>    <span class='hs-varid'>ask</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>liftRan</span> <span class='hs-varid'>ask</span>
+<a name="line-387"></a>    <span class='hs-varid'>local</span> <span class='hs-varid'>f</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>liftRan</span> <span class='hs-varop'>.</span> <span class='hs-varid'>local</span> <span class='hs-varid'>f</span> <span class='hs-varop'>.</span> <span class='hs-varid'>lowerRan</span>
+<a name="line-388"></a>
+<a name="line-389"></a><span class='hs-keyword'>instance</span> <span class='hs-conid'>MonadWriter</span> <span class='hs-varid'>w</span> <span class='hs-varid'>f</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>MonadWriter</span> <span class='hs-varid'>w</span> <span class='hs-layout'>(</span><span class='hs-conid'>Ran</span> <span class='hs-layout'>(</span><span class='hs-conid'>Yoneda</span> <span class='hs-varid'>f</span><span class='hs-layout'>)</span><span class='hs-layout'>)</span> <span class='hs-keyword'>where</span>
+<a name="line-390"></a>    <span class='hs-varid'>tell</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>liftRan</span> <span class='hs-varop'>.</span> <span class='hs-varid'>tell</span>
+<a name="line-391"></a>    <span class='hs-varid'>listen</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>liftRan</span> <span class='hs-varop'>.</span> <span class='hs-varid'>listen</span> <span class='hs-varop'>.</span> <span class='hs-varid'>lowerRan</span>
+<a name="line-392"></a>    <span class='hs-varid'>pass</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>liftRan</span> <span class='hs-varop'>.</span> <span class='hs-varid'>pass</span> <span class='hs-varop'>.</span> <span class='hs-varid'>lowerRan</span>
+<a name="line-393"></a>
+<a name="line-394"></a><span class='hs-keyword'>instance</span> <span class='hs-conid'>MonadState</span> <span class='hs-varid'>s</span> <span class='hs-varid'>f</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>MonadState</span> <span class='hs-varid'>s</span> <span class='hs-layout'>(</span><span class='hs-conid'>Ran</span> <span class='hs-layout'>(</span><span class='hs-conid'>Yoneda</span> <span class='hs-varid'>f</span><span class='hs-layout'>)</span><span class='hs-layout'>)</span> <span class='hs-keyword'>where</span>
+<a name="line-395"></a>    <span class='hs-varid'>get</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>liftRan</span> <span class='hs-varid'>get</span>
+<a name="line-396"></a>    <span class='hs-varid'>put</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>liftRan</span> <span class='hs-varop'>.</span> <span class='hs-varid'>put</span>
+<a name="line-397"></a>
+<a name="line-398"></a><span class='hs-keyword'>instance</span> <span class='hs-conid'>MonadIO</span> <span class='hs-varid'>f</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>MonadIO</span> <span class='hs-layout'>(</span><span class='hs-conid'>Ran</span> <span class='hs-layout'>(</span><span class='hs-conid'>Yoneda</span> <span class='hs-varid'>f</span><span class='hs-layout'>)</span><span class='hs-layout'>)</span> <span class='hs-keyword'>where</span>
+<a name="line-399"></a>    <span class='hs-varid'>liftIO</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>liftRan</span> <span class='hs-varop'>.</span> <span class='hs-varid'>liftIO</span>
+<a name="line-400"></a>
+<a name="line-401"></a><span class='hs-keyword'>instance</span> <span class='hs-conid'>MonadRWS</span> <span class='hs-varid'>r</span> <span class='hs-varid'>w</span> <span class='hs-varid'>s</span> <span class='hs-varid'>f</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>MonadRWS</span> <span class='hs-varid'>r</span> <span class='hs-varid'>w</span> <span class='hs-varid'>s</span> <span class='hs-layout'>(</span><span class='hs-conid'>Ran</span> <span class='hs-layout'>(</span><span class='hs-conid'>Yoneda</span> <span class='hs-varid'>f</span><span class='hs-layout'>)</span><span class='hs-layout'>)</span>
+<a name="line-402"></a>
+<a name="line-403"></a><span class='hs-keyword'>instance</span> <span class='hs-conid'>MonadError</span> <span class='hs-varid'>e</span> <span class='hs-varid'>f</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>MonadError</span> <span class='hs-varid'>e</span> <span class='hs-layout'>(</span><span class='hs-conid'>Ran</span> <span class='hs-layout'>(</span><span class='hs-conid'>Yoneda</span> <span class='hs-varid'>f</span><span class='hs-layout'>)</span><span class='hs-layout'>)</span> <span class='hs-keyword'>where</span>
+<a name="line-404"></a>    <span class='hs-varid'>throwError</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>liftRan</span> <span class='hs-varop'>.</span> <span class='hs-varid'>throwError</span>
+<a name="line-405"></a>    <span class='hs-conid'>Ran</span> <span class='hs-varid'>f</span> <span class='hs-varop'>`catchError`</span> <span class='hs-varid'>h</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>Ran</span> <span class='hs-layout'>(</span><span class='hs-keyglyph'>\</span><span class='hs-varid'>k</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-varid'>f</span> <span class='hs-varid'>k</span> <span class='hs-varop'>`catchError`</span> <span class='hs-keyglyph'>\</span><span class='hs-varid'>e</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-varid'>getRan</span> <span class='hs-layout'>(</span><span class='hs-varid'>h</span> <span class='hs-varid'>e</span><span class='hs-layout'>)</span> <span class='hs-varid'>k</span><span class='hs-layout'>)</span>
+<a name="line-406"></a>
+<a name="line-407"></a><span class='hs-keyword'>instance</span> <span class='hs-conid'>MonadFix</span> <span class='hs-varid'>m</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>MonadFix</span> <span class='hs-layout'>(</span><span class='hs-conid'>Ran</span> <span class='hs-layout'>(</span><span class='hs-conid'>Yoneda</span> <span class='hs-varid'>m</span><span class='hs-layout'>)</span><span class='hs-layout'>)</span> <span class='hs-keyword'>where</span>
+<a name="line-408"></a>    <span class='hs-varid'>mfix</span> <span class='hs-varid'>f</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>Ran</span> <span class='hs-layout'>(</span><span class='hs-keyglyph'>\</span><span class='hs-varid'>k</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-varid'>liftM</span> <span class='hs-layout'>(</span><span class='hs-varid'>runIdentity</span> <span class='hs-varop'>.</span> <span class='hs-varid'>k</span><span class='hs-layout'>)</span> <span class='hs-varop'>$</span> <span class='hs-varid'>mfix</span> <span class='hs-layout'>(</span><span class='hs-keyglyph'>\</span><span class='hs-varid'>a</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-varid'>getRan</span> <span class='hs-layout'>(</span><span class='hs-varid'>f</span> <span class='hs-varid'>a</span><span class='hs-layout'>)</span> <span class='hs-conid'>Identity</span><span class='hs-layout'>)</span><span class='hs-layout'>)</span>
addfile ./doc/html/monad-ran/src/Control-Monad-Yoneda.html
hunk ./doc/html/monad-ran/src/Control-Monad-Yoneda.html 1
+<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
+<html>
+<head>
+<!-- Generated by HsColour, http://www.cs.york.ac.uk/fp/darcs/hscolour/ -->
+<title>Control/Monad/Yoneda.hs</title>
+<link type='text/css' rel='stylesheet' href='hscolour.css' />
+</head>
+<body>
+<pre><a name="line-1"></a><span class='hs-comment'>{-# LANGUAGE Rank2Types, MultiParamTypeClasses, FlexibleInstances, FlexibleContexts, UndecidableInstances #-}</span>
+<a name="line-2"></a><span class='hs-comment'>-- Finding the right Kan extension</span>
+<a name="line-3"></a>
+<a name="line-4"></a><span class='hs-keyword'>module</span> <span class='hs-conid'>Control</span><span class='hs-varop'>.</span><span class='hs-conid'>Monad</span><span class='hs-varop'>.</span><span class='hs-conid'>Yoneda</span>
+<a name="line-5"></a>    <span class='hs-layout'>(</span> <span class='hs-comment'>-- * The Yoneda Lemma</span>
+<a name="line-6"></a>      <span class='hs-conid'>Yoneda</span><span class='hs-layout'>(</span><span class='hs-keyglyph'>..</span><span class='hs-layout'>)</span>
+<a name="line-7"></a>    <span class='hs-layout'>,</span> <span class='hs-varid'>runYoneda</span>
+<a name="line-8"></a>    <span class='hs-layout'>)</span> <span class='hs-keyword'>where</span>
+<a name="line-9"></a>
+<a name="line-10"></a><span class='hs-keyword'>import</span> <span class='hs-conid'>Data</span><span class='hs-varop'>.</span><span class='hs-conid'>Monoid</span>
+<a name="line-11"></a><span class='hs-keyword'>import</span> <span class='hs-conid'>Data</span><span class='hs-varop'>.</span><span class='hs-conid'>Maybe</span> <span class='hs-layout'>(</span><span class='hs-varid'>maybe</span><span class='hs-layout'>)</span>
+<a name="line-12"></a><span class='hs-keyword'>import</span> <span class='hs-conid'>Control</span><span class='hs-varop'>.</span><span class='hs-conid'>Applicative</span>
+<a name="line-13"></a><span class='hs-keyword'>import</span> <span class='hs-conid'>Control</span><span class='hs-varop'>.</span><span class='hs-conid'>Functor</span><span class='hs-varop'>.</span><span class='hs-conid'>Pointed</span>
+<a name="line-14"></a><span class='hs-keyword'>import</span> <span class='hs-conid'>Control</span><span class='hs-varop'>.</span><span class='hs-conid'>Monad</span>
+<a name="line-15"></a><span class='hs-keyword'>import</span> <span class='hs-conid'>Control</span><span class='hs-varop'>.</span><span class='hs-conid'>Monad</span><span class='hs-varop'>.</span><span class='hs-conid'>Trans</span>
+<a name="line-16"></a><span class='hs-keyword'>import</span> <span class='hs-conid'>Control</span><span class='hs-varop'>.</span><span class='hs-conid'>Monad</span><span class='hs-varop'>.</span><span class='hs-conid'>Fix</span>
+<a name="line-17"></a><span class='hs-keyword'>import</span> <span class='hs-conid'>Control</span><span class='hs-varop'>.</span><span class='hs-conid'>Monad</span><span class='hs-varop'>.</span><span class='hs-conid'>Cont</span><span class='hs-varop'>.</span><span class='hs-conid'>Class</span>
+<a name="line-18"></a><span class='hs-keyword'>import</span> <span class='hs-conid'>Control</span><span class='hs-varop'>.</span><span class='hs-conid'>Monad</span><span class='hs-varop'>.</span><span class='hs-conid'>State</span><span class='hs-varop'>.</span><span class='hs-conid'>Class</span>
+<a name="line-19"></a><span class='hs-keyword'>import</span> <span class='hs-conid'>Control</span><span class='hs-varop'>.</span><span class='hs-conid'>Monad</span><span class='hs-varop'>.</span><span class='hs-conid'>Error</span><span class='hs-varop'>.</span><span class='hs-conid'>Class</span>
+<a name="line-20"></a><span class='hs-keyword'>import</span> <span class='hs-conid'>Control</span><span class='hs-varop'>.</span><span class='hs-conid'>Monad</span><span class='hs-varop'>.</span><span class='hs-conid'>Reader</span><span class='hs-varop'>.</span><span class='hs-conid'>Class</span>
+<a name="line-21"></a><span class='hs-keyword'>import</span> <span class='hs-conid'>Control</span><span class='hs-varop'>.</span><span class='hs-conid'>Monad</span><span class='hs-varop'>.</span><span class='hs-conid'>Writer</span><span class='hs-varop'>.</span><span class='hs-conid'>Class</span>
+<a name="line-22"></a><span class='hs-keyword'>import</span> <span class='hs-conid'>Control</span><span class='hs-varop'>.</span><span class='hs-conid'>Monad</span><span class='hs-varop'>.</span><span class='hs-conid'>RWS</span><span class='hs-varop'>.</span><span class='hs-conid'>Class</span>
+<a name="line-23"></a>
+<a name="line-24"></a><a name="Yoneda"></a><span class='hs-keyword'>data</span> <span class='hs-conid'>Yoneda</span> <span class='hs-varid'>f</span> <span class='hs-varid'>a</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>Yoneda</span> <span class='hs-layout'>{</span> <span class='hs-varid'>getYoneda</span> <span class='hs-keyglyph'>::</span> <span class='hs-keyword'>forall</span> <span class='hs-varid'>b</span><span class='hs-varop'>.</span> <span class='hs-layout'>(</span><span class='hs-varid'>a</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-varid'>b</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-varid'>f</span> <span class='hs-varid'>b</span> <span class='hs-layout'>}</span> 
+<a name="line-25"></a>
+<a name="line-26"></a><span class='hs-keyword'>instance</span> <span class='hs-conid'>Functor</span> <span class='hs-layout'>(</span><span class='hs-conid'>Yoneda</span> <span class='hs-varid'>f</span><span class='hs-layout'>)</span> <span class='hs-keyword'>where</span>
+<a name="line-27"></a>    <span class='hs-varid'>fmap</span> <span class='hs-varid'>f</span> <span class='hs-varid'>m</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>Yoneda</span> <span class='hs-layout'>(</span><span class='hs-keyglyph'>\</span><span class='hs-varid'>k</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-varid'>getYoneda</span> <span class='hs-varid'>m</span> <span class='hs-layout'>(</span><span class='hs-varid'>k</span> <span class='hs-varop'>.</span> <span class='hs-varid'>f</span><span class='hs-layout'>)</span><span class='hs-layout'>)</span>
+<a name="line-28"></a>
+<a name="line-29"></a><span class='hs-keyword'>instance</span> <span class='hs-conid'>Pointed</span> <span class='hs-varid'>f</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>Pointed</span> <span class='hs-layout'>(</span><span class='hs-conid'>Yoneda</span> <span class='hs-varid'>f</span><span class='hs-layout'>)</span> <span class='hs-keyword'>where</span>
+<a name="line-30"></a>    <span class='hs-varid'>point</span> <span class='hs-varid'>a</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>Yoneda</span> <span class='hs-layout'>(</span><span class='hs-keyglyph'>\</span><span class='hs-varid'>f</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-varid'>point</span> <span class='hs-layout'>(</span><span class='hs-varid'>f</span> <span class='hs-varid'>a</span><span class='hs-layout'>)</span><span class='hs-layout'>)</span>
+<a name="line-31"></a>
+<a name="line-32"></a><span class='hs-keyword'>instance</span> <span class='hs-conid'>Applicative</span> <span class='hs-varid'>f</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>Applicative</span> <span class='hs-layout'>(</span><span class='hs-conid'>Yoneda</span> <span class='hs-varid'>f</span><span class='hs-layout'>)</span> <span class='hs-keyword'>where</span>
+<a name="line-33"></a>    <span class='hs-varid'>pure</span> <span class='hs-varid'>a</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>Yoneda</span> <span class='hs-layout'>(</span><span class='hs-keyglyph'>\</span><span class='hs-varid'>f</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-varid'>pure</span> <span class='hs-layout'>(</span><span class='hs-varid'>f</span> <span class='hs-varid'>a</span><span class='hs-layout'>)</span><span class='hs-layout'>)</span>
+<a name="line-34"></a>    <span class='hs-varid'>m</span> <span class='hs-varop'>&lt;*&gt;</span> <span class='hs-varid'>n</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>Yoneda</span> <span class='hs-layout'>(</span><span class='hs-keyglyph'>\</span><span class='hs-varid'>f</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-varid'>getYoneda</span> <span class='hs-varid'>m</span> <span class='hs-layout'>(</span><span class='hs-varid'>f</span> <span class='hs-varop'>.</span><span class='hs-layout'>)</span> <span class='hs-varop'>&lt;*&gt;</span> <span class='hs-varid'>getYoneda</span> <span class='hs-varid'>n</span> <span class='hs-varid'>id</span><span class='hs-layout'>)</span>
+<a name="line-35"></a>
+<a name="line-36"></a><span class='hs-keyword'>instance</span> <span class='hs-conid'>Alternative</span> <span class='hs-varid'>f</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>Alternative</span> <span class='hs-layout'>(</span><span class='hs-conid'>Yoneda</span> <span class='hs-varid'>f</span><span class='hs-layout'>)</span> <span class='hs-keyword'>where</span>
+<a name="line-37"></a>    <span class='hs-varid'>empty</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>Yoneda</span> <span class='hs-layout'>(</span><span class='hs-varid'>const</span> <span class='hs-varid'>empty</span><span class='hs-layout'>)</span>
+<a name="line-38"></a>    <span class='hs-conid'>Yoneda</span> <span class='hs-varid'>m</span> <span class='hs-varop'>&lt;|&gt;</span> <span class='hs-conid'>Yoneda</span> <span class='hs-varid'>n</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>Yoneda</span> <span class='hs-layout'>(</span><span class='hs-keyglyph'>\</span><span class='hs-varid'>f</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-varid'>m</span> <span class='hs-varid'>f</span> <span class='hs-varop'>&lt;|&gt;</span> <span class='hs-varid'>n</span> <span class='hs-varid'>f</span><span class='hs-layout'>)</span>
+<a name="line-39"></a>
+<a name="line-40"></a><span class='hs-keyword'>instance</span> <span class='hs-conid'>Monad</span> <span class='hs-varid'>f</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>Monad</span> <span class='hs-layout'>(</span><span class='hs-conid'>Yoneda</span> <span class='hs-varid'>f</span><span class='hs-layout'>)</span> <span class='hs-keyword'>where</span>
+<a name="line-41"></a>    <span class='hs-varid'>return</span> <span class='hs-varid'>a</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>Yoneda</span> <span class='hs-layout'>(</span><span class='hs-keyglyph'>\</span><span class='hs-varid'>f</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-varid'>return</span> <span class='hs-layout'>(</span><span class='hs-varid'>f</span> <span class='hs-varid'>a</span><span class='hs-layout'>)</span><span class='hs-layout'>)</span>
+<a name="line-42"></a>    <span class='hs-varid'>m</span> <span class='hs-varop'>&gt;&gt;=</span> <span class='hs-varid'>k</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>Yoneda</span> <span class='hs-layout'>(</span><span class='hs-keyglyph'>\</span><span class='hs-varid'>f</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-varid'>getYoneda</span> <span class='hs-varid'>m</span> <span class='hs-varid'>id</span> <span class='hs-varop'>&gt;&gt;=</span> <span class='hs-keyglyph'>\</span><span class='hs-varid'>a</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-varid'>getYoneda</span> <span class='hs-layout'>(</span><span class='hs-varid'>k</span> <span class='hs-varid'>a</span><span class='hs-layout'>)</span> <span class='hs-varid'>f</span><span class='hs-layout'>)</span>
+<a name="line-43"></a>
+<a name="line-44"></a><span class='hs-keyword'>instance</span> <span class='hs-conid'>MonadPlus</span> <span class='hs-varid'>f</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>MonadPlus</span> <span class='hs-layout'>(</span><span class='hs-conid'>Yoneda</span> <span class='hs-varid'>f</span><span class='hs-layout'>)</span> <span class='hs-keyword'>where</span>
+<a name="line-45"></a>    <span class='hs-varid'>mzero</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>Yoneda</span> <span class='hs-layout'>(</span><span class='hs-varid'>const</span> <span class='hs-varid'>mzero</span><span class='hs-layout'>)</span>
+<a name="line-46"></a>    <span class='hs-conid'>Yoneda</span> <span class='hs-varid'>m</span> <span class='hs-varop'>`mplus`</span> <span class='hs-conid'>Yoneda</span> <span class='hs-varid'>n</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>Yoneda</span> <span class='hs-layout'>(</span><span class='hs-keyglyph'>\</span><span class='hs-varid'>f</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-varid'>m</span> <span class='hs-varid'>f</span> <span class='hs-varop'>`mplus`</span> <span class='hs-varid'>n</span> <span class='hs-varid'>f</span><span class='hs-layout'>)</span>
+<a name="line-47"></a>
+<a name="line-48"></a><span class='hs-keyword'>instance</span> <span class='hs-conid'>MonadTrans</span> <span class='hs-conid'>Yoneda</span> <span class='hs-keyword'>where</span>
+<a name="line-49"></a>    <span class='hs-varid'>lift</span> <span class='hs-varid'>m</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>Yoneda</span> <span class='hs-layout'>(</span><span class='hs-keyglyph'>\</span><span class='hs-varid'>f</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-varid'>liftM</span> <span class='hs-varid'>f</span> <span class='hs-varid'>m</span><span class='hs-layout'>)</span>
+<a name="line-50"></a>
+<a name="line-51"></a><span class='hs-keyword'>instance</span> <span class='hs-conid'>MonadReader</span> <span class='hs-varid'>r</span> <span class='hs-varid'>f</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>MonadReader</span> <span class='hs-varid'>r</span> <span class='hs-layout'>(</span><span class='hs-conid'>Yoneda</span> <span class='hs-varid'>f</span><span class='hs-layout'>)</span> <span class='hs-keyword'>where</span>
+<a name="line-52"></a>    <span class='hs-varid'>ask</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>lift</span> <span class='hs-varid'>ask</span>
+<a name="line-53"></a>    <span class='hs-varid'>local</span> <span class='hs-varid'>f</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>lift</span> <span class='hs-varop'>.</span> <span class='hs-varid'>local</span> <span class='hs-varid'>f</span> <span class='hs-varop'>.</span> <span class='hs-varid'>runYoneda</span> 
+<a name="line-54"></a>
+<a name="line-55"></a><span class='hs-keyword'>instance</span> <span class='hs-conid'>MonadWriter</span> <span class='hs-varid'>w</span> <span class='hs-varid'>f</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>MonadWriter</span> <span class='hs-varid'>w</span> <span class='hs-layout'>(</span><span class='hs-conid'>Yoneda</span> <span class='hs-varid'>f</span><span class='hs-layout'>)</span> <span class='hs-keyword'>where</span>
+<a name="line-56"></a>    <span class='hs-varid'>tell</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>lift</span> <span class='hs-varop'>.</span> <span class='hs-varid'>tell</span>
+<a name="line-57"></a>    <span class='hs-varid'>listen</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>lift</span> <span class='hs-varop'>.</span> <span class='hs-varid'>listen</span> <span class='hs-varop'>.</span> <span class='hs-varid'>runYoneda</span>
+<a name="line-58"></a>    <span class='hs-varid'>pass</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>lift</span> <span class='hs-varop'>.</span> <span class='hs-varid'>pass</span> <span class='hs-varop'>.</span> <span class='hs-varid'>runYoneda</span>
+<a name="line-59"></a>
+<a name="line-60"></a><span class='hs-keyword'>instance</span> <span class='hs-conid'>MonadState</span> <span class='hs-varid'>s</span> <span class='hs-varid'>f</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>MonadState</span> <span class='hs-varid'>s</span> <span class='hs-layout'>(</span><span class='hs-conid'>Yoneda</span> <span class='hs-varid'>f</span><span class='hs-layout'>)</span> <span class='hs-keyword'>where</span>
+<a name="line-61"></a>    <span class='hs-varid'>get</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>lift</span> <span class='hs-varid'>get</span>
+<a name="line-62"></a>    <span class='hs-varid'>put</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>lift</span> <span class='hs-varop'>.</span> <span class='hs-varid'>put</span>
+<a name="line-63"></a>
+<a name="line-64"></a><span class='hs-keyword'>instance</span> <span class='hs-conid'>MonadIO</span> <span class='hs-varid'>f</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>MonadIO</span> <span class='hs-layout'>(</span><span class='hs-conid'>Yoneda</span> <span class='hs-varid'>f</span><span class='hs-layout'>)</span> <span class='hs-keyword'>where</span>
+<a name="line-65"></a>    <span class='hs-varid'>liftIO</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>lift</span> <span class='hs-varop'>.</span> <span class='hs-varid'>liftIO</span>
+<a name="line-66"></a>
+<a name="line-67"></a><span class='hs-keyword'>instance</span> <span class='hs-conid'>MonadRWS</span> <span class='hs-varid'>r</span> <span class='hs-varid'>w</span> <span class='hs-varid'>s</span> <span class='hs-varid'>f</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>MonadRWS</span> <span class='hs-varid'>r</span> <span class='hs-varid'>w</span> <span class='hs-varid'>s</span> <span class='hs-layout'>(</span><span class='hs-conid'>Yoneda</span> <span class='hs-varid'>f</span><span class='hs-layout'>)</span>
+<a name="line-68"></a>
+<a name="line-69"></a><span class='hs-keyword'>instance</span> <span class='hs-conid'>MonadError</span> <span class='hs-varid'>e</span> <span class='hs-varid'>f</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>MonadError</span> <span class='hs-varid'>e</span> <span class='hs-layout'>(</span><span class='hs-conid'>Yoneda</span> <span class='hs-varid'>f</span><span class='hs-layout'>)</span> <span class='hs-keyword'>where</span>
+<a name="line-70"></a>    <span class='hs-varid'>throwError</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>lift</span> <span class='hs-varop'>.</span> <span class='hs-varid'>throwError</span>
+<a name="line-71"></a>
+<a name="line-72"></a><span class='hs-keyword'>instance</span> <span class='hs-conid'>MonadFix</span> <span class='hs-varid'>m</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>MonadFix</span> <span class='hs-layout'>(</span><span class='hs-conid'>Yoneda</span> <span class='hs-varid'>m</span><span class='hs-layout'>)</span>
+<a name="line-73"></a>    
+<a name="line-74"></a><a name="runYoneda"></a><span class='hs-definition'>runYoneda</span> <span class='hs-keyglyph'>::</span> <span class='hs-conid'>Yoneda</span> <span class='hs-varid'>f</span> <span class='hs-varid'>a</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-varid'>f</span> <span class='hs-varid'>a</span> 
+<a name="line-75"></a><span class='hs-definition'>runYoneda</span> <span class='hs-layout'>(</span><span class='hs-conid'>Yoneda</span> <span class='hs-varid'>f</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>f</span> <span class='hs-varid'>id</span>
+<a name="line-76"></a>
+</pre></body>
+</html>
}
