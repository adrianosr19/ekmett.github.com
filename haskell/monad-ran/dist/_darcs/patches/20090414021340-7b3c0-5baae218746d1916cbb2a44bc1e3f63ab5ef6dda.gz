[initialized
ekmett@gmail.com**20090414021340
 Ignore-this: 3019a909233617d3b014330178cd80a3
] {
adddir ./doc
adddir ./doc/html
adddir ./doc/html/monad-ran
addfile ./doc/html/monad-ran/Control-Monad-Ran.html
hunk ./doc/html/monad-ran/Control-Monad-Ran.html 1
+<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd">
+<!--Rendered using the Haskell Html Library v0.2-->
+<HTML
+><HEAD
+><META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=UTF-8"
+><TITLE
+>Control.Monad.Ran</TITLE
+><LINK HREF="haddock.css" REL="stylesheet" TYPE="text/css"
+><SCRIPT SRC="haddock-util.js" TYPE="text/javascript"
+></SCRIPT
+></HEAD
+><BODY
+><TABLE CLASS="vanilla" CELLSPACING="0" CELLPADDING="0"
+><TR
+><TD CLASS="topbar"
+><TABLE CLASS="vanilla" CELLSPACING="0" CELLPADDING="0"
+><TR
+><TD
+><IMG SRC="haskell_icon.gif" WIDTH="16" HEIGHT="16" ALT=" "
+></TD
+><TD CLASS="title"
+>monad-ran-0.0.6: Implementations of common monads and monad transformers as right Kan extensions</TD
+><TD CLASS="topbut"
+><A HREF="src/Control-Monad-Ran.html"
+>Source code</A
+></TD
+><TD CLASS="topbut"
+><A HREF="index.html"
+>Contents</A
+></TD
+><TD CLASS="topbut"
+><A HREF="doc-index.html"
+>Index</A
+></TD
+></TR
+></TABLE
+></TD
+></TR
+><TR
+><TD CLASS="modulebar"
+><TABLE CLASS="vanilla" CELLSPACING="0" CELLPADDING="0"
+><TR
+><TD
+><FONT SIZE="6"
+>Control.Monad.Ran</FONT
+></TD
+></TR
+></TABLE
+></TD
+></TR
+><TR
+><TD CLASS="s15"
+></TD
+></TR
+><TR
+><TD CLASS="s15"
+></TD
+></TR
+><TR
+><TD CLASS="s15"
+></TD
+></TR
+><TR
+><TD CLASS="section1"
+>Documentation</TD
+></TR
+><TR
+><TD CLASS="s15"
+></TD
+></TR
+><TR
+><TD CLASS="topdecl"
+><TABLE CLASS="declbar"
+><TR
+><TD CLASS="declname"
+><SPAN CLASS="keyword"
+>data</SPAN
+>  <A NAME="t%3AYoneda"
+></A
+><B
+>Yoneda</B
+> f a </TD
+><TD CLASS="declbut"
+><A HREF="src/Control-Monad-Ran.html#Yoneda"
+>Source</A
+></TD
+></TR
+></TABLE
+></TD
+></TR
+><TR
+><TD CLASS="body"
+><TABLE CLASS="vanilla" CELLSPACING="0" CELLPADDING="0"
+><TR
+><TD CLASS="section4"
+>Constructors</TD
+></TR
+><TR
+><TD CLASS="body"
+><TABLE CLASS="vanilla" CELLSPACING="5" CELLPADDING="0"
+><TR
+><TD CLASS="arg"
+><A NAME="v%3AYoneda"
+></A
+><B
+>Yoneda</B
+></TD
+><TD CLASS="rdoc"
+></TD
+></TR
+><TR
+><TD CLASS="body" COLSPAN="2"
+><TABLE CLASS="vanilla" CELLSPACING="1" CELLPADDING="0"
+><TR
+><TD CLASS="arg"
+><A NAME="v%3AgetYoneda"
+></A
+><B
+>getYoneda</B
+> :: <SPAN CLASS="keyword"
+>forall</SPAN
+> b.  (a -&gt; b) -&gt; f b</TD
+><TD CLASS="rdoc"
+></TD
+></TR
+></TABLE
+></TD
+></TR
+></TABLE
+></TD
+></TR
+><TR
+><TD CLASS="section4"
+><IMG SRC="minus.gif" CLASS="coll" ONCLICK="toggle(this,'i:Yoneda')" ALT="show/hide"
+> Instances</TD
+></TR
+><TR
+><TD CLASS="body"
+><DIV ID="i:Yoneda" STYLE="display:block;"
+><TABLE CLASS="vanilla" CELLSPACING="1" CELLPADDING="0"
+><TR
+><TD CLASS="decl"
+><A HREF="/usr/local/share/doc/ghc/libraries/mtl/Control-Monad-Trans.html#t%3AMonadTrans"
+>MonadTrans</A
+> <A HREF="Control-Monad-Ran.html#t%3AYoneda"
+>Yoneda</A
+></TD
+></TR
+><TR
+><TD CLASS="decl"
+><A HREF="/usr/local/share/doc/ghc/libraries/base/Control-Monad.html#t%3AMonad"
+>Monad</A
+> f =&gt; <A HREF="/usr/local/share/doc/ghc/libraries/base/Control-Monad.html#t%3AMonad"
+>Monad</A
+> (<A HREF="Control-Monad-Ran.html#t%3AYoneda"
+>Yoneda</A
+> f)</TD
+></TR
+><TR
+><TD CLASS="decl"
+><A HREF="/usr/local/share/doc/ghc/libraries/base/Control-Monad.html#t%3AFunctor"
+>Functor</A
+> (<A HREF="Control-Monad-Ran.html#t%3AYoneda"
+>Yoneda</A
+> f)</TD
+></TR
+><TR
+><TD CLASS="decl"
+><A HREF="/usr/local/share/doc/ghc/libraries/base/Control-Applicative.html#t%3AApplicative"
+>Applicative</A
+> f =&gt; <A HREF="/usr/local/share/doc/ghc/libraries/base/Control-Applicative.html#t%3AApplicative"
+>Applicative</A
+> (<A HREF="Control-Monad-Ran.html#t%3AYoneda"
+>Yoneda</A
+> f)</TD
+></TR
+><TR
+><TD CLASS="decl"
+><A HREF="/usr/local/share/doc/ghc/libraries/base/Control-Monad.html#t%3AMonad"
+>Monad</A
+> f =&gt; <A HREF="Control-Monad-Ran.html#t%3ARMonad"
+>RMonad</A
+> (<A HREF="Control-Monad-Ran.html#t%3AYoneda"
+>Yoneda</A
+> f)</TD
+></TR
+></TABLE
+></DIV
+></TD
+></TR
+></TABLE
+></TD
+></TR
+><TR
+><TD CLASS="s15"
+></TD
+></TR
+><TR
+><TD CLASS="topdecl"
+><TABLE CLASS="declbar"
+><TR
+><TD CLASS="declname"
+><SPAN CLASS="keyword"
+>data</SPAN
+>  <A NAME="t%3ACodensity"
+></A
+><B
+>Codensity</B
+> f a </TD
+><TD CLASS="declbut"
+><A HREF="src/Control-Monad-Ran.html#Codensity"
+>Source</A
+></TD
+></TR
+></TABLE
+></TD
+></TR
+><TR
+><TD CLASS="body"
+><TABLE CLASS="vanilla" CELLSPACING="0" CELLPADDING="0"
+><TR
+><TD CLASS="section4"
+>Constructors</TD
+></TR
+><TR
+><TD CLASS="body"
+><TABLE CLASS="vanilla" CELLSPACING="5" CELLPADDING="0"
+><TR
+><TD CLASS="arg"
+><A NAME="v%3ACodensity"
+></A
+><B
+>Codensity</B
+></TD
+><TD CLASS="rdoc"
+></TD
+></TR
+><TR
+><TD CLASS="body" COLSPAN="2"
+><TABLE CLASS="vanilla" CELLSPACING="1" CELLPADDING="0"
+><TR
+><TD CLASS="arg"
+><A NAME="v%3AgetCodensity"
+></A
+><B
+>getCodensity</B
+> :: <SPAN CLASS="keyword"
+>forall</SPAN
+> b.  (a -&gt; f b) -&gt; f b</TD
+><TD CLASS="rdoc"
+></TD
+></TR
+></TABLE
+></TD
+></TR
+></TABLE
+></TD
+></TR
+><TR
+><TD CLASS="section4"
+><IMG SRC="minus.gif" CLASS="coll" ONCLICK="toggle(this,'i:Codensity')" ALT="show/hide"
+> Instances</TD
+></TR
+><TR
+><TD CLASS="body"
+><DIV ID="i:Codensity" STYLE="display:block;"
+><TABLE CLASS="vanilla" CELLSPACING="1" CELLPADDING="0"
+><TR
+><TD CLASS="decl"
+><A HREF="/usr/local/share/doc/ghc/libraries/mtl/Control-Monad-Trans.html#t%3AMonadTrans"
+>MonadTrans</A
+> <A HREF="Control-Monad-Ran.html#t%3ACodensity"
+>Codensity</A
+></TD
+></TR
+><TR
+><TD CLASS="decl"
+><A HREF="/usr/local/share/doc/ghc/libraries/base/Control-Monad.html#t%3AMonad"
+>Monad</A
+> (<A HREF="Control-Monad-Ran.html#t%3ACodensity"
+>Codensity</A
+> f)</TD
+></TR
+><TR
+><TD CLASS="decl"
+><A HREF="/usr/local/share/doc/ghc/libraries/base/Control-Monad.html#t%3AFunctor"
+>Functor</A
+> (<A HREF="Control-Monad-Ran.html#t%3ACodensity"
+>Codensity</A
+> k)</TD
+></TR
+><TR
+><TD CLASS="decl"
+><A HREF="/usr/local/share/doc/ghc/libraries/base/Control-Applicative.html#t%3AApplicative"
+>Applicative</A
+> (<A HREF="Control-Monad-Ran.html#t%3ACodensity"
+>Codensity</A
+> f)</TD
+></TR
+><TR
+><TD CLASS="decl"
+><A HREF="Control-Monad-Ran.html#t%3ARMonad"
+>RMonad</A
+> (<A HREF="Control-Monad-Ran.html#t%3ACodensity"
+>Codensity</A
+> f)</TD
+></TR
+></TABLE
+></DIV
+></TD
+></TR
+></TABLE
+></TD
+></TR
+><TR
+><TD CLASS="s15"
+></TD
+></TR
+><TR
+><TD CLASS="topdecl"
+><TABLE CLASS="declbar"
+><TR
+><TD CLASS="declname"
+><SPAN CLASS="keyword"
+>data</SPAN
+>  <A NAME="t%3ARan"
+></A
+><B
+>Ran</B
+> m a </TD
+><TD CLASS="declbut"
+><A HREF="src/Control-Monad-Ran.html#Ran"
+>Source</A
+></TD
+></TR
+></TABLE
+></TD
+></TR
+><TR
+><TD CLASS="body"
+><TABLE CLASS="vanilla" CELLSPACING="0" CELLPADDING="0"
+><TR
+><TD CLASS="section4"
+>Constructors</TD
+></TR
+><TR
+><TD CLASS="body"
+><TABLE CLASS="vanilla" CELLSPACING="5" CELLPADDING="0"
+><TR
+><TD CLASS="arg"
+><A NAME="v%3ARan"
+></A
+><B
+>Ran</B
+></TD
+><TD CLASS="rdoc"
+></TD
+></TR
+><TR
+><TD CLASS="body" COLSPAN="2"
+><TABLE CLASS="vanilla" CELLSPACING="1" CELLPADDING="0"
+><TR
+><TD CLASS="arg"
+><A NAME="v%3AgetRan"
+></A
+><B
+>getRan</B
+> :: <SPAN CLASS="keyword"
+>forall</SPAN
+> b.  (a -&gt; <A HREF="Control-Monad-Ran.html#t%3AG"
+>G</A
+> m b) -&gt; <A HREF="Control-Monad-Ran.html#t%3AH"
+>H</A
+> m b</TD
+><TD CLASS="rdoc"
+></TD
+></TR
+></TABLE
+></TD
+></TR
+></TABLE
+></TD
+></TR
+></TABLE
+></TD
+></TR
+><TR
+><TD CLASS="s15"
+></TD
+></TR
+><TR
+><TD CLASS="topdecl"
+><TABLE CLASS="declbar"
+><TR
+><TD CLASS="declname"
+><SPAN CLASS="keyword"
+>class</SPAN
+> <A HREF="/usr/local/share/doc/ghc/libraries/base/Control-Monad.html#t%3AMonad"
+>Monad</A
+> f =&gt; <A NAME="t%3ARMonad"
+></A
+><B
+>RMonad</B
+> f  <SPAN CLASS="keyword"
+>where</SPAN
+></TD
+><TD CLASS="declbut"
+><A HREF="src/Control-Monad-Ran.html#RMonad"
+>Source</A
+></TD
+></TR
+></TABLE
+></TD
+></TR
+><TR
+><TD CLASS="body"
+><TABLE CLASS="vanilla" CELLSPACING="0" CELLPADDING="0"
+><TR
+><TD CLASS="s8"
+></TD
+></TR
+><TR
+><TD CLASS="section4"
+>Associated Types</TD
+></TR
+><TR
+><TD CLASS="body"
+><TABLE CLASS="vanilla" CELLSPACING="0" CELLPADDING="0"
+><TR
+><TD CLASS="topdecl"
+><TABLE CLASS="declbar"
+><TR
+><TD CLASS="declname"
+><SPAN CLASS="keyword"
+>type</SPAN
+> <A NAME="t%3AG"
+></A
+><B
+>G</B
+> f :: * -&gt; *</TD
+><TD CLASS="declbut"
+><A HREF="src/Control-Monad-Ran.html#G"
+>Source</A
+></TD
+></TR
+></TABLE
+></TD
+></TR
+><TR
+><TD CLASS="s8"
+></TD
+></TR
+><TR
+><TD CLASS="topdecl"
+><TABLE CLASS="declbar"
+><TR
+><TD CLASS="declname"
+><SPAN CLASS="keyword"
+>type</SPAN
+> <A NAME="t%3AH"
+></A
+><B
+>H</B
+> f :: * -&gt; *</TD
+><TD CLASS="declbut"
+><A HREF="src/Control-Monad-Ran.html#H"
+>Source</A
+></TD
+></TR
+></TABLE
+></TD
+></TR
+></TABLE
+></TD
+></TR
+><TR
+><TD CLASS="s8"
+></TD
+></TR
+><TR
+><TD CLASS="section4"
+>Methods</TD
+></TR
+><TR
+><TD CLASS="body"
+><TABLE CLASS="vanilla" CELLSPACING="0" CELLPADDING="0"
+><TR
+><TD CLASS="topdecl"
+><TABLE CLASS="declbar"
+><TR
+><TD CLASS="declname"
+><A NAME="v%3AtoRan"
+></A
+><B
+>toRan</B
+> ::  f a -&gt; <A HREF="Control-Monad-Ran.html#t%3ARan"
+>Ran</A
+> f a</TD
+><TD CLASS="declbut"
+><A HREF="src/Control-Monad-Ran.html#toRan"
+>Source</A
+></TD
+></TR
+></TABLE
+></TD
+></TR
+><TR
+><TD CLASS="s8"
+></TD
+></TR
+><TR
+><TD CLASS="topdecl"
+><TABLE CLASS="declbar"
+><TR
+><TD CLASS="declname"
+><A NAME="v%3AfromRan"
+></A
+><B
+>fromRan</B
+> ::  <A HREF="Control-Monad-Ran.html#t%3ARan"
+>Ran</A
+> f a -&gt; f a</TD
+><TD CLASS="declbut"
+><A HREF="src/Control-Monad-Ran.html#fromRan"
+>Source</A
+></TD
+></TR
+></TABLE
+></TD
+></TR
+></TABLE
+></TD
+></TR
+><TR
+><TD CLASS="s8"
+></TD
+></TR
+><TR
+><TD CLASS="section4"
+><IMG SRC="minus.gif" CLASS="coll" ONCLICK="toggle(this,'i:RMonad')" ALT="show/hide"
+> Instances</TD
+></TR
+><TR
+><TD CLASS="body"
+><DIV ID="i:RMonad" STYLE="display:block;"
+><TABLE CLASS="vanilla" CELLSPACING="1" CELLPADDING="0"
+><TR
+><TD CLASS="decl"
+><A HREF="Control-Monad-Ran.html#t%3ARMonad"
+>RMonad</A
+> <A HREF="/usr/local/share/doc/ghc/libraries/base/Data-Maybe.html#t%3AMaybe"
+>Maybe</A
+></TD
+></TR
+><TR
+><TD CLASS="decl"
+><A HREF="Control-Monad-Ran.html#t%3ARMonad"
+>RMonad</A
+> <A HREF="/usr/local/share/doc/ghc/libraries/mtl/Control-Monad-Identity.html#t%3AIdentity"
+>Identity</A
+></TD
+></TR
+><TR
+><TD CLASS="decl"
+><A HREF="/usr/local/share/doc/ghc/libraries/mtl/Control-Monad-Error-Class.html#t%3AError"
+>Error</A
+> b =&gt; <A HREF="Control-Monad-Ran.html#t%3ARMonad"
+>RMonad</A
+> (<A HREF="/usr/local/share/doc/ghc/libraries/base/Data-Either.html#t%3AEither"
+>Either</A
+> b)</TD
+></TR
+><TR
+><TD CLASS="decl"
+><A HREF="Control-Monad-Ran.html#t%3ARMonad"
+>RMonad</A
+> (<A HREF="/usr/local/share/doc/ghc/libraries/mtl/Control-Monad-Cont.html#t%3ACont"
+>Cont</A
+> r)</TD
+></TR
+><TR
+><TD CLASS="decl"
+><A HREF="/usr/local/share/doc/ghc/libraries/base/Data-Monoid.html#t%3AMonoid"
+>Monoid</A
+> w =&gt; <A HREF="Control-Monad-Ran.html#t%3ARMonad"
+>RMonad</A
+> (<A HREF="/usr/local/share/doc/ghc/libraries/mtl/Control-Monad-Writer-Lazy.html#t%3AWriter"
+>Writer</A
+> w)</TD
+></TR
+><TR
+><TD CLASS="decl"
+><A HREF="Control-Monad-Ran.html#t%3ARMonad"
+>RMonad</A
+> (<A HREF="/usr/local/share/doc/ghc/libraries/mtl/Control-Monad-State-Lazy.html#t%3AState"
+>State</A
+> s)</TD
+></TR
+><TR
+><TD CLASS="decl"
+><A HREF="Control-Monad-Ran.html#t%3ARMonad"
+>RMonad</A
+> (<A HREF="/usr/local/share/doc/ghc/libraries/mtl/Control-Monad-Reader.html#t%3AReader"
+>Reader</A
+> e)</TD
+></TR
+><TR
+><TD CLASS="decl"
+><A HREF="Control-Monad-Ran.html#t%3ARMonad"
+>RMonad</A
+> (<A HREF="Control-Monad-Ran.html#t%3ACodensity"
+>Codensity</A
+> f)</TD
+></TR
+><TR
+><TD CLASS="decl"
+><A HREF="/usr/local/share/doc/ghc/libraries/base/Control-Monad.html#t%3AMonad"
+>Monad</A
+> f =&gt; <A HREF="Control-Monad-Ran.html#t%3ARMonad"
+>RMonad</A
+> (<A HREF="Control-Monad-Ran.html#t%3AYoneda"
+>Yoneda</A
+> f)</TD
+></TR
+><TR
+><TD CLASS="decl"
+><A HREF="Control-Monad-Ran.html#t%3ARMonad"
+>RMonad</A
+> m =&gt; <A HREF="Control-Monad-Ran.html#t%3ARMonad"
+>RMonad</A
+> (<A HREF="/usr/local/share/doc/ghc/libraries/mtl/Control-Monad-Cont.html#t%3AContT"
+>ContT</A
+> r m)</TD
+></TR
+><TR
+><TD CLASS="decl"
+>(<A HREF="/usr/local/share/doc/ghc/libraries/base/Data-Monoid.html#t%3AMonoid"
+>Monoid</A
+> w, <A HREF="Control-Monad-Ran.html#t%3ARMonad"
+>RMonad</A
+> m) =&gt; <A HREF="Control-Monad-Ran.html#t%3ARMonad"
+>RMonad</A
+> (<A HREF="/usr/local/share/doc/ghc/libraries/mtl/Control-Monad-Writer-Lazy.html#t%3AWriterT"
+>WriterT</A
+> w m)</TD
+></TR
+><TR
+><TD CLASS="decl"
+><A HREF="Control-Monad-Ran.html#t%3ARMonad"
+>RMonad</A
+> m =&gt; <A HREF="Control-Monad-Ran.html#t%3ARMonad"
+>RMonad</A
+> (<A HREF="/usr/local/share/doc/ghc/libraries/mtl/Control-Monad-State-Lazy.html#t%3AStateT"
+>StateT</A
+> s m)</TD
+></TR
+><TR
+><TD CLASS="decl"
+><A HREF="Control-Monad-Ran.html#t%3ARMonad"
+>RMonad</A
+> m =&gt; <A HREF="Control-Monad-Ran.html#t%3ARMonad"
+>RMonad</A
+> (<A HREF="/usr/local/share/doc/ghc/libraries/mtl/Control-Monad-Reader.html#t%3AReaderT"
+>ReaderT</A
+> e m)</TD
+></TR
+><TR
+><TD CLASS="decl"
+>(<A HREF="Control-Monad-Ran.html#t%3ARMonad"
+>RMonad</A
+> m, <A HREF="/usr/local/share/doc/ghc/libraries/mtl/Control-Monad-Error-Class.html#t%3AError"
+>Error</A
+> b) =&gt; <A HREF="Control-Monad-Ran.html#t%3ARMonad"
+>RMonad</A
+> (<A HREF="/usr/local/share/doc/ghc/libraries/mtl/Control-Monad-Error.html#t%3AErrorT"
+>ErrorT</A
+> b m)</TD
+></TR
+></TABLE
+></DIV
+></TD
+></TR
+></TABLE
+></TD
+></TR
+><TR
+><TD CLASS="s15"
+></TD
+></TR
+><TR
+><TD CLASS="topdecl"
+><TABLE CLASS="declbar"
+><TR
+><TD CLASS="declname"
+><A NAME="v%3AtoRan"
+></A
+><B
+>toRan</B
+> :: <A HREF="Control-Monad-Ran.html#t%3ARMonad"
+>RMonad</A
+> f =&gt; f a -&gt; <A HREF="Control-Monad-Ran.html#t%3ARan"
+>Ran</A
+> f a</TD
+><TD CLASS="declbut"
+><A HREF="src/Control-Monad-Ran.html#toRan"
+>Source</A
+></TD
+></TR
+></TABLE
+></TD
+></TR
+><TR
+><TD CLASS="s15"
+></TD
+></TR
+><TR
+><TD CLASS="topdecl"
+><TABLE CLASS="declbar"
+><TR
+><TD CLASS="declname"
+><A NAME="v%3AfromRan"
+></A
+><B
+>fromRan</B
+> :: <A HREF="Control-Monad-Ran.html#t%3ARMonad"
+>RMonad</A
+> f =&gt; <A HREF="Control-Monad-Ran.html#t%3ARan"
+>Ran</A
+> f a -&gt; f a</TD
+><TD CLASS="declbut"
+><A HREF="src/Control-Monad-Ran.html#fromRan"
+>Source</A
+></TD
+></TR
+></TABLE
+></TD
+></TR
+><TR
+><TD CLASS="s15"
+></TD
+></TR
+><TR
+><TD CLASS="botbar"
+>Produced by <A HREF="http://www.haskell.org/haddock/"
+>Haddock</A
+> version 2.3.0</TD
+></TR
+></TABLE
+></BODY
+></HTML
+>
addfile ./doc/html/monad-ran/doc-index.html
hunk ./doc/html/monad-ran/doc-index.html 1
+<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd">
+<!--Rendered using the Haskell Html Library v0.2-->
+<HTML
+><HEAD
+><META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=UTF-8"
+><TITLE
+>monad-ran-0.0.6: Implementations of common monads and monad transformers as right Kan extensions (Index)</TITLE
+><LINK HREF="haddock.css" REL="stylesheet" TYPE="text/css"
+><SCRIPT SRC="haddock-util.js" TYPE="text/javascript"
+></SCRIPT
+></HEAD
+><BODY
+><TABLE CLASS="vanilla" CELLSPACING="0" CELLPADDING="0"
+><TR
+><TD CLASS="topbar"
+><TABLE CLASS="vanilla" CELLSPACING="0" CELLPADDING="0"
+><TR
+><TD
+><IMG SRC="haskell_icon.gif" WIDTH="16" HEIGHT="16" ALT=" "
+></TD
+><TD CLASS="title"
+>monad-ran-0.0.6: Implementations of common monads and monad transformers as right Kan extensions</TD
+><TD CLASS="topbut"
+><A HREF="index.html"
+>Contents</A
+></TD
+><TD CLASS="topbut"
+><A HREF="doc-index.html"
+>Index</A
+></TD
+></TR
+></TABLE
+></TD
+></TR
+><TR
+><TD COLSPAN="2" STYLE="padding-top:5px;"
+><FORM onsubmit="full_search(); return false;" ACTION=""
+>Search: <INPUT ID="searchbox" onkeyup="quick_search()"
+> <INPUT VALUE="Search" TYPE="submit"
+> <SPAN ID="searchmsg"
+> </SPAN
+></FORM
+></TD
+></TR
+><TR
+><TD
+><TABLE ID="indexlist" CELLPADDING="0" CELLSPACING="5"
+><TR CLASS="indexrow"
+><TD CLASS="indexentry" COLSPAN="2"
+>Codensity</TD
+></TR
+><TR CLASS="indexrow"
+><TD CLASS="indexannot"
+>1 (Type/Class)</TD
+><TD CLASS="indexlinks"
+><A HREF="Control-Monad-Ran.html#t%3ACodensity"
+>Control.Monad.Ran</A
+></TD
+></TR
+><TR CLASS="indexrow"
+><TD CLASS="indexannot"
+>2 (Data Constructor)</TD
+><TD CLASS="indexlinks"
+><A HREF="Control-Monad-Ran.html#v%3ACodensity"
+>Control.Monad.Ran</A
+></TD
+></TR
+><TR CLASS="indexrow"
+><TD CLASS="indexentry"
+>fromRan</TD
+><TD CLASS="indexlinks"
+><A HREF="Control-Monad-Ran.html#v%3AfromRan"
+>Control.Monad.Ran</A
+></TD
+></TR
+><TR CLASS="indexrow"
+><TD CLASS="indexentry"
+>G</TD
+><TD CLASS="indexlinks"
+><A HREF="Control-Monad-Ran.html#t%3AG"
+>Control.Monad.Ran</A
+></TD
+></TR
+><TR CLASS="indexrow"
+><TD CLASS="indexentry"
+>getCodensity</TD
+><TD CLASS="indexlinks"
+><A HREF="Control-Monad-Ran.html#v%3AgetCodensity"
+>Control.Monad.Ran</A
+></TD
+></TR
+><TR CLASS="indexrow"
+><TD CLASS="indexentry"
+>getRan</TD
+><TD CLASS="indexlinks"
+><A HREF="Control-Monad-Ran.html#v%3AgetRan"
+>Control.Monad.Ran</A
+></TD
+></TR
+><TR CLASS="indexrow"
+><TD CLASS="indexentry"
+>getYoneda</TD
+><TD CLASS="indexlinks"
+><A HREF="Control-Monad-Ran.html#v%3AgetYoneda"
+>Control.Monad.Ran</A
+></TD
+></TR
+><TR CLASS="indexrow"
+><TD CLASS="indexentry"
+>H</TD
+><TD CLASS="indexlinks"
+><A HREF="Control-Monad-Ran.html#t%3AH"
+>Control.Monad.Ran</A
+></TD
+></TR
+><TR CLASS="indexrow"
+><TD CLASS="indexentry" COLSPAN="2"
+>Ran</TD
+></TR
+><TR CLASS="indexrow"
+><TD CLASS="indexannot"
+>1 (Type/Class)</TD
+><TD CLASS="indexlinks"
+><A HREF="Control-Monad-Ran.html#t%3ARan"
+>Control.Monad.Ran</A
+></TD
+></TR
+><TR CLASS="indexrow"
+><TD CLASS="indexannot"
+>2 (Data Constructor)</TD
+><TD CLASS="indexlinks"
+><A HREF="Control-Monad-Ran.html#v%3ARan"
+>Control.Monad.Ran</A
+></TD
+></TR
+><TR CLASS="indexrow"
+><TD CLASS="indexentry"
+>RMonad</TD
+><TD CLASS="indexlinks"
+><A HREF="Control-Monad-Ran.html#t%3ARMonad"
+>Control.Monad.Ran</A
+></TD
+></TR
+><TR CLASS="indexrow"
+><TD CLASS="indexentry"
+>toRan</TD
+><TD CLASS="indexlinks"
+><A HREF="Control-Monad-Ran.html#v%3AtoRan"
+>Control.Monad.Ran</A
+></TD
+></TR
+><TR CLASS="indexrow"
+><TD CLASS="indexentry" COLSPAN="2"
+>Yoneda</TD
+></TR
+><TR CLASS="indexrow"
+><TD CLASS="indexannot"
+>1 (Type/Class)</TD
+><TD CLASS="indexlinks"
+><A HREF="Control-Monad-Ran.html#t%3AYoneda"
+>Control.Monad.Ran</A
+></TD
+></TR
+><TR CLASS="indexrow"
+><TD CLASS="indexannot"
+>2 (Data Constructor)</TD
+><TD CLASS="indexlinks"
+><A HREF="Control-Monad-Ran.html#v%3AYoneda"
+>Control.Monad.Ran</A
+></TD
+></TR
+></TABLE
+></TD
+></TR
+></TABLE
+></BODY
+></HTML
+>
addfile ./doc/html/monad-ran/haddock-util.js
hunk ./doc/html/monad-ran/haddock-util.js 1
+// Haddock JavaScript utilities
+function toggle(button,id)
+{
+   var n = document.getElementById(id).style;
+   if (n.display == "none")
+   {
+    button.src = "minus.gif";
+    n.display = "block";
+   }
+   else
+   {
+    button.src = "plus.gif";
+    n.display = "none";
+   }
+}
+
+
+var max_results = 75; // 50 is not enough to search for map in the base libraries
+var shown_range = null;
+var last_search = null;
+
+function quick_search()
+{
+    perform_search(false);
+}
+
+function full_search()
+{
+    perform_search(true);
+}
+
+
+function perform_search(full)
+{
+    var text = document.getElementById("searchbox").value.toLowerCase();
+    if (text == last_search && !full) return;
+    last_search = text;
+    
+    var table = document.getElementById("indexlist");
+    var status = document.getElementById("searchmsg");
+    var children = table.firstChild.childNodes;
+    
+    // first figure out the first node with the prefix
+    var first = bisect(-1);
+    var last = (first == -1 ? -1 : bisect(1));
+
+    if (first == -1)
+    {
+        table.className = "";
+        status.innerHTML = "No results found, displaying all";
+    }
+    else if (first == 0 && last == children.length - 1)
+    {
+        table.className = "";
+        status.innerHTML = "";
+    }
+    else if (last - first >= max_results && !full)
+    {
+        table.className = "";
+        status.innerHTML = "More than " + max_results + ", press Search to display";
+    }
+    else
+    {
+        // decide what you need to clear/show
+        if (shown_range)
+            setclass(shown_range[0], shown_range[1], "indexrow");
+        setclass(first, last, "indexshow");
+        shown_range = [first, last];
+        table.className = "indexsearch";
+        status.innerHTML = "";
+    }
+
+    
+    function setclass(first, last, status)
+    {
+        for (var i = first; i <= last; i++)
+        {
+            children[i].className = status;
+        }
+    }
+    
+    
+    // do a binary search, treating 0 as ...
+    // return either -1 (no 0's found) or location of most far match
+    function bisect(dir)
+    {
+        var first = 0, finish = children.length - 1;
+        var mid, success = false;
+
+        while (finish - first > 3)
+        {
+            mid = Math.floor((finish + first) / 2);
+
+            var i = checkitem(mid);
+            if (i == 0) i = dir;
+            if (i == -1)
+                finish = mid;
+            else
+                first = mid;
+        }
+        var a = (dir == 1 ? first : finish);
+        var b = (dir == 1 ? finish : first);
+        for (var i = b; i != a - dir; i -= dir)
+        {
+            if (checkitem(i) == 0) return i;
+        }
+        return -1;
+    }    
+    
+    
+    // from an index, decide what the result is
+    // 0 = match, -1 is lower, 1 is higher
+    function checkitem(i)
+    {
+        var s = getitem(i).toLowerCase().substr(0, text.length);
+        if (s == text) return 0;
+        else return (s > text ? -1 : 1);
+    }
+    
+    
+    // from an index, get its string
+    // this abstracts over alternates
+    function getitem(i)
+    {
+        for ( ; i >= 0; i--)
+        {
+            var s = children[i].firstChild.firstChild.data;
+            if (s.indexOf(' ') == -1)
+                return s;
+        }
+        return ""; // should never be reached
+    }
+}
addfile ./doc/html/monad-ran/haddock.css
hunk ./doc/html/monad-ran/haddock.css 1
+/* -------- Global things --------- */
+
+BODY { 
+  background-color: #ffffff;
+  color: #000000;
+  font-family: sans-serif;
+  } 
+
+A:link    { color: #0000e0; text-decoration: none }
+A:visited { color: #0000a0; text-decoration: none }
+A:hover   { background-color: #e0e0ff; text-decoration: none }
+
+TABLE.vanilla {
+  width: 100%;
+  border-width: 0px;
+  /* I can't seem to specify cellspacing or cellpadding properly using CSS... */
+}
+
+TABLE.vanilla2 {
+  border-width: 0px;
+}
+
+/* <TT> font is a little too small in MSIE */
+TT  { font-size: 100%; }
+PRE { font-size: 100%; }
+
+LI P { margin: 0pt } 
+
+TD {
+  border-width: 0px;
+}
+
+TABLE.narrow {
+  border-width: 0px;
+}
+
+TD.s8  {  height: 8px;  }
+TD.s15 {  height: 15px; }
+
+SPAN.keyword { text-decoration: underline; }
+
+/* Resize the buttom image to match the text size */
+IMG.coll { width : 0.75em; height: 0.75em; margin-bottom: 0; margin-right: 0.5em }
+
+/* --------- Contents page ---------- */
+
+DIV.node {
+  padding-left: 3em;
+}
+
+DIV.cnode {
+  padding-left: 1.75em;
+}
+
+SPAN.pkg {
+  position: absolute;
+  left: 50em;
+}
+
+/* --------- Documentation elements ---------- */
+
+TD.children {
+  padding-left: 25px;
+  }
+
+TD.synopsis {
+  padding: 2px;
+  background-color: #f0f0f0;
+  font-family: monospace
+ }
+
+TD.decl { 
+  padding: 2px;
+  background-color: #f0f0f0; 
+  font-family: monospace;
+  vertical-align: top;
+  }
+
+TD.topdecl {
+  padding: 2px;
+  background-color: #f0f0f0;
+  font-family: monospace;
+  vertical-align: top;
+}
+
+TABLE.declbar {
+  border-spacing: 0px;
+ }
+
+TD.declname {
+  width: 100%;
+ }
+
+TD.declbut {
+  padding-left: 5px;
+  padding-right: 5px;
+  border-left-width: 1px;
+  border-left-color: #000099;
+  border-left-style: solid;
+  white-space: nowrap;
+  font-size: small;
+ }
+
+/* 
+  arg is just like decl, except that wrapping is not allowed.  It is
+  used for function and constructor arguments which have a text box
+  to the right, where if wrapping is allowed the text box squashes up
+  the declaration by wrapping it.
+*/
+TD.arg { 
+  padding: 2px;
+  background-color: #f0f0f0; 
+  font-family: monospace;
+  vertical-align: top;
+  white-space: nowrap;
+  }
+
+TD.recfield { padding-left: 20px }
+
+TD.doc  { 
+  padding-top: 2px;
+  padding-left: 10px;
+  }
+
+TD.ndoc  { 
+  padding: 2px;
+  }
+
+TD.rdoc  { 
+  padding: 2px;
+  padding-left: 10px;
+  width: 100%;
+  }
+
+TD.body  { 
+  padding-left: 10px
+  }
+
+TD.pkg {
+  width: 100%;
+  padding-left: 10px
+}
+
+TABLE.indexsearch TR.indexrow {
+  display: none;
+}
+TABLE.indexsearch TR.indexshow {
+  display: table-row;
+}
+
+TD.indexentry {
+  vertical-align: top;
+  padding-right: 10px
+  }
+
+TD.indexannot {
+  vertical-align: top;
+  padding-left: 20px;
+  white-space: nowrap
+  }
+
+TD.indexlinks {
+  width: 100%
+  }
+
+/* ------- Section Headings ------- */
+
+TD.section1 {
+  padding-top: 15px;
+  font-weight: bold;
+  font-size: 150%
+  }
+
+TD.section2 {
+  padding-top: 10px;
+  font-weight: bold;
+  font-size: 130%
+  }
+
+TD.section3 {
+  padding-top: 5px;
+  font-weight: bold;
+  font-size: 110%
+  }
+
+TD.section4 {
+  font-weight: bold;
+  font-size: 100%
+  }
+
+/* -------------- The title bar at the top of the page */
+
+TD.infohead {
+  color: #ffffff;
+  font-weight: bold;
+  padding-right: 10px;
+  text-align: left;
+}
+
+TD.infoval {
+  color: #ffffff;
+  padding-right: 10px;
+  text-align: left;
+}
+
+TD.topbar {
+  background-color: #000099;
+  padding: 5px;
+}
+
+TD.title {
+  color: #ffffff;
+  padding-left: 10px;
+  width: 100%
+  }
+
+TD.topbut {
+  padding-left: 5px;
+  padding-right: 5px;
+  border-left-width: 1px;
+  border-left-color: #ffffff;
+  border-left-style: solid;
+  white-space: nowrap;
+  }
+
+TD.topbut A:link {
+  color: #ffffff
+  }
+
+TD.topbut A:visited {
+  color: #ffff00
+  }
+
+TD.topbut A:hover {
+  background-color: #6060ff;
+  }
+
+TD.topbut:hover {
+  background-color: #6060ff
+  }
+
+TD.modulebar { 
+  background-color: #0077dd;
+  padding: 5px;
+  border-top-width: 1px;
+  border-top-color: #ffffff;
+  border-top-style: solid;
+  }
+
+/* --------- The page footer --------- */
+
+TD.botbar {
+  background-color: #000099;
+  color: #ffffff;
+  padding: 5px
+  }
+TD.botbar A:link {
+  color: #ffffff;
+  text-decoration: underline
+  }
+TD.botbar A:visited {
+  color: #ffff00
+  }
+TD.botbar A:hover {
+  background-color: #6060ff
+  }
+
addfile ./doc/html/monad-ran/haskell_icon.gif
binary ./doc/html/monad-ran/haskell_icon.gif
oldhex
*
newhex
*47494638376110001000f70f00000000800000008000808000000080800080008080c0c0c08080
*80ff000000ff00ffff000000ffff00ff00ffffffffff0000000000000000000000000000000000
*000000000000000000000000000000000000000000000000000000000000000000000000000000
*000000000000000000000000000000000000000000000000000000000000000000000000000000
*000000000000000000000000000000000000000000000000000000000000000000000000000000
*000000000000000000000000000000000000000000000000000000000000000000000000000000
*000000000000000000000000000000000000000000000000000000000000000000000000000000
*000000000000000000000000000000000000000000000000000000000000000000000000000000
*000000000000000000000000000000000000000000000000000000000000000000000000000000
*000000000000000000000000000000000000000000000000000000000000000000000000000000
*000000000000000000000000000000000000000000000000000000000000000000000000000000
*000000000000000000000000000000000000000000000000000000000000000000000000000000
*000000000000000000000000000000000000000000000000000000000000000000000000000000
*000000000000000000000000000000000000000000000000000000000000000000000000000000
*000000000000000000000000000000000000000000000000000000000000000000000000000000
*000000000000000000000000000000000000000000000000000000000000000000000000000000
*000000000000000000000000000000000000000000000000000000000000000000000000000000
*000000000000000000000000000000000000000000000000000000000000000000000000000000
*000000000000000000000000000000000000000000000000000000000000000000000000000000
*000000000000000000000000000000000000000000000000000000000000000000000000000000
*0021f90401000000002c000000001000100007086c0001007840b0a0418202073e38b0b021c387
*07143e2440c0a143040e091cd0787021c686151f84347800e343901d4b12646870e44a930d0952
*3ca832a6cc990555b2bc2992e4c79d3847ea2c88b3a7c89a2c8b8aa43874e941a60810003840b5
*aa55aa511346ddca75abc080003b
addfile ./doc/html/monad-ran/index.html
hunk ./doc/html/monad-ran/index.html 1
+<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd">
+<!--Rendered using the Haskell Html Library v0.2-->
+<HTML
+><HEAD
+><META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=UTF-8"
+><TITLE
+>monad-ran-0.0.6: Implementations of common monads and monad transformers as right Kan extensions</TITLE
+><LINK HREF="haddock.css" REL="stylesheet" TYPE="text/css"
+><SCRIPT SRC="haddock-util.js" TYPE="text/javascript"
+></SCRIPT
+></HEAD
+><BODY
+><TABLE CLASS="vanilla" CELLSPACING="0" CELLPADDING="0"
+><TR
+><TD CLASS="topbar"
+><TABLE CLASS="vanilla" CELLSPACING="0" CELLPADDING="0"
+><TR
+><TD
+><IMG SRC="haskell_icon.gif" WIDTH="16" HEIGHT="16" ALT=" "
+></TD
+><TD CLASS="title"
+>monad-ran-0.0.6: Implementations of common monads and monad transformers as right Kan extensions</TD
+><TD CLASS="topbut"
+><A HREF="index.html"
+>Contents</A
+></TD
+><TD CLASS="topbut"
+><A HREF="doc-index.html"
+>Index</A
+></TD
+></TR
+></TABLE
+></TD
+></TR
+><TR
+><TD CLASS="section1"
+>monad-ran-0.0.6: Implementations of common monads and monad transformers as right Kan extensions</TD
+></TR
+><TR
+><TD CLASS="doc"
+>.
+</TD
+></TR
+><TR
+><TD CLASS="section1"
+>Modules</TD
+></TR
+><TR
+><TD
+><TABLE CLASS="vanilla2" CELLSPACING="0" CELLPADDING="0"
+><TR
+><TD STYLE="width: 50em"
+><IMG SRC="minus.gif" CLASS="coll" ONCLICK="toggle(this,'n:0')" ALT="show/hide"
+>Control</TD
+><TD
+></TD
+><TD
+></TD
+></TR
+><TR
+><TD STYLE="padding: 0; padding-left: 2em" COLSPAN="3"
+><TABLE CLASS="vanilla2" CELLSPACING="0" CELLPADDING="0" ID="n:0" STYLE="display:block;"
+><TR
+><TD STYLE="width: 48em"
+><IMG SRC="minus.gif" CLASS="coll" ONCLICK="toggle(this,'n:1')" ALT="show/hide"
+>Monad</TD
+><TD
+></TD
+><TD
+></TD
+></TR
+><TR
+><TD STYLE="padding: 0; padding-left: 2em" COLSPAN="3"
+><TABLE CLASS="vanilla2" CELLSPACING="0" CELLPADDING="0" ID="n:1" STYLE="display:block;"
+><TR
+><TD STYLE="padding-left: 1.25em;width: 46em"
+><A HREF="Control-Monad-Ran.html"
+>Control.Monad.Ran</A
+></TD
+><TD
+></TD
+><TD
+></TD
+></TR
+></TABLE
+></TD
+></TR
+></TABLE
+></TD
+></TR
+></TABLE
+></TD
+></TR
+><TR
+><TD CLASS="s15"
+></TD
+></TR
+><TR
+><TD CLASS="botbar"
+>Produced by <A HREF="http://www.haskell.org/haddock/"
+>Haddock</A
+> version 2.3.0</TD
+></TR
+></TABLE
+></BODY
+></HTML
+>
addfile ./doc/html/monad-ran/minus.gif
binary ./doc/html/monad-ran/minus.gif
oldhex
*
newhex
*47494638396109000900910000fefefe8282820202020000002c00000000090009000002118c8f
*a00bc6eb5e0b40583b6596f1a11f14003b
addfile ./doc/html/monad-ran/monad-ran.haddock
binary ./doc/html/monad-ran/monad-ran.haddock
oldhex
*
newhex
*0d0cface000400000000000003c5000000000000025f0e00000000000000000000000000000000
*000000000000000100000000000000010000000000000000000000000000000100000000000000
*020000000000000000000000000000000100000000000000030000000000000000000000000000
*000100000000000000040000000000000000000000000000000100000000000000050000000000
*000000000000000000000100000000000000060000000000000000000000000000000100000000
*000000070000000000000000000000000000000100000000000000080000000000000000000000
*0000000001000000000000000900000000000000000000000000000001000000000000000a0000
*0000000000000000000000000001000000000000000b0000000000000000000000000000000100
*0000000000000c00000000000000000000000000000001000000000000000d0000000000000000
*0000000000000001010000000000000000000000000000000100000000000e0000000000000000
*000000000000000100000000000000020000000000000003000000000000000400000000000000
*050000000000000006000000000000000700000000000000080000000000000009000000000000
*000a000000000000000b000000000000000c000000000000000d0e000000000000000b00000000
*0000000c000000000000000d00000000000000080000000000000009000000000000000a000000
*000000000500000000000000060000000000000007000000000000000000000000000000010000
*00000000000200000000000000030000000000000004000000000000000e000000000000000000
*000000000000010300000000000000020000000000000000000000000000000103000000000000
*000300000000000000000000000000000001030000000000000004000000000000000000000000
*000000010000000000000000050000000000000000000000000000000100000000000000000600
*000000000000000000000000000001030000000000000007000000000000000000000000000000
*010100000000000000070000000000000000000000000000000100000000000000000800000000
*000000000000000000000001030000000000000009000000000000000000000000000000010100
*000000000000090000000000000000000000000000000100000000000000000a00000000000000
*00000000000000000103000000000000000b000000000000000000000000000000010100000000
*0000000b0000000000000000000000000000000100000000000000000c000000000000000d0000
*00000000000f6d6f6e61642d72616e2d302e302e360000000000000011436f6e74726f6c2e4d6f
*6e61642e52616e0000000000000006524d6f6e6164000000000000000147000000000000000148
*0000000000000005746f52616e000000000000000766726f6d52616e000000000000000352616e
*000000000000000667657452616e0000000000000009436f64656e73697479000000000000000c
*676574436f64656e736974790000000000000006596f6e6564610000000000000009676574596f
*6e656461
addfile ./doc/html/monad-ran/plus.gif
binary ./doc/html/monad-ran/plus.gif
oldhex
*
newhex
*47494638396109000900910000fefefe8282820202020000002c00000000090009000002148c8f
*a00bb6b29c82ca897b5b7871cfce74085200003b
adddir ./doc/html/monad-ran/src
addfile ./doc/html/monad-ran/src/Control-Monad-Ran.html
hunk ./doc/html/monad-ran/src/Control-Monad-Ran.html 1
+<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
+<html>
+<head>
+<!-- Generated by HsColour, http://www.cs.york.ac.uk/fp/darcs/hscolour/ -->
+<title>Control/Monad/Ran.hs</title>
+<link type='text/css' rel='stylesheet' href='hscolour.css' />
+</head>
+<body>
+<pre><a name="line-1"></a><span class='hs-comment'>-- Finding the right Kan extension</span>
+<a name="line-2"></a>
+<a name="line-3"></a><span class='hs-keyword'>module</span> <span class='hs-conid'>Control</span><span class='hs-varop'>.</span><span class='hs-conid'>Monad</span><span class='hs-varop'>.</span><span class='hs-conid'>Ran</span> 
+<a name="line-4"></a>    <span class='hs-layout'>(</span> <span class='hs-conid'>Yoneda</span><span class='hs-layout'>(</span><span class='hs-keyglyph'>..</span><span class='hs-layout'>)</span>
+<a name="line-5"></a>    <span class='hs-layout'>,</span> <span class='hs-conid'>Codensity</span><span class='hs-layout'>(</span><span class='hs-keyglyph'>..</span><span class='hs-layout'>)</span>
+<a name="line-6"></a>    <span class='hs-layout'>,</span> <span class='hs-conid'>Ran</span><span class='hs-layout'>(</span><span class='hs-keyglyph'>..</span><span class='hs-layout'>)</span>
+<a name="line-7"></a>    <span class='hs-layout'>,</span> <span class='hs-conid'>RMonad</span>
+<a name="line-8"></a>    <span class='hs-layout'>,</span> <span class='hs-conid'>G</span>
+<a name="line-9"></a>    <span class='hs-layout'>,</span> <span class='hs-conid'>H</span>
+<a name="line-10"></a>    <span class='hs-layout'>,</span> <span class='hs-varid'>toRan</span>
+<a name="line-11"></a>    <span class='hs-layout'>,</span> <span class='hs-varid'>fromRan</span>
+<a name="line-12"></a>    <span class='hs-layout'>)</span> <span class='hs-keyword'>where</span>
+<a name="line-13"></a>
+<a name="line-14"></a><span class='hs-keyword'>import</span> <span class='hs-conid'>Data</span><span class='hs-varop'>.</span><span class='hs-conid'>Monoid</span>
+<a name="line-15"></a><span class='hs-keyword'>import</span> <span class='hs-conid'>Control</span><span class='hs-varop'>.</span><span class='hs-conid'>Applicative</span>
+<a name="line-16"></a><span class='hs-keyword'>import</span> <span class='hs-conid'>Control</span><span class='hs-varop'>.</span><span class='hs-conid'>Monad</span>
+<a name="line-17"></a><span class='hs-keyword'>import</span> <span class='hs-conid'>Control</span><span class='hs-varop'>.</span><span class='hs-conid'>Monad</span><span class='hs-varop'>.</span><span class='hs-conid'>Identity</span>
+<a name="line-18"></a><span class='hs-keyword'>import</span> <span class='hs-conid'>Control</span><span class='hs-varop'>.</span><span class='hs-conid'>Monad</span><span class='hs-varop'>.</span><span class='hs-conid'>Cont</span>
+<a name="line-19"></a><span class='hs-keyword'>import</span> <span class='hs-conid'>Control</span><span class='hs-varop'>.</span><span class='hs-conid'>Monad</span><span class='hs-varop'>.</span><span class='hs-conid'>State</span>
+<a name="line-20"></a><span class='hs-keyword'>import</span> <span class='hs-conid'>Control</span><span class='hs-varop'>.</span><span class='hs-conid'>Monad</span><span class='hs-varop'>.</span><span class='hs-conid'>Error</span>
+<a name="line-21"></a><span class='hs-keyword'>import</span> <span class='hs-conid'>Control</span><span class='hs-varop'>.</span><span class='hs-conid'>Monad</span><span class='hs-varop'>.</span><span class='hs-conid'>Reader</span>
+<a name="line-22"></a><span class='hs-keyword'>import</span> <span class='hs-conid'>Control</span><span class='hs-varop'>.</span><span class='hs-conid'>Monad</span><span class='hs-varop'>.</span><span class='hs-conid'>Writer</span>
+<a name="line-23"></a><span class='hs-keyword'>import</span> <span class='hs-conid'>Control</span><span class='hs-varop'>.</span><span class='hs-conid'>Monad</span><span class='hs-varop'>.</span><span class='hs-conid'>RWS</span>
+<a name="line-24"></a>
+<a name="line-25"></a><a name="Yoneda"></a><span class='hs-keyword'>data</span> <span class='hs-conid'>Yoneda</span> <span class='hs-varid'>f</span> <span class='hs-varid'>a</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>Yoneda</span> <span class='hs-layout'>{</span> <span class='hs-varid'>getYoneda</span> <span class='hs-keyglyph'>::</span> <span class='hs-keyword'>forall</span> <span class='hs-varid'>b</span><span class='hs-varop'>.</span> <span class='hs-layout'>(</span><span class='hs-varid'>a</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-varid'>b</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-varid'>f</span> <span class='hs-varid'>b</span> <span class='hs-layout'>}</span> 
+<a name="line-26"></a>
+<a name="line-27"></a><span class='hs-keyword'>instance</span> <span class='hs-conid'>Functor</span> <span class='hs-layout'>(</span><span class='hs-conid'>Yoneda</span> <span class='hs-varid'>f</span><span class='hs-layout'>)</span> <span class='hs-keyword'>where</span>
+<a name="line-28"></a>    <span class='hs-varid'>fmap</span> <span class='hs-varid'>f</span> <span class='hs-varid'>m</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>Yoneda</span> <span class='hs-layout'>(</span><span class='hs-keyglyph'>\</span><span class='hs-varid'>k</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-varid'>getYoneda</span> <span class='hs-varid'>m</span> <span class='hs-layout'>(</span><span class='hs-varid'>k</span> <span class='hs-varop'>.</span> <span class='hs-varid'>f</span><span class='hs-layout'>)</span><span class='hs-layout'>)</span>
+<a name="line-29"></a>
+<a name="line-30"></a><span class='hs-keyword'>instance</span> <span class='hs-conid'>Applicative</span> <span class='hs-varid'>f</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>Applicative</span> <span class='hs-layout'>(</span><span class='hs-conid'>Yoneda</span> <span class='hs-varid'>f</span><span class='hs-layout'>)</span> <span class='hs-keyword'>where</span>
+<a name="line-31"></a>    <span class='hs-varid'>pure</span> <span class='hs-varid'>a</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>Yoneda</span> <span class='hs-layout'>(</span><span class='hs-keyglyph'>\</span><span class='hs-varid'>f</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-varid'>pure</span> <span class='hs-layout'>(</span><span class='hs-varid'>f</span> <span class='hs-varid'>a</span><span class='hs-layout'>)</span><span class='hs-layout'>)</span>
+<a name="line-32"></a>    <span class='hs-varid'>m</span> <span class='hs-varop'>&lt;*&gt;</span> <span class='hs-varid'>n</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>Yoneda</span> <span class='hs-layout'>(</span><span class='hs-keyglyph'>\</span><span class='hs-varid'>f</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-varid'>getYoneda</span> <span class='hs-varid'>m</span> <span class='hs-layout'>(</span><span class='hs-varid'>f</span> <span class='hs-varop'>.</span><span class='hs-layout'>)</span> <span class='hs-varop'>&lt;*&gt;</span> <span class='hs-varid'>getYoneda</span> <span class='hs-varid'>n</span> <span class='hs-varid'>id</span><span class='hs-layout'>)</span>
+<a name="line-33"></a>
+<a name="line-34"></a><span class='hs-keyword'>instance</span> <span class='hs-conid'>Monad</span> <span class='hs-varid'>f</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>Monad</span> <span class='hs-layout'>(</span><span class='hs-conid'>Yoneda</span> <span class='hs-varid'>f</span><span class='hs-layout'>)</span> <span class='hs-keyword'>where</span>
+<a name="line-35"></a>    <span class='hs-varid'>return</span> <span class='hs-varid'>a</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>Yoneda</span> <span class='hs-layout'>(</span><span class='hs-keyglyph'>\</span><span class='hs-varid'>f</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-varid'>return</span> <span class='hs-layout'>(</span><span class='hs-varid'>f</span> <span class='hs-varid'>a</span><span class='hs-layout'>)</span><span class='hs-layout'>)</span>
+<a name="line-36"></a>    <span class='hs-varid'>m</span> <span class='hs-varop'>&gt;&gt;=</span> <span class='hs-varid'>k</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>Yoneda</span> <span class='hs-layout'>(</span><span class='hs-keyglyph'>\</span><span class='hs-varid'>f</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-varid'>getYoneda</span> <span class='hs-varid'>m</span> <span class='hs-varid'>id</span> <span class='hs-varop'>&gt;&gt;=</span> <span class='hs-keyglyph'>\</span><span class='hs-varid'>a</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-varid'>getYoneda</span> <span class='hs-layout'>(</span><span class='hs-varid'>k</span> <span class='hs-varid'>a</span><span class='hs-layout'>)</span> <span class='hs-varid'>f</span><span class='hs-layout'>)</span>
+<a name="line-37"></a>
+<a name="line-38"></a><span class='hs-keyword'>instance</span> <span class='hs-conid'>MonadTrans</span> <span class='hs-conid'>Yoneda</span> <span class='hs-keyword'>where</span>
+<a name="line-39"></a>    <span class='hs-varid'>lift</span> <span class='hs-varid'>m</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>Yoneda</span> <span class='hs-layout'>(</span><span class='hs-keyglyph'>\</span><span class='hs-varid'>f</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-varid'>liftM</span> <span class='hs-varid'>f</span> <span class='hs-varid'>m</span><span class='hs-layout'>)</span>
+<a name="line-40"></a>
+<a name="line-41"></a><a name="Codensity"></a><span class='hs-keyword'>data</span> <span class='hs-conid'>Codensity</span> <span class='hs-varid'>f</span> <span class='hs-varid'>a</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>Codensity</span> <span class='hs-layout'>{</span> <span class='hs-varid'>getCodensity</span> <span class='hs-keyglyph'>::</span> <span class='hs-keyword'>forall</span> <span class='hs-varid'>b</span><span class='hs-varop'>.</span> <span class='hs-layout'>(</span><span class='hs-varid'>a</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-varid'>f</span> <span class='hs-varid'>b</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-varid'>f</span> <span class='hs-varid'>b</span> <span class='hs-layout'>}</span>
+<a name="line-42"></a>
+<a name="line-43"></a><span class='hs-keyword'>instance</span> <span class='hs-conid'>Functor</span> <span class='hs-layout'>(</span><span class='hs-conid'>Codensity</span> <span class='hs-varid'>k</span><span class='hs-layout'>)</span> <span class='hs-keyword'>where</span>
+<a name="line-44"></a>    <span class='hs-varid'>fmap</span> <span class='hs-varid'>f</span> <span class='hs-varid'>m</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>Codensity</span> <span class='hs-layout'>(</span><span class='hs-keyglyph'>\</span><span class='hs-varid'>k</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-varid'>getCodensity</span> <span class='hs-varid'>m</span> <span class='hs-layout'>(</span><span class='hs-varid'>k</span> <span class='hs-varop'>.</span> <span class='hs-varid'>f</span><span class='hs-layout'>)</span><span class='hs-layout'>)</span>
+<a name="line-45"></a>
+<a name="line-46"></a><span class='hs-keyword'>instance</span> <span class='hs-conid'>Applicative</span> <span class='hs-layout'>(</span><span class='hs-conid'>Codensity</span> <span class='hs-varid'>f</span><span class='hs-layout'>)</span> <span class='hs-keyword'>where</span>
+<a name="line-47"></a>    <span class='hs-varid'>pure</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>return</span>
+<a name="line-48"></a>    <span class='hs-layout'>(</span><span class='hs-varop'>&lt;*&gt;</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>ap</span>
+<a name="line-49"></a>
+<a name="line-50"></a><span class='hs-keyword'>instance</span> <span class='hs-conid'>Monad</span> <span class='hs-layout'>(</span><span class='hs-conid'>Codensity</span> <span class='hs-varid'>f</span><span class='hs-layout'>)</span> <span class='hs-keyword'>where</span>
+<a name="line-51"></a>    <span class='hs-varid'>return</span> <span class='hs-varid'>x</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>Codensity</span> <span class='hs-layout'>(</span><span class='hs-keyglyph'>\</span><span class='hs-varid'>k</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-varid'>k</span> <span class='hs-varid'>x</span><span class='hs-layout'>)</span>
+<a name="line-52"></a>    <span class='hs-varid'>m</span> <span class='hs-varop'>&gt;&gt;=</span> <span class='hs-varid'>k</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>Codensity</span> <span class='hs-layout'>(</span><span class='hs-keyglyph'>\</span><span class='hs-varid'>c</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-varid'>getCodensity</span> <span class='hs-varid'>m</span> <span class='hs-layout'>(</span><span class='hs-keyglyph'>\</span><span class='hs-varid'>a</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-varid'>getCodensity</span> <span class='hs-layout'>(</span><span class='hs-varid'>k</span> <span class='hs-varid'>a</span><span class='hs-layout'>)</span> <span class='hs-varid'>c</span><span class='hs-layout'>)</span><span class='hs-layout'>)</span>
+<a name="line-53"></a>
+<a name="line-54"></a><span class='hs-keyword'>instance</span> <span class='hs-conid'>MonadTrans</span> <span class='hs-conid'>Codensity</span> <span class='hs-keyword'>where</span>
+<a name="line-55"></a>    <span class='hs-varid'>lift</span> <span class='hs-varid'>m</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>Codensity</span> <span class='hs-layout'>(</span><span class='hs-varid'>m</span> <span class='hs-varop'>&gt;&gt;=</span><span class='hs-layout'>)</span>
+<a name="line-56"></a>
+<a name="line-57"></a><a name="runCodensity"></a><span class='hs-definition'>runCodensity</span> <span class='hs-keyglyph'>::</span> <span class='hs-conid'>Monad</span> <span class='hs-varid'>m</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>Codensity</span> <span class='hs-varid'>m</span> <span class='hs-varid'>a</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-varid'>m</span> <span class='hs-varid'>a</span>
+<a name="line-58"></a><span class='hs-definition'>runCodensity</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>flip</span> <span class='hs-varid'>getCodensity</span> <span class='hs-varid'>return</span>
+<a name="line-59"></a>
+<a name="line-60"></a><a name="runCodensityApp"></a><span class='hs-definition'>runCodensityApp</span> <span class='hs-keyglyph'>::</span> <span class='hs-conid'>Applicative</span> <span class='hs-varid'>f</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>Codensity</span> <span class='hs-varid'>f</span> <span class='hs-varid'>a</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-varid'>f</span> <span class='hs-varid'>a</span>
+<a name="line-61"></a><span class='hs-definition'>runCodensityApp</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>flip</span> <span class='hs-varid'>getCodensity</span> <span class='hs-varid'>pure</span>
+<a name="line-62"></a>
+<a name="line-63"></a><span class='hs-comment'>-- .. Pointed</span>
+<a name="line-64"></a>
+<a name="line-65"></a><a name="Ran"></a><span class='hs-keyword'>data</span> <span class='hs-conid'>Ran</span> <span class='hs-varid'>m</span> <span class='hs-varid'>a</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>Ran</span> <span class='hs-layout'>{</span> <span class='hs-varid'>getRan</span> <span class='hs-keyglyph'>::</span> <span class='hs-keyword'>forall</span> <span class='hs-varid'>b</span><span class='hs-varop'>.</span> <span class='hs-layout'>(</span><span class='hs-varid'>a</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-conid'>G</span> <span class='hs-varid'>m</span> <span class='hs-varid'>b</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-conid'>H</span> <span class='hs-varid'>m</span> <span class='hs-varid'>b</span> <span class='hs-layout'>}</span> 
+<a name="line-66"></a>
+<a name="line-67"></a><a name="RMonad"></a><span class='hs-keyword'>class</span> <span class='hs-conid'>Monad</span> <span class='hs-varid'>f</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>RMonad</span> <span class='hs-varid'>f</span> <span class='hs-keyword'>where</span>
+<a name="line-68"></a>    <span class='hs-keyword'>type</span> <span class='hs-conid'>G</span> <span class='hs-varid'>f</span>    <span class='hs-keyglyph'>::</span> <span class='hs-varop'>*</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-varop'>*</span>
+<a name="line-69"></a>    <span class='hs-keyword'>type</span> <span class='hs-conid'>H</span> <span class='hs-varid'>f</span>    <span class='hs-keyglyph'>::</span> <span class='hs-varop'>*</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-varop'>*</span>
+<a name="line-70"></a>    <span class='hs-varid'>toRan</span>      <span class='hs-keyglyph'>::</span> <span class='hs-varid'>f</span> <span class='hs-varid'>a</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-conid'>Ran</span> <span class='hs-varid'>f</span> <span class='hs-varid'>a</span>
+<a name="line-71"></a>    <span class='hs-varid'>fromRan</span>    <span class='hs-keyglyph'>::</span> <span class='hs-conid'>Ran</span> <span class='hs-varid'>f</span> <span class='hs-varid'>a</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-varid'>f</span> <span class='hs-varid'>a</span>
+<a name="line-72"></a>
+<a name="line-73"></a><span class='hs-comment'>--class RMonadTrans t where</span>
+<a name="line-74"></a><span class='hs-comment'>--    liftR :: RMonad m =&gt; RanT m a -&gt; RanT (t m) a</span>
+<a name="line-75"></a>
+<a name="line-76"></a><a name="Hom"></a><span class='hs-comment'>-- utility bifunctors for definitions below</span>
+<a name="line-77"></a><a name="Hom"></a><span class='hs-keyword'>type</span> <span class='hs-conid'>Hom</span> <span class='hs-keyglyph'>=</span> <span class='hs-layout'>(</span><span class='hs-keyglyph'>-&gt;</span><span class='hs-layout'>)</span>
+<a name="line-78"></a><span class='hs-keyword'>type</span> <span class='hs-layout'>(</span><span class='hs-conop'>:-&gt;</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>ReaderT</span>
+<a name="line-79"></a>
+<a name="line-80"></a><a name="ErrorH"></a><span class='hs-keyword'>data</span> <span class='hs-conid'>ErrorH</span> <span class='hs-varid'>b</span> <span class='hs-varid'>r</span>  <span class='hs-keyglyph'>=</span> <span class='hs-conid'>ErrorH</span> <span class='hs-layout'>{</span> <span class='hs-varid'>getErrorH</span> <span class='hs-keyglyph'>::</span> <span class='hs-layout'>(</span><span class='hs-varid'>b</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-varid'>r</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-varid'>r</span> <span class='hs-layout'>}</span> 
+<a name="line-81"></a><a name="ErrorTH"></a><span class='hs-keyword'>data</span> <span class='hs-conid'>ErrorTH</span> <span class='hs-varid'>b</span> <span class='hs-varid'>m</span> <span class='hs-varid'>r</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>ErrorTH</span> <span class='hs-layout'>{</span> <span class='hs-varid'>getErrorTH</span> <span class='hs-keyglyph'>::</span> <span class='hs-layout'>(</span><span class='hs-varid'>b</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-conid'>G</span> <span class='hs-varid'>m</span> <span class='hs-varid'>r</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-conid'>H</span> <span class='hs-varid'>m</span> <span class='hs-varid'>r</span> <span class='hs-layout'>}</span>
+<a name="line-82"></a>
+<a name="line-83"></a><span class='hs-comment'>-- Yoneda Identity</span>
+<a name="line-84"></a><span class='hs-comment'>-- forall o. (a -&gt; o) -&gt; o</span>
+<a name="line-85"></a><span class='hs-keyword'>instance</span> <span class='hs-conid'>RMonad</span> <span class='hs-conid'>Identity</span> <span class='hs-keyword'>where</span>
+<a name="line-86"></a>    <span class='hs-keyword'>type</span> <span class='hs-conid'>G</span> <span class='hs-conid'>Identity</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>Identity</span>
+<a name="line-87"></a>    <span class='hs-keyword'>type</span> <span class='hs-conid'>H</span> <span class='hs-conid'>Identity</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>Identity</span>
+<a name="line-88"></a>    <span class='hs-varid'>toRan</span> <span class='hs-varid'>m</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>Ran</span> <span class='hs-layout'>(</span><span class='hs-varid'>m</span> <span class='hs-varop'>&gt;&gt;=</span><span class='hs-layout'>)</span>
+<a name="line-89"></a>    <span class='hs-varid'>fromRan</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>flip</span> <span class='hs-varid'>getRan</span> <span class='hs-conid'>Identity</span>
+<a name="line-90"></a>
+<a name="line-91"></a><span class='hs-comment'>-- Yoneda Endo</span>
+<a name="line-92"></a><span class='hs-comment'>-- forall o. (a -&gt; o) -&gt; o -&gt; o</span>
+<a name="line-93"></a><span class='hs-keyword'>instance</span> <span class='hs-conid'>RMonad</span> <span class='hs-conid'>Maybe</span> <span class='hs-keyword'>where</span>
+<a name="line-94"></a>    <span class='hs-keyword'>type</span> <span class='hs-conid'>G</span> <span class='hs-conid'>Maybe</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>Identity</span>
+<a name="line-95"></a>    <span class='hs-keyword'>type</span> <span class='hs-conid'>H</span> <span class='hs-conid'>Maybe</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>Endo</span>
+<a name="line-96"></a>    <span class='hs-varid'>toRan</span> <span class='hs-layout'>(</span><span class='hs-conid'>Just</span> <span class='hs-varid'>x</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>Ran</span> <span class='hs-layout'>(</span><span class='hs-keyglyph'>\</span><span class='hs-varid'>k</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-conid'>Endo</span> <span class='hs-layout'>(</span><span class='hs-keyglyph'>\</span><span class='hs-keyword'>_</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-varid'>runIdentity</span> <span class='hs-layout'>(</span><span class='hs-varid'>k</span> <span class='hs-varid'>x</span><span class='hs-layout'>)</span><span class='hs-layout'>)</span><span class='hs-layout'>)</span>
+<a name="line-97"></a>    <span class='hs-varid'>toRan</span> <span class='hs-conid'>Nothing</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>Ran</span> <span class='hs-layout'>(</span><span class='hs-keyglyph'>\</span><span class='hs-keyword'>_</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-conid'>Endo</span> <span class='hs-varid'>id</span><span class='hs-layout'>)</span>
+<a name="line-98"></a>    <span class='hs-varid'>fromRan</span> <span class='hs-layout'>(</span><span class='hs-conid'>Ran</span> <span class='hs-varid'>f</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>appEndo</span> <span class='hs-layout'>(</span><span class='hs-varid'>f</span> <span class='hs-layout'>(</span><span class='hs-conid'>Identity</span> <span class='hs-varop'>.</span> <span class='hs-conid'>Just</span><span class='hs-layout'>)</span><span class='hs-layout'>)</span> <span class='hs-conid'>Nothing</span>
+<a name="line-99"></a>
+<a name="line-100"></a><span class='hs-comment'>-- Yoneda (ErrorH b)</span>
+<a name="line-101"></a><span class='hs-comment'>-- forall o. (a -&gt; o) -&gt; (b -&gt; o) -&gt; o</span>
+<a name="line-102"></a><span class='hs-keyword'>instance</span> <span class='hs-conid'>Error</span> <span class='hs-varid'>b</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>RMonad</span> <span class='hs-layout'>(</span><span class='hs-conid'>Either</span> <span class='hs-varid'>b</span><span class='hs-layout'>)</span> <span class='hs-keyword'>where</span>
+<a name="line-103"></a>    <span class='hs-keyword'>type</span> <span class='hs-conid'>G</span> <span class='hs-layout'>(</span><span class='hs-conid'>Either</span> <span class='hs-varid'>b</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>Identity</span>
+<a name="line-104"></a>    <span class='hs-keyword'>type</span> <span class='hs-conid'>H</span> <span class='hs-layout'>(</span><span class='hs-conid'>Either</span> <span class='hs-varid'>b</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>ErrorH</span> <span class='hs-varid'>b</span>
+<a name="line-105"></a>
+<a name="line-106"></a><span class='hs-comment'>-- Yoneda (ErrorTH b m)</span>
+<a name="line-107"></a><span class='hs-comment'>-- forall o. (a -&gt; G m o) -&gt; (b -&gt; G m o) -&gt; H m o</span>
+<a name="line-108"></a><span class='hs-keyword'>instance</span> <span class='hs-layout'>(</span><span class='hs-conid'>RMonad</span> <span class='hs-varid'>m</span><span class='hs-layout'>,</span> <span class='hs-conid'>Error</span> <span class='hs-varid'>b</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>RMonad</span> <span class='hs-layout'>(</span><span class='hs-conid'>ErrorT</span> <span class='hs-varid'>b</span> <span class='hs-varid'>m</span><span class='hs-layout'>)</span> <span class='hs-keyword'>where</span>
+<a name="line-109"></a>   <span class='hs-keyword'>type</span> <span class='hs-conid'>G</span> <span class='hs-layout'>(</span><span class='hs-conid'>ErrorT</span> <span class='hs-varid'>b</span> <span class='hs-varid'>m</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>G</span> <span class='hs-varid'>m</span> 
+<a name="line-110"></a>   <span class='hs-keyword'>type</span> <span class='hs-conid'>H</span> <span class='hs-layout'>(</span><span class='hs-conid'>ErrorT</span> <span class='hs-varid'>b</span> <span class='hs-varid'>m</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>ErrorTH</span> <span class='hs-varid'>b</span> <span class='hs-varid'>m</span>
+<a name="line-111"></a>
+<a name="line-112"></a><span class='hs-comment'>-- Yoneda f</span>
+<a name="line-113"></a><span class='hs-comment'>-- forall o. (a -&gt; o) -&gt; f o </span>
+<a name="line-114"></a><span class='hs-keyword'>instance</span> <span class='hs-conid'>Monad</span> <span class='hs-varid'>f</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>RMonad</span> <span class='hs-layout'>(</span><span class='hs-conid'>Yoneda</span> <span class='hs-varid'>f</span><span class='hs-layout'>)</span> <span class='hs-keyword'>where</span>
+<a name="line-115"></a>    <span class='hs-keyword'>type</span> <span class='hs-conid'>G</span> <span class='hs-layout'>(</span><span class='hs-conid'>Yoneda</span> <span class='hs-varid'>f</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>Identity</span>
+<a name="line-116"></a>    <span class='hs-keyword'>type</span> <span class='hs-conid'>H</span> <span class='hs-layout'>(</span><span class='hs-conid'>Yoneda</span> <span class='hs-varid'>f</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>f</span>
+<a name="line-117"></a>
+<a name="line-118"></a><span class='hs-comment'>-- Codensity f</span>
+<a name="line-119"></a><span class='hs-comment'>-- forall o. (a -&gt; f o) -&gt; f o </span>
+<a name="line-120"></a><span class='hs-keyword'>instance</span> <span class='hs-conid'>RMonad</span> <span class='hs-layout'>(</span><span class='hs-conid'>Codensity</span> <span class='hs-varid'>f</span><span class='hs-layout'>)</span> <span class='hs-keyword'>where</span>
+<a name="line-121"></a>    <span class='hs-keyword'>type</span> <span class='hs-conid'>G</span> <span class='hs-layout'>(</span><span class='hs-conid'>Codensity</span> <span class='hs-varid'>f</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>f</span>
+<a name="line-122"></a>    <span class='hs-keyword'>type</span> <span class='hs-conid'>H</span> <span class='hs-layout'>(</span><span class='hs-conid'>Codensity</span> <span class='hs-varid'>f</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>f</span>
+<a name="line-123"></a>
+<a name="line-124"></a><span class='hs-comment'>-- Yoneda (Reader r)</span>
+<a name="line-125"></a><span class='hs-comment'>-- forall o. (a -&gt; o) -&gt; r -&gt; o</span>
+<a name="line-126"></a><span class='hs-keyword'>instance</span> <span class='hs-conid'>RMonad</span> <span class='hs-layout'>(</span><span class='hs-conid'>Reader</span> <span class='hs-varid'>e</span><span class='hs-layout'>)</span> <span class='hs-keyword'>where</span>
+<a name="line-127"></a>    <span class='hs-keyword'>type</span> <span class='hs-conid'>G</span> <span class='hs-layout'>(</span><span class='hs-conid'>Reader</span> <span class='hs-varid'>e</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>Identity</span>
+<a name="line-128"></a>    <span class='hs-keyword'>type</span> <span class='hs-conid'>H</span> <span class='hs-layout'>(</span><span class='hs-conid'>Reader</span> <span class='hs-varid'>e</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>Hom</span> <span class='hs-varid'>e</span>
+<a name="line-129"></a>
+<a name="line-130"></a><span class='hs-comment'>-- embedded as CPS'd State to avoid superfluous 'mappend mempty' calls</span>
+<a name="line-131"></a><span class='hs-comment'>-- specialized Codensity (Reader w)</span>
+<a name="line-132"></a><span class='hs-comment'>-- forall o. (a -&gt; w -&gt; o) -&gt; w -&gt; o</span>
+<a name="line-133"></a><span class='hs-keyword'>instance</span> <span class='hs-conid'>Monoid</span> <span class='hs-varid'>w</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>RMonad</span> <span class='hs-layout'>(</span><span class='hs-conid'>Writer</span> <span class='hs-varid'>w</span><span class='hs-layout'>)</span> <span class='hs-keyword'>where</span>
+<a name="line-134"></a>    <span class='hs-keyword'>type</span> <span class='hs-conid'>G</span> <span class='hs-layout'>(</span><span class='hs-conid'>Writer</span> <span class='hs-varid'>w</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>Hom</span> <span class='hs-varid'>w</span>
+<a name="line-135"></a>    <span class='hs-keyword'>type</span> <span class='hs-conid'>H</span> <span class='hs-layout'>(</span><span class='hs-conid'>Writer</span> <span class='hs-varid'>w</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>Hom</span> <span class='hs-varid'>w</span>
+<a name="line-136"></a>    <span class='hs-comment'>-- forall o. (a -&gt; w -&gt; o) -&gt; o</span>
+<a name="line-137"></a>    <span class='hs-comment'>-- type H (Writer w) = Identity</span>
+<a name="line-138"></a>
+<a name="line-139"></a><span class='hs-comment'>-- Codensity (Reader s)</span>
+<a name="line-140"></a><span class='hs-comment'>-- forall o. (a -&gt; s -&gt; o) -&gt; s -&gt; o</span>
+<a name="line-141"></a><span class='hs-keyword'>instance</span> <span class='hs-conid'>RMonad</span> <span class='hs-layout'>(</span><span class='hs-conid'>State</span> <span class='hs-varid'>s</span><span class='hs-layout'>)</span> <span class='hs-keyword'>where</span>
+<a name="line-142"></a>    <span class='hs-keyword'>type</span> <span class='hs-conid'>G</span> <span class='hs-layout'>(</span><span class='hs-conid'>State</span> <span class='hs-varid'>s</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>Hom</span> <span class='hs-varid'>s</span>
+<a name="line-143"></a>    <span class='hs-keyword'>type</span> <span class='hs-conid'>H</span> <span class='hs-layout'>(</span><span class='hs-conid'>State</span> <span class='hs-varid'>s</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>Hom</span> <span class='hs-varid'>s</span>
+<a name="line-144"></a>
+<a name="line-145"></a><span class='hs-comment'>-- Codensity (Const r)</span>
+<a name="line-146"></a><span class='hs-comment'>-- (a -&gt; r) -&gt; r</span>
+<a name="line-147"></a><span class='hs-keyword'>instance</span> <span class='hs-conid'>RMonad</span> <span class='hs-layout'>(</span><span class='hs-conid'>Cont</span> <span class='hs-varid'>r</span><span class='hs-layout'>)</span> <span class='hs-keyword'>where</span>
+<a name="line-148"></a>    <span class='hs-keyword'>type</span> <span class='hs-conid'>G</span> <span class='hs-layout'>(</span><span class='hs-conid'>Cont</span> <span class='hs-varid'>r</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>Const</span> <span class='hs-varid'>r</span>
+<a name="line-149"></a>    <span class='hs-keyword'>type</span> <span class='hs-conid'>H</span> <span class='hs-layout'>(</span><span class='hs-conid'>Cont</span> <span class='hs-varid'>r</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>Const</span> <span class='hs-varid'>r</span>
+<a name="line-150"></a>
+<a name="line-151"></a><span class='hs-comment'>-- forall o. (a -&gt; G m o) -&gt; r -&gt; H m o </span>
+<a name="line-152"></a><span class='hs-keyword'>instance</span> <span class='hs-conid'>RMonad</span> <span class='hs-varid'>m</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>RMonad</span> <span class='hs-layout'>(</span><span class='hs-conid'>ReaderT</span> <span class='hs-varid'>e</span> <span class='hs-varid'>m</span><span class='hs-layout'>)</span> <span class='hs-keyword'>where</span>
+<a name="line-153"></a>    <span class='hs-keyword'>type</span> <span class='hs-conid'>G</span> <span class='hs-layout'>(</span><span class='hs-conid'>ReaderT</span> <span class='hs-varid'>e</span> <span class='hs-varid'>m</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>G</span> <span class='hs-varid'>m</span>
+<a name="line-154"></a>    <span class='hs-keyword'>type</span> <span class='hs-conid'>H</span> <span class='hs-layout'>(</span><span class='hs-conid'>ReaderT</span> <span class='hs-varid'>e</span> <span class='hs-varid'>m</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>e</span> <span class='hs-conop'>:-&gt;</span> <span class='hs-conid'>H</span> <span class='hs-varid'>m</span>
+<a name="line-155"></a>
+<a name="line-156"></a><span class='hs-comment'>-- forall o. (a -&gt; w -&gt; G m o) -&gt; H m o</span>
+<a name="line-157"></a><span class='hs-keyword'>instance</span> <span class='hs-layout'>(</span><span class='hs-conid'>Monoid</span> <span class='hs-varid'>w</span><span class='hs-layout'>,</span> <span class='hs-conid'>RMonad</span> <span class='hs-varid'>m</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>RMonad</span> <span class='hs-layout'>(</span><span class='hs-conid'>WriterT</span> <span class='hs-varid'>w</span> <span class='hs-varid'>m</span><span class='hs-layout'>)</span> <span class='hs-keyword'>where</span>
+<a name="line-158"></a>    <span class='hs-keyword'>type</span> <span class='hs-conid'>G</span> <span class='hs-layout'>(</span><span class='hs-conid'>WriterT</span> <span class='hs-varid'>w</span> <span class='hs-varid'>m</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>w</span> <span class='hs-conop'>:-&gt;</span> <span class='hs-conid'>G</span> <span class='hs-varid'>m</span>
+<a name="line-159"></a>    <span class='hs-keyword'>type</span> <span class='hs-conid'>H</span> <span class='hs-layout'>(</span><span class='hs-conid'>WriterT</span> <span class='hs-varid'>w</span> <span class='hs-varid'>m</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>H</span> <span class='hs-varid'>m</span>
+<a name="line-160"></a>
+<a name="line-161"></a><span class='hs-comment'>-- forall o. (a -&gt; s -&gt; G m o) -&gt; s -&gt; H m o </span>
+<a name="line-162"></a><span class='hs-keyword'>instance</span> <span class='hs-conid'>RMonad</span> <span class='hs-varid'>m</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>RMonad</span> <span class='hs-layout'>(</span><span class='hs-conid'>StateT</span> <span class='hs-varid'>s</span> <span class='hs-varid'>m</span><span class='hs-layout'>)</span> <span class='hs-keyword'>where</span>
+<a name="line-163"></a>    <span class='hs-keyword'>type</span> <span class='hs-conid'>G</span> <span class='hs-layout'>(</span><span class='hs-conid'>StateT</span> <span class='hs-varid'>s</span> <span class='hs-varid'>m</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>s</span> <span class='hs-conop'>:-&gt;</span> <span class='hs-conid'>G</span> <span class='hs-varid'>m</span>
+<a name="line-164"></a>    <span class='hs-keyword'>type</span> <span class='hs-conid'>H</span> <span class='hs-layout'>(</span><span class='hs-conid'>StateT</span> <span class='hs-varid'>s</span> <span class='hs-varid'>m</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>s</span> <span class='hs-conop'>:-&gt;</span> <span class='hs-conid'>H</span> <span class='hs-varid'>m</span>
+<a name="line-165"></a>
+<a name="line-166"></a><a name="ConstT"></a><span class='hs-comment'>-- (a -&gt; G m r) -&gt; H m r</span>
+<a name="line-167"></a><a name="ConstT"></a><span class='hs-keyword'>data</span> <span class='hs-conid'>ConstT</span> <span class='hs-varid'>r</span> <span class='hs-varid'>f</span> <span class='hs-varid'>a</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>ConstT</span> <span class='hs-layout'>{</span> <span class='hs-varid'>getConstT</span> <span class='hs-keyglyph'>::</span> <span class='hs-varid'>f</span> <span class='hs-varid'>r</span> <span class='hs-layout'>}</span> 
+<a name="line-168"></a><span class='hs-keyword'>instance</span> <span class='hs-conid'>RMonad</span> <span class='hs-varid'>m</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>RMonad</span> <span class='hs-layout'>(</span><span class='hs-conid'>ContT</span> <span class='hs-varid'>r</span> <span class='hs-varid'>m</span><span class='hs-layout'>)</span> <span class='hs-keyword'>where</span>
+<a name="line-169"></a>    <span class='hs-keyword'>type</span> <span class='hs-conid'>G</span> <span class='hs-layout'>(</span><span class='hs-conid'>ContT</span> <span class='hs-varid'>r</span> <span class='hs-varid'>m</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>ConstT</span> <span class='hs-varid'>r</span> <span class='hs-layout'>(</span><span class='hs-conid'>G</span> <span class='hs-varid'>m</span><span class='hs-layout'>)</span>
+<a name="line-170"></a>    <span class='hs-keyword'>type</span> <span class='hs-conid'>H</span> <span class='hs-layout'>(</span><span class='hs-conid'>ContT</span> <span class='hs-varid'>r</span> <span class='hs-varid'>m</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>ConstT</span> <span class='hs-varid'>r</span> <span class='hs-layout'>(</span><span class='hs-conid'>H</span> <span class='hs-varid'>m</span><span class='hs-layout'>)</span>
+</pre></body>
+</html>
addfile ./doc/html/monad-ran/src/hscolour.css
hunk ./doc/html/monad-ran/src/hscolour.css 1
+.hs-keyglyph, .hs-layout {color: red;}
+.hs-keyword {color: blue;}
+.hs-comment, .hs-comment a {color: green;}
+.hs-str, .hs-chr {color: teal;}
+.hs-keyword, .hs-conid, .hs-varid, .hs-conop, .hs-varop, .hs-num, .hs-cpp, .hs-sel, .hs-definition {}
}
