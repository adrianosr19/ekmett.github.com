[0.50.2 infix natural transformations
ekmett@gmail.com**20080518160132] {
hunk ./category-extras.cabal 3
-version:                0.50.1
+version:                0.50.2
hunk ./category-extras.cabal 38
-        build-depends:  base > 3, mtl, array, ghc > 6.9
+        build-depends:  base > 3, mtl, array
hunk ./src/Control/Comonad/HigherOrder.hs 20
-import Control.Functor.Extras (Natural)
+import Control.Functor.Extras
hunk ./src/Control/Comonad/HigherOrder.hs 24
-	hextend  :: (Functor f, Functor g) => Natural (w f) g -> Natural (w f) (w g)
+	hextend  :: (Functor f, Functor g) => (w f :~> g) -> w f :~> w g
hunk ./src/Control/Comonad/HigherOrder.hs 27
-hduplicate :: (HComonad w, Functor (w g), Functor g) => w g a -> w (w g) a
+hduplicate :: (HComonad w, Functor (w g), Functor g) => w g :~> w (w g)
hunk ./src/Control/Functor/Adjunction/HigherOrder.hs 21
-        hunit   :: Natural a (g (f a))
-        hcounit :: Natural (f (g b)) b
-        hleftAdjunct  :: Natural (f a) b -> Natural a (g b)
-        hrightAdjunct :: Natural a (g b) -> Natural (f a) b
+        hunit   :: a :~> g (f a)
+        hcounit :: f (g b) :~> b
+        hleftAdjunct  :: (f a :~> b) -> a :~> g b
+        hrightAdjunct :: (a :~> g b) -> f a :~> b
hunk ./src/Control/Functor/Composition.hs 33
-class Composition c where
-	decompose  :: c f g x -> f (g x)
-	compose    :: f (g x) -> c f g x
+class Composition o where
+	decompose  :: (f `o` g) x -> f (g x)
+	compose    :: f (g x) -> (f `o` g) x
hunk ./src/Control/Functor/Extras.hs 15
+infixr 0 :~>, :~~> -- to match ->
+
hunk ./src/Control/Functor/Extras.hs 18
-type Natural f g = forall a. f a -> g a
+-- A natural transformation between functors f and g.
+type f :~> g = forall a. f a -> g a
+type f :~~> g = forall a b. f a b -> g a b
hunk ./src/Control/Functor/HigherOrder/Composition.hs 18
-	, hassociateComp
-	, hcoassociateComp
+	, hassociateComposition
+	, hcoassociateComposition
hunk ./src/Control/Functor/HigherOrder/Composition.hs 25
-	(c :: ((* -> *) -> * -> *) -> 
+	(o :: ((* -> *) -> * -> *) -> 
hunk ./src/Control/Functor/HigherOrder/Composition.hs 28
-	hcompose :: f (g x) a ->  c f g x a
-	hdecompose :: c f g x a -> f (g x) a
+	hcompose :: f (g h) a ->  (f `o` g) h a
+	hdecompose :: (f `o` g) h a -> f (g h) a
hunk ./src/Control/Functor/HigherOrder/Composition.hs 47
-hassociateComp :: (HFunctor f, HComposition c) => c (c f g) h a b -> c f (c g h) a b
-hassociateComp = hcompose . hfmap hcompose . hdecompose . hdecompose
+hassociateComposition :: (HFunctor f, HComposition o) => ((f `o` g) `o` h) a b -> (f `o` (g `o` h)) a b
+hassociateComposition = hcompose . hfmap hcompose . hdecompose . hdecompose
hunk ./src/Control/Functor/HigherOrder/Composition.hs 50
-hcoassociateComp :: (HFunctor f, HComposition c) => c f (c g h) a b -> c (c f g) h a b
-hcoassociateComp = hcompose . hcompose . hfmap hdecompose . hdecompose
+hcoassociateComposition :: (HFunctor f, HComposition o) => (f `o` (g `o` h)) a b -> ((f `o` g) `o` h) a b
+hcoassociateComposition = hcompose . hcompose . hfmap hdecompose . hdecompose
hunk ./src/Control/Functor/HigherOrder.hs 28
-type AlgH f g = Natural (f g) g
-type CoAlgH f g = Natural g (f g)
+type AlgH f g = f g :~> g
+type CoAlgH f g = g :~> f g
hunk ./src/Control/Functor/HigherOrder.hs 33
-	hfmap :: Natural g h -> Natural (f g) (f h)
+	hfmap :: g :~> h -> f g :~> f h
hunk ./src/Control/Functor/KanExtension.hs 34
-toRan :: (Composition c, Functor k) => Natural (c k g) h -> Natural k (Ran g h)
+toRan :: (Composition o, Functor k) => (k `o` g :~> h) -> k :~> Ran g h
hunk ./src/Control/Functor/KanExtension.hs 37
-fromRan :: Composition c => Natural k (Ran g h) -> Natural (c k g) h
+fromRan :: Composition o => (k :~> Ran g h) -> (k `o` g) :~> h
hunk ./src/Control/Functor/KanExtension.hs 57
-toLan :: (Composition c, Functor f) => Natural h (c f g) -> Natural (Lan g h) f
+toLan :: (Composition o, Functor f) => (h :~> (f `o` g)) -> Lan g h :~> f
hunk ./src/Control/Functor/KanExtension.hs 60
-fromLan :: Composition c => Natural (Lan g h) f -> Natural h (c f g)
+fromLan :: Composition o => (Lan g h :~> f) -> h :~> (f `o` g)
hunk ./src/Control/Monad/HigherOrder.hs 20
-import Control.Functor.Extras (Natural)
+import Control.Functor.Extras 
hunk ./src/Control/Monad/HigherOrder.hs 27
-	hbind   :: (Functor f, Functor g) => Natural f (m g) -> Natural (m f) (m g)
+	hbind   :: (Functor f, Functor g) => (f :~> m g) -> m f :~> m g
hunk ./src/Control/Monad/HigherOrder.hs 29
-hjoin :: (HMonad m, Functor (m g), Functor g) => m (m g) a -> m g a
+hjoin :: (HMonad m, Functor (m g), Functor g) => m (m g) :~> m g
hunk ./src/Control/Monad/HigherOrder.hs 32
-(>>**=) :: (HMonad m, Functor f, Functor g) => m f a -> Natural f (m g) -> m g a
+(>>**=) :: (HMonad m, Functor f, Functor g) => m f a -> (f :~> m g) -> m g a
hunk ./src/Control/Monad/HigherOrder.hs 35
-(=**<<) :: (HMonad m, Functor f, Functor g) => Natural f (m g) -> Natural (m f) (m g)
+(=**<<) :: (HMonad m, Functor f, Functor g) => (f :~> m g) -> m f :~> m g
hunk ./src/Control/Morphism/Ana.hs 45
-hana :: HFunctor f => CoAlgH f a -> Natural a (FixH f)
+hana :: HFunctor f => CoAlgH f a -> a :~> FixH f
hunk ./src/Control/Morphism/Cata.hs 42
-hcata :: HFunctor f => AlgH f a -> Natural (FixH f) a
+hcata :: HFunctor f => AlgH f a -> FixH f :~> a
hunk ./src/Control/Morphism/Chrono.hs 24
-chrono :: (Functor f, Functor g) => AlgW g (Cofree g) b -> Natural f g -> CoAlgM f (Free f) a -> a -> b
+chrono :: (Functor f, Functor g) => AlgW g (Cofree g) b -> (f :~> g) -> CoAlgM f (Free f) a -> a -> b
hunk ./src/Control/Morphism/Chrono.hs 28
-	    Dist g h -> Dist j f -> AlgW g (Cofree h) b -> Natural f g -> CoAlgM f (Free j) a -> a -> b
+	    Dist g h -> Dist j f -> AlgW g (Cofree h) b -> (f :~> g) -> CoAlgM f (Free j) a -> a -> b
hunk ./src/Control/Morphism/Dyna.hs 22
-dyna :: (Functor f, Functor g) => AlgW g (Cofree g) b -> Natural f g -> CoAlg f a -> a -> b
+dyna :: (Functor f, Functor g) => AlgW g (Cofree g) b -> (f :~> g) -> CoAlg f a -> a -> b
hunk ./src/Control/Morphism/Hylo.hs 26
-hylo :: Functor f => Alg g b -> Natural f g -> CoAlg f a -> a -> b
+hylo :: Functor f => Alg g b -> (f :~> g) -> CoAlg f a -> a -> b
hunk ./src/Control/Morphism/Hylo.hs 30
-          Dist g w -> Dist m f -> AlgW g w b -> Natural f g -> CoAlgM f m a -> a -> b
+          Dist g w -> Dist m f -> AlgW g w b -> (f :~> g) -> CoAlgM f m a -> a -> b
hunk ./src/Control/Morphism/Hylo.hs 35
-bihylo :: (QFunctor f Hask Hask) => Alg (g d) b -> Natural (f c) (g d) -> CoAlg (f c) a -> a -> b
+bihylo :: (QFunctor f Hask Hask) => Alg (g d) b -> (f c :~> g d) -> CoAlg (f c) a -> a -> b
hunk ./src/Control/Morphism/Hylo.hs 39
-          Dist (g d) w -> Dist m (f c) -> AlgW (g d) w b -> Natural (f c) (g d) -> CoAlgM (f c) m a -> a -> b
+          Dist (g d) w -> Dist m (f c) -> AlgW (g d) w b -> (f c :~> g d) -> CoAlgM (f c) m a -> a -> b
hunk ./src/Control/Morphism/Hylo.hs 43
-hhylo :: HFunctor f => AlgH f b -> CoAlgH f a -> Natural a b
+hhylo :: HFunctor f => AlgH f b -> CoAlgH f a -> a :~> b
}
