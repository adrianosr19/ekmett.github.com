[stripped Cont
ekmett@gmail.com**20090413084302
 Ignore-this: 831ddc8349c1d0bc4cda165f84535303
] {
hunk ./src/Control/Monad/Ran/Cont.hs 2
-    ( Cont
+    ( Cont(..)
hunk ./src/Control/Monad/Ran/Cont.hs 4
-    , idCont
-    , mapCont
-    , withCont
-    , shift
-    , reset
-    , Cont'(..)
-    , runCont'
hunk ./src/Control/Monad/Ran/Cont.hs 9
-import Control.Monad.Ran.Codensity
-import Unsafe.Coerce
hunk ./src/Control/Monad/Ran/Cont.hs 10
-
-newtype Cont r a = Cont {getCont :: forall o. (a -> r) -> (r -> o) -> o}
-
-instance Functor (Cont r) where
-    fmap f (Cont g) = Cont (\k -> g (k . f))
-
-instance Applicative (Cont r) where
-    pure = return
-    (<*>) = ap
-
-instance Monad (Cont r) where
-    return a = Cont (\k z -> z (k a))
-    Cont g >>= f = Cont (\k -> g (\a -> getCont (f a) k id))
-
-runCont :: Cont r a -> (a -> r) -> r
-runCont (Cont g) = flip g id
-
-idCont :: Cont a a -> a
-idCont = flip runCont id
-
-mapCont :: (r -> r) -> Cont r a -> Cont r a
-mapCont f (Cont g) = Cont (\k -> g (f . k))
--- mapCont f (Cont g) = Cont (\k z -> g k (z . f))
-
-withCont :: ((b -> r) -> (a -> r)) -> Cont r a -> Cont r b
-withCont f (Cont g) = Cont (g . f)
--- withCont f (Cont g) = Cont (\k -> g (f k))
-
-instance MonadCont (Cont r) where
-    callCC f = Cont (\k -> getCont (f (\a -> Cont (\_ h -> (h . k) a))) k)
-
-shift  :: ((a -> Cont s r) -> Cont r r) -> Cont r a
-shift f = Cont (\k -> getCont (f (\a -> Cont (\e h -> (h . e . k) a))) id)
-
-reset :: Cont a a -> Cont r a
-reset m = Cont (\k z -> (z . k) (runCont m id))
+import Control.Monad.Ran
+import Control.Monad.Ran.Codensity
hunk ./src/Control/Monad/Ran/Cont.hs 14
-newtype Cont' r a = Cont' { getCont' :: Codensity (Const r) a } 
-    deriving (Functor,Applicative,Monad)
+newtype Cont r a = Cont { getCont :: Codensity (Const r) a } 
+    deriving (Functor,Applicative,Monad,RanIso (Const r) (Const r))
hunk ./src/Control/Monad/Ran/Cont.hs 17
-instance MonadCont (Cont' r) where
-     callCC f =  Cont' (Codensity (\k -> getCodensity (getCont' (f (\a -> Cont' (Codensity (\_ -> Const (getConst ((k a)))))))) k))
+instance MonadCont (Cont r) where
+     callCC f =  Cont (Codensity (\k -> getCodensity (getCont (f (\a -> Cont (Codensity (\_ -> Const (getConst ((k a)))))))) k))
hunk ./src/Control/Monad/Ran/Cont.hs 20
-runCont' :: Cont' r a -> (a -> r) -> r
-runCont' (Cont' f) k = getConst (getCodensity f (Const . k))
+runCont :: Cont r a -> (a -> r) -> r
+runCont (Cont f) k = getConst (getCodensity f (Const . k))
}
