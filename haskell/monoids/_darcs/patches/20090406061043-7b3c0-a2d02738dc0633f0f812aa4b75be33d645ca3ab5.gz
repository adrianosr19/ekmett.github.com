[added Ringoids and Kleene Algebras. cleaned up Data.Ring.Module.AutomaticDifferentiation
ekmett@gmail.com**20090406061043
 Ignore-this: cf1214d62164f70bc31ae8279feb8db1
] {
hunk ./Data/Monoid/Applicative.hs 76
+instance (Alternative f, Monoid a) => Ringoid (Alt f a)
+
hunk ./Data/Monoid/Lexical/SourcePosition.hs 1
-{-# LANGUAGE FlexibleInstances, MultiParamTypeClasses, OverloadedStrings #-}
+{-# LANGUAGE FlexibleInstances, MultiParamTypeClasses, OverloadedStrings, BangPatterns #-}
hunk ./Data/Monoid/Lexical/SourcePosition.hs 47
-        = Pos file {-# UNPACK #-} !SourceLine !SourceColumn -- ^ An absolute position in a file is known, or an overriding #line directive has been seen
-        | Lines {-# UNPACK #-} !SourceLine !SourceColumn    -- ^ We've seen some carriage returns.
-        | Columns {-# UNPACK #-} !SourceColumn              -- ^ We've only seen part of a line.
-        | Tab {-# UNPACK #-} !SourceColumn !SourceColumn    -- ^ We have an unhandled tab to deal with.
+        = Pos file {-# UNPACK #-} !SourceLine {-# UNPACK #-} !SourceColumn -- ^ An absolute position in a file is known, or an overriding #line directive has been seen
+        | Lines {-# UNPACK #-} !SourceLine {-# UNPACK #-} !SourceColumn    -- ^ We've seen some carriage returns.
+        | Columns {-# UNPACK #-} !SourceColumn                             -- ^ We've only seen part of a line.
+        | Tab {-# UNPACK #-} !SourceColumn {-# UNPACK #-} !SourceColumn    -- ^ We have an unhandled tab to deal with.
hunk ./Data/Monoid/Lexical/SourcePosition.hs 55
-nextTab x = x + (8 - (x-1) `mod` 8)
+nextTab !x = x + (8 - (x-1) `mod` 8)
hunk ./Data/Monoid/Monad.hs 86
+instance (MonadPlus m, Monoid a) => Ringoid (MonadSum m a)
+
hunk ./Data/Ring/Algebra.hs 4
-    , Algebra
+    , RAlgebra
hunk ./Data/Ring/Algebra.hs 9
--- |  
+-- | Algebra over a (near) (semi) ring.
+--
hunk ./Data/Ring/Algebra.hs 14
-class (r `Module` m, Multiplicative m) => Algebra r m 
+class (r `Module` m, Multiplicative m) => RAlgebra r m 
hunk ./Data/Ring/Boolean.hs 40
+instance Ringoid BoolRing
hunk ./Data/Ring/FromNum.hs 41
+instance Num a => Ringoid (FromNum a)
hunk ./Data/Ring/ModularArithmetic.hs 68
+instance (Modular s a, Integral a) => Ringoid (a `Mod` s)
hunk ./Data/Ring/Module/AutomaticDifferentiation.hs 29
-lift :: Monoid m => r -> D s r m
+lift :: (r `Module` m) => r -> D s r m
hunk ./Data/Ring/Module/AutomaticDifferentiation.hs 32
-infinitesimal :: (Monoid r, Multiplicative m) => D s r m
+infinitesimal :: (r `Module` m, Ringoid m) => D s r m
hunk ./Data/Ring/Module/AutomaticDifferentiation.hs 41
-instance (Monoid r, Monoid m) => Monoid (D s r m) where
+instance (r `Module` m) => Monoid (D s r m) where
hunk ./Data/Ring/Module/AutomaticDifferentiation.hs 67
+instance (Ringoid r, r `Module` m) => Ringoid (D s r m)
hunk ./Data/Ring/Module/AutomaticDifferentiation.hs 70
-instance (SemiRing r, Module r m) => SemiRing (D s r m)
-instance (Ring r, Module r m, Group m) => Ring (D s r m)
+instance (SemiRing r, r `Module` m) => SemiRing (D s r m)
+instance (Ring r, r `Module` m, Group m) => Ring (D s r m)
hunk ./Data/Ring/Module/AutomaticDifferentiation.hs 73
-instance (c `Reducer` r, c `Reducer` m) => Reducer c (D s r m) where
+instance (r `Module` m, c `Reducer` r, c `Reducer` m) => Reducer c (D s r m) where
hunk ./Data/Ring/Module/AutomaticDifferentiation.hs 85
-d :: (Monoid r, Multiplicative m) => (forall s. D s r m -> D s r m) -> (r,m)
+d :: (r `Module` m, Ringoid m) => (forall s. D s r m -> D s r m) -> (r,m)
hunk ./Data/Ring/Semi/BitSet.hs 351
-instance (Enum a, Show a) => Show (BitSet a) where
+instance Show a => Show (BitSet a) where
hunk ./Data/Ring/Semi/BitSet.hs 401
+instance (Bounded a, Enum a) => Ringoid (BitSet a)
hunk ./Data/Ring/Semi/BitSet.hs 419
-instance (Bounded a, Enum a) => Algebra Natural (BitSet a)
+instance (Bounded a, Enum a) => RAlgebra Natural (BitSet a)
hunk ./Data/Ring/Semi/BitSet.hs 421
-instance Enum a => Generator (BitSet a) where
+instance Generator (BitSet a) where
addfile ./Data/Ring/Semi/Kleene.hs
hunk ./Data/Ring/Semi/Kleene.hs 1
+module Data.Ring.Semi.Kleene 
+    ( module Data.Ring.Semi
+    , KleeneAlgebra
+    , star
+    ) where
+
+import Data.Ring.Semi
+
+class SemiRing r => KleeneAlgebra r where
+    star :: r -> r
hunk ./Data/Ring/Semi/Natural.hs 99
+instance Ringoid Natural
hunk ./Data/Ring/Semi/Near.hs 22
+    , Ringoid
hunk ./Data/Ring/Semi/Near.hs 49
--- | @a * (b + c) = (a * b) + (a * c)@
-class (Multiplicative m, Monoid m) => LeftSemiNearRing m 
+-- | @0@ annihilates `times`
+class (Multiplicative m, Monoid m) => Ringoid m
+instance Ringoid m => Ringoid (Self m)
+instance Ringoid m => Ringoid (FromString m)
+instance Ringoid m => Ringoid (ReducedBy m s)
+instance Ringoid m => Ringoid (Dual m)
+instance (Measured v m, Monoid m) => Ringoid (FingerTree v m)
+instance Monoid m => Ringoid [m]
+instance Monoid m => Ringoid (Maybe m)
+instance Monoid m => Ringoid (Seq m)
+instance (Stream s m t, Monoid a) => Ringoid (ParsecT s u m a)
+instance (MonadPlus m, Monoid n) => Ringoid (SState.StateT s m n)
+instance (MonadPlus m, Monoid n) => Ringoid (LState.StateT s m n)
+instance (MonadPlus m, Monoid n) => Ringoid (ReaderT e m n)
+instance (MonadPlus m, Monoid w, Monoid n) => Ringoid (SRWS.RWST r w s m n)
+instance (MonadPlus m, Monoid w, Monoid n) => Ringoid (LRWS.RWST r w s m n)
+instance (MonadPlus m, Monoid w, Monoid n) => Ringoid (SWriter.WriterT w m n)
+instance (MonadPlus m, Monoid w, Monoid n) => Ringoid (LWriter.WriterT w m n)
hunk ./Data/Ring/Semi/Near.hs 68
--- 'Monoid' transformers
+-- | @a * (b + c) = (a * b) + (a * c)@
+class Ringoid m => LeftSemiNearRing m 
hunk ./Data/Ring/Semi/Near.hs 76
-class (Multiplicative m, Monoid m) => RightSemiNearRing m 
-
--- 'Monoid' transformers
+class Ringoid m => RightSemiNearRing m 
hunk ./Data/Ring/Semi/Near.hs 81
-
--- non-'Monad' instances
hunk ./Data/Ring/Semi/Near.hs 82
-
--- 'Monad' instances
--- Every 'MonadPlus' over a 'Monoid' with an appropriate 'Multiplicative' instance
--- for 'liftM2 mappend' is a 'RightSemiNearRing' by 'MonadPlus' left-distributivity
-
hunk ./Data/Ring/Semi/Near.hs 83
-
hunk ./Data/Ring/Semi/Near.hs 84
-
hunk ./Data/Ring/Semi/Near.hs 85
-
hunk ./Data/Ring/Semi/Near.hs 86
-
hunk ./Data/Ring/Semi/Near.hs 87
-
hunk ./Data/Ring/Semi/Near.hs 88
-
hunk ./Data/Ring/Semi/Near.hs 89
-
hunk ./Data/Ring/Semi/Near.hs 90
-
hunk ./Data/Ring/Semi/Near.hs 91
-
hunk ./Data/Ring/Semi/Near.hs 92
-
hunk ./Data/Ring/Semi/Ord.hs 38
+instance (Bounded a, Ord a) => Ringoid (Order a)
hunk ./Data/Ring/Semi/Ord.hs 102
+instance Ord a => Ringoid (Priority a)
hunk ./Data/Ring/Semi/Tropical.hs 71
+instance (Ord a, Num a) => Ringoid (Tropical a)
adddir ./Data/Trie
hunk ./monoids.cabal 2
-version:	    0.1.32
+version:	    0.1.33
hunk ./monoids.cabal 73
+    Data.Ring.Semi.Kleene
}
