[removed redundant Union newtypes
ekmett@gmail.com**20090327043651] {
hunk ./Data/Monoid/IntMap.hs 10
-
-newtype Union a = Union { getUnion :: IntMap a } 
-
-instance Monoid (Union a) where
-    mempty = Union empty
-    Union a `mappend` Union b = Union (a `union` b)
-
-instance Reducer (IntMap a) (Union a) where
-    unit = Union
-
--- only needs m to be a semigroup, but Haskell doesn't have a semigroup class
hunk ./Data/Monoid/Map.hs 11
-
-newtype Union k a = Union { getUnion :: Map k a } 
-
-instance Ord k => Monoid (Union k a) where
-    mempty = Union empty
-    Union a `mappend` Union b = Union (a `union` b)
-
-instance Ord k => Reducer (Map k a) (Union k a) where
-    unit = Union
}
