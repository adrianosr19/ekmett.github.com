[proper maintainership noted. moved reflection out into its own package
ekmett@gmail.com**20090330040932] {
hunk ./Data/Group/Combinators.hs 6
--- Maintainer  :  libraries@haskell.org
+-- Maintainer  :  ekmett@gmail.com
hunk ./Data/Group/Sugar.hs 6
--- Maintainer  :  libraries@haskell.org
+-- Maintainer  :  ekmett@gmail.com
hunk ./Data/Monoid/Additive/Sugar.hs 6
--- Maintainer  :  libraries@haskell.org
+-- Maintainer  :  ekmett@gmail.com
hunk ./Data/Monoid/Additive.hs 6
--- Maintainer  :  libraries@haskell.org
+-- Maintainer  :  ekmett@gmail.com
hunk ./Data/Monoid/Applicative.hs 8
--- Maintainer  :  libraries@haskell.org
+-- Maintainer  :  ekmett@gmail.com
hunk ./Data/Monoid/Categorical.hs 8
--- Maintainer  :  libraries@haskell.org
+-- Maintainer  :  ekmett@gmail.com
hunk ./Data/Monoid/Combinators.hs 8
--- Maintainer  :  libraries@haskell.org
+-- Maintainer  :  ekmett@gmail.com
hunk ./Data/Monoid/FromString.hs 8
--- Maintainer  :  libraries@haskell.org
+-- Maintainer  :  ekmett@gmail.com
hunk ./Data/Monoid/Generator/Free.hs 8
--- Maintainer  :  libraries@haskell.org
+-- Maintainer  :  ekmett@gmail.com
hunk ./Data/Monoid/Generator/LZ78.hs 8
--- Maintainer  :  libraries@haskell.org
+-- Maintainer  :  ekmett@gmail.com
hunk ./Data/Monoid/Generator/RLE.hs 8
--- Maintainer  :  libraries@haskell.org
+-- Maintainer  :  ekmett@gmail.com
hunk ./Data/Monoid/Generator.hs 8
--- Maintainer  :  libraries@haskell.org
+-- Maintainer  :  ekmett@gmail.com
hunk ./Data/Monoid/Instances.hs 9
--- Maintainer  :  libraries@haskell.org
+-- Maintainer  :  ekmett@gmail.com
hunk ./Data/Monoid/Lexical/Binary.hs 8
--- Maintainer  :  libraries@haskell.org
+-- Maintainer  :  ekmett@gmail.com
hunk ./Data/Monoid/Lexical/SourcePosition.hs 8
--- Maintainer  :  libraries@haskell.org
+-- Maintainer  :  ekmett@gmail.com
hunk ./Data/Monoid/Lexical/UTF8/Decoder.hs 8
--- Maintainer  :  libraries@haskell.org
+-- Maintainer  :  ekmett@gmail.com
hunk ./Data/Monoid/Lexical/Words.hs 8
--- Maintainer  :  libraries@haskell.org
+-- Maintainer  :  ekmett@gmail.com
hunk ./Data/Monoid/Monad.hs 8
--- Maintainer  :  libraries@haskell.org
+-- Maintainer  :  ekmett@gmail.com
hunk ./Data/Monoid/Multiplicative/Sugar.hs 6
--- Maintainer  :  libraries@haskell.org
+-- Maintainer  :  ekmett@gmail.com
hunk ./Data/Monoid/Multiplicative.hs 8
--- Maintainer  :  libraries@haskell.org
+-- Maintainer  :  ekmett@gmail.com
hunk ./Data/Monoid/Ord.hs 7
----- Maintainer  :  libraries@haskell.org
+---- Maintainer  :  ekmett@gmail.com
hunk ./Data/Monoid/Reducer/Char.hs 8
--- Maintainer  :  libraries@haskell.org
+-- Maintainer  :  ekmett@gmail.com
hunk ./Data/Monoid/Reducer/With.hs 8
--- Maintainer  :  libraries@haskell.org
+-- Maintainer  :  ekmett@gmail.com
hunk ./Data/Monoid/Reducer.hs 8
--- Maintainer  :  libraries@haskell.org
+-- Maintainer  :  ekmett@gmail.com
hunk ./Data/Monoid/Self.hs 8
--- Maintainer  :  libraries@haskell.org
+-- Maintainer  :  ekmett@gmail.com
hunk ./Data/Reflection.hs 1
-{-# LANGUAGE RankNTypes, ScopedTypeVariables, EmptyDataDecls, TypeFamilies, MultiParamTypeClasses, FunctionalDependencies, FlexibleInstances #-}
-
-module Data.Reflection 
-    ( 
-    -- * Reflecteding Integrals
-      ReflectedNum
-    , reflectNum
-    , reifyIntegral
-    -- * Reflecteding Lists of Integrals
-    , ReflectedNums
-    , reifyIntegrals
-    -- * Reflecteding Storables
-    , ReflectedStorable
-    , reflectStorable
-    , reifyStorable
-    , Reflected
-    , reflect
-    , reify
-    ) where
-
-import Foreign.C.Types
-import Foreign.Marshal.Alloc
-import Foreign.Marshal.Array
-import Foreign.Marshal.Utils
-import Foreign.Ptr
-import Foreign.StablePtr
-import Foreign.Storable
-import System.IO.Unsafe
-
-data Zero
-data Twice s
-data Succ s
-data Pred s
-
-class ReflectedNum s where
-    reflectNum :: Num a => s -> a
-
-instance ReflectedNum Zero where
-    reflectNum _ = 0
-
-instance ReflectedNum s => ReflectedNum (Twice s) where
-    reflectNum _ = reflectNum (undefined :: s) * 2
-
-instance ReflectedNum s => ReflectedNum (Succ s) where
-    reflectNum _ = reflectNum (undefined :: s) + 1
-
-instance ReflectedNum s => ReflectedNum (Pred s) where
-    reflectNum _ = reflectNum (undefined :: s) - 1
-
-reifyIntegral :: Integral a => a -> (forall s. ReflectedNum s => s -> w) -> w
-reifyIntegral i k = case quotRem i 2 of
-    (0, 0) -> k (undefined :: Zero)
-    (j, 0) -> reifyIntegral j (\(_ :: s) -> k (undefined :: Twice s))
-    (j, 1) -> reifyIntegral j (\(_ :: s) -> k (undefined :: Succ (Twice s)))
-    (j,-1) -> reifyIntegral j (\(_ :: s) -> k (undefined :: Pred (Twice s)))
-    _      -> undefined
-
-data Nil
-data Cons s ss
-
-class ReflectedNums ss where
-    reflectNums :: Num a => ss -> [a]
-
-instance ReflectedNums Nil where
-    reflectNums _ = []
-
-instance (ReflectedNum s, ReflectedNums ss) => ReflectedNums (Cons s ss) where
-    reflectNums _ = reflectNum (undefined :: s) : reflectNums (undefined :: ss)
-
-reifyIntegrals :: Integral a => [a] -> (forall ss. ReflectedNums ss => ss -> w) -> w
-reifyIntegrals [] k = k (undefined :: Nil)
-reifyIntegrals (i:ii) k = 
-    reifyIntegral i (\(_ :: s) -> 
-    reifyIntegrals ii (\(_ :: ss) -> 
-    k (undefined :: Cons s ss)))
-
-data Store s a 
-
-class ReflectedStorable s where
-    reflectStorable :: Storable a => s a -> a
-
-instance ReflectedNums s => ReflectedStorable (Store s) where
-    {-# NOINLINE reflectStorable #-}
-    reflectStorable _ = unsafePerformIO . alloca $ \p -> do 
-            pokeArray (castPtr p) bytes
-            peek p 
-        where 
-            bytes = reflectNums (undefined :: s) :: [CChar]
-
-reifyStorable :: Storable a => a -> (forall s. ReflectedStorable s => s a -> w) -> w
-reifyStorable a k = reifyIntegrals (bytes :: [CChar]) (\(_ :: s) -> k (undefined :: Store s a))
-  where
-    bytes = unsafePerformIO $ with a (peekArray (sizeOf a) . castPtr) 
-{-# NOINLINE reifyStorable #-}
-
-class Reflected s a | s -> a where 
-    reflect :: s -> a
-
-data Stable (s :: * -> *) a
-
-{-
-instance ReflectedStorable s => Reflected (Stable s a) a where
-    reflect = unsafePerformIO . fmap const . deRefStablePtr $ reflectStorable (undefined :: s p) 
-
-reify :: a -> (forall s. Reflected s a => s -> w) -> w
-reify (a :: a) k = unsafePerformIO $ do
-        p <- newStablePtr a
-        reifyStorable p (\(_ :: s (StablePtr a)) -> return (k (undefined :: Stable s a)))
--}
-
-instance ReflectedStorable s => Reflected (Stable s a) a where
-    reflect = unsafePerformIO $ do
-            a <- deRefStablePtr p
-            freeStablePtr p
-            return (const a)
-        where  
-            p = reflectStorable (undefined :: s p)
-
-reify :: a -> (forall s. Reflected s a => s -> w) -> w
-reify (a :: a) k = unsafePerformIO $ do
-        p <- newStablePtr a
-        reifyStorable p (\(_ :: s (StablePtr a)) -> 
-                let k' s = (reflect :: Stable s a -> a) `seq` return (k s) 
-                in k' (undefined :: Stable s a))
rmfile ./Data/Reflection.hs
hunk ./Data/Ring/Boolean.hs 8
--- Maintainer  :  libraries@haskell.org
+-- Maintainer  :  ekmett@gmail.com
hunk ./Data/Ring/FromNum.hs 8
--- Maintainer  :  libraries@haskell.org
+-- Maintainer  :  ekmett@gmail.com
hunk ./Data/Ring/Module.hs 7
--- Maintainer  :  libraries@haskell.org
+-- Maintainer  :  ekmett@gmail.com
hunk ./Data/Ring/Semi/Near.hs 9
--- Maintainer  :  libraries@haskell.org
+-- Maintainer  :  ekmett@gmail.com
hunk ./Data/Ring/Semi/Tropical.hs 7
----- Maintainer  :  libraries@haskell.org
+---- Maintainer  :  ekmett@gmail.com
hunk ./Data/Ring/Semi.hs 6
--- Maintainer  :  libraries@haskell.org
+-- Maintainer  :  ekmett@gmail.com
hunk ./Data/Ring/Sugar.hs 6
--- Maintainer  :  libraries@haskell.org
+-- Maintainer  :  ekmett@gmail.com
hunk ./monoids.cabal 2
-version:	    0.1.15
+version:	    0.1.17
hunk ./monoids.cabal 10
-synopsis:	    Lots of Monoids
-description:    Lots of Monoids
+synopsis:	    Monoids, specialized containers and a general map/reduce framework
+description:    Monoids, specialized containers and a general map/reduce framework
hunk ./monoids.cabal 30
-    array >= 0.2 && < 0.3
+    array >= 0.2 && < 0.3,
+    reflection >= 0.0 && < 0.1
hunk ./monoids.cabal 59
-    Data.Reflection
hunk ./monoids.cabal 62
+    Data.Ring.ModularArithmetic
}
