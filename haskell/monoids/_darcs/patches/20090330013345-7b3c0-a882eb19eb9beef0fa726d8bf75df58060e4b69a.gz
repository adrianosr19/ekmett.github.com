[added reflection
ekmett@gmail.com**20090330013345] {
hunk ./Data/Reflection.hs 5
-    -- * Reflecting Integrals
-      ReflectNum
+    -- * Reflecteding Integrals
+      ReflectedNum
hunk ./Data/Reflection.hs 9
-    -- * Reflecting Lists of Integrals
-    , ReflectNums
+    -- * Reflecteding Lists of Integrals
+    , ReflectedNums
hunk ./Data/Reflection.hs 12
-    -- * Reflecting Storables
-    , ReflectStorable
+    -- * Reflecteding Storables
+    , ReflectedStorable
hunk ./Data/Reflection.hs 16
+    , Reflected
+    , reflect
+    , reify
hunk ./Data/Reflection.hs 35
-class ReflectNum s where
+class ReflectedNum s where
hunk ./Data/Reflection.hs 38
-instance ReflectNum Zero where
+instance ReflectedNum Zero where
hunk ./Data/Reflection.hs 41
-instance ReflectNum s => ReflectNum (Twice s) where
+instance ReflectedNum s => ReflectedNum (Twice s) where
hunk ./Data/Reflection.hs 44
-instance ReflectNum s => ReflectNum (Succ s) where
+instance ReflectedNum s => ReflectedNum (Succ s) where
hunk ./Data/Reflection.hs 47
-instance ReflectNum s => ReflectNum (Pred s) where
+instance ReflectedNum s => ReflectedNum (Pred s) where
hunk ./Data/Reflection.hs 50
-reifyIntegral :: Integral a => a -> (forall s. ReflectNum s => s -> w) -> w
+reifyIntegral :: Integral a => a -> (forall s. ReflectedNum s => s -> w) -> w
hunk ./Data/Reflection.hs 61
-class ReflectNums ss where
+class ReflectedNums ss where
hunk ./Data/Reflection.hs 64
-instance ReflectNums Nil where
+instance ReflectedNums Nil where
hunk ./Data/Reflection.hs 67
-instance (ReflectNum s, ReflectNums ss) => ReflectNums (Cons s ss) where
+instance (ReflectedNum s, ReflectedNums ss) => ReflectedNums (Cons s ss) where
hunk ./Data/Reflection.hs 70
-reifyIntegrals :: Integral a => [a] -> (forall ss. ReflectNums ss => ss -> w) -> w
+reifyIntegrals :: Integral a => [a] -> (forall ss. ReflectedNums ss => ss -> w) -> w
hunk ./Data/Reflection.hs 79
-class ReflectStorable s where
+class ReflectedStorable s where
hunk ./Data/Reflection.hs 82
-instance ReflectNums s => ReflectStorable (Store s) where
+instance ReflectedNums s => ReflectedStorable (Store s) where
hunk ./Data/Reflection.hs 90
-reifyStorable :: Storable a => a -> (forall s. ReflectStorable s => s a -> w) -> w
+reifyStorable :: Storable a => a -> (forall s. ReflectedStorable s => s a -> w) -> w
hunk ./Data/Reflection.hs 96
-
-class Reflect s a | s -> a where 
+class Reflected s a | s -> a where 
hunk ./Data/Reflection.hs 101
-instance ReflectStorable s => Reflect (Stable s a) a where
+{-
+instance ReflectedStorable s => Reflected (Stable s a) a where
hunk ./Data/Reflection.hs 105
-reify :: a -> (forall s. Reflect s a => s -> w) -> w
+reify :: a -> (forall s. Reflected s a => s -> w) -> w
hunk ./Data/Reflection.hs 109
+-}
+
+instance ReflectedStorable s => Reflected (Stable s a) a where
+    reflect = unsafePerformIO $ do
+            a <- deRefStablePtr p
+            freeStablePtr p
+            return (const a)
+        where  
+            p = reflectStorable (undefined :: s p)
+
+reify :: a -> (forall s. Reflected s a => s -> w) -> w
+reify (a :: a) k = unsafePerformIO $ do
+        p <- newStablePtr a
+        reifyStorable p (\(_ :: s (StablePtr a)) -> 
+                let k' s = (reflect :: Stable s a -> a) `seq` return (k s) 
+                in k' (undefined :: Stable s a))
}
