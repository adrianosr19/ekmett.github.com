[added Forward AD and an LZ78 Generator
ekmett@gmail.com**20090329012728] {
hunk ./Data/Monoid/Applicative.hs 1
-{-# LANGUAGE FlexibleInstances, MultiParamTypeClasses, GeneralizedNewtypeDeriving, FlexibleContexts #-}
+{-# LANGUAGE FlexibleInstances, MultiParamTypeClasses, GeneralizedNewtypeDeriving, FlexibleContexts, TypeOperators #-}
hunk ./Data/Monoid/Applicative.hs 19
+    , module Data.Ring.Module
hunk ./Data/Monoid/Applicative.hs 22
+    , TraversalWith(TraversalWith,getTraversalWith)
hunk ./Data/Monoid/Applicative.hs 29
+import Data.Ring.Module
hunk ./Data/Monoid/Applicative.hs 76
+-- | if @m@ is a 'Module' and @f@ is a 'Applicative' then @f `TraversalWith` m@ is a 'Module' as well
+
+newtype TraversalWith f m = TraversalWith { getTraversalWith :: f m } 
+    deriving (Eq,Ord,Show,Read,Functor,Pointed,Applicative,Alternative,Copointed)
+
+instance (Monoid m, Applicative f) => Monoid (f `TraversalWith` m) where
+    mempty = pure mempty
+    mappend = liftA2 mappend
+
+instance (Group m, Applicative f) => Group (f `TraversalWith` m) where
+    gnegate = fmap gnegate
+    minus = liftA2 minus
+    gsubtract = liftA2 gsubtract
+
+instance (c `Reducer` m, Applicative f) => Reducer c (f `TraversalWith` m) where
+    unit = pure . unit
+
+instance (LeftModule r m, Applicative f) => LeftModule r (f `TraversalWith` m) where
+    x *. m = (x *.) <$> m
+
+instance (RightModule r m, Applicative f) => RightModule r (f `TraversalWith` m) where
+    m .* y = (.* y) <$> m
+
+instance (Module r m, Applicative f) => Module r (f `TraversalWith` m)
+
hunk ./Data/Monoid/Instances.hs 28
+-- * 'Monoid' instances for 'Int', 'Integer', and 'Ratio' using @(+,0)@
+--
hunk ./Data/Monoid/Instances.hs 50
+import Data.Ratio
+
hunk ./Data/Monoid/Instances.hs 108
+instance Monoid Int where
+    mempty = 0
+    mappend = (+)
+
+instance Monoid Integer where
+    mempty = 0
+    mappend = (+)
+
+instance Integral m => Monoid (Ratio m) where
+    mempty = 0
+    mappend = (+)
+
hunk ./Data/Monoid/Monad.hs 1
-{-# LANGUAGE FlexibleInstances, MultiParamTypeClasses, GeneralizedNewtypeDeriving, FlexibleContexts #-}
+{-# LANGUAGE FlexibleInstances, MultiParamTypeClasses, GeneralizedNewtypeDeriving, FlexibleContexts, TypeOperators #-}
hunk ./Data/Monoid/Monad.hs 22
+    -- * Lifting Modules
+    , ActionWith(ActionWith,getActionWith)
hunk ./Data/Monoid/Monad.hs 31
+import Data.Ring.Module
hunk ./Data/Monoid/Monad.hs 77
+-- | if @m@ is a 'Module' over @r@ and @f@ is a 'Monad' then @f `ActionWith` m@ is a 'Module' as well
+
+newtype ActionWith f m = ActionWith { getActionWith :: f m } 
+    deriving (Eq,Ord,Show,Read,Functor,Pointed, Monad,MonadPlus)
+
+instance (Monoid m, Monad f) => Monoid (f `ActionWith` m) where
+    mempty = return mempty
+    mappend = liftM2 mappend
+
+instance (Group m, Monad f) => Group (f `ActionWith` m) where
+    gnegate = liftM gnegate
+    minus = liftM2 minus
+    gsubtract = liftM2 gsubtract
+
+instance (c `Reducer` m, Monad f) => Reducer c (f `ActionWith` m) where
+    unit = return . unit
+
+instance (LeftModule r m, Monad f) => LeftModule r (f `ActionWith` m) where
+    x *. m = liftM (x *.) m
+
+instance (RightModule r m, Monad f) => RightModule r (f `ActionWith` m) where
+    m .* y = liftM (.* y) m
+
+instance (Module r m, Monad f) => Module r (f `ActionWith` m)
+
hunk ./Data/Monoid/Multiplicative.hs 72
+import Data.Ratio
+
hunk ./Data/Monoid/Multiplicative.hs 225
+
+-- Numeric instances
+
+instance Multiplicative Int where
+    one = 1
+    times = (*)
+
+
+instance Multiplicative Integer where
+    one = 1
+    times = (*)
+
+instance Integral m => Multiplicative (Ratio m) where
+    one = 1
+    times = (*)
+
hunk ./Data/Monoid/Reducer.hs 24
+    , pureUnit
+    , returnUnit
hunk ./Data/Monoid/Reducer.hs 28
+import Control.Applicative
+import Control.Monad 
+
hunk ./Data/Monoid/Reducer.hs 33
+
hunk ./Data/Monoid/Reducer.hs 36
+
hunk ./Data/Monoid/Reducer.hs 39
+
hunk ./Data/Monoid/Reducer.hs 42
+
hunk ./Data/Monoid/Reducer.hs 45
+
hunk ./Data/Monoid/Reducer.hs 48
+
hunk ./Data/Monoid/Reducer.hs 50
+
hunk ./Data/Monoid/Reducer.hs 52
+
hunk ./Data/Monoid/Reducer.hs 54
-import Control.Monad 
+
hunk ./Data/Monoid/Reducer.hs 58
-
hunk ./Data/Monoid/Reducer.hs 94
+returnUnit :: (Monad m, c `Reducer` n) => c -> m n 
+returnUnit = return . unit
+
+pureUnit :: (Applicative f, c `Reducer` n) => c -> f n
+pureUnit = pure . unit
+
hunk ./Data/Ring/FromNum.hs 48
+
addfile ./Data/Ring/Module.hs
hunk ./Data/Ring/Module.hs 1
+{-# LANGUAGE FlexibleInstances, MultiParamTypeClasses #-}
+-----------------------------------------------------------------------------
+-- |
+-- Module      :  Data.Ring.Module
+-- Copyright   :  (c) Edward Kmett 2009
+-- License     :  BSD-style
+-- Maintainer  :  libraries@haskell.org
+-- Stability   :  experimental
+-- Portability :  non-portable (MPTCs)
+--
+-- Left- and right- modules over rings, semirings, and Seminearrings.
+-- To avoid a proliferation of classes. These only require that there
+-- be an addition and multiplication operation for the 'Ring'
+--
+-----------------------------------------------------------------------------
+
+module Data.Ring.Module 
+    ( module Data.Ring
+    , LeftModule
+    , (*.)
+    , RightModule
+    , (.*)
+    , Module
+    ) where
+
+import Data.Ring
+-- import qualified Data.Monoid.Combinators as Monoid
+
+-- | @ (x * y) *. m = x * (y *. m) @
+class (Monoid r, Multiplicative r, Monoid m) => LeftModule r m where
+    (*.) :: r -> m -> m
+    
+-- | @ (m .* x) * y = m .* (x * y) @
+class (Monoid r, Multiplicative r, Monoid m) => RightModule r m where
+    (.*) :: m -> r -> m
+
+-- | @ (x *. m) .* y = x *. (m .* y) @
+class (LeftModule r m, RightModule r m) => Module r m 
+
+-- instance Monoid m => LeftModule Int m where i *. m = Monoid.replicate m i 
+-- instance Monoid m => RightModule Int m where m .* i = Monoid.replicate m i 
+-- instance Monoid m => Module Int m
+    
+-- instance Monoid m => LeftModule Integer m where i *. m = Monoid.replicate m i 
+-- instance Monoid m => RightModule Integer m where m .* i = Monoid.replicate m i 
+-- instance Monoid m => Module Integer m
hunk ./Data/Ring/Semi/Near/Applicative.hs 1
-{-# LANGUAGE FlexibleInstances, MultiParamTypeClasses, GeneralizedNewtypeDeriving, FlexibleContexts #-}
-module Data.Ring.Semi.Near.Applicative 
-    ( module Control.Applicative
-    , module Data.Monoid.Reducer
-    , WrappedApplicative(WrappedApplicative,getWrappedApplicative)
-    ) where
-
-import Control.Functor.Pointed
-import Control.Applicative (Applicative, (*>), pure, Alternative, empty, (<|>), liftA2)
-import Data.Ring.Semi.Near
-import Data.Monoid.Reducer
-
-newtype WrappedApplicative f a = WrappedApplicative { getWrappedApplicative :: f a } 
-    deriving (Eq,Ord,Show,Read,Functor,Pointed,Applicative,Alternative,Copointed)
-
-instance Alternative f => Monoid (WrappedApplicative f a) where
-    mempty = empty 
-    WrappedApplicative a `mappend` WrappedApplicative b = WrappedApplicative (a <|> b) 
-
-instance (Alternative f, Monoid a) => Multiplicative (WrappedApplicative f a) where
-    one = pure mempty
-    times = liftA2 mappend
-
-instance (Alternative f, c `Reducer` a) => Reducer c (WrappedApplicative f a) where
-    unit = WrappedApplicative . pure . unit
-
-instance (Alternative f, Monoid a) => LeftSemiNearRing (WrappedApplicative f a)
rmfile ./Data/Ring/Semi/Near/Applicative.hs
hunk ./Data/Ring/Semi/Near/Monad/Parsec.hs 1
-{-# OPTIONS_GHC -fno-warn-orphans #-}
-{-# LANGUAGE FlexibleInstances, MultiParamTypeClasses #-}
-module Data.Ring.Semi.Near.Parsec
-    ( module Data.Ring.Semi.Near
-    , module Data.Monoid.Reducer
-    , module Text.Parsec.Prim
-    ) where
-
-import Data.Ring.Semi.Near
-import Data.Monoid.Reducer
-import Control.Monad (liftM2) 
-import Text.Parsec.Prim
-
-instance Monad m => Monoid (ParsecT s u m a) where
-    mempty = mzero
-    a `mappend` b = try a <|> b
-
-instance (Monoid m, c `Reducer` a) => Reducer c (ParsecT s u m a) where
-    unit = return . unit
-
-instance Monoid a => LeftSemiNearRing (ParsecT s u m a)
rmfile ./Data/Ring/Semi/Near/Monad/Parsec.hs
rmdir ./Data/Ring/Semi/Near/Monad
hunk ./Data/Ring/Semi/Near/Monad.hs 1
-{-# LANGUAGE GeneralizedNewtypeDeriving, FlexibleInstances, MultiParamTypeClasses, UndecidableInstances #-}
-module Data.Ring.Semi.Near.Monad
-    ( module Data.Ring.Semi.Near
-    , WrappedMonad(WrappedMonad, getWrappedMonad)
-    ) where
-
-import Control.Functor.Pointed
-import Data.Ring.Semi.Near
-import Control.Monad
-import Data.Monoid.Reducer
-
-newtype WrappedMonad m a = WrappedMonad { getWrappedMonad :: m a } 
-    deriving (Eq,Ord,Show,Read,Functor,Pointed, Monad,MonadPlus)
-
-instance (Monad m, Monoid a) => Multiplicative (WrappedMonad m a) where
-    one = WrappedMonad (return mempty)
-    WrappedMonad m `times` WrappedMonad n = WrappedMonad (liftM2 mappend m n)
-    
-instance (MonadPlus m) => Monoid (WrappedMonad m a) where
-    mempty = mzero
-    mappend = mplus
-
-instance (MonadPlus m, c `Reducer` a) => Reducer c (WrappedMonad m a) where
-    unit = WrappedMonad . return . unit
-
-instance (MonadPlus m, Monoid a) => LeftSemiNearRing (WrappedMonad m a)
rmfile ./Data/Ring/Semi/Near/Monad.hs
rmdir ./Data/Ring/Semi/Near
hunk ./Data/Ring/Semi.hs 24
-
hunk ./Data/Ring/Semi/Near.hs 91
+
hunk ./Data/Ring/Semi/Tropical.hs 16
-    -- * Max
+    -- * Tropical Semirings
hunk ./dist/doc/html/monoids/Data-Group.html 412
+></TR
+><TR
+><TD CLASS="decl"
+>(<A HREF="Data-Group.html#t%3AGroup"
+>Group</A
+> m, <A HREF="/usr/local/share/doc/ghc/libraries/base/Control-Applicative.html#t%3AApplicative"
+>Applicative</A
+> f) =&gt; <A HREF="Data-Group.html#t%3AGroup"
+>Group</A
+> (<A HREF="Data-Monoid-Applicative.html#t%3ATraversalWith"
+>TraversalWith</A
+> f m)</TD
+></TR
+><TR
+><TD CLASS="decl"
+>(<A HREF="Data-Group.html#t%3AGroup"
+>Group</A
+> m, <A HREF="/usr/local/share/doc/ghc/libraries/base/Control-Monad.html#t%3AMonad"
+>Monad</A
+> f) =&gt; <A HREF="Data-Group.html#t%3AGroup"
+>Group</A
+> (<A HREF="Data-Monoid-Monad.html#t%3AActionWith"
+>ActionWith</A
+> f m)</TD
+></TR
+><TR
+><TD CLASS="decl"
+>(<A HREF="Data-Group.html#t%3AGroup"
+>Group</A
+> r, <A HREF="Data-Ring-Module.html#t%3AModule"
+>Module</A
+> r m, <A HREF="Data-Group.html#t%3AGroup"
+>Group</A
+> m) =&gt; <A HREF="Data-Group.html#t%3AGroup"
+>Group</A
+> (<A HREF="Data-Ring-Module-AutomaticDifferentiation.html#t%3AD"
+>D</A
+> r m)</TD
hunk ./dist/doc/html/monoids/Data-Monoid-Applicative.html 131
+>module <A HREF="Data-Ring-Module.html"
+>Data.Ring.Module</A
+></TD
+></TR
+><TR
+><TD CLASS="s8"
+></TD
+></TR
+><TR
+><TD CLASS="decl"
hunk ./dist/doc/html/monoids/Data-Monoid-Applicative.html 185
+><SPAN CLASS="keyword"
+>newtype</SPAN
+>  <A HREF="#t%3ATraversalWith"
+>TraversalWith</A
+> f m = <A HREF="#v%3ATraversalWith"
+>TraversalWith</A
+> {<TABLE CLASS="vanilla" CELLSPACING="0" CELLPADDING="0"
+><TR
+><TD CLASS="recfield"
+><A HREF="#v%3AgetTraversalWith"
+>getTraversalWith</A
+> :: f m</TD
+></TR
+></TABLE
+>}</TD
+></TR
+><TR
+><TD CLASS="s8"
+></TD
+></TR
+><TR
+><TD CLASS="decl"
hunk ./dist/doc/html/monoids/Data-Monoid-Applicative.html 255
+><TD CLASS="decl"
+>module <A HREF="Data-Ring-Module.html"
+>Data.Ring.Module</A
+></TD
+></TR
+><TR
+><TD CLASS="s15"
+></TD
+></TR
+><TR
hunk ./dist/doc/html/monoids/Data-Monoid-Applicative.html 620
+></TABLE
+></DIV
+></TD
+></TR
+></TABLE
+></TD
+></TR
+><TR
+><TD CLASS="s15"
+></TD
+></TR
+><TR
+><TD CLASS="topdecl"
+><TABLE CLASS="declbar"
+><TR
+><TD CLASS="declname"
+><SPAN CLASS="keyword"
+>newtype</SPAN
+>  <A NAME="t%3ATraversalWith"
+></A
+><B
+>TraversalWith</B
+> f m </TD
+><TD CLASS="declbut"
+><A HREF="src/Data-Monoid-Applicative.html#TraversalWith"
+>Source</A
+></TD
+></TR
+></TABLE
+></TD
+></TR
+><TR
+><TD CLASS="body"
+><TABLE CLASS="vanilla" CELLSPACING="0" CELLPADDING="0"
+><TR
+><TD CLASS="ndoc"
+>if <TT
+>m</TT
+> is a <TT
+><A HREF="Data-Ring-Module.html#t%3AModule"
+>Module</A
+></TT
+> and <TT
+>f</TT
+> is a <TT
+><A HREF="/usr/local/share/doc/ghc/libraries/base/Control-Applicative.html#t%3AApplicative"
+>Applicative</A
+></TT
+> then <TT
+>f <TT
+><A HREF="Data-Monoid-Applicative.html#v%3ATraversalWith"
+>TraversalWith</A
+></TT
+> m</TT
+> is a <TT
+><A HREF="Data-Ring-Module.html#t%3AModule"
+>Module</A
+></TT
+> as well
+</TD
+></TR
+><TR
+><TD CLASS="section4"
+>Constructors</TD
+></TR
+><TR
+><TD CLASS="body"
+><TABLE CLASS="vanilla" CELLSPACING="5" CELLPADDING="0"
+><TR
+><TD CLASS="arg"
+><A NAME="v%3ATraversalWith"
+></A
+><B
+>TraversalWith</B
+></TD
+><TD CLASS="rdoc"
+></TD
+></TR
+><TR
+><TD CLASS="body" COLSPAN="2"
+><TABLE CLASS="vanilla" CELLSPACING="1" CELLPADDING="0"
+><TR
+><TD CLASS="arg"
+><A NAME="v%3AgetTraversalWith"
+></A
+><B
+>getTraversalWith</B
+> :: f m</TD
+><TD CLASS="rdoc"
+></TD
+></TR
+></TABLE
+></TD
+></TR
+></TABLE
+></TD
+></TR
+><TR
+><TD CLASS="section4"
+><IMG SRC="minus.gif" CLASS="coll" ONCLICK="toggle(this,'i:TraversalWith')" ALT="show/hide"
+> Instances</TD
+></TR
+><TR
+><TD CLASS="body"
+><DIV ID="i:TraversalWith" STYLE="display:block;"
+><TABLE CLASS="vanilla" CELLSPACING="1" CELLPADDING="0"
+><TR
+><TD CLASS="decl"
+>(<A HREF="Data-Monoid-Reducer.html#t%3AReducer"
+>Reducer</A
+> c m, <A HREF="/usr/local/share/doc/ghc/libraries/base/Control-Applicative.html#t%3AApplicative"
+>Applicative</A
+> f) =&gt; <A HREF="Data-Monoid-Reducer.html#t%3AReducer"
+>Reducer</A
+> c (<A HREF="Data-Monoid-Applicative.html#t%3ATraversalWith"
+>TraversalWith</A
+> f m)</TD
+></TR
+><TR
+><TD CLASS="decl"
+>(<A HREF="Data-Ring-Module.html#t%3AModule"
+>Module</A
+> r m, <A HREF="/usr/local/share/doc/ghc/libraries/base/Control-Applicative.html#t%3AApplicative"
+>Applicative</A
+> f) =&gt; <A HREF="Data-Ring-Module.html#t%3AModule"
+>Module</A
+> r (<A HREF="Data-Monoid-Applicative.html#t%3ATraversalWith"
+>TraversalWith</A
+> f m)</TD
+></TR
+><TR
+><TD CLASS="decl"
+>(<A HREF="Data-Ring-Module.html#t%3ARightModule"
+>RightModule</A
+> r m, <A HREF="/usr/local/share/doc/ghc/libraries/base/Control-Applicative.html#t%3AApplicative"
+>Applicative</A
+> f) =&gt; <A HREF="Data-Ring-Module.html#t%3ARightModule"
+>RightModule</A
+> r (<A HREF="Data-Monoid-Applicative.html#t%3ATraversalWith"
+>TraversalWith</A
+> f m)</TD
+></TR
+><TR
+><TD CLASS="decl"
+>(<A HREF="Data-Ring-Module.html#t%3ALeftModule"
+>LeftModule</A
+> r m, <A HREF="/usr/local/share/doc/ghc/libraries/base/Control-Applicative.html#t%3AApplicative"
+>Applicative</A
+> f) =&gt; <A HREF="Data-Ring-Module.html#t%3ALeftModule"
+>LeftModule</A
+> r (<A HREF="Data-Monoid-Applicative.html#t%3ATraversalWith"
+>TraversalWith</A
+> f m)</TD
+></TR
+><TR
+><TD CLASS="decl"
+><A HREF="/usr/local/share/doc/ghc/libraries/base/Control-Monad.html#t%3AFunctor"
+>Functor</A
+> f =&gt; <A HREF="/usr/local/share/doc/ghc/libraries/base/Control-Monad.html#t%3AFunctor"
+>Functor</A
+> (<A HREF="Data-Monoid-Applicative.html#t%3ATraversalWith"
+>TraversalWith</A
+> f)</TD
+></TR
+><TR
+><TD CLASS="decl"
+><A HREF="/usr/local/share/doc/ghc/libraries/base/Control-Applicative.html#t%3AApplicative"
+>Applicative</A
+> f =&gt; <A HREF="/usr/local/share/doc/ghc/libraries/base/Control-Applicative.html#t%3AApplicative"
+>Applicative</A
+> (<A HREF="Data-Monoid-Applicative.html#t%3ATraversalWith"
+>TraversalWith</A
+> f)</TD
+></TR
+><TR
+><TD CLASS="decl"
+><A HREF="/usr/local/share/doc/ghc/libraries/base/Control-Applicative.html#t%3AAlternative"
+>Alternative</A
+> f =&gt; <A HREF="/usr/local/share/doc/ghc/libraries/base/Control-Applicative.html#t%3AAlternative"
+>Alternative</A
+> (<A HREF="Data-Monoid-Applicative.html#t%3ATraversalWith"
+>TraversalWith</A
+> f)</TD
+></TR
+><TR
+><TD CLASS="decl"
+>Pointed f =&gt; Pointed (<A HREF="Data-Monoid-Applicative.html#t%3ATraversalWith"
+>TraversalWith</A
+> f)</TD
+></TR
+><TR
+><TD CLASS="decl"
+>Copointed f =&gt; Copointed (<A HREF="Data-Monoid-Applicative.html#t%3ATraversalWith"
+>TraversalWith</A
+> f)</TD
+></TR
+><TR
+><TD CLASS="decl"
+><A HREF="/usr/local/share/doc/ghc/libraries/base/Data-Eq.html#t%3AEq"
+>Eq</A
+> (f m) =&gt; <A HREF="/usr/local/share/doc/ghc/libraries/base/Data-Eq.html#t%3AEq"
+>Eq</A
+> (<A HREF="Data-Monoid-Applicative.html#t%3ATraversalWith"
+>TraversalWith</A
+> f m)</TD
+></TR
+><TR
+><TD CLASS="decl"
+><A HREF="/usr/local/share/doc/ghc/libraries/base/Data-Ord.html#t%3AOrd"
+>Ord</A
+> (f m) =&gt; <A HREF="/usr/local/share/doc/ghc/libraries/base/Data-Ord.html#t%3AOrd"
+>Ord</A
+> (<A HREF="Data-Monoid-Applicative.html#t%3ATraversalWith"
+>TraversalWith</A
+> f m)</TD
+></TR
+><TR
+><TD CLASS="decl"
+><A HREF="/usr/local/share/doc/ghc/libraries/base/Text-Read.html#t%3ARead"
+>Read</A
+> (f m) =&gt; <A HREF="/usr/local/share/doc/ghc/libraries/base/Text-Read.html#t%3ARead"
+>Read</A
+> (<A HREF="Data-Monoid-Applicative.html#t%3ATraversalWith"
+>TraversalWith</A
+> f m)</TD
+></TR
+><TR
+><TD CLASS="decl"
+><A HREF="/usr/local/share/doc/ghc/libraries/base/Text-Show.html#t%3AShow"
+>Show</A
+> (f m) =&gt; <A HREF="/usr/local/share/doc/ghc/libraries/base/Text-Show.html#t%3AShow"
+>Show</A
+> (<A HREF="Data-Monoid-Applicative.html#t%3ATraversalWith"
+>TraversalWith</A
+> f m)</TD
+></TR
+><TR
+><TD CLASS="decl"
+>(<A HREF="/usr/local/share/doc/ghc/libraries/base/Data-Monoid.html#t%3AMonoid"
+>Monoid</A
+> m, <A HREF="/usr/local/share/doc/ghc/libraries/base/Control-Applicative.html#t%3AApplicative"
+>Applicative</A
+> f) =&gt; <A HREF="/usr/local/share/doc/ghc/libraries/base/Data-Monoid.html#t%3AMonoid"
+>Monoid</A
+> (<A HREF="Data-Monoid-Applicative.html#t%3ATraversalWith"
+>TraversalWith</A
+> f m)</TD
+></TR
+><TR
+><TD CLASS="decl"
+>(<A HREF="Data-Group.html#t%3AGroup"
+>Group</A
+> m, <A HREF="/usr/local/share/doc/ghc/libraries/base/Control-Applicative.html#t%3AApplicative"
+>Applicative</A
+> f) =&gt; <A HREF="Data-Group.html#t%3AGroup"
+>Group</A
+> (<A HREF="Data-Monoid-Applicative.html#t%3ATraversalWith"
+>TraversalWith</A
+> f m)</TD
+></TR
hunk ./dist/doc/html/monoids/Data-Monoid-Generator.html 677
+><TD CLASS="decl"
+><A HREF="Data-Monoid-Generator.html#t%3AGenerator"
+>Generator</A
+> (<A HREF="Data-Monoid-Generator-LZ78.html#t%3ALZ78"
+>LZ78</A
+> a)</TD
+></TR
+><TR
hunk ./dist/doc/html/monoids/Data-Monoid-Instances.html 137
+</LI
+><LI
+> <TT
+><A HREF="/usr/local/share/doc/ghc/libraries/base/Data-Monoid.html#t%3AMonoid"
+>Monoid</A
+></TT
+> instances for <TT
+><A HREF="/usr/local/share/doc/ghc/libraries/ghc-prim/GHC-Types.html#t%3AInt"
+>Int</A
+></TT
+>, <TT
+>Integer</TT
+>, and <TT
+><A HREF="/usr/local/share/doc/ghc/libraries/base/Data-Ratio.html#t%3ARatio"
+>Ratio</A
+></TT
+> using <TT
+>(+,0)</TT
+>
hunk ./dist/doc/html/monoids/Data-Monoid-Monad.html 96
+>Lifting Modules
+</A
+></DT
+><DT
+><A HREF="#3"
hunk ./dist/doc/html/monoids/Data-Monoid-Monad.html 210
+>  <A HREF="#t%3AActionWith"
+>ActionWith</A
+> f m = <A HREF="#v%3AActionWith"
+>ActionWith</A
+> {<TABLE CLASS="vanilla" CELLSPACING="0" CELLPADDING="0"
+><TR
+><TD CLASS="recfield"
+><A HREF="#v%3AgetActionWith"
+>getActionWith</A
+> :: f m</TD
+></TR
+></TABLE
+>}</TD
+></TR
+><TR
+><TD CLASS="s8"
+></TD
+></TR
+><TR
+><TD CLASS="decl"
+><SPAN CLASS="keyword"
+>newtype</SPAN
hunk ./dist/doc/html/monoids/Data-Monoid-Monad.html 455
+>Lifting Modules
+</A
+></TD
+></TR
+><TR
+><TD CLASS="s15"
+></TD
+></TR
+><TR
+><TD CLASS="topdecl"
+><TABLE CLASS="declbar"
+><TR
+><TD CLASS="declname"
+><SPAN CLASS="keyword"
+>newtype</SPAN
+>  <A NAME="t%3AActionWith"
+></A
+><B
+>ActionWith</B
+> f m </TD
+><TD CLASS="declbut"
+><A HREF="src/Data-Monoid-Monad.html#ActionWith"
+>Source</A
+></TD
+></TR
+></TABLE
+></TD
+></TR
+><TR
+><TD CLASS="body"
+><TABLE CLASS="vanilla" CELLSPACING="0" CELLPADDING="0"
+><TR
+><TD CLASS="ndoc"
+>if <TT
+>m</TT
+> is a <TT
+><A HREF="Data-Ring-Module.html#t%3AModule"
+>Module</A
+></TT
+> over <TT
+>r</TT
+> and <TT
+>f</TT
+> is a <TT
+><A HREF="/usr/local/share/doc/ghc/libraries/base/Control-Monad.html#t%3AMonad"
+>Monad</A
+></TT
+> then <TT
+>f <TT
+><A HREF="Data-Monoid-Monad.html#v%3AActionWith"
+>ActionWith</A
+></TT
+> m</TT
+> is a <TT
+><A HREF="Data-Ring-Module.html#t%3AModule"
+>Module</A
+></TT
+> as well
+</TD
+></TR
+><TR
+><TD CLASS="section4"
+>Constructors</TD
+></TR
+><TR
+><TD CLASS="body"
+><TABLE CLASS="vanilla" CELLSPACING="5" CELLPADDING="0"
+><TR
+><TD CLASS="arg"
+><A NAME="v%3AActionWith"
+></A
+><B
+>ActionWith</B
+></TD
+><TD CLASS="rdoc"
+></TD
+></TR
+><TR
+><TD CLASS="body" COLSPAN="2"
+><TABLE CLASS="vanilla" CELLSPACING="1" CELLPADDING="0"
+><TR
+><TD CLASS="arg"
+><A NAME="v%3AgetActionWith"
+></A
+><B
+>getActionWith</B
+> :: f m</TD
+><TD CLASS="rdoc"
+></TD
+></TR
+></TABLE
+></TD
+></TR
+></TABLE
+></TD
+></TR
+><TR
+><TD CLASS="section4"
+><IMG SRC="minus.gif" CLASS="coll" ONCLICK="toggle(this,'i:ActionWith')" ALT="show/hide"
+> Instances</TD
+></TR
+><TR
+><TD CLASS="body"
+><DIV ID="i:ActionWith" STYLE="display:block;"
+><TABLE CLASS="vanilla" CELLSPACING="1" CELLPADDING="0"
+><TR
+><TD CLASS="decl"
+>(<A HREF="Data-Monoid-Reducer.html#t%3AReducer"
+>Reducer</A
+> c m, <A HREF="/usr/local/share/doc/ghc/libraries/base/Control-Monad.html#t%3AMonad"
+>Monad</A
+> f) =&gt; <A HREF="Data-Monoid-Reducer.html#t%3AReducer"
+>Reducer</A
+> c (<A HREF="Data-Monoid-Monad.html#t%3AActionWith"
+>ActionWith</A
+> f m)</TD
+></TR
+><TR
+><TD CLASS="decl"
+>(<A HREF="Data-Ring-Module.html#t%3AModule"
+>Module</A
+> r m, <A HREF="/usr/local/share/doc/ghc/libraries/base/Control-Monad.html#t%3AMonad"
+>Monad</A
+> f) =&gt; <A HREF="Data-Ring-Module.html#t%3AModule"
+>Module</A
+> r (<A HREF="Data-Monoid-Monad.html#t%3AActionWith"
+>ActionWith</A
+> f m)</TD
+></TR
+><TR
+><TD CLASS="decl"
+>(<A HREF="Data-Ring-Module.html#t%3ARightModule"
+>RightModule</A
+> r m, <A HREF="/usr/local/share/doc/ghc/libraries/base/Control-Monad.html#t%3AMonad"
+>Monad</A
+> f) =&gt; <A HREF="Data-Ring-Module.html#t%3ARightModule"
+>RightModule</A
+> r (<A HREF="Data-Monoid-Monad.html#t%3AActionWith"
+>ActionWith</A
+> f m)</TD
+></TR
+><TR
+><TD CLASS="decl"
+>(<A HREF="Data-Ring-Module.html#t%3ALeftModule"
+>LeftModule</A
+> r m, <A HREF="/usr/local/share/doc/ghc/libraries/base/Control-Monad.html#t%3AMonad"
+>Monad</A
+> f) =&gt; <A HREF="Data-Ring-Module.html#t%3ALeftModule"
+>LeftModule</A
+> r (<A HREF="Data-Monoid-Monad.html#t%3AActionWith"
+>ActionWith</A
+> f m)</TD
+></TR
+><TR
+><TD CLASS="decl"
+><A HREF="/usr/local/share/doc/ghc/libraries/base/Control-Monad.html#t%3AMonad"
+>Monad</A
+> f =&gt; <A HREF="/usr/local/share/doc/ghc/libraries/base/Control-Monad.html#t%3AMonad"
+>Monad</A
+> (<A HREF="Data-Monoid-Monad.html#t%3AActionWith"
+>ActionWith</A
+> f)</TD
+></TR
+><TR
+><TD CLASS="decl"
+><A HREF="/usr/local/share/doc/ghc/libraries/base/Control-Monad.html#t%3AFunctor"
+>Functor</A
+> f =&gt; <A HREF="/usr/local/share/doc/ghc/libraries/base/Control-Monad.html#t%3AFunctor"
+>Functor</A
+> (<A HREF="Data-Monoid-Monad.html#t%3AActionWith"
+>ActionWith</A
+> f)</TD
+></TR
+><TR
+><TD CLASS="decl"
+><A HREF="/usr/local/share/doc/ghc/libraries/base/Control-Monad.html#t%3AMonadPlus"
+>MonadPlus</A
+> f =&gt; <A HREF="/usr/local/share/doc/ghc/libraries/base/Control-Monad.html#t%3AMonadPlus"
+>MonadPlus</A
+> (<A HREF="Data-Monoid-Monad.html#t%3AActionWith"
+>ActionWith</A
+> f)</TD
+></TR
+><TR
+><TD CLASS="decl"
+>Pointed f =&gt; Pointed (<A HREF="Data-Monoid-Monad.html#t%3AActionWith"
+>ActionWith</A
+> f)</TD
+></TR
+><TR
+><TD CLASS="decl"
+><A HREF="/usr/local/share/doc/ghc/libraries/base/Data-Eq.html#t%3AEq"
+>Eq</A
+> (f m) =&gt; <A HREF="/usr/local/share/doc/ghc/libraries/base/Data-Eq.html#t%3AEq"
+>Eq</A
+> (<A HREF="Data-Monoid-Monad.html#t%3AActionWith"
+>ActionWith</A
+> f m)</TD
+></TR
+><TR
+><TD CLASS="decl"
+><A HREF="/usr/local/share/doc/ghc/libraries/base/Data-Ord.html#t%3AOrd"
+>Ord</A
+> (f m) =&gt; <A HREF="/usr/local/share/doc/ghc/libraries/base/Data-Ord.html#t%3AOrd"
+>Ord</A
+> (<A HREF="Data-Monoid-Monad.html#t%3AActionWith"
+>ActionWith</A
+> f m)</TD
+></TR
+><TR
+><TD CLASS="decl"
+><A HREF="/usr/local/share/doc/ghc/libraries/base/Text-Read.html#t%3ARead"
+>Read</A
+> (f m) =&gt; <A HREF="/usr/local/share/doc/ghc/libraries/base/Text-Read.html#t%3ARead"
+>Read</A
+> (<A HREF="Data-Monoid-Monad.html#t%3AActionWith"
+>ActionWith</A
+> f m)</TD
+></TR
+><TR
+><TD CLASS="decl"
+><A HREF="/usr/local/share/doc/ghc/libraries/base/Text-Show.html#t%3AShow"
+>Show</A
+> (f m) =&gt; <A HREF="/usr/local/share/doc/ghc/libraries/base/Text-Show.html#t%3AShow"
+>Show</A
+> (<A HREF="Data-Monoid-Monad.html#t%3AActionWith"
+>ActionWith</A
+> f m)</TD
+></TR
+><TR
+><TD CLASS="decl"
+>(<A HREF="/usr/local/share/doc/ghc/libraries/base/Data-Monoid.html#t%3AMonoid"
+>Monoid</A
+> m, <A HREF="/usr/local/share/doc/ghc/libraries/base/Control-Monad.html#t%3AMonad"
+>Monad</A
+> f) =&gt; <A HREF="/usr/local/share/doc/ghc/libraries/base/Data-Monoid.html#t%3AMonoid"
+>Monoid</A
+> (<A HREF="Data-Monoid-Monad.html#t%3AActionWith"
+>ActionWith</A
+> f m)</TD
+></TR
+><TR
+><TD CLASS="decl"
+>(<A HREF="Data-Group.html#t%3AGroup"
+>Group</A
+> m, <A HREF="/usr/local/share/doc/ghc/libraries/base/Control-Monad.html#t%3AMonad"
+>Monad</A
+> f) =&gt; <A HREF="Data-Group.html#t%3AGroup"
+>Group</A
+> (<A HREF="Data-Monoid-Monad.html#t%3AActionWith"
+>ActionWith</A
+> f m)</TD
+></TR
+></TABLE
+></DIV
+></TD
+></TR
+></TABLE
+></TD
+></TR
+><TR
+><TD CLASS="s15"
+></TD
+></TR
+><TR
+><TD CLASS="section1"
+><A NAME="3"
hunk ./dist/doc/html/monoids/Data-Monoid-Multiplicative.html 458
+> <A HREF="/usr/local/share/doc/ghc/libraries/ghc-prim/GHC-Types.html#t%3AInt"
+>Int</A
+></TD
+></TR
+><TR
+><TD CLASS="decl"
+><A HREF="Data-Monoid-Multiplicative.html#t%3AMultiplicative"
+>Multiplicative</A
+> Integer</TD
+></TR
+><TR
+><TD CLASS="decl"
+><A HREF="Data-Monoid-Multiplicative.html#t%3AMultiplicative"
+>Multiplicative</A
hunk ./dist/doc/html/monoids/Data-Monoid-Multiplicative.html 486
+><A HREF="/usr/local/share/doc/ghc/libraries/base/Prelude.html#t%3AIntegral"
+>Integral</A
+> m =&gt; <A HREF="Data-Monoid-Multiplicative.html#t%3AMultiplicative"
+>Multiplicative</A
+> (<A HREF="/usr/local/share/doc/ghc/libraries/base/Data-Ratio.html#t%3ARatio"
+>Ratio</A
+> m)</TD
+></TR
+><TR
+><TD CLASS="decl"
hunk ./dist/doc/html/monoids/Data-Monoid-Multiplicative.html 752
+><TR
+><TD CLASS="decl"
+><A HREF="Data-Ring-Module.html#t%3AModule"
+>Module</A
+> r m =&gt; <A HREF="Data-Monoid-Multiplicative.html#t%3AMultiplicative"
+>Multiplicative</A
+> (<A HREF="Data-Ring-Module-AutomaticDifferentiation.html#t%3AD"
+>D</A
+> r m)</TD
+></TR
hunk ./dist/doc/html/monoids/Data-Monoid-Reducer.html 227
+><TR
+><TD CLASS="s8"
+></TD
+></TR
+><TR
+><TD CLASS="decl"
+><A HREF="#v%3ApureUnit"
+>pureUnit</A
+> :: (<A HREF="/usr/local/share/doc/ghc/libraries/base/Control-Applicative.html#t%3AApplicative"
+>Applicative</A
+> f, <A HREF="Data-Monoid-Reducer.html#t%3AReducer"
+>Reducer</A
+> c n) =&gt; c -&gt; f n</TD
+></TR
+><TR
+><TD CLASS="s8"
+></TD
+></TR
+><TR
+><TD CLASS="decl"
+><A HREF="#v%3AreturnUnit"
+>returnUnit</A
+> :: (<A HREF="/usr/local/share/doc/ghc/libraries/base/Control-Monad.html#t%3AMonad"
+>Monad</A
+> m, <A HREF="Data-Monoid-Reducer.html#t%3AReducer"
+>Reducer</A
+> c n) =&gt; c -&gt; m n</TD
+></TR
hunk ./dist/doc/html/monoids/Data-Monoid-Reducer.html 951
+>(<A HREF="Data-Monoid-Reducer.html#t%3AReducer"
+>Reducer</A
+> c m, <A HREF="/usr/local/share/doc/ghc/libraries/base/Control-Applicative.html#t%3AApplicative"
+>Applicative</A
+> f) =&gt; <A HREF="Data-Monoid-Reducer.html#t%3AReducer"
+>Reducer</A
+> c (<A HREF="Data-Monoid-Applicative.html#t%3ATraversalWith"
+>TraversalWith</A
+> f m)</TD
+></TR
+><TR
+><TD CLASS="decl"
hunk ./dist/doc/html/monoids/Data-Monoid-Reducer.html 975
+>(<A HREF="Data-Monoid-Reducer.html#t%3AReducer"
+>Reducer</A
+> c m, <A HREF="/usr/local/share/doc/ghc/libraries/base/Control-Monad.html#t%3AMonad"
+>Monad</A
+> f) =&gt; <A HREF="Data-Monoid-Reducer.html#t%3AReducer"
+>Reducer</A
+> c (<A HREF="Data-Monoid-Monad.html#t%3AActionWith"
+>ActionWith</A
+> f m)</TD
+></TR
+><TR
+><TD CLASS="decl"
hunk ./dist/doc/html/monoids/Data-Monoid-Reducer.html 1001
+> c r, <A HREF="Data-Monoid-Reducer.html#t%3AReducer"
+>Reducer</A
+> c m) =&gt; <A HREF="Data-Monoid-Reducer.html#t%3AReducer"
+>Reducer</A
+> c (<A HREF="Data-Ring-Module-AutomaticDifferentiation.html#t%3AD"
+>D</A
+> r m)</TD
+></TR
+><TR
+><TD CLASS="decl"
+>(<A HREF="Data-Monoid-Reducer.html#t%3AReducer"
+>Reducer</A
hunk ./dist/doc/html/monoids/Data-Monoid-Reducer.html 1547
+><TR
+><TD CLASS="s15"
+></TD
+></TR
+><TR
+><TD CLASS="topdecl"
+><TABLE CLASS="declbar"
+><TR
+><TD CLASS="declname"
+><A NAME="v%3ApureUnit"
+></A
+><B
+>pureUnit</B
+> :: (<A HREF="/usr/local/share/doc/ghc/libraries/base/Control-Applicative.html#t%3AApplicative"
+>Applicative</A
+> f, <A HREF="Data-Monoid-Reducer.html#t%3AReducer"
+>Reducer</A
+> c n) =&gt; c -&gt; f n</TD
+><TD CLASS="declbut"
+><A HREF="src/Data-Monoid-Reducer.html#pureUnit"
+>Source</A
+></TD
+></TR
+></TABLE
+></TD
+></TR
+><TR
+><TD CLASS="s15"
+></TD
+></TR
+><TR
+><TD CLASS="topdecl"
+><TABLE CLASS="declbar"
+><TR
+><TD CLASS="declname"
+><A NAME="v%3AreturnUnit"
+></A
+><B
+>returnUnit</B
+> :: (<A HREF="/usr/local/share/doc/ghc/libraries/base/Control-Monad.html#t%3AMonad"
+>Monad</A
+> m, <A HREF="Data-Monoid-Reducer.html#t%3AReducer"
+>Reducer</A
+> c n) =&gt; c -&gt; m n</TD
+><TD CLASS="declbut"
+><A HREF="src/Data-Monoid-Reducer.html#returnUnit"
+>Source</A
+></TD
+></TR
+></TABLE
+></TD
+></TR
hunk ./dist/doc/html/monoids/Data-Ring-Semi-Near.html 364
+>(<A HREF="Data-Ring-Semi-Near.html#t%3ALeftSemiNearRing"
+>LeftSemiNearRing</A
+> r, <A HREF="Data-Ring-Module.html#t%3AModule"
+>Module</A
+> r m) =&gt; <A HREF="Data-Ring-Semi-Near.html#t%3ALeftSemiNearRing"
+>LeftSemiNearRing</A
+> (<A HREF="Data-Ring-Module-AutomaticDifferentiation.html#t%3AD"
+>D</A
+> r m)</TD
+></TR
+><TR
+><TD CLASS="decl"
hunk ./dist/doc/html/monoids/Data-Ring-Semi-Near.html 603
+><TR
+><TD CLASS="decl"
+>(<A HREF="Data-Ring-Semi-Near.html#t%3ARightSemiNearRing"
+>RightSemiNearRing</A
+> r, <A HREF="Data-Ring-Module.html#t%3AModule"
+>Module</A
+> r m) =&gt; <A HREF="Data-Ring-Semi-Near.html#t%3ARightSemiNearRing"
+>RightSemiNearRing</A
+> (<A HREF="Data-Ring-Module-AutomaticDifferentiation.html#t%3AD"
+>D</A
+> r m)</TD
+></TR
hunk ./dist/doc/html/monoids/Data-Ring-Semi-Tropical.html 69
->Max
+>Tropical Semirings
hunk ./dist/doc/html/monoids/Data-Ring-Semi-Tropical.html 187
->Max
+>Tropical Semirings
hunk ./dist/doc/html/monoids/Data-Ring-Semi.html 264
+></TR
+><TR
+><TD CLASS="decl"
+>(<A HREF="Data-Ring-Semi.html#t%3ASemiRing"
+>SemiRing</A
+> r, <A HREF="Data-Ring-Module.html#t%3AModule"
+>Module</A
+> r m) =&gt; <A HREF="Data-Ring-Semi.html#t%3ASemiRing"
+>SemiRing</A
+> (<A HREF="Data-Ring-Module-AutomaticDifferentiation.html#t%3AD"
+>D</A
+> r m)</TD
hunk ./dist/doc/html/monoids/Data-Ring.html 148
+></TR
+><TR
+><TD CLASS="decl"
+>(<A HREF="Data-Ring.html#t%3ARing"
+>Ring</A
+> r, <A HREF="Data-Ring-Module.html#t%3AModule"
+>Module</A
+> r m, <A HREF="Data-Group.html#t%3AGroup"
+>Group</A
+> m) =&gt; <A HREF="Data-Ring.html#t%3ARing"
+>Ring</A
+> (<A HREF="Data-Ring-Module-AutomaticDifferentiation.html#t%3AD"
+>D</A
+> r m)</TD
hunk ./dist/doc/html/monoids/doc-index.html 58
+>*.</TD
+><TD CLASS="indexlinks"
+><A HREF="Data-Ring-Module.html#v%3A%2A."
+>Data.Ring.Module</A
+>, Data.Monoid.Applicative, Data.Ring.Module.AutomaticDifferentiation</TD
+></TR
+><TR CLASS="indexrow"
+><TD CLASS="indexentry"
hunk ./dist/doc/html/monoids/doc-index.html 88
+>.*</TD
+><TD CLASS="indexlinks"
+><A HREF="Data-Ring-Module.html#v%3A.%2A"
+>Data.Ring.Module</A
+>, Data.Monoid.Applicative, Data.Ring.Module.AutomaticDifferentiation</TD
+></TR
+><TR CLASS="indexrow"
+><TD CLASS="indexentry"
hunk ./dist/doc/html/monoids/doc-index.html 128
+>ActionWith</TD
+></TR
+><TR CLASS="indexrow"
+><TD CLASS="indexannot"
+>1 (Type/Class)</TD
+><TD CLASS="indexlinks"
+><A HREF="Data-Monoid-Monad.html#t%3AActionWith"
+>Data.Monoid.Monad</A
+></TD
+></TR
+><TR CLASS="indexrow"
+><TD CLASS="indexannot"
+>2 (Data Constructor)</TD
+><TD CLASS="indexlinks"
+><A HREF="Data-Monoid-Monad.html#v%3AActionWith"
+>Data.Monoid.Monad</A
+></TD
+></TR
+><TR CLASS="indexrow"
+><TD CLASS="indexentry" COLSPAN="2"
hunk ./dist/doc/html/monoids/doc-index.html 154
->Data.Monoid.Reducer, Data.Monoid.Reducer.Char, Data.Monoid.Reducer.With, Data.Monoid.Lexical.UTF8.Decoder, Data.Monoid.Generator, Data.Monoid.Lexical.SourcePosition, Data.Monoid.Lexical.Words, Data.Monoid.Self, Data.Monoid.FromString, Data.Monoid.Categorical, Data.Monoid.Additive, Data.Monoid.Additive.Sugar, Data.Monoid.Multiplicative, Data.Monoid.Multiplicative.Sugar, Data.Ring.Semi.Near, Data.Monoid.Applicative, Data.Monoid.Monad, Data.Monoid.Combinators, Data.Monoid.Lexical.RunLengthEncoding, Data.Ring.Semi, Data.Ring.Semi.Tropical, Data.Ring.Semi.Ord, Data.Ring.Sugar, Data.Group, Data.Group.Combinators, Data.Group.Sugar, Data.Ring, Data.Ring.Boolean, Data.Ring.FromNum</TD
+>Data.Monoid.Reducer, Data.Monoid.Reducer.Char, Data.Monoid.Reducer.With, Data.Monoid.Lexical.UTF8.Decoder, Data.Monoid.Generator, Data.Monoid.Lexical.SourcePosition, Data.Monoid.Lexical.Words, Data.Monoid.Self, Data.Monoid.Generator.LZ78, Data.Monoid.FromString, Data.Monoid.Categorical, Data.Monoid.Additive, Data.Monoid.Additive.Sugar, Data.Monoid.Multiplicative, Data.Monoid.Multiplicative.Sugar, Data.Ring.Semi.Near, Data.Ring.Semi, Data.Ring.Semi.Tropical, Data.Ring.Semi.Ord, Data.Ring.Sugar, Data.Group, Data.Group.Combinators, Data.Group.Sugar, Data.Ring, Data.Ring.Boolean, Data.Ring.FromNum, Data.Ring.Module, Data.Monoid.Applicative, Data.Monoid.Monad, Data.Monoid.Combinators, Data.Monoid.Lexical.RunLengthEncoding, Data.Ring.Module.AutomaticDifferentiation</TD
hunk ./dist/doc/html/monoids/doc-index.html 160
->Data.Monoid.Reducer, Data.Monoid.Reducer.Char, Data.Monoid.Reducer.With, Data.Monoid.Lexical.UTF8.Decoder, Data.Monoid.Generator, Data.Monoid.Lexical.SourcePosition, Data.Monoid.Lexical.Words, Data.Monoid.Self, Data.Monoid.FromString, Data.Monoid.Categorical, Data.Monoid.Additive, Data.Monoid.Additive.Sugar, Data.Monoid.Multiplicative, Data.Monoid.Multiplicative.Sugar, Data.Ring.Semi.Near, Data.Monoid.Applicative, Data.Monoid.Monad, Data.Monoid.Combinators, Data.Monoid.Lexical.RunLengthEncoding, Data.Ring.Semi, Data.Ring.Semi.Tropical, Data.Ring.Semi.Ord, Data.Ring.Sugar, Data.Group, Data.Group.Combinators, Data.Group.Sugar, Data.Ring, Data.Ring.Boolean, Data.Ring.FromNum</TD
+>Data.Monoid.Reducer, Data.Monoid.Reducer.Char, Data.Monoid.Reducer.With, Data.Monoid.Lexical.UTF8.Decoder, Data.Monoid.Generator, Data.Monoid.Lexical.SourcePosition, Data.Monoid.Lexical.Words, Data.Monoid.Self, Data.Monoid.Generator.LZ78, Data.Monoid.FromString, Data.Monoid.Categorical, Data.Monoid.Additive, Data.Monoid.Additive.Sugar, Data.Monoid.Multiplicative, Data.Monoid.Multiplicative.Sugar, Data.Ring.Semi.Near, Data.Ring.Semi, Data.Ring.Semi.Tropical, Data.Ring.Semi.Ord, Data.Ring.Sugar, Data.Group, Data.Group.Combinators, Data.Group.Sugar, Data.Ring, Data.Ring.Boolean, Data.Ring.FromNum, Data.Ring.Module, Data.Monoid.Applicative, Data.Monoid.Monad, Data.Monoid.Combinators, Data.Monoid.Lexical.RunLengthEncoding, Data.Ring.Module.AutomaticDifferentiation</TD
hunk ./dist/doc/html/monoids/doc-index.html 186
->Data.Monoid.Reducer, Data.Monoid.Reducer.Char, Data.Monoid.Reducer.With, Data.Monoid.Lexical.UTF8.Decoder, Data.Monoid.Generator, Data.Monoid.Lexical.SourcePosition, Data.Monoid.Lexical.Words, Data.Monoid.Self, Data.Monoid.FromString, Data.Monoid.Categorical, Data.Monoid.Additive, Data.Monoid.Additive.Sugar, Data.Monoid.Multiplicative, Data.Monoid.Multiplicative.Sugar, Data.Ring.Semi.Near, Data.Monoid.Applicative, Data.Monoid.Monad, Data.Monoid.Combinators, Data.Monoid.Lexical.RunLengthEncoding, Data.Ring.Semi, Data.Ring.Semi.Tropical, Data.Ring.Semi.Ord, Data.Ring.Sugar, Data.Group, Data.Group.Combinators, Data.Group.Sugar, Data.Ring, Data.Ring.Boolean, Data.Ring.FromNum</TD
+>Data.Monoid.Reducer, Data.Monoid.Reducer.Char, Data.Monoid.Reducer.With, Data.Monoid.Lexical.UTF8.Decoder, Data.Monoid.Generator, Data.Monoid.Lexical.SourcePosition, Data.Monoid.Lexical.Words, Data.Monoid.Self, Data.Monoid.Generator.LZ78, Data.Monoid.FromString, Data.Monoid.Categorical, Data.Monoid.Additive, Data.Monoid.Additive.Sugar, Data.Monoid.Multiplicative, Data.Monoid.Multiplicative.Sugar, Data.Ring.Semi.Near, Data.Ring.Semi, Data.Ring.Semi.Tropical, Data.Ring.Semi.Ord, Data.Ring.Sugar, Data.Group, Data.Group.Combinators, Data.Group.Sugar, Data.Ring, Data.Ring.Boolean, Data.Ring.FromNum, Data.Ring.Module, Data.Monoid.Applicative, Data.Monoid.Monad, Data.Monoid.Combinators, Data.Monoid.Lexical.RunLengthEncoding, Data.Ring.Module.AutomaticDifferentiation</TD
hunk ./dist/doc/html/monoids/doc-index.html 192
->Data.Monoid.Reducer, Data.Monoid.Reducer.Char, Data.Monoid.Reducer.With, Data.Monoid.Lexical.UTF8.Decoder, Data.Monoid.Generator, Data.Monoid.Lexical.SourcePosition, Data.Monoid.Lexical.Words, Data.Monoid.Self, Data.Monoid.FromString, Data.Monoid.Categorical, Data.Monoid.Additive, Data.Monoid.Additive.Sugar, Data.Monoid.Multiplicative, Data.Monoid.Multiplicative.Sugar, Data.Ring.Semi.Near, Data.Monoid.Applicative, Data.Monoid.Monad, Data.Monoid.Combinators, Data.Monoid.Lexical.RunLengthEncoding, Data.Ring.Semi, Data.Ring.Semi.Tropical, Data.Ring.Semi.Ord, Data.Ring.Sugar, Data.Group, Data.Group.Combinators, Data.Group.Sugar, Data.Ring, Data.Ring.Boolean, Data.Ring.FromNum</TD
+>Data.Monoid.Reducer, Data.Monoid.Reducer.Char, Data.Monoid.Reducer.With, Data.Monoid.Lexical.UTF8.Decoder, Data.Monoid.Generator, Data.Monoid.Lexical.SourcePosition, Data.Monoid.Lexical.Words, Data.Monoid.Self, Data.Monoid.Generator.LZ78, Data.Monoid.FromString, Data.Monoid.Categorical, Data.Monoid.Additive, Data.Monoid.Additive.Sugar, Data.Monoid.Multiplicative, Data.Monoid.Multiplicative.Sugar, Data.Ring.Semi.Near, Data.Ring.Semi, Data.Ring.Semi.Tropical, Data.Ring.Semi.Ord, Data.Ring.Sugar, Data.Group, Data.Group.Combinators, Data.Group.Sugar, Data.Ring, Data.Ring.Boolean, Data.Ring.FromNum, Data.Ring.Module, Data.Monoid.Applicative, Data.Monoid.Monad, Data.Monoid.Combinators, Data.Monoid.Lexical.RunLengthEncoding, Data.Ring.Module.AutomaticDifferentiation</TD
hunk ./dist/doc/html/monoids/doc-index.html 206
->Data.Monoid.Reducer, Data.Monoid.Reducer.Char, Data.Monoid.Reducer.With, Data.Monoid.Lexical.UTF8.Decoder, Data.Monoid.Generator, Data.Monoid.Lexical.SourcePosition, Data.Monoid.Lexical.Words, Data.Monoid.Self, Data.Monoid.FromString, Data.Monoid.Categorical, Data.Monoid.Additive, Data.Monoid.Additive.Sugar, Data.Monoid.Multiplicative, Data.Monoid.Multiplicative.Sugar, Data.Ring.Semi.Near, Data.Monoid.Applicative, Data.Monoid.Monad, Data.Monoid.Combinators, Data.Monoid.Lexical.RunLengthEncoding, Data.Ring.Semi, Data.Ring.Semi.Tropical, Data.Ring.Semi.Ord, Data.Ring.Sugar, Data.Group, Data.Group.Combinators, Data.Group.Sugar, Data.Ring, Data.Ring.Boolean, Data.Ring.FromNum</TD
+>Data.Monoid.Reducer, Data.Monoid.Reducer.Char, Data.Monoid.Reducer.With, Data.Monoid.Lexical.UTF8.Decoder, Data.Monoid.Generator, Data.Monoid.Lexical.SourcePosition, Data.Monoid.Lexical.Words, Data.Monoid.Self, Data.Monoid.Generator.LZ78, Data.Monoid.FromString, Data.Monoid.Categorical, Data.Monoid.Additive, Data.Monoid.Additive.Sugar, Data.Monoid.Multiplicative, Data.Monoid.Multiplicative.Sugar, Data.Ring.Semi.Near, Data.Ring.Semi, Data.Ring.Semi.Tropical, Data.Ring.Semi.Ord, Data.Ring.Sugar, Data.Group, Data.Group.Combinators, Data.Group.Sugar, Data.Ring, Data.Ring.Boolean, Data.Ring.FromNum, Data.Ring.Module, Data.Monoid.Applicative, Data.Monoid.Monad, Data.Monoid.Combinators, Data.Monoid.Lexical.RunLengthEncoding, Data.Ring.Module.AutomaticDifferentiation</TD
hunk ./dist/doc/html/monoids/doc-index.html 244
->, Data.Monoid.Combinators</TD
+>, Data.Monoid.Generator.LZ78, Data.Monoid.Combinators</TD
hunk ./dist/doc/html/monoids/doc-index.html 252
->, Data.Monoid.Combinators</TD
+>, Data.Monoid.Generator.LZ78, Data.Monoid.Combinators</TD
hunk ./dist/doc/html/monoids/doc-index.html 276
->, Data.Monoid.Reducer.Char, Data.Monoid.Reducer.With, Data.Monoid.Union, Data.Monoid.Lexical.UTF8.Decoder, Data.Monoid.Generator, Data.Monoid.Lexical.SourcePosition, Data.Monoid.Lexical.Words, Data.Monoid.Self, Data.Monoid.FromString, Data.Monoid.Categorical, Data.Monoid.Applicative, Data.Monoid.Monad, Data.Monoid.Combinators, Data.Monoid.Lexical.RunLengthEncoding</TD
+>, Data.Monoid.Reducer.Char, Data.Monoid.Reducer.With, Data.Monoid.Union, Data.Monoid.Lexical.UTF8.Decoder, Data.Monoid.Generator, Data.Monoid.Lexical.SourcePosition, Data.Monoid.Lexical.Words, Data.Monoid.Self, Data.Monoid.Generator.LZ78, Data.Monoid.FromString, Data.Monoid.Categorical, Data.Monoid.Applicative, Data.Monoid.Monad, Data.Monoid.Combinators, Data.Monoid.Lexical.RunLengthEncoding</TD
hunk ./dist/doc/html/monoids/doc-index.html 287
+><TD CLASS="indexentry"
+>D</TD
+><TD CLASS="indexlinks"
+><A HREF="Data-Ring-Module-AutomaticDifferentiation.html#t%3AD"
+>Data.Ring.Module.AutomaticDifferentiation</A
+></TD
+></TR
+><TR CLASS="indexrow"
+><TD CLASS="indexentry"
+>decode</TD
+><TD CLASS="indexlinks"
+><A HREF="Data-Monoid-Generator-LZ78.html#v%3Adecode"
+>Data.Monoid.Generator.LZ78</A
+></TD
+></TR
+><TR CLASS="indexrow"
hunk ./dist/doc/html/monoids/doc-index.html 310
->Data.Monoid.Reducer, Data.Monoid.Reducer.Char, Data.Monoid.Reducer.With, Data.Monoid.Lexical.UTF8.Decoder, Data.Monoid.Generator, Data.Monoid.Lexical.SourcePosition, Data.Monoid.Lexical.Words, Data.Monoid.Self, Data.Monoid.FromString, Data.Monoid.Categorical, Data.Monoid.Additive, Data.Monoid.Additive.Sugar, Data.Monoid.Multiplicative, Data.Monoid.Multiplicative.Sugar, Data.Ring.Semi.Near, Data.Monoid.Applicative, Data.Monoid.Monad, Data.Monoid.Combinators, Data.Monoid.Lexical.RunLengthEncoding, Data.Ring.Semi, Data.Ring.Semi.Tropical, Data.Ring.Semi.Ord, Data.Ring.Sugar, Data.Group, Data.Group.Combinators, Data.Group.Sugar, Data.Ring, Data.Ring.Boolean, Data.Ring.FromNum</TD
+>Data.Monoid.Reducer, Data.Monoid.Reducer.Char, Data.Monoid.Reducer.With, Data.Monoid.Lexical.UTF8.Decoder, Data.Monoid.Generator, Data.Monoid.Lexical.SourcePosition, Data.Monoid.Lexical.Words, Data.Monoid.Self, Data.Monoid.Generator.LZ78, Data.Monoid.FromString, Data.Monoid.Categorical, Data.Monoid.Additive, Data.Monoid.Additive.Sugar, Data.Monoid.Multiplicative, Data.Monoid.Multiplicative.Sugar, Data.Ring.Semi.Near, Data.Ring.Semi, Data.Ring.Semi.Tropical, Data.Ring.Semi.Ord, Data.Ring.Sugar, Data.Group, Data.Group.Combinators, Data.Group.Sugar, Data.Ring, Data.Ring.Boolean, Data.Ring.FromNum, Data.Ring.Module, Data.Monoid.Applicative, Data.Monoid.Monad, Data.Monoid.Combinators, Data.Monoid.Lexical.RunLengthEncoding, Data.Ring.Module.AutomaticDifferentiation</TD
hunk ./dist/doc/html/monoids/doc-index.html 316
->Data.Monoid.Reducer, Data.Monoid.Reducer.Char, Data.Monoid.Reducer.With, Data.Monoid.Lexical.UTF8.Decoder, Data.Monoid.Generator, Data.Monoid.Lexical.SourcePosition, Data.Monoid.Lexical.Words, Data.Monoid.Self, Data.Monoid.FromString, Data.Monoid.Categorical, Data.Monoid.Additive, Data.Monoid.Additive.Sugar, Data.Monoid.Multiplicative, Data.Monoid.Multiplicative.Sugar, Data.Ring.Semi.Near, Data.Monoid.Applicative, Data.Monoid.Monad, Data.Monoid.Combinators, Data.Monoid.Lexical.RunLengthEncoding, Data.Ring.Semi, Data.Ring.Semi.Tropical, Data.Ring.Semi.Ord, Data.Ring.Sugar, Data.Group, Data.Group.Combinators, Data.Group.Sugar, Data.Ring, Data.Ring.Boolean, Data.Ring.FromNum</TD
+>Data.Monoid.Reducer, Data.Monoid.Reducer.Char, Data.Monoid.Reducer.With, Data.Monoid.Lexical.UTF8.Decoder, Data.Monoid.Generator, Data.Monoid.Lexical.SourcePosition, Data.Monoid.Lexical.Words, Data.Monoid.Self, Data.Monoid.Generator.LZ78, Data.Monoid.FromString, Data.Monoid.Categorical, Data.Monoid.Additive, Data.Monoid.Additive.Sugar, Data.Monoid.Multiplicative, Data.Monoid.Multiplicative.Sugar, Data.Ring.Semi.Near, Data.Ring.Semi, Data.Ring.Semi.Tropical, Data.Ring.Semi.Ord, Data.Ring.Sugar, Data.Group, Data.Group.Combinators, Data.Group.Sugar, Data.Ring, Data.Ring.Boolean, Data.Ring.FromNum, Data.Ring.Module, Data.Monoid.Applicative, Data.Monoid.Monad, Data.Monoid.Combinators, Data.Monoid.Lexical.RunLengthEncoding, Data.Ring.Module.AutomaticDifferentiation</TD
hunk ./dist/doc/html/monoids/doc-index.html 324
->, Data.Monoid.Combinators</TD
+>, Data.Monoid.Generator.LZ78, Data.Monoid.Combinators</TD
hunk ./dist/doc/html/monoids/doc-index.html 358
->Data.Monoid.Reducer, Data.Monoid.Reducer.Char, Data.Monoid.Reducer.With, Data.Monoid.Lexical.UTF8.Decoder, Data.Monoid.Generator, Data.Monoid.Lexical.SourcePosition, Data.Monoid.Lexical.Words, Data.Monoid.Self, Data.Monoid.FromString, Data.Monoid.Categorical, Data.Monoid.Additive, Data.Monoid.Additive.Sugar, Data.Monoid.Multiplicative, Data.Monoid.Multiplicative.Sugar, Data.Ring.Semi.Near, Data.Monoid.Applicative, Data.Monoid.Monad, Data.Monoid.Combinators, Data.Monoid.Lexical.RunLengthEncoding, Data.Ring.Semi, Data.Ring.Semi.Tropical, Data.Ring.Semi.Ord, Data.Ring.Sugar, Data.Group, Data.Group.Combinators, Data.Group.Sugar, Data.Ring, Data.Ring.Boolean, Data.Ring.FromNum</TD
+>Data.Monoid.Reducer, Data.Monoid.Reducer.Char, Data.Monoid.Reducer.With, Data.Monoid.Lexical.UTF8.Decoder, Data.Monoid.Generator, Data.Monoid.Lexical.SourcePosition, Data.Monoid.Lexical.Words, Data.Monoid.Self, Data.Monoid.Generator.LZ78, Data.Monoid.FromString, Data.Monoid.Categorical, Data.Monoid.Additive, Data.Monoid.Additive.Sugar, Data.Monoid.Multiplicative, Data.Monoid.Multiplicative.Sugar, Data.Ring.Semi.Near, Data.Ring.Semi, Data.Ring.Semi.Tropical, Data.Ring.Semi.Ord, Data.Ring.Sugar, Data.Group, Data.Group.Combinators, Data.Group.Sugar, Data.Ring, Data.Ring.Boolean, Data.Ring.FromNum, Data.Ring.Module, Data.Monoid.Applicative, Data.Monoid.Monad, Data.Monoid.Combinators, Data.Monoid.Lexical.RunLengthEncoding, Data.Ring.Module.AutomaticDifferentiation</TD
hunk ./dist/doc/html/monoids/doc-index.html 364
->Data.Monoid.Reducer, Data.Monoid.Reducer.Char, Data.Monoid.Reducer.With, Data.Monoid.Lexical.UTF8.Decoder, Data.Monoid.Generator, Data.Monoid.Lexical.SourcePosition, Data.Monoid.Lexical.Words, Data.Monoid.Self, Data.Monoid.FromString, Data.Monoid.Categorical, Data.Monoid.Additive, Data.Monoid.Additive.Sugar, Data.Monoid.Multiplicative, Data.Monoid.Multiplicative.Sugar, Data.Ring.Semi.Near, Data.Monoid.Applicative, Data.Monoid.Monad, Data.Monoid.Combinators, Data.Monoid.Lexical.RunLengthEncoding, Data.Ring.Semi, Data.Ring.Semi.Tropical, Data.Ring.Semi.Ord, Data.Ring.Sugar, Data.Group, Data.Group.Combinators, Data.Group.Sugar, Data.Ring, Data.Ring.Boolean, Data.Ring.FromNum</TD
+>Data.Monoid.Reducer, Data.Monoid.Reducer.Char, Data.Monoid.Reducer.With, Data.Monoid.Lexical.UTF8.Decoder, Data.Monoid.Generator, Data.Monoid.Lexical.SourcePosition, Data.Monoid.Lexical.Words, Data.Monoid.Self, Data.Monoid.Generator.LZ78, Data.Monoid.FromString, Data.Monoid.Categorical, Data.Monoid.Additive, Data.Monoid.Additive.Sugar, Data.Monoid.Multiplicative, Data.Monoid.Multiplicative.Sugar, Data.Ring.Semi.Near, Data.Ring.Semi, Data.Ring.Semi.Tropical, Data.Ring.Semi.Ord, Data.Ring.Sugar, Data.Group, Data.Group.Combinators, Data.Group.Sugar, Data.Ring, Data.Ring.Boolean, Data.Ring.FromNum, Data.Ring.Module, Data.Monoid.Applicative, Data.Monoid.Monad, Data.Monoid.Combinators, Data.Monoid.Lexical.RunLengthEncoding, Data.Ring.Module.AutomaticDifferentiation</TD
hunk ./dist/doc/html/monoids/doc-index.html 376
->, Data.Monoid.Multiplicative.Sugar, Data.Ring.Semi.Near, Data.Monoid.Applicative, Data.Monoid.Monad, Data.Ring.Semi, Data.Ring.Semi.Tropical, Data.Ring.Semi.Ord, Data.Ring.Sugar, Data.Ring, Data.Ring.Boolean, Data.Ring.FromNum</TD
+>, Data.Monoid.Multiplicative.Sugar, Data.Ring.Semi.Near, Data.Ring.Semi, Data.Ring.Semi.Tropical, Data.Ring.Semi.Ord, Data.Ring.Sugar, Data.Ring, Data.Ring.Boolean, Data.Ring.FromNum, Data.Ring.Module, Data.Monoid.Applicative, Data.Monoid.Monad, Data.Ring.Module.AutomaticDifferentiation</TD
hunk ./dist/doc/html/monoids/doc-index.html 384
->, Data.Monoid.Multiplicative.Sugar, Data.Ring.Semi.Near, Data.Monoid.Applicative, Data.Monoid.Monad, Data.Ring.Semi, Data.Ring.Semi.Tropical, Data.Ring.Semi.Ord, Data.Ring.Sugar, Data.Ring, Data.Ring.Boolean, Data.Ring.FromNum</TD
+>, Data.Monoid.Multiplicative.Sugar, Data.Ring.Semi.Near, Data.Ring.Semi, Data.Ring.Semi.Tropical, Data.Ring.Semi.Ord, Data.Ring.Sugar, Data.Ring, Data.Ring.Boolean, Data.Ring.FromNum, Data.Ring.Module, Data.Monoid.Applicative, Data.Monoid.Monad, Data.Ring.Module.AutomaticDifferentiation</TD
hunk ./dist/doc/html/monoids/doc-index.html 410
->Data.Monoid.Reducer, Data.Monoid.Reducer.Char, Data.Monoid.Reducer.With, Data.Monoid.Lexical.UTF8.Decoder, Data.Monoid.Generator, Data.Monoid.Lexical.SourcePosition, Data.Monoid.Lexical.Words, Data.Monoid.Self, Data.Monoid.FromString, Data.Monoid.Categorical, Data.Monoid.Additive, Data.Monoid.Additive.Sugar, Data.Monoid.Multiplicative, Data.Monoid.Multiplicative.Sugar, Data.Ring.Semi.Near, Data.Monoid.Applicative, Data.Monoid.Monad, Data.Monoid.Combinators, Data.Monoid.Lexical.RunLengthEncoding, Data.Ring.Semi, Data.Ring.Semi.Tropical, Data.Ring.Semi.Ord, Data.Ring.Sugar, Data.Group, Data.Group.Combinators, Data.Group.Sugar, Data.Ring, Data.Ring.Boolean, Data.Ring.FromNum</TD
+>Data.Monoid.Reducer, Data.Monoid.Reducer.Char, Data.Monoid.Reducer.With, Data.Monoid.Lexical.UTF8.Decoder, Data.Monoid.Generator, Data.Monoid.Lexical.SourcePosition, Data.Monoid.Lexical.Words, Data.Monoid.Self, Data.Monoid.Generator.LZ78, Data.Monoid.FromString, Data.Monoid.Categorical, Data.Monoid.Additive, Data.Monoid.Additive.Sugar, Data.Monoid.Multiplicative, Data.Monoid.Multiplicative.Sugar, Data.Ring.Semi.Near, Data.Ring.Semi, Data.Ring.Semi.Tropical, Data.Ring.Semi.Ord, Data.Ring.Sugar, Data.Group, Data.Group.Combinators, Data.Group.Sugar, Data.Ring, Data.Ring.Boolean, Data.Ring.FromNum, Data.Ring.Module, Data.Monoid.Applicative, Data.Monoid.Monad, Data.Monoid.Combinators, Data.Monoid.Lexical.RunLengthEncoding, Data.Ring.Module.AutomaticDifferentiation</TD
hunk ./dist/doc/html/monoids/doc-index.html 416
->Data.Monoid.Reducer, Data.Monoid.Reducer.Char, Data.Monoid.Reducer.With, Data.Monoid.Lexical.UTF8.Decoder, Data.Monoid.Generator, Data.Monoid.Lexical.SourcePosition, Data.Monoid.Lexical.Words, Data.Monoid.Self, Data.Monoid.FromString, Data.Monoid.Categorical, Data.Monoid.Additive, Data.Monoid.Additive.Sugar, Data.Monoid.Multiplicative, Data.Monoid.Multiplicative.Sugar, Data.Ring.Semi.Near, Data.Monoid.Applicative, Data.Monoid.Monad, Data.Monoid.Combinators, Data.Monoid.Lexical.RunLengthEncoding, Data.Ring.Semi, Data.Ring.Semi.Tropical, Data.Ring.Semi.Ord, Data.Ring.Sugar, Data.Group, Data.Group.Combinators, Data.Group.Sugar, Data.Ring, Data.Ring.Boolean, Data.Ring.FromNum</TD
+>Data.Monoid.Reducer, Data.Monoid.Reducer.Char, Data.Monoid.Reducer.With, Data.Monoid.Lexical.UTF8.Decoder, Data.Monoid.Generator, Data.Monoid.Lexical.SourcePosition, Data.Monoid.Lexical.Words, Data.Monoid.Self, Data.Monoid.Generator.LZ78, Data.Monoid.FromString, Data.Monoid.Categorical, Data.Monoid.Additive, Data.Monoid.Additive.Sugar, Data.Monoid.Multiplicative, Data.Monoid.Multiplicative.Sugar, Data.Ring.Semi.Near, Data.Ring.Semi, Data.Ring.Semi.Tropical, Data.Ring.Semi.Ord, Data.Ring.Sugar, Data.Group, Data.Group.Combinators, Data.Group.Sugar, Data.Ring, Data.Ring.Boolean, Data.Ring.FromNum, Data.Ring.Module, Data.Monoid.Applicative, Data.Monoid.Monad, Data.Monoid.Combinators, Data.Monoid.Lexical.RunLengthEncoding, Data.Ring.Module.AutomaticDifferentiation</TD
hunk ./dist/doc/html/monoids/doc-index.html 440
->, Data.Monoid.Reducer.Char, Data.Monoid.Reducer.With, Data.Monoid.Lexical.UTF8.Decoder, Data.Monoid.Generator, Data.Monoid.Lexical.SourcePosition, Data.Monoid.Lexical.Words, Data.Monoid.Self, Data.Monoid.FromString, Data.Monoid.Categorical, Data.Monoid.Applicative, Data.Monoid.Monad, Data.Monoid.Combinators, Data.Monoid.Lexical.RunLengthEncoding</TD
+>, Data.Monoid.Reducer.Char, Data.Monoid.Reducer.With, Data.Monoid.Lexical.UTF8.Decoder, Data.Monoid.Generator, Data.Monoid.Lexical.SourcePosition, Data.Monoid.Lexical.Words, Data.Monoid.Self, Data.Monoid.Generator.LZ78, Data.Monoid.FromString, Data.Monoid.Categorical, Data.Monoid.Applicative, Data.Monoid.Monad, Data.Monoid.Combinators, Data.Monoid.Lexical.RunLengthEncoding</TD
hunk ./dist/doc/html/monoids/doc-index.html 448
->, Data.Monoid.Reducer.Char, Data.Monoid.Reducer.With, Data.Monoid.Lexical.UTF8.Decoder, Data.Monoid.Generator, Data.Monoid.Lexical.SourcePosition, Data.Monoid.Lexical.Words, Data.Monoid.Self, Data.Monoid.FromString, Data.Monoid.Categorical, Data.Monoid.Applicative, Data.Monoid.Monad, Data.Monoid.Combinators, Data.Monoid.Lexical.RunLengthEncoding</TD
+>, Data.Monoid.Reducer.Char, Data.Monoid.Reducer.With, Data.Monoid.Lexical.UTF8.Decoder, Data.Monoid.Generator, Data.Monoid.Lexical.SourcePosition, Data.Monoid.Lexical.Words, Data.Monoid.Self, Data.Monoid.Generator.LZ78, Data.Monoid.FromString, Data.Monoid.Categorical, Data.Monoid.Applicative, Data.Monoid.Monad, Data.Monoid.Combinators, Data.Monoid.Lexical.RunLengthEncoding</TD
hunk ./dist/doc/html/monoids/doc-index.html 540
->, Data.Monoid.Combinators</TD
+>, Data.Monoid.Generator.LZ78, Data.Monoid.Combinators</TD
hunk ./dist/doc/html/monoids/doc-index.html 552
+>getActionWith</TD
+><TD CLASS="indexlinks"
+><A HREF="Data-Monoid-Monad.html#v%3AgetActionWith"
+>Data.Monoid.Monad</A
+></TD
+></TR
+><TR CLASS="indexrow"
+><TD CLASS="indexentry"
hunk ./dist/doc/html/monoids/doc-index.html 562
->Data.Monoid.Reducer, Data.Monoid.Reducer.Char, Data.Monoid.Reducer.With, Data.Monoid.Lexical.UTF8.Decoder, Data.Monoid.Generator, Data.Monoid.Lexical.SourcePosition, Data.Monoid.Lexical.Words, Data.Monoid.Self, Data.Monoid.FromString, Data.Monoid.Categorical, Data.Monoid.Additive, Data.Monoid.Additive.Sugar, Data.Monoid.Multiplicative, Data.Monoid.Multiplicative.Sugar, Data.Ring.Semi.Near, Data.Monoid.Applicative, Data.Monoid.Monad, Data.Monoid.Combinators, Data.Monoid.Lexical.RunLengthEncoding, Data.Ring.Semi, Data.Ring.Semi.Tropical, Data.Ring.Semi.Ord, Data.Ring.Sugar, Data.Group, Data.Group.Combinators, Data.Group.Sugar, Data.Ring, Data.Ring.Boolean, Data.Ring.FromNum</TD
+>Data.Monoid.Reducer, Data.Monoid.Reducer.Char, Data.Monoid.Reducer.With, Data.Monoid.Lexical.UTF8.Decoder, Data.Monoid.Generator, Data.Monoid.Lexical.SourcePosition, Data.Monoid.Lexical.Words, Data.Monoid.Self, Data.Monoid.Generator.LZ78, Data.Monoid.FromString, Data.Monoid.Categorical, Data.Monoid.Additive, Data.Monoid.Additive.Sugar, Data.Monoid.Multiplicative, Data.Monoid.Multiplicative.Sugar, Data.Ring.Semi.Near, Data.Ring.Semi, Data.Ring.Semi.Tropical, Data.Ring.Semi.Ord, Data.Ring.Sugar, Data.Group, Data.Group.Combinators, Data.Group.Sugar, Data.Ring, Data.Ring.Boolean, Data.Ring.FromNum, Data.Ring.Module, Data.Monoid.Applicative, Data.Monoid.Monad, Data.Monoid.Combinators, Data.Monoid.Lexical.RunLengthEncoding, Data.Ring.Module.AutomaticDifferentiation</TD
hunk ./dist/doc/html/monoids/doc-index.html 568
->Data.Monoid.Reducer, Data.Monoid.Reducer.Char, Data.Monoid.Reducer.With, Data.Monoid.Lexical.UTF8.Decoder, Data.Monoid.Generator, Data.Monoid.Lexical.SourcePosition, Data.Monoid.Lexical.Words, Data.Monoid.Self, Data.Monoid.FromString, Data.Monoid.Categorical, Data.Monoid.Additive, Data.Monoid.Additive.Sugar, Data.Monoid.Multiplicative, Data.Monoid.Multiplicative.Sugar, Data.Ring.Semi.Near, Data.Monoid.Applicative, Data.Monoid.Monad, Data.Monoid.Combinators, Data.Monoid.Lexical.RunLengthEncoding, Data.Ring.Semi, Data.Ring.Semi.Tropical, Data.Ring.Semi.Ord, Data.Ring.Sugar, Data.Group, Data.Group.Combinators, Data.Group.Sugar, Data.Ring, Data.Ring.Boolean, Data.Ring.FromNum</TD
+>Data.Monoid.Reducer, Data.Monoid.Reducer.Char, Data.Monoid.Reducer.With, Data.Monoid.Lexical.UTF8.Decoder, Data.Monoid.Generator, Data.Monoid.Lexical.SourcePosition, Data.Monoid.Lexical.Words, Data.Monoid.Self, Data.Monoid.Generator.LZ78, Data.Monoid.FromString, Data.Monoid.Categorical, Data.Monoid.Additive, Data.Monoid.Additive.Sugar, Data.Monoid.Multiplicative, Data.Monoid.Multiplicative.Sugar, Data.Ring.Semi.Near, Data.Ring.Semi, Data.Ring.Semi.Tropical, Data.Ring.Semi.Ord, Data.Ring.Sugar, Data.Group, Data.Group.Combinators, Data.Group.Sugar, Data.Ring, Data.Ring.Boolean, Data.Ring.FromNum, Data.Ring.Module, Data.Monoid.Applicative, Data.Monoid.Monad, Data.Monoid.Combinators, Data.Monoid.Lexical.RunLengthEncoding, Data.Ring.Module.AutomaticDifferentiation</TD
hunk ./dist/doc/html/monoids/doc-index.html 584
->, Data.Monoid.Combinators</TD
+>, Data.Monoid.Generator.LZ78, Data.Monoid.Combinators</TD
hunk ./dist/doc/html/monoids/doc-index.html 590
->Data.Monoid.Reducer, Data.Monoid.Reducer.Char, Data.Monoid.Reducer.With, Data.Monoid.Lexical.UTF8.Decoder, Data.Monoid.Generator, Data.Monoid.Lexical.SourcePosition, Data.Monoid.Lexical.Words, Data.Monoid.Self, Data.Monoid.FromString, Data.Monoid.Categorical, Data.Monoid.Additive, Data.Monoid.Additive.Sugar, Data.Monoid.Multiplicative, Data.Monoid.Multiplicative.Sugar, Data.Ring.Semi.Near, Data.Monoid.Applicative, Data.Monoid.Monad, Data.Monoid.Combinators, Data.Monoid.Lexical.RunLengthEncoding, Data.Ring.Semi, Data.Ring.Semi.Tropical, Data.Ring.Semi.Ord, Data.Ring.Sugar, Data.Group, Data.Group.Combinators, Data.Group.Sugar, Data.Ring, Data.Ring.Boolean, Data.Ring.FromNum</TD
+>Data.Monoid.Reducer, Data.Monoid.Reducer.Char, Data.Monoid.Reducer.With, Data.Monoid.Lexical.UTF8.Decoder, Data.Monoid.Generator, Data.Monoid.Lexical.SourcePosition, Data.Monoid.Lexical.Words, Data.Monoid.Self, Data.Monoid.Generator.LZ78, Data.Monoid.FromString, Data.Monoid.Categorical, Data.Monoid.Additive, Data.Monoid.Additive.Sugar, Data.Monoid.Multiplicative, Data.Monoid.Multiplicative.Sugar, Data.Ring.Semi.Near, Data.Ring.Semi, Data.Ring.Semi.Tropical, Data.Ring.Semi.Ord, Data.Ring.Sugar, Data.Group, Data.Group.Combinators, Data.Group.Sugar, Data.Ring, Data.Ring.Boolean, Data.Ring.FromNum, Data.Ring.Module, Data.Monoid.Applicative, Data.Monoid.Monad, Data.Monoid.Combinators, Data.Monoid.Lexical.RunLengthEncoding, Data.Ring.Module.AutomaticDifferentiation</TD
hunk ./dist/doc/html/monoids/doc-index.html 598
->, Data.Monoid.Multiplicative.Sugar, Data.Ring.Semi.Near, Data.Monoid.Applicative, Data.Monoid.Monad, Data.Ring.Semi, Data.Ring.Semi.Tropical, Data.Ring.Semi.Ord, Data.Ring.Sugar, Data.Ring, Data.Ring.Boolean, Data.Ring.FromNum</TD
+>, Data.Monoid.Multiplicative.Sugar, Data.Ring.Semi.Near, Data.Ring.Semi, Data.Ring.Semi.Tropical, Data.Ring.Semi.Ord, Data.Ring.Sugar, Data.Ring, Data.Ring.Boolean, Data.Ring.FromNum, Data.Ring.Module, Data.Monoid.Applicative, Data.Monoid.Monad, Data.Ring.Module.AutomaticDifferentiation</TD
hunk ./dist/doc/html/monoids/doc-index.html 604
->Data.Monoid.Reducer, Data.Monoid.Reducer.Char, Data.Monoid.Reducer.With, Data.Monoid.Lexical.UTF8.Decoder, Data.Monoid.Generator, Data.Monoid.Lexical.SourcePosition, Data.Monoid.Lexical.Words, Data.Monoid.Self, Data.Monoid.FromString, Data.Monoid.Categorical, Data.Monoid.Additive, Data.Monoid.Additive.Sugar, Data.Monoid.Multiplicative, Data.Monoid.Multiplicative.Sugar, Data.Ring.Semi.Near, Data.Monoid.Applicative, Data.Monoid.Monad, Data.Monoid.Combinators, Data.Monoid.Lexical.RunLengthEncoding, Data.Ring.Semi, Data.Ring.Semi.Tropical, Data.Ring.Semi.Ord, Data.Ring.Sugar, Data.Group, Data.Group.Combinators, Data.Group.Sugar, Data.Ring, Data.Ring.Boolean, Data.Ring.FromNum</TD
+>Data.Monoid.Reducer, Data.Monoid.Reducer.Char, Data.Monoid.Reducer.With, Data.Monoid.Lexical.UTF8.Decoder, Data.Monoid.Generator, Data.Monoid.Lexical.SourcePosition, Data.Monoid.Lexical.Words, Data.Monoid.Self, Data.Monoid.Generator.LZ78, Data.Monoid.FromString, Data.Monoid.Categorical, Data.Monoid.Additive, Data.Monoid.Additive.Sugar, Data.Monoid.Multiplicative, Data.Monoid.Multiplicative.Sugar, Data.Ring.Semi.Near, Data.Ring.Semi, Data.Ring.Semi.Tropical, Data.Ring.Semi.Ord, Data.Ring.Sugar, Data.Group, Data.Group.Combinators, Data.Group.Sugar, Data.Ring, Data.Ring.Boolean, Data.Ring.FromNum, Data.Ring.Module, Data.Monoid.Applicative, Data.Monoid.Monad, Data.Monoid.Combinators, Data.Monoid.Lexical.RunLengthEncoding, Data.Ring.Module.AutomaticDifferentiation</TD
hunk ./dist/doc/html/monoids/doc-index.html 636
->, Data.Monoid.Combinators</TD
+>, Data.Monoid.Generator.LZ78, Data.Monoid.Combinators</TD
hunk ./dist/doc/html/monoids/doc-index.html 642
->Data.Monoid.Reducer, Data.Monoid.Reducer.Char, Data.Monoid.Reducer.With, Data.Monoid.Lexical.UTF8.Decoder, Data.Monoid.Generator, Data.Monoid.Lexical.SourcePosition, Data.Monoid.Lexical.Words, Data.Monoid.Self, Data.Monoid.FromString, Data.Monoid.Categorical, Data.Monoid.Additive, Data.Monoid.Additive.Sugar, Data.Monoid.Multiplicative, Data.Monoid.Multiplicative.Sugar, Data.Ring.Semi.Near, Data.Monoid.Applicative, Data.Monoid.Monad, Data.Monoid.Combinators, Data.Monoid.Lexical.RunLengthEncoding, Data.Ring.Semi, Data.Ring.Semi.Tropical, Data.Ring.Semi.Ord, Data.Ring.Sugar, Data.Group, Data.Group.Combinators, Data.Group.Sugar, Data.Ring, Data.Ring.Boolean, Data.Ring.FromNum</TD
+>Data.Monoid.Reducer, Data.Monoid.Reducer.Char, Data.Monoid.Reducer.With, Data.Monoid.Lexical.UTF8.Decoder, Data.Monoid.Generator, Data.Monoid.Lexical.SourcePosition, Data.Monoid.Lexical.Words, Data.Monoid.Self, Data.Monoid.Generator.LZ78, Data.Monoid.FromString, Data.Monoid.Categorical, Data.Monoid.Additive, Data.Monoid.Additive.Sugar, Data.Monoid.Multiplicative, Data.Monoid.Multiplicative.Sugar, Data.Ring.Semi.Near, Data.Ring.Semi, Data.Ring.Semi.Tropical, Data.Ring.Semi.Ord, Data.Ring.Sugar, Data.Group, Data.Group.Combinators, Data.Group.Sugar, Data.Ring, Data.Ring.Boolean, Data.Ring.FromNum, Data.Ring.Module, Data.Monoid.Applicative, Data.Monoid.Monad, Data.Monoid.Combinators, Data.Monoid.Lexical.RunLengthEncoding, Data.Ring.Module.AutomaticDifferentiation</TD
hunk ./dist/doc/html/monoids/doc-index.html 650
->, Data.Monoid.Multiplicative.Sugar, Data.Ring.Semi.Near, Data.Monoid.Applicative, Data.Monoid.Monad, Data.Ring.Semi, Data.Ring.Semi.Tropical, Data.Ring.Semi.Ord, Data.Ring.Sugar, Data.Ring, Data.Ring.Boolean, Data.Ring.FromNum</TD
+>, Data.Monoid.Multiplicative.Sugar, Data.Ring.Semi.Near, Data.Ring.Semi, Data.Ring.Semi.Tropical, Data.Ring.Semi.Ord, Data.Ring.Sugar, Data.Ring, Data.Ring.Boolean, Data.Ring.FromNum, Data.Ring.Module, Data.Monoid.Applicative, Data.Monoid.Monad, Data.Ring.Module.AutomaticDifferentiation</TD
+></TR
+><TR CLASS="indexrow"
+><TD CLASS="indexentry"
+>getLZ78</TD
+><TD CLASS="indexlinks"
+><A HREF="Data-Monoid-Generator-LZ78.html#v%3AgetLZ78"
+>Data.Monoid.Generator.LZ78</A
+></TD
hunk ./dist/doc/html/monoids/doc-index.html 712
->Data.Monoid.Reducer, Data.Monoid.Reducer.Char, Data.Monoid.Reducer.With, Data.Monoid.Lexical.UTF8.Decoder, Data.Monoid.Generator, Data.Monoid.Lexical.SourcePosition, Data.Monoid.Lexical.Words, Data.Monoid.Self, Data.Monoid.FromString, Data.Monoid.Categorical, Data.Monoid.Additive, Data.Monoid.Additive.Sugar, Data.Monoid.Multiplicative, Data.Monoid.Multiplicative.Sugar, Data.Ring.Semi.Near, Data.Monoid.Applicative, Data.Monoid.Monad, Data.Monoid.Combinators, Data.Monoid.Lexical.RunLengthEncoding, Data.Ring.Semi, Data.Ring.Semi.Tropical, Data.Ring.Semi.Ord, Data.Ring.Sugar, Data.Group, Data.Group.Combinators, Data.Group.Sugar, Data.Ring, Data.Ring.Boolean, Data.Ring.FromNum</TD
+>Data.Monoid.Reducer, Data.Monoid.Reducer.Char, Data.Monoid.Reducer.With, Data.Monoid.Lexical.UTF8.Decoder, Data.Monoid.Generator, Data.Monoid.Lexical.SourcePosition, Data.Monoid.Lexical.Words, Data.Monoid.Self, Data.Monoid.Generator.LZ78, Data.Monoid.FromString, Data.Monoid.Categorical, Data.Monoid.Additive, Data.Monoid.Additive.Sugar, Data.Monoid.Multiplicative, Data.Monoid.Multiplicative.Sugar, Data.Ring.Semi.Near, Data.Ring.Semi, Data.Ring.Semi.Tropical, Data.Ring.Semi.Ord, Data.Ring.Sugar, Data.Group, Data.Group.Combinators, Data.Group.Sugar, Data.Ring, Data.Ring.Boolean, Data.Ring.FromNum, Data.Ring.Module, Data.Monoid.Applicative, Data.Monoid.Monad, Data.Monoid.Combinators, Data.Monoid.Lexical.RunLengthEncoding, Data.Ring.Module.AutomaticDifferentiation</TD
hunk ./dist/doc/html/monoids/doc-index.html 734
->Data.Monoid.Reducer, Data.Monoid.Reducer.Char, Data.Monoid.Reducer.With, Data.Monoid.Lexical.UTF8.Decoder, Data.Monoid.Generator, Data.Monoid.Lexical.SourcePosition, Data.Monoid.Lexical.Words, Data.Monoid.Self, Data.Monoid.FromString, Data.Monoid.Categorical, Data.Monoid.Additive, Data.Monoid.Additive.Sugar, Data.Monoid.Multiplicative, Data.Monoid.Multiplicative.Sugar, Data.Ring.Semi.Near, Data.Monoid.Applicative, Data.Monoid.Monad, Data.Monoid.Combinators, Data.Monoid.Lexical.RunLengthEncoding, Data.Ring.Semi, Data.Ring.Semi.Tropical, Data.Ring.Semi.Ord, Data.Ring.Sugar, Data.Group, Data.Group.Combinators, Data.Group.Sugar, Data.Ring, Data.Ring.Boolean, Data.Ring.FromNum</TD
+>Data.Monoid.Reducer, Data.Monoid.Reducer.Char, Data.Monoid.Reducer.With, Data.Monoid.Lexical.UTF8.Decoder, Data.Monoid.Generator, Data.Monoid.Lexical.SourcePosition, Data.Monoid.Lexical.Words, Data.Monoid.Self, Data.Monoid.Generator.LZ78, Data.Monoid.FromString, Data.Monoid.Categorical, Data.Monoid.Additive, Data.Monoid.Additive.Sugar, Data.Monoid.Multiplicative, Data.Monoid.Multiplicative.Sugar, Data.Ring.Semi.Near, Data.Ring.Semi, Data.Ring.Semi.Tropical, Data.Ring.Semi.Ord, Data.Ring.Sugar, Data.Group, Data.Group.Combinators, Data.Group.Sugar, Data.Ring, Data.Ring.Boolean, Data.Ring.FromNum, Data.Ring.Module, Data.Monoid.Applicative, Data.Monoid.Monad, Data.Monoid.Combinators, Data.Monoid.Lexical.RunLengthEncoding, Data.Ring.Module.AutomaticDifferentiation</TD
hunk ./dist/doc/html/monoids/doc-index.html 746
+>getTraversalWith</TD
+><TD CLASS="indexlinks"
+><A HREF="Data-Monoid-Applicative.html#v%3AgetTraversalWith"
+>Data.Monoid.Applicative</A
+></TD
+></TR
+><TR CLASS="indexrow"
+><TD CLASS="indexentry"
hunk ./dist/doc/html/monoids/doc-index.html 782
->, Data.Monoid.Combinators</TD
+>, Data.Monoid.Generator.LZ78, Data.Monoid.Combinators</TD
hunk ./dist/doc/html/monoids/doc-index.html 806
->, Data.Group.Combinators, Data.Group.Sugar, Data.Ring, Data.Ring.Boolean, Data.Ring.FromNum</TD
+>, Data.Group.Combinators, Data.Group.Sugar, Data.Ring, Data.Ring.Boolean, Data.Ring.FromNum, Data.Ring.Module, Data.Monoid.Applicative, Data.Ring.Module.AutomaticDifferentiation</TD
hunk ./dist/doc/html/monoids/doc-index.html 814
->, Data.Group.Combinators, Data.Group.Sugar, Data.Ring, Data.Ring.Boolean, Data.Ring.FromNum</TD
+>, Data.Group.Combinators, Data.Group.Sugar, Data.Ring, Data.Ring.Boolean, Data.Ring.FromNum, Data.Ring.Module, Data.Monoid.Applicative, Data.Ring.Module.AutomaticDifferentiation</TD
hunk ./dist/doc/html/monoids/doc-index.html 822
->, Data.Group.Combinators, Data.Group.Sugar, Data.Ring, Data.Ring.Boolean, Data.Ring.FromNum</TD
+>, Data.Group.Combinators, Data.Group.Sugar, Data.Ring, Data.Ring.Boolean, Data.Ring.FromNum, Data.Ring.Module, Data.Monoid.Applicative, Data.Ring.Module.AutomaticDifferentiation</TD
hunk ./dist/doc/html/monoids/doc-index.html 884
->, Data.Monoid.Combinators</TD
+>, Data.Monoid.Generator.LZ78, Data.Monoid.Combinators</TD
hunk ./dist/doc/html/monoids/doc-index.html 892
->, Data.Monoid.Combinators</TD
+>, Data.Monoid.Generator.LZ78, Data.Monoid.Combinators</TD
hunk ./dist/doc/html/monoids/doc-index.html 902
->Data.Monoid.Reducer, Data.Monoid.Reducer.Char, Data.Monoid.Reducer.With, Data.Monoid.Lexical.UTF8.Decoder, Data.Monoid.Generator, Data.Monoid.Lexical.SourcePosition, Data.Monoid.Lexical.Words, Data.Monoid.Self, Data.Monoid.FromString, Data.Monoid.Categorical, Data.Monoid.Additive, Data.Monoid.Additive.Sugar, Data.Monoid.Multiplicative, Data.Monoid.Multiplicative.Sugar, Data.Ring.Semi.Near, Data.Monoid.Applicative, Data.Monoid.Monad, Data.Monoid.Combinators, Data.Monoid.Lexical.RunLengthEncoding, Data.Ring.Semi, Data.Ring.Semi.Tropical, Data.Ring.Semi.Ord, Data.Ring.Sugar, Data.Group, Data.Group.Combinators, Data.Group.Sugar, Data.Ring, Data.Ring.Boolean, Data.Ring.FromNum</TD
+>Data.Monoid.Reducer, Data.Monoid.Reducer.Char, Data.Monoid.Reducer.With, Data.Monoid.Lexical.UTF8.Decoder, Data.Monoid.Generator, Data.Monoid.Lexical.SourcePosition, Data.Monoid.Lexical.Words, Data.Monoid.Self, Data.Monoid.Generator.LZ78, Data.Monoid.FromString, Data.Monoid.Categorical, Data.Monoid.Additive, Data.Monoid.Additive.Sugar, Data.Monoid.Multiplicative, Data.Monoid.Multiplicative.Sugar, Data.Ring.Semi.Near, Data.Ring.Semi, Data.Ring.Semi.Tropical, Data.Ring.Semi.Ord, Data.Ring.Sugar, Data.Group, Data.Group.Combinators, Data.Group.Sugar, Data.Ring, Data.Ring.Boolean, Data.Ring.FromNum, Data.Ring.Module, Data.Monoid.Applicative, Data.Monoid.Monad, Data.Monoid.Combinators, Data.Monoid.Lexical.RunLengthEncoding, Data.Ring.Module.AutomaticDifferentiation</TD
hunk ./dist/doc/html/monoids/doc-index.html 908
->Data.Monoid.Reducer, Data.Monoid.Reducer.Char, Data.Monoid.Reducer.With, Data.Monoid.Lexical.UTF8.Decoder, Data.Monoid.Generator, Data.Monoid.Lexical.SourcePosition, Data.Monoid.Lexical.Words, Data.Monoid.Self, Data.Monoid.FromString, Data.Monoid.Categorical, Data.Monoid.Additive, Data.Monoid.Additive.Sugar, Data.Monoid.Multiplicative, Data.Monoid.Multiplicative.Sugar, Data.Ring.Semi.Near, Data.Monoid.Applicative, Data.Monoid.Monad, Data.Monoid.Combinators, Data.Monoid.Lexical.RunLengthEncoding, Data.Ring.Semi, Data.Ring.Semi.Tropical, Data.Ring.Semi.Ord, Data.Ring.Sugar, Data.Group, Data.Group.Combinators, Data.Group.Sugar, Data.Ring, Data.Ring.Boolean, Data.Ring.FromNum</TD
+>Data.Monoid.Reducer, Data.Monoid.Reducer.Char, Data.Monoid.Reducer.With, Data.Monoid.Lexical.UTF8.Decoder, Data.Monoid.Generator, Data.Monoid.Lexical.SourcePosition, Data.Monoid.Lexical.Words, Data.Monoid.Self, Data.Monoid.Generator.LZ78, Data.Monoid.FromString, Data.Monoid.Categorical, Data.Monoid.Additive, Data.Monoid.Additive.Sugar, Data.Monoid.Multiplicative, Data.Monoid.Multiplicative.Sugar, Data.Ring.Semi.Near, Data.Ring.Semi, Data.Ring.Semi.Tropical, Data.Ring.Semi.Ord, Data.Ring.Sugar, Data.Group, Data.Group.Combinators, Data.Group.Sugar, Data.Ring, Data.Ring.Boolean, Data.Ring.FromNum, Data.Ring.Module, Data.Monoid.Applicative, Data.Monoid.Monad, Data.Monoid.Combinators, Data.Monoid.Lexical.RunLengthEncoding, Data.Ring.Module.AutomaticDifferentiation</TD
+></TR
+><TR CLASS="indexrow"
+><TD CLASS="indexentry"
+>LeftModule</TD
+><TD CLASS="indexlinks"
+><A HREF="Data-Ring-Module.html#t%3ALeftModule"
+>Data.Ring.Module</A
+>, Data.Monoid.Applicative, Data.Ring.Module.AutomaticDifferentiation</TD
hunk ./dist/doc/html/monoids/doc-index.html 924
->, Data.Monoid.Applicative, Data.Monoid.Monad, Data.Ring.Semi, Data.Ring.Semi.Tropical, Data.Ring.Semi.Ord, Data.Ring.Sugar, Data.Ring, Data.Ring.Boolean, Data.Ring.FromNum</TD
+>, Data.Ring.Semi, Data.Ring.Semi.Tropical, Data.Ring.Semi.Ord, Data.Ring.Sugar, Data.Ring, Data.Ring.Boolean, Data.Ring.FromNum, Data.Ring.Module, Data.Monoid.Applicative, Data.Monoid.Monad, Data.Ring.Module.AutomaticDifferentiation</TD
hunk ./dist/doc/html/monoids/doc-index.html 952
->, Data.Monoid.Multiplicative.Sugar, Data.Ring.Semi.Near, Data.Monoid.Applicative, Data.Monoid.Monad, Data.Ring.Semi, Data.Ring.Semi.Tropical, Data.Ring.Semi.Ord, Data.Ring.Sugar, Data.Ring, Data.Ring.Boolean, Data.Ring.FromNum</TD
+>, Data.Monoid.Multiplicative.Sugar, Data.Ring.Semi.Near, Data.Ring.Semi, Data.Ring.Semi.Tropical, Data.Ring.Semi.Ord, Data.Ring.Sugar, Data.Ring, Data.Ring.Boolean, Data.Ring.FromNum, Data.Ring.Module, Data.Monoid.Applicative, Data.Monoid.Monad, Data.Ring.Module.AutomaticDifferentiation</TD
hunk ./dist/doc/html/monoids/doc-index.html 960
->, Data.Monoid.Multiplicative.Sugar, Data.Ring.Semi.Near, Data.Monoid.Applicative, Data.Monoid.Monad, Data.Ring.Semi, Data.Ring.Semi.Tropical, Data.Ring.Semi.Ord, Data.Ring.Sugar, Data.Ring, Data.Ring.Boolean, Data.Ring.FromNum</TD
+>, Data.Monoid.Multiplicative.Sugar, Data.Ring.Semi.Near, Data.Ring.Semi, Data.Ring.Semi.Tropical, Data.Ring.Semi.Ord, Data.Ring.Sugar, Data.Ring, Data.Ring.Boolean, Data.Ring.FromNum, Data.Ring.Module, Data.Monoid.Applicative, Data.Monoid.Monad, Data.Ring.Module.AutomaticDifferentiation</TD
+></TR
+><TR CLASS="indexrow"
+><TD CLASS="indexentry" COLSPAN="2"
+>LZ78</TD
+></TR
+><TR CLASS="indexrow"
+><TD CLASS="indexannot"
+>1 (Type/Class)</TD
+><TD CLASS="indexlinks"
+><A HREF="Data-Monoid-Generator-LZ78.html#t%3ALZ78"
+>Data.Monoid.Generator.LZ78</A
+></TD
+></TR
+><TR CLASS="indexrow"
+><TD CLASS="indexannot"
+>2 (Data Constructor)</TD
+><TD CLASS="indexlinks"
+><A HREF="Data-Monoid-Generator-LZ78.html#v%3ALZ78"
+>Data.Monoid.Generator.LZ78</A
+></TD
hunk ./dist/doc/html/monoids/doc-index.html 988
->, Data.Monoid.Combinators</TD
+>, Data.Monoid.Generator.LZ78, Data.Monoid.Combinators</TD
hunk ./dist/doc/html/monoids/doc-index.html 1002
->Data.Monoid.Reducer, Data.Monoid.Reducer.Char, Data.Monoid.Reducer.With, Data.Monoid.Union, Data.Monoid.Lexical.UTF8.Decoder, Data.Monoid.Generator, Data.Monoid.Lexical.SourcePosition, Data.Monoid.Lexical.Words, Data.Monoid.Self, Data.Monoid.FromString, Data.Monoid.Categorical, Data.Monoid.Additive, Data.Monoid.Additive.Sugar, Data.Monoid.Multiplicative, Data.Monoid.Multiplicative.Sugar, Data.Ring.Semi.Near, Data.Monoid.Applicative, Data.Monoid.Monad, Data.Monoid.Combinators, Data.Monoid.Lexical.RunLengthEncoding, Data.Ring.Semi, Data.Monoid.Ord, Data.Ring.Semi.Tropical, Data.Ring.Semi.Ord, Data.Ring.Sugar, Data.Group, Data.Group.Combinators, Data.Group.Sugar, Data.Ring, Data.Ring.Boolean, Data.Ring.FromNum</TD
+>Data.Monoid.Reducer, Data.Monoid.Reducer.Char, Data.Monoid.Reducer.With, Data.Monoid.Union, Data.Monoid.Lexical.UTF8.Decoder, Data.Monoid.Generator, Data.Monoid.Lexical.SourcePosition, Data.Monoid.Lexical.Words, Data.Monoid.Self, Data.Monoid.Generator.LZ78, Data.Monoid.FromString, Data.Monoid.Categorical, Data.Monoid.Additive, Data.Monoid.Additive.Sugar, Data.Monoid.Multiplicative, Data.Monoid.Multiplicative.Sugar, Data.Ring.Semi.Near, Data.Ring.Semi, Data.Monoid.Ord, Data.Ring.Semi.Tropical, Data.Ring.Semi.Ord, Data.Ring.Sugar, Data.Group, Data.Group.Combinators, Data.Group.Sugar, Data.Ring, Data.Ring.Boolean, Data.Ring.FromNum, Data.Ring.Module, Data.Monoid.Applicative, Data.Monoid.Monad, Data.Monoid.Combinators, Data.Monoid.Lexical.RunLengthEncoding, Data.Ring.Module.AutomaticDifferentiation</TD
hunk ./dist/doc/html/monoids/doc-index.html 1010
->, Data.Monoid.Combinators</TD
+>, Data.Monoid.Generator.LZ78, Data.Monoid.Combinators</TD
hunk ./dist/doc/html/monoids/doc-index.html 1018
->, Data.Monoid.Combinators</TD
+>, Data.Monoid.Generator.LZ78, Data.Monoid.Combinators</TD
hunk ./dist/doc/html/monoids/doc-index.html 1072
->Data.Monoid.Reducer, Data.Monoid.Reducer.Char, Data.Monoid.Reducer.With, Data.Monoid.Lexical.UTF8.Decoder, Data.Monoid.Generator, Data.Monoid.Lexical.SourcePosition, Data.Monoid.Lexical.Words, Data.Monoid.Self, Data.Monoid.FromString, Data.Monoid.Categorical, Data.Monoid.Additive, Data.Monoid.Additive.Sugar, Data.Monoid.Multiplicative, Data.Monoid.Multiplicative.Sugar, Data.Ring.Semi.Near, Data.Monoid.Applicative, Data.Monoid.Monad, Data.Monoid.Combinators, Data.Monoid.Lexical.RunLengthEncoding, Data.Ring.Semi, Data.Ring.Semi.Tropical, Data.Ring.Semi.Ord, Data.Ring.Sugar, Data.Group, Data.Group.Combinators, Data.Group.Sugar, Data.Ring, Data.Ring.Boolean, Data.Ring.FromNum</TD
+>Data.Monoid.Reducer, Data.Monoid.Reducer.Char, Data.Monoid.Reducer.With, Data.Monoid.Lexical.UTF8.Decoder, Data.Monoid.Generator, Data.Monoid.Lexical.SourcePosition, Data.Monoid.Lexical.Words, Data.Monoid.Self, Data.Monoid.Generator.LZ78, Data.Monoid.FromString, Data.Monoid.Categorical, Data.Monoid.Additive, Data.Monoid.Additive.Sugar, Data.Monoid.Multiplicative, Data.Monoid.Multiplicative.Sugar, Data.Ring.Semi.Near, Data.Ring.Semi, Data.Ring.Semi.Tropical, Data.Ring.Semi.Ord, Data.Ring.Sugar, Data.Group, Data.Group.Combinators, Data.Group.Sugar, Data.Ring, Data.Ring.Boolean, Data.Ring.FromNum, Data.Ring.Module, Data.Monoid.Applicative, Data.Monoid.Monad, Data.Monoid.Combinators, Data.Monoid.Lexical.RunLengthEncoding, Data.Ring.Module.AutomaticDifferentiation</TD
hunk ./dist/doc/html/monoids/doc-index.html 1078
->Data.Monoid.Reducer, Data.Monoid.Reducer.Char, Data.Monoid.Reducer.With, Data.Monoid.Union, Data.Monoid.Lexical.UTF8.Decoder, Data.Monoid.Generator, Data.Monoid.Lexical.SourcePosition, Data.Monoid.Lexical.Words, Data.Monoid.Self, Data.Monoid.FromString, Data.Monoid.Categorical, Data.Monoid.Additive, Data.Monoid.Additive.Sugar, Data.Monoid.Multiplicative, Data.Monoid.Multiplicative.Sugar, Data.Ring.Semi.Near, Data.Monoid.Applicative, Data.Monoid.Monad, Data.Monoid.Combinators, Data.Monoid.Lexical.RunLengthEncoding, Data.Ring.Semi, Data.Monoid.Ord, Data.Ring.Semi.Tropical, Data.Ring.Semi.Ord, Data.Ring.Sugar, Data.Group, Data.Group.Combinators, Data.Group.Sugar, Data.Ring, Data.Ring.Boolean, Data.Ring.FromNum</TD
+>Data.Monoid.Reducer, Data.Monoid.Reducer.Char, Data.Monoid.Reducer.With, Data.Monoid.Union, Data.Monoid.Lexical.UTF8.Decoder, Data.Monoid.Generator, Data.Monoid.Lexical.SourcePosition, Data.Monoid.Lexical.Words, Data.Monoid.Self, Data.Monoid.Generator.LZ78, Data.Monoid.FromString, Data.Monoid.Categorical, Data.Monoid.Additive, Data.Monoid.Additive.Sugar, Data.Monoid.Multiplicative, Data.Monoid.Multiplicative.Sugar, Data.Ring.Semi.Near, Data.Ring.Semi, Data.Monoid.Ord, Data.Ring.Semi.Tropical, Data.Ring.Semi.Ord, Data.Ring.Sugar, Data.Group, Data.Group.Combinators, Data.Group.Sugar, Data.Ring, Data.Ring.Boolean, Data.Ring.FromNum, Data.Ring.Module, Data.Monoid.Applicative, Data.Monoid.Monad, Data.Monoid.Combinators, Data.Monoid.Lexical.RunLengthEncoding, Data.Ring.Module.AutomaticDifferentiation</TD
hunk ./dist/doc/html/monoids/doc-index.html 1142
->, Data.Group.Combinators, Data.Group.Sugar, Data.Ring, Data.Ring.Boolean, Data.Ring.FromNum</TD
+>, Data.Group.Combinators, Data.Group.Sugar, Data.Ring, Data.Ring.Boolean, Data.Ring.FromNum, Data.Ring.Module, Data.Monoid.Applicative, Data.Ring.Module.AutomaticDifferentiation</TD
+></TR
+><TR CLASS="indexrow"
+><TD CLASS="indexentry"
+>Module</TD
+><TD CLASS="indexlinks"
+><A HREF="Data-Ring-Module.html#t%3AModule"
+>Data.Ring.Module</A
+>, Data.Monoid.Applicative, Data.Ring.Module.AutomaticDifferentiation</TD
hunk ./dist/doc/html/monoids/doc-index.html 1176
->Data.Monoid.Reducer, Data.Monoid.Reducer.Char, Data.Monoid.Reducer.With, Data.Monoid.Union, Data.Monoid.Lexical.UTF8.Decoder, Data.Monoid.Generator, Data.Monoid.Lexical.SourcePosition, Data.Monoid.Lexical.Words, Data.Monoid.Self, Data.Monoid.FromString, Data.Monoid.Categorical, Data.Monoid.Additive, Data.Monoid.Additive.Sugar, Data.Monoid.Multiplicative, Data.Monoid.Multiplicative.Sugar, Data.Ring.Semi.Near, Data.Monoid.Applicative, Data.Monoid.Monad, Data.Monoid.Combinators, Data.Monoid.Lexical.RunLengthEncoding, Data.Ring.Semi, Data.Monoid.Ord, Data.Ring.Semi.Tropical, Data.Ring.Semi.Ord, Data.Ring.Sugar, Data.Group, Data.Group.Combinators, Data.Group.Sugar, Data.Ring, Data.Ring.Boolean, Data.Ring.FromNum</TD
+>Data.Monoid.Reducer, Data.Monoid.Reducer.Char, Data.Monoid.Reducer.With, Data.Monoid.Union, Data.Monoid.Lexical.UTF8.Decoder, Data.Monoid.Generator, Data.Monoid.Lexical.SourcePosition, Data.Monoid.Lexical.Words, Data.Monoid.Self, Data.Monoid.Generator.LZ78, Data.Monoid.FromString, Data.Monoid.Categorical, Data.Monoid.Additive, Data.Monoid.Additive.Sugar, Data.Monoid.Multiplicative, Data.Monoid.Multiplicative.Sugar, Data.Ring.Semi.Near, Data.Ring.Semi, Data.Monoid.Ord, Data.Ring.Semi.Tropical, Data.Ring.Semi.Ord, Data.Ring.Sugar, Data.Group, Data.Group.Combinators, Data.Group.Sugar, Data.Ring, Data.Ring.Boolean, Data.Ring.FromNum, Data.Ring.Module, Data.Monoid.Applicative, Data.Monoid.Monad, Data.Monoid.Combinators, Data.Monoid.Lexical.RunLengthEncoding, Data.Ring.Module.AutomaticDifferentiation</TD
hunk ./dist/doc/html/monoids/doc-index.html 1184
->, Data.Monoid.Multiplicative.Sugar, Data.Ring.Semi.Near, Data.Monoid.Applicative, Data.Monoid.Monad, Data.Ring.Semi, Data.Ring.Semi.Tropical, Data.Ring.Semi.Ord, Data.Ring.Sugar, Data.Ring, Data.Ring.Boolean, Data.Ring.FromNum</TD
+>, Data.Monoid.Multiplicative.Sugar, Data.Ring.Semi.Near, Data.Ring.Semi, Data.Ring.Semi.Tropical, Data.Ring.Semi.Ord, Data.Ring.Sugar, Data.Ring, Data.Ring.Boolean, Data.Ring.FromNum, Data.Ring.Module, Data.Monoid.Applicative, Data.Monoid.Monad, Data.Ring.Module.AutomaticDifferentiation</TD
hunk ./dist/doc/html/monoids/doc-index.html 1216
->, Data.Monoid.Multiplicative.Sugar, Data.Ring.Semi.Near, Data.Monoid.Applicative, Data.Monoid.Monad, Data.Ring.Semi, Data.Ring.Semi.Tropical, Data.Ring.Semi.Ord, Data.Ring.Sugar, Data.Ring, Data.Ring.Boolean, Data.Ring.FromNum</TD
+>, Data.Monoid.Multiplicative.Sugar, Data.Ring.Semi.Near, Data.Ring.Semi, Data.Ring.Semi.Tropical, Data.Ring.Semi.Ord, Data.Ring.Sugar, Data.Ring, Data.Ring.Boolean, Data.Ring.FromNum, Data.Ring.Module, Data.Monoid.Applicative, Data.Monoid.Monad, Data.Ring.Module.AutomaticDifferentiation</TD
hunk ./dist/doc/html/monoids/doc-index.html 1252
->, Data.Monoid.Additive.Sugar, Data.Monoid.Multiplicative, Data.Monoid.Multiplicative.Sugar, Data.Ring.Semi.Near, Data.Monoid.Applicative, Data.Monoid.Monad, Data.Ring.Semi, Data.Ring.Semi.Tropical, Data.Ring.Semi.Ord, Data.Ring.Sugar, Data.Group, Data.Group.Combinators, Data.Group.Sugar, Data.Ring, Data.Ring.Boolean, Data.Ring.FromNum</TD
+>, Data.Monoid.Additive.Sugar, Data.Monoid.Multiplicative, Data.Monoid.Multiplicative.Sugar, Data.Ring.Semi.Near, Data.Ring.Semi, Data.Ring.Semi.Tropical, Data.Ring.Semi.Ord, Data.Ring.Sugar, Data.Group, Data.Group.Combinators, Data.Group.Sugar, Data.Ring, Data.Ring.Boolean, Data.Ring.FromNum, Data.Ring.Module, Data.Monoid.Applicative, Data.Monoid.Monad, Data.Ring.Module.AutomaticDifferentiation</TD
hunk ./dist/doc/html/monoids/doc-index.html 1282
->Data.Monoid.Reducer, Data.Monoid.Reducer.Char, Data.Monoid.Reducer.With, Data.Monoid.Lexical.UTF8.Decoder, Data.Monoid.Generator, Data.Monoid.Lexical.SourcePosition, Data.Monoid.Lexical.Words, Data.Monoid.Self, Data.Monoid.FromString, Data.Monoid.Categorical, Data.Monoid.Additive, Data.Monoid.Additive.Sugar, Data.Monoid.Multiplicative, Data.Monoid.Multiplicative.Sugar, Data.Ring.Semi.Near, Data.Monoid.Applicative, Data.Monoid.Monad, Data.Monoid.Combinators, Data.Monoid.Lexical.RunLengthEncoding, Data.Ring.Semi, Data.Ring.Semi.Tropical, Data.Ring.Semi.Ord, Data.Ring.Sugar, Data.Group, Data.Group.Combinators, Data.Group.Sugar, Data.Ring, Data.Ring.Boolean, Data.Ring.FromNum</TD
+>Data.Monoid.Reducer, Data.Monoid.Reducer.Char, Data.Monoid.Reducer.With, Data.Monoid.Lexical.UTF8.Decoder, Data.Monoid.Generator, Data.Monoid.Lexical.SourcePosition, Data.Monoid.Lexical.Words, Data.Monoid.Self, Data.Monoid.Generator.LZ78, Data.Monoid.FromString, Data.Monoid.Categorical, Data.Monoid.Additive, Data.Monoid.Additive.Sugar, Data.Monoid.Multiplicative, Data.Monoid.Multiplicative.Sugar, Data.Ring.Semi.Near, Data.Ring.Semi, Data.Ring.Semi.Tropical, Data.Ring.Semi.Ord, Data.Ring.Sugar, Data.Group, Data.Group.Combinators, Data.Group.Sugar, Data.Ring, Data.Ring.Boolean, Data.Ring.FromNum, Data.Ring.Module, Data.Monoid.Applicative, Data.Monoid.Monad, Data.Monoid.Combinators, Data.Monoid.Lexical.RunLengthEncoding, Data.Ring.Module.AutomaticDifferentiation</TD
hunk ./dist/doc/html/monoids/doc-index.html 1288
->Data.Monoid.Reducer, Data.Monoid.Reducer.Char, Data.Monoid.Reducer.With, Data.Monoid.Lexical.UTF8.Decoder, Data.Monoid.Generator, Data.Monoid.Lexical.SourcePosition, Data.Monoid.Lexical.Words, Data.Monoid.Self, Data.Monoid.FromString, Data.Monoid.Categorical, Data.Monoid.Additive, Data.Monoid.Additive.Sugar, Data.Monoid.Multiplicative, Data.Monoid.Multiplicative.Sugar, Data.Ring.Semi.Near, Data.Monoid.Applicative, Data.Monoid.Monad, Data.Monoid.Combinators, Data.Monoid.Lexical.RunLengthEncoding, Data.Ring.Semi, Data.Ring.Semi.Tropical, Data.Ring.Semi.Ord, Data.Ring.Sugar, Data.Group, Data.Group.Combinators, Data.Group.Sugar, Data.Ring, Data.Ring.Boolean, Data.Ring.FromNum</TD
+>Data.Monoid.Reducer, Data.Monoid.Reducer.Char, Data.Monoid.Reducer.With, Data.Monoid.Lexical.UTF8.Decoder, Data.Monoid.Generator, Data.Monoid.Lexical.SourcePosition, Data.Monoid.Lexical.Words, Data.Monoid.Self, Data.Monoid.Generator.LZ78, Data.Monoid.FromString, Data.Monoid.Categorical, Data.Monoid.Additive, Data.Monoid.Additive.Sugar, Data.Monoid.Multiplicative, Data.Monoid.Multiplicative.Sugar, Data.Ring.Semi.Near, Data.Ring.Semi, Data.Ring.Semi.Tropical, Data.Ring.Semi.Ord, Data.Ring.Sugar, Data.Group, Data.Group.Combinators, Data.Group.Sugar, Data.Ring, Data.Ring.Boolean, Data.Ring.FromNum, Data.Ring.Module, Data.Monoid.Applicative, Data.Monoid.Monad, Data.Monoid.Combinators, Data.Monoid.Lexical.RunLengthEncoding, Data.Ring.Module.AutomaticDifferentiation</TD
hunk ./dist/doc/html/monoids/doc-index.html 1300
+>pureUnit</TD
+><TD CLASS="indexlinks"
+><A HREF="Data-Monoid-Reducer.html#v%3ApureUnit"
+>Data.Monoid.Reducer</A
+>, Data.Monoid.Reducer.Char, Data.Monoid.Reducer.With, Data.Monoid.Lexical.UTF8.Decoder, Data.Monoid.Generator, Data.Monoid.Lexical.SourcePosition, Data.Monoid.Lexical.Words, Data.Monoid.Self, Data.Monoid.Generator.LZ78, Data.Monoid.FromString, Data.Monoid.Categorical, Data.Monoid.Applicative, Data.Monoid.Monad, Data.Monoid.Combinators, Data.Monoid.Lexical.RunLengthEncoding</TD
+></TR
+><TR CLASS="indexrow"
+><TD CLASS="indexentry"
hunk ./dist/doc/html/monoids/doc-index.html 1312
->, Data.Monoid.Combinators</TD
+>, Data.Monoid.Generator.LZ78, Data.Monoid.Combinators</TD
hunk ./dist/doc/html/monoids/doc-index.html 1320
->, Data.Monoid.Reducer.Char, Data.Monoid.Reducer.With, Data.Monoid.Union, Data.Monoid.Lexical.UTF8.Decoder, Data.Monoid.Generator, Data.Monoid.Lexical.SourcePosition, Data.Monoid.Lexical.Words, Data.Monoid.Self, Data.Monoid.FromString, Data.Monoid.Categorical, Data.Monoid.Applicative, Data.Monoid.Monad, Data.Monoid.Combinators, Data.Monoid.Lexical.RunLengthEncoding, Data.Monoid.Ord, Data.Ring.Semi.Tropical</TD
+>, Data.Monoid.Reducer.Char, Data.Monoid.Reducer.With, Data.Monoid.Union, Data.Monoid.Lexical.UTF8.Decoder, Data.Monoid.Generator, Data.Monoid.Lexical.SourcePosition, Data.Monoid.Lexical.Words, Data.Monoid.Self, Data.Monoid.Generator.LZ78, Data.Monoid.FromString, Data.Monoid.Categorical, Data.Monoid.Ord, Data.Ring.Semi.Tropical, Data.Monoid.Applicative, Data.Monoid.Monad, Data.Monoid.Combinators, Data.Monoid.Lexical.RunLengthEncoding</TD
hunk ./dist/doc/html/monoids/doc-index.html 1338
-><A HREF="Data-Monoid-Combinators.html#v%3Areplicate"
->Data.Monoid.Combinators</A
+><A HREF="Data-Group-Combinators.html#v%3Areplicate"
+>Data.Group.Combinators</A
hunk ./dist/doc/html/monoids/doc-index.html 1346
-><A HREF="Data-Group-Combinators.html#v%3Areplicate"
->Data.Group.Combinators</A
+><A HREF="Data-Monoid-Combinators.html#v%3Areplicate"
+>Data.Monoid.Combinators</A
hunk ./dist/doc/html/monoids/doc-index.html 1352
+>returnUnit</TD
+><TD CLASS="indexlinks"
+><A HREF="Data-Monoid-Reducer.html#v%3AreturnUnit"
+>Data.Monoid.Reducer</A
+>, Data.Monoid.Reducer.Char, Data.Monoid.Reducer.With, Data.Monoid.Lexical.UTF8.Decoder, Data.Monoid.Generator, Data.Monoid.Lexical.SourcePosition, Data.Monoid.Lexical.Words, Data.Monoid.Self, Data.Monoid.Generator.LZ78, Data.Monoid.FromString, Data.Monoid.Categorical, Data.Monoid.Applicative, Data.Monoid.Monad, Data.Monoid.Combinators, Data.Monoid.Lexical.RunLengthEncoding</TD
+></TR
+><TR CLASS="indexrow"
+><TD CLASS="indexentry"
+>RightModule</TD
+><TD CLASS="indexlinks"
+><A HREF="Data-Ring-Module.html#t%3ARightModule"
+>Data.Ring.Module</A
+>, Data.Monoid.Applicative, Data.Ring.Module.AutomaticDifferentiation</TD
+></TR
+><TR CLASS="indexrow"
+><TD CLASS="indexentry"
hunk ./dist/doc/html/monoids/doc-index.html 1372
->, Data.Monoid.Applicative, Data.Monoid.Monad, Data.Ring.Semi, Data.Ring.Semi.Tropical, Data.Ring.Semi.Ord, Data.Ring.Sugar, Data.Ring, Data.Ring.Boolean, Data.Ring.FromNum</TD
+>, Data.Ring.Semi, Data.Ring.Semi.Tropical, Data.Ring.Semi.Ord, Data.Ring.Sugar, Data.Ring, Data.Ring.Boolean, Data.Ring.FromNum, Data.Ring.Module, Data.Monoid.Applicative, Data.Monoid.Monad, Data.Ring.Module.AutomaticDifferentiation</TD
hunk ./dist/doc/html/monoids/doc-index.html 1380
->, Data.Ring.Boolean, Data.Ring.FromNum</TD
+>, Data.Ring.Boolean, Data.Ring.FromNum, Data.Ring.Module, Data.Monoid.Applicative, Data.Ring.Module.AutomaticDifferentiation</TD
hunk ./dist/doc/html/monoids/doc-index.html 1468
->, Data.Ring.Semi.Tropical, Data.Ring.Semi.Ord, Data.Ring, Data.Ring.Boolean, Data.Ring.FromNum</TD
+>, Data.Ring.Semi.Tropical, Data.Ring.Semi.Ord, Data.Ring, Data.Ring.Boolean, Data.Ring.FromNum, Data.Ring.Module, Data.Monoid.Applicative, Data.Ring.Module.AutomaticDifferentiation</TD
hunk ./dist/doc/html/monoids/doc-index.html 1484
->, Data.Monoid.Reducer.Char, Data.Monoid.Reducer.With, Data.Monoid.Union, Data.Monoid.Lexical.UTF8.Decoder, Data.Monoid.Generator, Data.Monoid.Lexical.SourcePosition, Data.Monoid.Lexical.Words, Data.Monoid.Self, Data.Monoid.FromString, Data.Monoid.Categorical, Data.Monoid.Applicative, Data.Monoid.Monad, Data.Monoid.Combinators, Data.Monoid.Lexical.RunLengthEncoding</TD
+>, Data.Monoid.Reducer.Char, Data.Monoid.Reducer.With, Data.Monoid.Union, Data.Monoid.Lexical.UTF8.Decoder, Data.Monoid.Generator, Data.Monoid.Lexical.SourcePosition, Data.Monoid.Lexical.Words, Data.Monoid.Self, Data.Monoid.Generator.LZ78, Data.Monoid.FromString, Data.Monoid.Categorical, Data.Monoid.Applicative, Data.Monoid.Monad, Data.Monoid.Combinators, Data.Monoid.Lexical.RunLengthEncoding</TD
hunk ./dist/doc/html/monoids/doc-index.html 1566
->Data.Monoid.Reducer, Data.Monoid.Reducer.Char, Data.Monoid.Reducer.With, Data.Monoid.Lexical.UTF8.Decoder, Data.Monoid.Generator, Data.Monoid.Lexical.SourcePosition, Data.Monoid.Lexical.Words, Data.Monoid.Self, Data.Monoid.FromString, Data.Monoid.Categorical, Data.Monoid.Additive, Data.Monoid.Additive.Sugar, Data.Monoid.Multiplicative, Data.Monoid.Multiplicative.Sugar, Data.Ring.Semi.Near, Data.Monoid.Applicative, Data.Monoid.Monad, Data.Monoid.Combinators, Data.Monoid.Lexical.RunLengthEncoding, Data.Ring.Semi, Data.Ring.Semi.Tropical, Data.Ring.Semi.Ord, Data.Ring.Sugar, Data.Group, Data.Group.Combinators, Data.Group.Sugar, Data.Ring, Data.Ring.Boolean, Data.Ring.FromNum</TD
+>Data.Monoid.Reducer, Data.Monoid.Reducer.Char, Data.Monoid.Reducer.With, Data.Monoid.Lexical.UTF8.Decoder, Data.Monoid.Generator, Data.Monoid.Lexical.SourcePosition, Data.Monoid.Lexical.Words, Data.Monoid.Self, Data.Monoid.Generator.LZ78, Data.Monoid.FromString, Data.Monoid.Categorical, Data.Monoid.Additive, Data.Monoid.Additive.Sugar, Data.Monoid.Multiplicative, Data.Monoid.Multiplicative.Sugar, Data.Ring.Semi.Near, Data.Ring.Semi, Data.Ring.Semi.Tropical, Data.Ring.Semi.Ord, Data.Ring.Sugar, Data.Group, Data.Group.Combinators, Data.Group.Sugar, Data.Ring, Data.Ring.Boolean, Data.Ring.FromNum, Data.Ring.Module, Data.Monoid.Applicative, Data.Monoid.Monad, Data.Monoid.Combinators, Data.Monoid.Lexical.RunLengthEncoding, Data.Ring.Module.AutomaticDifferentiation</TD
hunk ./dist/doc/html/monoids/doc-index.html 1572
->Data.Monoid.Reducer, Data.Monoid.Reducer.Char, Data.Monoid.Reducer.With, Data.Monoid.Lexical.UTF8.Decoder, Data.Monoid.Generator, Data.Monoid.Lexical.SourcePosition, Data.Monoid.Lexical.Words, Data.Monoid.Self, Data.Monoid.FromString, Data.Monoid.Categorical, Data.Monoid.Additive, Data.Monoid.Additive.Sugar, Data.Monoid.Multiplicative, Data.Monoid.Multiplicative.Sugar, Data.Ring.Semi.Near, Data.Monoid.Applicative, Data.Monoid.Monad, Data.Monoid.Combinators, Data.Monoid.Lexical.RunLengthEncoding, Data.Ring.Semi, Data.Ring.Semi.Tropical, Data.Ring.Semi.Ord, Data.Ring.Sugar, Data.Group, Data.Group.Combinators, Data.Group.Sugar, Data.Ring, Data.Ring.Boolean, Data.Ring.FromNum</TD
+>Data.Monoid.Reducer, Data.Monoid.Reducer.Char, Data.Monoid.Reducer.With, Data.Monoid.Lexical.UTF8.Decoder, Data.Monoid.Generator, Data.Monoid.Lexical.SourcePosition, Data.Monoid.Lexical.Words, Data.Monoid.Self, Data.Monoid.Generator.LZ78, Data.Monoid.FromString, Data.Monoid.Categorical, Data.Monoid.Additive, Data.Monoid.Additive.Sugar, Data.Monoid.Multiplicative, Data.Monoid.Multiplicative.Sugar, Data.Ring.Semi.Near, Data.Ring.Semi, Data.Ring.Semi.Tropical, Data.Ring.Semi.Ord, Data.Ring.Sugar, Data.Group, Data.Group.Combinators, Data.Group.Sugar, Data.Ring, Data.Ring.Boolean, Data.Ring.FromNum, Data.Ring.Module, Data.Monoid.Applicative, Data.Monoid.Monad, Data.Monoid.Combinators, Data.Monoid.Lexical.RunLengthEncoding, Data.Ring.Module.AutomaticDifferentiation</TD
hunk ./dist/doc/html/monoids/doc-index.html 1588
->, Data.Monoid.Multiplicative.Sugar, Data.Ring.Semi.Near, Data.Monoid.Applicative, Data.Monoid.Monad, Data.Ring.Semi, Data.Ring.Semi.Tropical, Data.Ring.Semi.Ord, Data.Ring.Sugar, Data.Ring, Data.Ring.Boolean, Data.Ring.FromNum</TD
+>, Data.Monoid.Multiplicative.Sugar, Data.Ring.Semi.Near, Data.Ring.Semi, Data.Ring.Semi.Tropical, Data.Ring.Semi.Ord, Data.Ring.Sugar, Data.Ring, Data.Ring.Boolean, Data.Ring.FromNum, Data.Ring.Module, Data.Monoid.Applicative, Data.Monoid.Monad, Data.Ring.Module.AutomaticDifferentiation</TD
hunk ./dist/doc/html/monoids/doc-index.html 1611
+><TD CLASS="indexentry" COLSPAN="2"
+>TraversalWith</TD
+></TR
+><TR CLASS="indexrow"
+><TD CLASS="indexannot"
+>1 (Type/Class)</TD
+><TD CLASS="indexlinks"
+><A HREF="Data-Monoid-Applicative.html#t%3ATraversalWith"
+>Data.Monoid.Applicative</A
+></TD
+></TR
+><TR CLASS="indexrow"
+><TD CLASS="indexannot"
+>2 (Data Constructor)</TD
+><TD CLASS="indexlinks"
+><A HREF="Data-Monoid-Applicative.html#v%3ATraversalWith"
+>Data.Monoid.Applicative</A
+></TD
+></TR
+><TR CLASS="indexrow"
hunk ./dist/doc/html/monoids/doc-index.html 1720
->, Data.Monoid.Reducer.Char, Data.Monoid.Reducer.With, Data.Monoid.Union, Data.Monoid.Lexical.UTF8.Decoder, Data.Monoid.Generator, Data.Monoid.Lexical.SourcePosition, Data.Monoid.Lexical.Words, Data.Monoid.Self, Data.Monoid.FromString, Data.Monoid.Categorical, Data.Monoid.Applicative, Data.Monoid.Monad, Data.Monoid.Combinators, Data.Monoid.Lexical.RunLengthEncoding, Data.Monoid.Ord, Data.Ring.Semi.Tropical</TD
+>, Data.Monoid.Reducer.Char, Data.Monoid.Reducer.With, Data.Monoid.Union, Data.Monoid.Lexical.UTF8.Decoder, Data.Monoid.Generator, Data.Monoid.Lexical.SourcePosition, Data.Monoid.Lexical.Words, Data.Monoid.Self, Data.Monoid.Generator.LZ78, Data.Monoid.FromString, Data.Monoid.Categorical, Data.Monoid.Ord, Data.Ring.Semi.Tropical, Data.Monoid.Applicative, Data.Monoid.Monad, Data.Monoid.Combinators, Data.Monoid.Lexical.RunLengthEncoding</TD
hunk ./dist/doc/html/monoids/doc-index.html 1756
->, Data.Monoid.Combinators</TD
+>, Data.Monoid.Generator.LZ78, Data.Monoid.Combinators</TD
hunk ./dist/doc/html/monoids/doc-index.html 1764
->, Data.Monoid.Combinators</TD
+>, Data.Monoid.Generator.LZ78, Data.Monoid.Combinators</TD
hunk ./dist/doc/html/monoids/doc-index.html 1856
->, Data.Monoid.Additive.Sugar, Data.Monoid.Multiplicative, Data.Monoid.Multiplicative.Sugar, Data.Ring.Semi.Near, Data.Monoid.Applicative, Data.Monoid.Monad, Data.Ring.Semi, Data.Ring.Semi.Tropical, Data.Ring.Semi.Ord, Data.Ring.Sugar, Data.Group, Data.Group.Combinators, Data.Group.Sugar, Data.Ring, Data.Ring.Boolean, Data.Ring.FromNum</TD
+>, Data.Monoid.Additive.Sugar, Data.Monoid.Multiplicative, Data.Monoid.Multiplicative.Sugar, Data.Ring.Semi.Near, Data.Ring.Semi, Data.Ring.Semi.Tropical, Data.Ring.Semi.Ord, Data.Ring.Sugar, Data.Group, Data.Group.Combinators, Data.Group.Sugar, Data.Ring, Data.Ring.Boolean, Data.Ring.FromNum, Data.Ring.Module, Data.Monoid.Applicative, Data.Monoid.Monad, Data.Ring.Module.AutomaticDifferentiation</TD
hunk ./dist/doc/html/monoids/index.html 180
-><TD STYLE="padding-left: 1.25em;width: 46em"
+><TD STYLE="width: 46em"
+><IMG SRC="minus.gif" CLASS="coll" ONCLICK="toggle(this,'n:4')" ALT="show/hide"
hunk ./dist/doc/html/monoids/index.html 191
+><TD STYLE="padding: 0; padding-left: 2em" COLSPAN="3"
+><TABLE CLASS="vanilla2" CELLSPACING="0" CELLPADDING="0" ID="n:4" STYLE="display:block;"
+><TR
+><TD STYLE="padding-left: 1.25em;width: 44em"
+><A HREF="Data-Monoid-Generator-LZ78.html"
+>Data.Monoid.Generator.LZ78</A
+></TD
+><TD
+></TD
+><TD
+></TD
+></TR
+></TABLE
+></TD
+></TR
+><TR
hunk ./dist/doc/html/monoids/index.html 218
-><IMG SRC="minus.gif" CLASS="coll" ONCLICK="toggle(this,'n:4')" ALT="show/hide"
+><IMG SRC="minus.gif" CLASS="coll" ONCLICK="toggle(this,'n:5')" ALT="show/hide"
hunk ./dist/doc/html/monoids/index.html 227
-><TABLE CLASS="vanilla2" CELLSPACING="0" CELLPADDING="0" ID="n:4" STYLE="display:block;"
+><TABLE CLASS="vanilla2" CELLSPACING="0" CELLPADDING="0" ID="n:5" STYLE="display:block;"
hunk ./dist/doc/html/monoids/index.html 250
-><IMG SRC="minus.gif" CLASS="coll" ONCLICK="toggle(this,'n:5')" ALT="show/hide"
+><IMG SRC="minus.gif" CLASS="coll" ONCLICK="toggle(this,'n:6')" ALT="show/hide"
hunk ./dist/doc/html/monoids/index.html 259
-><TABLE CLASS="vanilla2" CELLSPACING="0" CELLPADDING="0" ID="n:5" STYLE="display:block;"
+><TABLE CLASS="vanilla2" CELLSPACING="0" CELLPADDING="0" ID="n:6" STYLE="display:block;"
hunk ./dist/doc/html/monoids/index.html 298
-><IMG SRC="minus.gif" CLASS="coll" ONCLICK="toggle(this,'n:6')" ALT="show/hide"
+><IMG SRC="minus.gif" CLASS="coll" ONCLICK="toggle(this,'n:7')" ALT="show/hide"
hunk ./dist/doc/html/monoids/index.html 309
-><TABLE CLASS="vanilla2" CELLSPACING="0" CELLPADDING="0" ID="n:6" STYLE="display:block;"
+><TABLE CLASS="vanilla2" CELLSPACING="0" CELLPADDING="0" ID="n:7" STYLE="display:block;"
hunk ./dist/doc/html/monoids/index.html 335
-><IMG SRC="minus.gif" CLASS="coll" ONCLICK="toggle(this,'n:7')" ALT="show/hide"
+><IMG SRC="minus.gif" CLASS="coll" ONCLICK="toggle(this,'n:8')" ALT="show/hide"
hunk ./dist/doc/html/monoids/index.html 346
-><TABLE CLASS="vanilla2" CELLSPACING="0" CELLPADDING="0" ID="n:7" STYLE="display:block;"
+><TABLE CLASS="vanilla2" CELLSPACING="0" CELLPADDING="0" ID="n:8" STYLE="display:block;"
hunk ./dist/doc/html/monoids/index.html 395
-><IMG SRC="minus.gif" CLASS="coll" ONCLICK="toggle(this,'n:8')" ALT="show/hide"
+><IMG SRC="minus.gif" CLASS="coll" ONCLICK="toggle(this,'n:9')" ALT="show/hide"
hunk ./dist/doc/html/monoids/index.html 406
-><TABLE CLASS="vanilla2" CELLSPACING="0" CELLPADDING="0" ID="n:8" STYLE="display:block;"
+><TABLE CLASS="vanilla2" CELLSPACING="0" CELLPADDING="0" ID="n:9" STYLE="display:block;"
hunk ./dist/doc/html/monoids/index.html 429
-><IMG SRC="minus.gif" CLASS="coll" ONCLICK="toggle(this,'n:9')" ALT="show/hide"
+><IMG SRC="minus.gif" CLASS="coll" ONCLICK="toggle(this,'n:10')" ALT="show/hide"
+><A HREF="Data-Ring-Module.html"
+>Data.Ring.Module</A
+></TD
+><TD
+></TD
+><TD
+></TD
+></TR
+><TR
+><TD STYLE="padding: 0; padding-left: 2em" COLSPAN="3"
+><TABLE CLASS="vanilla2" CELLSPACING="0" CELLPADDING="0" ID="n:10" STYLE="display:block;"
+><TR
+><TD STYLE="padding-left: 1.25em;width: 44em"
+><A HREF="Data-Ring-Module-AutomaticDifferentiation.html"
+>Data.Ring.Module.AutomaticDifferentiation</A
+></TD
+><TD
+></TD
+><TD
+></TD
+></TR
+></TABLE
+></TD
+></TR
+><TR
+><TD STYLE="width: 46em"
+><IMG SRC="minus.gif" CLASS="coll" ONCLICK="toggle(this,'n:11')" ALT="show/hide"
hunk ./dist/doc/html/monoids/index.html 467
-><TABLE CLASS="vanilla2" CELLSPACING="0" CELLPADDING="0" ID="n:9" STYLE="display:block;"
+><TABLE CLASS="vanilla2" CELLSPACING="0" CELLPADDING="0" ID="n:11" STYLE="display:block;"
binary ./dist/doc/html/monoids/monoids.haddock
oldhex
*0d0cface0004000000000000e6eb000000000000d1cba400000000000000000000000000000000
*000000000000000100000000000000010000000000000000000000000000000100000000000000
*020000000000000000000000000000000100000000000000030000000000000000000000000000
*000100000000000000040000000000000000000000000000000100000000000000050000000000
*000000000000000000000100000000000000060000000000000000000000000000000200000000
*000000070000000000000000000000000000000200000000000000080000000000000000000000
*0000000002000000000000000900000000000000000000000000000003000000000000000a0000
*0000000000000000000000000003000000000000000b0000000000000000000000000000000300
*0000000000000c00000000000000000000000000000004000000000000000d0000000000000000
*0000000000000004000000000000000e0000000000000000000000000000000400000000000000
*0f0000000000000000000000000000000400000000000000100000000000000000000000000000
*000400000000000000110000000000000000000000000000000400000000000000120000000000
*000000000000000000000400000000000000130000000000000000000000000000000400000000
*000000140000000000000000000000000000000400000000000000150000000000000000000000
*000000000400000000000000160000000000000000000000000000000400000000000000170000
*000000000000000000000000000400000000000000180000000000000000000000000000000500
*0000000000001900000000000000000000000000000005000000000000001a0000000000000000
*0000000000000006000000000000001b0000000000000000000000000000000600000000000000
*1c00000000000000000000000000000006000000000000001d0000000000000000000000000000
*0006000000000000001e00000000000000000000000000000006000000000000001f0000000000
*000000000000000000000600000000000000200000000000000000000000000000000600000000
*000000210000000000000000000000000000000600000000000000220000000000000000000000
*000000000600000000000000230000000000000000000000000000000600000000000000240000
*000000000000000000000000000600000000000000250000000000000000000000000000000600
*000000000000260000000000000000000000000000000600000000000000270000000000000000
*000000000000000600000000000000280000000000000000000000000000000600000000000000
*2900000000000000000000000000000007000000000000002a0000000000000000000000000000
*0007000000000000002b00000000000000000000000000000007000000000000002c0000000000
*0000000000000000000007000000000000002d0000000000000000000000000000000700000000
*0000002e00000000000000000000000000000007000000000000002f0000000000000000000000
*000000000700000000000000300000000000000000000000000000000700000000000000310000
*000000000000000000000000000800000000000000320000000000000000000000000000000800
*000000000000330000000000000000000000000000000800000000000000340000000000000000
*000000000000000800000000000000350000000000000000000000000000000800000000000000
*360000000000000000000000000000000800000000000000370000000000000000000000000000
*000800000000000000380000000000000000000000000000000800000000000000390000000000
*0000000000000000000008000000000000003a0000000000000000000000000000000800000000
*0000003b00000000000000000000000000000009000000000000003c0000000000000000000000
*0000000009000000000000003d00000000000000000000000000000009000000000000003e0000
*000000000000000000000000000a000000000000003f0000000000000000000000000000000a00
*000000000000400000000000000000000000000000000a00000000000000410000000000000000
*000000000000000b00000000000000420000000000000000000000000000000b00000000000000
*430000000000000000000000000000000b00000000000000440000000000000000000000000000
*000b00000000000000450000000000000000000000000000000b00000000000000460000000000
*000000000000000000000b00000000000000470000000000000000000000000000000c00000000
*000000480000000000000000000000000000000c00000000000000490000000000000000000000
*000000000d000000000000004a0000000000000000000000000000000e000000000000004b0000
*000000000000000000000000000e000000000000004c0000000000000000000000000000000e00
*0000000000004d0000000000000000000000000000000e000000000000004e0000000000000000
*000000000000000e000000000000004f0000000000000000000000000000000e00000000000000
*500000000000000000000000000000000e00000000000000510000000000000000000000000000
*000e00000000000000520000000000000000000000000000000e00000000000000530000000000
*000000000000000000000f00000000000000540000000000000000000000000000001000000000
*000000550000000000000000000000000000001000000000000000560000000000000000000000
*000000001100000000000000570000000000000000000000000000001100000000000000580000
*000000000000000000000000001100000000000000590000000000000000000000000000001100
*0000000000005a00000000000000000000000000000011000000000000005b0000000000000000
*0000000000000011000000000000005c0000000000000000000000000000001100000000000000
*5d00000000000000000000000000000012000000000000005e0000000000000000000000000000
*0012000000000000005f0000000000000000000000000000001200000000000000600000000000
*000000000000000000001200000000000000610000000000000000000000000000001200000000
*000000620000000000000000000000000000001200000000000000630000000000000000000000
*000000001200000000000000640000000000000000000000000000001300000000000000650000
*000000000000000000000000001300000000000000660000000000000000000000000000001300
*000000000000670000000000000000000000000000001300000000000000680000000000000000
*000000000000001300000000000000690000000000000000000000000000001300000000000000
*6a00000000000000000000000000000013000000000000006b0000000000000000000000000000
*0013000000000000006c00000000000000000000000000000013000000000000006d0000000000
*0000000000000000000013000000000000006e0000000000000000000000000000001300000000
*0000006f0000000000000000000000000000001300000000000000700000000000000000000000
*000000001300000000000000710000000000000000000000000000001300000000000000720000
*000000000000000000000000001300000000000000730000000000000000000000000000001300
*000000000000740000000000000000000000000000001300000000000000750000000000000000
*000000000000001300000000000000760000000000000000000000000000001300000000000000
*770000000000000000000000000000001300000000000000780000000000000000000000000000
*0014000000000000007900000000000000000000000000000014000000000000007a0000000000
*0000000000000000000014000000000000007b0000000000000000000000000000001500000000
*0000007c00000000000000000000000000000016000000000000007d0000000000000000000000
*0000000016000000000000007e00000000000000000000000000000016000000000000007f0000
*000000000000000000000000001600000000000000800000000000000000000000000000001600
*000000000000810000000000000000000000000000001600000000000000820000000000000000
*000000000000001600000000000000830000000000000000000000000000001600000000000000
*840000000000000000000000000000001600000000000000850000000000000000000000000000
*001600000000000000860000000000000000000000000000001600000000000000870000000000
*000000000000000000001600000000000000880000000000000000000000000000001600000000
*0000008900000000000000000000000000000016000000000000008a0000000000000000000000
*0000000017000000000000008b00000000000000000000000000000017000000000000008c0000
*0000000000000000000000000017000000000000008d0000000000000000000000000000001700
*0000000000008e00000000000000000000000000000018000000000000008f0000000000000000
*000000000000001800000000000000900000000000000000000000000000001800000000000000
*910000000000000000000000000000001800000000000000920000000000000000000000000000
*001800000000000000930000000000000000000000000000001800000000000000940000000000
*000000000000000000001800000000000000950000000000000000000000000000001900000000
*000000960000000000000000000000000000001900000000000000970000000000000000000000
*000000001900000000000000980000000000000000000000000000001900000000000000990000
*000000000000000000000000001a000000000000009a0000000000000000000000000000001b00
*0000000000009b0000000000000000000000000000001b000000000000009c0000000000000000
*000000000000001b000000000000009d0000000000000000000000000000001c00000000000000
*9e0000000000000000000000000000001d000000000000009f0000000000000000000000000000
*001d00000000000000a00000000000000000000000000000001d00000000000000a10000000000
*000000000000000000001e00000000000000a20000000000000000000000000000001e00000000
*000000a30000000000000000000000000000001e200000000000000000000000000000001f0001
*08000000700000006f000000720000007400000061000000620000006c00000065010c00000065
*00000078000000700000006500000072000000690000006d000000650000006e00000074000000
*610000006c01150000006c00000069000000620000007200000061000000720000006900000065
*00000073000000400000006800000061000000730000006b000000650000006c0000006c000000
*2e0000006f0000007200000067000000000000000000000000000000000000010001140000006e
*0000006f0000006e0000002d000000700000006f00000072000000740000006100000062000000
*6c0000006500000020000000280000004d0000005000000054000000430000007300000029010c
*0000006500000078000000700000006500000072000000690000006d000000650000006e000000
*74000000610000006c01150000006c000000690000006200000072000000610000007200000069
*0000006500000073000000400000006800000061000000730000006b000000650000006c000000
*6c0000002e0000006f000000720000006706000000000000000001030102240000005400000068
*00000069000000730000002000000074000000790000007000000065000000200000006d000000
*610000007900000020000000620000006500000020000000620000006500000073000000740000
*00200000007200000065000000610000006400000020000000690000006e000000660000006900
*0000780000002e0000002000000041000000200107010202000000630000002001040100000000
*0000000000000000000000000000000000000000010202000000200000006d0102060000002000
*000069000000730000002000000061000000200104010000000000000000a40000000000000020
*000000000000002101020100000020010702010000006d01020b00000020000000740000006800
*00006100000074000000200000006d0000006100000070000000730000000a0102100000002000
*000076000000610000006c000000750000006500000073000000200000006f0000006600000020
*000000740000007900000070000000650000002001070201000000630102090000002000000074
*00000068000000720000006f000000750000006700000068000000200107020400000075000000
*6e000000690000007401021300000020000000740000006f000000200000007600000061000000
*6c000000750000006500000073000000200000006f000000660000002000000074000000790000
*00700000006500000020010702010000006d0102040000002e0000002000000041000000200107
*0201000000630102010000002d0104010000000000000000000000000000000000000000000000
*000101020a000000200000006d000000610000007900000020000000610000006c000000730000
*006f0000000a01022900000020000000730000007500000070000000700000006c000000790000
*00200000006f0000007000000065000000720000006100000074000000690000006f0000006e00
*000073000000200000007700000068000000690000006300000068000000200000007400000061
*000000630000006b0000002d0000006f0000006e00000020000000610000006e0000006f000000
*740000006800000065000000720000002001070201000000630102100000002000000074000000
*6f00000020000000610000006e0000002000000065000000780000006900000073000000740000
*00690000006e00000067000000200104010000000000000000a400000000000000200000000000
*00002101020100000020010702010000006d01020d000000200000006f0000006e000000200000
*00740000006800000065000000200000006c0000006500000066000000740000000a0102500000
*00200000006f000000720000002000000072000000690000006700000068000000740000002e00
*000020000000540000006800000065000000730000006500000020000000730000007000000065
*0000006300000069000000610000006c000000690000007a000000650000006400000020000000
*720000006500000064000000750000006300000074000000690000006f0000006e000000730000
*00200000006d0000006100000079000000200000006200000065000000200000006d0000006f00
*000072000000650000002000000065000000660000006600000069000000630000006900000065
*0000006e0000007400000020000000690000006e00000020000000730000006f0000006d000000
*65000000200000007300000063000000650000006e0000006100000072000000690000006f0000
*00730000000a01022400000020000000610000006e000000640000002000000061000000720000
*006500000020000000750000007300000065000000640000002000000077000000680000006500
*00006e00000020000000610000007000000070000000720000006f000000700000007200000069
*000000610000007400000065000000200000006200000079000000200000006100000020010209
*00000047000000650000006e000000650000007200000061000000740000006f0000007201020c
*0000002e00000020000000540000006800000065000000200000006e000000610000006d000000
*650000007300000020010401000000000000000003000000000000000000000000000000010102
*0500000020000000610000006e0000006400000020010401000000000000000002000000000000
*0000000000000000000101020600000020000000770000006f000000720000006b0000000a023d
*00000020000000620000007900000020000000610000006e000000610000006c0000006f000000
*670000007900000020000000740000006f00000020000000740000006800000065000000200000
*0073000000790000006e0000006f0000006e000000790000006d0000006f000000750000007300
*0000200000006f0000007000000065000000720000006100000074000000690000006f0000006e
*0000007300000020000000690000006e0000002000000074000000680000006500000020000000
*6c000000690000007300000074000000200000006d0000006f0000006e0000006f000000690000
*00640000002e0000000a010301024c000000540000006800000069000000730000002000000063
*0000006c0000006100000073000000730000002000000064000000650000006c00000069000000
*6200000065000000720000006100000074000000650000006c0000007900000020000000610000
*00760000006f0000006900000064000000730000002000000066000000750000006e0000006300
*000074000000690000006f0000006e000000610000006c0000002d000000640000006500000070
*000000650000006e00000064000000650000006e00000063000000690000006500000073000000
*2c00000020000000730000006f0000002000000074000000680000006100000074000000200000
*0028000000290000002000000063000000610000006e0000002000000062000000650000002000
*0000610000002001070201000000630102090000002d0000005200000065000000640000007500
*00006300000065000000720000000a01020900000020000000660000006f000000720000002000
*0000610000006c0000006c00000020010702010000006301024a0000002c000000200000006100
*00006e0000006400000020000000730000006f000000200000006d000000610000006e00000079
*00000020000000630000006f0000006d0000006d0000006f0000006e0000002000000072000000
*650000006400000075000000630000006500000072000000730000002000000063000000610000
*006e00000020000000770000006f000000720000006b000000200000006f000000760000006500
*000072000000200000006d000000750000006c0000007400000069000000700000006c00000065
*0000002000000074000000790000007000000065000000730000002c0000002000000066000000
*6f0000007200000020000000690000006e0000007300000074000000610000006e000000630000
*00650000002c0000000a0102200000002000000046000000690000007200000073000000740000
*0020000000610000006e00000064000000200000004c0000006100000073000000740000002000
*00006d000000610000007900000020000000720000006500000064000000750000006300000065
*00000020000000620000006f000000740000006800000020010702010000006101020500000020
*000000610000006e00000064000000200104010000000000000000a50000000000000020000000
*000000002201020100000020010702010000006101020a0000002e000000200000005300000069
*0000006e000000630000006500000020000000610000002001020900000047000000650000006e
*000000650000007200000061000000740000006f00000072010215000000200000006800000061
*000000730000002000000061000000200000006600000069000000780000006500000064000000
*20000000650000006c000000650000006d000000650000006e000000740000000a01025a000000
*20000000740000007900000070000000650000002c000000200000007400000068000000650000
*0020000000690000006e00000070000000750000007400000020000000740000006f0000002000
*000074000000680000006500000020000000720000006500000064000000750000006300000065
*000000720000002000000069000000730000002000000067000000650000006e00000065000000
*72000000610000006c0000006c00000079000000200000006b0000006e0000006f000000770000
*006e00000020000000610000006e00000064000000200000006500000078000000740000007200
*0000610000006300000074000000690000006e000000670000002000000066000000720000006f
*0000006d00000020000000740000006800000065000000200000006d0000006f0000006e000000
*6f000000690000006400000020000000750000007300000075000000610000006c0000006c0000
*00790000000a01025a000000200000006900000073000000200000007300000075000000660000
*0066000000690000006300000069000000650000006e0000007400000020000000740000006f00
*000020000000660000006900000078000000200000007400000068000000650000002000000072
*0000006500000073000000750000006c0000007400000020000000740000007900000070000000
*650000002e00000020000000430000006f0000006d00000062000000690000006e000000610000
*00740000006f000000720000007300000020000000610000007200000065000000200000006100
*00007600000061000000690000006c00000061000000620000006c000000650000002000000066
*0000006f00000072000000200000006d0000006f00000073000000740000002000000073000000
*63000000650000006e0000006100000072000000690000006f0000007300000020000000770000
*00680000006500000072000000650000000a010258000000200000007400000068000000690000
*0073000000200000006900000073000000200000006e0000006f00000074000000200000007400
*0000680000006500000020000000630000006100000073000000650000002c0000002000000061
*0000006e0000006400000020000000740000006800000065000000200000006600000065000000
*770000002000000072000000650000006d00000061000000690000006e000000690000006e0000
*006700000020000000630000006100000073000000650000007300000020000000630000006100
*00006e0000002000000062000000650000002000000068000000610000006e000000640000006c
*000000650000006400000020000000620000007900000020000000750000007300000069000000
*6e0000006700000020000000610000006e000000200000006500000078000000700000006c0000
*0069000000630000006900000074000000200000000a0212000000200000007400000079000000
*700000006500000020000000610000006e0000006e0000006f0000007400000061000000740000
*00690000006f0000006e0000002e0000000a030102140000004d000000690000006e0000006900
*00006d000000610000006c00000020000000640000006500000066000000690000006e00000069
*00000074000000690000006f0000006e0000003a00000020010401000000000000000001000000
*00000000000000000000000001010204000000200000006f000000720000002001040100000000
*00000000020000000000000000000000000000000102010000000a000000000000000103010217
*000000430000006f0000006e000000760000006500000072000000740000002000000061000000
*2000000076000000610000006c000000750000006500000020000000690000006e000000740000
*006f0000002000000061000000200104010000000000000000a400000000000000200000000000
*00002102010000000a000000000000000203010214000000410000007000000070000000650000
*006e0000006400000020000000610000002000000076000000610000006c000000750000006500
*000020000000740000006f0000002000000061000000200104010000000000000000a400000000
*000000200000000000000021022400000020000000660000006f00000072000000200000007500
*0000730000006500000020000000690000006e000000200000006c000000650000006600000074
*0000002d000000740000006f0000002d0000007200000069000000670000006800000074000000
*20000000720000006500000064000000750000006300000074000000690000006f0000006e0000
*000a00000000000000030301021700000050000000720000006500000070000000650000006e00
*00006400000020000000610000002000000076000000610000006c000000750000006500000020
*0000006f0000006e000000740000006f0000002000000061000000200104010000000000000000
*a400000000000000200000000000000021022800000020000000660000006f0000007200000020
*00000075000000730000006500000020000000640000007500000072000000690000006e000000
*670000002000000072000000690000006700000068000000740000002d000000740000006f0000
*002d0000006c000000650000006600000074000000200000007200000065000000640000007500
*00006300000074000000690000006f0000006e0000000a00000000000000040301020800000041
*00000070000000700000006c000000790000002000000061000000200104010000000000000000
*000000000000000000000000000000000101020600000020000000740000006f00000020000000
*61000000200104010000000000000000a600000000000000200000000000000023024b00000020
*000000630000006f0000006e0000007400000061000000690000006e0000006500000072000000
*2c000000200000006100000066000000740000006500000072000000200000006d000000610000
*007000000070000000690000006e00000067000000200000007400000068000000650000002000
*0000630000006f0000006e00000074000000650000006e00000074000000730000002000000069
*0000006e000000740000006f000000200000006100000020000000730000007500000069000000
*7400000061000000620000006c0000006500000020000000660000006f000000720000006d0000
*0020000000660000006f0000007200000020000000720000006500000064000000750000006300
*000074000000690000006f0000006e0000002e0000000a00000000000000050301020800000041
*00000070000000700000006c000000790000002000000061000000200104010000000000000000
*000000000000000000000000000000000101020600000020000000740000006f00000020000000
*61000000200104010000000000000000a60000000000000020000000000000002301021e000000
*200000006d000000610000007000000070000000690000006e0000006700000020000000650000
*0061000000630000006800000020000000650000006c000000650000006d000000650000006e00
*000074000000200000007400000068000000720000006f00000075000000670000006800000020
*0104010000000000000000010000000000000000000000000000000102010000000a2200000000
*000000a700000000000000a800000000000000a900000000000000a400000000000000aa000000
*00000000ab00000000000000ac00000000000000ad00000000000000ae00000000000000af0000
*0000000000b000000000000000b100000000000000b200000000000000b300000000000000b400
*000000000000b500000000000000b600000000000000b700000000000000b800000000000000b9
*00000000000000ba00000000000000bb00000000000000bc00000000000000bd00000000000000
*be00000000000000bf00000000000000c000000000000000c10000000000000000000000000000
*000100000000000000020000000000000003000000000000000400000000000000050600000000
*000000000000000000000001000000000000000200000000000000030000000000000004000000
*0000000005000000000000000000000000000000020001140000006e0000006f0000006e000000
*2d000000700000006f000000720000007400000061000000620000006c00000065000000200000
*00280000004d0000005000000054000000430000007300000029010c0000006500000078000000
*700000006500000072000000690000006d000000650000006e00000074000000610000006c0115
*0000006c0000006900000062000000720000006100000072000000690000006500000073000000
*400000006800000061000000730000006b000000650000006c0000006c0000002e0000006f0000
*0072000000670100000000000000060301022200000050000000720000006f0000007600000069
*0000006400000065000000730000002000000061000000200000006d0000006500000063000000
*68000000610000006e00000069000000730000006d00000020000000660000006f000000720000
*002000000074000000680000006500000020000000550000005400000046000000380000002001
*04010000000000000000a400000000000000200000000000000021023600000020000000740000
*006f000000200000007200000065000000700000006f0000007200000074000000200000006900
*00006e00000076000000610000006c000000690000006400000020000000630000006800000061
*000000720000006100000063000000740000006500000072000000730000002000000074000000
*6f000000200000006f0000006e00000065000000200000006f00000072000000200000006d0000
*006f0000007200000065000000200000006d0000006f0000006e0000006f000000690000006400
*0000730000002e0000000a2500000000000000a700000000000000a800000000000000a9000000
*00000000a400000000000000aa00000000000000ab00000000000000ac00000000000000ad0000
*0000000000ae00000000000000af00000000000000b000000000000000b100000000000000b200
*000000000000b300000000000000b400000000000000b500000000000000b600000000000000b7
*00000000000000b800000000000000b900000000000000ba00000000000000bb00000000000000
*bc00000000000000bd00000000000000be00000000000000bf00000000000000c0000000000000
*00c100000000000000000000000000000001000000000000000200000000000000030000000000
*000004000000000000000500000000000000060000000000000007000000000000000803000000
*000000000600000000000000080000000000000007000000000000000000000000000000030001
*140000006e0000006f0000006e0000002d000000700000006f0000007200000074000000610000
*00620000006c0000006500000020000000280000004d0000005000000054000000430000007300
*000029010c0000006500000078000000700000006500000072000000690000006d000000650000
*006e00000074000000610000006c01150000006c00000069000000620000007200000061000000
*72000000690000006500000073000000400000006800000061000000730000006b000000650000
*006c0000006c0000002e0000006f00000072000000670100000000000000090301020300000049
*0000006600000020010702010000006d0102060000002000000069000000730000002000000061
*0000002001070201000000630102010000002d0105070000005200000065000000640000007500
*000063000000650000007201020c0000002c000000200000007400000068000000650000006e00
*0000200000006d0000002000000069000000730000002001070102030000002800000063000000
*2001040200000000000000000a0000000000000000000000000000000300000000000000000900
*0000000000000000000000000000030203000000200000006d000000290102010000002d010507
*000000520000006500000064000000750000006300000065000000720102010000000a01022800
*000020000000200000002000000054000000680000006900000073000000200000006300000061
*0000006e0000002000000062000000650000002000000075000000730000006500000064000000
*20000000740000006f00000020000000710000007500000069000000630000006b0000006c0000
*00790000002000000073000000650000006c000000650000006300000074000000200000006100
*0000200105070000005200000065000000640000007500000063000000650000007201020e0000
*0020000000660000006f0000007200000020000000750000007300000065000000200000006100
*0000730000002000000061000000200104010100000000000000c20102010000000a0102030000
*002000000020000000200104010100000000000000c302020000002e0000000a25000000000000
*00a700000000000000a800000000000000a900000000000000a400000000000000aa0000000000
*0000ab00000000000000ac00000000000000ad00000000000000ae00000000000000af00000000
*000000b000000000000000b100000000000000b200000000000000b300000000000000b4000000
*00000000b500000000000000b600000000000000b700000000000000b800000000000000b90000
*0000000000ba00000000000000bb00000000000000bc00000000000000bd00000000000000be00
*000000000000bf00000000000000c000000000000000c100000000000000000000000000000001
*000000000000000200000000000000030000000000000004000000000000000500000000000000
*09000000000000000a000000000000000b030000000000000009000000000000000a0000000000
*00000b000000000000000000000000000000040000000004000000000000000c03010204000000
*540000006800000065000000200104010000000000000000a40000000000000020000000000000
*00210102010000002001070102010000002801020100000027010211000000750000006e000000
*690000006f0000006e00000057000000690000007400000068000000200000006d000000610000
*007000000070000000650000006e00000064010201000000270102010000002c01040100000000
*000000001600000000000000000000000000000004020100000029022100000020000000660000
*006f0000007200000020000000630000006f0000006e0000007400000061000000690000006e00
*00006500000072000000730000002000000066000000750000006c0000006c000000200000006f
*00000066000000200000006d0000006f0000006e0000006f000000690000006400000073000000
*2e0000000a000000000000000f03024d000000500000006f0000006c000000790000006d000000
*6f000000720000007000000068000000690000006300000020000000630000006f0000006e0000
*007400000061000000690000006e00000065000000720000007300000020000000740000006800
*000061000000740000002000000077000000650000002000000063000000610000006e00000020
*000000730000007500000070000000700000006c0000007900000020000000610000006e000000
*200000006f0000007000000065000000720000006100000074000000690000006f0000006e0000
*0020000000740000006f0000002000000068000000610000006e000000640000006c0000006500
*000020000000750000006e000000690000006f0000006e00000073000000200000007700000069
*00000074000000680000000a000000000000001203010204000000540000006800000065000000
*200104010000000000000000a40000000000000020000000000000002101020100000020010701
*020100000028010401000000000000000017000000000000000000000000000000040102010000
*002c01040100000000000000001600000000000000000000000000000004020100000029020100
*00000a00000000000000150301021d0000004100000020000000430000006f0000006e00000074
*00000061000000690000006e000000650000007200000020000000730000007500000069000000
*7400000061000000620000006c0000006500000020000000660000006f00000072000000200000
*007400000068000000650000002001040200000000000000001300000000000000000000000000
*000004000000000000000012000000000000000000000000000000040102010000002001040100
*00000000000000a40000000000000020000000000000002102010000000a1300000000000000a7
*00000000000000a900000000000000a40000000000000000000000000000000100000000000000
*020000000000000003000000000000000c000000000000000d000000000000000e000000000000
*000f00000000000000100000000000000011000000000000001200000000000000130000000000
*0000140000000000000015000000000000001600000000000000170c0000000000000015000000
*000000001600000000000000170000000000000012000000000000001300000000000000140000
*00000000000f00000000000000110000000000000010000000000000000c000000000000000d00
*0000000000000e000000000000000000000000000000050001140000006e0000006f0000006e00
*00002d000000700000006f000000720000007400000061000000620000006c0000006500000020
*000000280000004d0000005000000054000000430000007300000029010c000000650000007800
*0000700000006500000072000000690000006d000000650000006e00000074000000610000006c
*01150000006c000000690000006200000072000000610000007200000069000000650000007300
*0000400000006800000061000000730000006b000000650000006c0000006c0000002e0000006f
*0000007200000067002700000000000000a700000000000000a800000000000000a90000000000
*0000a400000000000000aa00000000000000ab00000000000000ac00000000000000ad00000000
*000000ae00000000000000af00000000000000b000000000000000b100000000000000b2000000
*00000000b300000000000000b400000000000000b500000000000000b600000000000000b70000
*0000000000b800000000000000b900000000000000ba00000000000000bb00000000000000bc00
*000000000000bd00000000000000be00000000000000bf00000000000000c000000000000000c1
*000000000000000000000000000000010000000000000002000000000000000300000000000000
*040000000000000005000000000000000600000000000000070000000000000008000000000000
*001800000000000000190200000000000000180000000000000019000000000000000000000000
*00000006000108000000700000006f000000720000007400000061000000620000006c00000065
*010c0000006500000078000000700000006500000072000000690000006d000000650000006e00
*000074000000610000006c01150000006c00000069000000620000007200000061000000720000
*00690000006500000073000000400000006800000061000000730000006b000000650000006c00
*00006c0000002e0000006f000000720000006705000000000000001a0301020200000061000000
*200104010000000000000000230000000000000000000000000000000601021900000020000000
*7400000072000000610000006e00000073000000660000006f000000720000006d000000650000
*007200000020000000740000006800000061000000740000002000000074000000720000006500
*0000610000007400000073000000200104010000000000000000c4000000000000002000000000
*00000024010204000000200000006100000073000000200104010000000000000000c500000000
*0000002500000000000000260102010000000a0102150000002000000054000000680000006900
*000073000000200000006c00000065000000740000007300000020000000790000006f00000075
*0000002000000075000000730000006500000020000000610000002001020a0000004200000079
*0000007400000065000000530000007400000072000000690000006e0000006701020600000020
*00000061000000730000002000000061000000200104010000000000000000c500000000000000
*25000000000000002601022000000020000000730000006f000000750000007200000063000000
*6500000020000000770000006900000074000000680000006f0000007500000074000000200000
*00670000006f000000690000006e00000067000000200000007400000068000000720000006f00
*00007500000067000000680000002000000061000000200104010000000000000000a400000000
*000000200000000000000021010212000000200000007400000072000000610000006e00000073
*000000660000006f000000720000006d0000006500000072000000200000006c00000069000000
*6b00000065000000200102040000005500000054000000460000003802010000000a0000000000
*00001d030102020000006100000020010401000000000000000023000000000000000000000000
*00000006024d000000200000007400000072000000610000006e00000073000000660000006f00
*0000720000006d0000006500000072000000200000007400000068000000610000007400000020
*00000061000000730000006b00000073000000200000006f0000006e0000006c00000079000000
*20000000660000006f000000720000002000000074000000680000006500000020000000760000
*00610000006c00000075000000650000007300000020000000630000006f0000006e0000007400
*000061000000690000006e000000650000006400000020000000690000006e0000002000000061
*0000006e00000020000000690000006e0000006400000065000000780000006500000064000000
*20000000630000006f0000006e0000007400000061000000690000006e00000065000000720000
*000a00000000000000200301020200000061000000200104010000000000000000230000000000
*00000000000000000000060241000000200000007400000072000000610000006e000000730000
*00660000006f000000720000006d00000065000000720000002000000074000000680000006100
*0000740000002000000061000000730000006b00000073000000200000006f0000006e0000006c
*0000007900000020000000660000006f0000007200000020000000740000006800000065000000
*200000006b000000650000007900000073000000200000006f0000006600000020000000610000
*006e00000020000000690000006e00000064000000650000007800000065000000640000002000
*0000630000006f0000006e0000007400000061000000690000006e00000065000000720000000a
*0000000000000023030102130000006d000000690000006e000000690000006d00000061000000
*6c00000020000000640000006500000066000000690000006e0000006900000074000000690000
*006f0000006e000000200104010000000000000000250000000000000000000000000000000601
*0204000000200000006f0000007200000020010401000000000000000026000000000000000000
*0000000000000602010000000a0000000000000028030102080000004100000070000000700000
*006c00000079000000200000006100000020010401000000000000000000000000000000000000
*0000000000000101021f0000002000000064000000690000007200000065000000630000007400
*00006c0000007900000020000000740000006f0000002000000074000000680000006500000020
*000000650000006c000000650000006d000000650000006e000000740000007300000020000000
*6f0000006600000020000000610000002001040100000000000000002300000000000000000000
*00000000000602010000000a3100000000000000a700000000000000a800000000000000a90000
*0000000000a400000000000000aa00000000000000ab00000000000000ac00000000000000ad00
*000000000000ae00000000000000af00000000000000b000000000000000b100000000000000b2
*00000000000000b300000000000000b400000000000000b500000000000000b600000000000000
*b700000000000000b800000000000000b900000000000000ba00000000000000bb000000000000
*00bc00000000000000bd00000000000000be00000000000000bf00000000000000c00000000000
*0000c1000000000000000000000000000000010000000000000002000000000000000300000000
*000000040000000000000005000000000000001a000000000000001b000000000000001c000000
*000000001d000000000000001e000000000000001f000000000000002000000000000000210000
*000000000022000000000000002300000000000000240000000000000025000000000000002600
*0000000000002700000000000000280f0000000000000023000000000000002400000000000000
*250000000000000026000000000000002700000000000000280000000000000020000000000000
*00210000000000000022000000000000001d000000000000001e000000000000001f0000000000
*00001a000000000000001b000000000000001c0000000000000000000000000000000700012700
*00006e0000006f0000006e0000002d000000700000006f00000072000000740000006100000062
*0000006c0000006500000020000000280000004d00000050000000540000004300000073000000
*2c000000200000004f0000007600000065000000720000006c0000006f00000061000000640000
*006500000064000000530000007400000072000000690000006e00000067000000730000002901
*0c0000006500000078000000700000006500000072000000690000006d000000650000006e0000
*0074000000610000006c01150000006c0000006900000062000000720000006100000072000000
*690000006500000073000000400000006800000061000000730000006b000000650000006c0000
*006c0000002e0000006f0000007200000067060000000000000029030102020000004100000020
*0104010000000000000000a40000000000000020000000000000002101023a000000200000006f
*00000066000000200000007000000061000000720000007400000069000000610000006c000000
*20000000690000006e000000660000006f000000720000006d0000006100000074000000690000
*006f0000006e0000002000000061000000620000006f0000007500000074000000200000006c00
*00006f000000630000006100000074000000690000006f0000006e000000730000002000000069
*0000006e000000200000006100000020000000730000006f000000750000007200000063000000
*650000002000000066000000690000006c000000650000002e0000000a025f0000002000000020
*000000200000005400000068000000690000007300000020000000690000007300000020000000
*700000006f0000006c000000790000006d0000006f000000720000007000000068000000690000
*006300000020000000690000006e00000020000000740000006800000065000000200000006b00
*0000690000006e00000064000000200000006f0000006600000020000000690000006e00000066
*0000006f000000720000006d0000006100000074000000690000006f0000006e00000020000000
*790000006f000000750000002000000077000000610000006e0000007400000020000000740000
*006f000000200000006d00000061000000690000006e0000007400000061000000690000006e00
*00002000000061000000620000006f000000750000007400000020000000650000006100000063
*0000006800000020000000730000006f0000007500000072000000630000006500000020000000
*66000000690000006c000000650000002e0000000a000000000000002c03023f00000043000000
*6f0000006d00000070000000750000007400000065000000200000007400000068000000650000
*00200000006c0000006f000000630000006100000074000000690000006f0000006e0000002000
*00006f0000006600000020000000740000006800000065000000200000006e0000006500000078
*00000074000000200000007300000074000000610000006e000000640000006100000072000000
*6400000020000000380000002d000000630000006f0000006c000000750000006d0000006e0000
*0020000000610000006c00000069000000670000006e0000006500000064000000200000007400
*000061000000620000000a000000000000002d030102350000006c000000690000006600000074
*00000020000000690000006e000000660000006f000000720000006d0000006100000074000000
*690000006f0000006e0000002000000061000000620000006f0000007500000074000000200000
*006100000020000000730000006f00000075000000720000006300000065000000200000006600
*0000690000006c0000006500000020000000690000006e000000740000006f0000002000000061
*000000200000007300000074000000610000007200000074000000690000006e00000067000000
*2001040100000000000000002900000000000000000000000000000007020f0000002000000066
*0000006f0000007200000020000000740000006800000061000000740000002000000066000000
*690000006c000000650000000a000000000000002e03026a000000650000007800000074000000
*720000006100000063000000740000002000000070000000610000007200000074000000690000
*00610000006c00000020000000690000006e000000660000006f000000720000006d0000006100
*000074000000690000006f0000006e0000002000000061000000620000006f0000007500000074
*000000200000007400000068000000650000002000000063000000750000007200000072000000
*650000006e0000007400000020000000630000006f0000006c000000750000006d0000006e0000
*002c000000200000006500000076000000650000006e00000020000000690000006e0000002000
*000074000000680000006500000020000000610000006200000073000000650000006e00000063
*00000065000000200000006f00000066000000200000006b0000006e0000006f00000077000000
*6c00000065000000640000006700000065000000200000006f0000006600000020000000740000
*00680000006500000020000000730000006f000000750000007200000063000000650000002000
*000066000000690000006c000000650000000a000000000000002f030246000000650000007800
*000074000000720000006100000063000000740000002000000070000000610000007200000074
*00000069000000610000006c00000020000000690000006e000000660000006f00000072000000
*6d0000006100000074000000690000006f0000006e0000002000000061000000620000006f0000
*007500000074000000200000007400000068000000650000002000000063000000750000007200
*000072000000650000006e00000074000000200000006c000000690000006e0000006500000020
*0000006e000000750000006d000000620000006500000072000000200000006900000066000000
*20000000700000006f000000730000007300000069000000620000006c000000650000000a0000
*00000000003003023c000000650000007800000074000000720000006100000063000000740000
*0020000000740000006800000065000000200000007300000074000000610000006e0000006400
*000061000000720000006400000020000000660000006f000000720000006d0000006100000074
*00000020000000660000006f0000007200000020000000610000006e0000002000000061000000
*62000000730000006f0000006c00000075000000740000006500000020000000730000006f0000
*007500000072000000630000006500000020000000700000006f00000073000000690000007400
*0000690000006f0000006e0000000a2d00000000000000a700000000000000a800000000000000
*a900000000000000a400000000000000aa00000000000000ab00000000000000ac000000000000
*00ad00000000000000ae00000000000000af00000000000000b000000000000000b10000000000
*0000b200000000000000b300000000000000b400000000000000b500000000000000b600000000
*000000b700000000000000b800000000000000b900000000000000ba00000000000000bb000000
*00000000bc00000000000000bd00000000000000be00000000000000bf00000000000000c00000
*0000000000c1000000000000000000000000000000010000000000000002000000000000000300
*000000000000040000000000000005000000000000000600000000000000070000000000000008
*0000000000000029000000000000002a000000000000002b000000000000002c00000000000000
*2d000000000000002e000000000000002f000000000000003008000000000000002c0000000000
*000029000000000000002b000000000000002a000000000000002f000000000000002e00000000
*0000002d0000000000000030000000000000000000000000000000080001270000006e0000006f
*0000006e0000002d000000700000006f000000720000007400000061000000620000006c000000
*6500000020000000280000004d000000500000005400000043000000730000002c000000200000
*004f0000007600000065000000720000006c0000006f0000006100000064000000650000006400
*0000530000007400000072000000690000006e000000670000007300000029010c000000650000
*0078000000700000006500000072000000690000006d000000650000006e000000740000006100
*00006c01150000006c000000690000006200000072000000610000007200000069000000650000
*0073000000400000006800000061000000730000006b000000650000006c0000006c0000002e00
*00006f000000720000006708000000000000003103010202000000410000002001040100000000
*000000000600000000000000000000000000000002022600000020000000740000007200000061
*0000006e00000073000000660000006f000000720000006d000000650000007200000020000000
*740000006800000061000000740000002000000073000000740000007200000069000000700000
*0073000000200000006f0000007500000074000000200000006e00000065000000770000006c00
*0000690000006e00000065000000730000000a0000000000000033030102020000004100000020
*010401000000000000000006000000000000000000000000000000020102360000002000000074
*00000072000000610000006e00000073000000660000006f000000720000006d00000065000000
*720000002000000074000000680000006100000074000000200000007300000074000000720000
*00690000007000000073000000200000006f000000750000007400000020000000610000006e00
*000079000000200000006300000068000000610000007200000061000000630000007400000065
*00000072000000200000006d000000610000007400000063000000680000006500000064000000
*200000006200000079000000200104010000000000000000c60000000000000020000000000000
*002702010000000a00000000000000350301020200000041000000200104010000000000000000
*060000000000000000000000000000000201021b00000020000000740000007200000061000000
*6e00000073000000660000006f000000720000006d000000650000007200000020000000740000
*0068000000610000007400000020000000620000007200000065000000610000006b0000007300
*00002000000061000000200104010000000000000000c500000000000000250000000000000026
*010201000000200104010000000000000000230000000000000000000000000000000601022000
*000020000000690000006e000000740000006f0000002000000064000000690000007300000074
*000000690000006e0000006300000074000000200000006c000000690000006e00000065000000
*730000002c0000002000000066000000650000006500000064000000690000006e000000670000
*002000000061000000200104010000000000000000c50000000000000025000000000000002601
*020100000020010401000000000000000000000000000000000000000000000000010214000000
*2000000065000000610000006300000068000000200000006c000000690000006e000000650000
*0020000000690000006e000000200000007400000075000000720000006e0000002e0000000a00
*000000000000360301020200000041000000200104010000000000000000060000000000000000
*000000000000000201021b000000200000007400000072000000610000006e0000007300000066
*0000006f000000720000006d000000650000007200000020000000740000006800000061000000
*7400000020000000620000007200000065000000610000006b0000007300000020000000610000
*00200104010000000000000000c500000000000000250000000000000026010201000000200104
*010000000000000000230000000000000000000000000000000601022000000020000000690000
*006e000000740000006f0000002000000064000000690000007300000074000000690000006e00
*0000630000007400000020000000770000006f0000007200000064000000730000002c00000020
*00000066000000650000006500000064000000690000006e000000670000002000000061000000
*200104010000000000000000c50000000000000025000000000000002601020100000020010401
*000000000000000000000000000000000000000000000000010213000000200000006500000061
*0000006300000068000000200000006c000000690000006e000000650000002000000069000000
*6e000000200000007400000075000000720000006e0000000a0000000000000037030102230000
*004500000078000000740000007200000061000000630000007400000020000000740000006800
*000065000000200000006d00000061000000740000006300000068000000650000006400000020
*000000770000006f0000007200000064000000730000002000000066000000720000006f000000
*6d0000002000000074000000680000006500000020010401000000000000000036000000000000
*00000000000000000008010201000000200104010000000000000000a400000000000000200000
*00000000002102010000000a000000000000003803010223000000450000007800000074000000
*7200000061000000630000007400000020000000740000006800000065000000200000006d0000
*00610000007400000063000000680000006500000064000000200000006c000000690000006e00
*000065000000730000002000000066000000720000006f0000006d000000200000007400000068
*000000650000002001040100000000000000003500000000000000000000000000000008010201
*000000200104010000000000000000a40000000000000020000000000000002102010000000a00
*0000000000003903025e0000005500000074000000690000006c00000069000000740000007900
*00002000000066000000750000006e0000006300000074000000690000006f0000006e00000020
*000000740000006f00000020000000650000007800000074000000720000006100000063000000
*7400000020000000770000006f0000007200000064000000730000002000000075000000730000
*00690000006e0000006700000020000000610000006300000063000000750000006d0000007500
*00006c00000061000000740000006f000000720000002c00000020000000690000006e00000073
*0000006900000064000000650000002d000000770000006f00000072000000640000002c000000
*20000000610000006e0000006400000020000000750000006e00000074000000690000006c0000
*002d0000006e0000006500000078000000740000002d000000770000006f000000720000006400
*0000200000006d0000006f0000006e0000006f0000006900000064000000730000000a00000000
*0000003a03025e0000005500000074000000690000006c00000069000000740000007900000020
*00000066000000750000006e0000006300000074000000690000006f0000006e00000020000000
*740000006f00000020000000650000007800000074000000720000006100000063000000740000
*00200000006c000000690000006e00000065000000730000002000000075000000730000006900
*00006e0000006700000020000000610000006300000063000000750000006d000000750000006c
*00000061000000740000006f000000720000002c00000020000000690000006e00000073000000
*6900000064000000650000002d0000006c000000690000006e000000650000002c000000200000
*00610000006e0000006400000020000000750000006e00000074000000690000006c0000002d00
*00006e0000006500000078000000740000002d0000006c000000690000006e0000006500000020
*0000006d0000006f0000006e0000006f0000006900000064000000730000000a2f000000000000
*00a700000000000000a800000000000000a900000000000000a400000000000000aa0000000000
*0000ab00000000000000ac00000000000000ad00000000000000ae00000000000000af00000000
*000000b000000000000000b100000000000000b200000000000000b300000000000000b4000000
*00000000b500000000000000b600000000000000b700000000000000b800000000000000b90000
*0000000000ba00000000000000bb00000000000000bc00000000000000bd00000000000000be00
*000000000000bf00000000000000c000000000000000c100000000000000000000000000000001
*000000000000000200000000000000030000000000000004000000000000000500000000000000
*060000000000000007000000000000000800000000000000310000000000000032000000000000
*003300000000000000340000000000000035000000000000003600000000000000370000000000
*0000380000000000000039000000000000003a0a00000000000000360000000000000037000000
*000000003300000000000000340000000000000039000000000000003500000000000000380000
*0000000000310000000000000032000000000000003a0000000000000000000000000000000900
*0108000000700000006f000000720000007400000061000000620000006c00000065010c000000
*6500000078000000700000006500000072000000690000006d000000650000006e000000740000
*00610000006c01150000006c000000690000006200000072000000610000007200000069000000
*6500000073000000400000006800000061000000730000006b000000650000006c0000006c0000
*002e0000006f0000007200000067002500000000000000a700000000000000a800000000000000
*a900000000000000a400000000000000aa00000000000000ab00000000000000ac000000000000
*00ad00000000000000ae00000000000000af00000000000000b000000000000000b10000000000
*0000b200000000000000b300000000000000b400000000000000b500000000000000b600000000
*000000b700000000000000b800000000000000b900000000000000ba00000000000000bb000000
*00000000bc00000000000000bd00000000000000be00000000000000bf00000000000000c00000
*0000000000c1000000000000000000000000000000010000000000000002000000000000000300
*000000000000040000000000000005000000000000003b000000000000003c000000000000003d
*03000000000000003b000000000000003c000000000000003d0000000000000000000000000000
*000a0001280000006e0000006f0000006e0000002d000000700000006f00000072000000740000
*0061000000620000006c0000006500000020000000280000006f00000076000000650000007200
*00006c0000006f0000006100000064000000650000006400000020000000730000007400000072
*000000690000006e00000067000000730000002c000000200000004d0000005000000054000000
*430000007300000029010c0000006500000078000000700000006500000072000000690000006d
*000000650000006e00000074000000610000006c01150000006c00000069000000620000007200
*00006100000072000000690000006500000073000000400000006800000061000000730000006b
*000000650000006c0000006c0000002e0000006f0000007200000067002500000000000000a700
*000000000000a800000000000000a900000000000000a400000000000000aa00000000000000ab
*00000000000000ac00000000000000ad00000000000000ae00000000000000af00000000000000
*b000000000000000b100000000000000b200000000000000b300000000000000b4000000000000
*00b500000000000000b600000000000000b700000000000000b800000000000000b90000000000
*0000ba00000000000000bb00000000000000bc00000000000000bd00000000000000be00000000
*000000bf00000000000000c000000000000000c100000000000000000000000000000001000000
*0000000002000000000000000300000000000000040000000000000005000000000000003e0000
*00000000003f000000000000004003000000000000003e000000000000003f0000000000000040
*0000000000000000000000000000000b000108000000700000006f000000720000007400000061
*000000620000006c00000065010c00000065000000780000007000000065000000720000006900
*00006d000000650000006e00000074000000610000006c01150000006c00000069000000620000
*007200000061000000720000006900000065000000730000004000000068000000610000007300
*00006b000000650000006c0000006c0000002e0000006f00000072000000670300000000000000
*410301020200000041000000200104010000000000000000a40000000000000020000000000000
*002101020b000000200000006900000073000000200000006a0000007500000073000000740000
*002000000061000000200104010000000000000000c70000000000000020000000000000002802
*130000002000000077000000690000007400000068000000200000006f0000006e000000650000
*00200000006f000000620000006a0000006500000063000000740000002e000000200000000a00
*0000000000004303010204000000540000006800000065000000200104010000000000000000a4
*00000000000000200000000000000021010237000000200000006f000000660000002000000074
*000000680000006500000020000000650000006e000000640000006f0000006d0000006f000000
*72000000700000006800000069000000730000006d00000073000000200000006f000000760000
*00650000007200000020000000730000006f0000006d00000065000000200000006f0000006200
*00006a00000065000000630000007400000020000000690000006e00000020000000610000006e
*000000200000006100000072000000620000006900000074000000720000006100000072000000
*79000000200104010000000000000000c70000000000000020000000000000002802020000002e
*0000000a00000000000000460301020c0000004500000078000000740000007200000061000000
*630000007400000020000000740000006800000065000000200104010000000000000000a40000
*000000000020000000000000002101021e0000002000000066000000720000006f0000006d0000
*002000000069000000740000007300000020000000720000006500000070000000720000006500
*000073000000650000006e000000740000006100000074000000690000006f0000006e00000020
*00000061000000730000002000000061000000200104010000000000000000c700000000000000
*20000000000000002802010000000a2d00000000000000a700000000000000a800000000000000
*a900000000000000a400000000000000aa00000000000000ab00000000000000ac000000000000
*00ad00000000000000ae00000000000000af00000000000000b000000000000000b10000000000
*0000b200000000000000b300000000000000b400000000000000b500000000000000b600000000
*000000b700000000000000b800000000000000b900000000000000ba00000000000000bb000000
*00000000bc00000000000000bd00000000000000be00000000000000bf00000000000000c00000
*0000000000c100000000000000c800000000000000c900000000000000ca00000000000000cb00
*000000000000c70000000000000000000000000000000100000000000000020000000000000003
*000000000000000400000000000000050000000000000041000000000000004200000000000000
*430000000000000044000000000000004500000000000000460600000000000000430000000000
*000044000000000000004500000000000000410000000000000042000000000000004600000000
*00000000000000000000000c000108000000700000006f00000072000000740000006100000062
*0000006c00000065010c0000006500000078000000700000006500000072000000690000006d00
*0000650000006e00000074000000610000006c01150000006c0000006900000062000000720000
*006100000072000000690000006500000073000000400000006800000061000000730000006b00
*0000650000006c0000006c0000002e0000006f0000007200000067001e00000000000000a70000
*0000000000a800000000000000a900000000000000a400000000000000aa00000000000000ab00
*000000000000ac00000000000000ad00000000000000ae00000000000000af00000000000000b0
*00000000000000b100000000000000b200000000000000b300000000000000b400000000000000
*b500000000000000b600000000000000b700000000000000b800000000000000b9000000000000
*00ba00000000000000bb00000000000000bc00000000000000bd00000000000000be0000000000
*0000bf00000000000000c000000000000000c10000000000000047000000000000004802000000
*000000004700000000000000480000000000000000000000000000000d00010800000070000000
*6f000000720000007400000061000000620000006c00000065010c000000650000007800000070
*0000006500000072000000690000006d000000650000006e00000074000000610000006c011500
*00006c000000690000006200000072000000610000007200000069000000650000007300000040
*0000006800000061000000730000006b000000650000006c0000006c0000002e0000006f000000
*7200000067001f00000000000000a700000000000000a800000000000000a900000000000000a4
*00000000000000aa00000000000000ab00000000000000ac00000000000000ad00000000000000
*ae00000000000000af00000000000000b000000000000000b100000000000000b2000000000000
*00b300000000000000b400000000000000b500000000000000b600000000000000b70000000000
*0000b800000000000000b900000000000000ba00000000000000bb00000000000000bc00000000
*000000bd00000000000000be00000000000000bf00000000000000c000000000000000c1000000
*000000004700000000000000480000000000000049010000000000000049000000000000000000
*0000000000000e000122000000700000006f000000720000007400000061000000620000006c00
*000065000000200000002800000062000000750000007400000020000000690000006e00000073
*00000074000000610000006e000000630000006500000073000000200000007500000073000000
*65000000200000004d0000005000000054000000430000007300000029010c0000006500000078
*000000700000006500000072000000690000006d000000650000006e0000007400000061000000
*6c01150000006c0000006900000062000000720000006100000072000000690000006500000073
*000000400000006800000061000000730000006b000000650000006c0000006c0000002e000000
*6f000000720000006702000000000000004a0301020a000000430000006f0000006e0000007600
*00006500000072000000740000002000000061000000200104010000000000000000a400000000
*00000020000000000000002101020800000020000000690000006e000000740000006f00000020
*00000061000000200104010000000000000000500000000000000000000000000000000e01020c
*0000002e000000200000004d0000006e000000650000006d0000006f0000006e00000069000000
*630000003a000000200107021b0000004500000078000000700000002000000061000000200000
*002a000000200000004500000078000000700000002000000062000000200000003d0000002000
*0000450000007800000070000000200000002800000061000000200000002b0000002000000062
*0000002902010000000a000000000000004d0301020a000000430000006f0000006e0000007600
*000065000000720000007400000020000000610000002001040100000000000000005000000000
*00000000000000000000000e01020800000020000000690000006e000000740000006f00000020
*00000061000000200104010000000000000000a40000000000000020000000000000002101020c
*0000002e000000200000004d0000006e000000650000006d0000006f0000006e00000069000000
*630000003a000000200107021b0000004c0000006f000000670000002000000061000000200000
*002b000000200000004c0000006f000000670000002000000062000000200000003d0000002000
*00004c0000006f00000067000000200000002800000061000000200000002a0000002000000062
*0000002902010000000a2700000000000000a700000000000000a800000000000000a900000000
*000000a400000000000000aa00000000000000ab00000000000000ac00000000000000ad000000
*00000000ae00000000000000af00000000000000b000000000000000b100000000000000b20000
*0000000000b300000000000000b400000000000000b500000000000000b600000000000000b700
*000000000000b800000000000000b900000000000000ba00000000000000bb00000000000000bc
*00000000000000bd00000000000000be00000000000000bf00000000000000c000000000000000
*c100000000000000470000000000000048000000000000004a000000000000004b000000000000
*004c000000000000004d000000000000004e000000000000004f00000000000000500000000000
*000051000000000000005209000000000000005000000000000000510000000000000052000000
*000000004d000000000000004e000000000000004f000000000000004a000000000000004b0000
*00000000004c0000000000000000000000000000000f000108000000700000006f000000720000
*007400000061000000620000006c00000065010c00000065000000780000007000000065000000
*72000000690000006d000000650000006e00000074000000610000006c01150000006c00000069
*000000620000007200000061000000720000006900000065000000730000004000000068000000
*61000000730000006b000000650000006c0000006c0000002e0000006f00000072000000670029
*00000000000000a700000000000000a800000000000000a900000000000000a400000000000000
*aa00000000000000ab00000000000000ac00000000000000ad00000000000000ae000000000000
*00af00000000000000b000000000000000b100000000000000b200000000000000b30000000000
*0000b400000000000000b500000000000000b600000000000000b700000000000000b800000000
*000000b900000000000000ba00000000000000bb00000000000000bc00000000000000bd000000
*00000000be00000000000000bf00000000000000c000000000000000c100000000000000470000
*0000000000480000000000000049000000000000004a000000000000004b000000000000004c00
*0000000000004d000000000000004e000000000000004f00000000000000500000000000000051
*000000000000005200000000000000530100000000000000530000000000000000000000000000
*001000011e000000700000006f000000720000007400000061000000620000006c000000650000
*002000000028000000690000006e0000007300000074000000610000006e000000630000006500
*00007300000020000000750000007300000065000000200000004d000000500000005400000043
*0000007300000029010c0000006500000078000000700000006500000072000000690000006d00
*0000650000006e00000074000000610000006c01150000006c0000006900000062000000720000
*006100000072000000690000006500000073000000400000006800000061000000730000006b00
*0000650000006c0000006c0000002e0000006f00000072000000670200000000000000540b021f
*00000061000000200000002a000000200000002800000062000000200000002b00000020000000
*6300000029000000200000003d000000200000002800000061000000200000002a000000200000
*006200000029000000200000002b000000200000002800000061000000200000002a0000002000
*0000630000002900000000000000550b021f0000002800000061000000200000002b0000002000
*00006200000029000000200000002a0000002000000063000000200000003d0000002000000028
*00000061000000200000002a000000200000006300000029000000200000002b00000020000000
*2800000062000000200000002a0000002000000063000000292900000000000000a70000000000
*0000a800000000000000a900000000000000a400000000000000aa00000000000000ab00000000
*000000ac00000000000000ad00000000000000ae00000000000000af00000000000000b0000000
*00000000b100000000000000b200000000000000b300000000000000b400000000000000b50000
*0000000000b600000000000000b700000000000000b800000000000000b900000000000000ba00
*000000000000bb00000000000000bc00000000000000bd00000000000000be00000000000000bf
*00000000000000c000000000000000c10000000000000047000000000000004800000000000000
*4a000000000000004b000000000000004c000000000000004d000000000000004e000000000000
*004f00000000000000500000000000000051000000000000005200000000000000540000000000
*000055020000000000000054000000000000005500000000000000000000000000000011000114
*0000006e0000006f0000006e0000002d000000700000006f000000720000007400000061000000
*620000006c0000006500000020000000280000004d000000500000005400000043000000730000
*0029010c0000006500000078000000700000006500000072000000690000006d00000065000000
*6e00000074000000610000006c01150000006c0000006900000062000000720000006100000072
*000000690000006500000073000000400000006800000061000000730000006b00000065000000
*6c0000006c0000002e0000006f0000007200000067030000000000000056030102020000004100
*000020010402000000000000000057000000000000000000000000000000110000000000000000
*560000000000000000000000000000001101020b00000020000000740000007500000072000000
*6e0000007300000020000000610000006e00000079000000200104010000000000000000cc0000
*000000000020000000000000002901021100000020000000690000006e00000073000000740000
*00610000006e000000630000006500000020000000690000006e000000740000006f0000002000
*000061000000200104010000000000000000a40000000000000020000000000000002101020200
*00002e0000000a0102160000002000000020000000200000004900000074000000200000006100
*00006c000000730000006f0000002000000070000000720000006f000000760000006900000064
*000000650000007300000020000000610000002001040100000000000000005000000000000000
*00000000000000000e01021100000020000000690000006e000000730000007400000061000000
*6e000000630000006500000020000000660000006f0000007200000020000000610000006e0000
*00200104010000000000000000cd0000000000000020000000000000002901021a000000200000
*0066000000750000006e00000063000000740000006f0000007200000020000000770000007200
*000061000000700000007000000065000000640000002000000061000000720000006f00000075
*0000006e000000640000002000000061000000200104010000000000000000a400000000000000
*2000000000000000210102010000000a010218000000200000002000000020000000610000006e
*000000640000002000000061000000730000007300000065000000720000007400000073000000
*200000007400000068000000610000007400000020000000610000006e00000079000000200104
*010000000000000000cc0000000000000020000000000000002901020e00000020000000610000
*0070000000700000006c00000069000000650000006400000020000000740000006f0000002000
*000061000000200104010000000000000000a40000000000000020000000000000002101020900
*000020000000660000006f000000720000006d0000007300000020000000610000002001040100
*000000000000005400000000000000000000000000000010010202000000200000000a021b0000
*00200000002000000020000000750000006e000000640000006500000072000000200000007400
*000068000000650000007300000065000000200000006f00000070000000650000007200000061
*00000074000000690000006f0000006e000000730000002e0000000a0000000000000059030102
*02000000410000002001040200000000000000005a000000000000000000000000000000110000
*000000000000590000000000000000000000000000001101021800000020000000750000007300
*0000650000007300000020000000610000006e00000020000000670000006c0000007500000065
*0000007300000020000000740000006f0000006700000065000000740000006800000065000000
*72000000200104010000000000000000cd00000000000000200000000000000029010213000000
*20000000610000006300000074000000690000006f0000006e0000007300000020000000770000
*0069000000740000006800000020000000280000002a0000003e000000290000000a0102140000
*00200000002000000020000000690000006e000000200000007400000068000000650000002000
*00006d000000610000006e0000006e0000006500000072000000200000006f0000006600000020
*01020900000074000000720000006100000076000000650000007200000073000000650000005f
*0102060000002000000066000000720000006f0000006d0000002001050d000000440000006100
*000074000000610000002e000000460000006f0000006c0000006400000061000000620000006c
*0000006501021a0000002e00000020000000410000006e00000079000000200000007600000061
*0000006c0000007500000065000000730000002000000072000000650000007400000075000000
*720000006e0000006500000064000000200000006200000079000000200000000a022200000020
*000000200000002000000072000000650000006400000075000000630000006500000064000000
*20000000610000006300000074000000690000006f0000006e0000007300000020000000610000
*007200000065000000200000006400000069000000730000006300000061000000720000006400
*000065000000640000002e0000000a000000000000005c03010232000000450000006600000066
*000000690000006300000069000000650000006e000000740000006c0000007900000020000000
*61000000760000006f0000006900000064000000200000006e0000006500000065000000640000
*006c0000006500000073000000730000006c000000790000002000000072000000650000006200
*0000690000006e00000064000000690000006e0000006700000020000000770000006800000065
*0000006e000000200000007500000073000000690000006e000000670000002001040100000000
*000000000200000000000000000000000000000001010226000000200000006f0000006e000000
*20000000610000006e00000020000000610000006300000074000000690000006f0000006e0000
*00200000007400000068000000610000007400000020000000610000006c000000720000006500
*00006100000064000000790000002000000072000000650000007400000075000000720000006e
*000000730000002000000028000000290000000a023b0000002000000020000000200000004100
*000020000000720000006500000077000000720000006900000074000000650000002000000072
*000000750000006c00000065000000200000006100000075000000740000006f0000006d000000
*61000000740000006900000063000000610000006c0000006c0000007900000020000000610000
*0070000000700000006c0000006900000065000000730000002000000074000000680000006900
*000073000000200000007700000068000000650000006e00000020000000700000006f00000073
*0000007300000069000000620000006c000000650000000a3600000000000000a7000000000000
*00a800000000000000a900000000000000a400000000000000aa00000000000000ab0000000000
*0000ac00000000000000ad00000000000000ae00000000000000af00000000000000b000000000
*000000b100000000000000b200000000000000b300000000000000b400000000000000b5000000
*00000000b600000000000000b700000000000000b800000000000000b900000000000000ba0000
*0000000000bb00000000000000bc00000000000000bd00000000000000be00000000000000bf00
*000000000000c000000000000000c1000000000000000000000000000000010000000000000002
*000000000000000300000000000000040000000000000005000000000000004700000000000000
*48000000000000004a000000000000004b000000000000004c000000000000004d000000000000
*004e000000000000004f0000000000000050000000000000005100000000000000520000000000
*000054000000000000005500000000000000560000000000000057000000000000005800000000
*00000059000000000000005a000000000000005b000000000000005c0700000000000000590000
*00000000005a000000000000005b00000000000000560000000000000057000000000000005800
*0000000000005c000000000000000000000000000000120001140000006e0000006f0000006e00
*00002d000000700000006f000000720000007400000061000000620000006c0000006500000020
*000000280000004d0000005000000054000000430000007300000029010c000000650000007800
*0000700000006500000072000000690000006d000000650000006e00000074000000610000006c
*01150000006c000000690000006200000072000000610000007200000069000000650000007300
*0000400000006800000061000000730000006b000000650000006c0000006c0000002e0000006f
*000000720000006703000000000000005d03010202000000410000002001040200000000000000
*005e0000000000000000000000000000001200000000000000005d000000000000000000000000
*0000001201020b000000200000007400000075000000720000006e000000730000002000000061
*0000006e00000079000000200104010000000000000000ce000000000000002000000000000000
*2a01021100000020000000690000006e0000007300000074000000610000006e00000063000000
*6500000020000000690000006e000000740000006f000000200000006100000020010401000000
*0000000000a4000000000000002000000000000000210102020000002e0000000a010216000000
*200000002000000020000000490000007400000020000000610000006c000000730000006f0000
*002000000070000000720000006f00000076000000690000006400000065000000730000002000
*000061000000200104010000000000000000500000000000000000000000000000000e01021000
*000020000000690000006e0000007300000074000000610000006e000000630000006500000020
*000000660000006f000000720000002000000061000000200104010000000000000000cf000000
*0000000020000000000000002a0102120000002000000077000000720000006100000070000000
*7000000065000000640000002000000061000000720000006f000000750000006e000000640000
*002000000061000000200104010000000000000000a40000000000000020000000000000002101
*02010000000a010218000000200000002000000020000000610000006e00000064000000200000
*006100000073000000730000006500000072000000740000007300000020000000740000006800
*0000610000007400000020000000610000006e00000079000000200104010000000000000000ce
*0000000000000020000000000000002a01020e000000200000006100000070000000700000006c
*00000069000000650000006400000020000000740000006f000000200000006100000020010401
*0000000000000000a4000000000000002000000000000000210102090000002000000066000000
*6f000000720000006d000000730000002000000061000000200104010000000000000000540000
*0000000000000000000000000010010202000000200000000a021b000000200000002000000020
*000000750000006e00000064000000650000007200000020000000740000006800000065000000
*7300000065000000200000006f0000007000000065000000720000006100000074000000690000
*006f0000006e000000730000002e0000000a000000000000006003010203000000410000006e00
*000020010402000000000000000061000000000000000000000000000000120000000000000000
*600000000000000000000000000000001201021500000020000000750000007300000065000000
*7300000020000000670000006c00000075000000650000007300000020000000740000006f0000
*00670000006500000074000000680000006500000072000000200104010000000000000000cf00
*00000000000020000000000000002a010213000000200000006100000063000000740000006900
*00006f0000006e0000007300000020000000770000006900000074000000680000002000000028
*0000003e0000003e000000290000000a010214000000200000002000000020000000690000006e
*00000020000000740000006800000065000000200000006d000000610000006e0000006e000000
*6500000072000000200000006f00000066000000200104010000000000000000d0000000000000
*0020000000000000002a0102060000002000000066000000720000006f0000006d000000200105
*0d000000440000006100000074000000610000002e000000460000006f0000006c000000640000
*0061000000620000006c0000006501021a0000002e00000020000000410000006e000000790000
*002000000076000000610000006c00000075000000650000007300000020000000720000006500
*00007400000075000000720000006e000000650000006400000020000000620000007900000020
*0000000a0222000000200000002000000020000000720000006500000064000000750000006300
*0000650000006400000020000000610000006300000074000000690000006f0000006e00000073
*000000200000006100000072000000650000002000000064000000690000007300000063000000
*61000000720000006400000065000000640000002e0000000a0000000000000063030102320000
*00450000006600000066000000690000006300000069000000650000006e000000740000006c00
*0000790000002000000061000000760000006f0000006900000064000000200000006e00000065
*00000065000000640000006c0000006500000073000000730000006c0000007900000020000000
*720000006500000062000000690000006e00000064000000690000006e00000067000000200000
*007700000068000000650000006e000000200000007500000073000000690000006e0000006700
*000020010401000000000000000002000000000000000000000000000000010102260000002000
*00006f0000006e00000020000000610000006e0000002000000061000000630000007400000069
*0000006f0000006e00000020000000740000006800000061000000740000002000000061000000
*6c0000007200000065000000610000006400000079000000200000007200000065000000740000
*0075000000720000006e000000730000002000000028000000290000000a023b00000020000000
*200000002000000041000000200000007200000065000000770000007200000069000000740000
*00650000002000000072000000750000006c000000650000002000000061000000750000007400
*00006f0000006d00000061000000740000006900000063000000610000006c0000006c00000079
*000000200000006100000070000000700000006c00000069000000650000007300000020000000
*74000000680000006900000073000000200000007700000068000000650000006e000000200000
*00700000006f000000730000007300000069000000620000006c000000650000000a3600000000
*000000a700000000000000a800000000000000a900000000000000a400000000000000aa000000
*00000000ab00000000000000ac00000000000000ad00000000000000ae00000000000000af0000
*0000000000b000000000000000b100000000000000b200000000000000b300000000000000b400
*000000000000b500000000000000b600000000000000b700000000000000b800000000000000b9
*00000000000000ba00000000000000bb00000000000000bc00000000000000bd00000000000000
*be00000000000000bf00000000000000c000000000000000c10000000000000000000000000000
*000100000000000000020000000000000003000000000000000400000000000000050000000000
*0000470000000000000048000000000000004a000000000000004b000000000000004c00000000
*0000004d000000000000004e000000000000004f00000000000000500000000000000051000000
*000000005200000000000000540000000000000055000000000000005d000000000000005e0000
*00000000005f000000000000006000000000000000610000000000000062000000000000006307
*000000000000006000000000000000610000000000000062000000000000006300000000000000
*5d000000000000005e000000000000005f00000000000000000000000000000013000123000000
*6e0000006f0000006e0000002d000000700000006f000000720000007400000061000000620000
*006c00000065000000200000002800000074000000790000007000000065000000200000006600
*0000610000006d000000690000006c0000006900000065000000730000002c000000200000004d
*0000005000000054000000430000007300000029010c0000006500000078000000700000006500
*000072000000690000006d000000650000006e00000074000000610000006c01150000006c0000
*006900000062000000720000006100000072000000690000006500000073000000400000006800
*000061000000730000006b000000650000006c0000006c0000002e0000006f0000007200000067
*1400000000000000640301020c0000004500000066000000660000006900000063000000690000
*00650000006e000000740000006c00000079000000200104010000000000000000250000000000
*000000000000000000000601020300000020000000610000002001040100000000000000002300
*00000000000000000000000000000601020b000000200000007500000073000000690000006e00
*000067000000200000007400000068000000650000002001040200000000000000005a00000000
*000000000000000000000011000000000000000059000000000000000000000000000000110102
*32000000200000006d0000006f0000006e0000006f00000069000000640000002e000000200000
*0041000000200000007300000070000000650000006300000069000000610000006c0000006900
*00007a00000065000000640000002000000076000000650000007200000073000000690000006f
*0000006e000000200000006f000000660000002000000069000000740000007300000020000000
*6e000000610000006d0000006500000073000000610000006b0000006500000020000000690000
*006e0000002001050d000000440000006100000074000000610000002e000000460000006f0000
*006c0000006400000061000000620000006c0000006502010000000a0000000000000065030102
*08000000660000006c000000690000007000000070000000650000006400000020010401000000
*000000000064000000000000000000000000000000130102070000002000000061000000730000
*0020000000690000006e0000002001050d000000440000006100000074000000610000002e0000
*00460000006f0000006c0000006400000061000000620000006c0000006502010000000a000000
*00000000660301020c000000450000006600000066000000690000006300000069000000650000
*006e000000740000006c0000007900000020010401000000000000000025000000000000000000
*000000000000060102030000002000000061000000200104010000000000000000230000000000
*000000000000000000000601020b000000200000007500000073000000690000006e0000006700
*000020000000740000006800000065000000200104020000000000000000610000000000000000
*000000000000001200000000000000006000000000000000000000000000000012010234000000
*200000006d0000006f0000006e0000006f00000069000000640000002e00000020000000410000
*00200000007300000070000000650000006300000069000000610000006c000000690000007a00
*000065000000640000002000000076000000650000007200000073000000690000006f0000006e
*000000200000006f0000006600000020000000690000007400000073000000200000006e000000
*610000006d0000006500000073000000610000006b000000650000002000000066000000720000
*006f0000006d0000002001050d000000440000006100000074000000610000002e000000460000
*006f0000006c0000006400000061000000620000006c0000006501020500000020000000610000
*006e000000640000002001050d000000430000006f0000006e00000074000000720000006f0000
*006c0000002e0000004d0000006f0000006e000000610000006402010000000a00000000000000
*6703010208000000660000006c0000006900000070000000700000006500000064000000200104
*010000000000000000660000000000000000000000000000001301020700000020000000610000
*007300000020000000690000006e0000002001050d000000440000006100000074000000610000
*002e000000460000006f0000006c0000006400000061000000620000006c000000650102050000
*0020000000610000006e000000640000002001050d000000430000006f0000006e000000740000
*00720000006f0000006c0000002e0000004d0000006f0000006e00000061000000640201000000
*0a00000000000000680301020c0000004500000066000000660000006900000063000000690000
*00650000006e000000740000006c00000079000000200104010000000000000000250000000000
*000000000000000000000601020300000020000000610000002001040100000000000000002300
*00000000000000000000000000000601020b000000200000007500000073000000690000006e00
*000067000000200000007400000068000000650000002001040200000000000000003c00000000
*00000000000000000000000900000000000000003b000000000000000000000000000000090102
*34000000200000006d0000006f0000006e0000006f00000069000000640000002e000000200000
*0041000000200000007300000070000000650000006300000069000000610000006c0000006900
*00007a00000065000000640000002000000076000000650000007200000073000000690000006f
*0000006e000000200000006f000000660000002000000069000000740000007300000020000000
*6e000000610000006d0000006500000073000000610000006b0000006500000020000000660000
*00720000006f0000006d0000002001050d000000440000006100000074000000610000002e0000
*00460000006f0000006c0000006400000061000000620000006c0000006502010000000a000000
*00000000690301020c000000450000006600000066000000690000006300000069000000650000
*006e000000740000006c0000007900000020010401000000000000000028000000000000000000
*000000000000060102030000002000000061000000200104010000000000000000230000000000
*000000000000000000000601020b000000200000007500000073000000690000006e0000006700
*0000200000007400000068000000650000002001040200000000000000003c0000000000000000
*000000000000000900000000000000003b00000000000000000000000000000009010234000000
*200000006d0000006f0000006e0000006f00000069000000640000002e00000020000000410000
*00200000007300000070000000650000006300000069000000610000006c000000690000007a00
*000065000000640000002000000076000000650000007200000073000000690000006f0000006e
*000000200000006f0000006600000020000000690000007400000073000000200000006e000000
*610000006d0000006500000073000000610000006b000000650000002000000066000000720000
*006f0000006d0000002001050d000000440000006100000074000000610000002e000000460000
*006f0000006c0000006400000061000000620000006c0000006502010000000a00000000000000
*6a0301021c00000041000000200000006600000075000000720000007400000068000000650000
*0072000000200000007300000070000000650000006300000069000000610000006c0000006900
*00007a0000006100000074000000690000006f0000006e000000200000006f0000006600000020
*010507000000660000006f0000006c000000640000004d000000610000007002010000000a0000
*00000000006b0301020c0000004500000066000000660000006900000063000000690000006500
*00006e000000740000006c00000079000000200104010000000000000000280000000000000000
*000000000000000601020300000020000000610000002001040100000000000000002300000000
*00000000000000000000000601021e000000200000007400000068000000610000007400000020
*000000630000006f0000006e0000007400000061000000690000006e0000007300000020000000
*76000000610000006c000000750000006500000073000000200000006f00000066000000200000
*0074000000790000007000000065000000200104010000000000000000d1000000000000002500
*0000000000002b02010000000a000000000000006c0301020c0000004500000066000000660000
*00690000006300000069000000650000006e000000740000006c00000079000000200104010000
*000000000000280000000000000000000000000000000601020300000020000000610000002001
*04010000000000000000230000000000000000000000000000000601021e000000200000007400
*000068000000610000007400000020000000630000006f0000006e000000740000006100000069
*0000006e000000730000002000000076000000610000006c000000750000006500000073000000
*200000006f00000066000000200000007400000079000000700000006500000020010401000000
*0000000000d10000000000000025000000000000002b02010000000a000000000000006d030102
*0c000000450000006600000066000000690000006300000069000000650000006e000000740000
*006c00000079000000200104010000000000000000250000000000000000000000000000000601
*020500000020000000610000006e00000079000000200104010000000000000000230000000000
*0000000000000000000006024300000020000000630000006800000065000000630000006b0000
*00690000006e0000006700000020000000740000006f0000002000000073000000650000006500
*000020000000690000006600000020000000610000006e00000079000000200000006f00000066
*000000200000006900000074000000730000002000000076000000610000006c00000075000000
*6500000073000000200000006d0000006100000074000000630000006800000020000000740000
*00680000006500000020000000730000007500000070000000700000006c000000690000006500
*000064000000200000007000000072000000650000006400000069000000630000006100000074
*000000650000000a000000000000006e0301020c00000045000000660000006600000069000000
*6300000069000000650000006e000000740000006c000000790000002001040100000000000000
*00250000000000000000000000000000000601020500000020000000610000006e000000790000
*002001040100000000000000002300000000000000000000000000000006024300000020000000
*630000006800000065000000630000006b000000690000006e0000006700000020000000740000
*006f00000020000000730000006500000065000000200000006900000066000000200000006100
*00006c0000006c000000200000006f000000660000002000000069000000740000007300000020
*00000076000000610000006c000000750000006500000073000000200000006d00000061000000
*740000006300000068000000200000007400000068000000650000002000000073000000750000
*0070000000700000006c0000006900000065000000640000002000000070000000720000006500
*00006400000069000000630000006100000074000000650000000a000000000000006f0301020c
*000000450000006600000066000000690000006300000069000000650000006e00000074000000
*6c0000007900000020010401000000000000000025000000000000000000000000000000060102
*0500000020000000610000006e0000007900000020010401000000000000000023000000000000
*0000000000000000000601020b000000200000007500000073000000690000006e000000670000
*0020000000740000006800000065000000200104020000000000000000b7000000000000002000
*000000000000210000000000000000b80000000000000020000000000000002101020100000020
*0104010000000000000000a40000000000000020000000000000002102010000000a0000000000
*0000700301020c000000450000006600000066000000690000006300000069000000650000006e
*000000740000006c00000079000000200104010000000000000000250000000000000000000000
*000000000601020500000020000000610000006e00000079000000200104010000000000000000
*230000000000000000000000000000000601020b00000020000000750000007300000069000000
*6e0000006700000020000000740000006800000065000000200104020000000000000000ba0000
*00000000002000000000000000210000000000000000bb00000000000000200000000000000021
*010201000000200104010000000000000000a40000000000000020000000000000002102010000
*000a000000000000007103010210000000430000006800000065000000630000006b0000002000
*0000740000006f0000002000000073000000650000006500000020000000690000006600000020
*01040100000000000000006d0000000000000000000000000000001301020f000000200000006d
*000000650000006d000000620000006500000072000000200000006f0000006600000020000000
*740000006800000065000000200104010000000000000000230000000000000000000000000000
*0006021c000000200000006d000000610000007400000063000000680000006500000073000000
*2000000074000000680000006500000020000000730000007500000070000000700000006c0000
*006900000065000000640000002000000076000000610000006c00000075000000650000000a00
*0000000000007203010242000000430000006800000065000000630000006b0000002000000074
*0000006f000000200000006d000000610000006b00000065000000200000007300000075000000
*720000006500000020000000740000006800000061000000740000002000000074000000680000
*006500000020000000730000007500000070000000700000006c00000069000000650000006400
*00002000000076000000610000006c000000750000006500000020000000690000007300000020
*0000006e0000006f000000740000002000000061000000200000006d000000650000006d000000
*620000006500000072000000200000006f00000066000000200000007400000068000000650000
*00200104010000000000000000230000000000000000000000000000000602010000000a000000
*00000000730301020c000000450000006600000066000000690000006300000069000000650000
*006e000000740000006c0000007900000020010401000000000000000025000000000000000000
*0000000000000601021f0000002000000061000000200000007300000075000000620000007300
*00006500000074000000200000006f000000660000002000000074000000680000006500000020
*000000650000006c000000650000006d000000650000006e000000740000007300000020000000
*690000006e00000020000000610000002001040100000000000000002300000000000000000000
*00000000000602010000000a000000000000007403010214000000410000002000000073000000
*70000000650000006300000069000000610000006c000000690000007a00000061000000740000
*00690000006f0000006e000000200000006f000000660000002001040100000000000000007300
*00000000000000000000000000001301020b000000200000007500000073000000690000006e00
*00006700000020000000740000006800000065000000200104020000000000000000bd00000000
*0000002000000000000000210000000000000000be000000000000002000000000000000210102
*01000000200104010000000000000000a40000000000000020000000000000002101020f000000
*2c00000020000000610000006e000000610000006c0000006f000000670000006f000000750000
*007300000020000000740000006f0000002001020e000000440000006100000074000000610000
*002e0000004c0000006900000073000000740000002e00000066000000690000006e0000006402
*010000000a000000000000007503010214000000410000002000000067000000650000006e0000
*006500000072000000610000006c000000690000007a0000006100000074000000690000006f00
*00006e000000200000006f00000066000000200102130000004400000061000000740000006100
*00002e0000004c0000006900000073000000740000002e0000007200000065000000700000006c
*000000690000006300000061000000740000006501021100000020000000740000006f00000020
*000000610000006e00000020000000610000007200000062000000690000007400000072000000
*610000007200000079000000200104010000000000000000a40000000000000020000000000000
*00210102100000002e000000200000004100000064000000610000007000000074000000650000
*00640000002000000066000000720000006f0000006d000000200000000a01020100000020010c
*4a000000680000007400000074000000700000003a0000002f0000002f00000061000000750000
*006700000075000000730000007400000073000000730000002e000000620000006c0000006f00
*00006700000073000000700000006f000000740000002e000000630000006f0000006d0000002f
*000000320000003000000030000000380000002f00000030000000370000002f0000006c000000
*6f00000073000000740000002d000000610000006e000000640000002d000000660000006f0000
*00750000006e000000640000002d00000069000000660000002d000000690000002d0000007700
*0000720000006900000074000000650000002d0000003100000030000000380000002d00000069
*0000006e0000002e00000068000000740000006d0000006c02010000000a000000000000007603
*010214000000410000002000000067000000650000006e0000006500000072000000610000006c
*000000690000007a0000006100000074000000690000006f0000006e000000200000006f000000
*660000002001020f000000440000006100000074000000610000002e0000004c00000069000000
*73000000740000002e0000006300000079000000630000006c0000006501021100000020000000
*740000006f00000020000000610000006e00000020000000610000007200000062000000690000
*007400000072000000610000007200000079000000200104010000000000000000a40000000000
*000020000000000000002102390000002e000000200000004d0000006100000079000000200000
*006600000061000000690000006c00000020000000740000006f00000020000000740000006500
*0000720000006d000000690000006e00000061000000740000006500000020000000660000006f
*0000007200000020000000730000006f0000006d00000065000000200000007600000061000000
*6c00000075000000650000007300000020000000690000006e00000020000000730000006f0000
*006d00000065000000200000006d0000006f0000006e0000006f00000069000000640000007300
*00002e0000000a000000000000007703010214000000410000002000000067000000650000006e
*0000006500000072000000610000006c000000690000007a000000610000007400000069000000
*6f0000006e000000200000006f0000006600000020010210000000440000006100000074000000
*610000002e0000004c0000006900000073000000740000002e0000007200000065000000700000
*0065000000610000007401021100000020000000740000006f00000020000000610000006e0000
*002000000061000000720000006200000069000000740000007200000061000000720000007900
*0000200104010000000000000000a40000000000000020000000000000002102390000002e0000
*00200000004d0000006100000079000000200000006600000061000000690000006c0000002000
*0000740000006f000000200000007400000065000000720000006d000000690000006e00000061
*000000740000006500000020000000660000006f0000007200000020000000730000006f000000
*6d000000650000002000000076000000610000006c000000750000006500000073000000200000
*00690000006e00000020000000730000006f0000006d00000065000000200000006d0000006f00
*00006e0000006f0000006900000064000000730000002e0000000a4500000000000000a7000000
*00000000a800000000000000a900000000000000a400000000000000aa00000000000000ab0000
*0000000000ac00000000000000ad00000000000000ae00000000000000af00000000000000b000
*000000000000b100000000000000b200000000000000b300000000000000b400000000000000b5
*00000000000000b600000000000000b700000000000000b800000000000000b900000000000000
*ba00000000000000bb00000000000000bc00000000000000bd00000000000000be000000000000
*00bf00000000000000c000000000000000c1000000000000000000000000000000010000000000
*000002000000000000000300000000000000040000000000000005000000000000001a00000000
*0000001b000000000000001c000000000000001d000000000000001e000000000000001f000000
*000000002000000000000000210000000000000022000000000000002300000000000000240000
*000000000025000000000000002600000000000000270000000000000028000000000000006400
*000000000000650000000000000066000000000000006700000000000000680000000000000069
*000000000000006a000000000000006b000000000000006c000000000000006d00000000000000
*6e000000000000006f000000000000007000000000000000710000000000000072000000000000
*007300000000000000740000000000000075000000000000007600000000000000771400000000
*00000066000000000000006700000000000000640000000000000065000000000000006b000000
*000000006c000000000000006d000000000000006e000000000000006800000000000000690000
*00000000006a000000000000007100000000000000730000000000000074000000000000006f00
*000000000000700000000000000072000000000000007700000000000000750000000000000076
*000000000000000000000000000000140001140000006e0000006f0000006e0000002d00000070
*0000006f000000720000007400000061000000620000006c000000650000002000000028000000
*4d0000005000000054000000430000007300000029010c00000065000000780000007000000065
*00000072000000690000006d000000650000006e00000074000000610000006c01150000006c00
*000069000000620000007200000061000000720000006900000065000000730000004000000068
*00000061000000730000006b000000650000006c0000006c0000002e0000006f00000072000000
*67002500000000000000a700000000000000a800000000000000a900000000000000a400000000
*000000aa00000000000000ab00000000000000ac00000000000000ad00000000000000ae000000
*00000000af00000000000000b000000000000000b100000000000000b200000000000000b30000
*0000000000b400000000000000b500000000000000b600000000000000b700000000000000b800
*000000000000b900000000000000ba00000000000000bb00000000000000bc00000000000000bd
*00000000000000be00000000000000bf00000000000000c000000000000000c100000000000000
*000000000000000001000000000000000200000000000000030000000000000004000000000000
*000500000000000000780000000000000079000000000000007a03000000000000007800000000
*00000079000000000000007a000000000000000000000000000000150001140000006e0000006f
*0000006e0000002d000000700000006f000000720000007400000061000000620000006c000000
*6500000020000000280000004d0000005000000054000000430000007300000029010c00000065
*00000078000000700000006500000072000000690000006d000000650000006e00000074000000
*610000006c01150000006c00000069000000620000007200000061000000720000006900000065
*00000073000000400000006800000061000000730000006b000000650000006c0000006c000000
*2e0000006f000000720000006701000000000000007b0301020200000041000000200104010000
*0000000000007b0000000000000000000000000000001501021800000020000000690000007300
*000020000000610000006e00000020000000690000006e0000007300000074000000610000006e
*0000006300000065000000200000006f0000006600000020000000620000006f00000074000000
*68000000200104010000000000000000500000000000000000000000000000000e010205000000
*20000000610000006e00000064000000200104010000000000000000a400000000000000200000
*000000000021010208000000200000007700000068000000650000007200000065000000200000
*000a01020300000020000000200000002001040100000000000000005200000000000000000000
*00000000000e010212000000200000006400000069000000730000007400000072000000690000
*006200000075000000740000006500000073000000200000006f00000076000000650000007200
*0000200104010000000000000000470000000000000000000000000000000c02020000002e0000
*000a2a00000000000000a700000000000000a800000000000000a900000000000000a400000000
*000000aa00000000000000ab00000000000000ac00000000000000ad00000000000000ae000000
*00000000af00000000000000b000000000000000b100000000000000b200000000000000b30000
*0000000000b400000000000000b500000000000000b600000000000000b700000000000000b800
*000000000000b900000000000000ba00000000000000bb00000000000000bc00000000000000bd
*00000000000000be00000000000000bf00000000000000c000000000000000c100000000000000
*470000000000000048000000000000004a000000000000004b000000000000004c000000000000
*004d000000000000004e000000000000004f000000000000005000000000000000510000000000
*00005200000000000000540000000000000055000000000000007b01000000000000007b000000
*000000000000000000000000160000000004000000000000007c03010204000000540000006800
*000065000000200104010000000000000000a40000000000000020000000000000002101020100
*0000200107010201000000280104010000000000000000d2000000000000002000000000000000
*2c0102010000002c0104010000000000000000d300000000000000200000000000000022020100
*000029010206000000200000006f00000076000000650000007200000020010701040100000000
*00000000a500000000000000200000000000000022020200000020000000610102070000002000
*00007700000068000000650000007200000065000000200104010000000000000000d300000000
*000000200000000000000022021400000020000000690000007300000020000000740000006800
*00006500000020000000740000006f0000007000000020000000650000006c000000650000006d
*000000650000006e000000740000000a000000000000007f030102040000005400000068000000
*65000000200104010000000000000000a400000000000000200000000000000021010201000000
*200107010201000000280104010000000000000000d40000000000000020000000000000002c01
*02010000002c0104010000000000000000d3000000000000002000000000000000220201000000
*29010206000000200000006f000000760000006500000072000000200107010401000000000000
*0000a5000000000000002000000000000000220202000000200000006101020700000020000000
*7700000068000000650000007200000065000000200104010000000000000000d3000000000000
*002000000000000000220217000000200000006900000073000000200000007400000068000000
*6500000020000000620000006f00000074000000740000006f0000006d00000020000000650000
*006c000000650000006d000000650000006e000000740000000a00000000000000820301020400
*0000540000006800000065000000200104010000000000000000a4000000000000002000000000
*0000002101020a00000020000000670000006900000076000000650000006e0000002000000062
*00000079000000200107010201000000280104010000000000000000d200000000000000200000
*00000000002c0102010000002c0104010000000000000000d50000000000000020000000000000
*002d02010000002902010000000a00000000000000850301020400000054000000680000006500
*0000200104010000000000000000a4000000000000002000000000000000210102010000002001
*07010201000000280104010000000000000000d40000000000000020000000000000002c010201
*0000002c0104010000000000000000d60000000000000020000000000000002d02010000002902
*010000000a1300000000000000a700000000000000a900000000000000a4000000000000000000
*00000000000001000000000000007c000000000000007d000000000000007e000000000000007f
*000000000000008000000000000000810000000000000082000000000000008300000000000000
*840000000000000085000000000000008600000000000000870000000000000088000000000000
*00890e000000000000008500000000000000860000000000000087000000000000008200000000
*000000830000000000000084000000000000007f00000000000000800000000000000081000000
*0000000088000000000000007c000000000000007d000000000000007e00000000000000890000
*00000000000000000000000000170000000001000000000000008a010301020400000054000000
*68000000650000002001040100000000000000007b000000000000000000000000000000150102
*01000000200107010201000000280104010000000000000000d200000000000000200000000000
*00002c0102010000002c0104010000000000000000d70000000000000020000000000000002d02
*0100000029010206000000200000006f0000007600000065000000720000002001070102010000
*006101020f00000020000000650000007800000074000000650000006e00000064000000650000
*0064000000200000007700000069000000740000006800000020040100000000000000008d0000
*00000000000000000000000000170102020000002e0000000a0102080000002000000020000000
*200000005700000068000000650000006e00000020010702010000006101024800000020000000
*6800000061000000730000002000000061000000200000004e000000750000006d000000200000
*00690000006e0000007300000074000000610000006e0000006300000065000000200000007700
*000069000000740000006800000020000000610000006e00000020000000610000006400000064
*0000006900000074000000690000006f0000006e00000020000000740000006800000061000000
*740000002000000072000000650000007300000070000000650000006300000074000000730000
*00200000006f000000720000006400000065000000720000002c00000020000000740000006800
*0000650000006e0000002000000074000000680000006900000073000000200000006900000073
*000000200000000a0102530000002000000020000000200000007400000072000000610000006e
*00000073000000660000006f000000720000006d00000065000000640000002000000069000000
*6e000000740000006f00000020000000610000002000000074000000720000006f000000700000
*006900000063000000610000006c0000002000000073000000650000006d000000690000007200
*0000690000006e000000670000002e000000200000004900000074000000200000006900000073
*00000020000000610000007300000073000000750000006d000000650000006400000020000000
*740000006800000061000000740000002000000030000000200000006900000073000000200000
*00740000006800000065000000200000006c000000650000006100000073000000740000002000
*0000650000006c000000650000006d000000650000006e000000740000000a0209000000200000
*0020000000200000006f0000006600000020000000610000002e0000000a03010c410000006800
*00007400000074000000700000003a0000002f0000002f00000068000000610000006c0000002e
*00000061000000720000006300000068000000690000007600000065000000730000002d000000
*6f000000750000007600000065000000720000007400000065000000730000002e000000660000
*00720000002f000000640000006f00000063000000730000002f00000030000000300000002f00
*000031000000310000002f00000033000000370000002f00000037000000390000002f00000050
*00000044000000460000002f00000054000000720000006f000000700000006900000063000000
*610000006c0000002e00000070000000640000006602010000000a3000000000000000a7000000
*00000000a800000000000000a900000000000000a400000000000000aa00000000000000ab0000
*0000000000ac00000000000000ad00000000000000ae00000000000000af00000000000000b000
*000000000000b100000000000000b200000000000000b300000000000000b400000000000000b5
*00000000000000b600000000000000b700000000000000b800000000000000b900000000000000
*ba00000000000000bb00000000000000bc00000000000000bd00000000000000be000000000000
*00bf00000000000000c000000000000000c1000000000000000000000000000000010000000000
*0000470000000000000048000000000000004a000000000000004b000000000000004c00000000
*0000004d000000000000004e000000000000004f00000000000000500000000000000051000000
*000000005200000000000000540000000000000055000000000000007b000000000000008a0000
*00000000008b000000000000008c000000000000008d04000000000000008d000000000000008a
*000000000000008b000000000000008c000000000000000000000000000000180000010c000000
*6500000078000000700000006500000072000000690000006d000000650000006e000000740000
*00610000006c0110000000650000006b0000006d00000065000000740000007400000040000000
*670000006d00000061000000690000006c0000002e000000630000006f0000006d020000000000
*00008e03010202000000410000002001040100000000000000007b000000000000000000000000
*0000001501020c0000002000000077000000680000006900000063000000680000002000000061
*000000640000006400000073000000200104010000000000000000d60000000000000020000000
*000000002d01020500000020000000610000006e00000064000000200104010000000000000000
*d50000000000000020000000000000002d021900000020000000740000006f0000002000000061
*000000200000007000000072000000650000002d00000065000000780000006900000073000000
*74000000690000006e0000006700000020000000740000007900000070000000650000002e0000
*000a000000000000009203010202000000410000002001040100000000000000007b0000000000
*000000000000000000001501020d000000200000007500000073000000690000006e0000006700
*00002000000061000000200000007400000079000000700000006501020100000027021d000000
*73000000200000006200000075000000690000006c000000740000002d000000690000006e0000
*0020000000420000006f000000750000006e000000640000006500000064000000200000006900
*00006e0000007300000074000000610000006e00000063000000650000002e0000000a31000000
*00000000a700000000000000a800000000000000a900000000000000a400000000000000aa0000
*0000000000ab00000000000000ac00000000000000ad00000000000000ae00000000000000af00
*000000000000b000000000000000b100000000000000b200000000000000b300000000000000b4
*00000000000000b500000000000000b600000000000000b700000000000000b800000000000000
*b900000000000000ba00000000000000bb00000000000000bc00000000000000bd000000000000
*00be00000000000000bf00000000000000c000000000000000c100000000000000470000000000
*000048000000000000004a000000000000004b000000000000004c000000000000004d00000000
*0000004e000000000000004f000000000000005000000000000000510000000000000052000000
*00000000540000000000000055000000000000007b000000000000008e000000000000008f0000
*000000000090000000000000009100000000000000920000000000000093000000000000009407
*000000000000009200000000000000930000000000000094000000000000008e00000000000000
*910000000000000090000000000000008f0000000000000000000000000000002e000108000000
*700000006f000000720000007400000061000000620000006c00000065010c0000006500000078
*000000700000006500000072000000690000006d000000650000006e0000007400000061000000
*6c01150000006c0000006900000062000000720000006100000072000000690000006500000073
*000000400000006800000061000000730000006b000000650000006c0000006c0000002e000000
*6f0000007200000067002b00000000000000a700000000000000a800000000000000a900000000
*000000a400000000000000aa00000000000000ab00000000000000ac00000000000000ad000000
*00000000ae00000000000000af00000000000000b000000000000000b100000000000000b20000
*0000000000b300000000000000b400000000000000b500000000000000b600000000000000b700
*000000000000b800000000000000b900000000000000ba00000000000000bb00000000000000bc
*00000000000000bd00000000000000be00000000000000bf00000000000000c000000000000000
*c1000000000000004700000000000000480000000000000049000000000000004a000000000000
*004b000000000000004c000000000000004d000000000000004e000000000000004f0000000000
*000050000000000000005100000000000000520000000000000053000000000000005400000000
*000000550000000000000000000000000000000019000108000000700000006f00000072000000
*7400000061000000620000006c00000065010c0000006500000078000000700000006500000072
*000000690000006d000000650000006e00000074000000610000006c011f000000450000006400
*000077000000610000007200000064000000200000004b0000006d000000650000007400000074
*000000200000003c000000650000006b0000006d00000065000000740000007400000040000000
*670000006d00000061000000690000006c0000002e000000630000006f0000006d0000003e0100
*000000000000950301021d0000004d000000690000006e000000690000006d000000610000006c
*00000020000000630000006f0000006d000000700000006c000000650000007400000065000000
*20000000640000006500000066000000690000006e0000006900000074000000690000006f0000
*006e0000003a000000200104010000000000000000960000000000000000000000000000001901
*0204000000200000006f0000007200000020010401000000000000000097000000000000000000
*0000000000001902010000000a2200000000000000a700000000000000a800000000000000a900
*000000000000a400000000000000aa00000000000000ab00000000000000ac00000000000000ad
*00000000000000ae00000000000000af00000000000000b000000000000000b100000000000000
*b200000000000000b300000000000000b400000000000000b500000000000000b6000000000000
*00b700000000000000b800000000000000b900000000000000ba00000000000000bb0000000000
*0000bc00000000000000bd00000000000000be00000000000000bf00000000000000c000000000
*000000c10000000000000047000000000000004800000000000000950000000000000096000000
*000000009700000000000000980400000000000000950000000000000096000000000000009800
*000000000000970000000000000000000000000000001a000108000000700000006f0000007200
*00007400000061000000620000006c00000065010c000000650000007800000070000000650000
*0072000000690000006d000000650000006e00000074000000610000006c01150000006c000000
*690000006200000072000000610000007200000069000000650000007300000040000000680000
*0061000000730000006b000000650000006c0000006c0000002e0000006f000000720000006700
*2300000000000000a700000000000000a800000000000000a900000000000000a4000000000000
*00aa00000000000000ab00000000000000ac00000000000000ad00000000000000ae0000000000
*0000af00000000000000b000000000000000b100000000000000b200000000000000b300000000
*000000b400000000000000b500000000000000b600000000000000b700000000000000b8000000
*00000000b900000000000000ba00000000000000bb00000000000000bc00000000000000bd0000
*0000000000be00000000000000bf00000000000000c000000000000000c1000000000000004700
*000000000000480000000000000095000000000000009600000000000000970000000000000098
*00000000000000990100000000000000990000000000000000000000000000001b000108000000
*700000006f000000720000007400000061000000620000006c00000065010c0000006500000078
*000000700000006500000072000000690000006d000000650000006e0000007400000061000000
*6c01150000006c0000006900000062000000720000006100000072000000690000006500000073
*000000400000006800000061000000730000006b000000650000006c0000006c0000002e000000
*6f0000007200000067002600000000000000a700000000000000a800000000000000a900000000
*000000a400000000000000aa00000000000000ab00000000000000ac00000000000000ad000000
*00000000ae00000000000000af00000000000000b000000000000000b100000000000000b20000
*0000000000b300000000000000b400000000000000b500000000000000b600000000000000b700
*000000000000b800000000000000b900000000000000ba00000000000000bb00000000000000bc
*00000000000000bd00000000000000be00000000000000bf00000000000000c000000000000000
*c10000000000000047000000000000004800000000000000490000000000000095000000000000
*009600000000000000970000000000000098000000000000009a000000000000009b0000000000
*00009c03000000000000009a000000000000009b000000000000009c0000000000000000000000
*000000001c00000000002f00000000000000a700000000000000a800000000000000a900000000
*000000a400000000000000aa00000000000000ab00000000000000ac00000000000000ad000000
*00000000ae00000000000000af00000000000000b000000000000000b100000000000000b20000
*0000000000b300000000000000b400000000000000b500000000000000b600000000000000b700
*000000000000b800000000000000b900000000000000ba00000000000000bb00000000000000bc
*00000000000000bd00000000000000be00000000000000bf00000000000000c000000000000000
*c100000000000000470000000000000048000000000000004a000000000000004b000000000000
*004c000000000000004d000000000000004e000000000000004f00000000000000500000000000
*000051000000000000005200000000000000540000000000000055000000000000007b00000000
*00000095000000000000009600000000000000970000000000000098000000000000009d010000
*00000000009d0000000000000000000000000000001d0001140000006e0000006f0000006e0000
*002d000000700000006f000000720000007400000061000000620000006c000000650000002000
*0000280000004d0000005000000054000000430000007300000029010c00000065000000780000
*00700000006500000072000000690000006d000000650000006e00000074000000610000006c01
*150000006c00000069000000620000007200000061000000720000006900000065000000730000
*00400000006800000061000000730000006b000000650000006c0000006c0000002e0000006f00
*00007200000067003200000000000000a700000000000000a800000000000000a9000000000000
*00a400000000000000aa00000000000000ab00000000000000ac00000000000000ad0000000000
*0000ae00000000000000af00000000000000b000000000000000b100000000000000b200000000
*000000b300000000000000b400000000000000b500000000000000b600000000000000b7000000
*00000000b800000000000000b900000000000000ba00000000000000bb00000000000000bc0000
*0000000000bd00000000000000be00000000000000bf00000000000000c000000000000000c100
*000000000000470000000000000048000000000000004a000000000000004b000000000000004c
*000000000000004d000000000000004e000000000000004f000000000000005000000000000000
*51000000000000005200000000000000540000000000000055000000000000007b000000000000
*0095000000000000009600000000000000970000000000000098000000000000009d0000000000
*00009e000000000000009f00000000000000a003000000000000009e000000000000009f000000
*00000000a00000000000000000000000000000001e0001140000006e0000006f0000006e000000
*2d000000700000006f000000720000007400000061000000620000006c00000065000000200000
*00280000004d0000005000000054000000430000007300000029010c0000006500000078000000
*700000006500000072000000690000006d000000650000006e00000074000000610000006c0115
*0000006c0000006900000062000000720000006100000072000000690000006500000073000000
*400000006800000061000000730000006b000000650000006c0000006c0000002e0000006f0000
*007200000067003200000000000000a700000000000000a800000000000000a900000000000000
*a400000000000000aa00000000000000ab00000000000000ac00000000000000ad000000000000
*00ae00000000000000af00000000000000b000000000000000b100000000000000b20000000000
*0000b300000000000000b400000000000000b500000000000000b600000000000000b700000000
*000000b800000000000000b900000000000000ba00000000000000bb00000000000000bc000000
*00000000bd00000000000000be00000000000000bf00000000000000c000000000000000c10000
*0000000000470000000000000048000000000000004a000000000000004b000000000000004c00
*0000000000004d000000000000004e000000000000004f00000000000000500000000000000051
*000000000000005200000000000000540000000000000055000000000000007b00000000000000
*95000000000000009600000000000000970000000000000098000000000000009d000000000000
*00a100000000000000a200000000000000a30300000000000000a100000000000000a200000000
*000000a300000000000000d80000000000000000000000000000000103000000000000002f0000
*000000000000000000000000000100000000000000003000000000000000000000000000000001
*000000000000000031000000000000000000000000000000010000000000000000320000000000
*000000000000000000000100000000000000003300000000000000000000000000000001000000
*000000000034000000000000000000000000000000020300000000000000350000000000000000
*000000000000000200000000000000003600000000000000000000000000000002000000000000
*000037000000000000000000000000000000030300000000000000380000000000000000000000
*000000000301000000000000003800000000000000000000000000000003000000000000000039
*0000000000000000000000000000000403000000000000003a0000000000000000000000000000
*000401000000000000003a0000000000000000000000000000000400000000000000003b000000
*0000000000000000000000000403000000000000003c0000000000000000000000000000000400
*000000000000003d0000000000000000000000000000000400000000000000003e000000000000
*0000000000000000000403000000000000003f0000000000000000000000000000000401000000
*000000003f00000000000000000000000000000004000000000000000040000000000000000000
*000000000000040300000000000000410000000000000000000000000000000400000000000000
*004200000000000000000000000000000004000000000000000043000000000000000000000000
*000000050300000000000000440000000000000000000000000000000500000000000000004500
*000000000000000000000000000006030000000000000046000000000000000000000000000000
*060100000000000000460000000000000000000000000000000600000000000000004700000000
*000000000000000000000006030000000000000048000000000000000000000000000000060100
*000000000000480000000000000000000000000000000600000000000000004900000000000000
*00000000000000000603000000000000004a000000000000000000000000000000060100000000
*0000004a0000000000000000000000000000000600000000000000004b00000000000000000000
*00000000000603000000000000004c000000000000000000000000000000060300000000000000
*4d0000000000000000000000000000000600000000000000004e00000000000000000000000000
*00000600000000000000004f000000000000000000000000000000060000000000000000500000
*000000000000000000000000000600000000000000005100000000000000000000000000000007
*030000000000000052000000000000000000000000000000070300000000000000530000000000
*000000000000000000000703000000000000005400000000000000000000000000000007000000
*000000000055000000000000000000000000000000070000000000000000560000000000000000
*000000000000000700000000000000005700000000000000000000000000000007000000000000
*000058000000000000000000000000000000070000000000000000590000000000000000000000
*000000000803000000000000005a0000000000000000000000000000000800000000000000005b
*0000000000000000000000000000000803000000000000005c0000000000000000000000000000
*000800000000000000005d0000000000000000000000000000000803000000000000005e000000
*0000000000000000000000000803000000000000005f0000000000000000000000000000000800
*000000000000006000000000000000000000000000000008000000000000000061000000000000
*000000000000000000080000000000000000620000000000000000000000000000000800000000
*000000006300000000000000000000000000000009030000000000000064000000000000000000
*000000000000090100000000000000640000000000000000000000000000000900000000000000
*00650000000000000000000000000000000a030000000000000066000000000000000000000000
*0000000a0100000000000000660000000000000000000000000000000a00000000000000006700
*00000000000000000000000000000b030000000000000068000000000000000000000000000000
*0b0100000000000000680000000000000000000000000000000b03000000000000006900000000
*00000000000000000000000b0100000000000000690000000000000000000000000000000b0000
*0000000000006a0000000000000000000000000000000b00000000000000006b00000000000000
*00000000000000000c00000000000000006c0000000000000000000000000000000c0000000000
*0000006d0000000000000000000000000000000d00000000000000006e00000000000000000000
*00000000000e03000000000000006f0000000000000000000000000000000e0100000000000000
*6f0000000000000000000000000000000e00000000000000007000000000000000000000000000
*00000e0300000000000000710000000000000000000000000000000e0100000000000000710000
*000000000000000000000000000e0000000000000000720000000000000000000000000000000e
*0300000000000000730000000000000000000000000000000e0000000000000000740000000000
*000000000000000000000e0000000000000000750000000000000000000000000000000f000000
*000000000076000000000000000000000000000000100300000000000000770000000000000000
*000000000000001003000000000000007800000000000000000000000000000011030000000000
*000079000000000000000000000000000000110100000000000000790000000000000000000000
*000000001100000000000000007a0000000000000000000000000000001103000000000000007b
*0000000000000000000000000000001101000000000000007b0000000000000000000000000000
*001100000000000000007c0000000000000000000000000000001100000000000000007d000000
*0000000000000000000000001203000000000000007e0000000000000000000000000000001201
*000000000000007e0000000000000000000000000000001200000000000000007f000000000000
*000000000000000000120300000000000000800000000000000000000000000000001201000000
*000000008000000000000000000000000000000012000000000000000081000000000000000000
*000000000000120000000000000000820000000000000000000000000000001300000000000000
*008300000000000000000000000000000013000000000000000084000000000000000000000000
*000000130000000000000000850000000000000000000000000000001300000000000000008600
*000000000000000000000000000013000000000000000087000000000000000000000000000000
*130000000000000000880000000000000000000000000000001300000000000000008900000000
*00000000000000000000001300000000000000008a000000000000000000000000000000130000
*0000000000008b0000000000000000000000000000001300000000000000008c00000000000000
*00000000000000001300000000000000008d000000000000000000000000000000130000000000
*0000008e0000000000000000000000000000001300000000000000008f00000000000000000000
*000000000013000000000000000090000000000000000000000000000000130000000000000000
*910000000000000000000000000000001300000000000000009200000000000000000000000000
*000013000000000000000093000000000000000000000000000000130000000000000000940000
*000000000000000000000000001300000000000000009500000000000000000000000000000013
*000000000000000096000000000000000000000000000000140300000000000000970000000000
*000000000000000000001401000000000000009700000000000000000000000000000014000000
*000000000098000000000000000000000000000000150300000000000000990000000000000000
*000000000000001603000000000000009a00000000000000000000000000000016010000000000
*00009a0000000000000000000000000000001600000000000000009b0000000000000000000000
*000000001603000000000000009c0000000000000000000000000000001601000000000000009c
*0000000000000000000000000000001600000000000000009d0000000000000000000000000000
*001603000000000000009e0000000000000000000000000000001601000000000000009e000000
*0000000000000000000000001600000000000000009f0000000000000000000000000000001603
*00000000000000a0000000000000000000000000000000160100000000000000a0000000000000
*000000000000000000160000000000000000a10000000000000000000000000000001600000000
*00000000a2000000000000000000000000000000160000000000000000a3000000000000000000
*000000000000170300000000000000a40000000000000000000000000000001701000000000000
*00a4000000000000000000000000000000170000000000000000a5000000000000000000000000
*000000170000000000000000a3000000000000000000000000000000180300000000000000a600
*0000000000000000000000000000180100000000000000a7000000000000000000000000000000
*180100000000000000a6000000000000000000000000000000180100000000000000a800000000
*0000000000000000000000180300000000000000a9000000000000000000000000000000180100
*000000000000a9000000000000000000000000000000180000000000000000aa00000000000000
*0000000000000000190300000000000000ab000000000000000000000000000000190000000000
*000000ac000000000000000000000000000000190000000000000000ad00000000000000000000
*0000000000190000000000000000ae0000000000000000000000000000001a0000000000000000
*940000000000000000000000000000001b0000000000000000af00000000000000000000000000
*00001b0000000000000000b00000000000000000000000000000001b0000000000000000b10000
*000000000000000000000000001c0300000000000000b20000000000000000000000000000001d
*0300000000000000b30000000000000000000000000000001d0100000000000000b30000000000
*000000000000000000001d0000000000000000b40000000000000000000000000000001e030000
*0000000000b50000000000000000000000000000001e0100000000000000b50000000000000000
*000000000000001e0000000000000000b600000000000000200000000000000021030000000000
*0000b7000000000000002000000000000000220300000000000000b80000000000000020000000
*00000000230300000000000000b9000000000000002000000000000000210000000000000000ba
*000000000000002000000000000000210000000000000000bb0000000000000020000000000000
*00210000000000000000bc000000000000002000000000000000210000000000000000bd000000
*000000002000000000000000210100000000000000be0000000000000020000000000000002103
*00000000000000be000000000000002000000000000000210000000000000000bf000000000000
*002000000000000000210100000000000000c00000000000000020000000000000002103000000
*00000000c0000000000000002000000000000000210000000000000000c1000000000000002000
*000000000000210100000000000000c20000000000000020000000000000002103000000000000
*00c2000000000000002000000000000000210000000000000000c3000000000000002000000000
*000000210100000000000000c4000000000000002000000000000000210300000000000000c400
*0000000000002000000000000000210000000000000000c5000000000000002000000000000000
*210100000000000000c6000000000000002000000000000000210300000000000000c600000000
*0000002000000000000000210000000000000000c7000000000000002000000000000000210100
*000000000000c8000000000000002000000000000000210300000000000000c800000000000000
*2000000000000000210000000000000000c9000000000000002000000000000000210100000000
*000000ca000000000000002000000000000000210300000000000000ca00000000000000200000
*0000000000210000000000000000cb000000000000002000000000000000210100000000000000
*cc000000000000002000000000000000210300000000000000cc00000000000000cd0000000000
*0000ce0300000000000000cf00000000000000cd00000000000000ce0000000000000000d00000
*00000000002000000000000000d10300000000000000d200000000000000250000000000000026
*0300000000000000d3000000000000002000000000000000270000000000000000d40000000000
*00002000000000000000280300000000000000d500000000000000200000000000000028000000
*0000000000d6000000000000002000000000000000280000000000000000d70000000000000020
*00000000000000280000000000000000d800000000000000200000000000000028000000000000
*0000d9000000000000002000000000000000290300000000000000da0000000000000020000000
*00000000290300000000000000db0000000000000020000000000000002a0300000000000000dc
*000000000000002000000000000000dd0300000000000000de0000000000000020000000000000
*002a0000000000000000850000000000000025000000000000002b0300000000000000df000000
*000000002000000000000000e00000000000000000e10000000000000020000000000000002201
*00000000000000e2000000000000002000000000000000e00000000000000000e3000000000000
*002000000000000000e40000000000000000e5000000000000002000000000000000e400000000
*00000000e6000000000000002000000000000000e700000000000000006e00000000000000e800
*0000000000000d6d6f6e6f6964732d302e312e360000000000000013446174612e4d6f6e6f6964
*2e526564756365720000000000000018446174612e4d6f6e6f69642e526564756365722e436861
*720000000000000018446174612e4d6f6e6f69642e526564756365722e57697468000000000000
*0011446174612e4d6f6e6f69642e556e696f6e0000000000000020446174612e4d6f6e6f69642e
*4c65786963616c2e555446382e4465636f6465720000000000000015446174612e4d6f6e6f6964
*2e47656e657261746f720000000000000022446174612e4d6f6e6f69642e4c65786963616c2e53
*6f75726365506f736974696f6e0000000000000019446174612e4d6f6e6f69642e4c6578696361
*6c2e576f7264730000000000000010446174612e4d6f6e6f69642e53656c660000000000000016
*446174612e4d6f6e6f69642e46726f6d537472696e670000000000000017446174612e4d6f6e6f
*69642e43617465676f726963616c0000000000000014446174612e4d6f6e6f69642e4164646974
*697665000000000000001a446174612e4d6f6e6f69642e41646469746976652e53756761720000
*00000000001a446174612e4d6f6e6f69642e4d756c7469706c6963617469766500000000000000
*20446174612e4d6f6e6f69642e4d756c7469706c696361746976652e5375676172000000000000
*0013446174612e52696e672e53656d692e4e6561720000000000000017446174612e4d6f6e6f69
*642e4170706c696361746976650000000000000011446174612e4d6f6e6f69642e4d6f6e616400
*00000000000017446174612e4d6f6e6f69642e436f6d62696e61746f7273000000000000002544
*6174612e4d6f6e6f69642e4c65786963616c2e52756e4c656e677468456e636f64696e67000000
*000000000e446174612e52696e672e53656d69000000000000000f446174612e4d6f6e6f69642e
*4f72640000000000000017446174612e52696e672e53656d692e54726f706963616c0000000000
*000012446174612e52696e672e53656d692e4f7264000000000000000a446174612e47726f7570
*0000000000000016446174612e47726f75702e436f6d62696e61746f7273000000000000001044
*6174612e47726f75702e53756761720000000000000009446174612e52696e6700000000000000
*11446174612e52696e672e426f6f6c65616e0000000000000011446174612e52696e672e46726f
*6d4e756d0000000000000015446174612e4d6f6e6f69642e496e7374616e636573000000000000
*000462617365000000000000000b446174612e4d6f6e6f6964000000000000000a446174612e4d
*61796265000000000000000d446174612e466f6c6461626c650000000000000009446174612e57
*6f726400000000000000086768632d7072696d00000000000000094748432e5479706573000000
*000000000b4748432e556e69636f64650000000000000010436f6e74726f6c2e43617465676f72
*790000000000000013436f6e74726f6c2e4170706c69636174697665000000000000000d436f6e
*74726f6c2e4d6f6e616400000000000000084748432e426f6f6c0000000000000008446174612e
*4f726400000000000000075072656c756465000000000000000f446174612e52696e672e537567
*61720000000000000007526564756365720000000000000004756e69740000000000000004736e
*6f630000000000000004636f6e73000000000000000d666f6c644d617052656475636500000000
*0000000a666f6c64526564756365000000000000000b4368617252656475636572000000000000
*000866726f6d43686172000000000000000b696e76616c696443686172000000000000000b5769
*746852656475636572000000000000000e776974686f7574526564756365720000000000000009
*556e696f6e57697468000000000000000c676574556e696f6e57697468000000000000000c4861
*73556e696f6e576974680000000000000009756e696f6e576974680000000000000009656d7074
*79576974680000000000000005556e696f6e0000000000000008676574556e696f6e0000000000
*000008486173556e696f6e0000000000000005656d7074790000000000000005756e696f6e0000
*00000000000455544638000000000000000772756e555446380000000000000005436861723800
*000000000000086765744368617238000000000000000656616c75657300000000000000096765
*7456616c75657300000000000000044b65797300000000000000076765744b6579730000000000
*00000947656e657261746f720000000000000004456c656d00000000000000096d617052656475
*636500000000000000056d6170546f00000000000000076d617046726f6d000000000000000672
*6564756365000000000000000e536f75726365506f736974696f6e000000000000000c536f7572
*6365436f6c756d6e000000000000000a536f757263654c696e6500000000000000076e65787454
*6162000000000000000b73746172744f6646696c65000000000000000c736f75726365436f6c75
*6d6e000000000000000a736f757263654c696e65000000000000001273686f77536f7572636550
*6f736974696f6e0000000000000007556e6c696e6564000000000000000a72756e556e6c696e65
*640000000000000008556e737061636564000000000000000b72756e556e737061636564000000
*00000000054c696e65730000000000000005576f726473000000000000000872756e576f726473
*000000000000000872756e4c696e65730000000000000009776f72647346726f6d000000000000
*00096c696e657346726f6d000000000000000453656c66000000000000000767657453656c6600
*0000000000000a46726f6d537472696e67000000000000000d67657446726f6d537472696e6700
*000000000000034d6f6e000000000000000547456e646f000000000000000867657447456e646f
*00000000000000066765744d6f6e0000000000000004706c757300000000000000047a65726f00
*000000000000012b00000000000000034578700000000000000006676574457870000000000000
*00034c6f6700000000000000066765744c6f67000000000000000e4d756c7469706c6963617469
*766500000000000000036f6e65000000000000000574696d657300000000000000012a00000000
*000000104c65667453656d694e65617252696e670000000000000011526967687453656d694e65
*617252696e670000000000000012577261707065644170706c6963617469766500000000000000
*15676574577261707065644170706c69636174697665000000000000000954726176657273616c
*000000000000000c67657454726176657273616c000000000000000d736e6f6354726176657273
*616c000000000000000c577261707065644d6f6e6164000000000000000f676574577261707065
*644d6f6e61640000000000000006416374696f6e0000000000000009676574416374696f6e0000
*00000000000a736e6f63416374696f6e000000000000000974726176657273655f000000000000
*0004666f725f00000000000000056d61704d5f0000000000000005666f724d5f00000000000000
*07666f6c644d61700000000000000004666f6c640000000000000009636f6e6361744d61700000
*000000000003616e6400000000000000026f720000000000000003616e79000000000000000361
*6c6c000000000000000373756d000000000000000770726f647563740000000000000004656c65
*6d00000000000000076e6f74456c656d000000000000000666696c746572000000000000000466
*696e6400000000000000097265706c696361746500000000000000056379636c65000000000000
*00067265706561740000000000000003524c450000000000000006676574524c45000000000000
*000853656d6952696e67000000000000000b4d696e5072696f72697479000000000000000e6765
*744d696e5072696f72697479000000000000000b4d61785072696f72697479000000000000000e
*6765744d61785072696f7269747900000000000000034d696e00000000000000066765744d696e
*00000000000000034d617800000000000000066765744d617800000000000000096d696e66696e
*6974790000000000000008696e66696e697479000000000000000854726f706963616c00000000
*0000000b67657454726f706963616c00000000000000085072696f726974790000000000000008
*4d6178426f756e6400000000000000084d696e426f756e6400000000000000054f726465720000
*0000000000086765744f72646572000000000000000547726f75700000000000000007676e6567
*61746500000000000000056d696e75730000000000000009677375627472616374000000000000
*00012d00000000000000066e656761746500000000000000087375627472616374000000000000
*000452696e670000000000000008426f6f6c52696e67000000000000000b676574426f6f6c5269
*6e67000000000000000746726f6d4e756d000000000000000a67657446726f6d4e756d00000000
*000000064d6f6e6f696400000000000000054d617962650000000000000008466f6c6461626c65
*00000000000000076d617070656e6400000000000000076d636f6e63617400000000000000066d
*656d70747900000000000000076765744475616c00000000000000044475616c00000000000000
*07617070456e646f0000000000000004456e646f0000000000000006676574416c6c0000000000
*000003416c6c0000000000000006676574416e790000000000000003416e790000000000000006
*67657453756d000000000000000353756d000000000000000a67657450726f6475637400000000
*0000000750726f6475637400000000000000086765744669727374000000000000000546697273
*7400000000000000076765744c61737400000000000000044c617374000000000000000e66696e
*676572747265652d302e30000000000000000f446174612e46696e676572547265650000000000
*00000a46696e6765725472656500000000000000076d6561737572650000000000000008474843
*2e576f72640000000000000005576f726438000000000000000443686172000000000000000769
*735370616365000000000000000843617465676f727900000000000000033e3e3e000000000000
*00033c3c3c00000000000000012e00000000000000026964000000000000000b416c7465726e61
*74697665000000000000000b4170706c6963617469766500000000000000094d6f6e6164506c75
*7300000000000000084748432e4261736500000000000000054d6f6e6164000000000000000442
*6f6f6c000000000000000b4748432e436c617373657300000000000000036d696e000000000000
*00074e6f7468696e6700000000000000036d617800000000000000084748432e456e756d000000
*00000000086d6178426f756e6400000000000000086d696e426f756e6400000000000000074748
*432e4e756d
newhex
*0d0cface0004000000000000f6ef000000000000e00db600000000000000000000000000000000
*000000000000000100000000000000010000000000000000000000000000000100000000000000
*020000000000000000000000000000000100000000000000030000000000000000000000000000
*000100000000000000040000000000000000000000000000000100000000000000050000000000
*000000000000000000000100000000000000060000000000000000000000000000000100000000
*000000070000000000000000000000000000000100000000000000080000000000000000000000
*0000000002000000000000000900000000000000000000000000000002000000000000000a0000
*0000000000000000000000000002000000000000000b0000000000000000000000000000000300
*0000000000000c00000000000000000000000000000003000000000000000d0000000000000000
*0000000000000003000000000000000e0000000000000000000000000000000400000000000000
*0f0000000000000000000000000000000400000000000000100000000000000000000000000000
*000400000000000000110000000000000000000000000000000400000000000000120000000000
*000000000000000000000400000000000000130000000000000000000000000000000400000000
*000000140000000000000000000000000000000400000000000000150000000000000000000000
*000000000400000000000000160000000000000000000000000000000400000000000000170000
*000000000000000000000000000400000000000000180000000000000000000000000000000400
*0000000000001900000000000000000000000000000004000000000000001a0000000000000000
*0000000000000005000000000000001b0000000000000000000000000000000500000000000000
*1c00000000000000000000000000000006000000000000001d0000000000000000000000000000
*0006000000000000001e00000000000000000000000000000006000000000000001f0000000000
*000000000000000000000600000000000000200000000000000000000000000000000600000000
*000000210000000000000000000000000000000600000000000000220000000000000000000000
*000000000600000000000000230000000000000000000000000000000600000000000000240000
*000000000000000000000000000600000000000000250000000000000000000000000000000600
*000000000000260000000000000000000000000000000600000000000000270000000000000000
*000000000000000600000000000000280000000000000000000000000000000600000000000000
*2900000000000000000000000000000006000000000000002a0000000000000000000000000000
*0006000000000000002b00000000000000000000000000000007000000000000002c0000000000
*0000000000000000000007000000000000002d0000000000000000000000000000000700000000
*0000002e00000000000000000000000000000007000000000000002f0000000000000000000000
*000000000700000000000000300000000000000000000000000000000700000000000000310000
*000000000000000000000000000700000000000000320000000000000000000000000000000700
*000000000000330000000000000000000000000000000800000000000000340000000000000000
*000000000000000800000000000000350000000000000000000000000000000800000000000000
*360000000000000000000000000000000800000000000000370000000000000000000000000000
*000800000000000000380000000000000000000000000000000800000000000000390000000000
*0000000000000000000008000000000000003a0000000000000000000000000000000800000000
*0000003b00000000000000000000000000000008000000000000003c0000000000000000000000
*0000000008000000000000003d00000000000000000000000000000009000000000000003e0000
*0000000000000000000000000009000000000000003f0000000000000000000000000000000900
*000000000000400000000000000000000000000000000a00000000000000410000000000000000
*000000000000000a00000000000000420000000000000000000000000000000a00000000000000
*430000000000000000000000000000000a00000000000000440000000000000000000000000000
*000b00000000000000450000000000000000000000000000000b00000000000000460000000000
*000000000000000000000b00000000000000470000000000000000000000000000000c00000000
*000000480000000000000000000000000000000c00000000000000490000000000000000000000
*000000000c000000000000004a0000000000000000000000000000000c000000000000004b0000
*000000000000000000000000000c000000000000004c0000000000000000000000000000000c00
*0000000000004d0000000000000000000000000000000d000000000000004e0000000000000000
*000000000000000d000000000000004f0000000000000000000000000000000e00000000000000
*500000000000000000000000000000000f00000000000000510000000000000000000000000000
*000f00000000000000520000000000000000000000000000000f00000000000000530000000000
*000000000000000000000f00000000000000540000000000000000000000000000000f00000000
*000000550000000000000000000000000000000f00000000000000560000000000000000000000
*000000000f00000000000000570000000000000000000000000000000f00000000000000580000
*000000000000000000000000000f00000000000000590000000000000000000000000000001000
*0000000000005a00000000000000000000000000000011000000000000005b0000000000000000
*0000000000000011000000000000005c0000000000000000000000000000001200000000000000
*5d00000000000000000000000000000013000000000000005e0000000000000000000000000000
*0013000000000000005f0000000000000000000000000000001300000000000000600000000000
*000000000000000000001300000000000000610000000000000000000000000000001300000000
*000000620000000000000000000000000000001300000000000000630000000000000000000000
*000000001300000000000000640000000000000000000000000000001300000000000000650000
*000000000000000000000000001300000000000000660000000000000000000000000000001300
*000000000000670000000000000000000000000000001300000000000000680000000000000000
*000000000000001300000000000000690000000000000000000000000000001300000000000000
*6a00000000000000000000000000000013000000000000006b0000000000000000000000000000
*0014000000000000006c00000000000000000000000000000014000000000000006d0000000000
*0000000000000000000014000000000000006e0000000000000000000000000000001400000000
*0000006f0000000000000000000000000000001500000000000000700000000000000000000000
*000000001500000000000000710000000000000000000000000000001500000000000000720000
*000000000000000000000000001500000000000000730000000000000000000000000000001500
*000000000000740000000000000000000000000000001500000000000000750000000000000000
*000000000000001500000000000000760000000000000000000000000000001600000000000000
*770000000000000000000000000000001600000000000000780000000000000000000000000000
*0016000000000000007900000000000000000000000000000016000000000000007a0000000000
*0000000000000000000017000000000000007b0000000000000000000000000000001800000000
*0000007c00000000000000000000000000000018000000000000007d0000000000000000000000
*0000000018000000000000007e00000000000000000000000000000019000000000000007f0000
*000000000000000000000000001a00000000000000800000000000000000000000000000001a00
*000000000000810000000000000000000000000000001a00000000000000820000000000000000
*000000000000001b00000000000000830000000000000000000000000000001b00000000000000
*840000000000000000000000000000001b00000000000000850000000000000000000000000000
*001c00000000000000860000000000000000000000000000001c00000000000000870000000000
*000000000000000000001c00000000000000880000000000000000000000000000001c00000000
*000000890000000000000000000000000000001c000000000000008a0000000000000000000000
*000000001d000000000000008b0000000000000000000000000000001d000000000000008c0000
*000000000000000000000000001d000000000000008d0000000000000000000000000000001d00
*0000000000008e0000000000000000000000000000001d000000000000008f0000000000000000
*000000000000001d00000000000000900000000000000000000000000000001d00000000000000
*910000000000000000000000000000001d00000000000000920000000000000000000000000000
*001d00000000000000930000000000000000000000000000001d00000000000000940000000000
*000000000000000000001e00000000000000950000000000000000000000000000001e00000000
*000000960000000000000000000000000000001e00000000000000970000000000000000000000
*000000001e00000000000000980000000000000000000000000000001e00000000000000990000
*000000000000000000000000001e000000000000009a0000000000000000000000000000001e00
*0000000000009b0000000000000000000000000000001e000000000000009c0000000000000000
*000000000000001e000000000000009d0000000000000000000000000000001e00000000000000
*9e0000000000000000000000000000001f000000000000009f0000000000000000000000000000
*001f00000000000000a00000000000000000000000000000001f00000000000000a10000000000
*000000000000000000001f00000000000000a20000000000000000000000000000001f00000000
*000000a30000000000000000000000000000001f00000000000000a40000000000000000000000
*000000001f00000000000000a50000000000000000000000000000001f00000000000000a60000
*000000000000000000000000001f00000000000000a70000000000000000000000000000001f00
*000000000000a80000000000000000000000000000001f00000000000000a90000000000000000
*000000000000001f00000000000000aa0000000000000000000000000000001f00000000000000
*ab0000000000000000000000000000001f00000000000000ac0000000000000000000000000000
*001f00000000000000ad0000000000000000000000000000001f00000000000000ae0000000000
*000000000000000000001f00000000000000af0000000000000000000000000000001f00000000
*000000b00000000000000000000000000000001f00000000000000b10000000000000000000000
*000000001f00000000000000b20000000000000000000000000000002000000000000000b30000
*000000000000000000000000002000000000000000b40000000000000000000000000000002000
*000000000000b50000000000000000000000000000002123000000000000000000000000000000
*22000108000000700000006f000000720000007400000061000000620000006c00000065010c00
*00006500000078000000700000006500000072000000690000006d000000650000006e00000074
*000000610000006c01150000006c00000069000000620000007200000061000000720000006900
*00006500000073000000400000006800000061000000730000006b000000650000006c0000006c
*0000002e0000006f00000072000000670000000000000000000000000000000000000100011400
*00006e0000006f0000006e0000002d000000700000006f00000072000000740000006100000062
*0000006c0000006500000020000000280000004d00000050000000540000004300000073000000
*29010c0000006500000078000000700000006500000072000000690000006d000000650000006e
*00000074000000610000006c01150000006c000000690000006200000072000000610000007200
*0000690000006500000073000000400000006800000061000000730000006b000000650000006c
*0000006c0000002e0000006f000000720000006706000000000000000001030102240000005400
*00006800000069000000730000002000000074000000790000007000000065000000200000006d
*000000610000007900000020000000620000006500000020000000620000006500000073000000
*74000000200000007200000065000000610000006400000020000000690000006e000000660000
*0069000000780000002e0000002000000041000000200107010202000000630000002001040100
*0000000000000000000000000000000000000000000000010202000000200000006d0102060000
*002000000069000000730000002000000061000000200104010000000000000000b60000000000
*000023000000000000002401020100000020010702010000006d01020b00000020000000740000
*00680000006100000074000000200000006d0000006100000070000000730000000a0102100000
*002000000076000000610000006c000000750000006500000073000000200000006f0000006600
*000020000000740000007900000070000000650000002001070201000000630102090000002000
*00007400000068000000720000006f000000750000006700000068000000200107020400000075
*0000006e000000690000007401021300000020000000740000006f000000200000007600000061
*0000006c000000750000006500000073000000200000006f000000660000002000000074000000
*79000000700000006500000020010702010000006d0102040000002e0000002000000041000000
*2001070201000000630102010000002d0104010000000000000000000000000000000000000000
*000000000101020a000000200000006d000000610000007900000020000000610000006c000000
*730000006f0000000a01022900000020000000730000007500000070000000700000006c000000
*79000000200000006f0000007000000065000000720000006100000074000000690000006f0000
*006e00000073000000200000007700000068000000690000006300000068000000200000007400
*000061000000630000006b0000002d0000006f0000006e00000020000000610000006e0000006f
*000000740000006800000065000000720000002001070201000000630102100000002000000074
*0000006f00000020000000610000006e0000002000000065000000780000006900000073000000
*74000000690000006e00000067000000200104010000000000000000b600000000000000230000
*00000000002401020100000020010702010000006d01020d000000200000006f0000006e000000
*20000000740000006800000065000000200000006c0000006500000066000000740000000a0102
*50000000200000006f000000720000002000000072000000690000006700000068000000740000
*002e00000020000000540000006800000065000000730000006500000020000000730000007000
*0000650000006300000069000000610000006c000000690000007a000000650000006400000020
*000000720000006500000064000000750000006300000074000000690000006f0000006e000000
*73000000200000006d0000006100000079000000200000006200000065000000200000006d0000
*006f00000072000000650000002000000065000000660000006600000069000000630000006900
*0000650000006e0000007400000020000000690000006e00000020000000730000006f0000006d
*00000065000000200000007300000063000000650000006e000000610000007200000069000000
*6f000000730000000a01022400000020000000610000006e000000640000002000000061000000
*720000006500000020000000750000007300000065000000640000002000000077000000680000
*00650000006e00000020000000610000007000000070000000720000006f000000700000007200
*000069000000610000007400000065000000200000006200000079000000200000006100000020
*01020900000047000000650000006e000000650000007200000061000000740000006f00000072
*01020c0000002e00000020000000540000006800000065000000200000006e000000610000006d
*000000650000007300000020010401000000000000000003000000000000000000000000000000
*0101020500000020000000610000006e0000006400000020010401000000000000000002000000
*0000000000000000000000000101020600000020000000770000006f000000720000006b000000
*0a023d00000020000000620000007900000020000000610000006e000000610000006c0000006f
*000000670000007900000020000000740000006f00000020000000740000006800000065000000
*2000000073000000790000006e0000006f0000006e000000790000006d0000006f000000750000
*0073000000200000006f0000007000000065000000720000006100000074000000690000006f00
*00006e0000007300000020000000690000006e0000002000000074000000680000006500000020
*0000006c000000690000007300000074000000200000006d0000006f0000006e0000006f000000
*69000000640000002e0000000a010301024c000000540000006800000069000000730000002000
*0000630000006c0000006100000073000000730000002000000064000000650000006c00000069
*0000006200000065000000720000006100000074000000650000006c0000007900000020000000
*61000000760000006f0000006900000064000000730000002000000066000000750000006e0000
*006300000074000000690000006f0000006e000000610000006c0000002d000000640000006500
*000070000000650000006e00000064000000650000006e00000063000000690000006500000073
*0000002c00000020000000730000006f0000002000000074000000680000006100000074000000
*2000000028000000290000002000000063000000610000006e0000002000000062000000650000
*0020000000610000002001070201000000630102090000002d0000005200000065000000640000
*00750000006300000065000000720000000a01020900000020000000660000006f000000720000
*0020000000610000006c0000006c00000020010702010000006301024a0000002c000000200000
*00610000006e0000006400000020000000730000006f000000200000006d000000610000006e00
*00007900000020000000630000006f0000006d0000006d0000006f0000006e0000002000000072
*000000650000006400000075000000630000006500000072000000730000002000000063000000
*610000006e00000020000000770000006f000000720000006b000000200000006f000000760000
*006500000072000000200000006d000000750000006c0000007400000069000000700000006c00
*0000650000002000000074000000790000007000000065000000730000002c0000002000000066
*0000006f0000007200000020000000690000006e0000007300000074000000610000006e000000
*63000000650000002c0000000a0102200000002000000046000000690000007200000073000000
*7400000020000000610000006e00000064000000200000004c0000006100000073000000740000
*00200000006d000000610000007900000020000000720000006500000064000000750000006300
*00006500000020000000620000006f000000740000006800000020010702010000006101020500
*000020000000610000006e00000064000000200104010000000000000000b70000000000000023
*000000000000002501020100000020010702010000006101020a0000002e000000200000005300
*0000690000006e0000006300000065000000200000006100000020010209000000470000006500
*00006e000000650000007200000061000000740000006f00000072010215000000200000006800
*000061000000730000002000000061000000200000006600000069000000780000006500000064
*00000020000000650000006c000000650000006d000000650000006e000000740000000a01025a
*00000020000000740000007900000070000000650000002c000000200000007400000068000000
*6500000020000000690000006e00000070000000750000007400000020000000740000006f0000
*002000000074000000680000006500000020000000720000006500000064000000750000006300
*000065000000720000002000000069000000730000002000000067000000650000006e00000065
*00000072000000610000006c0000006c00000079000000200000006b0000006e0000006f000000
*770000006e00000020000000610000006e00000064000000200000006500000078000000740000
*0072000000610000006300000074000000690000006e0000006700000020000000660000007200
*00006f0000006d00000020000000740000006800000065000000200000006d0000006f0000006e
*0000006f000000690000006400000020000000750000007300000075000000610000006c000000
*6c000000790000000a01025a000000200000006900000073000000200000007300000075000000
*6600000066000000690000006300000069000000650000006e0000007400000020000000740000
*006f00000020000000660000006900000078000000200000007400000068000000650000002000
*0000720000006500000073000000750000006c0000007400000020000000740000007900000070
*000000650000002e00000020000000430000006f0000006d00000062000000690000006e000000
*61000000740000006f000000720000007300000020000000610000007200000065000000200000
*00610000007600000061000000690000006c00000061000000620000006c000000650000002000
*0000660000006f00000072000000200000006d0000006f00000073000000740000002000000073
*00000063000000650000006e0000006100000072000000690000006f0000007300000020000000
*77000000680000006500000072000000650000000a010258000000200000007400000068000000
*6900000073000000200000006900000073000000200000006e0000006f00000074000000200000
*0074000000680000006500000020000000630000006100000073000000650000002c0000002000
*0000610000006e0000006400000020000000740000006800000065000000200000006600000065
*000000770000002000000072000000650000006d00000061000000690000006e00000069000000
*6e0000006700000020000000630000006100000073000000650000007300000020000000630000
*00610000006e0000002000000062000000650000002000000068000000610000006e0000006400
*00006c000000650000006400000020000000620000007900000020000000750000007300000069
*0000006e0000006700000020000000610000006e00000020000000650000007800000070000000
*6c00000069000000630000006900000074000000200000000a0212000000200000007400000079
*000000700000006500000020000000610000006e0000006e0000006f0000007400000061000000
*74000000690000006f0000006e0000002e0000000a030102140000004d000000690000006e0000
*00690000006d000000610000006c00000020000000640000006500000066000000690000006e00
*00006900000074000000690000006f0000006e0000003a00000020010401000000000000000001
*00000000000000000000000000000001010204000000200000006f000000720000002001040100
*00000000000000020000000000000000000000000000000102010000000a000000000000000103
*010217000000430000006f0000006e000000760000006500000072000000740000002000000061
*0000002000000076000000610000006c000000750000006500000020000000690000006e000000
*740000006f0000002000000061000000200104010000000000000000b600000000000000230000
*00000000002402010000000a000000000000000203010214000000410000007000000070000000
*650000006e0000006400000020000000610000002000000076000000610000006c000000750000
*006500000020000000740000006f0000002000000061000000200104010000000000000000b600
*000000000000230000000000000024022400000020000000660000006f00000072000000200000
*0075000000730000006500000020000000690000006e000000200000006c000000650000006600
*0000740000002d000000740000006f0000002d0000007200000069000000670000006800000074
*00000020000000720000006500000064000000750000006300000074000000690000006f000000
*6e0000000a00000000000000030301021700000050000000720000006500000070000000650000
*006e0000006400000020000000610000002000000076000000610000006c000000750000006500
*0000200000006f0000006e000000740000006f0000002000000061000000200104010000000000
*000000b600000000000000230000000000000024022800000020000000660000006f0000007200
*00002000000075000000730000006500000020000000640000007500000072000000690000006e
*000000670000002000000072000000690000006700000068000000740000002d00000074000000
*6f0000002d0000006c000000650000006600000074000000200000007200000065000000640000
*00750000006300000074000000690000006f0000006e0000000a00000000000000040301020800
*00004100000070000000700000006c000000790000002000000061000000200104010000000000
*000000000000000000000000000000000000000101020600000020000000740000006f00000020
*00000061000000200104010000000000000000b800000000000000230000000000000026024b00
*000020000000630000006f0000006e0000007400000061000000690000006e0000006500000072
*0000002c000000200000006100000066000000740000006500000072000000200000006d000000
*610000007000000070000000690000006e00000067000000200000007400000068000000650000
*0020000000630000006f0000006e00000074000000650000006e00000074000000730000002000
*0000690000006e000000740000006f000000200000006100000020000000730000007500000069
*0000007400000061000000620000006c0000006500000020000000660000006f00000072000000
*6d00000020000000660000006f0000007200000020000000720000006500000064000000750000
*006300000074000000690000006f0000006e0000002e0000000a00000000000000050301020800
*00004100000070000000700000006c000000790000002000000061000000200104010000000000
*000000000000000000000000000000000000000101020600000020000000740000006f00000020
*00000061000000200104010000000000000000b80000000000000023000000000000002601021e
*000000200000006d000000610000007000000070000000690000006e0000006700000020000000
*6500000061000000630000006800000020000000650000006c000000650000006d000000650000
*006e00000074000000200000007400000068000000720000006f00000075000000670000006800
*0000200104010000000000000000010000000000000000000000000000000102010000000a2400
*000000000000b900000000000000ba00000000000000bb00000000000000b600000000000000bc
*00000000000000bd00000000000000be00000000000000bf00000000000000c000000000000000
*c100000000000000c200000000000000c300000000000000c400000000000000c5000000000000
*00c600000000000000c700000000000000c800000000000000c900000000000000ca0000000000
*0000cb00000000000000cc00000000000000cd00000000000000ce00000000000000cf00000000
*000000d000000000000000d100000000000000d200000000000000d30000000000000000000000
*000000000100000000000000020000000000000003000000000000000400000000000000050000
*000000000006000000000000000708000000000000000000000000000000010000000000000002
*000000000000000300000000000000040000000000000005000000000000000700000000000000
*06000000000000000000000000000000020001140000006e0000006f0000006e0000002d000000
*700000006f000000720000007400000061000000620000006c0000006500000020000000280000
*004d0000005000000054000000430000007300000029010c000000650000007800000070000000
*6500000072000000690000006d000000650000006e00000074000000610000006c01150000006c
*000000690000006200000072000000610000007200000069000000650000007300000040000000
*6800000061000000730000006b000000650000006c0000006c0000002e0000006f000000720000
*00670100000000000000080301022200000050000000720000006f000000760000006900000064
*00000065000000730000002000000061000000200000006d000000650000006300000068000000
*610000006e00000069000000730000006d00000020000000660000006f00000072000000200000
*007400000068000000650000002000000055000000540000004600000038000000200104010000
*000000000000b600000000000000230000000000000024023600000020000000740000006f0000
*00200000007200000065000000700000006f000000720000007400000020000000690000006e00
*000076000000610000006c00000069000000640000002000000063000000680000006100000072
*00000061000000630000007400000065000000720000007300000020000000740000006f000000
*200000006f0000006e00000065000000200000006f00000072000000200000006d0000006f0000
*007200000065000000200000006d0000006f0000006e0000006f00000069000000640000007300
*00002e0000000a2700000000000000b900000000000000ba00000000000000bb00000000000000
*b600000000000000bc00000000000000bd00000000000000be00000000000000bf000000000000
*00c000000000000000c100000000000000c200000000000000c300000000000000c40000000000
*0000c500000000000000c600000000000000c700000000000000c800000000000000c900000000
*000000ca00000000000000cb00000000000000cc00000000000000cd00000000000000ce000000
*00000000cf00000000000000d000000000000000d100000000000000d200000000000000d30000
*000000000000000000000000000100000000000000020000000000000003000000000000000400
*000000000000050000000000000006000000000000000700000000000000080000000000000009
*000000000000000a030000000000000008000000000000000a0000000000000009000000000000
*000000000000000000030001140000006e0000006f0000006e0000002d000000700000006f0000
*00720000007400000061000000620000006c0000006500000020000000280000004d0000005000
*000054000000430000007300000029010c00000065000000780000007000000065000000720000
*00690000006d000000650000006e00000074000000610000006c01150000006c00000069000000
*620000007200000061000000720000006900000065000000730000004000000068000000610000
*00730000006b000000650000006c0000006c0000002e0000006f00000072000000670100000000
*0000000b03010203000000490000006600000020010702010000006d0102060000002000000069
*0000007300000020000000610000002001070201000000630102010000002d0105070000005200
*000065000000640000007500000063000000650000007201020c0000002c000000200000007400
*000068000000650000006e000000200000006d0000002000000069000000730000002001070102
*0300000028000000630000002001040200000000000000000c0000000000000000000000000000
*000300000000000000000b000000000000000000000000000000030203000000200000006d0000
*00290102010000002d010507000000520000006500000064000000750000006300000065000000
*720102010000000a01022800000020000000200000002000000054000000680000006900000073
*0000002000000063000000610000006e0000002000000062000000650000002000000075000000
*73000000650000006400000020000000740000006f000000200000007100000075000000690000
*00630000006b0000006c000000790000002000000073000000650000006c000000650000006300
*000074000000200000006100000020010507000000520000006500000064000000750000006300
*0000650000007201020e00000020000000660000006f0000007200000020000000750000007300
*0000650000002000000061000000730000002000000061000000200104010100000000000000d4
*0102010000000a0102030000002000000020000000200104010100000000000000d50202000000
*2e0000000a2700000000000000b900000000000000ba00000000000000bb00000000000000b600
*000000000000bc00000000000000bd00000000000000be00000000000000bf00000000000000c0
*00000000000000c100000000000000c200000000000000c300000000000000c400000000000000
*c500000000000000c600000000000000c700000000000000c800000000000000c9000000000000
*00ca00000000000000cb00000000000000cc00000000000000cd00000000000000ce0000000000
*0000cf00000000000000d000000000000000d100000000000000d200000000000000d300000000
*000000000000000000000001000000000000000200000000000000030000000000000004000000
*000000000500000000000000060000000000000007000000000000000b000000000000000c0000
*00000000000d03000000000000000b000000000000000c000000000000000d0000000000000000
*00000000000000040000000004000000000000000e030102040000005400000068000000650000
*00200104010000000000000000b600000000000000230000000000000024010201000000200107
*0102010000002801020100000027010211000000750000006e000000690000006f0000006e0000
*0057000000690000007400000068000000200000006d0000006100000070000000700000006500
*00006e00000064010201000000270102010000002c010401000000000000000018000000000000
*00000000000000000004020100000029022100000020000000660000006f000000720000002000
*0000630000006f0000006e0000007400000061000000690000006e000000650000007200000073
*0000002000000066000000750000006c0000006c000000200000006f0000006600000020000000
*6d0000006f0000006e0000006f0000006900000064000000730000002e0000000a000000000000
*001103024d000000500000006f0000006c000000790000006d0000006f00000072000000700000
*0068000000690000006300000020000000630000006f0000006e00000074000000610000006900
*00006e000000650000007200000073000000200000007400000068000000610000007400000020
*00000077000000650000002000000063000000610000006e000000200000007300000075000000
*70000000700000006c0000007900000020000000610000006e000000200000006f000000700000
*0065000000720000006100000074000000690000006f0000006e00000020000000740000006f00
*00002000000068000000610000006e000000640000006c0000006500000020000000750000006e
*000000690000006f0000006e000000730000002000000077000000690000007400000068000000
*0a0000000000000014030102040000005400000068000000650000002001040100000000000000
*00b600000000000000230000000000000024010201000000200107010201000000280104010000
*00000000000019000000000000000000000000000000040102010000002c010401000000000000
*0000180000000000000000000000000000000402010000002902010000000a0000000000000017
*0301021d0000004100000020000000430000006f0000006e000000740000006100000069000000
*6e0000006500000072000000200000007300000075000000690000007400000061000000620000
*006c0000006500000020000000660000006f000000720000002000000074000000680000006500
*000020010402000000000000000015000000000000000000000000000000040000000000000000
*1400000000000000000000000000000004010201000000200104010000000000000000b6000000
*0000000023000000000000002402010000000a1300000000000000b900000000000000bb000000
*00000000b600000000000000000000000000000001000000000000000200000000000000030000
*00000000000e000000000000000f00000000000000100000000000000011000000000000001200
*000000000000130000000000000014000000000000001500000000000000160000000000000017
*000000000000001800000000000000190c00000000000000170000000000000018000000000000
*001900000000000000140000000000000015000000000000001600000000000000110000000000
*0000130000000000000012000000000000000e000000000000000f000000000000001000000000
*0000000000000000000000050001140000006e0000006f0000006e0000002d000000700000006f
*000000720000007400000061000000620000006c0000006500000020000000280000004d000000
*5000000054000000430000007300000029010c0000006500000078000000700000006500000072
*000000690000006d000000650000006e00000074000000610000006c01150000006c0000006900
*000062000000720000006100000072000000690000006500000073000000400000006800000061
*000000730000006b000000650000006c0000006c0000002e0000006f0000007200000067002900
*000000000000b900000000000000ba00000000000000bb00000000000000b600000000000000bc
*00000000000000bd00000000000000be00000000000000bf00000000000000c000000000000000
*c100000000000000c200000000000000c300000000000000c400000000000000c5000000000000
*00c600000000000000c700000000000000c800000000000000c900000000000000ca0000000000
*0000cb00000000000000cc00000000000000cd00000000000000ce00000000000000cf00000000
*000000d000000000000000d100000000000000d200000000000000d30000000000000000000000
*000000000100000000000000020000000000000003000000000000000400000000000000050000
*000000000006000000000000000700000000000000080000000000000009000000000000000a00
*0000000000001a000000000000001b02000000000000001a000000000000001b00000000000000
*000000000000000006000108000000700000006f00000072000000740000006100000062000000
*6c00000065010c0000006500000078000000700000006500000072000000690000006d00000065
*0000006e00000074000000610000006c01150000006c0000006900000062000000720000006100
*000072000000690000006500000073000000400000006800000061000000730000006b00000065
*0000006c0000006c0000002e0000006f000000720000006705000000000000001c030102020000
*006100000020010401000000000000000025000000000000000000000000000000060102190000
*00200000007400000072000000610000006e00000073000000660000006f000000720000006d00
*000065000000720000002000000074000000680000006100000074000000200000007400000072
*00000065000000610000007400000073000000200104010000000000000000d600000000000000
*230000000000000027010204000000200000006100000073000000200104010000000000000000
*d7000000000000002800000000000000290102010000000a010215000000200000005400000068
*0000006900000073000000200000006c0000006500000074000000730000002000000079000000
*6f000000750000002000000075000000730000006500000020000000610000002001020a000000
*42000000790000007400000065000000530000007400000072000000690000006e000000670102
*060000002000000061000000730000002000000061000000200104010000000000000000d70000
*000000000028000000000000002901022000000020000000730000006f00000075000000720000
*00630000006500000020000000770000006900000074000000680000006f000000750000007400
*000020000000670000006f000000690000006e0000006700000020000000740000006800000072
*0000006f0000007500000067000000680000002000000061000000200104010000000000000000
*b60000000000000023000000000000002401021200000020000000740000007200000061000000
*6e00000073000000660000006f000000720000006d0000006500000072000000200000006c0000
*00690000006b00000065000000200102040000005500000054000000460000003802010000000a
*000000000000001f03010202000000610000002001040100000000000000002500000000000000
*000000000000000006024d000000200000007400000072000000610000006e0000007300000066
*0000006f000000720000006d000000650000007200000020000000740000006800000061000000
*740000002000000061000000730000006b00000073000000200000006f0000006e0000006c0000
*007900000020000000660000006f00000072000000200000007400000068000000650000002000
*000076000000610000006c00000075000000650000007300000020000000630000006f0000006e
*0000007400000061000000690000006e000000650000006400000020000000690000006e000000
*20000000610000006e00000020000000690000006e000000640000006500000078000000650000
*006400000020000000630000006f0000006e0000007400000061000000690000006e0000006500
*0000720000000a0000000000000022030102020000006100000020010401000000000000000025
*000000000000000000000000000000060241000000200000007400000072000000610000006e00
*000073000000660000006f000000720000006d0000006500000072000000200000007400000068
*00000061000000740000002000000061000000730000006b00000073000000200000006f000000
*6e0000006c0000007900000020000000660000006f000000720000002000000074000000680000
*0065000000200000006b000000650000007900000073000000200000006f000000660000002000
*0000610000006e00000020000000690000006e0000006400000065000000780000006500000064
*00000020000000630000006f0000006e0000007400000061000000690000006e00000065000000
*720000000a0000000000000025030102130000006d000000690000006e000000690000006d0000
*00610000006c00000020000000640000006500000066000000690000006e000000690000007400
*0000690000006f0000006e00000020010401000000000000000027000000000000000000000000
*00000006010204000000200000006f000000720000002001040100000000000000002800000000
*00000000000000000000000602010000000a000000000000002a03010208000000410000007000
*0000700000006c0000007900000020000000610000002001040100000000000000000000000000
*00000000000000000000000101021f000000200000006400000069000000720000006500000063
*000000740000006c0000007900000020000000740000006f000000200000007400000068000000
*6500000020000000650000006c000000650000006d000000650000006e00000074000000730000
*00200000006f000000660000002000000061000000200104010000000000000000250000000000
*000000000000000000000602010000000a3300000000000000b900000000000000ba0000000000
*0000bb00000000000000b600000000000000bc00000000000000bd00000000000000be00000000
*000000bf00000000000000c000000000000000c100000000000000c200000000000000c3000000
*00000000c400000000000000c500000000000000c600000000000000c700000000000000c80000
*0000000000c900000000000000ca00000000000000cb00000000000000cc00000000000000cd00
*000000000000ce00000000000000cf00000000000000d000000000000000d100000000000000d2
*00000000000000d300000000000000000000000000000001000000000000000200000000000000
*030000000000000004000000000000000500000000000000060000000000000007000000000000
*001c000000000000001d000000000000001e000000000000001f00000000000000200000000000
*000021000000000000002200000000000000230000000000000024000000000000002500000000
*00000026000000000000002700000000000000280000000000000029000000000000002a0f0000
*000000000025000000000000002600000000000000270000000000000028000000000000002900
*0000000000002a000000000000002200000000000000230000000000000024000000000000001f
*00000000000000200000000000000021000000000000001c000000000000001d00000000000000
*1e000000000000000000000000000000070001270000006e0000006f0000006e0000002d000000
*700000006f000000720000007400000061000000620000006c0000006500000020000000280000
*004d000000500000005400000043000000730000002c000000200000004f000000760000006500
*0000720000006c0000006f00000061000000640000006500000064000000530000007400000072
*000000690000006e000000670000007300000029010c0000006500000078000000700000006500
*000072000000690000006d000000650000006e00000074000000610000006c01150000006c0000
*006900000062000000720000006100000072000000690000006500000073000000400000006800
*000061000000730000006b000000650000006c0000006c0000002e0000006f0000007200000067
*06000000000000002b0301020200000041000000200104010000000000000000b6000000000000
*0023000000000000002401023a000000200000006f000000660000002000000070000000610000
*00720000007400000069000000610000006c00000020000000690000006e000000660000006f00
*0000720000006d0000006100000074000000690000006f0000006e000000200000006100000062
*0000006f0000007500000074000000200000006c0000006f000000630000006100000074000000
*690000006f0000006e0000007300000020000000690000006e0000002000000061000000200000
*00730000006f000000750000007200000063000000650000002000000066000000690000006c00
*0000650000002e0000000a025f0000002000000020000000200000005400000068000000690000
*007300000020000000690000007300000020000000700000006f0000006c000000790000006d00
*00006f000000720000007000000068000000690000006300000020000000690000006e00000020
*000000740000006800000065000000200000006b000000690000006e0000006400000020000000
*6f0000006600000020000000690000006e000000660000006f000000720000006d000000610000
*0074000000690000006f0000006e00000020000000790000006f00000075000000200000007700
*0000610000006e0000007400000020000000740000006f000000200000006d0000006100000069
*0000006e0000007400000061000000690000006e0000002000000061000000620000006f000000
*7500000074000000200000006500000061000000630000006800000020000000730000006f0000
*00750000007200000063000000650000002000000066000000690000006c000000650000002e00
*00000a000000000000002e03023f000000430000006f0000006d00000070000000750000007400
*00006500000020000000740000006800000065000000200000006c0000006f0000006300000061
*00000074000000690000006f0000006e000000200000006f000000660000002000000074000000
*6800000065000000200000006e0000006500000078000000740000002000000073000000740000
*00610000006e0000006400000061000000720000006400000020000000380000002d0000006300
*00006f0000006c000000750000006d0000006e00000020000000610000006c0000006900000067
*0000006e0000006500000064000000200000007400000061000000620000000a00000000000000
*2f030102350000006c00000069000000660000007400000020000000690000006e000000660000
*006f000000720000006d0000006100000074000000690000006f0000006e000000200000006100
*0000620000006f0000007500000074000000200000006100000020000000730000006f00000075
*0000007200000063000000650000002000000066000000690000006c0000006500000020000000
*690000006e000000740000006f0000002000000061000000200000007300000074000000610000
*007200000074000000690000006e000000670000002001040100000000000000002b0000000000
*0000000000000000000007020f00000020000000660000006f0000007200000020000000740000
*006800000061000000740000002000000066000000690000006c000000650000000a0000000000
*00003003026a000000650000007800000074000000720000006100000063000000740000002000
*00007000000061000000720000007400000069000000610000006c00000020000000690000006e
*000000660000006f000000720000006d0000006100000074000000690000006f0000006e000000
*2000000061000000620000006f0000007500000074000000200000007400000068000000650000
*002000000063000000750000007200000072000000650000006e00000074000000200000006300
*00006f0000006c000000750000006d0000006e0000002c00000020000000650000007600000065
*0000006e00000020000000690000006e0000002000000074000000680000006500000020000000
*610000006200000073000000650000006e0000006300000065000000200000006f000000660000
*00200000006b0000006e0000006f000000770000006c0000006500000064000000670000006500
*0000200000006f000000660000002000000074000000680000006500000020000000730000006f
*000000750000007200000063000000650000002000000066000000690000006c00000065000000
*0a0000000000000031030246000000650000007800000074000000720000006100000063000000
*74000000200000007000000061000000720000007400000069000000610000006c000000200000
*00690000006e000000660000006f000000720000006d0000006100000074000000690000006f00
*00006e0000002000000061000000620000006f0000007500000074000000200000007400000068
*000000650000002000000063000000750000007200000072000000650000006e00000074000000
*200000006c000000690000006e00000065000000200000006e000000750000006d000000620000
*00650000007200000020000000690000006600000020000000700000006f000000730000007300
*000069000000620000006c000000650000000a000000000000003203023c000000650000007800
*000074000000720000006100000063000000740000002000000074000000680000006500000020
*0000007300000074000000610000006e0000006400000061000000720000006400000020000000
*660000006f000000720000006d000000610000007400000020000000660000006f000000720000
*0020000000610000006e000000200000006100000062000000730000006f0000006c0000007500
*0000740000006500000020000000730000006f0000007500000072000000630000006500000020
*000000700000006f000000730000006900000074000000690000006f0000006e0000000a2f0000
*0000000000b900000000000000ba00000000000000bb00000000000000b600000000000000bc00
*000000000000bd00000000000000be00000000000000bf00000000000000c000000000000000c1
*00000000000000c200000000000000c300000000000000c400000000000000c500000000000000
*c600000000000000c700000000000000c800000000000000c900000000000000ca000000000000
*00cb00000000000000cc00000000000000cd00000000000000ce00000000000000cf0000000000
*0000d000000000000000d100000000000000d200000000000000d3000000000000000000000000
*000000010000000000000002000000000000000300000000000000040000000000000005000000
*0000000006000000000000000700000000000000080000000000000009000000000000000a0000
*00000000002b000000000000002c000000000000002d000000000000002e000000000000002f00
*000000000000300000000000000031000000000000003208000000000000002e00000000000000
*2b000000000000002d000000000000002c00000000000000310000000000000030000000000000
*002f0000000000000032000000000000000000000000000000080001270000006e0000006f0000
*006e0000002d000000700000006f000000720000007400000061000000620000006c0000006500
*000020000000280000004d000000500000005400000043000000730000002c000000200000004f
*0000007600000065000000720000006c0000006f00000061000000640000006500000064000000
*530000007400000072000000690000006e000000670000007300000029010c0000006500000078
*000000700000006500000072000000690000006d000000650000006e0000007400000061000000
*6c01150000006c0000006900000062000000720000006100000072000000690000006500000073
*000000400000006800000061000000730000006b000000650000006c0000006c0000002e000000
*6f0000007200000067080000000000000033030102020000004100000020010401000000000000
*000008000000000000000000000000000000020226000000200000007400000072000000610000
*006e00000073000000660000006f000000720000006d0000006500000072000000200000007400
*000068000000610000007400000020000000730000007400000072000000690000007000000073
*000000200000006f0000007500000074000000200000006e00000065000000770000006c000000
*690000006e00000065000000730000000a00000000000000350301020200000041000000200104
*010000000000000000080000000000000000000000000000000201023600000020000000740000
*0072000000610000006e00000073000000660000006f000000720000006d000000650000007200
*000020000000740000006800000061000000740000002000000073000000740000007200000069
*0000007000000073000000200000006f000000750000007400000020000000610000006e000000
*790000002000000063000000680000006100000072000000610000006300000074000000650000
*0072000000200000006d0000006100000074000000630000006800000065000000640000002000
*00006200000079000000200104010000000000000000d80000000000000023000000000000002a
*02010000000a000000000000003703010202000000410000002001040100000000000000000800
*00000000000000000000000000000201021b000000200000007400000072000000610000006e00
*000073000000660000006f000000720000006d0000006500000072000000200000007400000068
*000000610000007400000020000000620000007200000065000000610000006b00000073000000
*2000000061000000200104010000000000000000d7000000000000002800000000000000290102
*010000002001040100000000000000002500000000000000000000000000000006010220000000
*20000000690000006e000000740000006f00000020000000640000006900000073000000740000
*00690000006e0000006300000074000000200000006c000000690000006e000000650000007300
*00002c0000002000000066000000650000006500000064000000690000006e0000006700000020
*00000061000000200104010000000000000000d700000000000000280000000000000029010201
*000000200104010000000000000000000000000000000000000000000000000102140000002000
*000065000000610000006300000068000000200000006c000000690000006e0000006500000020
*000000690000006e000000200000007400000075000000720000006e0000002e0000000a000000
*000000003803010202000000410000002001040100000000000000000800000000000000000000
*00000000000201021b000000200000007400000072000000610000006e00000073000000660000
*006f000000720000006d0000006500000072000000200000007400000068000000610000007400
*000020000000620000007200000065000000610000006b00000073000000200000006100000020
*0104010000000000000000d7000000000000002800000000000000290102010000002001040100
*00000000000000250000000000000000000000000000000601022000000020000000690000006e
*000000740000006f0000002000000064000000690000007300000074000000690000006e000000
*630000007400000020000000770000006f0000007200000064000000730000002c000000200000
*0066000000650000006500000064000000690000006e0000006700000020000000610000002001
*04010000000000000000d700000000000000280000000000000029010201000000200104010000
*000000000000000000000000000000000000000000000102130000002000000065000000610000
*006300000068000000200000006c000000690000006e0000006500000020000000690000006e00
*0000200000007400000075000000720000006e0000000a00000000000000390301022300000045
*000000780000007400000072000000610000006300000074000000200000007400000068000000
*65000000200000006d000000610000007400000063000000680000006500000064000000200000
*00770000006f0000007200000064000000730000002000000066000000720000006f0000006d00
*000020000000740000006800000065000000200104010000000000000000380000000000000000
*0000000000000008010201000000200104010000000000000000b6000000000000002300000000
*0000002402010000000a000000000000003a030102230000004500000078000000740000007200
*000061000000630000007400000020000000740000006800000065000000200000006d00000061
*0000007400000063000000680000006500000064000000200000006c000000690000006e000000
*65000000730000002000000066000000720000006f0000006d0000002000000074000000680000
*006500000020010401000000000000000037000000000000000000000000000000080102010000
*00200104010000000000000000b60000000000000023000000000000002402010000000a000000
*000000003b03025e0000005500000074000000690000006c000000690000007400000079000000
*2000000066000000750000006e0000006300000074000000690000006f0000006e000000200000
*00740000006f000000200000006500000078000000740000007200000061000000630000007400
*000020000000770000006f00000072000000640000007300000020000000750000007300000069
*0000006e0000006700000020000000610000006300000063000000750000006d00000075000000
*6c00000061000000740000006f000000720000002c00000020000000690000006e000000730000
*006900000064000000650000002d000000770000006f00000072000000640000002c0000002000
*0000610000006e0000006400000020000000750000006e00000074000000690000006c0000002d
*0000006e0000006500000078000000740000002d000000770000006f0000007200000064000000
*200000006d0000006f0000006e0000006f0000006900000064000000730000000a000000000000
*003c03025e0000005500000074000000690000006c000000690000007400000079000000200000
*0066000000750000006e0000006300000074000000690000006f0000006e000000200000007400
*00006f000000200000006500000078000000740000007200000061000000630000007400000020
*0000006c000000690000006e000000650000007300000020000000750000007300000069000000
*6e0000006700000020000000610000006300000063000000750000006d000000750000006c0000
*0061000000740000006f000000720000002c00000020000000690000006e000000730000006900
*000064000000650000002d0000006c000000690000006e000000650000002c0000002000000061
*0000006e0000006400000020000000750000006e00000074000000690000006c0000002d000000
*6e0000006500000078000000740000002d0000006c000000690000006e00000065000000200000
*006d0000006f0000006e0000006f0000006900000064000000730000000a3100000000000000b9
*00000000000000ba00000000000000bb00000000000000b600000000000000bc00000000000000
*bd00000000000000be00000000000000bf00000000000000c000000000000000c1000000000000
*00c200000000000000c300000000000000c400000000000000c500000000000000c60000000000
*0000c700000000000000c800000000000000c900000000000000ca00000000000000cb00000000
*000000cc00000000000000cd00000000000000ce00000000000000cf00000000000000d0000000
*00000000d100000000000000d200000000000000d3000000000000000000000000000000010000
*000000000002000000000000000300000000000000040000000000000005000000000000000600
*0000000000000700000000000000080000000000000009000000000000000a0000000000000033
*000000000000003400000000000000350000000000000036000000000000003700000000000000
*380000000000000039000000000000003a000000000000003b000000000000003c0a0000000000
*000038000000000000003900000000000000350000000000000036000000000000003b00000000
*00000037000000000000003a00000000000000330000000000000034000000000000003c000000
*00000000000000000000000009000108000000700000006f000000720000007400000061000000
*620000006c00000065010c0000006500000078000000700000006500000072000000690000006d
*000000650000006e00000074000000610000006c01150000006c00000069000000620000007200
*00006100000072000000690000006500000073000000400000006800000061000000730000006b
*000000650000006c0000006c0000002e0000006f0000007200000067002700000000000000b900
*000000000000ba00000000000000bb00000000000000b600000000000000bc00000000000000bd
*00000000000000be00000000000000bf00000000000000c000000000000000c100000000000000
*c200000000000000c300000000000000c400000000000000c500000000000000c6000000000000
*00c700000000000000c800000000000000c900000000000000ca00000000000000cb0000000000
*0000cc00000000000000cd00000000000000ce00000000000000cf00000000000000d000000000
*000000d100000000000000d200000000000000d300000000000000000000000000000001000000
*000000000200000000000000030000000000000004000000000000000500000000000000060000
*000000000007000000000000003d000000000000003e000000000000003f03000000000000003d
*000000000000003e000000000000003f0000000000000000000000000000000a00000000003700
*000000000000b900000000000000ba00000000000000bb00000000000000b600000000000000bc
*00000000000000bd00000000000000be00000000000000bf00000000000000c000000000000000
*c100000000000000c200000000000000c300000000000000c400000000000000c5000000000000
*00c600000000000000c700000000000000c800000000000000c900000000000000ca0000000000
*0000cb00000000000000cc00000000000000cd00000000000000ce00000000000000cf00000000
*000000d000000000000000d100000000000000d200000000000000d30000000000000000000000
*000000000100000000000000020000000000000003000000000000000400000000000000050000
*0000000000060000000000000007000000000000001c000000000000001d000000000000001e00
*0000000000001f0000000000000020000000000000002100000000000000220000000000000023
*000000000000002400000000000000250000000000000026000000000000002700000000000000
*280000000000000029000000000000002a00000000000000400000000000000041000000000000
*004200000000000000430400000000000000400000000000000041000000000000004200000000
*000000430000000000000000000000000000000b0001280000006e0000006f0000006e0000002d
*000000700000006f000000720000007400000061000000620000006c0000006500000020000000
*280000006f0000007600000065000000720000006c0000006f0000006100000064000000650000
*006400000020000000730000007400000072000000690000006e00000067000000730000002c00
*0000200000004d0000005000000054000000430000007300000029010c00000065000000780000
*00700000006500000072000000690000006d000000650000006e00000074000000610000006c01
*150000006c00000069000000620000007200000061000000720000006900000065000000730000
*00400000006800000061000000730000006b000000650000006c0000006c0000002e0000006f00
*00007200000067002700000000000000b900000000000000ba00000000000000bb000000000000
*00b600000000000000bc00000000000000bd00000000000000be00000000000000bf0000000000
*0000c000000000000000c100000000000000c200000000000000c300000000000000c400000000
*000000c500000000000000c600000000000000c700000000000000c800000000000000c9000000
*00000000ca00000000000000cb00000000000000cc00000000000000cd00000000000000ce0000
*0000000000cf00000000000000d000000000000000d100000000000000d200000000000000d300
*000000000000000000000000000001000000000000000200000000000000030000000000000004
*000000000000000500000000000000060000000000000007000000000000004400000000000000
*450000000000000046030000000000000044000000000000004500000000000000460000000000
*000000000000000000000c000108000000700000006f0000007200000074000000610000006200
*00006c00000065010c0000006500000078000000700000006500000072000000690000006d0000
*00650000006e00000074000000610000006c01150000006c000000690000006200000072000000
*6100000072000000690000006500000073000000400000006800000061000000730000006b0000
*00650000006c0000006c0000002e0000006f000000720000006703000000000000004703010202
*00000041000000200104010000000000000000b60000000000000023000000000000002401020b
*000000200000006900000073000000200000006a00000075000000730000007400000020000000
*61000000200104010000000000000000d90000000000000023000000000000002b021300000020
*00000077000000690000007400000068000000200000006f0000006e0000006500000020000000
*6f000000620000006a0000006500000063000000740000002e000000200000000a000000000000
*004903010204000000540000006800000065000000200104010000000000000000b60000000000
*0000230000000000000024010237000000200000006f0000006600000020000000740000006800
*00006500000020000000650000006e000000640000006f0000006d0000006f0000007200000070
*0000006800000069000000730000006d00000073000000200000006f0000007600000065000000
*7200000020000000730000006f0000006d00000065000000200000006f000000620000006a0000
*0065000000630000007400000020000000690000006e00000020000000610000006e0000002000
*000061000000720000006200000069000000740000007200000061000000720000007900000020
*0104010000000000000000d90000000000000023000000000000002b02020000002e0000000a00
*0000000000004c0301020c00000045000000780000007400000072000000610000006300000074
*00000020000000740000006800000065000000200104010000000000000000b600000000000000
*23000000000000002401021e0000002000000066000000720000006f0000006d00000020000000
*690000007400000073000000200000007200000065000000700000007200000065000000730000
*00650000006e000000740000006100000074000000690000006f0000006e000000200000006100
*0000730000002000000061000000200104010000000000000000d9000000000000002300000000
*0000002b02010000000a2f00000000000000b900000000000000ba00000000000000bb00000000
*000000b600000000000000bc00000000000000bd00000000000000be00000000000000bf000000
*00000000c000000000000000c100000000000000c200000000000000c300000000000000c40000
*0000000000c500000000000000c600000000000000c700000000000000c800000000000000c900
*000000000000ca00000000000000cb00000000000000cc00000000000000cd00000000000000ce
*00000000000000cf00000000000000d000000000000000d100000000000000d200000000000000
*d300000000000000da00000000000000db00000000000000dc00000000000000dd000000000000
*00d900000000000000000000000000000001000000000000000200000000000000030000000000
*000004000000000000000500000000000000060000000000000007000000000000004700000000
*000000480000000000000049000000000000004a000000000000004b000000000000004c060000
*000000000049000000000000004a000000000000004b0000000000000047000000000000004800
*0000000000004c0000000000000000000000000000000d000108000000700000006f0000007200
*00007400000061000000620000006c00000065010c000000650000007800000070000000650000
*0072000000690000006d000000650000006e00000074000000610000006c01150000006c000000
*690000006200000072000000610000007200000069000000650000007300000040000000680000
*0061000000730000006b000000650000006c0000006c0000002e0000006f000000720000006700
*1e00000000000000b900000000000000ba00000000000000bb00000000000000b6000000000000
*00bc00000000000000bd00000000000000be00000000000000bf00000000000000c00000000000
*0000c100000000000000c200000000000000c300000000000000c400000000000000c500000000
*000000c600000000000000c700000000000000c800000000000000c900000000000000ca000000
*00000000cb00000000000000cc00000000000000cd00000000000000ce00000000000000cf0000
*0000000000d000000000000000d100000000000000d200000000000000d3000000000000004d00
*0000000000004e02000000000000004d000000000000004e000000000000000000000000000000
*0e000108000000700000006f000000720000007400000061000000620000006c00000065010c00
*00006500000078000000700000006500000072000000690000006d000000650000006e00000074
*000000610000006c01150000006c00000069000000620000007200000061000000720000006900
*00006500000073000000400000006800000061000000730000006b000000650000006c0000006c
*0000002e0000006f0000007200000067001f00000000000000b900000000000000ba0000000000
*0000bb00000000000000b600000000000000bc00000000000000bd00000000000000be00000000
*000000bf00000000000000c000000000000000c100000000000000c200000000000000c3000000
*00000000c400000000000000c500000000000000c600000000000000c700000000000000c80000
*0000000000c900000000000000ca00000000000000cb00000000000000cc00000000000000cd00
*000000000000ce00000000000000cf00000000000000d000000000000000d100000000000000d2
*00000000000000d3000000000000004d000000000000004e000000000000004f01000000000000
*004f0000000000000000000000000000000f000122000000700000006f00000072000000740000
*0061000000620000006c0000006500000020000000280000006200000075000000740000002000
*0000690000006e0000007300000074000000610000006e00000063000000650000007300000020
*000000750000007300000065000000200000004d00000050000000540000004300000073000000
*29010c0000006500000078000000700000006500000072000000690000006d000000650000006e
*00000074000000610000006c01150000006c000000690000006200000072000000610000007200
*0000690000006500000073000000400000006800000061000000730000006b000000650000006c
*0000006c0000002e0000006f00000072000000670200000000000000500301020a000000430000
*006f0000006e000000760000006500000072000000740000002000000061000000200104010000
*000000000000b60000000000000023000000000000002401020800000020000000690000006e00
*0000740000006f0000002000000061000000200104010000000000000000560000000000000000
*000000000000000f01020c0000002e000000200000004d0000006e000000650000006d0000006f
*0000006e00000069000000630000003a000000200107021b000000450000007800000070000000
*2000000061000000200000002a0000002000000045000000780000007000000020000000620000
*00200000003d000000200000004500000078000000700000002000000028000000610000002000
*00002b00000020000000620000002902010000000a00000000000000530301020a000000430000
*006f0000006e000000760000006500000072000000740000002000000061000000200104010000
*000000000000560000000000000000000000000000000f01020800000020000000690000006e00
*0000740000006f0000002000000061000000200104010000000000000000b60000000000000023
*000000000000002401020c0000002e000000200000004d0000006e000000650000006d0000006f
*0000006e00000069000000630000003a000000200107021b0000004c0000006f00000067000000
*2000000061000000200000002b000000200000004c0000006f0000006700000020000000620000
*00200000003d000000200000004c0000006f000000670000002000000028000000610000002000
*00002a00000020000000620000002902010000000a2700000000000000b900000000000000ba00
*000000000000bb00000000000000b600000000000000bc00000000000000bd00000000000000be
*00000000000000bf00000000000000c000000000000000c100000000000000c200000000000000
*c300000000000000c400000000000000c500000000000000c600000000000000c7000000000000
*00c800000000000000c900000000000000ca00000000000000cb00000000000000cc0000000000
*0000cd00000000000000ce00000000000000cf00000000000000d000000000000000d100000000
*000000d200000000000000d3000000000000004d000000000000004e0000000000000050000000
*000000005100000000000000520000000000000053000000000000005400000000000000550000
*000000000056000000000000005700000000000000580900000000000000560000000000000057
*000000000000005800000000000000530000000000000054000000000000005500000000000000
*500000000000000051000000000000005200000000000000000000000000000010000108000000
*700000006f000000720000007400000061000000620000006c00000065010c0000006500000078
*000000700000006500000072000000690000006d000000650000006e0000007400000061000000
*6c01150000006c0000006900000062000000720000006100000072000000690000006500000073
*000000400000006800000061000000730000006b000000650000006c0000006c0000002e000000
*6f0000007200000067002900000000000000b900000000000000ba00000000000000bb00000000
*000000b600000000000000bc00000000000000bd00000000000000be00000000000000bf000000
*00000000c000000000000000c100000000000000c200000000000000c300000000000000c40000
*0000000000c500000000000000c600000000000000c700000000000000c800000000000000c900
*000000000000ca00000000000000cb00000000000000cc00000000000000cd00000000000000ce
*00000000000000cf00000000000000d000000000000000d100000000000000d200000000000000
*d3000000000000004d000000000000004e000000000000004f0000000000000050000000000000
*005100000000000000520000000000000053000000000000005400000000000000550000000000
*000056000000000000005700000000000000580000000000000059010000000000000059000000
*0000000000000000000000001100011e000000700000006f000000720000007400000061000000
*620000006c000000650000002000000028000000690000006e0000007300000074000000610000
*006e00000063000000650000007300000020000000750000007300000065000000200000004d00
*00005000000054000000430000007300000029010c000000650000007800000070000000650000
*0072000000690000006d000000650000006e00000074000000610000006c01150000006c000000
*690000006200000072000000610000007200000069000000650000007300000040000000680000
*0061000000730000006b000000650000006c0000006c0000002e0000006f000000720000006702
*000000000000005a0b021f00000061000000200000002a00000020000000280000006200000020
*0000002b000000200000006300000029000000200000003d000000200000002800000061000000
*200000002a000000200000006200000029000000200000002b0000002000000028000000610000
*00200000002a000000200000006300000029000000000000005b0b021f00000028000000610000
*00200000002b000000200000006200000029000000200000002a00000020000000630000002000
*00003d000000200000002800000061000000200000002a00000020000000630000002900000020
*0000002b000000200000002800000062000000200000002a000000200000006300000029290000
*0000000000b900000000000000ba00000000000000bb00000000000000b600000000000000bc00
*000000000000bd00000000000000be00000000000000bf00000000000000c000000000000000c1
*00000000000000c200000000000000c300000000000000c400000000000000c500000000000000
*c600000000000000c700000000000000c800000000000000c900000000000000ca000000000000
*00cb00000000000000cc00000000000000cd00000000000000ce00000000000000cf0000000000
*0000d000000000000000d100000000000000d200000000000000d3000000000000004d00000000
*0000004e0000000000000050000000000000005100000000000000520000000000000053000000
*000000005400000000000000550000000000000056000000000000005700000000000000580000
*00000000005a000000000000005b02000000000000005a000000000000005b0000000000000000
*00000000000000120001140000006e0000006f0000006e0000002d000000700000006f00000072
*0000007400000061000000620000006c0000006500000020000000280000004d00000050000000
*54000000430000007300000029010c000000650000007800000070000000650000007200000069
*0000006d000000650000006e00000074000000610000006c01150000006c000000690000006200
*000072000000610000007200000069000000650000007300000040000000680000006100000073
*0000006b000000650000006c0000006c0000002e0000006f000000720000006701000000000000
*005c03010202000000410000002001040100000000000000005c00000000000000000000000000
*00001201021800000020000000690000007300000020000000610000006e000000200000006900
*00006e0000007300000074000000610000006e0000006300000065000000200000006f00000066
*00000020000000620000006f000000740000006800000020010401000000000000000056000000
*0000000000000000000000000f01020500000020000000610000006e0000006400000020010401
*0000000000000000b6000000000000002300000000000000240102080000002000000077000000
*68000000650000007200000065000000200000000a010203000000200000002000000020010401
*0000000000000000580000000000000000000000000000000f0102120000002000000064000000
*690000007300000074000000720000006900000062000000750000007400000065000000730000
*00200000006f0000007600000065000000720000002001040100000000000000004d0000000000
*000000000000000000000d02020000002e0000000a2a00000000000000b900000000000000ba00
*000000000000bb00000000000000b600000000000000bc00000000000000bd00000000000000be
*00000000000000bf00000000000000c000000000000000c100000000000000c200000000000000
*c300000000000000c400000000000000c500000000000000c600000000000000c7000000000000
*00c800000000000000c900000000000000ca00000000000000cb00000000000000cc0000000000
*0000cd00000000000000ce00000000000000cf00000000000000d000000000000000d100000000
*000000d200000000000000d3000000000000004d000000000000004e0000000000000050000000
*000000005100000000000000520000000000000053000000000000005400000000000000550000
*00000000005600000000000000570000000000000058000000000000005a000000000000005b00
*0000000000005c01000000000000005c0000000000000000000000000000001300000000040000
*00000000005d03010204000000540000006800000065000000200104010000000000000000b600
*000000000000230000000000000024010201000000200107010201000000280104010000000000
*000000de0000000000000023000000000000002c0102010000002c0104010000000000000000df
*00000000000000230000000000000025020100000029010206000000200000006f000000760000
*0065000000720000002001070104010000000000000000b7000000000000002300000000000000
*250202000000200000006101020700000020000000770000006800000065000000720000006500
*0000200104010000000000000000df000000000000002300000000000000250214000000200000
*0069000000730000002000000074000000680000006500000020000000740000006f0000007000
*000020000000650000006c000000650000006d000000650000006e000000740000000a00000000
*0000006003010204000000540000006800000065000000200104010000000000000000b6000000
*000000002300000000000000240102010000002001070102010000002801040100000000000000
*00e00000000000000023000000000000002c0102010000002c0104010000000000000000df0000
*0000000000230000000000000025020100000029010206000000200000006f0000007600000065
*000000720000002001070104010000000000000000b70000000000000023000000000000002502
*020000002000000061010207000000200000007700000068000000650000007200000065000000
*200104010000000000000000df0000000000000023000000000000002502170000002000000069
*000000730000002000000074000000680000006500000020000000620000006f00000074000000
*740000006f0000006d00000020000000650000006c000000650000006d000000650000006e0000
*00740000000a000000000000006303010204000000540000006800000065000000200104010000
*000000000000b60000000000000023000000000000002401020a00000020000000670000006900
*000076000000650000006e00000020000000620000007900000020010701020100000028010401
*0000000000000000de0000000000000023000000000000002c0102010000002c01040100000000
*00000000e10000000000000023000000000000002d02010000002902010000000a000000000000
*006603010204000000540000006800000065000000200104010000000000000000b60000000000
*0000230000000000000024010201000000200107010201000000280104010000000000000000e0
*0000000000000023000000000000002c0102010000002c0104010000000000000000e200000000
*00000023000000000000002d02010000002902010000000a1300000000000000b9000000000000
*00bb00000000000000b600000000000000000000000000000001000000000000005d0000000000
*00005e000000000000005f00000000000000600000000000000061000000000000006200000000
*000000630000000000000064000000000000006500000000000000660000000000000067000000
*00000000680000000000000069000000000000006a0e0000000000000066000000000000006700
*000000000000680000000000000063000000000000006400000000000000650000000000000060
*000000000000006100000000000000620000000000000069000000000000005d00000000000000
*5e000000000000005f000000000000006a00000000000000000000000000000014000000000100
*0000000000006b0103010204000000540000006800000065000000200104010000000000000000
*5c0000000000000000000000000000001201020100000020010701020100000028010401000000
*0000000000de0000000000000023000000000000002c0102010000002c01040100000000000000
*00e30000000000000023000000000000002d020100000029010206000000200000006f00000076
*00000065000000720000002001070102010000006101020f000000200000006500000078000000
*74000000650000006e000000640000006500000064000000200000007700000069000000740000
*006800000020040100000000000000006e00000000000000000000000000000014010202000000
*2e0000000a0102080000002000000020000000200000005700000068000000650000006e000000
*200107020100000061010248000000200000006800000061000000730000002000000061000000
*200000004e000000750000006d00000020000000690000006e0000007300000074000000610000
*006e00000063000000650000002000000077000000690000007400000068000000200000006100
*00006e000000200000006100000064000000640000006900000074000000690000006f0000006e
*000000200000007400000068000000610000007400000020000000720000006500000073000000
*7000000065000000630000007400000073000000200000006f0000007200000064000000650000
*00720000002c000000200000007400000068000000650000006e00000020000000740000006800
*00006900000073000000200000006900000073000000200000000a010253000000200000002000
*0000200000007400000072000000610000006e00000073000000660000006f000000720000006d
*000000650000006400000020000000690000006e000000740000006f0000002000000061000000
*2000000074000000720000006f000000700000006900000063000000610000006c000000200000
*0073000000650000006d0000006900000072000000690000006e000000670000002e0000002000
*000049000000740000002000000069000000730000002000000061000000730000007300000075
*0000006d0000006500000064000000200000007400000068000000610000007400000020000000
*3000000020000000690000007300000020000000740000006800000065000000200000006c0000
*006500000061000000730000007400000020000000650000006c000000650000006d0000006500
*00006e000000740000000a02090000002000000020000000200000006f00000066000000200000
*00610000002e0000000a03010c41000000680000007400000074000000700000003a0000002f00
*00002f00000068000000610000006c0000002e0000006100000072000000630000006800000069
*0000007600000065000000730000002d0000006f00000075000000760000006500000072000000
*7400000065000000730000002e00000066000000720000002f000000640000006f000000630000
*00730000002f00000030000000300000002f00000031000000310000002f000000330000003700
*00002f00000037000000390000002f0000005000000044000000460000002f0000005400000072
*0000006f000000700000006900000063000000610000006c0000002e0000007000000064000000
*6602010000000a3000000000000000b900000000000000ba00000000000000bb00000000000000
*b600000000000000bc00000000000000bd00000000000000be00000000000000bf000000000000
*00c000000000000000c100000000000000c200000000000000c300000000000000c40000000000
*0000c500000000000000c600000000000000c700000000000000c800000000000000c900000000
*000000ca00000000000000cb00000000000000cc00000000000000cd00000000000000ce000000
*00000000cf00000000000000d000000000000000d100000000000000d200000000000000d30000
*0000000000000000000000000001000000000000004d000000000000004e000000000000005000
*000000000000510000000000000052000000000000005300000000000000540000000000000055
*000000000000005600000000000000570000000000000058000000000000005a00000000000000
*5b000000000000005c000000000000006b000000000000006c000000000000006d000000000000
*006e04000000000000006e000000000000006b000000000000006c000000000000006d00000000
*0000000000000000000000150000010c0000006500000078000000700000006500000072000000
*690000006d000000650000006e00000074000000610000006c0110000000650000006b0000006d
*00000065000000740000007400000040000000670000006d00000061000000690000006c000000
*2e000000630000006f0000006d02000000000000006f0301020200000041000000200104010000
*0000000000005c0000000000000000000000000000001201020c00000020000000770000006800
*000069000000630000006800000020000000610000006400000064000000730000002001040100
*00000000000000e20000000000000023000000000000002d01020500000020000000610000006e
*00000064000000200104010000000000000000e10000000000000023000000000000002d021900
*000020000000740000006f0000002000000061000000200000007000000072000000650000002d
*0000006500000078000000690000007300000074000000690000006e0000006700000020000000
*740000007900000070000000650000002e0000000a000000000000007303010202000000410000
*002001040100000000000000005c0000000000000000000000000000001201020d000000200000
*007500000073000000690000006e00000067000000200000006100000020000000740000007900
*0000700000006501020100000027021d0000007300000020000000620000007500000069000000
*6c000000740000002d000000690000006e00000020000000420000006f000000750000006e0000
*0064000000650000006400000020000000690000006e0000007300000074000000610000006e00
*000063000000650000002e0000000a3100000000000000b900000000000000ba00000000000000
*bb00000000000000b600000000000000bc00000000000000bd00000000000000be000000000000
*00bf00000000000000c000000000000000c100000000000000c200000000000000c30000000000
*0000c400000000000000c500000000000000c600000000000000c700000000000000c800000000
*000000c900000000000000ca00000000000000cb00000000000000cc00000000000000cd000000
*00000000ce00000000000000cf00000000000000d000000000000000d100000000000000d20000
*0000000000d3000000000000004d000000000000004e0000000000000050000000000000005100
*000000000000520000000000000053000000000000005400000000000000550000000000000056
*00000000000000570000000000000058000000000000005a000000000000005b00000000000000
*5c000000000000006f000000000000007000000000000000710000000000000072000000000000
*007300000000000000740000000000000075070000000000000073000000000000007400000000
*00000075000000000000006f000000000000007200000000000000710000000000000070000000
*0000000000000000000000002e000108000000700000006f000000720000007400000061000000
*620000006c00000065010c0000006500000078000000700000006500000072000000690000006d
*000000650000006e00000074000000610000006c01150000006c00000069000000620000007200
*00006100000072000000690000006500000073000000400000006800000061000000730000006b
*000000650000006c0000006c0000002e0000006f0000007200000067002b00000000000000b900
*000000000000ba00000000000000bb00000000000000b600000000000000bc00000000000000bd
*00000000000000be00000000000000bf00000000000000c000000000000000c100000000000000
*c200000000000000c300000000000000c400000000000000c500000000000000c6000000000000
*00c700000000000000c800000000000000c900000000000000ca00000000000000cb0000000000
*0000cc00000000000000cd00000000000000ce00000000000000cf00000000000000d000000000
*000000d100000000000000d200000000000000d3000000000000004d000000000000004e000000
*000000004f00000000000000500000000000000051000000000000005200000000000000530000
*000000000054000000000000005500000000000000560000000000000057000000000000005800
*00000000000059000000000000005a000000000000005b00000000000000000000000000000000
*16000108000000700000006f000000720000007400000061000000620000006c00000065010c00
*00006500000078000000700000006500000072000000690000006d000000650000006e00000074
*000000610000006c011f0000004500000064000000770000006100000072000000640000002000
*00004b0000006d000000650000007400000074000000200000003c000000650000006b0000006d
*00000065000000740000007400000040000000670000006d00000061000000690000006c000000
*2e000000630000006f0000006d0000003e0100000000000000760301021d0000004d0000006900
*00006e000000690000006d000000610000006c00000020000000630000006f0000006d00000070
*0000006c0000006500000074000000650000002000000064000000650000006600000069000000
*6e0000006900000074000000690000006f0000006e0000003a0000002001040100000000000000
*007700000000000000000000000000000016010204000000200000006f00000072000000200104
*010000000000000000780000000000000000000000000000001602010000000a22000000000000
*00b900000000000000ba00000000000000bb00000000000000b600000000000000bc0000000000
*0000bd00000000000000be00000000000000bf00000000000000c000000000000000c100000000
*000000c200000000000000c300000000000000c400000000000000c500000000000000c6000000
*00000000c700000000000000c800000000000000c900000000000000ca00000000000000cb0000
*0000000000cc00000000000000cd00000000000000ce00000000000000cf00000000000000d000
*000000000000d100000000000000d200000000000000d3000000000000004d000000000000004e
*000000000000007600000000000000770000000000000078000000000000007904000000000000
*007600000000000000770000000000000079000000000000007800000000000000000000000000
*000017000108000000700000006f000000720000007400000061000000620000006c0000006501
*0c0000006500000078000000700000006500000072000000690000006d000000650000006e0000
*0074000000610000006c01150000006c0000006900000062000000720000006100000072000000
*690000006500000073000000400000006800000061000000730000006b000000650000006c0000
*006c0000002e0000006f0000007200000067002300000000000000b900000000000000ba000000
*00000000bb00000000000000b600000000000000bc00000000000000bd00000000000000be0000
*0000000000bf00000000000000c000000000000000c100000000000000c200000000000000c300
*000000000000c400000000000000c500000000000000c600000000000000c700000000000000c8
*00000000000000c900000000000000ca00000000000000cb00000000000000cc00000000000000
*cd00000000000000ce00000000000000cf00000000000000d000000000000000d1000000000000
*00d200000000000000d3000000000000004d000000000000004e00000000000000760000000000
*00007700000000000000780000000000000079000000000000007a01000000000000007a000000
*00000000000000000000000018000108000000700000006f000000720000007400000061000000
*620000006c00000065010c0000006500000078000000700000006500000072000000690000006d
*000000650000006e00000074000000610000006c01150000006c00000069000000620000007200
*00006100000072000000690000006500000073000000400000006800000061000000730000006b
*000000650000006c0000006c0000002e0000006f0000007200000067002600000000000000b900
*000000000000ba00000000000000bb00000000000000b600000000000000bc00000000000000bd
*00000000000000be00000000000000bf00000000000000c000000000000000c100000000000000
*c200000000000000c300000000000000c400000000000000c500000000000000c6000000000000
*00c700000000000000c800000000000000c900000000000000ca00000000000000cb0000000000
*0000cc00000000000000cd00000000000000ce00000000000000cf00000000000000d000000000
*000000d100000000000000d200000000000000d3000000000000004d000000000000004e000000
*000000004f00000000000000760000000000000077000000000000007800000000000000790000
*00000000007b000000000000007c000000000000007d03000000000000007b000000000000007c
*000000000000007d0000000000000000000000000000001900000000002f00000000000000b900
*000000000000ba00000000000000bb00000000000000b600000000000000bc00000000000000bd
*00000000000000be00000000000000bf00000000000000c000000000000000c100000000000000
*c200000000000000c300000000000000c400000000000000c500000000000000c6000000000000
*00c700000000000000c800000000000000c900000000000000ca00000000000000cb0000000000
*0000cc00000000000000cd00000000000000ce00000000000000cf00000000000000d000000000
*000000d100000000000000d200000000000000d3000000000000004d000000000000004e000000
*000000005000000000000000510000000000000052000000000000005300000000000000540000
*000000000055000000000000005600000000000000570000000000000058000000000000005a00
*0000000000005b000000000000005c000000000000007600000000000000770000000000000078
*0000000000000079000000000000007e01000000000000007e0000000000000000000000000000
*001a0001140000006e0000006f0000006e0000002d000000700000006f00000072000000740000
*0061000000620000006c0000006500000020000000280000004d00000050000000540000004300
*00007300000029010c0000006500000078000000700000006500000072000000690000006d0000
*00650000006e00000074000000610000006c01150000006c000000690000006200000072000000
*6100000072000000690000006500000073000000400000006800000061000000730000006b0000
*00650000006c0000006c0000002e0000006f0000007200000067003200000000000000b9000000
*00000000ba00000000000000bb00000000000000b600000000000000bc00000000000000bd0000
*0000000000be00000000000000bf00000000000000c000000000000000c100000000000000c200
*000000000000c300000000000000c400000000000000c500000000000000c600000000000000c7
*00000000000000c800000000000000c900000000000000ca00000000000000cb00000000000000
*cc00000000000000cd00000000000000ce00000000000000cf00000000000000d0000000000000
*00d100000000000000d200000000000000d3000000000000004d000000000000004e0000000000
*000050000000000000005100000000000000520000000000000053000000000000005400000000
*00000055000000000000005600000000000000570000000000000058000000000000005a000000
*000000005b000000000000005c0000000000000076000000000000007700000000000000780000
*000000000079000000000000007e000000000000007f0000000000000080000000000000008103
*000000000000007f00000000000000800000000000000081000000000000000000000000000000
*1b0001140000006e0000006f0000006e0000002d000000700000006f0000007200000074000000
*61000000620000006c0000006500000020000000280000004d0000005000000054000000430000
*007300000029010c0000006500000078000000700000006500000072000000690000006d000000
*650000006e00000074000000610000006c01150000006c00000069000000620000007200000061
*00000072000000690000006500000073000000400000006800000061000000730000006b000000
*650000006c0000006c0000002e0000006f0000007200000067003200000000000000b900000000
*000000ba00000000000000bb00000000000000b600000000000000bc00000000000000bd000000
*00000000be00000000000000bf00000000000000c000000000000000c100000000000000c20000
*0000000000c300000000000000c400000000000000c500000000000000c600000000000000c700
*000000000000c800000000000000c900000000000000ca00000000000000cb00000000000000cc
*00000000000000cd00000000000000ce00000000000000cf00000000000000d000000000000000
*d100000000000000d200000000000000d3000000000000004d000000000000004e000000000000
*005000000000000000510000000000000052000000000000005300000000000000540000000000
*000055000000000000005600000000000000570000000000000058000000000000005a00000000
*0000005b000000000000005c000000000000007600000000000000770000000000000078000000
*0000000079000000000000007e0000000000000082000000000000008300000000000000840300
*00000000000082000000000000008300000000000000840000000000000000000000000000001c
*0001140000006e0000006f0000006e0000002d000000700000006f000000720000007400000061
*000000620000006c0000006500000020000000280000004d000000500000005400000043000000
*7300000029010c0000006500000078000000700000006500000072000000690000006d00000065
*0000006e00000074000000610000006c01150000006c0000006900000062000000720000006100
*000072000000690000006500000073000000400000006800000061000000730000006b00000065
*0000006c0000006c0000002e0000006f00000072000000670300000000000000850b021e000000
*200000002800000078000000200000002a0000002e000000200000006d00000029000000200000
*002e0000002a0000002000000079000000200000003d0000002000000078000000200000002a00
*00002e00000020000000280000006d000000200000002e0000002a000000200000007900000029
*00000000000000860b021c00000020000000280000006d000000200000002e0000002a00000020
*0000007800000029000000200000002a0000002000000079000000200000003d00000020000000
*6d000000200000002e0000002a000000200000002800000078000000200000002a000000200000
*00790000002900000000000000880b021c000000200000002800000078000000200000002a0000
*00200000007900000029000000200000002a0000002e000000200000006d000000200000003d00
*00002000000078000000200000002a000000200000002800000079000000200000002a0000002e
*000000200000006d000000293400000000000000b900000000000000ba00000000000000bb0000
*0000000000b600000000000000bc00000000000000bd00000000000000be00000000000000bf00
*000000000000c000000000000000c100000000000000c200000000000000c300000000000000c4
*00000000000000c500000000000000c600000000000000c700000000000000c800000000000000
*c900000000000000ca00000000000000cb00000000000000cc00000000000000cd000000000000
*00ce00000000000000cf00000000000000d000000000000000d100000000000000d20000000000
*0000d3000000000000004d000000000000004e0000000000000050000000000000005100000000
*000000520000000000000053000000000000005400000000000000550000000000000056000000
*00000000570000000000000058000000000000005a000000000000005b000000000000005c0000
*000000000076000000000000007700000000000000780000000000000079000000000000007e00
*000000000000850000000000000086000000000000008700000000000000880000000000000089
*050000000000000088000000000000008900000000000000860000000000000087000000000000
*00850000000000000000000000000000001d0001140000006e0000006f0000006e0000002d0000
*00700000006f000000720000007400000061000000620000006c00000065000000200000002800
*00004d0000005000000054000000430000007300000029010c0000006500000078000000700000
*006500000072000000690000006d000000650000006e00000074000000610000006c0115000000
*6c0000006900000062000000720000006100000072000000690000006500000073000000400000
*006800000061000000730000006b000000650000006c0000006c0000002e0000006f0000007200
*00006704000000000000008a03010203000000690000006600000020010702010000006d010206
*000000200000006900000073000000200000006100000020010401000000000000000085000000
*0000000000000000000000001c01020500000020000000610000006e0000006400000020010702
*010000006601020600000020000000690000007300000020000000610000002001040100000000
*00000000e40000000000000023000000000000002f010206000000200000007400000068000000
*650000006e000000200107010202000000660000002001040200000000000000008b0000000000
*000000000000000000001d00000000000000008a0000000000000000000000000000001d020200
*0000200000006d0102060000002000000069000000730000002000000061000000200104010000
*000000000000850000000000000000000000000000001c02090000002000000061000000730000
*002000000077000000650000006c0000006c0000000a000000000000008d030102020000004100
*00002001040200000000000000008e0000000000000000000000000000001d0000000000000000
*8d0000000000000000000000000000001d01020b00000020000000740000007500000072000000
*6e0000007300000020000000610000006e00000079000000200104010000000000000000e50000
*000000000023000000000000002f01021100000020000000690000006e00000073000000740000
*00610000006e000000630000006500000020000000690000006e000000740000006f0000002000
*000061000000200104010000000000000000b60000000000000023000000000000002401020200
*00002e0000000a0102160000002000000020000000200000004900000074000000200000006100
*00006c000000730000006f0000002000000070000000720000006f000000760000006900000064
*000000650000007300000020000000610000002001040100000000000000005600000000000000
*00000000000000000f01021100000020000000690000006e000000730000007400000061000000
*6e000000630000006500000020000000660000006f0000007200000020000000610000006e0000
*00200104010000000000000000e40000000000000023000000000000002f01021a000000200000
*0066000000750000006e00000063000000740000006f0000007200000020000000770000007200
*000061000000700000007000000065000000640000002000000061000000720000006f00000075
*0000006e000000640000002000000061000000200104010000000000000000b600000000000000
*2300000000000000240102010000000a010218000000200000002000000020000000610000006e
*000000640000002000000061000000730000007300000065000000720000007400000073000000
*200000007400000068000000610000007400000020000000610000006e00000079000000200104
*010000000000000000e50000000000000023000000000000002f01020e00000020000000610000
*0070000000700000006c00000069000000650000006400000020000000740000006f0000002000
*000061000000200104010000000000000000b60000000000000023000000000000002401020900
*000020000000660000006f000000720000006d0000007300000020000000610000002001040100
*000000000000005a00000000000000000000000000000011010202000000200000000a021b0000
*00200000002000000020000000750000006e000000640000006500000072000000200000007400
*000068000000650000007300000065000000200000006f00000070000000650000007200000061
*00000074000000690000006f0000006e000000730000002e0000000a0000000000000090030102
*0200000041000000200104020000000000000000910000000000000000000000000000001d0000
*000000000000900000000000000000000000000000001d01021800000020000000750000007300
*0000650000007300000020000000610000006e00000020000000670000006c0000007500000065
*0000007300000020000000740000006f0000006700000065000000740000006800000065000000
*72000000200104010000000000000000e40000000000000023000000000000002f010213000000
*20000000610000006300000074000000690000006f0000006e0000007300000020000000770000
*0069000000740000006800000020000000280000002a0000003e000000290000000a0102140000
*00200000002000000020000000690000006e000000200000007400000068000000650000002000
*00006d000000610000006e0000006e0000006500000072000000200000006f0000006600000020
*01020900000074000000720000006100000076000000650000007200000073000000650000005f
*0102060000002000000066000000720000006f0000006d0000002001050d000000440000006100
*000074000000610000002e000000460000006f0000006c0000006400000061000000620000006c
*0000006501021a0000002e00000020000000410000006e00000079000000200000007600000061
*0000006c0000007500000065000000730000002000000072000000650000007400000075000000
*720000006e0000006500000064000000200000006200000079000000200000000a022200000020
*000000200000002000000072000000650000006400000075000000630000006500000064000000
*20000000610000006300000074000000690000006f0000006e0000007300000020000000610000
*007200000065000000200000006400000069000000730000006300000061000000720000006400
*000065000000640000002e0000000a000000000000009303010232000000450000006600000066
*000000690000006300000069000000650000006e000000740000006c0000007900000020000000
*61000000760000006f0000006900000064000000200000006e0000006500000065000000640000
*006c0000006500000073000000730000006c000000790000002000000072000000650000006200
*0000690000006e00000064000000690000006e0000006700000020000000770000006800000065
*0000006e000000200000007500000073000000690000006e000000670000002001040100000000
*000000000200000000000000000000000000000001010226000000200000006f0000006e000000
*20000000610000006e00000020000000610000006300000074000000690000006f0000006e0000
*00200000007400000068000000610000007400000020000000610000006c000000720000006500
*00006100000064000000790000002000000072000000650000007400000075000000720000006e
*000000730000002000000028000000290000000a023b0000002000000020000000200000004100
*000020000000720000006500000077000000720000006900000074000000650000002000000072
*000000750000006c00000065000000200000006100000075000000740000006f0000006d000000
*61000000740000006900000063000000610000006c0000006c0000007900000020000000610000
*0070000000700000006c0000006900000065000000730000002000000074000000680000006900
*000073000000200000007700000068000000650000006e00000020000000700000006f00000073
*0000007300000069000000620000006c000000650000000a4600000000000000b9000000000000
*00ba00000000000000bb00000000000000b600000000000000bc00000000000000bd0000000000
*0000be00000000000000bf00000000000000c000000000000000c100000000000000c200000000
*000000c300000000000000c400000000000000c500000000000000c600000000000000c7000000
*00000000c800000000000000c900000000000000ca00000000000000cb00000000000000cc0000
*0000000000cd00000000000000ce00000000000000cf00000000000000d000000000000000d100
*000000000000d200000000000000d3000000000000000000000000000000010000000000000002
*000000000000000300000000000000040000000000000005000000000000000600000000000000
*07000000000000004d000000000000004e00000000000000500000000000000051000000000000
*005200000000000000530000000000000054000000000000005500000000000000560000000000
*0000570000000000000058000000000000005a000000000000005b000000000000005c00000000
*00000076000000000000007700000000000000780000000000000079000000000000007e000000
*000000008500000000000000860000000000000087000000000000008800000000000000890000
*00000000008a000000000000008b000000000000008c000000000000008d000000000000008e00
*0000000000008f0000000000000090000000000000009100000000000000920000000000000093
*0a000000000000009000000000000000910000000000000092000000000000008d000000000000
*008e000000000000008f000000000000008a000000000000008b000000000000008c0000000000
*0000930000000000000000000000000000001e0001140000006e0000006f0000006e0000002d00
*0000700000006f000000720000007400000061000000620000006c000000650000002000000028
*0000004d0000005000000054000000430000007300000029010c00000065000000780000007000
*00006500000072000000690000006d000000650000006e00000074000000610000006c01150000
*006c00000069000000620000007200000061000000720000006900000065000000730000004000
*00006800000061000000730000006b000000650000006c0000006c0000002e0000006f00000072
*0000006704000000000000009403010203000000690000006600000020010702010000006d0102
*060000002000000069000000730000002000000061000000200104010000000000000000850000
*000000000000000000000000001c010206000000200000006f0000007600000065000000720000
*0020010702010000007201020500000020000000610000006e0000006400000020010702010000
*006601020600000020000000690000007300000020000000610000002001040100000000000000
*00e600000000000000230000000000000030010206000000200000007400000068000000650000
*006e00000020010701020200000066000000200104020000000000000000950000000000000000
*000000000000001e0000000000000000940000000000000000000000000000001e020200000020
*0000006d0102060000002000000069000000730000002000000061000000200104010000000000
*000000850000000000000000000000000000001c02090000002000000061000000730000002000
*000077000000650000006c0000006c0000000a0000000000000097030102020000004100000020
*0104020000000000000000980000000000000000000000000000001e0000000000000000970000
*000000000000000000000000001e01020b000000200000007400000075000000720000006e0000
*007300000020000000610000006e00000079000000200104010000000000000000e70000000000
*000023000000000000003001021100000020000000690000006e00000073000000740000006100
*00006e000000630000006500000020000000690000006e000000740000006f0000002000000061
*000000200104010000000000000000b6000000000000002300000000000000240102020000002e
*0000000a010216000000200000002000000020000000490000007400000020000000610000006c
*000000730000006f0000002000000070000000720000006f000000760000006900000064000000
*650000007300000020000000610000002001040100000000000000005600000000000000000000
*00000000000f01021000000020000000690000006e0000007300000074000000610000006e0000
*00630000006500000020000000660000006f000000720000002000000061000000200104010000
*000000000000e60000000000000023000000000000003001021200000020000000770000007200
*000061000000700000007000000065000000640000002000000061000000720000006f00000075
*0000006e000000640000002000000061000000200104010000000000000000b600000000000000
*2300000000000000240102010000000a010218000000200000002000000020000000610000006e
*000000640000002000000061000000730000007300000065000000720000007400000073000000
*200000007400000068000000610000007400000020000000610000006e00000079000000200104
*010000000000000000e70000000000000023000000000000003001020e00000020000000610000
*0070000000700000006c00000069000000650000006400000020000000740000006f0000002000
*000061000000200104010000000000000000b60000000000000023000000000000002401020900
*000020000000660000006f000000720000006d0000007300000020000000610000002001040100
*000000000000005a00000000000000000000000000000011010202000000200000000a021b0000
*00200000002000000020000000750000006e000000640000006500000072000000200000007400
*000068000000650000007300000065000000200000006f00000070000000650000007200000061
*00000074000000690000006f0000006e000000730000002e0000000a000000000000009a030102
*03000000410000006e0000002001040200000000000000009b0000000000000000000000000000
*001e00000000000000009a0000000000000000000000000000001e010215000000200000007500
*000073000000650000007300000020000000670000006c00000075000000650000007300000020
*000000740000006f00000067000000650000007400000068000000650000007200000020010401
*0000000000000000e6000000000000002300000000000000300102130000002000000061000000
*6300000074000000690000006f0000006e00000073000000200000007700000069000000740000
*006800000020000000280000003e0000003e000000290000000a01021400000020000000200000
*0020000000690000006e00000020000000740000006800000065000000200000006d0000006100
*00006e0000006e0000006500000072000000200000006f00000066000000200104010000000000
*000000e8000000000000002300000000000000300102060000002000000066000000720000006f
*0000006d0000002001050d000000440000006100000074000000610000002e000000460000006f
*0000006c0000006400000061000000620000006c0000006501021a0000002e0000002000000041
*0000006e000000790000002000000076000000610000006c000000750000006500000073000000
*2000000072000000650000007400000075000000720000006e0000006500000064000000200000
*006200000079000000200000000a02220000002000000020000000200000007200000065000000
*640000007500000063000000650000006400000020000000610000006300000074000000690000
*006f0000006e000000730000002000000061000000720000006500000020000000640000006900
*0000730000006300000061000000720000006400000065000000640000002e0000000a00000000
*0000009d0301023200000045000000660000006600000069000000630000006900000065000000
*6e000000740000006c000000790000002000000061000000760000006f00000069000000640000
*00200000006e0000006500000065000000640000006c0000006500000073000000730000006c00
*00007900000020000000720000006500000062000000690000006e00000064000000690000006e
*00000067000000200000007700000068000000650000006e000000200000007500000073000000
*690000006e00000067000000200104010000000000000000020000000000000000000000000000
*0001010226000000200000006f0000006e00000020000000610000006e00000020000000610000
*006300000074000000690000006f0000006e000000200000007400000068000000610000007400
*000020000000610000006c00000072000000650000006100000064000000790000002000000072
*000000650000007400000075000000720000006e00000073000000200000002800000029000000
*0a023b000000200000002000000020000000410000002000000072000000650000007700000072
*0000006900000074000000650000002000000072000000750000006c0000006500000020000000
*6100000075000000740000006f0000006d00000061000000740000006900000063000000610000
*006c0000006c00000079000000200000006100000070000000700000006c000000690000006500
*000073000000200000007400000068000000690000007300000020000000770000006800000065
*0000006e00000020000000700000006f000000730000007300000069000000620000006c000000
*650000000a3b00000000000000b900000000000000ba00000000000000bb00000000000000b600
*000000000000bc00000000000000bd00000000000000be00000000000000bf00000000000000c0
*00000000000000c100000000000000c200000000000000c300000000000000c400000000000000
*c500000000000000c600000000000000c700000000000000c800000000000000c9000000000000
*00ca00000000000000cb00000000000000cc00000000000000cd00000000000000ce0000000000
*0000cf00000000000000d000000000000000d100000000000000d200000000000000d300000000
*000000000000000000000001000000000000000200000000000000030000000000000004000000
*000000000500000000000000060000000000000007000000000000004d000000000000004e0000
*000000000050000000000000005100000000000000520000000000000053000000000000005400
*00000000000055000000000000005600000000000000570000000000000058000000000000005a
*000000000000005b00000000000000940000000000000095000000000000009600000000000000
*9700000000000000980000000000000099000000000000009a000000000000009b000000000000
*009c000000000000009d0a000000000000009a000000000000009b000000000000009c00000000
*0000009d0000000000000094000000000000009500000000000000960000000000000097000000
*000000009800000000000000990000000000000000000000000000001f0001230000006e000000
*6f0000006e0000002d000000700000006f000000720000007400000061000000620000006c0000
*006500000020000000280000007400000079000000700000006500000020000000660000006100
*00006d000000690000006c0000006900000065000000730000002c000000200000004d00000050
*00000054000000430000007300000029010c000000650000007800000070000000650000007200
*0000690000006d000000650000006e00000074000000610000006c01150000006c000000690000
*006200000072000000610000007200000069000000650000007300000040000000680000006100
*0000730000006b000000650000006c0000006c0000002e0000006f000000720000006714000000
*000000009e0301020c000000450000006600000066000000690000006300000069000000650000
*006e000000740000006c0000007900000020010401000000000000000027000000000000000000
*000000000000060102030000002000000061000000200104010000000000000000250000000000
*000000000000000000000601020b000000200000007500000073000000690000006e0000006700
*000020000000740000006800000065000000200104020000000000000000910000000000000000
*000000000000001d0000000000000000900000000000000000000000000000001d010232000000
*200000006d0000006f0000006e0000006f00000069000000640000002e00000020000000410000
*00200000007300000070000000650000006300000069000000610000006c000000690000007a00
*000065000000640000002000000076000000650000007200000073000000690000006f0000006e
*000000200000006f0000006600000020000000690000007400000073000000200000006e000000
*610000006d0000006500000073000000610000006b0000006500000020000000690000006e0000
*002001050d000000440000006100000074000000610000002e000000460000006f0000006c0000
*006400000061000000620000006c0000006502010000000a000000000000009f03010208000000
*660000006c00000069000000700000007000000065000000640000002001040100000000000000
*009e0000000000000000000000000000001f010207000000200000006100000073000000200000
*00690000006e0000002001050d000000440000006100000074000000610000002e000000460000
*006f0000006c0000006400000061000000620000006c0000006502010000000a00000000000000
*a00301020c000000450000006600000066000000690000006300000069000000650000006e0000
*00740000006c000000790000002001040100000000000000002700000000000000000000000000
*000006010203000000200000006100000020010401000000000000000025000000000000000000
*0000000000000601020b000000200000007500000073000000690000006e000000670000002000
*00007400000068000000650000002001040200000000000000009b000000000000000000000000
*0000001e00000000000000009a0000000000000000000000000000001e01023400000020000000
*6d0000006f0000006e0000006f00000069000000640000002e0000002000000041000000200000
*007300000070000000650000006300000069000000610000006c000000690000007a0000006500
*0000640000002000000076000000650000007200000073000000690000006f0000006e00000020
*0000006f0000006600000020000000690000007400000073000000200000006e00000061000000
*6d0000006500000073000000610000006b000000650000002000000066000000720000006f0000
*006d0000002001050d000000440000006100000074000000610000002e000000460000006f0000
*006c0000006400000061000000620000006c0000006501020500000020000000610000006e0000
*00640000002001050d000000430000006f0000006e00000074000000720000006f0000006c0000
*002e0000004d0000006f0000006e000000610000006402010000000a00000000000000a1030102
*08000000660000006c000000690000007000000070000000650000006400000020010401000000
*0000000000a00000000000000000000000000000001f0102070000002000000061000000730000
*0020000000690000006e0000002001050d000000440000006100000074000000610000002e0000
*00460000006f0000006c0000006400000061000000620000006c00000065010205000000200000
*00610000006e000000640000002001050d000000430000006f0000006e00000074000000720000
*006f0000006c0000002e0000004d0000006f0000006e000000610000006402010000000a000000
*00000000a20301020c000000450000006600000066000000690000006300000069000000650000
*006e000000740000006c0000007900000020010401000000000000000027000000000000000000
*000000000000060102030000002000000061000000200104010000000000000000250000000000
*000000000000000000000601020b000000200000007500000073000000690000006e0000006700
*0000200000007400000068000000650000002001040200000000000000003e0000000000000000
*000000000000000900000000000000003d00000000000000000000000000000009010234000000
*200000006d0000006f0000006e0000006f00000069000000640000002e00000020000000410000
*00200000007300000070000000650000006300000069000000610000006c000000690000007a00
*000065000000640000002000000076000000650000007200000073000000690000006f0000006e
*000000200000006f0000006600000020000000690000007400000073000000200000006e000000
*610000006d0000006500000073000000610000006b000000650000002000000066000000720000
*006f0000006d0000002001050d000000440000006100000074000000610000002e000000460000
*006f0000006c0000006400000061000000620000006c0000006502010000000a00000000000000
*a30301020c000000450000006600000066000000690000006300000069000000650000006e0000
*00740000006c000000790000002001040100000000000000002a00000000000000000000000000
*000006010203000000200000006100000020010401000000000000000025000000000000000000
*0000000000000601020b000000200000007500000073000000690000006e000000670000002000
*00007400000068000000650000002001040200000000000000003e000000000000000000000000
*0000000900000000000000003d0000000000000000000000000000000901023400000020000000
*6d0000006f0000006e0000006f00000069000000640000002e0000002000000041000000200000
*007300000070000000650000006300000069000000610000006c000000690000007a0000006500
*0000640000002000000076000000650000007200000073000000690000006f0000006e00000020
*0000006f0000006600000020000000690000007400000073000000200000006e00000061000000
*6d0000006500000073000000610000006b000000650000002000000066000000720000006f0000
*006d0000002001050d000000440000006100000074000000610000002e000000460000006f0000
*006c0000006400000061000000620000006c0000006502010000000a00000000000000a4030102
*1c0000004100000020000000660000007500000072000000740000006800000065000000720000
*00200000007300000070000000650000006300000069000000610000006c000000690000007a00
*00006100000074000000690000006f0000006e000000200000006f000000660000002001050700
*0000660000006f0000006c000000640000004d000000610000007002010000000a000000000000
*00a50301020c000000450000006600000066000000690000006300000069000000650000006e00
*0000740000006c000000790000002001040100000000000000002a000000000000000000000000
*000000060102030000002000000061000000200104010000000000000000250000000000000000
*000000000000000601021e00000020000000740000006800000061000000740000002000000063
*0000006f0000006e0000007400000061000000690000006e000000730000002000000076000000
*610000006c000000750000006500000073000000200000006f0000006600000020000000740000
*00790000007000000065000000200104010000000000000000e900000000000000280000000000
*00003102010000000a00000000000000a60301020c000000450000006600000066000000690000
*006300000069000000650000006e000000740000006c0000007900000020010401000000000000
*00002a000000000000000000000000000000060102030000002000000061000000200104010000
*000000000000250000000000000000000000000000000601021e00000020000000740000006800
*0000610000007400000020000000630000006f0000006e0000007400000061000000690000006e
*000000730000002000000076000000610000006c00000075000000650000007300000020000000
*6f0000006600000020000000740000007900000070000000650000002001040100000000000000
*00e90000000000000028000000000000003102010000000a00000000000000a70301020c000000
*450000006600000066000000690000006300000069000000650000006e000000740000006c0000
*007900000020010401000000000000000027000000000000000000000000000000060102050000
*0020000000610000006e0000007900000020010401000000000000000025000000000000000000
*00000000000006024300000020000000630000006800000065000000630000006b000000690000
*006e0000006700000020000000740000006f000000200000007300000065000000650000002000
*0000690000006600000020000000610000006e00000079000000200000006f0000006600000020
*0000006900000074000000730000002000000076000000610000006c0000007500000065000000
*73000000200000006d000000610000007400000063000000680000002000000074000000680000
*006500000020000000730000007500000070000000700000006c00000069000000650000006400
*000020000000700000007200000065000000640000006900000063000000610000007400000065
*0000000a00000000000000a80301020c0000004500000066000000660000006900000063000000
*69000000650000006e000000740000006c00000079000000200104010000000000000000270000
*000000000000000000000000000601020500000020000000610000006e00000079000000200104
*010000000000000000250000000000000000000000000000000602430000002000000063000000
*6800000065000000630000006b000000690000006e0000006700000020000000740000006f0000
*002000000073000000650000006500000020000000690000006600000020000000610000006c00
*00006c000000200000006f00000066000000200000006900000074000000730000002000000076
*000000610000006c000000750000006500000073000000200000006d0000006100000074000000
*630000006800000020000000740000006800000065000000200000007300000075000000700000
*00700000006c000000690000006500000064000000200000007000000072000000650000006400
*000069000000630000006100000074000000650000000a00000000000000a90301020c00000045
*0000006600000066000000690000006300000069000000650000006e000000740000006c000000
*790000002001040100000000000000002700000000000000000000000000000006010205000000
*20000000610000006e000000790000002001040100000000000000002500000000000000000000
*00000000000601020b000000200000007500000073000000690000006e00000067000000200000
*00740000006800000065000000200104020000000000000000c900000000000000230000000000
*0000240000000000000000ca000000000000002300000000000000240102010000002001040100
*00000000000000b60000000000000023000000000000002402010000000a00000000000000aa03
*01020c000000450000006600000066000000690000006300000069000000650000006e00000074
*0000006c0000007900000020010401000000000000000027000000000000000000000000000000
*0601020500000020000000610000006e0000007900000020010401000000000000000025000000
*0000000000000000000000000601020b000000200000007500000073000000690000006e000000
*6700000020000000740000006800000065000000200104020000000000000000cc000000000000
*002300000000000000240000000000000000cd0000000000000023000000000000002401020100
*0000200104010000000000000000b60000000000000023000000000000002402010000000a0000
*0000000000ab03010210000000430000006800000065000000630000006b000000200000007400
*00006f000000200000007300000065000000650000002000000069000000660000002001040100
*00000000000000a70000000000000000000000000000001f01020f000000200000006d00000065
*0000006d000000620000006500000072000000200000006f000000660000002000000074000000
*68000000650000002001040100000000000000002500000000000000000000000000000006021c
*000000200000006d00000061000000740000006300000068000000650000007300000020000000
*74000000680000006500000020000000730000007500000070000000700000006c000000690000
*0065000000640000002000000076000000610000006c00000075000000650000000a0000000000
*0000ac03010242000000430000006800000065000000630000006b00000020000000740000006f
*000000200000006d000000610000006b0000006500000020000000730000007500000072000000
*650000002000000074000000680000006100000074000000200000007400000068000000650000
*0020000000730000007500000070000000700000006c0000006900000065000000640000002000
*000076000000610000006c0000007500000065000000200000006900000073000000200000006e
*0000006f000000740000002000000061000000200000006d000000650000006d00000062000000
*6500000072000000200000006f0000006600000020000000740000006800000065000000200104
*010000000000000000250000000000000000000000000000000602010000000a00000000000000
*ad0301020c000000450000006600000066000000690000006300000069000000650000006e0000
*00740000006c000000790000002001040100000000000000002700000000000000000000000000
*00000601021f000000200000006100000020000000730000007500000062000000730000006500
*000074000000200000006f00000066000000200000007400000068000000650000002000000065
*0000006c000000650000006d000000650000006e00000074000000730000002000000069000000
*6e0000002000000061000000200104010000000000000000250000000000000000000000000000
*000602010000000a00000000000000ae0301021400000041000000200000007300000070000000
*650000006300000069000000610000006c000000690000007a0000006100000074000000690000
*006f0000006e000000200000006f00000066000000200104010000000000000000ad0000000000
*000000000000000000001f01020b000000200000007500000073000000690000006e0000006700
*000020000000740000006800000065000000200104020000000000000000cf0000000000000023
*00000000000000240000000000000000d000000000000000230000000000000024010201000000
*200104010000000000000000b60000000000000023000000000000002401020f0000002c000000
*20000000610000006e000000610000006c0000006f000000670000006f00000075000000730000
*0020000000740000006f0000002001020e000000440000006100000074000000610000002e0000
*004c0000006900000073000000740000002e00000066000000690000006e000000640201000000
*0a00000000000000af03010214000000410000002000000067000000650000006e000000650000
*0072000000610000006c000000690000007a0000006100000074000000690000006f0000006e00
*0000200000006f0000006600000020010213000000440000006100000074000000610000002e00
*00004c0000006900000073000000740000002e0000007200000065000000700000006c00000069
*0000006300000061000000740000006501021100000020000000740000006f0000002000000061
*0000006e0000002000000061000000720000006200000069000000740000007200000061000000
*7200000079000000200104010000000000000000b6000000000000002300000000000000240102
*100000002e00000020000000410000006400000061000000700000007400000065000000640000
*002000000066000000720000006f0000006d000000200000000a01020100000020010c4a000000
*680000007400000074000000700000003a0000002f0000002f0000006100000075000000670000
*0075000000730000007400000073000000730000002e000000620000006c0000006f0000006700
*000073000000700000006f000000740000002e000000630000006f0000006d0000002f00000032
*0000003000000030000000380000002f00000030000000370000002f0000006c0000006f000000
*73000000740000002d000000610000006e000000640000002d000000660000006f000000750000
*006e000000640000002d00000069000000660000002d000000690000002d000000770000007200
*00006900000074000000650000002d0000003100000030000000380000002d000000690000006e
*0000002e00000068000000740000006d0000006c02010000000a00000000000000b00301021400
*0000410000002000000067000000650000006e0000006500000072000000610000006c00000069
*0000007a0000006100000074000000690000006f0000006e000000200000006f00000066000000
*2001020f000000440000006100000074000000610000002e0000004c0000006900000073000000
*740000002e0000006300000079000000630000006c000000650102110000002000000074000000
*6f00000020000000610000006e0000002000000061000000720000006200000069000000740000
*0072000000610000007200000079000000200104010000000000000000b6000000000000002300
*0000000000002402390000002e000000200000004d000000610000007900000020000000660000
*0061000000690000006c00000020000000740000006f0000002000000074000000650000007200
*00006d000000690000006e00000061000000740000006500000020000000660000006f00000072
*00000020000000730000006f0000006d000000650000002000000076000000610000006c000000
*75000000650000007300000020000000690000006e00000020000000730000006f0000006d0000
*0065000000200000006d0000006f0000006e0000006f0000006900000064000000730000002e00
*00000a00000000000000b103010214000000410000002000000067000000650000006e00000065
*00000072000000610000006c000000690000007a0000006100000074000000690000006f000000
*6e000000200000006f000000660000002001021000000044000000610000007400000061000000
*2e0000004c0000006900000073000000740000002e000000720000006500000070000000650000
*00610000007401021100000020000000740000006f00000020000000610000006e000000200000
*006100000072000000620000006900000074000000720000006100000072000000790000002001
*04010000000000000000b60000000000000023000000000000002402390000002e000000200000
*004d0000006100000079000000200000006600000061000000690000006c000000200000007400
*00006f000000200000007400000065000000720000006d000000690000006e0000006100000074
*0000006500000020000000660000006f0000007200000020000000730000006f0000006d000000
*650000002000000076000000610000006c00000075000000650000007300000020000000690000
*006e00000020000000730000006f0000006d00000065000000200000006d0000006f0000006e00
*00006f0000006900000064000000730000002e0000000a4700000000000000b900000000000000
*ba00000000000000bb00000000000000b600000000000000bc00000000000000bd000000000000
*00be00000000000000bf00000000000000c000000000000000c100000000000000c20000000000
*0000c300000000000000c400000000000000c500000000000000c600000000000000c700000000
*000000c800000000000000c900000000000000ca00000000000000cb00000000000000cc000000
*00000000cd00000000000000ce00000000000000cf00000000000000d000000000000000d10000
*0000000000d200000000000000d300000000000000000000000000000001000000000000000200
*000000000000030000000000000004000000000000000500000000000000060000000000000007
*000000000000001c000000000000001d000000000000001e000000000000001f00000000000000
*200000000000000021000000000000002200000000000000230000000000000024000000000000
*002500000000000000260000000000000027000000000000002800000000000000290000000000
*00002a000000000000009e000000000000009f00000000000000a000000000000000a100000000
*000000a200000000000000a300000000000000a400000000000000a500000000000000a6000000
*00000000a700000000000000a800000000000000a900000000000000aa00000000000000ab0000
*0000000000ac00000000000000ad00000000000000ae00000000000000af00000000000000b000
*000000000000b11400000000000000a000000000000000a1000000000000009e00000000000000
*9f00000000000000a500000000000000a600000000000000a700000000000000a8000000000000
*00a200000000000000a300000000000000a400000000000000ab00000000000000ad0000000000
*0000ae00000000000000a900000000000000aa00000000000000ac00000000000000b100000000
*000000af00000000000000b0000000000000000000000000000000200001140000006e0000006f
*0000006e0000002d000000700000006f000000720000007400000061000000620000006c000000
*6500000020000000280000004d0000005000000054000000430000007300000029010c00000065
*00000078000000700000006500000072000000690000006d000000650000006e00000074000000
*610000006c01150000006c00000069000000620000007200000061000000720000006900000065
*00000073000000400000006800000061000000730000006b000000650000006c0000006c000000
*2e0000006f0000007200000067002700000000000000b900000000000000ba00000000000000bb
*00000000000000b600000000000000bc00000000000000bd00000000000000be00000000000000
*bf00000000000000c000000000000000c100000000000000c200000000000000c3000000000000
*00c400000000000000c500000000000000c600000000000000c700000000000000c80000000000
*0000c900000000000000ca00000000000000cb00000000000000cc00000000000000cd00000000
*000000ce00000000000000cf00000000000000d000000000000000d100000000000000d2000000
*00000000d300000000000000000000000000000001000000000000000200000000000000030000
*00000000000400000000000000050000000000000006000000000000000700000000000000b200
*000000000000b300000000000000b40300000000000000b200000000000000b300000000000000
*b40000000000000000000000000000002100000000003500000000000000b900000000000000ba
*00000000000000bb00000000000000b600000000000000bc00000000000000bd00000000000000
*be00000000000000bf00000000000000c000000000000000c100000000000000c2000000000000
*00c300000000000000c400000000000000c500000000000000c600000000000000c70000000000
*0000c800000000000000c900000000000000ca00000000000000cb00000000000000cc00000000
*000000cd00000000000000ce00000000000000cf00000000000000d000000000000000d1000000
*00000000d200000000000000d3000000000000004d000000000000004e00000000000000500000
*000000000051000000000000005200000000000000530000000000000054000000000000005500
*0000000000005600000000000000570000000000000058000000000000005a000000000000005b
*000000000000005c00000000000000760000000000000077000000000000007800000000000000
*79000000000000007e000000000000008500000000000000860000000000000087000000000000
*0088000000000000008900000000000000b50100000000000000b500000000000000ea00000000
*000000000000000000000001030000000000000032000000000000000000000000000000010000
*000000000000330000000000000000000000000000000100000000000000003400000000000000
*000000000000000001000000000000000035000000000000000000000000000000010000000000
*000000360000000000000000000000000000000100000000000000003700000000000000000000
*000000000001000000000000000038000000000000000000000000000000010000000000000000
*390000000000000000000000000000000203000000000000003a00000000000000000000000000
*00000200000000000000003b0000000000000000000000000000000200000000000000003c0000
*000000000000000000000000000303000000000000003d00000000000000000000000000000003
*01000000000000003d0000000000000000000000000000000300000000000000003e0000000000
*000000000000000000000403000000000000003f00000000000000000000000000000004010000
*00000000003f000000000000000000000000000000040000000000000000400000000000000000
*000000000000000403000000000000004100000000000000000000000000000004000000000000
*000042000000000000000000000000000000040000000000000000430000000000000000000000
*000000000403000000000000004400000000000000000000000000000004010000000000000044
*000000000000000000000000000000040000000000000000450000000000000000000000000000
*000403000000000000004600000000000000000000000000000004000000000000000047000000
*000000000000000000000000040000000000000000480000000000000000000000000000000503
*00000000000000490000000000000000000000000000000500000000000000004a000000000000
*0000000000000000000603000000000000004b0000000000000000000000000000000601000000
*000000004b0000000000000000000000000000000600000000000000004c000000000000000000
*0000000000000603000000000000004d0000000000000000000000000000000601000000000000
*004d0000000000000000000000000000000600000000000000004e000000000000000000000000
*0000000603000000000000004f0000000000000000000000000000000601000000000000004f00
*000000000000000000000000000006000000000000000050000000000000000000000000000000
*060300000000000000510000000000000000000000000000000603000000000000005200000000
*000000000000000000000006000000000000000053000000000000000000000000000000060000
*000000000000540000000000000000000000000000000600000000000000005500000000000000
*000000000000000006000000000000000056000000000000000000000000000000070300000000
*000000570000000000000000000000000000000703000000000000005800000000000000000000
*000000000007030000000000000059000000000000000000000000000000070000000000000000
*5a0000000000000000000000000000000700000000000000005b00000000000000000000000000
*00000700000000000000005c0000000000000000000000000000000700000000000000005d0000
*000000000000000000000000000700000000000000005e00000000000000000000000000000008
*03000000000000005f000000000000000000000000000000080000000000000000600000000000
*000000000000000000000803000000000000006100000000000000000000000000000008000000
*000000000062000000000000000000000000000000080300000000000000630000000000000000
*000000000000000803000000000000006400000000000000000000000000000008000000000000
*000065000000000000000000000000000000080000000000000000660000000000000000000000
*000000000800000000000000006700000000000000000000000000000008000000000000000068
*000000000000000000000000000000090300000000000000690000000000000000000000000000
*00090100000000000000690000000000000000000000000000000900000000000000006a000000
*0000000000000000000000000a03000000000000006b0000000000000000000000000000000a01
*000000000000006b0000000000000000000000000000000a00000000000000006c000000000000
*0000000000000000000a00000000000000006d0000000000000000000000000000000b03000000
*000000006e0000000000000000000000000000000b01000000000000006e000000000000000000
*0000000000000b00000000000000006f0000000000000000000000000000000c03000000000000
*00700000000000000000000000000000000c010000000000000070000000000000000000000000
*0000000c0300000000000000710000000000000000000000000000000c01000000000000007100
*00000000000000000000000000000c000000000000000072000000000000000000000000000000
*0c0000000000000000730000000000000000000000000000000d00000000000000007400000000
*00000000000000000000000d0000000000000000750000000000000000000000000000000e0000
*000000000000760000000000000000000000000000000f03000000000000007700000000000000
*00000000000000000f0100000000000000770000000000000000000000000000000f0000000000
*000000780000000000000000000000000000000f03000000000000007900000000000000000000
*00000000000f0100000000000000790000000000000000000000000000000f0000000000000000
*7a0000000000000000000000000000000f03000000000000007b00000000000000000000000000
*00000f00000000000000007c0000000000000000000000000000000f00000000000000007d0000
*000000000000000000000000001000000000000000007e00000000000000000000000000000011
*03000000000000007f000000000000000000000000000000110300000000000000800000000000
*000000000000000000001203000000000000008100000000000000000000000000000013030000
*000000000082000000000000000000000000000000130100000000000000820000000000000000
*000000000000001300000000000000008300000000000000000000000000000013030000000000
*000084000000000000000000000000000000130100000000000000840000000000000000000000
*000000001300000000000000008500000000000000000000000000000013030000000000000086
*000000000000000000000000000000130100000000000000860000000000000000000000000000
*001300000000000000008700000000000000000000000000000013030000000000000088000000
*000000000000000000000000130100000000000000880000000000000000000000000000001300
*00000000000000890000000000000000000000000000001300000000000000008a000000000000
*0000000000000000001300000000000000008b0000000000000000000000000000001403000000
*000000008c0000000000000000000000000000001401000000000000008c000000000000000000
*0000000000001400000000000000008d0000000000000000000000000000001400000000000000
*008b0000000000000000000000000000001503000000000000008e000000000000000000000000
*0000001501000000000000008f0000000000000000000000000000001501000000000000008e00
*000000000000000000000000000015010000000000000090000000000000000000000000000000
*150300000000000000910000000000000000000000000000001501000000000000009100000000
*000000000000000000000015000000000000000092000000000000000000000000000000160300
*000000000000930000000000000000000000000000001600000000000000009400000000000000
*000000000000000016000000000000000095000000000000000000000000000000160000000000
*000000960000000000000000000000000000001700000000000000009700000000000000000000
*000000000018000000000000000098000000000000000000000000000000180000000000000000
*990000000000000000000000000000001800000000000000009a00000000000000000000000000
*00001903000000000000009b0000000000000000000000000000001a03000000000000009c0000
*000000000000000000000000001a01000000000000009c0000000000000000000000000000001a
*00000000000000009d0000000000000000000000000000001b03000000000000009e0000000000
*000000000000000000001b01000000000000009e0000000000000000000000000000001b000000
*00000000009f0000000000000000000000000000001c0300000000000000a00000000000000000
*000000000000001c0300000000000000a10000000000000000000000000000001c000000000000
*0000a20000000000000000000000000000001c0300000000000000a30000000000000000000000
*000000001c0000000000000000a40000000000000000000000000000001d0300000000000000a5
*0000000000000000000000000000001d0100000000000000a50000000000000000000000000000
*001d0000000000000000a60000000000000000000000000000001d0300000000000000a7000000
*0000000000000000000000001d0100000000000000a70000000000000000000000000000001d00
*00000000000000a80000000000000000000000000000001d0300000000000000a9000000000000
*0000000000000000001d0100000000000000a90000000000000000000000000000001d00000000
*00000000aa0000000000000000000000000000001d0000000000000000ab000000000000000000
*0000000000001e0300000000000000ac0000000000000000000000000000001e01000000000000
*00ac0000000000000000000000000000001e0000000000000000ad000000000000000000000000
*0000001e0300000000000000ae0000000000000000000000000000001e0100000000000000ae00
*00000000000000000000000000001e0000000000000000af000000000000000000000000000000
*1e0300000000000000b00000000000000000000000000000001e0100000000000000b000000000
*00000000000000000000001e0000000000000000b10000000000000000000000000000001e0000
*000000000000b20000000000000000000000000000001f0000000000000000b300000000000000
*00000000000000001f0000000000000000b40000000000000000000000000000001f0000000000
*000000b50000000000000000000000000000001f0000000000000000b600000000000000000000
*00000000001f0000000000000000b70000000000000000000000000000001f0000000000000000
*b80000000000000000000000000000001f0000000000000000b900000000000000000000000000
*00001f0000000000000000ba0000000000000000000000000000001f0000000000000000bb0000
*000000000000000000000000001f0000000000000000bc0000000000000000000000000000001f
*0000000000000000bd0000000000000000000000000000001f0000000000000000be0000000000
*000000000000000000001f0000000000000000bf0000000000000000000000000000001f000000
*0000000000c00000000000000000000000000000001f0000000000000000c10000000000000000
*000000000000001f0000000000000000c20000000000000000000000000000001f000000000000
*0000c30000000000000000000000000000001f0000000000000000970000000000000000000000
*000000001f0000000000000000c40000000000000000000000000000001f0000000000000000c5
*000000000000000000000000000000200300000000000000c60000000000000000000000000000
*00200100000000000000c6000000000000000000000000000000200000000000000000c7000000
*000000000000000000000000210300000000000000c80000000000000023000000000000002403
*00000000000000c9000000000000002300000000000000250300000000000000ca000000000000
*002300000000000000260300000000000000cb0000000000000023000000000000002400000000
*00000000cc000000000000002300000000000000240000000000000000cd000000000000002300
*000000000000240000000000000000ce0000000000000023000000000000002400000000000000
*00cf000000000000002300000000000000240100000000000000d0000000000000002300000000
*000000240300000000000000d0000000000000002300000000000000240000000000000000d100
*0000000000002300000000000000240100000000000000d2000000000000002300000000000000
*240300000000000000d2000000000000002300000000000000240000000000000000d300000000
*0000002300000000000000240100000000000000d4000000000000002300000000000000240300
*000000000000d4000000000000002300000000000000240000000000000000d500000000000000
*2300000000000000240100000000000000d6000000000000002300000000000000240300000000
*000000d6000000000000002300000000000000240000000000000000d700000000000000230000
*0000000000240100000000000000d8000000000000002300000000000000240300000000000000
*d8000000000000002300000000000000240000000000000000d900000000000000230000000000
*0000240100000000000000da000000000000002300000000000000240300000000000000da0000
*00000000002300000000000000240000000000000000db00000000000000230000000000000024
*0100000000000000dc000000000000002300000000000000240300000000000000dc0000000000
*00002300000000000000240000000000000000dd00000000000000230000000000000024010000
*0000000000de000000000000002300000000000000240300000000000000de00000000000000df
*00000000000000e00300000000000000e100000000000000df00000000000000e0000000000000
*0000e2000000000000002300000000000000e30300000000000000e40000000000000028000000
*00000000290300000000000000e50000000000000023000000000000002a0000000000000000e6
*0000000000000023000000000000002b0300000000000000e70000000000000023000000000000
*002b0000000000000000e80000000000000023000000000000002b0000000000000000e9000000
*0000000023000000000000002b0000000000000000ea0000000000000023000000000000002b00
*00000000000000eb000000000000002300000000000000ec0000000000000000ed000000000000
*002300000000000000250100000000000000ee000000000000002300000000000000ec00000000
*00000000ef000000000000002300000000000000f00000000000000000f1000000000000002300
*000000000000f00000000000000000f2000000000000002300000000000000f300000000000000
*00760000000000000023000000000000002f0300000000000000f4000000000000002300000000
*0000002f0300000000000000f5000000000000002300000000000000f60300000000000000f700
*0000000000002300000000000000300300000000000000f8000000000000002300000000000000
*300000000000000000b5000000000000002800000000000000310300000000000000f900000000
*000000fa000000000000000d6d6f6e6f6964732d302e312e360000000000000013446174612e4d
*6f6e6f69642e526564756365720000000000000018446174612e4d6f6e6f69642e526564756365
*722e436861720000000000000018446174612e4d6f6e6f69642e526564756365722e5769746800
*00000000000011446174612e4d6f6e6f69642e556e696f6e0000000000000020446174612e4d6f
*6e6f69642e4c65786963616c2e555446382e4465636f6465720000000000000015446174612e4d
*6f6e6f69642e47656e657261746f720000000000000022446174612e4d6f6e6f69642e4c657869
*63616c2e536f75726365506f736974696f6e0000000000000019446174612e4d6f6e6f69642e4c
*65786963616c2e576f7264730000000000000010446174612e4d6f6e6f69642e53656c66000000
*000000001a446174612e4d6f6e6f69642e47656e657261746f722e4c5a37380000000000000016
*446174612e4d6f6e6f69642e46726f6d537472696e670000000000000017446174612e4d6f6e6f
*69642e43617465676f726963616c0000000000000014446174612e4d6f6e6f69642e4164646974
*697665000000000000001a446174612e4d6f6e6f69642e41646469746976652e53756761720000
*00000000001a446174612e4d6f6e6f69642e4d756c7469706c6963617469766500000000000000
*20446174612e4d6f6e6f69642e4d756c7469706c696361746976652e5375676172000000000000
*0013446174612e52696e672e53656d692e4e656172000000000000000e446174612e52696e672e
*53656d69000000000000000f446174612e4d6f6e6f69642e4f7264000000000000001744617461
*2e52696e672e53656d692e54726f706963616c0000000000000012446174612e52696e672e5365
*6d692e4f7264000000000000000a446174612e47726f75700000000000000016446174612e4772
*6f75702e436f6d62696e61746f72730000000000000010446174612e47726f75702e5375676172
*0000000000000009446174612e52696e670000000000000011446174612e52696e672e426f6f6c
*65616e0000000000000011446174612e52696e672e46726f6d4e756d0000000000000010446174
*612e52696e672e4d6f64756c650000000000000017446174612e4d6f6e6f69642e4170706c6963
*61746976650000000000000011446174612e4d6f6e6f69642e4d6f6e6164000000000000001744
*6174612e4d6f6e6f69642e436f6d62696e61746f72730000000000000025446174612e4d6f6e6f
*69642e4c65786963616c2e52756e4c656e677468456e636f64696e670000000000000029446174
*612e52696e672e4d6f64756c652e4175746f6d61746963446966666572656e74696174696f6e00
*00000000000015446174612e4d6f6e6f69642e496e7374616e6365730000000000000004626173
*65000000000000000b446174612e4d6f6e6f6964000000000000000a446174612e4d6179626500
*0000000000000d446174612e466f6c6461626c650000000000000009446174612e576f72640000
*0000000000086768632d7072696d00000000000000094748432e5479706573000000000000000b
*4748432e556e69636f64650000000000000010436f6e74726f6c2e43617465676f727900000000
*00000008446174612e4f726400000000000000075072656c756465000000000000000f44617461
*2e52696e672e53756761720000000000000013436f6e74726f6c2e4170706c6963617469766500
*0000000000000d436f6e74726f6c2e4d6f6e616400000000000000084748432e426f6f6c000000
*0000000007526564756365720000000000000004756e69740000000000000004736e6f63000000
*0000000004636f6e73000000000000000d666f6c644d6170526564756365000000000000000a66
*6f6c64526564756365000000000000000a72657475726e556e6974000000000000000870757265
*556e6974000000000000000b4368617252656475636572000000000000000866726f6d43686172
*000000000000000b696e76616c696443686172000000000000000b576974685265647563657200
*0000000000000e776974686f7574526564756365720000000000000009556e696f6e5769746800
*0000000000000c676574556e696f6e57697468000000000000000c486173556e696f6e57697468
*0000000000000009756e696f6e576974680000000000000009656d707479576974680000000000
*000005556e696f6e0000000000000008676574556e696f6e0000000000000008486173556e696f
*6e0000000000000005656d7074790000000000000005756e696f6e000000000000000455544638
*000000000000000772756e55544638000000000000000543686172380000000000000008676574
*4368617238000000000000000656616c756573000000000000000967657456616c756573000000
*00000000044b65797300000000000000076765744b657973000000000000000947656e65726174
*6f720000000000000004456c656d00000000000000096d61705265647563650000000000000005
*6d6170546f00000000000000076d617046726f6d00000000000000067265647563650000000000
*00000e536f75726365506f736974696f6e000000000000000c536f75726365436f6c756d6e0000
*00000000000a536f757263654c696e6500000000000000076e657874546162000000000000000b
*73746172744f6646696c65000000000000000c736f75726365436f6c756d6e000000000000000a
*736f757263654c696e65000000000000001273686f77536f75726365506f736974696f6e000000
*0000000007556e6c696e6564000000000000000a72756e556e6c696e6564000000000000000855
*6e737061636564000000000000000b72756e556e73706163656400000000000000054c696e6573
*0000000000000005576f726473000000000000000872756e576f72647300000000000000087275
*6e4c696e65730000000000000009776f72647346726f6d00000000000000096c696e657346726f
*6d000000000000000453656c66000000000000000767657453656c6600000000000000044c5a37
*3800000000000000076765744c5a373800000000000000066465636f6465000000000000000a46
*726f6d537472696e67000000000000000d67657446726f6d537472696e6700000000000000034d
*6f6e000000000000000547456e646f000000000000000867657447456e646f0000000000000006
*6765744d6f6e0000000000000004706c757300000000000000047a65726f00000000000000012b
*0000000000000003457870000000000000000667657445787000000000000000034c6f67000000
*00000000066765744c6f67000000000000000e4d756c7469706c69636174697665000000000000
*00036f6e65000000000000000574696d657300000000000000012a00000000000000104c656674
*53656d694e65617252696e670000000000000011526967687453656d694e65617252696e670000
*00000000000853656d6952696e67000000000000000b4d696e5072696f72697479000000000000
*000e6765744d696e5072696f72697479000000000000000b4d61785072696f7269747900000000
*0000000e6765744d61785072696f7269747900000000000000034d696e00000000000000066765
*744d696e00000000000000034d617800000000000000066765744d617800000000000000096d69
*6e66696e6974790000000000000008696e66696e697479000000000000000854726f706963616c
*000000000000000b67657454726f706963616c00000000000000085072696f7269747900000000
*000000084d6178426f756e6400000000000000084d696e426f756e6400000000000000054f7264
*657200000000000000086765744f72646572000000000000000547726f75700000000000000007
*676e656761746500000000000000056d696e757300000000000000096773756274726163740000
*0000000000097265706c696361746500000000000000012d00000000000000066e656761746500
*000000000000087375627472616374000000000000000452696e670000000000000008426f6f6c
*52696e67000000000000000b676574426f6f6c52696e67000000000000000746726f6d4e756d00
*0000000000000a67657446726f6d4e756d00000000000000064d6f64756c65000000000000000b
*52696768744d6f64756c6500000000000000022e2a000000000000000a4c6566744d6f64756c65
*00000000000000022a2e000000000000000d54726176657273616c576974680000000000000010
*67657454726176657273616c576974680000000000000012577261707065644170706c69636174
*6976650000000000000015676574577261707065644170706c6963617469766500000000000000
*0954726176657273616c000000000000000c67657454726176657273616c000000000000000d73
*6e6f6354726176657273616c000000000000000a416374696f6e57697468000000000000000d67
*6574416374696f6e57697468000000000000000c577261707065644d6f6e616400000000000000
*0f676574577261707065644d6f6e61640000000000000006416374696f6e000000000000000967
*6574416374696f6e000000000000000a736e6f63416374696f6e00000000000000097472617665
*7273655f0000000000000004666f725f00000000000000056d61704d5f0000000000000005666f
*724d5f0000000000000007666f6c644d61700000000000000004666f6c64000000000000000963
*6f6e6361744d61700000000000000003616e6400000000000000026f720000000000000003616e
*790000000000000003616c6c000000000000000373756d000000000000000770726f6475637400
*00000000000004656c656d00000000000000076e6f74456c656d000000000000000666696c7465
*72000000000000000466696e6400000000000000056379636c6500000000000000067265706561
*740000000000000003524c450000000000000006676574524c4500000000000000014400000000
*000000064d6f6e6f696400000000000000054d617962650000000000000008466f6c6461626c65
*00000000000000076d617070656e6400000000000000076d636f6e63617400000000000000066d
*656d70747900000000000000076765744475616c00000000000000044475616c00000000000000
*07617070456e646f0000000000000004456e646f0000000000000006676574416c6c0000000000
*000003416c6c0000000000000006676574416e790000000000000003416e790000000000000006
*67657453756d000000000000000353756d000000000000000a67657450726f6475637400000000
*0000000750726f6475637400000000000000086765744669727374000000000000000546697273
*7400000000000000076765744c61737400000000000000044c617374000000000000000e66696e
*676572747265652d302e30000000000000000f446174612e46696e676572547265650000000000
*00000a46696e6765725472656500000000000000076d6561737572650000000000000008474843
*2e576f72640000000000000005576f726438000000000000000443686172000000000000000769
*735370616365000000000000000843617465676f727900000000000000033e3e3e000000000000
*00033c3c3c00000000000000012e00000000000000026964000000000000000b4748432e436c61
*7373657300000000000000036d696e00000000000000074e6f7468696e6700000000000000036d
*617800000000000000084748432e456e756d00000000000000086d6178426f756e640000000000
*0000086d696e426f756e6400000000000000074748432e4e756d000000000000000b4170706c69
*636174697665000000000000000b416c7465726e617469766500000000000000084748432e4261
*736500000000000000054d6f6e616400000000000000094d6f6e6164506c757300000000000000
*04426f6f6c
hunk ./dist/doc/html/monoids/src/Data-Monoid-Applicative.html 9
-<pre><a name="line-1"></a><span class='hs-comment'>{-# LANGUAGE FlexibleInstances, MultiParamTypeClasses, GeneralizedNewtypeDeriving, FlexibleContexts #-}</span>
+<pre><a name="line-1"></a><span class='hs-comment'>{-# LANGUAGE FlexibleInstances, MultiParamTypeClasses, GeneralizedNewtypeDeriving, FlexibleContexts, TypeOperators #-}</span>
hunk ./dist/doc/html/monoids/src/Data-Monoid-Applicative.html 27
-<a name="line-19"></a>    <span class='hs-layout'>,</span> <span class='hs-conid'>Traversal</span><span class='hs-layout'>(</span><span class='hs-conid'>Traversal</span><span class='hs-layout'>,</span><span class='hs-varid'>getTraversal</span><span class='hs-layout'>)</span>
-<a name="line-20"></a>    <span class='hs-layout'>,</span> <span class='hs-conid'>WrappedApplicative</span><span class='hs-layout'>(</span><span class='hs-conid'>WrappedApplicative</span><span class='hs-layout'>,</span><span class='hs-varid'>getWrappedApplicative</span><span class='hs-layout'>)</span>
-<a name="line-21"></a>    <span class='hs-layout'>,</span> <span class='hs-varid'>snocTraversal</span>
-<a name="line-22"></a>    <span class='hs-layout'>)</span> <span class='hs-keyword'>where</span>
-<a name="line-23"></a>
-<a name="line-24"></a><span class='hs-keyword'>import</span> <span class='hs-conid'>Control</span><span class='hs-varop'>.</span><span class='hs-conid'>Applicative</span>
-<a name="line-25"></a><span class='hs-keyword'>import</span> <span class='hs-conid'>Data</span><span class='hs-varop'>.</span><span class='hs-conid'>Monoid</span><span class='hs-varop'>.</span><span class='hs-conid'>Reducer</span>
-<a name="line-26"></a><span class='hs-keyword'>import</span> <span class='hs-conid'>Data</span><span class='hs-varop'>.</span><span class='hs-conid'>Ring</span><span class='hs-varop'>.</span><span class='hs-conid'>Semi</span><span class='hs-varop'>.</span><span class='hs-conid'>Near</span>
-<a name="line-27"></a><span class='hs-keyword'>import</span> <span class='hs-conid'>Control</span><span class='hs-varop'>.</span><span class='hs-conid'>Functor</span><span class='hs-varop'>.</span><span class='hs-conid'>Pointed</span>
-<a name="line-28"></a>
-<a name="line-29"></a><a name="Traversal"></a><span class='hs-comment'>-- | A 'Traversal' uses an glues together 'Applicative' actions with (*&gt;)</span>
-<a name="line-30"></a><a name="Traversal"></a><span class='hs-comment'>--   in the manner of 'traverse_' from "Data.Foldable". Any values returned by </span>
-<a name="line-31"></a><a name="Traversal"></a><span class='hs-comment'>--   reduced actions are discarded.</span>
-<a name="line-32"></a><a name="Traversal"></a><span class='hs-keyword'>newtype</span> <span class='hs-conid'>Traversal</span> <span class='hs-varid'>f</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>Traversal</span> <span class='hs-layout'>{</span> <span class='hs-varid'>getTraversal</span> <span class='hs-keyglyph'>::</span> <span class='hs-varid'>f</span> <span class='hs-conid'>()</span> <span class='hs-layout'>}</span> 
-<a name="line-33"></a>
-<a name="line-34"></a><span class='hs-keyword'>instance</span> <span class='hs-conid'>Applicative</span> <span class='hs-varid'>f</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>Monoid</span> <span class='hs-layout'>(</span><span class='hs-conid'>Traversal</span> <span class='hs-varid'>f</span><span class='hs-layout'>)</span> <span class='hs-keyword'>where</span>
-<a name="line-35"></a>    <span class='hs-varid'>mempty</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>Traversal</span> <span class='hs-layout'>(</span><span class='hs-varid'>pure</span> <span class='hs-conid'>()</span><span class='hs-layout'>)</span>
-<a name="line-36"></a>    <span class='hs-conid'>Traversal</span> <span class='hs-varid'>a</span> <span class='hs-varop'>`mappend`</span> <span class='hs-conid'>Traversal</span> <span class='hs-varid'>b</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>Traversal</span> <span class='hs-layout'>(</span><span class='hs-varid'>a</span> <span class='hs-varop'>*&gt;</span> <span class='hs-varid'>b</span><span class='hs-layout'>)</span>
-<a name="line-37"></a>
-<a name="line-38"></a><span class='hs-keyword'>instance</span> <span class='hs-conid'>Applicative</span> <span class='hs-varid'>f</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>Reducer</span> <span class='hs-layout'>(</span><span class='hs-varid'>f</span> <span class='hs-varid'>a</span><span class='hs-layout'>)</span> <span class='hs-layout'>(</span><span class='hs-conid'>Traversal</span> <span class='hs-varid'>f</span><span class='hs-layout'>)</span> <span class='hs-keyword'>where</span>
-<a name="line-39"></a>    <span class='hs-varid'>unit</span> <span class='hs-varid'>a</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>Traversal</span> <span class='hs-layout'>(</span><span class='hs-varid'>a</span> <span class='hs-varop'>*&gt;</span> <span class='hs-varid'>pure</span> <span class='hs-conid'>()</span><span class='hs-layout'>)</span>
-<a name="line-40"></a>    <span class='hs-varid'>a</span> <span class='hs-varop'>`cons`</span> <span class='hs-conid'>Traversal</span> <span class='hs-varid'>b</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>Traversal</span> <span class='hs-layout'>(</span><span class='hs-varid'>a</span> <span class='hs-varop'>*&gt;</span> <span class='hs-varid'>b</span><span class='hs-layout'>)</span>
-<a name="line-41"></a>    <span class='hs-conid'>Traversal</span> <span class='hs-varid'>a</span> <span class='hs-varop'>`snoc`</span> <span class='hs-varid'>b</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>Traversal</span> <span class='hs-layout'>(</span><span class='hs-varid'>a</span> <span class='hs-varop'>*&gt;</span> <span class='hs-varid'>b</span> <span class='hs-varop'>*&gt;</span> <span class='hs-varid'>pure</span> <span class='hs-conid'>()</span><span class='hs-layout'>)</span>
-<a name="line-42"></a>
-<a name="line-43"></a><span class='hs-comment'>{-# RULES "unitTraversal" unit = Traversal #-}</span>
-<a name="line-44"></a><span class='hs-comment'>{-# RULES "snocTraversal" snoc = snocTraversal #-}</span>
+<a name="line-19"></a>    <span class='hs-layout'>,</span> <span class='hs-keyword'>module</span> <span class='hs-conid'>Data</span><span class='hs-varop'>.</span><span class='hs-conid'>Ring</span><span class='hs-varop'>.</span><span class='hs-conid'>Module</span>
+<a name="line-20"></a>    <span class='hs-layout'>,</span> <span class='hs-conid'>Traversal</span><span class='hs-layout'>(</span><span class='hs-conid'>Traversal</span><span class='hs-layout'>,</span><span class='hs-varid'>getTraversal</span><span class='hs-layout'>)</span>
+<a name="line-21"></a>    <span class='hs-layout'>,</span> <span class='hs-conid'>WrappedApplicative</span><span class='hs-layout'>(</span><span class='hs-conid'>WrappedApplicative</span><span class='hs-layout'>,</span><span class='hs-varid'>getWrappedApplicative</span><span class='hs-layout'>)</span>
+<a name="line-22"></a>    <span class='hs-layout'>,</span> <span class='hs-conid'>TraversalWith</span><span class='hs-layout'>(</span><span class='hs-conid'>TraversalWith</span><span class='hs-layout'>,</span><span class='hs-varid'>getTraversalWith</span><span class='hs-layout'>)</span>
+<a name="line-23"></a>    <span class='hs-layout'>,</span> <span class='hs-varid'>snocTraversal</span>
+<a name="line-24"></a>    <span class='hs-layout'>)</span> <span class='hs-keyword'>where</span>
+<a name="line-25"></a>
+<a name="line-26"></a><span class='hs-keyword'>import</span> <span class='hs-conid'>Control</span><span class='hs-varop'>.</span><span class='hs-conid'>Applicative</span>
+<a name="line-27"></a><span class='hs-keyword'>import</span> <span class='hs-conid'>Data</span><span class='hs-varop'>.</span><span class='hs-conid'>Monoid</span><span class='hs-varop'>.</span><span class='hs-conid'>Reducer</span>
+<a name="line-28"></a><span class='hs-keyword'>import</span> <span class='hs-conid'>Data</span><span class='hs-varop'>.</span><span class='hs-conid'>Ring</span><span class='hs-varop'>.</span><span class='hs-conid'>Semi</span><span class='hs-varop'>.</span><span class='hs-conid'>Near</span>
+<a name="line-29"></a><span class='hs-keyword'>import</span> <span class='hs-conid'>Data</span><span class='hs-varop'>.</span><span class='hs-conid'>Ring</span><span class='hs-varop'>.</span><span class='hs-conid'>Module</span>
+<a name="line-30"></a><span class='hs-keyword'>import</span> <span class='hs-conid'>Control</span><span class='hs-varop'>.</span><span class='hs-conid'>Functor</span><span class='hs-varop'>.</span><span class='hs-conid'>Pointed</span>
+<a name="line-31"></a>
+<a name="line-32"></a><a name="Traversal"></a><span class='hs-comment'>-- | A 'Traversal' uses an glues together 'Applicative' actions with (*&gt;)</span>
+<a name="line-33"></a><a name="Traversal"></a><span class='hs-comment'>--   in the manner of 'traverse_' from "Data.Foldable". Any values returned by </span>
+<a name="line-34"></a><a name="Traversal"></a><span class='hs-comment'>--   reduced actions are discarded.</span>
+<a name="line-35"></a><a name="Traversal"></a><span class='hs-keyword'>newtype</span> <span class='hs-conid'>Traversal</span> <span class='hs-varid'>f</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>Traversal</span> <span class='hs-layout'>{</span> <span class='hs-varid'>getTraversal</span> <span class='hs-keyglyph'>::</span> <span class='hs-varid'>f</span> <span class='hs-conid'>()</span> <span class='hs-layout'>}</span> 
+<a name="line-36"></a>
+<a name="line-37"></a><span class='hs-keyword'>instance</span> <span class='hs-conid'>Applicative</span> <span class='hs-varid'>f</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>Monoid</span> <span class='hs-layout'>(</span><span class='hs-conid'>Traversal</span> <span class='hs-varid'>f</span><span class='hs-layout'>)</span> <span class='hs-keyword'>where</span>
+<a name="line-38"></a>    <span class='hs-varid'>mempty</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>Traversal</span> <span class='hs-layout'>(</span><span class='hs-varid'>pure</span> <span class='hs-conid'>()</span><span class='hs-layout'>)</span>
+<a name="line-39"></a>    <span class='hs-conid'>Traversal</span> <span class='hs-varid'>a</span> <span class='hs-varop'>`mappend`</span> <span class='hs-conid'>Traversal</span> <span class='hs-varid'>b</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>Traversal</span> <span class='hs-layout'>(</span><span class='hs-varid'>a</span> <span class='hs-varop'>*&gt;</span> <span class='hs-varid'>b</span><span class='hs-layout'>)</span>
+<a name="line-40"></a>
+<a name="line-41"></a><span class='hs-keyword'>instance</span> <span class='hs-conid'>Applicative</span> <span class='hs-varid'>f</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>Reducer</span> <span class='hs-layout'>(</span><span class='hs-varid'>f</span> <span class='hs-varid'>a</span><span class='hs-layout'>)</span> <span class='hs-layout'>(</span><span class='hs-conid'>Traversal</span> <span class='hs-varid'>f</span><span class='hs-layout'>)</span> <span class='hs-keyword'>where</span>
+<a name="line-42"></a>    <span class='hs-varid'>unit</span> <span class='hs-varid'>a</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>Traversal</span> <span class='hs-layout'>(</span><span class='hs-varid'>a</span> <span class='hs-varop'>*&gt;</span> <span class='hs-varid'>pure</span> <span class='hs-conid'>()</span><span class='hs-layout'>)</span>
+<a name="line-43"></a>    <span class='hs-varid'>a</span> <span class='hs-varop'>`cons`</span> <span class='hs-conid'>Traversal</span> <span class='hs-varid'>b</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>Traversal</span> <span class='hs-layout'>(</span><span class='hs-varid'>a</span> <span class='hs-varop'>*&gt;</span> <span class='hs-varid'>b</span><span class='hs-layout'>)</span>
+<a name="line-44"></a>    <span class='hs-conid'>Traversal</span> <span class='hs-varid'>a</span> <span class='hs-varop'>`snoc`</span> <span class='hs-varid'>b</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>Traversal</span> <span class='hs-layout'>(</span><span class='hs-varid'>a</span> <span class='hs-varop'>*&gt;</span> <span class='hs-varid'>b</span> <span class='hs-varop'>*&gt;</span> <span class='hs-varid'>pure</span> <span class='hs-conid'>()</span><span class='hs-layout'>)</span>
hunk ./dist/doc/html/monoids/src/Data-Monoid-Applicative.html 54
-<a name="line-46"></a><a name="snocTraversal"></a><span class='hs-comment'>-- | Efficiently avoid needlessly rebinding when using 'snoc' on an action that already returns ()</span>
-<a name="line-47"></a><span class='hs-comment'>--   A rewrite rule automatically applies this when possible</span>
-<a name="line-48"></a><span class='hs-definition'>snocTraversal</span> <span class='hs-keyglyph'>::</span> <span class='hs-conid'>Reducer</span> <span class='hs-layout'>(</span><span class='hs-varid'>f</span> <span class='hs-conid'>()</span><span class='hs-layout'>)</span> <span class='hs-layout'>(</span><span class='hs-conid'>Traversal</span> <span class='hs-varid'>f</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>Traversal</span> <span class='hs-varid'>f</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-varid'>f</span> <span class='hs-conid'>()</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-conid'>Traversal</span> <span class='hs-varid'>f</span>
-<a name="line-49"></a><span class='hs-definition'>snocTraversal</span> <span class='hs-varid'>a</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>mappend</span> <span class='hs-varid'>a</span> <span class='hs-varop'>.</span> <span class='hs-conid'>Traversal</span>
-<a name="line-50"></a>
-<a name="line-51"></a>
-<a name="line-52"></a><span class='hs-comment'>-- | A 'WrappedApplicative' turns any 'Alternative' instance into a 'Monoid'.</span>
-<a name="line-53"></a><span class='hs-comment'>--   It also provides a 'Multiplicative' instance for an 'Applicative' functor wrapped around a 'Monoid'</span>
-<a name="line-54"></a><span class='hs-comment'>--   and asserts that any 'Alternative' applied to a 'Monoid' forms a 'LeftSemiNearRing' </span>
-<a name="line-55"></a><span class='hs-comment'>--   under these operations.</span>
-<a name="line-56"></a>
-<a name="line-57"></a><a name="WrappedApplicative"></a><span class='hs-keyword'>newtype</span> <span class='hs-conid'>WrappedApplicative</span> <span class='hs-varid'>f</span> <span class='hs-varid'>a</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>WrappedApplicative</span> <span class='hs-layout'>{</span> <span class='hs-varid'>getWrappedApplicative</span> <span class='hs-keyglyph'>::</span> <span class='hs-varid'>f</span> <span class='hs-varid'>a</span> <span class='hs-layout'>}</span> 
-<a name="line-58"></a>    <span class='hs-keyword'>deriving</span> <span class='hs-layout'>(</span><span class='hs-conid'>Eq</span><span class='hs-layout'>,</span><span class='hs-conid'>Ord</span><span class='hs-layout'>,</span><span class='hs-conid'>Show</span><span class='hs-layout'>,</span><span class='hs-conid'>Read</span><span class='hs-layout'>,</span><span class='hs-conid'>Functor</span><span class='hs-layout'>,</span><span class='hs-conid'>Pointed</span><span class='hs-layout'>,</span><span class='hs-conid'>Applicative</span><span class='hs-layout'>,</span><span class='hs-conid'>Alternative</span><span class='hs-layout'>,</span><span class='hs-conid'>Copointed</span><span class='hs-layout'>)</span>
+<a name="line-46"></a><span class='hs-comment'>{-# RULES "unitTraversal" unit = Traversal #-}</span>
+<a name="line-47"></a><span class='hs-comment'>{-# RULES "snocTraversal" snoc = snocTraversal #-}</span>
+<a name="line-48"></a>
+<a name="line-49"></a><a name="snocTraversal"></a><span class='hs-comment'>-- | Efficiently avoid needlessly rebinding when using 'snoc' on an action that already returns ()</span>
+<a name="line-50"></a><span class='hs-comment'>--   A rewrite rule automatically applies this when possible</span>
+<a name="line-51"></a><span class='hs-definition'>snocTraversal</span> <span class='hs-keyglyph'>::</span> <span class='hs-conid'>Reducer</span> <span class='hs-layout'>(</span><span class='hs-varid'>f</span> <span class='hs-conid'>()</span><span class='hs-layout'>)</span> <span class='hs-layout'>(</span><span class='hs-conid'>Traversal</span> <span class='hs-varid'>f</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>Traversal</span> <span class='hs-varid'>f</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-varid'>f</span> <span class='hs-conid'>()</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-conid'>Traversal</span> <span class='hs-varid'>f</span>
+<a name="line-52"></a><span class='hs-definition'>snocTraversal</span> <span class='hs-varid'>a</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>mappend</span> <span class='hs-varid'>a</span> <span class='hs-varop'>.</span> <span class='hs-conid'>Traversal</span>
+<a name="line-53"></a>
+<a name="line-54"></a>
+<a name="line-55"></a><span class='hs-comment'>-- | A 'WrappedApplicative' turns any 'Alternative' instance into a 'Monoid'.</span>
+<a name="line-56"></a><span class='hs-comment'>--   It also provides a 'Multiplicative' instance for an 'Applicative' functor wrapped around a 'Monoid'</span>
+<a name="line-57"></a><span class='hs-comment'>--   and asserts that any 'Alternative' applied to a 'Monoid' forms a 'LeftSemiNearRing' </span>
+<a name="line-58"></a><span class='hs-comment'>--   under these operations.</span>
hunk ./dist/doc/html/monoids/src/Data-Monoid-Applicative.html 68
-<a name="line-60"></a><span class='hs-keyword'>instance</span> <span class='hs-conid'>Alternative</span> <span class='hs-varid'>f</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>Monoid</span> <span class='hs-layout'>(</span><span class='hs-conid'>WrappedApplicative</span> <span class='hs-varid'>f</span> <span class='hs-varid'>a</span><span class='hs-layout'>)</span> <span class='hs-keyword'>where</span>
-<a name="line-61"></a>    <span class='hs-varid'>mempty</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>empty</span> 
-<a name="line-62"></a>    <span class='hs-conid'>WrappedApplicative</span> <span class='hs-varid'>a</span> <span class='hs-varop'>`mappend`</span> <span class='hs-conid'>WrappedApplicative</span> <span class='hs-varid'>b</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>WrappedApplicative</span> <span class='hs-layout'>(</span><span class='hs-varid'>a</span> <span class='hs-varop'>&lt;|&gt;</span> <span class='hs-varid'>b</span><span class='hs-layout'>)</span> 
-<a name="line-63"></a>
-<a name="line-64"></a><span class='hs-keyword'>instance</span> <span class='hs-layout'>(</span><span class='hs-conid'>Alternative</span> <span class='hs-varid'>f</span><span class='hs-layout'>,</span> <span class='hs-conid'>Monoid</span> <span class='hs-varid'>a</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>Multiplicative</span> <span class='hs-layout'>(</span><span class='hs-conid'>WrappedApplicative</span> <span class='hs-varid'>f</span> <span class='hs-varid'>a</span><span class='hs-layout'>)</span> <span class='hs-keyword'>where</span>
-<a name="line-65"></a>    <span class='hs-varid'>one</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>pure</span> <span class='hs-varid'>mempty</span>
-<a name="line-66"></a>    <span class='hs-varid'>times</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>liftA2</span> <span class='hs-varid'>mappend</span>
-<a name="line-67"></a>
-<a name="line-68"></a><span class='hs-keyword'>instance</span> <span class='hs-layout'>(</span><span class='hs-conid'>Alternative</span> <span class='hs-varid'>f</span><span class='hs-layout'>,</span> <span class='hs-varid'>c</span> <span class='hs-varop'>`Reducer`</span> <span class='hs-varid'>a</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>Reducer</span> <span class='hs-varid'>c</span> <span class='hs-layout'>(</span><span class='hs-conid'>WrappedApplicative</span> <span class='hs-varid'>f</span> <span class='hs-varid'>a</span><span class='hs-layout'>)</span> <span class='hs-keyword'>where</span>
-<a name="line-69"></a>    <span class='hs-varid'>unit</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>WrappedApplicative</span> <span class='hs-varop'>.</span> <span class='hs-varid'>pure</span> <span class='hs-varop'>.</span> <span class='hs-varid'>unit</span>
+<a name="line-60"></a><a name="WrappedApplicative"></a><span class='hs-keyword'>newtype</span> <span class='hs-conid'>WrappedApplicative</span> <span class='hs-varid'>f</span> <span class='hs-varid'>a</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>WrappedApplicative</span> <span class='hs-layout'>{</span> <span class='hs-varid'>getWrappedApplicative</span> <span class='hs-keyglyph'>::</span> <span class='hs-varid'>f</span> <span class='hs-varid'>a</span> <span class='hs-layout'>}</span> 
+<a name="line-61"></a>    <span class='hs-keyword'>deriving</span> <span class='hs-layout'>(</span><span class='hs-conid'>Eq</span><span class='hs-layout'>,</span><span class='hs-conid'>Ord</span><span class='hs-layout'>,</span><span class='hs-conid'>Show</span><span class='hs-layout'>,</span><span class='hs-conid'>Read</span><span class='hs-layout'>,</span><span class='hs-conid'>Functor</span><span class='hs-layout'>,</span><span class='hs-conid'>Pointed</span><span class='hs-layout'>,</span><span class='hs-conid'>Applicative</span><span class='hs-layout'>,</span><span class='hs-conid'>Alternative</span><span class='hs-layout'>,</span><span class='hs-conid'>Copointed</span><span class='hs-layout'>)</span>
+<a name="line-62"></a>
+<a name="line-63"></a><span class='hs-keyword'>instance</span> <span class='hs-conid'>Alternative</span> <span class='hs-varid'>f</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>Monoid</span> <span class='hs-layout'>(</span><span class='hs-conid'>WrappedApplicative</span> <span class='hs-varid'>f</span> <span class='hs-varid'>a</span><span class='hs-layout'>)</span> <span class='hs-keyword'>where</span>
+<a name="line-64"></a>    <span class='hs-varid'>mempty</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>empty</span> 
+<a name="line-65"></a>    <span class='hs-conid'>WrappedApplicative</span> <span class='hs-varid'>a</span> <span class='hs-varop'>`mappend`</span> <span class='hs-conid'>WrappedApplicative</span> <span class='hs-varid'>b</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>WrappedApplicative</span> <span class='hs-layout'>(</span><span class='hs-varid'>a</span> <span class='hs-varop'>&lt;|&gt;</span> <span class='hs-varid'>b</span><span class='hs-layout'>)</span> 
+<a name="line-66"></a>
+<a name="line-67"></a><span class='hs-keyword'>instance</span> <span class='hs-layout'>(</span><span class='hs-conid'>Alternative</span> <span class='hs-varid'>f</span><span class='hs-layout'>,</span> <span class='hs-conid'>Monoid</span> <span class='hs-varid'>a</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>Multiplicative</span> <span class='hs-layout'>(</span><span class='hs-conid'>WrappedApplicative</span> <span class='hs-varid'>f</span> <span class='hs-varid'>a</span><span class='hs-layout'>)</span> <span class='hs-keyword'>where</span>
+<a name="line-68"></a>    <span class='hs-varid'>one</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>pure</span> <span class='hs-varid'>mempty</span>
+<a name="line-69"></a>    <span class='hs-varid'>times</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>liftA2</span> <span class='hs-varid'>mappend</span>
hunk ./dist/doc/html/monoids/src/Data-Monoid-Applicative.html 79
-<a name="line-71"></a><span class='hs-keyword'>instance</span> <span class='hs-layout'>(</span><span class='hs-conid'>Alternative</span> <span class='hs-varid'>f</span><span class='hs-layout'>,</span> <span class='hs-conid'>Monoid</span> <span class='hs-varid'>a</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>LeftSemiNearRing</span> <span class='hs-layout'>(</span><span class='hs-conid'>WrappedApplicative</span> <span class='hs-varid'>f</span> <span class='hs-varid'>a</span><span class='hs-layout'>)</span>
+<a name="line-71"></a><span class='hs-keyword'>instance</span> <span class='hs-layout'>(</span><span class='hs-conid'>Alternative</span> <span class='hs-varid'>f</span><span class='hs-layout'>,</span> <span class='hs-varid'>c</span> <span class='hs-varop'>`Reducer`</span> <span class='hs-varid'>a</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>Reducer</span> <span class='hs-varid'>c</span> <span class='hs-layout'>(</span><span class='hs-conid'>WrappedApplicative</span> <span class='hs-varid'>f</span> <span class='hs-varid'>a</span><span class='hs-layout'>)</span> <span class='hs-keyword'>where</span>
+<a name="line-72"></a>    <span class='hs-varid'>unit</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>WrappedApplicative</span> <span class='hs-varop'>.</span> <span class='hs-varid'>pure</span> <span class='hs-varop'>.</span> <span class='hs-varid'>unit</span>
+<a name="line-73"></a>
+<a name="line-74"></a><span class='hs-keyword'>instance</span> <span class='hs-layout'>(</span><span class='hs-conid'>Alternative</span> <span class='hs-varid'>f</span><span class='hs-layout'>,</span> <span class='hs-conid'>Monoid</span> <span class='hs-varid'>a</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>LeftSemiNearRing</span> <span class='hs-layout'>(</span><span class='hs-conid'>WrappedApplicative</span> <span class='hs-varid'>f</span> <span class='hs-varid'>a</span><span class='hs-layout'>)</span>
+<a name="line-75"></a>
+<a name="line-76"></a><span class='hs-comment'>-- | if @m@ is a 'Module' and @f@ is a 'Applicative' then @f `TraversalWith` m@ is a 'Module' as well</span>
+<a name="line-77"></a>
+<a name="line-78"></a><a name="TraversalWith"></a><span class='hs-keyword'>newtype</span> <span class='hs-conid'>TraversalWith</span> <span class='hs-varid'>f</span> <span class='hs-varid'>m</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>TraversalWith</span> <span class='hs-layout'>{</span> <span class='hs-varid'>getTraversalWith</span> <span class='hs-keyglyph'>::</span> <span class='hs-varid'>f</span> <span class='hs-varid'>m</span> <span class='hs-layout'>}</span> 
+<a name="line-79"></a>    <span class='hs-keyword'>deriving</span> <span class='hs-layout'>(</span><span class='hs-conid'>Eq</span><span class='hs-layout'>,</span><span class='hs-conid'>Ord</span><span class='hs-layout'>,</span><span class='hs-conid'>Show</span><span class='hs-layout'>,</span><span class='hs-conid'>Read</span><span class='hs-layout'>,</span><span class='hs-conid'>Functor</span><span class='hs-layout'>,</span><span class='hs-conid'>Pointed</span><span class='hs-layout'>,</span><span class='hs-conid'>Applicative</span><span class='hs-layout'>,</span><span class='hs-conid'>Alternative</span><span class='hs-layout'>,</span><span class='hs-conid'>Copointed</span><span class='hs-layout'>)</span>
+<a name="line-80"></a>
+<a name="line-81"></a><span class='hs-keyword'>instance</span> <span class='hs-layout'>(</span><span class='hs-conid'>Monoid</span> <span class='hs-varid'>m</span><span class='hs-layout'>,</span> <span class='hs-conid'>Applicative</span> <span class='hs-varid'>f</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>Monoid</span> <span class='hs-layout'>(</span><span class='hs-varid'>f</span> <span class='hs-varop'>`TraversalWith`</span> <span class='hs-varid'>m</span><span class='hs-layout'>)</span> <span class='hs-keyword'>where</span>
+<a name="line-82"></a>    <span class='hs-varid'>mempty</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>pure</span> <span class='hs-varid'>mempty</span>
+<a name="line-83"></a>    <span class='hs-varid'>mappend</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>liftA2</span> <span class='hs-varid'>mappend</span>
+<a name="line-84"></a>
+<a name="line-85"></a><span class='hs-keyword'>instance</span> <span class='hs-layout'>(</span><span class='hs-conid'>Group</span> <span class='hs-varid'>m</span><span class='hs-layout'>,</span> <span class='hs-conid'>Applicative</span> <span class='hs-varid'>f</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>Group</span> <span class='hs-layout'>(</span><span class='hs-varid'>f</span> <span class='hs-varop'>`TraversalWith`</span> <span class='hs-varid'>m</span><span class='hs-layout'>)</span> <span class='hs-keyword'>where</span>
+<a name="line-86"></a>    <span class='hs-varid'>gnegate</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>fmap</span> <span class='hs-varid'>gnegate</span>
+<a name="line-87"></a>    <span class='hs-varid'>minus</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>liftA2</span> <span class='hs-varid'>minus</span>
+<a name="line-88"></a>    <span class='hs-varid'>gsubtract</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>liftA2</span> <span class='hs-varid'>gsubtract</span>
+<a name="line-89"></a>
+<a name="line-90"></a><span class='hs-keyword'>instance</span> <span class='hs-layout'>(</span><span class='hs-varid'>c</span> <span class='hs-varop'>`Reducer`</span> <span class='hs-varid'>m</span><span class='hs-layout'>,</span> <span class='hs-conid'>Applicative</span> <span class='hs-varid'>f</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>Reducer</span> <span class='hs-varid'>c</span> <span class='hs-layout'>(</span><span class='hs-varid'>f</span> <span class='hs-varop'>`TraversalWith`</span> <span class='hs-varid'>m</span><span class='hs-layout'>)</span> <span class='hs-keyword'>where</span>
+<a name="line-91"></a>    <span class='hs-varid'>unit</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>pure</span> <span class='hs-varop'>.</span> <span class='hs-varid'>unit</span>
+<a name="line-92"></a>
+<a name="line-93"></a><span class='hs-keyword'>instance</span> <span class='hs-layout'>(</span><span class='hs-conid'>LeftModule</span> <span class='hs-varid'>r</span> <span class='hs-varid'>m</span><span class='hs-layout'>,</span> <span class='hs-conid'>Applicative</span> <span class='hs-varid'>f</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>LeftModule</span> <span class='hs-varid'>r</span> <span class='hs-layout'>(</span><span class='hs-varid'>f</span> <span class='hs-varop'>`TraversalWith`</span> <span class='hs-varid'>m</span><span class='hs-layout'>)</span> <span class='hs-keyword'>where</span>
+<a name="line-94"></a>    <span class='hs-varid'>x</span> <span class='hs-varop'>*.</span> <span class='hs-varid'>m</span> <span class='hs-keyglyph'>=</span> <span class='hs-layout'>(</span><span class='hs-varid'>x</span> <span class='hs-varop'>*.</span><span class='hs-layout'>)</span> <span class='hs-varop'>&lt;$&gt;</span> <span class='hs-varid'>m</span>
+<a name="line-95"></a>
+<a name="line-96"></a><span class='hs-keyword'>instance</span> <span class='hs-layout'>(</span><span class='hs-conid'>RightModule</span> <span class='hs-varid'>r</span> <span class='hs-varid'>m</span><span class='hs-layout'>,</span> <span class='hs-conid'>Applicative</span> <span class='hs-varid'>f</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>RightModule</span> <span class='hs-varid'>r</span> <span class='hs-layout'>(</span><span class='hs-varid'>f</span> <span class='hs-varop'>`TraversalWith`</span> <span class='hs-varid'>m</span><span class='hs-layout'>)</span> <span class='hs-keyword'>where</span>
+<a name="line-97"></a>    <span class='hs-varid'>m</span> <span class='hs-varop'>.*</span> <span class='hs-varid'>y</span> <span class='hs-keyglyph'>=</span> <span class='hs-layout'>(</span><span class='hs-varop'>.*</span> <span class='hs-varid'>y</span><span class='hs-layout'>)</span> <span class='hs-varop'>&lt;$&gt;</span> <span class='hs-varid'>m</span>
+<a name="line-98"></a>
+<a name="line-99"></a><span class='hs-keyword'>instance</span> <span class='hs-layout'>(</span><span class='hs-conid'>Module</span> <span class='hs-varid'>r</span> <span class='hs-varid'>m</span><span class='hs-layout'>,</span> <span class='hs-conid'>Applicative</span> <span class='hs-varid'>f</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>Module</span> <span class='hs-varid'>r</span> <span class='hs-layout'>(</span><span class='hs-varid'>f</span> <span class='hs-varop'>`TraversalWith`</span> <span class='hs-varid'>m</span><span class='hs-layout'>)</span>
hunk ./dist/doc/html/monoids/src/Data-Monoid-Monad.html 9
-<pre><a name="line-1"></a><span class='hs-comment'>{-# LANGUAGE FlexibleInstances, MultiParamTypeClasses, GeneralizedNewtypeDeriving, FlexibleContexts #-}</span>
+<pre><a name="line-1"></a><span class='hs-comment'>{-# LANGUAGE FlexibleInstances, MultiParamTypeClasses, GeneralizedNewtypeDeriving, FlexibleContexts, TypeOperators #-}</span>
hunk ./dist/doc/html/monoids/src/Data-Monoid-Monad.html 30
-<a name="line-22"></a>    <span class='hs-comment'>-- * Wrapped Monads</span>
-<a name="line-23"></a>    <span class='hs-layout'>,</span> <span class='hs-conid'>WrappedMonad</span><span class='hs-layout'>(</span><span class='hs-conid'>WrappedMonad</span><span class='hs-layout'>,</span> <span class='hs-varid'>getWrappedMonad</span><span class='hs-layout'>)</span>
-<a name="line-24"></a>    <span class='hs-layout'>)</span> <span class='hs-keyword'>where</span>
-<a name="line-25"></a>
-<a name="line-26"></a><span class='hs-keyword'>import</span> <span class='hs-conid'>Control</span><span class='hs-varop'>.</span><span class='hs-conid'>Functor</span><span class='hs-varop'>.</span><span class='hs-conid'>Pointed</span>
-<a name="line-27"></a><span class='hs-keyword'>import</span> <span class='hs-conid'>Data</span><span class='hs-varop'>.</span><span class='hs-conid'>Monoid</span><span class='hs-varop'>.</span><span class='hs-conid'>Reducer</span>
-<a name="line-28"></a><span class='hs-keyword'>import</span> <span class='hs-conid'>Data</span><span class='hs-varop'>.</span><span class='hs-conid'>Ring</span><span class='hs-varop'>.</span><span class='hs-conid'>Semi</span><span class='hs-varop'>.</span><span class='hs-conid'>Near</span>
-<a name="line-29"></a><span class='hs-keyword'>import</span> <span class='hs-conid'>Control</span><span class='hs-varop'>.</span><span class='hs-conid'>Monad</span>
-<a name="line-30"></a>
-<a name="line-31"></a><a name="Action"></a><span class='hs-comment'>-- | An 'Action' uses glues together 'Monad' actions with (&gt;&gt;)</span>
-<a name="line-32"></a><a name="Action"></a><span class='hs-comment'>--   in the manner of 'mapM_' from "Data.Foldable". Any values returned by </span>
-<a name="line-33"></a><a name="Action"></a><span class='hs-comment'>--   reduced actions are discarded.</span>
-<a name="line-34"></a><a name="Action"></a><span class='hs-keyword'>newtype</span> <span class='hs-conid'>Action</span> <span class='hs-varid'>m</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>Action</span> <span class='hs-layout'>{</span> <span class='hs-varid'>getAction</span> <span class='hs-keyglyph'>::</span> <span class='hs-varid'>m</span> <span class='hs-conid'>()</span> <span class='hs-layout'>}</span> 
-<a name="line-35"></a>
-<a name="line-36"></a><span class='hs-keyword'>instance</span> <span class='hs-conid'>Monad</span> <span class='hs-varid'>m</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>Monoid</span> <span class='hs-layout'>(</span><span class='hs-conid'>Action</span> <span class='hs-varid'>m</span><span class='hs-layout'>)</span> <span class='hs-keyword'>where</span>
-<a name="line-37"></a>    <span class='hs-varid'>mempty</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>Action</span> <span class='hs-layout'>(</span><span class='hs-varid'>return</span> <span class='hs-conid'>()</span><span class='hs-layout'>)</span>
-<a name="line-38"></a>    <span class='hs-conid'>Action</span> <span class='hs-varid'>a</span> <span class='hs-varop'>`mappend`</span> <span class='hs-conid'>Action</span> <span class='hs-varid'>b</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>Action</span> <span class='hs-layout'>(</span><span class='hs-varid'>a</span> <span class='hs-varop'>&gt;&gt;</span> <span class='hs-varid'>b</span><span class='hs-layout'>)</span>
-<a name="line-39"></a>
-<a name="line-40"></a><span class='hs-keyword'>instance</span> <span class='hs-conid'>Monad</span> <span class='hs-varid'>m</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>Reducer</span> <span class='hs-layout'>(</span><span class='hs-varid'>m</span> <span class='hs-varid'>a</span><span class='hs-layout'>)</span> <span class='hs-layout'>(</span><span class='hs-conid'>Action</span> <span class='hs-varid'>m</span><span class='hs-layout'>)</span> <span class='hs-keyword'>where</span>
-<a name="line-41"></a>    <span class='hs-varid'>unit</span> <span class='hs-varid'>a</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>Action</span> <span class='hs-layout'>(</span><span class='hs-varid'>a</span> <span class='hs-varop'>&gt;&gt;</span> <span class='hs-varid'>return</span> <span class='hs-conid'>()</span><span class='hs-layout'>)</span>
-<a name="line-42"></a>    <span class='hs-varid'>a</span> <span class='hs-varop'>`cons`</span> <span class='hs-conid'>Action</span> <span class='hs-varid'>b</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>Action</span> <span class='hs-layout'>(</span><span class='hs-varid'>a</span> <span class='hs-varop'>&gt;&gt;</span> <span class='hs-varid'>b</span><span class='hs-layout'>)</span>
-<a name="line-43"></a>    <span class='hs-conid'>Action</span> <span class='hs-varid'>a</span> <span class='hs-varop'>`snoc`</span> <span class='hs-varid'>b</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>Action</span> <span class='hs-layout'>(</span><span class='hs-varid'>a</span> <span class='hs-varop'>&gt;&gt;</span> <span class='hs-varid'>b</span> <span class='hs-varop'>&gt;&gt;</span> <span class='hs-varid'>return</span> <span class='hs-conid'>()</span><span class='hs-layout'>)</span>
-<a name="line-44"></a>
-<a name="line-45"></a><span class='hs-comment'>{-# RULES "unitAction" unit = Action #-}</span>
-<a name="line-46"></a><span class='hs-comment'>{-# RULES "snocAction" snoc = snocAction #-}</span> 
+<a name="line-22"></a>    <span class='hs-comment'>-- * Lifting Modules</span>
+<a name="line-23"></a>    <span class='hs-layout'>,</span> <span class='hs-conid'>ActionWith</span><span class='hs-layout'>(</span><span class='hs-conid'>ActionWith</span><span class='hs-layout'>,</span><span class='hs-varid'>getActionWith</span><span class='hs-layout'>)</span>
+<a name="line-24"></a>    <span class='hs-comment'>-- * Wrapped Monads</span>
+<a name="line-25"></a>    <span class='hs-layout'>,</span> <span class='hs-conid'>WrappedMonad</span><span class='hs-layout'>(</span><span class='hs-conid'>WrappedMonad</span><span class='hs-layout'>,</span> <span class='hs-varid'>getWrappedMonad</span><span class='hs-layout'>)</span>
+<a name="line-26"></a>    <span class='hs-layout'>)</span> <span class='hs-keyword'>where</span>
+<a name="line-27"></a>
+<a name="line-28"></a><span class='hs-keyword'>import</span> <span class='hs-conid'>Control</span><span class='hs-varop'>.</span><span class='hs-conid'>Functor</span><span class='hs-varop'>.</span><span class='hs-conid'>Pointed</span>
+<a name="line-29"></a><span class='hs-keyword'>import</span> <span class='hs-conid'>Data</span><span class='hs-varop'>.</span><span class='hs-conid'>Monoid</span><span class='hs-varop'>.</span><span class='hs-conid'>Reducer</span>
+<a name="line-30"></a><span class='hs-keyword'>import</span> <span class='hs-conid'>Data</span><span class='hs-varop'>.</span><span class='hs-conid'>Ring</span><span class='hs-varop'>.</span><span class='hs-conid'>Semi</span><span class='hs-varop'>.</span><span class='hs-conid'>Near</span>
+<a name="line-31"></a><span class='hs-keyword'>import</span> <span class='hs-conid'>Data</span><span class='hs-varop'>.</span><span class='hs-conid'>Ring</span><span class='hs-varop'>.</span><span class='hs-conid'>Module</span>
+<a name="line-32"></a><span class='hs-keyword'>import</span> <span class='hs-conid'>Control</span><span class='hs-varop'>.</span><span class='hs-conid'>Monad</span>
+<a name="line-33"></a>
+<a name="line-34"></a><a name="Action"></a><span class='hs-comment'>-- | An 'Action' uses glues together 'Monad' actions with (&gt;&gt;)</span>
+<a name="line-35"></a><a name="Action"></a><span class='hs-comment'>--   in the manner of 'mapM_' from "Data.Foldable". Any values returned by </span>
+<a name="line-36"></a><a name="Action"></a><span class='hs-comment'>--   reduced actions are discarded.</span>
+<a name="line-37"></a><a name="Action"></a><span class='hs-keyword'>newtype</span> <span class='hs-conid'>Action</span> <span class='hs-varid'>m</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>Action</span> <span class='hs-layout'>{</span> <span class='hs-varid'>getAction</span> <span class='hs-keyglyph'>::</span> <span class='hs-varid'>m</span> <span class='hs-conid'>()</span> <span class='hs-layout'>}</span> 
+<a name="line-38"></a>
+<a name="line-39"></a><span class='hs-keyword'>instance</span> <span class='hs-conid'>Monad</span> <span class='hs-varid'>m</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>Monoid</span> <span class='hs-layout'>(</span><span class='hs-conid'>Action</span> <span class='hs-varid'>m</span><span class='hs-layout'>)</span> <span class='hs-keyword'>where</span>
+<a name="line-40"></a>    <span class='hs-varid'>mempty</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>Action</span> <span class='hs-layout'>(</span><span class='hs-varid'>return</span> <span class='hs-conid'>()</span><span class='hs-layout'>)</span>
+<a name="line-41"></a>    <span class='hs-conid'>Action</span> <span class='hs-varid'>a</span> <span class='hs-varop'>`mappend`</span> <span class='hs-conid'>Action</span> <span class='hs-varid'>b</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>Action</span> <span class='hs-layout'>(</span><span class='hs-varid'>a</span> <span class='hs-varop'>&gt;&gt;</span> <span class='hs-varid'>b</span><span class='hs-layout'>)</span>
+<a name="line-42"></a>
+<a name="line-43"></a><span class='hs-keyword'>instance</span> <span class='hs-conid'>Monad</span> <span class='hs-varid'>m</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>Reducer</span> <span class='hs-layout'>(</span><span class='hs-varid'>m</span> <span class='hs-varid'>a</span><span class='hs-layout'>)</span> <span class='hs-layout'>(</span><span class='hs-conid'>Action</span> <span class='hs-varid'>m</span><span class='hs-layout'>)</span> <span class='hs-keyword'>where</span>
+<a name="line-44"></a>    <span class='hs-varid'>unit</span> <span class='hs-varid'>a</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>Action</span> <span class='hs-layout'>(</span><span class='hs-varid'>a</span> <span class='hs-varop'>&gt;&gt;</span> <span class='hs-varid'>return</span> <span class='hs-conid'>()</span><span class='hs-layout'>)</span>
+<a name="line-45"></a>    <span class='hs-varid'>a</span> <span class='hs-varop'>`cons`</span> <span class='hs-conid'>Action</span> <span class='hs-varid'>b</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>Action</span> <span class='hs-layout'>(</span><span class='hs-varid'>a</span> <span class='hs-varop'>&gt;&gt;</span> <span class='hs-varid'>b</span><span class='hs-layout'>)</span>
+<a name="line-46"></a>    <span class='hs-conid'>Action</span> <span class='hs-varid'>a</span> <span class='hs-varop'>`snoc`</span> <span class='hs-varid'>b</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>Action</span> <span class='hs-layout'>(</span><span class='hs-varid'>a</span> <span class='hs-varop'>&gt;&gt;</span> <span class='hs-varid'>b</span> <span class='hs-varop'>&gt;&gt;</span> <span class='hs-varid'>return</span> <span class='hs-conid'>()</span><span class='hs-layout'>)</span>
hunk ./dist/doc/html/monoids/src/Data-Monoid-Monad.html 56
-<a name="line-48"></a><a name="snocAction"></a><span class='hs-comment'>-- | Efficiently avoid needlessly rebinding when using 'snoc' on an action that already returns ()</span>
-<a name="line-49"></a><span class='hs-comment'>--   A rewrite rule automatically applies this when possible</span>
-<a name="line-50"></a><span class='hs-definition'>snocAction</span> <span class='hs-keyglyph'>::</span> <span class='hs-conid'>Reducer</span> <span class='hs-layout'>(</span><span class='hs-varid'>m</span> <span class='hs-conid'>()</span><span class='hs-layout'>)</span> <span class='hs-layout'>(</span><span class='hs-conid'>Action</span> <span class='hs-varid'>m</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>Action</span> <span class='hs-varid'>m</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-varid'>m</span> <span class='hs-conid'>()</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-conid'>Action</span> <span class='hs-varid'>m</span>
-<a name="line-51"></a><span class='hs-definition'>snocAction</span> <span class='hs-varid'>a</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>mappend</span> <span class='hs-varid'>a</span> <span class='hs-varop'>.</span> <span class='hs-conid'>Action</span>
-<a name="line-52"></a>
-<a name="line-53"></a><span class='hs-comment'>-- | A 'WrappedMonad' turns any 'MonadPlus' instance into a 'Monoid'.</span>
-<a name="line-54"></a><span class='hs-comment'>--   It also provides a 'Multiplicative' instance for a 'Monad' wrapped around a 'Monoid'</span>
-<a name="line-55"></a><span class='hs-comment'>--   and asserts that any 'MonadPlus' applied to a 'Monoid' forms a 'LeftSemiNearRing' </span>
-<a name="line-56"></a><span class='hs-comment'>--   under these operations.</span>
-<a name="line-57"></a>
-<a name="line-58"></a><a name="WrappedMonad"></a><span class='hs-keyword'>newtype</span> <span class='hs-conid'>WrappedMonad</span> <span class='hs-varid'>m</span> <span class='hs-varid'>a</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>WrappedMonad</span> <span class='hs-layout'>{</span> <span class='hs-varid'>getWrappedMonad</span> <span class='hs-keyglyph'>::</span> <span class='hs-varid'>m</span> <span class='hs-varid'>a</span> <span class='hs-layout'>}</span> 
-<a name="line-59"></a>    <span class='hs-keyword'>deriving</span> <span class='hs-layout'>(</span><span class='hs-conid'>Eq</span><span class='hs-layout'>,</span><span class='hs-conid'>Ord</span><span class='hs-layout'>,</span><span class='hs-conid'>Show</span><span class='hs-layout'>,</span><span class='hs-conid'>Read</span><span class='hs-layout'>,</span><span class='hs-conid'>Functor</span><span class='hs-layout'>,</span><span class='hs-conid'>Pointed</span><span class='hs-layout'>,</span> <span class='hs-conid'>Monad</span><span class='hs-layout'>,</span><span class='hs-conid'>MonadPlus</span><span class='hs-layout'>)</span>
+<a name="line-48"></a><span class='hs-comment'>{-# RULES "unitAction" unit = Action #-}</span>
+<a name="line-49"></a><span class='hs-comment'>{-# RULES "snocAction" snoc = snocAction #-}</span> 
+<a name="line-50"></a>
+<a name="line-51"></a><a name="snocAction"></a><span class='hs-comment'>-- | Efficiently avoid needlessly rebinding when using 'snoc' on an action that already returns ()</span>
+<a name="line-52"></a><span class='hs-comment'>--   A rewrite rule automatically applies this when possible</span>
+<a name="line-53"></a><span class='hs-definition'>snocAction</span> <span class='hs-keyglyph'>::</span> <span class='hs-conid'>Reducer</span> <span class='hs-layout'>(</span><span class='hs-varid'>m</span> <span class='hs-conid'>()</span><span class='hs-layout'>)</span> <span class='hs-layout'>(</span><span class='hs-conid'>Action</span> <span class='hs-varid'>m</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>Action</span> <span class='hs-varid'>m</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-varid'>m</span> <span class='hs-conid'>()</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-conid'>Action</span> <span class='hs-varid'>m</span>
+<a name="line-54"></a><span class='hs-definition'>snocAction</span> <span class='hs-varid'>a</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>mappend</span> <span class='hs-varid'>a</span> <span class='hs-varop'>.</span> <span class='hs-conid'>Action</span>
+<a name="line-55"></a>
+<a name="line-56"></a><span class='hs-comment'>-- | A 'WrappedMonad' turns any 'MonadPlus' instance into a 'Monoid'.</span>
+<a name="line-57"></a><span class='hs-comment'>--   It also provides a 'Multiplicative' instance for a 'Monad' wrapped around a 'Monoid'</span>
+<a name="line-58"></a><span class='hs-comment'>--   and asserts that any 'MonadPlus' applied to a 'Monoid' forms a 'LeftSemiNearRing' </span>
+<a name="line-59"></a><span class='hs-comment'>--   under these operations.</span>
hunk ./dist/doc/html/monoids/src/Data-Monoid-Monad.html 69
-<a name="line-61"></a><span class='hs-keyword'>instance</span> <span class='hs-layout'>(</span><span class='hs-conid'>Monad</span> <span class='hs-varid'>m</span><span class='hs-layout'>,</span> <span class='hs-conid'>Monoid</span> <span class='hs-varid'>a</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>Multiplicative</span> <span class='hs-layout'>(</span><span class='hs-conid'>WrappedMonad</span> <span class='hs-varid'>m</span> <span class='hs-varid'>a</span><span class='hs-layout'>)</span> <span class='hs-keyword'>where</span>
-<a name="line-62"></a>    <span class='hs-varid'>one</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>WrappedMonad</span> <span class='hs-layout'>(</span><span class='hs-varid'>return</span> <span class='hs-varid'>mempty</span><span class='hs-layout'>)</span>
-<a name="line-63"></a>    <span class='hs-conid'>WrappedMonad</span> <span class='hs-varid'>m</span> <span class='hs-varop'>`times`</span> <span class='hs-conid'>WrappedMonad</span> <span class='hs-varid'>n</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>WrappedMonad</span> <span class='hs-layout'>(</span><span class='hs-varid'>liftM2</span> <span class='hs-varid'>mappend</span> <span class='hs-varid'>m</span> <span class='hs-varid'>n</span><span class='hs-layout'>)</span>
-<a name="line-64"></a>    
-<a name="line-65"></a><span class='hs-keyword'>instance</span> <span class='hs-layout'>(</span><span class='hs-conid'>MonadPlus</span> <span class='hs-varid'>m</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>Monoid</span> <span class='hs-layout'>(</span><span class='hs-conid'>WrappedMonad</span> <span class='hs-varid'>m</span> <span class='hs-varid'>a</span><span class='hs-layout'>)</span> <span class='hs-keyword'>where</span>
-<a name="line-66"></a>    <span class='hs-varid'>mempty</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>mzero</span>
-<a name="line-67"></a>    <span class='hs-varid'>mappend</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>mplus</span>
-<a name="line-68"></a>
-<a name="line-69"></a><span class='hs-keyword'>instance</span> <span class='hs-layout'>(</span><span class='hs-conid'>MonadPlus</span> <span class='hs-varid'>m</span><span class='hs-layout'>,</span> <span class='hs-varid'>c</span> <span class='hs-varop'>`Reducer`</span> <span class='hs-varid'>a</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>Reducer</span> <span class='hs-varid'>c</span> <span class='hs-layout'>(</span><span class='hs-conid'>WrappedMonad</span> <span class='hs-varid'>m</span> <span class='hs-varid'>a</span><span class='hs-layout'>)</span> <span class='hs-keyword'>where</span>
-<a name="line-70"></a>    <span class='hs-varid'>unit</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>WrappedMonad</span> <span class='hs-varop'>.</span> <span class='hs-varid'>return</span> <span class='hs-varop'>.</span> <span class='hs-varid'>unit</span>
+<a name="line-61"></a><a name="WrappedMonad"></a><span class='hs-keyword'>newtype</span> <span class='hs-conid'>WrappedMonad</span> <span class='hs-varid'>m</span> <span class='hs-varid'>a</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>WrappedMonad</span> <span class='hs-layout'>{</span> <span class='hs-varid'>getWrappedMonad</span> <span class='hs-keyglyph'>::</span> <span class='hs-varid'>m</span> <span class='hs-varid'>a</span> <span class='hs-layout'>}</span> 
+<a name="line-62"></a>    <span class='hs-keyword'>deriving</span> <span class='hs-layout'>(</span><span class='hs-conid'>Eq</span><span class='hs-layout'>,</span><span class='hs-conid'>Ord</span><span class='hs-layout'>,</span><span class='hs-conid'>Show</span><span class='hs-layout'>,</span><span class='hs-conid'>Read</span><span class='hs-layout'>,</span><span class='hs-conid'>Functor</span><span class='hs-layout'>,</span><span class='hs-conid'>Pointed</span><span class='hs-layout'>,</span> <span class='hs-conid'>Monad</span><span class='hs-layout'>,</span><span class='hs-conid'>MonadPlus</span><span class='hs-layout'>)</span>
+<a name="line-63"></a>
+<a name="line-64"></a><span class='hs-keyword'>instance</span> <span class='hs-layout'>(</span><span class='hs-conid'>Monad</span> <span class='hs-varid'>m</span><span class='hs-layout'>,</span> <span class='hs-conid'>Monoid</span> <span class='hs-varid'>a</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>Multiplicative</span> <span class='hs-layout'>(</span><span class='hs-conid'>WrappedMonad</span> <span class='hs-varid'>m</span> <span class='hs-varid'>a</span><span class='hs-layout'>)</span> <span class='hs-keyword'>where</span>
+<a name="line-65"></a>    <span class='hs-varid'>one</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>WrappedMonad</span> <span class='hs-layout'>(</span><span class='hs-varid'>return</span> <span class='hs-varid'>mempty</span><span class='hs-layout'>)</span>
+<a name="line-66"></a>    <span class='hs-conid'>WrappedMonad</span> <span class='hs-varid'>m</span> <span class='hs-varop'>`times`</span> <span class='hs-conid'>WrappedMonad</span> <span class='hs-varid'>n</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>WrappedMonad</span> <span class='hs-layout'>(</span><span class='hs-varid'>liftM2</span> <span class='hs-varid'>mappend</span> <span class='hs-varid'>m</span> <span class='hs-varid'>n</span><span class='hs-layout'>)</span>
+<a name="line-67"></a>    
+<a name="line-68"></a><span class='hs-keyword'>instance</span> <span class='hs-layout'>(</span><span class='hs-conid'>MonadPlus</span> <span class='hs-varid'>m</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>Monoid</span> <span class='hs-layout'>(</span><span class='hs-conid'>WrappedMonad</span> <span class='hs-varid'>m</span> <span class='hs-varid'>a</span><span class='hs-layout'>)</span> <span class='hs-keyword'>where</span>
+<a name="line-69"></a>    <span class='hs-varid'>mempty</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>mzero</span>
+<a name="line-70"></a>    <span class='hs-varid'>mappend</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>mplus</span>
hunk ./dist/doc/html/monoids/src/Data-Monoid-Monad.html 80
-<a name="line-72"></a><span class='hs-keyword'>instance</span> <span class='hs-layout'>(</span><span class='hs-conid'>MonadPlus</span> <span class='hs-varid'>m</span><span class='hs-layout'>,</span> <span class='hs-conid'>Monoid</span> <span class='hs-varid'>a</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>LeftSemiNearRing</span> <span class='hs-layout'>(</span><span class='hs-conid'>WrappedMonad</span> <span class='hs-varid'>m</span> <span class='hs-varid'>a</span><span class='hs-layout'>)</span>
+<a name="line-72"></a><span class='hs-keyword'>instance</span> <span class='hs-layout'>(</span><span class='hs-conid'>MonadPlus</span> <span class='hs-varid'>m</span><span class='hs-layout'>,</span> <span class='hs-varid'>c</span> <span class='hs-varop'>`Reducer`</span> <span class='hs-varid'>a</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>Reducer</span> <span class='hs-varid'>c</span> <span class='hs-layout'>(</span><span class='hs-conid'>WrappedMonad</span> <span class='hs-varid'>m</span> <span class='hs-varid'>a</span><span class='hs-layout'>)</span> <span class='hs-keyword'>where</span>
+<a name="line-73"></a>    <span class='hs-varid'>unit</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>WrappedMonad</span> <span class='hs-varop'>.</span> <span class='hs-varid'>return</span> <span class='hs-varop'>.</span> <span class='hs-varid'>unit</span>
+<a name="line-74"></a>
+<a name="line-75"></a><span class='hs-keyword'>instance</span> <span class='hs-layout'>(</span><span class='hs-conid'>MonadPlus</span> <span class='hs-varid'>m</span><span class='hs-layout'>,</span> <span class='hs-conid'>Monoid</span> <span class='hs-varid'>a</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>LeftSemiNearRing</span> <span class='hs-layout'>(</span><span class='hs-conid'>WrappedMonad</span> <span class='hs-varid'>m</span> <span class='hs-varid'>a</span><span class='hs-layout'>)</span>
+<a name="line-76"></a>
+<a name="line-77"></a><span class='hs-comment'>-- | if @m@ is a 'Module' over @r@ and @f@ is a 'Monad' then @f `ActionWith` m@ is a 'Module' as well</span>
+<a name="line-78"></a>
+<a name="line-79"></a><a name="ActionWith"></a><span class='hs-keyword'>newtype</span> <span class='hs-conid'>ActionWith</span> <span class='hs-varid'>f</span> <span class='hs-varid'>m</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>ActionWith</span> <span class='hs-layout'>{</span> <span class='hs-varid'>getActionWith</span> <span class='hs-keyglyph'>::</span> <span class='hs-varid'>f</span> <span class='hs-varid'>m</span> <span class='hs-layout'>}</span> 
+<a name="line-80"></a>    <span class='hs-keyword'>deriving</span> <span class='hs-layout'>(</span><span class='hs-conid'>Eq</span><span class='hs-layout'>,</span><span class='hs-conid'>Ord</span><span class='hs-layout'>,</span><span class='hs-conid'>Show</span><span class='hs-layout'>,</span><span class='hs-conid'>Read</span><span class='hs-layout'>,</span><span class='hs-conid'>Functor</span><span class='hs-layout'>,</span><span class='hs-conid'>Pointed</span><span class='hs-layout'>,</span> <span class='hs-conid'>Monad</span><span class='hs-layout'>,</span><span class='hs-conid'>MonadPlus</span><span class='hs-layout'>)</span>
+<a name="line-81"></a>
+<a name="line-82"></a><span class='hs-keyword'>instance</span> <span class='hs-layout'>(</span><span class='hs-conid'>Monoid</span> <span class='hs-varid'>m</span><span class='hs-layout'>,</span> <span class='hs-conid'>Monad</span> <span class='hs-varid'>f</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>Monoid</span> <span class='hs-layout'>(</span><span class='hs-varid'>f</span> <span class='hs-varop'>`ActionWith`</span> <span class='hs-varid'>m</span><span class='hs-layout'>)</span> <span class='hs-keyword'>where</span>
+<a name="line-83"></a>    <span class='hs-varid'>mempty</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>return</span> <span class='hs-varid'>mempty</span>
+<a name="line-84"></a>    <span class='hs-varid'>mappend</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>liftM2</span> <span class='hs-varid'>mappend</span>
+<a name="line-85"></a>
+<a name="line-86"></a><span class='hs-keyword'>instance</span> <span class='hs-layout'>(</span><span class='hs-conid'>Group</span> <span class='hs-varid'>m</span><span class='hs-layout'>,</span> <span class='hs-conid'>Monad</span> <span class='hs-varid'>f</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>Group</span> <span class='hs-layout'>(</span><span class='hs-varid'>f</span> <span class='hs-varop'>`ActionWith`</span> <span class='hs-varid'>m</span><span class='hs-layout'>)</span> <span class='hs-keyword'>where</span>
+<a name="line-87"></a>    <span class='hs-varid'>gnegate</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>liftM</span> <span class='hs-varid'>gnegate</span>
+<a name="line-88"></a>    <span class='hs-varid'>minus</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>liftM2</span> <span class='hs-varid'>minus</span>
+<a name="line-89"></a>    <span class='hs-varid'>gsubtract</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>liftM2</span> <span class='hs-varid'>gsubtract</span>
+<a name="line-90"></a>
+<a name="line-91"></a><span class='hs-keyword'>instance</span> <span class='hs-layout'>(</span><span class='hs-varid'>c</span> <span class='hs-varop'>`Reducer`</span> <span class='hs-varid'>m</span><span class='hs-layout'>,</span> <span class='hs-conid'>Monad</span> <span class='hs-varid'>f</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>Reducer</span> <span class='hs-varid'>c</span> <span class='hs-layout'>(</span><span class='hs-varid'>f</span> <span class='hs-varop'>`ActionWith`</span> <span class='hs-varid'>m</span><span class='hs-layout'>)</span> <span class='hs-keyword'>where</span>
+<a name="line-92"></a>    <span class='hs-varid'>unit</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>return</span> <span class='hs-varop'>.</span> <span class='hs-varid'>unit</span>
+<a name="line-93"></a>
+<a name="line-94"></a><span class='hs-keyword'>instance</span> <span class='hs-layout'>(</span><span class='hs-conid'>LeftModule</span> <span class='hs-varid'>r</span> <span class='hs-varid'>m</span><span class='hs-layout'>,</span> <span class='hs-conid'>Monad</span> <span class='hs-varid'>f</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>LeftModule</span> <span class='hs-varid'>r</span> <span class='hs-layout'>(</span><span class='hs-varid'>f</span> <span class='hs-varop'>`ActionWith`</span> <span class='hs-varid'>m</span><span class='hs-layout'>)</span> <span class='hs-keyword'>where</span>
+<a name="line-95"></a>    <span class='hs-varid'>x</span> <span class='hs-varop'>*.</span> <span class='hs-varid'>m</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>liftM</span> <span class='hs-layout'>(</span><span class='hs-varid'>x</span> <span class='hs-varop'>*.</span><span class='hs-layout'>)</span> <span class='hs-varid'>m</span>
+<a name="line-96"></a>
+<a name="line-97"></a><span class='hs-keyword'>instance</span> <span class='hs-layout'>(</span><span class='hs-conid'>RightModule</span> <span class='hs-varid'>r</span> <span class='hs-varid'>m</span><span class='hs-layout'>,</span> <span class='hs-conid'>Monad</span> <span class='hs-varid'>f</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>RightModule</span> <span class='hs-varid'>r</span> <span class='hs-layout'>(</span><span class='hs-varid'>f</span> <span class='hs-varop'>`ActionWith`</span> <span class='hs-varid'>m</span><span class='hs-layout'>)</span> <span class='hs-keyword'>where</span>
+<a name="line-98"></a>    <span class='hs-varid'>m</span> <span class='hs-varop'>.*</span> <span class='hs-varid'>y</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>liftM</span> <span class='hs-layout'>(</span><span class='hs-varop'>.*</span> <span class='hs-varid'>y</span><span class='hs-layout'>)</span> <span class='hs-varid'>m</span>
+<a name="line-99"></a>
+<a name="line-100"></a><span class='hs-keyword'>instance</span> <span class='hs-layout'>(</span><span class='hs-conid'>Module</span> <span class='hs-varid'>r</span> <span class='hs-varid'>m</span><span class='hs-layout'>,</span> <span class='hs-conid'>Monad</span> <span class='hs-varid'>f</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>Module</span> <span class='hs-varid'>r</span> <span class='hs-layout'>(</span><span class='hs-varid'>f</span> <span class='hs-varop'>`ActionWith`</span> <span class='hs-varid'>m</span><span class='hs-layout'>)</span>
hunk ./dist/doc/html/monoids/src/Data-Monoid-Multiplicative.html 80
-<a name="line-72"></a><span class='hs-keyword'>import</span> <span class='hs-keyword'>qualified</span> <span class='hs-conid'>Data</span><span class='hs-varop'>.</span><span class='hs-conid'>Sequence</span> <span class='hs-keyword'>as</span> <span class='hs-conid'>Seq</span>
-<a name="line-73"></a><span class='hs-keyword'>import</span> <span class='hs-conid'>Data</span><span class='hs-varop'>.</span><span class='hs-conid'>Sequence</span> <span class='hs-layout'>(</span><span class='hs-conid'>Seq</span><span class='hs-layout'>)</span>
-<a name="line-74"></a>
-<a name="line-75"></a><span class='hs-keyword'>import</span> <span class='hs-conid'>Text</span><span class='hs-varop'>.</span><span class='hs-conid'>Parsec</span><span class='hs-varop'>.</span><span class='hs-conid'>Prim</span>
+<a name="line-72"></a><span class='hs-keyword'>import</span> <span class='hs-conid'>Data</span><span class='hs-varop'>.</span><span class='hs-conid'>Ratio</span>
+<a name="line-73"></a>
+<a name="line-74"></a><span class='hs-keyword'>import</span> <span class='hs-keyword'>qualified</span> <span class='hs-conid'>Data</span><span class='hs-varop'>.</span><span class='hs-conid'>Sequence</span> <span class='hs-keyword'>as</span> <span class='hs-conid'>Seq</span>
+<a name="line-75"></a><span class='hs-keyword'>import</span> <span class='hs-conid'>Data</span><span class='hs-varop'>.</span><span class='hs-conid'>Sequence</span> <span class='hs-layout'>(</span><span class='hs-conid'>Seq</span><span class='hs-layout'>)</span>
hunk ./dist/doc/html/monoids/src/Data-Monoid-Multiplicative.html 85
-<a name="line-77"></a><a name="Multiplicative"></a><span class='hs-keyword'>class</span> <span class='hs-conid'>Multiplicative</span> <span class='hs-varid'>m</span> <span class='hs-keyword'>where</span>
-<a name="line-78"></a>    <span class='hs-varid'>one</span> <span class='hs-keyglyph'>::</span> <span class='hs-varid'>m</span>
-<a name="line-79"></a>    <span class='hs-varid'>times</span> <span class='hs-keyglyph'>::</span> <span class='hs-varid'>m</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-varid'>m</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-varid'>m</span>
-<a name="line-80"></a>
-<a name="line-81"></a><a name="Log"></a><span class='hs-comment'>-- | Convert a 'Multiplicative' into a 'Monoid'. Mnemonic: @Log a + Log b = Log (a * b)@</span>
-<a name="line-82"></a><a name="Log"></a><span class='hs-keyword'>data</span> <span class='hs-conid'>Log</span> <span class='hs-varid'>m</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>Log</span> <span class='hs-layout'>{</span> <span class='hs-varid'>getLog</span> <span class='hs-keyglyph'>::</span> <span class='hs-varid'>m</span> <span class='hs-layout'>}</span>
-<a name="line-83"></a>
-<a name="line-84"></a><span class='hs-keyword'>instance</span> <span class='hs-conid'>Multiplicative</span> <span class='hs-varid'>m</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>Monoid</span> <span class='hs-layout'>(</span><span class='hs-conid'>Log</span> <span class='hs-varid'>m</span><span class='hs-layout'>)</span> <span class='hs-keyword'>where</span>
-<a name="line-85"></a>    <span class='hs-varid'>mempty</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>Log</span> <span class='hs-varid'>one</span>
-<a name="line-86"></a>    <span class='hs-conid'>Log</span> <span class='hs-varid'>a</span> <span class='hs-varop'>`mappend`</span> <span class='hs-conid'>Log</span> <span class='hs-varid'>b</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>Log</span> <span class='hs-layout'>(</span><span class='hs-varid'>a</span> <span class='hs-varop'>`times`</span> <span class='hs-varid'>b</span><span class='hs-layout'>)</span>
-<a name="line-87"></a>
-<a name="line-88"></a><a name="Exp"></a><span class='hs-comment'>-- | Convert a 'Monoid' into a 'Multiplicative'. Mnemonic: @Exp a * Exp b = Exp (a + b)@</span>
-<a name="line-89"></a><a name="Exp"></a><span class='hs-keyword'>data</span> <span class='hs-conid'>Exp</span> <span class='hs-varid'>m</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>Exp</span> <span class='hs-layout'>{</span> <span class='hs-varid'>getExp</span> <span class='hs-keyglyph'>::</span> <span class='hs-varid'>m</span> <span class='hs-layout'>}</span>
-<a name="line-90"></a>
-<a name="line-91"></a><span class='hs-keyword'>instance</span> <span class='hs-conid'>Monoid</span> <span class='hs-varid'>m</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>Multiplicative</span> <span class='hs-layout'>(</span><span class='hs-conid'>Exp</span> <span class='hs-varid'>m</span><span class='hs-layout'>)</span> <span class='hs-keyword'>where</span>
-<a name="line-92"></a>    <span class='hs-varid'>one</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>Exp</span> <span class='hs-varid'>mempty</span>
-<a name="line-93"></a>    <span class='hs-conid'>Exp</span> <span class='hs-varid'>a</span> <span class='hs-varop'>`times`</span> <span class='hs-conid'>Exp</span> <span class='hs-varid'>b</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>Exp</span> <span class='hs-layout'>(</span><span class='hs-varid'>a</span> <span class='hs-varop'>`mappend`</span> <span class='hs-varid'>b</span><span class='hs-layout'>)</span>
-<a name="line-94"></a>
-<a name="line-95"></a><span class='hs-comment'>-- simple monoid transformer instances</span>
-<a name="line-96"></a><span class='hs-keyword'>instance</span> <span class='hs-conid'>Multiplicative</span> <span class='hs-varid'>m</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>Multiplicative</span> <span class='hs-layout'>(</span><span class='hs-conid'>Self</span> <span class='hs-varid'>m</span><span class='hs-layout'>)</span> <span class='hs-keyword'>where</span>
-<a name="line-97"></a>    <span class='hs-varid'>one</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>Self</span> <span class='hs-varid'>one</span>  
-<a name="line-98"></a>    <span class='hs-conid'>Self</span> <span class='hs-varid'>a</span> <span class='hs-varop'>`times`</span> <span class='hs-conid'>Self</span> <span class='hs-varid'>b</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>Self</span> <span class='hs-layout'>(</span><span class='hs-varid'>a</span> <span class='hs-varop'>`times`</span> <span class='hs-varid'>b</span><span class='hs-layout'>)</span>
-<a name="line-99"></a>
-<a name="line-100"></a><span class='hs-keyword'>instance</span> <span class='hs-conid'>Multiplicative</span> <span class='hs-varid'>m</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>Multiplicative</span> <span class='hs-layout'>(</span><span class='hs-conid'>FromString</span> <span class='hs-varid'>m</span><span class='hs-layout'>)</span> <span class='hs-keyword'>where</span>
-<a name="line-101"></a>    <span class='hs-varid'>one</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>FromString</span> <span class='hs-varid'>one</span>
-<a name="line-102"></a>    <span class='hs-conid'>FromString</span> <span class='hs-varid'>a</span> <span class='hs-varop'>`times`</span> <span class='hs-conid'>FromString</span> <span class='hs-varid'>b</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>FromString</span> <span class='hs-layout'>(</span><span class='hs-varid'>a</span> <span class='hs-varop'>`times`</span> <span class='hs-varid'>b</span><span class='hs-layout'>)</span>
-<a name="line-103"></a>
-<a name="line-104"></a><span class='hs-comment'>-- the goal of this is that I can make left seminearrings out of any 'Alternative' wrapped around a monoid</span>
-<a name="line-105"></a><span class='hs-comment'>-- in particular its useful for containers</span>
-<a name="line-106"></a>
-<a name="line-107"></a><span class='hs-keyword'>instance</span> <span class='hs-conid'>Monoid</span> <span class='hs-varid'>m</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>Multiplicative</span> <span class='hs-keyglyph'>[</span><span class='hs-varid'>m</span><span class='hs-keyglyph'>]</span> <span class='hs-keyword'>where</span>
-<a name="line-108"></a>    <span class='hs-varid'>one</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>return</span> <span class='hs-varid'>mempty</span>
-<a name="line-109"></a>    <span class='hs-varid'>times</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>liftM2</span> <span class='hs-varid'>mappend</span>
-<a name="line-110"></a>
-<a name="line-111"></a><span class='hs-keyword'>instance</span> <span class='hs-conid'>Monoid</span> <span class='hs-varid'>m</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>Multiplicative</span> <span class='hs-layout'>(</span><span class='hs-conid'>Seq</span> <span class='hs-varid'>m</span><span class='hs-layout'>)</span> <span class='hs-keyword'>where</span>
-<a name="line-112"></a>    <span class='hs-varid'>one</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>return</span> <span class='hs-varid'>mempty</span>
-<a name="line-113"></a>    <span class='hs-varid'>times</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>liftM2</span> <span class='hs-varid'>mappend</span>
-<a name="line-114"></a>
-<a name="line-115"></a><span class='hs-comment'>-- and things that can't quite be a Monad in Haskell</span>
-<a name="line-116"></a><span class='hs-keyword'>instance</span> <span class='hs-layout'>(</span><span class='hs-conid'>Measured</span> <span class='hs-varid'>v</span> <span class='hs-varid'>m</span><span class='hs-layout'>,</span> <span class='hs-conid'>Monoid</span> <span class='hs-varid'>m</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>Multiplicative</span> <span class='hs-layout'>(</span><span class='hs-conid'>FingerTree</span> <span class='hs-varid'>v</span> <span class='hs-varid'>m</span><span class='hs-layout'>)</span> <span class='hs-keyword'>where</span>
-<a name="line-117"></a>    <span class='hs-varid'>one</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>singleton</span> <span class='hs-varid'>mempty</span>
-<a name="line-118"></a>    <span class='hs-varid'>xss</span> <span class='hs-varop'>`times`</span> <span class='hs-varid'>yss</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>getSelf</span> <span class='hs-varop'>$</span> <span class='hs-varid'>mapReduce</span> <span class='hs-layout'>(</span><span class='hs-varid'>flip</span> <span class='hs-varid'>fmap'</span> <span class='hs-varid'>yss</span> <span class='hs-varop'>.</span> <span class='hs-varid'>mappend</span><span class='hs-layout'>)</span> <span class='hs-varid'>xss</span>
-<a name="line-119"></a>
-<a name="line-120"></a><span class='hs-comment'>-- but it can at least serve as a canonical multiplication for any monad. </span>
-<a name="line-121"></a><span class='hs-keyword'>instance</span> <span class='hs-conid'>Monoid</span> <span class='hs-varid'>m</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>Multiplicative</span> <span class='hs-layout'>(</span><span class='hs-conid'>Maybe</span> <span class='hs-varid'>m</span><span class='hs-layout'>)</span> <span class='hs-keyword'>where</span>
-<a name="line-122"></a>    <span class='hs-varid'>one</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>return</span> <span class='hs-varid'>mempty</span>
-<a name="line-123"></a>    <span class='hs-varid'>times</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>liftM2</span> <span class='hs-varid'>mappend</span>
-<a name="line-124"></a>
-<a name="line-125"></a><span class='hs-keyword'>instance</span> <span class='hs-conid'>Monoid</span> <span class='hs-varid'>m</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>Multiplicative</span> <span class='hs-layout'>(</span><span class='hs-conid'>Identity</span> <span class='hs-varid'>m</span><span class='hs-layout'>)</span> <span class='hs-keyword'>where</span>
-<a name="line-126"></a>    <span class='hs-varid'>one</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>return</span> <span class='hs-varid'>mempty</span>
-<a name="line-127"></a>    <span class='hs-varid'>times</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>liftM2</span> <span class='hs-varid'>mappend</span>
-<a name="line-128"></a>
-<a name="line-129"></a><span class='hs-keyword'>instance</span> <span class='hs-layout'>(</span><span class='hs-conid'>Monoid</span> <span class='hs-varid'>m</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>Multiplicative</span> <span class='hs-layout'>(</span><span class='hs-conid'>Cont</span> <span class='hs-varid'>r</span> <span class='hs-varid'>m</span><span class='hs-layout'>)</span> <span class='hs-keyword'>where</span>
-<a name="line-130"></a>    <span class='hs-varid'>one</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>return</span> <span class='hs-varid'>mempty</span>
-<a name="line-131"></a>    <span class='hs-varid'>times</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>liftM2</span> <span class='hs-varid'>mappend</span>
-<a name="line-132"></a>
-<a name="line-133"></a><span class='hs-keyword'>instance</span> <span class='hs-layout'>(</span><span class='hs-conid'>Monoid</span> <span class='hs-varid'>w</span><span class='hs-layout'>,</span> <span class='hs-conid'>Monoid</span> <span class='hs-varid'>m</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>Multiplicative</span> <span class='hs-layout'>(</span><span class='hs-conid'>SRWS</span><span class='hs-varop'>.</span><span class='hs-conid'>RWS</span> <span class='hs-varid'>r</span> <span class='hs-varid'>w</span> <span class='hs-varid'>s</span> <span class='hs-varid'>m</span><span class='hs-layout'>)</span> <span class='hs-keyword'>where</span>
-<a name="line-134"></a>    <span class='hs-varid'>one</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>return</span> <span class='hs-varid'>mempty</span>
-<a name="line-135"></a>    <span class='hs-varid'>times</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>liftM2</span> <span class='hs-varid'>mappend</span>
-<a name="line-136"></a>
-<a name="line-137"></a><span class='hs-keyword'>instance</span> <span class='hs-layout'>(</span><span class='hs-conid'>Monoid</span> <span class='hs-varid'>w</span><span class='hs-layout'>,</span> <span class='hs-conid'>Monoid</span> <span class='hs-varid'>m</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>Multiplicative</span> <span class='hs-layout'>(</span><span class='hs-conid'>LRWS</span><span class='hs-varop'>.</span><span class='hs-conid'>RWS</span> <span class='hs-varid'>r</span> <span class='hs-varid'>w</span> <span class='hs-varid'>s</span> <span class='hs-varid'>m</span><span class='hs-layout'>)</span> <span class='hs-keyword'>where</span>
-<a name="line-138"></a>    <span class='hs-varid'>one</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>return</span> <span class='hs-varid'>mempty</span>
-<a name="line-139"></a>    <span class='hs-varid'>times</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>liftM2</span> <span class='hs-varid'>mappend</span>
-<a name="line-140"></a>
-<a name="line-141"></a><span class='hs-keyword'>instance</span> <span class='hs-conid'>Monoid</span> <span class='hs-varid'>m</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>Multiplicative</span> <span class='hs-layout'>(</span><span class='hs-conid'>SState</span><span class='hs-varop'>.</span><span class='hs-conid'>State</span> <span class='hs-varid'>s</span> <span class='hs-varid'>m</span><span class='hs-layout'>)</span> <span class='hs-keyword'>where</span>
-<a name="line-142"></a>    <span class='hs-varid'>one</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>return</span> <span class='hs-varid'>mempty</span>
-<a name="line-143"></a>    <span class='hs-varid'>times</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>liftM2</span> <span class='hs-varid'>mappend</span>
-<a name="line-144"></a>
-<a name="line-145"></a><span class='hs-keyword'>instance</span> <span class='hs-conid'>Monoid</span> <span class='hs-varid'>m</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>Multiplicative</span> <span class='hs-layout'>(</span><span class='hs-conid'>LState</span><span class='hs-varop'>.</span><span class='hs-conid'>State</span> <span class='hs-varid'>s</span> <span class='hs-varid'>m</span><span class='hs-layout'>)</span> <span class='hs-keyword'>where</span>
-<a name="line-146"></a>    <span class='hs-varid'>one</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>return</span> <span class='hs-varid'>mempty</span>
-<a name="line-147"></a>    <span class='hs-varid'>times</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>liftM2</span> <span class='hs-varid'>mappend</span>
-<a name="line-148"></a>
-<a name="line-149"></a><span class='hs-keyword'>instance</span> <span class='hs-conid'>Monoid</span> <span class='hs-varid'>m</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>Multiplicative</span> <span class='hs-layout'>(</span><span class='hs-conid'>Reader</span> <span class='hs-varid'>e</span> <span class='hs-varid'>m</span><span class='hs-layout'>)</span> <span class='hs-keyword'>where</span>
-<a name="line-150"></a>    <span class='hs-varid'>one</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>return</span> <span class='hs-varid'>mempty</span>
-<a name="line-151"></a>    <span class='hs-varid'>times</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>liftM2</span> <span class='hs-varid'>mappend</span>
-<a name="line-152"></a>
-<a name="line-153"></a><span class='hs-keyword'>instance</span> <span class='hs-layout'>(</span><span class='hs-conid'>Monoid</span> <span class='hs-varid'>w</span><span class='hs-layout'>,</span> <span class='hs-conid'>Monoid</span> <span class='hs-varid'>m</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>Multiplicative</span> <span class='hs-layout'>(</span><span class='hs-conid'>SWriter</span><span class='hs-varop'>.</span><span class='hs-conid'>Writer</span> <span class='hs-varid'>w</span> <span class='hs-varid'>m</span><span class='hs-layout'>)</span> <span class='hs-keyword'>where</span>
-<a name="line-154"></a>    <span class='hs-varid'>one</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>return</span> <span class='hs-varid'>mempty</span>
-<a name="line-155"></a>    <span class='hs-varid'>times</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>liftM2</span> <span class='hs-varid'>mappend</span>
-<a name="line-156"></a>
-<a name="line-157"></a><span class='hs-keyword'>instance</span> <span class='hs-layout'>(</span><span class='hs-conid'>Monoid</span> <span class='hs-varid'>w</span><span class='hs-layout'>,</span> <span class='hs-conid'>Monoid</span> <span class='hs-varid'>m</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>Multiplicative</span> <span class='hs-layout'>(</span><span class='hs-conid'>LWriter</span><span class='hs-varop'>.</span><span class='hs-conid'>Writer</span> <span class='hs-varid'>w</span> <span class='hs-varid'>m</span><span class='hs-layout'>)</span> <span class='hs-keyword'>where</span>
-<a name="line-158"></a>    <span class='hs-varid'>one</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>return</span> <span class='hs-varid'>mempty</span>
-<a name="line-159"></a>    <span class='hs-varid'>times</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>liftM2</span> <span class='hs-varid'>mappend</span>
-<a name="line-160"></a>
-<a name="line-161"></a><span class='hs-keyword'>instance</span> <span class='hs-layout'>(</span><span class='hs-conid'>Monad</span> <span class='hs-varid'>m</span><span class='hs-layout'>,</span> <span class='hs-conid'>Monoid</span> <span class='hs-varid'>n</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>Multiplicative</span> <span class='hs-layout'>(</span><span class='hs-conid'>ContT</span> <span class='hs-varid'>r</span> <span class='hs-varid'>m</span> <span class='hs-varid'>n</span><span class='hs-layout'>)</span> <span class='hs-keyword'>where</span>
-<a name="line-162"></a>    <span class='hs-varid'>one</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>return</span> <span class='hs-varid'>mempty</span> 
-<a name="line-163"></a>    <span class='hs-varid'>times</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>liftM2</span> <span class='hs-varid'>mappend</span>
-<a name="line-164"></a>
-<a name="line-165"></a><span class='hs-keyword'>instance</span> <span class='hs-layout'>(</span><span class='hs-conid'>Monad</span> <span class='hs-varid'>m</span><span class='hs-layout'>,</span> <span class='hs-conid'>Monoid</span> <span class='hs-varid'>w</span><span class='hs-layout'>,</span> <span class='hs-conid'>Monoid</span> <span class='hs-varid'>n</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>Multiplicative</span> <span class='hs-layout'>(</span><span class='hs-conid'>SRWS</span><span class='hs-varop'>.</span><span class='hs-conid'>RWST</span> <span class='hs-varid'>r</span> <span class='hs-varid'>w</span> <span class='hs-varid'>s</span> <span class='hs-varid'>m</span> <span class='hs-varid'>n</span><span class='hs-layout'>)</span> <span class='hs-keyword'>where</span> 
-<a name="line-166"></a>    <span class='hs-varid'>one</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>return</span> <span class='hs-varid'>mempty</span> 
-<a name="line-167"></a>    <span class='hs-varid'>times</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>liftM2</span> <span class='hs-varid'>mappend</span>
-<a name="line-168"></a>
-<a name="line-169"></a><span class='hs-keyword'>instance</span> <span class='hs-layout'>(</span><span class='hs-conid'>Monad</span> <span class='hs-varid'>m</span><span class='hs-layout'>,</span> <span class='hs-conid'>Monoid</span> <span class='hs-varid'>w</span><span class='hs-layout'>,</span> <span class='hs-conid'>Monoid</span> <span class='hs-varid'>n</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>Multiplicative</span> <span class='hs-layout'>(</span><span class='hs-conid'>LRWS</span><span class='hs-varop'>.</span><span class='hs-conid'>RWST</span> <span class='hs-varid'>r</span> <span class='hs-varid'>w</span> <span class='hs-varid'>s</span> <span class='hs-varid'>m</span> <span class='hs-varid'>n</span><span class='hs-layout'>)</span> <span class='hs-keyword'>where</span> 
-<a name="line-170"></a>    <span class='hs-varid'>one</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>return</span> <span class='hs-varid'>mempty</span> 
-<a name="line-171"></a>    <span class='hs-varid'>times</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>liftM2</span> <span class='hs-varid'>mappend</span>
-<a name="line-172"></a>
-<a name="line-173"></a><span class='hs-keyword'>instance</span> <span class='hs-layout'>(</span><span class='hs-conid'>Monad</span> <span class='hs-varid'>m</span><span class='hs-layout'>,</span> <span class='hs-conid'>Monoid</span> <span class='hs-varid'>n</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>Multiplicative</span> <span class='hs-layout'>(</span><span class='hs-conid'>SState</span><span class='hs-varop'>.</span><span class='hs-conid'>StateT</span> <span class='hs-varid'>s</span> <span class='hs-varid'>m</span> <span class='hs-varid'>n</span><span class='hs-layout'>)</span> <span class='hs-keyword'>where</span>
-<a name="line-174"></a>    <span class='hs-varid'>one</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>return</span> <span class='hs-varid'>mempty</span>
-<a name="line-175"></a>    <span class='hs-varid'>times</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>liftM2</span> <span class='hs-varid'>mappend</span>
-<a name="line-176"></a>
-<a name="line-177"></a><span class='hs-keyword'>instance</span> <span class='hs-layout'>(</span><span class='hs-conid'>Monad</span> <span class='hs-varid'>m</span><span class='hs-layout'>,</span> <span class='hs-conid'>Monoid</span> <span class='hs-varid'>n</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>Multiplicative</span> <span class='hs-layout'>(</span><span class='hs-conid'>LState</span><span class='hs-varop'>.</span><span class='hs-conid'>StateT</span> <span class='hs-varid'>s</span> <span class='hs-varid'>m</span> <span class='hs-varid'>n</span><span class='hs-layout'>)</span> <span class='hs-keyword'>where</span>
-<a name="line-178"></a>    <span class='hs-varid'>one</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>return</span> <span class='hs-varid'>mempty</span>
-<a name="line-179"></a>    <span class='hs-varid'>times</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>liftM2</span> <span class='hs-varid'>mappend</span>
-<a name="line-180"></a>
-<a name="line-181"></a><span class='hs-keyword'>instance</span> <span class='hs-layout'>(</span><span class='hs-conid'>Monad</span> <span class='hs-varid'>m</span><span class='hs-layout'>,</span> <span class='hs-conid'>Monoid</span> <span class='hs-varid'>n</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>Multiplicative</span> <span class='hs-layout'>(</span><span class='hs-conid'>ReaderT</span> <span class='hs-varid'>e</span> <span class='hs-varid'>m</span> <span class='hs-varid'>n</span><span class='hs-layout'>)</span> <span class='hs-keyword'>where</span>
-<a name="line-182"></a>    <span class='hs-varid'>one</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>return</span> <span class='hs-varid'>mempty</span>
-<a name="line-183"></a>    <span class='hs-varid'>times</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>liftM2</span> <span class='hs-varid'>mappend</span>
-<a name="line-184"></a>
-<a name="line-185"></a><span class='hs-keyword'>instance</span> <span class='hs-layout'>(</span><span class='hs-conid'>Monad</span> <span class='hs-varid'>m</span><span class='hs-layout'>,</span> <span class='hs-conid'>Monoid</span> <span class='hs-varid'>w</span><span class='hs-layout'>,</span> <span class='hs-conid'>Monoid</span> <span class='hs-varid'>n</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>Multiplicative</span> <span class='hs-layout'>(</span><span class='hs-conid'>SWriter</span><span class='hs-varop'>.</span><span class='hs-conid'>WriterT</span> <span class='hs-varid'>w</span> <span class='hs-varid'>m</span> <span class='hs-varid'>n</span><span class='hs-layout'>)</span> <span class='hs-keyword'>where</span>
-<a name="line-186"></a>    <span class='hs-varid'>one</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>return</span> <span class='hs-varid'>mempty</span> 
-<a name="line-187"></a>    <span class='hs-varid'>times</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>liftM2</span> <span class='hs-varid'>mappend</span>
-<a name="line-188"></a>
-<a name="line-189"></a><span class='hs-keyword'>instance</span> <span class='hs-layout'>(</span><span class='hs-conid'>Monad</span> <span class='hs-varid'>m</span><span class='hs-layout'>,</span> <span class='hs-conid'>Monoid</span> <span class='hs-varid'>w</span><span class='hs-layout'>,</span> <span class='hs-conid'>Monoid</span> <span class='hs-varid'>n</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>Multiplicative</span> <span class='hs-layout'>(</span><span class='hs-conid'>LWriter</span><span class='hs-varop'>.</span><span class='hs-conid'>WriterT</span> <span class='hs-varid'>w</span> <span class='hs-varid'>m</span> <span class='hs-varid'>n</span><span class='hs-layout'>)</span> <span class='hs-keyword'>where</span>
-<a name="line-190"></a>    <span class='hs-varid'>one</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>return</span> <span class='hs-varid'>mempty</span> 
-<a name="line-191"></a>    <span class='hs-varid'>times</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>liftM2</span> <span class='hs-varid'>mappend</span>
-<a name="line-192"></a>
-<a name="line-193"></a><span class='hs-keyword'>instance</span> <span class='hs-conid'>Monoid</span> <span class='hs-varid'>n</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>Multiplicative</span> <span class='hs-layout'>(</span><span class='hs-conid'>IO</span> <span class='hs-varid'>n</span><span class='hs-layout'>)</span> <span class='hs-keyword'>where</span>
-<a name="line-194"></a>    <span class='hs-varid'>one</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>return</span> <span class='hs-varid'>mempty</span>
-<a name="line-195"></a>    <span class='hs-varid'>times</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>liftM2</span> <span class='hs-varid'>mappend</span>
-<a name="line-196"></a>
-<a name="line-197"></a><span class='hs-keyword'>instance</span> <span class='hs-conid'>Monoid</span> <span class='hs-varid'>n</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>Multiplicative</span> <span class='hs-layout'>(</span><span class='hs-conid'>SST</span><span class='hs-varop'>.</span><span class='hs-conid'>ST</span> <span class='hs-varid'>s</span> <span class='hs-varid'>n</span><span class='hs-layout'>)</span> <span class='hs-keyword'>where</span>
-<a name="line-198"></a>    <span class='hs-varid'>one</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>return</span> <span class='hs-varid'>mempty</span>
-<a name="line-199"></a>    <span class='hs-varid'>times</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>liftM2</span> <span class='hs-varid'>mappend</span>
-<a name="line-200"></a>
-<a name="line-201"></a><span class='hs-keyword'>instance</span> <span class='hs-conid'>Monoid</span> <span class='hs-varid'>n</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>Multiplicative</span> <span class='hs-layout'>(</span><span class='hs-conid'>LST</span><span class='hs-varop'>.</span><span class='hs-conid'>ST</span> <span class='hs-varid'>s</span> <span class='hs-varid'>n</span><span class='hs-layout'>)</span> <span class='hs-keyword'>where</span>
-<a name="line-202"></a>    <span class='hs-varid'>one</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>return</span> <span class='hs-varid'>mempty</span>
-<a name="line-203"></a>    <span class='hs-varid'>times</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>liftM2</span> <span class='hs-varid'>mappend</span>
-<a name="line-204"></a>
-<a name="line-205"></a><span class='hs-keyword'>instance</span> <span class='hs-conid'>Monoid</span> <span class='hs-varid'>n</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>Multiplicative</span> <span class='hs-layout'>(</span><span class='hs-conid'>STM</span> <span class='hs-varid'>n</span><span class='hs-layout'>)</span> <span class='hs-keyword'>where</span>
-<a name="line-206"></a>    <span class='hs-varid'>one</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>return</span> <span class='hs-varid'>mempty</span>
-<a name="line-207"></a>    <span class='hs-varid'>times</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>liftM2</span> <span class='hs-varid'>mappend</span>
-<a name="line-208"></a>
-<a name="line-209"></a><span class='hs-keyword'>instance</span> <span class='hs-layout'>(</span><span class='hs-conid'>Stream</span> <span class='hs-varid'>s</span> <span class='hs-varid'>m</span> <span class='hs-varid'>t</span><span class='hs-layout'>,</span> <span class='hs-conid'>Monoid</span> <span class='hs-varid'>n</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>Multiplicative</span> <span class='hs-layout'>(</span><span class='hs-conid'>ParsecT</span> <span class='hs-varid'>s</span> <span class='hs-varid'>u</span> <span class='hs-varid'>m</span> <span class='hs-varid'>n</span><span class='hs-layout'>)</span> <span class='hs-keyword'>where</span>
-<a name="line-210"></a>    <span class='hs-varid'>one</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>return</span> <span class='hs-varid'>mempty</span>
-<a name="line-211"></a>    <span class='hs-varid'>times</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>liftM2</span> <span class='hs-varid'>mappend</span>
-<a name="line-212"></a>
-<a name="line-213"></a><span class='hs-comment'>-- Applicative instances</span>
+<a name="line-77"></a><span class='hs-keyword'>import</span> <span class='hs-conid'>Text</span><span class='hs-varop'>.</span><span class='hs-conid'>Parsec</span><span class='hs-varop'>.</span><span class='hs-conid'>Prim</span>
+<a name="line-78"></a>
+<a name="line-79"></a><a name="Multiplicative"></a><span class='hs-keyword'>class</span> <span class='hs-conid'>Multiplicative</span> <span class='hs-varid'>m</span> <span class='hs-keyword'>where</span>
+<a name="line-80"></a>    <span class='hs-varid'>one</span> <span class='hs-keyglyph'>::</span> <span class='hs-varid'>m</span>
+<a name="line-81"></a>    <span class='hs-varid'>times</span> <span class='hs-keyglyph'>::</span> <span class='hs-varid'>m</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-varid'>m</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-varid'>m</span>
+<a name="line-82"></a>
+<a name="line-83"></a><a name="Log"></a><span class='hs-comment'>-- | Convert a 'Multiplicative' into a 'Monoid'. Mnemonic: @Log a + Log b = Log (a * b)@</span>
+<a name="line-84"></a><a name="Log"></a><span class='hs-keyword'>data</span> <span class='hs-conid'>Log</span> <span class='hs-varid'>m</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>Log</span> <span class='hs-layout'>{</span> <span class='hs-varid'>getLog</span> <span class='hs-keyglyph'>::</span> <span class='hs-varid'>m</span> <span class='hs-layout'>}</span>
+<a name="line-85"></a>
+<a name="line-86"></a><span class='hs-keyword'>instance</span> <span class='hs-conid'>Multiplicative</span> <span class='hs-varid'>m</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>Monoid</span> <span class='hs-layout'>(</span><span class='hs-conid'>Log</span> <span class='hs-varid'>m</span><span class='hs-layout'>)</span> <span class='hs-keyword'>where</span>
+<a name="line-87"></a>    <span class='hs-varid'>mempty</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>Log</span> <span class='hs-varid'>one</span>
+<a name="line-88"></a>    <span class='hs-conid'>Log</span> <span class='hs-varid'>a</span> <span class='hs-varop'>`mappend`</span> <span class='hs-conid'>Log</span> <span class='hs-varid'>b</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>Log</span> <span class='hs-layout'>(</span><span class='hs-varid'>a</span> <span class='hs-varop'>`times`</span> <span class='hs-varid'>b</span><span class='hs-layout'>)</span>
+<a name="line-89"></a>
+<a name="line-90"></a><a name="Exp"></a><span class='hs-comment'>-- | Convert a 'Monoid' into a 'Multiplicative'. Mnemonic: @Exp a * Exp b = Exp (a + b)@</span>
+<a name="line-91"></a><a name="Exp"></a><span class='hs-keyword'>data</span> <span class='hs-conid'>Exp</span> <span class='hs-varid'>m</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>Exp</span> <span class='hs-layout'>{</span> <span class='hs-varid'>getExp</span> <span class='hs-keyglyph'>::</span> <span class='hs-varid'>m</span> <span class='hs-layout'>}</span>
+<a name="line-92"></a>
+<a name="line-93"></a><span class='hs-keyword'>instance</span> <span class='hs-conid'>Monoid</span> <span class='hs-varid'>m</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>Multiplicative</span> <span class='hs-layout'>(</span><span class='hs-conid'>Exp</span> <span class='hs-varid'>m</span><span class='hs-layout'>)</span> <span class='hs-keyword'>where</span>
+<a name="line-94"></a>    <span class='hs-varid'>one</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>Exp</span> <span class='hs-varid'>mempty</span>
+<a name="line-95"></a>    <span class='hs-conid'>Exp</span> <span class='hs-varid'>a</span> <span class='hs-varop'>`times`</span> <span class='hs-conid'>Exp</span> <span class='hs-varid'>b</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>Exp</span> <span class='hs-layout'>(</span><span class='hs-varid'>a</span> <span class='hs-varop'>`mappend`</span> <span class='hs-varid'>b</span><span class='hs-layout'>)</span>
+<a name="line-96"></a>
+<a name="line-97"></a><span class='hs-comment'>-- simple monoid transformer instances</span>
+<a name="line-98"></a><span class='hs-keyword'>instance</span> <span class='hs-conid'>Multiplicative</span> <span class='hs-varid'>m</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>Multiplicative</span> <span class='hs-layout'>(</span><span class='hs-conid'>Self</span> <span class='hs-varid'>m</span><span class='hs-layout'>)</span> <span class='hs-keyword'>where</span>
+<a name="line-99"></a>    <span class='hs-varid'>one</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>Self</span> <span class='hs-varid'>one</span>  
+<a name="line-100"></a>    <span class='hs-conid'>Self</span> <span class='hs-varid'>a</span> <span class='hs-varop'>`times`</span> <span class='hs-conid'>Self</span> <span class='hs-varid'>b</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>Self</span> <span class='hs-layout'>(</span><span class='hs-varid'>a</span> <span class='hs-varop'>`times`</span> <span class='hs-varid'>b</span><span class='hs-layout'>)</span>
+<a name="line-101"></a>
+<a name="line-102"></a><span class='hs-keyword'>instance</span> <span class='hs-conid'>Multiplicative</span> <span class='hs-varid'>m</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>Multiplicative</span> <span class='hs-layout'>(</span><span class='hs-conid'>FromString</span> <span class='hs-varid'>m</span><span class='hs-layout'>)</span> <span class='hs-keyword'>where</span>
+<a name="line-103"></a>    <span class='hs-varid'>one</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>FromString</span> <span class='hs-varid'>one</span>
+<a name="line-104"></a>    <span class='hs-conid'>FromString</span> <span class='hs-varid'>a</span> <span class='hs-varop'>`times`</span> <span class='hs-conid'>FromString</span> <span class='hs-varid'>b</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>FromString</span> <span class='hs-layout'>(</span><span class='hs-varid'>a</span> <span class='hs-varop'>`times`</span> <span class='hs-varid'>b</span><span class='hs-layout'>)</span>
+<a name="line-105"></a>
+<a name="line-106"></a><span class='hs-comment'>-- the goal of this is that I can make left seminearrings out of any 'Alternative' wrapped around a monoid</span>
+<a name="line-107"></a><span class='hs-comment'>-- in particular its useful for containers</span>
+<a name="line-108"></a>
+<a name="line-109"></a><span class='hs-keyword'>instance</span> <span class='hs-conid'>Monoid</span> <span class='hs-varid'>m</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>Multiplicative</span> <span class='hs-keyglyph'>[</span><span class='hs-varid'>m</span><span class='hs-keyglyph'>]</span> <span class='hs-keyword'>where</span>
+<a name="line-110"></a>    <span class='hs-varid'>one</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>return</span> <span class='hs-varid'>mempty</span>
+<a name="line-111"></a>    <span class='hs-varid'>times</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>liftM2</span> <span class='hs-varid'>mappend</span>
+<a name="line-112"></a>
+<a name="line-113"></a><span class='hs-keyword'>instance</span> <span class='hs-conid'>Monoid</span> <span class='hs-varid'>m</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>Multiplicative</span> <span class='hs-layout'>(</span><span class='hs-conid'>Seq</span> <span class='hs-varid'>m</span><span class='hs-layout'>)</span> <span class='hs-keyword'>where</span>
+<a name="line-114"></a>    <span class='hs-varid'>one</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>return</span> <span class='hs-varid'>mempty</span>
+<a name="line-115"></a>    <span class='hs-varid'>times</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>liftM2</span> <span class='hs-varid'>mappend</span>
+<a name="line-116"></a>
+<a name="line-117"></a><span class='hs-comment'>-- and things that can't quite be a Monad in Haskell</span>
+<a name="line-118"></a><span class='hs-keyword'>instance</span> <span class='hs-layout'>(</span><span class='hs-conid'>Measured</span> <span class='hs-varid'>v</span> <span class='hs-varid'>m</span><span class='hs-layout'>,</span> <span class='hs-conid'>Monoid</span> <span class='hs-varid'>m</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>Multiplicative</span> <span class='hs-layout'>(</span><span class='hs-conid'>FingerTree</span> <span class='hs-varid'>v</span> <span class='hs-varid'>m</span><span class='hs-layout'>)</span> <span class='hs-keyword'>where</span>
+<a name="line-119"></a>    <span class='hs-varid'>one</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>singleton</span> <span class='hs-varid'>mempty</span>
+<a name="line-120"></a>    <span class='hs-varid'>xss</span> <span class='hs-varop'>`times`</span> <span class='hs-varid'>yss</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>getSelf</span> <span class='hs-varop'>$</span> <span class='hs-varid'>mapReduce</span> <span class='hs-layout'>(</span><span class='hs-varid'>flip</span> <span class='hs-varid'>fmap'</span> <span class='hs-varid'>yss</span> <span class='hs-varop'>.</span> <span class='hs-varid'>mappend</span><span class='hs-layout'>)</span> <span class='hs-varid'>xss</span>
+<a name="line-121"></a>
+<a name="line-122"></a><span class='hs-comment'>-- but it can at least serve as a canonical multiplication for any monad. </span>
+<a name="line-123"></a><span class='hs-keyword'>instance</span> <span class='hs-conid'>Monoid</span> <span class='hs-varid'>m</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>Multiplicative</span> <span class='hs-layout'>(</span><span class='hs-conid'>Maybe</span> <span class='hs-varid'>m</span><span class='hs-layout'>)</span> <span class='hs-keyword'>where</span>
+<a name="line-124"></a>    <span class='hs-varid'>one</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>return</span> <span class='hs-varid'>mempty</span>
+<a name="line-125"></a>    <span class='hs-varid'>times</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>liftM2</span> <span class='hs-varid'>mappend</span>
+<a name="line-126"></a>
+<a name="line-127"></a><span class='hs-keyword'>instance</span> <span class='hs-conid'>Monoid</span> <span class='hs-varid'>m</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>Multiplicative</span> <span class='hs-layout'>(</span><span class='hs-conid'>Identity</span> <span class='hs-varid'>m</span><span class='hs-layout'>)</span> <span class='hs-keyword'>where</span>
+<a name="line-128"></a>    <span class='hs-varid'>one</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>return</span> <span class='hs-varid'>mempty</span>
+<a name="line-129"></a>    <span class='hs-varid'>times</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>liftM2</span> <span class='hs-varid'>mappend</span>
+<a name="line-130"></a>
+<a name="line-131"></a><span class='hs-keyword'>instance</span> <span class='hs-layout'>(</span><span class='hs-conid'>Monoid</span> <span class='hs-varid'>m</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>Multiplicative</span> <span class='hs-layout'>(</span><span class='hs-conid'>Cont</span> <span class='hs-varid'>r</span> <span class='hs-varid'>m</span><span class='hs-layout'>)</span> <span class='hs-keyword'>where</span>
+<a name="line-132"></a>    <span class='hs-varid'>one</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>return</span> <span class='hs-varid'>mempty</span>
+<a name="line-133"></a>    <span class='hs-varid'>times</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>liftM2</span> <span class='hs-varid'>mappend</span>
+<a name="line-134"></a>
+<a name="line-135"></a><span class='hs-keyword'>instance</span> <span class='hs-layout'>(</span><span class='hs-conid'>Monoid</span> <span class='hs-varid'>w</span><span class='hs-layout'>,</span> <span class='hs-conid'>Monoid</span> <span class='hs-varid'>m</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>Multiplicative</span> <span class='hs-layout'>(</span><span class='hs-conid'>SRWS</span><span class='hs-varop'>.</span><span class='hs-conid'>RWS</span> <span class='hs-varid'>r</span> <span class='hs-varid'>w</span> <span class='hs-varid'>s</span> <span class='hs-varid'>m</span><span class='hs-layout'>)</span> <span class='hs-keyword'>where</span>
+<a name="line-136"></a>    <span class='hs-varid'>one</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>return</span> <span class='hs-varid'>mempty</span>
+<a name="line-137"></a>    <span class='hs-varid'>times</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>liftM2</span> <span class='hs-varid'>mappend</span>
+<a name="line-138"></a>
+<a name="line-139"></a><span class='hs-keyword'>instance</span> <span class='hs-layout'>(</span><span class='hs-conid'>Monoid</span> <span class='hs-varid'>w</span><span class='hs-layout'>,</span> <span class='hs-conid'>Monoid</span> <span class='hs-varid'>m</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>Multiplicative</span> <span class='hs-layout'>(</span><span class='hs-conid'>LRWS</span><span class='hs-varop'>.</span><span class='hs-conid'>RWS</span> <span class='hs-varid'>r</span> <span class='hs-varid'>w</span> <span class='hs-varid'>s</span> <span class='hs-varid'>m</span><span class='hs-layout'>)</span> <span class='hs-keyword'>where</span>
+<a name="line-140"></a>    <span class='hs-varid'>one</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>return</span> <span class='hs-varid'>mempty</span>
+<a name="line-141"></a>    <span class='hs-varid'>times</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>liftM2</span> <span class='hs-varid'>mappend</span>
+<a name="line-142"></a>
+<a name="line-143"></a><span class='hs-keyword'>instance</span> <span class='hs-conid'>Monoid</span> <span class='hs-varid'>m</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>Multiplicative</span> <span class='hs-layout'>(</span><span class='hs-conid'>SState</span><span class='hs-varop'>.</span><span class='hs-conid'>State</span> <span class='hs-varid'>s</span> <span class='hs-varid'>m</span><span class='hs-layout'>)</span> <span class='hs-keyword'>where</span>
+<a name="line-144"></a>    <span class='hs-varid'>one</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>return</span> <span class='hs-varid'>mempty</span>
+<a name="line-145"></a>    <span class='hs-varid'>times</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>liftM2</span> <span class='hs-varid'>mappend</span>
+<a name="line-146"></a>
+<a name="line-147"></a><span class='hs-keyword'>instance</span> <span class='hs-conid'>Monoid</span> <span class='hs-varid'>m</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>Multiplicative</span> <span class='hs-layout'>(</span><span class='hs-conid'>LState</span><span class='hs-varop'>.</span><span class='hs-conid'>State</span> <span class='hs-varid'>s</span> <span class='hs-varid'>m</span><span class='hs-layout'>)</span> <span class='hs-keyword'>where</span>
+<a name="line-148"></a>    <span class='hs-varid'>one</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>return</span> <span class='hs-varid'>mempty</span>
+<a name="line-149"></a>    <span class='hs-varid'>times</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>liftM2</span> <span class='hs-varid'>mappend</span>
+<a name="line-150"></a>
+<a name="line-151"></a><span class='hs-keyword'>instance</span> <span class='hs-conid'>Monoid</span> <span class='hs-varid'>m</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>Multiplicative</span> <span class='hs-layout'>(</span><span class='hs-conid'>Reader</span> <span class='hs-varid'>e</span> <span class='hs-varid'>m</span><span class='hs-layout'>)</span> <span class='hs-keyword'>where</span>
+<a name="line-152"></a>    <span class='hs-varid'>one</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>return</span> <span class='hs-varid'>mempty</span>
+<a name="line-153"></a>    <span class='hs-varid'>times</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>liftM2</span> <span class='hs-varid'>mappend</span>
+<a name="line-154"></a>
+<a name="line-155"></a><span class='hs-keyword'>instance</span> <span class='hs-layout'>(</span><span class='hs-conid'>Monoid</span> <span class='hs-varid'>w</span><span class='hs-layout'>,</span> <span class='hs-conid'>Monoid</span> <span class='hs-varid'>m</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>Multiplicative</span> <span class='hs-layout'>(</span><span class='hs-conid'>SWriter</span><span class='hs-varop'>.</span><span class='hs-conid'>Writer</span> <span class='hs-varid'>w</span> <span class='hs-varid'>m</span><span class='hs-layout'>)</span> <span class='hs-keyword'>where</span>
+<a name="line-156"></a>    <span class='hs-varid'>one</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>return</span> <span class='hs-varid'>mempty</span>
+<a name="line-157"></a>    <span class='hs-varid'>times</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>liftM2</span> <span class='hs-varid'>mappend</span>
+<a name="line-158"></a>
+<a name="line-159"></a><span class='hs-keyword'>instance</span> <span class='hs-layout'>(</span><span class='hs-conid'>Monoid</span> <span class='hs-varid'>w</span><span class='hs-layout'>,</span> <span class='hs-conid'>Monoid</span> <span class='hs-varid'>m</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>Multiplicative</span> <span class='hs-layout'>(</span><span class='hs-conid'>LWriter</span><span class='hs-varop'>.</span><span class='hs-conid'>Writer</span> <span class='hs-varid'>w</span> <span class='hs-varid'>m</span><span class='hs-layout'>)</span> <span class='hs-keyword'>where</span>
+<a name="line-160"></a>    <span class='hs-varid'>one</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>return</span> <span class='hs-varid'>mempty</span>
+<a name="line-161"></a>    <span class='hs-varid'>times</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>liftM2</span> <span class='hs-varid'>mappend</span>
+<a name="line-162"></a>
+<a name="line-163"></a><span class='hs-keyword'>instance</span> <span class='hs-layout'>(</span><span class='hs-conid'>Monad</span> <span class='hs-varid'>m</span><span class='hs-layout'>,</span> <span class='hs-conid'>Monoid</span> <span class='hs-varid'>n</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>Multiplicative</span> <span class='hs-layout'>(</span><span class='hs-conid'>ContT</span> <span class='hs-varid'>r</span> <span class='hs-varid'>m</span> <span class='hs-varid'>n</span><span class='hs-layout'>)</span> <span class='hs-keyword'>where</span>
+<a name="line-164"></a>    <span class='hs-varid'>one</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>return</span> <span class='hs-varid'>mempty</span> 
+<a name="line-165"></a>    <span class='hs-varid'>times</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>liftM2</span> <span class='hs-varid'>mappend</span>
+<a name="line-166"></a>
+<a name="line-167"></a><span class='hs-keyword'>instance</span> <span class='hs-layout'>(</span><span class='hs-conid'>Monad</span> <span class='hs-varid'>m</span><span class='hs-layout'>,</span> <span class='hs-conid'>Monoid</span> <span class='hs-varid'>w</span><span class='hs-layout'>,</span> <span class='hs-conid'>Monoid</span> <span class='hs-varid'>n</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>Multiplicative</span> <span class='hs-layout'>(</span><span class='hs-conid'>SRWS</span><span class='hs-varop'>.</span><span class='hs-conid'>RWST</span> <span class='hs-varid'>r</span> <span class='hs-varid'>w</span> <span class='hs-varid'>s</span> <span class='hs-varid'>m</span> <span class='hs-varid'>n</span><span class='hs-layout'>)</span> <span class='hs-keyword'>where</span> 
+<a name="line-168"></a>    <span class='hs-varid'>one</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>return</span> <span class='hs-varid'>mempty</span> 
+<a name="line-169"></a>    <span class='hs-varid'>times</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>liftM2</span> <span class='hs-varid'>mappend</span>
+<a name="line-170"></a>
+<a name="line-171"></a><span class='hs-keyword'>instance</span> <span class='hs-layout'>(</span><span class='hs-conid'>Monad</span> <span class='hs-varid'>m</span><span class='hs-layout'>,</span> <span class='hs-conid'>Monoid</span> <span class='hs-varid'>w</span><span class='hs-layout'>,</span> <span class='hs-conid'>Monoid</span> <span class='hs-varid'>n</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>Multiplicative</span> <span class='hs-layout'>(</span><span class='hs-conid'>LRWS</span><span class='hs-varop'>.</span><span class='hs-conid'>RWST</span> <span class='hs-varid'>r</span> <span class='hs-varid'>w</span> <span class='hs-varid'>s</span> <span class='hs-varid'>m</span> <span class='hs-varid'>n</span><span class='hs-layout'>)</span> <span class='hs-keyword'>where</span> 
+<a name="line-172"></a>    <span class='hs-varid'>one</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>return</span> <span class='hs-varid'>mempty</span> 
+<a name="line-173"></a>    <span class='hs-varid'>times</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>liftM2</span> <span class='hs-varid'>mappend</span>
+<a name="line-174"></a>
+<a name="line-175"></a><span class='hs-keyword'>instance</span> <span class='hs-layout'>(</span><span class='hs-conid'>Monad</span> <span class='hs-varid'>m</span><span class='hs-layout'>,</span> <span class='hs-conid'>Monoid</span> <span class='hs-varid'>n</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>Multiplicative</span> <span class='hs-layout'>(</span><span class='hs-conid'>SState</span><span class='hs-varop'>.</span><span class='hs-conid'>StateT</span> <span class='hs-varid'>s</span> <span class='hs-varid'>m</span> <span class='hs-varid'>n</span><span class='hs-layout'>)</span> <span class='hs-keyword'>where</span>
+<a name="line-176"></a>    <span class='hs-varid'>one</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>return</span> <span class='hs-varid'>mempty</span>
+<a name="line-177"></a>    <span class='hs-varid'>times</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>liftM2</span> <span class='hs-varid'>mappend</span>
+<a name="line-178"></a>
+<a name="line-179"></a><span class='hs-keyword'>instance</span> <span class='hs-layout'>(</span><span class='hs-conid'>Monad</span> <span class='hs-varid'>m</span><span class='hs-layout'>,</span> <span class='hs-conid'>Monoid</span> <span class='hs-varid'>n</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>Multiplicative</span> <span class='hs-layout'>(</span><span class='hs-conid'>LState</span><span class='hs-varop'>.</span><span class='hs-conid'>StateT</span> <span class='hs-varid'>s</span> <span class='hs-varid'>m</span> <span class='hs-varid'>n</span><span class='hs-layout'>)</span> <span class='hs-keyword'>where</span>
+<a name="line-180"></a>    <span class='hs-varid'>one</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>return</span> <span class='hs-varid'>mempty</span>
+<a name="line-181"></a>    <span class='hs-varid'>times</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>liftM2</span> <span class='hs-varid'>mappend</span>
+<a name="line-182"></a>
+<a name="line-183"></a><span class='hs-keyword'>instance</span> <span class='hs-layout'>(</span><span class='hs-conid'>Monad</span> <span class='hs-varid'>m</span><span class='hs-layout'>,</span> <span class='hs-conid'>Monoid</span> <span class='hs-varid'>n</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>Multiplicative</span> <span class='hs-layout'>(</span><span class='hs-conid'>ReaderT</span> <span class='hs-varid'>e</span> <span class='hs-varid'>m</span> <span class='hs-varid'>n</span><span class='hs-layout'>)</span> <span class='hs-keyword'>where</span>
+<a name="line-184"></a>    <span class='hs-varid'>one</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>return</span> <span class='hs-varid'>mempty</span>
+<a name="line-185"></a>    <span class='hs-varid'>times</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>liftM2</span> <span class='hs-varid'>mappend</span>
+<a name="line-186"></a>
+<a name="line-187"></a><span class='hs-keyword'>instance</span> <span class='hs-layout'>(</span><span class='hs-conid'>Monad</span> <span class='hs-varid'>m</span><span class='hs-layout'>,</span> <span class='hs-conid'>Monoid</span> <span class='hs-varid'>w</span><span class='hs-layout'>,</span> <span class='hs-conid'>Monoid</span> <span class='hs-varid'>n</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>Multiplicative</span> <span class='hs-layout'>(</span><span class='hs-conid'>SWriter</span><span class='hs-varop'>.</span><span class='hs-conid'>WriterT</span> <span class='hs-varid'>w</span> <span class='hs-varid'>m</span> <span class='hs-varid'>n</span><span class='hs-layout'>)</span> <span class='hs-keyword'>where</span>
+<a name="line-188"></a>    <span class='hs-varid'>one</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>return</span> <span class='hs-varid'>mempty</span> 
+<a name="line-189"></a>    <span class='hs-varid'>times</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>liftM2</span> <span class='hs-varid'>mappend</span>
+<a name="line-190"></a>
+<a name="line-191"></a><span class='hs-keyword'>instance</span> <span class='hs-layout'>(</span><span class='hs-conid'>Monad</span> <span class='hs-varid'>m</span><span class='hs-layout'>,</span> <span class='hs-conid'>Monoid</span> <span class='hs-varid'>w</span><span class='hs-layout'>,</span> <span class='hs-conid'>Monoid</span> <span class='hs-varid'>n</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>Multiplicative</span> <span class='hs-layout'>(</span><span class='hs-conid'>LWriter</span><span class='hs-varop'>.</span><span class='hs-conid'>WriterT</span> <span class='hs-varid'>w</span> <span class='hs-varid'>m</span> <span class='hs-varid'>n</span><span class='hs-layout'>)</span> <span class='hs-keyword'>where</span>
+<a name="line-192"></a>    <span class='hs-varid'>one</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>return</span> <span class='hs-varid'>mempty</span> 
+<a name="line-193"></a>    <span class='hs-varid'>times</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>liftM2</span> <span class='hs-varid'>mappend</span>
+<a name="line-194"></a>
+<a name="line-195"></a><span class='hs-keyword'>instance</span> <span class='hs-conid'>Monoid</span> <span class='hs-varid'>n</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>Multiplicative</span> <span class='hs-layout'>(</span><span class='hs-conid'>IO</span> <span class='hs-varid'>n</span><span class='hs-layout'>)</span> <span class='hs-keyword'>where</span>
+<a name="line-196"></a>    <span class='hs-varid'>one</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>return</span> <span class='hs-varid'>mempty</span>
+<a name="line-197"></a>    <span class='hs-varid'>times</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>liftM2</span> <span class='hs-varid'>mappend</span>
+<a name="line-198"></a>
+<a name="line-199"></a><span class='hs-keyword'>instance</span> <span class='hs-conid'>Monoid</span> <span class='hs-varid'>n</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>Multiplicative</span> <span class='hs-layout'>(</span><span class='hs-conid'>SST</span><span class='hs-varop'>.</span><span class='hs-conid'>ST</span> <span class='hs-varid'>s</span> <span class='hs-varid'>n</span><span class='hs-layout'>)</span> <span class='hs-keyword'>where</span>
+<a name="line-200"></a>    <span class='hs-varid'>one</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>return</span> <span class='hs-varid'>mempty</span>
+<a name="line-201"></a>    <span class='hs-varid'>times</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>liftM2</span> <span class='hs-varid'>mappend</span>
+<a name="line-202"></a>
+<a name="line-203"></a><span class='hs-keyword'>instance</span> <span class='hs-conid'>Monoid</span> <span class='hs-varid'>n</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>Multiplicative</span> <span class='hs-layout'>(</span><span class='hs-conid'>LST</span><span class='hs-varop'>.</span><span class='hs-conid'>ST</span> <span class='hs-varid'>s</span> <span class='hs-varid'>n</span><span class='hs-layout'>)</span> <span class='hs-keyword'>where</span>
+<a name="line-204"></a>    <span class='hs-varid'>one</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>return</span> <span class='hs-varid'>mempty</span>
+<a name="line-205"></a>    <span class='hs-varid'>times</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>liftM2</span> <span class='hs-varid'>mappend</span>
+<a name="line-206"></a>
+<a name="line-207"></a><span class='hs-keyword'>instance</span> <span class='hs-conid'>Monoid</span> <span class='hs-varid'>n</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>Multiplicative</span> <span class='hs-layout'>(</span><span class='hs-conid'>STM</span> <span class='hs-varid'>n</span><span class='hs-layout'>)</span> <span class='hs-keyword'>where</span>
+<a name="line-208"></a>    <span class='hs-varid'>one</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>return</span> <span class='hs-varid'>mempty</span>
+<a name="line-209"></a>    <span class='hs-varid'>times</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>liftM2</span> <span class='hs-varid'>mappend</span>
+<a name="line-210"></a>
+<a name="line-211"></a><span class='hs-keyword'>instance</span> <span class='hs-layout'>(</span><span class='hs-conid'>Stream</span> <span class='hs-varid'>s</span> <span class='hs-varid'>m</span> <span class='hs-varid'>t</span><span class='hs-layout'>,</span> <span class='hs-conid'>Monoid</span> <span class='hs-varid'>n</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>Multiplicative</span> <span class='hs-layout'>(</span><span class='hs-conid'>ParsecT</span> <span class='hs-varid'>s</span> <span class='hs-varid'>u</span> <span class='hs-varid'>m</span> <span class='hs-varid'>n</span><span class='hs-layout'>)</span> <span class='hs-keyword'>where</span>
+<a name="line-212"></a>    <span class='hs-varid'>one</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>return</span> <span class='hs-varid'>mempty</span>
+<a name="line-213"></a>    <span class='hs-varid'>times</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>liftM2</span> <span class='hs-varid'>mappend</span>
hunk ./dist/doc/html/monoids/src/Data-Monoid-Multiplicative.html 223
-<a name="line-215"></a><span class='hs-keyword'>instance</span> <span class='hs-conid'>Monoid</span> <span class='hs-varid'>n</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>Multiplicative</span> <span class='hs-layout'>(</span><span class='hs-conid'>ZipList</span> <span class='hs-varid'>n</span><span class='hs-layout'>)</span> <span class='hs-keyword'>where</span>
-<a name="line-216"></a>    <span class='hs-varid'>one</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>pure</span> <span class='hs-varid'>mempty</span>
-<a name="line-217"></a>    <span class='hs-varid'>times</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>liftA2</span> <span class='hs-varid'>mappend</span>
-<a name="line-218"></a>
-<a name="line-219"></a><span class='hs-keyword'>instance</span> <span class='hs-conid'>Monoid</span> <span class='hs-varid'>m</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>Multiplicative</span> <span class='hs-layout'>(</span><span class='hs-conid'>Const</span> <span class='hs-varid'>m</span> <span class='hs-varid'>a</span><span class='hs-layout'>)</span> <span class='hs-keyword'>where</span>
-<a name="line-220"></a>    <span class='hs-varid'>one</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>pure</span> <span class='hs-varid'>undefined</span>
-<a name="line-221"></a>    <span class='hs-varid'>times</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>liftA2</span> <span class='hs-varid'>undefined</span>
-<a name="line-222"></a>
+<a name="line-215"></a><span class='hs-comment'>-- Applicative instances</span>
+<a name="line-216"></a>
+<a name="line-217"></a><span class='hs-keyword'>instance</span> <span class='hs-conid'>Monoid</span> <span class='hs-varid'>n</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>Multiplicative</span> <span class='hs-layout'>(</span><span class='hs-conid'>ZipList</span> <span class='hs-varid'>n</span><span class='hs-layout'>)</span> <span class='hs-keyword'>where</span>
+<a name="line-218"></a>    <span class='hs-varid'>one</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>pure</span> <span class='hs-varid'>mempty</span>
+<a name="line-219"></a>    <span class='hs-varid'>times</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>liftA2</span> <span class='hs-varid'>mappend</span>
+<a name="line-220"></a>
+<a name="line-221"></a><span class='hs-keyword'>instance</span> <span class='hs-conid'>Monoid</span> <span class='hs-varid'>m</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>Multiplicative</span> <span class='hs-layout'>(</span><span class='hs-conid'>Const</span> <span class='hs-varid'>m</span> <span class='hs-varid'>a</span><span class='hs-layout'>)</span> <span class='hs-keyword'>where</span>
+<a name="line-222"></a>    <span class='hs-varid'>one</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>pure</span> <span class='hs-varid'>undefined</span>
+<a name="line-223"></a>    <span class='hs-varid'>times</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>liftA2</span> <span class='hs-varid'>undefined</span>
+<a name="line-224"></a>
+<a name="line-225"></a>
+<a name="line-226"></a><span class='hs-comment'>-- Numeric instances</span>
+<a name="line-227"></a>
+<a name="line-228"></a><span class='hs-keyword'>instance</span> <span class='hs-conid'>Multiplicative</span> <span class='hs-conid'>Int</span> <span class='hs-keyword'>where</span>
+<a name="line-229"></a>    <span class='hs-varid'>one</span> <span class='hs-keyglyph'>=</span> <span class='hs-num'>1</span>
+<a name="line-230"></a>    <span class='hs-varid'>times</span> <span class='hs-keyglyph'>=</span> <span class='hs-layout'>(</span><span class='hs-varop'>*</span><span class='hs-layout'>)</span>
+<a name="line-231"></a>
+<a name="line-232"></a>
+<a name="line-233"></a><span class='hs-keyword'>instance</span> <span class='hs-conid'>Multiplicative</span> <span class='hs-conid'>Integer</span> <span class='hs-keyword'>where</span>
+<a name="line-234"></a>    <span class='hs-varid'>one</span> <span class='hs-keyglyph'>=</span> <span class='hs-num'>1</span>
+<a name="line-235"></a>    <span class='hs-varid'>times</span> <span class='hs-keyglyph'>=</span> <span class='hs-layout'>(</span><span class='hs-varop'>*</span><span class='hs-layout'>)</span>
+<a name="line-236"></a>
+<a name="line-237"></a><span class='hs-keyword'>instance</span> <span class='hs-conid'>Integral</span> <span class='hs-varid'>m</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>Multiplicative</span> <span class='hs-layout'>(</span><span class='hs-conid'>Ratio</span> <span class='hs-varid'>m</span><span class='hs-layout'>)</span> <span class='hs-keyword'>where</span>
+<a name="line-238"></a>    <span class='hs-varid'>one</span> <span class='hs-keyglyph'>=</span> <span class='hs-num'>1</span>
+<a name="line-239"></a>    <span class='hs-varid'>times</span> <span class='hs-keyglyph'>=</span> <span class='hs-layout'>(</span><span class='hs-varop'>*</span><span class='hs-layout'>)</span>
+<a name="line-240"></a>
hunk ./dist/doc/html/monoids/src/Data-Monoid-Reducer.html 32
-<a name="line-24"></a>    <span class='hs-layout'>)</span> <span class='hs-keyword'>where</span>
-<a name="line-25"></a>
-<a name="line-26"></a><span class='hs-keyword'>import</span> <span class='hs-conid'>Data</span><span class='hs-varop'>.</span><span class='hs-conid'>Monoid</span>
-<a name="line-27"></a><span class='hs-keyword'>import</span> <span class='hs-conid'>Data</span><span class='hs-varop'>.</span><span class='hs-conid'>Monoid</span><span class='hs-varop'>.</span><span class='hs-conid'>Instances</span> <span class='hs-conid'>()</span>
-<a name="line-28"></a><span class='hs-keyword'>import</span> <span class='hs-conid'>Data</span><span class='hs-varop'>.</span><span class='hs-conid'>Foldable</span>
-<a name="line-29"></a><span class='hs-keyword'>import</span> <span class='hs-conid'>Data</span><span class='hs-varop'>.</span><span class='hs-conid'>FingerTree</span>
-<a name="line-30"></a><span class='hs-keyword'>import</span> <span class='hs-keyword'>qualified</span> <span class='hs-conid'>Data</span><span class='hs-varop'>.</span><span class='hs-conid'>Sequence</span> <span class='hs-keyword'>as</span> <span class='hs-conid'>Seq</span>
-<a name="line-31"></a><span class='hs-keyword'>import</span> <span class='hs-conid'>Data</span><span class='hs-varop'>.</span><span class='hs-conid'>Sequence</span> <span class='hs-layout'>(</span><span class='hs-conid'>Seq</span><span class='hs-layout'>)</span>
-<a name="line-32"></a><span class='hs-keyword'>import</span> <span class='hs-keyword'>qualified</span> <span class='hs-conid'>Data</span><span class='hs-varop'>.</span><span class='hs-conid'>Set</span> <span class='hs-keyword'>as</span> <span class='hs-conid'>Set</span>
-<a name="line-33"></a><span class='hs-keyword'>import</span> <span class='hs-conid'>Data</span><span class='hs-varop'>.</span><span class='hs-conid'>Set</span> <span class='hs-layout'>(</span><span class='hs-conid'>Set</span><span class='hs-layout'>)</span>
-<a name="line-34"></a><span class='hs-keyword'>import</span> <span class='hs-keyword'>qualified</span> <span class='hs-conid'>Data</span><span class='hs-varop'>.</span><span class='hs-conid'>IntSet</span> <span class='hs-keyword'>as</span> <span class='hs-conid'>IntSet</span>
-<a name="line-35"></a><span class='hs-keyword'>import</span> <span class='hs-conid'>Data</span><span class='hs-varop'>.</span><span class='hs-conid'>IntSet</span> <span class='hs-layout'>(</span><span class='hs-conid'>IntSet</span><span class='hs-layout'>)</span>
-<a name="line-36"></a><span class='hs-keyword'>import</span> <span class='hs-keyword'>qualified</span> <span class='hs-conid'>Data</span><span class='hs-varop'>.</span><span class='hs-conid'>IntMap</span> <span class='hs-keyword'>as</span> <span class='hs-conid'>IntMap</span>
-<a name="line-37"></a><span class='hs-keyword'>import</span> <span class='hs-conid'>Data</span><span class='hs-varop'>.</span><span class='hs-conid'>IntMap</span> <span class='hs-layout'>(</span><span class='hs-conid'>IntMap</span><span class='hs-layout'>)</span>
-<a name="line-38"></a><span class='hs-keyword'>import</span> <span class='hs-keyword'>qualified</span> <span class='hs-conid'>Data</span><span class='hs-varop'>.</span><span class='hs-conid'>Map</span> <span class='hs-keyword'>as</span> <span class='hs-conid'>Map</span>
-<a name="line-39"></a><span class='hs-keyword'>import</span> <span class='hs-conid'>Data</span><span class='hs-varop'>.</span><span class='hs-conid'>Map</span> <span class='hs-layout'>(</span><span class='hs-conid'>Map</span><span class='hs-layout'>)</span>
-<a name="line-40"></a><span class='hs-keyword'>import</span> <span class='hs-conid'>Text</span><span class='hs-varop'>.</span><span class='hs-conid'>Parsec</span><span class='hs-varop'>.</span><span class='hs-conid'>Prim</span>
-<a name="line-41"></a><span class='hs-keyword'>import</span> <span class='hs-conid'>Control</span><span class='hs-varop'>.</span><span class='hs-conid'>Monad</span> 
-<a name="line-42"></a><span class='hs-comment'>--import qualified Data.BitSet as BitSet</span>
-<a name="line-43"></a><span class='hs-comment'>--import Data.BitSet (BitSet)</span>
-<a name="line-44"></a>
+<a name="line-24"></a>    <span class='hs-layout'>,</span> <span class='hs-varid'>pureUnit</span>
+<a name="line-25"></a>    <span class='hs-layout'>,</span> <span class='hs-varid'>returnUnit</span>
+<a name="line-26"></a>    <span class='hs-layout'>)</span> <span class='hs-keyword'>where</span>
+<a name="line-27"></a>
+<a name="line-28"></a><span class='hs-keyword'>import</span> <span class='hs-conid'>Control</span><span class='hs-varop'>.</span><span class='hs-conid'>Applicative</span>
+<a name="line-29"></a><span class='hs-keyword'>import</span> <span class='hs-conid'>Control</span><span class='hs-varop'>.</span><span class='hs-conid'>Monad</span> 
+<a name="line-30"></a>
+<a name="line-31"></a><span class='hs-keyword'>import</span> <span class='hs-conid'>Data</span><span class='hs-varop'>.</span><span class='hs-conid'>Monoid</span>
+<a name="line-32"></a><span class='hs-keyword'>import</span> <span class='hs-conid'>Data</span><span class='hs-varop'>.</span><span class='hs-conid'>Monoid</span><span class='hs-varop'>.</span><span class='hs-conid'>Instances</span> <span class='hs-conid'>()</span>
+<a name="line-33"></a>
+<a name="line-34"></a><span class='hs-keyword'>import</span> <span class='hs-conid'>Data</span><span class='hs-varop'>.</span><span class='hs-conid'>Foldable</span>
+<a name="line-35"></a><span class='hs-keyword'>import</span> <span class='hs-conid'>Data</span><span class='hs-varop'>.</span><span class='hs-conid'>FingerTree</span>
+<a name="line-36"></a>
+<a name="line-37"></a><span class='hs-keyword'>import</span> <span class='hs-keyword'>qualified</span> <span class='hs-conid'>Data</span><span class='hs-varop'>.</span><span class='hs-conid'>Sequence</span> <span class='hs-keyword'>as</span> <span class='hs-conid'>Seq</span>
+<a name="line-38"></a><span class='hs-keyword'>import</span> <span class='hs-conid'>Data</span><span class='hs-varop'>.</span><span class='hs-conid'>Sequence</span> <span class='hs-layout'>(</span><span class='hs-conid'>Seq</span><span class='hs-layout'>)</span>
+<a name="line-39"></a>
+<a name="line-40"></a><span class='hs-keyword'>import</span> <span class='hs-keyword'>qualified</span> <span class='hs-conid'>Data</span><span class='hs-varop'>.</span><span class='hs-conid'>Set</span> <span class='hs-keyword'>as</span> <span class='hs-conid'>Set</span>
+<a name="line-41"></a><span class='hs-keyword'>import</span> <span class='hs-conid'>Data</span><span class='hs-varop'>.</span><span class='hs-conid'>Set</span> <span class='hs-layout'>(</span><span class='hs-conid'>Set</span><span class='hs-layout'>)</span>
+<a name="line-42"></a>
+<a name="line-43"></a><span class='hs-keyword'>import</span> <span class='hs-keyword'>qualified</span> <span class='hs-conid'>Data</span><span class='hs-varop'>.</span><span class='hs-conid'>IntSet</span> <span class='hs-keyword'>as</span> <span class='hs-conid'>IntSet</span>
+<a name="line-44"></a><span class='hs-keyword'>import</span> <span class='hs-conid'>Data</span><span class='hs-varop'>.</span><span class='hs-conid'>IntSet</span> <span class='hs-layout'>(</span><span class='hs-conid'>IntSet</span><span class='hs-layout'>)</span>
hunk ./dist/doc/html/monoids/src/Data-Monoid-Reducer.html 54
-<a name="line-46"></a><a name="Reducer"></a><span class='hs-comment'>-- | This type may be best read infix. A @c `Reducer` m@ is a 'Monoid' @m@ that maps</span>
-<a name="line-47"></a><a name="Reducer"></a><span class='hs-comment'>-- values of type @c@ through @unit@ to values of type @m@. A @c@-'Reducer' may also</span>
-<a name="line-48"></a><a name="Reducer"></a><span class='hs-comment'>-- supply operations which tack-on another @c@ to an existing 'Monoid' @m@ on the left</span>
-<a name="line-49"></a><a name="Reducer"></a><span class='hs-comment'>-- or right. These specialized reductions may be more efficient in some scenarios</span>
-<a name="line-50"></a><a name="Reducer"></a><span class='hs-comment'>-- and are used when appropriate by a 'Generator'. The names 'cons' and 'snoc' work</span>
-<a name="line-51"></a><a name="Reducer"></a><span class='hs-comment'>-- by analogy to the synonymous operations in the list monoid.</span>
-<a name="line-52"></a><a name="Reducer"></a><span class='hs-comment'>--</span>
-<a name="line-53"></a><a name="Reducer"></a><span class='hs-comment'>-- This class deliberately avoids functional-dependencies, so that () can be a @c@-Reducer</span>
-<a name="line-54"></a><a name="Reducer"></a><span class='hs-comment'>-- for all @c@, and so many common reducers can work over multiple types, for instance,</span>
-<a name="line-55"></a><a name="Reducer"></a><span class='hs-comment'>-- First and Last may reduce both @a@ and 'Maybe' @a@. Since a 'Generator' has a fixed element</span>
-<a name="line-56"></a><a name="Reducer"></a><span class='hs-comment'>-- type, the input to the reducer is generally known and extracting from the monoid usually</span>
-<a name="line-57"></a><a name="Reducer"></a><span class='hs-comment'>-- is sufficient to fix the result type. Combinators are available for most scenarios where</span>
-<a name="line-58"></a><a name="Reducer"></a><span class='hs-comment'>-- this is not the case, and the few remaining cases can be handled by using an explicit </span>
-<a name="line-59"></a><a name="Reducer"></a><span class='hs-comment'>-- type annotation.</span>
-<a name="line-60"></a><a name="Reducer"></a><span class='hs-comment'>--</span>
-<a name="line-61"></a><a name="Reducer"></a><span class='hs-comment'>-- Minimal definition: 'unit' or 'snoc'</span>
-<a name="line-62"></a><a name="Reducer"></a><span class='hs-keyword'>class</span> <span class='hs-conid'>Monoid</span> <span class='hs-varid'>m</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>Reducer</span> <span class='hs-varid'>c</span> <span class='hs-varid'>m</span> <span class='hs-keyword'>where</span>
-<a name="line-63"></a>    <span class='hs-comment'>-- | Convert a value into a 'Monoid'</span>
-<a name="line-64"></a>    <span class='hs-varid'>unit</span> <span class='hs-keyglyph'>::</span> <span class='hs-varid'>c</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-varid'>m</span> 
-<a name="line-65"></a>    <span class='hs-comment'>-- | Append a value to a 'Monoid' for use in left-to-right reduction</span>
-<a name="line-66"></a>    <span class='hs-varid'>snoc</span> <span class='hs-keyglyph'>::</span> <span class='hs-varid'>m</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-varid'>c</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-varid'>m</span>
-<a name="line-67"></a>    <span class='hs-comment'>-- | Prepend a value onto a 'Monoid' for use during right-to-left reduction</span>
-<a name="line-68"></a>    <span class='hs-varid'>cons</span> <span class='hs-keyglyph'>::</span> <span class='hs-varid'>c</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-varid'>m</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-varid'>m</span> 
-<a name="line-69"></a>
-<a name="line-70"></a>    <span class='hs-varid'>unit</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>snoc</span> <span class='hs-varid'>mempty</span> 
-<a name="line-71"></a>    <span class='hs-varid'>snoc</span> <span class='hs-varid'>m</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>mappend</span> <span class='hs-varid'>m</span> <span class='hs-varop'>.</span> <span class='hs-varid'>unit</span>
-<a name="line-72"></a>    <span class='hs-varid'>cons</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>mappend</span> <span class='hs-varop'>.</span> <span class='hs-varid'>unit</span>
-<a name="line-73"></a>
-<a name="line-74"></a><a name="foldMapReduce"></a><span class='hs-comment'>-- | Apply a 'Reducer' to a 'Foldable' container, after mapping the contents into a suitable form for reduction.</span>
-<a name="line-75"></a><span class='hs-definition'>foldMapReduce</span> <span class='hs-keyglyph'>::</span> <span class='hs-layout'>(</span><span class='hs-conid'>Foldable</span> <span class='hs-varid'>f</span><span class='hs-layout'>,</span> <span class='hs-varid'>e</span> <span class='hs-varop'>`Reducer`</span> <span class='hs-varid'>m</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-layout'>(</span><span class='hs-varid'>a</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-varid'>e</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-varid'>f</span> <span class='hs-varid'>a</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-varid'>m</span>
-<a name="line-76"></a><span class='hs-definition'>foldMapReduce</span> <span class='hs-varid'>f</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>foldMap</span> <span class='hs-layout'>(</span><span class='hs-varid'>unit</span> <span class='hs-varop'>.</span> <span class='hs-varid'>f</span><span class='hs-layout'>)</span>
-<a name="line-77"></a>
-<a name="line-78"></a><a name="foldReduce"></a><span class='hs-comment'>-- | Apply a 'Reducer' to a 'Foldable' mapping each element through 'unit'</span>
-<a name="line-79"></a><span class='hs-definition'>foldReduce</span> <span class='hs-keyglyph'>::</span> <span class='hs-layout'>(</span><span class='hs-conid'>Foldable</span> <span class='hs-varid'>f</span><span class='hs-layout'>,</span> <span class='hs-varid'>e</span> <span class='hs-varop'>`Reducer`</span> <span class='hs-varid'>m</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-varid'>f</span> <span class='hs-varid'>e</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-varid'>m</span>
-<a name="line-80"></a><span class='hs-definition'>foldReduce</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>foldMap</span> <span class='hs-varid'>unit</span>
+<a name="line-46"></a><span class='hs-keyword'>import</span> <span class='hs-keyword'>qualified</span> <span class='hs-conid'>Data</span><span class='hs-varop'>.</span><span class='hs-conid'>IntMap</span> <span class='hs-keyword'>as</span> <span class='hs-conid'>IntMap</span>
+<a name="line-47"></a><span class='hs-keyword'>import</span> <span class='hs-conid'>Data</span><span class='hs-varop'>.</span><span class='hs-conid'>IntMap</span> <span class='hs-layout'>(</span><span class='hs-conid'>IntMap</span><span class='hs-layout'>)</span>
+<a name="line-48"></a>
+<a name="line-49"></a><span class='hs-keyword'>import</span> <span class='hs-keyword'>qualified</span> <span class='hs-conid'>Data</span><span class='hs-varop'>.</span><span class='hs-conid'>Map</span> <span class='hs-keyword'>as</span> <span class='hs-conid'>Map</span>
+<a name="line-50"></a>
+<a name="line-51"></a><span class='hs-keyword'>import</span> <span class='hs-conid'>Data</span><span class='hs-varop'>.</span><span class='hs-conid'>Map</span> <span class='hs-layout'>(</span><span class='hs-conid'>Map</span><span class='hs-layout'>)</span>
+<a name="line-52"></a>
+<a name="line-53"></a><span class='hs-keyword'>import</span> <span class='hs-conid'>Text</span><span class='hs-varop'>.</span><span class='hs-conid'>Parsec</span><span class='hs-varop'>.</span><span class='hs-conid'>Prim</span>
+<a name="line-54"></a>
+<a name="line-55"></a><span class='hs-comment'>--import qualified Data.BitSet as BitSet</span>
+<a name="line-56"></a><span class='hs-comment'>--import Data.BitSet (BitSet)</span>
+<a name="line-57"></a>
+<a name="line-58"></a><a name="Reducer"></a><span class='hs-comment'>-- | This type may be best read infix. A @c `Reducer` m@ is a 'Monoid' @m@ that maps</span>
+<a name="line-59"></a><a name="Reducer"></a><span class='hs-comment'>-- values of type @c@ through @unit@ to values of type @m@. A @c@-'Reducer' may also</span>
+<a name="line-60"></a><a name="Reducer"></a><span class='hs-comment'>-- supply operations which tack-on another @c@ to an existing 'Monoid' @m@ on the left</span>
+<a name="line-61"></a><a name="Reducer"></a><span class='hs-comment'>-- or right. These specialized reductions may be more efficient in some scenarios</span>
+<a name="line-62"></a><a name="Reducer"></a><span class='hs-comment'>-- and are used when appropriate by a 'Generator'. The names 'cons' and 'snoc' work</span>
+<a name="line-63"></a><a name="Reducer"></a><span class='hs-comment'>-- by analogy to the synonymous operations in the list monoid.</span>
+<a name="line-64"></a><a name="Reducer"></a><span class='hs-comment'>--</span>
+<a name="line-65"></a><a name="Reducer"></a><span class='hs-comment'>-- This class deliberately avoids functional-dependencies, so that () can be a @c@-Reducer</span>
+<a name="line-66"></a><a name="Reducer"></a><span class='hs-comment'>-- for all @c@, and so many common reducers can work over multiple types, for instance,</span>
+<a name="line-67"></a><a name="Reducer"></a><span class='hs-comment'>-- First and Last may reduce both @a@ and 'Maybe' @a@. Since a 'Generator' has a fixed element</span>
+<a name="line-68"></a><a name="Reducer"></a><span class='hs-comment'>-- type, the input to the reducer is generally known and extracting from the monoid usually</span>
+<a name="line-69"></a><a name="Reducer"></a><span class='hs-comment'>-- is sufficient to fix the result type. Combinators are available for most scenarios where</span>
+<a name="line-70"></a><a name="Reducer"></a><span class='hs-comment'>-- this is not the case, and the few remaining cases can be handled by using an explicit </span>
+<a name="line-71"></a><a name="Reducer"></a><span class='hs-comment'>-- type annotation.</span>
+<a name="line-72"></a><a name="Reducer"></a><span class='hs-comment'>--</span>
+<a name="line-73"></a><a name="Reducer"></a><span class='hs-comment'>-- Minimal definition: 'unit' or 'snoc'</span>
+<a name="line-74"></a><a name="Reducer"></a><span class='hs-keyword'>class</span> <span class='hs-conid'>Monoid</span> <span class='hs-varid'>m</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>Reducer</span> <span class='hs-varid'>c</span> <span class='hs-varid'>m</span> <span class='hs-keyword'>where</span>
+<a name="line-75"></a>    <span class='hs-comment'>-- | Convert a value into a 'Monoid'</span>
+<a name="line-76"></a>    <span class='hs-varid'>unit</span> <span class='hs-keyglyph'>::</span> <span class='hs-varid'>c</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-varid'>m</span> 
+<a name="line-77"></a>    <span class='hs-comment'>-- | Append a value to a 'Monoid' for use in left-to-right reduction</span>
+<a name="line-78"></a>    <span class='hs-varid'>snoc</span> <span class='hs-keyglyph'>::</span> <span class='hs-varid'>m</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-varid'>c</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-varid'>m</span>
+<a name="line-79"></a>    <span class='hs-comment'>-- | Prepend a value onto a 'Monoid' for use during right-to-left reduction</span>
+<a name="line-80"></a>    <span class='hs-varid'>cons</span> <span class='hs-keyglyph'>::</span> <span class='hs-varid'>c</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-varid'>m</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-varid'>m</span> 
hunk ./dist/doc/html/monoids/src/Data-Monoid-Reducer.html 90
-<a name="line-82"></a><span class='hs-keyword'>instance</span> <span class='hs-layout'>(</span><span class='hs-conid'>Reducer</span> <span class='hs-varid'>c</span> <span class='hs-varid'>m</span><span class='hs-layout'>,</span> <span class='hs-conid'>Reducer</span> <span class='hs-varid'>c</span> <span class='hs-varid'>n</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>Reducer</span> <span class='hs-varid'>c</span> <span class='hs-layout'>(</span><span class='hs-varid'>m</span><span class='hs-layout'>,</span><span class='hs-varid'>n</span><span class='hs-layout'>)</span> <span class='hs-keyword'>where</span>
-<a name="line-83"></a>    <span class='hs-varid'>unit</span> <span class='hs-varid'>x</span> <span class='hs-keyglyph'>=</span> <span class='hs-layout'>(</span><span class='hs-varid'>unit</span> <span class='hs-varid'>x</span><span class='hs-layout'>,</span><span class='hs-varid'>unit</span> <span class='hs-varid'>x</span><span class='hs-layout'>)</span>
-<a name="line-84"></a>    <span class='hs-layout'>(</span><span class='hs-varid'>m</span><span class='hs-layout'>,</span><span class='hs-varid'>n</span><span class='hs-layout'>)</span> <span class='hs-varop'>`snoc`</span> <span class='hs-varid'>x</span> <span class='hs-keyglyph'>=</span> <span class='hs-layout'>(</span><span class='hs-varid'>m</span> <span class='hs-varop'>`snoc`</span> <span class='hs-varid'>x</span><span class='hs-layout'>,</span> <span class='hs-varid'>n</span> <span class='hs-varop'>`snoc`</span> <span class='hs-varid'>x</span><span class='hs-layout'>)</span>
-<a name="line-85"></a>    <span class='hs-varid'>x</span> <span class='hs-varop'>`cons`</span> <span class='hs-layout'>(</span><span class='hs-varid'>m</span><span class='hs-layout'>,</span><span class='hs-varid'>n</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=</span> <span class='hs-layout'>(</span><span class='hs-varid'>x</span> <span class='hs-varop'>`cons`</span> <span class='hs-varid'>m</span><span class='hs-layout'>,</span> <span class='hs-varid'>x</span> <span class='hs-varop'>`cons`</span> <span class='hs-varid'>n</span><span class='hs-layout'>)</span>
-<a name="line-86"></a>
-<a name="line-87"></a><span class='hs-keyword'>instance</span> <span class='hs-layout'>(</span><span class='hs-conid'>Reducer</span> <span class='hs-varid'>c</span> <span class='hs-varid'>m</span><span class='hs-layout'>,</span> <span class='hs-conid'>Reducer</span> <span class='hs-varid'>c</span> <span class='hs-varid'>n</span><span class='hs-layout'>,</span> <span class='hs-conid'>Reducer</span> <span class='hs-varid'>c</span> <span class='hs-varid'>o</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>Reducer</span> <span class='hs-varid'>c</span> <span class='hs-layout'>(</span><span class='hs-varid'>m</span><span class='hs-layout'>,</span><span class='hs-varid'>n</span><span class='hs-layout'>,</span><span class='hs-varid'>o</span><span class='hs-layout'>)</span> <span class='hs-keyword'>where</span>
-<a name="line-88"></a>    <span class='hs-varid'>unit</span> <span class='hs-varid'>x</span> <span class='hs-keyglyph'>=</span> <span class='hs-layout'>(</span><span class='hs-varid'>unit</span> <span class='hs-varid'>x</span><span class='hs-layout'>,</span><span class='hs-varid'>unit</span> <span class='hs-varid'>x</span><span class='hs-layout'>,</span> <span class='hs-varid'>unit</span> <span class='hs-varid'>x</span><span class='hs-layout'>)</span>
-<a name="line-89"></a>    <span class='hs-layout'>(</span><span class='hs-varid'>m</span><span class='hs-layout'>,</span><span class='hs-varid'>n</span><span class='hs-layout'>,</span><span class='hs-varid'>o</span><span class='hs-layout'>)</span> <span class='hs-varop'>`snoc`</span> <span class='hs-varid'>x</span> <span class='hs-keyglyph'>=</span> <span class='hs-layout'>(</span><span class='hs-varid'>m</span> <span class='hs-varop'>`snoc`</span> <span class='hs-varid'>x</span><span class='hs-layout'>,</span> <span class='hs-varid'>n</span> <span class='hs-varop'>`snoc`</span> <span class='hs-varid'>x</span><span class='hs-layout'>,</span> <span class='hs-varid'>o</span> <span class='hs-varop'>`snoc`</span> <span class='hs-varid'>x</span><span class='hs-layout'>)</span>
-<a name="line-90"></a>    <span class='hs-varid'>x</span> <span class='hs-varop'>`cons`</span> <span class='hs-layout'>(</span><span class='hs-varid'>m</span><span class='hs-layout'>,</span><span class='hs-varid'>n</span><span class='hs-layout'>,</span><span class='hs-varid'>o</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=</span> <span class='hs-layout'>(</span><span class='hs-varid'>x</span> <span class='hs-varop'>`cons`</span> <span class='hs-varid'>m</span><span class='hs-layout'>,</span> <span class='hs-varid'>x</span> <span class='hs-varop'>`cons`</span> <span class='hs-varid'>n</span><span class='hs-layout'>,</span> <span class='hs-varid'>x</span> <span class='hs-varop'>`cons`</span> <span class='hs-varid'>o</span><span class='hs-layout'>)</span>
-<a name="line-91"></a>
-<a name="line-92"></a><span class='hs-keyword'>instance</span> <span class='hs-layout'>(</span><span class='hs-conid'>Reducer</span> <span class='hs-varid'>c</span> <span class='hs-varid'>m</span><span class='hs-layout'>,</span> <span class='hs-conid'>Reducer</span> <span class='hs-varid'>c</span> <span class='hs-varid'>n</span><span class='hs-layout'>,</span> <span class='hs-conid'>Reducer</span> <span class='hs-varid'>c</span> <span class='hs-varid'>o</span><span class='hs-layout'>,</span> <span class='hs-conid'>Reducer</span> <span class='hs-varid'>c</span> <span class='hs-varid'>p</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>Reducer</span> <span class='hs-varid'>c</span> <span class='hs-layout'>(</span><span class='hs-varid'>m</span><span class='hs-layout'>,</span><span class='hs-varid'>n</span><span class='hs-layout'>,</span><span class='hs-varid'>o</span><span class='hs-layout'>,</span><span class='hs-varid'>p</span><span class='hs-layout'>)</span> <span class='hs-keyword'>where</span>
-<a name="line-93"></a>    <span class='hs-varid'>unit</span> <span class='hs-varid'>x</span> <span class='hs-keyglyph'>=</span> <span class='hs-layout'>(</span><span class='hs-varid'>unit</span> <span class='hs-varid'>x</span><span class='hs-layout'>,</span><span class='hs-varid'>unit</span> <span class='hs-varid'>x</span><span class='hs-layout'>,</span> <span class='hs-varid'>unit</span> <span class='hs-varid'>x</span><span class='hs-layout'>,</span> <span class='hs-varid'>unit</span> <span class='hs-varid'>x</span><span class='hs-layout'>)</span>
-<a name="line-94"></a>    <span class='hs-layout'>(</span><span class='hs-varid'>m</span><span class='hs-layout'>,</span><span class='hs-varid'>n</span><span class='hs-layout'>,</span><span class='hs-varid'>o</span><span class='hs-layout'>,</span><span class='hs-varid'>p</span><span class='hs-layout'>)</span> <span class='hs-varop'>`snoc`</span> <span class='hs-varid'>x</span> <span class='hs-keyglyph'>=</span> <span class='hs-layout'>(</span><span class='hs-varid'>m</span> <span class='hs-varop'>`snoc`</span> <span class='hs-varid'>x</span><span class='hs-layout'>,</span> <span class='hs-varid'>n</span> <span class='hs-varop'>`snoc`</span> <span class='hs-varid'>x</span><span class='hs-layout'>,</span> <span class='hs-varid'>o</span> <span class='hs-varop'>`snoc`</span> <span class='hs-varid'>x</span><span class='hs-layout'>,</span> <span class='hs-varid'>p</span> <span class='hs-varop'>`snoc`</span> <span class='hs-varid'>x</span><span class='hs-layout'>)</span>
-<a name="line-95"></a>    <span class='hs-varid'>x</span> <span class='hs-varop'>`cons`</span> <span class='hs-layout'>(</span><span class='hs-varid'>m</span><span class='hs-layout'>,</span><span class='hs-varid'>n</span><span class='hs-layout'>,</span><span class='hs-varid'>o</span><span class='hs-layout'>,</span><span class='hs-varid'>p</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=</span> <span class='hs-layout'>(</span><span class='hs-varid'>x</span> <span class='hs-varop'>`cons`</span> <span class='hs-varid'>m</span><span class='hs-layout'>,</span> <span class='hs-varid'>x</span> <span class='hs-varop'>`cons`</span> <span class='hs-varid'>n</span><span class='hs-layout'>,</span> <span class='hs-varid'>x</span> <span class='hs-varop'>`cons`</span> <span class='hs-varid'>o</span><span class='hs-layout'>,</span> <span class='hs-varid'>x</span> <span class='hs-varop'>`cons`</span> <span class='hs-varid'>p</span><span class='hs-layout'>)</span>
+<a name="line-82"></a>    <span class='hs-varid'>unit</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>snoc</span> <span class='hs-varid'>mempty</span> 
+<a name="line-83"></a>    <span class='hs-varid'>snoc</span> <span class='hs-varid'>m</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>mappend</span> <span class='hs-varid'>m</span> <span class='hs-varop'>.</span> <span class='hs-varid'>unit</span>
+<a name="line-84"></a>    <span class='hs-varid'>cons</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>mappend</span> <span class='hs-varop'>.</span> <span class='hs-varid'>unit</span>
+<a name="line-85"></a>
+<a name="line-86"></a><a name="foldMapReduce"></a><span class='hs-comment'>-- | Apply a 'Reducer' to a 'Foldable' container, after mapping the contents into a suitable form for reduction.</span>
+<a name="line-87"></a><span class='hs-definition'>foldMapReduce</span> <span class='hs-keyglyph'>::</span> <span class='hs-layout'>(</span><span class='hs-conid'>Foldable</span> <span class='hs-varid'>f</span><span class='hs-layout'>,</span> <span class='hs-varid'>e</span> <span class='hs-varop'>`Reducer`</span> <span class='hs-varid'>m</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-layout'>(</span><span class='hs-varid'>a</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-varid'>e</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-varid'>f</span> <span class='hs-varid'>a</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-varid'>m</span>
+<a name="line-88"></a><span class='hs-definition'>foldMapReduce</span> <span class='hs-varid'>f</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>foldMap</span> <span class='hs-layout'>(</span><span class='hs-varid'>unit</span> <span class='hs-varop'>.</span> <span class='hs-varid'>f</span><span class='hs-layout'>)</span>
+<a name="line-89"></a>
+<a name="line-90"></a><a name="foldReduce"></a><span class='hs-comment'>-- | Apply a 'Reducer' to a 'Foldable' mapping each element through 'unit'</span>
+<a name="line-91"></a><span class='hs-definition'>foldReduce</span> <span class='hs-keyglyph'>::</span> <span class='hs-layout'>(</span><span class='hs-conid'>Foldable</span> <span class='hs-varid'>f</span><span class='hs-layout'>,</span> <span class='hs-varid'>e</span> <span class='hs-varop'>`Reducer`</span> <span class='hs-varid'>m</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-varid'>f</span> <span class='hs-varid'>e</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-varid'>m</span>
+<a name="line-92"></a><span class='hs-definition'>foldReduce</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>foldMap</span> <span class='hs-varid'>unit</span>
+<a name="line-93"></a>
+<a name="line-94"></a><a name="returnUnit"></a><span class='hs-definition'>returnUnit</span> <span class='hs-keyglyph'>::</span> <span class='hs-layout'>(</span><span class='hs-conid'>Monad</span> <span class='hs-varid'>m</span><span class='hs-layout'>,</span> <span class='hs-varid'>c</span> <span class='hs-varop'>`Reducer`</span> <span class='hs-varid'>n</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-varid'>c</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-varid'>m</span> <span class='hs-varid'>n</span> 
+<a name="line-95"></a><span class='hs-definition'>returnUnit</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>return</span> <span class='hs-varop'>.</span> <span class='hs-varid'>unit</span>
hunk ./dist/doc/html/monoids/src/Data-Monoid-Reducer.html 105
-<a name="line-97"></a><span class='hs-keyword'>instance</span> <span class='hs-conid'>Reducer</span> <span class='hs-varid'>c</span> <span class='hs-keyglyph'>[</span><span class='hs-varid'>c</span><span class='hs-keyglyph'>]</span> <span class='hs-keyword'>where</span>
-<a name="line-98"></a>    <span class='hs-varid'>unit</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>return</span>
-<a name="line-99"></a>    <span class='hs-varid'>cons</span> <span class='hs-keyglyph'>=</span> <span class='hs-layout'>(</span><span class='hs-conop'>:</span><span class='hs-layout'>)</span>
-<a name="line-100"></a>    <span class='hs-varid'>xs</span> <span class='hs-varop'>`snoc`</span> <span class='hs-varid'>x</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>xs</span> <span class='hs-varop'>++</span> <span class='hs-keyglyph'>[</span><span class='hs-varid'>x</span><span class='hs-keyglyph'>]</span>
-<a name="line-101"></a>
-<a name="line-102"></a><span class='hs-keyword'>instance</span> <span class='hs-conid'>Reducer</span> <span class='hs-varid'>c</span> <span class='hs-conid'>()</span> <span class='hs-keyword'>where</span>
-<a name="line-103"></a>    <span class='hs-varid'>unit</span> <span class='hs-keyword'>_</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>()</span>
-<a name="line-104"></a>    <span class='hs-keyword'>_</span> <span class='hs-varop'>`snoc`</span> <span class='hs-keyword'>_</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>()</span>
-<a name="line-105"></a>    <span class='hs-keyword'>_</span> <span class='hs-varop'>`cons`</span> <span class='hs-keyword'>_</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>()</span>
-<a name="line-106"></a>
-<a name="line-107"></a><span class='hs-keyword'>instance</span> <span class='hs-conid'>Reducer</span> <span class='hs-conid'>Bool</span> <span class='hs-conid'>Any</span> <span class='hs-keyword'>where</span>
-<a name="line-108"></a>    <span class='hs-varid'>unit</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>Any</span>
+<a name="line-97"></a><a name="pureUnit"></a><span class='hs-definition'>pureUnit</span> <span class='hs-keyglyph'>::</span> <span class='hs-layout'>(</span><span class='hs-conid'>Applicative</span> <span class='hs-varid'>f</span><span class='hs-layout'>,</span> <span class='hs-varid'>c</span> <span class='hs-varop'>`Reducer`</span> <span class='hs-varid'>n</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-varid'>c</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-varid'>f</span> <span class='hs-varid'>n</span>
+<a name="line-98"></a><span class='hs-definition'>pureUnit</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>pure</span> <span class='hs-varop'>.</span> <span class='hs-varid'>unit</span>
+<a name="line-99"></a>
+<a name="line-100"></a><span class='hs-keyword'>instance</span> <span class='hs-layout'>(</span><span class='hs-conid'>Reducer</span> <span class='hs-varid'>c</span> <span class='hs-varid'>m</span><span class='hs-layout'>,</span> <span class='hs-conid'>Reducer</span> <span class='hs-varid'>c</span> <span class='hs-varid'>n</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>Reducer</span> <span class='hs-varid'>c</span> <span class='hs-layout'>(</span><span class='hs-varid'>m</span><span class='hs-layout'>,</span><span class='hs-varid'>n</span><span class='hs-layout'>)</span> <span class='hs-keyword'>where</span>
+<a name="line-101"></a>    <span class='hs-varid'>unit</span> <span class='hs-varid'>x</span> <span class='hs-keyglyph'>=</span> <span class='hs-layout'>(</span><span class='hs-varid'>unit</span> <span class='hs-varid'>x</span><span class='hs-layout'>,</span><span class='hs-varid'>unit</span> <span class='hs-varid'>x</span><span class='hs-layout'>)</span>
+<a name="line-102"></a>    <span class='hs-layout'>(</span><span class='hs-varid'>m</span><span class='hs-layout'>,</span><span class='hs-varid'>n</span><span class='hs-layout'>)</span> <span class='hs-varop'>`snoc`</span> <span class='hs-varid'>x</span> <span class='hs-keyglyph'>=</span> <span class='hs-layout'>(</span><span class='hs-varid'>m</span> <span class='hs-varop'>`snoc`</span> <span class='hs-varid'>x</span><span class='hs-layout'>,</span> <span class='hs-varid'>n</span> <span class='hs-varop'>`snoc`</span> <span class='hs-varid'>x</span><span class='hs-layout'>)</span>
+<a name="line-103"></a>    <span class='hs-varid'>x</span> <span class='hs-varop'>`cons`</span> <span class='hs-layout'>(</span><span class='hs-varid'>m</span><span class='hs-layout'>,</span><span class='hs-varid'>n</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=</span> <span class='hs-layout'>(</span><span class='hs-varid'>x</span> <span class='hs-varop'>`cons`</span> <span class='hs-varid'>m</span><span class='hs-layout'>,</span> <span class='hs-varid'>x</span> <span class='hs-varop'>`cons`</span> <span class='hs-varid'>n</span><span class='hs-layout'>)</span>
+<a name="line-104"></a>
+<a name="line-105"></a><span class='hs-keyword'>instance</span> <span class='hs-layout'>(</span><span class='hs-conid'>Reducer</span> <span class='hs-varid'>c</span> <span class='hs-varid'>m</span><span class='hs-layout'>,</span> <span class='hs-conid'>Reducer</span> <span class='hs-varid'>c</span> <span class='hs-varid'>n</span><span class='hs-layout'>,</span> <span class='hs-conid'>Reducer</span> <span class='hs-varid'>c</span> <span class='hs-varid'>o</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>Reducer</span> <span class='hs-varid'>c</span> <span class='hs-layout'>(</span><span class='hs-varid'>m</span><span class='hs-layout'>,</span><span class='hs-varid'>n</span><span class='hs-layout'>,</span><span class='hs-varid'>o</span><span class='hs-layout'>)</span> <span class='hs-keyword'>where</span>
+<a name="line-106"></a>    <span class='hs-varid'>unit</span> <span class='hs-varid'>x</span> <span class='hs-keyglyph'>=</span> <span class='hs-layout'>(</span><span class='hs-varid'>unit</span> <span class='hs-varid'>x</span><span class='hs-layout'>,</span><span class='hs-varid'>unit</span> <span class='hs-varid'>x</span><span class='hs-layout'>,</span> <span class='hs-varid'>unit</span> <span class='hs-varid'>x</span><span class='hs-layout'>)</span>
+<a name="line-107"></a>    <span class='hs-layout'>(</span><span class='hs-varid'>m</span><span class='hs-layout'>,</span><span class='hs-varid'>n</span><span class='hs-layout'>,</span><span class='hs-varid'>o</span><span class='hs-layout'>)</span> <span class='hs-varop'>`snoc`</span> <span class='hs-varid'>x</span> <span class='hs-keyglyph'>=</span> <span class='hs-layout'>(</span><span class='hs-varid'>m</span> <span class='hs-varop'>`snoc`</span> <span class='hs-varid'>x</span><span class='hs-layout'>,</span> <span class='hs-varid'>n</span> <span class='hs-varop'>`snoc`</span> <span class='hs-varid'>x</span><span class='hs-layout'>,</span> <span class='hs-varid'>o</span> <span class='hs-varop'>`snoc`</span> <span class='hs-varid'>x</span><span class='hs-layout'>)</span>
+<a name="line-108"></a>    <span class='hs-varid'>x</span> <span class='hs-varop'>`cons`</span> <span class='hs-layout'>(</span><span class='hs-varid'>m</span><span class='hs-layout'>,</span><span class='hs-varid'>n</span><span class='hs-layout'>,</span><span class='hs-varid'>o</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=</span> <span class='hs-layout'>(</span><span class='hs-varid'>x</span> <span class='hs-varop'>`cons`</span> <span class='hs-varid'>m</span><span class='hs-layout'>,</span> <span class='hs-varid'>x</span> <span class='hs-varop'>`cons`</span> <span class='hs-varid'>n</span><span class='hs-layout'>,</span> <span class='hs-varid'>x</span> <span class='hs-varop'>`cons`</span> <span class='hs-varid'>o</span><span class='hs-layout'>)</span>
hunk ./dist/doc/html/monoids/src/Data-Monoid-Reducer.html 118
-<a name="line-110"></a><span class='hs-keyword'>instance</span> <span class='hs-conid'>Reducer</span> <span class='hs-conid'>Bool</span> <span class='hs-conid'>All</span> <span class='hs-keyword'>where</span>
-<a name="line-111"></a>    <span class='hs-varid'>unit</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>All</span>
-<a name="line-112"></a>
-<a name="line-113"></a><span class='hs-keyword'>instance</span> <span class='hs-conid'>Reducer</span> <span class='hs-layout'>(</span><span class='hs-varid'>a</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-varid'>a</span><span class='hs-layout'>)</span> <span class='hs-layout'>(</span><span class='hs-conid'>Endo</span> <span class='hs-varid'>a</span><span class='hs-layout'>)</span> <span class='hs-keyword'>where</span>
-<a name="line-114"></a>    <span class='hs-varid'>unit</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>Endo</span>
-<a name="line-115"></a>
-<a name="line-116"></a><span class='hs-keyword'>instance</span> <span class='hs-conid'>Monoid</span> <span class='hs-varid'>a</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>Reducer</span> <span class='hs-varid'>a</span> <span class='hs-layout'>(</span><span class='hs-conid'>Dual</span> <span class='hs-varid'>a</span><span class='hs-layout'>)</span> <span class='hs-keyword'>where</span>
-<a name="line-117"></a>    <span class='hs-varid'>unit</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>Dual</span>
-<a name="line-118"></a>    
-<a name="line-119"></a><span class='hs-keyword'>instance</span> <span class='hs-conid'>Num</span> <span class='hs-varid'>a</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>Reducer</span> <span class='hs-varid'>a</span> <span class='hs-layout'>(</span><span class='hs-conid'>Sum</span> <span class='hs-varid'>a</span><span class='hs-layout'>)</span> <span class='hs-keyword'>where</span>
-<a name="line-120"></a>    <span class='hs-varid'>unit</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>Sum</span>
-<a name="line-121"></a>
-<a name="line-122"></a><span class='hs-keyword'>instance</span> <span class='hs-conid'>Num</span> <span class='hs-varid'>a</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>Reducer</span> <span class='hs-varid'>a</span> <span class='hs-layout'>(</span><span class='hs-conid'>Product</span> <span class='hs-varid'>a</span><span class='hs-layout'>)</span> <span class='hs-keyword'>where</span>
-<a name="line-123"></a>    <span class='hs-varid'>unit</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>Product</span>
+<a name="line-110"></a><span class='hs-keyword'>instance</span> <span class='hs-layout'>(</span><span class='hs-conid'>Reducer</span> <span class='hs-varid'>c</span> <span class='hs-varid'>m</span><span class='hs-layout'>,</span> <span class='hs-conid'>Reducer</span> <span class='hs-varid'>c</span> <span class='hs-varid'>n</span><span class='hs-layout'>,</span> <span class='hs-conid'>Reducer</span> <span class='hs-varid'>c</span> <span class='hs-varid'>o</span><span class='hs-layout'>,</span> <span class='hs-conid'>Reducer</span> <span class='hs-varid'>c</span> <span class='hs-varid'>p</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>Reducer</span> <span class='hs-varid'>c</span> <span class='hs-layout'>(</span><span class='hs-varid'>m</span><span class='hs-layout'>,</span><span class='hs-varid'>n</span><span class='hs-layout'>,</span><span class='hs-varid'>o</span><span class='hs-layout'>,</span><span class='hs-varid'>p</span><span class='hs-layout'>)</span> <span class='hs-keyword'>where</span>
+<a name="line-111"></a>    <span class='hs-varid'>unit</span> <span class='hs-varid'>x</span> <span class='hs-keyglyph'>=</span> <span class='hs-layout'>(</span><span class='hs-varid'>unit</span> <span class='hs-varid'>x</span><span class='hs-layout'>,</span><span class='hs-varid'>unit</span> <span class='hs-varid'>x</span><span class='hs-layout'>,</span> <span class='hs-varid'>unit</span> <span class='hs-varid'>x</span><span class='hs-layout'>,</span> <span class='hs-varid'>unit</span> <span class='hs-varid'>x</span><span class='hs-layout'>)</span>
+<a name="line-112"></a>    <span class='hs-layout'>(</span><span class='hs-varid'>m</span><span class='hs-layout'>,</span><span class='hs-varid'>n</span><span class='hs-layout'>,</span><span class='hs-varid'>o</span><span class='hs-layout'>,</span><span class='hs-varid'>p</span><span class='hs-layout'>)</span> <span class='hs-varop'>`snoc`</span> <span class='hs-varid'>x</span> <span class='hs-keyglyph'>=</span> <span class='hs-layout'>(</span><span class='hs-varid'>m</span> <span class='hs-varop'>`snoc`</span> <span class='hs-varid'>x</span><span class='hs-layout'>,</span> <span class='hs-varid'>n</span> <span class='hs-varop'>`snoc`</span> <span class='hs-varid'>x</span><span class='hs-layout'>,</span> <span class='hs-varid'>o</span> <span class='hs-varop'>`snoc`</span> <span class='hs-varid'>x</span><span class='hs-layout'>,</span> <span class='hs-varid'>p</span> <span class='hs-varop'>`snoc`</span> <span class='hs-varid'>x</span><span class='hs-layout'>)</span>
+<a name="line-113"></a>    <span class='hs-varid'>x</span> <span class='hs-varop'>`cons`</span> <span class='hs-layout'>(</span><span class='hs-varid'>m</span><span class='hs-layout'>,</span><span class='hs-varid'>n</span><span class='hs-layout'>,</span><span class='hs-varid'>o</span><span class='hs-layout'>,</span><span class='hs-varid'>p</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=</span> <span class='hs-layout'>(</span><span class='hs-varid'>x</span> <span class='hs-varop'>`cons`</span> <span class='hs-varid'>m</span><span class='hs-layout'>,</span> <span class='hs-varid'>x</span> <span class='hs-varop'>`cons`</span> <span class='hs-varid'>n</span><span class='hs-layout'>,</span> <span class='hs-varid'>x</span> <span class='hs-varop'>`cons`</span> <span class='hs-varid'>o</span><span class='hs-layout'>,</span> <span class='hs-varid'>x</span> <span class='hs-varop'>`cons`</span> <span class='hs-varid'>p</span><span class='hs-layout'>)</span>
+<a name="line-114"></a>
+<a name="line-115"></a><span class='hs-keyword'>instance</span> <span class='hs-conid'>Reducer</span> <span class='hs-varid'>c</span> <span class='hs-keyglyph'>[</span><span class='hs-varid'>c</span><span class='hs-keyglyph'>]</span> <span class='hs-keyword'>where</span>
+<a name="line-116"></a>    <span class='hs-varid'>unit</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>return</span>
+<a name="line-117"></a>    <span class='hs-varid'>cons</span> <span class='hs-keyglyph'>=</span> <span class='hs-layout'>(</span><span class='hs-conop'>:</span><span class='hs-layout'>)</span>
+<a name="line-118"></a>    <span class='hs-varid'>xs</span> <span class='hs-varop'>`snoc`</span> <span class='hs-varid'>x</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>xs</span> <span class='hs-varop'>++</span> <span class='hs-keyglyph'>[</span><span class='hs-varid'>x</span><span class='hs-keyglyph'>]</span>
+<a name="line-119"></a>
+<a name="line-120"></a><span class='hs-keyword'>instance</span> <span class='hs-conid'>Reducer</span> <span class='hs-varid'>c</span> <span class='hs-conid'>()</span> <span class='hs-keyword'>where</span>
+<a name="line-121"></a>    <span class='hs-varid'>unit</span> <span class='hs-keyword'>_</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>()</span>
+<a name="line-122"></a>    <span class='hs-keyword'>_</span> <span class='hs-varop'>`snoc`</span> <span class='hs-keyword'>_</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>()</span>
+<a name="line-123"></a>    <span class='hs-keyword'>_</span> <span class='hs-varop'>`cons`</span> <span class='hs-keyword'>_</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>()</span>
hunk ./dist/doc/html/monoids/src/Data-Monoid-Reducer.html 133
-<a name="line-125"></a><span class='hs-keyword'>instance</span> <span class='hs-conid'>Reducer</span> <span class='hs-layout'>(</span><span class='hs-conid'>Maybe</span> <span class='hs-varid'>a</span><span class='hs-layout'>)</span> <span class='hs-layout'>(</span><span class='hs-conid'>First</span> <span class='hs-varid'>a</span><span class='hs-layout'>)</span> <span class='hs-keyword'>where</span>
-<a name="line-126"></a>    <span class='hs-varid'>unit</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>First</span>
+<a name="line-125"></a><span class='hs-keyword'>instance</span> <span class='hs-conid'>Reducer</span> <span class='hs-conid'>Bool</span> <span class='hs-conid'>Any</span> <span class='hs-keyword'>where</span>
+<a name="line-126"></a>    <span class='hs-varid'>unit</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>Any</span>
hunk ./dist/doc/html/monoids/src/Data-Monoid-Reducer.html 136
-<a name="line-128"></a><span class='hs-keyword'>instance</span> <span class='hs-conid'>Reducer</span> <span class='hs-varid'>a</span> <span class='hs-layout'>(</span><span class='hs-conid'>First</span> <span class='hs-varid'>a</span><span class='hs-layout'>)</span> <span class='hs-keyword'>where</span>
-<a name="line-129"></a>    <span class='hs-varid'>unit</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>First</span> <span class='hs-varop'>.</span> <span class='hs-conid'>Just</span>
+<a name="line-128"></a><span class='hs-keyword'>instance</span> <span class='hs-conid'>Reducer</span> <span class='hs-conid'>Bool</span> <span class='hs-conid'>All</span> <span class='hs-keyword'>where</span>
+<a name="line-129"></a>    <span class='hs-varid'>unit</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>All</span>
hunk ./dist/doc/html/monoids/src/Data-Monoid-Reducer.html 139
-<a name="line-131"></a><span class='hs-keyword'>instance</span> <span class='hs-conid'>Reducer</span> <span class='hs-layout'>(</span><span class='hs-conid'>Maybe</span> <span class='hs-varid'>a</span><span class='hs-layout'>)</span> <span class='hs-layout'>(</span><span class='hs-conid'>Last</span> <span class='hs-varid'>a</span><span class='hs-layout'>)</span> <span class='hs-keyword'>where</span>
-<a name="line-132"></a>    <span class='hs-varid'>unit</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>Last</span>
+<a name="line-131"></a><span class='hs-keyword'>instance</span> <span class='hs-conid'>Reducer</span> <span class='hs-layout'>(</span><span class='hs-varid'>a</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-varid'>a</span><span class='hs-layout'>)</span> <span class='hs-layout'>(</span><span class='hs-conid'>Endo</span> <span class='hs-varid'>a</span><span class='hs-layout'>)</span> <span class='hs-keyword'>where</span>
+<a name="line-132"></a>    <span class='hs-varid'>unit</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>Endo</span>
hunk ./dist/doc/html/monoids/src/Data-Monoid-Reducer.html 142
-<a name="line-134"></a><span class='hs-keyword'>instance</span> <span class='hs-conid'>Reducer</span> <span class='hs-varid'>a</span> <span class='hs-layout'>(</span><span class='hs-conid'>Last</span> <span class='hs-varid'>a</span><span class='hs-layout'>)</span> <span class='hs-keyword'>where</span>
-<a name="line-135"></a>    <span class='hs-varid'>unit</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>Last</span> <span class='hs-varop'>.</span> <span class='hs-conid'>Just</span>
-<a name="line-136"></a>
-<a name="line-137"></a><span class='hs-keyword'>instance</span> <span class='hs-conid'>Measured</span> <span class='hs-varid'>v</span> <span class='hs-varid'>a</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>Reducer</span> <span class='hs-varid'>a</span> <span class='hs-layout'>(</span><span class='hs-conid'>FingerTree</span> <span class='hs-varid'>v</span> <span class='hs-varid'>a</span><span class='hs-layout'>)</span> <span class='hs-keyword'>where</span>
-<a name="line-138"></a>    <span class='hs-varid'>unit</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>singleton</span>
-<a name="line-139"></a>    <span class='hs-varid'>cons</span> <span class='hs-keyglyph'>=</span> <span class='hs-layout'>(</span><span class='hs-varop'>&lt;|</span><span class='hs-layout'>)</span>
-<a name="line-140"></a>    <span class='hs-varid'>snoc</span> <span class='hs-keyglyph'>=</span> <span class='hs-layout'>(</span><span class='hs-varop'>|&gt;</span><span class='hs-layout'>)</span> 
-<a name="line-141"></a>
-<a name="line-142"></a><span class='hs-keyword'>instance</span> <span class='hs-layout'>(</span><span class='hs-conid'>Stream</span> <span class='hs-varid'>s</span> <span class='hs-varid'>m</span> <span class='hs-varid'>t</span><span class='hs-layout'>,</span> <span class='hs-varid'>c</span> <span class='hs-varop'>`Reducer`</span> <span class='hs-varid'>a</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>Reducer</span> <span class='hs-varid'>c</span> <span class='hs-layout'>(</span><span class='hs-conid'>ParsecT</span> <span class='hs-varid'>s</span> <span class='hs-varid'>u</span> <span class='hs-varid'>m</span> <span class='hs-varid'>a</span><span class='hs-layout'>)</span> <span class='hs-keyword'>where</span>
-<a name="line-143"></a>    <span class='hs-varid'>unit</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>return</span> <span class='hs-varop'>.</span> <span class='hs-varid'>unit</span>
-<a name="line-144"></a>
-<a name="line-145"></a><span class='hs-keyword'>instance</span> <span class='hs-conid'>Reducer</span> <span class='hs-varid'>a</span> <span class='hs-layout'>(</span><span class='hs-conid'>Seq</span> <span class='hs-varid'>a</span><span class='hs-layout'>)</span> <span class='hs-keyword'>where</span>
-<a name="line-146"></a>    <span class='hs-varid'>unit</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>Seq</span><span class='hs-varop'>.</span><span class='hs-varid'>singleton</span>
-<a name="line-147"></a>    <span class='hs-varid'>cons</span> <span class='hs-keyglyph'>=</span> <span class='hs-layout'>(</span><span class='hs-conid'>Seq</span><span class='hs-varop'>.&lt;|</span><span class='hs-layout'>)</span>
-<a name="line-148"></a>    <span class='hs-varid'>snoc</span> <span class='hs-keyglyph'>=</span> <span class='hs-layout'>(</span><span class='hs-conid'>Seq</span><span class='hs-varop'>.|&gt;</span><span class='hs-layout'>)</span>
-<a name="line-149"></a>
-<a name="line-150"></a><span class='hs-keyword'>instance</span> <span class='hs-conid'>Reducer</span> <span class='hs-conid'>Int</span> <span class='hs-conid'>IntSet</span> <span class='hs-keyword'>where</span>
-<a name="line-151"></a>    <span class='hs-varid'>unit</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>IntSet</span><span class='hs-varop'>.</span><span class='hs-varid'>singleton</span>
-<a name="line-152"></a>    <span class='hs-varid'>cons</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>IntSet</span><span class='hs-varop'>.</span><span class='hs-varid'>insert</span>
-<a name="line-153"></a>    <span class='hs-varid'>snoc</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>flip</span> <span class='hs-conid'>IntSet</span><span class='hs-varop'>.</span><span class='hs-varid'>insert</span> <span class='hs-comment'>-- left bias irrelevant</span>
+<a name="line-134"></a><span class='hs-keyword'>instance</span> <span class='hs-conid'>Monoid</span> <span class='hs-varid'>a</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>Reducer</span> <span class='hs-varid'>a</span> <span class='hs-layout'>(</span><span class='hs-conid'>Dual</span> <span class='hs-varid'>a</span><span class='hs-layout'>)</span> <span class='hs-keyword'>where</span>
+<a name="line-135"></a>    <span class='hs-varid'>unit</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>Dual</span>
+<a name="line-136"></a>    
+<a name="line-137"></a><span class='hs-keyword'>instance</span> <span class='hs-conid'>Num</span> <span class='hs-varid'>a</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>Reducer</span> <span class='hs-varid'>a</span> <span class='hs-layout'>(</span><span class='hs-conid'>Sum</span> <span class='hs-varid'>a</span><span class='hs-layout'>)</span> <span class='hs-keyword'>where</span>
+<a name="line-138"></a>    <span class='hs-varid'>unit</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>Sum</span>
+<a name="line-139"></a>
+<a name="line-140"></a><span class='hs-keyword'>instance</span> <span class='hs-conid'>Num</span> <span class='hs-varid'>a</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>Reducer</span> <span class='hs-varid'>a</span> <span class='hs-layout'>(</span><span class='hs-conid'>Product</span> <span class='hs-varid'>a</span><span class='hs-layout'>)</span> <span class='hs-keyword'>where</span>
+<a name="line-141"></a>    <span class='hs-varid'>unit</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>Product</span>
+<a name="line-142"></a>
+<a name="line-143"></a><span class='hs-keyword'>instance</span> <span class='hs-conid'>Reducer</span> <span class='hs-layout'>(</span><span class='hs-conid'>Maybe</span> <span class='hs-varid'>a</span><span class='hs-layout'>)</span> <span class='hs-layout'>(</span><span class='hs-conid'>First</span> <span class='hs-varid'>a</span><span class='hs-layout'>)</span> <span class='hs-keyword'>where</span>
+<a name="line-144"></a>    <span class='hs-varid'>unit</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>First</span>
+<a name="line-145"></a>
+<a name="line-146"></a><span class='hs-keyword'>instance</span> <span class='hs-conid'>Reducer</span> <span class='hs-varid'>a</span> <span class='hs-layout'>(</span><span class='hs-conid'>First</span> <span class='hs-varid'>a</span><span class='hs-layout'>)</span> <span class='hs-keyword'>where</span>
+<a name="line-147"></a>    <span class='hs-varid'>unit</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>First</span> <span class='hs-varop'>.</span> <span class='hs-conid'>Just</span>
+<a name="line-148"></a>
+<a name="line-149"></a><span class='hs-keyword'>instance</span> <span class='hs-conid'>Reducer</span> <span class='hs-layout'>(</span><span class='hs-conid'>Maybe</span> <span class='hs-varid'>a</span><span class='hs-layout'>)</span> <span class='hs-layout'>(</span><span class='hs-conid'>Last</span> <span class='hs-varid'>a</span><span class='hs-layout'>)</span> <span class='hs-keyword'>where</span>
+<a name="line-150"></a>    <span class='hs-varid'>unit</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>Last</span>
+<a name="line-151"></a>
+<a name="line-152"></a><span class='hs-keyword'>instance</span> <span class='hs-conid'>Reducer</span> <span class='hs-varid'>a</span> <span class='hs-layout'>(</span><span class='hs-conid'>Last</span> <span class='hs-varid'>a</span><span class='hs-layout'>)</span> <span class='hs-keyword'>where</span>
+<a name="line-153"></a>    <span class='hs-varid'>unit</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>Last</span> <span class='hs-varop'>.</span> <span class='hs-conid'>Just</span>
hunk ./dist/doc/html/monoids/src/Data-Monoid-Reducer.html 163
-<a name="line-155"></a><span class='hs-keyword'>instance</span> <span class='hs-conid'>Ord</span> <span class='hs-varid'>a</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>Reducer</span> <span class='hs-varid'>a</span> <span class='hs-layout'>(</span><span class='hs-conid'>Set</span> <span class='hs-varid'>a</span><span class='hs-layout'>)</span> <span class='hs-keyword'>where</span>
-<a name="line-156"></a>    <span class='hs-varid'>unit</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>Set</span><span class='hs-varop'>.</span><span class='hs-varid'>singleton</span>
-<a name="line-157"></a>    <span class='hs-varid'>cons</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>Set</span><span class='hs-varop'>.</span><span class='hs-varid'>insert</span>
-<a name="line-158"></a>    <span class='hs-comment'>-- pedantic about order in case 'Eq' doesn't implement structural equality</span>
-<a name="line-159"></a>    <span class='hs-varid'>snoc</span> <span class='hs-varid'>s</span> <span class='hs-varid'>m</span> <span class='hs-keyglyph'>|</span> <span class='hs-conid'>Set</span><span class='hs-varop'>.</span><span class='hs-varid'>member</span> <span class='hs-varid'>m</span> <span class='hs-varid'>s</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>s</span> 
-<a name="line-160"></a>             <span class='hs-keyglyph'>|</span> <span class='hs-varid'>otherwise</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>Set</span><span class='hs-varop'>.</span><span class='hs-varid'>insert</span> <span class='hs-varid'>m</span> <span class='hs-varid'>s</span>
-<a name="line-161"></a>
-<a name="line-162"></a><span class='hs-keyword'>instance</span> <span class='hs-conid'>Reducer</span> <span class='hs-layout'>(</span><span class='hs-conid'>Int</span><span class='hs-layout'>,</span><span class='hs-varid'>v</span><span class='hs-layout'>)</span> <span class='hs-layout'>(</span><span class='hs-conid'>IntMap</span> <span class='hs-varid'>v</span><span class='hs-layout'>)</span> <span class='hs-keyword'>where</span>
-<a name="line-163"></a>    <span class='hs-varid'>unit</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>uncurry</span> <span class='hs-conid'>IntMap</span><span class='hs-varop'>.</span><span class='hs-varid'>singleton</span>
-<a name="line-164"></a>    <span class='hs-varid'>cons</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>uncurry</span> <span class='hs-conid'>IntMap</span><span class='hs-varop'>.</span><span class='hs-varid'>insert</span>
-<a name="line-165"></a>    <span class='hs-varid'>snoc</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>flip</span> <span class='hs-varop'>.</span> <span class='hs-varid'>uncurry</span> <span class='hs-varop'>.</span> <span class='hs-conid'>IntMap</span><span class='hs-varop'>.</span><span class='hs-varid'>insertWith</span> <span class='hs-varop'>$</span> <span class='hs-varid'>const</span> <span class='hs-varid'>id</span>
-<a name="line-166"></a>
-<a name="line-167"></a><span class='hs-keyword'>instance</span> <span class='hs-conid'>Ord</span> <span class='hs-varid'>k</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>Reducer</span> <span class='hs-layout'>(</span><span class='hs-varid'>k</span><span class='hs-layout'>,</span><span class='hs-varid'>v</span><span class='hs-layout'>)</span> <span class='hs-layout'>(</span><span class='hs-conid'>Map</span> <span class='hs-varid'>k</span> <span class='hs-varid'>v</span><span class='hs-layout'>)</span> <span class='hs-keyword'>where</span>
-<a name="line-168"></a>    <span class='hs-varid'>unit</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>uncurry</span> <span class='hs-conid'>Map</span><span class='hs-varop'>.</span><span class='hs-varid'>singleton</span>
-<a name="line-169"></a>    <span class='hs-varid'>cons</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>uncurry</span> <span class='hs-conid'>Map</span><span class='hs-varop'>.</span><span class='hs-varid'>insert</span>
-<a name="line-170"></a>    <span class='hs-varid'>snoc</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>flip</span> <span class='hs-varop'>.</span> <span class='hs-varid'>uncurry</span> <span class='hs-varop'>.</span> <span class='hs-conid'>Map</span><span class='hs-varop'>.</span><span class='hs-varid'>insertWith</span> <span class='hs-varop'>$</span> <span class='hs-varid'>const</span> <span class='hs-varid'>id</span>
-<a name="line-171"></a>
-<a name="line-172"></a><span class='hs-comment'>{-
-<a name="line-173"></a>instance Enum a =&gt; Reducer a (BitSet a) where
-<a name="line-174"></a>    unit m = BitSet.insert m BitSet.empty
-<a name="line-175"></a>-}</span>
+<a name="line-155"></a><span class='hs-keyword'>instance</span> <span class='hs-conid'>Measured</span> <span class='hs-varid'>v</span> <span class='hs-varid'>a</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>Reducer</span> <span class='hs-varid'>a</span> <span class='hs-layout'>(</span><span class='hs-conid'>FingerTree</span> <span class='hs-varid'>v</span> <span class='hs-varid'>a</span><span class='hs-layout'>)</span> <span class='hs-keyword'>where</span>
+<a name="line-156"></a>    <span class='hs-varid'>unit</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>singleton</span>
+<a name="line-157"></a>    <span class='hs-varid'>cons</span> <span class='hs-keyglyph'>=</span> <span class='hs-layout'>(</span><span class='hs-varop'>&lt;|</span><span class='hs-layout'>)</span>
+<a name="line-158"></a>    <span class='hs-varid'>snoc</span> <span class='hs-keyglyph'>=</span> <span class='hs-layout'>(</span><span class='hs-varop'>|&gt;</span><span class='hs-layout'>)</span> 
+<a name="line-159"></a>
+<a name="line-160"></a><span class='hs-keyword'>instance</span> <span class='hs-layout'>(</span><span class='hs-conid'>Stream</span> <span class='hs-varid'>s</span> <span class='hs-varid'>m</span> <span class='hs-varid'>t</span><span class='hs-layout'>,</span> <span class='hs-varid'>c</span> <span class='hs-varop'>`Reducer`</span> <span class='hs-varid'>a</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>Reducer</span> <span class='hs-varid'>c</span> <span class='hs-layout'>(</span><span class='hs-conid'>ParsecT</span> <span class='hs-varid'>s</span> <span class='hs-varid'>u</span> <span class='hs-varid'>m</span> <span class='hs-varid'>a</span><span class='hs-layout'>)</span> <span class='hs-keyword'>where</span>
+<a name="line-161"></a>    <span class='hs-varid'>unit</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>return</span> <span class='hs-varop'>.</span> <span class='hs-varid'>unit</span>
+<a name="line-162"></a>
+<a name="line-163"></a><span class='hs-keyword'>instance</span> <span class='hs-conid'>Reducer</span> <span class='hs-varid'>a</span> <span class='hs-layout'>(</span><span class='hs-conid'>Seq</span> <span class='hs-varid'>a</span><span class='hs-layout'>)</span> <span class='hs-keyword'>where</span>
+<a name="line-164"></a>    <span class='hs-varid'>unit</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>Seq</span><span class='hs-varop'>.</span><span class='hs-varid'>singleton</span>
+<a name="line-165"></a>    <span class='hs-varid'>cons</span> <span class='hs-keyglyph'>=</span> <span class='hs-layout'>(</span><span class='hs-conid'>Seq</span><span class='hs-varop'>.&lt;|</span><span class='hs-layout'>)</span>
+<a name="line-166"></a>    <span class='hs-varid'>snoc</span> <span class='hs-keyglyph'>=</span> <span class='hs-layout'>(</span><span class='hs-conid'>Seq</span><span class='hs-varop'>.|&gt;</span><span class='hs-layout'>)</span>
+<a name="line-167"></a>
+<a name="line-168"></a><span class='hs-keyword'>instance</span> <span class='hs-conid'>Reducer</span> <span class='hs-conid'>Int</span> <span class='hs-conid'>IntSet</span> <span class='hs-keyword'>where</span>
+<a name="line-169"></a>    <span class='hs-varid'>unit</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>IntSet</span><span class='hs-varop'>.</span><span class='hs-varid'>singleton</span>
+<a name="line-170"></a>    <span class='hs-varid'>cons</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>IntSet</span><span class='hs-varop'>.</span><span class='hs-varid'>insert</span>
+<a name="line-171"></a>    <span class='hs-varid'>snoc</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>flip</span> <span class='hs-conid'>IntSet</span><span class='hs-varop'>.</span><span class='hs-varid'>insert</span> <span class='hs-comment'>-- left bias irrelevant</span>
+<a name="line-172"></a>
+<a name="line-173"></a><span class='hs-keyword'>instance</span> <span class='hs-conid'>Ord</span> <span class='hs-varid'>a</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>Reducer</span> <span class='hs-varid'>a</span> <span class='hs-layout'>(</span><span class='hs-conid'>Set</span> <span class='hs-varid'>a</span><span class='hs-layout'>)</span> <span class='hs-keyword'>where</span>
+<a name="line-174"></a>    <span class='hs-varid'>unit</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>Set</span><span class='hs-varop'>.</span><span class='hs-varid'>singleton</span>
+<a name="line-175"></a>    <span class='hs-varid'>cons</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>Set</span><span class='hs-varop'>.</span><span class='hs-varid'>insert</span>
+<a name="line-176"></a>    <span class='hs-comment'>-- pedantic about order in case 'Eq' doesn't implement structural equality</span>
+<a name="line-177"></a>    <span class='hs-varid'>snoc</span> <span class='hs-varid'>s</span> <span class='hs-varid'>m</span> <span class='hs-keyglyph'>|</span> <span class='hs-conid'>Set</span><span class='hs-varop'>.</span><span class='hs-varid'>member</span> <span class='hs-varid'>m</span> <span class='hs-varid'>s</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>s</span> 
+<a name="line-178"></a>             <span class='hs-keyglyph'>|</span> <span class='hs-varid'>otherwise</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>Set</span><span class='hs-varop'>.</span><span class='hs-varid'>insert</span> <span class='hs-varid'>m</span> <span class='hs-varid'>s</span>
+<a name="line-179"></a>
+<a name="line-180"></a><span class='hs-keyword'>instance</span> <span class='hs-conid'>Reducer</span> <span class='hs-layout'>(</span><span class='hs-conid'>Int</span><span class='hs-layout'>,</span><span class='hs-varid'>v</span><span class='hs-layout'>)</span> <span class='hs-layout'>(</span><span class='hs-conid'>IntMap</span> <span class='hs-varid'>v</span><span class='hs-layout'>)</span> <span class='hs-keyword'>where</span>
+<a name="line-181"></a>    <span class='hs-varid'>unit</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>uncurry</span> <span class='hs-conid'>IntMap</span><span class='hs-varop'>.</span><span class='hs-varid'>singleton</span>
+<a name="line-182"></a>    <span class='hs-varid'>cons</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>uncurry</span> <span class='hs-conid'>IntMap</span><span class='hs-varop'>.</span><span class='hs-varid'>insert</span>
+<a name="line-183"></a>    <span class='hs-varid'>snoc</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>flip</span> <span class='hs-varop'>.</span> <span class='hs-varid'>uncurry</span> <span class='hs-varop'>.</span> <span class='hs-conid'>IntMap</span><span class='hs-varop'>.</span><span class='hs-varid'>insertWith</span> <span class='hs-varop'>$</span> <span class='hs-varid'>const</span> <span class='hs-varid'>id</span>
+<a name="line-184"></a>
+<a name="line-185"></a><span class='hs-keyword'>instance</span> <span class='hs-conid'>Ord</span> <span class='hs-varid'>k</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>Reducer</span> <span class='hs-layout'>(</span><span class='hs-varid'>k</span><span class='hs-layout'>,</span><span class='hs-varid'>v</span><span class='hs-layout'>)</span> <span class='hs-layout'>(</span><span class='hs-conid'>Map</span> <span class='hs-varid'>k</span> <span class='hs-varid'>v</span><span class='hs-layout'>)</span> <span class='hs-keyword'>where</span>
+<a name="line-186"></a>    <span class='hs-varid'>unit</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>uncurry</span> <span class='hs-conid'>Map</span><span class='hs-varop'>.</span><span class='hs-varid'>singleton</span>
+<a name="line-187"></a>    <span class='hs-varid'>cons</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>uncurry</span> <span class='hs-conid'>Map</span><span class='hs-varop'>.</span><span class='hs-varid'>insert</span>
+<a name="line-188"></a>    <span class='hs-varid'>snoc</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>flip</span> <span class='hs-varop'>.</span> <span class='hs-varid'>uncurry</span> <span class='hs-varop'>.</span> <span class='hs-conid'>Map</span><span class='hs-varop'>.</span><span class='hs-varid'>insertWith</span> <span class='hs-varop'>$</span> <span class='hs-varid'>const</span> <span class='hs-varid'>id</span>
+<a name="line-189"></a>
+<a name="line-190"></a><span class='hs-comment'>{-
+<a name="line-191"></a>instance Enum a =&gt; Reducer a (BitSet a) where
+<a name="line-192"></a>    unit m = BitSet.insert m BitSet.empty
+<a name="line-193"></a>-}</span>
hunk ./dist/doc/html/monoids/src/Data-Ring-FromNum.html 55
+<a name="line-47"></a>
hunk ./dist/doc/html/monoids/src/Data-Ring-Semi-Near.html 98
+<a name="line-90"></a>
hunk ./dist/doc/html/monoids/src/Data-Ring-Semi-Tropical.html 24
-<a name="line-16"></a>    <span class='hs-comment'>-- * Max</span>
+<a name="line-16"></a>    <span class='hs-comment'>-- * Tropical Semirings</span>
hunk ./dist/doc/html/monoids/src/Data-Ring-Semi.html 31
-<a name="line-23"></a>
hunk ./monoids.cabal 29
+    Data.Monoid.Generator.LZ78
hunk ./monoids.cabal 49
+    Data.Ring.Module
+    Data.Ring.Module.AutomaticDifferentiation
}
