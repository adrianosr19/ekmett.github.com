[improved haddock on Data.Monoid.Ord
ekmett@gmail.com**20090323045109] {
hunk ./Data/Monoid/Ord.hs 1
+-----------------------------------------------------------------------------
+---- |
+---- Module      :  Data.Monoid.Ord
+---- Copyright   :  (c) Edward Kmett 2009
+---- License     :  BSD-style
+---- Maintainer  :  libraries@haskell.org
+---- Stability   :  provisional
+---- Portability :  portable
+----
+---- Some 'Monoid' instances that should probably be in "Data.Monoid".
+----
+-------------------------------------------------------------------------------
+
hunk ./Data/Monoid/Ord.hs 16
+    -- * Min
hunk ./Data/Monoid/Ord.hs 18
+    -- * Max
hunk ./Data/Monoid/Ord.hs 20
+    -- * Max w/ added bottom
hunk ./Data/Monoid/Ord.hs 25
-    
+
+-- | The monoid given by @('min','maxBound')@
hunk ./Data/Monoid/Ord.hs 33
+-- | The monoid @('max','minBound')@
hunk ./Data/Monoid/Ord.hs 40
+-- | The monoid @('max','Nothing')@ over @'Maybe' a@
hunk ./dist/doc/html/lexical-monoids/Data-Monoid-Ord.html 56
+><TD
+><TABLE CLASS="vanilla" CELLSPACING="0" CELLPADDING="0"
+><TR
+><TD CLASS="section4"
+><B
+>Contents</B
+></TD
+></TR
+><TR
+><TD
+><DL
+><DT
+><A HREF="#1"
+>Min
+</A
+></DT
+><DT
+><A HREF="#2"
+>Max
+</A
+></DT
+><DT
+><A HREF="#3"
+>Max w/ added bottom
+</A
+></DT
+></DL
+></TD
+></TR
+></TABLE
+></TD
+></TR
+><TR
hunk ./dist/doc/html/lexical-monoids/Data-Monoid-Ord.html 98
->Documentation</TD
+>Synopsis</TD
+></TR
+><TR
+><TD CLASS="s15"
+></TD
+></TR
+><TR
+><TD CLASS="body"
+><TABLE CLASS="vanilla" CELLSPACING="0" CELLPADDING="0"
+><TR
+><TD CLASS="decl"
+><SPAN CLASS="keyword"
+>newtype</SPAN
+>  <A HREF="#t%3AMin"
+>Min</A
+> a = <A HREF="#v%3AMin"
+>Min</A
+> {<TABLE CLASS="vanilla" CELLSPACING="0" CELLPADDING="0"
+><TR
+><TD CLASS="recfield"
+><A HREF="#v%3AgetMin"
+>getMin</A
+> :: a</TD
+></TR
+></TABLE
+>}</TD
+></TR
+><TR
+><TD CLASS="s8"
+></TD
+></TR
+><TR
+><TD CLASS="decl"
+><SPAN CLASS="keyword"
+>newtype</SPAN
+>  <A HREF="#t%3AMax"
+>Max</A
+> a = <A HREF="#v%3AMax"
+>Max</A
+> {<TABLE CLASS="vanilla" CELLSPACING="0" CELLPADDING="0"
+><TR
+><TD CLASS="recfield"
+><A HREF="#v%3AgetMax"
+>getMax</A
+> :: a</TD
+></TR
+></TABLE
+>}</TD
+></TR
+><TR
+><TD CLASS="s8"
+></TD
+></TR
+><TR
+><TD CLASS="decl"
+><SPAN CLASS="keyword"
+>newtype</SPAN
+>  <A HREF="#t%3APriority"
+>Priority</A
+> a = <A HREF="#v%3APriority"
+>Priority</A
+> {<TABLE CLASS="vanilla" CELLSPACING="0" CELLPADDING="0"
+><TR
+><TD CLASS="recfield"
+><A HREF="#v%3AgetPriority"
+>getPriority</A
+> :: <A HREF="/usr/local/share/doc/ghc/libraries/base/Data-Maybe.html#t%3AMaybe"
+>Maybe</A
+> a</TD
+></TR
+></TABLE
+>}</TD
+></TR
+></TABLE
+></TD
+></TR
+><TR
+><TD CLASS="s15"
+></TD
+></TR
+><TR
+><TD CLASS="s15"
+></TD
+></TR
+><TR
+><TD CLASS="section1"
+><A NAME="1"
+>Min
+</A
+></TD
hunk ./dist/doc/html/lexical-monoids/Data-Monoid-Ord.html 217
+><TD CLASS="ndoc"
+>The monoid given by <TT
+>(<TT
+><A HREF="/usr/local/share/doc/ghc/libraries/base/Data-Ord.html#v%3Amin"
+>min</A
+></TT
+>,<TT
+><A HREF="/usr/local/share/doc/ghc/libraries/base/Prelude.html#v%3AmaxBound"
+>maxBound</A
+></TT
+>)</TT
+>
+</TD
+></TR
+><TR
hunk ./dist/doc/html/lexical-monoids/Data-Monoid-Ord.html 350
+><TD CLASS="section1"
+><A NAME="2"
+>Max
+</A
+></TD
+></TR
+><TR
+><TD CLASS="s15"
+></TD
+></TR
+><TR
hunk ./dist/doc/html/lexical-monoids/Data-Monoid-Ord.html 384
+><TD CLASS="ndoc"
+>The monoid <TT
+>(<TT
+><A HREF="/usr/local/share/doc/ghc/libraries/base/Data-Ord.html#v%3Amax"
+>max</A
+></TT
+>,<TT
+><A HREF="/usr/local/share/doc/ghc/libraries/base/Prelude.html#v%3AminBound"
+>minBound</A
+></TT
+>)</TT
+>
+</TD
+></TR
+><TR
hunk ./dist/doc/html/lexical-monoids/Data-Monoid-Ord.html 517
+><TD CLASS="section1"
+><A NAME="3"
+>Max w/ added bottom
+</A
+></TD
+></TR
+><TR
+><TD CLASS="s15"
+></TD
+></TR
+><TR
hunk ./dist/doc/html/lexical-monoids/Data-Monoid-Ord.html 551
+><TD CLASS="ndoc"
+>The monoid <TT
+>(<TT
+><A HREF="/usr/local/share/doc/ghc/libraries/base/Data-Ord.html#v%3Amax"
+>max</A
+></TT
+>,<TT
+><A HREF="/usr/local/share/doc/ghc/libraries/base/Data-Maybe.html#v%3ANothing"
+>Nothing</A
+></TT
+>)</TT
+> over <TT
+><TT
+><A HREF="/usr/local/share/doc/ghc/libraries/base/Data-Maybe.html#t%3AMaybe"
+>Maybe</A
+></TT
+> a</TT
+>
+</TD
+></TR
+><TR
binary ./dist/doc/html/lexical-monoids/lexical-monoids.haddock
oldhex
*0d0cface000400000000000011300000000000000a202c00000000000000000000000000000000
*000000000000000100000000000000010000000000000000000000000000000100000000000000
*020000000000000000000000000000000100000000000000030000000000000000000000000000
*000100000000000000040000000000000000000000000000000100000000000000050000000000
*000000000000000000000100000000000000060000000000000000000000000000000100000000
*000000070000000000000000000000000000000100000000000000080000000000000000000000
*0000000001000000000000000900000000000000000000000000000002000000000000000a0000
*0000000000000000000000000002000000000000000b0000000000000000000000000000000200
*0000000000000c00000000000000000000000000000002000000000000000d0000000000000000
*0000000000000003000000000000000e0000000000000000000000000000000300000000000000
*0f0000000000000000000000000000000300000000000000100000000000000000000000000000
*000400000000000000110000000000000000000000000000000400000000000000120000000000
*000000000000000000000400000000000000130000000000000000000000000000000400000000
*000000140000000000000000000000000000000400000000000000150000000000000000000000
*000000000400000000000000160000000000000000000000000000000400000000000000170000
*000000000000000000000000000500000000000000180000000000000000000000000000000500
*0000000000001900000000000000000000000000000006000000000000001a0000000000000000
*0000000000000006000000000000001b0000000000000000000000000000000600000000000000
*1c00000000000000000000000000000006000000000000001d0000000000000000000000000000
*0007000000000000001e00000000000000000000000000000007000000000000001f0000000000
*000000000000000000000700000000000000200000000000000000000000000000000700000000
*000000210000000000000000000000000000000700000000000000220000000000000000000000
*000000000800000000000000230000000000000000000000000000000800000000000000240000
*000000000000000000000000000800000000000000250000000000000000000000000000000800
*000000000000260000000000000000000000000000000800000000000000270000000000000000
*000000000000000800000000000000280000000000000000000000000000000800000000000000
*2900000000000000000000000000000008000000000000002a0000000000000000000000000000
*0008000000000000002b0000000000000000000000000000000808000000000000000000000000
*0000000100000000000c000000000000002c000000000000002d000000000000002e0000000000
*000000000000000000000100000000000000020000000000000003000000000000000400000000
*000000050000000000000006000000000000000700000000000000080900000000000000060000
*000000000007000000000000000800000000000000030000000000000004000000000000000500
*000000000000000000000000000001000000000000000200000000000000000000000000000002
*000000000007000000000000002c000000000000002d000000000000002e000000000000000900
*0000000000000a000000000000000b000000000000000c04000000000000000900000000000000
*0a000000000000000b000000000000000c0000000000000000000000000000000300000000000a
*000000000000002c000000000000002d000000000000002e000000000000000900000000000000
*0a000000000000000b000000000000000c000000000000000d000000000000000e000000000000
*000f03000000000000000d000000000000000f000000000000000e000000000000000000000000
*00000004000000000011000000000000002c000000000000002d000000000000002e0000000000
*000009000000000000000a000000000000000b000000000000000c000000000000000d00000000
*0000000e000000000000000f000000000000001000000000000000110000000000000012000000
*000000001300000000000000140000000000000015000000000000001607000000000000001000
*000000000000120000000000000011000000000000001500000000000000140000000000000013
*00000000000000160000000000000000000000000000000500000000000c000000000000002c00
*0000000000002d000000000000002e0000000000000009000000000000000a000000000000000b
*000000000000000c000000000000000d000000000000000e000000000000000f00000000000000
*170000000000000018020000000000000017000000000000001800000000000000000000000000
*00000600000000000b000000000000002c000000000000002d000000000000002e000000000000
*0009000000000000000a000000000000000b000000000000000c00000000000000190000000000
*00001a000000000000001b000000000000001c040000000000000019000000000000001a000000
*000000001b000000000000001c0000000000000000000000000000000700000000002100000000
*0000002c000000000000002f000000000000002d000000000000002e0000000000000030000000
*000000003100000000000000320000000000000033000000000000003400000000000000350000
*000000000036000000000000003700000000000000380000000000000039000000000000003a00
*0000000000003b000000000000003c000000000000003d000000000000003e000000000000003f
*000000000000004000000000000000410000000000000042000000000000004300000000000000
*44000000000000004500000000000000460000000000000047000000000000001d000000000000
*001e000000000000001f0000000000000020000000000000002105000000000000001d00000000
*0000001e000000000000001f000000000000002000000000000000210000000000000000000000
*0000000008000000000014000000000000002c000000000000002d000000000000002e00000000
*00000009000000000000000a000000000000000b000000000000000c000000000000000d000000
*000000000e000000000000000f0000000000000022000000000000002300000000000000240000
*000000000025000000000000002600000000000000270000000000000028000000000000002900
*0000000000002a000000000000002b0a0000000000000027000000000000002800000000000000
*260000000000000029000000000000002400000000000000250000000000000022000000000000
*0023000000000000002a000000000000002b000000000000004800000000000000000000000000
*000001030000000000000009000000000000000000000000000000010100000000000000090000
*000000000000000000000000000100000000000000000a00000000000000000000000000000001
*03000000000000000b0000000000000000000000000000000101000000000000000b0000000000
*000000000000000000000100000000000000000c00000000000000000000000000000001030000
*00000000000d0000000000000000000000000000000101000000000000000d0000000000000000
*000000000000000100000000000000000e00000000000000000000000000000002030000000000
*00000f000000000000000000000000000000020000000000000000100000000000000000000000
*000000000200000000000000001100000000000000000000000000000002000000000000000012
*000000000000000000000000000000030300000000000000130000000000000000000000000000
*000300000000000000001400000000000000000000000000000003000000000000000015000000
*000000000000000000000000040300000000000000160000000000000000000000000000000403
*000000000000001700000000000000000000000000000004030000000000000018000000000000
*000000000000000000040000000000000000190000000000000000000000000000000400000000
*000000001a0000000000000000000000000000000400000000000000001b000000000000000000
*0000000000000400000000000000001c0000000000000000000000000000000503000000000000
*001d0000000000000000000000000000000500000000000000001e000000000000000000000000
*0000000603000000000000001f0000000000000000000000000000000600000000000000002000
*000000000000000000000000000006000000000000000021000000000000000000000000000000
*060000000000000000220000000000000000000000000000000703000000000000002300000000
*000000000000000000000007030000000000000024000000000000000000000000000000070000
*000000000000250000000000000000000000000000000700000000000000002600000000000000
*000000000000000007000000000000000027000000000000000000000000000000080300000000
*000000280000000000000000000000000000000800000000000000002900000000000000000000
*00000000000803000000000000002a000000000000000000000000000000080000000000000000
*2b0000000000000000000000000000000803000000000000002c00000000000000000000000000
*00000803000000000000002d0000000000000000000000000000000800000000000000002e0000
*000000000000000000000000000800000000000000002f00000000000000000000000000000008
*000000000000000030000000000000000000000000000000080000000000000000310000000000
*000032000000000000003300000000000000003400000000000000320000000000000033000000
*000000000035000000000000003200000000000000330300000000000000360000000000000032
*000000000000003300000000000000003700000000000000320000000000000033000000000000
*000038000000000000003200000000000000330100000000000000390000000000000032000000
*00000000330300000000000000390000000000000032000000000000003300000000000000003a
*0000000000000032000000000000003301000000000000003b0000000000000032000000000000
*003303000000000000003b0000000000000032000000000000003300000000000000003c000000
*0000000032000000000000003301000000000000003d0000000000000032000000000000003303
*000000000000003d0000000000000032000000000000003300000000000000003e000000000000
*0032000000000000003301000000000000003f0000000000000032000000000000003303000000
*000000003f00000000000000320000000000000033000000000000000040000000000000003200
*000000000000330100000000000000410000000000000032000000000000003303000000000000
*004100000000000000320000000000000033000000000000000042000000000000003200000000
*000000330100000000000000430000000000000032000000000000003303000000000000004300
*000000000000320000000000000033000000000000000044000000000000003200000000000000
*330100000000000000450000000000000032000000000000003303000000000000004500000000
*000000320000000000000033000000000000000046000000000000003200000000000000330100
*000000000000470000000000000032000000000000003303000000000000004700000000000000
*4800000000000000156c65786963616c2d6d6f6e6f6964732d302e312e31000000000000000f44
*6174612e4d6f6e6f69642e4f72640000000000000013446174612e4d6f6e6f69642e5265647563
*65720000000000000018446174612e4d6f6e6f69642e526564756365722e436861720000000000
*000022446174612e4d6f6e6f69642e4c65786963616c2e536f75726365506f736974696f6e0000
*000000000020446174612e4d6f6e6f69642e4c65786963616c2e555446382e4465636f64657200
*00000000000018446174612e4d6f6e6f69642e526564756365722e576974680000000000000015
*446174612e4d6f6e6f69642e47656e657261746f720000000000000019446174612e4d6f6e6f69
*642e4c65786963616c2e576f72647300000000000000085072696f72697479000000000000000b
*6765745072696f7269747900000000000000034d617800000000000000066765744d6178000000
*00000000034d696e00000000000000066765744d696e0000000000000007526564756365720000
*000000000006726564756365000000000000000772656475636572000000000000000772656475
*63656c000000000000000b4368617252656475636572000000000000000a726564756365436861
*72000000000000000b696e76616c696443686172000000000000000e536f75726365506f736974
*696f6e000000000000000c536f75726365436f6c756d6e000000000000000a536f757263654c69
*6e65000000000000000b73746172744f6646696c65000000000000000c736f75726365436f6c75
*6d6e000000000000000a736f757263654c696e65000000000000001273686f77536f7572636550
*6f736974696f6e000000000000000455544638000000000000000772756e555446380000000000
*00000b5769746852656475636572000000000000000e72756e5769746852656475636572000000
*000000000b7769746852656475636572000000000000000e776974686f75745265647563657200
*0000000000000947656e657261746f720000000000000004456c656d00000000000000096d6170
*726564756365000000000000000a6d617072656475636572000000000000000a6d617072656475
*63656c0000000000000007556e6c696e6564000000000000000a72756e556e6c696e6564000000
*0000000008556e737061636564000000000000000b72756e556e73706163656400000000000000
*054c696e65730000000000000005576f726473000000000000000872756e576f72647300000000
*0000000872756e4c696e65730000000000000009776f72647346726f6d00000000000000096c69
*6e657346726f6d000000000000000462617365000000000000000b446174612e4d6f6e6f696400
*000000000000076d617070656e6400000000000000066d656d70747900000000000000064d6f6e
*6f696400000000000000076d636f6e63617400000000000000076765744475616c000000000000
*00044475616c0000000000000007617070456e646f0000000000000004456e646f000000000000
*0006676574416c6c0000000000000003416c6c0000000000000006676574416e79000000000000
*0003416e79000000000000000667657453756d000000000000000353756d000000000000000a67
*657450726f64756374000000000000000750726f64756374000000000000000867657446697273
*740000000000000005466972737400000000000000076765744c61737400000000000000044c61
*7374
newhex
*0d0cface000400000000000013d10000000000000c2b2c00000000000000000000000000000000
*000000000000000100000000000000010000000000000000000000000000000100000000000000
*020000000000000000000000000000000100000000000000030000000000000000000000000000
*000100000000000000040000000000000000000000000000000100000000000000050000000000
*000000000000000000000100000000000000060000000000000000000000000000000100000000
*000000070000000000000000000000000000000100000000000000080000000000000000000000
*0000000001000000000000000900000000000000000000000000000002000000000000000a0000
*0000000000000000000000000002000000000000000b0000000000000000000000000000000200
*0000000000000c00000000000000000000000000000002000000000000000d0000000000000000
*0000000000000003000000000000000e0000000000000000000000000000000300000000000000
*0f0000000000000000000000000000000300000000000000100000000000000000000000000000
*000400000000000000110000000000000000000000000000000400000000000000120000000000
*000000000000000000000400000000000000130000000000000000000000000000000400000000
*000000140000000000000000000000000000000400000000000000150000000000000000000000
*000000000400000000000000160000000000000000000000000000000400000000000000170000
*000000000000000000000000000500000000000000180000000000000000000000000000000500
*0000000000001900000000000000000000000000000006000000000000001a0000000000000000
*0000000000000006000000000000001b0000000000000000000000000000000600000000000000
*1c00000000000000000000000000000006000000000000001d0000000000000000000000000000
*0007000000000000001e00000000000000000000000000000007000000000000001f0000000000
*000000000000000000000700000000000000200000000000000000000000000000000700000000
*000000210000000000000000000000000000000700000000000000220000000000000000000000
*000000000800000000000000230000000000000000000000000000000800000000000000240000
*000000000000000000000000000800000000000000250000000000000000000000000000000800
*000000000000260000000000000000000000000000000800000000000000270000000000000000
*000000000000000800000000000000280000000000000000000000000000000800000000000000
*2900000000000000000000000000000008000000000000002a0000000000000000000000000000
*0008000000000000002b0000000000000000000000000000000808000000000000000000000000
*00000001000000000300000000000000000301020b000000540000006800000065000000200000
*006d0000006f0000006e0000006f00000069000000640000002001070102010000002801040100
*000000000000002c0000000000000009000000000000000a0102010000002c0104010000000000
*0000002d0000000000000009000000000000000b020100000029010206000000200000006f0000
*0076000000650000007200000020010701040100000000000000002e0000000000000009000000
*000000000b0202000000200000006102010000000a00000000000000030301020b000000540000
*006800000065000000200000006d0000006f0000006e0000006f00000069000000640000002001
*070102010000002801040100000000000000002c0000000000000009000000000000000a010201
*0000002c01040100000000000000002f0000000000000009000000000000000c02010000002902
*010000000a000000000000000603010214000000540000006800000065000000200000006d0000
*006f0000006e0000006f0000006900000064000000200000006700000069000000760000006500
*00006e000000200000006200000079000000200107010201000000280104010000000000000000
*300000000000000009000000000000000a0102010000002c010401000000000000000031000000
*0000000009000000000000000c02010000002902010000000a0c00000000000000320000000000
*000033000000000000003400000000000000000000000000000001000000000000000200000000
*000000030000000000000004000000000000000500000000000000060000000000000007000000
*000000000809000000000000000600000000000000070000000000000008000000000000000300
*000000000000040000000000000005000000000000000000000000000000010000000000000002
*000000000000000000000000000000020000000000070000000000000032000000000000003300
*000000000000340000000000000009000000000000000a000000000000000b000000000000000c
*040000000000000009000000000000000a000000000000000b000000000000000c000000000000
*0000000000000000000300000000000a0000000000000032000000000000003300000000000000
*340000000000000009000000000000000a000000000000000b000000000000000c000000000000
*000d000000000000000e000000000000000f03000000000000000d000000000000000f00000000
*0000000e0000000000000000000000000000000400000000001100000000000000320000000000
*00003300000000000000340000000000000009000000000000000a000000000000000b00000000
*0000000c000000000000000d000000000000000e000000000000000f0000000000000010000000
*000000001100000000000000120000000000000013000000000000001400000000000000150000
*000000000016070000000000000010000000000000001200000000000000110000000000000015
*000000000000001400000000000000130000000000000016000000000000000000000000000000
*0500000000000c0000000000000032000000000000003300000000000000340000000000000009
*000000000000000a000000000000000b000000000000000c000000000000000d00000000000000
*0e000000000000000f000000000000001700000000000000180200000000000000170000000000
*0000180000000000000000000000000000000600000000000b0000000000000032000000000000
*003300000000000000340000000000000009000000000000000a000000000000000b0000000000
*00000c0000000000000019000000000000001a000000000000001b000000000000001c04000000
*0000000019000000000000001a000000000000001b000000000000001c00000000000000000000
*000000000007000000000021000000000000003200000000000000350000000000000033000000
*000000003400000000000000360000000000000037000000000000003800000000000000390000
*00000000003a000000000000003b000000000000003c000000000000003d000000000000003e00
*0000000000003f0000000000000040000000000000004100000000000000420000000000000043
*000000000000004400000000000000450000000000000046000000000000004700000000000000
*480000000000000049000000000000004a000000000000004b000000000000004c000000000000
*004d000000000000001d000000000000001e000000000000001f00000000000000200000000000
*00002105000000000000001d000000000000001e000000000000001f0000000000000020000000
*000000002100000000000000000000000000000008000000000014000000000000003200000000
*0000003300000000000000340000000000000009000000000000000a000000000000000b000000
*000000000c000000000000000d000000000000000e000000000000000f00000000000000220000
*000000000023000000000000002400000000000000250000000000000026000000000000002700
*000000000000280000000000000029000000000000002a000000000000002b0a00000000000000
*270000000000000028000000000000002600000000000000290000000000000024000000000000
*002500000000000000220000000000000023000000000000002a000000000000002b0000000000
*00004e0000000000000000000000000000000103000000000000000d0000000000000000000000
*000000000101000000000000000d0000000000000000000000000000000100000000000000000e
*0000000000000000000000000000000103000000000000000f0000000000000000000000000000
*000101000000000000000f00000000000000000000000000000001000000000000000010000000
*000000000000000000000000010300000000000000110000000000000000000000000000000101
*000000000000001100000000000000000000000000000001000000000000000012000000000000
*000000000000000000020300000000000000130000000000000000000000000000000200000000
*000000001400000000000000000000000000000002000000000000000015000000000000000000
*000000000000020000000000000000160000000000000000000000000000000303000000000000
*001700000000000000000000000000000003000000000000000018000000000000000000000000
*000000030000000000000000190000000000000000000000000000000403000000000000001a00
*00000000000000000000000000000403000000000000001b000000000000000000000000000000
*0403000000000000001c0000000000000000000000000000000400000000000000001d00000000
*00000000000000000000000400000000000000001e000000000000000000000000000000040000
*0000000000001f0000000000000000000000000000000400000000000000002000000000000000
*000000000000000005030000000000000021000000000000000000000000000000050000000000
*000000220000000000000000000000000000000603000000000000002300000000000000000000
*000000000006000000000000000024000000000000000000000000000000060000000000000000
*250000000000000000000000000000000600000000000000002600000000000000000000000000
*000007030000000000000027000000000000000000000000000000070300000000000000280000
*000000000000000000000000000700000000000000002900000000000000000000000000000007
*00000000000000002a0000000000000000000000000000000700000000000000002b0000000000
*000000000000000000000803000000000000002c00000000000000000000000000000008000000
*00000000002d0000000000000000000000000000000803000000000000002e0000000000000000
*000000000000000800000000000000002f00000000000000000000000000000008030000000000
*000030000000000000000000000000000000080300000000000000310000000000000000000000
*000000000800000000000000003200000000000000000000000000000008000000000000000033
*000000000000000000000000000000080000000000000000340000000000000000000000000000
*000800000000000000003500000000000000090000000000000036000000000000000037000000
*0000000009000000000000000b0100000000000000380000000000000009000000000000000b03
*00000000000000390000000000000009000000000000003a00000000000000003b000000000000
*0009000000000000003600000000000000003c0000000000000009000000000000003a00000000
*000000003d0000000000000009000000000000003e00000000000000003f000000000000000900
*0000000000003e0000000000000000400000000000000009000000000000003e03000000000000
*00410000000000000009000000000000003e000000000000000042000000000000000900000000
*0000003e0000000000000000430000000000000009000000000000003e01000000000000004400
*00000000000009000000000000003e030000000000000044000000000000000900000000000000
*3e0000000000000000450000000000000009000000000000003e01000000000000004600000000
*00000009000000000000003e0300000000000000460000000000000009000000000000003e0000
*000000000000470000000000000009000000000000003e01000000000000004800000000000000
*09000000000000003e0300000000000000480000000000000009000000000000003e0000000000
*000000490000000000000009000000000000003e01000000000000004a00000000000000090000
*00000000003e03000000000000004a0000000000000009000000000000003e0000000000000000
*4b0000000000000009000000000000003e01000000000000004c00000000000000090000000000
*00003e03000000000000004c0000000000000009000000000000003e00000000000000004d0000
*000000000009000000000000003e01000000000000004e0000000000000009000000000000003e
*03000000000000004e0000000000000009000000000000003e00000000000000004f0000000000
*000009000000000000003e0100000000000000500000000000000009000000000000003e030000
*0000000000500000000000000009000000000000003e0000000000000000510000000000000009
*000000000000003e0100000000000000520000000000000009000000000000003e030000000000
*000052000000000000005300000000000000156c65786963616c2d6d6f6e6f6964732d302e312e
*31000000000000000f446174612e4d6f6e6f69642e4f72640000000000000013446174612e4d6f
*6e6f69642e526564756365720000000000000018446174612e4d6f6e6f69642e52656475636572
*2e436861720000000000000022446174612e4d6f6e6f69642e4c65786963616c2e536f75726365
*506f736974696f6e0000000000000020446174612e4d6f6e6f69642e4c65786963616c2e555446
*382e4465636f6465720000000000000018446174612e4d6f6e6f69642e526564756365722e5769
*74680000000000000015446174612e4d6f6e6f69642e47656e657261746f720000000000000019
*446174612e4d6f6e6f69642e4c65786963616c2e576f7264730000000000000004626173650000
*000000000008446174612e4f7264000000000000000a446174612e4d6179626500000000000000
*075072656c75646500000000000000085072696f72697479000000000000000b6765745072696f
*7269747900000000000000034d617800000000000000066765744d617800000000000000034d69
*6e00000000000000066765744d696e000000000000000752656475636572000000000000000672
*656475636500000000000000077265647563657200000000000000077265647563656c00000000
*0000000b4368617252656475636572000000000000000a72656475636543686172000000000000
*000b696e76616c696443686172000000000000000e536f75726365506f736974696f6e00000000
*0000000c536f75726365436f6c756d6e000000000000000a536f757263654c696e650000000000
*00000b73746172744f6646696c65000000000000000c736f75726365436f6c756d6e0000000000
*00000a736f757263654c696e65000000000000001273686f77536f75726365506f736974696f6e
*000000000000000455544638000000000000000772756e55544638000000000000000b57697468
*52656475636572000000000000000e72756e5769746852656475636572000000000000000b7769
*746852656475636572000000000000000e776974686f7574526564756365720000000000000009
*47656e657261746f720000000000000004456c656d00000000000000096d617072656475636500
*0000000000000a6d617072656475636572000000000000000a6d61707265647563656c00000000
*00000007556e6c696e6564000000000000000a72756e556e6c696e65640000000000000008556e
*737061636564000000000000000b72756e556e73706163656400000000000000054c696e657300
*00000000000005576f726473000000000000000872756e576f726473000000000000000872756e
*4c696e65730000000000000009776f72647346726f6d00000000000000096c696e657346726f6d
*000000000000000b4748432e436c617373657300000000000000036d617800000000000000074e
*6f7468696e6700000000000000054d6179626500000000000000084748432e456e756d00000000
*000000086d696e426f756e6400000000000000036d696e00000000000000086d6178426f756e64
*000000000000000b446174612e4d6f6e6f696400000000000000076d617070656e640000000000
*0000066d656d70747900000000000000064d6f6e6f696400000000000000076d636f6e63617400
*000000000000076765744475616c00000000000000044475616c0000000000000007617070456e
*646f0000000000000004456e646f0000000000000006676574416c6c0000000000000003416c6c
*0000000000000006676574416e790000000000000003416e79000000000000000667657453756d
*000000000000000353756d000000000000000a67657450726f6475637400000000000000075072
*6f6475637400000000000000086765744669727374000000000000000546697273740000000000
*0000076765744c61737400000000000000044c617374
hunk ./dist/doc/html/lexical-monoids/src/Data-Monoid-Ord.html 9
-<pre><a name="line-1"></a><span class='hs-keyword'>module</span> <span class='hs-conid'>Data</span><span class='hs-varop'>.</span><span class='hs-conid'>Monoid</span><span class='hs-varop'>.</span><span class='hs-conid'>Ord</span> 
-<a name="line-2"></a>    <span class='hs-layout'>(</span> <span class='hs-keyword'>module</span> <span class='hs-conid'>Data</span><span class='hs-varop'>.</span><span class='hs-conid'>Monoid</span>
-<a name="line-3"></a>    <span class='hs-layout'>,</span> <span class='hs-conid'>Min</span><span class='hs-layout'>(</span><span class='hs-conid'>Min</span><span class='hs-layout'>,</span><span class='hs-varid'>getMin</span><span class='hs-layout'>)</span>
-<a name="line-4"></a>    <span class='hs-layout'>,</span> <span class='hs-conid'>Max</span><span class='hs-layout'>(</span><span class='hs-conid'>Max</span><span class='hs-layout'>,</span><span class='hs-varid'>getMax</span><span class='hs-layout'>)</span>
-<a name="line-5"></a>    <span class='hs-layout'>,</span> <span class='hs-conid'>Priority</span><span class='hs-layout'>(</span><span class='hs-conid'>Priority</span><span class='hs-layout'>,</span><span class='hs-varid'>getPriority</span><span class='hs-layout'>)</span>
-<a name="line-6"></a>    <span class='hs-layout'>)</span> <span class='hs-keyword'>where</span>
-<a name="line-7"></a>
-<a name="line-8"></a><span class='hs-keyword'>import</span> <span class='hs-conid'>Data</span><span class='hs-varop'>.</span><span class='hs-conid'>Monoid</span> <span class='hs-layout'>(</span><span class='hs-conid'>Monoid</span><span class='hs-layout'>,</span> <span class='hs-varid'>mappend</span><span class='hs-layout'>,</span> <span class='hs-varid'>mempty</span><span class='hs-layout'>)</span>
-<a name="line-9"></a>    
-<a name="line-10"></a><a name="Min"></a><span class='hs-keyword'>newtype</span> <span class='hs-conid'>Min</span> <span class='hs-varid'>a</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>Min</span> <span class='hs-layout'>{</span> <span class='hs-varid'>getMin</span> <span class='hs-keyglyph'>::</span> <span class='hs-varid'>a</span> <span class='hs-layout'>}</span> <span class='hs-keyword'>deriving</span> <span class='hs-layout'>(</span><span class='hs-conid'>Eq</span><span class='hs-layout'>,</span><span class='hs-conid'>Ord</span><span class='hs-layout'>,</span><span class='hs-conid'>Show</span><span class='hs-layout'>,</span><span class='hs-conid'>Read</span><span class='hs-layout'>,</span><span class='hs-conid'>Bounded</span><span class='hs-layout'>)</span>
-<a name="line-11"></a>
-<a name="line-12"></a><span class='hs-keyword'>instance</span> <span class='hs-layout'>(</span><span class='hs-conid'>Ord</span> <span class='hs-varid'>a</span><span class='hs-layout'>,</span> <span class='hs-conid'>Bounded</span> <span class='hs-varid'>a</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>Monoid</span> <span class='hs-layout'>(</span><span class='hs-conid'>Min</span> <span class='hs-varid'>a</span><span class='hs-layout'>)</span> <span class='hs-keyword'>where</span>
-<a name="line-13"></a>    <span class='hs-varid'>mempty</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>Min</span> <span class='hs-varid'>maxBound</span>
-<a name="line-14"></a>    <span class='hs-conid'>Min</span> <span class='hs-varid'>a</span> <span class='hs-varop'>`mappend`</span> <span class='hs-conid'>Min</span> <span class='hs-varid'>b</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>Min</span> <span class='hs-layout'>(</span><span class='hs-varid'>a</span> <span class='hs-varop'>`min`</span> <span class='hs-varid'>b</span><span class='hs-layout'>)</span>
-<a name="line-15"></a>
-<a name="line-16"></a><a name="Max"></a><span class='hs-keyword'>newtype</span> <span class='hs-conid'>Max</span> <span class='hs-varid'>a</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>Max</span> <span class='hs-layout'>{</span> <span class='hs-varid'>getMax</span> <span class='hs-keyglyph'>::</span> <span class='hs-varid'>a</span> <span class='hs-layout'>}</span> <span class='hs-keyword'>deriving</span> <span class='hs-layout'>(</span><span class='hs-conid'>Eq</span><span class='hs-layout'>,</span><span class='hs-conid'>Ord</span><span class='hs-layout'>,</span><span class='hs-conid'>Show</span><span class='hs-layout'>,</span><span class='hs-conid'>Read</span><span class='hs-layout'>,</span><span class='hs-conid'>Bounded</span><span class='hs-layout'>)</span>
-<a name="line-17"></a>
-<a name="line-18"></a><span class='hs-keyword'>instance</span> <span class='hs-layout'>(</span><span class='hs-conid'>Ord</span> <span class='hs-varid'>a</span><span class='hs-layout'>,</span> <span class='hs-conid'>Bounded</span> <span class='hs-varid'>a</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>Monoid</span> <span class='hs-layout'>(</span><span class='hs-conid'>Max</span> <span class='hs-varid'>a</span><span class='hs-layout'>)</span> <span class='hs-keyword'>where</span>
-<a name="line-19"></a>    <span class='hs-varid'>mempty</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>Max</span> <span class='hs-varid'>minBound</span>
-<a name="line-20"></a>    <span class='hs-conid'>Max</span> <span class='hs-varid'>a</span> <span class='hs-varop'>`mappend`</span> <span class='hs-conid'>Max</span> <span class='hs-varid'>b</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>Max</span> <span class='hs-layout'>(</span><span class='hs-varid'>a</span> <span class='hs-varop'>`max`</span> <span class='hs-varid'>b</span><span class='hs-layout'>)</span>
-<a name="line-21"></a>
-<a name="line-22"></a><a name="Priority"></a><span class='hs-keyword'>newtype</span> <span class='hs-conid'>Priority</span> <span class='hs-varid'>a</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>Priority</span> <span class='hs-layout'>{</span> <span class='hs-varid'>getPriority</span> <span class='hs-keyglyph'>::</span> <span class='hs-conid'>Maybe</span> <span class='hs-varid'>a</span> <span class='hs-layout'>}</span> <span class='hs-keyword'>deriving</span> <span class='hs-layout'>(</span><span class='hs-conid'>Eq</span><span class='hs-layout'>,</span><span class='hs-conid'>Ord</span><span class='hs-layout'>,</span><span class='hs-conid'>Show</span><span class='hs-layout'>,</span><span class='hs-conid'>Read</span><span class='hs-layout'>)</span>
+<pre><a name="line-1"></a><span class='hs-comment'>-----------------------------------------------------------------------------</span>
+<a name="line-2"></a><span class='hs-comment'>---- |</span>
+<a name="line-3"></a><span class='hs-comment'>---- Module      :  Data.Monoid.Ord</span>
+<a name="line-4"></a><span class='hs-comment'>---- Copyright   :  (c) Edward Kmett 2009</span>
+<a name="line-5"></a><span class='hs-comment'>---- License     :  BSD-style</span>
+<a name="line-6"></a><span class='hs-comment'>---- Maintainer  :  libraries@haskell.org</span>
+<a name="line-7"></a><span class='hs-comment'>---- Stability   :  provisional</span>
+<a name="line-8"></a><span class='hs-comment'>---- Portability :  portable</span>
+<a name="line-9"></a><span class='hs-comment'>----</span>
+<a name="line-10"></a><span class='hs-comment'>---- Some 'Monoid' instances that should probably be in "Data.Monoid".</span>
+<a name="line-11"></a><span class='hs-comment'>----</span>
+<a name="line-12"></a><span class='hs-comment'>-------------------------------------------------------------------------------</span>
+<a name="line-13"></a>
+<a name="line-14"></a><span class='hs-keyword'>module</span> <span class='hs-conid'>Data</span><span class='hs-varop'>.</span><span class='hs-conid'>Monoid</span><span class='hs-varop'>.</span><span class='hs-conid'>Ord</span> 
+<a name="line-15"></a>    <span class='hs-layout'>(</span> <span class='hs-keyword'>module</span> <span class='hs-conid'>Data</span><span class='hs-varop'>.</span><span class='hs-conid'>Monoid</span>
+<a name="line-16"></a>    <span class='hs-comment'>-- * Min</span>
+<a name="line-17"></a>    <span class='hs-layout'>,</span> <span class='hs-conid'>Min</span><span class='hs-layout'>(</span><span class='hs-conid'>Min</span><span class='hs-layout'>,</span><span class='hs-varid'>getMin</span><span class='hs-layout'>)</span>
+<a name="line-18"></a>    <span class='hs-comment'>-- * Max</span>
+<a name="line-19"></a>    <span class='hs-layout'>,</span> <span class='hs-conid'>Max</span><span class='hs-layout'>(</span><span class='hs-conid'>Max</span><span class='hs-layout'>,</span><span class='hs-varid'>getMax</span><span class='hs-layout'>)</span>
+<a name="line-20"></a>    <span class='hs-comment'>-- * Max w/ added bottom</span>
+<a name="line-21"></a>    <span class='hs-layout'>,</span> <span class='hs-conid'>Priority</span><span class='hs-layout'>(</span><span class='hs-conid'>Priority</span><span class='hs-layout'>,</span><span class='hs-varid'>getPriority</span><span class='hs-layout'>)</span>
+<a name="line-22"></a>    <span class='hs-layout'>)</span> <span class='hs-keyword'>where</span>
hunk ./dist/doc/html/lexical-monoids/src/Data-Monoid-Ord.html 32
-<a name="line-24"></a><span class='hs-keyword'>instance</span> <span class='hs-layout'>(</span><span class='hs-conid'>Ord</span> <span class='hs-varid'>a</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>Monoid</span> <span class='hs-layout'>(</span><span class='hs-conid'>Priority</span> <span class='hs-varid'>a</span><span class='hs-layout'>)</span> <span class='hs-keyword'>where</span>
-<a name="line-25"></a>    <span class='hs-varid'>mempty</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>Priority</span> <span class='hs-conid'>Nothing</span>
-<a name="line-26"></a>    <span class='hs-conid'>Priority</span> <span class='hs-varid'>a</span> <span class='hs-varop'>`mappend`</span> <span class='hs-conid'>Priority</span> <span class='hs-varid'>b</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>Priority</span> <span class='hs-layout'>(</span><span class='hs-varid'>a</span> <span class='hs-varop'>`max`</span> <span class='hs-varid'>b</span><span class='hs-layout'>)</span>
+<a name="line-24"></a><span class='hs-keyword'>import</span> <span class='hs-conid'>Data</span><span class='hs-varop'>.</span><span class='hs-conid'>Monoid</span> <span class='hs-layout'>(</span><span class='hs-conid'>Monoid</span><span class='hs-layout'>,</span> <span class='hs-varid'>mappend</span><span class='hs-layout'>,</span> <span class='hs-varid'>mempty</span><span class='hs-layout'>)</span>
+<a name="line-25"></a>
+<a name="line-26"></a><a name="Min"></a><span class='hs-comment'>-- | The monoid given by @('min','maxBound')@</span>
+<a name="line-27"></a><a name="Min"></a><span class='hs-keyword'>newtype</span> <span class='hs-conid'>Min</span> <span class='hs-varid'>a</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>Min</span> <span class='hs-layout'>{</span> <span class='hs-varid'>getMin</span> <span class='hs-keyglyph'>::</span> <span class='hs-varid'>a</span> <span class='hs-layout'>}</span> <span class='hs-keyword'>deriving</span> <span class='hs-layout'>(</span><span class='hs-conid'>Eq</span><span class='hs-layout'>,</span><span class='hs-conid'>Ord</span><span class='hs-layout'>,</span><span class='hs-conid'>Show</span><span class='hs-layout'>,</span><span class='hs-conid'>Read</span><span class='hs-layout'>,</span><span class='hs-conid'>Bounded</span><span class='hs-layout'>)</span>
+<a name="line-28"></a>
+<a name="line-29"></a><span class='hs-keyword'>instance</span> <span class='hs-layout'>(</span><span class='hs-conid'>Ord</span> <span class='hs-varid'>a</span><span class='hs-layout'>,</span> <span class='hs-conid'>Bounded</span> <span class='hs-varid'>a</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>Monoid</span> <span class='hs-layout'>(</span><span class='hs-conid'>Min</span> <span class='hs-varid'>a</span><span class='hs-layout'>)</span> <span class='hs-keyword'>where</span>
+<a name="line-30"></a>    <span class='hs-varid'>mempty</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>Min</span> <span class='hs-varid'>maxBound</span>
+<a name="line-31"></a>    <span class='hs-conid'>Min</span> <span class='hs-varid'>a</span> <span class='hs-varop'>`mappend`</span> <span class='hs-conid'>Min</span> <span class='hs-varid'>b</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>Min</span> <span class='hs-layout'>(</span><span class='hs-varid'>a</span> <span class='hs-varop'>`min`</span> <span class='hs-varid'>b</span><span class='hs-layout'>)</span>
+<a name="line-32"></a>
+<a name="line-33"></a><a name="Max"></a><span class='hs-comment'>-- | The monoid @('max','minBound')@</span>
+<a name="line-34"></a><a name="Max"></a><span class='hs-keyword'>newtype</span> <span class='hs-conid'>Max</span> <span class='hs-varid'>a</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>Max</span> <span class='hs-layout'>{</span> <span class='hs-varid'>getMax</span> <span class='hs-keyglyph'>::</span> <span class='hs-varid'>a</span> <span class='hs-layout'>}</span> <span class='hs-keyword'>deriving</span> <span class='hs-layout'>(</span><span class='hs-conid'>Eq</span><span class='hs-layout'>,</span><span class='hs-conid'>Ord</span><span class='hs-layout'>,</span><span class='hs-conid'>Show</span><span class='hs-layout'>,</span><span class='hs-conid'>Read</span><span class='hs-layout'>,</span><span class='hs-conid'>Bounded</span><span class='hs-layout'>)</span>
+<a name="line-35"></a>
+<a name="line-36"></a><span class='hs-keyword'>instance</span> <span class='hs-layout'>(</span><span class='hs-conid'>Ord</span> <span class='hs-varid'>a</span><span class='hs-layout'>,</span> <span class='hs-conid'>Bounded</span> <span class='hs-varid'>a</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>Monoid</span> <span class='hs-layout'>(</span><span class='hs-conid'>Max</span> <span class='hs-varid'>a</span><span class='hs-layout'>)</span> <span class='hs-keyword'>where</span>
+<a name="line-37"></a>    <span class='hs-varid'>mempty</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>Max</span> <span class='hs-varid'>minBound</span>
+<a name="line-38"></a>    <span class='hs-conid'>Max</span> <span class='hs-varid'>a</span> <span class='hs-varop'>`mappend`</span> <span class='hs-conid'>Max</span> <span class='hs-varid'>b</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>Max</span> <span class='hs-layout'>(</span><span class='hs-varid'>a</span> <span class='hs-varop'>`max`</span> <span class='hs-varid'>b</span><span class='hs-layout'>)</span>
+<a name="line-39"></a>
+<a name="line-40"></a><a name="Priority"></a><span class='hs-comment'>-- | The monoid @('max','Nothing')@ over @'Maybe' a@</span>
+<a name="line-41"></a><a name="Priority"></a><span class='hs-keyword'>newtype</span> <span class='hs-conid'>Priority</span> <span class='hs-varid'>a</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>Priority</span> <span class='hs-layout'>{</span> <span class='hs-varid'>getPriority</span> <span class='hs-keyglyph'>::</span> <span class='hs-conid'>Maybe</span> <span class='hs-varid'>a</span> <span class='hs-layout'>}</span> <span class='hs-keyword'>deriving</span> <span class='hs-layout'>(</span><span class='hs-conid'>Eq</span><span class='hs-layout'>,</span><span class='hs-conid'>Ord</span><span class='hs-layout'>,</span><span class='hs-conid'>Show</span><span class='hs-layout'>,</span><span class='hs-conid'>Read</span><span class='hs-layout'>)</span>
+<a name="line-42"></a>
+<a name="line-43"></a><span class='hs-keyword'>instance</span> <span class='hs-layout'>(</span><span class='hs-conid'>Ord</span> <span class='hs-varid'>a</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>Monoid</span> <span class='hs-layout'>(</span><span class='hs-conid'>Priority</span> <span class='hs-varid'>a</span><span class='hs-layout'>)</span> <span class='hs-keyword'>where</span>
+<a name="line-44"></a>    <span class='hs-varid'>mempty</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>Priority</span> <span class='hs-conid'>Nothing</span>
+<a name="line-45"></a>    <span class='hs-conid'>Priority</span> <span class='hs-varid'>a</span> <span class='hs-varop'>`mappend`</span> <span class='hs-conid'>Priority</span> <span class='hs-varid'>b</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>Priority</span> <span class='hs-layout'>(</span><span class='hs-varid'>a</span> <span class='hs-varop'>`max`</span> <span class='hs-varid'>b</span><span class='hs-layout'>)</span>
}
