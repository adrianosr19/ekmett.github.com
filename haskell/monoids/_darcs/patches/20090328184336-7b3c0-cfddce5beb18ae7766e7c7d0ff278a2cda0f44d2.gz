[tropical semirings
ekmett@gmail.com**20090328184336] {
adddir ./dist/doc
adddir ./dist/doc/html
adddir ./dist/doc/html/monoids
adddir ./dist/doc/html/monoids/src
hunk ./Data/Monoid/Ord.hs 23
+    , minfinity
hunk ./Data/Monoid/Ord.hs 26
+    , infinity
hunk ./Data/Monoid/Ord.hs 31
-
+import Data.Ring.Semi
hunk ./Data/Monoid/Ord.hs 71
+minfinity :: MaxPriority a
+minfinity = MaxPriority Nothing
+
hunk ./Data/Monoid/Ord.hs 90
+infinity :: MinPriority a
+infinity = MinPriority Nothing
+
hunk ./Data/Ring/Boolean.hs 2
-{-# OPTIONS_GHC -fno-warn-orphans #-}
addfile ./dist/doc/html/monoids/Data-Group-Combinators.html
hunk ./dist/doc/html/monoids/Data-Group-Combinators.html 1
+<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd">
+<!--Rendered using the Haskell Html Library v0.2-->
+<HTML
+><HEAD
+><META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=UTF-8"
+><TITLE
+>Data.Group.Combinators</TITLE
+><LINK HREF="haddock.css" REL="stylesheet" TYPE="text/css"
+><SCRIPT SRC="haddock-util.js" TYPE="text/javascript"
+></SCRIPT
+></HEAD
+><BODY
+><TABLE CLASS="vanilla" CELLSPACING="0" CELLPADDING="0"
+><TR
+><TD CLASS="topbar"
+><TABLE CLASS="vanilla" CELLSPACING="0" CELLPADDING="0"
+><TR
+><TD
+><IMG SRC="haskell_icon.gif" WIDTH="16" HEIGHT="16" ALT=" "
+></TD
+><TD CLASS="title"
+>monoids-0.1.6: Lots of Monoids</TD
+><TD CLASS="topbut"
+><A HREF="src/Data-Group-Combinators.html"
+>Source code</A
+></TD
+><TD CLASS="topbut"
+><A HREF="index.html"
+>Contents</A
+></TD
+><TD CLASS="topbut"
+><A HREF="doc-index.html"
+>Index</A
+></TD
+></TR
+></TABLE
+></TD
+></TR
+><TR
+><TD CLASS="modulebar"
+><TABLE CLASS="vanilla" CELLSPACING="0" CELLPADDING="0"
+><TR
+><TD
+><FONT SIZE="6"
+>Data.Group.Combinators</FONT
+></TD
+><TD ALIGN="right"
+><TABLE CLASS="narrow" CELLSPACING="0" CELLPADDING="0"
+><TR
+><TD CLASS="infohead"
+>Portability</TD
+><TD CLASS="infoval"
+>portable</TD
+></TR
+><TR
+><TD CLASS="infohead"
+>Stability</TD
+><TD CLASS="infoval"
+>experimental</TD
+></TR
+><TR
+><TD CLASS="infohead"
+>Maintainer</TD
+><TD CLASS="infoval"
+>libraries@haskell.org</TD
+></TR
+></TABLE
+></TD
+></TR
+></TABLE
+></TD
+></TR
+><TR
+><TD CLASS="s15"
+></TD
+></TR
+><TR
+><TD CLASS="section1"
+>Description</TD
+></TR
+><TR
+><TD CLASS="doc"
+><P
+>Utilities for working with Groups that conflict with names from the <A HREF="Prelude.html"
+>Prelude</A
+>.
+</P
+><P
+>Intended to be imported qualified.
+</P
+><PRE
+> import Data.Group.Combinators as Group (replicate)
+</PRE
+></TD
+></TR
+><TR
+><TD CLASS="s15"
+></TD
+></TR
+><TR
+><TD CLASS="s15"
+></TD
+></TR
+><TR
+><TD CLASS="section1"
+>Documentation</TD
+></TR
+><TR
+><TD CLASS="s15"
+></TD
+></TR
+><TR
+><TD CLASS="decl"
+>module <A HREF="Data-Group.html"
+>Data.Group</A
+></TD
+></TR
+><TR
+><TD CLASS="s15"
+></TD
+></TR
+><TR
+><TD CLASS="topdecl"
+><TABLE CLASS="declbar"
+><TR
+><TD CLASS="declname"
+><A NAME="v%3Areplicate"
+></A
+><B
+>replicate</B
+> :: (<A HREF="Data-Group.html#t%3AGroup"
+>Group</A
+> m, <A HREF="/usr/local/share/doc/ghc/libraries/base/Prelude.html#t%3AIntegral"
+>Integral</A
+> n) =&gt; m -&gt; n -&gt; m</TD
+><TD CLASS="declbut"
+><A HREF="src/Data-Group-Combinators.html#replicate"
+>Source</A
+></TD
+></TR
+></TABLE
+></TD
+></TR
+><TR
+><TD CLASS="s15"
+></TD
+></TR
+><TR
+><TD CLASS="botbar"
+>Produced by <A HREF="http://www.haskell.org/haddock/"
+>Haddock</A
+> version 2.3.0</TD
+></TR
+></TABLE
+></BODY
+></HTML
+>
addfile ./dist/doc/html/monoids/Data-Group-Sugar.html
hunk ./dist/doc/html/monoids/Data-Group-Sugar.html 1
+<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd">
+<!--Rendered using the Haskell Html Library v0.2-->
+<HTML
+><HEAD
+><META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=UTF-8"
+><TITLE
+>Data.Group.Sugar</TITLE
+><LINK HREF="haddock.css" REL="stylesheet" TYPE="text/css"
+><SCRIPT SRC="haddock-util.js" TYPE="text/javascript"
+></SCRIPT
+></HEAD
+><BODY
+><TABLE CLASS="vanilla" CELLSPACING="0" CELLPADDING="0"
+><TR
+><TD CLASS="topbar"
+><TABLE CLASS="vanilla" CELLSPACING="0" CELLPADDING="0"
+><TR
+><TD
+><IMG SRC="haskell_icon.gif" WIDTH="16" HEIGHT="16" ALT=" "
+></TD
+><TD CLASS="title"
+>monoids-0.1.6: Lots of Monoids</TD
+><TD CLASS="topbut"
+><A HREF="src/Data-Group-Sugar.html"
+>Source code</A
+></TD
+><TD CLASS="topbut"
+><A HREF="index.html"
+>Contents</A
+></TD
+><TD CLASS="topbut"
+><A HREF="doc-index.html"
+>Index</A
+></TD
+></TR
+></TABLE
+></TD
+></TR
+><TR
+><TD CLASS="modulebar"
+><TABLE CLASS="vanilla" CELLSPACING="0" CELLPADDING="0"
+><TR
+><TD
+><FONT SIZE="6"
+>Data.Group.Sugar</FONT
+></TD
+><TD ALIGN="right"
+><TABLE CLASS="narrow" CELLSPACING="0" CELLPADDING="0"
+><TR
+><TD CLASS="infohead"
+>Portability</TD
+><TD CLASS="infoval"
+>portable</TD
+></TR
+><TR
+><TD CLASS="infohead"
+>Stability</TD
+><TD CLASS="infoval"
+>experimental</TD
+></TR
+><TR
+><TD CLASS="infohead"
+>Maintainer</TD
+><TD CLASS="infoval"
+>libraries@haskell.org</TD
+></TR
+></TABLE
+></TD
+></TR
+></TABLE
+></TD
+></TR
+><TR
+><TD CLASS="s15"
+></TD
+></TR
+><TR
+><TD CLASS="section1"
+>Description</TD
+></TR
+><TR
+><TD CLASS="doc"
+><P
+>Syntactic sugar for working with groups that conflicts with names from the <A HREF="Prelude.html"
+>Prelude</A
+>.
+</P
+><PRE
+> import Prelude hiding ((-), (+), negate, subtract)
+ import Data.Group.Sugar
+</PRE
+></TD
+></TR
+><TR
+><TD CLASS="s15"
+></TD
+></TR
+><TR
+><TD CLASS="s15"
+></TD
+></TR
+><TR
+><TD CLASS="section1"
+>Documentation</TD
+></TR
+><TR
+><TD CLASS="s15"
+></TD
+></TR
+><TR
+><TD CLASS="decl"
+>module <A HREF="Data-Monoid-Additive-Sugar.html"
+>Data.Monoid.Additive.Sugar</A
+></TD
+></TR
+><TR
+><TD CLASS="s15"
+></TD
+></TR
+><TR
+><TD CLASS="decl"
+>module <A HREF="Data-Group.html"
+>Data.Group</A
+></TD
+></TR
+><TR
+><TD CLASS="s15"
+></TD
+></TR
+><TR
+><TD CLASS="topdecl"
+><TABLE CLASS="declbar"
+><TR
+><TD CLASS="declname"
+><A NAME="v%3A-"
+></A
+><B
+>(-)</B
+> :: <A HREF="Data-Group.html#t%3AGroup"
+>Group</A
+> g =&gt; g -&gt; g -&gt; g</TD
+><TD CLASS="declbut"
+><A HREF="src/Data-Group-Sugar.html#-"
+>Source</A
+></TD
+></TR
+></TABLE
+></TD
+></TR
+><TR
+><TD CLASS="s15"
+></TD
+></TR
+><TR
+><TD CLASS="topdecl"
+><TABLE CLASS="declbar"
+><TR
+><TD CLASS="declname"
+><A NAME="v%3Anegate"
+></A
+><B
+>negate</B
+> :: <A HREF="Data-Group.html#t%3AGroup"
+>Group</A
+> g =&gt; g -&gt; g</TD
+><TD CLASS="declbut"
+><A HREF="src/Data-Group-Sugar.html#negate"
+>Source</A
+></TD
+></TR
+></TABLE
+></TD
+></TR
+><TR
+><TD CLASS="s15"
+></TD
+></TR
+><TR
+><TD CLASS="topdecl"
+><TABLE CLASS="declbar"
+><TR
+><TD CLASS="declname"
+><A NAME="v%3Asubtract"
+></A
+><B
+>subtract</B
+> :: <A HREF="Data-Group.html#t%3AGroup"
+>Group</A
+> g =&gt; g -&gt; g -&gt; g</TD
+><TD CLASS="declbut"
+><A HREF="src/Data-Group-Sugar.html#subtract"
+>Source</A
+></TD
+></TR
+></TABLE
+></TD
+></TR
+><TR
+><TD CLASS="s15"
+></TD
+></TR
+><TR
+><TD CLASS="botbar"
+>Produced by <A HREF="http://www.haskell.org/haddock/"
+>Haddock</A
+> version 2.3.0</TD
+></TR
+></TABLE
+></BODY
+></HTML
+>
addfile ./dist/doc/html/monoids/Data-Group.html
hunk ./dist/doc/html/monoids/Data-Group.html 1
+<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd">
+<!--Rendered using the Haskell Html Library v0.2-->
+<HTML
+><HEAD
+><META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=UTF-8"
+><TITLE
+>Data.Group</TITLE
+><LINK HREF="haddock.css" REL="stylesheet" TYPE="text/css"
+><SCRIPT SRC="haddock-util.js" TYPE="text/javascript"
+></SCRIPT
+></HEAD
+><BODY
+><TABLE CLASS="vanilla" CELLSPACING="0" CELLPADDING="0"
+><TR
+><TD CLASS="topbar"
+><TABLE CLASS="vanilla" CELLSPACING="0" CELLPADDING="0"
+><TR
+><TD
+><IMG SRC="haskell_icon.gif" WIDTH="16" HEIGHT="16" ALT=" "
+></TD
+><TD CLASS="title"
+>monoids-0.1.6: Lots of Monoids</TD
+><TD CLASS="topbut"
+><A HREF="src/Data-Group.html"
+>Source code</A
+></TD
+><TD CLASS="topbut"
+><A HREF="index.html"
+>Contents</A
+></TD
+><TD CLASS="topbut"
+><A HREF="doc-index.html"
+>Index</A
+></TD
+></TR
+></TABLE
+></TD
+></TR
+><TR
+><TD CLASS="modulebar"
+><TABLE CLASS="vanilla" CELLSPACING="0" CELLPADDING="0"
+><TR
+><TD
+><FONT SIZE="6"
+>Data.Group</FONT
+></TD
+><TD ALIGN="right"
+><TABLE CLASS="narrow" CELLSPACING="0" CELLPADDING="0"
+><TR
+><TD CLASS="infohead"
+>Portability</TD
+><TD CLASS="infoval"
+>portable</TD
+></TR
+><TR
+><TD CLASS="infohead"
+>Stability</TD
+><TD CLASS="infoval"
+>experimental</TD
+></TR
+><TR
+><TD CLASS="infohead"
+>Maintainer</TD
+><TD CLASS="infoval"
+>Edward Kmett &lt;ekmett@gmail.com&gt;</TD
+></TR
+></TABLE
+></TD
+></TR
+></TABLE
+></TD
+></TR
+><TR
+><TD CLASS="s15"
+></TD
+></TR
+><TR
+><TD CLASS="section1"
+>Description</TD
+></TR
+><TR
+><TD CLASS="doc"
+>Extends <TT
+><A HREF="/usr/local/share/doc/ghc/libraries/base/Data-Monoid.html#t%3AMonoid"
+>Monoid</A
+></TT
+> to support <TT
+><A HREF="Data-Group.html#t%3AGroup"
+>Group</A
+></TT
+> operations
+</TD
+></TR
+><TR
+><TD CLASS="s15"
+></TD
+></TR
+><TR
+><TD CLASS="section1"
+>Synopsis</TD
+></TR
+><TR
+><TD CLASS="s15"
+></TD
+></TR
+><TR
+><TD CLASS="body"
+><TABLE CLASS="vanilla" CELLSPACING="0" CELLPADDING="0"
+><TR
+><TD CLASS="decl"
+>module <A HREF="Data-Monoid-Additive.html"
+>Data.Monoid.Additive</A
+></TD
+></TR
+><TR
+><TD CLASS="s8"
+></TD
+></TR
+><TR
+><TD CLASS="decl"
+><SPAN CLASS="keyword"
+>class</SPAN
+> <A HREF="/usr/local/share/doc/ghc/libraries/base/Data-Monoid.html#t%3AMonoid"
+>Monoid</A
+> a =&gt; <A HREF="#t%3AGroup"
+>Group</A
+> a  <SPAN CLASS="keyword"
+>where</SPAN
+></TD
+></TR
+><TR
+><TD CLASS="body"
+><TABLE CLASS="vanilla" CELLSPACING="0" CELLPADDING="0"
+><TR
+><TD CLASS="decl"
+><A HREF="#v%3Agnegate"
+>gnegate</A
+> :: a -&gt; a</TD
+></TR
+><TR
+><TD CLASS="decl"
+><A HREF="#v%3Aminus"
+>minus</A
+> :: a -&gt; a -&gt; a</TD
+></TR
+><TR
+><TD CLASS="decl"
+><A HREF="#v%3Agsubtract"
+>gsubtract</A
+> :: a -&gt; a -&gt; a</TD
+></TR
+></TABLE
+></TD
+></TR
+><TR
+><TD CLASS="s8"
+></TD
+></TR
+><TR
+><TD CLASS="decl"
+><A HREF="#v%3Agnegate"
+>gnegate</A
+> :: <A HREF="Data-Group.html#t%3AGroup"
+>Group</A
+> a =&gt; a -&gt; a</TD
+></TR
+><TR
+><TD CLASS="s8"
+></TD
+></TR
+><TR
+><TD CLASS="decl"
+><A HREF="#v%3Agsubtract"
+>gsubtract</A
+> :: <A HREF="Data-Group.html#t%3AGroup"
+>Group</A
+> a =&gt; a -&gt; a -&gt; a</TD
+></TR
+><TR
+><TD CLASS="s8"
+></TD
+></TR
+><TR
+><TD CLASS="decl"
+><A HREF="#v%3Aminus"
+>minus</A
+> :: <A HREF="Data-Group.html#t%3AGroup"
+>Group</A
+> a =&gt; a -&gt; a -&gt; a</TD
+></TR
+></TABLE
+></TD
+></TR
+><TR
+><TD CLASS="s15"
+></TD
+></TR
+><TR
+><TD CLASS="section1"
+>Documentation</TD
+></TR
+><TR
+><TD CLASS="s15"
+></TD
+></TR
+><TR
+><TD CLASS="decl"
+>module <A HREF="Data-Monoid-Additive.html"
+>Data.Monoid.Additive</A
+></TD
+></TR
+><TR
+><TD CLASS="s15"
+></TD
+></TR
+><TR
+><TD CLASS="topdecl"
+><TABLE CLASS="declbar"
+><TR
+><TD CLASS="declname"
+><SPAN CLASS="keyword"
+>class</SPAN
+> <A HREF="/usr/local/share/doc/ghc/libraries/base/Data-Monoid.html#t%3AMonoid"
+>Monoid</A
+> a =&gt; <A NAME="t%3AGroup"
+></A
+><B
+>Group</B
+> a  <SPAN CLASS="keyword"
+>where</SPAN
+></TD
+><TD CLASS="declbut"
+><A HREF="src/Data-Group.html#Group"
+>Source</A
+></TD
+></TR
+></TABLE
+></TD
+></TR
+><TR
+><TD CLASS="body"
+><TABLE CLASS="vanilla" CELLSPACING="0" CELLPADDING="0"
+><TR
+><TD CLASS="ndoc"
+>Minimal complete definition: <TT
+><A HREF="Data-Group.html#v%3Agnegate"
+>gnegate</A
+></TT
+> or <TT
+><A HREF="Data-Group.html#v%3Aminus"
+>minus</A
+></TT
+>
+</TD
+></TR
+><TR
+><TD CLASS="s8"
+></TD
+></TR
+><TR
+><TD CLASS="section4"
+>Methods</TD
+></TR
+><TR
+><TD CLASS="body"
+><TABLE CLASS="vanilla" CELLSPACING="0" CELLPADDING="0"
+><TR
+><TD CLASS="topdecl"
+><TABLE CLASS="declbar"
+><TR
+><TD CLASS="declname"
+><A NAME="v%3Agnegate"
+></A
+><B
+>gnegate</B
+> :: a -&gt; a</TD
+><TD CLASS="declbut"
+><A HREF="src/Data-Group.html#gnegate"
+>Source</A
+></TD
+></TR
+></TABLE
+></TD
+></TR
+><TR
+><TD CLASS="s8"
+></TD
+></TR
+><TR
+><TD CLASS="topdecl"
+><TABLE CLASS="declbar"
+><TR
+><TD CLASS="declname"
+><A NAME="v%3Aminus"
+></A
+><B
+>minus</B
+> :: a -&gt; a -&gt; a</TD
+><TD CLASS="declbut"
+><A HREF="src/Data-Group.html#minus"
+>Source</A
+></TD
+></TR
+></TABLE
+></TD
+></TR
+><TR
+><TD CLASS="s8"
+></TD
+></TR
+><TR
+><TD CLASS="topdecl"
+><TABLE CLASS="declbar"
+><TR
+><TD CLASS="declname"
+><A NAME="v%3Agsubtract"
+></A
+><B
+>gsubtract</B
+> :: a -&gt; a -&gt; a</TD
+><TD CLASS="declbut"
+><A HREF="src/Data-Group.html#gsubtract"
+>Source</A
+></TD
+></TR
+></TABLE
+></TD
+></TR
+></TABLE
+></TD
+></TR
+><TR
+><TD CLASS="s8"
+></TD
+></TR
+><TR
+><TD CLASS="section4"
+><IMG SRC="minus.gif" CLASS="coll" ONCLICK="toggle(this,'i:Group')" ALT="show/hide"
+> Instances</TD
+></TR
+><TR
+><TD CLASS="body"
+><DIV ID="i:Group" STYLE="display:block;"
+><TABLE CLASS="vanilla" CELLSPACING="1" CELLPADDING="0"
+><TR
+><TD CLASS="decl"
+><A HREF="Data-Group.html#t%3AGroup"
+>Group</A
+> <A HREF="Data-Ring-Boolean.html#t%3ABoolRing"
+>BoolRing</A
+></TD
+></TR
+><TR
+><TD CLASS="decl"
+><A HREF="Data-Group.html#t%3AGroup"
+>Group</A
+> a =&gt; <A HREF="Data-Group.html#t%3AGroup"
+>Group</A
+> (<A HREF="/usr/local/share/doc/ghc/libraries/base/Data-Monoid.html#t%3ADual"
+>Dual</A
+> a)</TD
+></TR
+><TR
+><TD CLASS="decl"
+><A HREF="/usr/local/share/doc/ghc/libraries/base/Prelude.html#t%3ANum"
+>Num</A
+> a =&gt; <A HREF="Data-Group.html#t%3AGroup"
+>Group</A
+> (<A HREF="/usr/local/share/doc/ghc/libraries/base/Data-Monoid.html#t%3ASum"
+>Sum</A
+> a)</TD
+></TR
+><TR
+><TD CLASS="decl"
+><A HREF="/usr/local/share/doc/ghc/libraries/base/Prelude.html#t%3AFractional"
+>Fractional</A
+> a =&gt; <A HREF="Data-Group.html#t%3AGroup"
+>Group</A
+> (<A HREF="/usr/local/share/doc/ghc/libraries/base/Data-Monoid.html#t%3AProduct"
+>Product</A
+> a)</TD
+></TR
+><TR
+><TD CLASS="decl"
+><A HREF="Data-Group.html#t%3AGroup"
+>Group</A
+> a =&gt; <A HREF="Data-Group.html#t%3AGroup"
+>Group</A
+> (<A HREF="Data-Monoid-Self.html#t%3ASelf"
+>Self</A
+> a)</TD
+></TR
+><TR
+><TD CLASS="decl"
+><A HREF="Data-Group.html#t%3AGroup"
+>Group</A
+> a =&gt; <A HREF="Data-Group.html#t%3AGroup"
+>Group</A
+> (<A HREF="Data-Monoid-FromString.html#t%3AFromString"
+>FromString</A
+> a)</TD
+></TR
+><TR
+><TD CLASS="decl"
+><A HREF="/usr/local/share/doc/ghc/libraries/base/Prelude.html#t%3ANum"
+>Num</A
+> a =&gt; <A HREF="Data-Group.html#t%3AGroup"
+>Group</A
+> (<A HREF="Data-Ring-FromNum.html#t%3AFromNum"
+>FromNum</A
+> a)</TD
+></TR
+></TABLE
+></DIV
+></TD
+></TR
+></TABLE
+></TD
+></TR
+><TR
+><TD CLASS="s15"
+></TD
+></TR
+><TR
+><TD CLASS="topdecl"
+><TABLE CLASS="declbar"
+><TR
+><TD CLASS="declname"
+><A NAME="v%3Agnegate"
+></A
+><B
+>gnegate</B
+> :: <A HREF="Data-Group.html#t%3AGroup"
+>Group</A
+> a =&gt; a -&gt; a</TD
+><TD CLASS="declbut"
+><A HREF="src/Data-Group.html#gnegate"
+>Source</A
+></TD
+></TR
+></TABLE
+></TD
+></TR
+><TR
+><TD CLASS="s15"
+></TD
+></TR
+><TR
+><TD CLASS="topdecl"
+><TABLE CLASS="declbar"
+><TR
+><TD CLASS="declname"
+><A NAME="v%3Agsubtract"
+></A
+><B
+>gsubtract</B
+> :: <A HREF="Data-Group.html#t%3AGroup"
+>Group</A
+> a =&gt; a -&gt; a -&gt; a</TD
+><TD CLASS="declbut"
+><A HREF="src/Data-Group.html#gsubtract"
+>Source</A
+></TD
+></TR
+></TABLE
+></TD
+></TR
+><TR
+><TD CLASS="s15"
+></TD
+></TR
+><TR
+><TD CLASS="topdecl"
+><TABLE CLASS="declbar"
+><TR
+><TD CLASS="declname"
+><A NAME="v%3Aminus"
+></A
+><B
+>minus</B
+> :: <A HREF="Data-Group.html#t%3AGroup"
+>Group</A
+> a =&gt; a -&gt; a -&gt; a</TD
+><TD CLASS="declbut"
+><A HREF="src/Data-Group.html#minus"
+>Source</A
+></TD
+></TR
+></TABLE
+></TD
+></TR
+><TR
+><TD CLASS="s15"
+></TD
+></TR
+><TR
+><TD CLASS="botbar"
+>Produced by <A HREF="http://www.haskell.org/haddock/"
+>Haddock</A
+> version 2.3.0</TD
+></TR
+></TABLE
+></BODY
+></HTML
+>
addfile ./dist/doc/html/monoids/Data-Monoid-Additive-Sugar.html
hunk ./dist/doc/html/monoids/Data-Monoid-Additive-Sugar.html 1
+<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd">
+<!--Rendered using the Haskell Html Library v0.2-->
+<HTML
+><HEAD
+><META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=UTF-8"
+><TITLE
+>Data.Monoid.Additive.Sugar</TITLE
+><LINK HREF="haddock.css" REL="stylesheet" TYPE="text/css"
+><SCRIPT SRC="haddock-util.js" TYPE="text/javascript"
+></SCRIPT
+></HEAD
+><BODY
+><TABLE CLASS="vanilla" CELLSPACING="0" CELLPADDING="0"
+><TR
+><TD CLASS="topbar"
+><TABLE CLASS="vanilla" CELLSPACING="0" CELLPADDING="0"
+><TR
+><TD
+><IMG SRC="haskell_icon.gif" WIDTH="16" HEIGHT="16" ALT=" "
+></TD
+><TD CLASS="title"
+>monoids-0.1.6: Lots of Monoids</TD
+><TD CLASS="topbut"
+><A HREF="src/Data-Monoid-Additive-Sugar.html"
+>Source code</A
+></TD
+><TD CLASS="topbut"
+><A HREF="index.html"
+>Contents</A
+></TD
+><TD CLASS="topbut"
+><A HREF="doc-index.html"
+>Index</A
+></TD
+></TR
+></TABLE
+></TD
+></TR
+><TR
+><TD CLASS="modulebar"
+><TABLE CLASS="vanilla" CELLSPACING="0" CELLPADDING="0"
+><TR
+><TD
+><FONT SIZE="6"
+>Data.Monoid.Additive.Sugar</FONT
+></TD
+><TD ALIGN="right"
+><TABLE CLASS="narrow" CELLSPACING="0" CELLPADDING="0"
+><TR
+><TD CLASS="infohead"
+>Portability</TD
+><TD CLASS="infoval"
+>portable</TD
+></TR
+><TR
+><TD CLASS="infohead"
+>Stability</TD
+><TD CLASS="infoval"
+>experimental</TD
+></TR
+><TR
+><TD CLASS="infohead"
+>Maintainer</TD
+><TD CLASS="infoval"
+>libraries@haskell.org</TD
+></TR
+></TABLE
+></TD
+></TR
+></TABLE
+></TD
+></TR
+><TR
+><TD CLASS="s15"
+></TD
+></TR
+><TR
+><TD CLASS="section1"
+>Description</TD
+></TR
+><TR
+><TD CLASS="doc"
+><P
+>Syntactic sugar for working with a <TT
+><A HREF="/usr/local/share/doc/ghc/libraries/base/Data-Monoid.html#t%3AMonoid"
+>Monoid</A
+></TT
+> that conflicts with names from the <A HREF="Prelude.html"
+>Prelude</A
+>.
+</P
+><PRE
+> import Prelude hiding ((+))
+ import Data.Monoid.Additive.Sugar
+</PRE
+></TD
+></TR
+><TR
+><TD CLASS="s15"
+></TD
+></TR
+><TR
+><TD CLASS="s15"
+></TD
+></TR
+><TR
+><TD CLASS="section1"
+>Documentation</TD
+></TR
+><TR
+><TD CLASS="s15"
+></TD
+></TR
+><TR
+><TD CLASS="decl"
+>module <A HREF="Data-Monoid-Additive.html"
+>Data.Monoid.Additive</A
+></TD
+></TR
+><TR
+><TD CLASS="s15"
+></TD
+></TR
+><TR
+><TD CLASS="topdecl"
+><TABLE CLASS="declbar"
+><TR
+><TD CLASS="declname"
+><A NAME="v%3A%2B"
+></A
+><B
+>(+)</B
+> :: <A HREF="/usr/local/share/doc/ghc/libraries/base/Data-Monoid.html#t%3AMonoid"
+>Monoid</A
+> m =&gt; m -&gt; m -&gt; m</TD
+><TD CLASS="declbut"
+><A HREF="src/Data-Monoid-Additive-Sugar.html#%2B"
+>Source</A
+></TD
+></TR
+></TABLE
+></TD
+></TR
+><TR
+><TD CLASS="s15"
+></TD
+></TR
+><TR
+><TD CLASS="botbar"
+>Produced by <A HREF="http://www.haskell.org/haddock/"
+>Haddock</A
+> version 2.3.0</TD
+></TR
+></TABLE
+></BODY
+></HTML
+>
addfile ./dist/doc/html/monoids/Data-Monoid-Additive.html
hunk ./dist/doc/html/monoids/Data-Monoid-Additive.html 1
+<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd">
+<!--Rendered using the Haskell Html Library v0.2-->
+<HTML
+><HEAD
+><META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=UTF-8"
+><TITLE
+>Data.Monoid.Additive</TITLE
+><LINK HREF="haddock.css" REL="stylesheet" TYPE="text/css"
+><SCRIPT SRC="haddock-util.js" TYPE="text/javascript"
+></SCRIPT
+></HEAD
+><BODY
+><TABLE CLASS="vanilla" CELLSPACING="0" CELLPADDING="0"
+><TR
+><TD CLASS="topbar"
+><TABLE CLASS="vanilla" CELLSPACING="0" CELLPADDING="0"
+><TR
+><TD
+><IMG SRC="haskell_icon.gif" WIDTH="16" HEIGHT="16" ALT=" "
+></TD
+><TD CLASS="title"
+>monoids-0.1.6: Lots of Monoids</TD
+><TD CLASS="topbut"
+><A HREF="src/Data-Monoid-Additive.html"
+>Source code</A
+></TD
+><TD CLASS="topbut"
+><A HREF="index.html"
+>Contents</A
+></TD
+><TD CLASS="topbut"
+><A HREF="doc-index.html"
+>Index</A
+></TD
+></TR
+></TABLE
+></TD
+></TR
+><TR
+><TD CLASS="modulebar"
+><TABLE CLASS="vanilla" CELLSPACING="0" CELLPADDING="0"
+><TR
+><TD
+><FONT SIZE="6"
+>Data.Monoid.Additive</FONT
+></TD
+><TD ALIGN="right"
+><TABLE CLASS="narrow" CELLSPACING="0" CELLPADDING="0"
+><TR
+><TD CLASS="infohead"
+>Portability</TD
+><TD CLASS="infoval"
+>portable</TD
+></TR
+><TR
+><TD CLASS="infohead"
+>Stability</TD
+><TD CLASS="infoval"
+>experimental</TD
+></TR
+><TR
+><TD CLASS="infohead"
+>Maintainer</TD
+><TD CLASS="infoval"
+>libraries@haskell.org</TD
+></TR
+></TABLE
+></TD
+></TR
+></TABLE
+></TD
+></TR
+><TR
+><TD CLASS="s15"
+></TD
+></TR
+><TR
+><TD CLASS="section1"
+>Description</TD
+></TR
+><TR
+><TD CLASS="doc"
+><P
+>More easily understood aliases for <A HREF="mappend.html"
+>mappend</A
+> and <A HREF="mempty.html"
+>mempty</A
+> 
+</P
+><PRE
+> import Data.Monoid.Additive
+</PRE
+></TD
+></TR
+><TR
+><TD CLASS="s15"
+></TD
+></TR
+><TR
+><TD CLASS="s15"
+></TD
+></TR
+><TR
+><TD CLASS="section1"
+>Documentation</TD
+></TR
+><TR
+><TD CLASS="s15"
+></TD
+></TR
+><TR
+><TD CLASS="topdecl"
+><TABLE CLASS="declbar"
+><TR
+><TD CLASS="declname"
+><A NAME="v%3Aplus"
+></A
+><B
+>plus</B
+> :: <A HREF="/usr/local/share/doc/ghc/libraries/base/Data-Monoid.html#t%3AMonoid"
+>Monoid</A
+> m =&gt; m -&gt; m -&gt; m</TD
+><TD CLASS="declbut"
+><A HREF="src/Data-Monoid-Additive.html#plus"
+>Source</A
+></TD
+></TR
+></TABLE
+></TD
+></TR
+><TR
+><TD CLASS="s15"
+></TD
+></TR
+><TR
+><TD CLASS="topdecl"
+><TABLE CLASS="declbar"
+><TR
+><TD CLASS="declname"
+><A NAME="v%3Azero"
+></A
+><B
+>zero</B
+> :: <A HREF="/usr/local/share/doc/ghc/libraries/base/Data-Monoid.html#t%3AMonoid"
+>Monoid</A
+> m =&gt; m</TD
+><TD CLASS="declbut"
+><A HREF="src/Data-Monoid-Additive.html#zero"
+>Source</A
+></TD
+></TR
+></TABLE
+></TD
+></TR
+><TR
+><TD CLASS="s15"
+></TD
+></TR
+><TR
+><TD CLASS="botbar"
+>Produced by <A HREF="http://www.haskell.org/haddock/"
+>Haddock</A
+> version 2.3.0</TD
+></TR
+></TABLE
+></BODY
+></HTML
+>
addfile ./dist/doc/html/monoids/Data-Monoid-Applicative.html
hunk ./dist/doc/html/monoids/Data-Monoid-Applicative.html 1
+<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd">
+<!--Rendered using the Haskell Html Library v0.2-->
+<HTML
+><HEAD
+><META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=UTF-8"
+><TITLE
+>Data.Monoid.Applicative</TITLE
+><LINK HREF="haddock.css" REL="stylesheet" TYPE="text/css"
+><SCRIPT SRC="haddock-util.js" TYPE="text/javascript"
+></SCRIPT
+></HEAD
+><BODY
+><TABLE CLASS="vanilla" CELLSPACING="0" CELLPADDING="0"
+><TR
+><TD CLASS="topbar"
+><TABLE CLASS="vanilla" CELLSPACING="0" CELLPADDING="0"
+><TR
+><TD
+><IMG SRC="haskell_icon.gif" WIDTH="16" HEIGHT="16" ALT=" "
+></TD
+><TD CLASS="title"
+>monoids-0.1.6: Lots of Monoids</TD
+><TD CLASS="topbut"
+><A HREF="src/Data-Monoid-Applicative.html"
+>Source code</A
+></TD
+><TD CLASS="topbut"
+><A HREF="index.html"
+>Contents</A
+></TD
+><TD CLASS="topbut"
+><A HREF="doc-index.html"
+>Index</A
+></TD
+></TR
+></TABLE
+></TD
+></TR
+><TR
+><TD CLASS="modulebar"
+><TABLE CLASS="vanilla" CELLSPACING="0" CELLPADDING="0"
+><TR
+><TD
+><FONT SIZE="6"
+>Data.Monoid.Applicative</FONT
+></TD
+><TD ALIGN="right"
+><TABLE CLASS="narrow" CELLSPACING="0" CELLPADDING="0"
+><TR
+><TD CLASS="infohead"
+>Portability</TD
+><TD CLASS="infoval"
+>non-portable (MPTCs)</TD
+></TR
+><TR
+><TD CLASS="infohead"
+>Stability</TD
+><TD CLASS="infoval"
+>experimental</TD
+></TR
+><TR
+><TD CLASS="infohead"
+>Maintainer</TD
+><TD CLASS="infoval"
+>libraries@haskell.org</TD
+></TR
+></TABLE
+></TD
+></TR
+></TABLE
+></TD
+></TR
+><TR
+><TD CLASS="s15"
+></TD
+></TR
+><TR
+><TD CLASS="section1"
+>Description</TD
+></TR
+><TR
+><TD CLASS="doc"
+>Monoids for working with an <TT
+><A HREF="/usr/local/share/doc/ghc/libraries/base/Control-Applicative.html#t%3AApplicative"
+>Applicative</A
+></TT
+> <TT
+><A HREF="/usr/local/share/doc/ghc/libraries/base/Control-Monad.html#t%3AFunctor"
+>Functor</A
+></TT
+>.
+</TD
+></TR
+><TR
+><TD CLASS="s15"
+></TD
+></TR
+><TR
+><TD CLASS="section1"
+>Synopsis</TD
+></TR
+><TR
+><TD CLASS="s15"
+></TD
+></TR
+><TR
+><TD CLASS="body"
+><TABLE CLASS="vanilla" CELLSPACING="0" CELLPADDING="0"
+><TR
+><TD CLASS="decl"
+>module <A HREF="Data-Monoid-Reducer.html"
+>Data.Monoid.Reducer</A
+></TD
+></TR
+><TR
+><TD CLASS="s8"
+></TD
+></TR
+><TR
+><TD CLASS="decl"
+>module <A HREF="Data-Ring-Semi-Near.html"
+>Data.Ring.Semi.Near</A
+></TD
+></TR
+><TR
+><TD CLASS="s8"
+></TD
+></TR
+><TR
+><TD CLASS="decl"
+><SPAN CLASS="keyword"
+>newtype</SPAN
+>  <A HREF="#t%3ATraversal"
+>Traversal</A
+> f = <A HREF="#v%3ATraversal"
+>Traversal</A
+> {<TABLE CLASS="vanilla" CELLSPACING="0" CELLPADDING="0"
+><TR
+><TD CLASS="recfield"
+><A HREF="#v%3AgetTraversal"
+>getTraversal</A
+> :: f ()</TD
+></TR
+></TABLE
+>}</TD
+></TR
+><TR
+><TD CLASS="s8"
+></TD
+></TR
+><TR
+><TD CLASS="decl"
+><SPAN CLASS="keyword"
+>newtype</SPAN
+>  <A HREF="#t%3AWrappedApplicative"
+>WrappedApplicative</A
+> f a = <A HREF="#v%3AWrappedApplicative"
+>WrappedApplicative</A
+> {<TABLE CLASS="vanilla" CELLSPACING="0" CELLPADDING="0"
+><TR
+><TD CLASS="recfield"
+><A HREF="#v%3AgetWrappedApplicative"
+>getWrappedApplicative</A
+> :: f a</TD
+></TR
+></TABLE
+>}</TD
+></TR
+><TR
+><TD CLASS="s8"
+></TD
+></TR
+><TR
+><TD CLASS="decl"
+><A HREF="#v%3AsnocTraversal"
+>snocTraversal</A
+> :: <A HREF="Data-Monoid-Reducer.html#t%3AReducer"
+>Reducer</A
+> (f ()) (<A HREF="Data-Monoid-Applicative.html#t%3ATraversal"
+>Traversal</A
+> f) =&gt; <A HREF="Data-Monoid-Applicative.html#t%3ATraversal"
+>Traversal</A
+> f -&gt; f () -&gt; <A HREF="Data-Monoid-Applicative.html#t%3ATraversal"
+>Traversal</A
+> f</TD
+></TR
+></TABLE
+></TD
+></TR
+><TR
+><TD CLASS="s15"
+></TD
+></TR
+><TR
+><TD CLASS="section1"
+>Documentation</TD
+></TR
+><TR
+><TD CLASS="s15"
+></TD
+></TR
+><TR
+><TD CLASS="decl"
+>module <A HREF="Data-Monoid-Reducer.html"
+>Data.Monoid.Reducer</A
+></TD
+></TR
+><TR
+><TD CLASS="s15"
+></TD
+></TR
+><TR
+><TD CLASS="decl"
+>module <A HREF="Data-Ring-Semi-Near.html"
+>Data.Ring.Semi.Near</A
+></TD
+></TR
+><TR
+><TD CLASS="s15"
+></TD
+></TR
+><TR
+><TD CLASS="topdecl"
+><TABLE CLASS="declbar"
+><TR
+><TD CLASS="declname"
+><SPAN CLASS="keyword"
+>newtype</SPAN
+>  <A NAME="t%3ATraversal"
+></A
+><B
+>Traversal</B
+> f </TD
+><TD CLASS="declbut"
+><A HREF="src/Data-Monoid-Applicative.html#Traversal"
+>Source</A
+></TD
+></TR
+></TABLE
+></TD
+></TR
+><TR
+><TD CLASS="body"
+><TABLE CLASS="vanilla" CELLSPACING="0" CELLPADDING="0"
+><TR
+><TD CLASS="ndoc"
+>A <TT
+><A HREF="Data-Monoid-Applicative.html#v%3ATraversal"
+>Traversal</A
+></TT
+> uses an glues together <TT
+><A HREF="/usr/local/share/doc/ghc/libraries/base/Control-Applicative.html#t%3AApplicative"
+>Applicative</A
+></TT
+> actions with (*&gt;)
+   in the manner of traverse_ from <A HREF="Data-Foldable.html"
+>Data.Foldable</A
+>. Any values returned by 
+   reduced actions are discarded.
+</TD
+></TR
+><TR
+><TD CLASS="section4"
+>Constructors</TD
+></TR
+><TR
+><TD CLASS="body"
+><TABLE CLASS="vanilla" CELLSPACING="5" CELLPADDING="0"
+><TR
+><TD CLASS="arg"
+><A NAME="v%3ATraversal"
+></A
+><B
+>Traversal</B
+></TD
+><TD CLASS="rdoc"
+></TD
+></TR
+><TR
+><TD CLASS="body" COLSPAN="2"
+><TABLE CLASS="vanilla" CELLSPACING="1" CELLPADDING="0"
+><TR
+><TD CLASS="arg"
+><A NAME="v%3AgetTraversal"
+></A
+><B
+>getTraversal</B
+> :: f ()</TD
+><TD CLASS="rdoc"
+></TD
+></TR
+></TABLE
+></TD
+></TR
+></TABLE
+></TD
+></TR
+><TR
+><TD CLASS="section4"
+><IMG SRC="minus.gif" CLASS="coll" ONCLICK="toggle(this,'i:Traversal')" ALT="show/hide"
+> Instances</TD
+></TR
+><TR
+><TD CLASS="body"
+><DIV ID="i:Traversal" STYLE="display:block;"
+><TABLE CLASS="vanilla" CELLSPACING="1" CELLPADDING="0"
+><TR
+><TD CLASS="decl"
+><A HREF="/usr/local/share/doc/ghc/libraries/base/Control-Applicative.html#t%3AApplicative"
+>Applicative</A
+> f =&gt; <A HREF="/usr/local/share/doc/ghc/libraries/base/Data-Monoid.html#t%3AMonoid"
+>Monoid</A
+> (<A HREF="Data-Monoid-Applicative.html#t%3ATraversal"
+>Traversal</A
+> f)</TD
+></TR
+><TR
+><TD CLASS="decl"
+><A HREF="/usr/local/share/doc/ghc/libraries/base/Control-Applicative.html#t%3AApplicative"
+>Applicative</A
+> f =&gt; <A HREF="Data-Monoid-Reducer.html#t%3AReducer"
+>Reducer</A
+> (f a) (<A HREF="Data-Monoid-Applicative.html#t%3ATraversal"
+>Traversal</A
+> f)</TD
+></TR
+></TABLE
+></DIV
+></TD
+></TR
+></TABLE
+></TD
+></TR
+><TR
+><TD CLASS="s15"
+></TD
+></TR
+><TR
+><TD CLASS="topdecl"
+><TABLE CLASS="declbar"
+><TR
+><TD CLASS="declname"
+><SPAN CLASS="keyword"
+>newtype</SPAN
+>  <A NAME="t%3AWrappedApplicative"
+></A
+><B
+>WrappedApplicative</B
+> f a </TD
+><TD CLASS="declbut"
+><A HREF="src/Data-Monoid-Applicative.html#WrappedApplicative"
+>Source</A
+></TD
+></TR
+></TABLE
+></TD
+></TR
+><TR
+><TD CLASS="body"
+><TABLE CLASS="vanilla" CELLSPACING="0" CELLPADDING="0"
+><TR
+><TD CLASS="ndoc"
+>A <TT
+><A HREF="Data-Monoid-Applicative.html#v%3AWrappedApplicative"
+>WrappedApplicative</A
+></TT
+> turns any <TT
+><A HREF="/usr/local/share/doc/ghc/libraries/base/Control-Applicative.html#t%3AAlternative"
+>Alternative</A
+></TT
+> instance into a <TT
+><A HREF="/usr/local/share/doc/ghc/libraries/base/Data-Monoid.html#t%3AMonoid"
+>Monoid</A
+></TT
+>.
+   It also provides a <TT
+><A HREF="Data-Monoid-Multiplicative.html#t%3AMultiplicative"
+>Multiplicative</A
+></TT
+> instance for an <TT
+><A HREF="/usr/local/share/doc/ghc/libraries/base/Control-Applicative.html#t%3AApplicative"
+>Applicative</A
+></TT
+> functor wrapped around a <TT
+><A HREF="/usr/local/share/doc/ghc/libraries/base/Data-Monoid.html#t%3AMonoid"
+>Monoid</A
+></TT
+>
+   and asserts that any <TT
+><A HREF="/usr/local/share/doc/ghc/libraries/base/Control-Applicative.html#t%3AAlternative"
+>Alternative</A
+></TT
+> applied to a <TT
+><A HREF="/usr/local/share/doc/ghc/libraries/base/Data-Monoid.html#t%3AMonoid"
+>Monoid</A
+></TT
+> forms a <TT
+><A HREF="Data-Ring-Semi-Near.html#t%3ALeftSemiNearRing"
+>LeftSemiNearRing</A
+></TT
+> 
+   under these operations.
+</TD
+></TR
+><TR
+><TD CLASS="section4"
+>Constructors</TD
+></TR
+><TR
+><TD CLASS="body"
+><TABLE CLASS="vanilla" CELLSPACING="5" CELLPADDING="0"
+><TR
+><TD CLASS="arg"
+><A NAME="v%3AWrappedApplicative"
+></A
+><B
+>WrappedApplicative</B
+></TD
+><TD CLASS="rdoc"
+></TD
+></TR
+><TR
+><TD CLASS="body" COLSPAN="2"
+><TABLE CLASS="vanilla" CELLSPACING="1" CELLPADDING="0"
+><TR
+><TD CLASS="arg"
+><A NAME="v%3AgetWrappedApplicative"
+></A
+><B
+>getWrappedApplicative</B
+> :: f a</TD
+><TD CLASS="rdoc"
+></TD
+></TR
+></TABLE
+></TD
+></TR
+></TABLE
+></TD
+></TR
+><TR
+><TD CLASS="section4"
+><IMG SRC="minus.gif" CLASS="coll" ONCLICK="toggle(this,'i:WrappedApplicative')" ALT="show/hide"
+> Instances</TD
+></TR
+><TR
+><TD CLASS="body"
+><DIV ID="i:WrappedApplicative" STYLE="display:block;"
+><TABLE CLASS="vanilla" CELLSPACING="1" CELLPADDING="0"
+><TR
+><TD CLASS="decl"
+>(<A HREF="/usr/local/share/doc/ghc/libraries/base/Control-Applicative.html#t%3AAlternative"
+>Alternative</A
+> f, <A HREF="Data-Monoid-Reducer.html#t%3AReducer"
+>Reducer</A
+> c a) =&gt; <A HREF="Data-Monoid-Reducer.html#t%3AReducer"
+>Reducer</A
+> c (<A HREF="Data-Monoid-Applicative.html#t%3AWrappedApplicative"
+>WrappedApplicative</A
+> f a)</TD
+></TR
+><TR
+><TD CLASS="decl"
+><A HREF="/usr/local/share/doc/ghc/libraries/base/Control-Monad.html#t%3AFunctor"
+>Functor</A
+> f =&gt; <A HREF="/usr/local/share/doc/ghc/libraries/base/Control-Monad.html#t%3AFunctor"
+>Functor</A
+> (<A HREF="Data-Monoid-Applicative.html#t%3AWrappedApplicative"
+>WrappedApplicative</A
+> f)</TD
+></TR
+><TR
+><TD CLASS="decl"
+><A HREF="/usr/local/share/doc/ghc/libraries/base/Control-Applicative.html#t%3AApplicative"
+>Applicative</A
+> f =&gt; <A HREF="/usr/local/share/doc/ghc/libraries/base/Control-Applicative.html#t%3AApplicative"
+>Applicative</A
+> (<A HREF="Data-Monoid-Applicative.html#t%3AWrappedApplicative"
+>WrappedApplicative</A
+> f)</TD
+></TR
+><TR
+><TD CLASS="decl"
+><A HREF="/usr/local/share/doc/ghc/libraries/base/Control-Applicative.html#t%3AAlternative"
+>Alternative</A
+> f =&gt; <A HREF="/usr/local/share/doc/ghc/libraries/base/Control-Applicative.html#t%3AAlternative"
+>Alternative</A
+> (<A HREF="Data-Monoid-Applicative.html#t%3AWrappedApplicative"
+>WrappedApplicative</A
+> f)</TD
+></TR
+><TR
+><TD CLASS="decl"
+>Pointed f =&gt; Pointed (<A HREF="Data-Monoid-Applicative.html#t%3AWrappedApplicative"
+>WrappedApplicative</A
+> f)</TD
+></TR
+><TR
+><TD CLASS="decl"
+>Copointed f =&gt; Copointed (<A HREF="Data-Monoid-Applicative.html#t%3AWrappedApplicative"
+>WrappedApplicative</A
+> f)</TD
+></TR
+><TR
+><TD CLASS="decl"
+><A HREF="/usr/local/share/doc/ghc/libraries/base/Data-Eq.html#t%3AEq"
+>Eq</A
+> (f a) =&gt; <A HREF="/usr/local/share/doc/ghc/libraries/base/Data-Eq.html#t%3AEq"
+>Eq</A
+> (<A HREF="Data-Monoid-Applicative.html#t%3AWrappedApplicative"
+>WrappedApplicative</A
+> f a)</TD
+></TR
+><TR
+><TD CLASS="decl"
+><A HREF="/usr/local/share/doc/ghc/libraries/base/Data-Ord.html#t%3AOrd"
+>Ord</A
+> (f a) =&gt; <A HREF="/usr/local/share/doc/ghc/libraries/base/Data-Ord.html#t%3AOrd"
+>Ord</A
+> (<A HREF="Data-Monoid-Applicative.html#t%3AWrappedApplicative"
+>WrappedApplicative</A
+> f a)</TD
+></TR
+><TR
+><TD CLASS="decl"
+><A HREF="/usr/local/share/doc/ghc/libraries/base/Text-Read.html#t%3ARead"
+>Read</A
+> (f a) =&gt; <A HREF="/usr/local/share/doc/ghc/libraries/base/Text-Read.html#t%3ARead"
+>Read</A
+> (<A HREF="Data-Monoid-Applicative.html#t%3AWrappedApplicative"
+>WrappedApplicative</A
+> f a)</TD
+></TR
+><TR
+><TD CLASS="decl"
+><A HREF="/usr/local/share/doc/ghc/libraries/base/Text-Show.html#t%3AShow"
+>Show</A
+> (f a) =&gt; <A HREF="/usr/local/share/doc/ghc/libraries/base/Text-Show.html#t%3AShow"
+>Show</A
+> (<A HREF="Data-Monoid-Applicative.html#t%3AWrappedApplicative"
+>WrappedApplicative</A
+> f a)</TD
+></TR
+><TR
+><TD CLASS="decl"
+><A HREF="/usr/local/share/doc/ghc/libraries/base/Control-Applicative.html#t%3AAlternative"
+>Alternative</A
+> f =&gt; <A HREF="/usr/local/share/doc/ghc/libraries/base/Data-Monoid.html#t%3AMonoid"
+>Monoid</A
+> (<A HREF="Data-Monoid-Applicative.html#t%3AWrappedApplicative"
+>WrappedApplicative</A
+> f a)</TD
+></TR
+><TR
+><TD CLASS="decl"
+>(<A HREF="/usr/local/share/doc/ghc/libraries/base/Control-Applicative.html#t%3AAlternative"
+>Alternative</A
+> f, <A HREF="/usr/local/share/doc/ghc/libraries/base/Data-Monoid.html#t%3AMonoid"
+>Monoid</A
+> a) =&gt; <A HREF="Data-Monoid-Multiplicative.html#t%3AMultiplicative"
+>Multiplicative</A
+> (<A HREF="Data-Monoid-Applicative.html#t%3AWrappedApplicative"
+>WrappedApplicative</A
+> f a)</TD
+></TR
+><TR
+><TD CLASS="decl"
+>(<A HREF="/usr/local/share/doc/ghc/libraries/base/Control-Applicative.html#t%3AAlternative"
+>Alternative</A
+> f, <A HREF="/usr/local/share/doc/ghc/libraries/base/Data-Monoid.html#t%3AMonoid"
+>Monoid</A
+> a) =&gt; <A HREF="Data-Ring-Semi-Near.html#t%3ALeftSemiNearRing"
+>LeftSemiNearRing</A
+> (<A HREF="Data-Monoid-Applicative.html#t%3AWrappedApplicative"
+>WrappedApplicative</A
+> f a)</TD
+></TR
+></TABLE
+></DIV
+></TD
+></TR
+></TABLE
+></TD
+></TR
+><TR
+><TD CLASS="s15"
+></TD
+></TR
+><TR
+><TD CLASS="topdecl"
+><TABLE CLASS="declbar"
+><TR
+><TD CLASS="declname"
+><A NAME="v%3AsnocTraversal"
+></A
+><B
+>snocTraversal</B
+> :: <A HREF="Data-Monoid-Reducer.html#t%3AReducer"
+>Reducer</A
+> (f ()) (<A HREF="Data-Monoid-Applicative.html#t%3ATraversal"
+>Traversal</A
+> f) =&gt; <A HREF="Data-Monoid-Applicative.html#t%3ATraversal"
+>Traversal</A
+> f -&gt; f () -&gt; <A HREF="Data-Monoid-Applicative.html#t%3ATraversal"
+>Traversal</A
+> f</TD
+><TD CLASS="declbut"
+><A HREF="src/Data-Monoid-Applicative.html#snocTraversal"
+>Source</A
+></TD
+></TR
+></TABLE
+></TD
+></TR
+><TR
+><TD CLASS="doc"
+>Efficiently avoid needlessly rebinding when using <TT
+><A HREF="Data-Monoid-Reducer.html#v%3Asnoc"
+>snoc</A
+></TT
+> on an action that already returns ()
+   A rewrite rule automatically applies this when possible
+</TD
+></TR
+><TR
+><TD CLASS="s15"
+></TD
+></TR
+><TR
+><TD CLASS="botbar"
+>Produced by <A HREF="http://www.haskell.org/haddock/"
+>Haddock</A
+> version 2.3.0</TD
+></TR
+></TABLE
+></BODY
+></HTML
+>
addfile ./dist/doc/html/monoids/Data-Monoid-Categorical.html
hunk ./dist/doc/html/monoids/Data-Monoid-Categorical.html 1
+<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd">
+<!--Rendered using the Haskell Html Library v0.2-->
+<HTML
+><HEAD
+><META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=UTF-8"
+><TITLE
+>Data.Monoid.Categorical</TITLE
+><LINK HREF="haddock.css" REL="stylesheet" TYPE="text/css"
+><SCRIPT SRC="haddock-util.js" TYPE="text/javascript"
+></SCRIPT
+></HEAD
+><BODY
+><TABLE CLASS="vanilla" CELLSPACING="0" CELLPADDING="0"
+><TR
+><TD CLASS="topbar"
+><TABLE CLASS="vanilla" CELLSPACING="0" CELLPADDING="0"
+><TR
+><TD
+><IMG SRC="haskell_icon.gif" WIDTH="16" HEIGHT="16" ALT=" "
+></TD
+><TD CLASS="title"
+>monoids-0.1.6: Lots of Monoids</TD
+><TD CLASS="topbut"
+><A HREF="src/Data-Monoid-Categorical.html"
+>Source code</A
+></TD
+><TD CLASS="topbut"
+><A HREF="index.html"
+>Contents</A
+></TD
+><TD CLASS="topbut"
+><A HREF="doc-index.html"
+>Index</A
+></TD
+></TR
+></TABLE
+></TD
+></TR
+><TR
+><TD CLASS="modulebar"
+><TABLE CLASS="vanilla" CELLSPACING="0" CELLPADDING="0"
+><TR
+><TD
+><FONT SIZE="6"
+>Data.Monoid.Categorical</FONT
+></TD
+><TD ALIGN="right"
+><TABLE CLASS="narrow" CELLSPACING="0" CELLPADDING="0"
+><TR
+><TD CLASS="infohead"
+>Portability</TD
+><TD CLASS="infoval"
+>portable</TD
+></TR
+><TR
+><TD CLASS="infohead"
+>Stability</TD
+><TD CLASS="infoval"
+>experimental</TD
+></TR
+><TR
+><TD CLASS="infohead"
+>Maintainer</TD
+><TD CLASS="infoval"
+>libraries@haskell.org</TD
+></TR
+></TABLE
+></TD
+></TR
+></TABLE
+></TD
+></TR
+><TR
+><TD CLASS="s15"
+></TD
+></TR
+><TR
+><TD
+><TABLE CLASS="vanilla" CELLSPACING="0" CELLPADDING="0"
+><TR
+><TD CLASS="section4"
+><B
+>Contents</B
+></TD
+></TR
+><TR
+><TD
+><DL
+><DT
+><A HREF="#1"
+>Generalized Endo
+</A
+></DT
+><DT
+><A HREF="#2"
+>Monoids as Categories
+</A
+></DT
+></DL
+></TD
+></TR
+></TABLE
+></TD
+></TR
+><TR
+><TD CLASS="s15"
+></TD
+></TR
+><TR
+><TD CLASS="section1"
+>Description</TD
+></TR
+><TR
+><TD CLASS="doc"
+></TD
+></TR
+><TR
+><TD CLASS="s15"
+></TD
+></TR
+><TR
+><TD CLASS="section1"
+>Synopsis</TD
+></TR
+><TR
+><TD CLASS="s15"
+></TD
+></TR
+><TR
+><TD CLASS="body"
+><TABLE CLASS="vanilla" CELLSPACING="0" CELLPADDING="0"
+><TR
+><TD CLASS="decl"
+>module <A HREF="Data-Monoid-Reducer.html"
+>Data.Monoid.Reducer</A
+></TD
+></TR
+><TR
+><TD CLASS="s8"
+></TD
+></TR
+><TR
+><TD CLASS="decl"
+><SPAN CLASS="keyword"
+>data</SPAN
+>  <A HREF="#t%3AGEndo"
+>GEndo</A
+> k a = <A HREF="#v%3AGEndo"
+>GEndo</A
+> {<TABLE CLASS="vanilla" CELLSPACING="0" CELLPADDING="0"
+><TR
+><TD CLASS="recfield"
+><A HREF="#v%3AgetGEndo"
+>getGEndo</A
+> :: k a a</TD
+></TR
+></TABLE
+>}</TD
+></TR
+><TR
+><TD CLASS="s8"
+></TD
+></TR
+><TR
+><TD CLASS="decl"
+><TABLE CLASS="vanilla" CELLSPACING="0" CELLPADDING="0"
+><TR
+><TD CLASS="decl"
+><SPAN CLASS="keyword"
+>data</SPAN
+>  <A HREF="#t%3AMon"
+>Mon</A
+> m n o <SPAN CLASS="keyword"
+>where</SPAN
+></TD
+></TR
+><TR
+><TD CLASS="body"
+><TABLE CLASS="vanilla" CELLSPACING="0" CELLPADDING="0"
+><TR
+><TD CLASS="decl"
+><A HREF="#v%3AMon"
+>Mon</A
+> :: <A HREF="/usr/local/share/doc/ghc/libraries/base/Data-Monoid.html#t%3AMonoid"
+>Monoid</A
+> m =&gt; m -&gt; <A HREF="Data-Monoid-Categorical.html#t%3AMon"
+>Mon</A
+> m a a</TD
+></TR
+></TABLE
+></TD
+></TR
+></TABLE
+></TD
+></TR
+><TR
+><TD CLASS="s8"
+></TD
+></TR
+><TR
+><TD CLASS="decl"
+><A HREF="#v%3AgetMon"
+>getMon</A
+> ::  <A HREF="Data-Monoid-Categorical.html#t%3AMon"
+>Mon</A
+> m m m -&gt; m</TD
+></TR
+></TABLE
+></TD
+></TR
+><TR
+><TD CLASS="s15"
+></TD
+></TR
+><TR
+><TD CLASS="section1"
+>Documentation</TD
+></TR
+><TR
+><TD CLASS="s15"
+></TD
+></TR
+><TR
+><TD CLASS="decl"
+>module <A HREF="Data-Monoid-Reducer.html"
+>Data.Monoid.Reducer</A
+></TD
+></TR
+><TR
+><TD CLASS="s15"
+></TD
+></TR
+><TR
+><TD CLASS="section1"
+><A NAME="1"
+>Generalized Endo
+</A
+></TD
+></TR
+><TR
+><TD CLASS="s15"
+></TD
+></TR
+><TR
+><TD CLASS="topdecl"
+><TABLE CLASS="declbar"
+><TR
+><TD CLASS="declname"
+><SPAN CLASS="keyword"
+>data</SPAN
+>  <A NAME="t%3AGEndo"
+></A
+><B
+>GEndo</B
+> k a </TD
+><TD CLASS="declbut"
+><A HREF="src/Data-Monoid-Categorical.html#GEndo"
+>Source</A
+></TD
+></TR
+></TABLE
+></TD
+></TR
+><TR
+><TD CLASS="body"
+><TABLE CLASS="vanilla" CELLSPACING="0" CELLPADDING="0"
+><TR
+><TD CLASS="ndoc"
+>The <TT
+><A HREF="/usr/local/share/doc/ghc/libraries/base/Data-Monoid.html#t%3AMonoid"
+>Monoid</A
+></TT
+> of the endomorphisms over some object in an arbitrary <TT
+><A HREF="/usr/local/share/doc/ghc/libraries/base/Control-Category.html#t%3ACategory"
+>Category</A
+></TT
+>.
+</TD
+></TR
+><TR
+><TD CLASS="section4"
+>Constructors</TD
+></TR
+><TR
+><TD CLASS="body"
+><TABLE CLASS="vanilla" CELLSPACING="5" CELLPADDING="0"
+><TR
+><TD CLASS="arg"
+><A NAME="v%3AGEndo"
+></A
+><B
+>GEndo</B
+></TD
+><TD CLASS="rdoc"
+></TD
+></TR
+><TR
+><TD CLASS="body" COLSPAN="2"
+><TABLE CLASS="vanilla" CELLSPACING="1" CELLPADDING="0"
+><TR
+><TD CLASS="arg"
+><A NAME="v%3AgetGEndo"
+></A
+><B
+>getGEndo</B
+> :: k a a</TD
+><TD CLASS="rdoc"
+></TD
+></TR
+></TABLE
+></TD
+></TR
+></TABLE
+></TD
+></TR
+><TR
+><TD CLASS="section4"
+><IMG SRC="minus.gif" CLASS="coll" ONCLICK="toggle(this,'i:GEndo')" ALT="show/hide"
+> Instances</TD
+></TR
+><TR
+><TD CLASS="body"
+><DIV ID="i:GEndo" STYLE="display:block;"
+><TABLE CLASS="vanilla" CELLSPACING="1" CELLPADDING="0"
+><TR
+><TD CLASS="decl"
+><A HREF="/usr/local/share/doc/ghc/libraries/base/Control-Category.html#t%3ACategory"
+>Category</A
+> k =&gt; <A HREF="/usr/local/share/doc/ghc/libraries/base/Data-Monoid.html#t%3AMonoid"
+>Monoid</A
+> (<A HREF="Data-Monoid-Categorical.html#t%3AGEndo"
+>GEndo</A
+> k a)</TD
+></TR
+></TABLE
+></DIV
+></TD
+></TR
+></TABLE
+></TD
+></TR
+><TR
+><TD CLASS="s15"
+></TD
+></TR
+><TR
+><TD CLASS="section1"
+><A NAME="2"
+>Monoids as Categories
+</A
+></TD
+></TR
+><TR
+><TD CLASS="s15"
+></TD
+></TR
+><TR
+><TD CLASS="topdecl"
+><TABLE CLASS="declbar"
+><TR
+><TD CLASS="declname"
+><SPAN CLASS="keyword"
+>data</SPAN
+>  <A NAME="t%3AMon"
+></A
+><B
+>Mon</B
+> m n o <SPAN CLASS="keyword"
+>where</SPAN
+></TD
+><TD CLASS="declbut"
+><A HREF="src/Data-Monoid-Categorical.html#Mon"
+>Source</A
+></TD
+></TR
+></TABLE
+></TD
+></TR
+><TR
+><TD CLASS="body"
+><TABLE CLASS="vanilla" CELLSPACING="0" CELLPADDING="0"
+><TR
+><TD CLASS="ndoc"
+>A <TT
+><A HREF="/usr/local/share/doc/ghc/libraries/base/Data-Monoid.html#t%3AMonoid"
+>Monoid</A
+></TT
+> is just a <TT
+><A HREF="/usr/local/share/doc/ghc/libraries/base/Control-Category.html#t%3ACategory"
+>Category</A
+></TT
+> with one object. 
+</TD
+></TR
+><TR
+><TD CLASS="section4"
+>Constructors</TD
+></TR
+><TR
+><TD CLASS="body"
+><TABLE CLASS="vanilla" CELLSPACING="1" CELLPADDING="0"
+><TR
+><TD CLASS="arg"
+><A NAME="v%3AMon"
+></A
+><B
+>Mon</B
+> :: <A HREF="/usr/local/share/doc/ghc/libraries/base/Data-Monoid.html#t%3AMonoid"
+>Monoid</A
+> m =&gt; m -&gt; <A HREF="Data-Monoid-Categorical.html#t%3AMon"
+>Mon</A
+> m a a</TD
+><TD CLASS="rdoc"
+></TD
+></TR
+></TABLE
+></TD
+></TR
+><TR
+><TD CLASS="section4"
+><IMG SRC="minus.gif" CLASS="coll" ONCLICK="toggle(this,'i:Mon')" ALT="show/hide"
+> Instances</TD
+></TR
+><TR
+><TD CLASS="body"
+><DIV ID="i:Mon" STYLE="display:block;"
+><TABLE CLASS="vanilla" CELLSPACING="1" CELLPADDING="0"
+><TR
+><TD CLASS="decl"
+><A HREF="Data-Monoid-Reducer.html#t%3AReducer"
+>Reducer</A
+> c m =&gt; <A HREF="Data-Monoid-Reducer.html#t%3AReducer"
+>Reducer</A
+> c (<A HREF="Data-Monoid-Categorical.html#t%3AMon"
+>Mon</A
+> m m m)</TD
+></TR
+><TR
+><TD CLASS="decl"
+><A HREF="/usr/local/share/doc/ghc/libraries/base/Data-Monoid.html#t%3AMonoid"
+>Monoid</A
+> m =&gt; <A HREF="/usr/local/share/doc/ghc/libraries/base/Control-Category.html#t%3ACategory"
+>Category</A
+> (<A HREF="Data-Monoid-Categorical.html#t%3AMon"
+>Mon</A
+> m)</TD
+></TR
+><TR
+><TD CLASS="decl"
+><A HREF="/usr/local/share/doc/ghc/libraries/base/Data-Monoid.html#t%3AMonoid"
+>Monoid</A
+> m =&gt; <A HREF="/usr/local/share/doc/ghc/libraries/base/Data-Monoid.html#t%3AMonoid"
+>Monoid</A
+> (<A HREF="Data-Monoid-Categorical.html#t%3AMon"
+>Mon</A
+> m m m)</TD
+></TR
+></TABLE
+></DIV
+></TD
+></TR
+></TABLE
+></TD
+></TR
+><TR
+><TD CLASS="s15"
+></TD
+></TR
+><TR
+><TD CLASS="topdecl"
+><TABLE CLASS="declbar"
+><TR
+><TD CLASS="declname"
+><A NAME="v%3AgetMon"
+></A
+><B
+>getMon</B
+> ::  <A HREF="Data-Monoid-Categorical.html#t%3AMon"
+>Mon</A
+> m m m -&gt; m</TD
+><TD CLASS="declbut"
+><A HREF="src/Data-Monoid-Categorical.html#getMon"
+>Source</A
+></TD
+></TR
+></TABLE
+></TD
+></TR
+><TR
+><TD CLASS="doc"
+>Extract the <TT
+><A HREF="/usr/local/share/doc/ghc/libraries/base/Data-Monoid.html#t%3AMonoid"
+>Monoid</A
+></TT
+> from its representation as a <TT
+><A HREF="/usr/local/share/doc/ghc/libraries/base/Control-Category.html#t%3ACategory"
+>Category</A
+></TT
+>
+</TD
+></TR
+><TR
+><TD CLASS="s15"
+></TD
+></TR
+><TR
+><TD CLASS="botbar"
+>Produced by <A HREF="http://www.haskell.org/haddock/"
+>Haddock</A
+> version 2.3.0</TD
+></TR
+></TABLE
+></BODY
+></HTML
+>
addfile ./dist/doc/html/monoids/Data-Monoid-Combinators.html
hunk ./dist/doc/html/monoids/Data-Monoid-Combinators.html 1
+<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd">
+<!--Rendered using the Haskell Html Library v0.2-->
+<HTML
+><HEAD
+><META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=UTF-8"
+><TITLE
+>Data.Monoid.Combinators</TITLE
+><LINK HREF="haddock.css" REL="stylesheet" TYPE="text/css"
+><SCRIPT SRC="haddock-util.js" TYPE="text/javascript"
+></SCRIPT
+></HEAD
+><BODY
+><TABLE CLASS="vanilla" CELLSPACING="0" CELLPADDING="0"
+><TR
+><TD CLASS="topbar"
+><TABLE CLASS="vanilla" CELLSPACING="0" CELLPADDING="0"
+><TR
+><TD
+><IMG SRC="haskell_icon.gif" WIDTH="16" HEIGHT="16" ALT=" "
+></TD
+><TD CLASS="title"
+>monoids-0.1.6: Lots of Monoids</TD
+><TD CLASS="topbut"
+><A HREF="src/Data-Monoid-Combinators.html"
+>Source code</A
+></TD
+><TD CLASS="topbut"
+><A HREF="index.html"
+>Contents</A
+></TD
+><TD CLASS="topbut"
+><A HREF="doc-index.html"
+>Index</A
+></TD
+></TR
+></TABLE
+></TD
+></TR
+><TR
+><TD CLASS="modulebar"
+><TABLE CLASS="vanilla" CELLSPACING="0" CELLPADDING="0"
+><TR
+><TD
+><FONT SIZE="6"
+>Data.Monoid.Combinators</FONT
+></TD
+><TD ALIGN="right"
+><TABLE CLASS="narrow" CELLSPACING="0" CELLPADDING="0"
+><TR
+><TD CLASS="infohead"
+>Portability</TD
+><TD CLASS="infoval"
+>non-portable (type families, MPTCs)</TD
+></TR
+><TR
+><TD CLASS="infohead"
+>Stability</TD
+><TD CLASS="infoval"
+>experimental</TD
+></TR
+><TR
+><TD CLASS="infohead"
+>Maintainer</TD
+><TD CLASS="infoval"
+>libraries@haskell.org</TD
+></TR
+></TABLE
+></TD
+></TR
+></TABLE
+></TD
+></TR
+><TR
+><TD CLASS="s15"
+></TD
+></TR
+><TR
+><TD
+><TABLE CLASS="vanilla" CELLSPACING="0" CELLPADDING="0"
+><TR
+><TD CLASS="section4"
+><B
+>Contents</B
+></TD
+></TR
+><TR
+><TD
+><DL
+><DT
+><A HREF="#1"
+>Monadic Reduction
+</A
+></DT
+><DT
+><A HREF="#2"
+>Applicative Reduction
+</A
+></DT
+><DT
+><A HREF="#3"
+>Logical Reduction
+</A
+></DT
+><DT
+><A HREF="#4"
+>Monoidal Reduction
+</A
+></DT
+><DT
+><A HREF="#5"
+>List-Like Reduction
+</A
+></DT
+><DT
+><A HREF="#6"
+>List-Like Monoid Generation
+</A
+></DT
+></DL
+></TD
+></TR
+></TABLE
+></TD
+></TR
+><TR
+><TD CLASS="s15"
+></TD
+></TR
+><TR
+><TD CLASS="section1"
+>Description</TD
+></TR
+><TR
+><TD CLASS="doc"
+><P
+>Utilities for working with Monoids that conflict with names from the <A HREF="Prelude.html"
+>Prelude</A
+>,
+ <A HREF="Data-Foldable.html"
+>Data.Foldable</A
+>, <A HREF="Control-Monad.html"
+>Control.Monad</A
+> or elsewhere. Intended to be imported qualified.
+</P
+><PRE
+> import Data.Group.Combinators as Monoid 
+</PRE
+></TD
+></TR
+><TR
+><TD CLASS="s15"
+></TD
+></TR
+><TR
+><TD CLASS="section1"
+>Synopsis</TD
+></TR
+><TR
+><TD CLASS="s15"
+></TD
+></TR
+><TR
+><TD CLASS="body"
+><TABLE CLASS="vanilla" CELLSPACING="0" CELLPADDING="0"
+><TR
+><TD CLASS="decl"
+>module <A HREF="Data-Monoid-Generator.html"
+>Data.Monoid.Generator</A
+></TD
+></TR
+><TR
+><TD CLASS="s8"
+></TD
+></TR
+><TR
+><TD CLASS="decl"
+><A HREF="#v%3AmapM_"
+>mapM_</A
+> :: (<A HREF="Data-Monoid-Generator.html#t%3AGenerator"
+>Generator</A
+> c, <A HREF="/usr/local/share/doc/ghc/libraries/base/Control-Monad.html#t%3AMonad"
+>Monad</A
+> m) =&gt; (<A HREF="Data-Monoid-Generator.html#t%3AElem"
+>Elem</A
+> c -&gt; m b) -&gt; c -&gt; m ()</TD
+></TR
+><TR
+><TD CLASS="s8"
+></TD
+></TR
+><TR
+><TD CLASS="decl"
+><A HREF="#v%3AforM_"
+>forM_</A
+> :: (<A HREF="Data-Monoid-Generator.html#t%3AGenerator"
+>Generator</A
+> c, <A HREF="/usr/local/share/doc/ghc/libraries/base/Control-Monad.html#t%3AMonad"
+>Monad</A
+> m) =&gt; c -&gt; (<A HREF="Data-Monoid-Generator.html#t%3AElem"
+>Elem</A
+> c -&gt; m b) -&gt; m ()</TD
+></TR
+><TR
+><TD CLASS="s8"
+></TD
+></TR
+><TR
+><TD CLASS="decl"
+><A HREF="#v%3Atraverse_"
+>traverse_</A
+> :: (<A HREF="Data-Monoid-Generator.html#t%3AGenerator"
+>Generator</A
+> c, <A HREF="/usr/local/share/doc/ghc/libraries/base/Control-Applicative.html#t%3AApplicative"
+>Applicative</A
+> f) =&gt; (<A HREF="Data-Monoid-Generator.html#t%3AElem"
+>Elem</A
+> c -&gt; f b) -&gt; c -&gt; f ()</TD
+></TR
+><TR
+><TD CLASS="s8"
+></TD
+></TR
+><TR
+><TD CLASS="decl"
+><A HREF="#v%3Afor_"
+>for_</A
+> :: (<A HREF="Data-Monoid-Generator.html#t%3AGenerator"
+>Generator</A
+> c, <A HREF="/usr/local/share/doc/ghc/libraries/base/Control-Applicative.html#t%3AApplicative"
+>Applicative</A
+> f) =&gt; c -&gt; (<A HREF="Data-Monoid-Generator.html#t%3AElem"
+>Elem</A
+> c -&gt; f b) -&gt; f ()</TD
+></TR
+><TR
+><TD CLASS="s8"
+></TD
+></TR
+><TR
+><TD CLASS="decl"
+><A HREF="#v%3Aand"
+>and</A
+> :: (<A HREF="Data-Monoid-Generator.html#t%3AGenerator"
+>Generator</A
+> c, <A HREF="Data-Monoid-Generator.html#t%3AElem"
+>Elem</A
+> c ~ <A HREF="/usr/local/share/doc/ghc/libraries/ghc-prim/GHC-Bool.html#t%3ABool"
+>Bool</A
+>) =&gt; c -&gt; <A HREF="/usr/local/share/doc/ghc/libraries/ghc-prim/GHC-Bool.html#t%3ABool"
+>Bool</A
+></TD
+></TR
+><TR
+><TD CLASS="s8"
+></TD
+></TR
+><TR
+><TD CLASS="decl"
+><A HREF="#v%3Aor"
+>or</A
+> :: (<A HREF="Data-Monoid-Generator.html#t%3AGenerator"
+>Generator</A
+> c, <A HREF="Data-Monoid-Generator.html#t%3AElem"
+>Elem</A
+> c ~ <A HREF="/usr/local/share/doc/ghc/libraries/ghc-prim/GHC-Bool.html#t%3ABool"
+>Bool</A
+>) =&gt; c -&gt; <A HREF="/usr/local/share/doc/ghc/libraries/ghc-prim/GHC-Bool.html#t%3ABool"
+>Bool</A
+></TD
+></TR
+><TR
+><TD CLASS="s8"
+></TD
+></TR
+><TR
+><TD CLASS="decl"
+><A HREF="#v%3Aany"
+>any</A
+> :: <A HREF="Data-Monoid-Generator.html#t%3AGenerator"
+>Generator</A
+> c =&gt; (<A HREF="Data-Monoid-Generator.html#t%3AElem"
+>Elem</A
+> c -&gt; <A HREF="/usr/local/share/doc/ghc/libraries/ghc-prim/GHC-Bool.html#t%3ABool"
+>Bool</A
+>) -&gt; c -&gt; <A HREF="/usr/local/share/doc/ghc/libraries/ghc-prim/GHC-Bool.html#t%3ABool"
+>Bool</A
+></TD
+></TR
+><TR
+><TD CLASS="s8"
+></TD
+></TR
+><TR
+><TD CLASS="decl"
+><A HREF="#v%3Aall"
+>all</A
+> :: <A HREF="Data-Monoid-Generator.html#t%3AGenerator"
+>Generator</A
+> c =&gt; (<A HREF="Data-Monoid-Generator.html#t%3AElem"
+>Elem</A
+> c -&gt; <A HREF="/usr/local/share/doc/ghc/libraries/ghc-prim/GHC-Bool.html#t%3ABool"
+>Bool</A
+>) -&gt; c -&gt; <A HREF="/usr/local/share/doc/ghc/libraries/ghc-prim/GHC-Bool.html#t%3ABool"
+>Bool</A
+></TD
+></TR
+><TR
+><TD CLASS="s8"
+></TD
+></TR
+><TR
+><TD CLASS="decl"
+><A HREF="#v%3AfoldMap"
+>foldMap</A
+> :: (<A HREF="/usr/local/share/doc/ghc/libraries/base/Data-Monoid.html#t%3AMonoid"
+>Monoid</A
+> m, <A HREF="Data-Monoid-Generator.html#t%3AGenerator"
+>Generator</A
+> c) =&gt; (<A HREF="Data-Monoid-Generator.html#t%3AElem"
+>Elem</A
+> c -&gt; m) -&gt; c -&gt; m</TD
+></TR
+><TR
+><TD CLASS="s8"
+></TD
+></TR
+><TR
+><TD CLASS="decl"
+><A HREF="#v%3Afold"
+>fold</A
+> :: (<A HREF="/usr/local/share/doc/ghc/libraries/base/Data-Monoid.html#t%3AMonoid"
+>Monoid</A
+> m, <A HREF="Data-Monoid-Generator.html#t%3AGenerator"
+>Generator</A
+> c, <A HREF="Data-Monoid-Generator.html#t%3AElem"
+>Elem</A
+> c ~ m) =&gt; c -&gt; m</TD
+></TR
+><TR
+><TD CLASS="s8"
+></TD
+></TR
+><TR
+><TD CLASS="decl"
+><A HREF="#v%3AconcatMap"
+>concatMap</A
+> :: <A HREF="Data-Monoid-Generator.html#t%3AGenerator"
+>Generator</A
+> c =&gt; (<A HREF="Data-Monoid-Generator.html#t%3AElem"
+>Elem</A
+> c -&gt; [b]) -&gt; c -&gt; [b]</TD
+></TR
+><TR
+><TD CLASS="s8"
+></TD
+></TR
+><TR
+><TD CLASS="decl"
+><A HREF="#v%3Aelem"
+>elem</A
+> :: (<A HREF="Data-Monoid-Generator.html#t%3AGenerator"
+>Generator</A
+> c, <A HREF="/usr/local/share/doc/ghc/libraries/base/Data-Eq.html#t%3AEq"
+>Eq</A
+> (<A HREF="Data-Monoid-Generator.html#t%3AElem"
+>Elem</A
+> c)) =&gt; <A HREF="Data-Monoid-Generator.html#t%3AElem"
+>Elem</A
+> c -&gt; c -&gt; <A HREF="/usr/local/share/doc/ghc/libraries/ghc-prim/GHC-Bool.html#t%3ABool"
+>Bool</A
+></TD
+></TR
+><TR
+><TD CLASS="s8"
+></TD
+></TR
+><TR
+><TD CLASS="decl"
+><A HREF="#v%3Afilter"
+>filter</A
+> :: (<A HREF="Data-Monoid-Generator.html#t%3AGenerator"
+>Generator</A
+> c, <A HREF="Data-Monoid-Reducer.html#t%3AReducer"
+>Reducer</A
+> (<A HREF="Data-Monoid-Generator.html#t%3AElem"
+>Elem</A
+> c) m) =&gt; (<A HREF="Data-Monoid-Generator.html#t%3AElem"
+>Elem</A
+> c -&gt; <A HREF="/usr/local/share/doc/ghc/libraries/ghc-prim/GHC-Bool.html#t%3ABool"
+>Bool</A
+>) -&gt; c -&gt; m</TD
+></TR
+><TR
+><TD CLASS="s8"
+></TD
+></TR
+><TR
+><TD CLASS="decl"
+><A HREF="#v%3Afind"
+>find</A
+> :: <A HREF="Data-Monoid-Generator.html#t%3AGenerator"
+>Generator</A
+> c =&gt; (<A HREF="Data-Monoid-Generator.html#t%3AElem"
+>Elem</A
+> c -&gt; <A HREF="/usr/local/share/doc/ghc/libraries/ghc-prim/GHC-Bool.html#t%3ABool"
+>Bool</A
+>) -&gt; c -&gt; <A HREF="/usr/local/share/doc/ghc/libraries/base/Data-Maybe.html#t%3AMaybe"
+>Maybe</A
+> (<A HREF="Data-Monoid-Generator.html#t%3AElem"
+>Elem</A
+> c)</TD
+></TR
+><TR
+><TD CLASS="s8"
+></TD
+></TR
+><TR
+><TD CLASS="decl"
+><A HREF="#v%3Asum"
+>sum</A
+> :: (<A HREF="Data-Monoid-Generator.html#t%3AGenerator"
+>Generator</A
+> c, <A HREF="/usr/local/share/doc/ghc/libraries/base/Prelude.html#t%3ANum"
+>Num</A
+> (<A HREF="Data-Monoid-Generator.html#t%3AElem"
+>Elem</A
+> c)) =&gt; c -&gt; <A HREF="Data-Monoid-Generator.html#t%3AElem"
+>Elem</A
+> c</TD
+></TR
+><TR
+><TD CLASS="s8"
+></TD
+></TR
+><TR
+><TD CLASS="decl"
+><A HREF="#v%3Aproduct"
+>product</A
+> :: (<A HREF="Data-Monoid-Generator.html#t%3AGenerator"
+>Generator</A
+> c, <A HREF="/usr/local/share/doc/ghc/libraries/base/Prelude.html#t%3ANum"
+>Num</A
+> (<A HREF="Data-Monoid-Generator.html#t%3AElem"
+>Elem</A
+> c)) =&gt; c -&gt; <A HREF="Data-Monoid-Generator.html#t%3AElem"
+>Elem</A
+> c</TD
+></TR
+><TR
+><TD CLASS="s8"
+></TD
+></TR
+><TR
+><TD CLASS="decl"
+><A HREF="#v%3AnotElem"
+>notElem</A
+> :: (<A HREF="Data-Monoid-Generator.html#t%3AGenerator"
+>Generator</A
+> c, <A HREF="/usr/local/share/doc/ghc/libraries/base/Data-Eq.html#t%3AEq"
+>Eq</A
+> (<A HREF="Data-Monoid-Generator.html#t%3AElem"
+>Elem</A
+> c)) =&gt; <A HREF="Data-Monoid-Generator.html#t%3AElem"
+>Elem</A
+> c -&gt; c -&gt; <A HREF="/usr/local/share/doc/ghc/libraries/ghc-prim/GHC-Bool.html#t%3ABool"
+>Bool</A
+></TD
+></TR
+><TR
+><TD CLASS="s8"
+></TD
+></TR
+><TR
+><TD CLASS="decl"
+><A HREF="#v%3Arepeat"
+>repeat</A
+> :: <A HREF="Data-Monoid-Reducer.html#t%3AReducer"
+>Reducer</A
+> e m =&gt; e -&gt; m</TD
+></TR
+><TR
+><TD CLASS="s8"
+></TD
+></TR
+><TR
+><TD CLASS="decl"
+><A HREF="#v%3Areplicate"
+>replicate</A
+> :: (<A HREF="/usr/local/share/doc/ghc/libraries/base/Data-Monoid.html#t%3AMonoid"
+>Monoid</A
+> m, <A HREF="/usr/local/share/doc/ghc/libraries/base/Prelude.html#t%3AIntegral"
+>Integral</A
+> n) =&gt; m -&gt; n -&gt; m</TD
+></TR
+><TR
+><TD CLASS="s8"
+></TD
+></TR
+><TR
+><TD CLASS="decl"
+><A HREF="#v%3Acycle"
+>cycle</A
+> :: <A HREF="/usr/local/share/doc/ghc/libraries/base/Data-Monoid.html#t%3AMonoid"
+>Monoid</A
+> m =&gt; m -&gt; m</TD
+></TR
+></TABLE
+></TD
+></TR
+><TR
+><TD CLASS="s15"
+></TD
+></TR
+><TR
+><TD CLASS="section1"
+>Documentation</TD
+></TR
+><TR
+><TD CLASS="s15"
+></TD
+></TR
+><TR
+><TD CLASS="decl"
+>module <A HREF="Data-Monoid-Generator.html"
+>Data.Monoid.Generator</A
+></TD
+></TR
+><TR
+><TD CLASS="s15"
+></TD
+></TR
+><TR
+><TD CLASS="section1"
+><A NAME="1"
+>Monadic Reduction
+</A
+></TD
+></TR
+><TR
+><TD CLASS="s15"
+></TD
+></TR
+><TR
+><TD CLASS="topdecl"
+><TABLE CLASS="declbar"
+><TR
+><TD CLASS="declname"
+><A NAME="v%3AmapM_"
+></A
+><B
+>mapM_</B
+> :: (<A HREF="Data-Monoid-Generator.html#t%3AGenerator"
+>Generator</A
+> c, <A HREF="/usr/local/share/doc/ghc/libraries/base/Control-Monad.html#t%3AMonad"
+>Monad</A
+> m) =&gt; (<A HREF="Data-Monoid-Generator.html#t%3AElem"
+>Elem</A
+> c -&gt; m b) -&gt; c -&gt; m ()</TD
+><TD CLASS="declbut"
+><A HREF="src/Data-Monoid-Combinators.html#mapM_"
+>Source</A
+></TD
+></TR
+></TABLE
+></TD
+></TR
+><TR
+><TD CLASS="doc"
+>Efficiently <TT
+><A HREF="Data-Monoid-Generator.html#v%3AmapReduce"
+>mapReduce</A
+></TT
+> a <TT
+><A HREF="Data-Monoid-Generator.html#t%3AGenerator"
+>Generator</A
+></TT
+> using the <TT
+><A HREF="Data-Monoid-Monad.html#v%3AAction"
+>Action</A
+></TT
+> monoid. A specialized version of its namesake from <A HREF="Data-Foldable.html"
+>Data.Foldable</A
+> and <A HREF="Control-Monad.html"
+>Control.Monad</A
+>
+</TD
+></TR
+><TR
+><TD CLASS="s15"
+></TD
+></TR
+><TR
+><TD CLASS="topdecl"
+><TABLE CLASS="declbar"
+><TR
+><TD CLASS="declname"
+><A NAME="v%3AforM_"
+></A
+><B
+>forM_</B
+> :: (<A HREF="Data-Monoid-Generator.html#t%3AGenerator"
+>Generator</A
+> c, <A HREF="/usr/local/share/doc/ghc/libraries/base/Control-Monad.html#t%3AMonad"
+>Monad</A
+> m) =&gt; c -&gt; (<A HREF="Data-Monoid-Generator.html#t%3AElem"
+>Elem</A
+> c -&gt; m b) -&gt; m ()</TD
+><TD CLASS="declbut"
+><A HREF="src/Data-Monoid-Combinators.html#forM_"
+>Source</A
+></TD
+></TR
+></TABLE
+></TD
+></TR
+><TR
+><TD CLASS="doc"
+>flipped <TT
+><A HREF="Data-Monoid-Combinators.html#v%3AmapM_"
+>mapM_</A
+></TT
+> as in <A HREF="Data-Foldable.html"
+>Data.Foldable</A
+> and <A HREF="Control-Monad.html"
+>Control.Monad</A
+>
+</TD
+></TR
+><TR
+><TD CLASS="s15"
+></TD
+></TR
+><TR
+><TD CLASS="section1"
+><A NAME="2"
+>Applicative Reduction
+</A
+></TD
+></TR
+><TR
+><TD CLASS="s15"
+></TD
+></TR
+><TR
+><TD CLASS="topdecl"
+><TABLE CLASS="declbar"
+><TR
+><TD CLASS="declname"
+><A NAME="v%3Atraverse_"
+></A
+><B
+>traverse_</B
+> :: (<A HREF="Data-Monoid-Generator.html#t%3AGenerator"
+>Generator</A
+> c, <A HREF="/usr/local/share/doc/ghc/libraries/base/Control-Applicative.html#t%3AApplicative"
+>Applicative</A
+> f) =&gt; (<A HREF="Data-Monoid-Generator.html#t%3AElem"
+>Elem</A
+> c -&gt; f b) -&gt; c -&gt; f ()</TD
+><TD CLASS="declbut"
+><A HREF="src/Data-Monoid-Combinators.html#traverse_"
+>Source</A
+></TD
+></TR
+></TABLE
+></TD
+></TR
+><TR
+><TD CLASS="doc"
+>Efficiently <TT
+><A HREF="Data-Monoid-Generator.html#v%3AmapReduce"
+>mapReduce</A
+></TT
+> a <TT
+><A HREF="Data-Monoid-Generator.html#t%3AGenerator"
+>Generator</A
+></TT
+> using the <TT
+><A HREF="Data-Monoid-Applicative.html#v%3ATraversal"
+>Traversal</A
+></TT
+> monoid. A specialized version of its namesake in <A HREF="Data-Foldable.html"
+>Data.Foldable</A
+>
+</TD
+></TR
+><TR
+><TD CLASS="s15"
+></TD
+></TR
+><TR
+><TD CLASS="topdecl"
+><TABLE CLASS="declbar"
+><TR
+><TD CLASS="declname"
+><A NAME="v%3Afor_"
+></A
+><B
+>for_</B
+> :: (<A HREF="Data-Monoid-Generator.html#t%3AGenerator"
+>Generator</A
+> c, <A HREF="/usr/local/share/doc/ghc/libraries/base/Control-Applicative.html#t%3AApplicative"
+>Applicative</A
+> f) =&gt; c -&gt; (<A HREF="Data-Monoid-Generator.html#t%3AElem"
+>Elem</A
+> c -&gt; f b) -&gt; f ()</TD
+><TD CLASS="declbut"
+><A HREF="src/Data-Monoid-Combinators.html#for_"
+>Source</A
+></TD
+></TR
+></TABLE
+></TD
+></TR
+><TR
+><TD CLASS="doc"
+>flipped <TT
+><A HREF="Data-Monoid-Combinators.html#v%3Atraverse_"
+>traverse_</A
+></TT
+> as in <A HREF="Data-Foldable.html"
+>Data.Foldable</A
+>
+</TD
+></TR
+><TR
+><TD CLASS="s15"
+></TD
+></TR
+><TR
+><TD CLASS="section1"
+><A NAME="3"
+>Logical Reduction
+</A
+></TD
+></TR
+><TR
+><TD CLASS="s15"
+></TD
+></TR
+><TR
+><TD CLASS="topdecl"
+><TABLE CLASS="declbar"
+><TR
+><TD CLASS="declname"
+><A NAME="v%3Aand"
+></A
+><B
+>and</B
+> :: (<A HREF="Data-Monoid-Generator.html#t%3AGenerator"
+>Generator</A
+> c, <A HREF="Data-Monoid-Generator.html#t%3AElem"
+>Elem</A
+> c ~ <A HREF="/usr/local/share/doc/ghc/libraries/ghc-prim/GHC-Bool.html#t%3ABool"
+>Bool</A
+>) =&gt; c -&gt; <A HREF="/usr/local/share/doc/ghc/libraries/ghc-prim/GHC-Bool.html#t%3ABool"
+>Bool</A
+></TD
+><TD CLASS="declbut"
+><A HREF="src/Data-Monoid-Combinators.html#and"
+>Source</A
+></TD
+></TR
+></TABLE
+></TD
+></TR
+><TR
+><TD CLASS="doc"
+>Efficiently <TT
+><A HREF="Data-Monoid-Generator.html#v%3Areduce"
+>reduce</A
+></TT
+> a <TT
+><A HREF="Data-Monoid-Generator.html#t%3AGenerator"
+>Generator</A
+></TT
+> that contains values of type <TT
+><A HREF="/usr/local/share/doc/ghc/libraries/ghc-prim/GHC-Bool.html#t%3ABool"
+>Bool</A
+></TT
+>
+</TD
+></TR
+><TR
+><TD CLASS="s15"
+></TD
+></TR
+><TR
+><TD CLASS="topdecl"
+><TABLE CLASS="declbar"
+><TR
+><TD CLASS="declname"
+><A NAME="v%3Aor"
+></A
+><B
+>or</B
+> :: (<A HREF="Data-Monoid-Generator.html#t%3AGenerator"
+>Generator</A
+> c, <A HREF="Data-Monoid-Generator.html#t%3AElem"
+>Elem</A
+> c ~ <A HREF="/usr/local/share/doc/ghc/libraries/ghc-prim/GHC-Bool.html#t%3ABool"
+>Bool</A
+>) =&gt; c -&gt; <A HREF="/usr/local/share/doc/ghc/libraries/ghc-prim/GHC-Bool.html#t%3ABool"
+>Bool</A
+></TD
+><TD CLASS="declbut"
+><A HREF="src/Data-Monoid-Combinators.html#or"
+>Source</A
+></TD
+></TR
+></TABLE
+></TD
+></TR
+><TR
+><TD CLASS="doc"
+>Efficiently <TT
+><A HREF="Data-Monoid-Generator.html#v%3Areduce"
+>reduce</A
+></TT
+> a <TT
+><A HREF="Data-Monoid-Generator.html#t%3AGenerator"
+>Generator</A
+></TT
+> that contains values of type <TT
+><A HREF="/usr/local/share/doc/ghc/libraries/ghc-prim/GHC-Bool.html#t%3ABool"
+>Bool</A
+></TT
+>
+</TD
+></TR
+><TR
+><TD CLASS="s15"
+></TD
+></TR
+><TR
+><TD CLASS="topdecl"
+><TABLE CLASS="declbar"
+><TR
+><TD CLASS="declname"
+><A NAME="v%3Aany"
+></A
+><B
+>any</B
+> :: <A HREF="Data-Monoid-Generator.html#t%3AGenerator"
+>Generator</A
+> c =&gt; (<A HREF="Data-Monoid-Generator.html#t%3AElem"
+>Elem</A
+> c -&gt; <A HREF="/usr/local/share/doc/ghc/libraries/ghc-prim/GHC-Bool.html#t%3ABool"
+>Bool</A
+>) -&gt; c -&gt; <A HREF="/usr/local/share/doc/ghc/libraries/ghc-prim/GHC-Bool.html#t%3ABool"
+>Bool</A
+></TD
+><TD CLASS="declbut"
+><A HREF="src/Data-Monoid-Combinators.html#any"
+>Source</A
+></TD
+></TR
+></TABLE
+></TD
+></TR
+><TR
+><TD CLASS="doc"
+>Efficiently <TT
+><A HREF="Data-Monoid-Generator.html#v%3AmapReduce"
+>mapReduce</A
+></TT
+> any <TT
+><A HREF="Data-Monoid-Generator.html#t%3AGenerator"
+>Generator</A
+></TT
+> checking to see if any of its values match the supplied predicate
+</TD
+></TR
+><TR
+><TD CLASS="s15"
+></TD
+></TR
+><TR
+><TD CLASS="topdecl"
+><TABLE CLASS="declbar"
+><TR
+><TD CLASS="declname"
+><A NAME="v%3Aall"
+></A
+><B
+>all</B
+> :: <A HREF="Data-Monoid-Generator.html#t%3AGenerator"
+>Generator</A
+> c =&gt; (<A HREF="Data-Monoid-Generator.html#t%3AElem"
+>Elem</A
+> c -&gt; <A HREF="/usr/local/share/doc/ghc/libraries/ghc-prim/GHC-Bool.html#t%3ABool"
+>Bool</A
+>) -&gt; c -&gt; <A HREF="/usr/local/share/doc/ghc/libraries/ghc-prim/GHC-Bool.html#t%3ABool"
+>Bool</A
+></TD
+><TD CLASS="declbut"
+><A HREF="src/Data-Monoid-Combinators.html#all"
+>Source</A
+></TD
+></TR
+></TABLE
+></TD
+></TR
+><TR
+><TD CLASS="doc"
+>Efficiently <TT
+><A HREF="Data-Monoid-Generator.html#v%3AmapReduce"
+>mapReduce</A
+></TT
+> any <TT
+><A HREF="Data-Monoid-Generator.html#t%3AGenerator"
+>Generator</A
+></TT
+> checking to see if all of its values match the supplied predicate
+</TD
+></TR
+><TR
+><TD CLASS="s15"
+></TD
+></TR
+><TR
+><TD CLASS="section1"
+><A NAME="4"
+>Monoidal Reduction
+</A
+></TD
+></TR
+><TR
+><TD CLASS="s15"
+></TD
+></TR
+><TR
+><TD CLASS="topdecl"
+><TABLE CLASS="declbar"
+><TR
+><TD CLASS="declname"
+><A NAME="v%3AfoldMap"
+></A
+><B
+>foldMap</B
+> :: (<A HREF="/usr/local/share/doc/ghc/libraries/base/Data-Monoid.html#t%3AMonoid"
+>Monoid</A
+> m, <A HREF="Data-Monoid-Generator.html#t%3AGenerator"
+>Generator</A
+> c) =&gt; (<A HREF="Data-Monoid-Generator.html#t%3AElem"
+>Elem</A
+> c -&gt; m) -&gt; c -&gt; m</TD
+><TD CLASS="declbut"
+><A HREF="src/Data-Monoid-Combinators.html#foldMap"
+>Source</A
+></TD
+></TR
+></TABLE
+></TD
+></TR
+><TR
+><TD CLASS="doc"
+>Efficiently <TT
+><A HREF="Data-Monoid-Generator.html#v%3AmapReduce"
+>mapReduce</A
+></TT
+> a <TT
+><A HREF="Data-Monoid-Generator.html#t%3AGenerator"
+>Generator</A
+></TT
+> using the <TT
+><A HREF="Data-Monoid-Self.html#v%3ASelf"
+>Self</A
+></TT
+> monoid. A specialized version of its namesake from <A HREF="Data-Foldable.html"
+>Data.Foldable</A
+>
+</TD
+></TR
+><TR
+><TD CLASS="s15"
+></TD
+></TR
+><TR
+><TD CLASS="topdecl"
+><TABLE CLASS="declbar"
+><TR
+><TD CLASS="declname"
+><A NAME="v%3Afold"
+></A
+><B
+>fold</B
+> :: (<A HREF="/usr/local/share/doc/ghc/libraries/base/Data-Monoid.html#t%3AMonoid"
+>Monoid</A
+> m, <A HREF="Data-Monoid-Generator.html#t%3AGenerator"
+>Generator</A
+> c, <A HREF="Data-Monoid-Generator.html#t%3AElem"
+>Elem</A
+> c ~ m) =&gt; c -&gt; m</TD
+><TD CLASS="declbut"
+><A HREF="src/Data-Monoid-Combinators.html#fold"
+>Source</A
+></TD
+></TR
+></TABLE
+></TD
+></TR
+><TR
+><TD CLASS="doc"
+>Efficiently <TT
+><A HREF="Data-Monoid-Generator.html#v%3Areduce"
+>reduce</A
+></TT
+> a <TT
+><A HREF="Data-Monoid-Generator.html#t%3AGenerator"
+>Generator</A
+></TT
+> using the <TT
+><A HREF="Data-Monoid-Self.html#v%3ASelf"
+>Self</A
+></TT
+> monoid. A specialized version of its namesake from <A HREF="Data-Foldable.html"
+>Data.Foldable</A
+>
+</TD
+></TR
+><TR
+><TD CLASS="s15"
+></TD
+></TR
+><TR
+><TD CLASS="section1"
+><A NAME="5"
+>List-Like Reduction
+</A
+></TD
+></TR
+><TR
+><TD CLASS="s15"
+></TD
+></TR
+><TR
+><TD CLASS="topdecl"
+><TABLE CLASS="declbar"
+><TR
+><TD CLASS="declname"
+><A NAME="v%3AconcatMap"
+></A
+><B
+>concatMap</B
+> :: <A HREF="Data-Monoid-Generator.html#t%3AGenerator"
+>Generator</A
+> c =&gt; (<A HREF="Data-Monoid-Generator.html#t%3AElem"
+>Elem</A
+> c -&gt; [b]) -&gt; c -&gt; [b]</TD
+><TD CLASS="declbut"
+><A HREF="src/Data-Monoid-Combinators.html#concatMap"
+>Source</A
+></TD
+></TR
+></TABLE
+></TD
+></TR
+><TR
+><TD CLASS="doc"
+>A further specialization of <A HREF="foldMap.html"
+>foldMap</A
+>
+</TD
+></TR
+><TR
+><TD CLASS="s15"
+></TD
+></TR
+><TR
+><TD CLASS="topdecl"
+><TABLE CLASS="declbar"
+><TR
+><TD CLASS="declname"
+><A NAME="v%3Aelem"
+></A
+><B
+>elem</B
+> :: (<A HREF="Data-Monoid-Generator.html#t%3AGenerator"
+>Generator</A
+> c, <A HREF="/usr/local/share/doc/ghc/libraries/base/Data-Eq.html#t%3AEq"
+>Eq</A
+> (<A HREF="Data-Monoid-Generator.html#t%3AElem"
+>Elem</A
+> c)) =&gt; <A HREF="Data-Monoid-Generator.html#t%3AElem"
+>Elem</A
+> c -&gt; c -&gt; <A HREF="/usr/local/share/doc/ghc/libraries/ghc-prim/GHC-Bool.html#t%3ABool"
+>Bool</A
+></TD
+><TD CLASS="declbut"
+><A HREF="src/Data-Monoid-Combinators.html#elem"
+>Source</A
+></TD
+></TR
+></TABLE
+></TD
+></TR
+><TR
+><TD CLASS="doc"
+>Check to see if <TT
+><A HREF="Data-Monoid-Combinators.html#v%3Aany"
+>any</A
+></TT
+> member of the <TT
+><A HREF="Data-Monoid-Generator.html#t%3AGenerator"
+>Generator</A
+></TT
+> matches the supplied value
+</TD
+></TR
+><TR
+><TD CLASS="s15"
+></TD
+></TR
+><TR
+><TD CLASS="topdecl"
+><TABLE CLASS="declbar"
+><TR
+><TD CLASS="declname"
+><A NAME="v%3Afilter"
+></A
+><B
+>filter</B
+> :: (<A HREF="Data-Monoid-Generator.html#t%3AGenerator"
+>Generator</A
+> c, <A HREF="Data-Monoid-Reducer.html#t%3AReducer"
+>Reducer</A
+> (<A HREF="Data-Monoid-Generator.html#t%3AElem"
+>Elem</A
+> c) m) =&gt; (<A HREF="Data-Monoid-Generator.html#t%3AElem"
+>Elem</A
+> c -&gt; <A HREF="/usr/local/share/doc/ghc/libraries/ghc-prim/GHC-Bool.html#t%3ABool"
+>Bool</A
+>) -&gt; c -&gt; m</TD
+><TD CLASS="declbut"
+><A HREF="src/Data-Monoid-Combinators.html#filter"
+>Source</A
+></TD
+></TR
+></TABLE
+></TD
+></TR
+><TR
+><TD CLASS="doc"
+>Efficiently <TT
+><A HREF="Data-Monoid-Generator.html#v%3AmapReduce"
+>mapReduce</A
+></TT
+> a subset of the elements in a <TT
+><A HREF="Data-Monoid-Generator.html#t%3AGenerator"
+>Generator</A
+></TT
+>
+</TD
+></TR
+><TR
+><TD CLASS="s15"
+></TD
+></TR
+><TR
+><TD CLASS="topdecl"
+><TABLE CLASS="declbar"
+><TR
+><TD CLASS="declname"
+><A NAME="v%3Afind"
+></A
+><B
+>find</B
+> :: <A HREF="Data-Monoid-Generator.html#t%3AGenerator"
+>Generator</A
+> c =&gt; (<A HREF="Data-Monoid-Generator.html#t%3AElem"
+>Elem</A
+> c -&gt; <A HREF="/usr/local/share/doc/ghc/libraries/ghc-prim/GHC-Bool.html#t%3ABool"
+>Bool</A
+>) -&gt; c -&gt; <A HREF="/usr/local/share/doc/ghc/libraries/base/Data-Maybe.html#t%3AMaybe"
+>Maybe</A
+> (<A HREF="Data-Monoid-Generator.html#t%3AElem"
+>Elem</A
+> c)</TD
+><TD CLASS="declbut"
+><A HREF="src/Data-Monoid-Combinators.html#find"
+>Source</A
+></TD
+></TR
+></TABLE
+></TD
+></TR
+><TR
+><TD CLASS="doc"
+>A specialization of <TT
+><A HREF="Data-Monoid-Combinators.html#v%3Afilter"
+>filter</A
+></TT
+> using the <TT
+><A HREF="/usr/local/share/doc/ghc/libraries/base/Data-Monoid.html#v%3AFirst"
+>First</A
+></TT
+> <TT
+><A HREF="/usr/local/share/doc/ghc/libraries/base/Data-Monoid.html#t%3AMonoid"
+>Monoid</A
+></TT
+>, analogous to Data.List.find
+</TD
+></TR
+><TR
+><TD CLASS="s15"
+></TD
+></TR
+><TR
+><TD CLASS="topdecl"
+><TABLE CLASS="declbar"
+><TR
+><TD CLASS="declname"
+><A NAME="v%3Asum"
+></A
+><B
+>sum</B
+> :: (<A HREF="Data-Monoid-Generator.html#t%3AGenerator"
+>Generator</A
+> c, <A HREF="/usr/local/share/doc/ghc/libraries/base/Prelude.html#t%3ANum"
+>Num</A
+> (<A HREF="Data-Monoid-Generator.html#t%3AElem"
+>Elem</A
+> c)) =&gt; c -&gt; <A HREF="Data-Monoid-Generator.html#t%3AElem"
+>Elem</A
+> c</TD
+><TD CLASS="declbut"
+><A HREF="src/Data-Monoid-Combinators.html#sum"
+>Source</A
+></TD
+></TR
+></TABLE
+></TD
+></TR
+><TR
+><TD CLASS="doc"
+>Efficiently <TT
+><A HREF="Data-Monoid-Generator.html#v%3AmapReduce"
+>mapReduce</A
+></TT
+> any <TT
+><A HREF="Data-Monoid-Generator.html#t%3AGenerator"
+>Generator</A
+></TT
+> using the <TT
+><A HREF="/usr/local/share/doc/ghc/libraries/base/Data-Monoid.html#v%3ASum"
+>Sum</A
+></TT
+> <TT
+><A HREF="/usr/local/share/doc/ghc/libraries/base/Data-Monoid.html#t%3AMonoid"
+>Monoid</A
+></TT
+>
+</TD
+></TR
+><TR
+><TD CLASS="s15"
+></TD
+></TR
+><TR
+><TD CLASS="topdecl"
+><TABLE CLASS="declbar"
+><TR
+><TD CLASS="declname"
+><A NAME="v%3Aproduct"
+></A
+><B
+>product</B
+> :: (<A HREF="Data-Monoid-Generator.html#t%3AGenerator"
+>Generator</A
+> c, <A HREF="/usr/local/share/doc/ghc/libraries/base/Prelude.html#t%3ANum"
+>Num</A
+> (<A HREF="Data-Monoid-Generator.html#t%3AElem"
+>Elem</A
+> c)) =&gt; c -&gt; <A HREF="Data-Monoid-Generator.html#t%3AElem"
+>Elem</A
+> c</TD
+><TD CLASS="declbut"
+><A HREF="src/Data-Monoid-Combinators.html#product"
+>Source</A
+></TD
+></TR
+></TABLE
+></TD
+></TR
+><TR
+><TD CLASS="doc"
+>Efficiently <TT
+><A HREF="Data-Monoid-Generator.html#v%3AmapReduce"
+>mapReduce</A
+></TT
+> any <TT
+><A HREF="Data-Monoid-Generator.html#t%3AGenerator"
+>Generator</A
+></TT
+> using the <TT
+><A HREF="/usr/local/share/doc/ghc/libraries/base/Data-Monoid.html#v%3AProduct"
+>Product</A
+></TT
+> <TT
+><A HREF="/usr/local/share/doc/ghc/libraries/base/Data-Monoid.html#t%3AMonoid"
+>Monoid</A
+></TT
+>
+</TD
+></TR
+><TR
+><TD CLASS="s15"
+></TD
+></TR
+><TR
+><TD CLASS="topdecl"
+><TABLE CLASS="declbar"
+><TR
+><TD CLASS="declname"
+><A NAME="v%3AnotElem"
+></A
+><B
+>notElem</B
+> :: (<A HREF="Data-Monoid-Generator.html#t%3AGenerator"
+>Generator</A
+> c, <A HREF="/usr/local/share/doc/ghc/libraries/base/Data-Eq.html#t%3AEq"
+>Eq</A
+> (<A HREF="Data-Monoid-Generator.html#t%3AElem"
+>Elem</A
+> c)) =&gt; <A HREF="Data-Monoid-Generator.html#t%3AElem"
+>Elem</A
+> c -&gt; c -&gt; <A HREF="/usr/local/share/doc/ghc/libraries/ghc-prim/GHC-Bool.html#t%3ABool"
+>Bool</A
+></TD
+><TD CLASS="declbut"
+><A HREF="src/Data-Monoid-Combinators.html#notElem"
+>Source</A
+></TD
+></TR
+></TABLE
+></TD
+></TR
+><TR
+><TD CLASS="doc"
+>Check to make sure that the supplied value is not a member of the <TT
+><A HREF="Data-Monoid-Generator.html#t%3AGenerator"
+>Generator</A
+></TT
+>
+</TD
+></TR
+><TR
+><TD CLASS="s15"
+></TD
+></TR
+><TR
+><TD CLASS="section1"
+><A NAME="6"
+>List-Like Monoid Generation
+</A
+></TD
+></TR
+><TR
+><TD CLASS="s15"
+></TD
+></TR
+><TR
+><TD CLASS="topdecl"
+><TABLE CLASS="declbar"
+><TR
+><TD CLASS="declname"
+><A NAME="v%3Arepeat"
+></A
+><B
+>repeat</B
+> :: <A HREF="Data-Monoid-Reducer.html#t%3AReducer"
+>Reducer</A
+> e m =&gt; e -&gt; m</TD
+><TD CLASS="declbut"
+><A HREF="src/Data-Monoid-Combinators.html#repeat"
+>Source</A
+></TD
+></TR
+></TABLE
+></TD
+></TR
+><TR
+><TD CLASS="doc"
+>A generalization of Data.List.repeat to an arbitrary <TT
+><A HREF="/usr/local/share/doc/ghc/libraries/base/Data-Monoid.html#t%3AMonoid"
+>Monoid</A
+></TT
+>. May fail to terminate for some values in some monoids.
+</TD
+></TR
+><TR
+><TD CLASS="s15"
+></TD
+></TR
+><TR
+><TD CLASS="topdecl"
+><TABLE CLASS="declbar"
+><TR
+><TD CLASS="declname"
+><A NAME="v%3Areplicate"
+></A
+><B
+>replicate</B
+> :: (<A HREF="/usr/local/share/doc/ghc/libraries/base/Data-Monoid.html#t%3AMonoid"
+>Monoid</A
+> m, <A HREF="/usr/local/share/doc/ghc/libraries/base/Prelude.html#t%3AIntegral"
+>Integral</A
+> n) =&gt; m -&gt; n -&gt; m</TD
+><TD CLASS="declbut"
+><A HREF="src/Data-Monoid-Combinators.html#replicate"
+>Source</A
+></TD
+></TR
+></TABLE
+></TD
+></TR
+><TR
+><TD CLASS="doc"
+>A generalization of Data.List.replicate to an arbitrary <TT
+><A HREF="/usr/local/share/doc/ghc/libraries/base/Data-Monoid.html#t%3AMonoid"
+>Monoid</A
+></TT
+>. Adapted from 
+ <A HREF="http://augustss.blogspot.com/2008/07/lost-and-found-if-i-write-108-in.html"
+>http://augustss.blogspot.com/2008/07/lost-and-found-if-i-write-108-in.html</A
+>
+</TD
+></TR
+><TR
+><TD CLASS="s15"
+></TD
+></TR
+><TR
+><TD CLASS="topdecl"
+><TABLE CLASS="declbar"
+><TR
+><TD CLASS="declname"
+><A NAME="v%3Acycle"
+></A
+><B
+>cycle</B
+> :: <A HREF="/usr/local/share/doc/ghc/libraries/base/Data-Monoid.html#t%3AMonoid"
+>Monoid</A
+> m =&gt; m -&gt; m</TD
+><TD CLASS="declbut"
+><A HREF="src/Data-Monoid-Combinators.html#cycle"
+>Source</A
+></TD
+></TR
+></TABLE
+></TD
+></TR
+><TR
+><TD CLASS="doc"
+>A generalization of Data.List.cycle to an arbitrary <TT
+><A HREF="/usr/local/share/doc/ghc/libraries/base/Data-Monoid.html#t%3AMonoid"
+>Monoid</A
+></TT
+>. May fail to terminate for some values in some monoids.
+</TD
+></TR
+><TR
+><TD CLASS="s15"
+></TD
+></TR
+><TR
+><TD CLASS="botbar"
+>Produced by <A HREF="http://www.haskell.org/haddock/"
+>Haddock</A
+> version 2.3.0</TD
+></TR
+></TABLE
+></BODY
+></HTML
+>
addfile ./dist/doc/html/monoids/Data-Monoid-FromString.html
hunk ./dist/doc/html/monoids/Data-Monoid-FromString.html 1
+<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd">
+<!--Rendered using the Haskell Html Library v0.2-->
+<HTML
+><HEAD
+><META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=UTF-8"
+><TITLE
+>Data.Monoid.FromString</TITLE
+><LINK HREF="haddock.css" REL="stylesheet" TYPE="text/css"
+><SCRIPT SRC="haddock-util.js" TYPE="text/javascript"
+></SCRIPT
+></HEAD
+><BODY
+><TABLE CLASS="vanilla" CELLSPACING="0" CELLPADDING="0"
+><TR
+><TD CLASS="topbar"
+><TABLE CLASS="vanilla" CELLSPACING="0" CELLPADDING="0"
+><TR
+><TD
+><IMG SRC="haskell_icon.gif" WIDTH="16" HEIGHT="16" ALT=" "
+></TD
+><TD CLASS="title"
+>monoids-0.1.6: Lots of Monoids</TD
+><TD CLASS="topbut"
+><A HREF="src/Data-Monoid-FromString.html"
+>Source code</A
+></TD
+><TD CLASS="topbut"
+><A HREF="index.html"
+>Contents</A
+></TD
+><TD CLASS="topbut"
+><A HREF="doc-index.html"
+>Index</A
+></TD
+></TR
+></TABLE
+></TD
+></TR
+><TR
+><TD CLASS="modulebar"
+><TABLE CLASS="vanilla" CELLSPACING="0" CELLPADDING="0"
+><TR
+><TD
+><FONT SIZE="6"
+>Data.Monoid.FromString</FONT
+></TD
+><TD ALIGN="right"
+><TABLE CLASS="narrow" CELLSPACING="0" CELLPADDING="0"
+><TR
+><TD CLASS="infohead"
+>Portability</TD
+><TD CLASS="infoval"
+>non-portable (overloaded strings, MPTCs)</TD
+></TR
+><TR
+><TD CLASS="infohead"
+>Stability</TD
+><TD CLASS="infoval"
+>experimental</TD
+></TR
+><TR
+><TD CLASS="infohead"
+>Maintainer</TD
+><TD CLASS="infoval"
+>libraries@haskell.org</TD
+></TR
+></TABLE
+></TD
+></TR
+></TABLE
+></TD
+></TR
+><TR
+><TD CLASS="s15"
+></TD
+></TR
+><TR
+><TD CLASS="section1"
+>Description</TD
+></TR
+><TR
+><TD CLASS="doc"
+>Transform any <TT
+><A HREF="/usr/local/share/doc/ghc/libraries/ghc-prim/GHC-Types.html#t%3AChar"
+>Char</A
+></TT
+> <TT
+><A HREF="Data-Monoid-Reducer.html#t%3AReducer"
+>Reducer</A
+></TT
+> into an <TT
+><A HREF="/usr/local/share/doc/ghc/libraries/base/Data-String.html#t%3AIsString"
+>IsString</A
+></TT
+> instance so it can be
+ used directly with overloaded string literals.
+</TD
+></TR
+><TR
+><TD CLASS="s15"
+></TD
+></TR
+><TR
+><TD CLASS="s15"
+></TD
+></TR
+><TR
+><TD CLASS="section1"
+>Documentation</TD
+></TR
+><TR
+><TD CLASS="s15"
+></TD
+></TR
+><TR
+><TD CLASS="decl"
+>module <A HREF="Data-Monoid-Reducer.html"
+>Data.Monoid.Reducer</A
+></TD
+></TR
+><TR
+><TD CLASS="s15"
+></TD
+></TR
+><TR
+><TD CLASS="topdecl"
+><TABLE CLASS="declbar"
+><TR
+><TD CLASS="declname"
+><SPAN CLASS="keyword"
+>data</SPAN
+>  <A NAME="t%3AFromString"
+></A
+><B
+>FromString</B
+> m </TD
+><TD CLASS="declbut"
+><A HREF="src/Data-Monoid-FromString.html#FromString"
+>Source</A
+></TD
+></TR
+></TABLE
+></TD
+></TR
+><TR
+><TD CLASS="body"
+><TABLE CLASS="vanilla" CELLSPACING="0" CELLPADDING="0"
+><TR
+><TD CLASS="section4"
+>Constructors</TD
+></TR
+><TR
+><TD CLASS="body"
+><TABLE CLASS="vanilla" CELLSPACING="5" CELLPADDING="0"
+><TR
+><TD CLASS="arg"
+><A NAME="v%3AFromString"
+></A
+><B
+>FromString</B
+></TD
+><TD CLASS="rdoc"
+></TD
+></TR
+><TR
+><TD CLASS="body" COLSPAN="2"
+><TABLE CLASS="vanilla" CELLSPACING="1" CELLPADDING="0"
+><TR
+><TD CLASS="arg"
+><A NAME="v%3AgetFromString"
+></A
+><B
+>getFromString</B
+> :: m</TD
+><TD CLASS="rdoc"
+></TD
+></TR
+></TABLE
+></TD
+></TR
+></TABLE
+></TD
+></TR
+><TR
+><TD CLASS="section4"
+><IMG SRC="minus.gif" CLASS="coll" ONCLICK="toggle(this,'i:FromString')" ALT="show/hide"
+> Instances</TD
+></TR
+><TR
+><TD CLASS="body"
+><DIV ID="i:FromString" STYLE="display:block;"
+><TABLE CLASS="vanilla" CELLSPACING="1" CELLPADDING="0"
+><TR
+><TD CLASS="decl"
+><A HREF="/usr/local/share/doc/ghc/libraries/base/Control-Monad.html#t%3AFunctor"
+>Functor</A
+> <A HREF="Data-Monoid-FromString.html#t%3AFromString"
+>FromString</A
+></TD
+></TR
+><TR
+><TD CLASS="decl"
+>Pointed <A HREF="Data-Monoid-FromString.html#t%3AFromString"
+>FromString</A
+></TD
+></TR
+><TR
+><TD CLASS="decl"
+>Copointed <A HREF="Data-Monoid-FromString.html#t%3AFromString"
+>FromString</A
+></TD
+></TR
+><TR
+><TD CLASS="decl"
+><A HREF="Data-Monoid-Reducer.html#t%3AReducer"
+>Reducer</A
+> <A HREF="/usr/local/share/doc/ghc/libraries/ghc-prim/GHC-Types.html#t%3AChar"
+>Char</A
+> m =&gt; <A HREF="Data-Monoid-Reducer.html#t%3AReducer"
+>Reducer</A
+> <A HREF="/usr/local/share/doc/ghc/libraries/ghc-prim/GHC-Types.html#t%3AChar"
+>Char</A
+> (<A HREF="Data-Monoid-FromString.html#t%3AFromString"
+>FromString</A
+> m)</TD
+></TR
+><TR
+><TD CLASS="decl"
+><A HREF="Data-Monoid-Reducer.html#t%3AReducer"
+>Reducer</A
+> <A HREF="/usr/local/share/doc/ghc/libraries/ghc-prim/GHC-Types.html#t%3AChar"
+>Char</A
+> m =&gt; <A HREF="/usr/local/share/doc/ghc/libraries/base/Data-String.html#t%3AIsString"
+>IsString</A
+> (<A HREF="Data-Monoid-FromString.html#t%3AFromString"
+>FromString</A
+> m)</TD
+></TR
+><TR
+><TD CLASS="decl"
+><A HREF="/usr/local/share/doc/ghc/libraries/base/Data-Monoid.html#t%3AMonoid"
+>Monoid</A
+> m =&gt; <A HREF="/usr/local/share/doc/ghc/libraries/base/Data-Monoid.html#t%3AMonoid"
+>Monoid</A
+> (<A HREF="Data-Monoid-FromString.html#t%3AFromString"
+>FromString</A
+> m)</TD
+></TR
+><TR
+><TD CLASS="decl"
+><A HREF="Data-Monoid-Multiplicative.html#t%3AMultiplicative"
+>Multiplicative</A
+> m =&gt; <A HREF="Data-Monoid-Multiplicative.html#t%3AMultiplicative"
+>Multiplicative</A
+> (<A HREF="Data-Monoid-FromString.html#t%3AFromString"
+>FromString</A
+> m)</TD
+></TR
+><TR
+><TD CLASS="decl"
+><A HREF="Data-Ring-Semi-Near.html#t%3ALeftSemiNearRing"
+>LeftSemiNearRing</A
+> m =&gt; <A HREF="Data-Ring-Semi-Near.html#t%3ALeftSemiNearRing"
+>LeftSemiNearRing</A
+> (<A HREF="Data-Monoid-FromString.html#t%3AFromString"
+>FromString</A
+> m)</TD
+></TR
+><TR
+><TD CLASS="decl"
+><A HREF="Data-Ring-Semi-Near.html#t%3ARightSemiNearRing"
+>RightSemiNearRing</A
+> m =&gt; <A HREF="Data-Ring-Semi-Near.html#t%3ARightSemiNearRing"
+>RightSemiNearRing</A
+> (<A HREF="Data-Monoid-FromString.html#t%3AFromString"
+>FromString</A
+> m)</TD
+></TR
+><TR
+><TD CLASS="decl"
+><A HREF="Data-Group.html#t%3AGroup"
+>Group</A
+> a =&gt; <A HREF="Data-Group.html#t%3AGroup"
+>Group</A
+> (<A HREF="Data-Monoid-FromString.html#t%3AFromString"
+>FromString</A
+> a)</TD
+></TR
+></TABLE
+></DIV
+></TD
+></TR
+></TABLE
+></TD
+></TR
+><TR
+><TD CLASS="s15"
+></TD
+></TR
+><TR
+><TD CLASS="botbar"
+>Produced by <A HREF="http://www.haskell.org/haddock/"
+>Haddock</A
+> version 2.3.0</TD
+></TR
+></TABLE
+></BODY
+></HTML
+>
addfile ./dist/doc/html/monoids/Data-Monoid-Generator.html
hunk ./dist/doc/html/monoids/Data-Monoid-Generator.html 1
+<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd">
+<!--Rendered using the Haskell Html Library v0.2-->
+<HTML
+><HEAD
+><META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=UTF-8"
+><TITLE
+>Data.Monoid.Generator</TITLE
+><LINK HREF="haddock.css" REL="stylesheet" TYPE="text/css"
+><SCRIPT SRC="haddock-util.js" TYPE="text/javascript"
+></SCRIPT
+></HEAD
+><BODY
+><TABLE CLASS="vanilla" CELLSPACING="0" CELLPADDING="0"
+><TR
+><TD CLASS="topbar"
+><TABLE CLASS="vanilla" CELLSPACING="0" CELLPADDING="0"
+><TR
+><TD
+><IMG SRC="haskell_icon.gif" WIDTH="16" HEIGHT="16" ALT=" "
+></TD
+><TD CLASS="title"
+>monoids-0.1.6: Lots of Monoids</TD
+><TD CLASS="topbut"
+><A HREF="src/Data-Monoid-Generator.html"
+>Source code</A
+></TD
+><TD CLASS="topbut"
+><A HREF="index.html"
+>Contents</A
+></TD
+><TD CLASS="topbut"
+><A HREF="doc-index.html"
+>Index</A
+></TD
+></TR
+></TABLE
+></TD
+></TR
+><TR
+><TD CLASS="modulebar"
+><TABLE CLASS="vanilla" CELLSPACING="0" CELLPADDING="0"
+><TR
+><TD
+><FONT SIZE="6"
+>Data.Monoid.Generator</FONT
+></TD
+><TD ALIGN="right"
+><TABLE CLASS="narrow" CELLSPACING="0" CELLPADDING="0"
+><TR
+><TD CLASS="infohead"
+>Portability</TD
+><TD CLASS="infoval"
+>portable</TD
+></TR
+><TR
+><TD CLASS="infohead"
+>Stability</TD
+><TD CLASS="infoval"
+>experimental</TD
+></TR
+><TR
+><TD CLASS="infohead"
+>Maintainer</TD
+><TD CLASS="infoval"
+>libraries@haskell.org</TD
+></TR
+></TABLE
+></TD
+></TR
+></TABLE
+></TD
+></TR
+><TR
+><TD CLASS="s15"
+></TD
+></TR
+><TR
+><TD CLASS="section1"
+>Description</TD
+></TR
+><TR
+><TD CLASS="doc"
+><P
+>A <TT
+><A HREF="Data-Monoid-Generator.html#t%3AGenerator"
+>Generator</A
+></TT
+> <TT
+>c</TT
+> is a possibly-specialized container, which contains values of 
+ type <TT
+><A HREF="Data-Monoid-Generator.html#t%3AElem"
+>Elem</A
+></TT
+> <TT
+>c</TT
+>, and which knows how to efficiently apply a <TT
+><A HREF="Data-Monoid-Reducer.html#t%3AReducer"
+>Reducer</A
+></TT
+> to extract
+ an answer.
+</P
+><P
+>Since a <TT
+><A HREF="Data-Monoid-Generator.html#t%3AGenerator"
+>Generator</A
+></TT
+> is not polymorphic in its contents, it is more specialized
+ than <A HREF="Data-Foldable-Foldable.html"
+>Data.Foldable.Foldable</A
+>, and a <TT
+><A HREF="Data-Monoid-Reducer.html#t%3AReducer"
+>Reducer</A
+></TT
+> may supply efficient left-to-right
+ and right-to-left reduction strategies that a <TT
+><A HREF="Data-Monoid-Generator.html#t%3AGenerator"
+>Generator</A
+></TT
+> may avail itself of.
+</P
+></TD
+></TR
+><TR
+><TD CLASS="s15"
+></TD
+></TR
+><TR
+><TD CLASS="section1"
+>Synopsis</TD
+></TR
+><TR
+><TD CLASS="s15"
+></TD
+></TR
+><TR
+><TD CLASS="body"
+><TABLE CLASS="vanilla" CELLSPACING="0" CELLPADDING="0"
+><TR
+><TD CLASS="decl"
+>module <A HREF="Data-Monoid-Reducer.html"
+>Data.Monoid.Reducer</A
+></TD
+></TR
+><TR
+><TD CLASS="s8"
+></TD
+></TR
+><TR
+><TD CLASS="decl"
+><SPAN CLASS="keyword"
+>class</SPAN
+>  <A HREF="#t%3AGenerator"
+>Generator</A
+> c  <SPAN CLASS="keyword"
+>where</SPAN
+></TD
+></TR
+><TR
+><TD CLASS="body"
+><TABLE CLASS="vanilla" CELLSPACING="0" CELLPADDING="0"
+><TR
+><TD CLASS="decl"
+><SPAN CLASS="keyword"
+>type</SPAN
+> <A HREF="#t%3AElem"
+>Elem</A
+> c :: *</TD
+></TR
+><TR
+><TD CLASS="decl"
+><A HREF="#v%3AmapReduce"
+>mapReduce</A
+> :: <A HREF="Data-Monoid-Reducer.html#t%3AReducer"
+>Reducer</A
+> e m =&gt; (<A HREF="Data-Monoid-Generator.html#t%3AElem"
+>Elem</A
+> c -&gt; e) -&gt; c -&gt; m</TD
+></TR
+><TR
+><TD CLASS="decl"
+><A HREF="#v%3AmapTo"
+>mapTo</A
+> :: <A HREF="Data-Monoid-Reducer.html#t%3AReducer"
+>Reducer</A
+> e m =&gt; (<A HREF="Data-Monoid-Generator.html#t%3AElem"
+>Elem</A
+> c -&gt; e) -&gt; m -&gt; c -&gt; m</TD
+></TR
+><TR
+><TD CLASS="decl"
+><A HREF="#v%3AmapFrom"
+>mapFrom</A
+> :: <A HREF="Data-Monoid-Reducer.html#t%3AReducer"
+>Reducer</A
+> e m =&gt; (<A HREF="Data-Monoid-Generator.html#t%3AElem"
+>Elem</A
+> c -&gt; e) -&gt; c -&gt; m -&gt; m</TD
+></TR
+></TABLE
+></TD
+></TR
+><TR
+><TD CLASS="s8"
+></TD
+></TR
+><TR
+><TD CLASS="decl"
+><A HREF="#v%3AmapReduce"
+>mapReduce</A
+> :: (<A HREF="Data-Monoid-Generator.html#t%3AGenerator"
+>Generator</A
+> c, <A HREF="Data-Monoid-Reducer.html#t%3AReducer"
+>Reducer</A
+> e m) =&gt; (<A HREF="Data-Monoid-Generator.html#t%3AElem"
+>Elem</A
+> c -&gt; e) -&gt; c -&gt; m</TD
+></TR
+><TR
+><TD CLASS="s8"
+></TD
+></TR
+><TR
+><TD CLASS="decl"
+><A HREF="#v%3AmapTo"
+>mapTo</A
+> :: (<A HREF="Data-Monoid-Generator.html#t%3AGenerator"
+>Generator</A
+> c, <A HREF="Data-Monoid-Reducer.html#t%3AReducer"
+>Reducer</A
+> e m) =&gt; (<A HREF="Data-Monoid-Generator.html#t%3AElem"
+>Elem</A
+> c -&gt; e) -&gt; m -&gt; c -&gt; m</TD
+></TR
+><TR
+><TD CLASS="s8"
+></TD
+></TR
+><TR
+><TD CLASS="decl"
+><A HREF="#v%3AmapFrom"
+>mapFrom</A
+> :: (<A HREF="Data-Monoid-Generator.html#t%3AGenerator"
+>Generator</A
+> c, <A HREF="Data-Monoid-Reducer.html#t%3AReducer"
+>Reducer</A
+> e m) =&gt; (<A HREF="Data-Monoid-Generator.html#t%3AElem"
+>Elem</A
+> c -&gt; e) -&gt; c -&gt; m -&gt; m</TD
+></TR
+><TR
+><TD CLASS="s8"
+></TD
+></TR
+><TR
+><TD CLASS="decl"
+><A HREF="#v%3Areduce"
+>reduce</A
+> :: (<A HREF="Data-Monoid-Generator.html#t%3AGenerator"
+>Generator</A
+> c, <A HREF="Data-Monoid-Reducer.html#t%3AReducer"
+>Reducer</A
+> (<A HREF="Data-Monoid-Generator.html#t%3AElem"
+>Elem</A
+> c) m) =&gt; c -&gt; m</TD
+></TR
+><TR
+><TD CLASS="s8"
+></TD
+></TR
+><TR
+><TD CLASS="decl"
+><SPAN CLASS="keyword"
+>newtype</SPAN
+>  <A HREF="#t%3AKeys"
+>Keys</A
+> c = <A HREF="#v%3AKeys"
+>Keys</A
+> {<TABLE CLASS="vanilla" CELLSPACING="0" CELLPADDING="0"
+><TR
+><TD CLASS="recfield"
+><A HREF="#v%3AgetKeys"
+>getKeys</A
+> :: c</TD
+></TR
+></TABLE
+>}</TD
+></TR
+><TR
+><TD CLASS="s8"
+></TD
+></TR
+><TR
+><TD CLASS="decl"
+><SPAN CLASS="keyword"
+>newtype</SPAN
+>  <A HREF="#t%3AValues"
+>Values</A
+> c = <A HREF="#v%3AValues"
+>Values</A
+> {<TABLE CLASS="vanilla" CELLSPACING="0" CELLPADDING="0"
+><TR
+><TD CLASS="recfield"
+><A HREF="#v%3AgetValues"
+>getValues</A
+> :: c</TD
+></TR
+></TABLE
+>}</TD
+></TR
+><TR
+><TD CLASS="s8"
+></TD
+></TR
+><TR
+><TD CLASS="decl"
+><SPAN CLASS="keyword"
+>newtype</SPAN
+>  <A HREF="#t%3AChar8"
+>Char8</A
+> c = <A HREF="#v%3AChar8"
+>Char8</A
+> {<TABLE CLASS="vanilla" CELLSPACING="0" CELLPADDING="0"
+><TR
+><TD CLASS="recfield"
+><A HREF="#v%3AgetChar8"
+>getChar8</A
+> :: c</TD
+></TR
+></TABLE
+>}</TD
+></TR
+></TABLE
+></TD
+></TR
+><TR
+><TD CLASS="s15"
+></TD
+></TR
+><TR
+><TD CLASS="section1"
+>Documentation</TD
+></TR
+><TR
+><TD CLASS="s15"
+></TD
+></TR
+><TR
+><TD CLASS="decl"
+>module <A HREF="Data-Monoid-Reducer.html"
+>Data.Monoid.Reducer</A
+></TD
+></TR
+><TR
+><TD CLASS="s15"
+></TD
+></TR
+><TR
+><TD CLASS="topdecl"
+><TABLE CLASS="declbar"
+><TR
+><TD CLASS="declname"
+><SPAN CLASS="keyword"
+>class</SPAN
+>  <A NAME="t%3AGenerator"
+></A
+><B
+>Generator</B
+> c  <SPAN CLASS="keyword"
+>where</SPAN
+></TD
+><TD CLASS="declbut"
+><A HREF="src/Data-Monoid-Generator.html#Generator"
+>Source</A
+></TD
+></TR
+></TABLE
+></TD
+></TR
+><TR
+><TD CLASS="body"
+><TABLE CLASS="vanilla" CELLSPACING="0" CELLPADDING="0"
+><TR
+><TD CLASS="ndoc"
+>minimal definition <TT
+><A HREF="Data-Monoid-Generator.html#v%3AmapReduce"
+>mapReduce</A
+></TT
+> or <TT
+><A HREF="Data-Monoid-Generator.html#v%3AmapTo"
+>mapTo</A
+></TT
+>
+</TD
+></TR
+><TR
+><TD CLASS="s8"
+></TD
+></TR
+><TR
+><TD CLASS="section4"
+>Associated Types</TD
+></TR
+><TR
+><TD CLASS="body"
+><TABLE CLASS="vanilla" CELLSPACING="0" CELLPADDING="0"
+><TR
+><TD CLASS="topdecl"
+><TABLE CLASS="declbar"
+><TR
+><TD CLASS="declname"
+><SPAN CLASS="keyword"
+>type</SPAN
+> <A NAME="t%3AElem"
+></A
+><B
+>Elem</B
+> c :: *</TD
+><TD CLASS="declbut"
+><A HREF="src/Data-Monoid-Generator.html#Elem"
+>Source</A
+></TD
+></TR
+></TABLE
+></TD
+></TR
+></TABLE
+></TD
+></TR
+><TR
+><TD CLASS="s8"
+></TD
+></TR
+><TR
+><TD CLASS="section4"
+>Methods</TD
+></TR
+><TR
+><TD CLASS="body"
+><TABLE CLASS="vanilla" CELLSPACING="0" CELLPADDING="0"
+><TR
+><TD CLASS="topdecl"
+><TABLE CLASS="declbar"
+><TR
+><TD CLASS="declname"
+><A NAME="v%3AmapReduce"
+></A
+><B
+>mapReduce</B
+> :: <A HREF="Data-Monoid-Reducer.html#t%3AReducer"
+>Reducer</A
+> e m =&gt; (<A HREF="Data-Monoid-Generator.html#t%3AElem"
+>Elem</A
+> c -&gt; e) -&gt; c -&gt; m</TD
+><TD CLASS="declbut"
+><A HREF="src/Data-Monoid-Generator.html#mapReduce"
+>Source</A
+></TD
+></TR
+></TABLE
+></TD
+></TR
+><TR
+><TD CLASS="s8"
+></TD
+></TR
+><TR
+><TD CLASS="topdecl"
+><TABLE CLASS="declbar"
+><TR
+><TD CLASS="declname"
+><A NAME="v%3AmapTo"
+></A
+><B
+>mapTo</B
+> :: <A HREF="Data-Monoid-Reducer.html#t%3AReducer"
+>Reducer</A
+> e m =&gt; (<A HREF="Data-Monoid-Generator.html#t%3AElem"
+>Elem</A
+> c -&gt; e) -&gt; m -&gt; c -&gt; m</TD
+><TD CLASS="declbut"
+><A HREF="src/Data-Monoid-Generator.html#mapTo"
+>Source</A
+></TD
+></TR
+></TABLE
+></TD
+></TR
+><TR
+><TD CLASS="s8"
+></TD
+></TR
+><TR
+><TD CLASS="topdecl"
+><TABLE CLASS="declbar"
+><TR
+><TD CLASS="declname"
+><A NAME="v%3AmapFrom"
+></A
+><B
+>mapFrom</B
+> :: <A HREF="Data-Monoid-Reducer.html#t%3AReducer"
+>Reducer</A
+> e m =&gt; (<A HREF="Data-Monoid-Generator.html#t%3AElem"
+>Elem</A
+> c -&gt; e) -&gt; c -&gt; m -&gt; m</TD
+><TD CLASS="declbut"
+><A HREF="src/Data-Monoid-Generator.html#mapFrom"
+>Source</A
+></TD
+></TR
+></TABLE
+></TD
+></TR
+></TABLE
+></TD
+></TR
+><TR
+><TD CLASS="s8"
+></TD
+></TR
+><TR
+><TD CLASS="section4"
+><IMG SRC="minus.gif" CLASS="coll" ONCLICK="toggle(this,'i:Generator')" ALT="show/hide"
+> Instances</TD
+></TR
+><TR
+><TD CLASS="body"
+><DIV ID="i:Generator" STYLE="display:block;"
+><TABLE CLASS="vanilla" CELLSPACING="1" CELLPADDING="0"
+><TR
+><TD CLASS="decl"
+><A HREF="Data-Monoid-Generator.html#t%3AGenerator"
+>Generator</A
+> <A HREF="/usr/local/share/doc/ghc/libraries/bytestring/Data-ByteString-Lazy-Internal.html#t%3AByteString"
+>ByteString</A
+></TD
+></TR
+><TR
+><TD CLASS="decl"
+><A HREF="Data-Monoid-Generator.html#t%3AGenerator"
+>Generator</A
+> <A HREF="/usr/local/share/doc/ghc/libraries/bytestring/Data-ByteString-Internal.html#t%3AByteString"
+>ByteString</A
+></TD
+></TR
+><TR
+><TD CLASS="decl"
+><A HREF="Data-Monoid-Generator.html#t%3AGenerator"
+>Generator</A
+> <A HREF="/usr/local/share/doc/ghc/libraries/containers/Data-IntSet.html#t%3AIntSet"
+>IntSet</A
+></TD
+></TR
+><TR
+><TD CLASS="decl"
+><A HREF="Data-Monoid-Generator.html#t%3AGenerator"
+>Generator</A
+> Text</TD
+></TR
+><TR
+><TD CLASS="decl"
+><A HREF="Data-Monoid-Generator.html#t%3AGenerator"
+>Generator</A
+> ([] c)</TD
+></TR
+><TR
+><TD CLASS="decl"
+><A HREF="Data-Monoid-Generator.html#t%3AGenerator"
+>Generator</A
+> (<A HREF="/usr/local/share/doc/ghc/libraries/containers/Data-IntMap.html#t%3AIntMap"
+>IntMap</A
+> v)</TD
+></TR
+><TR
+><TD CLASS="decl"
+><A HREF="Data-Monoid-Generator.html#t%3AGenerator"
+>Generator</A
+> (<A HREF="/usr/local/share/doc/ghc/libraries/containers/Data-Sequence.html#t%3ASeq"
+>Seq</A
+> c)</TD
+></TR
+><TR
+><TD CLASS="decl"
+><A HREF="Data-Monoid-Generator.html#t%3AGenerator"
+>Generator</A
+> (<A HREF="/usr/local/share/doc/ghc/libraries/containers/Data-Set.html#t%3ASet"
+>Set</A
+> a)</TD
+></TR
+><TR
+><TD CLASS="decl"
+><A HREF="Data-Monoid-Generator.html#t%3AGenerator"
+>Generator</A
+> (<A HREF="Data-Monoid-Generator.html#t%3AChar8"
+>Char8</A
+> <A HREF="/usr/local/share/doc/ghc/libraries/bytestring/Data-ByteString-Lazy-Internal.html#t%3AByteString"
+>ByteString</A
+>)</TD
+></TR
+><TR
+><TD CLASS="decl"
+><A HREF="Data-Monoid-Generator.html#t%3AGenerator"
+>Generator</A
+> (<A HREF="Data-Monoid-Generator.html#t%3AChar8"
+>Char8</A
+> <A HREF="/usr/local/share/doc/ghc/libraries/bytestring/Data-ByteString-Internal.html#t%3AByteString"
+>ByteString</A
+>)</TD
+></TR
+><TR
+><TD CLASS="decl"
+><A HREF="/usr/local/share/doc/ghc/libraries/base/GHC-Arr.html#t%3AIx"
+>Ix</A
+> i =&gt; <A HREF="Data-Monoid-Generator.html#t%3AGenerator"
+>Generator</A
+> (<A HREF="Data-Monoid-Generator.html#t%3AValues"
+>Values</A
+> (<A HREF="/usr/local/share/doc/ghc/libraries/base/GHC-Arr.html#t%3AArray"
+>Array</A
+> i e))</TD
+></TR
+><TR
+><TD CLASS="decl"
+><A HREF="Data-Monoid-Generator.html#t%3AGenerator"
+>Generator</A
+> (<A HREF="Data-Monoid-Generator.html#t%3AValues"
+>Values</A
+> (<A HREF="/usr/local/share/doc/ghc/libraries/containers/Data-IntMap.html#t%3AIntMap"
+>IntMap</A
+> v))</TD
+></TR
+><TR
+><TD CLASS="decl"
+><A HREF="Data-Monoid-Generator.html#t%3AGenerator"
+>Generator</A
+> (<A HREF="Data-Monoid-Generator.html#t%3AValues"
+>Values</A
+> (<A HREF="/usr/local/share/doc/ghc/libraries/containers/Data-Map.html#t%3AMap"
+>Map</A
+> k v))</TD
+></TR
+><TR
+><TD CLASS="decl"
+><A HREF="/usr/local/share/doc/ghc/libraries/base/GHC-Arr.html#t%3AIx"
+>Ix</A
+> i =&gt; <A HREF="Data-Monoid-Generator.html#t%3AGenerator"
+>Generator</A
+> (<A HREF="Data-Monoid-Generator.html#t%3AKeys"
+>Keys</A
+> (<A HREF="/usr/local/share/doc/ghc/libraries/base/GHC-Arr.html#t%3AArray"
+>Array</A
+> i e))</TD
+></TR
+><TR
+><TD CLASS="decl"
+><A HREF="Data-Monoid-Generator.html#t%3AGenerator"
+>Generator</A
+> (<A HREF="Data-Monoid-Generator.html#t%3AKeys"
+>Keys</A
+> (<A HREF="/usr/local/share/doc/ghc/libraries/containers/Data-IntMap.html#t%3AIntMap"
+>IntMap</A
+> v))</TD
+></TR
+><TR
+><TD CLASS="decl"
+><A HREF="Data-Monoid-Generator.html#t%3AGenerator"
+>Generator</A
+> (<A HREF="Data-Monoid-Generator.html#t%3AKeys"
+>Keys</A
+> (<A HREF="/usr/local/share/doc/ghc/libraries/containers/Data-Map.html#t%3AMap"
+>Map</A
+> k v))</TD
+></TR
+><TR
+><TD CLASS="decl"
+><A HREF="/usr/local/share/doc/ghc/libraries/base/GHC-Arr.html#t%3AIx"
+>Ix</A
+> i =&gt; <A HREF="Data-Monoid-Generator.html#t%3AGenerator"
+>Generator</A
+> (<A HREF="/usr/local/share/doc/ghc/libraries/base/GHC-Arr.html#t%3AArray"
+>Array</A
+> i e)</TD
+></TR
+><TR
+><TD CLASS="decl"
+><A HREF="Data-Monoid-Generator.html#t%3AGenerator"
+>Generator</A
+> (<A HREF="/usr/local/share/doc/ghc/libraries/containers/Data-Map.html#t%3AMap"
+>Map</A
+> k v)</TD
+></TR
+><TR
+><TD CLASS="decl"
+>Measured v e =&gt; <A HREF="Data-Monoid-Generator.html#t%3AGenerator"
+>Generator</A
+> (FingerTree v e)</TD
+></TR
+></TABLE
+></DIV
+></TD
+></TR
+></TABLE
+></TD
+></TR
+><TR
+><TD CLASS="s15"
+></TD
+></TR
+><TR
+><TD CLASS="topdecl"
+><TABLE CLASS="declbar"
+><TR
+><TD CLASS="declname"
+><A NAME="v%3AmapReduce"
+></A
+><B
+>mapReduce</B
+> :: (<A HREF="Data-Monoid-Generator.html#t%3AGenerator"
+>Generator</A
+> c, <A HREF="Data-Monoid-Reducer.html#t%3AReducer"
+>Reducer</A
+> e m) =&gt; (<A HREF="Data-Monoid-Generator.html#t%3AElem"
+>Elem</A
+> c -&gt; e) -&gt; c -&gt; m</TD
+><TD CLASS="declbut"
+><A HREF="src/Data-Monoid-Generator.html#mapReduce"
+>Source</A
+></TD
+></TR
+></TABLE
+></TD
+></TR
+><TR
+><TD CLASS="s15"
+></TD
+></TR
+><TR
+><TD CLASS="topdecl"
+><TABLE CLASS="declbar"
+><TR
+><TD CLASS="declname"
+><A NAME="v%3AmapTo"
+></A
+><B
+>mapTo</B
+> :: (<A HREF="Data-Monoid-Generator.html#t%3AGenerator"
+>Generator</A
+> c, <A HREF="Data-Monoid-Reducer.html#t%3AReducer"
+>Reducer</A
+> e m) =&gt; (<A HREF="Data-Monoid-Generator.html#t%3AElem"
+>Elem</A
+> c -&gt; e) -&gt; m -&gt; c -&gt; m</TD
+><TD CLASS="declbut"
+><A HREF="src/Data-Monoid-Generator.html#mapTo"
+>Source</A
+></TD
+></TR
+></TABLE
+></TD
+></TR
+><TR
+><TD CLASS="s15"
+></TD
+></TR
+><TR
+><TD CLASS="topdecl"
+><TABLE CLASS="declbar"
+><TR
+><TD CLASS="declname"
+><A NAME="v%3AmapFrom"
+></A
+><B
+>mapFrom</B
+> :: (<A HREF="Data-Monoid-Generator.html#t%3AGenerator"
+>Generator</A
+> c, <A HREF="Data-Monoid-Reducer.html#t%3AReducer"
+>Reducer</A
+> e m) =&gt; (<A HREF="Data-Monoid-Generator.html#t%3AElem"
+>Elem</A
+> c -&gt; e) -&gt; c -&gt; m -&gt; m</TD
+><TD CLASS="declbut"
+><A HREF="src/Data-Monoid-Generator.html#mapFrom"
+>Source</A
+></TD
+></TR
+></TABLE
+></TD
+></TR
+><TR
+><TD CLASS="s15"
+></TD
+></TR
+><TR
+><TD CLASS="topdecl"
+><TABLE CLASS="declbar"
+><TR
+><TD CLASS="declname"
+><A NAME="v%3Areduce"
+></A
+><B
+>reduce</B
+> :: (<A HREF="Data-Monoid-Generator.html#t%3AGenerator"
+>Generator</A
+> c, <A HREF="Data-Monoid-Reducer.html#t%3AReducer"
+>Reducer</A
+> (<A HREF="Data-Monoid-Generator.html#t%3AElem"
+>Elem</A
+> c) m) =&gt; c -&gt; m</TD
+><TD CLASS="declbut"
+><A HREF="src/Data-Monoid-Generator.html#reduce"
+>Source</A
+></TD
+></TR
+></TABLE
+></TD
+></TR
+><TR
+><TD CLASS="doc"
+>Apply a <TT
+><A HREF="Data-Monoid-Reducer.html#t%3AReducer"
+>Reducer</A
+></TT
+> directly to the elements of a <TT
+><A HREF="Data-Monoid-Generator.html#t%3AGenerator"
+>Generator</A
+></TT
+>
+</TD
+></TR
+><TR
+><TD CLASS="s15"
+></TD
+></TR
+><TR
+><TD CLASS="topdecl"
+><TABLE CLASS="declbar"
+><TR
+><TD CLASS="declname"
+><SPAN CLASS="keyword"
+>newtype</SPAN
+>  <A NAME="t%3AKeys"
+></A
+><B
+>Keys</B
+> c </TD
+><TD CLASS="declbut"
+><A HREF="src/Data-Monoid-Generator.html#Keys"
+>Source</A
+></TD
+></TR
+></TABLE
+></TD
+></TR
+><TR
+><TD CLASS="body"
+><TABLE CLASS="vanilla" CELLSPACING="0" CELLPADDING="0"
+><TR
+><TD CLASS="ndoc"
+>a <TT
+><A HREF="Data-Monoid-Generator.html#t%3AGenerator"
+>Generator</A
+></TT
+> transformer that asks only for the keys of an indexed container
+</TD
+></TR
+><TR
+><TD CLASS="section4"
+>Constructors</TD
+></TR
+><TR
+><TD CLASS="body"
+><TABLE CLASS="vanilla" CELLSPACING="5" CELLPADDING="0"
+><TR
+><TD CLASS="arg"
+><A NAME="v%3AKeys"
+></A
+><B
+>Keys</B
+></TD
+><TD CLASS="rdoc"
+></TD
+></TR
+><TR
+><TD CLASS="body" COLSPAN="2"
+><TABLE CLASS="vanilla" CELLSPACING="1" CELLPADDING="0"
+><TR
+><TD CLASS="arg"
+><A NAME="v%3AgetKeys"
+></A
+><B
+>getKeys</B
+> :: c</TD
+><TD CLASS="rdoc"
+></TD
+></TR
+></TABLE
+></TD
+></TR
+></TABLE
+></TD
+></TR
+><TR
+><TD CLASS="section4"
+><IMG SRC="minus.gif" CLASS="coll" ONCLICK="toggle(this,'i:Keys')" ALT="show/hide"
+> Instances</TD
+></TR
+><TR
+><TD CLASS="body"
+><DIV ID="i:Keys" STYLE="display:block;"
+><TABLE CLASS="vanilla" CELLSPACING="1" CELLPADDING="0"
+><TR
+><TD CLASS="decl"
+><A HREF="/usr/local/share/doc/ghc/libraries/base/GHC-Arr.html#t%3AIx"
+>Ix</A
+> i =&gt; <A HREF="Data-Monoid-Generator.html#t%3AGenerator"
+>Generator</A
+> (<A HREF="Data-Monoid-Generator.html#t%3AKeys"
+>Keys</A
+> (<A HREF="/usr/local/share/doc/ghc/libraries/base/GHC-Arr.html#t%3AArray"
+>Array</A
+> i e))</TD
+></TR
+><TR
+><TD CLASS="decl"
+><A HREF="Data-Monoid-Generator.html#t%3AGenerator"
+>Generator</A
+> (<A HREF="Data-Monoid-Generator.html#t%3AKeys"
+>Keys</A
+> (<A HREF="/usr/local/share/doc/ghc/libraries/containers/Data-IntMap.html#t%3AIntMap"
+>IntMap</A
+> v))</TD
+></TR
+><TR
+><TD CLASS="decl"
+><A HREF="Data-Monoid-Generator.html#t%3AGenerator"
+>Generator</A
+> (<A HREF="Data-Monoid-Generator.html#t%3AKeys"
+>Keys</A
+> (<A HREF="/usr/local/share/doc/ghc/libraries/containers/Data-Map.html#t%3AMap"
+>Map</A
+> k v))</TD
+></TR
+></TABLE
+></DIV
+></TD
+></TR
+></TABLE
+></TD
+></TR
+><TR
+><TD CLASS="s15"
+></TD
+></TR
+><TR
+><TD CLASS="topdecl"
+><TABLE CLASS="declbar"
+><TR
+><TD CLASS="declname"
+><SPAN CLASS="keyword"
+>newtype</SPAN
+>  <A NAME="t%3AValues"
+></A
+><B
+>Values</B
+> c </TD
+><TD CLASS="declbut"
+><A HREF="src/Data-Monoid-Generator.html#Values"
+>Source</A
+></TD
+></TR
+></TABLE
+></TD
+></TR
+><TR
+><TD CLASS="body"
+><TABLE CLASS="vanilla" CELLSPACING="0" CELLPADDING="0"
+><TR
+><TD CLASS="ndoc"
+>a <TT
+><A HREF="Data-Monoid-Generator.html#t%3AGenerator"
+>Generator</A
+></TT
+> transformer that asks only for the values contained in an indexed container
+</TD
+></TR
+><TR
+><TD CLASS="section4"
+>Constructors</TD
+></TR
+><TR
+><TD CLASS="body"
+><TABLE CLASS="vanilla" CELLSPACING="5" CELLPADDING="0"
+><TR
+><TD CLASS="arg"
+><A NAME="v%3AValues"
+></A
+><B
+>Values</B
+></TD
+><TD CLASS="rdoc"
+></TD
+></TR
+><TR
+><TD CLASS="body" COLSPAN="2"
+><TABLE CLASS="vanilla" CELLSPACING="1" CELLPADDING="0"
+><TR
+><TD CLASS="arg"
+><A NAME="v%3AgetValues"
+></A
+><B
+>getValues</B
+> :: c</TD
+><TD CLASS="rdoc"
+></TD
+></TR
+></TABLE
+></TD
+></TR
+></TABLE
+></TD
+></TR
+><TR
+><TD CLASS="section4"
+><IMG SRC="minus.gif" CLASS="coll" ONCLICK="toggle(this,'i:Values')" ALT="show/hide"
+> Instances</TD
+></TR
+><TR
+><TD CLASS="body"
+><DIV ID="i:Values" STYLE="display:block;"
+><TABLE CLASS="vanilla" CELLSPACING="1" CELLPADDING="0"
+><TR
+><TD CLASS="decl"
+><A HREF="/usr/local/share/doc/ghc/libraries/base/GHC-Arr.html#t%3AIx"
+>Ix</A
+> i =&gt; <A HREF="Data-Monoid-Generator.html#t%3AGenerator"
+>Generator</A
+> (<A HREF="Data-Monoid-Generator.html#t%3AValues"
+>Values</A
+> (<A HREF="/usr/local/share/doc/ghc/libraries/base/GHC-Arr.html#t%3AArray"
+>Array</A
+> i e))</TD
+></TR
+><TR
+><TD CLASS="decl"
+><A HREF="Data-Monoid-Generator.html#t%3AGenerator"
+>Generator</A
+> (<A HREF="Data-Monoid-Generator.html#t%3AValues"
+>Values</A
+> (<A HREF="/usr/local/share/doc/ghc/libraries/containers/Data-IntMap.html#t%3AIntMap"
+>IntMap</A
+> v))</TD
+></TR
+><TR
+><TD CLASS="decl"
+><A HREF="Data-Monoid-Generator.html#t%3AGenerator"
+>Generator</A
+> (<A HREF="Data-Monoid-Generator.html#t%3AValues"
+>Values</A
+> (<A HREF="/usr/local/share/doc/ghc/libraries/containers/Data-Map.html#t%3AMap"
+>Map</A
+> k v))</TD
+></TR
+></TABLE
+></DIV
+></TD
+></TR
+></TABLE
+></TD
+></TR
+><TR
+><TD CLASS="s15"
+></TD
+></TR
+><TR
+><TD CLASS="topdecl"
+><TABLE CLASS="declbar"
+><TR
+><TD CLASS="declname"
+><SPAN CLASS="keyword"
+>newtype</SPAN
+>  <A NAME="t%3AChar8"
+></A
+><B
+>Char8</B
+> c </TD
+><TD CLASS="declbut"
+><A HREF="src/Data-Monoid-Generator.html#Char8"
+>Source</A
+></TD
+></TR
+></TABLE
+></TD
+></TR
+><TR
+><TD CLASS="body"
+><TABLE CLASS="vanilla" CELLSPACING="0" CELLPADDING="0"
+><TR
+><TD CLASS="ndoc"
+>a <TT
+><A HREF="Data-Monoid-Generator.html#t%3AGenerator"
+>Generator</A
+></TT
+> transformer that treats <TT
+><A HREF="/usr/local/share/doc/ghc/libraries/base/Data-Word.html#t%3AWord8"
+>Word8</A
+></TT
+> as <TT
+><A HREF="/usr/local/share/doc/ghc/libraries/ghc-prim/GHC-Types.html#t%3AChar"
+>Char</A
+></TT
+>
+ This lets you use a ByteString as a <TT
+><A HREF="/usr/local/share/doc/ghc/libraries/ghc-prim/GHC-Types.html#t%3AChar"
+>Char</A
+></TT
+> source without going through a <TT
+><A HREF="/usr/local/share/doc/ghc/libraries/base/Data-Monoid.html#t%3AMonoid"
+>Monoid</A
+></TT
+> transformer like UTF8
+</TD
+></TR
+><TR
+><TD CLASS="section4"
+>Constructors</TD
+></TR
+><TR
+><TD CLASS="body"
+><TABLE CLASS="vanilla" CELLSPACING="5" CELLPADDING="0"
+><TR
+><TD CLASS="arg"
+><A NAME="v%3AChar8"
+></A
+><B
+>Char8</B
+></TD
+><TD CLASS="rdoc"
+></TD
+></TR
+><TR
+><TD CLASS="body" COLSPAN="2"
+><TABLE CLASS="vanilla" CELLSPACING="1" CELLPADDING="0"
+><TR
+><TD CLASS="arg"
+><A NAME="v%3AgetChar8"
+></A
+><B
+>getChar8</B
+> :: c</TD
+><TD CLASS="rdoc"
+></TD
+></TR
+></TABLE
+></TD
+></TR
+></TABLE
+></TD
+></TR
+><TR
+><TD CLASS="section4"
+><IMG SRC="minus.gif" CLASS="coll" ONCLICK="toggle(this,'i:Char8')" ALT="show/hide"
+> Instances</TD
+></TR
+><TR
+><TD CLASS="body"
+><DIV ID="i:Char8" STYLE="display:block;"
+><TABLE CLASS="vanilla" CELLSPACING="1" CELLPADDING="0"
+><TR
+><TD CLASS="decl"
+><A HREF="Data-Monoid-Generator.html#t%3AGenerator"
+>Generator</A
+> (<A HREF="Data-Monoid-Generator.html#t%3AChar8"
+>Char8</A
+> <A HREF="/usr/local/share/doc/ghc/libraries/bytestring/Data-ByteString-Lazy-Internal.html#t%3AByteString"
+>ByteString</A
+>)</TD
+></TR
+><TR
+><TD CLASS="decl"
+><A HREF="Data-Monoid-Generator.html#t%3AGenerator"
+>Generator</A
+> (<A HREF="Data-Monoid-Generator.html#t%3AChar8"
+>Char8</A
+> <A HREF="/usr/local/share/doc/ghc/libraries/bytestring/Data-ByteString-Internal.html#t%3AByteString"
+>ByteString</A
+>)</TD
+></TR
+></TABLE
+></DIV
+></TD
+></TR
+></TABLE
+></TD
+></TR
+><TR
+><TD CLASS="s15"
+></TD
+></TR
+><TR
+><TD CLASS="botbar"
+>Produced by <A HREF="http://www.haskell.org/haddock/"
+>Haddock</A
+> version 2.3.0</TD
+></TR
+></TABLE
+></BODY
+></HTML
+>
addfile ./dist/doc/html/monoids/Data-Monoid-Instances.html
hunk ./dist/doc/html/monoids/Data-Monoid-Instances.html 1
+<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd">
+<!--Rendered using the Haskell Html Library v0.2-->
+<HTML
+><HEAD
+><META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=UTF-8"
+><TITLE
+>Data.Monoid.Instances</TITLE
+><LINK HREF="haddock.css" REL="stylesheet" TYPE="text/css"
+><SCRIPT SRC="haddock-util.js" TYPE="text/javascript"
+></SCRIPT
+></HEAD
+><BODY
+><TABLE CLASS="vanilla" CELLSPACING="0" CELLPADDING="0"
+><TR
+><TD CLASS="topbar"
+><TABLE CLASS="vanilla" CELLSPACING="0" CELLPADDING="0"
+><TR
+><TD
+><IMG SRC="haskell_icon.gif" WIDTH="16" HEIGHT="16" ALT=" "
+></TD
+><TD CLASS="title"
+>monoids-0.1.6: Lots of Monoids</TD
+><TD CLASS="topbut"
+><A HREF="src/Data-Monoid-Instances.html"
+>Source code</A
+></TD
+><TD CLASS="topbut"
+><A HREF="index.html"
+>Contents</A
+></TD
+><TD CLASS="topbut"
+><A HREF="doc-index.html"
+>Index</A
+></TD
+></TR
+></TABLE
+></TD
+></TR
+><TR
+><TD CLASS="modulebar"
+><TABLE CLASS="vanilla" CELLSPACING="0" CELLPADDING="0"
+><TR
+><TD
+><FONT SIZE="6"
+>Data.Monoid.Instances</FONT
+></TD
+><TD ALIGN="right"
+><TABLE CLASS="narrow" CELLSPACING="0" CELLPADDING="0"
+><TR
+><TD CLASS="infohead"
+>Portability</TD
+><TD CLASS="infoval"
+>portable</TD
+></TR
+><TR
+><TD CLASS="infohead"
+>Stability</TD
+><TD CLASS="infoval"
+>experimental</TD
+></TR
+><TR
+><TD CLASS="infohead"
+>Maintainer</TD
+><TD CLASS="infoval"
+>libraries@haskell.org</TD
+></TR
+></TABLE
+></TD
+></TR
+></TABLE
+></TD
+></TR
+><TR
+><TD CLASS="s15"
+></TD
+></TR
+><TR
+><TD CLASS="section1"
+>Description</TD
+></TR
+><TR
+><TD CLASS="doc"
+><P
+>A collection of orphan instance declarations for Monoids that should
+ eventually be pushed back down to the source packages.
+</P
+><P
+>Every package that uses these instances includes this package internally.
+</P
+><P
+>Includes:
+</P
+><UL
+><LI
+> <TT
+><A HREF="/usr/local/share/doc/ghc/libraries/base/Data-Monoid.html#t%3AMonoid"
+>Monoid</A
+></TT
+> instances for the <TT
+><A HREF="/usr/local/share/doc/ghc/libraries/base/Control-Monad.html#t%3AMonad"
+>Monad</A
+></TT
+> transformers from the mtl package
+</LI
+><LI
+> A <TT
+><A HREF="/usr/local/share/doc/ghc/libraries/base/Data-Monoid.html#t%3AMonoid"
+>Monoid</A
+></TT
+> instance for the <TT
+>ParsecT</TT
+> <TT
+><A HREF="/usr/local/share/doc/ghc/libraries/base/Control-Monad.html#t%3AMonad"
+>Monad</A
+></TT
+> from parsec-3.
+</LI
+><LI
+> <TT
+><A HREF="/usr/local/share/doc/ghc/libraries/base/Data-String.html#t%3AIsString"
+>IsString</A
+></TT
+> instances for tuples of <TT
+><A HREF="/usr/local/share/doc/ghc/libraries/base/Data-String.html#t%3AIsString"
+>IsString</A
+></TT
+> for overloaded string support.
+</LI
+><LI
+> A <TT
+><A HREF="/usr/local/share/doc/ghc/libraries/base/Data-Monoid.html#t%3AMonoid"
+>Monoid</A
+></TT
+> instance for the <TT
+>FingerTree</TT
+> in the fingertree package 
+</LI
+></UL
+><P
+>This module is automatically included everywhere this functionality is required
+ within this package. You should only have to import this module yourself if you 
+ want these instances for your own purposes.
+</P
+></TD
+></TR
+><TR
+><TD CLASS="s15"
+></TD
+></TR
+><TR
+><TD CLASS="s15"
+></TD
+></TR
+><TR
+><TD CLASS="s15"
+></TD
+></TR
+><TR
+><TD CLASS="botbar"
+>Produced by <A HREF="http://www.haskell.org/haddock/"
+>Haddock</A
+> version 2.3.0</TD
+></TR
+></TABLE
+></BODY
+></HTML
+>
addfile ./dist/doc/html/monoids/Data-Monoid-Lexical-RunLengthEncoding.html
hunk ./dist/doc/html/monoids/Data-Monoid-Lexical-RunLengthEncoding.html 1
+<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd">
+<!--Rendered using the Haskell Html Library v0.2-->
+<HTML
+><HEAD
+><META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=UTF-8"
+><TITLE
+>Data.Monoid.Lexical.RunLengthEncoding</TITLE
+><LINK HREF="haddock.css" REL="stylesheet" TYPE="text/css"
+><SCRIPT SRC="haddock-util.js" TYPE="text/javascript"
+></SCRIPT
+></HEAD
+><BODY
+><TABLE CLASS="vanilla" CELLSPACING="0" CELLPADDING="0"
+><TR
+><TD CLASS="topbar"
+><TABLE CLASS="vanilla" CELLSPACING="0" CELLPADDING="0"
+><TR
+><TD
+><IMG SRC="haskell_icon.gif" WIDTH="16" HEIGHT="16" ALT=" "
+></TD
+><TD CLASS="title"
+>monoids-0.1.6: Lots of Monoids</TD
+><TD CLASS="topbut"
+><A HREF="src/Data-Monoid-Lexical-RunLengthEncoding.html"
+>Source code</A
+></TD
+><TD CLASS="topbut"
+><A HREF="index.html"
+>Contents</A
+></TD
+><TD CLASS="topbut"
+><A HREF="doc-index.html"
+>Index</A
+></TD
+></TR
+></TABLE
+></TD
+></TR
+><TR
+><TD CLASS="modulebar"
+><TABLE CLASS="vanilla" CELLSPACING="0" CELLPADDING="0"
+><TR
+><TD
+><FONT SIZE="6"
+>Data.Monoid.Lexical.RunLengthEncoding</FONT
+></TD
+><TD ALIGN="right"
+><TABLE CLASS="narrow" CELLSPACING="0" CELLPADDING="0"
+><TR
+><TD CLASS="infohead"
+>Portability</TD
+><TD CLASS="infoval"
+>non-portable (MPTCs)</TD
+></TR
+><TR
+><TD CLASS="infohead"
+>Stability</TD
+><TD CLASS="infoval"
+>experimental</TD
+></TR
+><TR
+><TD CLASS="infohead"
+>Maintainer</TD
+><TD CLASS="infoval"
+>libraries@haskell.org</TD
+></TR
+></TABLE
+></TD
+></TR
+></TABLE
+></TD
+></TR
+><TR
+><TD CLASS="s15"
+></TD
+></TR
+><TR
+><TD CLASS="section1"
+>Description</TD
+></TR
+><TR
+><TD CLASS="doc"
+>A simple <TT
+><A HREF="/usr/local/share/doc/ghc/libraries/base/Data-Monoid.html#t%3AMonoid"
+>Monoid</A
+></TT
+> transformer that turns any monoidal <TT
+><A HREF="Data-Monoid-Reducer.html#t%3AReducer"
+>Reducer</A
+></TT
+> into a
+ a reducer that expects to be supplied both a run length <TT
+>n</TT
+> with each item
+ and which efficiently exponentiates the result of <TT
+><A HREF="Data-Monoid-Reducer.html#v%3Aunit"
+>unit</A
+></TT
+> <TT
+>n</TT
+> times through 
+ <TT
+><A HREF="Data-Monoid-Combinators.html#v%3Areplicate"
+>replicate</A
+></TT
+>.
+</TD
+></TR
+><TR
+><TD CLASS="s15"
+></TD
+></TR
+><TR
+><TD CLASS="s15"
+></TD
+></TR
+><TR
+><TD CLASS="section1"
+>Documentation</TD
+></TR
+><TR
+><TD CLASS="s15"
+></TD
+></TR
+><TR
+><TD CLASS="decl"
+>module <A HREF="Data-Monoid-Reducer.html"
+>Data.Monoid.Reducer</A
+></TD
+></TR
+><TR
+><TD CLASS="s15"
+></TD
+></TR
+><TR
+><TD CLASS="topdecl"
+><TABLE CLASS="declbar"
+><TR
+><TD CLASS="declname"
+><SPAN CLASS="keyword"
+>newtype</SPAN
+>  <A NAME="t%3ARLE"
+></A
+><B
+>RLE</B
+> n m </TD
+><TD CLASS="declbut"
+><A HREF="src/Data-Monoid-Lexical-RunLengthEncoding.html#RLE"
+>Source</A
+></TD
+></TR
+></TABLE
+></TD
+></TR
+><TR
+><TD CLASS="body"
+><TABLE CLASS="vanilla" CELLSPACING="0" CELLPADDING="0"
+><TR
+><TD CLASS="section4"
+>Constructors</TD
+></TR
+><TR
+><TD CLASS="body"
+><TABLE CLASS="vanilla" CELLSPACING="5" CELLPADDING="0"
+><TR
+><TD CLASS="arg"
+><A NAME="v%3ARLE"
+></A
+><B
+>RLE</B
+></TD
+><TD CLASS="rdoc"
+></TD
+></TR
+><TR
+><TD CLASS="body" COLSPAN="2"
+><TABLE CLASS="vanilla" CELLSPACING="1" CELLPADDING="0"
+><TR
+><TD CLASS="arg"
+><A NAME="v%3AgetRLE"
+></A
+><B
+>getRLE</B
+> :: m</TD
+><TD CLASS="rdoc"
+></TD
+></TR
+></TABLE
+></TD
+></TR
+></TABLE
+></TD
+></TR
+><TR
+><TD CLASS="section4"
+><IMG SRC="minus.gif" CLASS="coll" ONCLICK="toggle(this,'i:RLE')" ALT="show/hide"
+> Instances</TD
+></TR
+><TR
+><TD CLASS="body"
+><DIV ID="i:RLE" STYLE="display:block;"
+><TABLE CLASS="vanilla" CELLSPACING="1" CELLPADDING="0"
+><TR
+><TD CLASS="decl"
+>(<A HREF="/usr/local/share/doc/ghc/libraries/base/Prelude.html#t%3AIntegral"
+>Integral</A
+> n, <A HREF="/usr/local/share/doc/ghc/libraries/base/Data-Monoid.html#t%3AMonoid"
+>Monoid</A
+> m) =&gt; <A HREF="/usr/local/share/doc/ghc/libraries/base/Data-Monoid.html#t%3AMonoid"
+>Monoid</A
+> (<A HREF="Data-Monoid-Lexical-RunLengthEncoding.html#t%3ARLE"
+>RLE</A
+> n m)</TD
+></TR
+><TR
+><TD CLASS="decl"
+>(<A HREF="/usr/local/share/doc/ghc/libraries/base/Prelude.html#t%3AIntegral"
+>Integral</A
+> n, <A HREF="Data-Monoid-Reducer.html#t%3AReducer"
+>Reducer</A
+> c m) =&gt; <A HREF="Data-Monoid-Reducer.html#t%3AReducer"
+>Reducer</A
+> ((,) n c) (<A HREF="Data-Monoid-Lexical-RunLengthEncoding.html#t%3ARLE"
+>RLE</A
+> n m)</TD
+></TR
+></TABLE
+></DIV
+></TD
+></TR
+></TABLE
+></TD
+></TR
+><TR
+><TD CLASS="s15"
+></TD
+></TR
+><TR
+><TD CLASS="botbar"
+>Produced by <A HREF="http://www.haskell.org/haddock/"
+>Haddock</A
+> version 2.3.0</TD
+></TR
+></TABLE
+></BODY
+></HTML
+>
addfile ./dist/doc/html/monoids/Data-Monoid-Lexical-SourcePosition.html
hunk ./dist/doc/html/monoids/Data-Monoid-Lexical-SourcePosition.html 1
+<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd">
+<!--Rendered using the Haskell Html Library v0.2-->
+<HTML
+><HEAD
+><META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=UTF-8"
+><TITLE
+>Data.Monoid.Lexical.SourcePosition</TITLE
+><LINK HREF="haddock.css" REL="stylesheet" TYPE="text/css"
+><SCRIPT SRC="haddock-util.js" TYPE="text/javascript"
+></SCRIPT
+></HEAD
+><BODY
+><TABLE CLASS="vanilla" CELLSPACING="0" CELLPADDING="0"
+><TR
+><TD CLASS="topbar"
+><TABLE CLASS="vanilla" CELLSPACING="0" CELLPADDING="0"
+><TR
+><TD
+><IMG SRC="haskell_icon.gif" WIDTH="16" HEIGHT="16" ALT=" "
+></TD
+><TD CLASS="title"
+>monoids-0.1.6: Lots of Monoids</TD
+><TD CLASS="topbut"
+><A HREF="src/Data-Monoid-Lexical-SourcePosition.html"
+>Source code</A
+></TD
+><TD CLASS="topbut"
+><A HREF="index.html"
+>Contents</A
+></TD
+><TD CLASS="topbut"
+><A HREF="doc-index.html"
+>Index</A
+></TD
+></TR
+></TABLE
+></TD
+></TR
+><TR
+><TD CLASS="modulebar"
+><TABLE CLASS="vanilla" CELLSPACING="0" CELLPADDING="0"
+><TR
+><TD
+><FONT SIZE="6"
+>Data.Monoid.Lexical.SourcePosition</FONT
+></TD
+><TD ALIGN="right"
+><TABLE CLASS="narrow" CELLSPACING="0" CELLPADDING="0"
+><TR
+><TD CLASS="infohead"
+>Portability</TD
+><TD CLASS="infoval"
+>non-portable (MPTCs, OverloadedStrings)</TD
+></TR
+><TR
+><TD CLASS="infohead"
+>Stability</TD
+><TD CLASS="infoval"
+>experimental</TD
+></TR
+><TR
+><TD CLASS="infohead"
+>Maintainer</TD
+><TD CLASS="infoval"
+>libraries@haskell.org</TD
+></TR
+></TABLE
+></TD
+></TR
+></TABLE
+></TD
+></TR
+><TR
+><TD CLASS="s15"
+></TD
+></TR
+><TR
+><TD CLASS="section1"
+>Description</TD
+></TR
+><TR
+><TD CLASS="doc"
+><P
+>Incrementally determine locations in a source file through local information
+ This allows for efficient recomputation of line #s and token locations
+ while the file is being interactively updated by storing this as a supplemental
+ measure on a FingerTree.
+</P
+><P
+>The general idea is to use this as part of a measure in a FingerTree so you can
+ use <TT
+><A HREF="/usr/local/share/doc/ghc/libraries/base/Data-Monoid.html#v%3Amappend"
+>mappend</A
+></TT
+> to prepend a <TT
+><A HREF="Data-Monoid-Lexical-SourcePosition.html#v%3AstartOfFile"
+>startOfFile</A
+></TT
+> with the file information.
+</P
+></TD
+></TR
+><TR
+><TD CLASS="s15"
+></TD
+></TR
+><TR
+><TD CLASS="section1"
+>Synopsis</TD
+></TR
+><TR
+><TD CLASS="s15"
+></TD
+></TR
+><TR
+><TD CLASS="body"
+><TABLE CLASS="vanilla" CELLSPACING="0" CELLPADDING="0"
+><TR
+><TD CLASS="decl"
+>module <A HREF="Data-Monoid-Reducer-Char.html"
+>Data.Monoid.Reducer.Char</A
+></TD
+></TR
+><TR
+><TD CLASS="s8"
+></TD
+></TR
+><TR
+><TD CLASS="decl"
+><A HREF="#v%3AnextTab"
+>nextTab</A
+> :: <A HREF="/usr/local/share/doc/ghc/libraries/ghc-prim/GHC-Types.html#t%3AInt"
+>Int</A
+> -&gt; <A HREF="/usr/local/share/doc/ghc/libraries/ghc-prim/GHC-Types.html#t%3AInt"
+>Int</A
+></TD
+></TR
+><TR
+><TD CLASS="s8"
+></TD
+></TR
+><TR
+><TD CLASS="decl"
+><SPAN CLASS="keyword"
+>data</SPAN
+>  <A HREF="#t%3ASourcePosition"
+>SourcePosition</A
+> file</TD
+></TR
+><TR
+><TD CLASS="s8"
+></TD
+></TR
+><TR
+><TD CLASS="decl"
+><SPAN CLASS="keyword"
+>type</SPAN
+> <A HREF="#t%3ASourceLine"
+>SourceLine</A
+> = <A HREF="/usr/local/share/doc/ghc/libraries/ghc-prim/GHC-Types.html#t%3AInt"
+>Int</A
+></TD
+></TR
+><TR
+><TD CLASS="s8"
+></TD
+></TR
+><TR
+><TD CLASS="decl"
+><SPAN CLASS="keyword"
+>type</SPAN
+> <A HREF="#t%3ASourceColumn"
+>SourceColumn</A
+> = <A HREF="/usr/local/share/doc/ghc/libraries/ghc-prim/GHC-Types.html#t%3AInt"
+>Int</A
+></TD
+></TR
+><TR
+><TD CLASS="s8"
+></TD
+></TR
+><TR
+><TD CLASS="decl"
+><A HREF="#v%3AsourceLine"
+>sourceLine</A
+> ::  <A HREF="Data-Monoid-Lexical-SourcePosition.html#t%3ASourcePosition"
+>SourcePosition</A
+> f -&gt; <A HREF="/usr/local/share/doc/ghc/libraries/base/Data-Maybe.html#t%3AMaybe"
+>Maybe</A
+> <A HREF="Data-Monoid-Lexical-SourcePosition.html#t%3ASourceLine"
+>SourceLine</A
+></TD
+></TR
+><TR
+><TD CLASS="s8"
+></TD
+></TR
+><TR
+><TD CLASS="decl"
+><A HREF="#v%3AsourceColumn"
+>sourceColumn</A
+> ::  <A HREF="Data-Monoid-Lexical-SourcePosition.html#t%3ASourcePosition"
+>SourcePosition</A
+> f -&gt; <A HREF="/usr/local/share/doc/ghc/libraries/base/Data-Maybe.html#t%3AMaybe"
+>Maybe</A
+> <A HREF="Data-Monoid-Lexical-SourcePosition.html#t%3ASourceColumn"
+>SourceColumn</A
+></TD
+></TR
+><TR
+><TD CLASS="s8"
+></TD
+></TR
+><TR
+><TD CLASS="decl"
+><A HREF="#v%3AstartOfFile"
+>startOfFile</A
+> ::  f -&gt; <A HREF="Data-Monoid-Lexical-SourcePosition.html#t%3ASourcePosition"
+>SourcePosition</A
+> f</TD
+></TR
+><TR
+><TD CLASS="s8"
+></TD
+></TR
+><TR
+><TD CLASS="decl"
+><A HREF="#v%3AshowSourcePosition"
+>showSourcePosition</A
+> :: <A HREF="Data-Monoid-Lexical-SourcePosition.html#t%3ASourcePosition"
+>SourcePosition</A
+> <A HREF="/usr/local/share/doc/ghc/libraries/base/Data-Char.html#t%3AString"
+>String</A
+> -&gt; <A HREF="/usr/local/share/doc/ghc/libraries/base/Data-Char.html#t%3AString"
+>String</A
+></TD
+></TR
+></TABLE
+></TD
+></TR
+><TR
+><TD CLASS="s15"
+></TD
+></TR
+><TR
+><TD CLASS="section1"
+>Documentation</TD
+></TR
+><TR
+><TD CLASS="s15"
+></TD
+></TR
+><TR
+><TD CLASS="decl"
+>module <A HREF="Data-Monoid-Reducer-Char.html"
+>Data.Monoid.Reducer.Char</A
+></TD
+></TR
+><TR
+><TD CLASS="s15"
+></TD
+></TR
+><TR
+><TD CLASS="topdecl"
+><TABLE CLASS="declbar"
+><TR
+><TD CLASS="declname"
+><A NAME="v%3AnextTab"
+></A
+><B
+>nextTab</B
+> :: <A HREF="/usr/local/share/doc/ghc/libraries/ghc-prim/GHC-Types.html#t%3AInt"
+>Int</A
+> -&gt; <A HREF="/usr/local/share/doc/ghc/libraries/ghc-prim/GHC-Types.html#t%3AInt"
+>Int</A
+></TD
+><TD CLASS="declbut"
+><A HREF="src/Data-Monoid-Lexical-SourcePosition.html#nextTab"
+>Source</A
+></TD
+></TR
+></TABLE
+></TD
+></TR
+><TR
+><TD CLASS="doc"
+>Compute the location of the next standard 8-column aligned tab
+</TD
+></TR
+><TR
+><TD CLASS="s15"
+></TD
+></TR
+><TR
+><TD CLASS="topdecl"
+><TABLE CLASS="declbar"
+><TR
+><TD CLASS="declname"
+><SPAN CLASS="keyword"
+>data</SPAN
+>  <A NAME="t%3ASourcePosition"
+></A
+><B
+>SourcePosition</B
+> file </TD
+><TD CLASS="declbut"
+><A HREF="src/Data-Monoid-Lexical-SourcePosition.html#SourcePosition"
+>Source</A
+></TD
+></TR
+></TABLE
+></TD
+></TR
+><TR
+><TD CLASS="body"
+><TABLE CLASS="vanilla" CELLSPACING="0" CELLPADDING="0"
+><TR
+><TD CLASS="ndoc"
+>A <TT
+><A HREF="/usr/local/share/doc/ghc/libraries/base/Data-Monoid.html#t%3AMonoid"
+>Monoid</A
+></TT
+> of partial information about locations in a source file.
+   This is polymorphic in the kind of information you want to maintain about each source file.
+</TD
+></TR
+><TR
+><TD CLASS="section4"
+><IMG SRC="minus.gif" CLASS="coll" ONCLICK="toggle(this,'i:SourcePosition')" ALT="show/hide"
+> Instances</TD
+></TR
+><TR
+><TD CLASS="body"
+><DIV ID="i:SourcePosition" STYLE="display:block;"
+><TABLE CLASS="vanilla" CELLSPACING="1" CELLPADDING="0"
+><TR
+><TD CLASS="decl"
+><A HREF="/usr/local/share/doc/ghc/libraries/base/Control-Monad.html#t%3AFunctor"
+>Functor</A
+> <A HREF="Data-Monoid-Lexical-SourcePosition.html#t%3ASourcePosition"
+>SourcePosition</A
+></TD
+></TR
+><TR
+><TD CLASS="decl"
+>Pointed <A HREF="Data-Monoid-Lexical-SourcePosition.html#t%3ASourcePosition"
+>SourcePosition</A
+></TD
+></TR
+><TR
+><TD CLASS="decl"
+>FunctorZero <A HREF="Data-Monoid-Lexical-SourcePosition.html#t%3ASourcePosition"
+>SourcePosition</A
+></TD
+></TR
+><TR
+><TD CLASS="decl"
+>FunctorPlus <A HREF="Data-Monoid-Lexical-SourcePosition.html#t%3ASourcePosition"
+>SourcePosition</A
+></TD
+></TR
+><TR
+><TD CLASS="decl"
+><A HREF="Data-Monoid-Reducer.html#t%3AReducer"
+>Reducer</A
+> <A HREF="/usr/local/share/doc/ghc/libraries/ghc-prim/GHC-Types.html#t%3AChar"
+>Char</A
+> (<A HREF="Data-Monoid-Lexical-SourcePosition.html#t%3ASourcePosition"
+>SourcePosition</A
+> file)</TD
+></TR
+><TR
+><TD CLASS="decl"
+><A HREF="/usr/local/share/doc/ghc/libraries/base/Data-Eq.html#t%3AEq"
+>Eq</A
+> file =&gt; <A HREF="/usr/local/share/doc/ghc/libraries/base/Data-Eq.html#t%3AEq"
+>Eq</A
+> (<A HREF="Data-Monoid-Lexical-SourcePosition.html#t%3ASourcePosition"
+>SourcePosition</A
+> file)</TD
+></TR
+><TR
+><TD CLASS="decl"
+><A HREF="/usr/local/share/doc/ghc/libraries/base/Text-Read.html#t%3ARead"
+>Read</A
+> file =&gt; <A HREF="/usr/local/share/doc/ghc/libraries/base/Text-Read.html#t%3ARead"
+>Read</A
+> (<A HREF="Data-Monoid-Lexical-SourcePosition.html#t%3ASourcePosition"
+>SourcePosition</A
+> file)</TD
+></TR
+><TR
+><TD CLASS="decl"
+><A HREF="/usr/local/share/doc/ghc/libraries/base/Text-Show.html#t%3AShow"
+>Show</A
+> file =&gt; <A HREF="/usr/local/share/doc/ghc/libraries/base/Text-Show.html#t%3AShow"
+>Show</A
+> (<A HREF="Data-Monoid-Lexical-SourcePosition.html#t%3ASourcePosition"
+>SourcePosition</A
+> file)</TD
+></TR
+><TR
+><TD CLASS="decl"
+><A HREF="/usr/local/share/doc/ghc/libraries/base/Data-String.html#t%3AIsString"
+>IsString</A
+> (<A HREF="Data-Monoid-Lexical-SourcePosition.html#t%3ASourcePosition"
+>SourcePosition</A
+> file)</TD
+></TR
+><TR
+><TD CLASS="decl"
+><A HREF="/usr/local/share/doc/ghc/libraries/base/Data-Monoid.html#t%3AMonoid"
+>Monoid</A
+> (<A HREF="Data-Monoid-Lexical-SourcePosition.html#t%3ASourcePosition"
+>SourcePosition</A
+> file)</TD
+></TR
+><TR
+><TD CLASS="decl"
+><A HREF="Data-Monoid-Reducer-Char.html#t%3ACharReducer"
+>CharReducer</A
+> (<A HREF="Data-Monoid-Lexical-SourcePosition.html#t%3ASourcePosition"
+>SourcePosition</A
+> file)</TD
+></TR
+></TABLE
+></DIV
+></TD
+></TR
+></TABLE
+></TD
+></TR
+><TR
+><TD CLASS="s15"
+></TD
+></TR
+><TR
+><TD CLASS="topdecl"
+><TABLE CLASS="declbar"
+><TR
+><TD CLASS="declname"
+><SPAN CLASS="keyword"
+>type</SPAN
+> <A NAME="t%3ASourceLine"
+></A
+><B
+>SourceLine</B
+> = <A HREF="/usr/local/share/doc/ghc/libraries/ghc-prim/GHC-Types.html#t%3AInt"
+>Int</A
+></TD
+><TD CLASS="declbut"
+><A HREF="src/Data-Monoid-Lexical-SourcePosition.html#SourceLine"
+>Source</A
+></TD
+></TR
+></TABLE
+></TD
+></TR
+><TR
+><TD CLASS="s15"
+></TD
+></TR
+><TR
+><TD CLASS="topdecl"
+><TABLE CLASS="declbar"
+><TR
+><TD CLASS="declname"
+><SPAN CLASS="keyword"
+>type</SPAN
+> <A NAME="t%3ASourceColumn"
+></A
+><B
+>SourceColumn</B
+> = <A HREF="/usr/local/share/doc/ghc/libraries/ghc-prim/GHC-Types.html#t%3AInt"
+>Int</A
+></TD
+><TD CLASS="declbut"
+><A HREF="src/Data-Monoid-Lexical-SourcePosition.html#SourceColumn"
+>Source</A
+></TD
+></TR
+></TABLE
+></TD
+></TR
+><TR
+><TD CLASS="s15"
+></TD
+></TR
+><TR
+><TD CLASS="topdecl"
+><TABLE CLASS="declbar"
+><TR
+><TD CLASS="declname"
+><A NAME="v%3AsourceLine"
+></A
+><B
+>sourceLine</B
+> ::  <A HREF="Data-Monoid-Lexical-SourcePosition.html#t%3ASourcePosition"
+>SourcePosition</A
+> f -&gt; <A HREF="/usr/local/share/doc/ghc/libraries/base/Data-Maybe.html#t%3AMaybe"
+>Maybe</A
+> <A HREF="Data-Monoid-Lexical-SourcePosition.html#t%3ASourceLine"
+>SourceLine</A
+></TD
+><TD CLASS="declbut"
+><A HREF="src/Data-Monoid-Lexical-SourcePosition.html#sourceLine"
+>Source</A
+></TD
+></TR
+></TABLE
+></TD
+></TR
+><TR
+><TD CLASS="doc"
+>extract partial information about the current line number if possible
+</TD
+></TR
+><TR
+><TD CLASS="s15"
+></TD
+></TR
+><TR
+><TD CLASS="topdecl"
+><TABLE CLASS="declbar"
+><TR
+><TD CLASS="declname"
+><A NAME="v%3AsourceColumn"
+></A
+><B
+>sourceColumn</B
+> ::  <A HREF="Data-Monoid-Lexical-SourcePosition.html#t%3ASourcePosition"
+>SourcePosition</A
+> f -&gt; <A HREF="/usr/local/share/doc/ghc/libraries/base/Data-Maybe.html#t%3AMaybe"
+>Maybe</A
+> <A HREF="Data-Monoid-Lexical-SourcePosition.html#t%3ASourceColumn"
+>SourceColumn</A
+></TD
+><TD CLASS="declbut"
+><A HREF="src/Data-Monoid-Lexical-SourcePosition.html#sourceColumn"
+>Source</A
+></TD
+></TR
+></TABLE
+></TD
+></TR
+><TR
+><TD CLASS="doc"
+>extract partial information about the current column, even in the absence of knowledge of the source file
+</TD
+></TR
+><TR
+><TD CLASS="s15"
+></TD
+></TR
+><TR
+><TD CLASS="topdecl"
+><TABLE CLASS="declbar"
+><TR
+><TD CLASS="declname"
+><A NAME="v%3AstartOfFile"
+></A
+><B
+>startOfFile</B
+> ::  f -&gt; <A HREF="Data-Monoid-Lexical-SourcePosition.html#t%3ASourcePosition"
+>SourcePosition</A
+> f</TD
+><TD CLASS="declbut"
+><A HREF="src/Data-Monoid-Lexical-SourcePosition.html#startOfFile"
+>Source</A
+></TD
+></TR
+></TABLE
+></TD
+></TR
+><TR
+><TD CLASS="doc"
+>lift information about a source file into a starting <TT
+><A HREF="Data-Monoid-Lexical-SourcePosition.html#t%3ASourcePosition"
+>SourcePosition</A
+></TT
+> for that file
+</TD
+></TR
+><TR
+><TD CLASS="s15"
+></TD
+></TR
+><TR
+><TD CLASS="topdecl"
+><TABLE CLASS="declbar"
+><TR
+><TD CLASS="declname"
+><A NAME="v%3AshowSourcePosition"
+></A
+><B
+>showSourcePosition</B
+> :: <A HREF="Data-Monoid-Lexical-SourcePosition.html#t%3ASourcePosition"
+>SourcePosition</A
+> <A HREF="/usr/local/share/doc/ghc/libraries/base/Data-Char.html#t%3AString"
+>String</A
+> -&gt; <A HREF="/usr/local/share/doc/ghc/libraries/base/Data-Char.html#t%3AString"
+>String</A
+></TD
+><TD CLASS="declbut"
+><A HREF="src/Data-Monoid-Lexical-SourcePosition.html#showSourcePosition"
+>Source</A
+></TD
+></TR
+></TABLE
+></TD
+></TR
+><TR
+><TD CLASS="doc"
+>extract the standard format for an absolute source position
+</TD
+></TR
+><TR
+><TD CLASS="s15"
+></TD
+></TR
+><TR
+><TD CLASS="botbar"
+>Produced by <A HREF="http://www.haskell.org/haddock/"
+>Haddock</A
+> version 2.3.0</TD
+></TR
+></TABLE
+></BODY
+></HTML
+>
addfile ./dist/doc/html/monoids/Data-Monoid-Lexical-UTF8-Decoder.html
hunk ./dist/doc/html/monoids/Data-Monoid-Lexical-UTF8-Decoder.html 1
+<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd">
+<!--Rendered using the Haskell Html Library v0.2-->
+<HTML
+><HEAD
+><META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=UTF-8"
+><TITLE
+>Data.Monoid.Lexical.UTF8.Decoder</TITLE
+><LINK HREF="haddock.css" REL="stylesheet" TYPE="text/css"
+><SCRIPT SRC="haddock-util.js" TYPE="text/javascript"
+></SCRIPT
+></HEAD
+><BODY
+><TABLE CLASS="vanilla" CELLSPACING="0" CELLPADDING="0"
+><TR
+><TD CLASS="topbar"
+><TABLE CLASS="vanilla" CELLSPACING="0" CELLPADDING="0"
+><TR
+><TD
+><IMG SRC="haskell_icon.gif" WIDTH="16" HEIGHT="16" ALT=" "
+></TD
+><TD CLASS="title"
+>monoids-0.1.6: Lots of Monoids</TD
+><TD CLASS="topbut"
+><A HREF="src/Data-Monoid-Lexical-UTF8-Decoder.html"
+>Source code</A
+></TD
+><TD CLASS="topbut"
+><A HREF="index.html"
+>Contents</A
+></TD
+><TD CLASS="topbut"
+><A HREF="doc-index.html"
+>Index</A
+></TD
+></TR
+></TABLE
+></TD
+></TR
+><TR
+><TD CLASS="modulebar"
+><TABLE CLASS="vanilla" CELLSPACING="0" CELLPADDING="0"
+><TR
+><TD
+><FONT SIZE="6"
+>Data.Monoid.Lexical.UTF8.Decoder</FONT
+></TD
+><TD ALIGN="right"
+><TABLE CLASS="narrow" CELLSPACING="0" CELLPADDING="0"
+><TR
+><TD CLASS="infohead"
+>Portability</TD
+><TD CLASS="infoval"
+>non-portable (MPTCs)</TD
+></TR
+><TR
+><TD CLASS="infohead"
+>Stability</TD
+><TD CLASS="infoval"
+>experimental</TD
+></TR
+><TR
+><TD CLASS="infohead"
+>Maintainer</TD
+><TD CLASS="infoval"
+>libraries@haskell.org</TD
+></TR
+></TABLE
+></TD
+></TR
+></TABLE
+></TD
+></TR
+><TR
+><TD CLASS="s15"
+></TD
+></TR
+><TR
+><TD CLASS="section1"
+>Description</TD
+></TR
+><TR
+><TD CLASS="doc"
+><P
+>UTF8 encoded unicode characters can be parsed both forwards and backwards,
+ since the start of each <TT
+><A HREF="/usr/local/share/doc/ghc/libraries/ghc-prim/GHC-Types.html#t%3AChar"
+>Char</A
+></TT
+> is clearly marked. This <TT
+><A HREF="/usr/local/share/doc/ghc/libraries/base/Data-Monoid.html#t%3AMonoid"
+>Monoid</A
+></TT
+> accumulates
+ information about the characters represented and reduces that information
+ using a <TT
+><A HREF="Data-Monoid-Reducer-Char.html#t%3ACharReducer"
+>CharReducer</A
+></TT
+>, which is just a <TT
+><A HREF="Data-Monoid-Reducer.html#t%3AReducer"
+>Reducer</A
+></TT
+> <TT
+><A HREF="/usr/local/share/doc/ghc/libraries/base/Data-Monoid.html#t%3AMonoid"
+>Monoid</A
+></TT
+> that knows what 
+ it wants to do about an <TT
+><A HREF="Data-Monoid-Reducer-Char.html#v%3AinvalidChar"
+>invalidChar</A
+></TT
+> -- a  string of <TT
+><A HREF="/usr/local/share/doc/ghc/libraries/base/Data-Word.html#t%3AWord8"
+>Word8</A
+></TT
+> values that 
+ don't form a valid UTF8 character.
+</P
+><P
+>As this monoid parses chars it just feeds them upstream to the underlying
+ CharReducer. Efficient left-to-right and right-to-left traversals are 
+ supplied so that a lazy ByteString can be parsed efficiently by 
+ chunking it into strict chunks, and batching the traversals over each
+ before stitching the edges together.
+</P
+><P
+>Because this needs to be a <TT
+><A HREF="/usr/local/share/doc/ghc/libraries/base/Data-Monoid.html#t%3AMonoid"
+>Monoid</A
+></TT
+> and should return the exact same result
+ regardless of forward or backwards parsing, it chooses to parse only 
+ canonical UTF8 unlike most Haskell UTF8 parsers, which will blissfully 
+ accept illegal alternative long encodings of a character. 
+</P
+><P
+>This actually fixes a potential class of security issues in some scenarios:
+</P
+><P
+><A HREF="http://prowebdevelopmentblog.com/content/big-overhaul-java-utf-8-charset"
+>http://prowebdevelopmentblog.com/content/big-overhaul-java-utf-8-charset</A
+>
+</P
+><P
+>NB: Due to naive use of a list to track the tail of an unfinished character 
+ this may exhibit <TT
+>O(n^2)</TT
+> behavior parsing backwards along an invalid sequence 
+ of a large number of bytes that all claim to be in the tail of a character.
+</P
+></TD
+></TR
+><TR
+><TD CLASS="s15"
+></TD
+></TR
+><TR
+><TD CLASS="s15"
+></TD
+></TR
+><TR
+><TD CLASS="section1"
+>Documentation</TD
+></TR
+><TR
+><TD CLASS="s15"
+></TD
+></TR
+><TR
+><TD CLASS="decl"
+>module <A HREF="Data-Monoid-Reducer-Char.html"
+>Data.Monoid.Reducer.Char</A
+></TD
+></TR
+><TR
+><TD CLASS="s15"
+></TD
+></TR
+><TR
+><TD CLASS="topdecl"
+><TABLE CLASS="declbar"
+><TR
+><TD CLASS="declname"
+><SPAN CLASS="keyword"
+>data</SPAN
+>  <A NAME="t%3AUTF8"
+></A
+><B
+>UTF8</B
+> m </TD
+><TD CLASS="declbut"
+><A HREF="src/Data-Monoid-Lexical-UTF8-Decoder.html#UTF8"
+>Source</A
+></TD
+></TR
+></TABLE
+></TD
+></TR
+><TR
+><TD CLASS="body"
+><TABLE CLASS="vanilla" CELLSPACING="0" CELLPADDING="0"
+><TR
+><TD CLASS="section4"
+><IMG SRC="minus.gif" CLASS="coll" ONCLICK="toggle(this,'i:UTF8')" ALT="show/hide"
+> Instances</TD
+></TR
+><TR
+><TD CLASS="body"
+><DIV ID="i:UTF8" STYLE="display:block;"
+><TABLE CLASS="vanilla" CELLSPACING="1" CELLPADDING="0"
+><TR
+><TD CLASS="decl"
+><A HREF="/usr/local/share/doc/ghc/libraries/base/Control-Monad.html#t%3AFunctor"
+>Functor</A
+> <A HREF="Data-Monoid-Lexical-UTF8-Decoder.html#t%3AUTF8"
+>UTF8</A
+></TD
+></TR
+><TR
+><TD CLASS="decl"
+>Pointed <A HREF="Data-Monoid-Lexical-UTF8-Decoder.html#t%3AUTF8"
+>UTF8</A
+></TD
+></TR
+><TR
+><TD CLASS="decl"
+><A HREF="Data-Monoid-Reducer-Char.html#t%3ACharReducer"
+>CharReducer</A
+> m =&gt; <A HREF="Data-Monoid-Reducer.html#t%3AReducer"
+>Reducer</A
+> <A HREF="/usr/local/share/doc/ghc/libraries/base/Data-Word.html#t%3AWord8"
+>Word8</A
+> (<A HREF="Data-Monoid-Lexical-UTF8-Decoder.html#t%3AUTF8"
+>UTF8</A
+> m)</TD
+></TR
+><TR
+><TD CLASS="decl"
+><A HREF="Data-Monoid-Reducer-Char.html#t%3ACharReducer"
+>CharReducer</A
+> m =&gt; <A HREF="/usr/local/share/doc/ghc/libraries/base/Data-Monoid.html#t%3AMonoid"
+>Monoid</A
+> (<A HREF="Data-Monoid-Lexical-UTF8-Decoder.html#t%3AUTF8"
+>UTF8</A
+> m)</TD
+></TR
+></TABLE
+></DIV
+></TD
+></TR
+></TABLE
+></TD
+></TR
+><TR
+><TD CLASS="s15"
+></TD
+></TR
+><TR
+><TD CLASS="topdecl"
+><TABLE CLASS="declbar"
+><TR
+><TD CLASS="declname"
+><A NAME="v%3ArunUTF8"
+></A
+><B
+>runUTF8</B
+> :: <A HREF="Data-Monoid-Reducer-Char.html#t%3ACharReducer"
+>CharReducer</A
+> m =&gt; <A HREF="Data-Monoid-Lexical-UTF8-Decoder.html#t%3AUTF8"
+>UTF8</A
+> m -&gt; m</TD
+><TD CLASS="declbut"
+><A HREF="src/Data-Monoid-Lexical-UTF8-Decoder.html#runUTF8"
+>Source</A
+></TD
+></TR
+></TABLE
+></TD
+></TR
+><TR
+><TD CLASS="s15"
+></TD
+></TR
+><TR
+><TD CLASS="botbar"
+>Produced by <A HREF="http://www.haskell.org/haddock/"
+>Haddock</A
+> version 2.3.0</TD
+></TR
+></TABLE
+></BODY
+></HTML
+>
addfile ./dist/doc/html/monoids/Data-Monoid-Lexical-Words.html
hunk ./dist/doc/html/monoids/Data-Monoid-Lexical-Words.html 1
+<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd">
+<!--Rendered using the Haskell Html Library v0.2-->
+<HTML
+><HEAD
+><META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=UTF-8"
+><TITLE
+>Data.Monoid.Lexical.Words</TITLE
+><LINK HREF="haddock.css" REL="stylesheet" TYPE="text/css"
+><SCRIPT SRC="haddock-util.js" TYPE="text/javascript"
+></SCRIPT
+></HEAD
+><BODY
+><TABLE CLASS="vanilla" CELLSPACING="0" CELLPADDING="0"
+><TR
+><TD CLASS="topbar"
+><TABLE CLASS="vanilla" CELLSPACING="0" CELLPADDING="0"
+><TR
+><TD
+><IMG SRC="haskell_icon.gif" WIDTH="16" HEIGHT="16" ALT=" "
+></TD
+><TD CLASS="title"
+>monoids-0.1.6: Lots of Monoids</TD
+><TD CLASS="topbut"
+><A HREF="src/Data-Monoid-Lexical-Words.html"
+>Source code</A
+></TD
+><TD CLASS="topbut"
+><A HREF="index.html"
+>Contents</A
+></TD
+><TD CLASS="topbut"
+><A HREF="doc-index.html"
+>Index</A
+></TD
+></TR
+></TABLE
+></TD
+></TR
+><TR
+><TD CLASS="modulebar"
+><TABLE CLASS="vanilla" CELLSPACING="0" CELLPADDING="0"
+><TR
+><TD
+><FONT SIZE="6"
+>Data.Monoid.Lexical.Words</FONT
+></TD
+><TD ALIGN="right"
+><TABLE CLASS="narrow" CELLSPACING="0" CELLPADDING="0"
+><TR
+><TD CLASS="infohead"
+>Portability</TD
+><TD CLASS="infoval"
+>non-portable (MPTCs, OverloadedStrings)</TD
+></TR
+><TR
+><TD CLASS="infohead"
+>Stability</TD
+><TD CLASS="infoval"
+>experimental</TD
+></TR
+><TR
+><TD CLASS="infohead"
+>Maintainer</TD
+><TD CLASS="infoval"
+>libraries@haskell.org</TD
+></TR
+></TABLE
+></TD
+></TR
+></TABLE
+></TD
+></TR
+><TR
+><TD CLASS="s15"
+></TD
+></TR
+><TR
+><TD
+><TABLE CLASS="vanilla" CELLSPACING="0" CELLPADDING="0"
+><TR
+><TD CLASS="section4"
+><B
+>Contents</B
+></TD
+></TR
+><TR
+><TD
+><DL
+><DT
+><A HREF="#1"
+>Words
+</A
+></DT
+><DT
+><A HREF="#2"
+>Lines
+</A
+></DT
+></DL
+></TD
+></TR
+></TABLE
+></TD
+></TR
+><TR
+><TD CLASS="s15"
+></TD
+></TR
+><TR
+><TD CLASS="section1"
+>Description</TD
+></TR
+><TR
+><TD CLASS="doc"
+>A simple demonstration of tokenizing a <TT
+><A HREF="Data-Monoid-Generator.html#t%3AGenerator"
+>Generator</A
+></TT
+> into distinct words 
+ and/or lines using a word-parsing <TT
+><A HREF="/usr/local/share/doc/ghc/libraries/base/Data-Monoid.html#t%3AMonoid"
+>Monoid</A
+></TT
+> that accumulates partial 
+ information about words and then builds up a token stream.
+</TD
+></TR
+><TR
+><TD CLASS="s15"
+></TD
+></TR
+><TR
+><TD CLASS="section1"
+>Synopsis</TD
+></TR
+><TR
+><TD CLASS="s15"
+></TD
+></TR
+><TR
+><TD CLASS="body"
+><TABLE CLASS="vanilla" CELLSPACING="0" CELLPADDING="0"
+><TR
+><TD CLASS="decl"
+>module <A HREF="Data-Monoid-Reducer-Char.html"
+>Data.Monoid.Reducer.Char</A
+></TD
+></TR
+><TR
+><TD CLASS="s8"
+></TD
+></TR
+><TR
+><TD CLASS="decl"
+><SPAN CLASS="keyword"
+>data</SPAN
+>  <A HREF="#t%3AWords"
+>Words</A
+> m</TD
+></TR
+><TR
+><TD CLASS="s8"
+></TD
+></TR
+><TR
+><TD CLASS="decl"
+><A HREF="#v%3ArunWords"
+>runWords</A
+> ::  <A HREF="Data-Monoid-Lexical-Words.html#t%3AWords"
+>Words</A
+> m -&gt; [m]</TD
+></TR
+><TR
+><TD CLASS="s8"
+></TD
+></TR
+><TR
+><TD CLASS="decl"
+><SPAN CLASS="keyword"
+>data</SPAN
+>  <A HREF="#t%3AUnspaced"
+>Unspaced</A
+> m</TD
+></TR
+><TR
+><TD CLASS="s8"
+></TD
+></TR
+><TR
+><TD CLASS="decl"
+><A HREF="#v%3AwordsFrom"
+>wordsFrom</A
+> :: (<A HREF="Data-Monoid-Generator.html#t%3AGenerator"
+>Generator</A
+> c, <A HREF="Data-Monoid-Generator.html#t%3AElem"
+>Elem</A
+> c ~ <A HREF="/usr/local/share/doc/ghc/libraries/ghc-prim/GHC-Types.html#t%3AChar"
+>Char</A
+>, <A HREF="Data-Monoid-Reducer.html#t%3AReducer"
+>Reducer</A
+> <A HREF="/usr/local/share/doc/ghc/libraries/ghc-prim/GHC-Types.html#t%3AChar"
+>Char</A
+> m, <A HREF="Data-Monoid-Reducer.html#t%3AReducer"
+>Reducer</A
+> <A HREF="/usr/local/share/doc/ghc/libraries/ghc-prim/GHC-Types.html#t%3AChar"
+>Char</A
+> n, <A HREF="Data-Monoid-Reducer.html#t%3AReducer"
+>Reducer</A
+> <A HREF="/usr/local/share/doc/ghc/libraries/ghc-prim/GHC-Types.html#t%3AChar"
+>Char</A
+> o) =&gt; m -&gt; c -&gt; [(m, n, o)]</TD
+></TR
+><TR
+><TD CLASS="s8"
+></TD
+></TR
+><TR
+><TD CLASS="decl"
+><SPAN CLASS="keyword"
+>data</SPAN
+>  <A HREF="#t%3ALines"
+>Lines</A
+> m</TD
+></TR
+><TR
+><TD CLASS="s8"
+></TD
+></TR
+><TR
+><TD CLASS="decl"
+><A HREF="#v%3ArunLines"
+>runLines</A
+> ::  <A HREF="Data-Monoid-Lexical-Words.html#t%3ALines"
+>Lines</A
+> m -&gt; [m]</TD
+></TR
+><TR
+><TD CLASS="s8"
+></TD
+></TR
+><TR
+><TD CLASS="decl"
+><SPAN CLASS="keyword"
+>data</SPAN
+>  <A HREF="#t%3AUnlined"
+>Unlined</A
+> m</TD
+></TR
+><TR
+><TD CLASS="s8"
+></TD
+></TR
+><TR
+><TD CLASS="decl"
+><A HREF="#v%3AlinesFrom"
+>linesFrom</A
+> :: (<A HREF="Data-Monoid-Generator.html#t%3AGenerator"
+>Generator</A
+> c, <A HREF="Data-Monoid-Generator.html#t%3AElem"
+>Elem</A
+> c ~ <A HREF="/usr/local/share/doc/ghc/libraries/ghc-prim/GHC-Types.html#t%3AChar"
+>Char</A
+>, <A HREF="Data-Monoid-Reducer.html#t%3AReducer"
+>Reducer</A
+> <A HREF="/usr/local/share/doc/ghc/libraries/ghc-prim/GHC-Types.html#t%3AChar"
+>Char</A
+> m, <A HREF="Data-Monoid-Reducer.html#t%3AReducer"
+>Reducer</A
+> <A HREF="/usr/local/share/doc/ghc/libraries/ghc-prim/GHC-Types.html#t%3AChar"
+>Char</A
+> n, <A HREF="Data-Monoid-Reducer.html#t%3AReducer"
+>Reducer</A
+> <A HREF="/usr/local/share/doc/ghc/libraries/ghc-prim/GHC-Types.html#t%3AChar"
+>Char</A
+> o) =&gt; m -&gt; c -&gt; [(m, n, o)]</TD
+></TR
+></TABLE
+></TD
+></TR
+><TR
+><TD CLASS="s15"
+></TD
+></TR
+><TR
+><TD CLASS="section1"
+>Documentation</TD
+></TR
+><TR
+><TD CLASS="s15"
+></TD
+></TR
+><TR
+><TD CLASS="decl"
+>module <A HREF="Data-Monoid-Reducer-Char.html"
+>Data.Monoid.Reducer.Char</A
+></TD
+></TR
+><TR
+><TD CLASS="s15"
+></TD
+></TR
+><TR
+><TD CLASS="section1"
+><A NAME="1"
+>Words
+</A
+></TD
+></TR
+><TR
+><TD CLASS="s15"
+></TD
+></TR
+><TR
+><TD CLASS="topdecl"
+><TABLE CLASS="declbar"
+><TR
+><TD CLASS="declname"
+><SPAN CLASS="keyword"
+>data</SPAN
+>  <A NAME="t%3AWords"
+></A
+><B
+>Words</B
+> m </TD
+><TD CLASS="declbut"
+><A HREF="src/Data-Monoid-Lexical-Words.html#Words"
+>Source</A
+></TD
+></TR
+></TABLE
+></TD
+></TR
+><TR
+><TD CLASS="body"
+><TABLE CLASS="vanilla" CELLSPACING="0" CELLPADDING="0"
+><TR
+><TD CLASS="ndoc"
+>A <TT
+><A HREF="Data-Monoid-Reducer-Char.html#t%3ACharReducer"
+>CharReducer</A
+></TT
+> transformer that breaks a <TT
+><A HREF="/usr/local/share/doc/ghc/libraries/ghc-prim/GHC-Types.html#t%3AChar"
+>Char</A
+></TT
+> <TT
+><A HREF="Data-Monoid-Generator.html#t%3AGenerator"
+>Generator</A
+></TT
+> into distinct words, feeding a <TT
+><A HREF="/usr/local/share/doc/ghc/libraries/ghc-prim/GHC-Types.html#t%3AChar"
+>Char</A
+></TT
+> <TT
+><A HREF="Data-Monoid-Reducer.html#t%3AReducer"
+>Reducer</A
+></TT
+> each line in turn
+</TD
+></TR
+><TR
+><TD CLASS="section4"
+><IMG SRC="minus.gif" CLASS="coll" ONCLICK="toggle(this,'i:Words')" ALT="show/hide"
+> Instances</TD
+></TR
+><TR
+><TD CLASS="body"
+><DIV ID="i:Words" STYLE="display:block;"
+><TABLE CLASS="vanilla" CELLSPACING="1" CELLPADDING="0"
+><TR
+><TD CLASS="decl"
+><A HREF="/usr/local/share/doc/ghc/libraries/base/Control-Monad.html#t%3AFunctor"
+>Functor</A
+> <A HREF="Data-Monoid-Lexical-Words.html#t%3AWords"
+>Words</A
+></TD
+></TR
+><TR
+><TD CLASS="decl"
+><A HREF="Data-Monoid-Reducer.html#t%3AReducer"
+>Reducer</A
+> <A HREF="/usr/local/share/doc/ghc/libraries/ghc-prim/GHC-Types.html#t%3AChar"
+>Char</A
+> m =&gt; <A HREF="Data-Monoid-Reducer.html#t%3AReducer"
+>Reducer</A
+> <A HREF="/usr/local/share/doc/ghc/libraries/ghc-prim/GHC-Types.html#t%3AChar"
+>Char</A
+> (<A HREF="Data-Monoid-Lexical-Words.html#t%3AWords"
+>Words</A
+> m)</TD
+></TR
+><TR
+><TD CLASS="decl"
+><A HREF="/usr/local/share/doc/ghc/libraries/base/Text-Read.html#t%3ARead"
+>Read</A
+> m =&gt; <A HREF="/usr/local/share/doc/ghc/libraries/base/Text-Read.html#t%3ARead"
+>Read</A
+> (<A HREF="Data-Monoid-Lexical-Words.html#t%3AWords"
+>Words</A
+> m)</TD
+></TR
+><TR
+><TD CLASS="decl"
+><A HREF="/usr/local/share/doc/ghc/libraries/base/Text-Show.html#t%3AShow"
+>Show</A
+> m =&gt; <A HREF="/usr/local/share/doc/ghc/libraries/base/Text-Show.html#t%3AShow"
+>Show</A
+> (<A HREF="Data-Monoid-Lexical-Words.html#t%3AWords"
+>Words</A
+> m)</TD
+></TR
+><TR
+><TD CLASS="decl"
+><A HREF="Data-Monoid-Reducer.html#t%3AReducer"
+>Reducer</A
+> <A HREF="/usr/local/share/doc/ghc/libraries/ghc-prim/GHC-Types.html#t%3AChar"
+>Char</A
+> m =&gt; <A HREF="/usr/local/share/doc/ghc/libraries/base/Data-String.html#t%3AIsString"
+>IsString</A
+> (<A HREF="Data-Monoid-Lexical-Words.html#t%3AWords"
+>Words</A
+> m)</TD
+></TR
+><TR
+><TD CLASS="decl"
+><A HREF="/usr/local/share/doc/ghc/libraries/base/Data-Monoid.html#t%3AMonoid"
+>Monoid</A
+> m =&gt; <A HREF="/usr/local/share/doc/ghc/libraries/base/Data-Monoid.html#t%3AMonoid"
+>Monoid</A
+> (<A HREF="Data-Monoid-Lexical-Words.html#t%3AWords"
+>Words</A
+> m)</TD
+></TR
+><TR
+><TD CLASS="decl"
+><A HREF="Data-Monoid-Reducer-Char.html#t%3ACharReducer"
+>CharReducer</A
+> m =&gt; <A HREF="Data-Monoid-Reducer-Char.html#t%3ACharReducer"
+>CharReducer</A
+> (<A HREF="Data-Monoid-Lexical-Words.html#t%3AWords"
+>Words</A
+> m)</TD
+></TR
+></TABLE
+></DIV
+></TD
+></TR
+></TABLE
+></TD
+></TR
+><TR
+><TD CLASS="s15"
+></TD
+></TR
+><TR
+><TD CLASS="topdecl"
+><TABLE CLASS="declbar"
+><TR
+><TD CLASS="declname"
+><A NAME="v%3ArunWords"
+></A
+><B
+>runWords</B
+> ::  <A HREF="Data-Monoid-Lexical-Words.html#t%3AWords"
+>Words</A
+> m -&gt; [m]</TD
+><TD CLASS="declbut"
+><A HREF="src/Data-Monoid-Lexical-Words.html#runWords"
+>Source</A
+></TD
+></TR
+></TABLE
+></TD
+></TR
+><TR
+><TD CLASS="doc"
+>Extract the matched words from the <TT
+><A HREF="Data-Monoid-Lexical-Words.html#t%3AWords"
+>Words</A
+></TT
+> <TT
+><A HREF="/usr/local/share/doc/ghc/libraries/base/Data-Monoid.html#t%3AMonoid"
+>Monoid</A
+></TT
+>
+</TD
+></TR
+><TR
+><TD CLASS="s15"
+></TD
+></TR
+><TR
+><TD CLASS="topdecl"
+><TABLE CLASS="declbar"
+><TR
+><TD CLASS="declname"
+><SPAN CLASS="keyword"
+>data</SPAN
+>  <A NAME="t%3AUnspaced"
+></A
+><B
+>Unspaced</B
+> m </TD
+><TD CLASS="declbut"
+><A HREF="src/Data-Monoid-Lexical-Words.html#Unspaced"
+>Source</A
+></TD
+></TR
+></TABLE
+></TD
+></TR
+><TR
+><TD CLASS="body"
+><TABLE CLASS="vanilla" CELLSPACING="0" CELLPADDING="0"
+><TR
+><TD CLASS="ndoc"
+>A <TT
+><A HREF="Data-Monoid-Reducer-Char.html#t%3ACharReducer"
+>CharReducer</A
+></TT
+> transformer that strips out any character matched by <TT
+><A HREF="/usr/local/share/doc/ghc/libraries/base/GHC-Unicode.html#v%3AisSpace"
+>isSpace</A
+></TT
+>
+</TD
+></TR
+><TR
+><TD CLASS="section4"
+><IMG SRC="minus.gif" CLASS="coll" ONCLICK="toggle(this,'i:Unspaced')" ALT="show/hide"
+> Instances</TD
+></TR
+><TR
+><TD CLASS="body"
+><DIV ID="i:Unspaced" STYLE="display:block;"
+><TABLE CLASS="vanilla" CELLSPACING="1" CELLPADDING="0"
+><TR
+><TD CLASS="decl"
+><A HREF="/usr/local/share/doc/ghc/libraries/base/Control-Monad.html#t%3AFunctor"
+>Functor</A
+> <A HREF="Data-Monoid-Lexical-Words.html#t%3AUnspaced"
+>Unspaced</A
+></TD
+></TR
+><TR
+><TD CLASS="decl"
+>Pointed <A HREF="Data-Monoid-Lexical-Words.html#t%3AUnspaced"
+>Unspaced</A
+></TD
+></TR
+><TR
+><TD CLASS="decl"
+>Copointed <A HREF="Data-Monoid-Lexical-Words.html#t%3AUnspaced"
+>Unspaced</A
+></TD
+></TR
+><TR
+><TD CLASS="decl"
+><A HREF="Data-Monoid-Reducer.html#t%3AReducer"
+>Reducer</A
+> <A HREF="/usr/local/share/doc/ghc/libraries/ghc-prim/GHC-Types.html#t%3AChar"
+>Char</A
+> m =&gt; <A HREF="Data-Monoid-Reducer.html#t%3AReducer"
+>Reducer</A
+> <A HREF="/usr/local/share/doc/ghc/libraries/ghc-prim/GHC-Types.html#t%3AChar"
+>Char</A
+> (<A HREF="Data-Monoid-Lexical-Words.html#t%3AUnspaced"
+>Unspaced</A
+> m)</TD
+></TR
+><TR
+><TD CLASS="decl"
+><A HREF="/usr/local/share/doc/ghc/libraries/base/Data-Eq.html#t%3AEq"
+>Eq</A
+> m =&gt; <A HREF="/usr/local/share/doc/ghc/libraries/base/Data-Eq.html#t%3AEq"
+>Eq</A
+> (<A HREF="Data-Monoid-Lexical-Words.html#t%3AUnspaced"
+>Unspaced</A
+> m)</TD
+></TR
+><TR
+><TD CLASS="decl"
+><A HREF="/usr/local/share/doc/ghc/libraries/base/Data-Ord.html#t%3AOrd"
+>Ord</A
+> m =&gt; <A HREF="/usr/local/share/doc/ghc/libraries/base/Data-Ord.html#t%3AOrd"
+>Ord</A
+> (<A HREF="Data-Monoid-Lexical-Words.html#t%3AUnspaced"
+>Unspaced</A
+> m)</TD
+></TR
+><TR
+><TD CLASS="decl"
+><A HREF="/usr/local/share/doc/ghc/libraries/base/Text-Read.html#t%3ARead"
+>Read</A
+> m =&gt; <A HREF="/usr/local/share/doc/ghc/libraries/base/Text-Read.html#t%3ARead"
+>Read</A
+> (<A HREF="Data-Monoid-Lexical-Words.html#t%3AUnspaced"
+>Unspaced</A
+> m)</TD
+></TR
+><TR
+><TD CLASS="decl"
+><A HREF="/usr/local/share/doc/ghc/libraries/base/Text-Show.html#t%3AShow"
+>Show</A
+> m =&gt; <A HREF="/usr/local/share/doc/ghc/libraries/base/Text-Show.html#t%3AShow"
+>Show</A
+> (<A HREF="Data-Monoid-Lexical-Words.html#t%3AUnspaced"
+>Unspaced</A
+> m)</TD
+></TR
+><TR
+><TD CLASS="decl"
+><A HREF="Data-Monoid-Reducer.html#t%3AReducer"
+>Reducer</A
+> <A HREF="/usr/local/share/doc/ghc/libraries/ghc-prim/GHC-Types.html#t%3AChar"
+>Char</A
+> m =&gt; <A HREF="/usr/local/share/doc/ghc/libraries/base/Data-String.html#t%3AIsString"
+>IsString</A
+> (<A HREF="Data-Monoid-Lexical-Words.html#t%3AUnspaced"
+>Unspaced</A
+> m)</TD
+></TR
+><TR
+><TD CLASS="decl"
+><A HREF="/usr/local/share/doc/ghc/libraries/base/Data-Monoid.html#t%3AMonoid"
+>Monoid</A
+> m =&gt; <A HREF="/usr/local/share/doc/ghc/libraries/base/Data-Monoid.html#t%3AMonoid"
+>Monoid</A
+> (<A HREF="Data-Monoid-Lexical-Words.html#t%3AUnspaced"
+>Unspaced</A
+> m)</TD
+></TR
+><TR
+><TD CLASS="decl"
+><A HREF="Data-Monoid-Reducer-Char.html#t%3ACharReducer"
+>CharReducer</A
+> m =&gt; <A HREF="Data-Monoid-Reducer-Char.html#t%3ACharReducer"
+>CharReducer</A
+> (<A HREF="Data-Monoid-Lexical-Words.html#t%3AUnspaced"
+>Unspaced</A
+> m)</TD
+></TR
+></TABLE
+></DIV
+></TD
+></TR
+></TABLE
+></TD
+></TR
+><TR
+><TD CLASS="s15"
+></TD
+></TR
+><TR
+><TD CLASS="topdecl"
+><TABLE CLASS="declbar"
+><TR
+><TD CLASS="declname"
+><A NAME="v%3AwordsFrom"
+></A
+><B
+>wordsFrom</B
+> :: (<A HREF="Data-Monoid-Generator.html#t%3AGenerator"
+>Generator</A
+> c, <A HREF="Data-Monoid-Generator.html#t%3AElem"
+>Elem</A
+> c ~ <A HREF="/usr/local/share/doc/ghc/libraries/ghc-prim/GHC-Types.html#t%3AChar"
+>Char</A
+>, <A HREF="Data-Monoid-Reducer.html#t%3AReducer"
+>Reducer</A
+> <A HREF="/usr/local/share/doc/ghc/libraries/ghc-prim/GHC-Types.html#t%3AChar"
+>Char</A
+> m, <A HREF="Data-Monoid-Reducer.html#t%3AReducer"
+>Reducer</A
+> <A HREF="/usr/local/share/doc/ghc/libraries/ghc-prim/GHC-Types.html#t%3AChar"
+>Char</A
+> n, <A HREF="Data-Monoid-Reducer.html#t%3AReducer"
+>Reducer</A
+> <A HREF="/usr/local/share/doc/ghc/libraries/ghc-prim/GHC-Types.html#t%3AChar"
+>Char</A
+> o) =&gt; m -&gt; c -&gt; [(m, n, o)]</TD
+><TD CLASS="declbut"
+><A HREF="src/Data-Monoid-Lexical-Words.html#wordsFrom"
+>Source</A
+></TD
+></TR
+></TABLE
+></TD
+></TR
+><TR
+><TD CLASS="doc"
+>Utility function to extract words using accumulator, inside-word, and until-next-word monoids
+</TD
+></TR
+><TR
+><TD CLASS="s15"
+></TD
+></TR
+><TR
+><TD CLASS="section1"
+><A NAME="2"
+>Lines
+</A
+></TD
+></TR
+><TR
+><TD CLASS="s15"
+></TD
+></TR
+><TR
+><TD CLASS="topdecl"
+><TABLE CLASS="declbar"
+><TR
+><TD CLASS="declname"
+><SPAN CLASS="keyword"
+>data</SPAN
+>  <A NAME="t%3ALines"
+></A
+><B
+>Lines</B
+> m </TD
+><TD CLASS="declbut"
+><A HREF="src/Data-Monoid-Lexical-Words.html#Lines"
+>Source</A
+></TD
+></TR
+></TABLE
+></TD
+></TR
+><TR
+><TD CLASS="body"
+><TABLE CLASS="vanilla" CELLSPACING="0" CELLPADDING="0"
+><TR
+><TD CLASS="ndoc"
+>A <TT
+><A HREF="Data-Monoid-Reducer-Char.html#t%3ACharReducer"
+>CharReducer</A
+></TT
+> transformer that breaks a <TT
+><A HREF="/usr/local/share/doc/ghc/libraries/ghc-prim/GHC-Types.html#t%3AChar"
+>Char</A
+></TT
+> <TT
+><A HREF="Data-Monoid-Generator.html#t%3AGenerator"
+>Generator</A
+></TT
+> into distinct lines, feeding a <TT
+><A HREF="/usr/local/share/doc/ghc/libraries/ghc-prim/GHC-Types.html#t%3AChar"
+>Char</A
+></TT
+> <TT
+><A HREF="Data-Monoid-Reducer.html#t%3AReducer"
+>Reducer</A
+></TT
+> each line in turn.
+</TD
+></TR
+><TR
+><TD CLASS="section4"
+><IMG SRC="minus.gif" CLASS="coll" ONCLICK="toggle(this,'i:Lines')" ALT="show/hide"
+> Instances</TD
+></TR
+><TR
+><TD CLASS="body"
+><DIV ID="i:Lines" STYLE="display:block;"
+><TABLE CLASS="vanilla" CELLSPACING="1" CELLPADDING="0"
+><TR
+><TD CLASS="decl"
+><A HREF="/usr/local/share/doc/ghc/libraries/base/Control-Monad.html#t%3AFunctor"
+>Functor</A
+> <A HREF="Data-Monoid-Lexical-Words.html#t%3ALines"
+>Lines</A
+></TD
+></TR
+><TR
+><TD CLASS="decl"
+><A HREF="Data-Monoid-Reducer.html#t%3AReducer"
+>Reducer</A
+> <A HREF="/usr/local/share/doc/ghc/libraries/ghc-prim/GHC-Types.html#t%3AChar"
+>Char</A
+> m =&gt; <A HREF="Data-Monoid-Reducer.html#t%3AReducer"
+>Reducer</A
+> <A HREF="/usr/local/share/doc/ghc/libraries/ghc-prim/GHC-Types.html#t%3AChar"
+>Char</A
+> (<A HREF="Data-Monoid-Lexical-Words.html#t%3ALines"
+>Lines</A
+> m)</TD
+></TR
+><TR
+><TD CLASS="decl"
+><A HREF="/usr/local/share/doc/ghc/libraries/base/Text-Read.html#t%3ARead"
+>Read</A
+> m =&gt; <A HREF="/usr/local/share/doc/ghc/libraries/base/Text-Read.html#t%3ARead"
+>Read</A
+> (<A HREF="Data-Monoid-Lexical-Words.html#t%3ALines"
+>Lines</A
+> m)</TD
+></TR
+><TR
+><TD CLASS="decl"
+><A HREF="/usr/local/share/doc/ghc/libraries/base/Text-Show.html#t%3AShow"
+>Show</A
+> m =&gt; <A HREF="/usr/local/share/doc/ghc/libraries/base/Text-Show.html#t%3AShow"
+>Show</A
+> (<A HREF="Data-Monoid-Lexical-Words.html#t%3ALines"
+>Lines</A
+> m)</TD
+></TR
+><TR
+><TD CLASS="decl"
+><A HREF="Data-Monoid-Reducer.html#t%3AReducer"
+>Reducer</A
+> <A HREF="/usr/local/share/doc/ghc/libraries/ghc-prim/GHC-Types.html#t%3AChar"
+>Char</A
+> m =&gt; <A HREF="/usr/local/share/doc/ghc/libraries/base/Data-String.html#t%3AIsString"
+>IsString</A
+> (<A HREF="Data-Monoid-Lexical-Words.html#t%3ALines"
+>Lines</A
+> m)</TD
+></TR
+><TR
+><TD CLASS="decl"
+><A HREF="/usr/local/share/doc/ghc/libraries/base/Data-Monoid.html#t%3AMonoid"
+>Monoid</A
+> m =&gt; <A HREF="/usr/local/share/doc/ghc/libraries/base/Data-Monoid.html#t%3AMonoid"
+>Monoid</A
+> (<A HREF="Data-Monoid-Lexical-Words.html#t%3ALines"
+>Lines</A
+> m)</TD
+></TR
+><TR
+><TD CLASS="decl"
+><A HREF="Data-Monoid-Reducer-Char.html#t%3ACharReducer"
+>CharReducer</A
+> m =&gt; <A HREF="Data-Monoid-Reducer-Char.html#t%3ACharReducer"
+>CharReducer</A
+> (<A HREF="Data-Monoid-Lexical-Words.html#t%3ALines"
+>Lines</A
+> m)</TD
+></TR
+></TABLE
+></DIV
+></TD
+></TR
+></TABLE
+></TD
+></TR
+><TR
+><TD CLASS="s15"
+></TD
+></TR
+><TR
+><TD CLASS="topdecl"
+><TABLE CLASS="declbar"
+><TR
+><TD CLASS="declname"
+><A NAME="v%3ArunLines"
+></A
+><B
+>runLines</B
+> ::  <A HREF="Data-Monoid-Lexical-Words.html#t%3ALines"
+>Lines</A
+> m -&gt; [m]</TD
+><TD CLASS="declbut"
+><A HREF="src/Data-Monoid-Lexical-Words.html#runLines"
+>Source</A
+></TD
+></TR
+></TABLE
+></TD
+></TR
+><TR
+><TD CLASS="doc"
+>Extract the matched lines from the <TT
+><A HREF="Data-Monoid-Lexical-Words.html#t%3ALines"
+>Lines</A
+></TT
+> <TT
+><A HREF="/usr/local/share/doc/ghc/libraries/base/Data-Monoid.html#t%3AMonoid"
+>Monoid</A
+></TT
+>
+</TD
+></TR
+><TR
+><TD CLASS="s15"
+></TD
+></TR
+><TR
+><TD CLASS="topdecl"
+><TABLE CLASS="declbar"
+><TR
+><TD CLASS="declname"
+><SPAN CLASS="keyword"
+>data</SPAN
+>  <A NAME="t%3AUnlined"
+></A
+><B
+>Unlined</B
+> m </TD
+><TD CLASS="declbut"
+><A HREF="src/Data-Monoid-Lexical-Words.html#Unlined"
+>Source</A
+></TD
+></TR
+></TABLE
+></TD
+></TR
+><TR
+><TD CLASS="body"
+><TABLE CLASS="vanilla" CELLSPACING="0" CELLPADDING="0"
+><TR
+><TD CLASS="ndoc"
+>A <TT
+><A HREF="Data-Monoid-Reducer-Char.html#t%3ACharReducer"
+>CharReducer</A
+></TT
+> transformer that strips out newlines
+</TD
+></TR
+><TR
+><TD CLASS="section4"
+><IMG SRC="minus.gif" CLASS="coll" ONCLICK="toggle(this,'i:Unlined')" ALT="show/hide"
+> Instances</TD
+></TR
+><TR
+><TD CLASS="body"
+><DIV ID="i:Unlined" STYLE="display:block;"
+><TABLE CLASS="vanilla" CELLSPACING="1" CELLPADDING="0"
+><TR
+><TD CLASS="decl"
+><A HREF="/usr/local/share/doc/ghc/libraries/base/Control-Monad.html#t%3AFunctor"
+>Functor</A
+> <A HREF="Data-Monoid-Lexical-Words.html#t%3AUnlined"
+>Unlined</A
+></TD
+></TR
+><TR
+><TD CLASS="decl"
+>Pointed <A HREF="Data-Monoid-Lexical-Words.html#t%3AUnlined"
+>Unlined</A
+></TD
+></TR
+><TR
+><TD CLASS="decl"
+>Copointed <A HREF="Data-Monoid-Lexical-Words.html#t%3AUnlined"
+>Unlined</A
+></TD
+></TR
+><TR
+><TD CLASS="decl"
+><A HREF="Data-Monoid-Reducer.html#t%3AReducer"
+>Reducer</A
+> <A HREF="/usr/local/share/doc/ghc/libraries/ghc-prim/GHC-Types.html#t%3AChar"
+>Char</A
+> m =&gt; <A HREF="Data-Monoid-Reducer.html#t%3AReducer"
+>Reducer</A
+> <A HREF="/usr/local/share/doc/ghc/libraries/ghc-prim/GHC-Types.html#t%3AChar"
+>Char</A
+> (<A HREF="Data-Monoid-Lexical-Words.html#t%3AUnlined"
+>Unlined</A
+> m)</TD
+></TR
+><TR
+><TD CLASS="decl"
+><A HREF="/usr/local/share/doc/ghc/libraries/base/Data-Eq.html#t%3AEq"
+>Eq</A
+> m =&gt; <A HREF="/usr/local/share/doc/ghc/libraries/base/Data-Eq.html#t%3AEq"
+>Eq</A
+> (<A HREF="Data-Monoid-Lexical-Words.html#t%3AUnlined"
+>Unlined</A
+> m)</TD
+></TR
+><TR
+><TD CLASS="decl"
+><A HREF="/usr/local/share/doc/ghc/libraries/base/Data-Ord.html#t%3AOrd"
+>Ord</A
+> m =&gt; <A HREF="/usr/local/share/doc/ghc/libraries/base/Data-Ord.html#t%3AOrd"
+>Ord</A
+> (<A HREF="Data-Monoid-Lexical-Words.html#t%3AUnlined"
+>Unlined</A
+> m)</TD
+></TR
+><TR
+><TD CLASS="decl"
+><A HREF="/usr/local/share/doc/ghc/libraries/base/Text-Read.html#t%3ARead"
+>Read</A
+> m =&gt; <A HREF="/usr/local/share/doc/ghc/libraries/base/Text-Read.html#t%3ARead"
+>Read</A
+> (<A HREF="Data-Monoid-Lexical-Words.html#t%3AUnlined"
+>Unlined</A
+> m)</TD
+></TR
+><TR
+><TD CLASS="decl"
+><A HREF="/usr/local/share/doc/ghc/libraries/base/Text-Show.html#t%3AShow"
+>Show</A
+> m =&gt; <A HREF="/usr/local/share/doc/ghc/libraries/base/Text-Show.html#t%3AShow"
+>Show</A
+> (<A HREF="Data-Monoid-Lexical-Words.html#t%3AUnlined"
+>Unlined</A
+> m)</TD
+></TR
+><TR
+><TD CLASS="decl"
+><A HREF="Data-Monoid-Reducer.html#t%3AReducer"
+>Reducer</A
+> <A HREF="/usr/local/share/doc/ghc/libraries/ghc-prim/GHC-Types.html#t%3AChar"
+>Char</A
+> m =&gt; <A HREF="/usr/local/share/doc/ghc/libraries/base/Data-String.html#t%3AIsString"
+>IsString</A
+> (<A HREF="Data-Monoid-Lexical-Words.html#t%3AUnlined"
+>Unlined</A
+> m)</TD
+></TR
+><TR
+><TD CLASS="decl"
+><A HREF="/usr/local/share/doc/ghc/libraries/base/Data-Monoid.html#t%3AMonoid"
+>Monoid</A
+> m =&gt; <A HREF="/usr/local/share/doc/ghc/libraries/base/Data-Monoid.html#t%3AMonoid"
+>Monoid</A
+> (<A HREF="Data-Monoid-Lexical-Words.html#t%3AUnlined"
+>Unlined</A
+> m)</TD
+></TR
+><TR
+><TD CLASS="decl"
+><A HREF="Data-Monoid-Reducer-Char.html#t%3ACharReducer"
+>CharReducer</A
+> m =&gt; <A HREF="Data-Monoid-Reducer-Char.html#t%3ACharReducer"
+>CharReducer</A
+> (<A HREF="Data-Monoid-Lexical-Words.html#t%3AUnlined"
+>Unlined</A
+> m)</TD
+></TR
+></TABLE
+></DIV
+></TD
+></TR
+></TABLE
+></TD
+></TR
+><TR
+><TD CLASS="s15"
+></TD
+></TR
+><TR
+><TD CLASS="topdecl"
+><TABLE CLASS="declbar"
+><TR
+><TD CLASS="declname"
+><A NAME="v%3AlinesFrom"
+></A
+><B
+>linesFrom</B
+> :: (<A HREF="Data-Monoid-Generator.html#t%3AGenerator"
+>Generator</A
+> c, <A HREF="Data-Monoid-Generator.html#t%3AElem"
+>Elem</A
+> c ~ <A HREF="/usr/local/share/doc/ghc/libraries/ghc-prim/GHC-Types.html#t%3AChar"
+>Char</A
+>, <A HREF="Data-Monoid-Reducer.html#t%3AReducer"
+>Reducer</A
+> <A HREF="/usr/local/share/doc/ghc/libraries/ghc-prim/GHC-Types.html#t%3AChar"
+>Char</A
+> m, <A HREF="Data-Monoid-Reducer.html#t%3AReducer"
+>Reducer</A
+> <A HREF="/usr/local/share/doc/ghc/libraries/ghc-prim/GHC-Types.html#t%3AChar"
+>Char</A
+> n, <A HREF="Data-Monoid-Reducer.html#t%3AReducer"
+>Reducer</A
+> <A HREF="/usr/local/share/doc/ghc/libraries/ghc-prim/GHC-Types.html#t%3AChar"
+>Char</A
+> o) =&gt; m -&gt; c -&gt; [(m, n, o)]</TD
+><TD CLASS="declbut"
+><A HREF="src/Data-Monoid-Lexical-Words.html#linesFrom"
+>Source</A
+></TD
+></TR
+></TABLE
+></TD
+></TR
+><TR
+><TD CLASS="doc"
+>Utility function to extract lines using accumulator, inside-line, and until-next-line monoids
+</TD
+></TR
+><TR
+><TD CLASS="s15"
+></TD
+></TR
+><TR
+><TD CLASS="botbar"
+>Produced by <A HREF="http://www.haskell.org/haddock/"
+>Haddock</A
+> version 2.3.0</TD
+></TR
+></TABLE
+></BODY
+></HTML
+>
addfile ./dist/doc/html/monoids/Data-Monoid-Monad.html
hunk ./dist/doc/html/monoids/Data-Monoid-Monad.html 1
+<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd">
+<!--Rendered using the Haskell Html Library v0.2-->
+<HTML
+><HEAD
+><META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=UTF-8"
+><TITLE
+>Data.Monoid.Monad</TITLE
+><LINK HREF="haddock.css" REL="stylesheet" TYPE="text/css"
+><SCRIPT SRC="haddock-util.js" TYPE="text/javascript"
+></SCRIPT
+></HEAD
+><BODY
+><TABLE CLASS="vanilla" CELLSPACING="0" CELLPADDING="0"
+><TR
+><TD CLASS="topbar"
+><TABLE CLASS="vanilla" CELLSPACING="0" CELLPADDING="0"
+><TR
+><TD
+><IMG SRC="haskell_icon.gif" WIDTH="16" HEIGHT="16" ALT=" "
+></TD
+><TD CLASS="title"
+>monoids-0.1.6: Lots of Monoids</TD
+><TD CLASS="topbut"
+><A HREF="src/Data-Monoid-Monad.html"
+>Source code</A
+></TD
+><TD CLASS="topbut"
+><A HREF="index.html"
+>Contents</A
+></TD
+><TD CLASS="topbut"
+><A HREF="doc-index.html"
+>Index</A
+></TD
+></TR
+></TABLE
+></TD
+></TR
+><TR
+><TD CLASS="modulebar"
+><TABLE CLASS="vanilla" CELLSPACING="0" CELLPADDING="0"
+><TR
+><TD
+><FONT SIZE="6"
+>Data.Monoid.Monad</FONT
+></TD
+><TD ALIGN="right"
+><TABLE CLASS="narrow" CELLSPACING="0" CELLPADDING="0"
+><TR
+><TD CLASS="infohead"
+>Portability</TD
+><TD CLASS="infoval"
+>non-portable (MPTCs)</TD
+></TR
+><TR
+><TD CLASS="infohead"
+>Stability</TD
+><TD CLASS="infoval"
+>experimental</TD
+></TR
+><TR
+><TD CLASS="infohead"
+>Maintainer</TD
+><TD CLASS="infoval"
+>libraries@haskell.org</TD
+></TR
+></TABLE
+></TD
+></TR
+></TABLE
+></TD
+></TR
+><TR
+><TD CLASS="s15"
+></TD
+></TR
+><TR
+><TD
+><TABLE CLASS="vanilla" CELLSPACING="0" CELLPADDING="0"
+><TR
+><TD CLASS="section4"
+><B
+>Contents</B
+></TD
+></TR
+><TR
+><TD
+><DL
+><DT
+><A HREF="#1"
+>Actions
+</A
+></DT
+><DT
+><A HREF="#2"
+>Wrapped Monads
+</A
+></DT
+></DL
+></TD
+></TR
+></TABLE
+></TD
+></TR
+><TR
+><TD CLASS="s15"
+></TD
+></TR
+><TR
+><TD CLASS="section1"
+>Description</TD
+></TR
+><TR
+><TD CLASS="doc"
+><TT
+><A HREF="/usr/local/share/doc/ghc/libraries/base/Data-Monoid.html#t%3AMonoid"
+>Monoid</A
+></TT
+> instances for working with a <TT
+><A HREF="/usr/local/share/doc/ghc/libraries/base/Control-Monad.html#t%3AMonad"
+>Monad</A
+></TT
+>
+</TD
+></TR
+><TR
+><TD CLASS="s15"
+></TD
+></TR
+><TR
+><TD CLASS="section1"
+>Synopsis</TD
+></TR
+><TR
+><TD CLASS="s15"
+></TD
+></TR
+><TR
+><TD CLASS="body"
+><TABLE CLASS="vanilla" CELLSPACING="0" CELLPADDING="0"
+><TR
+><TD CLASS="decl"
+>module <A HREF="Data-Monoid-Reducer.html"
+>Data.Monoid.Reducer</A
+></TD
+></TR
+><TR
+><TD CLASS="s8"
+></TD
+></TR
+><TR
+><TD CLASS="decl"
+>module <A HREF="Data-Ring-Semi-Near.html"
+>Data.Ring.Semi.Near</A
+></TD
+></TR
+><TR
+><TD CLASS="s8"
+></TD
+></TR
+><TR
+><TD CLASS="decl"
+><SPAN CLASS="keyword"
+>newtype</SPAN
+>  <A HREF="#t%3AAction"
+>Action</A
+> m = <A HREF="#v%3AAction"
+>Action</A
+> {<TABLE CLASS="vanilla" CELLSPACING="0" CELLPADDING="0"
+><TR
+><TD CLASS="recfield"
+><A HREF="#v%3AgetAction"
+>getAction</A
+> :: m ()</TD
+></TR
+></TABLE
+>}</TD
+></TR
+><TR
+><TD CLASS="s8"
+></TD
+></TR
+><TR
+><TD CLASS="decl"
+><A HREF="#v%3AsnocAction"
+>snocAction</A
+> :: <A HREF="Data-Monoid-Reducer.html#t%3AReducer"
+>Reducer</A
+> (m ()) (<A HREF="Data-Monoid-Monad.html#t%3AAction"
+>Action</A
+> m) =&gt; <A HREF="Data-Monoid-Monad.html#t%3AAction"
+>Action</A
+> m -&gt; m () -&gt; <A HREF="Data-Monoid-Monad.html#t%3AAction"
+>Action</A
+> m</TD
+></TR
+><TR
+><TD CLASS="s8"
+></TD
+></TR
+><TR
+><TD CLASS="decl"
+><SPAN CLASS="keyword"
+>newtype</SPAN
+>  <A HREF="#t%3AWrappedMonad"
+>WrappedMonad</A
+> m a = <A HREF="#v%3AWrappedMonad"
+>WrappedMonad</A
+> {<TABLE CLASS="vanilla" CELLSPACING="0" CELLPADDING="0"
+><TR
+><TD CLASS="recfield"
+><A HREF="#v%3AgetWrappedMonad"
+>getWrappedMonad</A
+> :: m a</TD
+></TR
+></TABLE
+>}</TD
+></TR
+></TABLE
+></TD
+></TR
+><TR
+><TD CLASS="s15"
+></TD
+></TR
+><TR
+><TD CLASS="section1"
+>Documentation</TD
+></TR
+><TR
+><TD CLASS="s15"
+></TD
+></TR
+><TR
+><TD CLASS="decl"
+>module <A HREF="Data-Monoid-Reducer.html"
+>Data.Monoid.Reducer</A
+></TD
+></TR
+><TR
+><TD CLASS="s15"
+></TD
+></TR
+><TR
+><TD CLASS="decl"
+>module <A HREF="Data-Ring-Semi-Near.html"
+>Data.Ring.Semi.Near</A
+></TD
+></TR
+><TR
+><TD CLASS="s15"
+></TD
+></TR
+><TR
+><TD CLASS="section1"
+><A NAME="1"
+>Actions
+</A
+></TD
+></TR
+><TR
+><TD CLASS="s15"
+></TD
+></TR
+><TR
+><TD CLASS="topdecl"
+><TABLE CLASS="declbar"
+><TR
+><TD CLASS="declname"
+><SPAN CLASS="keyword"
+>newtype</SPAN
+>  <A NAME="t%3AAction"
+></A
+><B
+>Action</B
+> m </TD
+><TD CLASS="declbut"
+><A HREF="src/Data-Monoid-Monad.html#Action"
+>Source</A
+></TD
+></TR
+></TABLE
+></TD
+></TR
+><TR
+><TD CLASS="body"
+><TABLE CLASS="vanilla" CELLSPACING="0" CELLPADDING="0"
+><TR
+><TD CLASS="ndoc"
+>An <TT
+><A HREF="Data-Monoid-Monad.html#v%3AAction"
+>Action</A
+></TT
+> uses glues together <TT
+><A HREF="/usr/local/share/doc/ghc/libraries/base/Control-Monad.html#t%3AMonad"
+>Monad</A
+></TT
+> actions with (&gt;&gt;)
+   in the manner of <TT
+><A HREF="/usr/local/share/doc/ghc/libraries/base/Control-Monad.html#v%3AmapM_"
+>mapM_</A
+></TT
+> from <A HREF="Data-Foldable.html"
+>Data.Foldable</A
+>. Any values returned by 
+   reduced actions are discarded.
+</TD
+></TR
+><TR
+><TD CLASS="section4"
+>Constructors</TD
+></TR
+><TR
+><TD CLASS="body"
+><TABLE CLASS="vanilla" CELLSPACING="5" CELLPADDING="0"
+><TR
+><TD CLASS="arg"
+><A NAME="v%3AAction"
+></A
+><B
+>Action</B
+></TD
+><TD CLASS="rdoc"
+></TD
+></TR
+><TR
+><TD CLASS="body" COLSPAN="2"
+><TABLE CLASS="vanilla" CELLSPACING="1" CELLPADDING="0"
+><TR
+><TD CLASS="arg"
+><A NAME="v%3AgetAction"
+></A
+><B
+>getAction</B
+> :: m ()</TD
+><TD CLASS="rdoc"
+></TD
+></TR
+></TABLE
+></TD
+></TR
+></TABLE
+></TD
+></TR
+><TR
+><TD CLASS="section4"
+><IMG SRC="minus.gif" CLASS="coll" ONCLICK="toggle(this,'i:Action')" ALT="show/hide"
+> Instances</TD
+></TR
+><TR
+><TD CLASS="body"
+><DIV ID="i:Action" STYLE="display:block;"
+><TABLE CLASS="vanilla" CELLSPACING="1" CELLPADDING="0"
+><TR
+><TD CLASS="decl"
+><A HREF="/usr/local/share/doc/ghc/libraries/base/Control-Monad.html#t%3AMonad"
+>Monad</A
+> m =&gt; <A HREF="/usr/local/share/doc/ghc/libraries/base/Data-Monoid.html#t%3AMonoid"
+>Monoid</A
+> (<A HREF="Data-Monoid-Monad.html#t%3AAction"
+>Action</A
+> m)</TD
+></TR
+><TR
+><TD CLASS="decl"
+><A HREF="/usr/local/share/doc/ghc/libraries/base/Control-Monad.html#t%3AMonad"
+>Monad</A
+> m =&gt; <A HREF="Data-Monoid-Reducer.html#t%3AReducer"
+>Reducer</A
+> (m a) (<A HREF="Data-Monoid-Monad.html#t%3AAction"
+>Action</A
+> m)</TD
+></TR
+></TABLE
+></DIV
+></TD
+></TR
+></TABLE
+></TD
+></TR
+><TR
+><TD CLASS="s15"
+></TD
+></TR
+><TR
+><TD CLASS="topdecl"
+><TABLE CLASS="declbar"
+><TR
+><TD CLASS="declname"
+><A NAME="v%3AsnocAction"
+></A
+><B
+>snocAction</B
+> :: <A HREF="Data-Monoid-Reducer.html#t%3AReducer"
+>Reducer</A
+> (m ()) (<A HREF="Data-Monoid-Monad.html#t%3AAction"
+>Action</A
+> m) =&gt; <A HREF="Data-Monoid-Monad.html#t%3AAction"
+>Action</A
+> m -&gt; m () -&gt; <A HREF="Data-Monoid-Monad.html#t%3AAction"
+>Action</A
+> m</TD
+><TD CLASS="declbut"
+><A HREF="src/Data-Monoid-Monad.html#snocAction"
+>Source</A
+></TD
+></TR
+></TABLE
+></TD
+></TR
+><TR
+><TD CLASS="doc"
+>Efficiently avoid needlessly rebinding when using <TT
+><A HREF="Data-Monoid-Reducer.html#v%3Asnoc"
+>snoc</A
+></TT
+> on an action that already returns ()
+   A rewrite rule automatically applies this when possible
+</TD
+></TR
+><TR
+><TD CLASS="s15"
+></TD
+></TR
+><TR
+><TD CLASS="section1"
+><A NAME="2"
+>Wrapped Monads
+</A
+></TD
+></TR
+><TR
+><TD CLASS="s15"
+></TD
+></TR
+><TR
+><TD CLASS="topdecl"
+><TABLE CLASS="declbar"
+><TR
+><TD CLASS="declname"
+><SPAN CLASS="keyword"
+>newtype</SPAN
+>  <A NAME="t%3AWrappedMonad"
+></A
+><B
+>WrappedMonad</B
+> m a </TD
+><TD CLASS="declbut"
+><A HREF="src/Data-Monoid-Monad.html#WrappedMonad"
+>Source</A
+></TD
+></TR
+></TABLE
+></TD
+></TR
+><TR
+><TD CLASS="body"
+><TABLE CLASS="vanilla" CELLSPACING="0" CELLPADDING="0"
+><TR
+><TD CLASS="ndoc"
+>A <TT
+><A HREF="Data-Monoid-Monad.html#v%3AWrappedMonad"
+>WrappedMonad</A
+></TT
+> turns any <TT
+><A HREF="/usr/local/share/doc/ghc/libraries/base/Control-Monad.html#t%3AMonadPlus"
+>MonadPlus</A
+></TT
+> instance into a <TT
+><A HREF="/usr/local/share/doc/ghc/libraries/base/Data-Monoid.html#t%3AMonoid"
+>Monoid</A
+></TT
+>.
+   It also provides a <TT
+><A HREF="Data-Monoid-Multiplicative.html#t%3AMultiplicative"
+>Multiplicative</A
+></TT
+> instance for a <TT
+><A HREF="/usr/local/share/doc/ghc/libraries/base/Control-Monad.html#t%3AMonad"
+>Monad</A
+></TT
+> wrapped around a <TT
+><A HREF="/usr/local/share/doc/ghc/libraries/base/Data-Monoid.html#t%3AMonoid"
+>Monoid</A
+></TT
+>
+   and asserts that any <TT
+><A HREF="/usr/local/share/doc/ghc/libraries/base/Control-Monad.html#t%3AMonadPlus"
+>MonadPlus</A
+></TT
+> applied to a <TT
+><A HREF="/usr/local/share/doc/ghc/libraries/base/Data-Monoid.html#t%3AMonoid"
+>Monoid</A
+></TT
+> forms a <TT
+><A HREF="Data-Ring-Semi-Near.html#t%3ALeftSemiNearRing"
+>LeftSemiNearRing</A
+></TT
+> 
+   under these operations.
+</TD
+></TR
+><TR
+><TD CLASS="section4"
+>Constructors</TD
+></TR
+><TR
+><TD CLASS="body"
+><TABLE CLASS="vanilla" CELLSPACING="5" CELLPADDING="0"
+><TR
+><TD CLASS="arg"
+><A NAME="v%3AWrappedMonad"
+></A
+><B
+>WrappedMonad</B
+></TD
+><TD CLASS="rdoc"
+></TD
+></TR
+><TR
+><TD CLASS="body" COLSPAN="2"
+><TABLE CLASS="vanilla" CELLSPACING="1" CELLPADDING="0"
+><TR
+><TD CLASS="arg"
+><A NAME="v%3AgetWrappedMonad"
+></A
+><B
+>getWrappedMonad</B
+> :: m a</TD
+><TD CLASS="rdoc"
+></TD
+></TR
+></TABLE
+></TD
+></TR
+></TABLE
+></TD
+></TR
+><TR
+><TD CLASS="section4"
+><IMG SRC="minus.gif" CLASS="coll" ONCLICK="toggle(this,'i:WrappedMonad')" ALT="show/hide"
+> Instances</TD
+></TR
+><TR
+><TD CLASS="body"
+><DIV ID="i:WrappedMonad" STYLE="display:block;"
+><TABLE CLASS="vanilla" CELLSPACING="1" CELLPADDING="0"
+><TR
+><TD CLASS="decl"
+>(<A HREF="/usr/local/share/doc/ghc/libraries/base/Control-Monad.html#t%3AMonadPlus"
+>MonadPlus</A
+> m, <A HREF="Data-Monoid-Reducer.html#t%3AReducer"
+>Reducer</A
+> c a) =&gt; <A HREF="Data-Monoid-Reducer.html#t%3AReducer"
+>Reducer</A
+> c (<A HREF="Data-Monoid-Monad.html#t%3AWrappedMonad"
+>WrappedMonad</A
+> m a)</TD
+></TR
+><TR
+><TD CLASS="decl"
+><A HREF="/usr/local/share/doc/ghc/libraries/base/Control-Monad.html#t%3AMonad"
+>Monad</A
+> m =&gt; <A HREF="/usr/local/share/doc/ghc/libraries/base/Control-Monad.html#t%3AMonad"
+>Monad</A
+> (<A HREF="Data-Monoid-Monad.html#t%3AWrappedMonad"
+>WrappedMonad</A
+> m)</TD
+></TR
+><TR
+><TD CLASS="decl"
+><A HREF="/usr/local/share/doc/ghc/libraries/base/Control-Monad.html#t%3AFunctor"
+>Functor</A
+> m =&gt; <A HREF="/usr/local/share/doc/ghc/libraries/base/Control-Monad.html#t%3AFunctor"
+>Functor</A
+> (<A HREF="Data-Monoid-Monad.html#t%3AWrappedMonad"
+>WrappedMonad</A
+> m)</TD
+></TR
+><TR
+><TD CLASS="decl"
+><A HREF="/usr/local/share/doc/ghc/libraries/base/Control-Monad.html#t%3AMonadPlus"
+>MonadPlus</A
+> m =&gt; <A HREF="/usr/local/share/doc/ghc/libraries/base/Control-Monad.html#t%3AMonadPlus"
+>MonadPlus</A
+> (<A HREF="Data-Monoid-Monad.html#t%3AWrappedMonad"
+>WrappedMonad</A
+> m)</TD
+></TR
+><TR
+><TD CLASS="decl"
+>Pointed m =&gt; Pointed (<A HREF="Data-Monoid-Monad.html#t%3AWrappedMonad"
+>WrappedMonad</A
+> m)</TD
+></TR
+><TR
+><TD CLASS="decl"
+><A HREF="/usr/local/share/doc/ghc/libraries/base/Data-Eq.html#t%3AEq"
+>Eq</A
+> (m a) =&gt; <A HREF="/usr/local/share/doc/ghc/libraries/base/Data-Eq.html#t%3AEq"
+>Eq</A
+> (<A HREF="Data-Monoid-Monad.html#t%3AWrappedMonad"
+>WrappedMonad</A
+> m a)</TD
+></TR
+><TR
+><TD CLASS="decl"
+><A HREF="/usr/local/share/doc/ghc/libraries/base/Data-Ord.html#t%3AOrd"
+>Ord</A
+> (m a) =&gt; <A HREF="/usr/local/share/doc/ghc/libraries/base/Data-Ord.html#t%3AOrd"
+>Ord</A
+> (<A HREF="Data-Monoid-Monad.html#t%3AWrappedMonad"
+>WrappedMonad</A
+> m a)</TD
+></TR
+><TR
+><TD CLASS="decl"
+><A HREF="/usr/local/share/doc/ghc/libraries/base/Text-Read.html#t%3ARead"
+>Read</A
+> (m a) =&gt; <A HREF="/usr/local/share/doc/ghc/libraries/base/Text-Read.html#t%3ARead"
+>Read</A
+> (<A HREF="Data-Monoid-Monad.html#t%3AWrappedMonad"
+>WrappedMonad</A
+> m a)</TD
+></TR
+><TR
+><TD CLASS="decl"
+><A HREF="/usr/local/share/doc/ghc/libraries/base/Text-Show.html#t%3AShow"
+>Show</A
+> (m a) =&gt; <A HREF="/usr/local/share/doc/ghc/libraries/base/Text-Show.html#t%3AShow"
+>Show</A
+> (<A HREF="Data-Monoid-Monad.html#t%3AWrappedMonad"
+>WrappedMonad</A
+> m a)</TD
+></TR
+><TR
+><TD CLASS="decl"
+><A HREF="/usr/local/share/doc/ghc/libraries/base/Control-Monad.html#t%3AMonadPlus"
+>MonadPlus</A
+> m =&gt; <A HREF="/usr/local/share/doc/ghc/libraries/base/Data-Monoid.html#t%3AMonoid"
+>Monoid</A
+> (<A HREF="Data-Monoid-Monad.html#t%3AWrappedMonad"
+>WrappedMonad</A
+> m a)</TD
+></TR
+><TR
+><TD CLASS="decl"
+>(<A HREF="/usr/local/share/doc/ghc/libraries/base/Control-Monad.html#t%3AMonad"
+>Monad</A
+> m, <A HREF="/usr/local/share/doc/ghc/libraries/base/Data-Monoid.html#t%3AMonoid"
+>Monoid</A
+> a) =&gt; <A HREF="Data-Monoid-Multiplicative.html#t%3AMultiplicative"
+>Multiplicative</A
+> (<A HREF="Data-Monoid-Monad.html#t%3AWrappedMonad"
+>WrappedMonad</A
+> m a)</TD
+></TR
+><TR
+><TD CLASS="decl"
+>(<A HREF="/usr/local/share/doc/ghc/libraries/base/Control-Monad.html#t%3AMonadPlus"
+>MonadPlus</A
+> m, <A HREF="/usr/local/share/doc/ghc/libraries/base/Data-Monoid.html#t%3AMonoid"
+>Monoid</A
+> a) =&gt; <A HREF="Data-Ring-Semi-Near.html#t%3ALeftSemiNearRing"
+>LeftSemiNearRing</A
+> (<A HREF="Data-Monoid-Monad.html#t%3AWrappedMonad"
+>WrappedMonad</A
+> m a)</TD
+></TR
+></TABLE
+></DIV
+></TD
+></TR
+></TABLE
+></TD
+></TR
+><TR
+><TD CLASS="s15"
+></TD
+></TR
+><TR
+><TD CLASS="botbar"
+>Produced by <A HREF="http://www.haskell.org/haddock/"
+>Haddock</A
+> version 2.3.0</TD
+></TR
+></TABLE
+></BODY
+></HTML
+>
addfile ./dist/doc/html/monoids/Data-Monoid-Multiplicative-Sugar.html
hunk ./dist/doc/html/monoids/Data-Monoid-Multiplicative-Sugar.html 1
+<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd">
+<!--Rendered using the Haskell Html Library v0.2-->
+<HTML
+><HEAD
+><META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=UTF-8"
+><TITLE
+>Data.Monoid.Multiplicative.Sugar</TITLE
+><LINK HREF="haddock.css" REL="stylesheet" TYPE="text/css"
+><SCRIPT SRC="haddock-util.js" TYPE="text/javascript"
+></SCRIPT
+></HEAD
+><BODY
+><TABLE CLASS="vanilla" CELLSPACING="0" CELLPADDING="0"
+><TR
+><TD CLASS="topbar"
+><TABLE CLASS="vanilla" CELLSPACING="0" CELLPADDING="0"
+><TR
+><TD
+><IMG SRC="haskell_icon.gif" WIDTH="16" HEIGHT="16" ALT=" "
+></TD
+><TD CLASS="title"
+>monoids-0.1.6: Lots of Monoids</TD
+><TD CLASS="topbut"
+><A HREF="src/Data-Monoid-Multiplicative-Sugar.html"
+>Source code</A
+></TD
+><TD CLASS="topbut"
+><A HREF="index.html"
+>Contents</A
+></TD
+><TD CLASS="topbut"
+><A HREF="doc-index.html"
+>Index</A
+></TD
+></TR
+></TABLE
+></TD
+></TR
+><TR
+><TD CLASS="modulebar"
+><TABLE CLASS="vanilla" CELLSPACING="0" CELLPADDING="0"
+><TR
+><TD
+><FONT SIZE="6"
+>Data.Monoid.Multiplicative.Sugar</FONT
+></TD
+><TD ALIGN="right"
+><TABLE CLASS="narrow" CELLSPACING="0" CELLPADDING="0"
+><TR
+><TD CLASS="infohead"
+>Portability</TD
+><TD CLASS="infoval"
+>portable</TD
+></TR
+><TR
+><TD CLASS="infohead"
+>Stability</TD
+><TD CLASS="infoval"
+>experimental</TD
+></TR
+><TR
+><TD CLASS="infohead"
+>Maintainer</TD
+><TD CLASS="infoval"
+>libraries@haskell.org</TD
+></TR
+></TABLE
+></TD
+></TR
+></TABLE
+></TD
+></TR
+><TR
+><TD CLASS="s15"
+></TD
+></TR
+><TR
+><TD CLASS="section1"
+>Description</TD
+></TR
+><TR
+><TD CLASS="doc"
+><P
+>Syntactic sugar for working with a <TT
+><A HREF="Data-Monoid-Multiplicative.html#t%3AMultiplicative"
+>Multiplicative</A
+></TT
+> monoids that conflicts with names from the <A HREF="Prelude.html"
+>Prelude</A
+>.
+</P
+><PRE
+> import Prelude hiding ((+),(*))
+ import Data.Monoid.Multiplicative.Sugar
+</PRE
+></TD
+></TR
+><TR
+><TD CLASS="s15"
+></TD
+></TR
+><TR
+><TD CLASS="s15"
+></TD
+></TR
+><TR
+><TD CLASS="section1"
+>Documentation</TD
+></TR
+><TR
+><TD CLASS="s15"
+></TD
+></TR
+><TR
+><TD CLASS="decl"
+>module <A HREF="Data-Monoid-Additive-Sugar.html"
+>Data.Monoid.Additive.Sugar</A
+></TD
+></TR
+><TR
+><TD CLASS="s15"
+></TD
+></TR
+><TR
+><TD CLASS="decl"
+>module <A HREF="Data-Monoid-Multiplicative.html"
+>Data.Monoid.Multiplicative</A
+></TD
+></TR
+><TR
+><TD CLASS="s15"
+></TD
+></TR
+><TR
+><TD CLASS="topdecl"
+><TABLE CLASS="declbar"
+><TR
+><TD CLASS="declname"
+><A NAME="v%3A%2A"
+></A
+><B
+>(*)</B
+> :: <A HREF="Data-Monoid-Multiplicative.html#t%3AMultiplicative"
+>Multiplicative</A
+> r =&gt; r -&gt; r -&gt; r</TD
+><TD CLASS="declbut"
+><A HREF="src/Data-Monoid-Multiplicative-Sugar.html#%2A"
+>Source</A
+></TD
+></TR
+></TABLE
+></TD
+></TR
+><TR
+><TD CLASS="s15"
+></TD
+></TR
+><TR
+><TD CLASS="botbar"
+>Produced by <A HREF="http://www.haskell.org/haddock/"
+>Haddock</A
+> version 2.3.0</TD
+></TR
+></TABLE
+></BODY
+></HTML
+>
addfile ./dist/doc/html/monoids/Data-Monoid-Multiplicative.html
hunk ./dist/doc/html/monoids/Data-Monoid-Multiplicative.html 1
+<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd">
+<!--Rendered using the Haskell Html Library v0.2-->
+<HTML
+><HEAD
+><META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=UTF-8"
+><TITLE
+>Data.Monoid.Multiplicative</TITLE
+><LINK HREF="haddock.css" REL="stylesheet" TYPE="text/css"
+><SCRIPT SRC="haddock-util.js" TYPE="text/javascript"
+></SCRIPT
+></HEAD
+><BODY
+><TABLE CLASS="vanilla" CELLSPACING="0" CELLPADDING="0"
+><TR
+><TD CLASS="topbar"
+><TABLE CLASS="vanilla" CELLSPACING="0" CELLPADDING="0"
+><TR
+><TD
+><IMG SRC="haskell_icon.gif" WIDTH="16" HEIGHT="16" ALT=" "
+></TD
+><TD CLASS="title"
+>monoids-0.1.6: Lots of Monoids</TD
+><TD CLASS="topbut"
+><A HREF="src/Data-Monoid-Multiplicative.html"
+>Source code</A
+></TD
+><TD CLASS="topbut"
+><A HREF="index.html"
+>Contents</A
+></TD
+><TD CLASS="topbut"
+><A HREF="doc-index.html"
+>Index</A
+></TD
+></TR
+></TABLE
+></TD
+></TR
+><TR
+><TD CLASS="modulebar"
+><TABLE CLASS="vanilla" CELLSPACING="0" CELLPADDING="0"
+><TR
+><TD
+><FONT SIZE="6"
+>Data.Monoid.Multiplicative</FONT
+></TD
+><TD ALIGN="right"
+><TABLE CLASS="narrow" CELLSPACING="0" CELLPADDING="0"
+><TR
+><TD CLASS="infohead"
+>Portability</TD
+><TD CLASS="infoval"
+>portable (but instances use MPTCs)</TD
+></TR
+><TR
+><TD CLASS="infohead"
+>Stability</TD
+><TD CLASS="infoval"
+>experimental</TD
+></TR
+><TR
+><TD CLASS="infohead"
+>Maintainer</TD
+><TD CLASS="infoval"
+>libraries@haskell.org</TD
+></TR
+></TABLE
+></TD
+></TR
+></TABLE
+></TD
+></TR
+><TR
+><TD CLASS="s15"
+></TD
+></TR
+><TR
+><TD
+><TABLE CLASS="vanilla" CELLSPACING="0" CELLPADDING="0"
+><TR
+><TD CLASS="section4"
+><B
+>Contents</B
+></TD
+></TR
+><TR
+><TD
+><DL
+><DT
+><A HREF="#1"
+>Multiplicative Monoids
+</A
+></DT
+><DT
+><A HREF="#2"
+>Multiplicative to Monoid
+</A
+></DT
+><DT
+><A HREF="#3"
+>Monoid to Multiplicative
+</A
+></DT
+></DL
+></TD
+></TR
+></TABLE
+></TD
+></TR
+><TR
+><TD CLASS="s15"
+></TD
+></TR
+><TR
+><TD CLASS="section1"
+>Description</TD
+></TR
+><TR
+><TD CLASS="doc"
+><P
+>When dealing with a Ring or other structure, you often need a pair of 
+ <TT
+><A HREF="/usr/local/share/doc/ghc/libraries/base/Data-Monoid.html#t%3AMonoid"
+>Monoid</A
+></TT
+> instances that are closely related. Making a <TT
+>newtype</TT
+> for one
+ is unsatisfying and yields an unnatural programming style. 
+</P
+><P
+>A <TT
+><A HREF="Data-Monoid-Multiplicative.html#t%3AMultiplicative"
+>Multiplicative</A
+></TT
+> is a <TT
+><A HREF="/usr/local/share/doc/ghc/libraries/base/Data-Monoid.html#t%3AMonoid"
+>Monoid</A
+></TT
+> that is intended for use in a scenario
+ that can be extended to have another <TT
+><A HREF="/usr/local/share/doc/ghc/libraries/base/Data-Monoid.html#t%3AMonoid"
+>Monoid</A
+></TT
+> slot in for addition. This
+ enables one to use common notation.
+</P
+><P
+>Any <TT
+><A HREF="Data-Monoid-Multiplicative.html#t%3AMultiplicative"
+>Multiplicative</A
+></TT
+> can be turned into a <TT
+><A HREF="/usr/local/share/doc/ghc/libraries/base/Data-Monoid.html#t%3AMonoid"
+>Monoid</A
+></TT
+> using the <TT
+><A HREF="Data-Monoid-Multiplicative.html#v%3ALog"
+>Log</A
+></TT
+> wrapper.
+</P
+><P
+>Any <TT
+><A HREF="/usr/local/share/doc/ghc/libraries/base/Data-Monoid.html#t%3AMonoid"
+>Monoid</A
+></TT
+> can be turned into a <TT
+><A HREF="Data-Monoid-Multiplicative.html#t%3AMultiplicative"
+>Multiplicative</A
+></TT
+> using the <TT
+><A HREF="Data-Monoid-Multiplicative.html#v%3AExp"
+>Exp</A
+></TT
+> wrapper.
+</P
+><P
+>Instances are supplied for common Monads of Monoids, in a fashion 
+ which can be extended if the <TT
+><A HREF="/usr/local/share/doc/ghc/libraries/base/Control-Monad.html#t%3AMonad"
+>Monad</A
+></TT
+> is a <TT
+><A HREF="/usr/local/share/doc/ghc/libraries/base/Control-Monad.html#t%3AMonadPlus"
+>MonadPlus</A
+></TT
+> to yield a LeftSemiNearRing
+</P
+><P
+>Instances are also supplied for common Applicatives of Monoids, in a
+ fashion which can be extended if the <TT
+><A HREF="/usr/local/share/doc/ghc/libraries/base/Control-Applicative.html#t%3AApplicative"
+>Applicative</A
+></TT
+> is <TT
+><A HREF="/usr/local/share/doc/ghc/libraries/base/Control-Applicative.html#t%3AAlternative"
+>Alternative</A
+></TT
+> to
+ yield a LeftSemiNearRing
+</P
+></TD
+></TR
+><TR
+><TD CLASS="s15"
+></TD
+></TR
+><TR
+><TD CLASS="section1"
+>Synopsis</TD
+></TR
+><TR
+><TD CLASS="s15"
+></TD
+></TR
+><TR
+><TD CLASS="body"
+><TABLE CLASS="vanilla" CELLSPACING="0" CELLPADDING="0"
+><TR
+><TD CLASS="decl"
+>module <A HREF="Data-Monoid-Additive.html"
+>Data.Monoid.Additive</A
+></TD
+></TR
+><TR
+><TD CLASS="s8"
+></TD
+></TR
+><TR
+><TD CLASS="decl"
+><SPAN CLASS="keyword"
+>class</SPAN
+>  <A HREF="#t%3AMultiplicative"
+>Multiplicative</A
+> m  <SPAN CLASS="keyword"
+>where</SPAN
+></TD
+></TR
+><TR
+><TD CLASS="body"
+><TABLE CLASS="vanilla" CELLSPACING="0" CELLPADDING="0"
+><TR
+><TD CLASS="decl"
+><A HREF="#v%3Aone"
+>one</A
+> :: m</TD
+></TR
+><TR
+><TD CLASS="decl"
+><A HREF="#v%3Atimes"
+>times</A
+> :: m -&gt; m -&gt; m</TD
+></TR
+></TABLE
+></TD
+></TR
+><TR
+><TD CLASS="s8"
+></TD
+></TR
+><TR
+><TD CLASS="decl"
+><A HREF="#v%3Aone"
+>one</A
+> :: <A HREF="Data-Monoid-Multiplicative.html#t%3AMultiplicative"
+>Multiplicative</A
+> m =&gt; m</TD
+></TR
+><TR
+><TD CLASS="s8"
+></TD
+></TR
+><TR
+><TD CLASS="decl"
+><A HREF="#v%3Atimes"
+>times</A
+> :: <A HREF="Data-Monoid-Multiplicative.html#t%3AMultiplicative"
+>Multiplicative</A
+> m =&gt; m -&gt; m -&gt; m</TD
+></TR
+><TR
+><TD CLASS="s8"
+></TD
+></TR
+><TR
+><TD CLASS="decl"
+><SPAN CLASS="keyword"
+>data</SPAN
+>  <A HREF="#t%3ALog"
+>Log</A
+> m = <A HREF="#v%3ALog"
+>Log</A
+> {<TABLE CLASS="vanilla" CELLSPACING="0" CELLPADDING="0"
+><TR
+><TD CLASS="recfield"
+><A HREF="#v%3AgetLog"
+>getLog</A
+> :: m</TD
+></TR
+></TABLE
+>}</TD
+></TR
+><TR
+><TD CLASS="s8"
+></TD
+></TR
+><TR
+><TD CLASS="decl"
+><SPAN CLASS="keyword"
+>data</SPAN
+>  <A HREF="#t%3AExp"
+>Exp</A
+> m = <A HREF="#v%3AExp"
+>Exp</A
+> {<TABLE CLASS="vanilla" CELLSPACING="0" CELLPADDING="0"
+><TR
+><TD CLASS="recfield"
+><A HREF="#v%3AgetExp"
+>getExp</A
+> :: m</TD
+></TR
+></TABLE
+>}</TD
+></TR
+></TABLE
+></TD
+></TR
+><TR
+><TD CLASS="s15"
+></TD
+></TR
+><TR
+><TD CLASS="section1"
+>Documentation</TD
+></TR
+><TR
+><TD CLASS="s15"
+></TD
+></TR
+><TR
+><TD CLASS="decl"
+>module <A HREF="Data-Monoid-Additive.html"
+>Data.Monoid.Additive</A
+></TD
+></TR
+><TR
+><TD CLASS="s15"
+></TD
+></TR
+><TR
+><TD CLASS="section1"
+><A NAME="1"
+>Multiplicative Monoids
+</A
+></TD
+></TR
+><TR
+><TD CLASS="s15"
+></TD
+></TR
+><TR
+><TD CLASS="topdecl"
+><TABLE CLASS="declbar"
+><TR
+><TD CLASS="declname"
+><SPAN CLASS="keyword"
+>class</SPAN
+>  <A NAME="t%3AMultiplicative"
+></A
+><B
+>Multiplicative</B
+> m  <SPAN CLASS="keyword"
+>where</SPAN
+></TD
+><TD CLASS="declbut"
+><A HREF="src/Data-Monoid-Multiplicative.html#Multiplicative"
+>Source</A
+></TD
+></TR
+></TABLE
+></TD
+></TR
+><TR
+><TD CLASS="body"
+><TABLE CLASS="vanilla" CELLSPACING="0" CELLPADDING="0"
+><TR
+><TD CLASS="s8"
+></TD
+></TR
+><TR
+><TD CLASS="section4"
+>Methods</TD
+></TR
+><TR
+><TD CLASS="body"
+><TABLE CLASS="vanilla" CELLSPACING="0" CELLPADDING="0"
+><TR
+><TD CLASS="topdecl"
+><TABLE CLASS="declbar"
+><TR
+><TD CLASS="declname"
+><A NAME="v%3Aone"
+></A
+><B
+>one</B
+> :: m</TD
+><TD CLASS="declbut"
+><A HREF="src/Data-Monoid-Multiplicative.html#one"
+>Source</A
+></TD
+></TR
+></TABLE
+></TD
+></TR
+><TR
+><TD CLASS="s8"
+></TD
+></TR
+><TR
+><TD CLASS="topdecl"
+><TABLE CLASS="declbar"
+><TR
+><TD CLASS="declname"
+><A NAME="v%3Atimes"
+></A
+><B
+>times</B
+> :: m -&gt; m -&gt; m</TD
+><TD CLASS="declbut"
+><A HREF="src/Data-Monoid-Multiplicative.html#times"
+>Source</A
+></TD
+></TR
+></TABLE
+></TD
+></TR
+></TABLE
+></TD
+></TR
+><TR
+><TD CLASS="s8"
+></TD
+></TR
+><TR
+><TD CLASS="section4"
+><IMG SRC="minus.gif" CLASS="coll" ONCLICK="toggle(this,'i:Multiplicative')" ALT="show/hide"
+> Instances</TD
+></TR
+><TR
+><TD CLASS="body"
+><DIV ID="i:Multiplicative" STYLE="display:block;"
+><TABLE CLASS="vanilla" CELLSPACING="1" CELLPADDING="0"
+><TR
+><TD CLASS="decl"
+><A HREF="Data-Monoid-Multiplicative.html#t%3AMultiplicative"
+>Multiplicative</A
+> <A HREF="Data-Ring-Boolean.html#t%3ABoolRing"
+>BoolRing</A
+></TD
+></TR
+><TR
+><TD CLASS="decl"
+><A HREF="/usr/local/share/doc/ghc/libraries/base/Data-Monoid.html#t%3AMonoid"
+>Monoid</A
+> m =&gt; <A HREF="Data-Monoid-Multiplicative.html#t%3AMultiplicative"
+>Multiplicative</A
+> ([] m)</TD
+></TR
+><TR
+><TD CLASS="decl"
+><A HREF="/usr/local/share/doc/ghc/libraries/base/Data-Monoid.html#t%3AMonoid"
+>Monoid</A
+> n =&gt; <A HREF="Data-Monoid-Multiplicative.html#t%3AMultiplicative"
+>Multiplicative</A
+> (<A HREF="/usr/local/share/doc/ghc/libraries/base/System-IO.html#t%3AIO"
+>IO</A
+> n)</TD
+></TR
+><TR
+><TD CLASS="decl"
+><A HREF="/usr/local/share/doc/ghc/libraries/base/Data-Monoid.html#t%3AMonoid"
+>Monoid</A
+> m =&gt; <A HREF="Data-Monoid-Multiplicative.html#t%3AMultiplicative"
+>Multiplicative</A
+> (<A HREF="/usr/local/share/doc/ghc/libraries/base/Data-Maybe.html#t%3AMaybe"
+>Maybe</A
+> m)</TD
+></TR
+><TR
+><TD CLASS="decl"
+><A HREF="/usr/local/share/doc/ghc/libraries/base/Data-Monoid.html#t%3AMonoid"
+>Monoid</A
+> n =&gt; <A HREF="Data-Monoid-Multiplicative.html#t%3AMultiplicative"
+>Multiplicative</A
+> (<A HREF="/usr/local/share/doc/ghc/libraries/base/Control-Applicative.html#t%3AZipList"
+>ZipList</A
+> n)</TD
+></TR
+><TR
+><TD CLASS="decl"
+><A HREF="/usr/local/share/doc/ghc/libraries/base/Data-Monoid.html#t%3AMonoid"
+>Monoid</A
+> n =&gt; <A HREF="Data-Monoid-Multiplicative.html#t%3AMultiplicative"
+>Multiplicative</A
+> (<A HREF="/usr/local/share/doc/ghc/libraries/base/GHC-Conc.html#t%3ASTM"
+>STM</A
+> n)</TD
+></TR
+><TR
+><TD CLASS="decl"
+><A HREF="/usr/local/share/doc/ghc/libraries/base/Data-Monoid.html#t%3AMonoid"
+>Monoid</A
+> m =&gt; <A HREF="Data-Monoid-Multiplicative.html#t%3AMultiplicative"
+>Multiplicative</A
+> (<A HREF="/usr/local/share/doc/ghc/libraries/containers/Data-Sequence.html#t%3ASeq"
+>Seq</A
+> m)</TD
+></TR
+><TR
+><TD CLASS="decl"
+><A HREF="/usr/local/share/doc/ghc/libraries/base/Data-Monoid.html#t%3AMonoid"
+>Monoid</A
+> m =&gt; <A HREF="Data-Monoid-Multiplicative.html#t%3AMultiplicative"
+>Multiplicative</A
+> (<A HREF="/usr/local/share/doc/ghc/libraries/mtl/Control-Monad-Identity.html#t%3AIdentity"
+>Identity</A
+> m)</TD
+></TR
+><TR
+><TD CLASS="decl"
+><A HREF="Data-Monoid-Multiplicative.html#t%3AMultiplicative"
+>Multiplicative</A
+> m =&gt; <A HREF="Data-Monoid-Multiplicative.html#t%3AMultiplicative"
+>Multiplicative</A
+> (<A HREF="Data-Monoid-Self.html#t%3ASelf"
+>Self</A
+> m)</TD
+></TR
+><TR
+><TD CLASS="decl"
+><A HREF="Data-Monoid-Multiplicative.html#t%3AMultiplicative"
+>Multiplicative</A
+> m =&gt; <A HREF="Data-Monoid-Multiplicative.html#t%3AMultiplicative"
+>Multiplicative</A
+> (<A HREF="Data-Monoid-FromString.html#t%3AFromString"
+>FromString</A
+> m)</TD
+></TR
+><TR
+><TD CLASS="decl"
+><A HREF="/usr/local/share/doc/ghc/libraries/base/Data-Monoid.html#t%3AMonoid"
+>Monoid</A
+> m =&gt; <A HREF="Data-Monoid-Multiplicative.html#t%3AMultiplicative"
+>Multiplicative</A
+> (<A HREF="Data-Monoid-Multiplicative.html#t%3AExp"
+>Exp</A
+> m)</TD
+></TR
+><TR
+><TD CLASS="decl"
+><A HREF="/usr/local/share/doc/ghc/libraries/base/Prelude.html#t%3ANum"
+>Num</A
+> a =&gt; <A HREF="Data-Monoid-Multiplicative.html#t%3AMultiplicative"
+>Multiplicative</A
+> (<A HREF="Data-Ring-Semi-Tropical.html#t%3ATropical"
+>Tropical</A
+> a)</TD
+></TR
+><TR
+><TD CLASS="decl"
+><A HREF="/usr/local/share/doc/ghc/libraries/base/Data-Ord.html#t%3AOrd"
+>Ord</A
+> a =&gt; <A HREF="Data-Monoid-Multiplicative.html#t%3AMultiplicative"
+>Multiplicative</A
+> (<A HREF="Data-Ring-Semi-Ord.html#t%3APriority"
+>Priority</A
+> a)</TD
+></TR
+><TR
+><TD CLASS="decl"
+>(<A HREF="/usr/local/share/doc/ghc/libraries/base/Prelude.html#t%3ABounded"
+>Bounded</A
+> a, <A HREF="/usr/local/share/doc/ghc/libraries/base/Data-Ord.html#t%3AOrd"
+>Ord</A
+> a) =&gt; <A HREF="Data-Monoid-Multiplicative.html#t%3AMultiplicative"
+>Multiplicative</A
+> (<A HREF="Data-Ring-Semi-Ord.html#t%3AOrder"
+>Order</A
+> a)</TD
+></TR
+><TR
+><TD CLASS="decl"
+><A HREF="/usr/local/share/doc/ghc/libraries/base/Prelude.html#t%3ANum"
+>Num</A
+> a =&gt; <A HREF="Data-Monoid-Multiplicative.html#t%3AMultiplicative"
+>Multiplicative</A
+> (<A HREF="Data-Ring-FromNum.html#t%3AFromNum"
+>FromNum</A
+> a)</TD
+></TR
+><TR
+><TD CLASS="decl"
+><A HREF="/usr/local/share/doc/ghc/libraries/base/Data-Monoid.html#t%3AMonoid"
+>Monoid</A
+> m =&gt; <A HREF="Data-Monoid-Multiplicative.html#t%3AMultiplicative"
+>Multiplicative</A
+> (<A HREF="/usr/local/share/doc/ghc/libraries/base/Control-Applicative.html#t%3AConst"
+>Const</A
+> m a)</TD
+></TR
+><TR
+><TD CLASS="decl"
+><A HREF="/usr/local/share/doc/ghc/libraries/base/Data-Monoid.html#t%3AMonoid"
+>Monoid</A
+> n =&gt; <A HREF="Data-Monoid-Multiplicative.html#t%3AMultiplicative"
+>Multiplicative</A
+> (<A HREF="/usr/local/share/doc/ghc/libraries/base/Control-Monad-ST-Lazy.html#t%3AST"
+>ST</A
+> s n)</TD
+></TR
+><TR
+><TD CLASS="decl"
+><A HREF="/usr/local/share/doc/ghc/libraries/base/Data-Monoid.html#t%3AMonoid"
+>Monoid</A
+> n =&gt; <A HREF="Data-Monoid-Multiplicative.html#t%3AMultiplicative"
+>Multiplicative</A
+> (<A HREF="/usr/local/share/doc/ghc/libraries/base/Control-Monad-ST.html#t%3AST"
+>ST</A
+> s n)</TD
+></TR
+><TR
+><TD CLASS="decl"
+><A HREF="/usr/local/share/doc/ghc/libraries/base/Data-Monoid.html#t%3AMonoid"
+>Monoid</A
+> m =&gt; <A HREF="Data-Monoid-Multiplicative.html#t%3AMultiplicative"
+>Multiplicative</A
+> (<A HREF="/usr/local/share/doc/ghc/libraries/mtl/Control-Monad-Cont.html#t%3ACont"
+>Cont</A
+> r m)</TD
+></TR
+><TR
+><TD CLASS="decl"
+>(<A HREF="/usr/local/share/doc/ghc/libraries/base/Data-Monoid.html#t%3AMonoid"
+>Monoid</A
+> w, <A HREF="/usr/local/share/doc/ghc/libraries/base/Data-Monoid.html#t%3AMonoid"
+>Monoid</A
+> m) =&gt; <A HREF="Data-Monoid-Multiplicative.html#t%3AMultiplicative"
+>Multiplicative</A
+> (<A HREF="/usr/local/share/doc/ghc/libraries/mtl/Control-Monad-Writer-Strict.html#t%3AWriter"
+>Writer</A
+> w m)</TD
+></TR
+><TR
+><TD CLASS="decl"
+>(<A HREF="/usr/local/share/doc/ghc/libraries/base/Data-Monoid.html#t%3AMonoid"
+>Monoid</A
+> w, <A HREF="/usr/local/share/doc/ghc/libraries/base/Data-Monoid.html#t%3AMonoid"
+>Monoid</A
+> m) =&gt; <A HREF="Data-Monoid-Multiplicative.html#t%3AMultiplicative"
+>Multiplicative</A
+> (<A HREF="/usr/local/share/doc/ghc/libraries/mtl/Control-Monad-Writer-Lazy.html#t%3AWriter"
+>Writer</A
+> w m)</TD
+></TR
+><TR
+><TD CLASS="decl"
+><A HREF="/usr/local/share/doc/ghc/libraries/base/Data-Monoid.html#t%3AMonoid"
+>Monoid</A
+> m =&gt; <A HREF="Data-Monoid-Multiplicative.html#t%3AMultiplicative"
+>Multiplicative</A
+> (<A HREF="/usr/local/share/doc/ghc/libraries/mtl/Control-Monad-State-Strict.html#t%3AState"
+>State</A
+> s m)</TD
+></TR
+><TR
+><TD CLASS="decl"
+><A HREF="/usr/local/share/doc/ghc/libraries/base/Data-Monoid.html#t%3AMonoid"
+>Monoid</A
+> m =&gt; <A HREF="Data-Monoid-Multiplicative.html#t%3AMultiplicative"
+>Multiplicative</A
+> (<A HREF="/usr/local/share/doc/ghc/libraries/mtl/Control-Monad-State-Lazy.html#t%3AState"
+>State</A
+> s m)</TD
+></TR
+><TR
+><TD CLASS="decl"
+><A HREF="/usr/local/share/doc/ghc/libraries/base/Data-Monoid.html#t%3AMonoid"
+>Monoid</A
+> m =&gt; <A HREF="Data-Monoid-Multiplicative.html#t%3AMultiplicative"
+>Multiplicative</A
+> (<A HREF="/usr/local/share/doc/ghc/libraries/mtl/Control-Monad-Reader.html#t%3AReader"
+>Reader</A
+> e m)</TD
+></TR
+><TR
+><TD CLASS="decl"
+>(Measured v m, <A HREF="/usr/local/share/doc/ghc/libraries/base/Data-Monoid.html#t%3AMonoid"
+>Monoid</A
+> m) =&gt; <A HREF="Data-Monoid-Multiplicative.html#t%3AMultiplicative"
+>Multiplicative</A
+> (FingerTree v m)</TD
+></TR
+><TR
+><TD CLASS="decl"
+>(<A HREF="/usr/local/share/doc/ghc/libraries/base/Control-Applicative.html#t%3AAlternative"
+>Alternative</A
+> f, <A HREF="/usr/local/share/doc/ghc/libraries/base/Data-Monoid.html#t%3AMonoid"
+>Monoid</A
+> a) =&gt; <A HREF="Data-Monoid-Multiplicative.html#t%3AMultiplicative"
+>Multiplicative</A
+> (<A HREF="Data-Monoid-Applicative.html#t%3AWrappedApplicative"
+>WrappedApplicative</A
+> f a)</TD
+></TR
+><TR
+><TD CLASS="decl"
+>(<A HREF="/usr/local/share/doc/ghc/libraries/base/Control-Monad.html#t%3AMonad"
+>Monad</A
+> m, <A HREF="/usr/local/share/doc/ghc/libraries/base/Data-Monoid.html#t%3AMonoid"
+>Monoid</A
+> a) =&gt; <A HREF="Data-Monoid-Multiplicative.html#t%3AMultiplicative"
+>Multiplicative</A
+> (<A HREF="Data-Monoid-Monad.html#t%3AWrappedMonad"
+>WrappedMonad</A
+> m a)</TD
+></TR
+><TR
+><TD CLASS="decl"
+>(<A HREF="/usr/local/share/doc/ghc/libraries/base/Control-Monad.html#t%3AMonad"
+>Monad</A
+> m, <A HREF="/usr/local/share/doc/ghc/libraries/base/Data-Monoid.html#t%3AMonoid"
+>Monoid</A
+> n) =&gt; <A HREF="Data-Monoid-Multiplicative.html#t%3AMultiplicative"
+>Multiplicative</A
+> (<A HREF="/usr/local/share/doc/ghc/libraries/mtl/Control-Monad-Cont.html#t%3AContT"
+>ContT</A
+> r m n)</TD
+></TR
+><TR
+><TD CLASS="decl"
+>(<A HREF="/usr/local/share/doc/ghc/libraries/base/Control-Monad.html#t%3AMonad"
+>Monad</A
+> m, <A HREF="/usr/local/share/doc/ghc/libraries/base/Data-Monoid.html#t%3AMonoid"
+>Monoid</A
+> w, <A HREF="/usr/local/share/doc/ghc/libraries/base/Data-Monoid.html#t%3AMonoid"
+>Monoid</A
+> n) =&gt; <A HREF="Data-Monoid-Multiplicative.html#t%3AMultiplicative"
+>Multiplicative</A
+> (<A HREF="/usr/local/share/doc/ghc/libraries/mtl/Control-Monad-Writer-Strict.html#t%3AWriterT"
+>WriterT</A
+> w m n)</TD
+></TR
+><TR
+><TD CLASS="decl"
+>(<A HREF="/usr/local/share/doc/ghc/libraries/base/Control-Monad.html#t%3AMonad"
+>Monad</A
+> m, <A HREF="/usr/local/share/doc/ghc/libraries/base/Data-Monoid.html#t%3AMonoid"
+>Monoid</A
+> w, <A HREF="/usr/local/share/doc/ghc/libraries/base/Data-Monoid.html#t%3AMonoid"
+>Monoid</A
+> n) =&gt; <A HREF="Data-Monoid-Multiplicative.html#t%3AMultiplicative"
+>Multiplicative</A
+> (<A HREF="/usr/local/share/doc/ghc/libraries/mtl/Control-Monad-Writer-Lazy.html#t%3AWriterT"
+>WriterT</A
+> w m n)</TD
+></TR
+><TR
+><TD CLASS="decl"
+>(<A HREF="/usr/local/share/doc/ghc/libraries/base/Control-Monad.html#t%3AMonad"
+>Monad</A
+> m, <A HREF="/usr/local/share/doc/ghc/libraries/base/Data-Monoid.html#t%3AMonoid"
+>Monoid</A
+> n) =&gt; <A HREF="Data-Monoid-Multiplicative.html#t%3AMultiplicative"
+>Multiplicative</A
+> (<A HREF="/usr/local/share/doc/ghc/libraries/mtl/Control-Monad-State-Strict.html#t%3AStateT"
+>StateT</A
+> s m n)</TD
+></TR
+><TR
+><TD CLASS="decl"
+>(<A HREF="/usr/local/share/doc/ghc/libraries/base/Control-Monad.html#t%3AMonad"
+>Monad</A
+> m, <A HREF="/usr/local/share/doc/ghc/libraries/base/Data-Monoid.html#t%3AMonoid"
+>Monoid</A
+> n) =&gt; <A HREF="Data-Monoid-Multiplicative.html#t%3AMultiplicative"
+>Multiplicative</A
+> (<A HREF="/usr/local/share/doc/ghc/libraries/mtl/Control-Monad-State-Lazy.html#t%3AStateT"
+>StateT</A
+> s m n)</TD
+></TR
+><TR
+><TD CLASS="decl"
+>(<A HREF="/usr/local/share/doc/ghc/libraries/base/Control-Monad.html#t%3AMonad"
+>Monad</A
+> m, <A HREF="/usr/local/share/doc/ghc/libraries/base/Data-Monoid.html#t%3AMonoid"
+>Monoid</A
+> n) =&gt; <A HREF="Data-Monoid-Multiplicative.html#t%3AMultiplicative"
+>Multiplicative</A
+> (<A HREF="/usr/local/share/doc/ghc/libraries/mtl/Control-Monad-Reader.html#t%3AReaderT"
+>ReaderT</A
+> e m n)</TD
+></TR
+><TR
+><TD CLASS="decl"
+>(<A HREF="/usr/local/share/doc/ghc/libraries/base/Data-Monoid.html#t%3AMonoid"
+>Monoid</A
+> w, <A HREF="/usr/local/share/doc/ghc/libraries/base/Data-Monoid.html#t%3AMonoid"
+>Monoid</A
+> m) =&gt; <A HREF="Data-Monoid-Multiplicative.html#t%3AMultiplicative"
+>Multiplicative</A
+> (<A HREF="/usr/local/share/doc/ghc/libraries/mtl/Control-Monad-RWS-Strict.html#t%3ARWS"
+>RWS</A
+> r w s m)</TD
+></TR
+><TR
+><TD CLASS="decl"
+>(<A HREF="/usr/local/share/doc/ghc/libraries/base/Data-Monoid.html#t%3AMonoid"
+>Monoid</A
+> w, <A HREF="/usr/local/share/doc/ghc/libraries/base/Data-Monoid.html#t%3AMonoid"
+>Monoid</A
+> m) =&gt; <A HREF="Data-Monoid-Multiplicative.html#t%3AMultiplicative"
+>Multiplicative</A
+> (<A HREF="/usr/local/share/doc/ghc/libraries/mtl/Control-Monad-RWS-Lazy.html#t%3ARWS"
+>RWS</A
+> r w s m)</TD
+></TR
+><TR
+><TD CLASS="decl"
+>(Stream s m t, <A HREF="/usr/local/share/doc/ghc/libraries/base/Data-Monoid.html#t%3AMonoid"
+>Monoid</A
+> n) =&gt; <A HREF="Data-Monoid-Multiplicative.html#t%3AMultiplicative"
+>Multiplicative</A
+> (ParsecT s u m n)</TD
+></TR
+><TR
+><TD CLASS="decl"
+>(<A HREF="/usr/local/share/doc/ghc/libraries/base/Control-Monad.html#t%3AMonad"
+>Monad</A
+> m, <A HREF="/usr/local/share/doc/ghc/libraries/base/Data-Monoid.html#t%3AMonoid"
+>Monoid</A
+> w, <A HREF="/usr/local/share/doc/ghc/libraries/base/Data-Monoid.html#t%3AMonoid"
+>Monoid</A
+> n) =&gt; <A HREF="Data-Monoid-Multiplicative.html#t%3AMultiplicative"
+>Multiplicative</A
+> (<A HREF="/usr/local/share/doc/ghc/libraries/mtl/Control-Monad-RWS-Strict.html#t%3ARWST"
+>RWST</A
+> r w s m n)</TD
+></TR
+><TR
+><TD CLASS="decl"
+>(<A HREF="/usr/local/share/doc/ghc/libraries/base/Control-Monad.html#t%3AMonad"
+>Monad</A
+> m, <A HREF="/usr/local/share/doc/ghc/libraries/base/Data-Monoid.html#t%3AMonoid"
+>Monoid</A
+> w, <A HREF="/usr/local/share/doc/ghc/libraries/base/Data-Monoid.html#t%3AMonoid"
+>Monoid</A
+> n) =&gt; <A HREF="Data-Monoid-Multiplicative.html#t%3AMultiplicative"
+>Multiplicative</A
+> (<A HREF="/usr/local/share/doc/ghc/libraries/mtl/Control-Monad-RWS-Lazy.html#t%3ARWST"
+>RWST</A
+> r w s m n)</TD
+></TR
+></TABLE
+></DIV
+></TD
+></TR
+></TABLE
+></TD
+></TR
+><TR
+><TD CLASS="s15"
+></TD
+></TR
+><TR
+><TD CLASS="topdecl"
+><TABLE CLASS="declbar"
+><TR
+><TD CLASS="declname"
+><A NAME="v%3Aone"
+></A
+><B
+>one</B
+> :: <A HREF="Data-Monoid-Multiplicative.html#t%3AMultiplicative"
+>Multiplicative</A
+> m =&gt; m</TD
+><TD CLASS="declbut"
+><A HREF="src/Data-Monoid-Multiplicative.html#one"
+>Source</A
+></TD
+></TR
+></TABLE
+></TD
+></TR
+><TR
+><TD CLASS="s15"
+></TD
+></TR
+><TR
+><TD CLASS="topdecl"
+><TABLE CLASS="declbar"
+><TR
+><TD CLASS="declname"
+><A NAME="v%3Atimes"
+></A
+><B
+>times</B
+> :: <A HREF="Data-Monoid-Multiplicative.html#t%3AMultiplicative"
+>Multiplicative</A
+> m =&gt; m -&gt; m -&gt; m</TD
+><TD CLASS="declbut"
+><A HREF="src/Data-Monoid-Multiplicative.html#times"
+>Source</A
+></TD
+></TR
+></TABLE
+></TD
+></TR
+><TR
+><TD CLASS="s15"
+></TD
+></TR
+><TR
+><TD CLASS="section1"
+><A NAME="2"
+>Multiplicative to Monoid
+</A
+></TD
+></TR
+><TR
+><TD CLASS="s15"
+></TD
+></TR
+><TR
+><TD CLASS="topdecl"
+><TABLE CLASS="declbar"
+><TR
+><TD CLASS="declname"
+><SPAN CLASS="keyword"
+>data</SPAN
+>  <A NAME="t%3ALog"
+></A
+><B
+>Log</B
+> m </TD
+><TD CLASS="declbut"
+><A HREF="src/Data-Monoid-Multiplicative.html#Log"
+>Source</A
+></TD
+></TR
+></TABLE
+></TD
+></TR
+><TR
+><TD CLASS="body"
+><TABLE CLASS="vanilla" CELLSPACING="0" CELLPADDING="0"
+><TR
+><TD CLASS="ndoc"
+>Convert a <TT
+><A HREF="Data-Monoid-Multiplicative.html#t%3AMultiplicative"
+>Multiplicative</A
+></TT
+> into a <TT
+><A HREF="/usr/local/share/doc/ghc/libraries/base/Data-Monoid.html#t%3AMonoid"
+>Monoid</A
+></TT
+>. Mnemonic: <TT
+>Log a + Log b = Log (a * b)</TT
+>
+</TD
+></TR
+><TR
+><TD CLASS="section4"
+>Constructors</TD
+></TR
+><TR
+><TD CLASS="body"
+><TABLE CLASS="vanilla" CELLSPACING="5" CELLPADDING="0"
+><TR
+><TD CLASS="arg"
+><A NAME="v%3ALog"
+></A
+><B
+>Log</B
+></TD
+><TD CLASS="rdoc"
+></TD
+></TR
+><TR
+><TD CLASS="body" COLSPAN="2"
+><TABLE CLASS="vanilla" CELLSPACING="1" CELLPADDING="0"
+><TR
+><TD CLASS="arg"
+><A NAME="v%3AgetLog"
+></A
+><B
+>getLog</B
+> :: m</TD
+><TD CLASS="rdoc"
+></TD
+></TR
+></TABLE
+></TD
+></TR
+></TABLE
+></TD
+></TR
+><TR
+><TD CLASS="section4"
+><IMG SRC="minus.gif" CLASS="coll" ONCLICK="toggle(this,'i:Log')" ALT="show/hide"
+> Instances</TD
+></TR
+><TR
+><TD CLASS="body"
+><DIV ID="i:Log" STYLE="display:block;"
+><TABLE CLASS="vanilla" CELLSPACING="1" CELLPADDING="0"
+><TR
+><TD CLASS="decl"
+><A HREF="Data-Monoid-Multiplicative.html#t%3AMultiplicative"
+>Multiplicative</A
+> m =&gt; <A HREF="/usr/local/share/doc/ghc/libraries/base/Data-Monoid.html#t%3AMonoid"
+>Monoid</A
+> (<A HREF="Data-Monoid-Multiplicative.html#t%3ALog"
+>Log</A
+> m)</TD
+></TR
+></TABLE
+></DIV
+></TD
+></TR
+></TABLE
+></TD
+></TR
+><TR
+><TD CLASS="s15"
+></TD
+></TR
+><TR
+><TD CLASS="section1"
+><A NAME="3"
+>Monoid to Multiplicative
+</A
+></TD
+></TR
+><TR
+><TD CLASS="s15"
+></TD
+></TR
+><TR
+><TD CLASS="topdecl"
+><TABLE CLASS="declbar"
+><TR
+><TD CLASS="declname"
+><SPAN CLASS="keyword"
+>data</SPAN
+>  <A NAME="t%3AExp"
+></A
+><B
+>Exp</B
+> m </TD
+><TD CLASS="declbut"
+><A HREF="src/Data-Monoid-Multiplicative.html#Exp"
+>Source</A
+></TD
+></TR
+></TABLE
+></TD
+></TR
+><TR
+><TD CLASS="body"
+><TABLE CLASS="vanilla" CELLSPACING="0" CELLPADDING="0"
+><TR
+><TD CLASS="ndoc"
+>Convert a <TT
+><A HREF="/usr/local/share/doc/ghc/libraries/base/Data-Monoid.html#t%3AMonoid"
+>Monoid</A
+></TT
+> into a <TT
+><A HREF="Data-Monoid-Multiplicative.html#t%3AMultiplicative"
+>Multiplicative</A
+></TT
+>. Mnemonic: <TT
+>Exp a * Exp b = Exp (a + b)</TT
+>
+</TD
+></TR
+><TR
+><TD CLASS="section4"
+>Constructors</TD
+></TR
+><TR
+><TD CLASS="body"
+><TABLE CLASS="vanilla" CELLSPACING="5" CELLPADDING="0"
+><TR
+><TD CLASS="arg"
+><A NAME="v%3AExp"
+></A
+><B
+>Exp</B
+></TD
+><TD CLASS="rdoc"
+></TD
+></TR
+><TR
+><TD CLASS="body" COLSPAN="2"
+><TABLE CLASS="vanilla" CELLSPACING="1" CELLPADDING="0"
+><TR
+><TD CLASS="arg"
+><A NAME="v%3AgetExp"
+></A
+><B
+>getExp</B
+> :: m</TD
+><TD CLASS="rdoc"
+></TD
+></TR
+></TABLE
+></TD
+></TR
+></TABLE
+></TD
+></TR
+><TR
+><TD CLASS="section4"
+><IMG SRC="minus.gif" CLASS="coll" ONCLICK="toggle(this,'i:Exp')" ALT="show/hide"
+> Instances</TD
+></TR
+><TR
+><TD CLASS="body"
+><DIV ID="i:Exp" STYLE="display:block;"
+><TABLE CLASS="vanilla" CELLSPACING="1" CELLPADDING="0"
+><TR
+><TD CLASS="decl"
+><A HREF="/usr/local/share/doc/ghc/libraries/base/Data-Monoid.html#t%3AMonoid"
+>Monoid</A
+> m =&gt; <A HREF="Data-Monoid-Multiplicative.html#t%3AMultiplicative"
+>Multiplicative</A
+> (<A HREF="Data-Monoid-Multiplicative.html#t%3AExp"
+>Exp</A
+> m)</TD
+></TR
+></TABLE
+></DIV
+></TD
+></TR
+></TABLE
+></TD
+></TR
+><TR
+><TD CLASS="s15"
+></TD
+></TR
+><TR
+><TD CLASS="botbar"
+>Produced by <A HREF="http://www.haskell.org/haddock/"
+>Haddock</A
+> version 2.3.0</TD
+></TR
+></TABLE
+></BODY
+></HTML
+>
addfile ./dist/doc/html/monoids/Data-Monoid-Ord.html
hunk ./dist/doc/html/monoids/Data-Monoid-Ord.html 1
+<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd">
+<!--Rendered using the Haskell Html Library v0.2-->
+<HTML
+><HEAD
+><META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=UTF-8"
+><TITLE
+>Data.Monoid.Ord</TITLE
+><LINK HREF="haddock.css" REL="stylesheet" TYPE="text/css"
+><SCRIPT SRC="haddock-util.js" TYPE="text/javascript"
+></SCRIPT
+></HEAD
+><BODY
+><TABLE CLASS="vanilla" CELLSPACING="0" CELLPADDING="0"
+><TR
+><TD CLASS="topbar"
+><TABLE CLASS="vanilla" CELLSPACING="0" CELLPADDING="0"
+><TR
+><TD
+><IMG SRC="haskell_icon.gif" WIDTH="16" HEIGHT="16" ALT=" "
+></TD
+><TD CLASS="title"
+>monoids-0.1.6: Lots of Monoids</TD
+><TD CLASS="topbut"
+><A HREF="src/Data-Monoid-Ord.html"
+>Source code</A
+></TD
+><TD CLASS="topbut"
+><A HREF="index.html"
+>Contents</A
+></TD
+><TD CLASS="topbut"
+><A HREF="doc-index.html"
+>Index</A
+></TD
+></TR
+></TABLE
+></TD
+></TR
+><TR
+><TD CLASS="modulebar"
+><TABLE CLASS="vanilla" CELLSPACING="0" CELLPADDING="0"
+><TR
+><TD
+><FONT SIZE="6"
+>Data.Monoid.Ord</FONT
+></TD
+></TR
+></TABLE
+></TD
+></TR
+><TR
+><TD CLASS="s15"
+></TD
+></TR
+><TR
+><TD
+><TABLE CLASS="vanilla" CELLSPACING="0" CELLPADDING="0"
+><TR
+><TD CLASS="section4"
+><B
+>Contents</B
+></TD
+></TR
+><TR
+><TD
+><DL
+><DT
+><A HREF="#1"
+>Max
+</A
+></DT
+><DT
+><A HREF="#2"
+>Min
+</A
+></DT
+><DT
+><A HREF="#3"
+>MaxPriority: Max semigroup w/ added bottom
+</A
+></DT
+><DT
+><A HREF="#4"
+>MinPriority: Min semigroup w/ added top
+</A
+></DT
+></DL
+></TD
+></TR
+></TABLE
+></TD
+></TR
+><TR
+><TD CLASS="s15"
+></TD
+></TR
+><TR
+><TD CLASS="s15"
+></TD
+></TR
+><TR
+><TD CLASS="section1"
+>Synopsis</TD
+></TR
+><TR
+><TD CLASS="s15"
+></TD
+></TR
+><TR
+><TD CLASS="body"
+><TABLE CLASS="vanilla" CELLSPACING="0" CELLPADDING="0"
+><TR
+><TD CLASS="decl"
+>module <A HREF="Data-Monoid-Reducer.html"
+>Data.Monoid.Reducer</A
+></TD
+></TR
+><TR
+><TD CLASS="s8"
+></TD
+></TR
+><TR
+><TD CLASS="decl"
+><SPAN CLASS="keyword"
+>newtype</SPAN
+>  <A HREF="#t%3AMax"
+>Max</A
+> a = <A HREF="#v%3AMax"
+>Max</A
+> {<TABLE CLASS="vanilla" CELLSPACING="0" CELLPADDING="0"
+><TR
+><TD CLASS="recfield"
+><A HREF="#v%3AgetMax"
+>getMax</A
+> :: a</TD
+></TR
+></TABLE
+>}</TD
+></TR
+><TR
+><TD CLASS="s8"
+></TD
+></TR
+><TR
+><TD CLASS="decl"
+><SPAN CLASS="keyword"
+>newtype</SPAN
+>  <A HREF="#t%3AMin"
+>Min</A
+> a = <A HREF="#v%3AMin"
+>Min</A
+> {<TABLE CLASS="vanilla" CELLSPACING="0" CELLPADDING="0"
+><TR
+><TD CLASS="recfield"
+><A HREF="#v%3AgetMin"
+>getMin</A
+> :: a</TD
+></TR
+></TABLE
+>}</TD
+></TR
+><TR
+><TD CLASS="s8"
+></TD
+></TR
+><TR
+><TD CLASS="decl"
+><SPAN CLASS="keyword"
+>newtype</SPAN
+>  <A HREF="#t%3AMaxPriority"
+>MaxPriority</A
+> a = <A HREF="#v%3AMaxPriority"
+>MaxPriority</A
+> {<TABLE CLASS="vanilla" CELLSPACING="0" CELLPADDING="0"
+><TR
+><TD CLASS="recfield"
+><A HREF="#v%3AgetMaxPriority"
+>getMaxPriority</A
+> :: <A HREF="/usr/local/share/doc/ghc/libraries/base/Data-Maybe.html#t%3AMaybe"
+>Maybe</A
+> a</TD
+></TR
+></TABLE
+>}</TD
+></TR
+><TR
+><TD CLASS="s8"
+></TD
+></TR
+><TR
+><TD CLASS="decl"
+><A HREF="#v%3Aminfinity"
+>minfinity</A
+> ::  <A HREF="Data-Monoid-Ord.html#t%3AMaxPriority"
+>MaxPriority</A
+> a</TD
+></TR
+><TR
+><TD CLASS="s8"
+></TD
+></TR
+><TR
+><TD CLASS="decl"
+><SPAN CLASS="keyword"
+>newtype</SPAN
+>  <A HREF="#t%3AMinPriority"
+>MinPriority</A
+> a = <A HREF="#v%3AMinPriority"
+>MinPriority</A
+> {<TABLE CLASS="vanilla" CELLSPACING="0" CELLPADDING="0"
+><TR
+><TD CLASS="recfield"
+><A HREF="#v%3AgetMinPriority"
+>getMinPriority</A
+> :: <A HREF="/usr/local/share/doc/ghc/libraries/base/Data-Maybe.html#t%3AMaybe"
+>Maybe</A
+> a</TD
+></TR
+></TABLE
+>}</TD
+></TR
+><TR
+><TD CLASS="s8"
+></TD
+></TR
+><TR
+><TD CLASS="decl"
+><A HREF="#v%3Ainfinity"
+>infinity</A
+> ::  <A HREF="Data-Monoid-Ord.html#t%3AMinPriority"
+>MinPriority</A
+> a</TD
+></TR
+></TABLE
+></TD
+></TR
+><TR
+><TD CLASS="s15"
+></TD
+></TR
+><TR
+><TD CLASS="section1"
+>Documentation</TD
+></TR
+><TR
+><TD CLASS="s15"
+></TD
+></TR
+><TR
+><TD CLASS="decl"
+>module <A HREF="Data-Monoid-Reducer.html"
+>Data.Monoid.Reducer</A
+></TD
+></TR
+><TR
+><TD CLASS="s15"
+></TD
+></TR
+><TR
+><TD CLASS="section1"
+><A NAME="1"
+>Max
+</A
+></TD
+></TR
+><TR
+><TD CLASS="s15"
+></TD
+></TR
+><TR
+><TD CLASS="topdecl"
+><TABLE CLASS="declbar"
+><TR
+><TD CLASS="declname"
+><SPAN CLASS="keyword"
+>newtype</SPAN
+>  <A NAME="t%3AMax"
+></A
+><B
+>Max</B
+> a </TD
+><TD CLASS="declbut"
+><A HREF="src/Data-Monoid-Ord.html#Max"
+>Source</A
+></TD
+></TR
+></TABLE
+></TD
+></TR
+><TR
+><TD CLASS="body"
+><TABLE CLASS="vanilla" CELLSPACING="0" CELLPADDING="0"
+><TR
+><TD CLASS="ndoc"
+>The <TT
+><A HREF="/usr/local/share/doc/ghc/libraries/base/Data-Monoid.html#t%3AMonoid"
+>Monoid</A
+></TT
+> <TT
+>(<TT
+><A HREF="/usr/local/share/doc/ghc/libraries/base/Data-Ord.html#v%3Amax"
+>max</A
+></TT
+>,<TT
+><A HREF="/usr/local/share/doc/ghc/libraries/base/Prelude.html#v%3AminBound"
+>minBound</A
+></TT
+>)</TT
+>
+</TD
+></TR
+><TR
+><TD CLASS="section4"
+>Constructors</TD
+></TR
+><TR
+><TD CLASS="body"
+><TABLE CLASS="vanilla" CELLSPACING="5" CELLPADDING="0"
+><TR
+><TD CLASS="arg"
+><A NAME="v%3AMax"
+></A
+><B
+>Max</B
+></TD
+><TD CLASS="rdoc"
+></TD
+></TR
+><TR
+><TD CLASS="body" COLSPAN="2"
+><TABLE CLASS="vanilla" CELLSPACING="1" CELLPADDING="0"
+><TR
+><TD CLASS="arg"
+><A NAME="v%3AgetMax"
+></A
+><B
+>getMax</B
+> :: a</TD
+><TD CLASS="rdoc"
+></TD
+></TR
+></TABLE
+></TD
+></TR
+></TABLE
+></TD
+></TR
+><TR
+><TD CLASS="section4"
+><IMG SRC="minus.gif" CLASS="coll" ONCLICK="toggle(this,'i:Max')" ALT="show/hide"
+> Instances</TD
+></TR
+><TR
+><TD CLASS="body"
+><DIV ID="i:Max" STYLE="display:block;"
+><TABLE CLASS="vanilla" CELLSPACING="1" CELLPADDING="0"
+><TR
+><TD CLASS="decl"
+><A HREF="/usr/local/share/doc/ghc/libraries/base/Control-Monad.html#t%3AFunctor"
+>Functor</A
+> <A HREF="Data-Monoid-Ord.html#t%3AMax"
+>Max</A
+></TD
+></TR
+><TR
+><TD CLASS="decl"
+>Pointed <A HREF="Data-Monoid-Ord.html#t%3AMax"
+>Max</A
+></TD
+></TR
+><TR
+><TD CLASS="decl"
+>Copointed <A HREF="Data-Monoid-Ord.html#t%3AMax"
+>Max</A
+></TD
+></TR
+><TR
+><TD CLASS="decl"
+>(<A HREF="/usr/local/share/doc/ghc/libraries/base/Data-Ord.html#t%3AOrd"
+>Ord</A
+> a, <A HREF="/usr/local/share/doc/ghc/libraries/base/Prelude.html#t%3ABounded"
+>Bounded</A
+> a) =&gt; <A HREF="Data-Monoid-Reducer.html#t%3AReducer"
+>Reducer</A
+> a (<A HREF="Data-Monoid-Ord.html#t%3AMax"
+>Max</A
+> a)</TD
+></TR
+><TR
+><TD CLASS="decl"
+><A HREF="/usr/local/share/doc/ghc/libraries/base/Prelude.html#t%3ABounded"
+>Bounded</A
+> a =&gt; <A HREF="/usr/local/share/doc/ghc/libraries/base/Prelude.html#t%3ABounded"
+>Bounded</A
+> (<A HREF="Data-Monoid-Ord.html#t%3AMax"
+>Max</A
+> a)</TD
+></TR
+><TR
+><TD CLASS="decl"
+><A HREF="/usr/local/share/doc/ghc/libraries/base/Data-Eq.html#t%3AEq"
+>Eq</A
+> a =&gt; <A HREF="/usr/local/share/doc/ghc/libraries/base/Data-Eq.html#t%3AEq"
+>Eq</A
+> (<A HREF="Data-Monoid-Ord.html#t%3AMax"
+>Max</A
+> a)</TD
+></TR
+><TR
+><TD CLASS="decl"
+><A HREF="/usr/local/share/doc/ghc/libraries/base/Data-Ord.html#t%3AOrd"
+>Ord</A
+> a =&gt; <A HREF="/usr/local/share/doc/ghc/libraries/base/Data-Ord.html#t%3AOrd"
+>Ord</A
+> (<A HREF="Data-Monoid-Ord.html#t%3AMax"
+>Max</A
+> a)</TD
+></TR
+><TR
+><TD CLASS="decl"
+><A HREF="/usr/local/share/doc/ghc/libraries/base/Text-Read.html#t%3ARead"
+>Read</A
+> a =&gt; <A HREF="/usr/local/share/doc/ghc/libraries/base/Text-Read.html#t%3ARead"
+>Read</A
+> (<A HREF="Data-Monoid-Ord.html#t%3AMax"
+>Max</A
+> a)</TD
+></TR
+><TR
+><TD CLASS="decl"
+><A HREF="/usr/local/share/doc/ghc/libraries/base/Text-Show.html#t%3AShow"
+>Show</A
+> a =&gt; <A HREF="/usr/local/share/doc/ghc/libraries/base/Text-Show.html#t%3AShow"
+>Show</A
+> (<A HREF="Data-Monoid-Ord.html#t%3AMax"
+>Max</A
+> a)</TD
+></TR
+><TR
+><TD CLASS="decl"
+>(<A HREF="/usr/local/share/doc/ghc/libraries/base/Data-Ord.html#t%3AOrd"
+>Ord</A
+> a, <A HREF="/usr/local/share/doc/ghc/libraries/base/Prelude.html#t%3ABounded"
+>Bounded</A
+> a) =&gt; <A HREF="/usr/local/share/doc/ghc/libraries/base/Data-Monoid.html#t%3AMonoid"
+>Monoid</A
+> (<A HREF="Data-Monoid-Ord.html#t%3AMax"
+>Max</A
+> a)</TD
+></TR
+></TABLE
+></DIV
+></TD
+></TR
+></TABLE
+></TD
+></TR
+><TR
+><TD CLASS="s15"
+></TD
+></TR
+><TR
+><TD CLASS="section1"
+><A NAME="2"
+>Min
+</A
+></TD
+></TR
+><TR
+><TD CLASS="s15"
+></TD
+></TR
+><TR
+><TD CLASS="topdecl"
+><TABLE CLASS="declbar"
+><TR
+><TD CLASS="declname"
+><SPAN CLASS="keyword"
+>newtype</SPAN
+>  <A NAME="t%3AMin"
+></A
+><B
+>Min</B
+> a </TD
+><TD CLASS="declbut"
+><A HREF="src/Data-Monoid-Ord.html#Min"
+>Source</A
+></TD
+></TR
+></TABLE
+></TD
+></TR
+><TR
+><TD CLASS="body"
+><TABLE CLASS="vanilla" CELLSPACING="0" CELLPADDING="0"
+><TR
+><TD CLASS="ndoc"
+>The <TT
+><A HREF="/usr/local/share/doc/ghc/libraries/base/Data-Monoid.html#t%3AMonoid"
+>Monoid</A
+></TT
+> given by <TT
+>(<TT
+><A HREF="/usr/local/share/doc/ghc/libraries/base/Data-Ord.html#v%3Amin"
+>min</A
+></TT
+>,<TT
+><A HREF="/usr/local/share/doc/ghc/libraries/base/Prelude.html#v%3AmaxBound"
+>maxBound</A
+></TT
+>)</TT
+>
+</TD
+></TR
+><TR
+><TD CLASS="section4"
+>Constructors</TD
+></TR
+><TR
+><TD CLASS="body"
+><TABLE CLASS="vanilla" CELLSPACING="5" CELLPADDING="0"
+><TR
+><TD CLASS="arg"
+><A NAME="v%3AMin"
+></A
+><B
+>Min</B
+></TD
+><TD CLASS="rdoc"
+></TD
+></TR
+><TR
+><TD CLASS="body" COLSPAN="2"
+><TABLE CLASS="vanilla" CELLSPACING="1" CELLPADDING="0"
+><TR
+><TD CLASS="arg"
+><A NAME="v%3AgetMin"
+></A
+><B
+>getMin</B
+> :: a</TD
+><TD CLASS="rdoc"
+></TD
+></TR
+></TABLE
+></TD
+></TR
+></TABLE
+></TD
+></TR
+><TR
+><TD CLASS="section4"
+><IMG SRC="minus.gif" CLASS="coll" ONCLICK="toggle(this,'i:Min')" ALT="show/hide"
+> Instances</TD
+></TR
+><TR
+><TD CLASS="body"
+><DIV ID="i:Min" STYLE="display:block;"
+><TABLE CLASS="vanilla" CELLSPACING="1" CELLPADDING="0"
+><TR
+><TD CLASS="decl"
+><A HREF="/usr/local/share/doc/ghc/libraries/base/Control-Monad.html#t%3AFunctor"
+>Functor</A
+> <A HREF="Data-Monoid-Ord.html#t%3AMin"
+>Min</A
+></TD
+></TR
+><TR
+><TD CLASS="decl"
+>Pointed <A HREF="Data-Monoid-Ord.html#t%3AMin"
+>Min</A
+></TD
+></TR
+><TR
+><TD CLASS="decl"
+>Copointed <A HREF="Data-Monoid-Ord.html#t%3AMin"
+>Min</A
+></TD
+></TR
+><TR
+><TD CLASS="decl"
+>(<A HREF="/usr/local/share/doc/ghc/libraries/base/Data-Ord.html#t%3AOrd"
+>Ord</A
+> a, <A HREF="/usr/local/share/doc/ghc/libraries/base/Prelude.html#t%3ABounded"
+>Bounded</A
+> a) =&gt; <A HREF="Data-Monoid-Reducer.html#t%3AReducer"
+>Reducer</A
+> a (<A HREF="Data-Monoid-Ord.html#t%3AMin"
+>Min</A
+> a)</TD
+></TR
+><TR
+><TD CLASS="decl"
+><A HREF="/usr/local/share/doc/ghc/libraries/base/Prelude.html#t%3ABounded"
+>Bounded</A
+> a =&gt; <A HREF="/usr/local/share/doc/ghc/libraries/base/Prelude.html#t%3ABounded"
+>Bounded</A
+> (<A HREF="Data-Monoid-Ord.html#t%3AMin"
+>Min</A
+> a)</TD
+></TR
+><TR
+><TD CLASS="decl"
+><A HREF="/usr/local/share/doc/ghc/libraries/base/Data-Eq.html#t%3AEq"
+>Eq</A
+> a =&gt; <A HREF="/usr/local/share/doc/ghc/libraries/base/Data-Eq.html#t%3AEq"
+>Eq</A
+> (<A HREF="Data-Monoid-Ord.html#t%3AMin"
+>Min</A
+> a)</TD
+></TR
+><TR
+><TD CLASS="decl"
+><A HREF="/usr/local/share/doc/ghc/libraries/base/Data-Ord.html#t%3AOrd"
+>Ord</A
+> a =&gt; <A HREF="/usr/local/share/doc/ghc/libraries/base/Data-Ord.html#t%3AOrd"
+>Ord</A
+> (<A HREF="Data-Monoid-Ord.html#t%3AMin"
+>Min</A
+> a)</TD
+></TR
+><TR
+><TD CLASS="decl"
+><A HREF="/usr/local/share/doc/ghc/libraries/base/Text-Read.html#t%3ARead"
+>Read</A
+> a =&gt; <A HREF="/usr/local/share/doc/ghc/libraries/base/Text-Read.html#t%3ARead"
+>Read</A
+> (<A HREF="Data-Monoid-Ord.html#t%3AMin"
+>Min</A
+> a)</TD
+></TR
+><TR
+><TD CLASS="decl"
+><A HREF="/usr/local/share/doc/ghc/libraries/base/Text-Show.html#t%3AShow"
+>Show</A
+> a =&gt; <A HREF="/usr/local/share/doc/ghc/libraries/base/Text-Show.html#t%3AShow"
+>Show</A
+> (<A HREF="Data-Monoid-Ord.html#t%3AMin"
+>Min</A
+> a)</TD
+></TR
+><TR
+><TD CLASS="decl"
+>(<A HREF="/usr/local/share/doc/ghc/libraries/base/Data-Ord.html#t%3AOrd"
+>Ord</A
+> a, <A HREF="/usr/local/share/doc/ghc/libraries/base/Prelude.html#t%3ABounded"
+>Bounded</A
+> a) =&gt; <A HREF="/usr/local/share/doc/ghc/libraries/base/Data-Monoid.html#t%3AMonoid"
+>Monoid</A
+> (<A HREF="Data-Monoid-Ord.html#t%3AMin"
+>Min</A
+> a)</TD
+></TR
+></TABLE
+></DIV
+></TD
+></TR
+></TABLE
+></TD
+></TR
+><TR
+><TD CLASS="s15"
+></TD
+></TR
+><TR
+><TD CLASS="section1"
+><A NAME="3"
+>MaxPriority: Max semigroup w/ added bottom
+</A
+></TD
+></TR
+><TR
+><TD CLASS="s15"
+></TD
+></TR
+><TR
+><TD CLASS="topdecl"
+><TABLE CLASS="declbar"
+><TR
+><TD CLASS="declname"
+><SPAN CLASS="keyword"
+>newtype</SPAN
+>  <A NAME="t%3AMaxPriority"
+></A
+><B
+>MaxPriority</B
+> a </TD
+><TD CLASS="declbut"
+><A HREF="src/Data-Monoid-Ord.html#MaxPriority"
+>Source</A
+></TD
+></TR
+></TABLE
+></TD
+></TR
+><TR
+><TD CLASS="body"
+><TABLE CLASS="vanilla" CELLSPACING="0" CELLPADDING="0"
+><TR
+><TD CLASS="ndoc"
+>The <TT
+><A HREF="/usr/local/share/doc/ghc/libraries/base/Data-Monoid.html#t%3AMonoid"
+>Monoid</A
+></TT
+> <TT
+>(<TT
+><A HREF="/usr/local/share/doc/ghc/libraries/base/Data-Ord.html#v%3Amax"
+>max</A
+></TT
+>,<TT
+><A HREF="/usr/local/share/doc/ghc/libraries/base/Data-Maybe.html#v%3ANothing"
+>Nothing</A
+></TT
+>)</TT
+> over <TT
+><TT
+><A HREF="/usr/local/share/doc/ghc/libraries/base/Data-Maybe.html#t%3AMaybe"
+>Maybe</A
+></TT
+> a</TT
+> where <TT
+><A HREF="/usr/local/share/doc/ghc/libraries/base/Data-Maybe.html#v%3ANothing"
+>Nothing</A
+></TT
+> is the bottom element
+</TD
+></TR
+><TR
+><TD CLASS="section4"
+>Constructors</TD
+></TR
+><TR
+><TD CLASS="body"
+><TABLE CLASS="vanilla" CELLSPACING="5" CELLPADDING="0"
+><TR
+><TD CLASS="arg"
+><A NAME="v%3AMaxPriority"
+></A
+><B
+>MaxPriority</B
+></TD
+><TD CLASS="rdoc"
+></TD
+></TR
+><TR
+><TD CLASS="body" COLSPAN="2"
+><TABLE CLASS="vanilla" CELLSPACING="1" CELLPADDING="0"
+><TR
+><TD CLASS="arg"
+><A NAME="v%3AgetMaxPriority"
+></A
+><B
+>getMaxPriority</B
+> :: <A HREF="/usr/local/share/doc/ghc/libraries/base/Data-Maybe.html#t%3AMaybe"
+>Maybe</A
+> a</TD
+><TD CLASS="rdoc"
+></TD
+></TR
+></TABLE
+></TD
+></TR
+></TABLE
+></TD
+></TR
+><TR
+><TD CLASS="section4"
+><IMG SRC="minus.gif" CLASS="coll" ONCLICK="toggle(this,'i:MaxPriority')" ALT="show/hide"
+> Instances</TD
+></TR
+><TR
+><TD CLASS="body"
+><DIV ID="i:MaxPriority" STYLE="display:block;"
+><TABLE CLASS="vanilla" CELLSPACING="1" CELLPADDING="0"
+><TR
+><TD CLASS="decl"
+><A HREF="/usr/local/share/doc/ghc/libraries/base/Control-Monad.html#t%3AFunctor"
+>Functor</A
+> <A HREF="Data-Monoid-Ord.html#t%3AMaxPriority"
+>MaxPriority</A
+></TD
+></TR
+><TR
+><TD CLASS="decl"
+>Pointed <A HREF="Data-Monoid-Ord.html#t%3AMaxPriority"
+>MaxPriority</A
+></TD
+></TR
+><TR
+><TD CLASS="decl"
+><A HREF="/usr/local/share/doc/ghc/libraries/base/Data-Eq.html#t%3AEq"
+>Eq</A
+> a =&gt; <A HREF="/usr/local/share/doc/ghc/libraries/base/Data-Eq.html#t%3AEq"
+>Eq</A
+> (<A HREF="Data-Monoid-Ord.html#t%3AMaxPriority"
+>MaxPriority</A
+> a)</TD
+></TR
+><TR
+><TD CLASS="decl"
+><A HREF="/usr/local/share/doc/ghc/libraries/base/Data-Ord.html#t%3AOrd"
+>Ord</A
+> a =&gt; <A HREF="/usr/local/share/doc/ghc/libraries/base/Data-Ord.html#t%3AOrd"
+>Ord</A
+> (<A HREF="Data-Monoid-Ord.html#t%3AMaxPriority"
+>MaxPriority</A
+> a)</TD
+></TR
+><TR
+><TD CLASS="decl"
+><A HREF="/usr/local/share/doc/ghc/libraries/base/Text-Read.html#t%3ARead"
+>Read</A
+> a =&gt; <A HREF="/usr/local/share/doc/ghc/libraries/base/Text-Read.html#t%3ARead"
+>Read</A
+> (<A HREF="Data-Monoid-Ord.html#t%3AMaxPriority"
+>MaxPriority</A
+> a)</TD
+></TR
+><TR
+><TD CLASS="decl"
+><A HREF="/usr/local/share/doc/ghc/libraries/base/Text-Show.html#t%3AShow"
+>Show</A
+> a =&gt; <A HREF="/usr/local/share/doc/ghc/libraries/base/Text-Show.html#t%3AShow"
+>Show</A
+> (<A HREF="Data-Monoid-Ord.html#t%3AMaxPriority"
+>MaxPriority</A
+> a)</TD
+></TR
+><TR
+><TD CLASS="decl"
+><A HREF="/usr/local/share/doc/ghc/libraries/base/Data-Ord.html#t%3AOrd"
+>Ord</A
+> a =&gt; <A HREF="/usr/local/share/doc/ghc/libraries/base/Data-Monoid.html#t%3AMonoid"
+>Monoid</A
+> (<A HREF="Data-Monoid-Ord.html#t%3AMaxPriority"
+>MaxPriority</A
+> a)</TD
+></TR
+><TR
+><TD CLASS="decl"
+><A HREF="/usr/local/share/doc/ghc/libraries/base/Data-Ord.html#t%3AOrd"
+>Ord</A
+> a =&gt; <A HREF="Data-Monoid-Reducer.html#t%3AReducer"
+>Reducer</A
+> (<A HREF="/usr/local/share/doc/ghc/libraries/base/Data-Maybe.html#t%3AMaybe"
+>Maybe</A
+> a) (<A HREF="Data-Monoid-Ord.html#t%3AMaxPriority"
+>MaxPriority</A
+> a)</TD
+></TR
+><TR
+><TD CLASS="decl"
+><A HREF="/usr/local/share/doc/ghc/libraries/base/Data-Ord.html#t%3AOrd"
+>Ord</A
+> a =&gt; <A HREF="Data-Monoid-Reducer.html#t%3AReducer"
+>Reducer</A
+> (<A HREF="Data-Monoid-Ord.html#t%3AMaxPriority"
+>MaxPriority</A
+> a) (<A HREF="Data-Ring-Semi-Ord.html#t%3APriority"
+>Priority</A
+> a)</TD
+></TR
+></TABLE
+></DIV
+></TD
+></TR
+></TABLE
+></TD
+></TR
+><TR
+><TD CLASS="s15"
+></TD
+></TR
+><TR
+><TD CLASS="topdecl"
+><TABLE CLASS="declbar"
+><TR
+><TD CLASS="declname"
+><A NAME="v%3Aminfinity"
+></A
+><B
+>minfinity</B
+> ::  <A HREF="Data-Monoid-Ord.html#t%3AMaxPriority"
+>MaxPriority</A
+> a</TD
+><TD CLASS="declbut"
+><A HREF="src/Data-Monoid-Ord.html#minfinity"
+>Source</A
+></TD
+></TR
+></TABLE
+></TD
+></TR
+><TR
+><TD CLASS="s15"
+></TD
+></TR
+><TR
+><TD CLASS="section1"
+><A NAME="4"
+>MinPriority: Min semigroup w/ added top
+</A
+></TD
+></TR
+><TR
+><TD CLASS="s15"
+></TD
+></TR
+><TR
+><TD CLASS="topdecl"
+><TABLE CLASS="declbar"
+><TR
+><TD CLASS="declname"
+><SPAN CLASS="keyword"
+>newtype</SPAN
+>  <A NAME="t%3AMinPriority"
+></A
+><B
+>MinPriority</B
+> a </TD
+><TD CLASS="declbut"
+><A HREF="src/Data-Monoid-Ord.html#MinPriority"
+>Source</A
+></TD
+></TR
+></TABLE
+></TD
+></TR
+><TR
+><TD CLASS="body"
+><TABLE CLASS="vanilla" CELLSPACING="0" CELLPADDING="0"
+><TR
+><TD CLASS="ndoc"
+>The <TT
+><A HREF="/usr/local/share/doc/ghc/libraries/base/Data-Monoid.html#t%3AMonoid"
+>Monoid</A
+></TT
+> <TT
+>(<TT
+><A HREF="/usr/local/share/doc/ghc/libraries/base/Data-Ord.html#v%3Amin"
+>min</A
+></TT
+>,<TT
+><A HREF="/usr/local/share/doc/ghc/libraries/base/Data-Maybe.html#v%3ANothing"
+>Nothing</A
+></TT
+>)</TT
+> over <TT
+><TT
+><A HREF="/usr/local/share/doc/ghc/libraries/base/Data-Maybe.html#t%3AMaybe"
+>Maybe</A
+></TT
+> a</TT
+> where <TT
+><A HREF="/usr/local/share/doc/ghc/libraries/base/Data-Maybe.html#v%3ANothing"
+>Nothing</A
+></TT
+> is the top element
+</TD
+></TR
+><TR
+><TD CLASS="section4"
+>Constructors</TD
+></TR
+><TR
+><TD CLASS="body"
+><TABLE CLASS="vanilla" CELLSPACING="5" CELLPADDING="0"
+><TR
+><TD CLASS="arg"
+><A NAME="v%3AMinPriority"
+></A
+><B
+>MinPriority</B
+></TD
+><TD CLASS="rdoc"
+></TD
+></TR
+><TR
+><TD CLASS="body" COLSPAN="2"
+><TABLE CLASS="vanilla" CELLSPACING="1" CELLPADDING="0"
+><TR
+><TD CLASS="arg"
+><A NAME="v%3AgetMinPriority"
+></A
+><B
+>getMinPriority</B
+> :: <A HREF="/usr/local/share/doc/ghc/libraries/base/Data-Maybe.html#t%3AMaybe"
+>Maybe</A
+> a</TD
+><TD CLASS="rdoc"
+></TD
+></TR
+></TABLE
+></TD
+></TR
+></TABLE
+></TD
+></TR
+><TR
+><TD CLASS="section4"
+><IMG SRC="minus.gif" CLASS="coll" ONCLICK="toggle(this,'i:MinPriority')" ALT="show/hide"
+> Instances</TD
+></TR
+><TR
+><TD CLASS="body"
+><DIV ID="i:MinPriority" STYLE="display:block;"
+><TABLE CLASS="vanilla" CELLSPACING="1" CELLPADDING="0"
+><TR
+><TD CLASS="decl"
+><A HREF="/usr/local/share/doc/ghc/libraries/base/Control-Monad.html#t%3AFunctor"
+>Functor</A
+> <A HREF="Data-Monoid-Ord.html#t%3AMinPriority"
+>MinPriority</A
+></TD
+></TR
+><TR
+><TD CLASS="decl"
+>Pointed <A HREF="Data-Monoid-Ord.html#t%3AMinPriority"
+>MinPriority</A
+></TD
+></TR
+><TR
+><TD CLASS="decl"
+><A HREF="/usr/local/share/doc/ghc/libraries/base/Data-Eq.html#t%3AEq"
+>Eq</A
+> a =&gt; <A HREF="/usr/local/share/doc/ghc/libraries/base/Data-Eq.html#t%3AEq"
+>Eq</A
+> (<A HREF="Data-Monoid-Ord.html#t%3AMinPriority"
+>MinPriority</A
+> a)</TD
+></TR
+><TR
+><TD CLASS="decl"
+><A HREF="/usr/local/share/doc/ghc/libraries/base/Data-Ord.html#t%3AOrd"
+>Ord</A
+> a =&gt; <A HREF="/usr/local/share/doc/ghc/libraries/base/Data-Ord.html#t%3AOrd"
+>Ord</A
+> (<A HREF="Data-Monoid-Ord.html#t%3AMinPriority"
+>MinPriority</A
+> a)</TD
+></TR
+><TR
+><TD CLASS="decl"
+><A HREF="/usr/local/share/doc/ghc/libraries/base/Text-Read.html#t%3ARead"
+>Read</A
+> a =&gt; <A HREF="/usr/local/share/doc/ghc/libraries/base/Text-Read.html#t%3ARead"
+>Read</A
+> (<A HREF="Data-Monoid-Ord.html#t%3AMinPriority"
+>MinPriority</A
+> a)</TD
+></TR
+><TR
+><TD CLASS="decl"
+><A HREF="/usr/local/share/doc/ghc/libraries/base/Text-Show.html#t%3AShow"
+>Show</A
+> a =&gt; <A HREF="/usr/local/share/doc/ghc/libraries/base/Text-Show.html#t%3AShow"
+>Show</A
+> (<A HREF="Data-Monoid-Ord.html#t%3AMinPriority"
+>MinPriority</A
+> a)</TD
+></TR
+><TR
+><TD CLASS="decl"
+><A HREF="/usr/local/share/doc/ghc/libraries/base/Data-Ord.html#t%3AOrd"
+>Ord</A
+> a =&gt; <A HREF="/usr/local/share/doc/ghc/libraries/base/Data-Monoid.html#t%3AMonoid"
+>Monoid</A
+> (<A HREF="Data-Monoid-Ord.html#t%3AMinPriority"
+>MinPriority</A
+> a)</TD
+></TR
+><TR
+><TD CLASS="decl"
+><A HREF="/usr/local/share/doc/ghc/libraries/base/Data-Ord.html#t%3AOrd"
+>Ord</A
+> a =&gt; <A HREF="Data-Monoid-Reducer.html#t%3AReducer"
+>Reducer</A
+> (<A HREF="/usr/local/share/doc/ghc/libraries/base/Data-Maybe.html#t%3AMaybe"
+>Maybe</A
+> a) (<A HREF="Data-Monoid-Ord.html#t%3AMinPriority"
+>MinPriority</A
+> a)</TD
+></TR
+><TR
+><TD CLASS="decl"
+><A HREF="/usr/local/share/doc/ghc/libraries/base/Data-Ord.html#t%3AOrd"
+>Ord</A
+> a =&gt; <A HREF="Data-Monoid-Reducer.html#t%3AReducer"
+>Reducer</A
+> (<A HREF="Data-Monoid-Ord.html#t%3AMinPriority"
+>MinPriority</A
+> a) (<A HREF="Data-Ring-Semi-Tropical.html#t%3ATropical"
+>Tropical</A
+> a)</TD
+></TR
+><TR
+><TD CLASS="decl"
+><A HREF="/usr/local/share/doc/ghc/libraries/base/Data-Ord.html#t%3AOrd"
+>Ord</A
+> a =&gt; <A HREF="Data-Monoid-Reducer.html#t%3AReducer"
+>Reducer</A
+> (<A HREF="Data-Monoid-Ord.html#t%3AMinPriority"
+>MinPriority</A
+> a) (<A HREF="Data-Ring-Semi-Ord.html#t%3APriority"
+>Priority</A
+> a)</TD
+></TR
+></TABLE
+></DIV
+></TD
+></TR
+></TABLE
+></TD
+></TR
+><TR
+><TD CLASS="s15"
+></TD
+></TR
+><TR
+><TD CLASS="topdecl"
+><TABLE CLASS="declbar"
+><TR
+><TD CLASS="declname"
+><A NAME="v%3Ainfinity"
+></A
+><B
+>infinity</B
+> ::  <A HREF="Data-Monoid-Ord.html#t%3AMinPriority"
+>MinPriority</A
+> a</TD
+><TD CLASS="declbut"
+><A HREF="src/Data-Monoid-Ord.html#infinity"
+>Source</A
+></TD
+></TR
+></TABLE
+></TD
+></TR
+><TR
+><TD CLASS="s15"
+></TD
+></TR
+><TR
+><TD CLASS="botbar"
+>Produced by <A HREF="http://www.haskell.org/haddock/"
+>Haddock</A
+> version 2.3.0</TD
+></TR
+></TABLE
+></BODY
+></HTML
+>
addfile ./dist/doc/html/monoids/Data-Monoid-Reducer-Char.html
hunk ./dist/doc/html/monoids/Data-Monoid-Reducer-Char.html 1
+<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd">
+<!--Rendered using the Haskell Html Library v0.2-->
+<HTML
+><HEAD
+><META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=UTF-8"
+><TITLE
+>Data.Monoid.Reducer.Char</TITLE
+><LINK HREF="haddock.css" REL="stylesheet" TYPE="text/css"
+><SCRIPT SRC="haddock-util.js" TYPE="text/javascript"
+></SCRIPT
+></HEAD
+><BODY
+><TABLE CLASS="vanilla" CELLSPACING="0" CELLPADDING="0"
+><TR
+><TD CLASS="topbar"
+><TABLE CLASS="vanilla" CELLSPACING="0" CELLPADDING="0"
+><TR
+><TD
+><IMG SRC="haskell_icon.gif" WIDTH="16" HEIGHT="16" ALT=" "
+></TD
+><TD CLASS="title"
+>monoids-0.1.6: Lots of Monoids</TD
+><TD CLASS="topbut"
+><A HREF="src/Data-Monoid-Reducer-Char.html"
+>Source code</A
+></TD
+><TD CLASS="topbut"
+><A HREF="index.html"
+>Contents</A
+></TD
+><TD CLASS="topbut"
+><A HREF="doc-index.html"
+>Index</A
+></TD
+></TR
+></TABLE
+></TD
+></TR
+><TR
+><TD CLASS="modulebar"
+><TABLE CLASS="vanilla" CELLSPACING="0" CELLPADDING="0"
+><TR
+><TD
+><FONT SIZE="6"
+>Data.Monoid.Reducer.Char</FONT
+></TD
+><TD ALIGN="right"
+><TABLE CLASS="narrow" CELLSPACING="0" CELLPADDING="0"
+><TR
+><TD CLASS="infohead"
+>Portability</TD
+><TD CLASS="infoval"
+>non-portable (MPTCs)</TD
+></TR
+><TR
+><TD CLASS="infohead"
+>Stability</TD
+><TD CLASS="infoval"
+>experimental</TD
+></TR
+><TR
+><TD CLASS="infohead"
+>Maintainer</TD
+><TD CLASS="infoval"
+>libraries@haskell.org</TD
+></TR
+></TABLE
+></TD
+></TR
+></TABLE
+></TD
+></TR
+><TR
+><TD CLASS="s15"
+></TD
+></TR
+><TR
+><TD CLASS="section1"
+>Description</TD
+></TR
+><TR
+><TD CLASS="doc"
+></TD
+></TR
+><TR
+><TD CLASS="s15"
+></TD
+></TR
+><TR
+><TD CLASS="section1"
+>Synopsis</TD
+></TR
+><TR
+><TD CLASS="s15"
+></TD
+></TR
+><TR
+><TD CLASS="body"
+><TABLE CLASS="vanilla" CELLSPACING="0" CELLPADDING="0"
+><TR
+><TD CLASS="decl"
+>module <A HREF="Data-Monoid-Reducer.html"
+>Data.Monoid.Reducer</A
+></TD
+></TR
+><TR
+><TD CLASS="s8"
+></TD
+></TR
+><TR
+><TD CLASS="decl"
+><SPAN CLASS="keyword"
+>class</SPAN
+> <A HREF="Data-Monoid-Reducer.html#t%3AReducer"
+>Reducer</A
+> <A HREF="/usr/local/share/doc/ghc/libraries/ghc-prim/GHC-Types.html#t%3AChar"
+>Char</A
+> m =&gt; <A HREF="#t%3ACharReducer"
+>CharReducer</A
+> m  <SPAN CLASS="keyword"
+>where</SPAN
+></TD
+></TR
+><TR
+><TD CLASS="body"
+><TABLE CLASS="vanilla" CELLSPACING="0" CELLPADDING="0"
+><TR
+><TD CLASS="decl"
+><A HREF="#v%3AfromChar"
+>fromChar</A
+> :: <A HREF="/usr/local/share/doc/ghc/libraries/ghc-prim/GHC-Types.html#t%3AChar"
+>Char</A
+> -&gt; m</TD
+></TR
+><TR
+><TD CLASS="decl"
+><A HREF="#v%3AinvalidChar"
+>invalidChar</A
+> :: [<A HREF="/usr/local/share/doc/ghc/libraries/base/Data-Word.html#t%3AWord8"
+>Word8</A
+>] -&gt; m</TD
+></TR
+></TABLE
+></TD
+></TR
+><TR
+><TD CLASS="s8"
+></TD
+></TR
+><TR
+><TD CLASS="decl"
+><A HREF="#v%3AinvalidChar"
+>invalidChar</A
+> :: <A HREF="Data-Monoid-Reducer-Char.html#t%3ACharReducer"
+>CharReducer</A
+> m =&gt; [<A HREF="/usr/local/share/doc/ghc/libraries/base/Data-Word.html#t%3AWord8"
+>Word8</A
+>] -&gt; m</TD
+></TR
+><TR
+><TD CLASS="s8"
+></TD
+></TR
+><TR
+><TD CLASS="decl"
+><A HREF="#v%3AfromChar"
+>fromChar</A
+> :: <A HREF="Data-Monoid-Reducer-Char.html#t%3ACharReducer"
+>CharReducer</A
+> m =&gt; <A HREF="/usr/local/share/doc/ghc/libraries/ghc-prim/GHC-Types.html#t%3AChar"
+>Char</A
+> -&gt; m</TD
+></TR
+></TABLE
+></TD
+></TR
+><TR
+><TD CLASS="s15"
+></TD
+></TR
+><TR
+><TD CLASS="section1"
+>Documentation</TD
+></TR
+><TR
+><TD CLASS="s15"
+></TD
+></TR
+><TR
+><TD CLASS="decl"
+>module <A HREF="Data-Monoid-Reducer.html"
+>Data.Monoid.Reducer</A
+></TD
+></TR
+><TR
+><TD CLASS="s15"
+></TD
+></TR
+><TR
+><TD CLASS="topdecl"
+><TABLE CLASS="declbar"
+><TR
+><TD CLASS="declname"
+><SPAN CLASS="keyword"
+>class</SPAN
+> <A HREF="Data-Monoid-Reducer.html#t%3AReducer"
+>Reducer</A
+> <A HREF="/usr/local/share/doc/ghc/libraries/ghc-prim/GHC-Types.html#t%3AChar"
+>Char</A
+> m =&gt; <A NAME="t%3ACharReducer"
+></A
+><B
+>CharReducer</B
+> m  <SPAN CLASS="keyword"
+>where</SPAN
+></TD
+><TD CLASS="declbut"
+><A HREF="src/Data-Monoid-Reducer-Char.html#CharReducer"
+>Source</A
+></TD
+></TR
+></TABLE
+></TD
+></TR
+><TR
+><TD CLASS="body"
+><TABLE CLASS="vanilla" CELLSPACING="0" CELLPADDING="0"
+><TR
+><TD CLASS="ndoc"
+>Provides a mechanism for the UTF8 <TT
+><A HREF="/usr/local/share/doc/ghc/libraries/base/Data-Monoid.html#t%3AMonoid"
+>Monoid</A
+></TT
+> to report invalid characters to one or more monoids.
+</TD
+></TR
+><TR
+><TD CLASS="s8"
+></TD
+></TR
+><TR
+><TD CLASS="section4"
+>Methods</TD
+></TR
+><TR
+><TD CLASS="body"
+><TABLE CLASS="vanilla" CELLSPACING="0" CELLPADDING="0"
+><TR
+><TD CLASS="topdecl"
+><TABLE CLASS="declbar"
+><TR
+><TD CLASS="declname"
+><A NAME="v%3AfromChar"
+></A
+><B
+>fromChar</B
+> :: <A HREF="/usr/local/share/doc/ghc/libraries/ghc-prim/GHC-Types.html#t%3AChar"
+>Char</A
+> -&gt; m</TD
+><TD CLASS="declbut"
+><A HREF="src/Data-Monoid-Reducer-Char.html#fromChar"
+>Source</A
+></TD
+></TR
+></TABLE
+></TD
+></TR
+><TR
+><TD CLASS="s8"
+></TD
+></TR
+><TR
+><TD CLASS="topdecl"
+><TABLE CLASS="declbar"
+><TR
+><TD CLASS="declname"
+><A NAME="v%3AinvalidChar"
+></A
+><B
+>invalidChar</B
+> :: [<A HREF="/usr/local/share/doc/ghc/libraries/base/Data-Word.html#t%3AWord8"
+>Word8</A
+>] -&gt; m</TD
+><TD CLASS="declbut"
+><A HREF="src/Data-Monoid-Reducer-Char.html#invalidChar"
+>Source</A
+></TD
+></TR
+></TABLE
+></TD
+></TR
+></TABLE
+></TD
+></TR
+><TR
+><TD CLASS="s8"
+></TD
+></TR
+><TR
+><TD CLASS="section4"
+><IMG SRC="minus.gif" CLASS="coll" ONCLICK="toggle(this,'i:CharReducer')" ALT="show/hide"
+> Instances</TD
+></TR
+><TR
+><TD CLASS="body"
+><DIV ID="i:CharReducer" STYLE="display:block;"
+><TABLE CLASS="vanilla" CELLSPACING="1" CELLPADDING="0"
+><TR
+><TD CLASS="decl"
+><A HREF="Data-Monoid-Reducer-Char.html#t%3ACharReducer"
+>CharReducer</A
+> ([] <A HREF="/usr/local/share/doc/ghc/libraries/ghc-prim/GHC-Types.html#t%3AChar"
+>Char</A
+>)</TD
+></TR
+><TR
+><TD CLASS="decl"
+><A HREF="Data-Monoid-Reducer-Char.html#t%3ACharReducer"
+>CharReducer</A
+> (<A HREF="Data-Monoid-Lexical-SourcePosition.html#t%3ASourcePosition"
+>SourcePosition</A
+> file)</TD
+></TR
+><TR
+><TD CLASS="decl"
+><A HREF="Data-Monoid-Reducer-Char.html#t%3ACharReducer"
+>CharReducer</A
+> m =&gt; <A HREF="Data-Monoid-Reducer-Char.html#t%3ACharReducer"
+>CharReducer</A
+> (<A HREF="Data-Monoid-Lexical-Words.html#t%3AUnlined"
+>Unlined</A
+> m)</TD
+></TR
+><TR
+><TD CLASS="decl"
+><A HREF="Data-Monoid-Reducer-Char.html#t%3ACharReducer"
+>CharReducer</A
+> m =&gt; <A HREF="Data-Monoid-Reducer-Char.html#t%3ACharReducer"
+>CharReducer</A
+> (<A HREF="Data-Monoid-Lexical-Words.html#t%3AUnspaced"
+>Unspaced</A
+> m)</TD
+></TR
+><TR
+><TD CLASS="decl"
+><A HREF="Data-Monoid-Reducer-Char.html#t%3ACharReducer"
+>CharReducer</A
+> m =&gt; <A HREF="Data-Monoid-Reducer-Char.html#t%3ACharReducer"
+>CharReducer</A
+> (<A HREF="Data-Monoid-Lexical-Words.html#t%3ALines"
+>Lines</A
+> m)</TD
+></TR
+><TR
+><TD CLASS="decl"
+><A HREF="Data-Monoid-Reducer-Char.html#t%3ACharReducer"
+>CharReducer</A
+> m =&gt; <A HREF="Data-Monoid-Reducer-Char.html#t%3ACharReducer"
+>CharReducer</A
+> (<A HREF="Data-Monoid-Lexical-Words.html#t%3AWords"
+>Words</A
+> m)</TD
+></TR
+><TR
+><TD CLASS="decl"
+>(<A HREF="Data-Monoid-Reducer-Char.html#t%3ACharReducer"
+>CharReducer</A
+> m, <A HREF="Data-Monoid-Reducer-Char.html#t%3ACharReducer"
+>CharReducer</A
+> m') =&gt; <A HREF="Data-Monoid-Reducer-Char.html#t%3ACharReducer"
+>CharReducer</A
+> ((,) m m')</TD
+></TR
+><TR
+><TD CLASS="decl"
+>(<A HREF="Data-Monoid-Reducer-Char.html#t%3ACharReducer"
+>CharReducer</A
+> m, <A HREF="Data-Monoid-Reducer-Char.html#t%3ACharReducer"
+>CharReducer</A
+> m', <A HREF="Data-Monoid-Reducer-Char.html#t%3ACharReducer"
+>CharReducer</A
+> m'') =&gt; <A HREF="Data-Monoid-Reducer-Char.html#t%3ACharReducer"
+>CharReducer</A
+> ((,,) m m' m'')</TD
+></TR
+><TR
+><TD CLASS="decl"
+>(<A HREF="Data-Monoid-Reducer-Char.html#t%3ACharReducer"
+>CharReducer</A
+> m, <A HREF="Data-Monoid-Reducer-Char.html#t%3ACharReducer"
+>CharReducer</A
+> m', <A HREF="Data-Monoid-Reducer-Char.html#t%3ACharReducer"
+>CharReducer</A
+> m'', <A HREF="Data-Monoid-Reducer-Char.html#t%3ACharReducer"
+>CharReducer</A
+> m''') =&gt; <A HREF="Data-Monoid-Reducer-Char.html#t%3ACharReducer"
+>CharReducer</A
+> ((,,,) m m' m'' m''')</TD
+></TR
+></TABLE
+></DIV
+></TD
+></TR
+></TABLE
+></TD
+></TR
+><TR
+><TD CLASS="s15"
+></TD
+></TR
+><TR
+><TD CLASS="topdecl"
+><TABLE CLASS="declbar"
+><TR
+><TD CLASS="declname"
+><A NAME="v%3AinvalidChar"
+></A
+><B
+>invalidChar</B
+> :: <A HREF="Data-Monoid-Reducer-Char.html#t%3ACharReducer"
+>CharReducer</A
+> m =&gt; [<A HREF="/usr/local/share/doc/ghc/libraries/base/Data-Word.html#t%3AWord8"
+>Word8</A
+>] -&gt; m</TD
+><TD CLASS="declbut"
+><A HREF="src/Data-Monoid-Reducer-Char.html#invalidChar"
+>Source</A
+></TD
+></TR
+></TABLE
+></TD
+></TR
+><TR
+><TD CLASS="s15"
+></TD
+></TR
+><TR
+><TD CLASS="topdecl"
+><TABLE CLASS="declbar"
+><TR
+><TD CLASS="declname"
+><A NAME="v%3AfromChar"
+></A
+><B
+>fromChar</B
+> :: <A HREF="Data-Monoid-Reducer-Char.html#t%3ACharReducer"
+>CharReducer</A
+> m =&gt; <A HREF="/usr/local/share/doc/ghc/libraries/ghc-prim/GHC-Types.html#t%3AChar"
+>Char</A
+> -&gt; m</TD
+><TD CLASS="declbut"
+><A HREF="src/Data-Monoid-Reducer-Char.html#fromChar"
+>Source</A
+></TD
+></TR
+></TABLE
+></TD
+></TR
+><TR
+><TD CLASS="s15"
+></TD
+></TR
+><TR
+><TD CLASS="botbar"
+>Produced by <A HREF="http://www.haskell.org/haddock/"
+>Haddock</A
+> version 2.3.0</TD
+></TR
+></TABLE
+></BODY
+></HTML
+>
addfile ./dist/doc/html/monoids/Data-Monoid-Reducer-With.html
hunk ./dist/doc/html/monoids/Data-Monoid-Reducer-With.html 1
+<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd">
+<!--Rendered using the Haskell Html Library v0.2-->
+<HTML
+><HEAD
+><META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=UTF-8"
+><TITLE
+>Data.Monoid.Reducer.With</TITLE
+><LINK HREF="haddock.css" REL="stylesheet" TYPE="text/css"
+><SCRIPT SRC="haddock-util.js" TYPE="text/javascript"
+></SCRIPT
+></HEAD
+><BODY
+><TABLE CLASS="vanilla" CELLSPACING="0" CELLPADDING="0"
+><TR
+><TD CLASS="topbar"
+><TABLE CLASS="vanilla" CELLSPACING="0" CELLPADDING="0"
+><TR
+><TD
+><IMG SRC="haskell_icon.gif" WIDTH="16" HEIGHT="16" ALT=" "
+></TD
+><TD CLASS="title"
+>monoids-0.1.6: Lots of Monoids</TD
+><TD CLASS="topbut"
+><A HREF="src/Data-Monoid-Reducer-With.html"
+>Source code</A
+></TD
+><TD CLASS="topbut"
+><A HREF="index.html"
+>Contents</A
+></TD
+><TD CLASS="topbut"
+><A HREF="doc-index.html"
+>Index</A
+></TD
+></TR
+></TABLE
+></TD
+></TR
+><TR
+><TD CLASS="modulebar"
+><TABLE CLASS="vanilla" CELLSPACING="0" CELLPADDING="0"
+><TR
+><TD
+><FONT SIZE="6"
+>Data.Monoid.Reducer.With</FONT
+></TD
+><TD ALIGN="right"
+><TABLE CLASS="narrow" CELLSPACING="0" CELLPADDING="0"
+><TR
+><TD CLASS="infohead"
+>Portability</TD
+><TD CLASS="infoval"
+>non-portable (MPTCs)</TD
+></TR
+><TR
+><TD CLASS="infohead"
+>Stability</TD
+><TD CLASS="infoval"
+>experimental</TD
+></TR
+><TR
+><TD CLASS="infohead"
+>Maintainer</TD
+><TD CLASS="infoval"
+>libraries@haskell.org</TD
+></TR
+></TABLE
+></TD
+></TR
+></TABLE
+></TD
+></TR
+><TR
+><TD CLASS="s15"
+></TD
+></TR
+><TR
+><TD CLASS="section1"
+>Description</TD
+></TR
+><TR
+><TD CLASS="doc"
+></TD
+></TR
+><TR
+><TD CLASS="s15"
+></TD
+></TR
+><TR
+><TD CLASS="section1"
+>Synopsis</TD
+></TR
+><TR
+><TD CLASS="s15"
+></TD
+></TR
+><TR
+><TD CLASS="body"
+><TABLE CLASS="vanilla" CELLSPACING="0" CELLPADDING="0"
+><TR
+><TD CLASS="decl"
+>module <A HREF="Data-Monoid-Reducer.html"
+>Data.Monoid.Reducer</A
+></TD
+></TR
+><TR
+><TD CLASS="s8"
+></TD
+></TR
+><TR
+><TD CLASS="decl"
+><SPAN CLASS="keyword"
+>newtype</SPAN
+>  <A HREF="#t%3AWithReducer"
+>WithReducer</A
+> c m = <A HREF="#v%3AWithReducer"
+>WithReducer</A
+> {<TABLE CLASS="vanilla" CELLSPACING="0" CELLPADDING="0"
+><TR
+><TD CLASS="recfield"
+><A HREF="#v%3AwithoutReducer"
+>withoutReducer</A
+> :: c</TD
+></TR
+></TABLE
+>}</TD
+></TR
+></TABLE
+></TD
+></TR
+><TR
+><TD CLASS="s15"
+></TD
+></TR
+><TR
+><TD CLASS="section1"
+>Documentation</TD
+></TR
+><TR
+><TD CLASS="s15"
+></TD
+></TR
+><TR
+><TD CLASS="decl"
+>module <A HREF="Data-Monoid-Reducer.html"
+>Data.Monoid.Reducer</A
+></TD
+></TR
+><TR
+><TD CLASS="s15"
+></TD
+></TR
+><TR
+><TD CLASS="topdecl"
+><TABLE CLASS="declbar"
+><TR
+><TD CLASS="declname"
+><SPAN CLASS="keyword"
+>newtype</SPAN
+>  <A NAME="t%3AWithReducer"
+></A
+><B
+>WithReducer</B
+> c m </TD
+><TD CLASS="declbut"
+><A HREF="src/Data-Monoid-Reducer-With.html#WithReducer"
+>Source</A
+></TD
+></TR
+></TABLE
+></TD
+></TR
+><TR
+><TD CLASS="body"
+><TABLE CLASS="vanilla" CELLSPACING="0" CELLPADDING="0"
+><TR
+><TD CLASS="ndoc"
+>If <TT
+>m</TT
+> is a <TT
+>c</TT
+>-<A HREF="Reducer.html"
+>Reducer</A
+>, then m is <TT
+>(c <TT
+><A HREF="Data-Monoid-Reducer-With.html#v%3AWithReducer"
+>WithReducer</A
+></TT
+> m)</TT
+>-<A HREF="Reducer.html"
+>Reducer</A
+>
+   This can be used to quickly select a <A HREF="Reducer.html"
+>Reducer</A
+> for use as a <TT
+>FingerTree</TT
+>
+   <TT
+>measure</TT
+>.
+</TD
+></TR
+><TR
+><TD CLASS="section4"
+>Constructors</TD
+></TR
+><TR
+><TD CLASS="body"
+><TABLE CLASS="vanilla" CELLSPACING="5" CELLPADDING="0"
+><TR
+><TD CLASS="arg"
+><A NAME="v%3AWithReducer"
+></A
+><B
+>WithReducer</B
+></TD
+><TD CLASS="rdoc"
+></TD
+></TR
+><TR
+><TD CLASS="body" COLSPAN="2"
+><TABLE CLASS="vanilla" CELLSPACING="1" CELLPADDING="0"
+><TR
+><TD CLASS="arg"
+><A NAME="v%3AwithoutReducer"
+></A
+><B
+>withoutReducer</B
+> :: c</TD
+><TD CLASS="rdoc"
+></TD
+></TR
+></TABLE
+></TD
+></TR
+></TABLE
+></TD
+></TR
+><TR
+><TD CLASS="section4"
+><IMG SRC="minus.gif" CLASS="coll" ONCLICK="toggle(this,'i:WithReducer')" ALT="show/hide"
+> Instances</TD
+></TR
+><TR
+><TD CLASS="body"
+><DIV ID="i:WithReducer" STYLE="display:block;"
+><TABLE CLASS="vanilla" CELLSPACING="1" CELLPADDING="0"
+><TR
+><TD CLASS="decl"
+><A HREF="Data-Monoid-Reducer.html#t%3AReducer"
+>Reducer</A
+> c m =&gt; Measured m (<A HREF="Data-Monoid-Reducer-With.html#t%3AWithReducer"
+>WithReducer</A
+> c m)</TD
+></TR
+><TR
+><TD CLASS="decl"
+><A HREF="Data-Monoid-Reducer.html#t%3AReducer"
+>Reducer</A
+> c m =&gt; <A HREF="Data-Monoid-Reducer.html#t%3AReducer"
+>Reducer</A
+> (<A HREF="Data-Monoid-Reducer-With.html#t%3AWithReducer"
+>WithReducer</A
+> c m) m</TD
+></TR
+></TABLE
+></DIV
+></TD
+></TR
+></TABLE
+></TD
+></TR
+><TR
+><TD CLASS="s15"
+></TD
+></TR
+><TR
+><TD CLASS="botbar"
+>Produced by <A HREF="http://www.haskell.org/haddock/"
+>Haddock</A
+> version 2.3.0</TD
+></TR
+></TABLE
+></BODY
+></HTML
+>
addfile ./dist/doc/html/monoids/Data-Monoid-Reducer.html
hunk ./dist/doc/html/monoids/Data-Monoid-Reducer.html 1
+<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd">
+<!--Rendered using the Haskell Html Library v0.2-->
+<HTML
+><HEAD
+><META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=UTF-8"
+><TITLE
+>Data.Monoid.Reducer</TITLE
+><LINK HREF="haddock.css" REL="stylesheet" TYPE="text/css"
+><SCRIPT SRC="haddock-util.js" TYPE="text/javascript"
+></SCRIPT
+></HEAD
+><BODY
+><TABLE CLASS="vanilla" CELLSPACING="0" CELLPADDING="0"
+><TR
+><TD CLASS="topbar"
+><TABLE CLASS="vanilla" CELLSPACING="0" CELLPADDING="0"
+><TR
+><TD
+><IMG SRC="haskell_icon.gif" WIDTH="16" HEIGHT="16" ALT=" "
+></TD
+><TD CLASS="title"
+>monoids-0.1.6: Lots of Monoids</TD
+><TD CLASS="topbut"
+><A HREF="src/Data-Monoid-Reducer.html"
+>Source code</A
+></TD
+><TD CLASS="topbut"
+><A HREF="index.html"
+>Contents</A
+></TD
+><TD CLASS="topbut"
+><A HREF="doc-index.html"
+>Index</A
+></TD
+></TR
+></TABLE
+></TD
+></TR
+><TR
+><TD CLASS="modulebar"
+><TABLE CLASS="vanilla" CELLSPACING="0" CELLPADDING="0"
+><TR
+><TD
+><FONT SIZE="6"
+>Data.Monoid.Reducer</FONT
+></TD
+><TD ALIGN="right"
+><TABLE CLASS="narrow" CELLSPACING="0" CELLPADDING="0"
+><TR
+><TD CLASS="infohead"
+>Portability</TD
+><TD CLASS="infoval"
+>non-portable (MPTCs)</TD
+></TR
+><TR
+><TD CLASS="infohead"
+>Stability</TD
+><TD CLASS="infoval"
+>experimental</TD
+></TR
+><TR
+><TD CLASS="infohead"
+>Maintainer</TD
+><TD CLASS="infoval"
+>libraries@haskell.org</TD
+></TR
+></TABLE
+></TD
+></TR
+></TABLE
+></TD
+></TR
+><TR
+><TD CLASS="s15"
+></TD
+></TR
+><TR
+><TD CLASS="section1"
+>Description</TD
+></TR
+><TR
+><TD CLASS="doc"
+>A <TT
+>c</TT
+>-<TT
+><A HREF="Data-Monoid-Reducer.html#t%3AReducer"
+>Reducer</A
+></TT
+> is a <TT
+><A HREF="/usr/local/share/doc/ghc/libraries/base/Data-Monoid.html#t%3AMonoid"
+>Monoid</A
+></TT
+> with a canonical mapping from <TT
+>c</TT
+> to the Monoid.
+ This <TT
+><A HREF="Data-Monoid-Reducer.html#v%3Aunit"
+>unit</A
+></TT
+> acts in many ways like <TT
+><A HREF="/usr/local/share/doc/ghc/libraries/base/Control-Monad.html#v%3Areturn"
+>return</A
+></TT
+> for a <TT
+><A HREF="/usr/local/share/doc/ghc/libraries/base/Control-Monad.html#t%3AMonad"
+>Monad</A
+></TT
+> but is limited
+ to a single type.
+</TD
+></TR
+><TR
+><TD CLASS="s15"
+></TD
+></TR
+><TR
+><TD CLASS="section1"
+>Synopsis</TD
+></TR
+><TR
+><TD CLASS="s15"
+></TD
+></TR
+><TR
+><TD CLASS="body"
+><TABLE CLASS="vanilla" CELLSPACING="0" CELLPADDING="0"
+><TR
+><TD CLASS="decl"
+><SPAN CLASS="keyword"
+>class</SPAN
+> <A HREF="/usr/local/share/doc/ghc/libraries/base/Data-Monoid.html#t%3AMonoid"
+>Monoid</A
+> m =&gt; <A HREF="#t%3AReducer"
+>Reducer</A
+> c m  <SPAN CLASS="keyword"
+>where</SPAN
+></TD
+></TR
+><TR
+><TD CLASS="body"
+><TABLE CLASS="vanilla" CELLSPACING="0" CELLPADDING="0"
+><TR
+><TD CLASS="decl"
+><A HREF="#v%3Aunit"
+>unit</A
+> :: c -&gt; m</TD
+></TR
+><TR
+><TD CLASS="decl"
+><A HREF="#v%3Asnoc"
+>snoc</A
+> :: m -&gt; c -&gt; m</TD
+></TR
+><TR
+><TD CLASS="decl"
+><A HREF="#v%3Acons"
+>cons</A
+> :: c -&gt; m -&gt; m</TD
+></TR
+></TABLE
+></TD
+></TR
+><TR
+><TD CLASS="s8"
+></TD
+></TR
+><TR
+><TD CLASS="decl"
+><A HREF="#v%3Aunit"
+>unit</A
+> :: <A HREF="Data-Monoid-Reducer.html#t%3AReducer"
+>Reducer</A
+> c m =&gt; c -&gt; m</TD
+></TR
+><TR
+><TD CLASS="s8"
+></TD
+></TR
+><TR
+><TD CLASS="decl"
+><A HREF="#v%3Asnoc"
+>snoc</A
+> :: <A HREF="Data-Monoid-Reducer.html#t%3AReducer"
+>Reducer</A
+> c m =&gt; m -&gt; c -&gt; m</TD
+></TR
+><TR
+><TD CLASS="s8"
+></TD
+></TR
+><TR
+><TD CLASS="decl"
+><A HREF="#v%3Acons"
+>cons</A
+> :: <A HREF="Data-Monoid-Reducer.html#t%3AReducer"
+>Reducer</A
+> c m =&gt; c -&gt; m -&gt; m</TD
+></TR
+><TR
+><TD CLASS="s8"
+></TD
+></TR
+><TR
+><TD CLASS="decl"
+><A HREF="#v%3AfoldMapReduce"
+>foldMapReduce</A
+> :: (<A HREF="/usr/local/share/doc/ghc/libraries/base/Data-Foldable.html#t%3AFoldable"
+>Foldable</A
+> f, <A HREF="Data-Monoid-Reducer.html#t%3AReducer"
+>Reducer</A
+> e m) =&gt; (a -&gt; e) -&gt; f a -&gt; m</TD
+></TR
+><TR
+><TD CLASS="s8"
+></TD
+></TR
+><TR
+><TD CLASS="decl"
+><A HREF="#v%3AfoldReduce"
+>foldReduce</A
+> :: (<A HREF="/usr/local/share/doc/ghc/libraries/base/Data-Foldable.html#t%3AFoldable"
+>Foldable</A
+> f, <A HREF="Data-Monoid-Reducer.html#t%3AReducer"
+>Reducer</A
+> e m) =&gt; f e -&gt; m</TD
+></TR
+></TABLE
+></TD
+></TR
+><TR
+><TD CLASS="s15"
+></TD
+></TR
+><TR
+><TD CLASS="section1"
+>Documentation</TD
+></TR
+><TR
+><TD CLASS="s15"
+></TD
+></TR
+><TR
+><TD CLASS="topdecl"
+><TABLE CLASS="declbar"
+><TR
+><TD CLASS="declname"
+><SPAN CLASS="keyword"
+>class</SPAN
+> <A HREF="/usr/local/share/doc/ghc/libraries/base/Data-Monoid.html#t%3AMonoid"
+>Monoid</A
+> m =&gt; <A NAME="t%3AReducer"
+></A
+><B
+>Reducer</B
+> c m  <SPAN CLASS="keyword"
+>where</SPAN
+></TD
+><TD CLASS="declbut"
+><A HREF="src/Data-Monoid-Reducer.html#Reducer"
+>Source</A
+></TD
+></TR
+></TABLE
+></TD
+></TR
+><TR
+><TD CLASS="body"
+><TABLE CLASS="vanilla" CELLSPACING="0" CELLPADDING="0"
+><TR
+><TD CLASS="ndoc"
+><P
+>This type may be best read infix. A <TT
+>c <TT
+><A HREF="Data-Monoid-Reducer.html#t%3AReducer"
+>Reducer</A
+></TT
+> m</TT
+> is a <TT
+><A HREF="/usr/local/share/doc/ghc/libraries/base/Data-Monoid.html#t%3AMonoid"
+>Monoid</A
+></TT
+> <TT
+>m</TT
+> that maps
+ values of type <TT
+>c</TT
+> through <TT
+>unit</TT
+> to values of type <TT
+>m</TT
+>. A <TT
+>c</TT
+>-<TT
+><A HREF="Data-Monoid-Reducer.html#t%3AReducer"
+>Reducer</A
+></TT
+> may also
+ supply operations which tack-on another <TT
+>c</TT
+> to an existing <TT
+><A HREF="/usr/local/share/doc/ghc/libraries/base/Data-Monoid.html#t%3AMonoid"
+>Monoid</A
+></TT
+> <TT
+>m</TT
+> on the left
+ or right. These specialized reductions may be more efficient in some scenarios
+ and are used when appropriate by a Generator. The names <TT
+><A HREF="Data-Monoid-Reducer.html#v%3Acons"
+>cons</A
+></TT
+> and <TT
+><A HREF="Data-Monoid-Reducer.html#v%3Asnoc"
+>snoc</A
+></TT
+> work
+ by analogy to the synonymous operations in the list monoid.
+</P
+><P
+>This class deliberately avoids functional-dependencies, so that () can be a <TT
+>c</TT
+>-Reducer
+ for all <TT
+>c</TT
+>, and so many common reducers can work over multiple types, for instance,
+ First and Last may reduce both <TT
+>a</TT
+> and <TT
+><A HREF="/usr/local/share/doc/ghc/libraries/base/Data-Maybe.html#t%3AMaybe"
+>Maybe</A
+></TT
+> <TT
+>a</TT
+>. Since a Generator has a fixed element
+ type, the input to the reducer is generally known and extracting from the monoid usually
+ is sufficient to fix the result type. Combinators are available for most scenarios where
+ this is not the case, and the few remaining cases can be handled by using an explicit 
+ type annotation.
+</P
+><P
+>Minimal definition: <TT
+><A HREF="Data-Monoid-Reducer.html#v%3Aunit"
+>unit</A
+></TT
+> or <TT
+><A HREF="Data-Monoid-Reducer.html#v%3Asnoc"
+>snoc</A
+></TT
+>
+</P
+></TD
+></TR
+><TR
+><TD CLASS="s8"
+></TD
+></TR
+><TR
+><TD CLASS="section4"
+>Methods</TD
+></TR
+><TR
+><TD CLASS="body"
+><TABLE CLASS="vanilla" CELLSPACING="0" CELLPADDING="0"
+><TR
+><TD CLASS="topdecl"
+><TABLE CLASS="declbar"
+><TR
+><TD CLASS="declname"
+><A NAME="v%3Aunit"
+></A
+><B
+>unit</B
+> :: c -&gt; m</TD
+><TD CLASS="declbut"
+><A HREF="src/Data-Monoid-Reducer.html#unit"
+>Source</A
+></TD
+></TR
+></TABLE
+></TD
+></TR
+><TR
+><TD CLASS="doc"
+>Convert a value into a <TT
+><A HREF="/usr/local/share/doc/ghc/libraries/base/Data-Monoid.html#t%3AMonoid"
+>Monoid</A
+></TT
+>
+</TD
+></TR
+><TR
+><TD CLASS="s8"
+></TD
+></TR
+><TR
+><TD CLASS="topdecl"
+><TABLE CLASS="declbar"
+><TR
+><TD CLASS="declname"
+><A NAME="v%3Asnoc"
+></A
+><B
+>snoc</B
+> :: m -&gt; c -&gt; m</TD
+><TD CLASS="declbut"
+><A HREF="src/Data-Monoid-Reducer.html#snoc"
+>Source</A
+></TD
+></TR
+></TABLE
+></TD
+></TR
+><TR
+><TD CLASS="doc"
+>Append a value to a <TT
+><A HREF="/usr/local/share/doc/ghc/libraries/base/Data-Monoid.html#t%3AMonoid"
+>Monoid</A
+></TT
+> for use in left-to-right reduction
+</TD
+></TR
+><TR
+><TD CLASS="s8"
+></TD
+></TR
+><TR
+><TD CLASS="topdecl"
+><TABLE CLASS="declbar"
+><TR
+><TD CLASS="declname"
+><A NAME="v%3Acons"
+></A
+><B
+>cons</B
+> :: c -&gt; m -&gt; m</TD
+><TD CLASS="declbut"
+><A HREF="src/Data-Monoid-Reducer.html#cons"
+>Source</A
+></TD
+></TR
+></TABLE
+></TD
+></TR
+><TR
+><TD CLASS="doc"
+>Prepend a value onto a <TT
+><A HREF="/usr/local/share/doc/ghc/libraries/base/Data-Monoid.html#t%3AMonoid"
+>Monoid</A
+></TT
+> for use during right-to-left reduction
+</TD
+></TR
+></TABLE
+></TD
+></TR
+><TR
+><TD CLASS="s8"
+></TD
+></TR
+><TR
+><TD CLASS="section4"
+><IMG SRC="minus.gif" CLASS="coll" ONCLICK="toggle(this,'i:Reducer')" ALT="show/hide"
+> Instances</TD
+></TR
+><TR
+><TD CLASS="body"
+><DIV ID="i:Reducer" STYLE="display:block;"
+><TABLE CLASS="vanilla" CELLSPACING="1" CELLPADDING="0"
+><TR
+><TD CLASS="decl"
+><A HREF="Data-Monoid-Reducer.html#t%3AReducer"
+>Reducer</A
+> <A HREF="/usr/local/share/doc/ghc/libraries/ghc-prim/GHC-Bool.html#t%3ABool"
+>Bool</A
+> <A HREF="/usr/local/share/doc/ghc/libraries/base/Data-Monoid.html#t%3AAll"
+>All</A
+></TD
+></TR
+><TR
+><TD CLASS="decl"
+><A HREF="Data-Monoid-Reducer.html#t%3AReducer"
+>Reducer</A
+> <A HREF="/usr/local/share/doc/ghc/libraries/ghc-prim/GHC-Bool.html#t%3ABool"
+>Bool</A
+> <A HREF="/usr/local/share/doc/ghc/libraries/base/Data-Monoid.html#t%3AAll"
+>All</A
+></TD
+></TR
+><TR
+><TD CLASS="decl"
+><A HREF="Data-Monoid-Reducer.html#t%3AReducer"
+>Reducer</A
+> <A HREF="/usr/local/share/doc/ghc/libraries/ghc-prim/GHC-Bool.html#t%3ABool"
+>Bool</A
+> <A HREF="/usr/local/share/doc/ghc/libraries/base/Data-Monoid.html#t%3AAny"
+>Any</A
+></TD
+></TR
+><TR
+><TD CLASS="decl"
+><A HREF="Data-Monoid-Reducer.html#t%3AReducer"
+>Reducer</A
+> <A HREF="/usr/local/share/doc/ghc/libraries/ghc-prim/GHC-Bool.html#t%3ABool"
+>Bool</A
+> <A HREF="/usr/local/share/doc/ghc/libraries/base/Data-Monoid.html#t%3AAny"
+>Any</A
+></TD
+></TR
+><TR
+><TD CLASS="decl"
+><A HREF="Data-Monoid-Reducer.html#t%3AReducer"
+>Reducer</A
+> <A HREF="/usr/local/share/doc/ghc/libraries/ghc-prim/GHC-Bool.html#t%3ABool"
+>Bool</A
+> <A HREF="Data-Ring-Boolean.html#t%3ABoolRing"
+>BoolRing</A
+></TD
+></TR
+><TR
+><TD CLASS="decl"
+><A HREF="Data-Monoid-Reducer.html#t%3AReducer"
+>Reducer</A
+> <A HREF="/usr/local/share/doc/ghc/libraries/ghc-prim/GHC-Bool.html#t%3ABool"
+>Bool</A
+> <A HREF="Data-Ring-Boolean.html#t%3ABoolRing"
+>BoolRing</A
+></TD
+></TR
+><TR
+><TD CLASS="decl"
+><A HREF="Data-Monoid-Reducer.html#t%3AReducer"
+>Reducer</A
+> <A HREF="/usr/local/share/doc/ghc/libraries/ghc-prim/GHC-Types.html#t%3AInt"
+>Int</A
+> <A HREF="/usr/local/share/doc/ghc/libraries/containers/Data-IntSet.html#t%3AIntSet"
+>IntSet</A
+></TD
+></TR
+><TR
+><TD CLASS="decl"
+><A HREF="Data-Monoid-Reducer.html#t%3AReducer"
+>Reducer</A
+> <A HREF="/usr/local/share/doc/ghc/libraries/ghc-prim/GHC-Types.html#t%3AInt"
+>Int</A
+> <A HREF="/usr/local/share/doc/ghc/libraries/containers/Data-IntSet.html#t%3AIntSet"
+>IntSet</A
+></TD
+></TR
+><TR
+><TD CLASS="decl"
+><A HREF="Data-Monoid-Reducer.html#t%3AReducer"
+>Reducer</A
+> c ()</TD
+></TR
+><TR
+><TD CLASS="decl"
+><A HREF="Data-Monoid-Reducer.html#t%3AReducer"
+>Reducer</A
+> <A HREF="/usr/local/share/doc/ghc/libraries/ghc-prim/GHC-Types.html#t%3AChar"
+>Char</A
+> (<A HREF="Data-Monoid-Lexical-SourcePosition.html#t%3ASourcePosition"
+>SourcePosition</A
+> file)</TD
+></TR
+><TR
+><TD CLASS="decl"
+><A HREF="Data-Monoid-Reducer.html#t%3AReducer"
+>Reducer</A
+> <A HREF="/usr/local/share/doc/ghc/libraries/ghc-prim/GHC-Types.html#t%3AChar"
+>Char</A
+> (<A HREF="Data-Monoid-Lexical-SourcePosition.html#t%3ASourcePosition"
+>SourcePosition</A
+> file)</TD
+></TR
+><TR
+><TD CLASS="decl"
+><A HREF="Data-Monoid-Reducer.html#t%3AReducer"
+>Reducer</A
+> <A HREF="/usr/local/share/doc/ghc/libraries/ghc-prim/GHC-Types.html#t%3AChar"
+>Char</A
+> m =&gt; <A HREF="Data-Monoid-Reducer.html#t%3AReducer"
+>Reducer</A
+> <A HREF="/usr/local/share/doc/ghc/libraries/ghc-prim/GHC-Types.html#t%3AChar"
+>Char</A
+> (<A HREF="Data-Monoid-Lexical-Words.html#t%3AUnlined"
+>Unlined</A
+> m)</TD
+></TR
+><TR
+><TD CLASS="decl"
+><A HREF="Data-Monoid-Reducer.html#t%3AReducer"
+>Reducer</A
+> <A HREF="/usr/local/share/doc/ghc/libraries/ghc-prim/GHC-Types.html#t%3AChar"
+>Char</A
+> m =&gt; <A HREF="Data-Monoid-Reducer.html#t%3AReducer"
+>Reducer</A
+> <A HREF="/usr/local/share/doc/ghc/libraries/ghc-prim/GHC-Types.html#t%3AChar"
+>Char</A
+> (<A HREF="Data-Monoid-Lexical-Words.html#t%3AUnlined"
+>Unlined</A
+> m)</TD
+></TR
+><TR
+><TD CLASS="decl"
+><A HREF="Data-Monoid-Reducer.html#t%3AReducer"
+>Reducer</A
+> <A HREF="/usr/local/share/doc/ghc/libraries/ghc-prim/GHC-Types.html#t%3AChar"
+>Char</A
+> m =&gt; <A HREF="Data-Monoid-Reducer.html#t%3AReducer"
+>Reducer</A
+> <A HREF="/usr/local/share/doc/ghc/libraries/ghc-prim/GHC-Types.html#t%3AChar"
+>Char</A
+> (<A HREF="Data-Monoid-Lexical-Words.html#t%3AUnspaced"
+>Unspaced</A
+> m)</TD
+></TR
+><TR
+><TD CLASS="decl"
+><A HREF="Data-Monoid-Reducer.html#t%3AReducer"
+>Reducer</A
+> <A HREF="/usr/local/share/doc/ghc/libraries/ghc-prim/GHC-Types.html#t%3AChar"
+>Char</A
+> m =&gt; <A HREF="Data-Monoid-Reducer.html#t%3AReducer"
+>Reducer</A
+> <A HREF="/usr/local/share/doc/ghc/libraries/ghc-prim/GHC-Types.html#t%3AChar"
+>Char</A
+> (<A HREF="Data-Monoid-Lexical-Words.html#t%3AUnspaced"
+>Unspaced</A
+> m)</TD
+></TR
+><TR
+><TD CLASS="decl"
+><A HREF="Data-Monoid-Reducer.html#t%3AReducer"
+>Reducer</A
+> <A HREF="/usr/local/share/doc/ghc/libraries/ghc-prim/GHC-Types.html#t%3AChar"
+>Char</A
+> m =&gt; <A HREF="Data-Monoid-Reducer.html#t%3AReducer"
+>Reducer</A
+> <A HREF="/usr/local/share/doc/ghc/libraries/ghc-prim/GHC-Types.html#t%3AChar"
+>Char</A
+> (<A HREF="Data-Monoid-Lexical-Words.html#t%3ALines"
+>Lines</A
+> m)</TD
+></TR
+><TR
+><TD CLASS="decl"
+><A HREF="Data-Monoid-Reducer.html#t%3AReducer"
+>Reducer</A
+> <A HREF="/usr/local/share/doc/ghc/libraries/ghc-prim/GHC-Types.html#t%3AChar"
+>Char</A
+> m =&gt; <A HREF="Data-Monoid-Reducer.html#t%3AReducer"
+>Reducer</A
+> <A HREF="/usr/local/share/doc/ghc/libraries/ghc-prim/GHC-Types.html#t%3AChar"
+>Char</A
+> (<A HREF="Data-Monoid-Lexical-Words.html#t%3ALines"
+>Lines</A
+> m)</TD
+></TR
+><TR
+><TD CLASS="decl"
+><A HREF="Data-Monoid-Reducer.html#t%3AReducer"
+>Reducer</A
+> <A HREF="/usr/local/share/doc/ghc/libraries/ghc-prim/GHC-Types.html#t%3AChar"
+>Char</A
+> m =&gt; <A HREF="Data-Monoid-Reducer.html#t%3AReducer"
+>Reducer</A
+> <A HREF="/usr/local/share/doc/ghc/libraries/ghc-prim/GHC-Types.html#t%3AChar"
+>Char</A
+> (<A HREF="Data-Monoid-Lexical-Words.html#t%3AWords"
+>Words</A
+> m)</TD
+></TR
+><TR
+><TD CLASS="decl"
+><A HREF="Data-Monoid-Reducer.html#t%3AReducer"
+>Reducer</A
+> <A HREF="/usr/local/share/doc/ghc/libraries/ghc-prim/GHC-Types.html#t%3AChar"
+>Char</A
+> m =&gt; <A HREF="Data-Monoid-Reducer.html#t%3AReducer"
+>Reducer</A
+> <A HREF="/usr/local/share/doc/ghc/libraries/ghc-prim/GHC-Types.html#t%3AChar"
+>Char</A
+> (<A HREF="Data-Monoid-Lexical-Words.html#t%3AWords"
+>Words</A
+> m)</TD
+></TR
+><TR
+><TD CLASS="decl"
+><A HREF="Data-Monoid-Reducer.html#t%3AReducer"
+>Reducer</A
+> <A HREF="/usr/local/share/doc/ghc/libraries/ghc-prim/GHC-Types.html#t%3AChar"
+>Char</A
+> m =&gt; <A HREF="Data-Monoid-Reducer.html#t%3AReducer"
+>Reducer</A
+> <A HREF="/usr/local/share/doc/ghc/libraries/ghc-prim/GHC-Types.html#t%3AChar"
+>Char</A
+> (<A HREF="Data-Monoid-FromString.html#t%3AFromString"
+>FromString</A
+> m)</TD
+></TR
+><TR
+><TD CLASS="decl"
+><A HREF="Data-Monoid-Reducer.html#t%3AReducer"
+>Reducer</A
+> <A HREF="/usr/local/share/doc/ghc/libraries/ghc-prim/GHC-Types.html#t%3AChar"
+>Char</A
+> m =&gt; <A HREF="Data-Monoid-Reducer.html#t%3AReducer"
+>Reducer</A
+> <A HREF="/usr/local/share/doc/ghc/libraries/ghc-prim/GHC-Types.html#t%3AChar"
+>Char</A
+> (<A HREF="Data-Monoid-FromString.html#t%3AFromString"
+>FromString</A
+> m)</TD
+></TR
+><TR
+><TD CLASS="decl"
+><A HREF="/usr/local/share/doc/ghc/libraries/base/Prelude.html#t%3ANum"
+>Num</A
+> a =&gt; <A HREF="Data-Monoid-Reducer.html#t%3AReducer"
+>Reducer</A
+> Integer (<A HREF="Data-Ring-FromNum.html#t%3AFromNum"
+>FromNum</A
+> a)</TD
+></TR
+><TR
+><TD CLASS="decl"
+><A HREF="/usr/local/share/doc/ghc/libraries/base/Prelude.html#t%3ANum"
+>Num</A
+> a =&gt; <A HREF="Data-Monoid-Reducer.html#t%3AReducer"
+>Reducer</A
+> Integer (<A HREF="Data-Ring-FromNum.html#t%3AFromNum"
+>FromNum</A
+> a)</TD
+></TR
+><TR
+><TD CLASS="decl"
+><A HREF="Data-Monoid-Reducer-Char.html#t%3ACharReducer"
+>CharReducer</A
+> m =&gt; <A HREF="Data-Monoid-Reducer.html#t%3AReducer"
+>Reducer</A
+> <A HREF="/usr/local/share/doc/ghc/libraries/base/Data-Word.html#t%3AWord8"
+>Word8</A
+> (<A HREF="Data-Monoid-Lexical-UTF8-Decoder.html#t%3AUTF8"
+>UTF8</A
+> m)</TD
+></TR
+><TR
+><TD CLASS="decl"
+><A HREF="Data-Monoid-Reducer-Char.html#t%3ACharReducer"
+>CharReducer</A
+> m =&gt; <A HREF="Data-Monoid-Reducer.html#t%3AReducer"
+>Reducer</A
+> <A HREF="/usr/local/share/doc/ghc/libraries/base/Data-Word.html#t%3AWord8"
+>Word8</A
+> (<A HREF="Data-Monoid-Lexical-UTF8-Decoder.html#t%3AUTF8"
+>UTF8</A
+> m)</TD
+></TR
+><TR
+><TD CLASS="decl"
+><A HREF="/usr/local/share/doc/ghc/libraries/base/Data-Ord.html#t%3AOrd"
+>Ord</A
+> a =&gt; <A HREF="Data-Monoid-Reducer.html#t%3AReducer"
+>Reducer</A
+> a (<A HREF="/usr/local/share/doc/ghc/libraries/containers/Data-Set.html#t%3ASet"
+>Set</A
+> a)</TD
+></TR
+><TR
+><TD CLASS="decl"
+><A HREF="Data-Monoid-Reducer.html#t%3AReducer"
+>Reducer</A
+> a (<A HREF="/usr/local/share/doc/ghc/libraries/containers/Data-Sequence.html#t%3ASeq"
+>Seq</A
+> a)</TD
+></TR
+><TR
+><TD CLASS="decl"
+><A HREF="Data-Monoid-Reducer.html#t%3AReducer"
+>Reducer</A
+> a (<A HREF="/usr/local/share/doc/ghc/libraries/base/Data-Monoid.html#t%3ALast"
+>Last</A
+> a)</TD
+></TR
+><TR
+><TD CLASS="decl"
+><A HREF="Data-Monoid-Reducer.html#t%3AReducer"
+>Reducer</A
+> a (<A HREF="/usr/local/share/doc/ghc/libraries/base/Data-Monoid.html#t%3AFirst"
+>First</A
+> a)</TD
+></TR
+><TR
+><TD CLASS="decl"
+><A HREF="/usr/local/share/doc/ghc/libraries/base/Prelude.html#t%3ANum"
+>Num</A
+> a =&gt; <A HREF="Data-Monoid-Reducer.html#t%3AReducer"
+>Reducer</A
+> a (<A HREF="/usr/local/share/doc/ghc/libraries/base/Data-Monoid.html#t%3AProduct"
+>Product</A
+> a)</TD
+></TR
+><TR
+><TD CLASS="decl"
+><A HREF="/usr/local/share/doc/ghc/libraries/base/Prelude.html#t%3ANum"
+>Num</A
+> a =&gt; <A HREF="Data-Monoid-Reducer.html#t%3AReducer"
+>Reducer</A
+> a (<A HREF="/usr/local/share/doc/ghc/libraries/base/Data-Monoid.html#t%3ASum"
+>Sum</A
+> a)</TD
+></TR
+><TR
+><TD CLASS="decl"
+><A HREF="/usr/local/share/doc/ghc/libraries/base/Data-Monoid.html#t%3AMonoid"
+>Monoid</A
+> a =&gt; <A HREF="Data-Monoid-Reducer.html#t%3AReducer"
+>Reducer</A
+> a (<A HREF="/usr/local/share/doc/ghc/libraries/base/Data-Monoid.html#t%3ADual"
+>Dual</A
+> a)</TD
+></TR
+><TR
+><TD CLASS="decl"
+><A HREF="Data-Monoid-Reducer.html#t%3AReducer"
+>Reducer</A
+> c ([] c)</TD
+></TR
+><TR
+><TD CLASS="decl"
+><A HREF="Data-Monoid-Union.html#t%3AHasUnion"
+>HasUnion</A
+> f =&gt; <A HREF="Data-Monoid-Reducer.html#t%3AReducer"
+>Reducer</A
+> f (<A HREF="Data-Monoid-Union.html#t%3AUnion"
+>Union</A
+> f)</TD
+></TR
+><TR
+><TD CLASS="decl"
+><A HREF="/usr/local/share/doc/ghc/libraries/base/Data-Monoid.html#t%3AMonoid"
+>Monoid</A
+> m =&gt; <A HREF="Data-Monoid-Reducer.html#t%3AReducer"
+>Reducer</A
+> m (<A HREF="Data-Monoid-Self.html#t%3ASelf"
+>Self</A
+> m)</TD
+></TR
+><TR
+><TD CLASS="decl"
+>(<A HREF="/usr/local/share/doc/ghc/libraries/base/Data-Ord.html#t%3AOrd"
+>Ord</A
+> a, <A HREF="/usr/local/share/doc/ghc/libraries/base/Prelude.html#t%3ABounded"
+>Bounded</A
+> a) =&gt; <A HREF="Data-Monoid-Reducer.html#t%3AReducer"
+>Reducer</A
+> a (<A HREF="Data-Monoid-Ord.html#t%3AMin"
+>Min</A
+> a)</TD
+></TR
+><TR
+><TD CLASS="decl"
+>(<A HREF="/usr/local/share/doc/ghc/libraries/base/Data-Ord.html#t%3AOrd"
+>Ord</A
+> a, <A HREF="/usr/local/share/doc/ghc/libraries/base/Prelude.html#t%3ABounded"
+>Bounded</A
+> a) =&gt; <A HREF="Data-Monoid-Reducer.html#t%3AReducer"
+>Reducer</A
+> a (<A HREF="Data-Monoid-Ord.html#t%3AMax"
+>Max</A
+> a)</TD
+></TR
+><TR
+><TD CLASS="decl"
+><A HREF="/usr/local/share/doc/ghc/libraries/base/Data-Ord.html#t%3AOrd"
+>Ord</A
+> a =&gt; <A HREF="Data-Monoid-Reducer.html#t%3AReducer"
+>Reducer</A
+> a (<A HREF="Data-Ring-Semi-Tropical.html#t%3ATropical"
+>Tropical</A
+> a)</TD
+></TR
+><TR
+><TD CLASS="decl"
+><A HREF="/usr/local/share/doc/ghc/libraries/base/Data-Ord.html#t%3AOrd"
+>Ord</A
+> a =&gt; <A HREF="Data-Monoid-Reducer.html#t%3AReducer"
+>Reducer</A
+> a (<A HREF="Data-Ring-Semi-Ord.html#t%3APriority"
+>Priority</A
+> a)</TD
+></TR
+><TR
+><TD CLASS="decl"
+>(<A HREF="/usr/local/share/doc/ghc/libraries/base/Prelude.html#t%3ABounded"
+>Bounded</A
+> a, <A HREF="/usr/local/share/doc/ghc/libraries/base/Data-Ord.html#t%3AOrd"
+>Ord</A
+> a) =&gt; <A HREF="Data-Monoid-Reducer.html#t%3AReducer"
+>Reducer</A
+> a (<A HREF="Data-Ring-Semi-Ord.html#t%3AOrder"
+>Order</A
+> a)</TD
+></TR
+><TR
+><TD CLASS="decl"
+>Measured v a =&gt; <A HREF="Data-Monoid-Reducer.html#t%3AReducer"
+>Reducer</A
+> a (FingerTree v a)</TD
+></TR
+><TR
+><TD CLASS="decl"
+>(<A HREF="Data-Monoid-Reducer.html#t%3AReducer"
+>Reducer</A
+> c m, <A HREF="Data-Monoid-Reducer.html#t%3AReducer"
+>Reducer</A
+> c n) =&gt; <A HREF="Data-Monoid-Reducer.html#t%3AReducer"
+>Reducer</A
+> c ((,) m n)</TD
+></TR
+><TR
+><TD CLASS="decl"
+>(<A HREF="/usr/local/share/doc/ghc/libraries/base/Control-Applicative.html#t%3AAlternative"
+>Alternative</A
+> f, <A HREF="Data-Monoid-Reducer.html#t%3AReducer"
+>Reducer</A
+> c a) =&gt; <A HREF="Data-Monoid-Reducer.html#t%3AReducer"
+>Reducer</A
+> c (<A HREF="Data-Monoid-Applicative.html#t%3AWrappedApplicative"
+>WrappedApplicative</A
+> f a)</TD
+></TR
+><TR
+><TD CLASS="decl"
+>(<A HREF="/usr/local/share/doc/ghc/libraries/base/Control-Monad.html#t%3AMonadPlus"
+>MonadPlus</A
+> m, <A HREF="Data-Monoid-Reducer.html#t%3AReducer"
+>Reducer</A
+> c a) =&gt; <A HREF="Data-Monoid-Reducer.html#t%3AReducer"
+>Reducer</A
+> c (<A HREF="Data-Monoid-Monad.html#t%3AWrappedMonad"
+>WrappedMonad</A
+> m a)</TD
+></TR
+><TR
+><TD CLASS="decl"
+>(<A HREF="Data-Monoid-Reducer.html#t%3AReducer"
+>Reducer</A
+> c m, <A HREF="Data-Monoid-Reducer.html#t%3AReducer"
+>Reducer</A
+> c n, <A HREF="Data-Monoid-Reducer.html#t%3AReducer"
+>Reducer</A
+> c o) =&gt; <A HREF="Data-Monoid-Reducer.html#t%3AReducer"
+>Reducer</A
+> c ((,,) m n o)</TD
+></TR
+><TR
+><TD CLASS="decl"
+><A HREF="Data-Monoid-Reducer.html#t%3AReducer"
+>Reducer</A
+> c m =&gt; <A HREF="Data-Monoid-Reducer.html#t%3AReducer"
+>Reducer</A
+> c (<A HREF="Data-Monoid-Categorical.html#t%3AMon"
+>Mon</A
+> m m m)</TD
+></TR
+><TR
+><TD CLASS="decl"
+>(Stream s m t, <A HREF="Data-Monoid-Reducer.html#t%3AReducer"
+>Reducer</A
+> c a) =&gt; <A HREF="Data-Monoid-Reducer.html#t%3AReducer"
+>Reducer</A
+> c (ParsecT s u m a)</TD
+></TR
+><TR
+><TD CLASS="decl"
+>(<A HREF="Data-Monoid-Reducer.html#t%3AReducer"
+>Reducer</A
+> c m, <A HREF="Data-Monoid-Reducer.html#t%3AReducer"
+>Reducer</A
+> c n, <A HREF="Data-Monoid-Reducer.html#t%3AReducer"
+>Reducer</A
+> c o, <A HREF="Data-Monoid-Reducer.html#t%3AReducer"
+>Reducer</A
+> c p) =&gt; <A HREF="Data-Monoid-Reducer.html#t%3AReducer"
+>Reducer</A
+> c ((,,,) m n o p)</TD
+></TR
+><TR
+><TD CLASS="decl"
+><A HREF="/usr/local/share/doc/ghc/libraries/base/Control-Applicative.html#t%3AApplicative"
+>Applicative</A
+> f =&gt; <A HREF="Data-Monoid-Reducer.html#t%3AReducer"
+>Reducer</A
+> (f a) (<A HREF="Data-Monoid-Applicative.html#t%3ATraversal"
+>Traversal</A
+> f)</TD
+></TR
+><TR
+><TD CLASS="decl"
+><A HREF="/usr/local/share/doc/ghc/libraries/base/Control-Monad.html#t%3AMonad"
+>Monad</A
+> m =&gt; <A HREF="Data-Monoid-Reducer.html#t%3AReducer"
+>Reducer</A
+> (m a) (<A HREF="Data-Monoid-Monad.html#t%3AAction"
+>Action</A
+> m)</TD
+></TR
+><TR
+><TD CLASS="decl"
+><A HREF="Data-Monoid-Reducer.html#t%3AReducer"
+>Reducer</A
+> (<A HREF="/usr/local/share/doc/ghc/libraries/base/Data-Maybe.html#t%3AMaybe"
+>Maybe</A
+> a) (<A HREF="/usr/local/share/doc/ghc/libraries/base/Data-Monoid.html#t%3ALast"
+>Last</A
+> a)</TD
+></TR
+><TR
+><TD CLASS="decl"
+><A HREF="Data-Monoid-Reducer.html#t%3AReducer"
+>Reducer</A
+> (<A HREF="/usr/local/share/doc/ghc/libraries/base/Data-Maybe.html#t%3AMaybe"
+>Maybe</A
+> a) (<A HREF="/usr/local/share/doc/ghc/libraries/base/Data-Monoid.html#t%3ALast"
+>Last</A
+> a)</TD
+></TR
+><TR
+><TD CLASS="decl"
+><A HREF="Data-Monoid-Reducer.html#t%3AReducer"
+>Reducer</A
+> (<A HREF="/usr/local/share/doc/ghc/libraries/base/Data-Maybe.html#t%3AMaybe"
+>Maybe</A
+> a) (<A HREF="/usr/local/share/doc/ghc/libraries/base/Data-Monoid.html#t%3AFirst"
+>First</A
+> a)</TD
+></TR
+><TR
+><TD CLASS="decl"
+><A HREF="Data-Monoid-Reducer.html#t%3AReducer"
+>Reducer</A
+> (<A HREF="/usr/local/share/doc/ghc/libraries/base/Data-Maybe.html#t%3AMaybe"
+>Maybe</A
+> a) (<A HREF="/usr/local/share/doc/ghc/libraries/base/Data-Monoid.html#t%3AFirst"
+>First</A
+> a)</TD
+></TR
+><TR
+><TD CLASS="decl"
+><A HREF="/usr/local/share/doc/ghc/libraries/base/Data-Ord.html#t%3AOrd"
+>Ord</A
+> a =&gt; <A HREF="Data-Monoid-Reducer.html#t%3AReducer"
+>Reducer</A
+> (<A HREF="/usr/local/share/doc/ghc/libraries/base/Data-Maybe.html#t%3AMaybe"
+>Maybe</A
+> a) (<A HREF="Data-Monoid-Ord.html#t%3AMinPriority"
+>MinPriority</A
+> a)</TD
+></TR
+><TR
+><TD CLASS="decl"
+><A HREF="/usr/local/share/doc/ghc/libraries/base/Data-Ord.html#t%3AOrd"
+>Ord</A
+> a =&gt; <A HREF="Data-Monoid-Reducer.html#t%3AReducer"
+>Reducer</A
+> (<A HREF="/usr/local/share/doc/ghc/libraries/base/Data-Maybe.html#t%3AMaybe"
+>Maybe</A
+> a) (<A HREF="Data-Monoid-Ord.html#t%3AMinPriority"
+>MinPriority</A
+> a)</TD
+></TR
+><TR
+><TD CLASS="decl"
+><A HREF="/usr/local/share/doc/ghc/libraries/base/Data-Ord.html#t%3AOrd"
+>Ord</A
+> a =&gt; <A HREF="Data-Monoid-Reducer.html#t%3AReducer"
+>Reducer</A
+> (<A HREF="/usr/local/share/doc/ghc/libraries/base/Data-Maybe.html#t%3AMaybe"
+>Maybe</A
+> a) (<A HREF="Data-Monoid-Ord.html#t%3AMaxPriority"
+>MaxPriority</A
+> a)</TD
+></TR
+><TR
+><TD CLASS="decl"
+><A HREF="/usr/local/share/doc/ghc/libraries/base/Data-Ord.html#t%3AOrd"
+>Ord</A
+> a =&gt; <A HREF="Data-Monoid-Reducer.html#t%3AReducer"
+>Reducer</A
+> (<A HREF="/usr/local/share/doc/ghc/libraries/base/Data-Maybe.html#t%3AMaybe"
+>Maybe</A
+> a) (<A HREF="Data-Monoid-Ord.html#t%3AMaxPriority"
+>MaxPriority</A
+> a)</TD
+></TR
+><TR
+><TD CLASS="decl"
+><A HREF="/usr/local/share/doc/ghc/libraries/base/Data-Ord.html#t%3AOrd"
+>Ord</A
+> a =&gt; <A HREF="Data-Monoid-Reducer.html#t%3AReducer"
+>Reducer</A
+> (<A HREF="/usr/local/share/doc/ghc/libraries/base/Data-Maybe.html#t%3AMaybe"
+>Maybe</A
+> a) (<A HREF="Data-Ring-Semi-Tropical.html#t%3ATropical"
+>Tropical</A
+> a)</TD
+></TR
+><TR
+><TD CLASS="decl"
+><A HREF="/usr/local/share/doc/ghc/libraries/base/Data-Ord.html#t%3AOrd"
+>Ord</A
+> a =&gt; <A HREF="Data-Monoid-Reducer.html#t%3AReducer"
+>Reducer</A
+> (<A HREF="/usr/local/share/doc/ghc/libraries/base/Data-Maybe.html#t%3AMaybe"
+>Maybe</A
+> a) (<A HREF="Data-Ring-Semi-Tropical.html#t%3ATropical"
+>Tropical</A
+> a)</TD
+></TR
+><TR
+><TD CLASS="decl"
+><A HREF="/usr/local/share/doc/ghc/libraries/base/Data-Ord.html#t%3AOrd"
+>Ord</A
+> a =&gt; <A HREF="Data-Monoid-Reducer.html#t%3AReducer"
+>Reducer</A
+> (<A HREF="Data-Monoid-Ord.html#t%3AMinPriority"
+>MinPriority</A
+> a) (<A HREF="Data-Ring-Semi-Tropical.html#t%3ATropical"
+>Tropical</A
+> a)</TD
+></TR
+><TR
+><TD CLASS="decl"
+><A HREF="/usr/local/share/doc/ghc/libraries/base/Data-Ord.html#t%3AOrd"
+>Ord</A
+> a =&gt; <A HREF="Data-Monoid-Reducer.html#t%3AReducer"
+>Reducer</A
+> (<A HREF="Data-Monoid-Ord.html#t%3AMinPriority"
+>MinPriority</A
+> a) (<A HREF="Data-Ring-Semi-Tropical.html#t%3ATropical"
+>Tropical</A
+> a)</TD
+></TR
+><TR
+><TD CLASS="decl"
+><A HREF="/usr/local/share/doc/ghc/libraries/base/Data-Ord.html#t%3AOrd"
+>Ord</A
+> a =&gt; <A HREF="Data-Monoid-Reducer.html#t%3AReducer"
+>Reducer</A
+> (<A HREF="Data-Monoid-Ord.html#t%3AMinPriority"
+>MinPriority</A
+> a) (<A HREF="Data-Ring-Semi-Ord.html#t%3APriority"
+>Priority</A
+> a)</TD
+></TR
+><TR
+><TD CLASS="decl"
+><A HREF="/usr/local/share/doc/ghc/libraries/base/Data-Ord.html#t%3AOrd"
+>Ord</A
+> a =&gt; <A HREF="Data-Monoid-Reducer.html#t%3AReducer"
+>Reducer</A
+> (<A HREF="Data-Monoid-Ord.html#t%3AMinPriority"
+>MinPriority</A
+> a) (<A HREF="Data-Ring-Semi-Ord.html#t%3APriority"
+>Priority</A
+> a)</TD
+></TR
+><TR
+><TD CLASS="decl"
+><A HREF="/usr/local/share/doc/ghc/libraries/base/Data-Ord.html#t%3AOrd"
+>Ord</A
+> a =&gt; <A HREF="Data-Monoid-Reducer.html#t%3AReducer"
+>Reducer</A
+> (<A HREF="Data-Monoid-Ord.html#t%3AMaxPriority"
+>MaxPriority</A
+> a) (<A HREF="Data-Ring-Semi-Ord.html#t%3APriority"
+>Priority</A
+> a)</TD
+></TR
+><TR
+><TD CLASS="decl"
+><A HREF="/usr/local/share/doc/ghc/libraries/base/Data-Ord.html#t%3AOrd"
+>Ord</A
+> a =&gt; <A HREF="Data-Monoid-Reducer.html#t%3AReducer"
+>Reducer</A
+> (<A HREF="Data-Monoid-Ord.html#t%3AMaxPriority"
+>MaxPriority</A
+> a) (<A HREF="Data-Ring-Semi-Ord.html#t%3APriority"
+>Priority</A
+> a)</TD
+></TR
+><TR
+><TD CLASS="decl"
+>(<A HREF="Data-Monoid-Union.html#t%3AHasUnionWith"
+>HasUnionWith</A
+> f, <A HREF="/usr/local/share/doc/ghc/libraries/base/Data-Monoid.html#t%3AMonoid"
+>Monoid</A
+> m) =&gt; <A HREF="Data-Monoid-Reducer.html#t%3AReducer"
+>Reducer</A
+> (f m) (<A HREF="Data-Monoid-Union.html#t%3AUnionWith"
+>UnionWith</A
+> f m)</TD
+></TR
+><TR
+><TD CLASS="decl"
+><A HREF="Data-Monoid-Reducer.html#t%3AReducer"
+>Reducer</A
+> c m =&gt; <A HREF="Data-Monoid-Reducer.html#t%3AReducer"
+>Reducer</A
+> (<A HREF="Data-Monoid-Reducer-With.html#t%3AWithReducer"
+>WithReducer</A
+> c m) m</TD
+></TR
+><TR
+><TD CLASS="decl"
+><A HREF="Data-Monoid-Reducer.html#t%3AReducer"
+>Reducer</A
+> (a -&gt; a) (<A HREF="/usr/local/share/doc/ghc/libraries/base/Data-Monoid.html#t%3AEndo"
+>Endo</A
+> a)</TD
+></TR
+><TR
+><TD CLASS="decl"
+><A HREF="Data-Monoid-Reducer.html#t%3AReducer"
+>Reducer</A
+> (a -&gt; a) (<A HREF="/usr/local/share/doc/ghc/libraries/base/Data-Monoid.html#t%3AEndo"
+>Endo</A
+> a)</TD
+></TR
+><TR
+><TD CLASS="decl"
+><A HREF="Data-Monoid-Reducer.html#t%3AReducer"
+>Reducer</A
+> ((,) <A HREF="/usr/local/share/doc/ghc/libraries/ghc-prim/GHC-Types.html#t%3AInt"
+>Int</A
+> v) (<A HREF="/usr/local/share/doc/ghc/libraries/containers/Data-IntMap.html#t%3AIntMap"
+>IntMap</A
+> v)</TD
+></TR
+><TR
+><TD CLASS="decl"
+><A HREF="Data-Monoid-Reducer.html#t%3AReducer"
+>Reducer</A
+> ((,) <A HREF="/usr/local/share/doc/ghc/libraries/ghc-prim/GHC-Types.html#t%3AInt"
+>Int</A
+> v) (<A HREF="/usr/local/share/doc/ghc/libraries/containers/Data-IntMap.html#t%3AIntMap"
+>IntMap</A
+> v)</TD
+></TR
+><TR
+><TD CLASS="decl"
+><A HREF="/usr/local/share/doc/ghc/libraries/base/Data-Ord.html#t%3AOrd"
+>Ord</A
+> k =&gt; <A HREF="Data-Monoid-Reducer.html#t%3AReducer"
+>Reducer</A
+> ((,) k v) (<A HREF="/usr/local/share/doc/ghc/libraries/containers/Data-Map.html#t%3AMap"
+>Map</A
+> k v)</TD
+></TR
+><TR
+><TD CLASS="decl"
+><A HREF="/usr/local/share/doc/ghc/libraries/base/Data-Ord.html#t%3AOrd"
+>Ord</A
+> k =&gt; <A HREF="Data-Monoid-Reducer.html#t%3AReducer"
+>Reducer</A
+> ((,) k v) (<A HREF="/usr/local/share/doc/ghc/libraries/containers/Data-Map.html#t%3AMap"
+>Map</A
+> k v)</TD
+></TR
+><TR
+><TD CLASS="decl"
+>(<A HREF="/usr/local/share/doc/ghc/libraries/base/Prelude.html#t%3AIntegral"
+>Integral</A
+> n, <A HREF="Data-Monoid-Reducer.html#t%3AReducer"
+>Reducer</A
+> c m) =&gt; <A HREF="Data-Monoid-Reducer.html#t%3AReducer"
+>Reducer</A
+> ((,) n c) (<A HREF="Data-Monoid-Lexical-RunLengthEncoding.html#t%3ARLE"
+>RLE</A
+> n m)</TD
+></TR
+><TR
+><TD CLASS="decl"
+>(<A HREF="/usr/local/share/doc/ghc/libraries/base/Prelude.html#t%3AIntegral"
+>Integral</A
+> n, <A HREF="Data-Monoid-Reducer.html#t%3AReducer"
+>Reducer</A
+> c m) =&gt; <A HREF="Data-Monoid-Reducer.html#t%3AReducer"
+>Reducer</A
+> ((,) n c) (<A HREF="Data-Monoid-Lexical-RunLengthEncoding.html#t%3ARLE"
+>RLE</A
+> n m)</TD
+></TR
+></TABLE
+></DIV
+></TD
+></TR
+></TABLE
+></TD
+></TR
+><TR
+><TD CLASS="s15"
+></TD
+></TR
+><TR
+><TD CLASS="topdecl"
+><TABLE CLASS="declbar"
+><TR
+><TD CLASS="declname"
+><A NAME="v%3Aunit"
+></A
+><B
+>unit</B
+> :: <A HREF="Data-Monoid-Reducer.html#t%3AReducer"
+>Reducer</A
+> c m =&gt; c -&gt; m</TD
+><TD CLASS="declbut"
+><A HREF="src/Data-Monoid-Reducer.html#unit"
+>Source</A
+></TD
+></TR
+></TABLE
+></TD
+></TR
+><TR
+><TD CLASS="doc"
+>Convert a value into a <TT
+><A HREF="/usr/local/share/doc/ghc/libraries/base/Data-Monoid.html#t%3AMonoid"
+>Monoid</A
+></TT
+>
+</TD
+></TR
+><TR
+><TD CLASS="s15"
+></TD
+></TR
+><TR
+><TD CLASS="topdecl"
+><TABLE CLASS="declbar"
+><TR
+><TD CLASS="declname"
+><A NAME="v%3Asnoc"
+></A
+><B
+>snoc</B
+> :: <A HREF="Data-Monoid-Reducer.html#t%3AReducer"
+>Reducer</A
+> c m =&gt; m -&gt; c -&gt; m</TD
+><TD CLASS="declbut"
+><A HREF="src/Data-Monoid-Reducer.html#snoc"
+>Source</A
+></TD
+></TR
+></TABLE
+></TD
+></TR
+><TR
+><TD CLASS="doc"
+>Append a value to a <TT
+><A HREF="/usr/local/share/doc/ghc/libraries/base/Data-Monoid.html#t%3AMonoid"
+>Monoid</A
+></TT
+> for use in left-to-right reduction
+</TD
+></TR
+><TR
+><TD CLASS="s15"
+></TD
+></TR
+><TR
+><TD CLASS="topdecl"
+><TABLE CLASS="declbar"
+><TR
+><TD CLASS="declname"
+><A NAME="v%3Acons"
+></A
+><B
+>cons</B
+> :: <A HREF="Data-Monoid-Reducer.html#t%3AReducer"
+>Reducer</A
+> c m =&gt; c -&gt; m -&gt; m</TD
+><TD CLASS="declbut"
+><A HREF="src/Data-Monoid-Reducer.html#cons"
+>Source</A
+></TD
+></TR
+></TABLE
+></TD
+></TR
+><TR
+><TD CLASS="doc"
+>Prepend a value onto a <TT
+><A HREF="/usr/local/share/doc/ghc/libraries/base/Data-Monoid.html#t%3AMonoid"
+>Monoid</A
+></TT
+> for use during right-to-left reduction
+</TD
+></TR
+><TR
+><TD CLASS="s15"
+></TD
+></TR
+><TR
+><TD CLASS="topdecl"
+><TABLE CLASS="declbar"
+><TR
+><TD CLASS="declname"
+><A NAME="v%3AfoldMapReduce"
+></A
+><B
+>foldMapReduce</B
+> :: (<A HREF="/usr/local/share/doc/ghc/libraries/base/Data-Foldable.html#t%3AFoldable"
+>Foldable</A
+> f, <A HREF="Data-Monoid-Reducer.html#t%3AReducer"
+>Reducer</A
+> e m) =&gt; (a -&gt; e) -&gt; f a -&gt; m</TD
+><TD CLASS="declbut"
+><A HREF="src/Data-Monoid-Reducer.html#foldMapReduce"
+>Source</A
+></TD
+></TR
+></TABLE
+></TD
+></TR
+><TR
+><TD CLASS="doc"
+>Apply a <TT
+><A HREF="Data-Monoid-Reducer.html#t%3AReducer"
+>Reducer</A
+></TT
+> to a <TT
+><A HREF="/usr/local/share/doc/ghc/libraries/base/Data-Foldable.html#t%3AFoldable"
+>Foldable</A
+></TT
+> container, after mapping the contents into a suitable form for reduction.
+</TD
+></TR
+><TR
+><TD CLASS="s15"
+></TD
+></TR
+><TR
+><TD CLASS="topdecl"
+><TABLE CLASS="declbar"
+><TR
+><TD CLASS="declname"
+><A NAME="v%3AfoldReduce"
+></A
+><B
+>foldReduce</B
+> :: (<A HREF="/usr/local/share/doc/ghc/libraries/base/Data-Foldable.html#t%3AFoldable"
+>Foldable</A
+> f, <A HREF="Data-Monoid-Reducer.html#t%3AReducer"
+>Reducer</A
+> e m) =&gt; f e -&gt; m</TD
+><TD CLASS="declbut"
+><A HREF="src/Data-Monoid-Reducer.html#foldReduce"
+>Source</A
+></TD
+></TR
+></TABLE
+></TD
+></TR
+><TR
+><TD CLASS="doc"
+>Apply a <TT
+><A HREF="Data-Monoid-Reducer.html#t%3AReducer"
+>Reducer</A
+></TT
+> to a <TT
+><A HREF="/usr/local/share/doc/ghc/libraries/base/Data-Foldable.html#t%3AFoldable"
+>Foldable</A
+></TT
+> mapping each element through <TT
+><A HREF="Data-Monoid-Reducer.html#v%3Aunit"
+>unit</A
+></TT
+>
+</TD
+></TR
+><TR
+><TD CLASS="s15"
+></TD
+></TR
+><TR
+><TD CLASS="botbar"
+>Produced by <A HREF="http://www.haskell.org/haddock/"
+>Haddock</A
+> version 2.3.0</TD
+></TR
+></TABLE
+></BODY
+></HTML
+>
addfile ./dist/doc/html/monoids/Data-Monoid-Self.html
hunk ./dist/doc/html/monoids/Data-Monoid-Self.html 1
+<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd">
+<!--Rendered using the Haskell Html Library v0.2-->
+<HTML
+><HEAD
+><META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=UTF-8"
+><TITLE
+>Data.Monoid.Self</TITLE
+><LINK HREF="haddock.css" REL="stylesheet" TYPE="text/css"
+><SCRIPT SRC="haddock-util.js" TYPE="text/javascript"
+></SCRIPT
+></HEAD
+><BODY
+><TABLE CLASS="vanilla" CELLSPACING="0" CELLPADDING="0"
+><TR
+><TD CLASS="topbar"
+><TABLE CLASS="vanilla" CELLSPACING="0" CELLPADDING="0"
+><TR
+><TD
+><IMG SRC="haskell_icon.gif" WIDTH="16" HEIGHT="16" ALT=" "
+></TD
+><TD CLASS="title"
+>monoids-0.1.6: Lots of Monoids</TD
+><TD CLASS="topbut"
+><A HREF="src/Data-Monoid-Self.html"
+>Source code</A
+></TD
+><TD CLASS="topbut"
+><A HREF="index.html"
+>Contents</A
+></TD
+><TD CLASS="topbut"
+><A HREF="doc-index.html"
+>Index</A
+></TD
+></TR
+></TABLE
+></TD
+></TR
+><TR
+><TD CLASS="modulebar"
+><TABLE CLASS="vanilla" CELLSPACING="0" CELLPADDING="0"
+><TR
+><TD
+><FONT SIZE="6"
+>Data.Monoid.Self</FONT
+></TD
+><TD ALIGN="right"
+><TABLE CLASS="narrow" CELLSPACING="0" CELLPADDING="0"
+><TR
+><TD CLASS="infohead"
+>Portability</TD
+><TD CLASS="infoval"
+>portable</TD
+></TR
+><TR
+><TD CLASS="infohead"
+>Stability</TD
+><TD CLASS="infoval"
+>experimental</TD
+></TR
+><TR
+><TD CLASS="infohead"
+>Maintainer</TD
+><TD CLASS="infoval"
+>libraries@haskell.org</TD
+></TR
+></TABLE
+></TD
+></TR
+></TABLE
+></TD
+></TR
+><TR
+><TD CLASS="s15"
+></TD
+></TR
+><TR
+><TD CLASS="section1"
+>Description</TD
+></TR
+><TR
+><TD CLASS="doc"
+><P
+>A simple <TT
+><A HREF="/usr/local/share/doc/ghc/libraries/base/Data-Monoid.html#t%3AMonoid"
+>Monoid</A
+></TT
+> transformer that takes a <TT
+><A HREF="/usr/local/share/doc/ghc/libraries/base/Data-Monoid.html#t%3AMonoid"
+>Monoid</A
+></TT
+> m and produces a new <TT
+>m</TT
+>-Reducer named <TT
+><A HREF="Data-Monoid-Self.html#v%3ASelf"
+>Self</A
+></TT
+> <TT
+>m</TT
+>
+</P
+><P
+>This is useful when you have a generator that already contains monoidal values or someone supplies
+ the map to the monoid in the form of a function rather than as a <A HREF="Reducer.html"
+>Reducer</A
+> instance. You can just
+ <TT
+><TT
+><A HREF="Data-Monoid-Self.html#v%3AgetSelf"
+>getSelf</A
+></TT
+> . <TT
+><A HREF="Data-Monoid-Generator.html#v%3Areduce"
+>reduce</A
+></TT
+></TT
+> or <TT
+><TT
+><A HREF="Data-Monoid-Self.html#v%3AgetSelf"
+>getSelf</A
+></TT
+> . <TT
+><A HREF="Data-Monoid-Generator.html#v%3AmapReduce"
+>mapReduce</A
+></TT
+> f</TT
+> in those scenarios. These behaviors are encapsulated 
+ into the fold and foldMap combinators in <A HREF="Data-Monoid-Combinators.html"
+>Data.Monoid.Combinators</A
+> respectively.
+</P
+></TD
+></TR
+><TR
+><TD CLASS="s15"
+></TD
+></TR
+><TR
+><TD CLASS="s15"
+></TD
+></TR
+><TR
+><TD CLASS="section1"
+>Documentation</TD
+></TR
+><TR
+><TD CLASS="s15"
+></TD
+></TR
+><TR
+><TD CLASS="decl"
+>module <A HREF="Data-Monoid-Reducer.html"
+>Data.Monoid.Reducer</A
+></TD
+></TR
+><TR
+><TD CLASS="s15"
+></TD
+></TR
+><TR
+><TD CLASS="topdecl"
+><TABLE CLASS="declbar"
+><TR
+><TD CLASS="declname"
+><SPAN CLASS="keyword"
+>newtype</SPAN
+>  <A NAME="t%3ASelf"
+></A
+><B
+>Self</B
+> m </TD
+><TD CLASS="declbut"
+><A HREF="src/Data-Monoid-Self.html#Self"
+>Source</A
+></TD
+></TR
+></TABLE
+></TD
+></TR
+><TR
+><TD CLASS="body"
+><TABLE CLASS="vanilla" CELLSPACING="0" CELLPADDING="0"
+><TR
+><TD CLASS="section4"
+>Constructors</TD
+></TR
+><TR
+><TD CLASS="body"
+><TABLE CLASS="vanilla" CELLSPACING="5" CELLPADDING="0"
+><TR
+><TD CLASS="arg"
+><A NAME="v%3ASelf"
+></A
+><B
+>Self</B
+></TD
+><TD CLASS="rdoc"
+></TD
+></TR
+><TR
+><TD CLASS="body" COLSPAN="2"
+><TABLE CLASS="vanilla" CELLSPACING="1" CELLPADDING="0"
+><TR
+><TD CLASS="arg"
+><A NAME="v%3AgetSelf"
+></A
+><B
+>getSelf</B
+> :: m</TD
+><TD CLASS="rdoc"
+></TD
+></TR
+></TABLE
+></TD
+></TR
+></TABLE
+></TD
+></TR
+><TR
+><TD CLASS="section4"
+><IMG SRC="minus.gif" CLASS="coll" ONCLICK="toggle(this,'i:Self')" ALT="show/hide"
+> Instances</TD
+></TR
+><TR
+><TD CLASS="body"
+><DIV ID="i:Self" STYLE="display:block;"
+><TABLE CLASS="vanilla" CELLSPACING="1" CELLPADDING="0"
+><TR
+><TD CLASS="decl"
+><A HREF="/usr/local/share/doc/ghc/libraries/base/Control-Monad.html#t%3AFunctor"
+>Functor</A
+> <A HREF="Data-Monoid-Self.html#t%3ASelf"
+>Self</A
+></TD
+></TR
+><TR
+><TD CLASS="decl"
+>Pointed <A HREF="Data-Monoid-Self.html#t%3ASelf"
+>Self</A
+></TD
+></TR
+><TR
+><TD CLASS="decl"
+>Copointed <A HREF="Data-Monoid-Self.html#t%3ASelf"
+>Self</A
+></TD
+></TR
+><TR
+><TD CLASS="decl"
+><A HREF="/usr/local/share/doc/ghc/libraries/base/Data-Monoid.html#t%3AMonoid"
+>Monoid</A
+> m =&gt; <A HREF="Data-Monoid-Reducer.html#t%3AReducer"
+>Reducer</A
+> m (<A HREF="Data-Monoid-Self.html#t%3ASelf"
+>Self</A
+> m)</TD
+></TR
+><TR
+><TD CLASS="decl"
+><A HREF="/usr/local/share/doc/ghc/libraries/base/Data-Monoid.html#t%3AMonoid"
+>Monoid</A
+> m =&gt; <A HREF="/usr/local/share/doc/ghc/libraries/base/Data-Monoid.html#t%3AMonoid"
+>Monoid</A
+> (<A HREF="Data-Monoid-Self.html#t%3ASelf"
+>Self</A
+> m)</TD
+></TR
+><TR
+><TD CLASS="decl"
+><A HREF="Data-Monoid-Multiplicative.html#t%3AMultiplicative"
+>Multiplicative</A
+> m =&gt; <A HREF="Data-Monoid-Multiplicative.html#t%3AMultiplicative"
+>Multiplicative</A
+> (<A HREF="Data-Monoid-Self.html#t%3ASelf"
+>Self</A
+> m)</TD
+></TR
+><TR
+><TD CLASS="decl"
+><A HREF="Data-Ring-Semi-Near.html#t%3ALeftSemiNearRing"
+>LeftSemiNearRing</A
+> m =&gt; <A HREF="Data-Ring-Semi-Near.html#t%3ALeftSemiNearRing"
+>LeftSemiNearRing</A
+> (<A HREF="Data-Monoid-Self.html#t%3ASelf"
+>Self</A
+> m)</TD
+></TR
+><TR
+><TD CLASS="decl"
+><A HREF="Data-Ring-Semi-Near.html#t%3ARightSemiNearRing"
+>RightSemiNearRing</A
+> m =&gt; <A HREF="Data-Ring-Semi-Near.html#t%3ARightSemiNearRing"
+>RightSemiNearRing</A
+> (<A HREF="Data-Monoid-Self.html#t%3ASelf"
+>Self</A
+> m)</TD
+></TR
+><TR
+><TD CLASS="decl"
+><A HREF="Data-Group.html#t%3AGroup"
+>Group</A
+> a =&gt; <A HREF="Data-Group.html#t%3AGroup"
+>Group</A
+> (<A HREF="Data-Monoid-Self.html#t%3ASelf"
+>Self</A
+> a)</TD
+></TR
+></TABLE
+></DIV
+></TD
+></TR
+></TABLE
+></TD
+></TR
+><TR
+><TD CLASS="s15"
+></TD
+></TR
+><TR
+><TD CLASS="botbar"
+>Produced by <A HREF="http://www.haskell.org/haddock/"
+>Haddock</A
+> version 2.3.0</TD
+></TR
+></TABLE
+></BODY
+></HTML
+>
addfile ./dist/doc/html/monoids/Data-Monoid-Union.html
hunk ./dist/doc/html/monoids/Data-Monoid-Union.html 1
+<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd">
+<!--Rendered using the Haskell Html Library v0.2-->
+<HTML
+><HEAD
+><META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=UTF-8"
+><TITLE
+>Data.Monoid.Union</TITLE
+><LINK HREF="haddock.css" REL="stylesheet" TYPE="text/css"
+><SCRIPT SRC="haddock-util.js" TYPE="text/javascript"
+></SCRIPT
+></HEAD
+><BODY
+><TABLE CLASS="vanilla" CELLSPACING="0" CELLPADDING="0"
+><TR
+><TD CLASS="topbar"
+><TABLE CLASS="vanilla" CELLSPACING="0" CELLPADDING="0"
+><TR
+><TD
+><IMG SRC="haskell_icon.gif" WIDTH="16" HEIGHT="16" ALT=" "
+></TD
+><TD CLASS="title"
+>monoids-0.1.6: Lots of Monoids</TD
+><TD CLASS="topbut"
+><A HREF="src/Data-Monoid-Union.html"
+>Source code</A
+></TD
+><TD CLASS="topbut"
+><A HREF="index.html"
+>Contents</A
+></TD
+><TD CLASS="topbut"
+><A HREF="doc-index.html"
+>Index</A
+></TD
+></TR
+></TABLE
+></TD
+></TR
+><TR
+><TD CLASS="modulebar"
+><TABLE CLASS="vanilla" CELLSPACING="0" CELLPADDING="0"
+><TR
+><TD
+><FONT SIZE="6"
+>Data.Monoid.Union</FONT
+></TD
+></TR
+></TABLE
+></TD
+></TR
+><TR
+><TD CLASS="s15"
+></TD
+></TR
+><TR
+><TD
+><TABLE CLASS="vanilla" CELLSPACING="0" CELLPADDING="0"
+><TR
+><TD CLASS="section4"
+><B
+>Contents</B
+></TD
+></TR
+><TR
+><TD
+><DL
+><DT
+><A HREF="#1"
+>Unions of Containers
+</A
+></DT
+><DT
+><A HREF="#2"
+>Unions of Containers of Monoids
+</A
+></DT
+></DL
+></TD
+></TR
+></TABLE
+></TD
+></TR
+><TR
+><TD CLASS="s15"
+></TD
+></TR
+><TR
+><TD CLASS="s15"
+></TD
+></TR
+><TR
+><TD CLASS="section1"
+>Synopsis</TD
+></TR
+><TR
+><TD CLASS="s15"
+></TD
+></TR
+><TR
+><TD CLASS="body"
+><TABLE CLASS="vanilla" CELLSPACING="0" CELLPADDING="0"
+><TR
+><TD CLASS="decl"
+>module <A HREF="Data-Monoid-Reducer.html"
+>Data.Monoid.Reducer</A
+></TD
+></TR
+><TR
+><TD CLASS="s8"
+></TD
+></TR
+><TR
+><TD CLASS="decl"
+><SPAN CLASS="keyword"
+>class</SPAN
+>  <A HREF="#t%3AHasUnion"
+>HasUnion</A
+> f  <SPAN CLASS="keyword"
+>where</SPAN
+></TD
+></TR
+><TR
+><TD CLASS="body"
+><TABLE CLASS="vanilla" CELLSPACING="0" CELLPADDING="0"
+><TR
+><TD CLASS="decl"
+><A HREF="#v%3Aempty"
+>empty</A
+> :: f</TD
+></TR
+><TR
+><TD CLASS="decl"
+><A HREF="#v%3Aunion"
+>union</A
+> :: f -&gt; f -&gt; f</TD
+></TR
+></TABLE
+></TD
+></TR
+><TR
+><TD CLASS="s8"
+></TD
+></TR
+><TR
+><TD CLASS="decl"
+><A HREF="#v%3Aempty"
+>empty</A
+> :: <A HREF="Data-Monoid-Union.html#t%3AHasUnion"
+>HasUnion</A
+> f =&gt; f</TD
+></TR
+><TR
+><TD CLASS="s8"
+></TD
+></TR
+><TR
+><TD CLASS="decl"
+><A HREF="#v%3Aunion"
+>union</A
+> :: <A HREF="Data-Monoid-Union.html#t%3AHasUnion"
+>HasUnion</A
+> f =&gt; f -&gt; f -&gt; f</TD
+></TR
+><TR
+><TD CLASS="s8"
+></TD
+></TR
+><TR
+><TD CLASS="decl"
+><SPAN CLASS="keyword"
+>newtype</SPAN
+>  <A HREF="#t%3AUnion"
+>Union</A
+> f = <A HREF="#v%3AUnion"
+>Union</A
+> {<TABLE CLASS="vanilla" CELLSPACING="0" CELLPADDING="0"
+><TR
+><TD CLASS="recfield"
+><A HREF="#v%3AgetUnion"
+>getUnion</A
+> :: f</TD
+></TR
+></TABLE
+>}</TD
+></TR
+><TR
+><TD CLASS="s8"
+></TD
+></TR
+><TR
+><TD CLASS="decl"
+><SPAN CLASS="keyword"
+>class</SPAN
+>  <A HREF="#t%3AHasUnionWith"
+>HasUnionWith</A
+> f  <SPAN CLASS="keyword"
+>where</SPAN
+></TD
+></TR
+><TR
+><TD CLASS="body"
+><TABLE CLASS="vanilla" CELLSPACING="0" CELLPADDING="0"
+><TR
+><TD CLASS="decl"
+><A HREF="#v%3AunionWith"
+>unionWith</A
+> ::  (a -&gt; a -&gt; a) -&gt; f a -&gt; f a -&gt; f a</TD
+></TR
+><TR
+><TD CLASS="decl"
+><A HREF="#v%3AemptyWith"
+>emptyWith</A
+> ::  f a</TD
+></TR
+></TABLE
+></TD
+></TR
+><TR
+><TD CLASS="s8"
+></TD
+></TR
+><TR
+><TD CLASS="decl"
+><A HREF="#v%3AemptyWith"
+>emptyWith</A
+> :: <A HREF="Data-Monoid-Union.html#t%3AHasUnionWith"
+>HasUnionWith</A
+> f =&gt; f a</TD
+></TR
+><TR
+><TD CLASS="s8"
+></TD
+></TR
+><TR
+><TD CLASS="decl"
+><A HREF="#v%3AunionWith"
+>unionWith</A
+> :: <A HREF="Data-Monoid-Union.html#t%3AHasUnionWith"
+>HasUnionWith</A
+> f =&gt; (a -&gt; a -&gt; a) -&gt; f a -&gt; f a -&gt; f a</TD
+></TR
+><TR
+><TD CLASS="s8"
+></TD
+></TR
+><TR
+><TD CLASS="decl"
+><SPAN CLASS="keyword"
+>newtype</SPAN
+>  <A HREF="#t%3AUnionWith"
+>UnionWith</A
+> f m = <A HREF="#v%3AUnionWith"
+>UnionWith</A
+> {<TABLE CLASS="vanilla" CELLSPACING="0" CELLPADDING="0"
+><TR
+><TD CLASS="recfield"
+><A HREF="#v%3AgetUnionWith"
+>getUnionWith</A
+> :: f m</TD
+></TR
+></TABLE
+>}</TD
+></TR
+></TABLE
+></TD
+></TR
+><TR
+><TD CLASS="s15"
+></TD
+></TR
+><TR
+><TD CLASS="section1"
+>Documentation</TD
+></TR
+><TR
+><TD CLASS="s15"
+></TD
+></TR
+><TR
+><TD CLASS="decl"
+>module <A HREF="Data-Monoid-Reducer.html"
+>Data.Monoid.Reducer</A
+></TD
+></TR
+><TR
+><TD CLASS="s15"
+></TD
+></TR
+><TR
+><TD CLASS="section1"
+><A NAME="1"
+>Unions of Containers
+</A
+></TD
+></TR
+><TR
+><TD CLASS="s15"
+></TD
+></TR
+><TR
+><TD CLASS="topdecl"
+><TABLE CLASS="declbar"
+><TR
+><TD CLASS="declname"
+><SPAN CLASS="keyword"
+>class</SPAN
+>  <A NAME="t%3AHasUnion"
+></A
+><B
+>HasUnion</B
+> f  <SPAN CLASS="keyword"
+>where</SPAN
+></TD
+><TD CLASS="declbut"
+><A HREF="src/Data-Monoid-Union.html#HasUnion"
+>Source</A
+></TD
+></TR
+></TABLE
+></TD
+></TR
+><TR
+><TD CLASS="body"
+><TABLE CLASS="vanilla" CELLSPACING="0" CELLPADDING="0"
+><TR
+><TD CLASS="ndoc"
+>A Container suitable for the <TT
+><A HREF="Data-Monoid-Union.html#v%3AUnion"
+>Union</A
+></TT
+> <TT
+><A HREF="/usr/local/share/doc/ghc/libraries/base/Data-Monoid.html#t%3AMonoid"
+>Monoid</A
+></TT
+>
+</TD
+></TR
+><TR
+><TD CLASS="s8"
+></TD
+></TR
+><TR
+><TD CLASS="section4"
+>Methods</TD
+></TR
+><TR
+><TD CLASS="body"
+><TABLE CLASS="vanilla" CELLSPACING="0" CELLPADDING="0"
+><TR
+><TD CLASS="topdecl"
+><TABLE CLASS="declbar"
+><TR
+><TD CLASS="declname"
+><A NAME="v%3Aempty"
+></A
+><B
+>empty</B
+> :: f</TD
+><TD CLASS="declbut"
+><A HREF="src/Data-Monoid-Union.html#empty"
+>Source</A
+></TD
+></TR
+></TABLE
+></TD
+></TR
+><TR
+><TD CLASS="s8"
+></TD
+></TR
+><TR
+><TD CLASS="topdecl"
+><TABLE CLASS="declbar"
+><TR
+><TD CLASS="declname"
+><A NAME="v%3Aunion"
+></A
+><B
+>union</B
+> :: f -&gt; f -&gt; f</TD
+><TD CLASS="declbut"
+><A HREF="src/Data-Monoid-Union.html#union"
+>Source</A
+></TD
+></TR
+></TABLE
+></TD
+></TR
+></TABLE
+></TD
+></TR
+><TR
+><TD CLASS="s8"
+></TD
+></TR
+><TR
+><TD CLASS="section4"
+><IMG SRC="minus.gif" CLASS="coll" ONCLICK="toggle(this,'i:HasUnion')" ALT="show/hide"
+> Instances</TD
+></TR
+><TR
+><TD CLASS="body"
+><DIV ID="i:HasUnion" STYLE="display:block;"
+><TABLE CLASS="vanilla" CELLSPACING="1" CELLPADDING="0"
+><TR
+><TD CLASS="decl"
+><A HREF="Data-Monoid-Union.html#t%3AHasUnion"
+>HasUnion</A
+> <A HREF="/usr/local/share/doc/ghc/libraries/containers/Data-IntSet.html#t%3AIntSet"
+>IntSet</A
+></TD
+></TR
+><TR
+><TD CLASS="decl"
+><A HREF="/usr/local/share/doc/ghc/libraries/base/Data-Eq.html#t%3AEq"
+>Eq</A
+> a =&gt; <A HREF="Data-Monoid-Union.html#t%3AHasUnion"
+>HasUnion</A
+> ([] a)</TD
+></TR
+><TR
+><TD CLASS="decl"
+><A HREF="Data-Monoid-Union.html#t%3AHasUnion"
+>HasUnion</A
+> (<A HREF="/usr/local/share/doc/ghc/libraries/containers/Data-IntMap.html#t%3AIntMap"
+>IntMap</A
+> a)</TD
+></TR
+><TR
+><TD CLASS="decl"
+><A HREF="/usr/local/share/doc/ghc/libraries/base/Data-Ord.html#t%3AOrd"
+>Ord</A
+> a =&gt; <A HREF="Data-Monoid-Union.html#t%3AHasUnion"
+>HasUnion</A
+> (<A HREF="/usr/local/share/doc/ghc/libraries/containers/Data-Set.html#t%3ASet"
+>Set</A
+> a)</TD
+></TR
+><TR
+><TD CLASS="decl"
+><A HREF="/usr/local/share/doc/ghc/libraries/base/Data-Ord.html#t%3AOrd"
+>Ord</A
+> k =&gt; <A HREF="Data-Monoid-Union.html#t%3AHasUnion"
+>HasUnion</A
+> (<A HREF="/usr/local/share/doc/ghc/libraries/containers/Data-Map.html#t%3AMap"
+>Map</A
+> k a)</TD
+></TR
+></TABLE
+></DIV
+></TD
+></TR
+></TABLE
+></TD
+></TR
+><TR
+><TD CLASS="s15"
+></TD
+></TR
+><TR
+><TD CLASS="topdecl"
+><TABLE CLASS="declbar"
+><TR
+><TD CLASS="declname"
+><A NAME="v%3Aempty"
+></A
+><B
+>empty</B
+> :: <A HREF="Data-Monoid-Union.html#t%3AHasUnion"
+>HasUnion</A
+> f =&gt; f</TD
+><TD CLASS="declbut"
+><A HREF="src/Data-Monoid-Union.html#empty"
+>Source</A
+></TD
+></TR
+></TABLE
+></TD
+></TR
+><TR
+><TD CLASS="s15"
+></TD
+></TR
+><TR
+><TD CLASS="topdecl"
+><TABLE CLASS="declbar"
+><TR
+><TD CLASS="declname"
+><A NAME="v%3Aunion"
+></A
+><B
+>union</B
+> :: <A HREF="Data-Monoid-Union.html#t%3AHasUnion"
+>HasUnion</A
+> f =&gt; f -&gt; f -&gt; f</TD
+><TD CLASS="declbut"
+><A HREF="src/Data-Monoid-Union.html#union"
+>Source</A
+></TD
+></TR
+></TABLE
+></TD
+></TR
+><TR
+><TD CLASS="s15"
+></TD
+></TR
+><TR
+><TD CLASS="topdecl"
+><TABLE CLASS="declbar"
+><TR
+><TD CLASS="declname"
+><SPAN CLASS="keyword"
+>newtype</SPAN
+>  <A NAME="t%3AUnion"
+></A
+><B
+>Union</B
+> f </TD
+><TD CLASS="declbut"
+><A HREF="src/Data-Monoid-Union.html#Union"
+>Source</A
+></TD
+></TR
+></TABLE
+></TD
+></TR
+><TR
+><TD CLASS="body"
+><TABLE CLASS="vanilla" CELLSPACING="0" CELLPADDING="0"
+><TR
+><TD CLASS="ndoc"
+>The <TT
+><A HREF="/usr/local/share/doc/ghc/libraries/base/Data-Monoid.html#t%3AMonoid"
+>Monoid</A
+></TT
+> <TT
+>(<TT
+><A HREF="Data-Monoid-Union.html#v%3Aunion"
+>union</A
+></TT
+>,<TT
+><A HREF="Data-Monoid-Union.html#v%3Aempty"
+>empty</A
+></TT
+>)</TT
+>
+</TD
+></TR
+><TR
+><TD CLASS="section4"
+>Constructors</TD
+></TR
+><TR
+><TD CLASS="body"
+><TABLE CLASS="vanilla" CELLSPACING="5" CELLPADDING="0"
+><TR
+><TD CLASS="arg"
+><A NAME="v%3AUnion"
+></A
+><B
+>Union</B
+></TD
+><TD CLASS="rdoc"
+></TD
+></TR
+><TR
+><TD CLASS="body" COLSPAN="2"
+><TABLE CLASS="vanilla" CELLSPACING="1" CELLPADDING="0"
+><TR
+><TD CLASS="arg"
+><A NAME="v%3AgetUnion"
+></A
+><B
+>getUnion</B
+> :: f</TD
+><TD CLASS="rdoc"
+></TD
+></TR
+></TABLE
+></TD
+></TR
+></TABLE
+></TD
+></TR
+><TR
+><TD CLASS="section4"
+><IMG SRC="minus.gif" CLASS="coll" ONCLICK="toggle(this,'i:Union')" ALT="show/hide"
+> Instances</TD
+></TR
+><TR
+><TD CLASS="body"
+><DIV ID="i:Union" STYLE="display:block;"
+><TABLE CLASS="vanilla" CELLSPACING="1" CELLPADDING="0"
+><TR
+><TD CLASS="decl"
+><A HREF="/usr/local/share/doc/ghc/libraries/base/Control-Monad.html#t%3AFunctor"
+>Functor</A
+> <A HREF="Data-Monoid-Union.html#t%3AUnion"
+>Union</A
+></TD
+></TR
+><TR
+><TD CLASS="decl"
+>Pointed <A HREF="Data-Monoid-Union.html#t%3AUnion"
+>Union</A
+></TD
+></TR
+><TR
+><TD CLASS="decl"
+>Copointed <A HREF="Data-Monoid-Union.html#t%3AUnion"
+>Union</A
+></TD
+></TR
+><TR
+><TD CLASS="decl"
+><A HREF="Data-Monoid-Union.html#t%3AHasUnion"
+>HasUnion</A
+> f =&gt; <A HREF="Data-Monoid-Reducer.html#t%3AReducer"
+>Reducer</A
+> f (<A HREF="Data-Monoid-Union.html#t%3AUnion"
+>Union</A
+> f)</TD
+></TR
+><TR
+><TD CLASS="decl"
+><A HREF="/usr/local/share/doc/ghc/libraries/base/Data-Eq.html#t%3AEq"
+>Eq</A
+> f =&gt; <A HREF="/usr/local/share/doc/ghc/libraries/base/Data-Eq.html#t%3AEq"
+>Eq</A
+> (<A HREF="Data-Monoid-Union.html#t%3AUnion"
+>Union</A
+> f)</TD
+></TR
+><TR
+><TD CLASS="decl"
+><A HREF="/usr/local/share/doc/ghc/libraries/base/Data-Ord.html#t%3AOrd"
+>Ord</A
+> f =&gt; <A HREF="/usr/local/share/doc/ghc/libraries/base/Data-Ord.html#t%3AOrd"
+>Ord</A
+> (<A HREF="Data-Monoid-Union.html#t%3AUnion"
+>Union</A
+> f)</TD
+></TR
+><TR
+><TD CLASS="decl"
+><A HREF="/usr/local/share/doc/ghc/libraries/base/Text-Read.html#t%3ARead"
+>Read</A
+> f =&gt; <A HREF="/usr/local/share/doc/ghc/libraries/base/Text-Read.html#t%3ARead"
+>Read</A
+> (<A HREF="Data-Monoid-Union.html#t%3AUnion"
+>Union</A
+> f)</TD
+></TR
+><TR
+><TD CLASS="decl"
+><A HREF="/usr/local/share/doc/ghc/libraries/base/Text-Show.html#t%3AShow"
+>Show</A
+> f =&gt; <A HREF="/usr/local/share/doc/ghc/libraries/base/Text-Show.html#t%3AShow"
+>Show</A
+> (<A HREF="Data-Monoid-Union.html#t%3AUnion"
+>Union</A
+> f)</TD
+></TR
+><TR
+><TD CLASS="decl"
+><A HREF="Data-Monoid-Union.html#t%3AHasUnion"
+>HasUnion</A
+> f =&gt; <A HREF="/usr/local/share/doc/ghc/libraries/base/Data-Monoid.html#t%3AMonoid"
+>Monoid</A
+> (<A HREF="Data-Monoid-Union.html#t%3AUnion"
+>Union</A
+> f)</TD
+></TR
+></TABLE
+></DIV
+></TD
+></TR
+></TABLE
+></TD
+></TR
+><TR
+><TD CLASS="s15"
+></TD
+></TR
+><TR
+><TD CLASS="section1"
+><A NAME="2"
+>Unions of Containers of Monoids
+</A
+></TD
+></TR
+><TR
+><TD CLASS="s15"
+></TD
+></TR
+><TR
+><TD CLASS="topdecl"
+><TABLE CLASS="declbar"
+><TR
+><TD CLASS="declname"
+><SPAN CLASS="keyword"
+>class</SPAN
+>  <A NAME="t%3AHasUnionWith"
+></A
+><B
+>HasUnionWith</B
+> f  <SPAN CLASS="keyword"
+>where</SPAN
+></TD
+><TD CLASS="declbut"
+><A HREF="src/Data-Monoid-Union.html#HasUnionWith"
+>Source</A
+></TD
+></TR
+></TABLE
+></TD
+></TR
+><TR
+><TD CLASS="body"
+><TABLE CLASS="vanilla" CELLSPACING="0" CELLPADDING="0"
+><TR
+><TD CLASS="ndoc"
+>Polymorphic containers that we can supply an operation to handle unions with
+</TD
+></TR
+><TR
+><TD CLASS="s8"
+></TD
+></TR
+><TR
+><TD CLASS="section4"
+>Methods</TD
+></TR
+><TR
+><TD CLASS="body"
+><TABLE CLASS="vanilla" CELLSPACING="0" CELLPADDING="0"
+><TR
+><TD CLASS="topdecl"
+><TABLE CLASS="declbar"
+><TR
+><TD CLASS="declname"
+><A NAME="v%3AunionWith"
+></A
+><B
+>unionWith</B
+> ::  (a -&gt; a -&gt; a) -&gt; f a -&gt; f a -&gt; f a</TD
+><TD CLASS="declbut"
+><A HREF="src/Data-Monoid-Union.html#unionWith"
+>Source</A
+></TD
+></TR
+></TABLE
+></TD
+></TR
+><TR
+><TD CLASS="s8"
+></TD
+></TR
+><TR
+><TD CLASS="topdecl"
+><TABLE CLASS="declbar"
+><TR
+><TD CLASS="declname"
+><A NAME="v%3AemptyWith"
+></A
+><B
+>emptyWith</B
+> ::  f a</TD
+><TD CLASS="declbut"
+><A HREF="src/Data-Monoid-Union.html#emptyWith"
+>Source</A
+></TD
+></TR
+></TABLE
+></TD
+></TR
+></TABLE
+></TD
+></TR
+><TR
+><TD CLASS="s8"
+></TD
+></TR
+><TR
+><TD CLASS="section4"
+><IMG SRC="minus.gif" CLASS="coll" ONCLICK="toggle(this,'i:HasUnionWith')" ALT="show/hide"
+> Instances</TD
+></TR
+><TR
+><TD CLASS="body"
+><DIV ID="i:HasUnionWith" STYLE="display:block;"
+><TABLE CLASS="vanilla" CELLSPACING="1" CELLPADDING="0"
+><TR
+><TD CLASS="decl"
+><A HREF="Data-Monoid-Union.html#t%3AHasUnionWith"
+>HasUnionWith</A
+> <A HREF="/usr/local/share/doc/ghc/libraries/containers/Data-IntMap.html#t%3AIntMap"
+>IntMap</A
+></TD
+></TR
+><TR
+><TD CLASS="decl"
+><A HREF="/usr/local/share/doc/ghc/libraries/base/Data-Ord.html#t%3AOrd"
+>Ord</A
+> k =&gt; <A HREF="Data-Monoid-Union.html#t%3AHasUnionWith"
+>HasUnionWith</A
+> (<A HREF="/usr/local/share/doc/ghc/libraries/containers/Data-Map.html#t%3AMap"
+>Map</A
+> k)</TD
+></TR
+></TABLE
+></DIV
+></TD
+></TR
+></TABLE
+></TD
+></TR
+><TR
+><TD CLASS="s15"
+></TD
+></TR
+><TR
+><TD CLASS="topdecl"
+><TABLE CLASS="declbar"
+><TR
+><TD CLASS="declname"
+><A NAME="v%3AemptyWith"
+></A
+><B
+>emptyWith</B
+> :: <A HREF="Data-Monoid-Union.html#t%3AHasUnionWith"
+>HasUnionWith</A
+> f =&gt; f a</TD
+><TD CLASS="declbut"
+><A HREF="src/Data-Monoid-Union.html#emptyWith"
+>Source</A
+></TD
+></TR
+></TABLE
+></TD
+></TR
+><TR
+><TD CLASS="s15"
+></TD
+></TR
+><TR
+><TD CLASS="topdecl"
+><TABLE CLASS="declbar"
+><TR
+><TD CLASS="declname"
+><A NAME="v%3AunionWith"
+></A
+><B
+>unionWith</B
+> :: <A HREF="Data-Monoid-Union.html#t%3AHasUnionWith"
+>HasUnionWith</A
+> f =&gt; (a -&gt; a -&gt; a) -&gt; f a -&gt; f a -&gt; f a</TD
+><TD CLASS="declbut"
+><A HREF="src/Data-Monoid-Union.html#unionWith"
+>Source</A
+></TD
+></TR
+></TABLE
+></TD
+></TR
+><TR
+><TD CLASS="s15"
+></TD
+></TR
+><TR
+><TD CLASS="topdecl"
+><TABLE CLASS="declbar"
+><TR
+><TD CLASS="declname"
+><SPAN CLASS="keyword"
+>newtype</SPAN
+>  <A NAME="t%3AUnionWith"
+></A
+><B
+>UnionWith</B
+> f m </TD
+><TD CLASS="declbut"
+><A HREF="src/Data-Monoid-Union.html#UnionWith"
+>Source</A
+></TD
+></TR
+></TABLE
+></TD
+></TR
+><TR
+><TD CLASS="body"
+><TABLE CLASS="vanilla" CELLSPACING="0" CELLPADDING="0"
+><TR
+><TD CLASS="ndoc"
+>The <TT
+><A HREF="/usr/local/share/doc/ghc/libraries/base/Data-Monoid.html#t%3AMonoid"
+>Monoid</A
+></TT
+> <TT
+>('unionWith mappend',<TT
+><A HREF="Data-Monoid-Union.html#v%3Aempty"
+>empty</A
+></TT
+>)</TT
+> for containers full of monoids.
+</TD
+></TR
+><TR
+><TD CLASS="section4"
+>Constructors</TD
+></TR
+><TR
+><TD CLASS="body"
+><TABLE CLASS="vanilla" CELLSPACING="5" CELLPADDING="0"
+><TR
+><TD CLASS="arg"
+><A NAME="v%3AUnionWith"
+></A
+><B
+>UnionWith</B
+></TD
+><TD CLASS="rdoc"
+></TD
+></TR
+><TR
+><TD CLASS="body" COLSPAN="2"
+><TABLE CLASS="vanilla" CELLSPACING="1" CELLPADDING="0"
+><TR
+><TD CLASS="arg"
+><A NAME="v%3AgetUnionWith"
+></A
+><B
+>getUnionWith</B
+> :: f m</TD
+><TD CLASS="rdoc"
+></TD
+></TR
+></TABLE
+></TD
+></TR
+></TABLE
+></TD
+></TR
+><TR
+><TD CLASS="section4"
+><IMG SRC="minus.gif" CLASS="coll" ONCLICK="toggle(this,'i:UnionWith')" ALT="show/hide"
+> Instances</TD
+></TR
+><TR
+><TD CLASS="body"
+><DIV ID="i:UnionWith" STYLE="display:block;"
+><TABLE CLASS="vanilla" CELLSPACING="1" CELLPADDING="0"
+><TR
+><TD CLASS="decl"
+><A HREF="/usr/local/share/doc/ghc/libraries/base/Control-Monad.html#t%3AMonad"
+>Monad</A
+> f =&gt; <A HREF="/usr/local/share/doc/ghc/libraries/base/Control-Monad.html#t%3AMonad"
+>Monad</A
+> (<A HREF="Data-Monoid-Union.html#t%3AUnionWith"
+>UnionWith</A
+> f)</TD
+></TR
+><TR
+><TD CLASS="decl"
+><A HREF="/usr/local/share/doc/ghc/libraries/base/Control-Monad.html#t%3AFunctor"
+>Functor</A
+> f =&gt; <A HREF="/usr/local/share/doc/ghc/libraries/base/Control-Monad.html#t%3AFunctor"
+>Functor</A
+> (<A HREF="Data-Monoid-Union.html#t%3AUnionWith"
+>UnionWith</A
+> f)</TD
+></TR
+><TR
+><TD CLASS="decl"
+>Pointed f =&gt; Pointed (<A HREF="Data-Monoid-Union.html#t%3AUnionWith"
+>UnionWith</A
+> f)</TD
+></TR
+><TR
+><TD CLASS="decl"
+>(<A HREF="Data-Monoid-Union.html#t%3AHasUnionWith"
+>HasUnionWith</A
+> f, <A HREF="/usr/local/share/doc/ghc/libraries/base/Data-Monoid.html#t%3AMonoid"
+>Monoid</A
+> m) =&gt; <A HREF="Data-Monoid-Reducer.html#t%3AReducer"
+>Reducer</A
+> (f m) (<A HREF="Data-Monoid-Union.html#t%3AUnionWith"
+>UnionWith</A
+> f m)</TD
+></TR
+><TR
+><TD CLASS="decl"
+><A HREF="/usr/local/share/doc/ghc/libraries/base/Data-Eq.html#t%3AEq"
+>Eq</A
+> (f m) =&gt; <A HREF="/usr/local/share/doc/ghc/libraries/base/Data-Eq.html#t%3AEq"
+>Eq</A
+> (<A HREF="Data-Monoid-Union.html#t%3AUnionWith"
+>UnionWith</A
+> f m)</TD
+></TR
+><TR
+><TD CLASS="decl"
+><A HREF="/usr/local/share/doc/ghc/libraries/base/Data-Ord.html#t%3AOrd"
+>Ord</A
+> (f m) =&gt; <A HREF="/usr/local/share/doc/ghc/libraries/base/Data-Ord.html#t%3AOrd"
+>Ord</A
+> (<A HREF="Data-Monoid-Union.html#t%3AUnionWith"
+>UnionWith</A
+> f m)</TD
+></TR
+><TR
+><TD CLASS="decl"
+><A HREF="/usr/local/share/doc/ghc/libraries/base/Text-Read.html#t%3ARead"
+>Read</A
+> (f m) =&gt; <A HREF="/usr/local/share/doc/ghc/libraries/base/Text-Read.html#t%3ARead"
+>Read</A
+> (<A HREF="Data-Monoid-Union.html#t%3AUnionWith"
+>UnionWith</A
+> f m)</TD
+></TR
+><TR
+><TD CLASS="decl"
+><A HREF="/usr/local/share/doc/ghc/libraries/base/Text-Show.html#t%3AShow"
+>Show</A
+> (f m) =&gt; <A HREF="/usr/local/share/doc/ghc/libraries/base/Text-Show.html#t%3AShow"
+>Show</A
+> (<A HREF="Data-Monoid-Union.html#t%3AUnionWith"
+>UnionWith</A
+> f m)</TD
+></TR
+><TR
+><TD CLASS="decl"
+>(<A HREF="Data-Monoid-Union.html#t%3AHasUnionWith"
+>HasUnionWith</A
+> f, <A HREF="/usr/local/share/doc/ghc/libraries/base/Data-Monoid.html#t%3AMonoid"
+>Monoid</A
+> m) =&gt; <A HREF="/usr/local/share/doc/ghc/libraries/base/Data-Monoid.html#t%3AMonoid"
+>Monoid</A
+> (<A HREF="Data-Monoid-Union.html#t%3AUnionWith"
+>UnionWith</A
+> f m)</TD
+></TR
+></TABLE
+></DIV
+></TD
+></TR
+></TABLE
+></TD
+></TR
+><TR
+><TD CLASS="s15"
+></TD
+></TR
+><TR
+><TD CLASS="botbar"
+>Produced by <A HREF="http://www.haskell.org/haddock/"
+>Haddock</A
+> version 2.3.0</TD
+></TR
+></TABLE
+></BODY
+></HTML
+>
addfile ./dist/doc/html/monoids/Data-Ring-Boolean.html
hunk ./dist/doc/html/monoids/Data-Ring-Boolean.html 1
+<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd">
+<!--Rendered using the Haskell Html Library v0.2-->
+<HTML
+><HEAD
+><META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=UTF-8"
+><TITLE
+>Data.Ring.Boolean</TITLE
+><LINK HREF="haddock.css" REL="stylesheet" TYPE="text/css"
+><SCRIPT SRC="haddock-util.js" TYPE="text/javascript"
+></SCRIPT
+></HEAD
+><BODY
+><TABLE CLASS="vanilla" CELLSPACING="0" CELLPADDING="0"
+><TR
+><TD CLASS="topbar"
+><TABLE CLASS="vanilla" CELLSPACING="0" CELLPADDING="0"
+><TR
+><TD
+><IMG SRC="haskell_icon.gif" WIDTH="16" HEIGHT="16" ALT=" "
+></TD
+><TD CLASS="title"
+>monoids-0.1.6: Lots of Monoids</TD
+><TD CLASS="topbut"
+><A HREF="src/Data-Ring-Boolean.html"
+>Source code</A
+></TD
+><TD CLASS="topbut"
+><A HREF="index.html"
+>Contents</A
+></TD
+><TD CLASS="topbut"
+><A HREF="doc-index.html"
+>Index</A
+></TD
+></TR
+></TABLE
+></TD
+></TR
+><TR
+><TD CLASS="modulebar"
+><TABLE CLASS="vanilla" CELLSPACING="0" CELLPADDING="0"
+><TR
+><TD
+><FONT SIZE="6"
+>Data.Ring.Boolean</FONT
+></TD
+><TD ALIGN="right"
+><TABLE CLASS="narrow" CELLSPACING="0" CELLPADDING="0"
+><TR
+><TD CLASS="infohead"
+>Portability</TD
+><TD CLASS="infoval"
+>non-portable (MPTCs)</TD
+></TR
+><TR
+><TD CLASS="infohead"
+>Stability</TD
+><TD CLASS="infoval"
+>experimental</TD
+></TR
+><TR
+><TD CLASS="infohead"
+>Maintainer</TD
+><TD CLASS="infoval"
+>libraries@haskell.org</TD
+></TR
+></TABLE
+></TD
+></TR
+></TABLE
+></TD
+></TR
+><TR
+><TD CLASS="s15"
+></TD
+></TR
+><TR
+><TD CLASS="section1"
+>Description</TD
+></TR
+><TR
+><TD CLASS="doc"
+>A Boolean <TT
+><A HREF="Data-Ring.html#t%3ARing"
+>Ring</A
+></TT
+> over <TT
+><A HREF="/usr/local/share/doc/ghc/libraries/ghc-prim/GHC-Bool.html#t%3ABool"
+>Bool</A
+></TT
+>. Note well that the <TT
+><A HREF="/usr/local/share/doc/ghc/libraries/base/Data-Monoid.html#v%3Amappend"
+>mappend</A
+></TT
+> of this ring is
+ symmetric difference and not disjunction like you might expect. To get that 
+ you should use use <TT
+><A HREF="/usr/local/share/doc/ghc/libraries/base/Data-Ord.html#t%3AOrd"
+>Ord</A
+></TT
+> from <A HREF="Data-Ring-Semi-Ord-Order.html"
+>Data.Ring.Semi.Ord.Order</A
+> on <TT
+><A HREF="/usr/local/share/doc/ghc/libraries/ghc-prim/GHC-Bool.html#t%3ABool"
+>Bool</A
+></TT
+> to get the '&amp;&amp;'/'||'-based 
+ distributive-lattice <TT
+><A HREF="Data-Ring-Semi.html#t%3ASemiRing"
+>SemiRing</A
+></TT
+>
+</TD
+></TR
+><TR
+><TD CLASS="s15"
+></TD
+></TR
+><TR
+><TD CLASS="s15"
+></TD
+></TR
+><TR
+><TD CLASS="section1"
+>Documentation</TD
+></TR
+><TR
+><TD CLASS="s15"
+></TD
+></TR
+><TR
+><TD CLASS="decl"
+>module <A HREF="Data-Ring.html"
+>Data.Ring</A
+></TD
+></TR
+><TR
+><TD CLASS="s15"
+></TD
+></TR
+><TR
+><TD CLASS="topdecl"
+><TABLE CLASS="declbar"
+><TR
+><TD CLASS="declname"
+><SPAN CLASS="keyword"
+>newtype</SPAN
+>  <A NAME="t%3ABoolRing"
+></A
+><B
+>BoolRing</B
+>  </TD
+><TD CLASS="declbut"
+><A HREF="src/Data-Ring-Boolean.html#BoolRing"
+>Source</A
+></TD
+></TR
+></TABLE
+></TD
+></TR
+><TR
+><TD CLASS="body"
+><TABLE CLASS="vanilla" CELLSPACING="0" CELLPADDING="0"
+><TR
+><TD CLASS="section4"
+>Constructors</TD
+></TR
+><TR
+><TD CLASS="body"
+><TABLE CLASS="vanilla" CELLSPACING="5" CELLPADDING="0"
+><TR
+><TD CLASS="arg"
+><A NAME="v%3ABoolRing"
+></A
+><B
+>BoolRing</B
+></TD
+><TD CLASS="rdoc"
+></TD
+></TR
+><TR
+><TD CLASS="body" COLSPAN="2"
+><TABLE CLASS="vanilla" CELLSPACING="1" CELLPADDING="0"
+><TR
+><TD CLASS="arg"
+><A NAME="v%3AgetBoolRing"
+></A
+><B
+>getBoolRing</B
+> :: <A HREF="/usr/local/share/doc/ghc/libraries/ghc-prim/GHC-Bool.html#t%3ABool"
+>Bool</A
+></TD
+><TD CLASS="rdoc"
+></TD
+></TR
+></TABLE
+></TD
+></TR
+></TABLE
+></TD
+></TR
+><TR
+><TD CLASS="section4"
+><IMG SRC="minus.gif" CLASS="coll" ONCLICK="toggle(this,'i:BoolRing')" ALT="show/hide"
+> Instances</TD
+></TR
+><TR
+><TD CLASS="body"
+><DIV ID="i:BoolRing" STYLE="display:block;"
+><TABLE CLASS="vanilla" CELLSPACING="1" CELLPADDING="0"
+><TR
+><TD CLASS="decl"
+><A HREF="/usr/local/share/doc/ghc/libraries/base/Data-Eq.html#t%3AEq"
+>Eq</A
+> <A HREF="Data-Ring-Boolean.html#t%3ABoolRing"
+>BoolRing</A
+></TD
+></TR
+><TR
+><TD CLASS="decl"
+><A HREF="/usr/local/share/doc/ghc/libraries/base/Data-Ord.html#t%3AOrd"
+>Ord</A
+> <A HREF="Data-Ring-Boolean.html#t%3ABoolRing"
+>BoolRing</A
+></TD
+></TR
+><TR
+><TD CLASS="decl"
+><A HREF="/usr/local/share/doc/ghc/libraries/base/Text-Read.html#t%3ARead"
+>Read</A
+> <A HREF="Data-Ring-Boolean.html#t%3ABoolRing"
+>BoolRing</A
+></TD
+></TR
+><TR
+><TD CLASS="decl"
+><A HREF="/usr/local/share/doc/ghc/libraries/base/Text-Show.html#t%3AShow"
+>Show</A
+> <A HREF="Data-Ring-Boolean.html#t%3ABoolRing"
+>BoolRing</A
+></TD
+></TR
+><TR
+><TD CLASS="decl"
+><A HREF="/usr/local/share/doc/ghc/libraries/base/Data-Monoid.html#t%3AMonoid"
+>Monoid</A
+> <A HREF="Data-Ring-Boolean.html#t%3ABoolRing"
+>BoolRing</A
+></TD
+></TR
+><TR
+><TD CLASS="decl"
+><A HREF="Data-Monoid-Multiplicative.html#t%3AMultiplicative"
+>Multiplicative</A
+> <A HREF="Data-Ring-Boolean.html#t%3ABoolRing"
+>BoolRing</A
+></TD
+></TR
+><TR
+><TD CLASS="decl"
+><A HREF="Data-Ring-Semi-Near.html#t%3ALeftSemiNearRing"
+>LeftSemiNearRing</A
+> <A HREF="Data-Ring-Boolean.html#t%3ABoolRing"
+>BoolRing</A
+></TD
+></TR
+><TR
+><TD CLASS="decl"
+><A HREF="Data-Ring-Semi-Near.html#t%3ARightSemiNearRing"
+>RightSemiNearRing</A
+> <A HREF="Data-Ring-Boolean.html#t%3ABoolRing"
+>BoolRing</A
+></TD
+></TR
+><TR
+><TD CLASS="decl"
+><A HREF="Data-Ring-Semi.html#t%3ASemiRing"
+>SemiRing</A
+> <A HREF="Data-Ring-Boolean.html#t%3ABoolRing"
+>BoolRing</A
+></TD
+></TR
+><TR
+><TD CLASS="decl"
+><A HREF="Data-Group.html#t%3AGroup"
+>Group</A
+> <A HREF="Data-Ring-Boolean.html#t%3ABoolRing"
+>BoolRing</A
+></TD
+></TR
+><TR
+><TD CLASS="decl"
+><A HREF="Data-Ring.html#t%3ARing"
+>Ring</A
+> <A HREF="Data-Ring-Boolean.html#t%3ABoolRing"
+>BoolRing</A
+></TD
+></TR
+><TR
+><TD CLASS="decl"
+><A HREF="Data-Monoid-Reducer.html#t%3AReducer"
+>Reducer</A
+> <A HREF="/usr/local/share/doc/ghc/libraries/ghc-prim/GHC-Bool.html#t%3ABool"
+>Bool</A
+> <A HREF="Data-Ring-Boolean.html#t%3ABoolRing"
+>BoolRing</A
+></TD
+></TR
+></TABLE
+></DIV
+></TD
+></TR
+></TABLE
+></TD
+></TR
+><TR
+><TD CLASS="s15"
+></TD
+></TR
+><TR
+><TD CLASS="botbar"
+>Produced by <A HREF="http://www.haskell.org/haddock/"
+>Haddock</A
+> version 2.3.0</TD
+></TR
+></TABLE
+></BODY
+></HTML
+>
addfile ./dist/doc/html/monoids/Data-Ring-FromNum.html
hunk ./dist/doc/html/monoids/Data-Ring-FromNum.html 1
+<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd">
+<!--Rendered using the Haskell Html Library v0.2-->
+<HTML
+><HEAD
+><META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=UTF-8"
+><TITLE
+>Data.Ring.FromNum</TITLE
+><LINK HREF="haddock.css" REL="stylesheet" TYPE="text/css"
+><SCRIPT SRC="haddock-util.js" TYPE="text/javascript"
+></SCRIPT
+></HEAD
+><BODY
+><TABLE CLASS="vanilla" CELLSPACING="0" CELLPADDING="0"
+><TR
+><TD CLASS="topbar"
+><TABLE CLASS="vanilla" CELLSPACING="0" CELLPADDING="0"
+><TR
+><TD
+><IMG SRC="haskell_icon.gif" WIDTH="16" HEIGHT="16" ALT=" "
+></TD
+><TD CLASS="title"
+>monoids-0.1.6: Lots of Monoids</TD
+><TD CLASS="topbut"
+><A HREF="src/Data-Ring-FromNum.html"
+>Source code</A
+></TD
+><TD CLASS="topbut"
+><A HREF="index.html"
+>Contents</A
+></TD
+><TD CLASS="topbut"
+><A HREF="doc-index.html"
+>Index</A
+></TD
+></TR
+></TABLE
+></TD
+></TR
+><TR
+><TD CLASS="modulebar"
+><TABLE CLASS="vanilla" CELLSPACING="0" CELLPADDING="0"
+><TR
+><TD
+><FONT SIZE="6"
+>Data.Ring.FromNum</FONT
+></TD
+><TD ALIGN="right"
+><TABLE CLASS="narrow" CELLSPACING="0" CELLPADDING="0"
+><TR
+><TD CLASS="infohead"
+>Portability</TD
+><TD CLASS="infoval"
+>non-portable (MPTCs)</TD
+></TR
+><TR
+><TD CLASS="infohead"
+>Stability</TD
+><TD CLASS="infoval"
+>experimental</TD
+></TR
+><TR
+><TD CLASS="infohead"
+>Maintainer</TD
+><TD CLASS="infoval"
+>libraries@haskell.org</TD
+></TR
+></TABLE
+></TD
+></TR
+></TABLE
+></TD
+></TR
+><TR
+><TD CLASS="s15"
+></TD
+></TR
+><TR
+><TD CLASS="section1"
+>Description</TD
+></TR
+><TR
+><TD CLASS="doc"
+>A wrapper that lies for you and claims any instance of <TT
+><A HREF="/usr/local/share/doc/ghc/libraries/base/Prelude.html#t%3ANum"
+>Num</A
+></TT
+> is a <TT
+><A HREF="Data-Ring.html#t%3ARing"
+>Ring</A
+></TT
+>.
+ Who knows, for your type it might even be telling the truth!
+</TD
+></TR
+><TR
+><TD CLASS="s15"
+></TD
+></TR
+><TR
+><TD CLASS="s15"
+></TD
+></TR
+><TR
+><TD CLASS="section1"
+>Documentation</TD
+></TR
+><TR
+><TD CLASS="s15"
+></TD
+></TR
+><TR
+><TD CLASS="decl"
+>module <A HREF="Data-Ring.html"
+>Data.Ring</A
+></TD
+></TR
+><TR
+><TD CLASS="s15"
+></TD
+></TR
+><TR
+><TD CLASS="topdecl"
+><TABLE CLASS="declbar"
+><TR
+><TD CLASS="declname"
+><SPAN CLASS="keyword"
+>newtype</SPAN
+>  <A NAME="t%3AFromNum"
+></A
+><B
+>FromNum</B
+> a </TD
+><TD CLASS="declbut"
+><A HREF="src/Data-Ring-FromNum.html#FromNum"
+>Source</A
+></TD
+></TR
+></TABLE
+></TD
+></TR
+><TR
+><TD CLASS="body"
+><TABLE CLASS="vanilla" CELLSPACING="0" CELLPADDING="0"
+><TR
+><TD CLASS="section4"
+>Constructors</TD
+></TR
+><TR
+><TD CLASS="body"
+><TABLE CLASS="vanilla" CELLSPACING="5" CELLPADDING="0"
+><TR
+><TD CLASS="arg"
+><A NAME="v%3AFromNum"
+></A
+><B
+>FromNum</B
+></TD
+><TD CLASS="rdoc"
+></TD
+></TR
+><TR
+><TD CLASS="body" COLSPAN="2"
+><TABLE CLASS="vanilla" CELLSPACING="1" CELLPADDING="0"
+><TR
+><TD CLASS="arg"
+><A NAME="v%3AgetFromNum"
+></A
+><B
+>getFromNum</B
+> :: a</TD
+><TD CLASS="rdoc"
+></TD
+></TR
+></TABLE
+></TD
+></TR
+></TABLE
+></TD
+></TR
+><TR
+><TD CLASS="section4"
+><IMG SRC="minus.gif" CLASS="coll" ONCLICK="toggle(this,'i:FromNum')" ALT="show/hide"
+> Instances</TD
+></TR
+><TR
+><TD CLASS="body"
+><DIV ID="i:FromNum" STYLE="display:block;"
+><TABLE CLASS="vanilla" CELLSPACING="1" CELLPADDING="0"
+><TR
+><TD CLASS="decl"
+><A HREF="/usr/local/share/doc/ghc/libraries/base/Prelude.html#t%3ANum"
+>Num</A
+> a =&gt; <A HREF="Data-Monoid-Reducer.html#t%3AReducer"
+>Reducer</A
+> Integer (<A HREF="Data-Ring-FromNum.html#t%3AFromNum"
+>FromNum</A
+> a)</TD
+></TR
+><TR
+><TD CLASS="decl"
+><A HREF="/usr/local/share/doc/ghc/libraries/base/Data-Eq.html#t%3AEq"
+>Eq</A
+> a =&gt; <A HREF="/usr/local/share/doc/ghc/libraries/base/Data-Eq.html#t%3AEq"
+>Eq</A
+> (<A HREF="Data-Ring-FromNum.html#t%3AFromNum"
+>FromNum</A
+> a)</TD
+></TR
+><TR
+><TD CLASS="decl"
+><A HREF="/usr/local/share/doc/ghc/libraries/base/Prelude.html#t%3ANum"
+>Num</A
+> a =&gt; <A HREF="/usr/local/share/doc/ghc/libraries/base/Prelude.html#t%3ANum"
+>Num</A
+> (<A HREF="Data-Ring-FromNum.html#t%3AFromNum"
+>FromNum</A
+> a)</TD
+></TR
+><TR
+><TD CLASS="decl"
+><A HREF="/usr/local/share/doc/ghc/libraries/base/Text-Show.html#t%3AShow"
+>Show</A
+> a =&gt; <A HREF="/usr/local/share/doc/ghc/libraries/base/Text-Show.html#t%3AShow"
+>Show</A
+> (<A HREF="Data-Ring-FromNum.html#t%3AFromNum"
+>FromNum</A
+> a)</TD
+></TR
+><TR
+><TD CLASS="decl"
+><A HREF="/usr/local/share/doc/ghc/libraries/base/Prelude.html#t%3ANum"
+>Num</A
+> a =&gt; <A HREF="/usr/local/share/doc/ghc/libraries/base/Data-Monoid.html#t%3AMonoid"
+>Monoid</A
+> (<A HREF="Data-Ring-FromNum.html#t%3AFromNum"
+>FromNum</A
+> a)</TD
+></TR
+><TR
+><TD CLASS="decl"
+><A HREF="/usr/local/share/doc/ghc/libraries/base/Prelude.html#t%3ANum"
+>Num</A
+> a =&gt; <A HREF="Data-Monoid-Multiplicative.html#t%3AMultiplicative"
+>Multiplicative</A
+> (<A HREF="Data-Ring-FromNum.html#t%3AFromNum"
+>FromNum</A
+> a)</TD
+></TR
+><TR
+><TD CLASS="decl"
+><A HREF="/usr/local/share/doc/ghc/libraries/base/Prelude.html#t%3ANum"
+>Num</A
+> a =&gt; <A HREF="Data-Ring-Semi-Near.html#t%3ALeftSemiNearRing"
+>LeftSemiNearRing</A
+> (<A HREF="Data-Ring-FromNum.html#t%3AFromNum"
+>FromNum</A
+> a)</TD
+></TR
+><TR
+><TD CLASS="decl"
+><A HREF="/usr/local/share/doc/ghc/libraries/base/Prelude.html#t%3ANum"
+>Num</A
+> a =&gt; <A HREF="Data-Ring-Semi-Near.html#t%3ARightSemiNearRing"
+>RightSemiNearRing</A
+> (<A HREF="Data-Ring-FromNum.html#t%3AFromNum"
+>FromNum</A
+> a)</TD
+></TR
+><TR
+><TD CLASS="decl"
+><A HREF="/usr/local/share/doc/ghc/libraries/base/Prelude.html#t%3ANum"
+>Num</A
+> a =&gt; <A HREF="Data-Ring-Semi.html#t%3ASemiRing"
+>SemiRing</A
+> (<A HREF="Data-Ring-FromNum.html#t%3AFromNum"
+>FromNum</A
+> a)</TD
+></TR
+><TR
+><TD CLASS="decl"
+><A HREF="/usr/local/share/doc/ghc/libraries/base/Prelude.html#t%3ANum"
+>Num</A
+> a =&gt; <A HREF="Data-Group.html#t%3AGroup"
+>Group</A
+> (<A HREF="Data-Ring-FromNum.html#t%3AFromNum"
+>FromNum</A
+> a)</TD
+></TR
+><TR
+><TD CLASS="decl"
+><A HREF="/usr/local/share/doc/ghc/libraries/base/Prelude.html#t%3ANum"
+>Num</A
+> a =&gt; <A HREF="Data-Ring.html#t%3ARing"
+>Ring</A
+> (<A HREF="Data-Ring-FromNum.html#t%3AFromNum"
+>FromNum</A
+> a)</TD
+></TR
+></TABLE
+></DIV
+></TD
+></TR
+></TABLE
+></TD
+></TR
+><TR
+><TD CLASS="s15"
+></TD
+></TR
+><TR
+><TD CLASS="botbar"
+>Produced by <A HREF="http://www.haskell.org/haddock/"
+>Haddock</A
+> version 2.3.0</TD
+></TR
+></TABLE
+></BODY
+></HTML
+>
addfile ./dist/doc/html/monoids/Data-Ring-Semi-Near.html
hunk ./dist/doc/html/monoids/Data-Ring-Semi-Near.html 1
+<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd">
+<!--Rendered using the Haskell Html Library v0.2-->
+<HTML
+><HEAD
+><META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=UTF-8"
+><TITLE
+>Data.Ring.Semi.Near</TITLE
+><LINK HREF="haddock.css" REL="stylesheet" TYPE="text/css"
+><SCRIPT SRC="haddock-util.js" TYPE="text/javascript"
+></SCRIPT
+></HEAD
+><BODY
+><TABLE CLASS="vanilla" CELLSPACING="0" CELLPADDING="0"
+><TR
+><TD CLASS="topbar"
+><TABLE CLASS="vanilla" CELLSPACING="0" CELLPADDING="0"
+><TR
+><TD
+><IMG SRC="haskell_icon.gif" WIDTH="16" HEIGHT="16" ALT=" "
+></TD
+><TD CLASS="title"
+>monoids-0.1.6: Lots of Monoids</TD
+><TD CLASS="topbut"
+><A HREF="src/Data-Ring-Semi-Near.html"
+>Source code</A
+></TD
+><TD CLASS="topbut"
+><A HREF="index.html"
+>Contents</A
+></TD
+><TD CLASS="topbut"
+><A HREF="doc-index.html"
+>Index</A
+></TD
+></TR
+></TABLE
+></TD
+></TR
+><TR
+><TD CLASS="modulebar"
+><TABLE CLASS="vanilla" CELLSPACING="0" CELLPADDING="0"
+><TR
+><TD
+><FONT SIZE="6"
+>Data.Ring.Semi.Near</FONT
+></TD
+><TD ALIGN="right"
+><TABLE CLASS="narrow" CELLSPACING="0" CELLPADDING="0"
+><TR
+><TD CLASS="infohead"
+>Portability</TD
+><TD CLASS="infoval"
+>portable (instances use MPTCs)</TD
+></TR
+><TR
+><TD CLASS="infohead"
+>Stability</TD
+><TD CLASS="infoval"
+>experimental</TD
+></TR
+><TR
+><TD CLASS="infohead"
+>Maintainer</TD
+><TD CLASS="infoval"
+>libraries@haskell.org</TD
+></TR
+></TABLE
+></TD
+></TR
+></TABLE
+></TD
+></TR
+><TR
+><TD CLASS="s15"
+></TD
+></TR
+><TR
+><TD CLASS="section1"
+>Description</TD
+></TR
+><TR
+><TD CLASS="doc"
+><P
+>Defines left- and right- seminearrings. Every <TT
+><A HREF="/usr/local/share/doc/ghc/libraries/base/Control-Monad.html#t%3AMonadPlus"
+>MonadPlus</A
+></TT
+> wrapped around
+ a <TT
+><A HREF="/usr/local/share/doc/ghc/libraries/base/Data-Monoid.html#t%3AMonoid"
+>Monoid</A
+></TT
+> qualifies due to the distributivity of (&gt;&gt;=) over <TT
+><A HREF="/usr/local/share/doc/ghc/libraries/base/Control-Monad.html#v%3Amplus"
+>mplus</A
+></TT
+>.
+</P
+><P
+>See <A HREF="http://conway.rutgers.edu/~ccshan/wiki/blog/posts/WordNumbers1/"
+>http://conway.rutgers.edu/~ccshan/wiki/blog/posts/WordNumbers1/</A
+>
+</P
+></TD
+></TR
+><TR
+><TD CLASS="s15"
+></TD
+></TR
+><TR
+><TD CLASS="section1"
+>Synopsis</TD
+></TR
+><TR
+><TD CLASS="s15"
+></TD
+></TR
+><TR
+><TD CLASS="body"
+><TABLE CLASS="vanilla" CELLSPACING="0" CELLPADDING="0"
+><TR
+><TD CLASS="decl"
+>module <A HREF="Data-Monoid-Multiplicative.html"
+>Data.Monoid.Multiplicative</A
+></TD
+></TR
+><TR
+><TD CLASS="s8"
+></TD
+></TR
+><TR
+><TD CLASS="decl"
+><SPAN CLASS="keyword"
+>class</SPAN
+> (<A HREF="Data-Monoid-Multiplicative.html#t%3AMultiplicative"
+>Multiplicative</A
+> m, <A HREF="/usr/local/share/doc/ghc/libraries/base/Data-Monoid.html#t%3AMonoid"
+>Monoid</A
+> m) =&gt; <A HREF="#t%3ALeftSemiNearRing"
+>LeftSemiNearRing</A
+> m </TD
+></TR
+><TR
+><TD CLASS="s8"
+></TD
+></TR
+><TR
+><TD CLASS="decl"
+><SPAN CLASS="keyword"
+>class</SPAN
+> (<A HREF="Data-Monoid-Multiplicative.html#t%3AMultiplicative"
+>Multiplicative</A
+> m, <A HREF="/usr/local/share/doc/ghc/libraries/base/Data-Monoid.html#t%3AMonoid"
+>Monoid</A
+> m) =&gt; <A HREF="#t%3ARightSemiNearRing"
+>RightSemiNearRing</A
+> m </TD
+></TR
+></TABLE
+></TD
+></TR
+><TR
+><TD CLASS="s15"
+></TD
+></TR
+><TR
+><TD CLASS="section1"
+>Documentation</TD
+></TR
+><TR
+><TD CLASS="s15"
+></TD
+></TR
+><TR
+><TD CLASS="decl"
+>module <A HREF="Data-Monoid-Multiplicative.html"
+>Data.Monoid.Multiplicative</A
+></TD
+></TR
+><TR
+><TD CLASS="s15"
+></TD
+></TR
+><TR
+><TD CLASS="topdecl"
+><TABLE CLASS="declbar"
+><TR
+><TD CLASS="declname"
+><SPAN CLASS="keyword"
+>class</SPAN
+> (<A HREF="Data-Monoid-Multiplicative.html#t%3AMultiplicative"
+>Multiplicative</A
+> m, <A HREF="/usr/local/share/doc/ghc/libraries/base/Data-Monoid.html#t%3AMonoid"
+>Monoid</A
+> m) =&gt; <A NAME="t%3ALeftSemiNearRing"
+></A
+><B
+>LeftSemiNearRing</B
+> m </TD
+><TD CLASS="declbut"
+><A HREF="src/Data-Ring-Semi-Near.html#LeftSemiNearRing"
+>Source</A
+></TD
+></TR
+></TABLE
+></TD
+></TR
+><TR
+><TD CLASS="body"
+><TABLE CLASS="vanilla" CELLSPACING="0" CELLPADDING="0"
+><TR
+><TD CLASS="ndoc"
+><PRE
+>a * (b + c) = (a * b) + (a * c)</PRE
+></TD
+></TR
+><TR
+><TD CLASS="s8"
+></TD
+></TR
+><TR
+><TD CLASS="section4"
+><IMG SRC="minus.gif" CLASS="coll" ONCLICK="toggle(this,'i:LeftSemiNearRing')" ALT="show/hide"
+> Instances</TD
+></TR
+><TR
+><TD CLASS="body"
+><DIV ID="i:LeftSemiNearRing" STYLE="display:block;"
+><TABLE CLASS="vanilla" CELLSPACING="1" CELLPADDING="0"
+><TR
+><TD CLASS="decl"
+><A HREF="Data-Ring-Semi-Near.html#t%3ALeftSemiNearRing"
+>LeftSemiNearRing</A
+> <A HREF="Data-Ring-Boolean.html#t%3ABoolRing"
+>BoolRing</A
+></TD
+></TR
+><TR
+><TD CLASS="decl"
+><A HREF="/usr/local/share/doc/ghc/libraries/base/Data-Monoid.html#t%3AMonoid"
+>Monoid</A
+> m =&gt; <A HREF="Data-Ring-Semi-Near.html#t%3ALeftSemiNearRing"
+>LeftSemiNearRing</A
+> ([] m)</TD
+></TR
+><TR
+><TD CLASS="decl"
+><A HREF="/usr/local/share/doc/ghc/libraries/base/Data-Monoid.html#t%3AMonoid"
+>Monoid</A
+> m =&gt; <A HREF="Data-Ring-Semi-Near.html#t%3ALeftSemiNearRing"
+>LeftSemiNearRing</A
+> (<A HREF="/usr/local/share/doc/ghc/libraries/base/Data-Maybe.html#t%3AMaybe"
+>Maybe</A
+> m)</TD
+></TR
+><TR
+><TD CLASS="decl"
+><A HREF="/usr/local/share/doc/ghc/libraries/base/Data-Monoid.html#t%3AMonoid"
+>Monoid</A
+> m =&gt; <A HREF="Data-Ring-Semi-Near.html#t%3ALeftSemiNearRing"
+>LeftSemiNearRing</A
+> (<A HREF="/usr/local/share/doc/ghc/libraries/containers/Data-Sequence.html#t%3ASeq"
+>Seq</A
+> m)</TD
+></TR
+><TR
+><TD CLASS="decl"
+><A HREF="Data-Ring-Semi-Near.html#t%3ALeftSemiNearRing"
+>LeftSemiNearRing</A
+> m =&gt; <A HREF="Data-Ring-Semi-Near.html#t%3ALeftSemiNearRing"
+>LeftSemiNearRing</A
+> (<A HREF="Data-Monoid-Self.html#t%3ASelf"
+>Self</A
+> m)</TD
+></TR
+><TR
+><TD CLASS="decl"
+><A HREF="Data-Ring-Semi-Near.html#t%3ALeftSemiNearRing"
+>LeftSemiNearRing</A
+> m =&gt; <A HREF="Data-Ring-Semi-Near.html#t%3ALeftSemiNearRing"
+>LeftSemiNearRing</A
+> (<A HREF="Data-Monoid-FromString.html#t%3AFromString"
+>FromString</A
+> m)</TD
+></TR
+><TR
+><TD CLASS="decl"
+>(<A HREF="/usr/local/share/doc/ghc/libraries/base/Data-Ord.html#t%3AOrd"
+>Ord</A
+> a, <A HREF="/usr/local/share/doc/ghc/libraries/base/Prelude.html#t%3ANum"
+>Num</A
+> a) =&gt; <A HREF="Data-Ring-Semi-Near.html#t%3ALeftSemiNearRing"
+>LeftSemiNearRing</A
+> (<A HREF="Data-Ring-Semi-Tropical.html#t%3ATropical"
+>Tropical</A
+> a)</TD
+></TR
+><TR
+><TD CLASS="decl"
+><A HREF="/usr/local/share/doc/ghc/libraries/base/Data-Ord.html#t%3AOrd"
+>Ord</A
+> a =&gt; <A HREF="Data-Ring-Semi-Near.html#t%3ALeftSemiNearRing"
+>LeftSemiNearRing</A
+> (<A HREF="Data-Ring-Semi-Ord.html#t%3APriority"
+>Priority</A
+> a)</TD
+></TR
+><TR
+><TD CLASS="decl"
+>(<A HREF="/usr/local/share/doc/ghc/libraries/base/Prelude.html#t%3ABounded"
+>Bounded</A
+> a, <A HREF="/usr/local/share/doc/ghc/libraries/base/Data-Ord.html#t%3AOrd"
+>Ord</A
+> a) =&gt; <A HREF="Data-Ring-Semi-Near.html#t%3ALeftSemiNearRing"
+>LeftSemiNearRing</A
+> (<A HREF="Data-Ring-Semi-Ord.html#t%3AOrder"
+>Order</A
+> a)</TD
+></TR
+><TR
+><TD CLASS="decl"
+><A HREF="/usr/local/share/doc/ghc/libraries/base/Prelude.html#t%3ANum"
+>Num</A
+> a =&gt; <A HREF="Data-Ring-Semi-Near.html#t%3ALeftSemiNearRing"
+>LeftSemiNearRing</A
+> (<A HREF="Data-Ring-FromNum.html#t%3AFromNum"
+>FromNum</A
+> a)</TD
+></TR
+><TR
+><TD CLASS="decl"
+>(Measured v m, <A HREF="/usr/local/share/doc/ghc/libraries/base/Data-Monoid.html#t%3AMonoid"
+>Monoid</A
+> m) =&gt; <A HREF="Data-Ring-Semi-Near.html#t%3ALeftSemiNearRing"
+>LeftSemiNearRing</A
+> (FingerTree v m)</TD
+></TR
+><TR
+><TD CLASS="decl"
+>(<A HREF="/usr/local/share/doc/ghc/libraries/base/Control-Applicative.html#t%3AAlternative"
+>Alternative</A
+> f, <A HREF="/usr/local/share/doc/ghc/libraries/base/Data-Monoid.html#t%3AMonoid"
+>Monoid</A
+> a) =&gt; <A HREF="Data-Ring-Semi-Near.html#t%3ALeftSemiNearRing"
+>LeftSemiNearRing</A
+> (<A HREF="Data-Monoid-Applicative.html#t%3AWrappedApplicative"
+>WrappedApplicative</A
+> f a)</TD
+></TR
+><TR
+><TD CLASS="decl"
+>(<A HREF="/usr/local/share/doc/ghc/libraries/base/Control-Monad.html#t%3AMonadPlus"
+>MonadPlus</A
+> m, <A HREF="/usr/local/share/doc/ghc/libraries/base/Data-Monoid.html#t%3AMonoid"
+>Monoid</A
+> a) =&gt; <A HREF="Data-Ring-Semi-Near.html#t%3ALeftSemiNearRing"
+>LeftSemiNearRing</A
+> (<A HREF="Data-Monoid-Monad.html#t%3AWrappedMonad"
+>WrappedMonad</A
+> m a)</TD
+></TR
+><TR
+><TD CLASS="decl"
+>(<A HREF="/usr/local/share/doc/ghc/libraries/base/Control-Monad.html#t%3AMonadPlus"
+>MonadPlus</A
+> m, <A HREF="/usr/local/share/doc/ghc/libraries/base/Data-Monoid.html#t%3AMonoid"
+>Monoid</A
+> w, <A HREF="/usr/local/share/doc/ghc/libraries/base/Data-Monoid.html#t%3AMonoid"
+>Monoid</A
+> n) =&gt; <A HREF="Data-Ring-Semi-Near.html#t%3ALeftSemiNearRing"
+>LeftSemiNearRing</A
+> (<A HREF="/usr/local/share/doc/ghc/libraries/mtl/Control-Monad-Writer-Strict.html#t%3AWriterT"
+>WriterT</A
+> w m n)</TD
+></TR
+><TR
+><TD CLASS="decl"
+>(<A HREF="/usr/local/share/doc/ghc/libraries/base/Control-Monad.html#t%3AMonadPlus"
+>MonadPlus</A
+> m, <A HREF="/usr/local/share/doc/ghc/libraries/base/Data-Monoid.html#t%3AMonoid"
+>Monoid</A
+> w, <A HREF="/usr/local/share/doc/ghc/libraries/base/Data-Monoid.html#t%3AMonoid"
+>Monoid</A
+> n) =&gt; <A HREF="Data-Ring-Semi-Near.html#t%3ALeftSemiNearRing"
+>LeftSemiNearRing</A
+> (<A HREF="/usr/local/share/doc/ghc/libraries/mtl/Control-Monad-Writer-Lazy.html#t%3AWriterT"
+>WriterT</A
+> w m n)</TD
+></TR
+><TR
+><TD CLASS="decl"
+>(<A HREF="/usr/local/share/doc/ghc/libraries/base/Control-Monad.html#t%3AMonadPlus"
+>MonadPlus</A
+> m, <A HREF="/usr/local/share/doc/ghc/libraries/base/Data-Monoid.html#t%3AMonoid"
+>Monoid</A
+> n) =&gt; <A HREF="Data-Ring-Semi-Near.html#t%3ALeftSemiNearRing"
+>LeftSemiNearRing</A
+> (<A HREF="/usr/local/share/doc/ghc/libraries/mtl/Control-Monad-State-Strict.html#t%3AStateT"
+>StateT</A
+> s m n)</TD
+></TR
+><TR
+><TD CLASS="decl"
+>(<A HREF="/usr/local/share/doc/ghc/libraries/base/Control-Monad.html#t%3AMonadPlus"
+>MonadPlus</A
+> m, <A HREF="/usr/local/share/doc/ghc/libraries/base/Data-Monoid.html#t%3AMonoid"
+>Monoid</A
+> n) =&gt; <A HREF="Data-Ring-Semi-Near.html#t%3ALeftSemiNearRing"
+>LeftSemiNearRing</A
+> (<A HREF="/usr/local/share/doc/ghc/libraries/mtl/Control-Monad-State-Lazy.html#t%3AStateT"
+>StateT</A
+> s m n)</TD
+></TR
+><TR
+><TD CLASS="decl"
+>(<A HREF="/usr/local/share/doc/ghc/libraries/base/Control-Monad.html#t%3AMonadPlus"
+>MonadPlus</A
+> m, <A HREF="/usr/local/share/doc/ghc/libraries/base/Data-Monoid.html#t%3AMonoid"
+>Monoid</A
+> n) =&gt; <A HREF="Data-Ring-Semi-Near.html#t%3ALeftSemiNearRing"
+>LeftSemiNearRing</A
+> (<A HREF="/usr/local/share/doc/ghc/libraries/mtl/Control-Monad-Reader.html#t%3AReaderT"
+>ReaderT</A
+> e m n)</TD
+></TR
+><TR
+><TD CLASS="decl"
+>(Stream s m t, <A HREF="/usr/local/share/doc/ghc/libraries/base/Data-Monoid.html#t%3AMonoid"
+>Monoid</A
+> a) =&gt; <A HREF="Data-Ring-Semi-Near.html#t%3ALeftSemiNearRing"
+>LeftSemiNearRing</A
+> (ParsecT s u m a)</TD
+></TR
+><TR
+><TD CLASS="decl"
+>(<A HREF="/usr/local/share/doc/ghc/libraries/base/Control-Monad.html#t%3AMonadPlus"
+>MonadPlus</A
+> m, <A HREF="/usr/local/share/doc/ghc/libraries/base/Data-Monoid.html#t%3AMonoid"
+>Monoid</A
+> w, <A HREF="/usr/local/share/doc/ghc/libraries/base/Data-Monoid.html#t%3AMonoid"
+>Monoid</A
+> n) =&gt; <A HREF="Data-Ring-Semi-Near.html#t%3ALeftSemiNearRing"
+>LeftSemiNearRing</A
+> (<A HREF="/usr/local/share/doc/ghc/libraries/mtl/Control-Monad-RWS-Strict.html#t%3ARWST"
+>RWST</A
+> r w s m n)</TD
+></TR
+><TR
+><TD CLASS="decl"
+>(<A HREF="/usr/local/share/doc/ghc/libraries/base/Control-Monad.html#t%3AMonadPlus"
+>MonadPlus</A
+> m, <A HREF="/usr/local/share/doc/ghc/libraries/base/Data-Monoid.html#t%3AMonoid"
+>Monoid</A
+> w, <A HREF="/usr/local/share/doc/ghc/libraries/base/Data-Monoid.html#t%3AMonoid"
+>Monoid</A
+> n) =&gt; <A HREF="Data-Ring-Semi-Near.html#t%3ALeftSemiNearRing"
+>LeftSemiNearRing</A
+> (<A HREF="/usr/local/share/doc/ghc/libraries/mtl/Control-Monad-RWS-Lazy.html#t%3ARWST"
+>RWST</A
+> r w s m n)</TD
+></TR
+></TABLE
+></DIV
+></TD
+></TR
+></TABLE
+></TD
+></TR
+><TR
+><TD CLASS="s15"
+></TD
+></TR
+><TR
+><TD CLASS="topdecl"
+><TABLE CLASS="declbar"
+><TR
+><TD CLASS="declname"
+><SPAN CLASS="keyword"
+>class</SPAN
+> (<A HREF="Data-Monoid-Multiplicative.html#t%3AMultiplicative"
+>Multiplicative</A
+> m, <A HREF="/usr/local/share/doc/ghc/libraries/base/Data-Monoid.html#t%3AMonoid"
+>Monoid</A
+> m) =&gt; <A NAME="t%3ARightSemiNearRing"
+></A
+><B
+>RightSemiNearRing</B
+> m </TD
+><TD CLASS="declbut"
+><A HREF="src/Data-Ring-Semi-Near.html#RightSemiNearRing"
+>Source</A
+></TD
+></TR
+></TABLE
+></TD
+></TR
+><TR
+><TD CLASS="body"
+><TABLE CLASS="vanilla" CELLSPACING="0" CELLPADDING="0"
+><TR
+><TD CLASS="ndoc"
+><PRE
+>(a + b) * c = (a * c) + (b * c)</PRE
+></TD
+></TR
+><TR
+><TD CLASS="s8"
+></TD
+></TR
+><TR
+><TD CLASS="section4"
+><IMG SRC="minus.gif" CLASS="coll" ONCLICK="toggle(this,'i:RightSemiNearRing')" ALT="show/hide"
+> Instances</TD
+></TR
+><TR
+><TD CLASS="body"
+><DIV ID="i:RightSemiNearRing" STYLE="display:block;"
+><TABLE CLASS="vanilla" CELLSPACING="1" CELLPADDING="0"
+><TR
+><TD CLASS="decl"
+><A HREF="Data-Ring-Semi-Near.html#t%3ARightSemiNearRing"
+>RightSemiNearRing</A
+> <A HREF="Data-Ring-Boolean.html#t%3ABoolRing"
+>BoolRing</A
+></TD
+></TR
+><TR
+><TD CLASS="decl"
+><A HREF="Data-Ring-Semi-Near.html#t%3ARightSemiNearRing"
+>RightSemiNearRing</A
+> m =&gt; <A HREF="Data-Ring-Semi-Near.html#t%3ARightSemiNearRing"
+>RightSemiNearRing</A
+> (<A HREF="Data-Monoid-Self.html#t%3ASelf"
+>Self</A
+> m)</TD
+></TR
+><TR
+><TD CLASS="decl"
+><A HREF="Data-Ring-Semi-Near.html#t%3ARightSemiNearRing"
+>RightSemiNearRing</A
+> m =&gt; <A HREF="Data-Ring-Semi-Near.html#t%3ARightSemiNearRing"
+>RightSemiNearRing</A
+> (<A HREF="Data-Monoid-FromString.html#t%3AFromString"
+>FromString</A
+> m)</TD
+></TR
+><TR
+><TD CLASS="decl"
+>(<A HREF="/usr/local/share/doc/ghc/libraries/base/Data-Ord.html#t%3AOrd"
+>Ord</A
+> a, <A HREF="/usr/local/share/doc/ghc/libraries/base/Prelude.html#t%3ANum"
+>Num</A
+> a) =&gt; <A HREF="Data-Ring-Semi-Near.html#t%3ARightSemiNearRing"
+>RightSemiNearRing</A
+> (<A HREF="Data-Ring-Semi-Tropical.html#t%3ATropical"
+>Tropical</A
+> a)</TD
+></TR
+><TR
+><TD CLASS="decl"
+><A HREF="/usr/local/share/doc/ghc/libraries/base/Data-Ord.html#t%3AOrd"
+>Ord</A
+> a =&gt; <A HREF="Data-Ring-Semi-Near.html#t%3ARightSemiNearRing"
+>RightSemiNearRing</A
+> (<A HREF="Data-Ring-Semi-Ord.html#t%3APriority"
+>Priority</A
+> a)</TD
+></TR
+><TR
+><TD CLASS="decl"
+>(<A HREF="/usr/local/share/doc/ghc/libraries/base/Prelude.html#t%3ABounded"
+>Bounded</A
+> a, <A HREF="/usr/local/share/doc/ghc/libraries/base/Data-Ord.html#t%3AOrd"
+>Ord</A
+> a) =&gt; <A HREF="Data-Ring-Semi-Near.html#t%3ARightSemiNearRing"
+>RightSemiNearRing</A
+> (<A HREF="Data-Ring-Semi-Ord.html#t%3AOrder"
+>Order</A
+> a)</TD
+></TR
+><TR
+><TD CLASS="decl"
+><A HREF="/usr/local/share/doc/ghc/libraries/base/Prelude.html#t%3ANum"
+>Num</A
+> a =&gt; <A HREF="Data-Ring-Semi-Near.html#t%3ARightSemiNearRing"
+>RightSemiNearRing</A
+> (<A HREF="Data-Ring-FromNum.html#t%3AFromNum"
+>FromNum</A
+> a)</TD
+></TR
+></TABLE
+></DIV
+></TD
+></TR
+></TABLE
+></TD
+></TR
+><TR
+><TD CLASS="s15"
+></TD
+></TR
+><TR
+><TD CLASS="botbar"
+>Produced by <A HREF="http://www.haskell.org/haddock/"
+>Haddock</A
+> version 2.3.0</TD
+></TR
+></TABLE
+></BODY
+></HTML
+>
addfile ./dist/doc/html/monoids/Data-Ring-Semi-Ord.html
hunk ./dist/doc/html/monoids/Data-Ring-Semi-Ord.html 1
+<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd">
+<!--Rendered using the Haskell Html Library v0.2-->
+<HTML
+><HEAD
+><META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=UTF-8"
+><TITLE
+>Data.Ring.Semi.Ord</TITLE
+><LINK HREF="haddock.css" REL="stylesheet" TYPE="text/css"
+><SCRIPT SRC="haddock-util.js" TYPE="text/javascript"
+></SCRIPT
+></HEAD
+><BODY
+><TABLE CLASS="vanilla" CELLSPACING="0" CELLPADDING="0"
+><TR
+><TD CLASS="topbar"
+><TABLE CLASS="vanilla" CELLSPACING="0" CELLPADDING="0"
+><TR
+><TD
+><IMG SRC="haskell_icon.gif" WIDTH="16" HEIGHT="16" ALT=" "
+></TD
+><TD CLASS="title"
+>monoids-0.1.6: Lots of Monoids</TD
+><TD CLASS="topbut"
+><A HREF="src/Data-Ring-Semi-Ord.html"
+>Source code</A
+></TD
+><TD CLASS="topbut"
+><A HREF="index.html"
+>Contents</A
+></TD
+><TD CLASS="topbut"
+><A HREF="doc-index.html"
+>Index</A
+></TD
+></TR
+></TABLE
+></TD
+></TR
+><TR
+><TD CLASS="modulebar"
+><TABLE CLASS="vanilla" CELLSPACING="0" CELLPADDING="0"
+><TR
+><TD
+><FONT SIZE="6"
+>Data.Ring.Semi.Ord</FONT
+></TD
+><TD ALIGN="right"
+><TABLE CLASS="narrow" CELLSPACING="0" CELLPADDING="0"
+><TR
+><TD CLASS="infohead"
+>Stability</TD
+><TD CLASS="infoval"
+>experimental</TD
+></TR
+><TR
+><TD CLASS="infohead"
+>Maintainer</TD
+><TD CLASS="infoval"
+>ekmett@gmail.com</TD
+></TR
+></TABLE
+></TD
+></TR
+></TABLE
+></TD
+></TR
+><TR
+><TD CLASS="s15"
+></TD
+></TR
+><TR
+><TD CLASS="section1"
+>Description</TD
+></TR
+><TR
+><TD CLASS="doc"
+>Turn an instance of <TT
+><A HREF="/usr/local/share/doc/ghc/libraries/base/Data-Ord.html#t%3AOrd"
+>Ord</A
+></TT
+> into a <TT
+><A HREF="Data-Ring-Semi.html#t%3ASemiRing"
+>SemiRing</A
+></TT
+> over <TT
+><A HREF="/usr/local/share/doc/ghc/libraries/base/Data-Ord.html#v%3Amax"
+>max</A
+></TT
+> and <TT
+><A HREF="/usr/local/share/doc/ghc/libraries/base/Data-Ord.html#v%3Amin"
+>min</A
+></TT
+>
+</TD
+></TR
+><TR
+><TD CLASS="s15"
+></TD
+></TR
+><TR
+><TD CLASS="section1"
+>Synopsis</TD
+></TR
+><TR
+><TD CLASS="s15"
+></TD
+></TR
+><TR
+><TD CLASS="body"
+><TABLE CLASS="vanilla" CELLSPACING="0" CELLPADDING="0"
+><TR
+><TD CLASS="decl"
+>module <A HREF="Data-Ring-Semi.html"
+>Data.Ring.Semi</A
+></TD
+></TR
+><TR
+><TD CLASS="s8"
+></TD
+></TR
+><TR
+><TD CLASS="decl"
+><SPAN CLASS="keyword"
+>newtype</SPAN
+>  <A HREF="#t%3AOrder"
+>Order</A
+> a = <A HREF="#v%3AOrder"
+>Order</A
+> {<TABLE CLASS="vanilla" CELLSPACING="0" CELLPADDING="0"
+><TR
+><TD CLASS="recfield"
+><A HREF="#v%3AgetOrder"
+>getOrder</A
+> :: a</TD
+></TR
+></TABLE
+>}</TD
+></TR
+><TR
+><TD CLASS="s8"
+></TD
+></TR
+><TR
+><TD CLASS="decl"
+><TABLE CLASS="vanilla" CELLSPACING="0" CELLPADDING="0"
+><TR
+><TD CLASS="decl"
+><SPAN CLASS="keyword"
+>data</SPAN
+>  <A HREF="#t%3APriority"
+>Priority</A
+> a </TD
+></TR
+><TR
+><TD CLASS="body"
+><TABLE CLASS="vanilla" CELLSPACING="0" CELLPADDING="0"
+><TR
+><TD CLASS="decl"
+>= <A HREF="#v%3AMinBound"
+>MinBound</A
+></TD
+></TR
+><TR
+><TD CLASS="decl"
+>| <A HREF="#v%3APriority"
+>Priority</A
+> a</TD
+></TR
+><TR
+><TD CLASS="decl"
+>| <A HREF="#v%3AMaxBound"
+>MaxBound</A
+></TD
+></TR
+></TABLE
+></TD
+></TR
+></TABLE
+></TD
+></TR
+></TABLE
+></TD
+></TR
+><TR
+><TD CLASS="s15"
+></TD
+></TR
+><TR
+><TD CLASS="section1"
+>Documentation</TD
+></TR
+><TR
+><TD CLASS="s15"
+></TD
+></TR
+><TR
+><TD CLASS="decl"
+>module <A HREF="Data-Ring-Semi.html"
+>Data.Ring.Semi</A
+></TD
+></TR
+><TR
+><TD CLASS="s15"
+></TD
+></TR
+><TR
+><TD CLASS="topdecl"
+><TABLE CLASS="declbar"
+><TR
+><TD CLASS="declname"
+><SPAN CLASS="keyword"
+>newtype</SPAN
+>  <A NAME="t%3AOrder"
+></A
+><B
+>Order</B
+> a </TD
+><TD CLASS="declbut"
+><A HREF="src/Data-Ring-Semi-Ord.html#Order"
+>Source</A
+></TD
+></TR
+></TABLE
+></TD
+></TR
+><TR
+><TD CLASS="body"
+><TABLE CLASS="vanilla" CELLSPACING="0" CELLPADDING="0"
+><TR
+><TD CLASS="ndoc"
+>A <TT
+><A HREF="Data-Ring-Semi.html#t%3ASemiRing"
+>SemiRing</A
+></TT
+> using a type's built-in Bounded instance.
+</TD
+></TR
+><TR
+><TD CLASS="section4"
+>Constructors</TD
+></TR
+><TR
+><TD CLASS="body"
+><TABLE CLASS="vanilla" CELLSPACING="5" CELLPADDING="0"
+><TR
+><TD CLASS="arg"
+><A NAME="v%3AOrder"
+></A
+><B
+>Order</B
+></TD
+><TD CLASS="rdoc"
+></TD
+></TR
+><TR
+><TD CLASS="body" COLSPAN="2"
+><TABLE CLASS="vanilla" CELLSPACING="1" CELLPADDING="0"
+><TR
+><TD CLASS="arg"
+><A NAME="v%3AgetOrder"
+></A
+><B
+>getOrder</B
+> :: a</TD
+><TD CLASS="rdoc"
+></TD
+></TR
+></TABLE
+></TD
+></TR
+></TABLE
+></TD
+></TR
+><TR
+><TD CLASS="section4"
+><IMG SRC="minus.gif" CLASS="coll" ONCLICK="toggle(this,'i:Order')" ALT="show/hide"
+> Instances</TD
+></TR
+><TR
+><TD CLASS="body"
+><DIV ID="i:Order" STYLE="display:block;"
+><TABLE CLASS="vanilla" CELLSPACING="1" CELLPADDING="0"
+><TR
+><TD CLASS="decl"
+><A HREF="/usr/local/share/doc/ghc/libraries/base/Control-Monad.html#t%3AFunctor"
+>Functor</A
+> <A HREF="Data-Ring-Semi-Ord.html#t%3AOrder"
+>Order</A
+></TD
+></TR
+><TR
+><TD CLASS="decl"
+>Pointed <A HREF="Data-Ring-Semi-Ord.html#t%3AOrder"
+>Order</A
+></TD
+></TR
+><TR
+><TD CLASS="decl"
+>Copointed <A HREF="Data-Ring-Semi-Ord.html#t%3AOrder"
+>Order</A
+></TD
+></TR
+><TR
+><TD CLASS="decl"
+>(<A HREF="/usr/local/share/doc/ghc/libraries/base/Prelude.html#t%3ABounded"
+>Bounded</A
+> a, <A HREF="/usr/local/share/doc/ghc/libraries/base/Data-Ord.html#t%3AOrd"
+>Ord</A
+> a) =&gt; <A HREF="Data-Monoid-Reducer.html#t%3AReducer"
+>Reducer</A
+> a (<A HREF="Data-Ring-Semi-Ord.html#t%3AOrder"
+>Order</A
+> a)</TD
+></TR
+><TR
+><TD CLASS="decl"
+><A HREF="/usr/local/share/doc/ghc/libraries/base/Prelude.html#t%3ABounded"
+>Bounded</A
+> a =&gt; <A HREF="/usr/local/share/doc/ghc/libraries/base/Prelude.html#t%3ABounded"
+>Bounded</A
+> (<A HREF="Data-Ring-Semi-Ord.html#t%3AOrder"
+>Order</A
+> a)</TD
+></TR
+><TR
+><TD CLASS="decl"
+><A HREF="/usr/local/share/doc/ghc/libraries/base/Data-Eq.html#t%3AEq"
+>Eq</A
+> a =&gt; <A HREF="/usr/local/share/doc/ghc/libraries/base/Data-Eq.html#t%3AEq"
+>Eq</A
+> (<A HREF="Data-Ring-Semi-Ord.html#t%3AOrder"
+>Order</A
+> a)</TD
+></TR
+><TR
+><TD CLASS="decl"
+><A HREF="/usr/local/share/doc/ghc/libraries/base/Data-Ord.html#t%3AOrd"
+>Ord</A
+> a =&gt; <A HREF="/usr/local/share/doc/ghc/libraries/base/Data-Ord.html#t%3AOrd"
+>Ord</A
+> (<A HREF="Data-Ring-Semi-Ord.html#t%3AOrder"
+>Order</A
+> a)</TD
+></TR
+><TR
+><TD CLASS="decl"
+><A HREF="/usr/local/share/doc/ghc/libraries/base/Text-Read.html#t%3ARead"
+>Read</A
+> a =&gt; <A HREF="/usr/local/share/doc/ghc/libraries/base/Text-Read.html#t%3ARead"
+>Read</A
+> (<A HREF="Data-Ring-Semi-Ord.html#t%3AOrder"
+>Order</A
+> a)</TD
+></TR
+><TR
+><TD CLASS="decl"
+><A HREF="/usr/local/share/doc/ghc/libraries/base/Text-Show.html#t%3AShow"
+>Show</A
+> a =&gt; <A HREF="/usr/local/share/doc/ghc/libraries/base/Text-Show.html#t%3AShow"
+>Show</A
+> (<A HREF="Data-Ring-Semi-Ord.html#t%3AOrder"
+>Order</A
+> a)</TD
+></TR
+><TR
+><TD CLASS="decl"
+><A HREF="/usr/local/share/doc/ghc/libraries/QuickCheck/Test-QuickCheck.html#t%3AArbitrary"
+>Arbitrary</A
+> a =&gt; <A HREF="/usr/local/share/doc/ghc/libraries/QuickCheck/Test-QuickCheck.html#t%3AArbitrary"
+>Arbitrary</A
+> (<A HREF="Data-Ring-Semi-Ord.html#t%3AOrder"
+>Order</A
+> a)</TD
+></TR
+><TR
+><TD CLASS="decl"
+>(<A HREF="/usr/local/share/doc/ghc/libraries/base/Prelude.html#t%3ABounded"
+>Bounded</A
+> a, <A HREF="/usr/local/share/doc/ghc/libraries/base/Data-Ord.html#t%3AOrd"
+>Ord</A
+> a) =&gt; <A HREF="/usr/local/share/doc/ghc/libraries/base/Data-Monoid.html#t%3AMonoid"
+>Monoid</A
+> (<A HREF="Data-Ring-Semi-Ord.html#t%3AOrder"
+>Order</A
+> a)</TD
+></TR
+><TR
+><TD CLASS="decl"
+>(<A HREF="/usr/local/share/doc/ghc/libraries/base/Prelude.html#t%3ABounded"
+>Bounded</A
+> a, <A HREF="/usr/local/share/doc/ghc/libraries/base/Data-Ord.html#t%3AOrd"
+>Ord</A
+> a) =&gt; <A HREF="Data-Monoid-Multiplicative.html#t%3AMultiplicative"
+>Multiplicative</A
+> (<A HREF="Data-Ring-Semi-Ord.html#t%3AOrder"
+>Order</A
+> a)</TD
+></TR
+><TR
+><TD CLASS="decl"
+>(<A HREF="/usr/local/share/doc/ghc/libraries/base/Prelude.html#t%3ABounded"
+>Bounded</A
+> a, <A HREF="/usr/local/share/doc/ghc/libraries/base/Data-Ord.html#t%3AOrd"
+>Ord</A
+> a) =&gt; <A HREF="Data-Ring-Semi-Near.html#t%3ALeftSemiNearRing"
+>LeftSemiNearRing</A
+> (<A HREF="Data-Ring-Semi-Ord.html#t%3AOrder"
+>Order</A
+> a)</TD
+></TR
+><TR
+><TD CLASS="decl"
+>(<A HREF="/usr/local/share/doc/ghc/libraries/base/Prelude.html#t%3ABounded"
+>Bounded</A
+> a, <A HREF="/usr/local/share/doc/ghc/libraries/base/Data-Ord.html#t%3AOrd"
+>Ord</A
+> a) =&gt; <A HREF="Data-Ring-Semi-Near.html#t%3ARightSemiNearRing"
+>RightSemiNearRing</A
+> (<A HREF="Data-Ring-Semi-Ord.html#t%3AOrder"
+>Order</A
+> a)</TD
+></TR
+><TR
+><TD CLASS="decl"
+>(<A HREF="/usr/local/share/doc/ghc/libraries/base/Prelude.html#t%3ABounded"
+>Bounded</A
+> a, <A HREF="/usr/local/share/doc/ghc/libraries/base/Data-Ord.html#t%3AOrd"
+>Ord</A
+> a) =&gt; <A HREF="Data-Ring-Semi.html#t%3ASemiRing"
+>SemiRing</A
+> (<A HREF="Data-Ring-Semi-Ord.html#t%3AOrder"
+>Order</A
+> a)</TD
+></TR
+></TABLE
+></DIV
+></TD
+></TR
+></TABLE
+></TD
+></TR
+><TR
+><TD CLASS="s15"
+></TD
+></TR
+><TR
+><TD CLASS="topdecl"
+><TABLE CLASS="declbar"
+><TR
+><TD CLASS="declname"
+><SPAN CLASS="keyword"
+>data</SPAN
+>  <A NAME="t%3APriority"
+></A
+><B
+>Priority</B
+> a </TD
+><TD CLASS="declbut"
+><A HREF="src/Data-Ring-Semi-Ord.html#Priority"
+>Source</A
+></TD
+></TR
+></TABLE
+></TD
+></TR
+><TR
+><TD CLASS="body"
+><TABLE CLASS="vanilla" CELLSPACING="0" CELLPADDING="0"
+><TR
+><TD CLASS="ndoc"
+>A <TT
+><A HREF="Data-Ring-Semi.html#t%3ASemiRing"
+>SemiRing</A
+></TT
+> which adds <TT
+><A HREF="/usr/local/share/doc/ghc/libraries/base/Prelude.html#v%3AminBound"
+>minBound</A
+></TT
+> and <TT
+><A HREF="/usr/local/share/doc/ghc/libraries/base/Prelude.html#v%3AmaxBound"
+>maxBound</A
+></TT
+> to a pre-existing type.
+</TD
+></TR
+><TR
+><TD CLASS="section4"
+>Constructors</TD
+></TR
+><TR
+><TD CLASS="body"
+><TABLE CLASS="vanilla" CELLSPACING="1" CELLPADDING="0"
+><TR
+><TD CLASS="arg"
+><A NAME="v%3AMinBound"
+></A
+><B
+>MinBound</B
+></TD
+><TD CLASS="rdoc"
+></TD
+></TR
+><TR
+><TD CLASS="arg"
+><A NAME="v%3APriority"
+></A
+><B
+>Priority</B
+> a</TD
+><TD CLASS="rdoc"
+></TD
+></TR
+><TR
+><TD CLASS="arg"
+><A NAME="v%3AMaxBound"
+></A
+><B
+>MaxBound</B
+></TD
+><TD CLASS="rdoc"
+></TD
+></TR
+></TABLE
+></TD
+></TR
+><TR
+><TD CLASS="section4"
+><IMG SRC="minus.gif" CLASS="coll" ONCLICK="toggle(this,'i:Priority')" ALT="show/hide"
+> Instances</TD
+></TR
+><TR
+><TD CLASS="body"
+><DIV ID="i:Priority" STYLE="display:block;"
+><TABLE CLASS="vanilla" CELLSPACING="1" CELLPADDING="0"
+><TR
+><TD CLASS="decl"
+><A HREF="/usr/local/share/doc/ghc/libraries/base/Control-Monad.html#t%3AFunctor"
+>Functor</A
+> <A HREF="Data-Ring-Semi-Ord.html#t%3APriority"
+>Priority</A
+></TD
+></TR
+><TR
+><TD CLASS="decl"
+>Pointed <A HREF="Data-Ring-Semi-Ord.html#t%3APriority"
+>Priority</A
+></TD
+></TR
+><TR
+><TD CLASS="decl"
+><A HREF="/usr/local/share/doc/ghc/libraries/base/Data-Ord.html#t%3AOrd"
+>Ord</A
+> a =&gt; <A HREF="Data-Monoid-Reducer.html#t%3AReducer"
+>Reducer</A
+> a (<A HREF="Data-Ring-Semi-Ord.html#t%3APriority"
+>Priority</A
+> a)</TD
+></TR
+><TR
+><TD CLASS="decl"
+><A HREF="/usr/local/share/doc/ghc/libraries/base/Prelude.html#t%3ABounded"
+>Bounded</A
+> (<A HREF="Data-Ring-Semi-Ord.html#t%3APriority"
+>Priority</A
+> a)</TD
+></TR
+><TR
+><TD CLASS="decl"
+><A HREF="/usr/local/share/doc/ghc/libraries/base/Data-Eq.html#t%3AEq"
+>Eq</A
+> a =&gt; <A HREF="/usr/local/share/doc/ghc/libraries/base/Data-Eq.html#t%3AEq"
+>Eq</A
+> (<A HREF="Data-Ring-Semi-Ord.html#t%3APriority"
+>Priority</A
+> a)</TD
+></TR
+><TR
+><TD CLASS="decl"
+><A HREF="/usr/local/share/doc/ghc/libraries/base/Data-Ord.html#t%3AOrd"
+>Ord</A
+> a =&gt; <A HREF="/usr/local/share/doc/ghc/libraries/base/Data-Ord.html#t%3AOrd"
+>Ord</A
+> (<A HREF="Data-Ring-Semi-Ord.html#t%3APriority"
+>Priority</A
+> a)</TD
+></TR
+><TR
+><TD CLASS="decl"
+><A HREF="/usr/local/share/doc/ghc/libraries/base/Text-Read.html#t%3ARead"
+>Read</A
+> a =&gt; <A HREF="/usr/local/share/doc/ghc/libraries/base/Text-Read.html#t%3ARead"
+>Read</A
+> (<A HREF="Data-Ring-Semi-Ord.html#t%3APriority"
+>Priority</A
+> a)</TD
+></TR
+><TR
+><TD CLASS="decl"
+><A HREF="/usr/local/share/doc/ghc/libraries/base/Text-Show.html#t%3AShow"
+>Show</A
+> a =&gt; <A HREF="/usr/local/share/doc/ghc/libraries/base/Text-Show.html#t%3AShow"
+>Show</A
+> (<A HREF="Data-Ring-Semi-Ord.html#t%3APriority"
+>Priority</A
+> a)</TD
+></TR
+><TR
+><TD CLASS="decl"
+><A HREF="/usr/local/share/doc/ghc/libraries/QuickCheck/Test-QuickCheck.html#t%3AArbitrary"
+>Arbitrary</A
+> a =&gt; <A HREF="/usr/local/share/doc/ghc/libraries/QuickCheck/Test-QuickCheck.html#t%3AArbitrary"
+>Arbitrary</A
+> (<A HREF="Data-Ring-Semi-Ord.html#t%3APriority"
+>Priority</A
+> a)</TD
+></TR
+><TR
+><TD CLASS="decl"
+><A HREF="/usr/local/share/doc/ghc/libraries/base/Data-Ord.html#t%3AOrd"
+>Ord</A
+> a =&gt; <A HREF="/usr/local/share/doc/ghc/libraries/base/Data-Monoid.html#t%3AMonoid"
+>Monoid</A
+> (<A HREF="Data-Ring-Semi-Ord.html#t%3APriority"
+>Priority</A
+> a)</TD
+></TR
+><TR
+><TD CLASS="decl"
+><A HREF="/usr/local/share/doc/ghc/libraries/base/Data-Ord.html#t%3AOrd"
+>Ord</A
+> a =&gt; <A HREF="Data-Monoid-Multiplicative.html#t%3AMultiplicative"
+>Multiplicative</A
+> (<A HREF="Data-Ring-Semi-Ord.html#t%3APriority"
+>Priority</A
+> a)</TD
+></TR
+><TR
+><TD CLASS="decl"
+><A HREF="/usr/local/share/doc/ghc/libraries/base/Data-Ord.html#t%3AOrd"
+>Ord</A
+> a =&gt; <A HREF="Data-Ring-Semi-Near.html#t%3ALeftSemiNearRing"
+>LeftSemiNearRing</A
+> (<A HREF="Data-Ring-Semi-Ord.html#t%3APriority"
+>Priority</A
+> a)</TD
+></TR
+><TR
+><TD CLASS="decl"
+><A HREF="/usr/local/share/doc/ghc/libraries/base/Data-Ord.html#t%3AOrd"
+>Ord</A
+> a =&gt; <A HREF="Data-Ring-Semi-Near.html#t%3ARightSemiNearRing"
+>RightSemiNearRing</A
+> (<A HREF="Data-Ring-Semi-Ord.html#t%3APriority"
+>Priority</A
+> a)</TD
+></TR
+><TR
+><TD CLASS="decl"
+><A HREF="/usr/local/share/doc/ghc/libraries/base/Data-Ord.html#t%3AOrd"
+>Ord</A
+> a =&gt; <A HREF="Data-Ring-Semi.html#t%3ASemiRing"
+>SemiRing</A
+> (<A HREF="Data-Ring-Semi-Ord.html#t%3APriority"
+>Priority</A
+> a)</TD
+></TR
+><TR
+><TD CLASS="decl"
+><A HREF="/usr/local/share/doc/ghc/libraries/base/Data-Ord.html#t%3AOrd"
+>Ord</A
+> a =&gt; <A HREF="Data-Monoid-Reducer.html#t%3AReducer"
+>Reducer</A
+> (<A HREF="Data-Monoid-Ord.html#t%3AMinPriority"
+>MinPriority</A
+> a) (<A HREF="Data-Ring-Semi-Ord.html#t%3APriority"
+>Priority</A
+> a)</TD
+></TR
+><TR
+><TD CLASS="decl"
+><A HREF="/usr/local/share/doc/ghc/libraries/base/Data-Ord.html#t%3AOrd"
+>Ord</A
+> a =&gt; <A HREF="Data-Monoid-Reducer.html#t%3AReducer"
+>Reducer</A
+> (<A HREF="Data-Monoid-Ord.html#t%3AMaxPriority"
+>MaxPriority</A
+> a) (<A HREF="Data-Ring-Semi-Ord.html#t%3APriority"
+>Priority</A
+> a)</TD
+></TR
+></TABLE
+></DIV
+></TD
+></TR
+></TABLE
+></TD
+></TR
+><TR
+><TD CLASS="s15"
+></TD
+></TR
+><TR
+><TD CLASS="botbar"
+>Produced by <A HREF="http://www.haskell.org/haddock/"
+>Haddock</A
+> version 2.3.0</TD
+></TR
+></TABLE
+></BODY
+></HTML
+>
addfile ./dist/doc/html/monoids/Data-Ring-Semi-Tropical.html
hunk ./dist/doc/html/monoids/Data-Ring-Semi-Tropical.html 1
+<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd">
+<!--Rendered using the Haskell Html Library v0.2-->
+<HTML
+><HEAD
+><META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=UTF-8"
+><TITLE
+>Data.Ring.Semi.Tropical</TITLE
+><LINK HREF="haddock.css" REL="stylesheet" TYPE="text/css"
+><SCRIPT SRC="haddock-util.js" TYPE="text/javascript"
+></SCRIPT
+></HEAD
+><BODY
+><TABLE CLASS="vanilla" CELLSPACING="0" CELLPADDING="0"
+><TR
+><TD CLASS="topbar"
+><TABLE CLASS="vanilla" CELLSPACING="0" CELLPADDING="0"
+><TR
+><TD
+><IMG SRC="haskell_icon.gif" WIDTH="16" HEIGHT="16" ALT=" "
+></TD
+><TD CLASS="title"
+>monoids-0.1.6: Lots of Monoids</TD
+><TD CLASS="topbut"
+><A HREF="src/Data-Ring-Semi-Tropical.html"
+>Source code</A
+></TD
+><TD CLASS="topbut"
+><A HREF="index.html"
+>Contents</A
+></TD
+><TD CLASS="topbut"
+><A HREF="doc-index.html"
+>Index</A
+></TD
+></TR
+></TABLE
+></TD
+></TR
+><TR
+><TD CLASS="modulebar"
+><TABLE CLASS="vanilla" CELLSPACING="0" CELLPADDING="0"
+><TR
+><TD
+><FONT SIZE="6"
+>Data.Ring.Semi.Tropical</FONT
+></TD
+></TR
+></TABLE
+></TD
+></TR
+><TR
+><TD CLASS="s15"
+></TD
+></TR
+><TR
+><TD
+><TABLE CLASS="vanilla" CELLSPACING="0" CELLPADDING="0"
+><TR
+><TD CLASS="section4"
+><B
+>Contents</B
+></TD
+></TR
+><TR
+><TD
+><DL
+><DT
+><A HREF="#1"
+>Max
+</A
+></DT
+></DL
+></TD
+></TR
+></TABLE
+></TD
+></TR
+><TR
+><TD CLASS="s15"
+></TD
+></TR
+><TR
+><TD CLASS="s15"
+></TD
+></TR
+><TR
+><TD CLASS="section1"
+>Synopsis</TD
+></TR
+><TR
+><TD CLASS="s15"
+></TD
+></TR
+><TR
+><TD CLASS="body"
+><TABLE CLASS="vanilla" CELLSPACING="0" CELLPADDING="0"
+><TR
+><TD CLASS="decl"
+>module <A HREF="Data-Monoid-Reducer.html"
+>Data.Monoid.Reducer</A
+></TD
+></TR
+><TR
+><TD CLASS="s8"
+></TD
+></TR
+><TR
+><TD CLASS="decl"
+>module <A HREF="Data-Ring-Semi.html"
+>Data.Ring.Semi</A
+></TD
+></TR
+><TR
+><TD CLASS="s8"
+></TD
+></TR
+><TR
+><TD CLASS="decl"
+><A HREF="#v%3Ainfinity"
+>infinity</A
+> ::  <A HREF="Data-Ring-Semi-Tropical.html#t%3ATropical"
+>Tropical</A
+> a</TD
+></TR
+><TR
+><TD CLASS="s8"
+></TD
+></TR
+><TR
+><TD CLASS="decl"
+><SPAN CLASS="keyword"
+>newtype</SPAN
+>  <A HREF="#t%3ATropical"
+>Tropical</A
+> a = <A HREF="#v%3ATropical"
+>Tropical</A
+> {<TABLE CLASS="vanilla" CELLSPACING="0" CELLPADDING="0"
+><TR
+><TD CLASS="recfield"
+><A HREF="#v%3AgetTropical"
+>getTropical</A
+> :: <A HREF="/usr/local/share/doc/ghc/libraries/base/Data-Maybe.html#t%3AMaybe"
+>Maybe</A
+> a</TD
+></TR
+></TABLE
+>}</TD
+></TR
+></TABLE
+></TD
+></TR
+><TR
+><TD CLASS="s15"
+></TD
+></TR
+><TR
+><TD CLASS="section1"
+>Documentation</TD
+></TR
+><TR
+><TD CLASS="s15"
+></TD
+></TR
+><TR
+><TD CLASS="decl"
+>module <A HREF="Data-Monoid-Reducer.html"
+>Data.Monoid.Reducer</A
+></TD
+></TR
+><TR
+><TD CLASS="s15"
+></TD
+></TR
+><TR
+><TD CLASS="decl"
+>module <A HREF="Data-Ring-Semi.html"
+>Data.Ring.Semi</A
+></TD
+></TR
+><TR
+><TD CLASS="s15"
+></TD
+></TR
+><TR
+><TD CLASS="section1"
+><A NAME="1"
+>Max
+</A
+></TD
+></TR
+><TR
+><TD CLASS="s15"
+></TD
+></TR
+><TR
+><TD CLASS="topdecl"
+><TABLE CLASS="declbar"
+><TR
+><TD CLASS="declname"
+><A NAME="v%3Ainfinity"
+></A
+><B
+>infinity</B
+> ::  <A HREF="Data-Ring-Semi-Tropical.html#t%3ATropical"
+>Tropical</A
+> a</TD
+><TD CLASS="declbut"
+><A HREF="src/Data-Ring-Semi-Tropical.html#infinity"
+>Source</A
+></TD
+></TR
+></TABLE
+></TD
+></TR
+><TR
+><TD CLASS="s15"
+></TD
+></TR
+><TR
+><TD CLASS="topdecl"
+><TABLE CLASS="declbar"
+><TR
+><TD CLASS="declname"
+><SPAN CLASS="keyword"
+>newtype</SPAN
+>  <A NAME="t%3ATropical"
+></A
+><B
+>Tropical</B
+> a </TD
+><TD CLASS="declbut"
+><A HREF="src/Data-Ring-Semi-Tropical.html#Tropical"
+>Source</A
+></TD
+></TR
+></TABLE
+></TD
+></TR
+><TR
+><TD CLASS="body"
+><TABLE CLASS="vanilla" CELLSPACING="0" CELLPADDING="0"
+><TR
+><TD CLASS="ndoc"
+><P
+>The <TT
+><A HREF="Data-Ring-Semi.html#t%3ASemiRing"
+>SemiRing</A
+></TT
+> <TT
+>(<TT
+><A HREF="/usr/local/share/doc/ghc/libraries/base/Data-Ord.html#v%3Amin"
+>min</A
+></TT
+>,<TT
+><A HREF="/usr/local/share/doc/ghc/libraries/base/Prelude.html#v%3A%2B"
+>+</A
+></TT
+>)</TT
+> over <TT
+>a extended with <TT
+><A HREF="Data-Ring-Semi-Tropical.html#v%3Ainfinity"
+>infinity</A
+></TT
+></TT
+>.
+   When <TT
+>a</TT
+> has a Num instance with an addition that respects order, then this is 
+   transformed into a tropical semiring. It is assumed that 0 is the least element
+   of a.
+</P
+><P
+><A HREF="http://hal.archives-ouvertes.fr/docs/00/11/37/79/PDF/Tropical.pdf"
+>http://hal.archives-ouvertes.fr/docs/00/11/37/79/PDF/Tropical.pdf</A
+>
+</P
+></TD
+></TR
+><TR
+><TD CLASS="section4"
+>Constructors</TD
+></TR
+><TR
+><TD CLASS="body"
+><TABLE CLASS="vanilla" CELLSPACING="5" CELLPADDING="0"
+><TR
+><TD CLASS="arg"
+><A NAME="v%3ATropical"
+></A
+><B
+>Tropical</B
+></TD
+><TD CLASS="rdoc"
+></TD
+></TR
+><TR
+><TD CLASS="body" COLSPAN="2"
+><TABLE CLASS="vanilla" CELLSPACING="1" CELLPADDING="0"
+><TR
+><TD CLASS="arg"
+><A NAME="v%3AgetTropical"
+></A
+><B
+>getTropical</B
+> :: <A HREF="/usr/local/share/doc/ghc/libraries/base/Data-Maybe.html#t%3AMaybe"
+>Maybe</A
+> a</TD
+><TD CLASS="rdoc"
+></TD
+></TR
+></TABLE
+></TD
+></TR
+></TABLE
+></TD
+></TR
+><TR
+><TD CLASS="section4"
+><IMG SRC="minus.gif" CLASS="coll" ONCLICK="toggle(this,'i:Tropical')" ALT="show/hide"
+> Instances</TD
+></TR
+><TR
+><TD CLASS="body"
+><DIV ID="i:Tropical" STYLE="display:block;"
+><TABLE CLASS="vanilla" CELLSPACING="1" CELLPADDING="0"
+><TR
+><TD CLASS="decl"
+><A HREF="/usr/local/share/doc/ghc/libraries/base/Control-Monad.html#t%3AFunctor"
+>Functor</A
+> <A HREF="Data-Ring-Semi-Tropical.html#t%3ATropical"
+>Tropical</A
+></TD
+></TR
+><TR
+><TD CLASS="decl"
+>Pointed <A HREF="Data-Ring-Semi-Tropical.html#t%3ATropical"
+>Tropical</A
+></TD
+></TR
+><TR
+><TD CLASS="decl"
+><A HREF="/usr/local/share/doc/ghc/libraries/base/Data-Ord.html#t%3AOrd"
+>Ord</A
+> a =&gt; <A HREF="Data-Monoid-Reducer.html#t%3AReducer"
+>Reducer</A
+> a (<A HREF="Data-Ring-Semi-Tropical.html#t%3ATropical"
+>Tropical</A
+> a)</TD
+></TR
+><TR
+><TD CLASS="decl"
+><A HREF="/usr/local/share/doc/ghc/libraries/base/Data-Eq.html#t%3AEq"
+>Eq</A
+> a =&gt; <A HREF="/usr/local/share/doc/ghc/libraries/base/Data-Eq.html#t%3AEq"
+>Eq</A
+> (<A HREF="Data-Ring-Semi-Tropical.html#t%3ATropical"
+>Tropical</A
+> a)</TD
+></TR
+><TR
+><TD CLASS="decl"
+><A HREF="/usr/local/share/doc/ghc/libraries/base/Data-Ord.html#t%3AOrd"
+>Ord</A
+> a =&gt; <A HREF="/usr/local/share/doc/ghc/libraries/base/Data-Ord.html#t%3AOrd"
+>Ord</A
+> (<A HREF="Data-Ring-Semi-Tropical.html#t%3ATropical"
+>Tropical</A
+> a)</TD
+></TR
+><TR
+><TD CLASS="decl"
+><A HREF="/usr/local/share/doc/ghc/libraries/base/Text-Read.html#t%3ARead"
+>Read</A
+> a =&gt; <A HREF="/usr/local/share/doc/ghc/libraries/base/Text-Read.html#t%3ARead"
+>Read</A
+> (<A HREF="Data-Ring-Semi-Tropical.html#t%3ATropical"
+>Tropical</A
+> a)</TD
+></TR
+><TR
+><TD CLASS="decl"
+><A HREF="/usr/local/share/doc/ghc/libraries/base/Text-Show.html#t%3AShow"
+>Show</A
+> a =&gt; <A HREF="/usr/local/share/doc/ghc/libraries/base/Text-Show.html#t%3AShow"
+>Show</A
+> (<A HREF="Data-Ring-Semi-Tropical.html#t%3ATropical"
+>Tropical</A
+> a)</TD
+></TR
+><TR
+><TD CLASS="decl"
+><A HREF="/usr/local/share/doc/ghc/libraries/base/Data-Ord.html#t%3AOrd"
+>Ord</A
+> a =&gt; <A HREF="/usr/local/share/doc/ghc/libraries/base/Data-Monoid.html#t%3AMonoid"
+>Monoid</A
+> (<A HREF="Data-Ring-Semi-Tropical.html#t%3ATropical"
+>Tropical</A
+> a)</TD
+></TR
+><TR
+><TD CLASS="decl"
+><A HREF="/usr/local/share/doc/ghc/libraries/base/Prelude.html#t%3ANum"
+>Num</A
+> a =&gt; <A HREF="Data-Monoid-Multiplicative.html#t%3AMultiplicative"
+>Multiplicative</A
+> (<A HREF="Data-Ring-Semi-Tropical.html#t%3ATropical"
+>Tropical</A
+> a)</TD
+></TR
+><TR
+><TD CLASS="decl"
+>(<A HREF="/usr/local/share/doc/ghc/libraries/base/Data-Ord.html#t%3AOrd"
+>Ord</A
+> a, <A HREF="/usr/local/share/doc/ghc/libraries/base/Prelude.html#t%3ANum"
+>Num</A
+> a) =&gt; <A HREF="Data-Ring-Semi-Near.html#t%3ALeftSemiNearRing"
+>LeftSemiNearRing</A
+> (<A HREF="Data-Ring-Semi-Tropical.html#t%3ATropical"
+>Tropical</A
+> a)</TD
+></TR
+><TR
+><TD CLASS="decl"
+>(<A HREF="/usr/local/share/doc/ghc/libraries/base/Data-Ord.html#t%3AOrd"
+>Ord</A
+> a, <A HREF="/usr/local/share/doc/ghc/libraries/base/Prelude.html#t%3ANum"
+>Num</A
+> a) =&gt; <A HREF="Data-Ring-Semi-Near.html#t%3ARightSemiNearRing"
+>RightSemiNearRing</A
+> (<A HREF="Data-Ring-Semi-Tropical.html#t%3ATropical"
+>Tropical</A
+> a)</TD
+></TR
+><TR
+><TD CLASS="decl"
+>(<A HREF="/usr/local/share/doc/ghc/libraries/base/Data-Ord.html#t%3AOrd"
+>Ord</A
+> a, <A HREF="/usr/local/share/doc/ghc/libraries/base/Prelude.html#t%3ANum"
+>Num</A
+> a) =&gt; <A HREF="Data-Ring-Semi.html#t%3ASemiRing"
+>SemiRing</A
+> (<A HREF="Data-Ring-Semi-Tropical.html#t%3ATropical"
+>Tropical</A
+> a)</TD
+></TR
+><TR
+><TD CLASS="decl"
+><A HREF="/usr/local/share/doc/ghc/libraries/base/Data-Ord.html#t%3AOrd"
+>Ord</A
+> a =&gt; <A HREF="Data-Monoid-Reducer.html#t%3AReducer"
+>Reducer</A
+> (<A HREF="/usr/local/share/doc/ghc/libraries/base/Data-Maybe.html#t%3AMaybe"
+>Maybe</A
+> a) (<A HREF="Data-Ring-Semi-Tropical.html#t%3ATropical"
+>Tropical</A
+> a)</TD
+></TR
+><TR
+><TD CLASS="decl"
+><A HREF="/usr/local/share/doc/ghc/libraries/base/Data-Ord.html#t%3AOrd"
+>Ord</A
+> a =&gt; <A HREF="Data-Monoid-Reducer.html#t%3AReducer"
+>Reducer</A
+> (<A HREF="Data-Monoid-Ord.html#t%3AMinPriority"
+>MinPriority</A
+> a) (<A HREF="Data-Ring-Semi-Tropical.html#t%3ATropical"
+>Tropical</A
+> a)</TD
+></TR
+></TABLE
+></DIV
+></TD
+></TR
+></TABLE
+></TD
+></TR
+><TR
+><TD CLASS="s15"
+></TD
+></TR
+><TR
+><TD CLASS="botbar"
+>Produced by <A HREF="http://www.haskell.org/haddock/"
+>Haddock</A
+> version 2.3.0</TD
+></TR
+></TABLE
+></BODY
+></HTML
+>
addfile ./dist/doc/html/monoids/Data-Ring-Semi.html
hunk ./dist/doc/html/monoids/Data-Ring-Semi.html 1
+<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd">
+<!--Rendered using the Haskell Html Library v0.2-->
+<HTML
+><HEAD
+><META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=UTF-8"
+><TITLE
+>Data.Ring.Semi</TITLE
+><LINK HREF="haddock.css" REL="stylesheet" TYPE="text/css"
+><SCRIPT SRC="haddock-util.js" TYPE="text/javascript"
+></SCRIPT
+></HEAD
+><BODY
+><TABLE CLASS="vanilla" CELLSPACING="0" CELLPADDING="0"
+><TR
+><TD CLASS="topbar"
+><TABLE CLASS="vanilla" CELLSPACING="0" CELLPADDING="0"
+><TR
+><TD
+><IMG SRC="haskell_icon.gif" WIDTH="16" HEIGHT="16" ALT=" "
+></TD
+><TD CLASS="title"
+>monoids-0.1.6: Lots of Monoids</TD
+><TD CLASS="topbut"
+><A HREF="src/Data-Ring-Semi.html"
+>Source code</A
+></TD
+><TD CLASS="topbut"
+><A HREF="index.html"
+>Contents</A
+></TD
+><TD CLASS="topbut"
+><A HREF="doc-index.html"
+>Index</A
+></TD
+></TR
+></TABLE
+></TD
+></TR
+><TR
+><TD CLASS="modulebar"
+><TABLE CLASS="vanilla" CELLSPACING="0" CELLPADDING="0"
+><TR
+><TD
+><FONT SIZE="6"
+>Data.Ring.Semi</FONT
+></TD
+><TD ALIGN="right"
+><TABLE CLASS="narrow" CELLSPACING="0" CELLPADDING="0"
+><TR
+><TD CLASS="infohead"
+>Portability</TD
+><TD CLASS="infoval"
+>non-portable (MPTCs)</TD
+></TR
+><TR
+><TD CLASS="infohead"
+>Stability</TD
+><TD CLASS="infoval"
+>experimental</TD
+></TR
+><TR
+><TD CLASS="infohead"
+>Maintainer</TD
+><TD CLASS="infoval"
+>libraries@haskell.org</TD
+></TR
+></TABLE
+></TD
+></TR
+></TABLE
+></TD
+></TR
+><TR
+><TD CLASS="s15"
+></TD
+></TR
+><TR
+><TD CLASS="section1"
+>Description</TD
+></TR
+><TR
+><TD CLASS="doc"
+></TD
+></TR
+><TR
+><TD CLASS="s15"
+></TD
+></TR
+><TR
+><TD CLASS="section1"
+>Synopsis</TD
+></TR
+><TR
+><TD CLASS="s15"
+></TD
+></TR
+><TR
+><TD CLASS="body"
+><TABLE CLASS="vanilla" CELLSPACING="0" CELLPADDING="0"
+><TR
+><TD CLASS="decl"
+>module <A HREF="Data-Ring-Semi-Near.html"
+>Data.Ring.Semi.Near</A
+></TD
+></TR
+><TR
+><TD CLASS="s8"
+></TD
+></TR
+><TR
+><TD CLASS="decl"
+><SPAN CLASS="keyword"
+>class</SPAN
+> (<A HREF="Data-Ring-Semi-Near.html#t%3ARightSemiNearRing"
+>RightSemiNearRing</A
+> a, <A HREF="Data-Ring-Semi-Near.html#t%3ALeftSemiNearRing"
+>LeftSemiNearRing</A
+> a) =&gt; <A HREF="#t%3ASemiRing"
+>SemiRing</A
+> a </TD
+></TR
+></TABLE
+></TD
+></TR
+><TR
+><TD CLASS="s15"
+></TD
+></TR
+><TR
+><TD CLASS="section1"
+>Documentation</TD
+></TR
+><TR
+><TD CLASS="s15"
+></TD
+></TR
+><TR
+><TD CLASS="decl"
+>module <A HREF="Data-Ring-Semi-Near.html"
+>Data.Ring.Semi.Near</A
+></TD
+></TR
+><TR
+><TD CLASS="s15"
+></TD
+></TR
+><TR
+><TD CLASS="topdecl"
+><TABLE CLASS="declbar"
+><TR
+><TD CLASS="declname"
+><SPAN CLASS="keyword"
+>class</SPAN
+> (<A HREF="Data-Ring-Semi-Near.html#t%3ARightSemiNearRing"
+>RightSemiNearRing</A
+> a, <A HREF="Data-Ring-Semi-Near.html#t%3ALeftSemiNearRing"
+>LeftSemiNearRing</A
+> a) =&gt; <A NAME="t%3ASemiRing"
+></A
+><B
+>SemiRing</B
+> a </TD
+><TD CLASS="declbut"
+><A HREF="src/Data-Ring-Semi.html#SemiRing"
+>Source</A
+></TD
+></TR
+></TABLE
+></TD
+></TR
+><TR
+><TD CLASS="body"
+><TABLE CLASS="vanilla" CELLSPACING="0" CELLPADDING="0"
+><TR
+><TD CLASS="ndoc"
+>A <TT
+><A HREF="Data-Ring-Semi.html#t%3ASemiRing"
+>SemiRing</A
+></TT
+> is an instance of both <TT
+><A HREF="Data-Monoid-Multiplicative.html#t%3AMultiplicative"
+>Multiplicative</A
+></TT
+> and <TT
+><A HREF="/usr/local/share/doc/ghc/libraries/base/Data-Monoid.html#t%3AMonoid"
+>Monoid</A
+></TT
+> where 
+   <TT
+><A HREF="Data-Monoid-Multiplicative.html#v%3Atimes"
+>times</A
+></TT
+> distributes over <TT
+><A HREF="Data-Monoid-Additive.html#v%3Aplus"
+>plus</A
+></TT
+>.
+</TD
+></TR
+><TR
+><TD CLASS="s8"
+></TD
+></TR
+><TR
+><TD CLASS="section4"
+><IMG SRC="minus.gif" CLASS="coll" ONCLICK="toggle(this,'i:SemiRing')" ALT="show/hide"
+> Instances</TD
+></TR
+><TR
+><TD CLASS="body"
+><DIV ID="i:SemiRing" STYLE="display:block;"
+><TABLE CLASS="vanilla" CELLSPACING="1" CELLPADDING="0"
+><TR
+><TD CLASS="decl"
+><A HREF="Data-Ring-Semi.html#t%3ASemiRing"
+>SemiRing</A
+> <A HREF="Data-Ring-Boolean.html#t%3ABoolRing"
+>BoolRing</A
+></TD
+></TR
+><TR
+><TD CLASS="decl"
+>(<A HREF="/usr/local/share/doc/ghc/libraries/base/Data-Ord.html#t%3AOrd"
+>Ord</A
+> a, <A HREF="/usr/local/share/doc/ghc/libraries/base/Prelude.html#t%3ANum"
+>Num</A
+> a) =&gt; <A HREF="Data-Ring-Semi.html#t%3ASemiRing"
+>SemiRing</A
+> (<A HREF="Data-Ring-Semi-Tropical.html#t%3ATropical"
+>Tropical</A
+> a)</TD
+></TR
+><TR
+><TD CLASS="decl"
+><A HREF="/usr/local/share/doc/ghc/libraries/base/Data-Ord.html#t%3AOrd"
+>Ord</A
+> a =&gt; <A HREF="Data-Ring-Semi.html#t%3ASemiRing"
+>SemiRing</A
+> (<A HREF="Data-Ring-Semi-Ord.html#t%3APriority"
+>Priority</A
+> a)</TD
+></TR
+><TR
+><TD CLASS="decl"
+>(<A HREF="/usr/local/share/doc/ghc/libraries/base/Prelude.html#t%3ABounded"
+>Bounded</A
+> a, <A HREF="/usr/local/share/doc/ghc/libraries/base/Data-Ord.html#t%3AOrd"
+>Ord</A
+> a) =&gt; <A HREF="Data-Ring-Semi.html#t%3ASemiRing"
+>SemiRing</A
+> (<A HREF="Data-Ring-Semi-Ord.html#t%3AOrder"
+>Order</A
+> a)</TD
+></TR
+><TR
+><TD CLASS="decl"
+><A HREF="/usr/local/share/doc/ghc/libraries/base/Prelude.html#t%3ANum"
+>Num</A
+> a =&gt; <A HREF="Data-Ring-Semi.html#t%3ASemiRing"
+>SemiRing</A
+> (<A HREF="Data-Ring-FromNum.html#t%3AFromNum"
+>FromNum</A
+> a)</TD
+></TR
+></TABLE
+></DIV
+></TD
+></TR
+></TABLE
+></TD
+></TR
+><TR
+><TD CLASS="s15"
+></TD
+></TR
+><TR
+><TD CLASS="botbar"
+>Produced by <A HREF="http://www.haskell.org/haddock/"
+>Haddock</A
+> version 2.3.0</TD
+></TR
+></TABLE
+></BODY
+></HTML
+>
addfile ./dist/doc/html/monoids/Data-Ring-Sugar.html
hunk ./dist/doc/html/monoids/Data-Ring-Sugar.html 1
+<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd">
+<!--Rendered using the Haskell Html Library v0.2-->
+<HTML
+><HEAD
+><META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=UTF-8"
+><TITLE
+>Data.Ring.Sugar</TITLE
+><LINK HREF="haddock.css" REL="stylesheet" TYPE="text/css"
+><SCRIPT SRC="haddock-util.js" TYPE="text/javascript"
+></SCRIPT
+></HEAD
+><BODY
+><TABLE CLASS="vanilla" CELLSPACING="0" CELLPADDING="0"
+><TR
+><TD CLASS="topbar"
+><TABLE CLASS="vanilla" CELLSPACING="0" CELLPADDING="0"
+><TR
+><TD
+><IMG SRC="haskell_icon.gif" WIDTH="16" HEIGHT="16" ALT=" "
+></TD
+><TD CLASS="title"
+>monoids-0.1.6: Lots of Monoids</TD
+><TD CLASS="topbut"
+><A HREF="src/Data-Ring-Sugar.html"
+>Source code</A
+></TD
+><TD CLASS="topbut"
+><A HREF="index.html"
+>Contents</A
+></TD
+><TD CLASS="topbut"
+><A HREF="doc-index.html"
+>Index</A
+></TD
+></TR
+></TABLE
+></TD
+></TR
+><TR
+><TD CLASS="modulebar"
+><TABLE CLASS="vanilla" CELLSPACING="0" CELLPADDING="0"
+><TR
+><TD
+><FONT SIZE="6"
+>Data.Ring.Sugar</FONT
+></TD
+><TD ALIGN="right"
+><TABLE CLASS="narrow" CELLSPACING="0" CELLPADDING="0"
+><TR
+><TD CLASS="infohead"
+>Portability</TD
+><TD CLASS="infoval"
+>portable</TD
+></TR
+><TR
+><TD CLASS="infohead"
+>Stability</TD
+><TD CLASS="infoval"
+>experimental</TD
+></TR
+><TR
+><TD CLASS="infohead"
+>Maintainer</TD
+><TD CLASS="infoval"
+>libraries@haskell.org</TD
+></TR
+></TABLE
+></TD
+></TR
+></TABLE
+></TD
+></TR
+><TR
+><TD CLASS="s15"
+></TD
+></TR
+><TR
+><TD CLASS="section1"
+>Description</TD
+></TR
+><TR
+><TD CLASS="doc"
+><P
+>Syntactic sugar for working with rings that conflicts with names from the <A HREF="Prelude.html"
+>Prelude</A
+>.
+</P
+><PRE
+> import Prelude hiding ((-), (+), (*), negate, subtract)
+ import Data.Ring.Sugar
+</PRE
+></TD
+></TR
+><TR
+><TD CLASS="s15"
+></TD
+></TR
+><TR
+><TD CLASS="s15"
+></TD
+></TR
+><TR
+><TD CLASS="section1"
+>Documentation</TD
+></TR
+><TR
+><TD CLASS="s15"
+></TD
+></TR
+><TR
+><TD CLASS="decl"
+>module <A HREF="Data-Monoid-Multiplicative-Sugar.html"
+>Data.Monoid.Multiplicative.Sugar</A
+></TD
+></TR
+><TR
+><TD CLASS="s15"
+></TD
+></TR
+><TR
+><TD CLASS="decl"
+>module <A HREF="Data-Ring-Semi-Near.html"
+>Data.Ring.Semi.Near</A
+></TD
+></TR
+><TR
+><TD CLASS="s15"
+></TD
+></TR
+><TR
+><TD CLASS="botbar"
+>Produced by <A HREF="http://www.haskell.org/haddock/"
+>Haddock</A
+> version 2.3.0</TD
+></TR
+></TABLE
+></BODY
+></HTML
+>
addfile ./dist/doc/html/monoids/Data-Ring.html
hunk ./dist/doc/html/monoids/Data-Ring.html 1
+<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd">
+<!--Rendered using the Haskell Html Library v0.2-->
+<HTML
+><HEAD
+><META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=UTF-8"
+><TITLE
+>Data.Ring</TITLE
+><LINK HREF="haddock.css" REL="stylesheet" TYPE="text/css"
+><SCRIPT SRC="haddock-util.js" TYPE="text/javascript"
+></SCRIPT
+></HEAD
+><BODY
+><TABLE CLASS="vanilla" CELLSPACING="0" CELLPADDING="0"
+><TR
+><TD CLASS="topbar"
+><TABLE CLASS="vanilla" CELLSPACING="0" CELLPADDING="0"
+><TR
+><TD
+><IMG SRC="haskell_icon.gif" WIDTH="16" HEIGHT="16" ALT=" "
+></TD
+><TD CLASS="title"
+>monoids-0.1.6: Lots of Monoids</TD
+><TD CLASS="topbut"
+><A HREF="src/Data-Ring.html"
+>Source code</A
+></TD
+><TD CLASS="topbut"
+><A HREF="index.html"
+>Contents</A
+></TD
+><TD CLASS="topbut"
+><A HREF="doc-index.html"
+>Index</A
+></TD
+></TR
+></TABLE
+></TD
+></TR
+><TR
+><TD CLASS="modulebar"
+><TABLE CLASS="vanilla" CELLSPACING="0" CELLPADDING="0"
+><TR
+><TD
+><FONT SIZE="6"
+>Data.Ring</FONT
+></TD
+></TR
+></TABLE
+></TD
+></TR
+><TR
+><TD CLASS="s15"
+></TD
+></TR
+><TR
+><TD CLASS="s15"
+></TD
+></TR
+><TR
+><TD CLASS="s15"
+></TD
+></TR
+><TR
+><TD CLASS="section1"
+>Documentation</TD
+></TR
+><TR
+><TD CLASS="s15"
+></TD
+></TR
+><TR
+><TD CLASS="decl"
+>module <A HREF="Data-Group.html"
+>Data.Group</A
+></TD
+></TR
+><TR
+><TD CLASS="s15"
+></TD
+></TR
+><TR
+><TD CLASS="decl"
+>module <A HREF="Data-Ring-Semi.html"
+>Data.Ring.Semi</A
+></TD
+></TR
+><TR
+><TD CLASS="s15"
+></TD
+></TR
+><TR
+><TD CLASS="topdecl"
+><TABLE CLASS="declbar"
+><TR
+><TD CLASS="declname"
+><SPAN CLASS="keyword"
+>class</SPAN
+> (<A HREF="Data-Group.html#t%3AGroup"
+>Group</A
+> a, <A HREF="Data-Ring-Semi.html#t%3ASemiRing"
+>SemiRing</A
+> a) =&gt; <A NAME="t%3ARing"
+></A
+><B
+>Ring</B
+> a </TD
+><TD CLASS="declbut"
+><A HREF="src/Data-Ring.html#Ring"
+>Source</A
+></TD
+></TR
+></TABLE
+></TD
+></TR
+><TR
+><TD CLASS="body"
+><TABLE CLASS="vanilla" CELLSPACING="0" CELLPADDING="0"
+><TR
+><TD CLASS="s8"
+></TD
+></TR
+><TR
+><TD CLASS="section4"
+><IMG SRC="minus.gif" CLASS="coll" ONCLICK="toggle(this,'i:Ring')" ALT="show/hide"
+> Instances</TD
+></TR
+><TR
+><TD CLASS="body"
+><DIV ID="i:Ring" STYLE="display:block;"
+><TABLE CLASS="vanilla" CELLSPACING="1" CELLPADDING="0"
+><TR
+><TD CLASS="decl"
+><A HREF="Data-Ring.html#t%3ARing"
+>Ring</A
+> <A HREF="Data-Ring-Boolean.html#t%3ABoolRing"
+>BoolRing</A
+></TD
+></TR
+><TR
+><TD CLASS="decl"
+><A HREF="/usr/local/share/doc/ghc/libraries/base/Prelude.html#t%3ANum"
+>Num</A
+> a =&gt; <A HREF="Data-Ring.html#t%3ARing"
+>Ring</A
+> (<A HREF="Data-Ring-FromNum.html#t%3AFromNum"
+>FromNum</A
+> a)</TD
+></TR
+></TABLE
+></DIV
+></TD
+></TR
+></TABLE
+></TD
+></TR
+><TR
+><TD CLASS="s15"
+></TD
+></TR
+><TR
+><TD CLASS="botbar"
+>Produced by <A HREF="http://www.haskell.org/haddock/"
+>Haddock</A
+> version 2.3.0</TD
+></TR
+></TABLE
+></BODY
+></HTML
+>
addfile ./dist/doc/html/monoids/doc-index.html
hunk ./dist/doc/html/monoids/doc-index.html 1
+<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd">
+<!--Rendered using the Haskell Html Library v0.2-->
+<HTML
+><HEAD
+><META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=UTF-8"
+><TITLE
+>monoids-0.1.6: Lots of Monoids (Index)</TITLE
+><LINK HREF="haddock.css" REL="stylesheet" TYPE="text/css"
+><SCRIPT SRC="haddock-util.js" TYPE="text/javascript"
+></SCRIPT
+></HEAD
+><BODY
+><TABLE CLASS="vanilla" CELLSPACING="0" CELLPADDING="0"
+><TR
+><TD CLASS="topbar"
+><TABLE CLASS="vanilla" CELLSPACING="0" CELLPADDING="0"
+><TR
+><TD
+><IMG SRC="haskell_icon.gif" WIDTH="16" HEIGHT="16" ALT=" "
+></TD
+><TD CLASS="title"
+>monoids-0.1.6: Lots of Monoids</TD
+><TD CLASS="topbut"
+><A HREF="index.html"
+>Contents</A
+></TD
+><TD CLASS="topbut"
+><A HREF="doc-index.html"
+>Index</A
+></TD
+></TR
+></TABLE
+></TD
+></TR
+><TR
+><TD COLSPAN="2" STYLE="padding-top:5px;"
+><FORM onsubmit="full_search(); return false;" ACTION=""
+>Search: <INPUT ID="searchbox" onkeyup="quick_search()"
+> <INPUT VALUE="Search" TYPE="submit"
+> <SPAN ID="searchmsg"
+> </SPAN
+></FORM
+></TD
+></TR
+><TR
+><TD
+><TABLE ID="indexlist" CELLPADDING="0" CELLSPACING="5"
+><TR CLASS="indexrow"
+><TD CLASS="indexentry"
+>*</TD
+><TD CLASS="indexlinks"
+><A HREF="Data-Monoid-Multiplicative-Sugar.html#v%3A%2A"
+>Data.Monoid.Multiplicative.Sugar</A
+>, Data.Ring.Sugar</TD
+></TR
+><TR CLASS="indexrow"
+><TD CLASS="indexentry"
+>+</TD
+><TD CLASS="indexlinks"
+><A HREF="Data-Monoid-Additive-Sugar.html#v%3A%2B"
+>Data.Monoid.Additive.Sugar</A
+>, Data.Monoid.Multiplicative.Sugar, Data.Ring.Sugar, Data.Group.Sugar</TD
+></TR
+><TR CLASS="indexrow"
+><TD CLASS="indexentry"
+>-</TD
+><TD CLASS="indexlinks"
+><A HREF="Data-Group-Sugar.html#v%3A-"
+>Data.Group.Sugar</A
+></TD
+></TR
+><TR CLASS="indexrow"
+><TD CLASS="indexentry"
+>.</TD
+><TD CLASS="indexlinks"
+>Data.Monoid.Categorical</TD
+></TR
+><TR CLASS="indexrow"
+><TD CLASS="indexentry"
+>&lt;&lt;&lt;</TD
+><TD CLASS="indexlinks"
+>Data.Monoid.Categorical</TD
+></TR
+><TR CLASS="indexrow"
+><TD CLASS="indexentry"
+>&gt;&gt;&gt;</TD
+><TD CLASS="indexlinks"
+>Data.Monoid.Categorical</TD
+></TR
+><TR CLASS="indexrow"
+><TD CLASS="indexentry" COLSPAN="2"
+>Action</TD
+></TR
+><TR CLASS="indexrow"
+><TD CLASS="indexannot"
+>1 (Type/Class)</TD
+><TD CLASS="indexlinks"
+><A HREF="Data-Monoid-Monad.html#t%3AAction"
+>Data.Monoid.Monad</A
+></TD
+></TR
+><TR CLASS="indexrow"
+><TD CLASS="indexannot"
+>2 (Data Constructor)</TD
+><TD CLASS="indexlinks"
+><A HREF="Data-Monoid-Monad.html#v%3AAction"
+>Data.Monoid.Monad</A
+></TD
+></TR
+><TR CLASS="indexrow"
+><TD CLASS="indexentry" COLSPAN="2"
+>All</TD
+></TR
+><TR CLASS="indexrow"
+><TD CLASS="indexannot"
+>1 (Data Constructor)</TD
+><TD CLASS="indexlinks"
+>Data.Monoid.Reducer, Data.Monoid.Reducer.Char, Data.Monoid.Reducer.With, Data.Monoid.Lexical.UTF8.Decoder, Data.Monoid.Generator, Data.Monoid.Lexical.SourcePosition, Data.Monoid.Lexical.Words, Data.Monoid.Self, Data.Monoid.FromString, Data.Monoid.Categorical, Data.Monoid.Additive, Data.Monoid.Additive.Sugar, Data.Monoid.Multiplicative, Data.Monoid.Multiplicative.Sugar, Data.Ring.Semi.Near, Data.Monoid.Applicative, Data.Monoid.Monad, Data.Monoid.Combinators, Data.Monoid.Lexical.RunLengthEncoding, Data.Ring.Semi, Data.Ring.Semi.Tropical, Data.Ring.Semi.Ord, Data.Ring.Sugar, Data.Group, Data.Group.Combinators, Data.Group.Sugar, Data.Ring, Data.Ring.Boolean, Data.Ring.FromNum</TD
+></TR
+><TR CLASS="indexrow"
+><TD CLASS="indexannot"
+>2 (Type/Class)</TD
+><TD CLASS="indexlinks"
+>Data.Monoid.Reducer, Data.Monoid.Reducer.Char, Data.Monoid.Reducer.With, Data.Monoid.Lexical.UTF8.Decoder, Data.Monoid.Generator, Data.Monoid.Lexical.SourcePosition, Data.Monoid.Lexical.Words, Data.Monoid.Self, Data.Monoid.FromString, Data.Monoid.Categorical, Data.Monoid.Additive, Data.Monoid.Additive.Sugar, Data.Monoid.Multiplicative, Data.Monoid.Multiplicative.Sugar, Data.Ring.Semi.Near, Data.Monoid.Applicative, Data.Monoid.Monad, Data.Monoid.Combinators, Data.Monoid.Lexical.RunLengthEncoding, Data.Ring.Semi, Data.Ring.Semi.Tropical, Data.Ring.Semi.Ord, Data.Ring.Sugar, Data.Group, Data.Group.Combinators, Data.Group.Sugar, Data.Ring, Data.Ring.Boolean, Data.Ring.FromNum</TD
+></TR
+><TR CLASS="indexrow"
+><TD CLASS="indexentry"
+>all</TD
+><TD CLASS="indexlinks"
+><A HREF="Data-Monoid-Combinators.html#v%3Aall"
+>Data.Monoid.Combinators</A
+></TD
+></TR
+><TR CLASS="indexrow"
+><TD CLASS="indexentry"
+>and</TD
+><TD CLASS="indexlinks"
+><A HREF="Data-Monoid-Combinators.html#v%3Aand"
+>Data.Monoid.Combinators</A
+></TD
+></TR
+><TR CLASS="indexrow"
+><TD CLASS="indexentry" COLSPAN="2"
+>Any</TD
+></TR
+><TR CLASS="indexrow"
+><TD CLASS="indexannot"
+>1 (Data Constructor)</TD
+><TD CLASS="indexlinks"
+>Data.Monoid.Reducer, Data.Monoid.Reducer.Char, Data.Monoid.Reducer.With, Data.Monoid.Lexical.UTF8.Decoder, Data.Monoid.Generator, Data.Monoid.Lexical.SourcePosition, Data.Monoid.Lexical.Words, Data.Monoid.Self, Data.Monoid.FromString, Data.Monoid.Categorical, Data.Monoid.Additive, Data.Monoid.Additive.Sugar, Data.Monoid.Multiplicative, Data.Monoid.Multiplicative.Sugar, Data.Ring.Semi.Near, Data.Monoid.Applicative, Data.Monoid.Monad, Data.Monoid.Combinators, Data.Monoid.Lexical.RunLengthEncoding, Data.Ring.Semi, Data.Ring.Semi.Tropical, Data.Ring.Semi.Ord, Data.Ring.Sugar, Data.Group, Data.Group.Combinators, Data.Group.Sugar, Data.Ring, Data.Ring.Boolean, Data.Ring.FromNum</TD
+></TR
+><TR CLASS="indexrow"
+><TD CLASS="indexannot"
+>2 (Type/Class)</TD
+><TD CLASS="indexlinks"
+>Data.Monoid.Reducer, Data.Monoid.Reducer.Char, Data.Monoid.Reducer.With, Data.Monoid.Lexical.UTF8.Decoder, Data.Monoid.Generator, Data.Monoid.Lexical.SourcePosition, Data.Monoid.Lexical.Words, Data.Monoid.Self, Data.Monoid.FromString, Data.Monoid.Categorical, Data.Monoid.Additive, Data.Monoid.Additive.Sugar, Data.Monoid.Multiplicative, Data.Monoid.Multiplicative.Sugar, Data.Ring.Semi.Near, Data.Monoid.Applicative, Data.Monoid.Monad, Data.Monoid.Combinators, Data.Monoid.Lexical.RunLengthEncoding, Data.Ring.Semi, Data.Ring.Semi.Tropical, Data.Ring.Semi.Ord, Data.Ring.Sugar, Data.Group, Data.Group.Combinators, Data.Group.Sugar, Data.Ring, Data.Ring.Boolean, Data.Ring.FromNum</TD
+></TR
+><TR CLASS="indexrow"
+><TD CLASS="indexentry"
+>any</TD
+><TD CLASS="indexlinks"
+><A HREF="Data-Monoid-Combinators.html#v%3Aany"
+>Data.Monoid.Combinators</A
+></TD
+></TR
+><TR CLASS="indexrow"
+><TD CLASS="indexentry"
+>appEndo</TD
+><TD CLASS="indexlinks"
+>Data.Monoid.Reducer, Data.Monoid.Reducer.Char, Data.Monoid.Reducer.With, Data.Monoid.Lexical.UTF8.Decoder, Data.Monoid.Generator, Data.Monoid.Lexical.SourcePosition, Data.Monoid.Lexical.Words, Data.Monoid.Self, Data.Monoid.FromString, Data.Monoid.Categorical, Data.Monoid.Additive, Data.Monoid.Additive.Sugar, Data.Monoid.Multiplicative, Data.Monoid.Multiplicative.Sugar, Data.Ring.Semi.Near, Data.Monoid.Applicative, Data.Monoid.Monad, Data.Monoid.Combinators, Data.Monoid.Lexical.RunLengthEncoding, Data.Ring.Semi, Data.Ring.Semi.Tropical, Data.Ring.Semi.Ord, Data.Ring.Sugar, Data.Group, Data.Group.Combinators, Data.Group.Sugar, Data.Ring, Data.Ring.Boolean, Data.Ring.FromNum</TD
+></TR
+><TR CLASS="indexrow"
+><TD CLASS="indexentry" COLSPAN="2"
+>BoolRing</TD
+></TR
+><TR CLASS="indexrow"
+><TD CLASS="indexannot"
+>1 (Type/Class)</TD
+><TD CLASS="indexlinks"
+><A HREF="Data-Ring-Boolean.html#t%3ABoolRing"
+>Data.Ring.Boolean</A
+></TD
+></TR
+><TR CLASS="indexrow"
+><TD CLASS="indexannot"
+>2 (Data Constructor)</TD
+><TD CLASS="indexlinks"
+><A HREF="Data-Ring-Boolean.html#v%3ABoolRing"
+>Data.Ring.Boolean</A
+></TD
+></TR
+><TR CLASS="indexrow"
+><TD CLASS="indexentry"
+>Category</TD
+><TD CLASS="indexlinks"
+>Data.Monoid.Categorical</TD
+></TR
+><TR CLASS="indexrow"
+><TD CLASS="indexentry" COLSPAN="2"
+>Char8</TD
+></TR
+><TR CLASS="indexrow"
+><TD CLASS="indexannot"
+>1 (Type/Class)</TD
+><TD CLASS="indexlinks"
+><A HREF="Data-Monoid-Generator.html#t%3AChar8"
+>Data.Monoid.Generator</A
+>, Data.Monoid.Combinators</TD
+></TR
+><TR CLASS="indexrow"
+><TD CLASS="indexannot"
+>2 (Data Constructor)</TD
+><TD CLASS="indexlinks"
+><A HREF="Data-Monoid-Generator.html#v%3AChar8"
+>Data.Monoid.Generator</A
+>, Data.Monoid.Combinators</TD
+></TR
+><TR CLASS="indexrow"
+><TD CLASS="indexentry"
+>CharReducer</TD
+><TD CLASS="indexlinks"
+><A HREF="Data-Monoid-Reducer-Char.html#t%3ACharReducer"
+>Data.Monoid.Reducer.Char</A
+>, Data.Monoid.Lexical.UTF8.Decoder, Data.Monoid.Lexical.SourcePosition, Data.Monoid.Lexical.Words</TD
+></TR
+><TR CLASS="indexrow"
+><TD CLASS="indexentry"
+>concatMap</TD
+><TD CLASS="indexlinks"
+><A HREF="Data-Monoid-Combinators.html#v%3AconcatMap"
+>Data.Monoid.Combinators</A
+></TD
+></TR
+><TR CLASS="indexrow"
+><TD CLASS="indexentry"
+>cons</TD
+><TD CLASS="indexlinks"
+><A HREF="Data-Monoid-Reducer.html#v%3Acons"
+>Data.Monoid.Reducer</A
+>, Data.Monoid.Reducer.Char, Data.Monoid.Reducer.With, Data.Monoid.Union, Data.Monoid.Lexical.UTF8.Decoder, Data.Monoid.Generator, Data.Monoid.Lexical.SourcePosition, Data.Monoid.Lexical.Words, Data.Monoid.Self, Data.Monoid.FromString, Data.Monoid.Categorical, Data.Monoid.Applicative, Data.Monoid.Monad, Data.Monoid.Combinators, Data.Monoid.Lexical.RunLengthEncoding</TD
+></TR
+><TR CLASS="indexrow"
+><TD CLASS="indexentry"
+>cycle</TD
+><TD CLASS="indexlinks"
+><A HREF="Data-Monoid-Combinators.html#v%3Acycle"
+>Data.Monoid.Combinators</A
+></TD
+></TR
+><TR CLASS="indexrow"
+><TD CLASS="indexentry" COLSPAN="2"
+>Dual</TD
+></TR
+><TR CLASS="indexrow"
+><TD CLASS="indexannot"
+>1 (Data Constructor)</TD
+><TD CLASS="indexlinks"
+>Data.Monoid.Reducer, Data.Monoid.Reducer.Char, Data.Monoid.Reducer.With, Data.Monoid.Lexical.UTF8.Decoder, Data.Monoid.Generator, Data.Monoid.Lexical.SourcePosition, Data.Monoid.Lexical.Words, Data.Monoid.Self, Data.Monoid.FromString, Data.Monoid.Categorical, Data.Monoid.Additive, Data.Monoid.Additive.Sugar, Data.Monoid.Multiplicative, Data.Monoid.Multiplicative.Sugar, Data.Ring.Semi.Near, Data.Monoid.Applicative, Data.Monoid.Monad, Data.Monoid.Combinators, Data.Monoid.Lexical.RunLengthEncoding, Data.Ring.Semi, Data.Ring.Semi.Tropical, Data.Ring.Semi.Ord, Data.Ring.Sugar, Data.Group, Data.Group.Combinators, Data.Group.Sugar, Data.Ring, Data.Ring.Boolean, Data.Ring.FromNum</TD
+></TR
+><TR CLASS="indexrow"
+><TD CLASS="indexannot"
+>2 (Type/Class)</TD
+><TD CLASS="indexlinks"
+>Data.Monoid.Reducer, Data.Monoid.Reducer.Char, Data.Monoid.Reducer.With, Data.Monoid.Lexical.UTF8.Decoder, Data.Monoid.Generator, Data.Monoid.Lexical.SourcePosition, Data.Monoid.Lexical.Words, Data.Monoid.Self, Data.Monoid.FromString, Data.Monoid.Categorical, Data.Monoid.Additive, Data.Monoid.Additive.Sugar, Data.Monoid.Multiplicative, Data.Monoid.Multiplicative.Sugar, Data.Ring.Semi.Near, Data.Monoid.Applicative, Data.Monoid.Monad, Data.Monoid.Combinators, Data.Monoid.Lexical.RunLengthEncoding, Data.Ring.Semi, Data.Ring.Semi.Tropical, Data.Ring.Semi.Ord, Data.Ring.Sugar, Data.Group, Data.Group.Combinators, Data.Group.Sugar, Data.Ring, Data.Ring.Boolean, Data.Ring.FromNum</TD
+></TR
+><TR CLASS="indexrow"
+><TD CLASS="indexentry"
+>Elem</TD
+><TD CLASS="indexlinks"
+><A HREF="Data-Monoid-Generator.html#t%3AElem"
+>Data.Monoid.Generator</A
+>, Data.Monoid.Combinators</TD
+></TR
+><TR CLASS="indexrow"
+><TD CLASS="indexentry"
+>elem</TD
+><TD CLASS="indexlinks"
+><A HREF="Data-Monoid-Combinators.html#v%3Aelem"
+>Data.Monoid.Combinators</A
+></TD
+></TR
+><TR CLASS="indexrow"
+><TD CLASS="indexentry"
+>empty</TD
+><TD CLASS="indexlinks"
+><A HREF="Data-Monoid-Union.html#v%3Aempty"
+>Data.Monoid.Union</A
+></TD
+></TR
+><TR CLASS="indexrow"
+><TD CLASS="indexentry"
+>emptyWith</TD
+><TD CLASS="indexlinks"
+><A HREF="Data-Monoid-Union.html#v%3AemptyWith"
+>Data.Monoid.Union</A
+></TD
+></TR
+><TR CLASS="indexrow"
+><TD CLASS="indexentry" COLSPAN="2"
+>Endo</TD
+></TR
+><TR CLASS="indexrow"
+><TD CLASS="indexannot"
+>1 (Data Constructor)</TD
+><TD CLASS="indexlinks"
+>Data.Monoid.Reducer, Data.Monoid.Reducer.Char, Data.Monoid.Reducer.With, Data.Monoid.Lexical.UTF8.Decoder, Data.Monoid.Generator, Data.Monoid.Lexical.SourcePosition, Data.Monoid.Lexical.Words, Data.Monoid.Self, Data.Monoid.FromString, Data.Monoid.Categorical, Data.Monoid.Additive, Data.Monoid.Additive.Sugar, Data.Monoid.Multiplicative, Data.Monoid.Multiplicative.Sugar, Data.Ring.Semi.Near, Data.Monoid.Applicative, Data.Monoid.Monad, Data.Monoid.Combinators, Data.Monoid.Lexical.RunLengthEncoding, Data.Ring.Semi, Data.Ring.Semi.Tropical, Data.Ring.Semi.Ord, Data.Ring.Sugar, Data.Group, Data.Group.Combinators, Data.Group.Sugar, Data.Ring, Data.Ring.Boolean, Data.Ring.FromNum</TD
+></TR
+><TR CLASS="indexrow"
+><TD CLASS="indexannot"
+>2 (Type/Class)</TD
+><TD CLASS="indexlinks"
+>Data.Monoid.Reducer, Data.Monoid.Reducer.Char, Data.Monoid.Reducer.With, Data.Monoid.Lexical.UTF8.Decoder, Data.Monoid.Generator, Data.Monoid.Lexical.SourcePosition, Data.Monoid.Lexical.Words, Data.Monoid.Self, Data.Monoid.FromString, Data.Monoid.Categorical, Data.Monoid.Additive, Data.Monoid.Additive.Sugar, Data.Monoid.Multiplicative, Data.Monoid.Multiplicative.Sugar, Data.Ring.Semi.Near, Data.Monoid.Applicative, Data.Monoid.Monad, Data.Monoid.Combinators, Data.Monoid.Lexical.RunLengthEncoding, Data.Ring.Semi, Data.Ring.Semi.Tropical, Data.Ring.Semi.Ord, Data.Ring.Sugar, Data.Group, Data.Group.Combinators, Data.Group.Sugar, Data.Ring, Data.Ring.Boolean, Data.Ring.FromNum</TD
+></TR
+><TR CLASS="indexrow"
+><TD CLASS="indexentry" COLSPAN="2"
+>Exp</TD
+></TR
+><TR CLASS="indexrow"
+><TD CLASS="indexannot"
+>1 (Type/Class)</TD
+><TD CLASS="indexlinks"
+><A HREF="Data-Monoid-Multiplicative.html#t%3AExp"
+>Data.Monoid.Multiplicative</A
+>, Data.Monoid.Multiplicative.Sugar, Data.Ring.Semi.Near, Data.Monoid.Applicative, Data.Monoid.Monad, Data.Ring.Semi, Data.Ring.Semi.Tropical, Data.Ring.Semi.Ord, Data.Ring.Sugar, Data.Ring, Data.Ring.Boolean, Data.Ring.FromNum</TD
+></TR
+><TR CLASS="indexrow"
+><TD CLASS="indexannot"
+>2 (Data Constructor)</TD
+><TD CLASS="indexlinks"
+><A HREF="Data-Monoid-Multiplicative.html#v%3AExp"
+>Data.Monoid.Multiplicative</A
+>, Data.Monoid.Multiplicative.Sugar, Data.Ring.Semi.Near, Data.Monoid.Applicative, Data.Monoid.Monad, Data.Ring.Semi, Data.Ring.Semi.Tropical, Data.Ring.Semi.Ord, Data.Ring.Sugar, Data.Ring, Data.Ring.Boolean, Data.Ring.FromNum</TD
+></TR
+><TR CLASS="indexrow"
+><TD CLASS="indexentry"
+>filter</TD
+><TD CLASS="indexlinks"
+><A HREF="Data-Monoid-Combinators.html#v%3Afilter"
+>Data.Monoid.Combinators</A
+></TD
+></TR
+><TR CLASS="indexrow"
+><TD CLASS="indexentry"
+>find</TD
+><TD CLASS="indexlinks"
+><A HREF="Data-Monoid-Combinators.html#v%3Afind"
+>Data.Monoid.Combinators</A
+></TD
+></TR
+><TR CLASS="indexrow"
+><TD CLASS="indexentry" COLSPAN="2"
+>First</TD
+></TR
+><TR CLASS="indexrow"
+><TD CLASS="indexannot"
+>1 (Data Constructor)</TD
+><TD CLASS="indexlinks"
+>Data.Monoid.Reducer, Data.Monoid.Reducer.Char, Data.Monoid.Reducer.With, Data.Monoid.Lexical.UTF8.Decoder, Data.Monoid.Generator, Data.Monoid.Lexical.SourcePosition, Data.Monoid.Lexical.Words, Data.Monoid.Self, Data.Monoid.FromString, Data.Monoid.Categorical, Data.Monoid.Additive, Data.Monoid.Additive.Sugar, Data.Monoid.Multiplicative, Data.Monoid.Multiplicative.Sugar, Data.Ring.Semi.Near, Data.Monoid.Applicative, Data.Monoid.Monad, Data.Monoid.Combinators, Data.Monoid.Lexical.RunLengthEncoding, Data.Ring.Semi, Data.Ring.Semi.Tropical, Data.Ring.Semi.Ord, Data.Ring.Sugar, Data.Group, Data.Group.Combinators, Data.Group.Sugar, Data.Ring, Data.Ring.Boolean, Data.Ring.FromNum</TD
+></TR
+><TR CLASS="indexrow"
+><TD CLASS="indexannot"
+>2 (Type/Class)</TD
+><TD CLASS="indexlinks"
+>Data.Monoid.Reducer, Data.Monoid.Reducer.Char, Data.Monoid.Reducer.With, Data.Monoid.Lexical.UTF8.Decoder, Data.Monoid.Generator, Data.Monoid.Lexical.SourcePosition, Data.Monoid.Lexical.Words, Data.Monoid.Self, Data.Monoid.FromString, Data.Monoid.Categorical, Data.Monoid.Additive, Data.Monoid.Additive.Sugar, Data.Monoid.Multiplicative, Data.Monoid.Multiplicative.Sugar, Data.Ring.Semi.Near, Data.Monoid.Applicative, Data.Monoid.Monad, Data.Monoid.Combinators, Data.Monoid.Lexical.RunLengthEncoding, Data.Ring.Semi, Data.Ring.Semi.Tropical, Data.Ring.Semi.Ord, Data.Ring.Sugar, Data.Group, Data.Group.Combinators, Data.Group.Sugar, Data.Ring, Data.Ring.Boolean, Data.Ring.FromNum</TD
+></TR
+><TR CLASS="indexrow"
+><TD CLASS="indexentry"
+>fold</TD
+><TD CLASS="indexlinks"
+><A HREF="Data-Monoid-Combinators.html#v%3Afold"
+>Data.Monoid.Combinators</A
+></TD
+></TR
+><TR CLASS="indexrow"
+><TD CLASS="indexentry"
+>foldMap</TD
+><TD CLASS="indexlinks"
+><A HREF="Data-Monoid-Combinators.html#v%3AfoldMap"
+>Data.Monoid.Combinators</A
+></TD
+></TR
+><TR CLASS="indexrow"
+><TD CLASS="indexentry"
+>foldMapReduce</TD
+><TD CLASS="indexlinks"
+><A HREF="Data-Monoid-Reducer.html#v%3AfoldMapReduce"
+>Data.Monoid.Reducer</A
+>, Data.Monoid.Reducer.Char, Data.Monoid.Reducer.With, Data.Monoid.Lexical.UTF8.Decoder, Data.Monoid.Generator, Data.Monoid.Lexical.SourcePosition, Data.Monoid.Lexical.Words, Data.Monoid.Self, Data.Monoid.FromString, Data.Monoid.Categorical, Data.Monoid.Applicative, Data.Monoid.Monad, Data.Monoid.Combinators, Data.Monoid.Lexical.RunLengthEncoding</TD
+></TR
+><TR CLASS="indexrow"
+><TD CLASS="indexentry"
+>foldReduce</TD
+><TD CLASS="indexlinks"
+><A HREF="Data-Monoid-Reducer.html#v%3AfoldReduce"
+>Data.Monoid.Reducer</A
+>, Data.Monoid.Reducer.Char, Data.Monoid.Reducer.With, Data.Monoid.Lexical.UTF8.Decoder, Data.Monoid.Generator, Data.Monoid.Lexical.SourcePosition, Data.Monoid.Lexical.Words, Data.Monoid.Self, Data.Monoid.FromString, Data.Monoid.Categorical, Data.Monoid.Applicative, Data.Monoid.Monad, Data.Monoid.Combinators, Data.Monoid.Lexical.RunLengthEncoding</TD
+></TR
+><TR CLASS="indexrow"
+><TD CLASS="indexentry"
+>forM_</TD
+><TD CLASS="indexlinks"
+><A HREF="Data-Monoid-Combinators.html#v%3AforM_"
+>Data.Monoid.Combinators</A
+></TD
+></TR
+><TR CLASS="indexrow"
+><TD CLASS="indexentry"
+>for_</TD
+><TD CLASS="indexlinks"
+><A HREF="Data-Monoid-Combinators.html#v%3Afor_"
+>Data.Monoid.Combinators</A
+></TD
+></TR
+><TR CLASS="indexrow"
+><TD CLASS="indexentry"
+>fromChar</TD
+><TD CLASS="indexlinks"
+><A HREF="Data-Monoid-Reducer-Char.html#v%3AfromChar"
+>Data.Monoid.Reducer.Char</A
+>, Data.Monoid.Lexical.UTF8.Decoder, Data.Monoid.Lexical.SourcePosition, Data.Monoid.Lexical.Words</TD
+></TR
+><TR CLASS="indexrow"
+><TD CLASS="indexentry" COLSPAN="2"
+>FromNum</TD
+></TR
+><TR CLASS="indexrow"
+><TD CLASS="indexannot"
+>1 (Type/Class)</TD
+><TD CLASS="indexlinks"
+><A HREF="Data-Ring-FromNum.html#t%3AFromNum"
+>Data.Ring.FromNum</A
+></TD
+></TR
+><TR CLASS="indexrow"
+><TD CLASS="indexannot"
+>2 (Data Constructor)</TD
+><TD CLASS="indexlinks"
+><A HREF="Data-Ring-FromNum.html#v%3AFromNum"
+>Data.Ring.FromNum</A
+></TD
+></TR
+><TR CLASS="indexrow"
+><TD CLASS="indexentry" COLSPAN="2"
+>FromString</TD
+></TR
+><TR CLASS="indexrow"
+><TD CLASS="indexannot"
+>1 (Type/Class)</TD
+><TD CLASS="indexlinks"
+><A HREF="Data-Monoid-FromString.html#t%3AFromString"
+>Data.Monoid.FromString</A
+></TD
+></TR
+><TR CLASS="indexrow"
+><TD CLASS="indexannot"
+>2 (Data Constructor)</TD
+><TD CLASS="indexlinks"
+><A HREF="Data-Monoid-FromString.html#v%3AFromString"
+>Data.Monoid.FromString</A
+></TD
+></TR
+><TR CLASS="indexrow"
+><TD CLASS="indexentry" COLSPAN="2"
+>GEndo</TD
+></TR
+><TR CLASS="indexrow"
+><TD CLASS="indexannot"
+>1 (Type/Class)</TD
+><TD CLASS="indexlinks"
+><A HREF="Data-Monoid-Categorical.html#t%3AGEndo"
+>Data.Monoid.Categorical</A
+></TD
+></TR
+><TR CLASS="indexrow"
+><TD CLASS="indexannot"
+>2 (Data Constructor)</TD
+><TD CLASS="indexlinks"
+><A HREF="Data-Monoid-Categorical.html#v%3AGEndo"
+>Data.Monoid.Categorical</A
+></TD
+></TR
+><TR CLASS="indexrow"
+><TD CLASS="indexentry"
+>Generator</TD
+><TD CLASS="indexlinks"
+><A HREF="Data-Monoid-Generator.html#t%3AGenerator"
+>Data.Monoid.Generator</A
+>, Data.Monoid.Combinators</TD
+></TR
+><TR CLASS="indexrow"
+><TD CLASS="indexentry"
+>getAction</TD
+><TD CLASS="indexlinks"
+><A HREF="Data-Monoid-Monad.html#v%3AgetAction"
+>Data.Monoid.Monad</A
+></TD
+></TR
+><TR CLASS="indexrow"
+><TD CLASS="indexentry"
+>getAll</TD
+><TD CLASS="indexlinks"
+>Data.Monoid.Reducer, Data.Monoid.Reducer.Char, Data.Monoid.Reducer.With, Data.Monoid.Lexical.UTF8.Decoder, Data.Monoid.Generator, Data.Monoid.Lexical.SourcePosition, Data.Monoid.Lexical.Words, Data.Monoid.Self, Data.Monoid.FromString, Data.Monoid.Categorical, Data.Monoid.Additive, Data.Monoid.Additive.Sugar, Data.Monoid.Multiplicative, Data.Monoid.Multiplicative.Sugar, Data.Ring.Semi.Near, Data.Monoid.Applicative, Data.Monoid.Monad, Data.Monoid.Combinators, Data.Monoid.Lexical.RunLengthEncoding, Data.Ring.Semi, Data.Ring.Semi.Tropical, Data.Ring.Semi.Ord, Data.Ring.Sugar, Data.Group, Data.Group.Combinators, Data.Group.Sugar, Data.Ring, Data.Ring.Boolean, Data.Ring.FromNum</TD
+></TR
+><TR CLASS="indexrow"
+><TD CLASS="indexentry"
+>getAny</TD
+><TD CLASS="indexlinks"
+>Data.Monoid.Reducer, Data.Monoid.Reducer.Char, Data.Monoid.Reducer.With, Data.Monoid.Lexical.UTF8.Decoder, Data.Monoid.Generator, Data.Monoid.Lexical.SourcePosition, Data.Monoid.Lexical.Words, Data.Monoid.Self, Data.Monoid.FromString, Data.Monoid.Categorical, Data.Monoid.Additive, Data.Monoid.Additive.Sugar, Data.Monoid.Multiplicative, Data.Monoid.Multiplicative.Sugar, Data.Ring.Semi.Near, Data.Monoid.Applicative, Data.Monoid.Monad, Data.Monoid.Combinators, Data.Monoid.Lexical.RunLengthEncoding, Data.Ring.Semi, Data.Ring.Semi.Tropical, Data.Ring.Semi.Ord, Data.Ring.Sugar, Data.Group, Data.Group.Combinators, Data.Group.Sugar, Data.Ring, Data.Ring.Boolean, Data.Ring.FromNum</TD
+></TR
+><TR CLASS="indexrow"
+><TD CLASS="indexentry"
+>getBoolRing</TD
+><TD CLASS="indexlinks"
+><A HREF="Data-Ring-Boolean.html#v%3AgetBoolRing"
+>Data.Ring.Boolean</A
+></TD
+></TR
+><TR CLASS="indexrow"
+><TD CLASS="indexentry"
+>getChar8</TD
+><TD CLASS="indexlinks"
+><A HREF="Data-Monoid-Generator.html#v%3AgetChar8"
+>Data.Monoid.Generator</A
+>, Data.Monoid.Combinators</TD
+></TR
+><TR CLASS="indexrow"
+><TD CLASS="indexentry"
+>getDual</TD
+><TD CLASS="indexlinks"
+>Data.Monoid.Reducer, Data.Monoid.Reducer.Char, Data.Monoid.Reducer.With, Data.Monoid.Lexical.UTF8.Decoder, Data.Monoid.Generator, Data.Monoid.Lexical.SourcePosition, Data.Monoid.Lexical.Words, Data.Monoid.Self, Data.Monoid.FromString, Data.Monoid.Categorical, Data.Monoid.Additive, Data.Monoid.Additive.Sugar, Data.Monoid.Multiplicative, Data.Monoid.Multiplicative.Sugar, Data.Ring.Semi.Near, Data.Monoid.Applicative, Data.Monoid.Monad, Data.Monoid.Combinators, Data.Monoid.Lexical.RunLengthEncoding, Data.Ring.Semi, Data.Ring.Semi.Tropical, Data.Ring.Semi.Ord, Data.Ring.Sugar, Data.Group, Data.Group.Combinators, Data.Group.Sugar, Data.Ring, Data.Ring.Boolean, Data.Ring.FromNum</TD
+></TR
+><TR CLASS="indexrow"
+><TD CLASS="indexentry"
+>getExp</TD
+><TD CLASS="indexlinks"
+><A HREF="Data-Monoid-Multiplicative.html#v%3AgetExp"
+>Data.Monoid.Multiplicative</A
+>, Data.Monoid.Multiplicative.Sugar, Data.Ring.Semi.Near, Data.Monoid.Applicative, Data.Monoid.Monad, Data.Ring.Semi, Data.Ring.Semi.Tropical, Data.Ring.Semi.Ord, Data.Ring.Sugar, Data.Ring, Data.Ring.Boolean, Data.Ring.FromNum</TD
+></TR
+><TR CLASS="indexrow"
+><TD CLASS="indexentry"
+>getFirst</TD
+><TD CLASS="indexlinks"
+>Data.Monoid.Reducer, Data.Monoid.Reducer.Char, Data.Monoid.Reducer.With, Data.Monoid.Lexical.UTF8.Decoder, Data.Monoid.Generator, Data.Monoid.Lexical.SourcePosition, Data.Monoid.Lexical.Words, Data.Monoid.Self, Data.Monoid.FromString, Data.Monoid.Categorical, Data.Monoid.Additive, Data.Monoid.Additive.Sugar, Data.Monoid.Multiplicative, Data.Monoid.Multiplicative.Sugar, Data.Ring.Semi.Near, Data.Monoid.Applicative, Data.Monoid.Monad, Data.Monoid.Combinators, Data.Monoid.Lexical.RunLengthEncoding, Data.Ring.Semi, Data.Ring.Semi.Tropical, Data.Ring.Semi.Ord, Data.Ring.Sugar, Data.Group, Data.Group.Combinators, Data.Group.Sugar, Data.Ring, Data.Ring.Boolean, Data.Ring.FromNum</TD
+></TR
+><TR CLASS="indexrow"
+><TD CLASS="indexentry"
+>getFromNum</TD
+><TD CLASS="indexlinks"
+><A HREF="Data-Ring-FromNum.html#v%3AgetFromNum"
+>Data.Ring.FromNum</A
+></TD
+></TR
+><TR CLASS="indexrow"
+><TD CLASS="indexentry"
+>getFromString</TD
+><TD CLASS="indexlinks"
+><A HREF="Data-Monoid-FromString.html#v%3AgetFromString"
+>Data.Monoid.FromString</A
+></TD
+></TR
+><TR CLASS="indexrow"
+><TD CLASS="indexentry"
+>getGEndo</TD
+><TD CLASS="indexlinks"
+><A HREF="Data-Monoid-Categorical.html#v%3AgetGEndo"
+>Data.Monoid.Categorical</A
+></TD
+></TR
+><TR CLASS="indexrow"
+><TD CLASS="indexentry"
+>getKeys</TD
+><TD CLASS="indexlinks"
+><A HREF="Data-Monoid-Generator.html#v%3AgetKeys"
+>Data.Monoid.Generator</A
+>, Data.Monoid.Combinators</TD
+></TR
+><TR CLASS="indexrow"
+><TD CLASS="indexentry"
+>getLast</TD
+><TD CLASS="indexlinks"
+>Data.Monoid.Reducer, Data.Monoid.Reducer.Char, Data.Monoid.Reducer.With, Data.Monoid.Lexical.UTF8.Decoder, Data.Monoid.Generator, Data.Monoid.Lexical.SourcePosition, Data.Monoid.Lexical.Words, Data.Monoid.Self, Data.Monoid.FromString, Data.Monoid.Categorical, Data.Monoid.Additive, Data.Monoid.Additive.Sugar, Data.Monoid.Multiplicative, Data.Monoid.Multiplicative.Sugar, Data.Ring.Semi.Near, Data.Monoid.Applicative, Data.Monoid.Monad, Data.Monoid.Combinators, Data.Monoid.Lexical.RunLengthEncoding, Data.Ring.Semi, Data.Ring.Semi.Tropical, Data.Ring.Semi.Ord, Data.Ring.Sugar, Data.Group, Data.Group.Combinators, Data.Group.Sugar, Data.Ring, Data.Ring.Boolean, Data.Ring.FromNum</TD
+></TR
+><TR CLASS="indexrow"
+><TD CLASS="indexentry"
+>getLog</TD
+><TD CLASS="indexlinks"
+><A HREF="Data-Monoid-Multiplicative.html#v%3AgetLog"
+>Data.Monoid.Multiplicative</A
+>, Data.Monoid.Multiplicative.Sugar, Data.Ring.Semi.Near, Data.Monoid.Applicative, Data.Monoid.Monad, Data.Ring.Semi, Data.Ring.Semi.Tropical, Data.Ring.Semi.Ord, Data.Ring.Sugar, Data.Ring, Data.Ring.Boolean, Data.Ring.FromNum</TD
+></TR
+><TR CLASS="indexrow"
+><TD CLASS="indexentry"
+>getMax</TD
+><TD CLASS="indexlinks"
+><A HREF="Data-Monoid-Ord.html#v%3AgetMax"
+>Data.Monoid.Ord</A
+></TD
+></TR
+><TR CLASS="indexrow"
+><TD CLASS="indexentry"
+>getMaxPriority</TD
+><TD CLASS="indexlinks"
+><A HREF="Data-Monoid-Ord.html#v%3AgetMaxPriority"
+>Data.Monoid.Ord</A
+></TD
+></TR
+><TR CLASS="indexrow"
+><TD CLASS="indexentry"
+>getMin</TD
+><TD CLASS="indexlinks"
+><A HREF="Data-Monoid-Ord.html#v%3AgetMin"
+>Data.Monoid.Ord</A
+></TD
+></TR
+><TR CLASS="indexrow"
+><TD CLASS="indexentry"
+>getMinPriority</TD
+><TD CLASS="indexlinks"
+><A HREF="Data-Monoid-Ord.html#v%3AgetMinPriority"
+>Data.Monoid.Ord</A
+></TD
+></TR
+><TR CLASS="indexrow"
+><TD CLASS="indexentry"
+>getMon</TD
+><TD CLASS="indexlinks"
+><A HREF="Data-Monoid-Categorical.html#v%3AgetMon"
+>Data.Monoid.Categorical</A
+></TD
+></TR
+><TR CLASS="indexrow"
+><TD CLASS="indexentry"
+>getOrder</TD
+><TD CLASS="indexlinks"
+><A HREF="Data-Ring-Semi-Ord.html#v%3AgetOrder"
+>Data.Ring.Semi.Ord</A
+></TD
+></TR
+><TR CLASS="indexrow"
+><TD CLASS="indexentry"
+>getProduct</TD
+><TD CLASS="indexlinks"
+>Data.Monoid.Reducer, Data.Monoid.Reducer.Char, Data.Monoid.Reducer.With, Data.Monoid.Lexical.UTF8.Decoder, Data.Monoid.Generator, Data.Monoid.Lexical.SourcePosition, Data.Monoid.Lexical.Words, Data.Monoid.Self, Data.Monoid.FromString, Data.Monoid.Categorical, Data.Monoid.Additive, Data.Monoid.Additive.Sugar, Data.Monoid.Multiplicative, Data.Monoid.Multiplicative.Sugar, Data.Ring.Semi.Near, Data.Monoid.Applicative, Data.Monoid.Monad, Data.Monoid.Combinators, Data.Monoid.Lexical.RunLengthEncoding, Data.Ring.Semi, Data.Ring.Semi.Tropical, Data.Ring.Semi.Ord, Data.Ring.Sugar, Data.Group, Data.Group.Combinators, Data.Group.Sugar, Data.Ring, Data.Ring.Boolean, Data.Ring.FromNum</TD
+></TR
+><TR CLASS="indexrow"
+><TD CLASS="indexentry"
+>getRLE</TD
+><TD CLASS="indexlinks"
+><A HREF="Data-Monoid-Lexical-RunLengthEncoding.html#v%3AgetRLE"
+>Data.Monoid.Lexical.RunLengthEncoding</A
+></TD
+></TR
+><TR CLASS="indexrow"
+><TD CLASS="indexentry"
+>getSelf</TD
+><TD CLASS="indexlinks"
+><A HREF="Data-Monoid-Self.html#v%3AgetSelf"
+>Data.Monoid.Self</A
+></TD
+></TR
+><TR CLASS="indexrow"
+><TD CLASS="indexentry"
+>getSum</TD
+><TD CLASS="indexlinks"
+>Data.Monoid.Reducer, Data.Monoid.Reducer.Char, Data.Monoid.Reducer.With, Data.Monoid.Lexical.UTF8.Decoder, Data.Monoid.Generator, Data.Monoid.Lexical.SourcePosition, Data.Monoid.Lexical.Words, Data.Monoid.Self, Data.Monoid.FromString, Data.Monoid.Categorical, Data.Monoid.Additive, Data.Monoid.Additive.Sugar, Data.Monoid.Multiplicative, Data.Monoid.Multiplicative.Sugar, Data.Ring.Semi.Near, Data.Monoid.Applicative, Data.Monoid.Monad, Data.Monoid.Combinators, Data.Monoid.Lexical.RunLengthEncoding, Data.Ring.Semi, Data.Ring.Semi.Tropical, Data.Ring.Semi.Ord, Data.Ring.Sugar, Data.Group, Data.Group.Combinators, Data.Group.Sugar, Data.Ring, Data.Ring.Boolean, Data.Ring.FromNum</TD
+></TR
+><TR CLASS="indexrow"
+><TD CLASS="indexentry"
+>getTraversal</TD
+><TD CLASS="indexlinks"
+><A HREF="Data-Monoid-Applicative.html#v%3AgetTraversal"
+>Data.Monoid.Applicative</A
+></TD
+></TR
+><TR CLASS="indexrow"
+><TD CLASS="indexentry"
+>getTropical</TD
+><TD CLASS="indexlinks"
+><A HREF="Data-Ring-Semi-Tropical.html#v%3AgetTropical"
+>Data.Ring.Semi.Tropical</A
+></TD
+></TR
+><TR CLASS="indexrow"
+><TD CLASS="indexentry"
+>getUnion</TD
+><TD CLASS="indexlinks"
+><A HREF="Data-Monoid-Union.html#v%3AgetUnion"
+>Data.Monoid.Union</A
+></TD
+></TR
+><TR CLASS="indexrow"
+><TD CLASS="indexentry"
+>getUnionWith</TD
+><TD CLASS="indexlinks"
+><A HREF="Data-Monoid-Union.html#v%3AgetUnionWith"
+>Data.Monoid.Union</A
+></TD
+></TR
+><TR CLASS="indexrow"
+><TD CLASS="indexentry"
+>getValues</TD
+><TD CLASS="indexlinks"
+><A HREF="Data-Monoid-Generator.html#v%3AgetValues"
+>Data.Monoid.Generator</A
+>, Data.Monoid.Combinators</TD
+></TR
+><TR CLASS="indexrow"
+><TD CLASS="indexentry"
+>getWrappedApplicative</TD
+><TD CLASS="indexlinks"
+><A HREF="Data-Monoid-Applicative.html#v%3AgetWrappedApplicative"
+>Data.Monoid.Applicative</A
+></TD
+></TR
+><TR CLASS="indexrow"
+><TD CLASS="indexentry"
+>getWrappedMonad</TD
+><TD CLASS="indexlinks"
+><A HREF="Data-Monoid-Monad.html#v%3AgetWrappedMonad"
+>Data.Monoid.Monad</A
+></TD
+></TR
+><TR CLASS="indexrow"
+><TD CLASS="indexentry"
+>gnegate</TD
+><TD CLASS="indexlinks"
+><A HREF="Data-Group.html#v%3Agnegate"
+>Data.Group</A
+>, Data.Group.Combinators, Data.Group.Sugar, Data.Ring, Data.Ring.Boolean, Data.Ring.FromNum</TD
+></TR
+><TR CLASS="indexrow"
+><TD CLASS="indexentry"
+>Group</TD
+><TD CLASS="indexlinks"
+><A HREF="Data-Group.html#t%3AGroup"
+>Data.Group</A
+>, Data.Group.Combinators, Data.Group.Sugar, Data.Ring, Data.Ring.Boolean, Data.Ring.FromNum</TD
+></TR
+><TR CLASS="indexrow"
+><TD CLASS="indexentry"
+>gsubtract</TD
+><TD CLASS="indexlinks"
+><A HREF="Data-Group.html#v%3Agsubtract"
+>Data.Group</A
+>, Data.Group.Combinators, Data.Group.Sugar, Data.Ring, Data.Ring.Boolean, Data.Ring.FromNum</TD
+></TR
+><TR CLASS="indexrow"
+><TD CLASS="indexentry"
+>HasUnion</TD
+><TD CLASS="indexlinks"
+><A HREF="Data-Monoid-Union.html#t%3AHasUnion"
+>Data.Monoid.Union</A
+></TD
+></TR
+><TR CLASS="indexrow"
+><TD CLASS="indexentry"
+>HasUnionWith</TD
+><TD CLASS="indexlinks"
+><A HREF="Data-Monoid-Union.html#t%3AHasUnionWith"
+>Data.Monoid.Union</A
+></TD
+></TR
+><TR CLASS="indexrow"
+><TD CLASS="indexentry"
+>id</TD
+><TD CLASS="indexlinks"
+>Data.Monoid.Categorical</TD
+></TR
+><TR CLASS="indexrow"
+><TD CLASS="indexentry" COLSPAN="2"
+>infinity</TD
+></TR
+><TR CLASS="indexrow"
+><TD CLASS="indexannot"
+>1 (Function)</TD
+><TD CLASS="indexlinks"
+><A HREF="Data-Monoid-Ord.html#v%3Ainfinity"
+>Data.Monoid.Ord</A
+></TD
+></TR
+><TR CLASS="indexrow"
+><TD CLASS="indexannot"
+>2 (Function)</TD
+><TD CLASS="indexlinks"
+><A HREF="Data-Ring-Semi-Tropical.html#v%3Ainfinity"
+>Data.Ring.Semi.Tropical</A
+></TD
+></TR
+><TR CLASS="indexrow"
+><TD CLASS="indexentry"
+>invalidChar</TD
+><TD CLASS="indexlinks"
+><A HREF="Data-Monoid-Reducer-Char.html#v%3AinvalidChar"
+>Data.Monoid.Reducer.Char</A
+>, Data.Monoid.Lexical.UTF8.Decoder, Data.Monoid.Lexical.SourcePosition, Data.Monoid.Lexical.Words</TD
+></TR
+><TR CLASS="indexrow"
+><TD CLASS="indexentry" COLSPAN="2"
+>Keys</TD
+></TR
+><TR CLASS="indexrow"
+><TD CLASS="indexannot"
+>1 (Type/Class)</TD
+><TD CLASS="indexlinks"
+><A HREF="Data-Monoid-Generator.html#t%3AKeys"
+>Data.Monoid.Generator</A
+>, Data.Monoid.Combinators</TD
+></TR
+><TR CLASS="indexrow"
+><TD CLASS="indexannot"
+>2 (Data Constructor)</TD
+><TD CLASS="indexlinks"
+><A HREF="Data-Monoid-Generator.html#v%3AKeys"
+>Data.Monoid.Generator</A
+>, Data.Monoid.Combinators</TD
+></TR
+><TR CLASS="indexrow"
+><TD CLASS="indexentry" COLSPAN="2"
+>Last</TD
+></TR
+><TR CLASS="indexrow"
+><TD CLASS="indexannot"
+>1 (Data Constructor)</TD
+><TD CLASS="indexlinks"
+>Data.Monoid.Reducer, Data.Monoid.Reducer.Char, Data.Monoid.Reducer.With, Data.Monoid.Lexical.UTF8.Decoder, Data.Monoid.Generator, Data.Monoid.Lexical.SourcePosition, Data.Monoid.Lexical.Words, Data.Monoid.Self, Data.Monoid.FromString, Data.Monoid.Categorical, Data.Monoid.Additive, Data.Monoid.Additive.Sugar, Data.Monoid.Multiplicative, Data.Monoid.Multiplicative.Sugar, Data.Ring.Semi.Near, Data.Monoid.Applicative, Data.Monoid.Monad, Data.Monoid.Combinators, Data.Monoid.Lexical.RunLengthEncoding, Data.Ring.Semi, Data.Ring.Semi.Tropical, Data.Ring.Semi.Ord, Data.Ring.Sugar, Data.Group, Data.Group.Combinators, Data.Group.Sugar, Data.Ring, Data.Ring.Boolean, Data.Ring.FromNum</TD
+></TR
+><TR CLASS="indexrow"
+><TD CLASS="indexannot"
+>2 (Type/Class)</TD
+><TD CLASS="indexlinks"
+>Data.Monoid.Reducer, Data.Monoid.Reducer.Char, Data.Monoid.Reducer.With, Data.Monoid.Lexical.UTF8.Decoder, Data.Monoid.Generator, Data.Monoid.Lexical.SourcePosition, Data.Monoid.Lexical.Words, Data.Monoid.Self, Data.Monoid.FromString, Data.Monoid.Categorical, Data.Monoid.Additive, Data.Monoid.Additive.Sugar, Data.Monoid.Multiplicative, Data.Monoid.Multiplicative.Sugar, Data.Ring.Semi.Near, Data.Monoid.Applicative, Data.Monoid.Monad, Data.Monoid.Combinators, Data.Monoid.Lexical.RunLengthEncoding, Data.Ring.Semi, Data.Ring.Semi.Tropical, Data.Ring.Semi.Ord, Data.Ring.Sugar, Data.Group, Data.Group.Combinators, Data.Group.Sugar, Data.Ring, Data.Ring.Boolean, Data.Ring.FromNum</TD
+></TR
+><TR CLASS="indexrow"
+><TD CLASS="indexentry"
+>LeftSemiNearRing</TD
+><TD CLASS="indexlinks"
+><A HREF="Data-Ring-Semi-Near.html#t%3ALeftSemiNearRing"
+>Data.Ring.Semi.Near</A
+>, Data.Monoid.Applicative, Data.Monoid.Monad, Data.Ring.Semi, Data.Ring.Semi.Tropical, Data.Ring.Semi.Ord, Data.Ring.Sugar, Data.Ring, Data.Ring.Boolean, Data.Ring.FromNum</TD
+></TR
+><TR CLASS="indexrow"
+><TD CLASS="indexentry"
+>Lines</TD
+><TD CLASS="indexlinks"
+><A HREF="Data-Monoid-Lexical-Words.html#t%3ALines"
+>Data.Monoid.Lexical.Words</A
+></TD
+></TR
+><TR CLASS="indexrow"
+><TD CLASS="indexentry"
+>linesFrom</TD
+><TD CLASS="indexlinks"
+><A HREF="Data-Monoid-Lexical-Words.html#v%3AlinesFrom"
+>Data.Monoid.Lexical.Words</A
+></TD
+></TR
+><TR CLASS="indexrow"
+><TD CLASS="indexentry" COLSPAN="2"
+>Log</TD
+></TR
+><TR CLASS="indexrow"
+><TD CLASS="indexannot"
+>1 (Type/Class)</TD
+><TD CLASS="indexlinks"
+><A HREF="Data-Monoid-Multiplicative.html#t%3ALog"
+>Data.Monoid.Multiplicative</A
+>, Data.Monoid.Multiplicative.Sugar, Data.Ring.Semi.Near, Data.Monoid.Applicative, Data.Monoid.Monad, Data.Ring.Semi, Data.Ring.Semi.Tropical, Data.Ring.Semi.Ord, Data.Ring.Sugar, Data.Ring, Data.Ring.Boolean, Data.Ring.FromNum</TD
+></TR
+><TR CLASS="indexrow"
+><TD CLASS="indexannot"
+>2 (Data Constructor)</TD
+><TD CLASS="indexlinks"
+><A HREF="Data-Monoid-Multiplicative.html#v%3ALog"
+>Data.Monoid.Multiplicative</A
+>, Data.Monoid.Multiplicative.Sugar, Data.Ring.Semi.Near, Data.Monoid.Applicative, Data.Monoid.Monad, Data.Ring.Semi, Data.Ring.Semi.Tropical, Data.Ring.Semi.Ord, Data.Ring.Sugar, Data.Ring, Data.Ring.Boolean, Data.Ring.FromNum</TD
+></TR
+><TR CLASS="indexrow"
+><TD CLASS="indexentry"
+>mapFrom</TD
+><TD CLASS="indexlinks"
+><A HREF="Data-Monoid-Generator.html#v%3AmapFrom"
+>Data.Monoid.Generator</A
+>, Data.Monoid.Combinators</TD
+></TR
+><TR CLASS="indexrow"
+><TD CLASS="indexentry"
+>mapM_</TD
+><TD CLASS="indexlinks"
+><A HREF="Data-Monoid-Combinators.html#v%3AmapM_"
+>Data.Monoid.Combinators</A
+></TD
+></TR
+><TR CLASS="indexrow"
+><TD CLASS="indexentry"
+>mappend</TD
+><TD CLASS="indexlinks"
+>Data.Monoid.Reducer, Data.Monoid.Reducer.Char, Data.Monoid.Reducer.With, Data.Monoid.Union, Data.Monoid.Lexical.UTF8.Decoder, Data.Monoid.Generator, Data.Monoid.Lexical.SourcePosition, Data.Monoid.Lexical.Words, Data.Monoid.Self, Data.Monoid.FromString, Data.Monoid.Categorical, Data.Monoid.Additive, Data.Monoid.Additive.Sugar, Data.Monoid.Multiplicative, Data.Monoid.Multiplicative.Sugar, Data.Ring.Semi.Near, Data.Monoid.Applicative, Data.Monoid.Monad, Data.Monoid.Combinators, Data.Monoid.Lexical.RunLengthEncoding, Data.Ring.Semi, Data.Monoid.Ord, Data.Ring.Semi.Tropical, Data.Ring.Semi.Ord, Data.Ring.Sugar, Data.Group, Data.Group.Combinators, Data.Group.Sugar, Data.Ring, Data.Ring.Boolean, Data.Ring.FromNum</TD
+></TR
+><TR CLASS="indexrow"
+><TD CLASS="indexentry"
+>mapReduce</TD
+><TD CLASS="indexlinks"
+><A HREF="Data-Monoid-Generator.html#v%3AmapReduce"
+>Data.Monoid.Generator</A
+>, Data.Monoid.Combinators</TD
+></TR
+><TR CLASS="indexrow"
+><TD CLASS="indexentry"
+>mapTo</TD
+><TD CLASS="indexlinks"
+><A HREF="Data-Monoid-Generator.html#v%3AmapTo"
+>Data.Monoid.Generator</A
+>, Data.Monoid.Combinators</TD
+></TR
+><TR CLASS="indexrow"
+><TD CLASS="indexentry" COLSPAN="2"
+>Max</TD
+></TR
+><TR CLASS="indexrow"
+><TD CLASS="indexannot"
+>1 (Type/Class)</TD
+><TD CLASS="indexlinks"
+><A HREF="Data-Monoid-Ord.html#t%3AMax"
+>Data.Monoid.Ord</A
+></TD
+></TR
+><TR CLASS="indexrow"
+><TD CLASS="indexannot"
+>2 (Data Constructor)</TD
+><TD CLASS="indexlinks"
+><A HREF="Data-Monoid-Ord.html#v%3AMax"
+>Data.Monoid.Ord</A
+></TD
+></TR
+><TR CLASS="indexrow"
+><TD CLASS="indexentry"
+>MaxBound</TD
+><TD CLASS="indexlinks"
+><A HREF="Data-Ring-Semi-Ord.html#v%3AMaxBound"
+>Data.Ring.Semi.Ord</A
+></TD
+></TR
+><TR CLASS="indexrow"
+><TD CLASS="indexentry" COLSPAN="2"
+>MaxPriority</TD
+></TR
+><TR CLASS="indexrow"
+><TD CLASS="indexannot"
+>1 (Type/Class)</TD
+><TD CLASS="indexlinks"
+><A HREF="Data-Monoid-Ord.html#t%3AMaxPriority"
+>Data.Monoid.Ord</A
+></TD
+></TR
+><TR CLASS="indexrow"
+><TD CLASS="indexannot"
+>2 (Data Constructor)</TD
+><TD CLASS="indexlinks"
+><A HREF="Data-Monoid-Ord.html#v%3AMaxPriority"
+>Data.Monoid.Ord</A
+></TD
+></TR
+><TR CLASS="indexrow"
+><TD CLASS="indexentry"
+>mconcat</TD
+><TD CLASS="indexlinks"
+>Data.Monoid.Reducer, Data.Monoid.Reducer.Char, Data.Monoid.Reducer.With, Data.Monoid.Lexical.UTF8.Decoder, Data.Monoid.Generator, Data.Monoid.Lexical.SourcePosition, Data.Monoid.Lexical.Words, Data.Monoid.Self, Data.Monoid.FromString, Data.Monoid.Categorical, Data.Monoid.Additive, Data.Monoid.Additive.Sugar, Data.Monoid.Multiplicative, Data.Monoid.Multiplicative.Sugar, Data.Ring.Semi.Near, Data.Monoid.Applicative, Data.Monoid.Monad, Data.Monoid.Combinators, Data.Monoid.Lexical.RunLengthEncoding, Data.Ring.Semi, Data.Ring.Semi.Tropical, Data.Ring.Semi.Ord, Data.Ring.Sugar, Data.Group, Data.Group.Combinators, Data.Group.Sugar, Data.Ring, Data.Ring.Boolean, Data.Ring.FromNum</TD
+></TR
+><TR CLASS="indexrow"
+><TD CLASS="indexentry"
+>mempty</TD
+><TD CLASS="indexlinks"
+>Data.Monoid.Reducer, Data.Monoid.Reducer.Char, Data.Monoid.Reducer.With, Data.Monoid.Union, Data.Monoid.Lexical.UTF8.Decoder, Data.Monoid.Generator, Data.Monoid.Lexical.SourcePosition, Data.Monoid.Lexical.Words, Data.Monoid.Self, Data.Monoid.FromString, Data.Monoid.Categorical, Data.Monoid.Additive, Data.Monoid.Additive.Sugar, Data.Monoid.Multiplicative, Data.Monoid.Multiplicative.Sugar, Data.Ring.Semi.Near, Data.Monoid.Applicative, Data.Monoid.Monad, Data.Monoid.Combinators, Data.Monoid.Lexical.RunLengthEncoding, Data.Ring.Semi, Data.Monoid.Ord, Data.Ring.Semi.Tropical, Data.Ring.Semi.Ord, Data.Ring.Sugar, Data.Group, Data.Group.Combinators, Data.Group.Sugar, Data.Ring, Data.Ring.Boolean, Data.Ring.FromNum</TD
+></TR
+><TR CLASS="indexrow"
+><TD CLASS="indexentry" COLSPAN="2"
+>Min</TD
+></TR
+><TR CLASS="indexrow"
+><TD CLASS="indexannot"
+>1 (Type/Class)</TD
+><TD CLASS="indexlinks"
+><A HREF="Data-Monoid-Ord.html#t%3AMin"
+>Data.Monoid.Ord</A
+></TD
+></TR
+><TR CLASS="indexrow"
+><TD CLASS="indexannot"
+>2 (Data Constructor)</TD
+><TD CLASS="indexlinks"
+><A HREF="Data-Monoid-Ord.html#v%3AMin"
+>Data.Monoid.Ord</A
+></TD
+></TR
+><TR CLASS="indexrow"
+><TD CLASS="indexentry"
+>MinBound</TD
+><TD CLASS="indexlinks"
+><A HREF="Data-Ring-Semi-Ord.html#v%3AMinBound"
+>Data.Ring.Semi.Ord</A
+></TD
+></TR
+><TR CLASS="indexrow"
+><TD CLASS="indexentry"
+>minfinity</TD
+><TD CLASS="indexlinks"
+><A HREF="Data-Monoid-Ord.html#v%3Aminfinity"
+>Data.Monoid.Ord</A
+></TD
+></TR
+><TR CLASS="indexrow"
+><TD CLASS="indexentry" COLSPAN="2"
+>MinPriority</TD
+></TR
+><TR CLASS="indexrow"
+><TD CLASS="indexannot"
+>1 (Type/Class)</TD
+><TD CLASS="indexlinks"
+><A HREF="Data-Monoid-Ord.html#t%3AMinPriority"
+>Data.Monoid.Ord</A
+></TD
+></TR
+><TR CLASS="indexrow"
+><TD CLASS="indexannot"
+>2 (Data Constructor)</TD
+><TD CLASS="indexlinks"
+><A HREF="Data-Monoid-Ord.html#v%3AMinPriority"
+>Data.Monoid.Ord</A
+></TD
+></TR
+><TR CLASS="indexrow"
+><TD CLASS="indexentry"
+>minus</TD
+><TD CLASS="indexlinks"
+><A HREF="Data-Group.html#v%3Aminus"
+>Data.Group</A
+>, Data.Group.Combinators, Data.Group.Sugar, Data.Ring, Data.Ring.Boolean, Data.Ring.FromNum</TD
+></TR
+><TR CLASS="indexrow"
+><TD CLASS="indexentry" COLSPAN="2"
+>Mon</TD
+></TR
+><TR CLASS="indexrow"
+><TD CLASS="indexannot"
+>1 (Type/Class)</TD
+><TD CLASS="indexlinks"
+><A HREF="Data-Monoid-Categorical.html#t%3AMon"
+>Data.Monoid.Categorical</A
+></TD
+></TR
+><TR CLASS="indexrow"
+><TD CLASS="indexannot"
+>2 (Data Constructor)</TD
+><TD CLASS="indexlinks"
+><A HREF="Data-Monoid-Categorical.html#v%3AMon"
+>Data.Monoid.Categorical</A
+></TD
+></TR
+><TR CLASS="indexrow"
+><TD CLASS="indexentry"
+>Monoid</TD
+><TD CLASS="indexlinks"
+>Data.Monoid.Reducer, Data.Monoid.Reducer.Char, Data.Monoid.Reducer.With, Data.Monoid.Union, Data.Monoid.Lexical.UTF8.Decoder, Data.Monoid.Generator, Data.Monoid.Lexical.SourcePosition, Data.Monoid.Lexical.Words, Data.Monoid.Self, Data.Monoid.FromString, Data.Monoid.Categorical, Data.Monoid.Additive, Data.Monoid.Additive.Sugar, Data.Monoid.Multiplicative, Data.Monoid.Multiplicative.Sugar, Data.Ring.Semi.Near, Data.Monoid.Applicative, Data.Monoid.Monad, Data.Monoid.Combinators, Data.Monoid.Lexical.RunLengthEncoding, Data.Ring.Semi, Data.Monoid.Ord, Data.Ring.Semi.Tropical, Data.Ring.Semi.Ord, Data.Ring.Sugar, Data.Group, Data.Group.Combinators, Data.Group.Sugar, Data.Ring, Data.Ring.Boolean, Data.Ring.FromNum</TD
+></TR
+><TR CLASS="indexrow"
+><TD CLASS="indexentry"
+>Multiplicative</TD
+><TD CLASS="indexlinks"
+><A HREF="Data-Monoid-Multiplicative.html#t%3AMultiplicative"
+>Data.Monoid.Multiplicative</A
+>, Data.Monoid.Multiplicative.Sugar, Data.Ring.Semi.Near, Data.Monoid.Applicative, Data.Monoid.Monad, Data.Ring.Semi, Data.Ring.Semi.Tropical, Data.Ring.Semi.Ord, Data.Ring.Sugar, Data.Ring, Data.Ring.Boolean, Data.Ring.FromNum</TD
+></TR
+><TR CLASS="indexrow"
+><TD CLASS="indexentry"
+>negate</TD
+><TD CLASS="indexlinks"
+><A HREF="Data-Group-Sugar.html#v%3Anegate"
+>Data.Group.Sugar</A
+></TD
+></TR
+><TR CLASS="indexrow"
+><TD CLASS="indexentry"
+>nextTab</TD
+><TD CLASS="indexlinks"
+><A HREF="Data-Monoid-Lexical-SourcePosition.html#v%3AnextTab"
+>Data.Monoid.Lexical.SourcePosition</A
+></TD
+></TR
+><TR CLASS="indexrow"
+><TD CLASS="indexentry"
+>notElem</TD
+><TD CLASS="indexlinks"
+><A HREF="Data-Monoid-Combinators.html#v%3AnotElem"
+>Data.Monoid.Combinators</A
+></TD
+></TR
+><TR CLASS="indexrow"
+><TD CLASS="indexentry"
+>one</TD
+><TD CLASS="indexlinks"
+><A HREF="Data-Monoid-Multiplicative.html#v%3Aone"
+>Data.Monoid.Multiplicative</A
+>, Data.Monoid.Multiplicative.Sugar, Data.Ring.Semi.Near, Data.Monoid.Applicative, Data.Monoid.Monad, Data.Ring.Semi, Data.Ring.Semi.Tropical, Data.Ring.Semi.Ord, Data.Ring.Sugar, Data.Ring, Data.Ring.Boolean, Data.Ring.FromNum</TD
+></TR
+><TR CLASS="indexrow"
+><TD CLASS="indexentry"
+>or</TD
+><TD CLASS="indexlinks"
+><A HREF="Data-Monoid-Combinators.html#v%3Aor"
+>Data.Monoid.Combinators</A
+></TD
+></TR
+><TR CLASS="indexrow"
+><TD CLASS="indexentry" COLSPAN="2"
+>Order</TD
+></TR
+><TR CLASS="indexrow"
+><TD CLASS="indexannot"
+>1 (Type/Class)</TD
+><TD CLASS="indexlinks"
+><A HREF="Data-Ring-Semi-Ord.html#t%3AOrder"
+>Data.Ring.Semi.Ord</A
+></TD
+></TR
+><TR CLASS="indexrow"
+><TD CLASS="indexannot"
+>2 (Data Constructor)</TD
+><TD CLASS="indexlinks"
+><A HREF="Data-Ring-Semi-Ord.html#v%3AOrder"
+>Data.Ring.Semi.Ord</A
+></TD
+></TR
+><TR CLASS="indexrow"
+><TD CLASS="indexentry"
+>plus</TD
+><TD CLASS="indexlinks"
+><A HREF="Data-Monoid-Additive.html#v%3Aplus"
+>Data.Monoid.Additive</A
+>, Data.Monoid.Additive.Sugar, Data.Monoid.Multiplicative, Data.Monoid.Multiplicative.Sugar, Data.Ring.Semi.Near, Data.Monoid.Applicative, Data.Monoid.Monad, Data.Ring.Semi, Data.Ring.Semi.Tropical, Data.Ring.Semi.Ord, Data.Ring.Sugar, Data.Group, Data.Group.Combinators, Data.Group.Sugar, Data.Ring, Data.Ring.Boolean, Data.Ring.FromNum</TD
+></TR
+><TR CLASS="indexrow"
+><TD CLASS="indexentry" COLSPAN="2"
+>Priority</TD
+></TR
+><TR CLASS="indexrow"
+><TD CLASS="indexannot"
+>1 (Type/Class)</TD
+><TD CLASS="indexlinks"
+><A HREF="Data-Ring-Semi-Ord.html#t%3APriority"
+>Data.Ring.Semi.Ord</A
+></TD
+></TR
+><TR CLASS="indexrow"
+><TD CLASS="indexannot"
+>2 (Data Constructor)</TD
+><TD CLASS="indexlinks"
+><A HREF="Data-Ring-Semi-Ord.html#v%3APriority"
+>Data.Ring.Semi.Ord</A
+></TD
+></TR
+><TR CLASS="indexrow"
+><TD CLASS="indexentry" COLSPAN="2"
+>Product</TD
+></TR
+><TR CLASS="indexrow"
+><TD CLASS="indexannot"
+>1 (Data Constructor)</TD
+><TD CLASS="indexlinks"
+>Data.Monoid.Reducer, Data.Monoid.Reducer.Char, Data.Monoid.Reducer.With, Data.Monoid.Lexical.UTF8.Decoder, Data.Monoid.Generator, Data.Monoid.Lexical.SourcePosition, Data.Monoid.Lexical.Words, Data.Monoid.Self, Data.Monoid.FromString, Data.Monoid.Categorical, Data.Monoid.Additive, Data.Monoid.Additive.Sugar, Data.Monoid.Multiplicative, Data.Monoid.Multiplicative.Sugar, Data.Ring.Semi.Near, Data.Monoid.Applicative, Data.Monoid.Monad, Data.Monoid.Combinators, Data.Monoid.Lexical.RunLengthEncoding, Data.Ring.Semi, Data.Ring.Semi.Tropical, Data.Ring.Semi.Ord, Data.Ring.Sugar, Data.Group, Data.Group.Combinators, Data.Group.Sugar, Data.Ring, Data.Ring.Boolean, Data.Ring.FromNum</TD
+></TR
+><TR CLASS="indexrow"
+><TD CLASS="indexannot"
+>2 (Type/Class)</TD
+><TD CLASS="indexlinks"
+>Data.Monoid.Reducer, Data.Monoid.Reducer.Char, Data.Monoid.Reducer.With, Data.Monoid.Lexical.UTF8.Decoder, Data.Monoid.Generator, Data.Monoid.Lexical.SourcePosition, Data.Monoid.Lexical.Words, Data.Monoid.Self, Data.Monoid.FromString, Data.Monoid.Categorical, Data.Monoid.Additive, Data.Monoid.Additive.Sugar, Data.Monoid.Multiplicative, Data.Monoid.Multiplicative.Sugar, Data.Ring.Semi.Near, Data.Monoid.Applicative, Data.Monoid.Monad, Data.Monoid.Combinators, Data.Monoid.Lexical.RunLengthEncoding, Data.Ring.Semi, Data.Ring.Semi.Tropical, Data.Ring.Semi.Ord, Data.Ring.Sugar, Data.Group, Data.Group.Combinators, Data.Group.Sugar, Data.Ring, Data.Ring.Boolean, Data.Ring.FromNum</TD
+></TR
+><TR CLASS="indexrow"
+><TD CLASS="indexentry"
+>product</TD
+><TD CLASS="indexlinks"
+><A HREF="Data-Monoid-Combinators.html#v%3Aproduct"
+>Data.Monoid.Combinators</A
+></TD
+></TR
+><TR CLASS="indexrow"
+><TD CLASS="indexentry"
+>reduce</TD
+><TD CLASS="indexlinks"
+><A HREF="Data-Monoid-Generator.html#v%3Areduce"
+>Data.Monoid.Generator</A
+>, Data.Monoid.Combinators</TD
+></TR
+><TR CLASS="indexrow"
+><TD CLASS="indexentry"
+>Reducer</TD
+><TD CLASS="indexlinks"
+><A HREF="Data-Monoid-Reducer.html#t%3AReducer"
+>Data.Monoid.Reducer</A
+>, Data.Monoid.Reducer.Char, Data.Monoid.Reducer.With, Data.Monoid.Union, Data.Monoid.Lexical.UTF8.Decoder, Data.Monoid.Generator, Data.Monoid.Lexical.SourcePosition, Data.Monoid.Lexical.Words, Data.Monoid.Self, Data.Monoid.FromString, Data.Monoid.Categorical, Data.Monoid.Applicative, Data.Monoid.Monad, Data.Monoid.Combinators, Data.Monoid.Lexical.RunLengthEncoding, Data.Monoid.Ord, Data.Ring.Semi.Tropical</TD
+></TR
+><TR CLASS="indexrow"
+><TD CLASS="indexentry"
+>repeat</TD
+><TD CLASS="indexlinks"
+><A HREF="Data-Monoid-Combinators.html#v%3Arepeat"
+>Data.Monoid.Combinators</A
+></TD
+></TR
+><TR CLASS="indexrow"
+><TD CLASS="indexentry" COLSPAN="2"
+>replicate</TD
+></TR
+><TR CLASS="indexrow"
+><TD CLASS="indexannot"
+>1 (Function)</TD
+><TD CLASS="indexlinks"
+><A HREF="Data-Monoid-Combinators.html#v%3Areplicate"
+>Data.Monoid.Combinators</A
+></TD
+></TR
+><TR CLASS="indexrow"
+><TD CLASS="indexannot"
+>2 (Function)</TD
+><TD CLASS="indexlinks"
+><A HREF="Data-Group-Combinators.html#v%3Areplicate"
+>Data.Group.Combinators</A
+></TD
+></TR
+><TR CLASS="indexrow"
+><TD CLASS="indexentry"
+>RightSemiNearRing</TD
+><TD CLASS="indexlinks"
+><A HREF="Data-Ring-Semi-Near.html#t%3ARightSemiNearRing"
+>Data.Ring.Semi.Near</A
+>, Data.Monoid.Applicative, Data.Monoid.Monad, Data.Ring.Semi, Data.Ring.Semi.Tropical, Data.Ring.Semi.Ord, Data.Ring.Sugar, Data.Ring, Data.Ring.Boolean, Data.Ring.FromNum</TD
+></TR
+><TR CLASS="indexrow"
+><TD CLASS="indexentry"
+>Ring</TD
+><TD CLASS="indexlinks"
+><A HREF="Data-Ring.html#t%3ARing"
+>Data.Ring</A
+>, Data.Ring.Boolean, Data.Ring.FromNum</TD
+></TR
+><TR CLASS="indexrow"
+><TD CLASS="indexentry" COLSPAN="2"
+>RLE</TD
+></TR
+><TR CLASS="indexrow"
+><TD CLASS="indexannot"
+>1 (Type/Class)</TD
+><TD CLASS="indexlinks"
+><A HREF="Data-Monoid-Lexical-RunLengthEncoding.html#t%3ARLE"
+>Data.Monoid.Lexical.RunLengthEncoding</A
+></TD
+></TR
+><TR CLASS="indexrow"
+><TD CLASS="indexannot"
+>2 (Data Constructor)</TD
+><TD CLASS="indexlinks"
+><A HREF="Data-Monoid-Lexical-RunLengthEncoding.html#v%3ARLE"
+>Data.Monoid.Lexical.RunLengthEncoding</A
+></TD
+></TR
+><TR CLASS="indexrow"
+><TD CLASS="indexentry"
+>runLines</TD
+><TD CLASS="indexlinks"
+><A HREF="Data-Monoid-Lexical-Words.html#v%3ArunLines"
+>Data.Monoid.Lexical.Words</A
+></TD
+></TR
+><TR CLASS="indexrow"
+><TD CLASS="indexentry"
+>runUnlined</TD
+><TD CLASS="indexlinks"
+><A HREF="Data-Monoid-Lexical-Words.html#v%3ArunUnlined"
+>Data.Monoid.Lexical.Words</A
+></TD
+></TR
+><TR CLASS="indexrow"
+><TD CLASS="indexentry"
+>runUnspaced</TD
+><TD CLASS="indexlinks"
+><A HREF="Data-Monoid-Lexical-Words.html#v%3ArunUnspaced"
+>Data.Monoid.Lexical.Words</A
+></TD
+></TR
+><TR CLASS="indexrow"
+><TD CLASS="indexentry"
+>runUTF8</TD
+><TD CLASS="indexlinks"
+><A HREF="Data-Monoid-Lexical-UTF8-Decoder.html#v%3ArunUTF8"
+>Data.Monoid.Lexical.UTF8.Decoder</A
+></TD
+></TR
+><TR CLASS="indexrow"
+><TD CLASS="indexentry"
+>runWords</TD
+><TD CLASS="indexlinks"
+><A HREF="Data-Monoid-Lexical-Words.html#v%3ArunWords"
+>Data.Monoid.Lexical.Words</A
+></TD
+></TR
+><TR CLASS="indexrow"
+><TD CLASS="indexentry" COLSPAN="2"
+>Self</TD
+></TR
+><TR CLASS="indexrow"
+><TD CLASS="indexannot"
+>1 (Type/Class)</TD
+><TD CLASS="indexlinks"
+><A HREF="Data-Monoid-Self.html#t%3ASelf"
+>Data.Monoid.Self</A
+></TD
+></TR
+><TR CLASS="indexrow"
+><TD CLASS="indexannot"
+>2 (Data Constructor)</TD
+><TD CLASS="indexlinks"
+><A HREF="Data-Monoid-Self.html#v%3ASelf"
+>Data.Monoid.Self</A
+></TD
+></TR
+><TR CLASS="indexrow"
+><TD CLASS="indexentry"
+>SemiRing</TD
+><TD CLASS="indexlinks"
+><A HREF="Data-Ring-Semi.html#t%3ASemiRing"
+>Data.Ring.Semi</A
+>, Data.Ring.Semi.Tropical, Data.Ring.Semi.Ord, Data.Ring, Data.Ring.Boolean, Data.Ring.FromNum</TD
+></TR
+><TR CLASS="indexrow"
+><TD CLASS="indexentry"
+>showSourcePosition</TD
+><TD CLASS="indexlinks"
+><A HREF="Data-Monoid-Lexical-SourcePosition.html#v%3AshowSourcePosition"
+>Data.Monoid.Lexical.SourcePosition</A
+></TD
+></TR
+><TR CLASS="indexrow"
+><TD CLASS="indexentry"
+>snoc</TD
+><TD CLASS="indexlinks"
+><A HREF="Data-Monoid-Reducer.html#v%3Asnoc"
+>Data.Monoid.Reducer</A
+>, Data.Monoid.Reducer.Char, Data.Monoid.Reducer.With, Data.Monoid.Union, Data.Monoid.Lexical.UTF8.Decoder, Data.Monoid.Generator, Data.Monoid.Lexical.SourcePosition, Data.Monoid.Lexical.Words, Data.Monoid.Self, Data.Monoid.FromString, Data.Monoid.Categorical, Data.Monoid.Applicative, Data.Monoid.Monad, Data.Monoid.Combinators, Data.Monoid.Lexical.RunLengthEncoding</TD
+></TR
+><TR CLASS="indexrow"
+><TD CLASS="indexentry"
+>snocAction</TD
+><TD CLASS="indexlinks"
+><A HREF="Data-Monoid-Monad.html#v%3AsnocAction"
+>Data.Monoid.Monad</A
+></TD
+></TR
+><TR CLASS="indexrow"
+><TD CLASS="indexentry"
+>snocTraversal</TD
+><TD CLASS="indexlinks"
+><A HREF="Data-Monoid-Applicative.html#v%3AsnocTraversal"
+>Data.Monoid.Applicative</A
+></TD
+></TR
+><TR CLASS="indexrow"
+><TD CLASS="indexentry"
+>SourceColumn</TD
+><TD CLASS="indexlinks"
+><A HREF="Data-Monoid-Lexical-SourcePosition.html#t%3ASourceColumn"
+>Data.Monoid.Lexical.SourcePosition</A
+></TD
+></TR
+><TR CLASS="indexrow"
+><TD CLASS="indexentry"
+>sourceColumn</TD
+><TD CLASS="indexlinks"
+><A HREF="Data-Monoid-Lexical-SourcePosition.html#v%3AsourceColumn"
+>Data.Monoid.Lexical.SourcePosition</A
+></TD
+></TR
+><TR CLASS="indexrow"
+><TD CLASS="indexentry"
+>SourceLine</TD
+><TD CLASS="indexlinks"
+><A HREF="Data-Monoid-Lexical-SourcePosition.html#t%3ASourceLine"
+>Data.Monoid.Lexical.SourcePosition</A
+></TD
+></TR
+><TR CLASS="indexrow"
+><TD CLASS="indexentry"
+>sourceLine</TD
+><TD CLASS="indexlinks"
+><A HREF="Data-Monoid-Lexical-SourcePosition.html#v%3AsourceLine"
+>Data.Monoid.Lexical.SourcePosition</A
+></TD
+></TR
+><TR CLASS="indexrow"
+><TD CLASS="indexentry"
+>SourcePosition</TD
+><TD CLASS="indexlinks"
+><A HREF="Data-Monoid-Lexical-SourcePosition.html#t%3ASourcePosition"
+>Data.Monoid.Lexical.SourcePosition</A
+></TD
+></TR
+><TR CLASS="indexrow"
+><TD CLASS="indexentry"
+>startOfFile</TD
+><TD CLASS="indexlinks"
+><A HREF="Data-Monoid-Lexical-SourcePosition.html#v%3AstartOfFile"
+>Data.Monoid.Lexical.SourcePosition</A
+></TD
+></TR
+><TR CLASS="indexrow"
+><TD CLASS="indexentry"
+>subtract</TD
+><TD CLASS="indexlinks"
+><A HREF="Data-Group-Sugar.html#v%3Asubtract"
+>Data.Group.Sugar</A
+></TD
+></TR
+><TR CLASS="indexrow"
+><TD CLASS="indexentry" COLSPAN="2"
+>Sum</TD
+></TR
+><TR CLASS="indexrow"
+><TD CLASS="indexannot"
+>1 (Data Constructor)</TD
+><TD CLASS="indexlinks"
+>Data.Monoid.Reducer, Data.Monoid.Reducer.Char, Data.Monoid.Reducer.With, Data.Monoid.Lexical.UTF8.Decoder, Data.Monoid.Generator, Data.Monoid.Lexical.SourcePosition, Data.Monoid.Lexical.Words, Data.Monoid.Self, Data.Monoid.FromString, Data.Monoid.Categorical, Data.Monoid.Additive, Data.Monoid.Additive.Sugar, Data.Monoid.Multiplicative, Data.Monoid.Multiplicative.Sugar, Data.Ring.Semi.Near, Data.Monoid.Applicative, Data.Monoid.Monad, Data.Monoid.Combinators, Data.Monoid.Lexical.RunLengthEncoding, Data.Ring.Semi, Data.Ring.Semi.Tropical, Data.Ring.Semi.Ord, Data.Ring.Sugar, Data.Group, Data.Group.Combinators, Data.Group.Sugar, Data.Ring, Data.Ring.Boolean, Data.Ring.FromNum</TD
+></TR
+><TR CLASS="indexrow"
+><TD CLASS="indexannot"
+>2 (Type/Class)</TD
+><TD CLASS="indexlinks"
+>Data.Monoid.Reducer, Data.Monoid.Reducer.Char, Data.Monoid.Reducer.With, Data.Monoid.Lexical.UTF8.Decoder, Data.Monoid.Generator, Data.Monoid.Lexical.SourcePosition, Data.Monoid.Lexical.Words, Data.Monoid.Self, Data.Monoid.FromString, Data.Monoid.Categorical, Data.Monoid.Additive, Data.Monoid.Additive.Sugar, Data.Monoid.Multiplicative, Data.Monoid.Multiplicative.Sugar, Data.Ring.Semi.Near, Data.Monoid.Applicative, Data.Monoid.Monad, Data.Monoid.Combinators, Data.Monoid.Lexical.RunLengthEncoding, Data.Ring.Semi, Data.Ring.Semi.Tropical, Data.Ring.Semi.Ord, Data.Ring.Sugar, Data.Group, Data.Group.Combinators, Data.Group.Sugar, Data.Ring, Data.Ring.Boolean, Data.Ring.FromNum</TD
+></TR
+><TR CLASS="indexrow"
+><TD CLASS="indexentry"
+>sum</TD
+><TD CLASS="indexlinks"
+><A HREF="Data-Monoid-Combinators.html#v%3Asum"
+>Data.Monoid.Combinators</A
+></TD
+></TR
+><TR CLASS="indexrow"
+><TD CLASS="indexentry"
+>times</TD
+><TD CLASS="indexlinks"
+><A HREF="Data-Monoid-Multiplicative.html#v%3Atimes"
+>Data.Monoid.Multiplicative</A
+>, Data.Monoid.Multiplicative.Sugar, Data.Ring.Semi.Near, Data.Monoid.Applicative, Data.Monoid.Monad, Data.Ring.Semi, Data.Ring.Semi.Tropical, Data.Ring.Semi.Ord, Data.Ring.Sugar, Data.Ring, Data.Ring.Boolean, Data.Ring.FromNum</TD
+></TR
+><TR CLASS="indexrow"
+><TD CLASS="indexentry" COLSPAN="2"
+>Traversal</TD
+></TR
+><TR CLASS="indexrow"
+><TD CLASS="indexannot"
+>1 (Type/Class)</TD
+><TD CLASS="indexlinks"
+><A HREF="Data-Monoid-Applicative.html#t%3ATraversal"
+>Data.Monoid.Applicative</A
+></TD
+></TR
+><TR CLASS="indexrow"
+><TD CLASS="indexannot"
+>2 (Data Constructor)</TD
+><TD CLASS="indexlinks"
+><A HREF="Data-Monoid-Applicative.html#v%3ATraversal"
+>Data.Monoid.Applicative</A
+></TD
+></TR
+><TR CLASS="indexrow"
+><TD CLASS="indexentry"
+>traverse_</TD
+><TD CLASS="indexlinks"
+><A HREF="Data-Monoid-Combinators.html#v%3Atraverse_"
+>Data.Monoid.Combinators</A
+></TD
+></TR
+><TR CLASS="indexrow"
+><TD CLASS="indexentry" COLSPAN="2"
+>Tropical</TD
+></TR
+><TR CLASS="indexrow"
+><TD CLASS="indexannot"
+>1 (Type/Class)</TD
+><TD CLASS="indexlinks"
+><A HREF="Data-Ring-Semi-Tropical.html#t%3ATropical"
+>Data.Ring.Semi.Tropical</A
+></TD
+></TR
+><TR CLASS="indexrow"
+><TD CLASS="indexannot"
+>2 (Data Constructor)</TD
+><TD CLASS="indexlinks"
+><A HREF="Data-Ring-Semi-Tropical.html#v%3ATropical"
+>Data.Ring.Semi.Tropical</A
+></TD
+></TR
+><TR CLASS="indexrow"
+><TD CLASS="indexentry" COLSPAN="2"
+>Union</TD
+></TR
+><TR CLASS="indexrow"
+><TD CLASS="indexannot"
+>1 (Type/Class)</TD
+><TD CLASS="indexlinks"
+><A HREF="Data-Monoid-Union.html#t%3AUnion"
+>Data.Monoid.Union</A
+></TD
+></TR
+><TR CLASS="indexrow"
+><TD CLASS="indexannot"
+>2 (Data Constructor)</TD
+><TD CLASS="indexlinks"
+><A HREF="Data-Monoid-Union.html#v%3AUnion"
+>Data.Monoid.Union</A
+></TD
+></TR
+><TR CLASS="indexrow"
+><TD CLASS="indexentry"
+>union</TD
+><TD CLASS="indexlinks"
+><A HREF="Data-Monoid-Union.html#v%3Aunion"
+>Data.Monoid.Union</A
+></TD
+></TR
+><TR CLASS="indexrow"
+><TD CLASS="indexentry" COLSPAN="2"
+>UnionWith</TD
+></TR
+><TR CLASS="indexrow"
+><TD CLASS="indexannot"
+>1 (Type/Class)</TD
+><TD CLASS="indexlinks"
+><A HREF="Data-Monoid-Union.html#t%3AUnionWith"
+>Data.Monoid.Union</A
+></TD
+></TR
+><TR CLASS="indexrow"
+><TD CLASS="indexannot"
+>2 (Data Constructor)</TD
+><TD CLASS="indexlinks"
+><A HREF="Data-Monoid-Union.html#v%3AUnionWith"
+>Data.Monoid.Union</A
+></TD
+></TR
+><TR CLASS="indexrow"
+><TD CLASS="indexentry"
+>unionWith</TD
+><TD CLASS="indexlinks"
+><A HREF="Data-Monoid-Union.html#v%3AunionWith"
+>Data.Monoid.Union</A
+></TD
+></TR
+><TR CLASS="indexrow"
+><TD CLASS="indexentry"
+>unit</TD
+><TD CLASS="indexlinks"
+><A HREF="Data-Monoid-Reducer.html#v%3Aunit"
+>Data.Monoid.Reducer</A
+>, Data.Monoid.Reducer.Char, Data.Monoid.Reducer.With, Data.Monoid.Union, Data.Monoid.Lexical.UTF8.Decoder, Data.Monoid.Generator, Data.Monoid.Lexical.SourcePosition, Data.Monoid.Lexical.Words, Data.Monoid.Self, Data.Monoid.FromString, Data.Monoid.Categorical, Data.Monoid.Applicative, Data.Monoid.Monad, Data.Monoid.Combinators, Data.Monoid.Lexical.RunLengthEncoding, Data.Monoid.Ord, Data.Ring.Semi.Tropical</TD
+></TR
+><TR CLASS="indexrow"
+><TD CLASS="indexentry"
+>Unlined</TD
+><TD CLASS="indexlinks"
+><A HREF="Data-Monoid-Lexical-Words.html#t%3AUnlined"
+>Data.Monoid.Lexical.Words</A
+></TD
+></TR
+><TR CLASS="indexrow"
+><TD CLASS="indexentry"
+>Unspaced</TD
+><TD CLASS="indexlinks"
+><A HREF="Data-Monoid-Lexical-Words.html#t%3AUnspaced"
+>Data.Monoid.Lexical.Words</A
+></TD
+></TR
+><TR CLASS="indexrow"
+><TD CLASS="indexentry"
+>UTF8</TD
+><TD CLASS="indexlinks"
+><A HREF="Data-Monoid-Lexical-UTF8-Decoder.html#t%3AUTF8"
+>Data.Monoid.Lexical.UTF8.Decoder</A
+></TD
+></TR
+><TR CLASS="indexrow"
+><TD CLASS="indexentry" COLSPAN="2"
+>Values</TD
+></TR
+><TR CLASS="indexrow"
+><TD CLASS="indexannot"
+>1 (Type/Class)</TD
+><TD CLASS="indexlinks"
+><A HREF="Data-Monoid-Generator.html#t%3AValues"
+>Data.Monoid.Generator</A
+>, Data.Monoid.Combinators</TD
+></TR
+><TR CLASS="indexrow"
+><TD CLASS="indexannot"
+>2 (Data Constructor)</TD
+><TD CLASS="indexlinks"
+><A HREF="Data-Monoid-Generator.html#v%3AValues"
+>Data.Monoid.Generator</A
+>, Data.Monoid.Combinators</TD
+></TR
+><TR CLASS="indexrow"
+><TD CLASS="indexentry"
+>withoutReducer</TD
+><TD CLASS="indexlinks"
+><A HREF="Data-Monoid-Reducer-With.html#v%3AwithoutReducer"
+>Data.Monoid.Reducer.With</A
+></TD
+></TR
+><TR CLASS="indexrow"
+><TD CLASS="indexentry" COLSPAN="2"
+>WithReducer</TD
+></TR
+><TR CLASS="indexrow"
+><TD CLASS="indexannot"
+>1 (Type/Class)</TD
+><TD CLASS="indexlinks"
+><A HREF="Data-Monoid-Reducer-With.html#t%3AWithReducer"
+>Data.Monoid.Reducer.With</A
+></TD
+></TR
+><TR CLASS="indexrow"
+><TD CLASS="indexannot"
+>2 (Data Constructor)</TD
+><TD CLASS="indexlinks"
+><A HREF="Data-Monoid-Reducer-With.html#v%3AWithReducer"
+>Data.Monoid.Reducer.With</A
+></TD
+></TR
+><TR CLASS="indexrow"
+><TD CLASS="indexentry"
+>Words</TD
+><TD CLASS="indexlinks"
+><A HREF="Data-Monoid-Lexical-Words.html#t%3AWords"
+>Data.Monoid.Lexical.Words</A
+></TD
+></TR
+><TR CLASS="indexrow"
+><TD CLASS="indexentry"
+>wordsFrom</TD
+><TD CLASS="indexlinks"
+><A HREF="Data-Monoid-Lexical-Words.html#v%3AwordsFrom"
+>Data.Monoid.Lexical.Words</A
+></TD
+></TR
+><TR CLASS="indexrow"
+><TD CLASS="indexentry" COLSPAN="2"
+>WrappedApplicative</TD
+></TR
+><TR CLASS="indexrow"
+><TD CLASS="indexannot"
+>1 (Type/Class)</TD
+><TD CLASS="indexlinks"
+><A HREF="Data-Monoid-Applicative.html#t%3AWrappedApplicative"
+>Data.Monoid.Applicative</A
+></TD
+></TR
+><TR CLASS="indexrow"
+><TD CLASS="indexannot"
+>2 (Data Constructor)</TD
+><TD CLASS="indexlinks"
+><A HREF="Data-Monoid-Applicative.html#v%3AWrappedApplicative"
+>Data.Monoid.Applicative</A
+></TD
+></TR
+><TR CLASS="indexrow"
+><TD CLASS="indexentry" COLSPAN="2"
+>WrappedMonad</TD
+></TR
+><TR CLASS="indexrow"
+><TD CLASS="indexannot"
+>1 (Type/Class)</TD
+><TD CLASS="indexlinks"
+><A HREF="Data-Monoid-Monad.html#t%3AWrappedMonad"
+>Data.Monoid.Monad</A
+></TD
+></TR
+><TR CLASS="indexrow"
+><TD CLASS="indexannot"
+>2 (Data Constructor)</TD
+><TD CLASS="indexlinks"
+><A HREF="Data-Monoid-Monad.html#v%3AWrappedMonad"
+>Data.Monoid.Monad</A
+></TD
+></TR
+><TR CLASS="indexrow"
+><TD CLASS="indexentry"
+>zero</TD
+><TD CLASS="indexlinks"
+><A HREF="Data-Monoid-Additive.html#v%3Azero"
+>Data.Monoid.Additive</A
+>, Data.Monoid.Additive.Sugar, Data.Monoid.Multiplicative, Data.Monoid.Multiplicative.Sugar, Data.Ring.Semi.Near, Data.Monoid.Applicative, Data.Monoid.Monad, Data.Ring.Semi, Data.Ring.Semi.Tropical, Data.Ring.Semi.Ord, Data.Ring.Sugar, Data.Group, Data.Group.Combinators, Data.Group.Sugar, Data.Ring, Data.Ring.Boolean, Data.Ring.FromNum</TD
+></TR
+></TABLE
+></TD
+></TR
+></TABLE
+></BODY
+></HTML
+>
addfile ./dist/doc/html/monoids/haddock-util.js
hunk ./dist/doc/html/monoids/haddock-util.js 1
+// Haddock JavaScript utilities
+function toggle(button,id)
+{
+   var n = document.getElementById(id).style;
+   if (n.display == "none")
+   {
+    button.src = "minus.gif";
+    n.display = "block";
+   }
+   else
+   {
+    button.src = "plus.gif";
+    n.display = "none";
+   }
+}
+
+
+var max_results = 75; // 50 is not enough to search for map in the base libraries
+var shown_range = null;
+var last_search = null;
+
+function quick_search()
+{
+    perform_search(false);
+}
+
+function full_search()
+{
+    perform_search(true);
+}
+
+
+function perform_search(full)
+{
+    var text = document.getElementById("searchbox").value.toLowerCase();
+    if (text == last_search && !full) return;
+    last_search = text;
+    
+    var table = document.getElementById("indexlist");
+    var status = document.getElementById("searchmsg");
+    var children = table.firstChild.childNodes;
+    
+    // first figure out the first node with the prefix
+    var first = bisect(-1);
+    var last = (first == -1 ? -1 : bisect(1));
+
+    if (first == -1)
+    {
+        table.className = "";
+        status.innerHTML = "No results found, displaying all";
+    }
+    else if (first == 0 && last == children.length - 1)
+    {
+        table.className = "";
+        status.innerHTML = "";
+    }
+    else if (last - first >= max_results && !full)
+    {
+        table.className = "";
+        status.innerHTML = "More than " + max_results + ", press Search to display";
+    }
+    else
+    {
+        // decide what you need to clear/show
+        if (shown_range)
+            setclass(shown_range[0], shown_range[1], "indexrow");
+        setclass(first, last, "indexshow");
+        shown_range = [first, last];
+        table.className = "indexsearch";
+        status.innerHTML = "";
+    }
+
+    
+    function setclass(first, last, status)
+    {
+        for (var i = first; i <= last; i++)
+        {
+            children[i].className = status;
+        }
+    }
+    
+    
+    // do a binary search, treating 0 as ...
+    // return either -1 (no 0's found) or location of most far match
+    function bisect(dir)
+    {
+        var first = 0, finish = children.length - 1;
+        var mid, success = false;
+
+        while (finish - first > 3)
+        {
+            mid = Math.floor((finish + first) / 2);
+
+            var i = checkitem(mid);
+            if (i == 0) i = dir;
+            if (i == -1)
+                finish = mid;
+            else
+                first = mid;
+        }
+        var a = (dir == 1 ? first : finish);
+        var b = (dir == 1 ? finish : first);
+        for (var i = b; i != a - dir; i -= dir)
+        {
+            if (checkitem(i) == 0) return i;
+        }
+        return -1;
+    }    
+    
+    
+    // from an index, decide what the result is
+    // 0 = match, -1 is lower, 1 is higher
+    function checkitem(i)
+    {
+        var s = getitem(i).toLowerCase().substr(0, text.length);
+        if (s == text) return 0;
+        else return (s > text ? -1 : 1);
+    }
+    
+    
+    // from an index, get its string
+    // this abstracts over alternates
+    function getitem(i)
+    {
+        for ( ; i >= 0; i--)
+        {
+            var s = children[i].firstChild.firstChild.data;
+            if (s.indexOf(' ') == -1)
+                return s;
+        }
+        return ""; // should never be reached
+    }
+}
addfile ./dist/doc/html/monoids/haddock.css
hunk ./dist/doc/html/monoids/haddock.css 1
+/* -------- Global things --------- */
+
+BODY { 
+  background-color: #ffffff;
+  color: #000000;
+  font-family: sans-serif;
+  } 
+
+A:link    { color: #0000e0; text-decoration: none }
+A:visited { color: #0000a0; text-decoration: none }
+A:hover   { background-color: #e0e0ff; text-decoration: none }
+
+TABLE.vanilla {
+  width: 100%;
+  border-width: 0px;
+  /* I can't seem to specify cellspacing or cellpadding properly using CSS... */
+}
+
+TABLE.vanilla2 {
+  border-width: 0px;
+}
+
+/* <TT> font is a little too small in MSIE */
+TT  { font-size: 100%; }
+PRE { font-size: 100%; }
+
+LI P { margin: 0pt } 
+
+TD {
+  border-width: 0px;
+}
+
+TABLE.narrow {
+  border-width: 0px;
+}
+
+TD.s8  {  height: 8px;  }
+TD.s15 {  height: 15px; }
+
+SPAN.keyword { text-decoration: underline; }
+
+/* Resize the buttom image to match the text size */
+IMG.coll { width : 0.75em; height: 0.75em; margin-bottom: 0; margin-right: 0.5em }
+
+/* --------- Contents page ---------- */
+
+DIV.node {
+  padding-left: 3em;
+}
+
+DIV.cnode {
+  padding-left: 1.75em;
+}
+
+SPAN.pkg {
+  position: absolute;
+  left: 50em;
+}
+
+/* --------- Documentation elements ---------- */
+
+TD.children {
+  padding-left: 25px;
+  }
+
+TD.synopsis {
+  padding: 2px;
+  background-color: #f0f0f0;
+  font-family: monospace
+ }
+
+TD.decl { 
+  padding: 2px;
+  background-color: #f0f0f0; 
+  font-family: monospace;
+  vertical-align: top;
+  }
+
+TD.topdecl {
+  padding: 2px;
+  background-color: #f0f0f0;
+  font-family: monospace;
+  vertical-align: top;
+}
+
+TABLE.declbar {
+  border-spacing: 0px;
+ }
+
+TD.declname {
+  width: 100%;
+ }
+
+TD.declbut {
+  padding-left: 5px;
+  padding-right: 5px;
+  border-left-width: 1px;
+  border-left-color: #000099;
+  border-left-style: solid;
+  white-space: nowrap;
+  font-size: small;
+ }
+
+/* 
+  arg is just like decl, except that wrapping is not allowed.  It is
+  used for function and constructor arguments which have a text box
+  to the right, where if wrapping is allowed the text box squashes up
+  the declaration by wrapping it.
+*/
+TD.arg { 
+  padding: 2px;
+  background-color: #f0f0f0; 
+  font-family: monospace;
+  vertical-align: top;
+  white-space: nowrap;
+  }
+
+TD.recfield { padding-left: 20px }
+
+TD.doc  { 
+  padding-top: 2px;
+  padding-left: 10px;
+  }
+
+TD.ndoc  { 
+  padding: 2px;
+  }
+
+TD.rdoc  { 
+  padding: 2px;
+  padding-left: 10px;
+  width: 100%;
+  }
+
+TD.body  { 
+  padding-left: 10px
+  }
+
+TD.pkg {
+  width: 100%;
+  padding-left: 10px
+}
+
+TABLE.indexsearch TR.indexrow {
+  display: none;
+}
+TABLE.indexsearch TR.indexshow {
+  display: table-row;
+}
+
+TD.indexentry {
+  vertical-align: top;
+  padding-right: 10px
+  }
+
+TD.indexannot {
+  vertical-align: top;
+  padding-left: 20px;
+  white-space: nowrap
+  }
+
+TD.indexlinks {
+  width: 100%
+  }
+
+/* ------- Section Headings ------- */
+
+TD.section1 {
+  padding-top: 15px;
+  font-weight: bold;
+  font-size: 150%
+  }
+
+TD.section2 {
+  padding-top: 10px;
+  font-weight: bold;
+  font-size: 130%
+  }
+
+TD.section3 {
+  padding-top: 5px;
+  font-weight: bold;
+  font-size: 110%
+  }
+
+TD.section4 {
+  font-weight: bold;
+  font-size: 100%
+  }
+
+/* -------------- The title bar at the top of the page */
+
+TD.infohead {
+  color: #ffffff;
+  font-weight: bold;
+  padding-right: 10px;
+  text-align: left;
+}
+
+TD.infoval {
+  color: #ffffff;
+  padding-right: 10px;
+  text-align: left;
+}
+
+TD.topbar {
+  background-color: #000099;
+  padding: 5px;
+}
+
+TD.title {
+  color: #ffffff;
+  padding-left: 10px;
+  width: 100%
+  }
+
+TD.topbut {
+  padding-left: 5px;
+  padding-right: 5px;
+  border-left-width: 1px;
+  border-left-color: #ffffff;
+  border-left-style: solid;
+  white-space: nowrap;
+  }
+
+TD.topbut A:link {
+  color: #ffffff
+  }
+
+TD.topbut A:visited {
+  color: #ffff00
+  }
+
+TD.topbut A:hover {
+  background-color: #6060ff;
+  }
+
+TD.topbut:hover {
+  background-color: #6060ff
+  }
+
+TD.modulebar { 
+  background-color: #0077dd;
+  padding: 5px;
+  border-top-width: 1px;
+  border-top-color: #ffffff;
+  border-top-style: solid;
+  }
+
+/* --------- The page footer --------- */
+
+TD.botbar {
+  background-color: #000099;
+  color: #ffffff;
+  padding: 5px
+  }
+TD.botbar A:link {
+  color: #ffffff;
+  text-decoration: underline
+  }
+TD.botbar A:visited {
+  color: #ffff00
+  }
+TD.botbar A:hover {
+  background-color: #6060ff
+  }
+
addfile ./dist/doc/html/monoids/haskell_icon.gif
binary ./dist/doc/html/monoids/haskell_icon.gif
oldhex
*
newhex
*47494638376110001000f70f00000000800000008000808000000080800080008080c0c0c08080
*80ff000000ff00ffff000000ffff00ff00ffffffffff0000000000000000000000000000000000
*000000000000000000000000000000000000000000000000000000000000000000000000000000
*000000000000000000000000000000000000000000000000000000000000000000000000000000
*000000000000000000000000000000000000000000000000000000000000000000000000000000
*000000000000000000000000000000000000000000000000000000000000000000000000000000
*000000000000000000000000000000000000000000000000000000000000000000000000000000
*000000000000000000000000000000000000000000000000000000000000000000000000000000
*000000000000000000000000000000000000000000000000000000000000000000000000000000
*000000000000000000000000000000000000000000000000000000000000000000000000000000
*000000000000000000000000000000000000000000000000000000000000000000000000000000
*000000000000000000000000000000000000000000000000000000000000000000000000000000
*000000000000000000000000000000000000000000000000000000000000000000000000000000
*000000000000000000000000000000000000000000000000000000000000000000000000000000
*000000000000000000000000000000000000000000000000000000000000000000000000000000
*000000000000000000000000000000000000000000000000000000000000000000000000000000
*000000000000000000000000000000000000000000000000000000000000000000000000000000
*000000000000000000000000000000000000000000000000000000000000000000000000000000
*000000000000000000000000000000000000000000000000000000000000000000000000000000
*000000000000000000000000000000000000000000000000000000000000000000000000000000
*0021f90401000000002c000000001000100007086c0001007840b0a0418202073e38b0b021c387
*07143e2440c0a143040e091cd0787021c686151f84347800e343901d4b12646870e44a930d0952
*3ca832a6cc990555b2bc2992e4c79d3847ea2c88b3a7c89a2c8b8aa43874e941a60810003840b5
*aa55aa511346ddca75abc080003b
addfile ./dist/doc/html/monoids/index.html
hunk ./dist/doc/html/monoids/index.html 1
+<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd">
+<!--Rendered using the Haskell Html Library v0.2-->
+<HTML
+><HEAD
+><META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=UTF-8"
+><TITLE
+>monoids-0.1.6: Lots of Monoids</TITLE
+><LINK HREF="haddock.css" REL="stylesheet" TYPE="text/css"
+><SCRIPT SRC="haddock-util.js" TYPE="text/javascript"
+></SCRIPT
+></HEAD
+><BODY
+><TABLE CLASS="vanilla" CELLSPACING="0" CELLPADDING="0"
+><TR
+><TD CLASS="topbar"
+><TABLE CLASS="vanilla" CELLSPACING="0" CELLPADDING="0"
+><TR
+><TD
+><IMG SRC="haskell_icon.gif" WIDTH="16" HEIGHT="16" ALT=" "
+></TD
+><TD CLASS="title"
+>monoids-0.1.6: Lots of Monoids</TD
+><TD CLASS="topbut"
+><A HREF="index.html"
+>Contents</A
+></TD
+><TD CLASS="topbut"
+><A HREF="doc-index.html"
+>Index</A
+></TD
+></TR
+></TABLE
+></TD
+></TR
+><TR
+><TD CLASS="section1"
+>monoids-0.1.6: Lots of Monoids</TD
+></TR
+><TR
+><TD CLASS="doc"
+>Lots of Monoids
+</TD
+></TR
+><TR
+><TD CLASS="section1"
+>Modules</TD
+></TR
+><TR
+><TD
+><TABLE CLASS="vanilla2" CELLSPACING="0" CELLPADDING="0"
+><TR
+><TD STYLE="width: 50em"
+><IMG SRC="minus.gif" CLASS="coll" ONCLICK="toggle(this,'n:0')" ALT="show/hide"
+>Data</TD
+><TD
+></TD
+><TD
+></TD
+></TR
+><TR
+><TD STYLE="padding: 0; padding-left: 2em" COLSPAN="3"
+><TABLE CLASS="vanilla2" CELLSPACING="0" CELLPADDING="0" ID="n:0" STYLE="display:block;"
+><TR
+><TD STYLE="width: 48em"
+><IMG SRC="minus.gif" CLASS="coll" ONCLICK="toggle(this,'n:1')" ALT="show/hide"
+><A HREF="Data-Group.html"
+>Data.Group</A
+></TD
+><TD
+></TD
+><TD
+></TD
+></TR
+><TR
+><TD STYLE="padding: 0; padding-left: 2em" COLSPAN="3"
+><TABLE CLASS="vanilla2" CELLSPACING="0" CELLPADDING="0" ID="n:1" STYLE="display:block;"
+><TR
+><TD STYLE="padding-left: 1.25em;width: 46em"
+><A HREF="Data-Group-Combinators.html"
+>Data.Group.Combinators</A
+></TD
+><TD
+></TD
+><TD
+></TD
+></TR
+><TR
+><TD STYLE="padding-left: 1.25em;width: 46em"
+><A HREF="Data-Group-Sugar.html"
+>Data.Group.Sugar</A
+></TD
+><TD
+></TD
+><TD
+></TD
+></TR
+></TABLE
+></TD
+></TR
+><TR
+><TD STYLE="width: 48em"
+><IMG SRC="minus.gif" CLASS="coll" ONCLICK="toggle(this,'n:2')" ALT="show/hide"
+>Monoid</TD
+><TD
+></TD
+><TD
+></TD
+></TR
+><TR
+><TD STYLE="padding: 0; padding-left: 2em" COLSPAN="3"
+><TABLE CLASS="vanilla2" CELLSPACING="0" CELLPADDING="0" ID="n:2" STYLE="display:block;"
+><TR
+><TD STYLE="width: 46em"
+><IMG SRC="minus.gif" CLASS="coll" ONCLICK="toggle(this,'n:3')" ALT="show/hide"
+><A HREF="Data-Monoid-Additive.html"
+>Data.Monoid.Additive</A
+></TD
+><TD
+></TD
+><TD
+></TD
+></TR
+><TR
+><TD STYLE="padding: 0; padding-left: 2em" COLSPAN="3"
+><TABLE CLASS="vanilla2" CELLSPACING="0" CELLPADDING="0" ID="n:3" STYLE="display:block;"
+><TR
+><TD STYLE="padding-left: 1.25em;width: 44em"
+><A HREF="Data-Monoid-Additive-Sugar.html"
+>Data.Monoid.Additive.Sugar</A
+></TD
+><TD
+></TD
+><TD
+></TD
+></TR
+></TABLE
+></TD
+></TR
+><TR
+><TD STYLE="padding-left: 1.25em;width: 46em"
+><A HREF="Data-Monoid-Applicative.html"
+>Data.Monoid.Applicative</A
+></TD
+><TD
+></TD
+><TD
+></TD
+></TR
+><TR
+><TD STYLE="padding-left: 1.25em;width: 46em"
+><A HREF="Data-Monoid-Categorical.html"
+>Data.Monoid.Categorical</A
+></TD
+><TD
+></TD
+><TD
+></TD
+></TR
+><TR
+><TD STYLE="padding-left: 1.25em;width: 46em"
+><A HREF="Data-Monoid-Combinators.html"
+>Data.Monoid.Combinators</A
+></TD
+><TD
+></TD
+><TD
+></TD
+></TR
+><TR
+><TD STYLE="padding-left: 1.25em;width: 46em"
+><A HREF="Data-Monoid-FromString.html"
+>Data.Monoid.FromString</A
+></TD
+><TD
+></TD
+><TD
+></TD
+></TR
+><TR
+><TD STYLE="padding-left: 1.25em;width: 46em"
+><A HREF="Data-Monoid-Generator.html"
+>Data.Monoid.Generator</A
+></TD
+><TD
+></TD
+><TD
+></TD
+></TR
+><TR
+><TD STYLE="padding-left: 1.25em;width: 46em"
+><A HREF="Data-Monoid-Instances.html"
+>Data.Monoid.Instances</A
+></TD
+><TD
+></TD
+><TD
+></TD
+></TR
+><TR
+><TD STYLE="width: 46em"
+><IMG SRC="minus.gif" CLASS="coll" ONCLICK="toggle(this,'n:4')" ALT="show/hide"
+>Lexical</TD
+><TD
+></TD
+><TD
+></TD
+></TR
+><TR
+><TD STYLE="padding: 0; padding-left: 2em" COLSPAN="3"
+><TABLE CLASS="vanilla2" CELLSPACING="0" CELLPADDING="0" ID="n:4" STYLE="display:block;"
+><TR
+><TD STYLE="padding-left: 1.25em;width: 44em"
+><A HREF="Data-Monoid-Lexical-RunLengthEncoding.html"
+>Data.Monoid.Lexical.RunLengthEncoding</A
+></TD
+><TD
+></TD
+><TD
+></TD
+></TR
+><TR
+><TD STYLE="padding-left: 1.25em;width: 44em"
+><A HREF="Data-Monoid-Lexical-SourcePosition.html"
+>Data.Monoid.Lexical.SourcePosition</A
+></TD
+><TD
+></TD
+><TD
+></TD
+></TR
+><TR
+><TD STYLE="width: 44em"
+><IMG SRC="minus.gif" CLASS="coll" ONCLICK="toggle(this,'n:5')" ALT="show/hide"
+>UTF8</TD
+><TD
+></TD
+><TD
+></TD
+></TR
+><TR
+><TD STYLE="padding: 0; padding-left: 2em" COLSPAN="3"
+><TABLE CLASS="vanilla2" CELLSPACING="0" CELLPADDING="0" ID="n:5" STYLE="display:block;"
+><TR
+><TD STYLE="padding-left: 1.25em;width: 42em"
+><A HREF="Data-Monoid-Lexical-UTF8-Decoder.html"
+>Data.Monoid.Lexical.UTF8.Decoder</A
+></TD
+><TD
+></TD
+><TD
+></TD
+></TR
+></TABLE
+></TD
+></TR
+><TR
+><TD STYLE="padding-left: 1.25em;width: 44em"
+><A HREF="Data-Monoid-Lexical-Words.html"
+>Data.Monoid.Lexical.Words</A
+></TD
+><TD
+></TD
+><TD
+></TD
+></TR
+></TABLE
+></TD
+></TR
+><TR
+><TD STYLE="padding-left: 1.25em;width: 46em"
+><A HREF="Data-Monoid-Monad.html"
+>Data.Monoid.Monad</A
+></TD
+><TD
+></TD
+><TD
+></TD
+></TR
+><TR
+><TD STYLE="width: 46em"
+><IMG SRC="minus.gif" CLASS="coll" ONCLICK="toggle(this,'n:6')" ALT="show/hide"
+><A HREF="Data-Monoid-Multiplicative.html"
+>Data.Monoid.Multiplicative</A
+></TD
+><TD
+></TD
+><TD
+></TD
+></TR
+><TR
+><TD STYLE="padding: 0; padding-left: 2em" COLSPAN="3"
+><TABLE CLASS="vanilla2" CELLSPACING="0" CELLPADDING="0" ID="n:6" STYLE="display:block;"
+><TR
+><TD STYLE="padding-left: 1.25em;width: 44em"
+><A HREF="Data-Monoid-Multiplicative-Sugar.html"
+>Data.Monoid.Multiplicative.Sugar</A
+></TD
+><TD
+></TD
+><TD
+></TD
+></TR
+></TABLE
+></TD
+></TR
+><TR
+><TD STYLE="padding-left: 1.25em;width: 46em"
+><A HREF="Data-Monoid-Ord.html"
+>Data.Monoid.Ord</A
+></TD
+><TD
+></TD
+><TD
+></TD
+></TR
+><TR
+><TD STYLE="width: 46em"
+><IMG SRC="minus.gif" CLASS="coll" ONCLICK="toggle(this,'n:7')" ALT="show/hide"
+><A HREF="Data-Monoid-Reducer.html"
+>Data.Monoid.Reducer</A
+></TD
+><TD
+></TD
+><TD
+></TD
+></TR
+><TR
+><TD STYLE="padding: 0; padding-left: 2em" COLSPAN="3"
+><TABLE CLASS="vanilla2" CELLSPACING="0" CELLPADDING="0" ID="n:7" STYLE="display:block;"
+><TR
+><TD STYLE="padding-left: 1.25em;width: 44em"
+><A HREF="Data-Monoid-Reducer-Char.html"
+>Data.Monoid.Reducer.Char</A
+></TD
+><TD
+></TD
+><TD
+></TD
+></TR
+><TR
+><TD STYLE="padding-left: 1.25em;width: 44em"
+><A HREF="Data-Monoid-Reducer-With.html"
+>Data.Monoid.Reducer.With</A
+></TD
+><TD
+></TD
+><TD
+></TD
+></TR
+></TABLE
+></TD
+></TR
+><TR
+><TD STYLE="padding-left: 1.25em;width: 46em"
+><A HREF="Data-Monoid-Self.html"
+>Data.Monoid.Self</A
+></TD
+><TD
+></TD
+><TD
+></TD
+></TR
+><TR
+><TD STYLE="padding-left: 1.25em;width: 46em"
+><A HREF="Data-Monoid-Union.html"
+>Data.Monoid.Union</A
+></TD
+><TD
+></TD
+><TD
+></TD
+></TR
+></TABLE
+></TD
+></TR
+><TR
+><TD STYLE="width: 48em"
+><IMG SRC="minus.gif" CLASS="coll" ONCLICK="toggle(this,'n:8')" ALT="show/hide"
+><A HREF="Data-Ring.html"
+>Data.Ring</A
+></TD
+><TD
+></TD
+><TD
+></TD
+></TR
+><TR
+><TD STYLE="padding: 0; padding-left: 2em" COLSPAN="3"
+><TABLE CLASS="vanilla2" CELLSPACING="0" CELLPADDING="0" ID="n:8" STYLE="display:block;"
+><TR
+><TD STYLE="padding-left: 1.25em;width: 46em"
+><A HREF="Data-Ring-Boolean.html"
+>Data.Ring.Boolean</A
+></TD
+><TD
+></TD
+><TD
+></TD
+></TR
+><TR
+><TD STYLE="padding-left: 1.25em;width: 46em"
+><A HREF="Data-Ring-FromNum.html"
+>Data.Ring.FromNum</A
+></TD
+><TD
+></TD
+><TD
+></TD
+></TR
+><TR
+><TD STYLE="width: 46em"
+><IMG SRC="minus.gif" CLASS="coll" ONCLICK="toggle(this,'n:9')" ALT="show/hide"
+><A HREF="Data-Ring-Semi.html"
+>Data.Ring.Semi</A
+></TD
+><TD
+></TD
+><TD
+></TD
+></TR
+><TR
+><TD STYLE="padding: 0; padding-left: 2em" COLSPAN="3"
+><TABLE CLASS="vanilla2" CELLSPACING="0" CELLPADDING="0" ID="n:9" STYLE="display:block;"
+><TR
+><TD STYLE="padding-left: 1.25em;width: 44em"
+><A HREF="Data-Ring-Semi-Near.html"
+>Data.Ring.Semi.Near</A
+></TD
+><TD
+></TD
+><TD
+></TD
+></TR
+><TR
+><TD STYLE="padding-left: 1.25em;width: 44em"
+><A HREF="Data-Ring-Semi-Ord.html"
+>Data.Ring.Semi.Ord</A
+></TD
+><TD
+></TD
+><TD
+></TD
+></TR
+><TR
+><TD STYLE="padding-left: 1.25em;width: 44em"
+><A HREF="Data-Ring-Semi-Tropical.html"
+>Data.Ring.Semi.Tropical</A
+></TD
+><TD
+></TD
+><TD
+></TD
+></TR
+></TABLE
+></TD
+></TR
+><TR
+><TD STYLE="padding-left: 1.25em;width: 46em"
+><A HREF="Data-Ring-Sugar.html"
+>Data.Ring.Sugar</A
+></TD
+><TD
+></TD
+><TD
+></TD
+></TR
+></TABLE
+></TD
+></TR
+></TABLE
+></TD
+></TR
+></TABLE
+></TD
+></TR
+><TR
+><TD CLASS="s15"
+></TD
+></TR
+><TR
+><TD CLASS="botbar"
+>Produced by <A HREF="http://www.haskell.org/haddock/"
+>Haddock</A
+> version 2.3.0</TD
+></TR
+></TABLE
+></BODY
+></HTML
+>
addfile ./dist/doc/html/monoids/minus.gif
binary ./dist/doc/html/monoids/minus.gif
oldhex
*
newhex
*47494638396109000900910000fefefe8282820202020000002c00000000090009000002118c8f
*a00bc6eb5e0b40583b6596f1a11f14003b
addfile ./dist/doc/html/monoids/monoids.haddock
binary ./dist/doc/html/monoids/monoids.haddock
oldhex
*
newhex
*0d0cface0004000000000000e6eb000000000000d1cba400000000000000000000000000000000
*000000000000000100000000000000010000000000000000000000000000000100000000000000
*020000000000000000000000000000000100000000000000030000000000000000000000000000
*000100000000000000040000000000000000000000000000000100000000000000050000000000
*000000000000000000000100000000000000060000000000000000000000000000000200000000
*000000070000000000000000000000000000000200000000000000080000000000000000000000
*0000000002000000000000000900000000000000000000000000000003000000000000000a0000
*0000000000000000000000000003000000000000000b0000000000000000000000000000000300
*0000000000000c00000000000000000000000000000004000000000000000d0000000000000000
*0000000000000004000000000000000e0000000000000000000000000000000400000000000000
*0f0000000000000000000000000000000400000000000000100000000000000000000000000000
*000400000000000000110000000000000000000000000000000400000000000000120000000000
*000000000000000000000400000000000000130000000000000000000000000000000400000000
*000000140000000000000000000000000000000400000000000000150000000000000000000000
*000000000400000000000000160000000000000000000000000000000400000000000000170000
*000000000000000000000000000400000000000000180000000000000000000000000000000500
*0000000000001900000000000000000000000000000005000000000000001a0000000000000000
*0000000000000006000000000000001b0000000000000000000000000000000600000000000000
*1c00000000000000000000000000000006000000000000001d0000000000000000000000000000
*0006000000000000001e00000000000000000000000000000006000000000000001f0000000000
*000000000000000000000600000000000000200000000000000000000000000000000600000000
*000000210000000000000000000000000000000600000000000000220000000000000000000000
*000000000600000000000000230000000000000000000000000000000600000000000000240000
*000000000000000000000000000600000000000000250000000000000000000000000000000600
*000000000000260000000000000000000000000000000600000000000000270000000000000000
*000000000000000600000000000000280000000000000000000000000000000600000000000000
*2900000000000000000000000000000007000000000000002a0000000000000000000000000000
*0007000000000000002b00000000000000000000000000000007000000000000002c0000000000
*0000000000000000000007000000000000002d0000000000000000000000000000000700000000
*0000002e00000000000000000000000000000007000000000000002f0000000000000000000000
*000000000700000000000000300000000000000000000000000000000700000000000000310000
*000000000000000000000000000800000000000000320000000000000000000000000000000800
*000000000000330000000000000000000000000000000800000000000000340000000000000000
*000000000000000800000000000000350000000000000000000000000000000800000000000000
*360000000000000000000000000000000800000000000000370000000000000000000000000000
*000800000000000000380000000000000000000000000000000800000000000000390000000000
*0000000000000000000008000000000000003a0000000000000000000000000000000800000000
*0000003b00000000000000000000000000000009000000000000003c0000000000000000000000
*0000000009000000000000003d00000000000000000000000000000009000000000000003e0000
*000000000000000000000000000a000000000000003f0000000000000000000000000000000a00
*000000000000400000000000000000000000000000000a00000000000000410000000000000000
*000000000000000b00000000000000420000000000000000000000000000000b00000000000000
*430000000000000000000000000000000b00000000000000440000000000000000000000000000
*000b00000000000000450000000000000000000000000000000b00000000000000460000000000
*000000000000000000000b00000000000000470000000000000000000000000000000c00000000
*000000480000000000000000000000000000000c00000000000000490000000000000000000000
*000000000d000000000000004a0000000000000000000000000000000e000000000000004b0000
*000000000000000000000000000e000000000000004c0000000000000000000000000000000e00
*0000000000004d0000000000000000000000000000000e000000000000004e0000000000000000
*000000000000000e000000000000004f0000000000000000000000000000000e00000000000000
*500000000000000000000000000000000e00000000000000510000000000000000000000000000
*000e00000000000000520000000000000000000000000000000e00000000000000530000000000
*000000000000000000000f00000000000000540000000000000000000000000000001000000000
*000000550000000000000000000000000000001000000000000000560000000000000000000000
*000000001100000000000000570000000000000000000000000000001100000000000000580000
*000000000000000000000000001100000000000000590000000000000000000000000000001100
*0000000000005a00000000000000000000000000000011000000000000005b0000000000000000
*0000000000000011000000000000005c0000000000000000000000000000001100000000000000
*5d00000000000000000000000000000012000000000000005e0000000000000000000000000000
*0012000000000000005f0000000000000000000000000000001200000000000000600000000000
*000000000000000000001200000000000000610000000000000000000000000000001200000000
*000000620000000000000000000000000000001200000000000000630000000000000000000000
*000000001200000000000000640000000000000000000000000000001300000000000000650000
*000000000000000000000000001300000000000000660000000000000000000000000000001300
*000000000000670000000000000000000000000000001300000000000000680000000000000000
*000000000000001300000000000000690000000000000000000000000000001300000000000000
*6a00000000000000000000000000000013000000000000006b0000000000000000000000000000
*0013000000000000006c00000000000000000000000000000013000000000000006d0000000000
*0000000000000000000013000000000000006e0000000000000000000000000000001300000000
*0000006f0000000000000000000000000000001300000000000000700000000000000000000000
*000000001300000000000000710000000000000000000000000000001300000000000000720000
*000000000000000000000000001300000000000000730000000000000000000000000000001300
*000000000000740000000000000000000000000000001300000000000000750000000000000000
*000000000000001300000000000000760000000000000000000000000000001300000000000000
*770000000000000000000000000000001300000000000000780000000000000000000000000000
*0014000000000000007900000000000000000000000000000014000000000000007a0000000000
*0000000000000000000014000000000000007b0000000000000000000000000000001500000000
*0000007c00000000000000000000000000000016000000000000007d0000000000000000000000
*0000000016000000000000007e00000000000000000000000000000016000000000000007f0000
*000000000000000000000000001600000000000000800000000000000000000000000000001600
*000000000000810000000000000000000000000000001600000000000000820000000000000000
*000000000000001600000000000000830000000000000000000000000000001600000000000000
*840000000000000000000000000000001600000000000000850000000000000000000000000000
*001600000000000000860000000000000000000000000000001600000000000000870000000000
*000000000000000000001600000000000000880000000000000000000000000000001600000000
*0000008900000000000000000000000000000016000000000000008a0000000000000000000000
*0000000017000000000000008b00000000000000000000000000000017000000000000008c0000
*0000000000000000000000000017000000000000008d0000000000000000000000000000001700
*0000000000008e00000000000000000000000000000018000000000000008f0000000000000000
*000000000000001800000000000000900000000000000000000000000000001800000000000000
*910000000000000000000000000000001800000000000000920000000000000000000000000000
*001800000000000000930000000000000000000000000000001800000000000000940000000000
*000000000000000000001800000000000000950000000000000000000000000000001900000000
*000000960000000000000000000000000000001900000000000000970000000000000000000000
*000000001900000000000000980000000000000000000000000000001900000000000000990000
*000000000000000000000000001a000000000000009a0000000000000000000000000000001b00
*0000000000009b0000000000000000000000000000001b000000000000009c0000000000000000
*000000000000001b000000000000009d0000000000000000000000000000001c00000000000000
*9e0000000000000000000000000000001d000000000000009f0000000000000000000000000000
*001d00000000000000a00000000000000000000000000000001d00000000000000a10000000000
*000000000000000000001e00000000000000a20000000000000000000000000000001e00000000
*000000a30000000000000000000000000000001e200000000000000000000000000000001f0001
*08000000700000006f000000720000007400000061000000620000006c00000065010c00000065
*00000078000000700000006500000072000000690000006d000000650000006e00000074000000
*610000006c01150000006c00000069000000620000007200000061000000720000006900000065
*00000073000000400000006800000061000000730000006b000000650000006c0000006c000000
*2e0000006f0000007200000067000000000000000000000000000000000000010001140000006e
*0000006f0000006e0000002d000000700000006f00000072000000740000006100000062000000
*6c0000006500000020000000280000004d0000005000000054000000430000007300000029010c
*0000006500000078000000700000006500000072000000690000006d000000650000006e000000
*74000000610000006c01150000006c000000690000006200000072000000610000007200000069
*0000006500000073000000400000006800000061000000730000006b000000650000006c000000
*6c0000002e0000006f000000720000006706000000000000000001030102240000005400000068
*00000069000000730000002000000074000000790000007000000065000000200000006d000000
*610000007900000020000000620000006500000020000000620000006500000073000000740000
*00200000007200000065000000610000006400000020000000690000006e000000660000006900
*0000780000002e0000002000000041000000200107010202000000630000002001040100000000
*0000000000000000000000000000000000000000010202000000200000006d0102060000002000
*000069000000730000002000000061000000200104010000000000000000a40000000000000020
*000000000000002101020100000020010702010000006d01020b00000020000000740000006800
*00006100000074000000200000006d0000006100000070000000730000000a0102100000002000
*000076000000610000006c000000750000006500000073000000200000006f0000006600000020
*000000740000007900000070000000650000002001070201000000630102090000002000000074
*00000068000000720000006f000000750000006700000068000000200107020400000075000000
*6e000000690000007401021300000020000000740000006f000000200000007600000061000000
*6c000000750000006500000073000000200000006f000000660000002000000074000000790000
*00700000006500000020010702010000006d0102040000002e0000002000000041000000200107
*0201000000630102010000002d0104010000000000000000000000000000000000000000000000
*000101020a000000200000006d000000610000007900000020000000610000006c000000730000
*006f0000000a01022900000020000000730000007500000070000000700000006c000000790000
*00200000006f0000007000000065000000720000006100000074000000690000006f0000006e00
*000073000000200000007700000068000000690000006300000068000000200000007400000061
*000000630000006b0000002d0000006f0000006e00000020000000610000006e0000006f000000
*740000006800000065000000720000002001070201000000630102100000002000000074000000
*6f00000020000000610000006e0000002000000065000000780000006900000073000000740000
*00690000006e00000067000000200104010000000000000000a400000000000000200000000000
*00002101020100000020010702010000006d01020d000000200000006f0000006e000000200000
*00740000006800000065000000200000006c0000006500000066000000740000000a0102500000
*00200000006f000000720000002000000072000000690000006700000068000000740000002e00
*000020000000540000006800000065000000730000006500000020000000730000007000000065
*0000006300000069000000610000006c000000690000007a000000650000006400000020000000
*720000006500000064000000750000006300000074000000690000006f0000006e000000730000
*00200000006d0000006100000079000000200000006200000065000000200000006d0000006f00
*000072000000650000002000000065000000660000006600000069000000630000006900000065
*0000006e0000007400000020000000690000006e00000020000000730000006f0000006d000000
*65000000200000007300000063000000650000006e0000006100000072000000690000006f0000
*00730000000a01022400000020000000610000006e000000640000002000000061000000720000
*006500000020000000750000007300000065000000640000002000000077000000680000006500
*00006e00000020000000610000007000000070000000720000006f000000700000007200000069
*000000610000007400000065000000200000006200000079000000200000006100000020010209
*00000047000000650000006e000000650000007200000061000000740000006f0000007201020c
*0000002e00000020000000540000006800000065000000200000006e000000610000006d000000
*650000007300000020010401000000000000000003000000000000000000000000000000010102
*0500000020000000610000006e0000006400000020010401000000000000000002000000000000
*0000000000000000000101020600000020000000770000006f000000720000006b0000000a023d
*00000020000000620000007900000020000000610000006e000000610000006c0000006f000000
*670000007900000020000000740000006f00000020000000740000006800000065000000200000
*0073000000790000006e0000006f0000006e000000790000006d0000006f000000750000007300
*0000200000006f0000007000000065000000720000006100000074000000690000006f0000006e
*0000007300000020000000690000006e0000002000000074000000680000006500000020000000
*6c000000690000007300000074000000200000006d0000006f0000006e0000006f000000690000
*00640000002e0000000a010301024c000000540000006800000069000000730000002000000063
*0000006c0000006100000073000000730000002000000064000000650000006c00000069000000
*6200000065000000720000006100000074000000650000006c0000007900000020000000610000
*00760000006f0000006900000064000000730000002000000066000000750000006e0000006300
*000074000000690000006f0000006e000000610000006c0000002d000000640000006500000070
*000000650000006e00000064000000650000006e00000063000000690000006500000073000000
*2c00000020000000730000006f0000002000000074000000680000006100000074000000200000
*0028000000290000002000000063000000610000006e0000002000000062000000650000002000
*0000610000002001070201000000630102090000002d0000005200000065000000640000007500
*00006300000065000000720000000a01020900000020000000660000006f000000720000002000
*0000610000006c0000006c00000020010702010000006301024a0000002c000000200000006100
*00006e0000006400000020000000730000006f000000200000006d000000610000006e00000079
*00000020000000630000006f0000006d0000006d0000006f0000006e0000002000000072000000
*650000006400000075000000630000006500000072000000730000002000000063000000610000
*006e00000020000000770000006f000000720000006b000000200000006f000000760000006500
*000072000000200000006d000000750000006c0000007400000069000000700000006c00000065
*0000002000000074000000790000007000000065000000730000002c0000002000000066000000
*6f0000007200000020000000690000006e0000007300000074000000610000006e000000630000
*00650000002c0000000a0102200000002000000046000000690000007200000073000000740000
*0020000000610000006e00000064000000200000004c0000006100000073000000740000002000
*00006d000000610000007900000020000000720000006500000064000000750000006300000065
*00000020000000620000006f000000740000006800000020010702010000006101020500000020
*000000610000006e00000064000000200104010000000000000000a50000000000000020000000
*000000002201020100000020010702010000006101020a0000002e000000200000005300000069
*0000006e000000630000006500000020000000610000002001020900000047000000650000006e
*000000650000007200000061000000740000006f00000072010215000000200000006800000061
*000000730000002000000061000000200000006600000069000000780000006500000064000000
*20000000650000006c000000650000006d000000650000006e000000740000000a01025a000000
*20000000740000007900000070000000650000002c000000200000007400000068000000650000
*0020000000690000006e00000070000000750000007400000020000000740000006f0000002000
*000074000000680000006500000020000000720000006500000064000000750000006300000065
*000000720000002000000069000000730000002000000067000000650000006e00000065000000
*72000000610000006c0000006c00000079000000200000006b0000006e0000006f000000770000
*006e00000020000000610000006e00000064000000200000006500000078000000740000007200
*0000610000006300000074000000690000006e000000670000002000000066000000720000006f
*0000006d00000020000000740000006800000065000000200000006d0000006f0000006e000000
*6f000000690000006400000020000000750000007300000075000000610000006c0000006c0000
*00790000000a01025a000000200000006900000073000000200000007300000075000000660000
*0066000000690000006300000069000000650000006e0000007400000020000000740000006f00
*000020000000660000006900000078000000200000007400000068000000650000002000000072
*0000006500000073000000750000006c0000007400000020000000740000007900000070000000
*650000002e00000020000000430000006f0000006d00000062000000690000006e000000610000
*00740000006f000000720000007300000020000000610000007200000065000000200000006100
*00007600000061000000690000006c00000061000000620000006c000000650000002000000066
*0000006f00000072000000200000006d0000006f00000073000000740000002000000073000000
*63000000650000006e0000006100000072000000690000006f0000007300000020000000770000
*00680000006500000072000000650000000a010258000000200000007400000068000000690000
*0073000000200000006900000073000000200000006e0000006f00000074000000200000007400
*0000680000006500000020000000630000006100000073000000650000002c0000002000000061
*0000006e0000006400000020000000740000006800000065000000200000006600000065000000
*770000002000000072000000650000006d00000061000000690000006e000000690000006e0000
*006700000020000000630000006100000073000000650000007300000020000000630000006100
*00006e0000002000000062000000650000002000000068000000610000006e000000640000006c
*000000650000006400000020000000620000007900000020000000750000007300000069000000
*6e0000006700000020000000610000006e000000200000006500000078000000700000006c0000
*0069000000630000006900000074000000200000000a0212000000200000007400000079000000
*700000006500000020000000610000006e0000006e0000006f0000007400000061000000740000
*00690000006f0000006e0000002e0000000a030102140000004d000000690000006e0000006900
*00006d000000610000006c00000020000000640000006500000066000000690000006e00000069
*00000074000000690000006f0000006e0000003a00000020010401000000000000000001000000
*00000000000000000000000001010204000000200000006f000000720000002001040100000000
*00000000020000000000000000000000000000000102010000000a000000000000000103010217
*000000430000006f0000006e000000760000006500000072000000740000002000000061000000
*2000000076000000610000006c000000750000006500000020000000690000006e000000740000
*006f0000002000000061000000200104010000000000000000a400000000000000200000000000
*00002102010000000a000000000000000203010214000000410000007000000070000000650000
*006e0000006400000020000000610000002000000076000000610000006c000000750000006500
*000020000000740000006f0000002000000061000000200104010000000000000000a400000000
*000000200000000000000021022400000020000000660000006f00000072000000200000007500
*0000730000006500000020000000690000006e000000200000006c000000650000006600000074
*0000002d000000740000006f0000002d0000007200000069000000670000006800000074000000
*20000000720000006500000064000000750000006300000074000000690000006f0000006e0000
*000a00000000000000030301021700000050000000720000006500000070000000650000006e00
*00006400000020000000610000002000000076000000610000006c000000750000006500000020
*0000006f0000006e000000740000006f0000002000000061000000200104010000000000000000
*a400000000000000200000000000000021022800000020000000660000006f0000007200000020
*00000075000000730000006500000020000000640000007500000072000000690000006e000000
*670000002000000072000000690000006700000068000000740000002d000000740000006f0000
*002d0000006c000000650000006600000074000000200000007200000065000000640000007500
*00006300000074000000690000006f0000006e0000000a00000000000000040301020800000041
*00000070000000700000006c000000790000002000000061000000200104010000000000000000
*000000000000000000000000000000000101020600000020000000740000006f00000020000000
*61000000200104010000000000000000a600000000000000200000000000000023024b00000020
*000000630000006f0000006e0000007400000061000000690000006e0000006500000072000000
*2c000000200000006100000066000000740000006500000072000000200000006d000000610000
*007000000070000000690000006e00000067000000200000007400000068000000650000002000
*0000630000006f0000006e00000074000000650000006e00000074000000730000002000000069
*0000006e000000740000006f000000200000006100000020000000730000007500000069000000
*7400000061000000620000006c0000006500000020000000660000006f000000720000006d0000
*0020000000660000006f0000007200000020000000720000006500000064000000750000006300
*000074000000690000006f0000006e0000002e0000000a00000000000000050301020800000041
*00000070000000700000006c000000790000002000000061000000200104010000000000000000
*000000000000000000000000000000000101020600000020000000740000006f00000020000000
*61000000200104010000000000000000a60000000000000020000000000000002301021e000000
*200000006d000000610000007000000070000000690000006e0000006700000020000000650000
*0061000000630000006800000020000000650000006c000000650000006d000000650000006e00
*000074000000200000007400000068000000720000006f00000075000000670000006800000020
*0104010000000000000000010000000000000000000000000000000102010000000a2200000000
*000000a700000000000000a800000000000000a900000000000000a400000000000000aa000000
*00000000ab00000000000000ac00000000000000ad00000000000000ae00000000000000af0000
*0000000000b000000000000000b100000000000000b200000000000000b300000000000000b400
*000000000000b500000000000000b600000000000000b700000000000000b800000000000000b9
*00000000000000ba00000000000000bb00000000000000bc00000000000000bd00000000000000
*be00000000000000bf00000000000000c000000000000000c10000000000000000000000000000
*000100000000000000020000000000000003000000000000000400000000000000050600000000
*000000000000000000000001000000000000000200000000000000030000000000000004000000
*0000000005000000000000000000000000000000020001140000006e0000006f0000006e000000
*2d000000700000006f000000720000007400000061000000620000006c00000065000000200000
*00280000004d0000005000000054000000430000007300000029010c0000006500000078000000
*700000006500000072000000690000006d000000650000006e00000074000000610000006c0115
*0000006c0000006900000062000000720000006100000072000000690000006500000073000000
*400000006800000061000000730000006b000000650000006c0000006c0000002e0000006f0000
*0072000000670100000000000000060301022200000050000000720000006f0000007600000069
*0000006400000065000000730000002000000061000000200000006d0000006500000063000000
*68000000610000006e00000069000000730000006d00000020000000660000006f000000720000
*002000000074000000680000006500000020000000550000005400000046000000380000002001
*04010000000000000000a400000000000000200000000000000021023600000020000000740000
*006f000000200000007200000065000000700000006f0000007200000074000000200000006900
*00006e00000076000000610000006c000000690000006400000020000000630000006800000061
*000000720000006100000063000000740000006500000072000000730000002000000074000000
*6f000000200000006f0000006e00000065000000200000006f00000072000000200000006d0000
*006f0000007200000065000000200000006d0000006f0000006e0000006f000000690000006400
*0000730000002e0000000a2500000000000000a700000000000000a800000000000000a9000000
*00000000a400000000000000aa00000000000000ab00000000000000ac00000000000000ad0000
*0000000000ae00000000000000af00000000000000b000000000000000b100000000000000b200
*000000000000b300000000000000b400000000000000b500000000000000b600000000000000b7
*00000000000000b800000000000000b900000000000000ba00000000000000bb00000000000000
*bc00000000000000bd00000000000000be00000000000000bf00000000000000c0000000000000
*00c100000000000000000000000000000001000000000000000200000000000000030000000000
*000004000000000000000500000000000000060000000000000007000000000000000803000000
*000000000600000000000000080000000000000007000000000000000000000000000000030001
*140000006e0000006f0000006e0000002d000000700000006f0000007200000074000000610000
*00620000006c0000006500000020000000280000004d0000005000000054000000430000007300
*000029010c0000006500000078000000700000006500000072000000690000006d000000650000
*006e00000074000000610000006c01150000006c00000069000000620000007200000061000000
*72000000690000006500000073000000400000006800000061000000730000006b000000650000
*006c0000006c0000002e0000006f00000072000000670100000000000000090301020300000049
*0000006600000020010702010000006d0102060000002000000069000000730000002000000061
*0000002001070201000000630102010000002d0105070000005200000065000000640000007500
*000063000000650000007201020c0000002c000000200000007400000068000000650000006e00
*0000200000006d0000002000000069000000730000002001070102030000002800000063000000
*2001040200000000000000000a0000000000000000000000000000000300000000000000000900
*0000000000000000000000000000030203000000200000006d000000290102010000002d010507
*000000520000006500000064000000750000006300000065000000720102010000000a01022800
*000020000000200000002000000054000000680000006900000073000000200000006300000061
*0000006e0000002000000062000000650000002000000075000000730000006500000064000000
*20000000740000006f00000020000000710000007500000069000000630000006b0000006c0000
*00790000002000000073000000650000006c000000650000006300000074000000200000006100
*0000200105070000005200000065000000640000007500000063000000650000007201020e0000
*0020000000660000006f0000007200000020000000750000007300000065000000200000006100
*0000730000002000000061000000200104010100000000000000c20102010000000a0102030000
*002000000020000000200104010100000000000000c302020000002e0000000a25000000000000
*00a700000000000000a800000000000000a900000000000000a400000000000000aa0000000000
*0000ab00000000000000ac00000000000000ad00000000000000ae00000000000000af00000000
*000000b000000000000000b100000000000000b200000000000000b300000000000000b4000000
*00000000b500000000000000b600000000000000b700000000000000b800000000000000b90000
*0000000000ba00000000000000bb00000000000000bc00000000000000bd00000000000000be00
*000000000000bf00000000000000c000000000000000c100000000000000000000000000000001
*000000000000000200000000000000030000000000000004000000000000000500000000000000
*09000000000000000a000000000000000b030000000000000009000000000000000a0000000000
*00000b000000000000000000000000000000040000000004000000000000000c03010204000000
*540000006800000065000000200104010000000000000000a40000000000000020000000000000
*00210102010000002001070102010000002801020100000027010211000000750000006e000000
*690000006f0000006e00000057000000690000007400000068000000200000006d000000610000
*007000000070000000650000006e00000064010201000000270102010000002c01040100000000
*000000001600000000000000000000000000000004020100000029022100000020000000660000
*006f0000007200000020000000630000006f0000006e0000007400000061000000690000006e00
*00006500000072000000730000002000000066000000750000006c0000006c000000200000006f
*00000066000000200000006d0000006f0000006e0000006f000000690000006400000073000000
*2e0000000a000000000000000f03024d000000500000006f0000006c000000790000006d000000
*6f000000720000007000000068000000690000006300000020000000630000006f0000006e0000
*007400000061000000690000006e00000065000000720000007300000020000000740000006800
*000061000000740000002000000077000000650000002000000063000000610000006e00000020
*000000730000007500000070000000700000006c0000007900000020000000610000006e000000
*200000006f0000007000000065000000720000006100000074000000690000006f0000006e0000
*0020000000740000006f0000002000000068000000610000006e000000640000006c0000006500
*000020000000750000006e000000690000006f0000006e00000073000000200000007700000069
*00000074000000680000000a000000000000001203010204000000540000006800000065000000
*200104010000000000000000a40000000000000020000000000000002101020100000020010701
*020100000028010401000000000000000017000000000000000000000000000000040102010000
*002c01040100000000000000001600000000000000000000000000000004020100000029020100
*00000a00000000000000150301021d0000004100000020000000430000006f0000006e00000074
*00000061000000690000006e000000650000007200000020000000730000007500000069000000
*7400000061000000620000006c0000006500000020000000660000006f00000072000000200000
*007400000068000000650000002001040200000000000000001300000000000000000000000000
*000004000000000000000012000000000000000000000000000000040102010000002001040100
*00000000000000a40000000000000020000000000000002102010000000a1300000000000000a7
*00000000000000a900000000000000a40000000000000000000000000000000100000000000000
*020000000000000003000000000000000c000000000000000d000000000000000e000000000000
*000f00000000000000100000000000000011000000000000001200000000000000130000000000
*0000140000000000000015000000000000001600000000000000170c0000000000000015000000
*000000001600000000000000170000000000000012000000000000001300000000000000140000
*00000000000f00000000000000110000000000000010000000000000000c000000000000000d00
*0000000000000e000000000000000000000000000000050001140000006e0000006f0000006e00
*00002d000000700000006f000000720000007400000061000000620000006c0000006500000020
*000000280000004d0000005000000054000000430000007300000029010c000000650000007800
*0000700000006500000072000000690000006d000000650000006e00000074000000610000006c
*01150000006c000000690000006200000072000000610000007200000069000000650000007300
*0000400000006800000061000000730000006b000000650000006c0000006c0000002e0000006f
*0000007200000067002700000000000000a700000000000000a800000000000000a90000000000
*0000a400000000000000aa00000000000000ab00000000000000ac00000000000000ad00000000
*000000ae00000000000000af00000000000000b000000000000000b100000000000000b2000000
*00000000b300000000000000b400000000000000b500000000000000b600000000000000b70000
*0000000000b800000000000000b900000000000000ba00000000000000bb00000000000000bc00
*000000000000bd00000000000000be00000000000000bf00000000000000c000000000000000c1
*000000000000000000000000000000010000000000000002000000000000000300000000000000
*040000000000000005000000000000000600000000000000070000000000000008000000000000
*001800000000000000190200000000000000180000000000000019000000000000000000000000
*00000006000108000000700000006f000000720000007400000061000000620000006c00000065
*010c0000006500000078000000700000006500000072000000690000006d000000650000006e00
*000074000000610000006c01150000006c00000069000000620000007200000061000000720000
*00690000006500000073000000400000006800000061000000730000006b000000650000006c00
*00006c0000002e0000006f000000720000006705000000000000001a0301020200000061000000
*200104010000000000000000230000000000000000000000000000000601021900000020000000
*7400000072000000610000006e00000073000000660000006f000000720000006d000000650000
*007200000020000000740000006800000061000000740000002000000074000000720000006500
*0000610000007400000073000000200104010000000000000000c4000000000000002000000000
*00000024010204000000200000006100000073000000200104010000000000000000c500000000
*0000002500000000000000260102010000000a0102150000002000000054000000680000006900
*000073000000200000006c00000065000000740000007300000020000000790000006f00000075
*0000002000000075000000730000006500000020000000610000002001020a0000004200000079
*0000007400000065000000530000007400000072000000690000006e0000006701020600000020
*00000061000000730000002000000061000000200104010000000000000000c500000000000000
*25000000000000002601022000000020000000730000006f000000750000007200000063000000
*6500000020000000770000006900000074000000680000006f0000007500000074000000200000
*00670000006f000000690000006e00000067000000200000007400000068000000720000006f00
*00007500000067000000680000002000000061000000200104010000000000000000a400000000
*000000200000000000000021010212000000200000007400000072000000610000006e00000073
*000000660000006f000000720000006d0000006500000072000000200000006c00000069000000
*6b00000065000000200102040000005500000054000000460000003802010000000a0000000000
*00001d030102020000006100000020010401000000000000000023000000000000000000000000
*00000006024d000000200000007400000072000000610000006e00000073000000660000006f00
*0000720000006d0000006500000072000000200000007400000068000000610000007400000020
*00000061000000730000006b00000073000000200000006f0000006e0000006c00000079000000
*20000000660000006f000000720000002000000074000000680000006500000020000000760000
*00610000006c00000075000000650000007300000020000000630000006f0000006e0000007400
*000061000000690000006e000000650000006400000020000000690000006e0000002000000061
*0000006e00000020000000690000006e0000006400000065000000780000006500000064000000
*20000000630000006f0000006e0000007400000061000000690000006e00000065000000720000
*000a00000000000000200301020200000061000000200104010000000000000000230000000000
*00000000000000000000060241000000200000007400000072000000610000006e000000730000
*00660000006f000000720000006d00000065000000720000002000000074000000680000006100
*0000740000002000000061000000730000006b00000073000000200000006f0000006e0000006c
*0000007900000020000000660000006f0000007200000020000000740000006800000065000000
*200000006b000000650000007900000073000000200000006f0000006600000020000000610000
*006e00000020000000690000006e00000064000000650000007800000065000000640000002000
*0000630000006f0000006e0000007400000061000000690000006e00000065000000720000000a
*0000000000000023030102130000006d000000690000006e000000690000006d00000061000000
*6c00000020000000640000006500000066000000690000006e0000006900000074000000690000
*006f0000006e000000200104010000000000000000250000000000000000000000000000000601
*0204000000200000006f0000007200000020010401000000000000000026000000000000000000
*0000000000000602010000000a0000000000000028030102080000004100000070000000700000
*006c00000079000000200000006100000020010401000000000000000000000000000000000000
*0000000000000101021f0000002000000064000000690000007200000065000000630000007400
*00006c0000007900000020000000740000006f0000002000000074000000680000006500000020
*000000650000006c000000650000006d000000650000006e000000740000007300000020000000
*6f0000006600000020000000610000002001040100000000000000002300000000000000000000
*00000000000602010000000a3100000000000000a700000000000000a800000000000000a90000
*0000000000a400000000000000aa00000000000000ab00000000000000ac00000000000000ad00
*000000000000ae00000000000000af00000000000000b000000000000000b100000000000000b2
*00000000000000b300000000000000b400000000000000b500000000000000b600000000000000
*b700000000000000b800000000000000b900000000000000ba00000000000000bb000000000000
*00bc00000000000000bd00000000000000be00000000000000bf00000000000000c00000000000
*0000c1000000000000000000000000000000010000000000000002000000000000000300000000
*000000040000000000000005000000000000001a000000000000001b000000000000001c000000
*000000001d000000000000001e000000000000001f000000000000002000000000000000210000
*000000000022000000000000002300000000000000240000000000000025000000000000002600
*0000000000002700000000000000280f0000000000000023000000000000002400000000000000
*250000000000000026000000000000002700000000000000280000000000000020000000000000
*00210000000000000022000000000000001d000000000000001e000000000000001f0000000000
*00001a000000000000001b000000000000001c0000000000000000000000000000000700012700
*00006e0000006f0000006e0000002d000000700000006f00000072000000740000006100000062
*0000006c0000006500000020000000280000004d00000050000000540000004300000073000000
*2c000000200000004f0000007600000065000000720000006c0000006f00000061000000640000
*006500000064000000530000007400000072000000690000006e00000067000000730000002901
*0c0000006500000078000000700000006500000072000000690000006d000000650000006e0000
*0074000000610000006c01150000006c0000006900000062000000720000006100000072000000
*690000006500000073000000400000006800000061000000730000006b000000650000006c0000
*006c0000002e0000006f0000007200000067060000000000000029030102020000004100000020
*0104010000000000000000a40000000000000020000000000000002101023a000000200000006f
*00000066000000200000007000000061000000720000007400000069000000610000006c000000
*20000000690000006e000000660000006f000000720000006d0000006100000074000000690000
*006f0000006e0000002000000061000000620000006f0000007500000074000000200000006c00
*00006f000000630000006100000074000000690000006f0000006e000000730000002000000069
*0000006e000000200000006100000020000000730000006f000000750000007200000063000000
*650000002000000066000000690000006c000000650000002e0000000a025f0000002000000020
*000000200000005400000068000000690000007300000020000000690000007300000020000000
*700000006f0000006c000000790000006d0000006f000000720000007000000068000000690000
*006300000020000000690000006e00000020000000740000006800000065000000200000006b00
*0000690000006e00000064000000200000006f0000006600000020000000690000006e00000066
*0000006f000000720000006d0000006100000074000000690000006f0000006e00000020000000
*790000006f000000750000002000000077000000610000006e0000007400000020000000740000
*006f000000200000006d00000061000000690000006e0000007400000061000000690000006e00
*00002000000061000000620000006f000000750000007400000020000000650000006100000063
*0000006800000020000000730000006f0000007500000072000000630000006500000020000000
*66000000690000006c000000650000002e0000000a000000000000002c03023f00000043000000
*6f0000006d00000070000000750000007400000065000000200000007400000068000000650000
*00200000006c0000006f000000630000006100000074000000690000006f0000006e0000002000
*00006f0000006600000020000000740000006800000065000000200000006e0000006500000078
*00000074000000200000007300000074000000610000006e000000640000006100000072000000
*6400000020000000380000002d000000630000006f0000006c000000750000006d0000006e0000
*0020000000610000006c00000069000000670000006e0000006500000064000000200000007400
*000061000000620000000a000000000000002d030102350000006c000000690000006600000074
*00000020000000690000006e000000660000006f000000720000006d0000006100000074000000
*690000006f0000006e0000002000000061000000620000006f0000007500000074000000200000
*006100000020000000730000006f00000075000000720000006300000065000000200000006600
*0000690000006c0000006500000020000000690000006e000000740000006f0000002000000061
*000000200000007300000074000000610000007200000074000000690000006e00000067000000
*2001040100000000000000002900000000000000000000000000000007020f0000002000000066
*0000006f0000007200000020000000740000006800000061000000740000002000000066000000
*690000006c000000650000000a000000000000002e03026a000000650000007800000074000000
*720000006100000063000000740000002000000070000000610000007200000074000000690000
*00610000006c00000020000000690000006e000000660000006f000000720000006d0000006100
*000074000000690000006f0000006e0000002000000061000000620000006f0000007500000074
*000000200000007400000068000000650000002000000063000000750000007200000072000000
*650000006e0000007400000020000000630000006f0000006c000000750000006d0000006e0000
*002c000000200000006500000076000000650000006e00000020000000690000006e0000002000
*000074000000680000006500000020000000610000006200000073000000650000006e00000063
*00000065000000200000006f00000066000000200000006b0000006e0000006f00000077000000
*6c00000065000000640000006700000065000000200000006f0000006600000020000000740000
*00680000006500000020000000730000006f000000750000007200000063000000650000002000
*000066000000690000006c000000650000000a000000000000002f030246000000650000007800
*000074000000720000006100000063000000740000002000000070000000610000007200000074
*00000069000000610000006c00000020000000690000006e000000660000006f00000072000000
*6d0000006100000074000000690000006f0000006e0000002000000061000000620000006f0000
*007500000074000000200000007400000068000000650000002000000063000000750000007200
*000072000000650000006e00000074000000200000006c000000690000006e0000006500000020
*0000006e000000750000006d000000620000006500000072000000200000006900000066000000
*20000000700000006f000000730000007300000069000000620000006c000000650000000a0000
*00000000003003023c000000650000007800000074000000720000006100000063000000740000
*0020000000740000006800000065000000200000007300000074000000610000006e0000006400
*000061000000720000006400000020000000660000006f000000720000006d0000006100000074
*00000020000000660000006f0000007200000020000000610000006e0000002000000061000000
*62000000730000006f0000006c00000075000000740000006500000020000000730000006f0000
*007500000072000000630000006500000020000000700000006f00000073000000690000007400
*0000690000006f0000006e0000000a2d00000000000000a700000000000000a800000000000000
*a900000000000000a400000000000000aa00000000000000ab00000000000000ac000000000000
*00ad00000000000000ae00000000000000af00000000000000b000000000000000b10000000000
*0000b200000000000000b300000000000000b400000000000000b500000000000000b600000000
*000000b700000000000000b800000000000000b900000000000000ba00000000000000bb000000
*00000000bc00000000000000bd00000000000000be00000000000000bf00000000000000c00000
*0000000000c1000000000000000000000000000000010000000000000002000000000000000300
*000000000000040000000000000005000000000000000600000000000000070000000000000008
*0000000000000029000000000000002a000000000000002b000000000000002c00000000000000
*2d000000000000002e000000000000002f000000000000003008000000000000002c0000000000
*000029000000000000002b000000000000002a000000000000002f000000000000002e00000000
*0000002d0000000000000030000000000000000000000000000000080001270000006e0000006f
*0000006e0000002d000000700000006f000000720000007400000061000000620000006c000000
*6500000020000000280000004d000000500000005400000043000000730000002c000000200000
*004f0000007600000065000000720000006c0000006f0000006100000064000000650000006400
*0000530000007400000072000000690000006e000000670000007300000029010c000000650000
*0078000000700000006500000072000000690000006d000000650000006e000000740000006100
*00006c01150000006c000000690000006200000072000000610000007200000069000000650000
*0073000000400000006800000061000000730000006b000000650000006c0000006c0000002e00
*00006f000000720000006708000000000000003103010202000000410000002001040100000000
*000000000600000000000000000000000000000002022600000020000000740000007200000061
*0000006e00000073000000660000006f000000720000006d000000650000007200000020000000
*740000006800000061000000740000002000000073000000740000007200000069000000700000
*0073000000200000006f0000007500000074000000200000006e00000065000000770000006c00
*0000690000006e00000065000000730000000a0000000000000033030102020000004100000020
*010401000000000000000006000000000000000000000000000000020102360000002000000074
*00000072000000610000006e00000073000000660000006f000000720000006d00000065000000
*720000002000000074000000680000006100000074000000200000007300000074000000720000
*00690000007000000073000000200000006f000000750000007400000020000000610000006e00
*000079000000200000006300000068000000610000007200000061000000630000007400000065
*00000072000000200000006d000000610000007400000063000000680000006500000064000000
*200000006200000079000000200104010000000000000000c60000000000000020000000000000
*002702010000000a00000000000000350301020200000041000000200104010000000000000000
*060000000000000000000000000000000201021b00000020000000740000007200000061000000
*6e00000073000000660000006f000000720000006d000000650000007200000020000000740000
*0068000000610000007400000020000000620000007200000065000000610000006b0000007300
*00002000000061000000200104010000000000000000c500000000000000250000000000000026
*010201000000200104010000000000000000230000000000000000000000000000000601022000
*000020000000690000006e000000740000006f0000002000000064000000690000007300000074
*000000690000006e0000006300000074000000200000006c000000690000006e00000065000000
*730000002c0000002000000066000000650000006500000064000000690000006e000000670000
*002000000061000000200104010000000000000000c50000000000000025000000000000002601
*020100000020010401000000000000000000000000000000000000000000000000010214000000
*2000000065000000610000006300000068000000200000006c000000690000006e000000650000
*0020000000690000006e000000200000007400000075000000720000006e0000002e0000000a00
*000000000000360301020200000041000000200104010000000000000000060000000000000000
*000000000000000201021b000000200000007400000072000000610000006e0000007300000066
*0000006f000000720000006d000000650000007200000020000000740000006800000061000000
*7400000020000000620000007200000065000000610000006b0000007300000020000000610000
*00200104010000000000000000c500000000000000250000000000000026010201000000200104
*010000000000000000230000000000000000000000000000000601022000000020000000690000
*006e000000740000006f0000002000000064000000690000007300000074000000690000006e00
*0000630000007400000020000000770000006f0000007200000064000000730000002c00000020
*00000066000000650000006500000064000000690000006e000000670000002000000061000000
*200104010000000000000000c50000000000000025000000000000002601020100000020010401
*000000000000000000000000000000000000000000000000010213000000200000006500000061
*0000006300000068000000200000006c000000690000006e000000650000002000000069000000
*6e000000200000007400000075000000720000006e0000000a0000000000000037030102230000
*004500000078000000740000007200000061000000630000007400000020000000740000006800
*000065000000200000006d00000061000000740000006300000068000000650000006400000020
*000000770000006f0000007200000064000000730000002000000066000000720000006f000000
*6d0000002000000074000000680000006500000020010401000000000000000036000000000000
*00000000000000000008010201000000200104010000000000000000a400000000000000200000
*00000000002102010000000a000000000000003803010223000000450000007800000074000000
*7200000061000000630000007400000020000000740000006800000065000000200000006d0000
*00610000007400000063000000680000006500000064000000200000006c000000690000006e00
*000065000000730000002000000066000000720000006f0000006d000000200000007400000068
*000000650000002001040100000000000000003500000000000000000000000000000008010201
*000000200104010000000000000000a40000000000000020000000000000002102010000000a00
*0000000000003903025e0000005500000074000000690000006c00000069000000740000007900
*00002000000066000000750000006e0000006300000074000000690000006f0000006e00000020
*000000740000006f00000020000000650000007800000074000000720000006100000063000000
*7400000020000000770000006f0000007200000064000000730000002000000075000000730000
*00690000006e0000006700000020000000610000006300000063000000750000006d0000007500
*00006c00000061000000740000006f000000720000002c00000020000000690000006e00000073
*0000006900000064000000650000002d000000770000006f00000072000000640000002c000000
*20000000610000006e0000006400000020000000750000006e00000074000000690000006c0000
*002d0000006e0000006500000078000000740000002d000000770000006f000000720000006400
*0000200000006d0000006f0000006e0000006f0000006900000064000000730000000a00000000
*0000003a03025e0000005500000074000000690000006c00000069000000740000007900000020
*00000066000000750000006e0000006300000074000000690000006f0000006e00000020000000
*740000006f00000020000000650000007800000074000000720000006100000063000000740000
*00200000006c000000690000006e00000065000000730000002000000075000000730000006900
*00006e0000006700000020000000610000006300000063000000750000006d000000750000006c
*00000061000000740000006f000000720000002c00000020000000690000006e00000073000000
*6900000064000000650000002d0000006c000000690000006e000000650000002c000000200000
*00610000006e0000006400000020000000750000006e00000074000000690000006c0000002d00
*00006e0000006500000078000000740000002d0000006c000000690000006e0000006500000020
*0000006d0000006f0000006e0000006f0000006900000064000000730000000a2f000000000000
*00a700000000000000a800000000000000a900000000000000a400000000000000aa0000000000
*0000ab00000000000000ac00000000000000ad00000000000000ae00000000000000af00000000
*000000b000000000000000b100000000000000b200000000000000b300000000000000b4000000
*00000000b500000000000000b600000000000000b700000000000000b800000000000000b90000
*0000000000ba00000000000000bb00000000000000bc00000000000000bd00000000000000be00
*000000000000bf00000000000000c000000000000000c100000000000000000000000000000001
*000000000000000200000000000000030000000000000004000000000000000500000000000000
*060000000000000007000000000000000800000000000000310000000000000032000000000000
*003300000000000000340000000000000035000000000000003600000000000000370000000000
*0000380000000000000039000000000000003a0a00000000000000360000000000000037000000
*000000003300000000000000340000000000000039000000000000003500000000000000380000
*0000000000310000000000000032000000000000003a0000000000000000000000000000000900
*0108000000700000006f000000720000007400000061000000620000006c00000065010c000000
*6500000078000000700000006500000072000000690000006d000000650000006e000000740000
*00610000006c01150000006c000000690000006200000072000000610000007200000069000000
*6500000073000000400000006800000061000000730000006b000000650000006c0000006c0000
*002e0000006f0000007200000067002500000000000000a700000000000000a800000000000000
*a900000000000000a400000000000000aa00000000000000ab00000000000000ac000000000000
*00ad00000000000000ae00000000000000af00000000000000b000000000000000b10000000000
*0000b200000000000000b300000000000000b400000000000000b500000000000000b600000000
*000000b700000000000000b800000000000000b900000000000000ba00000000000000bb000000
*00000000bc00000000000000bd00000000000000be00000000000000bf00000000000000c00000
*0000000000c1000000000000000000000000000000010000000000000002000000000000000300
*000000000000040000000000000005000000000000003b000000000000003c000000000000003d
*03000000000000003b000000000000003c000000000000003d0000000000000000000000000000
*000a0001280000006e0000006f0000006e0000002d000000700000006f00000072000000740000
*0061000000620000006c0000006500000020000000280000006f00000076000000650000007200
*00006c0000006f0000006100000064000000650000006400000020000000730000007400000072
*000000690000006e00000067000000730000002c000000200000004d0000005000000054000000
*430000007300000029010c0000006500000078000000700000006500000072000000690000006d
*000000650000006e00000074000000610000006c01150000006c00000069000000620000007200
*00006100000072000000690000006500000073000000400000006800000061000000730000006b
*000000650000006c0000006c0000002e0000006f0000007200000067002500000000000000a700
*000000000000a800000000000000a900000000000000a400000000000000aa00000000000000ab
*00000000000000ac00000000000000ad00000000000000ae00000000000000af00000000000000
*b000000000000000b100000000000000b200000000000000b300000000000000b4000000000000
*00b500000000000000b600000000000000b700000000000000b800000000000000b90000000000
*0000ba00000000000000bb00000000000000bc00000000000000bd00000000000000be00000000
*000000bf00000000000000c000000000000000c100000000000000000000000000000001000000
*0000000002000000000000000300000000000000040000000000000005000000000000003e0000
*00000000003f000000000000004003000000000000003e000000000000003f0000000000000040
*0000000000000000000000000000000b000108000000700000006f000000720000007400000061
*000000620000006c00000065010c00000065000000780000007000000065000000720000006900
*00006d000000650000006e00000074000000610000006c01150000006c00000069000000620000
*007200000061000000720000006900000065000000730000004000000068000000610000007300
*00006b000000650000006c0000006c0000002e0000006f00000072000000670300000000000000
*410301020200000041000000200104010000000000000000a40000000000000020000000000000
*002101020b000000200000006900000073000000200000006a0000007500000073000000740000
*002000000061000000200104010000000000000000c70000000000000020000000000000002802
*130000002000000077000000690000007400000068000000200000006f0000006e000000650000
*00200000006f000000620000006a0000006500000063000000740000002e000000200000000a00
*0000000000004303010204000000540000006800000065000000200104010000000000000000a4
*00000000000000200000000000000021010237000000200000006f000000660000002000000074
*000000680000006500000020000000650000006e000000640000006f0000006d0000006f000000
*72000000700000006800000069000000730000006d00000073000000200000006f000000760000
*00650000007200000020000000730000006f0000006d00000065000000200000006f0000006200
*00006a00000065000000630000007400000020000000690000006e00000020000000610000006e
*000000200000006100000072000000620000006900000074000000720000006100000072000000
*79000000200104010000000000000000c70000000000000020000000000000002802020000002e
*0000000a00000000000000460301020c0000004500000078000000740000007200000061000000
*630000007400000020000000740000006800000065000000200104010000000000000000a40000
*000000000020000000000000002101021e0000002000000066000000720000006f0000006d0000
*002000000069000000740000007300000020000000720000006500000070000000720000006500
*000073000000650000006e000000740000006100000074000000690000006f0000006e00000020
*00000061000000730000002000000061000000200104010000000000000000c700000000000000
*20000000000000002802010000000a2d00000000000000a700000000000000a800000000000000
*a900000000000000a400000000000000aa00000000000000ab00000000000000ac000000000000
*00ad00000000000000ae00000000000000af00000000000000b000000000000000b10000000000
*0000b200000000000000b300000000000000b400000000000000b500000000000000b600000000
*000000b700000000000000b800000000000000b900000000000000ba00000000000000bb000000
*00000000bc00000000000000bd00000000000000be00000000000000bf00000000000000c00000
*0000000000c100000000000000c800000000000000c900000000000000ca00000000000000cb00
*000000000000c70000000000000000000000000000000100000000000000020000000000000003
*000000000000000400000000000000050000000000000041000000000000004200000000000000
*430000000000000044000000000000004500000000000000460600000000000000430000000000
*000044000000000000004500000000000000410000000000000042000000000000004600000000
*00000000000000000000000c000108000000700000006f00000072000000740000006100000062
*0000006c00000065010c0000006500000078000000700000006500000072000000690000006d00
*0000650000006e00000074000000610000006c01150000006c0000006900000062000000720000
*006100000072000000690000006500000073000000400000006800000061000000730000006b00
*0000650000006c0000006c0000002e0000006f0000007200000067001e00000000000000a70000
*0000000000a800000000000000a900000000000000a400000000000000aa00000000000000ab00
*000000000000ac00000000000000ad00000000000000ae00000000000000af00000000000000b0
*00000000000000b100000000000000b200000000000000b300000000000000b400000000000000
*b500000000000000b600000000000000b700000000000000b800000000000000b9000000000000
*00ba00000000000000bb00000000000000bc00000000000000bd00000000000000be0000000000
*0000bf00000000000000c000000000000000c10000000000000047000000000000004802000000
*000000004700000000000000480000000000000000000000000000000d00010800000070000000
*6f000000720000007400000061000000620000006c00000065010c000000650000007800000070
*0000006500000072000000690000006d000000650000006e00000074000000610000006c011500
*00006c000000690000006200000072000000610000007200000069000000650000007300000040
*0000006800000061000000730000006b000000650000006c0000006c0000002e0000006f000000
*7200000067001f00000000000000a700000000000000a800000000000000a900000000000000a4
*00000000000000aa00000000000000ab00000000000000ac00000000000000ad00000000000000
*ae00000000000000af00000000000000b000000000000000b100000000000000b2000000000000
*00b300000000000000b400000000000000b500000000000000b600000000000000b70000000000
*0000b800000000000000b900000000000000ba00000000000000bb00000000000000bc00000000
*000000bd00000000000000be00000000000000bf00000000000000c000000000000000c1000000
*000000004700000000000000480000000000000049010000000000000049000000000000000000
*0000000000000e000122000000700000006f000000720000007400000061000000620000006c00
*000065000000200000002800000062000000750000007400000020000000690000006e00000073
*00000074000000610000006e000000630000006500000073000000200000007500000073000000
*65000000200000004d0000005000000054000000430000007300000029010c0000006500000078
*000000700000006500000072000000690000006d000000650000006e0000007400000061000000
*6c01150000006c0000006900000062000000720000006100000072000000690000006500000073
*000000400000006800000061000000730000006b000000650000006c0000006c0000002e000000
*6f000000720000006702000000000000004a0301020a000000430000006f0000006e0000007600
*00006500000072000000740000002000000061000000200104010000000000000000a400000000
*00000020000000000000002101020800000020000000690000006e000000740000006f00000020
*00000061000000200104010000000000000000500000000000000000000000000000000e01020c
*0000002e000000200000004d0000006e000000650000006d0000006f0000006e00000069000000
*630000003a000000200107021b0000004500000078000000700000002000000061000000200000
*002a000000200000004500000078000000700000002000000062000000200000003d0000002000
*0000450000007800000070000000200000002800000061000000200000002b0000002000000062
*0000002902010000000a000000000000004d0301020a000000430000006f0000006e0000007600
*000065000000720000007400000020000000610000002001040100000000000000005000000000
*00000000000000000000000e01020800000020000000690000006e000000740000006f00000020
*00000061000000200104010000000000000000a40000000000000020000000000000002101020c
*0000002e000000200000004d0000006e000000650000006d0000006f0000006e00000069000000
*630000003a000000200107021b0000004c0000006f000000670000002000000061000000200000
*002b000000200000004c0000006f000000670000002000000062000000200000003d0000002000
*00004c0000006f00000067000000200000002800000061000000200000002a0000002000000062
*0000002902010000000a2700000000000000a700000000000000a800000000000000a900000000
*000000a400000000000000aa00000000000000ab00000000000000ac00000000000000ad000000
*00000000ae00000000000000af00000000000000b000000000000000b100000000000000b20000
*0000000000b300000000000000b400000000000000b500000000000000b600000000000000b700
*000000000000b800000000000000b900000000000000ba00000000000000bb00000000000000bc
*00000000000000bd00000000000000be00000000000000bf00000000000000c000000000000000
*c100000000000000470000000000000048000000000000004a000000000000004b000000000000
*004c000000000000004d000000000000004e000000000000004f00000000000000500000000000
*000051000000000000005209000000000000005000000000000000510000000000000052000000
*000000004d000000000000004e000000000000004f000000000000004a000000000000004b0000
*00000000004c0000000000000000000000000000000f000108000000700000006f000000720000
*007400000061000000620000006c00000065010c00000065000000780000007000000065000000
*72000000690000006d000000650000006e00000074000000610000006c01150000006c00000069
*000000620000007200000061000000720000006900000065000000730000004000000068000000
*61000000730000006b000000650000006c0000006c0000002e0000006f00000072000000670029
*00000000000000a700000000000000a800000000000000a900000000000000a400000000000000
*aa00000000000000ab00000000000000ac00000000000000ad00000000000000ae000000000000
*00af00000000000000b000000000000000b100000000000000b200000000000000b30000000000
*0000b400000000000000b500000000000000b600000000000000b700000000000000b800000000
*000000b900000000000000ba00000000000000bb00000000000000bc00000000000000bd000000
*00000000be00000000000000bf00000000000000c000000000000000c100000000000000470000
*0000000000480000000000000049000000000000004a000000000000004b000000000000004c00
*0000000000004d000000000000004e000000000000004f00000000000000500000000000000051
*000000000000005200000000000000530100000000000000530000000000000000000000000000
*001000011e000000700000006f000000720000007400000061000000620000006c000000650000
*002000000028000000690000006e0000007300000074000000610000006e000000630000006500
*00007300000020000000750000007300000065000000200000004d000000500000005400000043
*0000007300000029010c0000006500000078000000700000006500000072000000690000006d00
*0000650000006e00000074000000610000006c01150000006c0000006900000062000000720000
*006100000072000000690000006500000073000000400000006800000061000000730000006b00
*0000650000006c0000006c0000002e0000006f00000072000000670200000000000000540b021f
*00000061000000200000002a000000200000002800000062000000200000002b00000020000000
*6300000029000000200000003d000000200000002800000061000000200000002a000000200000
*006200000029000000200000002b000000200000002800000061000000200000002a0000002000
*0000630000002900000000000000550b021f0000002800000061000000200000002b0000002000
*00006200000029000000200000002a0000002000000063000000200000003d0000002000000028
*00000061000000200000002a000000200000006300000029000000200000002b00000020000000
*2800000062000000200000002a0000002000000063000000292900000000000000a70000000000
*0000a800000000000000a900000000000000a400000000000000aa00000000000000ab00000000
*000000ac00000000000000ad00000000000000ae00000000000000af00000000000000b0000000
*00000000b100000000000000b200000000000000b300000000000000b400000000000000b50000
*0000000000b600000000000000b700000000000000b800000000000000b900000000000000ba00
*000000000000bb00000000000000bc00000000000000bd00000000000000be00000000000000bf
*00000000000000c000000000000000c10000000000000047000000000000004800000000000000
*4a000000000000004b000000000000004c000000000000004d000000000000004e000000000000
*004f00000000000000500000000000000051000000000000005200000000000000540000000000
*000055020000000000000054000000000000005500000000000000000000000000000011000114
*0000006e0000006f0000006e0000002d000000700000006f000000720000007400000061000000
*620000006c0000006500000020000000280000004d000000500000005400000043000000730000
*0029010c0000006500000078000000700000006500000072000000690000006d00000065000000
*6e00000074000000610000006c01150000006c0000006900000062000000720000006100000072
*000000690000006500000073000000400000006800000061000000730000006b00000065000000
*6c0000006c0000002e0000006f0000007200000067030000000000000056030102020000004100
*000020010402000000000000000057000000000000000000000000000000110000000000000000
*560000000000000000000000000000001101020b00000020000000740000007500000072000000
*6e0000007300000020000000610000006e00000079000000200104010000000000000000cc0000
*000000000020000000000000002901021100000020000000690000006e00000073000000740000
*00610000006e000000630000006500000020000000690000006e000000740000006f0000002000
*000061000000200104010000000000000000a40000000000000020000000000000002101020200
*00002e0000000a0102160000002000000020000000200000004900000074000000200000006100
*00006c000000730000006f0000002000000070000000720000006f000000760000006900000064
*000000650000007300000020000000610000002001040100000000000000005000000000000000
*00000000000000000e01021100000020000000690000006e000000730000007400000061000000
*6e000000630000006500000020000000660000006f0000007200000020000000610000006e0000
*00200104010000000000000000cd0000000000000020000000000000002901021a000000200000
*0066000000750000006e00000063000000740000006f0000007200000020000000770000007200
*000061000000700000007000000065000000640000002000000061000000720000006f00000075
*0000006e000000640000002000000061000000200104010000000000000000a400000000000000
*2000000000000000210102010000000a010218000000200000002000000020000000610000006e
*000000640000002000000061000000730000007300000065000000720000007400000073000000
*200000007400000068000000610000007400000020000000610000006e00000079000000200104
*010000000000000000cc0000000000000020000000000000002901020e00000020000000610000
*0070000000700000006c00000069000000650000006400000020000000740000006f0000002000
*000061000000200104010000000000000000a40000000000000020000000000000002101020900
*000020000000660000006f000000720000006d0000007300000020000000610000002001040100
*000000000000005400000000000000000000000000000010010202000000200000000a021b0000
*00200000002000000020000000750000006e000000640000006500000072000000200000007400
*000068000000650000007300000065000000200000006f00000070000000650000007200000061
*00000074000000690000006f0000006e000000730000002e0000000a0000000000000059030102
*02000000410000002001040200000000000000005a000000000000000000000000000000110000
*000000000000590000000000000000000000000000001101021800000020000000750000007300
*0000650000007300000020000000610000006e00000020000000670000006c0000007500000065
*0000007300000020000000740000006f0000006700000065000000740000006800000065000000
*72000000200104010000000000000000cd00000000000000200000000000000029010213000000
*20000000610000006300000074000000690000006f0000006e0000007300000020000000770000
*0069000000740000006800000020000000280000002a0000003e000000290000000a0102140000
*00200000002000000020000000690000006e000000200000007400000068000000650000002000
*00006d000000610000006e0000006e0000006500000072000000200000006f0000006600000020
*01020900000074000000720000006100000076000000650000007200000073000000650000005f
*0102060000002000000066000000720000006f0000006d0000002001050d000000440000006100
*000074000000610000002e000000460000006f0000006c0000006400000061000000620000006c
*0000006501021a0000002e00000020000000410000006e00000079000000200000007600000061
*0000006c0000007500000065000000730000002000000072000000650000007400000075000000
*720000006e0000006500000064000000200000006200000079000000200000000a022200000020
*000000200000002000000072000000650000006400000075000000630000006500000064000000
*20000000610000006300000074000000690000006f0000006e0000007300000020000000610000
*007200000065000000200000006400000069000000730000006300000061000000720000006400
*000065000000640000002e0000000a000000000000005c03010232000000450000006600000066
*000000690000006300000069000000650000006e000000740000006c0000007900000020000000
*61000000760000006f0000006900000064000000200000006e0000006500000065000000640000
*006c0000006500000073000000730000006c000000790000002000000072000000650000006200
*0000690000006e00000064000000690000006e0000006700000020000000770000006800000065
*0000006e000000200000007500000073000000690000006e000000670000002001040100000000
*000000000200000000000000000000000000000001010226000000200000006f0000006e000000
*20000000610000006e00000020000000610000006300000074000000690000006f0000006e0000
*00200000007400000068000000610000007400000020000000610000006c000000720000006500
*00006100000064000000790000002000000072000000650000007400000075000000720000006e
*000000730000002000000028000000290000000a023b0000002000000020000000200000004100
*000020000000720000006500000077000000720000006900000074000000650000002000000072
*000000750000006c00000065000000200000006100000075000000740000006f0000006d000000
*61000000740000006900000063000000610000006c0000006c0000007900000020000000610000
*0070000000700000006c0000006900000065000000730000002000000074000000680000006900
*000073000000200000007700000068000000650000006e00000020000000700000006f00000073
*0000007300000069000000620000006c000000650000000a3600000000000000a7000000000000
*00a800000000000000a900000000000000a400000000000000aa00000000000000ab0000000000
*0000ac00000000000000ad00000000000000ae00000000000000af00000000000000b000000000
*000000b100000000000000b200000000000000b300000000000000b400000000000000b5000000
*00000000b600000000000000b700000000000000b800000000000000b900000000000000ba0000
*0000000000bb00000000000000bc00000000000000bd00000000000000be00000000000000bf00
*000000000000c000000000000000c1000000000000000000000000000000010000000000000002
*000000000000000300000000000000040000000000000005000000000000004700000000000000
*48000000000000004a000000000000004b000000000000004c000000000000004d000000000000
*004e000000000000004f0000000000000050000000000000005100000000000000520000000000
*000054000000000000005500000000000000560000000000000057000000000000005800000000
*00000059000000000000005a000000000000005b000000000000005c0700000000000000590000
*00000000005a000000000000005b00000000000000560000000000000057000000000000005800
*0000000000005c000000000000000000000000000000120001140000006e0000006f0000006e00
*00002d000000700000006f000000720000007400000061000000620000006c0000006500000020
*000000280000004d0000005000000054000000430000007300000029010c000000650000007800
*0000700000006500000072000000690000006d000000650000006e00000074000000610000006c
*01150000006c000000690000006200000072000000610000007200000069000000650000007300
*0000400000006800000061000000730000006b000000650000006c0000006c0000002e0000006f
*000000720000006703000000000000005d03010202000000410000002001040200000000000000
*005e0000000000000000000000000000001200000000000000005d000000000000000000000000
*0000001201020b000000200000007400000075000000720000006e000000730000002000000061
*0000006e00000079000000200104010000000000000000ce000000000000002000000000000000
*2a01021100000020000000690000006e0000007300000074000000610000006e00000063000000
*6500000020000000690000006e000000740000006f000000200000006100000020010401000000
*0000000000a4000000000000002000000000000000210102020000002e0000000a010216000000
*200000002000000020000000490000007400000020000000610000006c000000730000006f0000
*002000000070000000720000006f00000076000000690000006400000065000000730000002000
*000061000000200104010000000000000000500000000000000000000000000000000e01021000
*000020000000690000006e0000007300000074000000610000006e000000630000006500000020
*000000660000006f000000720000002000000061000000200104010000000000000000cf000000
*0000000020000000000000002a0102120000002000000077000000720000006100000070000000
*7000000065000000640000002000000061000000720000006f000000750000006e000000640000
*002000000061000000200104010000000000000000a40000000000000020000000000000002101
*02010000000a010218000000200000002000000020000000610000006e00000064000000200000
*006100000073000000730000006500000072000000740000007300000020000000740000006800
*0000610000007400000020000000610000006e00000079000000200104010000000000000000ce
*0000000000000020000000000000002a01020e000000200000006100000070000000700000006c
*00000069000000650000006400000020000000740000006f000000200000006100000020010401
*0000000000000000a4000000000000002000000000000000210102090000002000000066000000
*6f000000720000006d000000730000002000000061000000200104010000000000000000540000
*0000000000000000000000000010010202000000200000000a021b000000200000002000000020
*000000750000006e00000064000000650000007200000020000000740000006800000065000000
*7300000065000000200000006f0000007000000065000000720000006100000074000000690000
*006f0000006e000000730000002e0000000a000000000000006003010203000000410000006e00
*000020010402000000000000000061000000000000000000000000000000120000000000000000
*600000000000000000000000000000001201021500000020000000750000007300000065000000
*7300000020000000670000006c00000075000000650000007300000020000000740000006f0000
*00670000006500000074000000680000006500000072000000200104010000000000000000cf00
*00000000000020000000000000002a010213000000200000006100000063000000740000006900
*00006f0000006e0000007300000020000000770000006900000074000000680000002000000028
*0000003e0000003e000000290000000a010214000000200000002000000020000000690000006e
*00000020000000740000006800000065000000200000006d000000610000006e0000006e000000
*6500000072000000200000006f00000066000000200104010000000000000000d0000000000000
*0020000000000000002a0102060000002000000066000000720000006f0000006d000000200105
*0d000000440000006100000074000000610000002e000000460000006f0000006c000000640000
*0061000000620000006c0000006501021a0000002e00000020000000410000006e000000790000
*002000000076000000610000006c00000075000000650000007300000020000000720000006500
*00007400000075000000720000006e000000650000006400000020000000620000007900000020
*0000000a0222000000200000002000000020000000720000006500000064000000750000006300
*0000650000006400000020000000610000006300000074000000690000006f0000006e00000073
*000000200000006100000072000000650000002000000064000000690000007300000063000000
*61000000720000006400000065000000640000002e0000000a0000000000000063030102320000
*00450000006600000066000000690000006300000069000000650000006e000000740000006c00
*0000790000002000000061000000760000006f0000006900000064000000200000006e00000065
*00000065000000640000006c0000006500000073000000730000006c0000007900000020000000
*720000006500000062000000690000006e00000064000000690000006e00000067000000200000
*007700000068000000650000006e000000200000007500000073000000690000006e0000006700
*000020010401000000000000000002000000000000000000000000000000010102260000002000
*00006f0000006e00000020000000610000006e0000002000000061000000630000007400000069
*0000006f0000006e00000020000000740000006800000061000000740000002000000061000000
*6c0000007200000065000000610000006400000079000000200000007200000065000000740000
*0075000000720000006e000000730000002000000028000000290000000a023b00000020000000
*200000002000000041000000200000007200000065000000770000007200000069000000740000
*00650000002000000072000000750000006c000000650000002000000061000000750000007400
*00006f0000006d00000061000000740000006900000063000000610000006c0000006c00000079
*000000200000006100000070000000700000006c00000069000000650000007300000020000000
*74000000680000006900000073000000200000007700000068000000650000006e000000200000
*00700000006f000000730000007300000069000000620000006c000000650000000a3600000000
*000000a700000000000000a800000000000000a900000000000000a400000000000000aa000000
*00000000ab00000000000000ac00000000000000ad00000000000000ae00000000000000af0000
*0000000000b000000000000000b100000000000000b200000000000000b300000000000000b400
*000000000000b500000000000000b600000000000000b700000000000000b800000000000000b9
*00000000000000ba00000000000000bb00000000000000bc00000000000000bd00000000000000
*be00000000000000bf00000000000000c000000000000000c10000000000000000000000000000
*000100000000000000020000000000000003000000000000000400000000000000050000000000
*0000470000000000000048000000000000004a000000000000004b000000000000004c00000000
*0000004d000000000000004e000000000000004f00000000000000500000000000000051000000
*000000005200000000000000540000000000000055000000000000005d000000000000005e0000
*00000000005f000000000000006000000000000000610000000000000062000000000000006307
*000000000000006000000000000000610000000000000062000000000000006300000000000000
*5d000000000000005e000000000000005f00000000000000000000000000000013000123000000
*6e0000006f0000006e0000002d000000700000006f000000720000007400000061000000620000
*006c00000065000000200000002800000074000000790000007000000065000000200000006600
*0000610000006d000000690000006c0000006900000065000000730000002c000000200000004d
*0000005000000054000000430000007300000029010c0000006500000078000000700000006500
*000072000000690000006d000000650000006e00000074000000610000006c01150000006c0000
*006900000062000000720000006100000072000000690000006500000073000000400000006800
*000061000000730000006b000000650000006c0000006c0000002e0000006f0000007200000067
*1400000000000000640301020c0000004500000066000000660000006900000063000000690000
*00650000006e000000740000006c00000079000000200104010000000000000000250000000000
*000000000000000000000601020300000020000000610000002001040100000000000000002300
*00000000000000000000000000000601020b000000200000007500000073000000690000006e00
*000067000000200000007400000068000000650000002001040200000000000000005a00000000
*000000000000000000000011000000000000000059000000000000000000000000000000110102
*32000000200000006d0000006f0000006e0000006f00000069000000640000002e000000200000
*0041000000200000007300000070000000650000006300000069000000610000006c0000006900
*00007a00000065000000640000002000000076000000650000007200000073000000690000006f
*0000006e000000200000006f000000660000002000000069000000740000007300000020000000
*6e000000610000006d0000006500000073000000610000006b0000006500000020000000690000
*006e0000002001050d000000440000006100000074000000610000002e000000460000006f0000
*006c0000006400000061000000620000006c0000006502010000000a0000000000000065030102
*08000000660000006c000000690000007000000070000000650000006400000020010401000000
*000000000064000000000000000000000000000000130102070000002000000061000000730000
*0020000000690000006e0000002001050d000000440000006100000074000000610000002e0000
*00460000006f0000006c0000006400000061000000620000006c0000006502010000000a000000
*00000000660301020c000000450000006600000066000000690000006300000069000000650000
*006e000000740000006c0000007900000020010401000000000000000025000000000000000000
*000000000000060102030000002000000061000000200104010000000000000000230000000000
*000000000000000000000601020b000000200000007500000073000000690000006e0000006700
*000020000000740000006800000065000000200104020000000000000000610000000000000000
*000000000000001200000000000000006000000000000000000000000000000012010234000000
*200000006d0000006f0000006e0000006f00000069000000640000002e00000020000000410000
*00200000007300000070000000650000006300000069000000610000006c000000690000007a00
*000065000000640000002000000076000000650000007200000073000000690000006f0000006e
*000000200000006f0000006600000020000000690000007400000073000000200000006e000000
*610000006d0000006500000073000000610000006b000000650000002000000066000000720000
*006f0000006d0000002001050d000000440000006100000074000000610000002e000000460000
*006f0000006c0000006400000061000000620000006c0000006501020500000020000000610000
*006e000000640000002001050d000000430000006f0000006e00000074000000720000006f0000
*006c0000002e0000004d0000006f0000006e000000610000006402010000000a00000000000000
*6703010208000000660000006c0000006900000070000000700000006500000064000000200104
*010000000000000000660000000000000000000000000000001301020700000020000000610000
*007300000020000000690000006e0000002001050d000000440000006100000074000000610000
*002e000000460000006f0000006c0000006400000061000000620000006c000000650102050000
*0020000000610000006e000000640000002001050d000000430000006f0000006e000000740000
*00720000006f0000006c0000002e0000004d0000006f0000006e00000061000000640201000000
*0a00000000000000680301020c0000004500000066000000660000006900000063000000690000
*00650000006e000000740000006c00000079000000200104010000000000000000250000000000
*000000000000000000000601020300000020000000610000002001040100000000000000002300
*00000000000000000000000000000601020b000000200000007500000073000000690000006e00
*000067000000200000007400000068000000650000002001040200000000000000003c00000000
*00000000000000000000000900000000000000003b000000000000000000000000000000090102
*34000000200000006d0000006f0000006e0000006f00000069000000640000002e000000200000
*0041000000200000007300000070000000650000006300000069000000610000006c0000006900
*00007a00000065000000640000002000000076000000650000007200000073000000690000006f
*0000006e000000200000006f000000660000002000000069000000740000007300000020000000
*6e000000610000006d0000006500000073000000610000006b0000006500000020000000660000
*00720000006f0000006d0000002001050d000000440000006100000074000000610000002e0000
*00460000006f0000006c0000006400000061000000620000006c0000006502010000000a000000
*00000000690301020c000000450000006600000066000000690000006300000069000000650000
*006e000000740000006c0000007900000020010401000000000000000028000000000000000000
*000000000000060102030000002000000061000000200104010000000000000000230000000000
*000000000000000000000601020b000000200000007500000073000000690000006e0000006700
*0000200000007400000068000000650000002001040200000000000000003c0000000000000000
*000000000000000900000000000000003b00000000000000000000000000000009010234000000
*200000006d0000006f0000006e0000006f00000069000000640000002e00000020000000410000
*00200000007300000070000000650000006300000069000000610000006c000000690000007a00
*000065000000640000002000000076000000650000007200000073000000690000006f0000006e
*000000200000006f0000006600000020000000690000007400000073000000200000006e000000
*610000006d0000006500000073000000610000006b000000650000002000000066000000720000
*006f0000006d0000002001050d000000440000006100000074000000610000002e000000460000
*006f0000006c0000006400000061000000620000006c0000006502010000000a00000000000000
*6a0301021c00000041000000200000006600000075000000720000007400000068000000650000
*0072000000200000007300000070000000650000006300000069000000610000006c0000006900
*00007a0000006100000074000000690000006f0000006e000000200000006f0000006600000020
*010507000000660000006f0000006c000000640000004d000000610000007002010000000a0000
*00000000006b0301020c0000004500000066000000660000006900000063000000690000006500
*00006e000000740000006c00000079000000200104010000000000000000280000000000000000
*000000000000000601020300000020000000610000002001040100000000000000002300000000
*00000000000000000000000601021e000000200000007400000068000000610000007400000020
*000000630000006f0000006e0000007400000061000000690000006e0000007300000020000000
*76000000610000006c000000750000006500000073000000200000006f00000066000000200000
*0074000000790000007000000065000000200104010000000000000000d1000000000000002500
*0000000000002b02010000000a000000000000006c0301020c0000004500000066000000660000
*00690000006300000069000000650000006e000000740000006c00000079000000200104010000
*000000000000280000000000000000000000000000000601020300000020000000610000002001
*04010000000000000000230000000000000000000000000000000601021e000000200000007400
*000068000000610000007400000020000000630000006f0000006e000000740000006100000069
*0000006e000000730000002000000076000000610000006c000000750000006500000073000000
*200000006f00000066000000200000007400000079000000700000006500000020010401000000
*0000000000d10000000000000025000000000000002b02010000000a000000000000006d030102
*0c000000450000006600000066000000690000006300000069000000650000006e000000740000
*006c00000079000000200104010000000000000000250000000000000000000000000000000601
*020500000020000000610000006e00000079000000200104010000000000000000230000000000
*0000000000000000000006024300000020000000630000006800000065000000630000006b0000
*00690000006e0000006700000020000000740000006f0000002000000073000000650000006500
*000020000000690000006600000020000000610000006e00000079000000200000006f00000066
*000000200000006900000074000000730000002000000076000000610000006c00000075000000
*6500000073000000200000006d0000006100000074000000630000006800000020000000740000
*00680000006500000020000000730000007500000070000000700000006c000000690000006500
*000064000000200000007000000072000000650000006400000069000000630000006100000074
*000000650000000a000000000000006e0301020c00000045000000660000006600000069000000
*6300000069000000650000006e000000740000006c000000790000002001040100000000000000
*00250000000000000000000000000000000601020500000020000000610000006e000000790000
*002001040100000000000000002300000000000000000000000000000006024300000020000000
*630000006800000065000000630000006b000000690000006e0000006700000020000000740000
*006f00000020000000730000006500000065000000200000006900000066000000200000006100
*00006c0000006c000000200000006f000000660000002000000069000000740000007300000020
*00000076000000610000006c000000750000006500000073000000200000006d00000061000000
*740000006300000068000000200000007400000068000000650000002000000073000000750000
*0070000000700000006c0000006900000065000000640000002000000070000000720000006500
*00006400000069000000630000006100000074000000650000000a000000000000006f0301020c
*000000450000006600000066000000690000006300000069000000650000006e00000074000000
*6c0000007900000020010401000000000000000025000000000000000000000000000000060102
*0500000020000000610000006e0000007900000020010401000000000000000023000000000000
*0000000000000000000601020b000000200000007500000073000000690000006e000000670000
*0020000000740000006800000065000000200104020000000000000000b7000000000000002000
*000000000000210000000000000000b80000000000000020000000000000002101020100000020
*0104010000000000000000a40000000000000020000000000000002102010000000a0000000000
*0000700301020c000000450000006600000066000000690000006300000069000000650000006e
*000000740000006c00000079000000200104010000000000000000250000000000000000000000
*000000000601020500000020000000610000006e00000079000000200104010000000000000000
*230000000000000000000000000000000601020b00000020000000750000007300000069000000
*6e0000006700000020000000740000006800000065000000200104020000000000000000ba0000
*00000000002000000000000000210000000000000000bb00000000000000200000000000000021
*010201000000200104010000000000000000a40000000000000020000000000000002102010000
*000a000000000000007103010210000000430000006800000065000000630000006b0000002000
*0000740000006f0000002000000073000000650000006500000020000000690000006600000020
*01040100000000000000006d0000000000000000000000000000001301020f000000200000006d
*000000650000006d000000620000006500000072000000200000006f0000006600000020000000
*740000006800000065000000200104010000000000000000230000000000000000000000000000
*0006021c000000200000006d000000610000007400000063000000680000006500000073000000
*2000000074000000680000006500000020000000730000007500000070000000700000006c0000
*006900000065000000640000002000000076000000610000006c00000075000000650000000a00
*0000000000007203010242000000430000006800000065000000630000006b0000002000000074
*0000006f000000200000006d000000610000006b00000065000000200000007300000075000000
*720000006500000020000000740000006800000061000000740000002000000074000000680000
*006500000020000000730000007500000070000000700000006c00000069000000650000006400
*00002000000076000000610000006c000000750000006500000020000000690000007300000020
*0000006e0000006f000000740000002000000061000000200000006d000000650000006d000000
*620000006500000072000000200000006f00000066000000200000007400000068000000650000
*00200104010000000000000000230000000000000000000000000000000602010000000a000000
*00000000730301020c000000450000006600000066000000690000006300000069000000650000
*006e000000740000006c0000007900000020010401000000000000000025000000000000000000
*0000000000000601021f0000002000000061000000200000007300000075000000620000007300
*00006500000074000000200000006f000000660000002000000074000000680000006500000020
*000000650000006c000000650000006d000000650000006e000000740000007300000020000000
*690000006e00000020000000610000002001040100000000000000002300000000000000000000
*00000000000602010000000a000000000000007403010214000000410000002000000073000000
*70000000650000006300000069000000610000006c000000690000007a00000061000000740000
*00690000006f0000006e000000200000006f000000660000002001040100000000000000007300
*00000000000000000000000000001301020b000000200000007500000073000000690000006e00
*00006700000020000000740000006800000065000000200104020000000000000000bd00000000
*0000002000000000000000210000000000000000be000000000000002000000000000000210102
*01000000200104010000000000000000a40000000000000020000000000000002101020f000000
*2c00000020000000610000006e000000610000006c0000006f000000670000006f000000750000
*007300000020000000740000006f0000002001020e000000440000006100000074000000610000
*002e0000004c0000006900000073000000740000002e00000066000000690000006e0000006402
*010000000a000000000000007503010214000000410000002000000067000000650000006e0000
*006500000072000000610000006c000000690000007a0000006100000074000000690000006f00
*00006e000000200000006f00000066000000200102130000004400000061000000740000006100
*00002e0000004c0000006900000073000000740000002e0000007200000065000000700000006c
*000000690000006300000061000000740000006501021100000020000000740000006f00000020
*000000610000006e00000020000000610000007200000062000000690000007400000072000000
*610000007200000079000000200104010000000000000000a40000000000000020000000000000
*00210102100000002e000000200000004100000064000000610000007000000074000000650000
*00640000002000000066000000720000006f0000006d000000200000000a01020100000020010c
*4a000000680000007400000074000000700000003a0000002f0000002f00000061000000750000
*006700000075000000730000007400000073000000730000002e000000620000006c0000006f00
*00006700000073000000700000006f000000740000002e000000630000006f0000006d0000002f
*000000320000003000000030000000380000002f00000030000000370000002f0000006c000000
*6f00000073000000740000002d000000610000006e000000640000002d000000660000006f0000
*00750000006e000000640000002d00000069000000660000002d000000690000002d0000007700
*0000720000006900000074000000650000002d0000003100000030000000380000002d00000069
*0000006e0000002e00000068000000740000006d0000006c02010000000a000000000000007603
*010214000000410000002000000067000000650000006e0000006500000072000000610000006c
*000000690000007a0000006100000074000000690000006f0000006e000000200000006f000000
*660000002001020f000000440000006100000074000000610000002e0000004c00000069000000
*73000000740000002e0000006300000079000000630000006c0000006501021100000020000000
*740000006f00000020000000610000006e00000020000000610000007200000062000000690000
*007400000072000000610000007200000079000000200104010000000000000000a40000000000
*000020000000000000002102390000002e000000200000004d0000006100000079000000200000
*006600000061000000690000006c00000020000000740000006f00000020000000740000006500
*0000720000006d000000690000006e00000061000000740000006500000020000000660000006f
*0000007200000020000000730000006f0000006d00000065000000200000007600000061000000
*6c00000075000000650000007300000020000000690000006e00000020000000730000006f0000
*006d00000065000000200000006d0000006f0000006e0000006f00000069000000640000007300
*00002e0000000a000000000000007703010214000000410000002000000067000000650000006e
*0000006500000072000000610000006c000000690000007a000000610000007400000069000000
*6f0000006e000000200000006f0000006600000020010210000000440000006100000074000000
*610000002e0000004c0000006900000073000000740000002e0000007200000065000000700000
*0065000000610000007401021100000020000000740000006f00000020000000610000006e0000
*002000000061000000720000006200000069000000740000007200000061000000720000007900
*0000200104010000000000000000a40000000000000020000000000000002102390000002e0000
*00200000004d0000006100000079000000200000006600000061000000690000006c0000002000
*0000740000006f000000200000007400000065000000720000006d000000690000006e00000061
*000000740000006500000020000000660000006f0000007200000020000000730000006f000000
*6d000000650000002000000076000000610000006c000000750000006500000073000000200000
*00690000006e00000020000000730000006f0000006d00000065000000200000006d0000006f00
*00006e0000006f0000006900000064000000730000002e0000000a4500000000000000a7000000
*00000000a800000000000000a900000000000000a400000000000000aa00000000000000ab0000
*0000000000ac00000000000000ad00000000000000ae00000000000000af00000000000000b000
*000000000000b100000000000000b200000000000000b300000000000000b400000000000000b5
*00000000000000b600000000000000b700000000000000b800000000000000b900000000000000
*ba00000000000000bb00000000000000bc00000000000000bd00000000000000be000000000000
*00bf00000000000000c000000000000000c1000000000000000000000000000000010000000000
*000002000000000000000300000000000000040000000000000005000000000000001a00000000
*0000001b000000000000001c000000000000001d000000000000001e000000000000001f000000
*000000002000000000000000210000000000000022000000000000002300000000000000240000
*000000000025000000000000002600000000000000270000000000000028000000000000006400
*000000000000650000000000000066000000000000006700000000000000680000000000000069
*000000000000006a000000000000006b000000000000006c000000000000006d00000000000000
*6e000000000000006f000000000000007000000000000000710000000000000072000000000000
*007300000000000000740000000000000075000000000000007600000000000000771400000000
*00000066000000000000006700000000000000640000000000000065000000000000006b000000
*000000006c000000000000006d000000000000006e000000000000006800000000000000690000
*00000000006a000000000000007100000000000000730000000000000074000000000000006f00
*000000000000700000000000000072000000000000007700000000000000750000000000000076
*000000000000000000000000000000140001140000006e0000006f0000006e0000002d00000070
*0000006f000000720000007400000061000000620000006c000000650000002000000028000000
*4d0000005000000054000000430000007300000029010c00000065000000780000007000000065
*00000072000000690000006d000000650000006e00000074000000610000006c01150000006c00
*000069000000620000007200000061000000720000006900000065000000730000004000000068
*00000061000000730000006b000000650000006c0000006c0000002e0000006f00000072000000
*67002500000000000000a700000000000000a800000000000000a900000000000000a400000000
*000000aa00000000000000ab00000000000000ac00000000000000ad00000000000000ae000000
*00000000af00000000000000b000000000000000b100000000000000b200000000000000b30000
*0000000000b400000000000000b500000000000000b600000000000000b700000000000000b800
*000000000000b900000000000000ba00000000000000bb00000000000000bc00000000000000bd
*00000000000000be00000000000000bf00000000000000c000000000000000c100000000000000
*000000000000000001000000000000000200000000000000030000000000000004000000000000
*000500000000000000780000000000000079000000000000007a03000000000000007800000000
*00000079000000000000007a000000000000000000000000000000150001140000006e0000006f
*0000006e0000002d000000700000006f000000720000007400000061000000620000006c000000
*6500000020000000280000004d0000005000000054000000430000007300000029010c00000065
*00000078000000700000006500000072000000690000006d000000650000006e00000074000000
*610000006c01150000006c00000069000000620000007200000061000000720000006900000065
*00000073000000400000006800000061000000730000006b000000650000006c0000006c000000
*2e0000006f000000720000006701000000000000007b0301020200000041000000200104010000
*0000000000007b0000000000000000000000000000001501021800000020000000690000007300
*000020000000610000006e00000020000000690000006e0000007300000074000000610000006e
*0000006300000065000000200000006f0000006600000020000000620000006f00000074000000
*68000000200104010000000000000000500000000000000000000000000000000e010205000000
*20000000610000006e00000064000000200104010000000000000000a400000000000000200000
*000000000021010208000000200000007700000068000000650000007200000065000000200000
*000a01020300000020000000200000002001040100000000000000005200000000000000000000
*00000000000e010212000000200000006400000069000000730000007400000072000000690000
*006200000075000000740000006500000073000000200000006f00000076000000650000007200
*0000200104010000000000000000470000000000000000000000000000000c02020000002e0000
*000a2a00000000000000a700000000000000a800000000000000a900000000000000a400000000
*000000aa00000000000000ab00000000000000ac00000000000000ad00000000000000ae000000
*00000000af00000000000000b000000000000000b100000000000000b200000000000000b30000
*0000000000b400000000000000b500000000000000b600000000000000b700000000000000b800
*000000000000b900000000000000ba00000000000000bb00000000000000bc00000000000000bd
*00000000000000be00000000000000bf00000000000000c000000000000000c100000000000000
*470000000000000048000000000000004a000000000000004b000000000000004c000000000000
*004d000000000000004e000000000000004f000000000000005000000000000000510000000000
*00005200000000000000540000000000000055000000000000007b01000000000000007b000000
*000000000000000000000000160000000004000000000000007c03010204000000540000006800
*000065000000200104010000000000000000a40000000000000020000000000000002101020100
*0000200107010201000000280104010000000000000000d2000000000000002000000000000000
*2c0102010000002c0104010000000000000000d300000000000000200000000000000022020100
*000029010206000000200000006f00000076000000650000007200000020010701040100000000
*00000000a500000000000000200000000000000022020200000020000000610102070000002000
*00007700000068000000650000007200000065000000200104010000000000000000d300000000
*000000200000000000000022021400000020000000690000007300000020000000740000006800
*00006500000020000000740000006f0000007000000020000000650000006c000000650000006d
*000000650000006e000000740000000a000000000000007f030102040000005400000068000000
*65000000200104010000000000000000a400000000000000200000000000000021010201000000
*200107010201000000280104010000000000000000d40000000000000020000000000000002c01
*02010000002c0104010000000000000000d3000000000000002000000000000000220201000000
*29010206000000200000006f000000760000006500000072000000200107010401000000000000
*0000a5000000000000002000000000000000220202000000200000006101020700000020000000
*7700000068000000650000007200000065000000200104010000000000000000d3000000000000
*002000000000000000220217000000200000006900000073000000200000007400000068000000
*6500000020000000620000006f00000074000000740000006f0000006d00000020000000650000
*006c000000650000006d000000650000006e000000740000000a00000000000000820301020400
*0000540000006800000065000000200104010000000000000000a4000000000000002000000000
*0000002101020a00000020000000670000006900000076000000650000006e0000002000000062
*00000079000000200107010201000000280104010000000000000000d200000000000000200000
*00000000002c0102010000002c0104010000000000000000d50000000000000020000000000000
*002d02010000002902010000000a00000000000000850301020400000054000000680000006500
*0000200104010000000000000000a4000000000000002000000000000000210102010000002001
*07010201000000280104010000000000000000d40000000000000020000000000000002c010201
*0000002c0104010000000000000000d60000000000000020000000000000002d02010000002902
*010000000a1300000000000000a700000000000000a900000000000000a4000000000000000000
*00000000000001000000000000007c000000000000007d000000000000007e000000000000007f
*000000000000008000000000000000810000000000000082000000000000008300000000000000
*840000000000000085000000000000008600000000000000870000000000000088000000000000
*00890e000000000000008500000000000000860000000000000087000000000000008200000000
*000000830000000000000084000000000000007f00000000000000800000000000000081000000
*0000000088000000000000007c000000000000007d000000000000007e00000000000000890000
*00000000000000000000000000170000000001000000000000008a010301020400000054000000
*68000000650000002001040100000000000000007b000000000000000000000000000000150102
*01000000200107010201000000280104010000000000000000d200000000000000200000000000
*00002c0102010000002c0104010000000000000000d70000000000000020000000000000002d02
*0100000029010206000000200000006f0000007600000065000000720000002001070102010000
*006101020f00000020000000650000007800000074000000650000006e00000064000000650000
*0064000000200000007700000069000000740000006800000020040100000000000000008d0000
*00000000000000000000000000170102020000002e0000000a0102080000002000000020000000
*200000005700000068000000650000006e00000020010702010000006101024800000020000000
*6800000061000000730000002000000061000000200000004e000000750000006d000000200000
*00690000006e0000007300000074000000610000006e0000006300000065000000200000007700
*000069000000740000006800000020000000610000006e00000020000000610000006400000064
*0000006900000074000000690000006f0000006e00000020000000740000006800000061000000
*740000002000000072000000650000007300000070000000650000006300000074000000730000
*00200000006f000000720000006400000065000000720000002c00000020000000740000006800
*0000650000006e0000002000000074000000680000006900000073000000200000006900000073
*000000200000000a0102530000002000000020000000200000007400000072000000610000006e
*00000073000000660000006f000000720000006d00000065000000640000002000000069000000
*6e000000740000006f00000020000000610000002000000074000000720000006f000000700000
*006900000063000000610000006c0000002000000073000000650000006d000000690000007200
*0000690000006e000000670000002e000000200000004900000074000000200000006900000073
*00000020000000610000007300000073000000750000006d000000650000006400000020000000
*740000006800000061000000740000002000000030000000200000006900000073000000200000
*00740000006800000065000000200000006c000000650000006100000073000000740000002000
*0000650000006c000000650000006d000000650000006e000000740000000a0209000000200000
*0020000000200000006f0000006600000020000000610000002e0000000a03010c410000006800
*00007400000074000000700000003a0000002f0000002f00000068000000610000006c0000002e
*00000061000000720000006300000068000000690000007600000065000000730000002d000000
*6f000000750000007600000065000000720000007400000065000000730000002e000000660000
*00720000002f000000640000006f00000063000000730000002f00000030000000300000002f00
*000031000000310000002f00000033000000370000002f00000037000000390000002f00000050
*00000044000000460000002f00000054000000720000006f000000700000006900000063000000
*610000006c0000002e00000070000000640000006602010000000a3000000000000000a7000000
*00000000a800000000000000a900000000000000a400000000000000aa00000000000000ab0000
*0000000000ac00000000000000ad00000000000000ae00000000000000af00000000000000b000
*000000000000b100000000000000b200000000000000b300000000000000b400000000000000b5
*00000000000000b600000000000000b700000000000000b800000000000000b900000000000000
*ba00000000000000bb00000000000000bc00000000000000bd00000000000000be000000000000
*00bf00000000000000c000000000000000c1000000000000000000000000000000010000000000
*0000470000000000000048000000000000004a000000000000004b000000000000004c00000000
*0000004d000000000000004e000000000000004f00000000000000500000000000000051000000
*000000005200000000000000540000000000000055000000000000007b000000000000008a0000
*00000000008b000000000000008c000000000000008d04000000000000008d000000000000008a
*000000000000008b000000000000008c000000000000000000000000000000180000010c000000
*6500000078000000700000006500000072000000690000006d000000650000006e000000740000
*00610000006c0110000000650000006b0000006d00000065000000740000007400000040000000
*670000006d00000061000000690000006c0000002e000000630000006f0000006d020000000000
*00008e03010202000000410000002001040100000000000000007b000000000000000000000000
*0000001501020c0000002000000077000000680000006900000063000000680000002000000061
*000000640000006400000073000000200104010000000000000000d60000000000000020000000
*000000002d01020500000020000000610000006e00000064000000200104010000000000000000
*d50000000000000020000000000000002d021900000020000000740000006f0000002000000061
*000000200000007000000072000000650000002d00000065000000780000006900000073000000
*74000000690000006e0000006700000020000000740000007900000070000000650000002e0000
*000a000000000000009203010202000000410000002001040100000000000000007b0000000000
*000000000000000000001501020d000000200000007500000073000000690000006e0000006700
*00002000000061000000200000007400000079000000700000006501020100000027021d000000
*73000000200000006200000075000000690000006c000000740000002d000000690000006e0000
*0020000000420000006f000000750000006e000000640000006500000064000000200000006900
*00006e0000007300000074000000610000006e00000063000000650000002e0000000a31000000
*00000000a700000000000000a800000000000000a900000000000000a400000000000000aa0000
*0000000000ab00000000000000ac00000000000000ad00000000000000ae00000000000000af00
*000000000000b000000000000000b100000000000000b200000000000000b300000000000000b4
*00000000000000b500000000000000b600000000000000b700000000000000b800000000000000
*b900000000000000ba00000000000000bb00000000000000bc00000000000000bd000000000000
*00be00000000000000bf00000000000000c000000000000000c100000000000000470000000000
*000048000000000000004a000000000000004b000000000000004c000000000000004d00000000
*0000004e000000000000004f000000000000005000000000000000510000000000000052000000
*00000000540000000000000055000000000000007b000000000000008e000000000000008f0000
*000000000090000000000000009100000000000000920000000000000093000000000000009407
*000000000000009200000000000000930000000000000094000000000000008e00000000000000
*910000000000000090000000000000008f0000000000000000000000000000002e000108000000
*700000006f000000720000007400000061000000620000006c00000065010c0000006500000078
*000000700000006500000072000000690000006d000000650000006e0000007400000061000000
*6c01150000006c0000006900000062000000720000006100000072000000690000006500000073
*000000400000006800000061000000730000006b000000650000006c0000006c0000002e000000
*6f0000007200000067002b00000000000000a700000000000000a800000000000000a900000000
*000000a400000000000000aa00000000000000ab00000000000000ac00000000000000ad000000
*00000000ae00000000000000af00000000000000b000000000000000b100000000000000b20000
*0000000000b300000000000000b400000000000000b500000000000000b600000000000000b700
*000000000000b800000000000000b900000000000000ba00000000000000bb00000000000000bc
*00000000000000bd00000000000000be00000000000000bf00000000000000c000000000000000
*c1000000000000004700000000000000480000000000000049000000000000004a000000000000
*004b000000000000004c000000000000004d000000000000004e000000000000004f0000000000
*000050000000000000005100000000000000520000000000000053000000000000005400000000
*000000550000000000000000000000000000000019000108000000700000006f00000072000000
*7400000061000000620000006c00000065010c0000006500000078000000700000006500000072
*000000690000006d000000650000006e00000074000000610000006c011f000000450000006400
*000077000000610000007200000064000000200000004b0000006d000000650000007400000074
*000000200000003c000000650000006b0000006d00000065000000740000007400000040000000
*670000006d00000061000000690000006c0000002e000000630000006f0000006d0000003e0100
*000000000000950301021d0000004d000000690000006e000000690000006d000000610000006c
*00000020000000630000006f0000006d000000700000006c000000650000007400000065000000
*20000000640000006500000066000000690000006e0000006900000074000000690000006f0000
*006e0000003a000000200104010000000000000000960000000000000000000000000000001901
*0204000000200000006f0000007200000020010401000000000000000097000000000000000000
*0000000000001902010000000a2200000000000000a700000000000000a800000000000000a900
*000000000000a400000000000000aa00000000000000ab00000000000000ac00000000000000ad
*00000000000000ae00000000000000af00000000000000b000000000000000b100000000000000
*b200000000000000b300000000000000b400000000000000b500000000000000b6000000000000
*00b700000000000000b800000000000000b900000000000000ba00000000000000bb0000000000
*0000bc00000000000000bd00000000000000be00000000000000bf00000000000000c000000000
*000000c10000000000000047000000000000004800000000000000950000000000000096000000
*000000009700000000000000980400000000000000950000000000000096000000000000009800
*000000000000970000000000000000000000000000001a000108000000700000006f0000007200
*00007400000061000000620000006c00000065010c000000650000007800000070000000650000
*0072000000690000006d000000650000006e00000074000000610000006c01150000006c000000
*690000006200000072000000610000007200000069000000650000007300000040000000680000
*0061000000730000006b000000650000006c0000006c0000002e0000006f000000720000006700
*2300000000000000a700000000000000a800000000000000a900000000000000a4000000000000
*00aa00000000000000ab00000000000000ac00000000000000ad00000000000000ae0000000000
*0000af00000000000000b000000000000000b100000000000000b200000000000000b300000000
*000000b400000000000000b500000000000000b600000000000000b700000000000000b8000000
*00000000b900000000000000ba00000000000000bb00000000000000bc00000000000000bd0000
*0000000000be00000000000000bf00000000000000c000000000000000c1000000000000004700
*000000000000480000000000000095000000000000009600000000000000970000000000000098
*00000000000000990100000000000000990000000000000000000000000000001b000108000000
*700000006f000000720000007400000061000000620000006c00000065010c0000006500000078
*000000700000006500000072000000690000006d000000650000006e0000007400000061000000
*6c01150000006c0000006900000062000000720000006100000072000000690000006500000073
*000000400000006800000061000000730000006b000000650000006c0000006c0000002e000000
*6f0000007200000067002600000000000000a700000000000000a800000000000000a900000000
*000000a400000000000000aa00000000000000ab00000000000000ac00000000000000ad000000
*00000000ae00000000000000af00000000000000b000000000000000b100000000000000b20000
*0000000000b300000000000000b400000000000000b500000000000000b600000000000000b700
*000000000000b800000000000000b900000000000000ba00000000000000bb00000000000000bc
*00000000000000bd00000000000000be00000000000000bf00000000000000c000000000000000
*c10000000000000047000000000000004800000000000000490000000000000095000000000000
*009600000000000000970000000000000098000000000000009a000000000000009b0000000000
*00009c03000000000000009a000000000000009b000000000000009c0000000000000000000000
*000000001c00000000002f00000000000000a700000000000000a800000000000000a900000000
*000000a400000000000000aa00000000000000ab00000000000000ac00000000000000ad000000
*00000000ae00000000000000af00000000000000b000000000000000b100000000000000b20000
*0000000000b300000000000000b400000000000000b500000000000000b600000000000000b700
*000000000000b800000000000000b900000000000000ba00000000000000bb00000000000000bc
*00000000000000bd00000000000000be00000000000000bf00000000000000c000000000000000
*c100000000000000470000000000000048000000000000004a000000000000004b000000000000
*004c000000000000004d000000000000004e000000000000004f00000000000000500000000000
*000051000000000000005200000000000000540000000000000055000000000000007b00000000
*00000095000000000000009600000000000000970000000000000098000000000000009d010000
*00000000009d0000000000000000000000000000001d0001140000006e0000006f0000006e0000
*002d000000700000006f000000720000007400000061000000620000006c000000650000002000
*0000280000004d0000005000000054000000430000007300000029010c00000065000000780000
*00700000006500000072000000690000006d000000650000006e00000074000000610000006c01
*150000006c00000069000000620000007200000061000000720000006900000065000000730000
*00400000006800000061000000730000006b000000650000006c0000006c0000002e0000006f00
*00007200000067003200000000000000a700000000000000a800000000000000a9000000000000
*00a400000000000000aa00000000000000ab00000000000000ac00000000000000ad0000000000
*0000ae00000000000000af00000000000000b000000000000000b100000000000000b200000000
*000000b300000000000000b400000000000000b500000000000000b600000000000000b7000000
*00000000b800000000000000b900000000000000ba00000000000000bb00000000000000bc0000
*0000000000bd00000000000000be00000000000000bf00000000000000c000000000000000c100
*000000000000470000000000000048000000000000004a000000000000004b000000000000004c
*000000000000004d000000000000004e000000000000004f000000000000005000000000000000
*51000000000000005200000000000000540000000000000055000000000000007b000000000000
*0095000000000000009600000000000000970000000000000098000000000000009d0000000000
*00009e000000000000009f00000000000000a003000000000000009e000000000000009f000000
*00000000a00000000000000000000000000000001e0001140000006e0000006f0000006e000000
*2d000000700000006f000000720000007400000061000000620000006c00000065000000200000
*00280000004d0000005000000054000000430000007300000029010c0000006500000078000000
*700000006500000072000000690000006d000000650000006e00000074000000610000006c0115
*0000006c0000006900000062000000720000006100000072000000690000006500000073000000
*400000006800000061000000730000006b000000650000006c0000006c0000002e0000006f0000
*007200000067003200000000000000a700000000000000a800000000000000a900000000000000
*a400000000000000aa00000000000000ab00000000000000ac00000000000000ad000000000000
*00ae00000000000000af00000000000000b000000000000000b100000000000000b20000000000
*0000b300000000000000b400000000000000b500000000000000b600000000000000b700000000
*000000b800000000000000b900000000000000ba00000000000000bb00000000000000bc000000
*00000000bd00000000000000be00000000000000bf00000000000000c000000000000000c10000
*0000000000470000000000000048000000000000004a000000000000004b000000000000004c00
*0000000000004d000000000000004e000000000000004f00000000000000500000000000000051
*000000000000005200000000000000540000000000000055000000000000007b00000000000000
*95000000000000009600000000000000970000000000000098000000000000009d000000000000
*00a100000000000000a200000000000000a30300000000000000a100000000000000a200000000
*000000a300000000000000d80000000000000000000000000000000103000000000000002f0000
*000000000000000000000000000100000000000000003000000000000000000000000000000001
*000000000000000031000000000000000000000000000000010000000000000000320000000000
*000000000000000000000100000000000000003300000000000000000000000000000001000000
*000000000034000000000000000000000000000000020300000000000000350000000000000000
*000000000000000200000000000000003600000000000000000000000000000002000000000000
*000037000000000000000000000000000000030300000000000000380000000000000000000000
*000000000301000000000000003800000000000000000000000000000003000000000000000039
*0000000000000000000000000000000403000000000000003a0000000000000000000000000000
*000401000000000000003a0000000000000000000000000000000400000000000000003b000000
*0000000000000000000000000403000000000000003c0000000000000000000000000000000400
*000000000000003d0000000000000000000000000000000400000000000000003e000000000000
*0000000000000000000403000000000000003f0000000000000000000000000000000401000000
*000000003f00000000000000000000000000000004000000000000000040000000000000000000
*000000000000040300000000000000410000000000000000000000000000000400000000000000
*004200000000000000000000000000000004000000000000000043000000000000000000000000
*000000050300000000000000440000000000000000000000000000000500000000000000004500
*000000000000000000000000000006030000000000000046000000000000000000000000000000
*060100000000000000460000000000000000000000000000000600000000000000004700000000
*000000000000000000000006030000000000000048000000000000000000000000000000060100
*000000000000480000000000000000000000000000000600000000000000004900000000000000
*00000000000000000603000000000000004a000000000000000000000000000000060100000000
*0000004a0000000000000000000000000000000600000000000000004b00000000000000000000
*00000000000603000000000000004c000000000000000000000000000000060300000000000000
*4d0000000000000000000000000000000600000000000000004e00000000000000000000000000
*00000600000000000000004f000000000000000000000000000000060000000000000000500000
*000000000000000000000000000600000000000000005100000000000000000000000000000007
*030000000000000052000000000000000000000000000000070300000000000000530000000000
*000000000000000000000703000000000000005400000000000000000000000000000007000000
*000000000055000000000000000000000000000000070000000000000000560000000000000000
*000000000000000700000000000000005700000000000000000000000000000007000000000000
*000058000000000000000000000000000000070000000000000000590000000000000000000000
*000000000803000000000000005a0000000000000000000000000000000800000000000000005b
*0000000000000000000000000000000803000000000000005c0000000000000000000000000000
*000800000000000000005d0000000000000000000000000000000803000000000000005e000000
*0000000000000000000000000803000000000000005f0000000000000000000000000000000800
*000000000000006000000000000000000000000000000008000000000000000061000000000000
*000000000000000000080000000000000000620000000000000000000000000000000800000000
*000000006300000000000000000000000000000009030000000000000064000000000000000000
*000000000000090100000000000000640000000000000000000000000000000900000000000000
*00650000000000000000000000000000000a030000000000000066000000000000000000000000
*0000000a0100000000000000660000000000000000000000000000000a00000000000000006700
*00000000000000000000000000000b030000000000000068000000000000000000000000000000
*0b0100000000000000680000000000000000000000000000000b03000000000000006900000000
*00000000000000000000000b0100000000000000690000000000000000000000000000000b0000
*0000000000006a0000000000000000000000000000000b00000000000000006b00000000000000
*00000000000000000c00000000000000006c0000000000000000000000000000000c0000000000
*0000006d0000000000000000000000000000000d00000000000000006e00000000000000000000
*00000000000e03000000000000006f0000000000000000000000000000000e0100000000000000
*6f0000000000000000000000000000000e00000000000000007000000000000000000000000000
*00000e0300000000000000710000000000000000000000000000000e0100000000000000710000
*000000000000000000000000000e0000000000000000720000000000000000000000000000000e
*0300000000000000730000000000000000000000000000000e0000000000000000740000000000
*000000000000000000000e0000000000000000750000000000000000000000000000000f000000
*000000000076000000000000000000000000000000100300000000000000770000000000000000
*000000000000001003000000000000007800000000000000000000000000000011030000000000
*000079000000000000000000000000000000110100000000000000790000000000000000000000
*000000001100000000000000007a0000000000000000000000000000001103000000000000007b
*0000000000000000000000000000001101000000000000007b0000000000000000000000000000
*001100000000000000007c0000000000000000000000000000001100000000000000007d000000
*0000000000000000000000001203000000000000007e0000000000000000000000000000001201
*000000000000007e0000000000000000000000000000001200000000000000007f000000000000
*000000000000000000120300000000000000800000000000000000000000000000001201000000
*000000008000000000000000000000000000000012000000000000000081000000000000000000
*000000000000120000000000000000820000000000000000000000000000001300000000000000
*008300000000000000000000000000000013000000000000000084000000000000000000000000
*000000130000000000000000850000000000000000000000000000001300000000000000008600
*000000000000000000000000000013000000000000000087000000000000000000000000000000
*130000000000000000880000000000000000000000000000001300000000000000008900000000
*00000000000000000000001300000000000000008a000000000000000000000000000000130000
*0000000000008b0000000000000000000000000000001300000000000000008c00000000000000
*00000000000000001300000000000000008d000000000000000000000000000000130000000000
*0000008e0000000000000000000000000000001300000000000000008f00000000000000000000
*000000000013000000000000000090000000000000000000000000000000130000000000000000
*910000000000000000000000000000001300000000000000009200000000000000000000000000
*000013000000000000000093000000000000000000000000000000130000000000000000940000
*000000000000000000000000001300000000000000009500000000000000000000000000000013
*000000000000000096000000000000000000000000000000140300000000000000970000000000
*000000000000000000001401000000000000009700000000000000000000000000000014000000
*000000000098000000000000000000000000000000150300000000000000990000000000000000
*000000000000001603000000000000009a00000000000000000000000000000016010000000000
*00009a0000000000000000000000000000001600000000000000009b0000000000000000000000
*000000001603000000000000009c0000000000000000000000000000001601000000000000009c
*0000000000000000000000000000001600000000000000009d0000000000000000000000000000
*001603000000000000009e0000000000000000000000000000001601000000000000009e000000
*0000000000000000000000001600000000000000009f0000000000000000000000000000001603
*00000000000000a0000000000000000000000000000000160100000000000000a0000000000000
*000000000000000000160000000000000000a10000000000000000000000000000001600000000
*00000000a2000000000000000000000000000000160000000000000000a3000000000000000000
*000000000000170300000000000000a40000000000000000000000000000001701000000000000
*00a4000000000000000000000000000000170000000000000000a5000000000000000000000000
*000000170000000000000000a3000000000000000000000000000000180300000000000000a600
*0000000000000000000000000000180100000000000000a7000000000000000000000000000000
*180100000000000000a6000000000000000000000000000000180100000000000000a800000000
*0000000000000000000000180300000000000000a9000000000000000000000000000000180100
*000000000000a9000000000000000000000000000000180000000000000000aa00000000000000
*0000000000000000190300000000000000ab000000000000000000000000000000190000000000
*000000ac000000000000000000000000000000190000000000000000ad00000000000000000000
*0000000000190000000000000000ae0000000000000000000000000000001a0000000000000000
*940000000000000000000000000000001b0000000000000000af00000000000000000000000000
*00001b0000000000000000b00000000000000000000000000000001b0000000000000000b10000
*000000000000000000000000001c0300000000000000b20000000000000000000000000000001d
*0300000000000000b30000000000000000000000000000001d0100000000000000b30000000000
*000000000000000000001d0000000000000000b40000000000000000000000000000001e030000
*0000000000b50000000000000000000000000000001e0100000000000000b50000000000000000
*000000000000001e0000000000000000b600000000000000200000000000000021030000000000
*0000b7000000000000002000000000000000220300000000000000b80000000000000020000000
*00000000230300000000000000b9000000000000002000000000000000210000000000000000ba
*000000000000002000000000000000210000000000000000bb0000000000000020000000000000
*00210000000000000000bc000000000000002000000000000000210000000000000000bd000000
*000000002000000000000000210100000000000000be0000000000000020000000000000002103
*00000000000000be000000000000002000000000000000210000000000000000bf000000000000
*002000000000000000210100000000000000c00000000000000020000000000000002103000000
*00000000c0000000000000002000000000000000210000000000000000c1000000000000002000
*000000000000210100000000000000c20000000000000020000000000000002103000000000000
*00c2000000000000002000000000000000210000000000000000c3000000000000002000000000
*000000210100000000000000c4000000000000002000000000000000210300000000000000c400
*0000000000002000000000000000210000000000000000c5000000000000002000000000000000
*210100000000000000c6000000000000002000000000000000210300000000000000c600000000
*0000002000000000000000210000000000000000c7000000000000002000000000000000210100
*000000000000c8000000000000002000000000000000210300000000000000c800000000000000
*2000000000000000210000000000000000c9000000000000002000000000000000210100000000
*000000ca000000000000002000000000000000210300000000000000ca00000000000000200000
*0000000000210000000000000000cb000000000000002000000000000000210100000000000000
*cc000000000000002000000000000000210300000000000000cc00000000000000cd0000000000
*0000ce0300000000000000cf00000000000000cd00000000000000ce0000000000000000d00000
*00000000002000000000000000d10300000000000000d200000000000000250000000000000026
*0300000000000000d3000000000000002000000000000000270000000000000000d40000000000
*00002000000000000000280300000000000000d500000000000000200000000000000028000000
*0000000000d6000000000000002000000000000000280000000000000000d70000000000000020
*00000000000000280000000000000000d800000000000000200000000000000028000000000000
*0000d9000000000000002000000000000000290300000000000000da0000000000000020000000
*00000000290300000000000000db0000000000000020000000000000002a0300000000000000dc
*000000000000002000000000000000dd0300000000000000de0000000000000020000000000000
*002a0000000000000000850000000000000025000000000000002b0300000000000000df000000
*000000002000000000000000e00000000000000000e10000000000000020000000000000002201
*00000000000000e2000000000000002000000000000000e00000000000000000e3000000000000
*002000000000000000e40000000000000000e5000000000000002000000000000000e400000000
*00000000e6000000000000002000000000000000e700000000000000006e00000000000000e800
*0000000000000d6d6f6e6f6964732d302e312e360000000000000013446174612e4d6f6e6f6964
*2e526564756365720000000000000018446174612e4d6f6e6f69642e526564756365722e436861
*720000000000000018446174612e4d6f6e6f69642e526564756365722e57697468000000000000
*0011446174612e4d6f6e6f69642e556e696f6e0000000000000020446174612e4d6f6e6f69642e
*4c65786963616c2e555446382e4465636f6465720000000000000015446174612e4d6f6e6f6964
*2e47656e657261746f720000000000000022446174612e4d6f6e6f69642e4c65786963616c2e53
*6f75726365506f736974696f6e0000000000000019446174612e4d6f6e6f69642e4c6578696361
*6c2e576f7264730000000000000010446174612e4d6f6e6f69642e53656c660000000000000016
*446174612e4d6f6e6f69642e46726f6d537472696e670000000000000017446174612e4d6f6e6f
*69642e43617465676f726963616c0000000000000014446174612e4d6f6e6f69642e4164646974
*697665000000000000001a446174612e4d6f6e6f69642e41646469746976652e53756761720000
*00000000001a446174612e4d6f6e6f69642e4d756c7469706c6963617469766500000000000000
*20446174612e4d6f6e6f69642e4d756c7469706c696361746976652e5375676172000000000000
*0013446174612e52696e672e53656d692e4e6561720000000000000017446174612e4d6f6e6f69
*642e4170706c696361746976650000000000000011446174612e4d6f6e6f69642e4d6f6e616400
*00000000000017446174612e4d6f6e6f69642e436f6d62696e61746f7273000000000000002544
*6174612e4d6f6e6f69642e4c65786963616c2e52756e4c656e677468456e636f64696e67000000
*000000000e446174612e52696e672e53656d69000000000000000f446174612e4d6f6e6f69642e
*4f72640000000000000017446174612e52696e672e53656d692e54726f706963616c0000000000
*000012446174612e52696e672e53656d692e4f7264000000000000000a446174612e47726f7570
*0000000000000016446174612e47726f75702e436f6d62696e61746f7273000000000000001044
*6174612e47726f75702e53756761720000000000000009446174612e52696e6700000000000000
*11446174612e52696e672e426f6f6c65616e0000000000000011446174612e52696e672e46726f
*6d4e756d0000000000000015446174612e4d6f6e6f69642e496e7374616e636573000000000000
*000462617365000000000000000b446174612e4d6f6e6f6964000000000000000a446174612e4d
*61796265000000000000000d446174612e466f6c6461626c650000000000000009446174612e57
*6f726400000000000000086768632d7072696d00000000000000094748432e5479706573000000
*000000000b4748432e556e69636f64650000000000000010436f6e74726f6c2e43617465676f72
*790000000000000013436f6e74726f6c2e4170706c69636174697665000000000000000d436f6e
*74726f6c2e4d6f6e616400000000000000084748432e426f6f6c0000000000000008446174612e
*4f726400000000000000075072656c756465000000000000000f446174612e52696e672e537567
*61720000000000000007526564756365720000000000000004756e69740000000000000004736e
*6f630000000000000004636f6e73000000000000000d666f6c644d617052656475636500000000
*0000000a666f6c64526564756365000000000000000b4368617252656475636572000000000000
*000866726f6d43686172000000000000000b696e76616c696443686172000000000000000b5769
*746852656475636572000000000000000e776974686f7574526564756365720000000000000009
*556e696f6e57697468000000000000000c676574556e696f6e57697468000000000000000c4861
*73556e696f6e576974680000000000000009756e696f6e576974680000000000000009656d7074
*79576974680000000000000005556e696f6e0000000000000008676574556e696f6e0000000000
*000008486173556e696f6e0000000000000005656d7074790000000000000005756e696f6e0000
*00000000000455544638000000000000000772756e555446380000000000000005436861723800
*000000000000086765744368617238000000000000000656616c75657300000000000000096765
*7456616c75657300000000000000044b65797300000000000000076765744b6579730000000000
*00000947656e657261746f720000000000000004456c656d00000000000000096d617052656475
*636500000000000000056d6170546f00000000000000076d617046726f6d000000000000000672
*6564756365000000000000000e536f75726365506f736974696f6e000000000000000c536f7572
*6365436f6c756d6e000000000000000a536f757263654c696e6500000000000000076e65787454
*6162000000000000000b73746172744f6646696c65000000000000000c736f75726365436f6c75
*6d6e000000000000000a736f757263654c696e65000000000000001273686f77536f7572636550
*6f736974696f6e0000000000000007556e6c696e6564000000000000000a72756e556e6c696e65
*640000000000000008556e737061636564000000000000000b72756e556e737061636564000000
*00000000054c696e65730000000000000005576f726473000000000000000872756e576f726473
*000000000000000872756e4c696e65730000000000000009776f72647346726f6d000000000000
*00096c696e657346726f6d000000000000000453656c66000000000000000767657453656c6600
*0000000000000a46726f6d537472696e67000000000000000d67657446726f6d537472696e6700
*000000000000034d6f6e000000000000000547456e646f000000000000000867657447456e646f
*00000000000000066765744d6f6e0000000000000004706c757300000000000000047a65726f00
*000000000000012b00000000000000034578700000000000000006676574457870000000000000
*00034c6f6700000000000000066765744c6f67000000000000000e4d756c7469706c6963617469
*766500000000000000036f6e65000000000000000574696d657300000000000000012a00000000
*000000104c65667453656d694e65617252696e670000000000000011526967687453656d694e65
*617252696e670000000000000012577261707065644170706c6963617469766500000000000000
*15676574577261707065644170706c69636174697665000000000000000954726176657273616c
*000000000000000c67657454726176657273616c000000000000000d736e6f6354726176657273
*616c000000000000000c577261707065644d6f6e6164000000000000000f676574577261707065
*644d6f6e61640000000000000006416374696f6e0000000000000009676574416374696f6e0000
*00000000000a736e6f63416374696f6e000000000000000974726176657273655f000000000000
*0004666f725f00000000000000056d61704d5f0000000000000005666f724d5f00000000000000
*07666f6c644d61700000000000000004666f6c640000000000000009636f6e6361744d61700000
*000000000003616e6400000000000000026f720000000000000003616e79000000000000000361
*6c6c000000000000000373756d000000000000000770726f647563740000000000000004656c65
*6d00000000000000076e6f74456c656d000000000000000666696c746572000000000000000466
*696e6400000000000000097265706c696361746500000000000000056379636c65000000000000
*00067265706561740000000000000003524c450000000000000006676574524c45000000000000
*000853656d6952696e67000000000000000b4d696e5072696f72697479000000000000000e6765
*744d696e5072696f72697479000000000000000b4d61785072696f72697479000000000000000e
*6765744d61785072696f7269747900000000000000034d696e00000000000000066765744d696e
*00000000000000034d617800000000000000066765744d617800000000000000096d696e66696e
*6974790000000000000008696e66696e697479000000000000000854726f706963616c00000000
*0000000b67657454726f706963616c00000000000000085072696f726974790000000000000008
*4d6178426f756e6400000000000000084d696e426f756e6400000000000000054f726465720000
*0000000000086765744f72646572000000000000000547726f75700000000000000007676e6567
*61746500000000000000056d696e75730000000000000009677375627472616374000000000000
*00012d00000000000000066e656761746500000000000000087375627472616374000000000000
*000452696e670000000000000008426f6f6c52696e67000000000000000b676574426f6f6c5269
*6e67000000000000000746726f6d4e756d000000000000000a67657446726f6d4e756d00000000
*000000064d6f6e6f696400000000000000054d617962650000000000000008466f6c6461626c65
*00000000000000076d617070656e6400000000000000076d636f6e63617400000000000000066d
*656d70747900000000000000076765744475616c00000000000000044475616c00000000000000
*07617070456e646f0000000000000004456e646f0000000000000006676574416c6c0000000000
*000003416c6c0000000000000006676574416e790000000000000003416e790000000000000006
*67657453756d000000000000000353756d000000000000000a67657450726f6475637400000000
*0000000750726f6475637400000000000000086765744669727374000000000000000546697273
*7400000000000000076765744c61737400000000000000044c617374000000000000000e66696e
*676572747265652d302e30000000000000000f446174612e46696e676572547265650000000000
*00000a46696e6765725472656500000000000000076d6561737572650000000000000008474843
*2e576f72640000000000000005576f726438000000000000000443686172000000000000000769
*735370616365000000000000000843617465676f727900000000000000033e3e3e000000000000
*00033c3c3c00000000000000012e00000000000000026964000000000000000b416c7465726e61
*74697665000000000000000b4170706c6963617469766500000000000000094d6f6e6164506c75
*7300000000000000084748432e4261736500000000000000054d6f6e6164000000000000000442
*6f6f6c000000000000000b4748432e436c617373657300000000000000036d696e000000000000
*00074e6f7468696e6700000000000000036d617800000000000000084748432e456e756d000000
*00000000086d6178426f756e6400000000000000086d696e426f756e6400000000000000074748
*432e4e756d
addfile ./dist/doc/html/monoids/plus.gif
binary ./dist/doc/html/monoids/plus.gif
oldhex
*
newhex
*47494638396109000900910000fefefe8282820202020000002c00000000090009000002148c8f
*a00bb6b29c82ca897b5b7871cfce74085200003b
addfile ./dist/doc/html/monoids/src/Data-Group-Combinators.html
hunk ./dist/doc/html/monoids/src/Data-Group-Combinators.html 1
+<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
+<html>
+<head>
+<!-- Generated by HsColour, http://www.cs.york.ac.uk/fp/darcs/hscolour/ -->
+<title>Data/Group/Combinators.hs</title>
+<link type='text/css' rel='stylesheet' href='hscolour.css' />
+</head>
+<body>
+<pre><a name="line-1"></a><span class='hs-comment'>-----------------------------------------------------------------------------</span>
+<a name="line-2"></a><span class='hs-comment'>-- |</span>
+<a name="line-3"></a><span class='hs-comment'>-- Module      :  Data.Group.Combinators</span>
+<a name="line-4"></a><span class='hs-comment'>-- Copyright   :  (c) Edward Kmett 2009</span>
+<a name="line-5"></a><span class='hs-comment'>-- License     :  BSD-style</span>
+<a name="line-6"></a><span class='hs-comment'>-- Maintainer  :  libraries@haskell.org</span>
+<a name="line-7"></a><span class='hs-comment'>-- Stability   :  experimental</span>
+<a name="line-8"></a><span class='hs-comment'>-- Portability :  portable</span>
+<a name="line-9"></a><span class='hs-comment'>--</span>
+<a name="line-10"></a><span class='hs-comment'>-- Utilities for working with Groups that conflict with names from the "Prelude".</span>
+<a name="line-11"></a><span class='hs-comment'>--</span>
+<a name="line-12"></a><span class='hs-comment'>-- Intended to be imported qualified.</span>
+<a name="line-13"></a><span class='hs-comment'>--</span>
+<a name="line-14"></a><span class='hs-comment'>-- &gt; import Data.Group.Combinators as Group (replicate)</span>
+<a name="line-15"></a><span class='hs-comment'>--</span>
+<a name="line-16"></a><span class='hs-comment'>-----------------------------------------------------------------------------</span>
+<a name="line-17"></a>
+<a name="line-18"></a><span class='hs-keyword'>module</span> <span class='hs-conid'>Data</span><span class='hs-varop'>.</span><span class='hs-conid'>Group</span><span class='hs-varop'>.</span><span class='hs-conid'>Combinators</span>
+<a name="line-19"></a>    <span class='hs-layout'>(</span> <span class='hs-keyword'>module</span> <span class='hs-conid'>Data</span><span class='hs-varop'>.</span><span class='hs-conid'>Group</span>
+<a name="line-20"></a>    <span class='hs-layout'>,</span> <span class='hs-varid'>replicate</span>
+<a name="line-21"></a>    <span class='hs-layout'>)</span> <span class='hs-keyword'>where</span>
+<a name="line-22"></a>
+<a name="line-23"></a><span class='hs-keyword'>import</span> <span class='hs-conid'>Prelude</span> <span class='hs-varid'>hiding</span> <span class='hs-layout'>(</span><span class='hs-varid'>replicate</span><span class='hs-layout'>)</span>
+<a name="line-24"></a><span class='hs-keyword'>import</span> <span class='hs-conid'>Data</span><span class='hs-varop'>.</span><span class='hs-conid'>Group</span>
+<a name="line-25"></a>
+<a name="line-26"></a><a name="replicate"></a><span class='hs-comment'>-- shamelessly stolen from Lennart Augustsson's post: </span>
+<a name="line-27"></a><span class='hs-comment'>-- <a href="http://augustss.blogspot.com/2008/07/lost-and-found-if-i-write-108-in.html">http://augustss.blogspot.com/2008/07/lost-and-found-if-i-write-108-in.html</a></span>
+<a name="line-28"></a><span class='hs-comment'>-- adapted to groups, which can permit negative exponents</span>
+<a name="line-29"></a><span class='hs-definition'>replicate</span> <span class='hs-keyglyph'>::</span> <span class='hs-layout'>(</span><span class='hs-conid'>Group</span> <span class='hs-varid'>m</span><span class='hs-layout'>,</span> <span class='hs-conid'>Integral</span> <span class='hs-varid'>n</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=&gt;</span>  <span class='hs-varid'>m</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-varid'>n</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-varid'>m</span>
+<a name="line-30"></a><span class='hs-definition'>replicate</span> <span class='hs-varid'>x0</span> <span class='hs-varid'>y0</span> 
+<a name="line-31"></a>    <span class='hs-keyglyph'>|</span> <span class='hs-varid'>y0</span> <span class='hs-varop'>&lt;</span> <span class='hs-num'>0</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>f</span> <span class='hs-layout'>(</span><span class='hs-varid'>gnegate</span> <span class='hs-varid'>x0</span><span class='hs-layout'>)</span> <span class='hs-layout'>(</span><span class='hs-varid'>negate</span> <span class='hs-varid'>y0</span><span class='hs-layout'>)</span>
+<a name="line-32"></a>    <span class='hs-keyglyph'>|</span> <span class='hs-varid'>y0</span> <span class='hs-varop'>==</span> <span class='hs-num'>0</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>mempty</span>
+<a name="line-33"></a>    <span class='hs-keyglyph'>|</span> <span class='hs-varid'>otherwise</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>f</span> <span class='hs-varid'>x0</span> <span class='hs-varid'>y0</span>
+<a name="line-34"></a>    <span class='hs-keyword'>where</span>
+<a name="line-35"></a>        <span class='hs-varid'>f</span> <span class='hs-varid'>x</span> <span class='hs-varid'>y</span> 
+<a name="line-36"></a>            <span class='hs-keyglyph'>|</span> <span class='hs-varid'>even</span> <span class='hs-varid'>y</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>f</span> <span class='hs-layout'>(</span><span class='hs-varid'>x</span> <span class='hs-varop'>`mappend`</span> <span class='hs-varid'>x</span><span class='hs-layout'>)</span> <span class='hs-layout'>(</span><span class='hs-varid'>y</span> <span class='hs-varop'>`quot`</span> <span class='hs-num'>2</span><span class='hs-layout'>)</span>
+<a name="line-37"></a>            <span class='hs-keyglyph'>|</span> <span class='hs-varid'>y</span> <span class='hs-varop'>==</span> <span class='hs-num'>1</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>x</span>
+<a name="line-38"></a>            <span class='hs-keyglyph'>|</span> <span class='hs-varid'>otherwise</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>g</span> <span class='hs-layout'>(</span><span class='hs-varid'>x</span> <span class='hs-varop'>`mappend`</span> <span class='hs-varid'>x</span><span class='hs-layout'>)</span> <span class='hs-layout'>(</span><span class='hs-layout'>(</span><span class='hs-varid'>y</span> <span class='hs-comment'>-</span> <span class='hs-num'>1</span><span class='hs-layout'>)</span> <span class='hs-varop'>`quot`</span> <span class='hs-num'>2</span><span class='hs-layout'>)</span> <span class='hs-varid'>x</span>
+<a name="line-39"></a>        <span class='hs-varid'>g</span> <span class='hs-varid'>x</span> <span class='hs-varid'>y</span> <span class='hs-varid'>z</span> 
+<a name="line-40"></a>            <span class='hs-keyglyph'>|</span> <span class='hs-varid'>even</span> <span class='hs-varid'>y</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>g</span> <span class='hs-layout'>(</span><span class='hs-varid'>x</span> <span class='hs-varop'>`mappend`</span> <span class='hs-varid'>x</span><span class='hs-layout'>)</span> <span class='hs-layout'>(</span><span class='hs-varid'>y</span> <span class='hs-varop'>`quot`</span> <span class='hs-num'>2</span><span class='hs-layout'>)</span> <span class='hs-varid'>z</span>
+<a name="line-41"></a>            <span class='hs-keyglyph'>|</span> <span class='hs-varid'>y</span> <span class='hs-varop'>==</span> <span class='hs-num'>1</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>x</span> <span class='hs-varop'>`mappend`</span> <span class='hs-varid'>z</span>
+<a name="line-42"></a>            <span class='hs-keyglyph'>|</span> <span class='hs-varid'>otherwise</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>g</span> <span class='hs-layout'>(</span><span class='hs-varid'>x</span> <span class='hs-varop'>`mappend`</span> <span class='hs-varid'>x</span><span class='hs-layout'>)</span> <span class='hs-layout'>(</span><span class='hs-layout'>(</span><span class='hs-varid'>y</span> <span class='hs-comment'>-</span> <span class='hs-num'>1</span><span class='hs-layout'>)</span> <span class='hs-varop'>`quot`</span> <span class='hs-num'>2</span><span class='hs-layout'>)</span> <span class='hs-layout'>(</span><span class='hs-varid'>x</span> <span class='hs-varop'>`mappend`</span> <span class='hs-varid'>z</span><span class='hs-layout'>)</span>
+<a name="line-43"></a>
+</pre></body>
+</html>
addfile ./dist/doc/html/monoids/src/Data-Group-Sugar.html
hunk ./dist/doc/html/monoids/src/Data-Group-Sugar.html 1
+<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
+<html>
+<head>
+<!-- Generated by HsColour, http://www.cs.york.ac.uk/fp/darcs/hscolour/ -->
+<title>Data/Group/Sugar.hs</title>
+<link type='text/css' rel='stylesheet' href='hscolour.css' />
+</head>
+<body>
+<pre><a name="line-1"></a><span class='hs-comment'>-----------------------------------------------------------------------------</span>
+<a name="line-2"></a><span class='hs-comment'>-- |</span>
+<a name="line-3"></a><span class='hs-comment'>-- Module      :  Data.Group.Sugar</span>
+<a name="line-4"></a><span class='hs-comment'>-- Copyright   :  (c) Edward Kmett 2009</span>
+<a name="line-5"></a><span class='hs-comment'>-- License     :  BSD-style</span>
+<a name="line-6"></a><span class='hs-comment'>-- Maintainer  :  libraries@haskell.org</span>
+<a name="line-7"></a><span class='hs-comment'>-- Stability   :  experimental</span>
+<a name="line-8"></a><span class='hs-comment'>-- Portability :  portable</span>
+<a name="line-9"></a><span class='hs-comment'>--</span>
+<a name="line-10"></a><span class='hs-comment'>-- Syntactic sugar for working with groups that conflicts with names from the "Prelude".</span>
+<a name="line-11"></a><span class='hs-comment'>--</span>
+<a name="line-12"></a><span class='hs-comment'>-- &gt; import Prelude hiding ((-), (+), negate, subtract)</span>
+<a name="line-13"></a><span class='hs-comment'>-- &gt; import Data.Group.Sugar</span>
+<a name="line-14"></a><span class='hs-comment'>--</span>
+<a name="line-15"></a><span class='hs-comment'>-----------------------------------------------------------------------------</span>
+<a name="line-16"></a>
+<a name="line-17"></a><span class='hs-keyword'>module</span> <span class='hs-conid'>Data</span><span class='hs-varop'>.</span><span class='hs-conid'>Group</span><span class='hs-varop'>.</span><span class='hs-conid'>Sugar</span> 
+<a name="line-18"></a>    <span class='hs-layout'>(</span> <span class='hs-keyword'>module</span> <span class='hs-conid'>Data</span><span class='hs-varop'>.</span><span class='hs-conid'>Monoid</span><span class='hs-varop'>.</span><span class='hs-conid'>Additive</span><span class='hs-varop'>.</span><span class='hs-conid'>Sugar</span>
+<a name="line-19"></a>    <span class='hs-layout'>,</span> <span class='hs-keyword'>module</span> <span class='hs-conid'>Data</span><span class='hs-varop'>.</span><span class='hs-conid'>Group</span>
+<a name="line-20"></a>    <span class='hs-layout'>,</span> <span class='hs-layout'>(</span><span class='hs-comment'>-</span><span class='hs-layout'>)</span>
+<a name="line-21"></a>    <span class='hs-layout'>,</span> <span class='hs-varid'>negate</span>
+<a name="line-22"></a>    <span class='hs-layout'>,</span> <span class='hs-varid'>subtract</span>
+<a name="line-23"></a>    <span class='hs-layout'>)</span> <span class='hs-keyword'>where</span>
+<a name="line-24"></a>
+<a name="line-25"></a><span class='hs-keyword'>import</span> <span class='hs-conid'>Data</span><span class='hs-varop'>.</span><span class='hs-conid'>Monoid</span><span class='hs-varop'>.</span><span class='hs-conid'>Additive</span><span class='hs-varop'>.</span><span class='hs-conid'>Sugar</span>
+<a name="line-26"></a><span class='hs-keyword'>import</span> <span class='hs-conid'>Data</span><span class='hs-varop'>.</span><span class='hs-conid'>Group</span>
+<a name="line-27"></a><span class='hs-keyword'>import</span> <span class='hs-conid'>Prelude</span> <span class='hs-varid'>hiding</span> <span class='hs-layout'>(</span><span class='hs-layout'>(</span><span class='hs-comment'>-</span><span class='hs-layout'>)</span><span class='hs-layout'>,</span> <span class='hs-varid'>negate</span><span class='hs-layout'>,</span> <span class='hs-varid'>subtract</span><span class='hs-layout'>)</span>
+<a name="line-28"></a>
+<a name="line-29"></a><span class='hs-keyword'>infixl</span> <span class='hs-num'>7</span> <span class='hs-comment'>-</span>
+<a name="line-30"></a>
+<a name="line-31"></a><span class='hs-layout'>(</span><span class='hs-comment'>-</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>::</span> <span class='hs-conid'>Group</span> <span class='hs-varid'>g</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-varid'>g</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-varid'>g</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-varid'>g</span>
+<a name="line-32"></a><span class='hs-layout'>(</span><span class='hs-comment'>-</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>minus</span>
+<a name="line-33"></a>
+<a name="line-34"></a><a name="negate"></a><span class='hs-definition'>negate</span> <span class='hs-keyglyph'>::</span> <span class='hs-conid'>Group</span> <span class='hs-varid'>g</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-varid'>g</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-varid'>g</span>
+<a name="line-35"></a><span class='hs-definition'>negate</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>gnegate</span>
+<a name="line-36"></a>
+<a name="line-37"></a><a name="subtract"></a><span class='hs-definition'>subtract</span> <span class='hs-keyglyph'>::</span> <span class='hs-conid'>Group</span> <span class='hs-varid'>g</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-varid'>g</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-varid'>g</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-varid'>g</span>
+<a name="line-38"></a><span class='hs-definition'>subtract</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>gsubtract</span>
+</pre></body>
+</html>
addfile ./dist/doc/html/monoids/src/Data-Group.html
hunk ./dist/doc/html/monoids/src/Data-Group.html 1
+<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
+<html>
+<head>
+<!-- Generated by HsColour, http://www.cs.york.ac.uk/fp/darcs/hscolour/ -->
+<title>Data/Group.hs</title>
+<link type='text/css' rel='stylesheet' href='hscolour.css' />
+</head>
+<body>
+<pre><a name="line-1"></a><span class='hs-comment'>----------------------------------------------------------------------------</span>
+<a name="line-2"></a><span class='hs-comment'>-- |</span>
+<a name="line-3"></a><span class='hs-comment'>-- Module     : Data.Group</span>
+<a name="line-4"></a><span class='hs-comment'>-- Copyright  : 2007-2009 Edward Kmett</span>
+<a name="line-5"></a><span class='hs-comment'>-- License    : BSD</span>
+<a name="line-6"></a><span class='hs-comment'>--</span>
+<a name="line-7"></a><span class='hs-comment'>-- Maintainer  : Edward Kmett &lt;ekmett@gmail.com&gt;</span>
+<a name="line-8"></a><span class='hs-comment'>-- Stability   : experimental</span>
+<a name="line-9"></a><span class='hs-comment'>-- Portability : portable</span>
+<a name="line-10"></a><span class='hs-comment'>--</span>
+<a name="line-11"></a><span class='hs-comment'>-- Extends 'Monoid' to support 'Group' operations</span>
+<a name="line-12"></a><span class='hs-comment'>-----------------------------------------------------------------------------</span>
+<a name="line-13"></a>
+<a name="line-14"></a><span class='hs-keyword'>module</span> <span class='hs-conid'>Data</span><span class='hs-varop'>.</span><span class='hs-conid'>Group</span> 
+<a name="line-15"></a>    <span class='hs-layout'>(</span> <span class='hs-keyword'>module</span> <span class='hs-conid'>Data</span><span class='hs-varop'>.</span><span class='hs-conid'>Monoid</span><span class='hs-varop'>.</span><span class='hs-conid'>Additive</span>
+<a name="line-16"></a>    <span class='hs-layout'>,</span> <span class='hs-conid'>Group</span>
+<a name="line-17"></a>    <span class='hs-layout'>,</span> <span class='hs-varid'>gnegate</span>
+<a name="line-18"></a>    <span class='hs-layout'>,</span> <span class='hs-varid'>gsubtract</span>
+<a name="line-19"></a>    <span class='hs-layout'>,</span> <span class='hs-varid'>minus</span>
+<a name="line-20"></a>    <span class='hs-layout'>)</span> <span class='hs-keyword'>where</span>
+<a name="line-21"></a>
+<a name="line-22"></a><span class='hs-keyword'>import</span> <span class='hs-conid'>Data</span><span class='hs-varop'>.</span><span class='hs-conid'>Monoid</span><span class='hs-varop'>.</span><span class='hs-conid'>Additive</span>
+<a name="line-23"></a><span class='hs-keyword'>import</span> <span class='hs-conid'>Data</span><span class='hs-varop'>.</span><span class='hs-conid'>Monoid</span><span class='hs-varop'>.</span><span class='hs-conid'>Self</span>
+<a name="line-24"></a><span class='hs-keyword'>import</span> <span class='hs-conid'>Data</span><span class='hs-varop'>.</span><span class='hs-conid'>Monoid</span><span class='hs-varop'>.</span><span class='hs-conid'>FromString</span>
+<a name="line-25"></a>
+<a name="line-26"></a><span class='hs-keyword'>infixl</span> <span class='hs-num'>6</span> <span class='hs-varop'>`minus`</span>
+<a name="line-27"></a>
+<a name="line-28"></a><a name="Group"></a><span class='hs-comment'>-- | Minimal complete definition: 'gnegate' or 'minus'</span>
+<a name="line-29"></a><a name="Group"></a><span class='hs-keyword'>class</span> <span class='hs-conid'>Monoid</span> <span class='hs-varid'>a</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>Group</span> <span class='hs-varid'>a</span> <span class='hs-keyword'>where</span>
+<a name="line-30"></a>    <span class='hs-comment'>-- additive inverse</span>
+<a name="line-31"></a>    <span class='hs-varid'>gnegate</span> <span class='hs-keyglyph'>::</span> <span class='hs-varid'>a</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-varid'>a</span>
+<a name="line-32"></a>    <span class='hs-varid'>minus</span> <span class='hs-keyglyph'>::</span> <span class='hs-varid'>a</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-varid'>a</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-varid'>a</span>
+<a name="line-33"></a>    <span class='hs-varid'>gsubtract</span> <span class='hs-keyglyph'>::</span> <span class='hs-varid'>a</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-varid'>a</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-varid'>a</span> 
+<a name="line-34"></a>
+<a name="line-35"></a>    <span class='hs-varid'>gnegate</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>minus</span> <span class='hs-varid'>zero</span>
+<a name="line-36"></a>    <span class='hs-varid'>a</span> <span class='hs-varop'>`minus`</span> <span class='hs-varid'>b</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>a</span> <span class='hs-varop'>`plus`</span> <span class='hs-varid'>gnegate</span> <span class='hs-varid'>b</span> 
+<a name="line-37"></a>    <span class='hs-varid'>a</span> <span class='hs-varop'>`gsubtract`</span> <span class='hs-varid'>b</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>gnegate</span> <span class='hs-varid'>a</span> <span class='hs-varop'>`plus`</span> <span class='hs-varid'>b</span>
+<a name="line-38"></a>
+<a name="line-39"></a><span class='hs-keyword'>instance</span> <span class='hs-conid'>Num</span> <span class='hs-varid'>a</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>Group</span> <span class='hs-layout'>(</span><span class='hs-conid'>Sum</span> <span class='hs-varid'>a</span><span class='hs-layout'>)</span> <span class='hs-keyword'>where</span>
+<a name="line-40"></a>    <span class='hs-varid'>gnegate</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>Sum</span> <span class='hs-varop'>.</span> <span class='hs-varid'>negate</span> <span class='hs-varop'>.</span> <span class='hs-varid'>getSum</span>
+<a name="line-41"></a>    <span class='hs-conid'>Sum</span> <span class='hs-varid'>a</span> <span class='hs-varop'>`minus`</span> <span class='hs-conid'>Sum</span> <span class='hs-varid'>b</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>Sum</span> <span class='hs-layout'>(</span><span class='hs-varid'>a</span> <span class='hs-comment'>-</span> <span class='hs-varid'>b</span><span class='hs-layout'>)</span>
+<a name="line-42"></a>    
+<a name="line-43"></a><span class='hs-keyword'>instance</span> <span class='hs-conid'>Fractional</span> <span class='hs-varid'>a</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>Group</span> <span class='hs-layout'>(</span><span class='hs-conid'>Product</span> <span class='hs-varid'>a</span><span class='hs-layout'>)</span> <span class='hs-keyword'>where</span>
+<a name="line-44"></a>    <span class='hs-varid'>gnegate</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>Product</span> <span class='hs-varop'>.</span> <span class='hs-varid'>negate</span> <span class='hs-varop'>.</span> <span class='hs-varid'>getProduct</span>
+<a name="line-45"></a>    <span class='hs-conid'>Product</span> <span class='hs-varid'>a</span> <span class='hs-varop'>`minus`</span> <span class='hs-conid'>Product</span> <span class='hs-varid'>b</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>Product</span> <span class='hs-layout'>(</span><span class='hs-varid'>a</span> <span class='hs-varop'>/</span> <span class='hs-varid'>b</span><span class='hs-layout'>)</span>
+<a name="line-46"></a>    
+<a name="line-47"></a><span class='hs-keyword'>instance</span> <span class='hs-conid'>Group</span> <span class='hs-varid'>a</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>Group</span> <span class='hs-layout'>(</span><span class='hs-conid'>Dual</span> <span class='hs-varid'>a</span><span class='hs-layout'>)</span> <span class='hs-keyword'>where</span>
+<a name="line-48"></a>    <span class='hs-varid'>gnegate</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>Dual</span> <span class='hs-varop'>.</span> <span class='hs-varid'>gnegate</span> <span class='hs-varop'>.</span> <span class='hs-varid'>getDual</span>
+<a name="line-49"></a>
+<a name="line-50"></a><span class='hs-keyword'>instance</span> <span class='hs-conid'>Group</span> <span class='hs-varid'>a</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>Group</span> <span class='hs-layout'>(</span><span class='hs-conid'>Self</span> <span class='hs-varid'>a</span><span class='hs-layout'>)</span> <span class='hs-keyword'>where</span>
+<a name="line-51"></a>    <span class='hs-varid'>gnegate</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>Self</span> <span class='hs-varop'>.</span> <span class='hs-varid'>gnegate</span> <span class='hs-varop'>.</span> <span class='hs-varid'>getSelf</span>
+<a name="line-52"></a>    <span class='hs-conid'>Self</span> <span class='hs-varid'>a</span> <span class='hs-varop'>`minus`</span> <span class='hs-conid'>Self</span> <span class='hs-varid'>b</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>Self</span> <span class='hs-layout'>(</span><span class='hs-varid'>a</span> <span class='hs-varop'>`minus`</span> <span class='hs-varid'>b</span><span class='hs-layout'>)</span>
+<a name="line-53"></a>
+<a name="line-54"></a><span class='hs-keyword'>instance</span> <span class='hs-conid'>Group</span> <span class='hs-varid'>a</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>Group</span> <span class='hs-layout'>(</span><span class='hs-conid'>FromString</span> <span class='hs-varid'>a</span><span class='hs-layout'>)</span> <span class='hs-keyword'>where</span>
+<a name="line-55"></a>    <span class='hs-varid'>gnegate</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>FromString</span> <span class='hs-varop'>.</span> <span class='hs-varid'>gnegate</span> <span class='hs-varop'>.</span> <span class='hs-varid'>getFromString</span>
+<a name="line-56"></a>    <span class='hs-conid'>FromString</span> <span class='hs-varid'>a</span> <span class='hs-varop'>`minus`</span> <span class='hs-conid'>FromString</span> <span class='hs-varid'>b</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>FromString</span> <span class='hs-layout'>(</span><span class='hs-varid'>a</span> <span class='hs-varop'>`minus`</span> <span class='hs-varid'>b</span><span class='hs-layout'>)</span>
+</pre></body>
+</html>
addfile ./dist/doc/html/monoids/src/Data-Monoid-Additive-Sugar.html
hunk ./dist/doc/html/monoids/src/Data-Monoid-Additive-Sugar.html 1
+<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
+<html>
+<head>
+<!-- Generated by HsColour, http://www.cs.york.ac.uk/fp/darcs/hscolour/ -->
+<title>Data/Monoid/Additive/Sugar.hs</title>
+<link type='text/css' rel='stylesheet' href='hscolour.css' />
+</head>
+<body>
+<pre><a name="line-1"></a><span class='hs-comment'>-----------------------------------------------------------------------------</span>
+<a name="line-2"></a><span class='hs-comment'>-- |</span>
+<a name="line-3"></a><span class='hs-comment'>-- Module      :  Data.Monoid.Additive.Sugar</span>
+<a name="line-4"></a><span class='hs-comment'>-- Copyright   :  (c) Edward Kmett 2009</span>
+<a name="line-5"></a><span class='hs-comment'>-- License     :  BSD-style</span>
+<a name="line-6"></a><span class='hs-comment'>-- Maintainer  :  libraries@haskell.org</span>
+<a name="line-7"></a><span class='hs-comment'>-- Stability   :  experimental</span>
+<a name="line-8"></a><span class='hs-comment'>-- Portability :  portable</span>
+<a name="line-9"></a><span class='hs-comment'>--</span>
+<a name="line-10"></a><span class='hs-comment'>-- Syntactic sugar for working with a 'Monoid' that conflicts with names from the "Prelude".</span>
+<a name="line-11"></a><span class='hs-comment'>--</span>
+<a name="line-12"></a><span class='hs-comment'>-- &gt; import Prelude hiding ((+))</span>
+<a name="line-13"></a><span class='hs-comment'>-- &gt; import Data.Monoid.Additive.Sugar</span>
+<a name="line-14"></a><span class='hs-comment'>--</span>
+<a name="line-15"></a><span class='hs-comment'>-----------------------------------------------------------------------------</span>
+<a name="line-16"></a>
+<a name="line-17"></a><span class='hs-keyword'>module</span> <span class='hs-conid'>Data</span><span class='hs-varop'>.</span><span class='hs-conid'>Monoid</span><span class='hs-varop'>.</span><span class='hs-conid'>Additive</span><span class='hs-varop'>.</span><span class='hs-conid'>Sugar</span> 
+<a name="line-18"></a>    <span class='hs-layout'>(</span> <span class='hs-keyword'>module</span> <span class='hs-conid'>Data</span><span class='hs-varop'>.</span><span class='hs-conid'>Monoid</span><span class='hs-varop'>.</span><span class='hs-conid'>Additive</span>
+<a name="line-19"></a>    <span class='hs-layout'>,</span> <span class='hs-layout'>(</span><span class='hs-varop'>+</span><span class='hs-layout'>)</span>
+<a name="line-20"></a>    <span class='hs-layout'>)</span> <span class='hs-keyword'>where</span>
+<a name="line-21"></a>
+<a name="line-22"></a><span class='hs-keyword'>import</span> <span class='hs-conid'>Data</span><span class='hs-varop'>.</span><span class='hs-conid'>Monoid</span><span class='hs-varop'>.</span><span class='hs-conid'>Additive</span>
+<a name="line-23"></a><span class='hs-keyword'>import</span> <span class='hs-conid'>Prelude</span> <span class='hs-varid'>hiding</span> <span class='hs-layout'>(</span><span class='hs-layout'>(</span><span class='hs-varop'>+</span><span class='hs-layout'>)</span><span class='hs-layout'>)</span>
+<a name="line-24"></a>
+<a name="line-25"></a><span class='hs-keyword'>infixl</span> <span class='hs-num'>6</span> <span class='hs-varop'>+</span> 
+<a name="line-26"></a>
+<a name="line-27"></a><a name="+"></a><span class='hs-layout'>(</span><span class='hs-varop'>+</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>::</span> <span class='hs-conid'>Monoid</span> <span class='hs-varid'>m</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-varid'>m</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-varid'>m</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-varid'>m</span> 
+<a name="line-28"></a><span class='hs-layout'>(</span><span class='hs-varop'>+</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>mappend</span>
+</pre></body>
+</html>
addfile ./dist/doc/html/monoids/src/Data-Monoid-Additive.html
hunk ./dist/doc/html/monoids/src/Data-Monoid-Additive.html 1
+<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
+<html>
+<head>
+<!-- Generated by HsColour, http://www.cs.york.ac.uk/fp/darcs/hscolour/ -->
+<title>Data/Monoid/Additive.hs</title>
+<link type='text/css' rel='stylesheet' href='hscolour.css' />
+</head>
+<body>
+<pre><a name="line-1"></a><span class='hs-comment'>-----------------------------------------------------------------------------</span>
+<a name="line-2"></a><span class='hs-comment'>-- |</span>
+<a name="line-3"></a><span class='hs-comment'>-- Module      :  Data.Monoid.Additive</span>
+<a name="line-4"></a><span class='hs-comment'>-- Copyright   :  (c) Edward Kmett 2009</span>
+<a name="line-5"></a><span class='hs-comment'>-- License     :  BSD-style</span>
+<a name="line-6"></a><span class='hs-comment'>-- Maintainer  :  libraries@haskell.org</span>
+<a name="line-7"></a><span class='hs-comment'>-- Stability   :  experimental</span>
+<a name="line-8"></a><span class='hs-comment'>-- Portability :  portable</span>
+<a name="line-9"></a><span class='hs-comment'>--</span>
+<a name="line-10"></a><span class='hs-comment'>-- More easily understood aliases for "mappend" and "mempty" </span>
+<a name="line-11"></a><span class='hs-comment'>--</span>
+<a name="line-12"></a><span class='hs-comment'>-- &gt; import Data.Monoid.Additive</span>
+<a name="line-13"></a><span class='hs-comment'>--</span>
+<a name="line-14"></a><span class='hs-comment'>-----------------------------------------------------------------------------</span>
+<a name="line-15"></a>
+<a name="line-16"></a><span class='hs-keyword'>module</span> <span class='hs-conid'>Data</span><span class='hs-varop'>.</span><span class='hs-conid'>Monoid</span><span class='hs-varop'>.</span><span class='hs-conid'>Additive</span>
+<a name="line-17"></a>    <span class='hs-layout'>(</span> <span class='hs-keyword'>module</span> <span class='hs-conid'>Data</span><span class='hs-varop'>.</span><span class='hs-conid'>Monoid</span> 
+<a name="line-18"></a>    <span class='hs-layout'>,</span> <span class='hs-varid'>plus</span>
+<a name="line-19"></a>    <span class='hs-layout'>,</span> <span class='hs-varid'>zero</span>
+<a name="line-20"></a>    <span class='hs-layout'>)</span> <span class='hs-keyword'>where</span>
+<a name="line-21"></a>
+<a name="line-22"></a><span class='hs-keyword'>import</span> <span class='hs-conid'>Data</span><span class='hs-varop'>.</span><span class='hs-conid'>Monoid</span>
+<a name="line-23"></a>
+<a name="line-24"></a><span class='hs-keyword'>infixl</span> <span class='hs-num'>6</span> <span class='hs-varop'>`plus`</span>
+<a name="line-25"></a>
+<a name="line-26"></a><a name="plus"></a><span class='hs-definition'>plus</span> <span class='hs-keyglyph'>::</span> <span class='hs-conid'>Monoid</span> <span class='hs-varid'>m</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-varid'>m</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-varid'>m</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-varid'>m</span> 
+<a name="line-27"></a><span class='hs-definition'>plus</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>mappend</span>
+<a name="line-28"></a>
+<a name="line-29"></a><a name="zero"></a><span class='hs-definition'>zero</span> <span class='hs-keyglyph'>::</span> <span class='hs-conid'>Monoid</span> <span class='hs-varid'>m</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-varid'>m</span> 
+<a name="line-30"></a><span class='hs-definition'>zero</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>mempty</span>
+</pre></body>
+</html>
addfile ./dist/doc/html/monoids/src/Data-Monoid-Applicative.html
hunk ./dist/doc/html/monoids/src/Data-Monoid-Applicative.html 1
+<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
+<html>
+<head>
+<!-- Generated by HsColour, http://www.cs.york.ac.uk/fp/darcs/hscolour/ -->
+<title>Data/Monoid/Applicative.hs</title>
+<link type='text/css' rel='stylesheet' href='hscolour.css' />
+</head>
+<body>
+<pre><a name="line-1"></a><span class='hs-comment'>{-# LANGUAGE FlexibleInstances, MultiParamTypeClasses, GeneralizedNewtypeDeriving, FlexibleContexts #-}</span>
+<a name="line-2"></a>
+<a name="line-3"></a><span class='hs-comment'>-----------------------------------------------------------------------------</span>
+<a name="line-4"></a><span class='hs-comment'>-- |</span>
+<a name="line-5"></a><span class='hs-comment'>-- Module      :  Data.Monoid.Applicative</span>
+<a name="line-6"></a><span class='hs-comment'>-- Copyright   :  (c) Edward Kmett 2009</span>
+<a name="line-7"></a><span class='hs-comment'>-- License     :  BSD-style</span>
+<a name="line-8"></a><span class='hs-comment'>-- Maintainer  :  libraries@haskell.org</span>
+<a name="line-9"></a><span class='hs-comment'>-- Stability   :  experimental</span>
+<a name="line-10"></a><span class='hs-comment'>-- Portability :  non-portable (MPTCs)</span>
+<a name="line-11"></a><span class='hs-comment'>--</span>
+<a name="line-12"></a><span class='hs-comment'>-- Monoids for working with an 'Applicative' 'Functor'.</span>
+<a name="line-13"></a><span class='hs-comment'>--</span>
+<a name="line-14"></a><span class='hs-comment'>-----------------------------------------------------------------------------</span>
+<a name="line-15"></a>
+<a name="line-16"></a><span class='hs-keyword'>module</span> <span class='hs-conid'>Data</span><span class='hs-varop'>.</span><span class='hs-conid'>Monoid</span><span class='hs-varop'>.</span><span class='hs-conid'>Applicative</span> 
+<a name="line-17"></a>    <span class='hs-layout'>(</span> <span class='hs-keyword'>module</span> <span class='hs-conid'>Data</span><span class='hs-varop'>.</span><span class='hs-conid'>Monoid</span><span class='hs-varop'>.</span><span class='hs-conid'>Reducer</span>
+<a name="line-18"></a>    <span class='hs-layout'>,</span> <span class='hs-keyword'>module</span> <span class='hs-conid'>Data</span><span class='hs-varop'>.</span><span class='hs-conid'>Ring</span><span class='hs-varop'>.</span><span class='hs-conid'>Semi</span><span class='hs-varop'>.</span><span class='hs-conid'>Near</span>
+<a name="line-19"></a>    <span class='hs-layout'>,</span> <span class='hs-conid'>Traversal</span><span class='hs-layout'>(</span><span class='hs-conid'>Traversal</span><span class='hs-layout'>,</span><span class='hs-varid'>getTraversal</span><span class='hs-layout'>)</span>
+<a name="line-20"></a>    <span class='hs-layout'>,</span> <span class='hs-conid'>WrappedApplicative</span><span class='hs-layout'>(</span><span class='hs-conid'>WrappedApplicative</span><span class='hs-layout'>,</span><span class='hs-varid'>getWrappedApplicative</span><span class='hs-layout'>)</span>
+<a name="line-21"></a>    <span class='hs-layout'>,</span> <span class='hs-varid'>snocTraversal</span>
+<a name="line-22"></a>    <span class='hs-layout'>)</span> <span class='hs-keyword'>where</span>
+<a name="line-23"></a>
+<a name="line-24"></a><span class='hs-keyword'>import</span> <span class='hs-conid'>Control</span><span class='hs-varop'>.</span><span class='hs-conid'>Applicative</span>
+<a name="line-25"></a><span class='hs-keyword'>import</span> <span class='hs-conid'>Data</span><span class='hs-varop'>.</span><span class='hs-conid'>Monoid</span><span class='hs-varop'>.</span><span class='hs-conid'>Reducer</span>
+<a name="line-26"></a><span class='hs-keyword'>import</span> <span class='hs-conid'>Data</span><span class='hs-varop'>.</span><span class='hs-conid'>Ring</span><span class='hs-varop'>.</span><span class='hs-conid'>Semi</span><span class='hs-varop'>.</span><span class='hs-conid'>Near</span>
+<a name="line-27"></a><span class='hs-keyword'>import</span> <span class='hs-conid'>Control</span><span class='hs-varop'>.</span><span class='hs-conid'>Functor</span><span class='hs-varop'>.</span><span class='hs-conid'>Pointed</span>
+<a name="line-28"></a>
+<a name="line-29"></a><a name="Traversal"></a><span class='hs-comment'>-- | A 'Traversal' uses an glues together 'Applicative' actions with (*&gt;)</span>
+<a name="line-30"></a><a name="Traversal"></a><span class='hs-comment'>--   in the manner of 'traverse_' from "Data.Foldable". Any values returned by </span>
+<a name="line-31"></a><a name="Traversal"></a><span class='hs-comment'>--   reduced actions are discarded.</span>
+<a name="line-32"></a><a name="Traversal"></a><span class='hs-keyword'>newtype</span> <span class='hs-conid'>Traversal</span> <span class='hs-varid'>f</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>Traversal</span> <span class='hs-layout'>{</span> <span class='hs-varid'>getTraversal</span> <span class='hs-keyglyph'>::</span> <span class='hs-varid'>f</span> <span class='hs-conid'>()</span> <span class='hs-layout'>}</span> 
+<a name="line-33"></a>
+<a name="line-34"></a><span class='hs-keyword'>instance</span> <span class='hs-conid'>Applicative</span> <span class='hs-varid'>f</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>Monoid</span> <span class='hs-layout'>(</span><span class='hs-conid'>Traversal</span> <span class='hs-varid'>f</span><span class='hs-layout'>)</span> <span class='hs-keyword'>where</span>
+<a name="line-35"></a>    <span class='hs-varid'>mempty</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>Traversal</span> <span class='hs-layout'>(</span><span class='hs-varid'>pure</span> <span class='hs-conid'>()</span><span class='hs-layout'>)</span>
+<a name="line-36"></a>    <span class='hs-conid'>Traversal</span> <span class='hs-varid'>a</span> <span class='hs-varop'>`mappend`</span> <span class='hs-conid'>Traversal</span> <span class='hs-varid'>b</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>Traversal</span> <span class='hs-layout'>(</span><span class='hs-varid'>a</span> <span class='hs-varop'>*&gt;</span> <span class='hs-varid'>b</span><span class='hs-layout'>)</span>
+<a name="line-37"></a>
+<a name="line-38"></a><span class='hs-keyword'>instance</span> <span class='hs-conid'>Applicative</span> <span class='hs-varid'>f</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>Reducer</span> <span class='hs-layout'>(</span><span class='hs-varid'>f</span> <span class='hs-varid'>a</span><span class='hs-layout'>)</span> <span class='hs-layout'>(</span><span class='hs-conid'>Traversal</span> <span class='hs-varid'>f</span><span class='hs-layout'>)</span> <span class='hs-keyword'>where</span>
+<a name="line-39"></a>    <span class='hs-varid'>unit</span> <span class='hs-varid'>a</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>Traversal</span> <span class='hs-layout'>(</span><span class='hs-varid'>a</span> <span class='hs-varop'>*&gt;</span> <span class='hs-varid'>pure</span> <span class='hs-conid'>()</span><span class='hs-layout'>)</span>
+<a name="line-40"></a>    <span class='hs-varid'>a</span> <span class='hs-varop'>`cons`</span> <span class='hs-conid'>Traversal</span> <span class='hs-varid'>b</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>Traversal</span> <span class='hs-layout'>(</span><span class='hs-varid'>a</span> <span class='hs-varop'>*&gt;</span> <span class='hs-varid'>b</span><span class='hs-layout'>)</span>
+<a name="line-41"></a>    <span class='hs-conid'>Traversal</span> <span class='hs-varid'>a</span> <span class='hs-varop'>`snoc`</span> <span class='hs-varid'>b</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>Traversal</span> <span class='hs-layout'>(</span><span class='hs-varid'>a</span> <span class='hs-varop'>*&gt;</span> <span class='hs-varid'>b</span> <span class='hs-varop'>*&gt;</span> <span class='hs-varid'>pure</span> <span class='hs-conid'>()</span><span class='hs-layout'>)</span>
+<a name="line-42"></a>
+<a name="line-43"></a><span class='hs-comment'>{-# RULES "unitTraversal" unit = Traversal #-}</span>
+<a name="line-44"></a><span class='hs-comment'>{-# RULES "snocTraversal" snoc = snocTraversal #-}</span>
+<a name="line-45"></a>
+<a name="line-46"></a><a name="snocTraversal"></a><span class='hs-comment'>-- | Efficiently avoid needlessly rebinding when using 'snoc' on an action that already returns ()</span>
+<a name="line-47"></a><span class='hs-comment'>--   A rewrite rule automatically applies this when possible</span>
+<a name="line-48"></a><span class='hs-definition'>snocTraversal</span> <span class='hs-keyglyph'>::</span> <span class='hs-conid'>Reducer</span> <span class='hs-layout'>(</span><span class='hs-varid'>f</span> <span class='hs-conid'>()</span><span class='hs-layout'>)</span> <span class='hs-layout'>(</span><span class='hs-conid'>Traversal</span> <span class='hs-varid'>f</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>Traversal</span> <span class='hs-varid'>f</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-varid'>f</span> <span class='hs-conid'>()</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-conid'>Traversal</span> <span class='hs-varid'>f</span>
+<a name="line-49"></a><span class='hs-definition'>snocTraversal</span> <span class='hs-varid'>a</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>mappend</span> <span class='hs-varid'>a</span> <span class='hs-varop'>.</span> <span class='hs-conid'>Traversal</span>
+<a name="line-50"></a>
+<a name="line-51"></a>
+<a name="line-52"></a><span class='hs-comment'>-- | A 'WrappedApplicative' turns any 'Alternative' instance into a 'Monoid'.</span>
+<a name="line-53"></a><span class='hs-comment'>--   It also provides a 'Multiplicative' instance for an 'Applicative' functor wrapped around a 'Monoid'</span>
+<a name="line-54"></a><span class='hs-comment'>--   and asserts that any 'Alternative' applied to a 'Monoid' forms a 'LeftSemiNearRing' </span>
+<a name="line-55"></a><span class='hs-comment'>--   under these operations.</span>
+<a name="line-56"></a>
+<a name="line-57"></a><a name="WrappedApplicative"></a><span class='hs-keyword'>newtype</span> <span class='hs-conid'>WrappedApplicative</span> <span class='hs-varid'>f</span> <span class='hs-varid'>a</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>WrappedApplicative</span> <span class='hs-layout'>{</span> <span class='hs-varid'>getWrappedApplicative</span> <span class='hs-keyglyph'>::</span> <span class='hs-varid'>f</span> <span class='hs-varid'>a</span> <span class='hs-layout'>}</span> 
+<a name="line-58"></a>    <span class='hs-keyword'>deriving</span> <span class='hs-layout'>(</span><span class='hs-conid'>Eq</span><span class='hs-layout'>,</span><span class='hs-conid'>Ord</span><span class='hs-layout'>,</span><span class='hs-conid'>Show</span><span class='hs-layout'>,</span><span class='hs-conid'>Read</span><span class='hs-layout'>,</span><span class='hs-conid'>Functor</span><span class='hs-layout'>,</span><span class='hs-conid'>Pointed</span><span class='hs-layout'>,</span><span class='hs-conid'>Applicative</span><span class='hs-layout'>,</span><span class='hs-conid'>Alternative</span><span class='hs-layout'>,</span><span class='hs-conid'>Copointed</span><span class='hs-layout'>)</span>
+<a name="line-59"></a>
+<a name="line-60"></a><span class='hs-keyword'>instance</span> <span class='hs-conid'>Alternative</span> <span class='hs-varid'>f</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>Monoid</span> <span class='hs-layout'>(</span><span class='hs-conid'>WrappedApplicative</span> <span class='hs-varid'>f</span> <span class='hs-varid'>a</span><span class='hs-layout'>)</span> <span class='hs-keyword'>where</span>
+<a name="line-61"></a>    <span class='hs-varid'>mempty</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>empty</span> 
+<a name="line-62"></a>    <span class='hs-conid'>WrappedApplicative</span> <span class='hs-varid'>a</span> <span class='hs-varop'>`mappend`</span> <span class='hs-conid'>WrappedApplicative</span> <span class='hs-varid'>b</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>WrappedApplicative</span> <span class='hs-layout'>(</span><span class='hs-varid'>a</span> <span class='hs-varop'>&lt;|&gt;</span> <span class='hs-varid'>b</span><span class='hs-layout'>)</span> 
+<a name="line-63"></a>
+<a name="line-64"></a><span class='hs-keyword'>instance</span> <span class='hs-layout'>(</span><span class='hs-conid'>Alternative</span> <span class='hs-varid'>f</span><span class='hs-layout'>,</span> <span class='hs-conid'>Monoid</span> <span class='hs-varid'>a</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>Multiplicative</span> <span class='hs-layout'>(</span><span class='hs-conid'>WrappedApplicative</span> <span class='hs-varid'>f</span> <span class='hs-varid'>a</span><span class='hs-layout'>)</span> <span class='hs-keyword'>where</span>
+<a name="line-65"></a>    <span class='hs-varid'>one</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>pure</span> <span class='hs-varid'>mempty</span>
+<a name="line-66"></a>    <span class='hs-varid'>times</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>liftA2</span> <span class='hs-varid'>mappend</span>
+<a name="line-67"></a>
+<a name="line-68"></a><span class='hs-keyword'>instance</span> <span class='hs-layout'>(</span><span class='hs-conid'>Alternative</span> <span class='hs-varid'>f</span><span class='hs-layout'>,</span> <span class='hs-varid'>c</span> <span class='hs-varop'>`Reducer`</span> <span class='hs-varid'>a</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>Reducer</span> <span class='hs-varid'>c</span> <span class='hs-layout'>(</span><span class='hs-conid'>WrappedApplicative</span> <span class='hs-varid'>f</span> <span class='hs-varid'>a</span><span class='hs-layout'>)</span> <span class='hs-keyword'>where</span>
+<a name="line-69"></a>    <span class='hs-varid'>unit</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>WrappedApplicative</span> <span class='hs-varop'>.</span> <span class='hs-varid'>pure</span> <span class='hs-varop'>.</span> <span class='hs-varid'>unit</span>
+<a name="line-70"></a>
+<a name="line-71"></a><span class='hs-keyword'>instance</span> <span class='hs-layout'>(</span><span class='hs-conid'>Alternative</span> <span class='hs-varid'>f</span><span class='hs-layout'>,</span> <span class='hs-conid'>Monoid</span> <span class='hs-varid'>a</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>LeftSemiNearRing</span> <span class='hs-layout'>(</span><span class='hs-conid'>WrappedApplicative</span> <span class='hs-varid'>f</span> <span class='hs-varid'>a</span><span class='hs-layout'>)</span>
+</pre></body>
+</html>
addfile ./dist/doc/html/monoids/src/Data-Monoid-Categorical.html
hunk ./dist/doc/html/monoids/src/Data-Monoid-Categorical.html 1
+<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
+<html>
+<head>
+<!-- Generated by HsColour, http://www.cs.york.ac.uk/fp/darcs/hscolour/ -->
+<title>Data/Monoid/Categorical.hs</title>
+<link type='text/css' rel='stylesheet' href='hscolour.css' />
+</head>
+<body>
+<pre><a name="line-1"></a><span class='hs-comment'>{-# LANGUAGE GADTs, FlexibleInstances, MultiParamTypeClasses #-}</span>
+<a name="line-2"></a>
+<a name="line-3"></a><span class='hs-comment'>-----------------------------------------------------------------------------</span>
+<a name="line-4"></a><span class='hs-comment'>-- |</span>
+<a name="line-5"></a><span class='hs-comment'>-- Module      :  Data.Monoid.Categorical</span>
+<a name="line-6"></a><span class='hs-comment'>-- Copyright   :  (c) Edward Kmett 2009</span>
+<a name="line-7"></a><span class='hs-comment'>-- License     :  BSD-style</span>
+<a name="line-8"></a><span class='hs-comment'>-- Maintainer  :  libraries@haskell.org</span>
+<a name="line-9"></a><span class='hs-comment'>-- Stability   :  experimental</span>
+<a name="line-10"></a><span class='hs-comment'>-- Portability :  portable</span>
+<a name="line-11"></a><span class='hs-comment'>--</span>
+<a name="line-12"></a><span class='hs-comment'>-----------------------------------------------------------------------------</span>
+<a name="line-13"></a>
+<a name="line-14"></a><span class='hs-keyword'>module</span> <span class='hs-conid'>Data</span><span class='hs-varop'>.</span><span class='hs-conid'>Monoid</span><span class='hs-varop'>.</span><span class='hs-conid'>Categorical</span>
+<a name="line-15"></a>    <span class='hs-layout'>(</span> <span class='hs-keyword'>module</span> <span class='hs-conid'>Data</span><span class='hs-varop'>.</span><span class='hs-conid'>Monoid</span><span class='hs-varop'>.</span><span class='hs-conid'>Reducer</span>
+<a name="line-16"></a>    <span class='hs-layout'>,</span> <span class='hs-keyword'>module</span> <span class='hs-conid'>Control</span><span class='hs-varop'>.</span><span class='hs-conid'>Category</span>
+<a name="line-17"></a>    <span class='hs-comment'>-- * Generalized Endo</span>
+<a name="line-18"></a>    <span class='hs-layout'>,</span> <span class='hs-conid'>GEndo</span><span class='hs-layout'>(</span><span class='hs-conid'>GEndo</span><span class='hs-layout'>,</span> <span class='hs-varid'>getGEndo</span><span class='hs-layout'>)</span>
+<a name="line-19"></a>    <span class='hs-comment'>-- * Monoids as Categories</span>
+<a name="line-20"></a>    <span class='hs-layout'>,</span> <span class='hs-conid'>Mon</span><span class='hs-layout'>(</span><span class='hs-conid'>Mon</span><span class='hs-layout'>)</span>
+<a name="line-21"></a>    <span class='hs-layout'>,</span> <span class='hs-varid'>getMon</span>
+<a name="line-22"></a>    <span class='hs-layout'>)</span> <span class='hs-keyword'>where</span>
+<a name="line-23"></a>
+<a name="line-24"></a><span class='hs-keyword'>import</span> <span class='hs-conid'>Prelude</span> <span class='hs-varid'>hiding</span> <span class='hs-layout'>(</span><span class='hs-layout'>(</span><span class='hs-varop'>.</span><span class='hs-layout'>)</span><span class='hs-layout'>,</span><span class='hs-varid'>id</span><span class='hs-layout'>)</span>
+<a name="line-25"></a><span class='hs-keyword'>import</span> <span class='hs-conid'>Data</span><span class='hs-varop'>.</span><span class='hs-conid'>Monoid</span><span class='hs-varop'>.</span><span class='hs-conid'>Reducer</span>
+<a name="line-26"></a><span class='hs-keyword'>import</span> <span class='hs-conid'>Control</span><span class='hs-varop'>.</span><span class='hs-conid'>Category</span>
+<a name="line-27"></a>
+<a name="line-28"></a><a name="GEndo"></a><span class='hs-comment'>-- | The 'Monoid' of the endomorphisms over some object in an arbitrary 'Category'.</span>
+<a name="line-29"></a><a name="GEndo"></a><span class='hs-keyword'>data</span> <span class='hs-conid'>GEndo</span> <span class='hs-varid'>k</span> <span class='hs-varid'>a</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>GEndo</span> <span class='hs-layout'>{</span> <span class='hs-varid'>getGEndo</span> <span class='hs-keyglyph'>::</span> <span class='hs-varid'>k</span> <span class='hs-varid'>a</span> <span class='hs-varid'>a</span> <span class='hs-layout'>}</span> 
+<a name="line-30"></a>
+<a name="line-31"></a><span class='hs-keyword'>instance</span> <span class='hs-conid'>Category</span> <span class='hs-varid'>k</span> <span class='hs-keyglyph'>=&gt;</span>  <span class='hs-conid'>Monoid</span> <span class='hs-layout'>(</span><span class='hs-conid'>GEndo</span> <span class='hs-varid'>k</span> <span class='hs-varid'>a</span><span class='hs-layout'>)</span> <span class='hs-keyword'>where</span>
+<a name="line-32"></a>    <span class='hs-varid'>mempty</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>GEndo</span> <span class='hs-varid'>id</span>
+<a name="line-33"></a>    <span class='hs-conid'>GEndo</span> <span class='hs-varid'>f</span> <span class='hs-varop'>`mappend`</span> <span class='hs-conid'>GEndo</span> <span class='hs-varid'>g</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>GEndo</span> <span class='hs-layout'>(</span><span class='hs-varid'>f</span> <span class='hs-varop'>.</span> <span class='hs-varid'>g</span><span class='hs-layout'>)</span>
+<a name="line-34"></a>
+<a name="line-35"></a><span class='hs-comment'>-- | A 'Monoid' is just a 'Category' with one object. </span>
+<a name="line-36"></a><span class='hs-keyword'>data</span> <span class='hs-conid'>Mon</span> <span class='hs-varid'>m</span> <span class='hs-varid'>n</span> <span class='hs-varid'>o</span> <span class='hs-keyword'>where</span>
+<a name="line-37"></a>    <span class='hs-conid'>Mon</span> <span class='hs-keyglyph'>::</span> <span class='hs-conid'>Monoid</span> <span class='hs-varid'>m</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-varid'>m</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-conid'>Mon</span> <span class='hs-varid'>m</span> <span class='hs-varid'>a</span> <span class='hs-varid'>a</span>
+<a name="line-38"></a>
+<a name="line-39"></a><a name="getMon"></a><span class='hs-comment'>-- | Extract the 'Monoid' from its representation as a 'Category'</span>
+<a name="line-40"></a><span class='hs-definition'>getMon</span> <span class='hs-keyglyph'>::</span> <span class='hs-conid'>Mon</span> <span class='hs-varid'>m</span> <span class='hs-varid'>m</span> <span class='hs-varid'>m</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-varid'>m</span> 
+<a name="line-41"></a><span class='hs-definition'>getMon</span> <span class='hs-layout'>(</span><span class='hs-conid'>Mon</span> <span class='hs-varid'>m</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>m</span>
+<a name="line-42"></a>
+<a name="line-43"></a><span class='hs-keyword'>instance</span> <span class='hs-conid'>Monoid</span> <span class='hs-varid'>m</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>Category</span> <span class='hs-layout'>(</span><span class='hs-conid'>Mon</span> <span class='hs-varid'>m</span><span class='hs-layout'>)</span> <span class='hs-keyword'>where</span>
+<a name="line-44"></a>    <span class='hs-varid'>id</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>Mon</span> <span class='hs-varid'>mempty</span>
+<a name="line-45"></a>    <span class='hs-conid'>Mon</span> <span class='hs-varid'>a</span> <span class='hs-varop'>.</span> <span class='hs-conid'>Mon</span> <span class='hs-varid'>b</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>Mon</span> <span class='hs-layout'>(</span><span class='hs-varid'>a</span> <span class='hs-varop'>`mappend`</span> <span class='hs-varid'>b</span><span class='hs-layout'>)</span>
+<a name="line-46"></a>
+<a name="line-47"></a><span class='hs-keyword'>instance</span> <span class='hs-conid'>Monoid</span> <span class='hs-varid'>m</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>Monoid</span> <span class='hs-layout'>(</span><span class='hs-conid'>Mon</span> <span class='hs-varid'>m</span> <span class='hs-varid'>m</span> <span class='hs-varid'>m</span><span class='hs-layout'>)</span> <span class='hs-keyword'>where</span>
+<a name="line-48"></a>    <span class='hs-varid'>mempty</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>id</span>
+<a name="line-49"></a>    <span class='hs-varid'>mappend</span> <span class='hs-keyglyph'>=</span> <span class='hs-layout'>(</span><span class='hs-varop'>.</span><span class='hs-layout'>)</span>
+<a name="line-50"></a>
+<a name="line-51"></a><span class='hs-keyword'>instance</span> <span class='hs-layout'>(</span><span class='hs-varid'>c</span> <span class='hs-varop'>`Reducer`</span> <span class='hs-varid'>m</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>Reducer</span> <span class='hs-varid'>c</span> <span class='hs-layout'>(</span><span class='hs-conid'>Mon</span> <span class='hs-varid'>m</span> <span class='hs-varid'>m</span> <span class='hs-varid'>m</span><span class='hs-layout'>)</span> <span class='hs-keyword'>where</span>
+<a name="line-52"></a>    <span class='hs-varid'>unit</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>Mon</span> <span class='hs-varop'>.</span> <span class='hs-varid'>unit</span>
+</pre></body>
+</html>
addfile ./dist/doc/html/monoids/src/Data-Monoid-Combinators.html
hunk ./dist/doc/html/monoids/src/Data-Monoid-Combinators.html 1
+<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
+<html>
+<head>
+<!-- Generated by HsColour, http://www.cs.york.ac.uk/fp/darcs/hscolour/ -->
+<title>Data/Monoid/Combinators.hs</title>
+<link type='text/css' rel='stylesheet' href='hscolour.css' />
+</head>
+<body>
+<pre><a name="line-1"></a><span class='hs-comment'>{-# LANGUAGE UndecidableInstances, TypeOperators, FlexibleContexts, MultiParamTypeClasses, FlexibleInstances, TypeFamilies #-}</span>
+<a name="line-2"></a>
+<a name="line-3"></a><span class='hs-comment'>-----------------------------------------------------------------------------</span>
+<a name="line-4"></a><span class='hs-comment'>-- |</span>
+<a name="line-5"></a><span class='hs-comment'>-- Module      :  Data.Monoid.Combinators</span>
+<a name="line-6"></a><span class='hs-comment'>-- Copyright   :  (c) Edward Kmett 2009</span>
+<a name="line-7"></a><span class='hs-comment'>-- License     :  BSD-style</span>
+<a name="line-8"></a><span class='hs-comment'>-- Maintainer  :  libraries@haskell.org</span>
+<a name="line-9"></a><span class='hs-comment'>-- Stability   :  experimental</span>
+<a name="line-10"></a><span class='hs-comment'>-- Portability :  non-portable (type families, MPTCs)</span>
+<a name="line-11"></a><span class='hs-comment'>--</span>
+<a name="line-12"></a><span class='hs-comment'>-- Utilities for working with Monoids that conflict with names from the "Prelude",</span>
+<a name="line-13"></a><span class='hs-comment'>-- "Data.Foldable", "Control.Monad" or elsewhere. Intended to be imported qualified.</span>
+<a name="line-14"></a><span class='hs-comment'>--</span>
+<a name="line-15"></a><span class='hs-comment'>-- &gt; import Data.Group.Combinators as Monoid </span>
+<a name="line-16"></a><span class='hs-comment'>--</span>
+<a name="line-17"></a><span class='hs-comment'>-----------------------------------------------------------------------------</span>
+<a name="line-18"></a>
+<a name="line-19"></a><span class='hs-keyword'>module</span> <span class='hs-conid'>Data</span><span class='hs-varop'>.</span><span class='hs-conid'>Monoid</span><span class='hs-varop'>.</span><span class='hs-conid'>Combinators</span>
+<a name="line-20"></a>    <span class='hs-layout'>(</span> <span class='hs-keyword'>module</span> <span class='hs-conid'>Data</span><span class='hs-varop'>.</span><span class='hs-conid'>Monoid</span><span class='hs-varop'>.</span><span class='hs-conid'>Generator</span>
+<a name="line-21"></a>    <span class='hs-comment'>-- * Monadic Reduction</span>
+<a name="line-22"></a>    <span class='hs-layout'>,</span> <span class='hs-varid'>mapM_</span>
+<a name="line-23"></a>    <span class='hs-layout'>,</span> <span class='hs-varid'>forM_</span>
+<a name="line-24"></a>    <span class='hs-comment'>-- * Applicative Reduction</span>
+<a name="line-25"></a>    <span class='hs-layout'>,</span> <span class='hs-varid'>traverse_</span>
+<a name="line-26"></a>    <span class='hs-layout'>,</span> <span class='hs-varid'>for_</span>
+<a name="line-27"></a>    <span class='hs-comment'>-- * Logical Reduction</span>
+<a name="line-28"></a>    <span class='hs-layout'>,</span> <span class='hs-varid'>and</span>
+<a name="line-29"></a>    <span class='hs-layout'>,</span> <span class='hs-varid'>or</span>
+<a name="line-30"></a>    <span class='hs-layout'>,</span> <span class='hs-varid'>any</span>
+<a name="line-31"></a>    <span class='hs-layout'>,</span> <span class='hs-varid'>all</span>
+<a name="line-32"></a>    <span class='hs-comment'>-- * Monoidal Reduction</span>
+<a name="line-33"></a>    <span class='hs-layout'>,</span> <span class='hs-varid'>foldMap</span>
+<a name="line-34"></a>    <span class='hs-layout'>,</span> <span class='hs-varid'>fold</span>
+<a name="line-35"></a>    <span class='hs-comment'>-- * List-Like Reduction</span>
+<a name="line-36"></a>    <span class='hs-layout'>,</span> <span class='hs-varid'>concatMap</span>
+<a name="line-37"></a>    <span class='hs-layout'>,</span> <span class='hs-varid'>elem</span>
+<a name="line-38"></a>    <span class='hs-layout'>,</span> <span class='hs-varid'>filter</span>
+<a name="line-39"></a>    <span class='hs-layout'>,</span> <span class='hs-varid'>find</span>
+<a name="line-40"></a>    <span class='hs-layout'>,</span> <span class='hs-varid'>sum</span>
+<a name="line-41"></a>    <span class='hs-layout'>,</span> <span class='hs-varid'>product</span>
+<a name="line-42"></a>    <span class='hs-layout'>,</span> <span class='hs-varid'>notElem</span>
+<a name="line-43"></a>    <span class='hs-comment'>-- * List-Like Monoid Generation</span>
+<a name="line-44"></a>    <span class='hs-layout'>,</span> <span class='hs-varid'>repeat</span>
+<a name="line-45"></a>    <span class='hs-layout'>,</span> <span class='hs-varid'>replicate</span>
+<a name="line-46"></a>    <span class='hs-layout'>,</span> <span class='hs-varid'>cycle</span>
+<a name="line-47"></a>    <span class='hs-layout'>)</span> <span class='hs-keyword'>where</span>
+<a name="line-48"></a>
+<a name="line-49"></a><span class='hs-keyword'>import</span> <span class='hs-conid'>Prelude</span> <span class='hs-varid'>hiding</span> <span class='hs-layout'>(</span><span class='hs-varid'>mapM_</span><span class='hs-layout'>,</span> <span class='hs-varid'>any</span><span class='hs-layout'>,</span> <span class='hs-varid'>elem</span><span class='hs-layout'>,</span> <span class='hs-varid'>filter</span><span class='hs-layout'>,</span> <span class='hs-varid'>concatMap</span><span class='hs-layout'>,</span> <span class='hs-varid'>and</span><span class='hs-layout'>,</span> <span class='hs-varid'>or</span><span class='hs-layout'>,</span> <span class='hs-varid'>all</span><span class='hs-layout'>,</span> <span class='hs-varid'>sum</span><span class='hs-layout'>,</span> <span class='hs-varid'>product</span><span class='hs-layout'>,</span> <span class='hs-varid'>notElem</span><span class='hs-layout'>,</span> <span class='hs-varid'>replicate</span><span class='hs-layout'>,</span> <span class='hs-varid'>cycle</span><span class='hs-layout'>,</span> <span class='hs-varid'>repeat</span><span class='hs-layout'>)</span>
+<a name="line-50"></a><span class='hs-keyword'>import</span> <span class='hs-conid'>Control</span><span class='hs-varop'>.</span><span class='hs-conid'>Applicative</span>
+<a name="line-51"></a><span class='hs-keyword'>import</span> <span class='hs-conid'>Data</span><span class='hs-varop'>.</span><span class='hs-conid'>Monoid</span><span class='hs-varop'>.</span><span class='hs-conid'>Generator</span>
+<a name="line-52"></a><span class='hs-keyword'>import</span> <span class='hs-conid'>Data</span><span class='hs-varop'>.</span><span class='hs-conid'>Monoid</span><span class='hs-varop'>.</span><span class='hs-conid'>Applicative</span>
+<a name="line-53"></a><span class='hs-keyword'>import</span> <span class='hs-conid'>Data</span><span class='hs-varop'>.</span><span class='hs-conid'>Monoid</span><span class='hs-varop'>.</span><span class='hs-conid'>Self</span>
+<a name="line-54"></a><span class='hs-keyword'>import</span> <span class='hs-conid'>Data</span><span class='hs-varop'>.</span><span class='hs-conid'>Monoid</span><span class='hs-varop'>.</span><span class='hs-conid'>Monad</span>
+<a name="line-55"></a>
+<a name="line-56"></a><a name="traverse_"></a><span class='hs-comment'>-- | Efficiently 'mapReduce' a 'Generator' using the 'Traversal' monoid. A specialized version of its namesake in "Data.Foldable"</span>
+<a name="line-57"></a><span class='hs-definition'>traverse_</span> <span class='hs-keyglyph'>::</span> <span class='hs-layout'>(</span><span class='hs-conid'>Generator</span> <span class='hs-varid'>c</span><span class='hs-layout'>,</span> <span class='hs-conid'>Applicative</span> <span class='hs-varid'>f</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-layout'>(</span><span class='hs-conid'>Elem</span> <span class='hs-varid'>c</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-varid'>f</span> <span class='hs-varid'>b</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-varid'>c</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-varid'>f</span> <span class='hs-conid'>()</span>
+<a name="line-58"></a><span class='hs-definition'>traverse_</span> <span class='hs-varid'>f</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>getTraversal</span> <span class='hs-varop'>.</span> <span class='hs-varid'>mapReduce</span> <span class='hs-varid'>f</span>
+<a name="line-59"></a>    
+<a name="line-60"></a><a name="for_"></a><span class='hs-comment'>-- | flipped 'traverse_' as in "Data.Foldable"</span>
+<a name="line-61"></a><span class='hs-definition'>for_</span> <span class='hs-keyglyph'>::</span> <span class='hs-layout'>(</span><span class='hs-conid'>Generator</span> <span class='hs-varid'>c</span><span class='hs-layout'>,</span> <span class='hs-conid'>Applicative</span> <span class='hs-varid'>f</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-varid'>c</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-layout'>(</span><span class='hs-conid'>Elem</span> <span class='hs-varid'>c</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-varid'>f</span> <span class='hs-varid'>b</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-varid'>f</span> <span class='hs-conid'>()</span>
+<a name="line-62"></a><span class='hs-definition'>for_</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>flip</span> <span class='hs-varid'>traverse_</span>
+<a name="line-63"></a>
+<a name="line-64"></a><a name="mapM_"></a><span class='hs-comment'>-- | Efficiently 'mapReduce' a 'Generator' using the 'Action' monoid. A specialized version of its namesake from "Data.Foldable" and "Control.Monad"</span>
+<a name="line-65"></a><span class='hs-definition'>mapM_</span> <span class='hs-keyglyph'>::</span> <span class='hs-layout'>(</span><span class='hs-conid'>Generator</span> <span class='hs-varid'>c</span><span class='hs-layout'>,</span> <span class='hs-conid'>Monad</span> <span class='hs-varid'>m</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-layout'>(</span><span class='hs-conid'>Elem</span> <span class='hs-varid'>c</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-varid'>m</span> <span class='hs-varid'>b</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-varid'>c</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-varid'>m</span> <span class='hs-conid'>()</span>
+<a name="line-66"></a><span class='hs-definition'>mapM_</span> <span class='hs-varid'>f</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>getAction</span> <span class='hs-varop'>.</span> <span class='hs-varid'>mapReduce</span> <span class='hs-varid'>f</span>
+<a name="line-67"></a>
+<a name="line-68"></a><a name="forM_"></a><span class='hs-comment'>-- | flipped 'mapM_' as in "Data.Foldable" and "Control.Monad"</span>
+<a name="line-69"></a><span class='hs-definition'>forM_</span> <span class='hs-keyglyph'>::</span> <span class='hs-layout'>(</span><span class='hs-conid'>Generator</span> <span class='hs-varid'>c</span><span class='hs-layout'>,</span> <span class='hs-conid'>Monad</span> <span class='hs-varid'>m</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-varid'>c</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-layout'>(</span><span class='hs-conid'>Elem</span> <span class='hs-varid'>c</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-varid'>m</span> <span class='hs-varid'>b</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-varid'>m</span> <span class='hs-conid'>()</span>
+<a name="line-70"></a><span class='hs-definition'>forM_</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>flip</span> <span class='hs-varid'>mapM_</span>
+<a name="line-71"></a>
+<a name="line-72"></a><a name="foldMap"></a><span class='hs-comment'>-- | Efficiently 'mapReduce' a 'Generator' using the 'Self' monoid. A specialized version of its namesake from "Data.Foldable"</span>
+<a name="line-73"></a><span class='hs-definition'>foldMap</span> <span class='hs-keyglyph'>::</span> <span class='hs-layout'>(</span><span class='hs-conid'>Monoid</span> <span class='hs-varid'>m</span><span class='hs-layout'>,</span> <span class='hs-conid'>Generator</span> <span class='hs-varid'>c</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-layout'>(</span><span class='hs-conid'>Elem</span> <span class='hs-varid'>c</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-varid'>m</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-varid'>c</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-varid'>m</span>
+<a name="line-74"></a><span class='hs-definition'>foldMap</span> <span class='hs-varid'>f</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>getSelf</span> <span class='hs-varop'>.</span> <span class='hs-varid'>mapReduce</span> <span class='hs-varid'>f</span>
+<a name="line-75"></a>
+<a name="line-76"></a><a name="fold"></a><span class='hs-comment'>-- | Efficiently 'reduce' a 'Generator' using the 'Self' monoid. A specialized version of its namesake from "Data.Foldable"</span>
+<a name="line-77"></a><span class='hs-definition'>fold</span> <span class='hs-keyglyph'>::</span> <span class='hs-layout'>(</span><span class='hs-conid'>Monoid</span> <span class='hs-varid'>m</span><span class='hs-layout'>,</span> <span class='hs-conid'>Generator</span> <span class='hs-varid'>c</span><span class='hs-layout'>,</span> <span class='hs-conid'>Elem</span> <span class='hs-varid'>c</span> <span class='hs-keyglyph'>~</span> <span class='hs-varid'>m</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-varid'>c</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-varid'>m</span>
+<a name="line-78"></a><span class='hs-definition'>fold</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>getSelf</span> <span class='hs-varop'>.</span> <span class='hs-varid'>reduce</span>
+<a name="line-79"></a>
+<a name="line-80"></a><a name="concatMap"></a><span class='hs-comment'>-- | A further specialization of "foldMap"</span>
+<a name="line-81"></a><span class='hs-definition'>concatMap</span> <span class='hs-keyglyph'>::</span> <span class='hs-conid'>Generator</span> <span class='hs-varid'>c</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-layout'>(</span><span class='hs-conid'>Elem</span> <span class='hs-varid'>c</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-keyglyph'>[</span><span class='hs-varid'>b</span><span class='hs-keyglyph'>]</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-varid'>c</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-keyglyph'>[</span><span class='hs-varid'>b</span><span class='hs-keyglyph'>]</span>
+<a name="line-82"></a><span class='hs-definition'>concatMap</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>foldMap</span>
+<a name="line-83"></a>
+<a name="line-84"></a><a name="and"></a><span class='hs-comment'>-- | Efficiently 'reduce' a 'Generator' that contains values of type 'Bool'</span>
+<a name="line-85"></a><span class='hs-definition'>and</span> <span class='hs-keyglyph'>::</span> <span class='hs-layout'>(</span><span class='hs-conid'>Generator</span> <span class='hs-varid'>c</span><span class='hs-layout'>,</span> <span class='hs-conid'>Elem</span> <span class='hs-varid'>c</span> <span class='hs-keyglyph'>~</span> <span class='hs-conid'>Bool</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-varid'>c</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-conid'>Bool</span>
+<a name="line-86"></a><span class='hs-definition'>and</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>getAll</span> <span class='hs-varop'>.</span> <span class='hs-varid'>reduce</span>
+<a name="line-87"></a>
+<a name="line-88"></a><a name="or"></a><span class='hs-comment'>-- | Efficiently 'reduce' a 'Generator' that contains values of type 'Bool'</span>
+<a name="line-89"></a><span class='hs-definition'>or</span> <span class='hs-keyglyph'>::</span> <span class='hs-layout'>(</span><span class='hs-conid'>Generator</span> <span class='hs-varid'>c</span><span class='hs-layout'>,</span> <span class='hs-conid'>Elem</span> <span class='hs-varid'>c</span> <span class='hs-keyglyph'>~</span> <span class='hs-conid'>Bool</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-varid'>c</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-conid'>Bool</span>
+<a name="line-90"></a><span class='hs-definition'>or</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>getAny</span> <span class='hs-varop'>.</span> <span class='hs-varid'>reduce</span>
+<a name="line-91"></a>
+<a name="line-92"></a><a name="any"></a><span class='hs-comment'>-- | Efficiently 'mapReduce' any 'Generator' checking to see if any of its values match the supplied predicate</span>
+<a name="line-93"></a><span class='hs-definition'>any</span> <span class='hs-keyglyph'>::</span> <span class='hs-conid'>Generator</span> <span class='hs-varid'>c</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-layout'>(</span><span class='hs-conid'>Elem</span> <span class='hs-varid'>c</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-conid'>Bool</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-varid'>c</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-conid'>Bool</span>
+<a name="line-94"></a><span class='hs-definition'>any</span> <span class='hs-varid'>f</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>getAny</span> <span class='hs-varop'>.</span> <span class='hs-varid'>mapReduce</span> <span class='hs-varid'>f</span>
+<a name="line-95"></a>
+<a name="line-96"></a><a name="all"></a><span class='hs-comment'>-- | Efficiently 'mapReduce' any 'Generator' checking to see if all of its values match the supplied predicate</span>
+<a name="line-97"></a><span class='hs-definition'>all</span> <span class='hs-keyglyph'>::</span> <span class='hs-conid'>Generator</span> <span class='hs-varid'>c</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-layout'>(</span><span class='hs-conid'>Elem</span> <span class='hs-varid'>c</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-conid'>Bool</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-varid'>c</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-conid'>Bool</span>
+<a name="line-98"></a><span class='hs-definition'>all</span> <span class='hs-varid'>f</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>getAll</span> <span class='hs-varop'>.</span> <span class='hs-varid'>mapReduce</span> <span class='hs-varid'>f</span>
+<a name="line-99"></a>
+<a name="line-100"></a><a name="sum"></a><span class='hs-comment'>-- | Efficiently 'mapReduce' any 'Generator' using the 'Sum' 'Monoid'</span>
+<a name="line-101"></a><span class='hs-definition'>sum</span> <span class='hs-keyglyph'>::</span> <span class='hs-layout'>(</span><span class='hs-conid'>Generator</span> <span class='hs-varid'>c</span><span class='hs-layout'>,</span> <span class='hs-conid'>Num</span> <span class='hs-layout'>(</span><span class='hs-conid'>Elem</span> <span class='hs-varid'>c</span><span class='hs-layout'>)</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-varid'>c</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-conid'>Elem</span> <span class='hs-varid'>c</span>
+<a name="line-102"></a><span class='hs-definition'>sum</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>getSum</span> <span class='hs-varop'>.</span> <span class='hs-varid'>reduce</span>
+<a name="line-103"></a>
+<a name="line-104"></a><a name="product"></a><span class='hs-comment'>-- | Efficiently 'mapReduce' any 'Generator' using the 'Product' 'Monoid'</span>
+<a name="line-105"></a><span class='hs-definition'>product</span> <span class='hs-keyglyph'>::</span> <span class='hs-layout'>(</span><span class='hs-conid'>Generator</span> <span class='hs-varid'>c</span><span class='hs-layout'>,</span> <span class='hs-conid'>Num</span> <span class='hs-layout'>(</span><span class='hs-conid'>Elem</span> <span class='hs-varid'>c</span><span class='hs-layout'>)</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-varid'>c</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-conid'>Elem</span> <span class='hs-varid'>c</span>
+<a name="line-106"></a><span class='hs-definition'>product</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>getProduct</span> <span class='hs-varop'>.</span> <span class='hs-varid'>reduce</span>
+<a name="line-107"></a>
+<a name="line-108"></a><a name="elem"></a><span class='hs-comment'>-- | Check to see if 'any' member of the 'Generator' matches the supplied value</span>
+<a name="line-109"></a><span class='hs-definition'>elem</span> <span class='hs-keyglyph'>::</span> <span class='hs-layout'>(</span><span class='hs-conid'>Generator</span> <span class='hs-varid'>c</span><span class='hs-layout'>,</span> <span class='hs-conid'>Eq</span> <span class='hs-layout'>(</span><span class='hs-conid'>Elem</span> <span class='hs-varid'>c</span><span class='hs-layout'>)</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>Elem</span> <span class='hs-varid'>c</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-varid'>c</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-conid'>Bool</span>
+<a name="line-110"></a><span class='hs-definition'>elem</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>any</span> <span class='hs-varop'>.</span> <span class='hs-layout'>(</span><span class='hs-varop'>==</span><span class='hs-layout'>)</span>
+<a name="line-111"></a>
+<a name="line-112"></a><a name="notElem"></a><span class='hs-comment'>-- | Check to make sure that the supplied value is not a member of the 'Generator'</span>
+<a name="line-113"></a><span class='hs-definition'>notElem</span> <span class='hs-keyglyph'>::</span> <span class='hs-layout'>(</span><span class='hs-conid'>Generator</span> <span class='hs-varid'>c</span><span class='hs-layout'>,</span> <span class='hs-conid'>Eq</span> <span class='hs-layout'>(</span><span class='hs-conid'>Elem</span> <span class='hs-varid'>c</span><span class='hs-layout'>)</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>Elem</span> <span class='hs-varid'>c</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-varid'>c</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-conid'>Bool</span>
+<a name="line-114"></a><span class='hs-definition'>notElem</span> <span class='hs-varid'>x</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>not</span> <span class='hs-varop'>.</span> <span class='hs-varid'>elem</span> <span class='hs-varid'>x</span>
+<a name="line-115"></a>
+<a name="line-116"></a><a name="filter"></a><span class='hs-comment'>-- | Efficiently 'mapReduce' a subset of the elements in a 'Generator'</span>
+<a name="line-117"></a><span class='hs-definition'>filter</span> <span class='hs-keyglyph'>::</span> <span class='hs-layout'>(</span><span class='hs-conid'>Generator</span> <span class='hs-varid'>c</span><span class='hs-layout'>,</span> <span class='hs-conid'>Elem</span> <span class='hs-varid'>c</span> <span class='hs-varop'>`Reducer`</span> <span class='hs-varid'>m</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-layout'>(</span><span class='hs-conid'>Elem</span> <span class='hs-varid'>c</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-conid'>Bool</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-varid'>c</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-varid'>m</span>
+<a name="line-118"></a><span class='hs-definition'>filter</span> <span class='hs-varid'>p</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>foldMap</span> <span class='hs-varid'>f</span> <span class='hs-keyword'>where</span>
+<a name="line-119"></a>    <span class='hs-varid'>f</span> <span class='hs-varid'>x</span> <span class='hs-keyglyph'>|</span> <span class='hs-varid'>p</span> <span class='hs-varid'>x</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>unit</span> <span class='hs-varid'>x</span>
+<a name="line-120"></a>        <span class='hs-keyglyph'>|</span> <span class='hs-varid'>otherwise</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>mempty</span>
+<a name="line-121"></a>
+<a name="line-122"></a><a name="find"></a><span class='hs-comment'>-- | A specialization of 'filter' using the 'First' 'Monoid', analogous to 'Data.List.find'</span>
+<a name="line-123"></a><span class='hs-definition'>find</span> <span class='hs-keyglyph'>::</span> <span class='hs-conid'>Generator</span> <span class='hs-varid'>c</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-layout'>(</span><span class='hs-conid'>Elem</span> <span class='hs-varid'>c</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-conid'>Bool</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-varid'>c</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-conid'>Maybe</span> <span class='hs-layout'>(</span><span class='hs-conid'>Elem</span> <span class='hs-varid'>c</span><span class='hs-layout'>)</span>
+<a name="line-124"></a><span class='hs-definition'>find</span> <span class='hs-varid'>p</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>getFirst</span> <span class='hs-varop'>.</span> <span class='hs-varid'>filter</span> <span class='hs-varid'>p</span>
+<a name="line-125"></a>
+<a name="line-126"></a><a name="replicate"></a><span class='hs-comment'>-- | A generalization of 'Data.List.replicate' to an arbitrary 'Monoid'. Adapted from </span>
+<a name="line-127"></a><span class='hs-comment'>-- &lt;<a href="http://augustss.blogspot.com/2008/07/lost-and-found-if-i-write-108-in.html">http://augustss.blogspot.com/2008/07/lost-and-found-if-i-write-108-in.html</a>&gt;</span>
+<a name="line-128"></a><span class='hs-definition'>replicate</span> <span class='hs-keyglyph'>::</span> <span class='hs-layout'>(</span><span class='hs-conid'>Monoid</span> <span class='hs-varid'>m</span><span class='hs-layout'>,</span> <span class='hs-conid'>Integral</span> <span class='hs-varid'>n</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-varid'>m</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-varid'>n</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-varid'>m</span>
+<a name="line-129"></a><span class='hs-definition'>replicate</span> <span class='hs-varid'>x0</span> <span class='hs-varid'>y0</span> 
+<a name="line-130"></a>    <span class='hs-keyglyph'>|</span> <span class='hs-varid'>y0</span> <span class='hs-varop'>&lt;</span> <span class='hs-num'>0</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>mempty</span> <span class='hs-comment'>-- error "negative length"</span>
+<a name="line-131"></a>    <span class='hs-keyglyph'>|</span> <span class='hs-varid'>y0</span> <span class='hs-varop'>==</span> <span class='hs-num'>0</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>mempty</span>
+<a name="line-132"></a>    <span class='hs-keyglyph'>|</span> <span class='hs-varid'>otherwise</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>f</span> <span class='hs-varid'>x0</span> <span class='hs-varid'>y0</span>
+<a name="line-133"></a>    <span class='hs-keyword'>where</span>
+<a name="line-134"></a>        <span class='hs-varid'>f</span> <span class='hs-varid'>x</span> <span class='hs-varid'>y</span> 
+<a name="line-135"></a>            <span class='hs-keyglyph'>|</span> <span class='hs-varid'>even</span> <span class='hs-varid'>y</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>f</span> <span class='hs-layout'>(</span><span class='hs-varid'>x</span> <span class='hs-varop'>`mappend`</span> <span class='hs-varid'>x</span><span class='hs-layout'>)</span> <span class='hs-layout'>(</span><span class='hs-varid'>y</span> <span class='hs-varop'>`quot`</span> <span class='hs-num'>2</span><span class='hs-layout'>)</span>
+<a name="line-136"></a>            <span class='hs-keyglyph'>|</span> <span class='hs-varid'>y</span> <span class='hs-varop'>==</span> <span class='hs-num'>1</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>x</span>
+<a name="line-137"></a>            <span class='hs-keyglyph'>|</span> <span class='hs-varid'>otherwise</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>g</span> <span class='hs-layout'>(</span><span class='hs-varid'>x</span> <span class='hs-varop'>`mappend`</span> <span class='hs-varid'>x</span><span class='hs-layout'>)</span> <span class='hs-layout'>(</span><span class='hs-layout'>(</span><span class='hs-varid'>y</span> <span class='hs-comment'>-</span> <span class='hs-num'>1</span><span class='hs-layout'>)</span> <span class='hs-varop'>`quot`</span> <span class='hs-num'>2</span><span class='hs-layout'>)</span> <span class='hs-varid'>x</span>
+<a name="line-138"></a>        <span class='hs-varid'>g</span> <span class='hs-varid'>x</span> <span class='hs-varid'>y</span> <span class='hs-varid'>z</span> 
+<a name="line-139"></a>            <span class='hs-keyglyph'>|</span> <span class='hs-varid'>even</span> <span class='hs-varid'>y</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>g</span> <span class='hs-layout'>(</span><span class='hs-varid'>x</span> <span class='hs-varop'>`mappend`</span> <span class='hs-varid'>x</span><span class='hs-layout'>)</span> <span class='hs-layout'>(</span><span class='hs-varid'>y</span> <span class='hs-varop'>`quot`</span> <span class='hs-num'>2</span><span class='hs-layout'>)</span> <span class='hs-varid'>z</span>
+<a name="line-140"></a>            <span class='hs-keyglyph'>|</span> <span class='hs-varid'>y</span> <span class='hs-varop'>==</span> <span class='hs-num'>1</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>x</span> <span class='hs-varop'>`mappend`</span> <span class='hs-varid'>z</span>
+<a name="line-141"></a>            <span class='hs-keyglyph'>|</span> <span class='hs-varid'>otherwise</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>g</span> <span class='hs-layout'>(</span><span class='hs-varid'>x</span> <span class='hs-varop'>`mappend`</span> <span class='hs-varid'>x</span><span class='hs-layout'>)</span> <span class='hs-layout'>(</span><span class='hs-layout'>(</span><span class='hs-varid'>y</span> <span class='hs-comment'>-</span> <span class='hs-num'>1</span><span class='hs-layout'>)</span> <span class='hs-varop'>`quot`</span> <span class='hs-num'>2</span><span class='hs-layout'>)</span> <span class='hs-layout'>(</span><span class='hs-varid'>x</span> <span class='hs-varop'>`mappend`</span> <span class='hs-varid'>z</span><span class='hs-layout'>)</span>
+<a name="line-142"></a>
+<a name="line-143"></a><a name="cycle"></a><span class='hs-comment'>-- | A generalization of 'Data.List.cycle' to an arbitrary 'Monoid'. May fail to terminate for some values in some monoids.</span>
+<a name="line-144"></a><span class='hs-definition'>cycle</span> <span class='hs-keyglyph'>::</span> <span class='hs-conid'>Monoid</span> <span class='hs-varid'>m</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-varid'>m</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-varid'>m</span>
+<a name="line-145"></a><span class='hs-definition'>cycle</span> <span class='hs-varid'>xs</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>xs'</span> <span class='hs-keyword'>where</span> <span class='hs-varid'>xs'</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>xs</span> <span class='hs-varop'>`mappend`</span> <span class='hs-varid'>xs'</span>
+<a name="line-146"></a>
+<a name="line-147"></a><a name="repeat"></a><span class='hs-comment'>-- | A generalization of 'Data.List.repeat' to an arbitrary 'Monoid'. May fail to terminate for some values in some monoids.</span>
+<a name="line-148"></a><span class='hs-definition'>repeat</span> <span class='hs-keyglyph'>::</span> <span class='hs-layout'>(</span><span class='hs-varid'>e</span> <span class='hs-varop'>`Reducer`</span> <span class='hs-varid'>m</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-varid'>e</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-varid'>m</span> 
+<a name="line-149"></a><span class='hs-definition'>repeat</span> <span class='hs-varid'>x</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>xs</span> <span class='hs-keyword'>where</span> <span class='hs-varid'>xs</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>cons</span> <span class='hs-varid'>x</span> <span class='hs-varid'>xs</span> 
+</pre></body>
+</html>
addfile ./dist/doc/html/monoids/src/Data-Monoid-FromString.html
hunk ./dist/doc/html/monoids/src/Data-Monoid-FromString.html 1
+<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
+<html>
+<head>
+<!-- Generated by HsColour, http://www.cs.york.ac.uk/fp/darcs/hscolour/ -->
+<title>Data/Monoid/FromString.hs</title>
+<link type='text/css' rel='stylesheet' href='hscolour.css' />
+</head>
+<body>
+<pre><a name="line-1"></a><span class='hs-comment'>{-# LANGUAGE FlexibleContexts, FlexibleInstances, MultiParamTypeClasses, UndecidableInstances #-}</span>
+<a name="line-2"></a>
+<a name="line-3"></a><span class='hs-comment'>-----------------------------------------------------------------------------</span>
+<a name="line-4"></a><span class='hs-comment'>-- |</span>
+<a name="line-5"></a><span class='hs-comment'>-- Module      :  Data.Monoid.Additive</span>
+<a name="line-6"></a><span class='hs-comment'>-- Copyright   :  (c) Edward Kmett 2009</span>
+<a name="line-7"></a><span class='hs-comment'>-- License     :  BSD-style</span>
+<a name="line-8"></a><span class='hs-comment'>-- Maintainer  :  libraries@haskell.org</span>
+<a name="line-9"></a><span class='hs-comment'>-- Stability   :  experimental</span>
+<a name="line-10"></a><span class='hs-comment'>-- Portability :  non-portable (overloaded strings, MPTCs)</span>
+<a name="line-11"></a><span class='hs-comment'>--</span>
+<a name="line-12"></a><span class='hs-comment'>-- Transform any 'Char' 'Reducer' into an 'IsString' instance so it can be</span>
+<a name="line-13"></a><span class='hs-comment'>-- used directly with overloaded string literals.</span>
+<a name="line-14"></a><span class='hs-comment'>--</span>
+<a name="line-15"></a><span class='hs-comment'>-----------------------------------------------------------------------------</span>
+<a name="line-16"></a>
+<a name="line-17"></a><span class='hs-keyword'>module</span> <span class='hs-conid'>Data</span><span class='hs-varop'>.</span><span class='hs-conid'>Monoid</span><span class='hs-varop'>.</span><span class='hs-conid'>FromString</span> 
+<a name="line-18"></a>    <span class='hs-layout'>(</span> <span class='hs-keyword'>module</span> <span class='hs-conid'>Data</span><span class='hs-varop'>.</span><span class='hs-conid'>Monoid</span><span class='hs-varop'>.</span><span class='hs-conid'>Reducer</span>
+<a name="line-19"></a>    <span class='hs-layout'>,</span> <span class='hs-conid'>FromString</span><span class='hs-layout'>(</span><span class='hs-conid'>FromString</span><span class='hs-layout'>,</span><span class='hs-varid'>getFromString</span><span class='hs-layout'>)</span>
+<a name="line-20"></a>    <span class='hs-layout'>)</span> <span class='hs-keyword'>where</span>
+<a name="line-21"></a>
+<a name="line-22"></a><span class='hs-keyword'>import</span> <span class='hs-conid'>Control</span><span class='hs-varop'>.</span><span class='hs-conid'>Functor</span><span class='hs-varop'>.</span><span class='hs-conid'>Pointed</span>
+<a name="line-23"></a><span class='hs-keyword'>import</span> <span class='hs-conid'>Data</span><span class='hs-varop'>.</span><span class='hs-conid'>Monoid</span><span class='hs-varop'>.</span><span class='hs-conid'>Generator</span>
+<a name="line-24"></a><span class='hs-keyword'>import</span> <span class='hs-conid'>Data</span><span class='hs-varop'>.</span><span class='hs-conid'>Monoid</span><span class='hs-varop'>.</span><span class='hs-conid'>Reducer</span>
+<a name="line-25"></a><span class='hs-keyword'>import</span> <span class='hs-conid'>Data</span><span class='hs-varop'>.</span><span class='hs-conid'>Monoid</span><span class='hs-varop'>.</span><span class='hs-conid'>Instances</span> <span class='hs-conid'>()</span>
+<a name="line-26"></a><span class='hs-keyword'>import</span> <span class='hs-conid'>GHC</span><span class='hs-varop'>.</span><span class='hs-conid'>Exts</span>
+<a name="line-27"></a>
+<a name="line-28"></a><a name="FromString"></a><span class='hs-keyword'>data</span> <span class='hs-conid'>FromString</span> <span class='hs-varid'>m</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>FromString</span> <span class='hs-layout'>{</span> <span class='hs-varid'>getFromString</span> <span class='hs-keyglyph'>::</span> <span class='hs-varid'>m</span> <span class='hs-layout'>}</span> 
+<a name="line-29"></a>
+<a name="line-30"></a><span class='hs-keyword'>instance</span> <span class='hs-conid'>Monoid</span> <span class='hs-varid'>m</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>Monoid</span> <span class='hs-layout'>(</span><span class='hs-conid'>FromString</span> <span class='hs-varid'>m</span><span class='hs-layout'>)</span> <span class='hs-keyword'>where</span>
+<a name="line-31"></a>    <span class='hs-varid'>mempty</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>FromString</span> <span class='hs-varid'>mempty</span>
+<a name="line-32"></a>    <span class='hs-conid'>FromString</span> <span class='hs-varid'>a</span> <span class='hs-varop'>`mappend`</span> <span class='hs-conid'>FromString</span> <span class='hs-varid'>b</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>FromString</span> <span class='hs-layout'>(</span><span class='hs-varid'>a</span> <span class='hs-varop'>`mappend`</span> <span class='hs-varid'>b</span><span class='hs-layout'>)</span>
+<a name="line-33"></a>
+<a name="line-34"></a><span class='hs-keyword'>instance</span> <span class='hs-layout'>(</span><span class='hs-conid'>Char</span> <span class='hs-varop'>`Reducer`</span> <span class='hs-varid'>m</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>Reducer</span> <span class='hs-conid'>Char</span> <span class='hs-layout'>(</span><span class='hs-conid'>FromString</span> <span class='hs-varid'>m</span><span class='hs-layout'>)</span> <span class='hs-keyword'>where</span>
+<a name="line-35"></a>    <span class='hs-varid'>unit</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>FromString</span> <span class='hs-varop'>.</span> <span class='hs-varid'>unit</span>
+<a name="line-36"></a>
+<a name="line-37"></a><span class='hs-keyword'>instance</span> <span class='hs-layout'>(</span><span class='hs-conid'>Char</span> <span class='hs-varop'>`Reducer`</span> <span class='hs-varid'>m</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>IsString</span> <span class='hs-layout'>(</span><span class='hs-conid'>FromString</span> <span class='hs-varid'>m</span><span class='hs-layout'>)</span> <span class='hs-keyword'>where</span>
+<a name="line-38"></a>    <span class='hs-varid'>fromString</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>FromString</span> <span class='hs-varop'>.</span> <span class='hs-varid'>reduce</span>
+<a name="line-39"></a>
+<a name="line-40"></a><span class='hs-keyword'>instance</span> <span class='hs-conid'>Pointed</span> <span class='hs-conid'>FromString</span> <span class='hs-keyword'>where</span>
+<a name="line-41"></a>    <span class='hs-varid'>point</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>FromString</span>
+<a name="line-42"></a>
+<a name="line-43"></a><span class='hs-keyword'>instance</span> <span class='hs-conid'>Copointed</span> <span class='hs-conid'>FromString</span> <span class='hs-keyword'>where</span>
+<a name="line-44"></a>    <span class='hs-varid'>extract</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>getFromString</span>
+<a name="line-45"></a>
+<a name="line-46"></a><span class='hs-keyword'>instance</span> <span class='hs-conid'>Functor</span> <span class='hs-conid'>FromString</span> <span class='hs-keyword'>where</span>
+<a name="line-47"></a>    <span class='hs-varid'>fmap</span> <span class='hs-varid'>f</span> <span class='hs-layout'>(</span><span class='hs-conid'>FromString</span> <span class='hs-varid'>x</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>FromString</span> <span class='hs-layout'>(</span><span class='hs-varid'>f</span> <span class='hs-varid'>x</span><span class='hs-layout'>)</span>
+</pre></body>
+</html>
addfile ./dist/doc/html/monoids/src/Data-Monoid-Generator.html
hunk ./dist/doc/html/monoids/src/Data-Monoid-Generator.html 1
+<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
+<html>
+<head>
+<!-- Generated by HsColour, http://www.cs.york.ac.uk/fp/darcs/hscolour/ -->
+<title>Data/Monoid/Generator.hs</title>
+<link type='text/css' rel='stylesheet' href='hscolour.css' />
+</head>
+<body>
+<pre><a name="line-1"></a><span class='hs-comment'>{-# LANGUAGE UndecidableInstances, TypeOperators, FlexibleContexts, MultiParamTypeClasses, FlexibleInstances, TypeFamilies #-}</span>
+<a name="line-2"></a>
+<a name="line-3"></a><span class='hs-comment'>-----------------------------------------------------------------------------</span>
+<a name="line-4"></a><span class='hs-comment'>-- |</span>
+<a name="line-5"></a><span class='hs-comment'>-- Module      :  Data.Monoid.Generator</span>
+<a name="line-6"></a><span class='hs-comment'>-- Copyright   :  (c) Edward Kmett 2009</span>
+<a name="line-7"></a><span class='hs-comment'>-- License     :  BSD-style</span>
+<a name="line-8"></a><span class='hs-comment'>-- Maintainer  :  libraries@haskell.org</span>
+<a name="line-9"></a><span class='hs-comment'>-- Stability   :  experimental</span>
+<a name="line-10"></a><span class='hs-comment'>-- Portability :  portable</span>
+<a name="line-11"></a><span class='hs-comment'>--</span>
+<a name="line-12"></a><span class='hs-comment'>-- A 'Generator' @c@ is a possibly-specialized container, which contains values of </span>
+<a name="line-13"></a><span class='hs-comment'>-- type 'Elem' @c@, and which knows how to efficiently apply a 'Reducer' to extract</span>
+<a name="line-14"></a><span class='hs-comment'>-- an answer.</span>
+<a name="line-15"></a><span class='hs-comment'>--</span>
+<a name="line-16"></a><span class='hs-comment'>-- Since a 'Generator' is not polymorphic in its contents, it is more specialized</span>
+<a name="line-17"></a><span class='hs-comment'>-- than "Data.Foldable.Foldable", and a 'Reducer' may supply efficient left-to-right</span>
+<a name="line-18"></a><span class='hs-comment'>-- and right-to-left reduction strategies that a 'Generator' may avail itself of.</span>
+<a name="line-19"></a><span class='hs-comment'>-----------------------------------------------------------------------------</span>
+<a name="line-20"></a>
+<a name="line-21"></a><span class='hs-keyword'>module</span> <span class='hs-conid'>Data</span><span class='hs-varop'>.</span><span class='hs-conid'>Monoid</span><span class='hs-varop'>.</span><span class='hs-conid'>Generator</span>
+<a name="line-22"></a>    <span class='hs-layout'>(</span> <span class='hs-keyword'>module</span> <span class='hs-conid'>Data</span><span class='hs-varop'>.</span><span class='hs-conid'>Monoid</span><span class='hs-varop'>.</span><span class='hs-conid'>Reducer</span>
+<a name="line-23"></a>    <span class='hs-layout'>,</span> <span class='hs-conid'>Generator</span>
+<a name="line-24"></a>    <span class='hs-layout'>,</span> <span class='hs-conid'>Elem</span>
+<a name="line-25"></a>    <span class='hs-layout'>,</span> <span class='hs-varid'>mapReduce</span>
+<a name="line-26"></a>    <span class='hs-layout'>,</span> <span class='hs-varid'>mapTo</span>
+<a name="line-27"></a>    <span class='hs-layout'>,</span> <span class='hs-varid'>mapFrom</span>
+<a name="line-28"></a>    <span class='hs-layout'>,</span> <span class='hs-varid'>reduce</span>
+<a name="line-29"></a>    <span class='hs-layout'>,</span> <span class='hs-conid'>Keys</span><span class='hs-layout'>(</span><span class='hs-conid'>Keys</span><span class='hs-layout'>,</span> <span class='hs-varid'>getKeys</span><span class='hs-layout'>)</span>
+<a name="line-30"></a>    <span class='hs-layout'>,</span> <span class='hs-conid'>Values</span><span class='hs-layout'>(</span><span class='hs-conid'>Values</span><span class='hs-layout'>,</span> <span class='hs-varid'>getValues</span><span class='hs-layout'>)</span>
+<a name="line-31"></a>    <span class='hs-layout'>,</span> <span class='hs-conid'>Char8</span><span class='hs-layout'>(</span><span class='hs-conid'>Char8</span><span class='hs-layout'>,</span> <span class='hs-varid'>getChar8</span><span class='hs-layout'>)</span>
+<a name="line-32"></a>    <span class='hs-layout'>)</span> <span class='hs-keyword'>where</span>
+<a name="line-33"></a>
+<a name="line-34"></a><span class='hs-keyword'>import</span> <span class='hs-conid'>Data</span><span class='hs-varop'>.</span><span class='hs-conid'>Array</span> 
+<a name="line-35"></a><span class='hs-keyword'>import</span> <span class='hs-conid'>Data</span><span class='hs-varop'>.</span><span class='hs-conid'>Word</span> <span class='hs-layout'>(</span><span class='hs-conid'>Word8</span><span class='hs-layout'>)</span>
+<a name="line-36"></a><span class='hs-keyword'>import</span> <span class='hs-conid'>Data</span><span class='hs-varop'>.</span><span class='hs-conid'>Text</span> <span class='hs-layout'>(</span><span class='hs-conid'>Text</span><span class='hs-layout'>)</span>
+<a name="line-37"></a><span class='hs-keyword'>import</span> <span class='hs-conid'>Data</span><span class='hs-varop'>.</span><span class='hs-conid'>Foldable</span> <span class='hs-layout'>(</span><span class='hs-varid'>fold</span><span class='hs-layout'>,</span><span class='hs-varid'>foldMap</span><span class='hs-layout'>)</span>
+<a name="line-38"></a><span class='hs-keyword'>import</span> <span class='hs-keyword'>qualified</span> <span class='hs-conid'>Data</span><span class='hs-varop'>.</span><span class='hs-conid'>Text</span> <span class='hs-keyword'>as</span> <span class='hs-conid'>Text</span>
+<a name="line-39"></a><span class='hs-keyword'>import</span> <span class='hs-keyword'>qualified</span> <span class='hs-conid'>Data</span><span class='hs-varop'>.</span><span class='hs-conid'>ByteString</span> <span class='hs-keyword'>as</span> <span class='hs-conid'>Strict</span> <span class='hs-layout'>(</span><span class='hs-conid'>ByteString</span><span class='hs-layout'>,</span> <span class='hs-varid'>foldl'</span><span class='hs-layout'>)</span>
+<a name="line-40"></a><span class='hs-keyword'>import</span> <span class='hs-keyword'>qualified</span> <span class='hs-conid'>Data</span><span class='hs-varop'>.</span><span class='hs-conid'>ByteString</span><span class='hs-varop'>.</span><span class='hs-conid'>Char8</span> <span class='hs-keyword'>as</span> <span class='hs-conid'>Strict8</span> <span class='hs-layout'>(</span><span class='hs-varid'>foldl'</span><span class='hs-layout'>)</span>
+<a name="line-41"></a><span class='hs-keyword'>import</span> <span class='hs-keyword'>qualified</span> <span class='hs-conid'>Data</span><span class='hs-varop'>.</span><span class='hs-conid'>ByteString</span><span class='hs-varop'>.</span><span class='hs-conid'>Lazy</span> <span class='hs-keyword'>as</span> <span class='hs-conid'>Lazy</span> <span class='hs-layout'>(</span><span class='hs-conid'>ByteString</span><span class='hs-layout'>,</span> <span class='hs-varid'>toChunks</span><span class='hs-layout'>)</span>
+<a name="line-42"></a><span class='hs-keyword'>import</span> <span class='hs-keyword'>qualified</span> <span class='hs-conid'>Data</span><span class='hs-varop'>.</span><span class='hs-conid'>ByteString</span><span class='hs-varop'>.</span><span class='hs-conid'>Lazy</span><span class='hs-varop'>.</span><span class='hs-conid'>Char8</span> <span class='hs-keyword'>as</span> <span class='hs-conid'>Lazy8</span> <span class='hs-layout'>(</span><span class='hs-varid'>toChunks</span><span class='hs-layout'>)</span>
+<a name="line-43"></a><span class='hs-keyword'>import</span> <span class='hs-keyword'>qualified</span> <span class='hs-conid'>Data</span><span class='hs-varop'>.</span><span class='hs-conid'>Sequence</span> <span class='hs-keyword'>as</span> <span class='hs-conid'>Seq</span>
+<a name="line-44"></a><span class='hs-keyword'>import</span> <span class='hs-conid'>Data</span><span class='hs-varop'>.</span><span class='hs-conid'>FingerTree</span> <span class='hs-layout'>(</span><span class='hs-conid'>Measured</span><span class='hs-layout'>,</span> <span class='hs-conid'>FingerTree</span><span class='hs-layout'>)</span>
+<a name="line-45"></a><span class='hs-keyword'>import</span> <span class='hs-conid'>Data</span><span class='hs-varop'>.</span><span class='hs-conid'>Sequence</span> <span class='hs-layout'>(</span><span class='hs-conid'>Seq</span><span class='hs-layout'>)</span>
+<a name="line-46"></a><span class='hs-keyword'>import</span> <span class='hs-keyword'>qualified</span> <span class='hs-conid'>Data</span><span class='hs-varop'>.</span><span class='hs-conid'>Set</span> <span class='hs-keyword'>as</span> <span class='hs-conid'>Set</span>
+<a name="line-47"></a><span class='hs-keyword'>import</span> <span class='hs-conid'>Data</span><span class='hs-varop'>.</span><span class='hs-conid'>Set</span> <span class='hs-layout'>(</span><span class='hs-conid'>Set</span><span class='hs-layout'>)</span>
+<a name="line-48"></a><span class='hs-keyword'>import</span> <span class='hs-keyword'>qualified</span> <span class='hs-conid'>Data</span><span class='hs-varop'>.</span><span class='hs-conid'>IntSet</span> <span class='hs-keyword'>as</span> <span class='hs-conid'>IntSet</span>
+<a name="line-49"></a><span class='hs-keyword'>import</span> <span class='hs-conid'>Data</span><span class='hs-varop'>.</span><span class='hs-conid'>IntSet</span> <span class='hs-layout'>(</span><span class='hs-conid'>IntSet</span><span class='hs-layout'>)</span>
+<a name="line-50"></a><span class='hs-keyword'>import</span> <span class='hs-keyword'>qualified</span> <span class='hs-conid'>Data</span><span class='hs-varop'>.</span><span class='hs-conid'>IntMap</span> <span class='hs-keyword'>as</span> <span class='hs-conid'>IntMap</span>
+<a name="line-51"></a><span class='hs-keyword'>import</span> <span class='hs-conid'>Data</span><span class='hs-varop'>.</span><span class='hs-conid'>IntMap</span> <span class='hs-layout'>(</span><span class='hs-conid'>IntMap</span><span class='hs-layout'>)</span>
+<a name="line-52"></a><span class='hs-keyword'>import</span> <span class='hs-keyword'>qualified</span> <span class='hs-conid'>Data</span><span class='hs-varop'>.</span><span class='hs-conid'>Map</span> <span class='hs-keyword'>as</span> <span class='hs-conid'>Map</span>
+<a name="line-53"></a><span class='hs-keyword'>import</span> <span class='hs-conid'>Data</span><span class='hs-varop'>.</span><span class='hs-conid'>Map</span> <span class='hs-layout'>(</span><span class='hs-conid'>Map</span><span class='hs-layout'>)</span>
+<a name="line-54"></a>
+<a name="line-55"></a><span class='hs-keyword'>import</span> <span class='hs-conid'>Control</span><span class='hs-varop'>.</span><span class='hs-conid'>Parallel</span><span class='hs-varop'>.</span><span class='hs-conid'>Strategies</span>
+<a name="line-56"></a><span class='hs-keyword'>import</span> <span class='hs-conid'>Data</span><span class='hs-varop'>.</span><span class='hs-conid'>Monoid</span><span class='hs-varop'>.</span><span class='hs-conid'>Reducer</span>
+<a name="line-57"></a>
+<a name="line-58"></a><span class='hs-comment'>-- | minimal definition 'mapReduce' or 'mapTo'</span>
+<a name="line-59"></a><span class='hs-keyword'>class</span> <span class='hs-conid'>Generator</span> <span class='hs-varid'>c</span> <span class='hs-keyword'>where</span>
+<a name="line-60"></a>    <span class='hs-keyword'>type</span> <span class='hs-conid'>Elem</span> <span class='hs-varid'>c</span> <span class='hs-keyglyph'>::</span> <span class='hs-varop'>*</span> 
+<a name="line-61"></a>    <span class='hs-varid'>mapReduce</span> <span class='hs-keyglyph'>::</span> <span class='hs-layout'>(</span><span class='hs-varid'>e</span> <span class='hs-varop'>`Reducer`</span> <span class='hs-varid'>m</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-layout'>(</span><span class='hs-conid'>Elem</span> <span class='hs-varid'>c</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-varid'>e</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-varid'>c</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-varid'>m</span>
+<a name="line-62"></a>    <span class='hs-varid'>mapTo</span>     <span class='hs-keyglyph'>::</span> <span class='hs-layout'>(</span><span class='hs-varid'>e</span> <span class='hs-varop'>`Reducer`</span> <span class='hs-varid'>m</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-layout'>(</span><span class='hs-conid'>Elem</span> <span class='hs-varid'>c</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-varid'>e</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-varid'>m</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-varid'>c</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-varid'>m</span> 
+<a name="line-63"></a>    <span class='hs-varid'>mapFrom</span>   <span class='hs-keyglyph'>::</span> <span class='hs-layout'>(</span><span class='hs-varid'>e</span> <span class='hs-varop'>`Reducer`</span> <span class='hs-varid'>m</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-layout'>(</span><span class='hs-conid'>Elem</span> <span class='hs-varid'>c</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-varid'>e</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-varid'>c</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-varid'>m</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-varid'>m</span>
+<a name="line-64"></a>
+<a name="line-65"></a>    <span class='hs-varid'>mapReduce</span> <span class='hs-varid'>f</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>mapTo</span> <span class='hs-varid'>f</span> <span class='hs-varid'>mempty</span>
+<a name="line-66"></a>    <span class='hs-varid'>mapTo</span> <span class='hs-varid'>f</span> <span class='hs-varid'>m</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>mappend</span> <span class='hs-varid'>m</span> <span class='hs-varop'>.</span> <span class='hs-varid'>mapReduce</span> <span class='hs-varid'>f</span>
+<a name="line-67"></a>    <span class='hs-varid'>mapFrom</span> <span class='hs-varid'>f</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>mappend</span> <span class='hs-varop'>.</span> <span class='hs-varid'>mapReduce</span> <span class='hs-varid'>f</span>
+<a name="line-68"></a>
+<a name="line-69"></a><span class='hs-keyword'>instance</span> <span class='hs-conid'>Generator</span> <span class='hs-conid'>Strict</span><span class='hs-varop'>.</span><span class='hs-conid'>ByteString</span> <span class='hs-keyword'>where</span>
+<a name="line-70"></a>    <span class='hs-keyword'>type</span> <span class='hs-conid'>Elem</span> <span class='hs-conid'>Strict</span><span class='hs-varop'>.</span><span class='hs-conid'>ByteString</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>Word8</span>
+<a name="line-71"></a>    <span class='hs-varid'>mapTo</span> <span class='hs-varid'>f</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>Strict</span><span class='hs-varop'>.</span><span class='hs-varid'>foldl'</span> <span class='hs-layout'>(</span><span class='hs-keyglyph'>\</span><span class='hs-varid'>a</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-varid'>snoc</span> <span class='hs-varid'>a</span> <span class='hs-varop'>.</span> <span class='hs-varid'>f</span><span class='hs-layout'>)</span>
+<a name="line-72"></a>
+<a name="line-73"></a><span class='hs-keyword'>instance</span> <span class='hs-conid'>Generator</span> <span class='hs-conid'>Lazy</span><span class='hs-varop'>.</span><span class='hs-conid'>ByteString</span> <span class='hs-keyword'>where</span>
+<a name="line-74"></a>    <span class='hs-keyword'>type</span> <span class='hs-conid'>Elem</span> <span class='hs-conid'>Lazy</span><span class='hs-varop'>.</span><span class='hs-conid'>ByteString</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>Word8</span>
+<a name="line-75"></a>    <span class='hs-varid'>mapReduce</span> <span class='hs-varid'>f</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>fold</span> <span class='hs-varop'>.</span> <span class='hs-varid'>parMap</span> <span class='hs-varid'>rwhnf</span> <span class='hs-layout'>(</span><span class='hs-varid'>mapReduce</span> <span class='hs-varid'>f</span><span class='hs-layout'>)</span> <span class='hs-varop'>.</span> <span class='hs-conid'>Lazy</span><span class='hs-varop'>.</span><span class='hs-varid'>toChunks</span>
+<a name="line-76"></a>
+<a name="line-77"></a><span class='hs-keyword'>instance</span> <span class='hs-conid'>Generator</span> <span class='hs-conid'>Text</span> <span class='hs-keyword'>where</span>
+<a name="line-78"></a>    <span class='hs-keyword'>type</span> <span class='hs-conid'>Elem</span> <span class='hs-conid'>Text</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>Char</span>
+<a name="line-79"></a>    <span class='hs-varid'>mapTo</span> <span class='hs-varid'>f</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>Text</span><span class='hs-varop'>.</span><span class='hs-varid'>foldl'</span> <span class='hs-layout'>(</span><span class='hs-keyglyph'>\</span><span class='hs-varid'>a</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-varid'>snoc</span> <span class='hs-varid'>a</span> <span class='hs-varop'>.</span> <span class='hs-varid'>f</span><span class='hs-layout'>)</span>
+<a name="line-80"></a>
+<a name="line-81"></a><span class='hs-keyword'>instance</span> <span class='hs-conid'>Generator</span> <span class='hs-keyglyph'>[</span><span class='hs-varid'>c</span><span class='hs-keyglyph'>]</span> <span class='hs-keyword'>where</span>
+<a name="line-82"></a>    <span class='hs-keyword'>type</span> <span class='hs-conid'>Elem</span> <span class='hs-keyglyph'>[</span><span class='hs-varid'>c</span><span class='hs-keyglyph'>]</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>c</span>
+<a name="line-83"></a>    <span class='hs-varid'>mapReduce</span> <span class='hs-varid'>f</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>foldMap</span> <span class='hs-layout'>(</span><span class='hs-varid'>unit</span> <span class='hs-varop'>.</span> <span class='hs-varid'>f</span><span class='hs-layout'>)</span>
+<a name="line-84"></a>
+<a name="line-85"></a><span class='hs-keyword'>instance</span> <span class='hs-conid'>Measured</span> <span class='hs-varid'>v</span> <span class='hs-varid'>e</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>Generator</span> <span class='hs-layout'>(</span><span class='hs-conid'>FingerTree</span> <span class='hs-varid'>v</span> <span class='hs-varid'>e</span><span class='hs-layout'>)</span> <span class='hs-keyword'>where</span>
+<a name="line-86"></a>    <span class='hs-keyword'>type</span> <span class='hs-conid'>Elem</span> <span class='hs-layout'>(</span><span class='hs-conid'>FingerTree</span> <span class='hs-varid'>v</span> <span class='hs-varid'>e</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>e</span>
+<a name="line-87"></a>    <span class='hs-varid'>mapReduce</span> <span class='hs-varid'>f</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>foldMap</span> <span class='hs-layout'>(</span><span class='hs-varid'>unit</span> <span class='hs-varop'>.</span> <span class='hs-varid'>f</span><span class='hs-layout'>)</span>
+<a name="line-88"></a>
+<a name="line-89"></a><span class='hs-keyword'>instance</span> <span class='hs-conid'>Generator</span> <span class='hs-layout'>(</span><span class='hs-conid'>Seq</span> <span class='hs-varid'>c</span><span class='hs-layout'>)</span> <span class='hs-keyword'>where</span>
+<a name="line-90"></a>    <span class='hs-keyword'>type</span> <span class='hs-conid'>Elem</span> <span class='hs-layout'>(</span><span class='hs-conid'>Seq</span> <span class='hs-varid'>c</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>c</span>
+<a name="line-91"></a>    <span class='hs-varid'>mapReduce</span> <span class='hs-varid'>f</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>foldMap</span> <span class='hs-layout'>(</span><span class='hs-varid'>unit</span> <span class='hs-varop'>.</span> <span class='hs-varid'>f</span><span class='hs-layout'>)</span>
+<a name="line-92"></a>
+<a name="line-93"></a><span class='hs-keyword'>instance</span> <span class='hs-conid'>Generator</span> <span class='hs-conid'>IntSet</span> <span class='hs-keyword'>where</span>
+<a name="line-94"></a>    <span class='hs-keyword'>type</span> <span class='hs-conid'>Elem</span> <span class='hs-conid'>IntSet</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>Int</span>
+<a name="line-95"></a>    <span class='hs-varid'>mapReduce</span> <span class='hs-varid'>f</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>mapReduce</span> <span class='hs-varid'>f</span> <span class='hs-varop'>.</span> <span class='hs-conid'>IntSet</span><span class='hs-varop'>.</span><span class='hs-varid'>toList</span>
+<a name="line-96"></a>
+<a name="line-97"></a><span class='hs-keyword'>instance</span> <span class='hs-conid'>Generator</span> <span class='hs-layout'>(</span><span class='hs-conid'>Set</span> <span class='hs-varid'>a</span><span class='hs-layout'>)</span> <span class='hs-keyword'>where</span>
+<a name="line-98"></a>    <span class='hs-keyword'>type</span> <span class='hs-conid'>Elem</span> <span class='hs-layout'>(</span><span class='hs-conid'>Set</span> <span class='hs-varid'>a</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>a</span>
+<a name="line-99"></a>    <span class='hs-varid'>mapReduce</span> <span class='hs-varid'>f</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>mapReduce</span> <span class='hs-varid'>f</span> <span class='hs-varop'>.</span> <span class='hs-conid'>Set</span><span class='hs-varop'>.</span><span class='hs-varid'>toList</span>
+<a name="line-100"></a>
+<a name="line-101"></a><span class='hs-keyword'>instance</span> <span class='hs-conid'>Generator</span> <span class='hs-layout'>(</span><span class='hs-conid'>IntMap</span> <span class='hs-varid'>v</span><span class='hs-layout'>)</span> <span class='hs-keyword'>where</span>
+<a name="line-102"></a>    <span class='hs-keyword'>type</span> <span class='hs-conid'>Elem</span> <span class='hs-layout'>(</span><span class='hs-conid'>IntMap</span> <span class='hs-varid'>v</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=</span> <span class='hs-layout'>(</span><span class='hs-conid'>Int</span><span class='hs-layout'>,</span><span class='hs-varid'>v</span><span class='hs-layout'>)</span>
+<a name="line-103"></a>    <span class='hs-varid'>mapReduce</span> <span class='hs-varid'>f</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>mapReduce</span> <span class='hs-varid'>f</span> <span class='hs-varop'>.</span> <span class='hs-conid'>IntMap</span><span class='hs-varop'>.</span><span class='hs-varid'>toList</span>
+<a name="line-104"></a>
+<a name="line-105"></a><span class='hs-keyword'>instance</span> <span class='hs-conid'>Generator</span> <span class='hs-layout'>(</span><span class='hs-conid'>Map</span> <span class='hs-varid'>k</span> <span class='hs-varid'>v</span><span class='hs-layout'>)</span> <span class='hs-keyword'>where</span>
+<a name="line-106"></a>    <span class='hs-keyword'>type</span> <span class='hs-conid'>Elem</span> <span class='hs-layout'>(</span><span class='hs-conid'>Map</span> <span class='hs-varid'>k</span> <span class='hs-varid'>v</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=</span> <span class='hs-layout'>(</span><span class='hs-varid'>k</span><span class='hs-layout'>,</span><span class='hs-varid'>v</span><span class='hs-layout'>)</span> 
+<a name="line-107"></a>    <span class='hs-varid'>mapReduce</span> <span class='hs-varid'>f</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>mapReduce</span> <span class='hs-varid'>f</span> <span class='hs-varop'>.</span> <span class='hs-conid'>Map</span><span class='hs-varop'>.</span><span class='hs-varid'>toList</span>
+<a name="line-108"></a>
+<a name="line-109"></a><span class='hs-keyword'>instance</span> <span class='hs-conid'>Ix</span> <span class='hs-varid'>i</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>Generator</span> <span class='hs-layout'>(</span><span class='hs-conid'>Array</span> <span class='hs-varid'>i</span> <span class='hs-varid'>e</span><span class='hs-layout'>)</span> <span class='hs-keyword'>where</span>
+<a name="line-110"></a>    <span class='hs-keyword'>type</span> <span class='hs-conid'>Elem</span> <span class='hs-layout'>(</span><span class='hs-conid'>Array</span> <span class='hs-varid'>i</span> <span class='hs-varid'>e</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=</span> <span class='hs-layout'>(</span><span class='hs-varid'>i</span><span class='hs-layout'>,</span><span class='hs-varid'>e</span><span class='hs-layout'>)</span>
+<a name="line-111"></a>    <span class='hs-varid'>mapReduce</span> <span class='hs-varid'>f</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>mapReduce</span> <span class='hs-varid'>f</span> <span class='hs-varop'>.</span> <span class='hs-varid'>assocs</span>
+<a name="line-112"></a>
+<a name="line-113"></a><a name="Keys"></a><span class='hs-comment'>-- | a 'Generator' transformer that asks only for the keys of an indexed container</span>
+<a name="line-114"></a><a name="Keys"></a><span class='hs-keyword'>newtype</span> <span class='hs-conid'>Keys</span> <span class='hs-varid'>c</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>Keys</span> <span class='hs-layout'>{</span> <span class='hs-varid'>getKeys</span> <span class='hs-keyglyph'>::</span> <span class='hs-varid'>c</span> <span class='hs-layout'>}</span> 
+<a name="line-115"></a>
+<a name="line-116"></a><span class='hs-keyword'>instance</span> <span class='hs-conid'>Generator</span> <span class='hs-layout'>(</span><span class='hs-conid'>Keys</span> <span class='hs-layout'>(</span><span class='hs-conid'>IntMap</span> <span class='hs-varid'>v</span><span class='hs-layout'>)</span><span class='hs-layout'>)</span> <span class='hs-keyword'>where</span>
+<a name="line-117"></a>    <span class='hs-keyword'>type</span> <span class='hs-conid'>Elem</span> <span class='hs-layout'>(</span><span class='hs-conid'>Keys</span> <span class='hs-layout'>(</span><span class='hs-conid'>IntMap</span> <span class='hs-varid'>v</span><span class='hs-layout'>)</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>Int</span>
+<a name="line-118"></a>    <span class='hs-varid'>mapReduce</span> <span class='hs-varid'>f</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>mapReduce</span> <span class='hs-varid'>f</span> <span class='hs-varop'>.</span> <span class='hs-conid'>IntMap</span><span class='hs-varop'>.</span><span class='hs-varid'>keys</span> <span class='hs-varop'>.</span> <span class='hs-varid'>getKeys</span>
+<a name="line-119"></a>
+<a name="line-120"></a><span class='hs-keyword'>instance</span> <span class='hs-conid'>Generator</span> <span class='hs-layout'>(</span><span class='hs-conid'>Keys</span> <span class='hs-layout'>(</span><span class='hs-conid'>Map</span> <span class='hs-varid'>k</span> <span class='hs-varid'>v</span><span class='hs-layout'>)</span><span class='hs-layout'>)</span> <span class='hs-keyword'>where</span>
+<a name="line-121"></a>    <span class='hs-keyword'>type</span> <span class='hs-conid'>Elem</span> <span class='hs-layout'>(</span><span class='hs-conid'>Keys</span> <span class='hs-layout'>(</span><span class='hs-conid'>Map</span> <span class='hs-varid'>k</span> <span class='hs-varid'>v</span><span class='hs-layout'>)</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>k</span>
+<a name="line-122"></a>    <span class='hs-varid'>mapReduce</span> <span class='hs-varid'>f</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>mapReduce</span> <span class='hs-varid'>f</span> <span class='hs-varop'>.</span> <span class='hs-conid'>Map</span><span class='hs-varop'>.</span><span class='hs-varid'>keys</span> <span class='hs-varop'>.</span> <span class='hs-varid'>getKeys</span>
+<a name="line-123"></a>
+<a name="line-124"></a><span class='hs-keyword'>instance</span> <span class='hs-conid'>Ix</span> <span class='hs-varid'>i</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>Generator</span> <span class='hs-layout'>(</span><span class='hs-conid'>Keys</span> <span class='hs-layout'>(</span><span class='hs-conid'>Array</span> <span class='hs-varid'>i</span> <span class='hs-varid'>e</span><span class='hs-layout'>)</span><span class='hs-layout'>)</span> <span class='hs-keyword'>where</span>
+<a name="line-125"></a>    <span class='hs-keyword'>type</span> <span class='hs-conid'>Elem</span> <span class='hs-layout'>(</span><span class='hs-conid'>Keys</span> <span class='hs-layout'>(</span><span class='hs-conid'>Array</span> <span class='hs-varid'>i</span> <span class='hs-varid'>e</span><span class='hs-layout'>)</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>i</span>
+<a name="line-126"></a>    <span class='hs-varid'>mapReduce</span> <span class='hs-varid'>f</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>mapReduce</span> <span class='hs-varid'>f</span> <span class='hs-varop'>.</span> <span class='hs-varid'>range</span> <span class='hs-varop'>.</span> <span class='hs-varid'>bounds</span> <span class='hs-varop'>.</span> <span class='hs-varid'>getKeys</span>
+<a name="line-127"></a>
+<a name="line-128"></a><a name="Values"></a><span class='hs-comment'>-- | a 'Generator' transformer that asks only for the values contained in an indexed container</span>
+<a name="line-129"></a><a name="Values"></a><span class='hs-keyword'>newtype</span> <span class='hs-conid'>Values</span> <span class='hs-varid'>c</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>Values</span> <span class='hs-layout'>{</span> <span class='hs-varid'>getValues</span> <span class='hs-keyglyph'>::</span> <span class='hs-varid'>c</span> <span class='hs-layout'>}</span> 
+<a name="line-130"></a>
+<a name="line-131"></a><span class='hs-keyword'>instance</span> <span class='hs-conid'>Generator</span> <span class='hs-layout'>(</span><span class='hs-conid'>Values</span> <span class='hs-layout'>(</span><span class='hs-conid'>IntMap</span> <span class='hs-varid'>v</span><span class='hs-layout'>)</span><span class='hs-layout'>)</span> <span class='hs-keyword'>where</span>
+<a name="line-132"></a>    <span class='hs-keyword'>type</span> <span class='hs-conid'>Elem</span> <span class='hs-layout'>(</span><span class='hs-conid'>Values</span> <span class='hs-layout'>(</span><span class='hs-conid'>IntMap</span> <span class='hs-varid'>v</span><span class='hs-layout'>)</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>v</span>
+<a name="line-133"></a>    <span class='hs-varid'>mapReduce</span> <span class='hs-varid'>f</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>mapReduce</span> <span class='hs-varid'>f</span> <span class='hs-varop'>.</span> <span class='hs-conid'>IntMap</span><span class='hs-varop'>.</span><span class='hs-varid'>elems</span> <span class='hs-varop'>.</span> <span class='hs-varid'>getValues</span>
+<a name="line-134"></a>
+<a name="line-135"></a><span class='hs-keyword'>instance</span> <span class='hs-conid'>Generator</span> <span class='hs-layout'>(</span><span class='hs-conid'>Values</span> <span class='hs-layout'>(</span><span class='hs-conid'>Map</span> <span class='hs-varid'>k</span> <span class='hs-varid'>v</span><span class='hs-layout'>)</span><span class='hs-layout'>)</span> <span class='hs-keyword'>where</span>
+<a name="line-136"></a>    <span class='hs-keyword'>type</span> <span class='hs-conid'>Elem</span> <span class='hs-layout'>(</span><span class='hs-conid'>Values</span> <span class='hs-layout'>(</span><span class='hs-conid'>Map</span> <span class='hs-varid'>k</span> <span class='hs-varid'>v</span><span class='hs-layout'>)</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>v</span>
+<a name="line-137"></a>    <span class='hs-varid'>mapReduce</span> <span class='hs-varid'>f</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>mapReduce</span> <span class='hs-varid'>f</span> <span class='hs-varop'>.</span> <span class='hs-conid'>Map</span><span class='hs-varop'>.</span><span class='hs-varid'>elems</span> <span class='hs-varop'>.</span> <span class='hs-varid'>getValues</span>
+<a name="line-138"></a>
+<a name="line-139"></a><span class='hs-keyword'>instance</span> <span class='hs-conid'>Ix</span> <span class='hs-varid'>i</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>Generator</span> <span class='hs-layout'>(</span><span class='hs-conid'>Values</span> <span class='hs-layout'>(</span><span class='hs-conid'>Array</span> <span class='hs-varid'>i</span> <span class='hs-varid'>e</span><span class='hs-layout'>)</span><span class='hs-layout'>)</span> <span class='hs-keyword'>where</span>
+<a name="line-140"></a>    <span class='hs-keyword'>type</span> <span class='hs-conid'>Elem</span> <span class='hs-layout'>(</span><span class='hs-conid'>Values</span> <span class='hs-layout'>(</span><span class='hs-conid'>Array</span> <span class='hs-varid'>i</span> <span class='hs-varid'>e</span><span class='hs-layout'>)</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>e</span>
+<a name="line-141"></a>    <span class='hs-varid'>mapReduce</span> <span class='hs-varid'>f</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>mapReduce</span> <span class='hs-varid'>f</span> <span class='hs-varop'>.</span> <span class='hs-varid'>elems</span> <span class='hs-varop'>.</span> <span class='hs-varid'>getValues</span>
+<a name="line-142"></a>
+<a name="line-143"></a><a name="Char8"></a><span class='hs-comment'>-- | a 'Generator' transformer that treats 'Word8' as 'Char'</span>
+<a name="line-144"></a><a name="Char8"></a><span class='hs-comment'>-- This lets you use a 'ByteString' as a 'Char' source without going through a 'Monoid' transformer like 'UTF8'</span>
+<a name="line-145"></a><a name="Char8"></a><span class='hs-keyword'>newtype</span> <span class='hs-conid'>Char8</span> <span class='hs-varid'>c</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>Char8</span> <span class='hs-layout'>{</span> <span class='hs-varid'>getChar8</span> <span class='hs-keyglyph'>::</span> <span class='hs-varid'>c</span> <span class='hs-layout'>}</span> 
+<a name="line-146"></a>
+<a name="line-147"></a><span class='hs-keyword'>instance</span> <span class='hs-conid'>Generator</span> <span class='hs-layout'>(</span><span class='hs-conid'>Char8</span> <span class='hs-conid'>Strict</span><span class='hs-varop'>.</span><span class='hs-conid'>ByteString</span><span class='hs-layout'>)</span> <span class='hs-keyword'>where</span>
+<a name="line-148"></a>    <span class='hs-keyword'>type</span> <span class='hs-conid'>Elem</span> <span class='hs-layout'>(</span><span class='hs-conid'>Char8</span> <span class='hs-conid'>Strict</span><span class='hs-varop'>.</span><span class='hs-conid'>ByteString</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>Char</span>
+<a name="line-149"></a>    <span class='hs-varid'>mapTo</span> <span class='hs-varid'>f</span> <span class='hs-varid'>m</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>Strict8</span><span class='hs-varop'>.</span><span class='hs-varid'>foldl'</span> <span class='hs-layout'>(</span><span class='hs-keyglyph'>\</span><span class='hs-varid'>a</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-varid'>snoc</span> <span class='hs-varid'>a</span> <span class='hs-varop'>.</span> <span class='hs-varid'>f</span><span class='hs-layout'>)</span> <span class='hs-varid'>m</span> <span class='hs-varop'>.</span> <span class='hs-varid'>getChar8</span>
+<a name="line-150"></a>
+<a name="line-151"></a><span class='hs-keyword'>instance</span> <span class='hs-conid'>Generator</span> <span class='hs-layout'>(</span><span class='hs-conid'>Char8</span> <span class='hs-conid'>Lazy</span><span class='hs-varop'>.</span><span class='hs-conid'>ByteString</span><span class='hs-layout'>)</span> <span class='hs-keyword'>where</span>
+<a name="line-152"></a>    <span class='hs-keyword'>type</span> <span class='hs-conid'>Elem</span> <span class='hs-layout'>(</span><span class='hs-conid'>Char8</span> <span class='hs-conid'>Lazy</span><span class='hs-varop'>.</span><span class='hs-conid'>ByteString</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>Char</span>
+<a name="line-153"></a>    <span class='hs-varid'>mapReduce</span> <span class='hs-varid'>f</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>fold</span> <span class='hs-varop'>.</span> <span class='hs-varid'>parMap</span> <span class='hs-varid'>rwhnf</span> <span class='hs-layout'>(</span><span class='hs-varid'>mapReduce</span> <span class='hs-varid'>f</span> <span class='hs-varop'>.</span> <span class='hs-conid'>Char8</span><span class='hs-layout'>)</span> <span class='hs-varop'>.</span> <span class='hs-conid'>Lazy8</span><span class='hs-varop'>.</span><span class='hs-varid'>toChunks</span> <span class='hs-varop'>.</span> <span class='hs-varid'>getChar8</span>
+<a name="line-154"></a>
+<a name="line-155"></a><a name="reduce"></a><span class='hs-comment'>{-# SPECIALIZE reduce :: (Word8 `Reducer` m) =&gt; Strict.ByteString -&gt; m #-}</span>
+<a name="line-156"></a><span class='hs-comment'>{-# SPECIALIZE reduce :: (Word8 `Reducer` m) =&gt; Lazy.ByteString -&gt; m #-}</span>
+<a name="line-157"></a><span class='hs-comment'>{-# SPECIALIZE reduce :: (Char `Reducer` m) =&gt; Char8 Strict.ByteString -&gt; m #-}</span>
+<a name="line-158"></a><span class='hs-comment'>{-# SPECIALIZE reduce :: (Char `Reducer` m) =&gt; Char8 Lazy.ByteString -&gt; m #-}</span>
+<a name="line-159"></a><span class='hs-comment'>{-# SPECIALIZE reduce :: (c `Reducer` m) =&gt; [c] -&gt; m #-}</span>
+<a name="line-160"></a><span class='hs-comment'>{-# SPECIALIZE reduce :: (Generator (FingerTree v e), e `Reducer` m) =&gt; FingerTree v e -&gt; m #-}</span>
+<a name="line-161"></a><span class='hs-comment'>{-# SPECIALIZE reduce :: (Char `Reducer` m) =&gt; Text -&gt; m #-}</span>
+<a name="line-162"></a><span class='hs-comment'>{-# SPECIALIZE reduce :: (e `Reducer` m) =&gt; Seq e -&gt; m #-}</span>
+<a name="line-163"></a><span class='hs-comment'>{-# SPECIALIZE reduce :: (Int `Reducer` m) =&gt; IntSet -&gt; m #-}</span>
+<a name="line-164"></a><span class='hs-comment'>{-# SPECIALIZE reduce :: (a `Reducer` m) =&gt; Set a -&gt; m #-}</span>
+<a name="line-165"></a><span class='hs-comment'>{-# SPECIALIZE reduce :: ((Int,v) `Reducer` m) =&gt; IntMap v -&gt; m #-}</span>
+<a name="line-166"></a><span class='hs-comment'>{-# SPECIALIZE reduce :: ((k,v) `Reducer` m) =&gt; Map k v -&gt; m #-}</span>
+<a name="line-167"></a><span class='hs-comment'>{-# SPECIALIZE reduce :: (Int `Reducer` m) =&gt; Keys (IntMap v) -&gt; m #-}</span>
+<a name="line-168"></a><span class='hs-comment'>{-# SPECIALIZE reduce :: (k `Reducer` m) =&gt; Keys (Map k v) -&gt; m #-}</span>
+<a name="line-169"></a><span class='hs-comment'>{-# SPECIALIZE reduce :: (v `Reducer` m) =&gt; Values (IntMap v) -&gt; m #-}</span>
+<a name="line-170"></a><span class='hs-comment'>{-# SPECIALIZE reduce :: (v `Reducer` m) =&gt; Values (Map k v) -&gt; m #-}</span>
+<a name="line-171"></a><span class='hs-comment'>-- | Apply a 'Reducer' directly to the elements of a 'Generator'</span>
+<a name="line-172"></a><span class='hs-definition'>reduce</span> <span class='hs-keyglyph'>::</span> <span class='hs-layout'>(</span><span class='hs-conid'>Generator</span> <span class='hs-varid'>c</span><span class='hs-layout'>,</span> <span class='hs-conid'>Elem</span> <span class='hs-varid'>c</span> <span class='hs-varop'>`Reducer`</span> <span class='hs-varid'>m</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-varid'>c</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-varid'>m</span>
+<a name="line-173"></a><span class='hs-definition'>reduce</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>mapReduce</span> <span class='hs-varid'>id</span>
+</pre></body>
+</html>
addfile ./dist/doc/html/monoids/src/Data-Monoid-Lexical-RunLengthEncoding.html
hunk ./dist/doc/html/monoids/src/Data-Monoid-Lexical-RunLengthEncoding.html 1
+<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
+<html>
+<head>
+<!-- Generated by HsColour, http://www.cs.york.ac.uk/fp/darcs/hscolour/ -->
+<title>Data/Monoid/Lexical/RunLengthEncoding.hs</title>
+<link type='text/css' rel='stylesheet' href='hscolour.css' />
+</head>
+<body>
+<pre><a name="line-1"></a><span class='hs-comment'>{-# LANGUAGE FlexibleInstances, MultiParamTypeClasses #-}</span>
+<a name="line-2"></a>
+<a name="line-3"></a><span class='hs-comment'>-----------------------------------------------------------------------------</span>
+<a name="line-4"></a><span class='hs-comment'>-- |</span>
+<a name="line-5"></a><span class='hs-comment'>-- Module      :  Data.Monoid.Lexical.RunLengthEncoding</span>
+<a name="line-6"></a><span class='hs-comment'>-- Copyright   :  (c) Edward Kmett 2009</span>
+<a name="line-7"></a><span class='hs-comment'>-- License     :  BSD-style</span>
+<a name="line-8"></a><span class='hs-comment'>-- Maintainer  :  libraries@haskell.org</span>
+<a name="line-9"></a><span class='hs-comment'>-- Stability   :  experimental</span>
+<a name="line-10"></a><span class='hs-comment'>-- Portability :  non-portable (MPTCs)</span>
+<a name="line-11"></a><span class='hs-comment'>--</span>
+<a name="line-12"></a><span class='hs-comment'>-- A simple 'Monoid' transformer that turns any monoidal 'Reducer' into a</span>
+<a name="line-13"></a><span class='hs-comment'>-- a reducer that expects to be supplied both a run length @n@ with each item</span>
+<a name="line-14"></a><span class='hs-comment'>-- and which efficiently exponentiates the result of 'unit' @n@ times through </span>
+<a name="line-15"></a><span class='hs-comment'>-- 'replicate'.</span>
+<a name="line-16"></a><span class='hs-comment'>--</span>
+<a name="line-17"></a><span class='hs-comment'>-----------------------------------------------------------------------------</span>
+<a name="line-18"></a>
+<a name="line-19"></a><span class='hs-keyword'>module</span> <span class='hs-conid'>Data</span><span class='hs-varop'>.</span><span class='hs-conid'>Monoid</span><span class='hs-varop'>.</span><span class='hs-conid'>Lexical</span><span class='hs-varop'>.</span><span class='hs-conid'>RunLengthEncoding</span> 
+<a name="line-20"></a>    <span class='hs-layout'>(</span> <span class='hs-keyword'>module</span> <span class='hs-conid'>Data</span><span class='hs-varop'>.</span><span class='hs-conid'>Monoid</span><span class='hs-varop'>.</span><span class='hs-conid'>Reducer</span>
+<a name="line-21"></a>    <span class='hs-layout'>,</span> <span class='hs-conid'>RLE</span><span class='hs-layout'>(</span><span class='hs-conid'>RLE</span><span class='hs-layout'>,</span><span class='hs-varid'>getRLE</span><span class='hs-layout'>)</span> 
+<a name="line-22"></a>    <span class='hs-layout'>)</span> <span class='hs-keyword'>where</span>
+<a name="line-23"></a>
+<a name="line-24"></a><span class='hs-keyword'>import</span> <span class='hs-conid'>Prelude</span> <span class='hs-varid'>hiding</span> <span class='hs-layout'>(</span><span class='hs-varid'>replicate</span><span class='hs-layout'>)</span>
+<a name="line-25"></a><span class='hs-keyword'>import</span> <span class='hs-conid'>Data</span><span class='hs-varop'>.</span><span class='hs-conid'>Monoid</span><span class='hs-varop'>.</span><span class='hs-conid'>Reducer</span>
+<a name="line-26"></a><span class='hs-keyword'>import</span> <span class='hs-conid'>Data</span><span class='hs-varop'>.</span><span class='hs-conid'>Monoid</span><span class='hs-varop'>.</span><span class='hs-conid'>Combinators</span> <span class='hs-layout'>(</span><span class='hs-varid'>replicate</span><span class='hs-layout'>)</span>
+<a name="line-27"></a>
+<a name="line-28"></a><a name="RLE"></a><span class='hs-keyword'>newtype</span> <span class='hs-conid'>RLE</span> <span class='hs-varid'>n</span> <span class='hs-varid'>m</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>RLE</span> <span class='hs-layout'>{</span> <span class='hs-varid'>getRLE</span> <span class='hs-keyglyph'>::</span> <span class='hs-varid'>m</span> <span class='hs-layout'>}</span> 
+<a name="line-29"></a>
+<a name="line-30"></a><span class='hs-keyword'>instance</span> <span class='hs-layout'>(</span><span class='hs-conid'>Integral</span> <span class='hs-varid'>n</span><span class='hs-layout'>,</span> <span class='hs-conid'>Monoid</span> <span class='hs-varid'>m</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>Monoid</span> <span class='hs-layout'>(</span><span class='hs-conid'>RLE</span> <span class='hs-varid'>n</span> <span class='hs-varid'>m</span><span class='hs-layout'>)</span> <span class='hs-keyword'>where</span>
+<a name="line-31"></a>    <span class='hs-varid'>mempty</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>RLE</span> <span class='hs-varid'>mempty</span>
+<a name="line-32"></a>    <span class='hs-conid'>RLE</span> <span class='hs-varid'>a</span> <span class='hs-varop'>`mappend`</span> <span class='hs-conid'>RLE</span> <span class='hs-varid'>b</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>RLE</span> <span class='hs-layout'>(</span><span class='hs-varid'>a</span> <span class='hs-varop'>`mappend`</span> <span class='hs-varid'>b</span><span class='hs-layout'>)</span>
+<a name="line-33"></a>
+<a name="line-34"></a><span class='hs-keyword'>instance</span> <span class='hs-layout'>(</span><span class='hs-conid'>Integral</span> <span class='hs-varid'>n</span><span class='hs-layout'>,</span> <span class='hs-conid'>Reducer</span> <span class='hs-varid'>c</span> <span class='hs-varid'>m</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>Reducer</span> <span class='hs-layout'>(</span><span class='hs-varid'>n</span><span class='hs-layout'>,</span><span class='hs-varid'>c</span><span class='hs-layout'>)</span> <span class='hs-layout'>(</span><span class='hs-conid'>RLE</span> <span class='hs-varid'>n</span> <span class='hs-varid'>m</span><span class='hs-layout'>)</span> <span class='hs-keyword'>where</span>
+<a name="line-35"></a>    <span class='hs-varid'>unit</span> <span class='hs-keyglyph'>~</span><span class='hs-layout'>(</span><span class='hs-varid'>n</span><span class='hs-layout'>,</span><span class='hs-varid'>c</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>RLE</span> <span class='hs-varop'>$</span> <span class='hs-varid'>replicate</span> <span class='hs-layout'>(</span><span class='hs-varid'>unit</span> <span class='hs-varid'>c</span><span class='hs-layout'>)</span> <span class='hs-varid'>n</span>
+</pre></body>
+</html>
addfile ./dist/doc/html/monoids/src/Data-Monoid-Lexical-SourcePosition.html
hunk ./dist/doc/html/monoids/src/Data-Monoid-Lexical-SourcePosition.html 1
+<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
+<html>
+<head>
+<!-- Generated by HsColour, http://www.cs.york.ac.uk/fp/darcs/hscolour/ -->
+<title>Data/Monoid/Lexical/SourcePosition.hs</title>
+<link type='text/css' rel='stylesheet' href='hscolour.css' />
+</head>
+<body>
+<pre><a name="line-1"></a><span class='hs-comment'>{-# LANGUAGE FlexibleInstances, MultiParamTypeClasses, OverloadedStrings #-}</span>
+<a name="line-2"></a>
+<a name="line-3"></a><span class='hs-comment'>-----------------------------------------------------------------------------</span>
+<a name="line-4"></a><span class='hs-comment'>-- |</span>
+<a name="line-5"></a><span class='hs-comment'>-- Module      :  Data.Monoid.Lexical.SourcePosition</span>
+<a name="line-6"></a><span class='hs-comment'>-- Copyright   :  (c) Edward Kmett 2009</span>
+<a name="line-7"></a><span class='hs-comment'>-- License     :  BSD-style</span>
+<a name="line-8"></a><span class='hs-comment'>-- Maintainer  :  libraries@haskell.org</span>
+<a name="line-9"></a><span class='hs-comment'>-- Stability   :  experimental</span>
+<a name="line-10"></a><span class='hs-comment'>-- Portability :  non-portable (MPTCs, OverloadedStrings)</span>
+<a name="line-11"></a><span class='hs-comment'>--</span>
+<a name="line-12"></a><span class='hs-comment'>-- Incrementally determine locations in a source file through local information</span>
+<a name="line-13"></a><span class='hs-comment'>-- This allows for efficient recomputation of line #s and token locations</span>
+<a name="line-14"></a><span class='hs-comment'>-- while the file is being interactively updated by storing this as a supplemental</span>
+<a name="line-15"></a><span class='hs-comment'>-- measure on a 'FingerTree'.</span>
+<a name="line-16"></a><span class='hs-comment'>--</span>
+<a name="line-17"></a><span class='hs-comment'>-- The general idea is to use this as part of a measure in a 'FingerTree' so you can</span>
+<a name="line-18"></a><span class='hs-comment'>-- use `mappend` to prepend a 'startOfFile' with the file information.</span>
+<a name="line-19"></a><span class='hs-comment'>-----------------------------------------------------------------------------</span>
+<a name="line-20"></a>
+<a name="line-21"></a><span class='hs-keyword'>module</span> <span class='hs-conid'>Data</span><span class='hs-varop'>.</span><span class='hs-conid'>Monoid</span><span class='hs-varop'>.</span><span class='hs-conid'>Lexical</span><span class='hs-varop'>.</span><span class='hs-conid'>SourcePosition</span>
+<a name="line-22"></a>    <span class='hs-layout'>(</span> <span class='hs-keyword'>module</span> <span class='hs-conid'>Data</span><span class='hs-varop'>.</span><span class='hs-conid'>Monoid</span><span class='hs-varop'>.</span><span class='hs-conid'>Reducer</span><span class='hs-varop'>.</span><span class='hs-conid'>Char</span>
+<a name="line-23"></a>    <span class='hs-layout'>,</span> <span class='hs-varid'>nextTab</span>
+<a name="line-24"></a>    <span class='hs-layout'>,</span> <span class='hs-conid'>SourcePosition</span>
+<a name="line-25"></a>    <span class='hs-layout'>,</span> <span class='hs-conid'>SourceLine</span>
+<a name="line-26"></a>    <span class='hs-layout'>,</span> <span class='hs-conid'>SourceColumn</span>
+<a name="line-27"></a>    <span class='hs-layout'>,</span> <span class='hs-varid'>sourceLine</span>
+<a name="line-28"></a>    <span class='hs-layout'>,</span> <span class='hs-varid'>sourceColumn</span>
+<a name="line-29"></a>    <span class='hs-layout'>,</span> <span class='hs-varid'>startOfFile</span>
+<a name="line-30"></a>    <span class='hs-layout'>,</span> <span class='hs-varid'>showSourcePosition</span>
+<a name="line-31"></a>    <span class='hs-layout'>)</span> <span class='hs-keyword'>where</span>
+<a name="line-32"></a>
+<a name="line-33"></a><span class='hs-keyword'>import</span> <span class='hs-conid'>Prelude</span> <span class='hs-varid'>hiding</span> <span class='hs-layout'>(</span><span class='hs-varid'>lex</span><span class='hs-layout'>)</span>
+<a name="line-34"></a><span class='hs-keyword'>import</span> <span class='hs-conid'>Control</span><span class='hs-varop'>.</span><span class='hs-conid'>Functor</span><span class='hs-varop'>.</span><span class='hs-conid'>Extras</span>
+<a name="line-35"></a><span class='hs-keyword'>import</span> <span class='hs-conid'>Control</span><span class='hs-varop'>.</span><span class='hs-conid'>Functor</span><span class='hs-varop'>.</span><span class='hs-conid'>Pointed</span>
+<a name="line-36"></a><span class='hs-keyword'>import</span> <span class='hs-conid'>Data</span><span class='hs-varop'>.</span><span class='hs-conid'>Monoid</span><span class='hs-varop'>.</span><span class='hs-conid'>Reducer</span><span class='hs-varop'>.</span><span class='hs-conid'>Char</span>
+<a name="line-37"></a><span class='hs-keyword'>import</span> <span class='hs-conid'>Data</span><span class='hs-varop'>.</span><span class='hs-conid'>Monoid</span><span class='hs-varop'>.</span><span class='hs-conid'>Generator</span>
+<a name="line-38"></a><span class='hs-keyword'>import</span> <span class='hs-conid'>Data</span><span class='hs-varop'>.</span><span class='hs-conid'>String</span>
+<a name="line-39"></a>
+<a name="line-40"></a><a name="SourceLine"></a><span class='hs-keyword'>type</span> <span class='hs-conid'>SourceLine</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>Int</span>
+<a name="line-41"></a><a name="SourceColumn"></a><span class='hs-keyword'>type</span> <span class='hs-conid'>SourceColumn</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>Int</span>
+<a name="line-42"></a>
+<a name="line-43"></a><a name="SourcePosition"></a><span class='hs-comment'>-- | A 'Monoid' of partial information about locations in a source file.</span>
+<a name="line-44"></a><a name="SourcePosition"></a><span class='hs-comment'>--   This is polymorphic in the kind of information you want to maintain about each source file.</span>
+<a name="line-45"></a><a name="SourcePosition"></a><span class='hs-keyword'>data</span> <span class='hs-conid'>SourcePosition</span> <span class='hs-varid'>file</span> 
+<a name="line-46"></a>        <span class='hs-keyglyph'>=</span> <span class='hs-conid'>Pos</span> <span class='hs-varid'>file</span> <span class='hs-comment'>{-# UNPACK #-}</span> <span class='hs-varop'>!</span><span class='hs-conid'>SourceLine</span> <span class='hs-varop'>!</span><span class='hs-conid'>SourceColumn</span> <span class='hs-comment'>-- ^ An absolute position in a file is known, or an overriding #line directive has been seen</span>
+<a name="line-47"></a>        <span class='hs-keyglyph'>|</span> <span class='hs-conid'>Lines</span> <span class='hs-comment'>{-# UNPACK #-}</span> <span class='hs-varop'>!</span><span class='hs-conid'>SourceLine</span> <span class='hs-varop'>!</span><span class='hs-conid'>SourceColumn</span>    <span class='hs-comment'>-- ^ We've seen some carriage returns.</span>
+<a name="line-48"></a>        <span class='hs-keyglyph'>|</span> <span class='hs-conid'>Columns</span> <span class='hs-comment'>{-# UNPACK #-}</span> <span class='hs-varop'>!</span><span class='hs-conid'>SourceColumn</span>              <span class='hs-comment'>-- ^ We've only seen part of a line.</span>
+<a name="line-49"></a>        <span class='hs-keyglyph'>|</span> <span class='hs-conid'>Tab</span> <span class='hs-comment'>{-# UNPACK #-}</span> <span class='hs-varop'>!</span><span class='hs-conid'>SourceColumn</span> <span class='hs-varop'>!</span><span class='hs-conid'>SourceColumn</span>    <span class='hs-comment'>-- ^ We have an unhandled tab to deal with.</span>
+<a name="line-50"></a>    <span class='hs-keyword'>deriving</span> <span class='hs-layout'>(</span><span class='hs-conid'>Read</span><span class='hs-layout'>,</span><span class='hs-conid'>Show</span><span class='hs-layout'>,</span><span class='hs-conid'>Eq</span><span class='hs-layout'>)</span>
+<a name="line-51"></a>
+<a name="line-52"></a><a name="nextTab"></a><span class='hs-comment'>-- | Compute the location of the next standard 8-column aligned tab</span>
+<a name="line-53"></a><span class='hs-definition'>nextTab</span> <span class='hs-keyglyph'>::</span> <span class='hs-conid'>Int</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-conid'>Int</span>
+<a name="line-54"></a><span class='hs-definition'>nextTab</span> <span class='hs-varid'>x</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>x</span> <span class='hs-varop'>+</span> <span class='hs-layout'>(</span><span class='hs-num'>8</span> <span class='hs-comment'>-</span> <span class='hs-layout'>(</span><span class='hs-varid'>x</span><span class='hs-comment'>-</span><span class='hs-num'>1</span><span class='hs-layout'>)</span> <span class='hs-varop'>`mod`</span> <span class='hs-num'>8</span><span class='hs-layout'>)</span>
+<a name="line-55"></a>
+<a name="line-56"></a><span class='hs-keyword'>instance</span> <span class='hs-conid'>Functor</span> <span class='hs-conid'>SourcePosition</span> <span class='hs-keyword'>where</span>
+<a name="line-57"></a>    <span class='hs-varid'>fmap</span> <span class='hs-varid'>g</span> <span class='hs-layout'>(</span><span class='hs-conid'>Pos</span> <span class='hs-varid'>f</span> <span class='hs-varid'>l</span> <span class='hs-varid'>c</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>Pos</span> <span class='hs-layout'>(</span><span class='hs-varid'>g</span> <span class='hs-varid'>f</span><span class='hs-layout'>)</span> <span class='hs-varid'>l</span> <span class='hs-varid'>c</span>
+<a name="line-58"></a>    <span class='hs-varid'>fmap</span> <span class='hs-keyword'>_</span> <span class='hs-layout'>(</span><span class='hs-conid'>Lines</span> <span class='hs-varid'>l</span> <span class='hs-varid'>c</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>Lines</span> <span class='hs-varid'>l</span> <span class='hs-varid'>c</span>
+<a name="line-59"></a>    <span class='hs-varid'>fmap</span> <span class='hs-keyword'>_</span> <span class='hs-layout'>(</span><span class='hs-conid'>Columns</span> <span class='hs-varid'>c</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>Columns</span> <span class='hs-varid'>c</span>
+<a name="line-60"></a>    <span class='hs-varid'>fmap</span> <span class='hs-keyword'>_</span> <span class='hs-layout'>(</span><span class='hs-conid'>Tab</span> <span class='hs-varid'>x</span> <span class='hs-varid'>y</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>Tab</span> <span class='hs-varid'>x</span> <span class='hs-varid'>y</span>
+<a name="line-61"></a>
+<a name="line-62"></a><span class='hs-keyword'>instance</span> <span class='hs-conid'>Pointed</span> <span class='hs-conid'>SourcePosition</span> <span class='hs-keyword'>where</span>
+<a name="line-63"></a>    <span class='hs-varid'>point</span> <span class='hs-varid'>f</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>Pos</span> <span class='hs-varid'>f</span> <span class='hs-num'>1</span> <span class='hs-num'>1</span>
+<a name="line-64"></a>
+<a name="line-65"></a><span class='hs-keyword'>instance</span> <span class='hs-conid'>FunctorZero</span> <span class='hs-conid'>SourcePosition</span> <span class='hs-keyword'>where</span>
+<a name="line-66"></a>    <span class='hs-varid'>fzero</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>mempty</span>
+<a name="line-67"></a>
+<a name="line-68"></a><span class='hs-keyword'>instance</span> <span class='hs-conid'>FunctorPlus</span> <span class='hs-conid'>SourcePosition</span> <span class='hs-keyword'>where</span>
+<a name="line-69"></a>    <span class='hs-varid'>fplus</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>mappend</span>
+<a name="line-70"></a>
+<a name="line-71"></a><span class='hs-keyword'>instance</span> <span class='hs-conid'>IsString</span> <span class='hs-layout'>(</span><span class='hs-conid'>SourcePosition</span> <span class='hs-varid'>file</span><span class='hs-layout'>)</span> <span class='hs-keyword'>where</span>
+<a name="line-72"></a>    <span class='hs-varid'>fromString</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>reduce</span>
+<a name="line-73"></a>
+<a name="line-74"></a><span class='hs-comment'>-- accumulate partial information</span>
+<a name="line-75"></a><span class='hs-keyword'>instance</span> <span class='hs-conid'>Monoid</span> <span class='hs-layout'>(</span><span class='hs-conid'>SourcePosition</span> <span class='hs-varid'>file</span><span class='hs-layout'>)</span> <span class='hs-keyword'>where</span>
+<a name="line-76"></a>    <span class='hs-varid'>mempty</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>Columns</span> <span class='hs-num'>0</span>
+<a name="line-77"></a>
+<a name="line-78"></a>    <span class='hs-conid'>Pos</span> <span class='hs-varid'>f</span> <span class='hs-varid'>l</span> <span class='hs-keyword'>_</span> <span class='hs-varop'>`mappend`</span> <span class='hs-conid'>Lines</span> <span class='hs-varid'>m</span> <span class='hs-varid'>d</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>Pos</span> <span class='hs-varid'>f</span> <span class='hs-layout'>(</span><span class='hs-varid'>l</span> <span class='hs-varop'>+</span> <span class='hs-varid'>m</span><span class='hs-layout'>)</span> <span class='hs-varid'>d</span>
+<a name="line-79"></a>    <span class='hs-conid'>Pos</span> <span class='hs-varid'>f</span> <span class='hs-varid'>l</span> <span class='hs-varid'>c</span> <span class='hs-varop'>`mappend`</span> <span class='hs-conid'>Columns</span> <span class='hs-varid'>d</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>Pos</span> <span class='hs-varid'>f</span> <span class='hs-varid'>l</span> <span class='hs-layout'>(</span><span class='hs-varid'>c</span> <span class='hs-varop'>+</span> <span class='hs-varid'>d</span><span class='hs-layout'>)</span>
+<a name="line-80"></a>    <span class='hs-conid'>Pos</span> <span class='hs-varid'>f</span> <span class='hs-varid'>l</span> <span class='hs-varid'>c</span> <span class='hs-varop'>`mappend`</span> <span class='hs-conid'>Tab</span> <span class='hs-varid'>x</span> <span class='hs-varid'>y</span>   <span class='hs-keyglyph'>=</span> <span class='hs-conid'>Pos</span> <span class='hs-varid'>f</span> <span class='hs-varid'>l</span> <span class='hs-layout'>(</span><span class='hs-varid'>nextTab</span> <span class='hs-layout'>(</span><span class='hs-varid'>c</span> <span class='hs-varop'>+</span> <span class='hs-varid'>x</span><span class='hs-layout'>)</span> <span class='hs-varop'>+</span> <span class='hs-varid'>y</span><span class='hs-layout'>)</span>
+<a name="line-81"></a>    <span class='hs-conid'>Lines</span> <span class='hs-varid'>l</span> <span class='hs-keyword'>_</span> <span class='hs-varop'>`mappend`</span> <span class='hs-conid'>Lines</span> <span class='hs-varid'>m</span> <span class='hs-varid'>d</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>Lines</span> <span class='hs-layout'>(</span><span class='hs-varid'>l</span> <span class='hs-varop'>+</span> <span class='hs-varid'>m</span><span class='hs-layout'>)</span> <span class='hs-varid'>d</span>
+<a name="line-82"></a>    <span class='hs-conid'>Lines</span> <span class='hs-varid'>l</span> <span class='hs-varid'>c</span> <span class='hs-varop'>`mappend`</span> <span class='hs-conid'>Columns</span> <span class='hs-varid'>d</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>Lines</span> <span class='hs-varid'>l</span> <span class='hs-layout'>(</span><span class='hs-varid'>c</span> <span class='hs-varop'>+</span> <span class='hs-varid'>d</span><span class='hs-layout'>)</span>
+<a name="line-83"></a>    <span class='hs-conid'>Lines</span> <span class='hs-varid'>l</span> <span class='hs-varid'>c</span> <span class='hs-varop'>`mappend`</span> <span class='hs-conid'>Tab</span> <span class='hs-varid'>x</span> <span class='hs-varid'>y</span>   <span class='hs-keyglyph'>=</span> <span class='hs-conid'>Lines</span> <span class='hs-varid'>l</span> <span class='hs-layout'>(</span><span class='hs-varid'>nextTab</span> <span class='hs-layout'>(</span><span class='hs-varid'>c</span> <span class='hs-varop'>+</span> <span class='hs-varid'>x</span><span class='hs-layout'>)</span> <span class='hs-varop'>+</span> <span class='hs-varid'>y</span><span class='hs-layout'>)</span>
+<a name="line-84"></a>    <span class='hs-conid'>Columns</span> <span class='hs-varid'>c</span> <span class='hs-varop'>`mappend`</span> <span class='hs-conid'>Columns</span> <span class='hs-varid'>d</span>  <span class='hs-keyglyph'>=</span> <span class='hs-conid'>Columns</span> <span class='hs-layout'>(</span><span class='hs-varid'>c</span> <span class='hs-varop'>+</span> <span class='hs-varid'>d</span><span class='hs-layout'>)</span>
+<a name="line-85"></a>    <span class='hs-conid'>Columns</span> <span class='hs-varid'>c</span> <span class='hs-varop'>`mappend`</span> <span class='hs-conid'>Tab</span> <span class='hs-varid'>x</span> <span class='hs-varid'>y</span>    <span class='hs-keyglyph'>=</span> <span class='hs-conid'>Tab</span> <span class='hs-layout'>(</span><span class='hs-varid'>c</span> <span class='hs-varop'>+</span> <span class='hs-varid'>x</span><span class='hs-layout'>)</span> <span class='hs-varid'>y</span>
+<a name="line-86"></a>    <span class='hs-conid'>Tab</span> <span class='hs-keyword'>_</span> <span class='hs-keyword'>_</span>   <span class='hs-varop'>`mappend`</span> <span class='hs-conid'>Lines</span> <span class='hs-varid'>m</span> <span class='hs-varid'>d</span>  <span class='hs-keyglyph'>=</span> <span class='hs-conid'>Lines</span> <span class='hs-varid'>m</span> <span class='hs-varid'>d</span>
+<a name="line-87"></a>    <span class='hs-conid'>Tab</span> <span class='hs-varid'>x</span> <span class='hs-varid'>y</span>   <span class='hs-varop'>`mappend`</span> <span class='hs-conid'>Columns</span> <span class='hs-varid'>d</span>  <span class='hs-keyglyph'>=</span> <span class='hs-conid'>Tab</span> <span class='hs-varid'>x</span> <span class='hs-layout'>(</span><span class='hs-varid'>y</span> <span class='hs-varop'>+</span> <span class='hs-varid'>d</span><span class='hs-layout'>)</span>
+<a name="line-88"></a>    <span class='hs-conid'>Tab</span> <span class='hs-varid'>x</span> <span class='hs-varid'>y</span>   <span class='hs-varop'>`mappend`</span> <span class='hs-conid'>Tab</span> <span class='hs-varid'>x'</span> <span class='hs-varid'>y'</span>  <span class='hs-keyglyph'>=</span> <span class='hs-conid'>Tab</span> <span class='hs-varid'>x</span> <span class='hs-layout'>(</span><span class='hs-varid'>nextTab</span> <span class='hs-layout'>(</span><span class='hs-varid'>y</span> <span class='hs-varop'>+</span> <span class='hs-varid'>x'</span><span class='hs-layout'>)</span> <span class='hs-varop'>+</span> <span class='hs-varid'>y'</span><span class='hs-layout'>)</span>
+<a name="line-89"></a>    <span class='hs-keyword'>_</span>         <span class='hs-varop'>`mappend`</span> <span class='hs-varid'>pos</span>        <span class='hs-keyglyph'>=</span> <span class='hs-varid'>pos</span>
+<a name="line-90"></a>
+<a name="line-91"></a><span class='hs-keyword'>instance</span> <span class='hs-conid'>Reducer</span> <span class='hs-conid'>Char</span> <span class='hs-layout'>(</span><span class='hs-conid'>SourcePosition</span> <span class='hs-varid'>file</span><span class='hs-layout'>)</span> <span class='hs-keyword'>where</span>
+<a name="line-92"></a>    <span class='hs-varid'>unit</span> <span class='hs-chr'>'\n'</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>Lines</span> <span class='hs-num'>1</span> <span class='hs-num'>1</span>
+<a name="line-93"></a>    <span class='hs-varid'>unit</span> <span class='hs-chr'>'\t'</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>Tab</span> <span class='hs-num'>0</span> <span class='hs-num'>0</span> 
+<a name="line-94"></a>    <span class='hs-varid'>unit</span> <span class='hs-keyword'>_</span>    <span class='hs-keyglyph'>=</span> <span class='hs-conid'>Columns</span> <span class='hs-num'>1</span>
+<a name="line-95"></a>
+<a name="line-96"></a><span class='hs-comment'>-- Indicate that we ignore invalid characters to the UTF8 parser</span>
+<a name="line-97"></a><span class='hs-keyword'>instance</span> <span class='hs-conid'>CharReducer</span> <span class='hs-layout'>(</span><span class='hs-conid'>SourcePosition</span> <span class='hs-varid'>file</span><span class='hs-layout'>)</span>
+<a name="line-98"></a>    
+<a name="line-99"></a><a name="startOfFile"></a><span class='hs-comment'>-- | lift information about a source file into a starting 'SourcePosition' for that file</span>
+<a name="line-100"></a><span class='hs-definition'>startOfFile</span> <span class='hs-keyglyph'>::</span> <span class='hs-varid'>f</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-conid'>SourcePosition</span> <span class='hs-varid'>f</span>
+<a name="line-101"></a><span class='hs-definition'>startOfFile</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>point</span>
+<a name="line-102"></a>
+<a name="line-103"></a><a name="sourceColumn"></a><span class='hs-comment'>-- | extract partial information about the current column, even in the absence of knowledge of the source file</span>
+<a name="line-104"></a><span class='hs-definition'>sourceColumn</span> <span class='hs-keyglyph'>::</span> <span class='hs-conid'>SourcePosition</span> <span class='hs-varid'>f</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-conid'>Maybe</span> <span class='hs-conid'>SourceColumn</span>
+<a name="line-105"></a><span class='hs-definition'>sourceColumn</span> <span class='hs-layout'>(</span><span class='hs-conid'>Pos</span> <span class='hs-keyword'>_</span> <span class='hs-keyword'>_</span> <span class='hs-varid'>c</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>Just</span> <span class='hs-varid'>c</span>
+<a name="line-106"></a><span class='hs-definition'>sourceColumn</span> <span class='hs-layout'>(</span><span class='hs-conid'>Lines</span> <span class='hs-keyword'>_</span> <span class='hs-varid'>c</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>Just</span> <span class='hs-varid'>c</span>
+<a name="line-107"></a><span class='hs-definition'>sourceColumn</span> <span class='hs-keyword'>_</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>Nothing</span>
+<a name="line-108"></a>
+<a name="line-109"></a><a name="sourceLine"></a><span class='hs-comment'>-- | extract partial information about the current line number if possible</span>
+<a name="line-110"></a><span class='hs-definition'>sourceLine</span> <span class='hs-keyglyph'>::</span> <span class='hs-conid'>SourcePosition</span> <span class='hs-varid'>f</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-conid'>Maybe</span> <span class='hs-conid'>SourceLine</span>
+<a name="line-111"></a><span class='hs-definition'>sourceLine</span> <span class='hs-layout'>(</span><span class='hs-conid'>Pos</span> <span class='hs-keyword'>_</span> <span class='hs-varid'>l</span> <span class='hs-keyword'>_</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>Just</span> <span class='hs-varid'>l</span>
+<a name="line-112"></a><span class='hs-definition'>sourceLine</span> <span class='hs-keyword'>_</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>Nothing</span>
+<a name="line-113"></a>
+<a name="line-114"></a><a name="showSourcePosition"></a><span class='hs-comment'>-- | extract the standard format for an absolute source position</span>
+<a name="line-115"></a><span class='hs-definition'>showSourcePosition</span> <span class='hs-keyglyph'>::</span> <span class='hs-conid'>SourcePosition</span> <span class='hs-conid'>String</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-conid'>String</span>
+<a name="line-116"></a><span class='hs-definition'>showSourcePosition</span> <span class='hs-varid'>pos</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>showSourcePosition'</span> <span class='hs-layout'>(</span><span class='hs-varid'>point</span> <span class='hs-str'>"-"</span> <span class='hs-varop'>`mappend`</span> <span class='hs-varid'>pos</span><span class='hs-layout'>)</span> <span class='hs-keyword'>where</span>
+<a name="line-117"></a>    <span class='hs-varid'>showSourcePosition'</span> <span class='hs-layout'>(</span><span class='hs-conid'>Pos</span> <span class='hs-varid'>f</span> <span class='hs-varid'>l</span> <span class='hs-varid'>c</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>f</span> <span class='hs-varop'>++</span> <span class='hs-str'>":"</span> <span class='hs-varop'>++</span> <span class='hs-varid'>show</span> <span class='hs-varid'>l</span> <span class='hs-varop'>++</span> <span class='hs-str'>":"</span> <span class='hs-varop'>++</span> <span class='hs-varid'>show</span> <span class='hs-varid'>c</span>
+<a name="line-118"></a>    <span class='hs-varid'>showSourcePosition'</span> <span class='hs-keyword'>_</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>undefined</span>
+</pre></body>
+</html>
addfile ./dist/doc/html/monoids/src/Data-Monoid-Lexical-UTF8-Decoder.html
hunk ./dist/doc/html/monoids/src/Data-Monoid-Lexical-UTF8-Decoder.html 1
+<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
+<html>
+<head>
+<!-- Generated by HsColour, http://www.cs.york.ac.uk/fp/darcs/hscolour/ -->
+<title>Data/Monoid/Lexical/UTF8/Decoder.hs</title>
+<link type='text/css' rel='stylesheet' href='hscolour.css' />
+</head>
+<body>
+<pre><a name="line-1"></a><span class='hs-comment'>{-# LANGUAGE FlexibleInstances, MultiParamTypeClasses #-}</span>
+<a name="line-2"></a>
+<a name="line-3"></a><span class='hs-comment'>-----------------------------------------------------------------------------</span>
+<a name="line-4"></a><span class='hs-comment'>-- |</span>
+<a name="line-5"></a><span class='hs-comment'>-- Module      :  Data.Monoid.Lexical.UTF8.Decoder</span>
+<a name="line-6"></a><span class='hs-comment'>-- Copyright   :  (c) Edward Kmett 2009</span>
+<a name="line-7"></a><span class='hs-comment'>-- License     :  BSD-style</span>
+<a name="line-8"></a><span class='hs-comment'>-- Maintainer  :  libraries@haskell.org</span>
+<a name="line-9"></a><span class='hs-comment'>-- Stability   :  experimental</span>
+<a name="line-10"></a><span class='hs-comment'>-- Portability :  non-portable (MPTCs)</span>
+<a name="line-11"></a><span class='hs-comment'>--</span>
+<a name="line-12"></a><span class='hs-comment'>-- UTF8 encoded unicode characters can be parsed both forwards and backwards,</span>
+<a name="line-13"></a><span class='hs-comment'>-- since the start of each 'Char' is clearly marked. This 'Monoid' accumulates</span>
+<a name="line-14"></a><span class='hs-comment'>-- information about the characters represented and reduces that information</span>
+<a name="line-15"></a><span class='hs-comment'>-- using a 'CharReducer', which is just a 'Reducer' 'Monoid' that knows what </span>
+<a name="line-16"></a><span class='hs-comment'>-- it wants to do about an 'invalidChar' -- a  string of 'Word8' values that </span>
+<a name="line-17"></a><span class='hs-comment'>-- don't form a valid UTF8 character.</span>
+<a name="line-18"></a><span class='hs-comment'>--</span>
+<a name="line-19"></a><span class='hs-comment'>-- As this monoid parses chars it just feeds them upstream to the underlying</span>
+<a name="line-20"></a><span class='hs-comment'>-- CharReducer. Efficient left-to-right and right-to-left traversals are </span>
+<a name="line-21"></a><span class='hs-comment'>-- supplied so that a lazy 'ByteString' can be parsed efficiently by </span>
+<a name="line-22"></a><span class='hs-comment'>-- chunking it into strict chunks, and batching the traversals over each</span>
+<a name="line-23"></a><span class='hs-comment'>-- before stitching the edges together.</span>
+<a name="line-24"></a><span class='hs-comment'>--</span>
+<a name="line-25"></a><span class='hs-comment'>-- Because this needs to be a 'Monoid' and should return the exact same result</span>
+<a name="line-26"></a><span class='hs-comment'>-- regardless of forward or backwards parsing, it chooses to parse only </span>
+<a name="line-27"></a><span class='hs-comment'>-- canonical UTF8 unlike most Haskell UTF8 parsers, which will blissfully </span>
+<a name="line-28"></a><span class='hs-comment'>-- accept illegal alternative long encodings of a character. </span>
+<a name="line-29"></a><span class='hs-comment'>--</span>
+<a name="line-30"></a><span class='hs-comment'>-- This actually fixes a potential class of security issues in some scenarios:</span>
+<a name="line-31"></a><span class='hs-comment'>--</span>
+<a name="line-32"></a><span class='hs-comment'>-- &lt;<a href="http://prowebdevelopmentblog.com/content/big-overhaul-java-utf-8-charset">http://prowebdevelopmentblog.com/content/big-overhaul-java-utf-8-charset</a>&gt;</span>
+<a name="line-33"></a><span class='hs-comment'>--</span>
+<a name="line-34"></a><span class='hs-comment'>-- NB: Due to naive use of a list to track the tail of an unfinished character </span>
+<a name="line-35"></a><span class='hs-comment'>-- this may exhibit @O(n^2)@ behavior parsing backwards along an invalid sequence </span>
+<a name="line-36"></a><span class='hs-comment'>-- of a large number of bytes that all claim to be in the tail of a character.</span>
+<a name="line-37"></a><span class='hs-comment'>--</span>
+<a name="line-38"></a><span class='hs-comment'>-----------------------------------------------------------------------------</span>
+<a name="line-39"></a>
+<a name="line-40"></a>
+<a name="line-41"></a><span class='hs-keyword'>module</span> <span class='hs-conid'>Data</span><span class='hs-varop'>.</span><span class='hs-conid'>Monoid</span><span class='hs-varop'>.</span><span class='hs-conid'>Lexical</span><span class='hs-varop'>.</span><span class='hs-conid'>UTF8</span><span class='hs-varop'>.</span><span class='hs-conid'>Decoder</span> 
+<a name="line-42"></a>    <span class='hs-layout'>(</span> <span class='hs-keyword'>module</span> <span class='hs-conid'>Data</span><span class='hs-varop'>.</span><span class='hs-conid'>Monoid</span><span class='hs-varop'>.</span><span class='hs-conid'>Reducer</span><span class='hs-varop'>.</span><span class='hs-conid'>Char</span>
+<a name="line-43"></a>    <span class='hs-layout'>,</span> <span class='hs-conid'>UTF8</span>
+<a name="line-44"></a>    <span class='hs-layout'>,</span> <span class='hs-varid'>runUTF8</span>
+<a name="line-45"></a>    <span class='hs-layout'>)</span> <span class='hs-keyword'>where</span>
+<a name="line-46"></a>    
+<a name="line-47"></a><span class='hs-keyword'>import</span> <span class='hs-conid'>Data</span><span class='hs-varop'>.</span><span class='hs-conid'>Bits</span> <span class='hs-layout'>(</span><span class='hs-varid'>shiftL</span><span class='hs-layout'>,</span><span class='hs-layout'>(</span><span class='hs-varop'>.&amp;.</span><span class='hs-layout'>)</span><span class='hs-layout'>,</span><span class='hs-layout'>(</span><span class='hs-varop'>.|.</span><span class='hs-layout'>)</span><span class='hs-layout'>)</span>
+<a name="line-48"></a><span class='hs-keyword'>import</span> <span class='hs-conid'>Data</span><span class='hs-varop'>.</span><span class='hs-conid'>Word</span> <span class='hs-layout'>(</span><span class='hs-conid'>Word8</span><span class='hs-layout'>)</span>
+<a name="line-49"></a>
+<a name="line-50"></a>
+<a name="line-51"></a><span class='hs-keyword'>import</span> <span class='hs-conid'>Control</span><span class='hs-varop'>.</span><span class='hs-conid'>Functor</span><span class='hs-varop'>.</span><span class='hs-conid'>Pointed</span>
+<a name="line-52"></a>
+<a name="line-53"></a><span class='hs-keyword'>import</span> <span class='hs-conid'>Data</span><span class='hs-varop'>.</span><span class='hs-conid'>Monoid</span><span class='hs-varop'>.</span><span class='hs-conid'>Reducer</span><span class='hs-varop'>.</span><span class='hs-conid'>Char</span>
+<a name="line-54"></a>
+<a name="line-55"></a><span class='hs-comment'>-- Incrementally reduce canonical RFC3629 UTF-8 Characters</span>
+<a name="line-56"></a>
+<a name="line-57"></a><a name="H"></a><span class='hs-comment'>-- utf8 characters are at most 4 characters long, so we need only retain state for 3 of them</span>
+<a name="line-58"></a><a name="H"></a><span class='hs-comment'>-- moreover their length is able to be determined a priori, so lets store that intrinsically in the constructor</span>
+<a name="line-59"></a><a name="H"></a><span class='hs-keyword'>data</span> <span class='hs-conid'>H</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>H0</span>
+<a name="line-60"></a>       <span class='hs-keyglyph'>|</span> <span class='hs-conid'>H2_1</span> <span class='hs-comment'>{-# UNPACK #-}</span> <span class='hs-varop'>!</span><span class='hs-conid'>Word8</span> 
+<a name="line-61"></a>       <span class='hs-keyglyph'>|</span> <span class='hs-conid'>H3_1</span> <span class='hs-comment'>{-# UNPACK #-}</span> <span class='hs-varop'>!</span><span class='hs-conid'>Word8</span>
+<a name="line-62"></a>       <span class='hs-keyglyph'>|</span> <span class='hs-conid'>H3_2</span> <span class='hs-comment'>{-# UNPACK #-}</span> <span class='hs-varop'>!</span><span class='hs-conid'>Word8</span> <span class='hs-varop'>!</span><span class='hs-conid'>Word8</span>
+<a name="line-63"></a>       <span class='hs-keyglyph'>|</span> <span class='hs-conid'>H4_1</span> <span class='hs-comment'>{-# UNPACK #-}</span> <span class='hs-varop'>!</span><span class='hs-conid'>Word8</span>
+<a name="line-64"></a>       <span class='hs-keyglyph'>|</span> <span class='hs-conid'>H4_2</span> <span class='hs-comment'>{-# UNPACK #-}</span> <span class='hs-varop'>!</span><span class='hs-conid'>Word8</span> <span class='hs-varop'>!</span><span class='hs-conid'>Word8</span>
+<a name="line-65"></a>       <span class='hs-keyglyph'>|</span> <span class='hs-conid'>H4_3</span> <span class='hs-comment'>{-# UNPACK #-}</span> <span class='hs-varop'>!</span><span class='hs-conid'>Word8</span> <span class='hs-varop'>!</span><span class='hs-conid'>Word8</span> <span class='hs-varop'>!</span><span class='hs-conid'>Word8</span>
+<a name="line-66"></a>
+<a name="line-67"></a><a name="T"></a><span class='hs-comment'>-- words expressing the tail of a character, each between 0x80 and 0xbf</span>
+<a name="line-68"></a><a name="T"></a><span class='hs-comment'>-- this is arbitrary length to simplify making the parser truly monoidal</span>
+<a name="line-69"></a><a name="T"></a><span class='hs-comment'>-- this probably means we have O(n^2) worst case performance in the face of very long runs of chars that look like 10xxxxxx</span>
+<a name="line-70"></a><a name="T"></a><span class='hs-keyword'>type</span> <span class='hs-conid'>T</span> <span class='hs-keyglyph'>=</span> <span class='hs-keyglyph'>[</span><span class='hs-conid'>Word8</span><span class='hs-keyglyph'>]</span>
+<a name="line-71"></a>
+<a name="line-72"></a><a name="UTF8"></a><span class='hs-comment'>-- S is a segment that contains a possible tail of a character, the result of reducing some full characters, and the start of another character</span>
+<a name="line-73"></a><a name="UTF8"></a><span class='hs-comment'>-- T contains a list of bytes each between 0x80 and 0xbf</span>
+<a name="line-74"></a><a name="UTF8"></a><span class='hs-keyword'>data</span> <span class='hs-conid'>UTF8</span> <span class='hs-varid'>m</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>S</span> <span class='hs-conid'>T</span> <span class='hs-varid'>m</span> <span class='hs-varop'>!</span><span class='hs-conid'>H</span>
+<a name="line-75"></a>            <span class='hs-keyglyph'>|</span> <span class='hs-conid'>T</span> <span class='hs-conid'>T</span>
+<a name="line-76"></a>
+<a name="line-77"></a><a name="flushH"></a><span class='hs-comment'>-- flush any extra characters in a head, when the next character isn't between 0x80 and 0xbf</span>
+<a name="line-78"></a><span class='hs-definition'>flushH</span> <span class='hs-keyglyph'>::</span> <span class='hs-conid'>CharReducer</span> <span class='hs-varid'>m</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>H</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-varid'>m</span>
+<a name="line-79"></a><span class='hs-definition'>flushH</span> <span class='hs-layout'>(</span><span class='hs-conid'>H0</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>mempty</span>
+<a name="line-80"></a><span class='hs-definition'>flushH</span> <span class='hs-layout'>(</span><span class='hs-conid'>H2_1</span> <span class='hs-varid'>x</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>invalidChar</span> <span class='hs-keyglyph'>[</span><span class='hs-varid'>x</span><span class='hs-keyglyph'>]</span>
+<a name="line-81"></a><span class='hs-definition'>flushH</span> <span class='hs-layout'>(</span><span class='hs-conid'>H3_1</span> <span class='hs-varid'>x</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>invalidChar</span> <span class='hs-keyglyph'>[</span><span class='hs-varid'>x</span><span class='hs-keyglyph'>]</span>
+<a name="line-82"></a><span class='hs-definition'>flushH</span> <span class='hs-layout'>(</span><span class='hs-conid'>H3_2</span> <span class='hs-varid'>x</span> <span class='hs-varid'>y</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>invalidChar</span> <span class='hs-keyglyph'>[</span><span class='hs-varid'>x</span><span class='hs-layout'>,</span><span class='hs-varid'>y</span><span class='hs-keyglyph'>]</span>
+<a name="line-83"></a><span class='hs-definition'>flushH</span> <span class='hs-layout'>(</span><span class='hs-conid'>H4_1</span> <span class='hs-varid'>x</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>invalidChar</span> <span class='hs-keyglyph'>[</span><span class='hs-varid'>x</span><span class='hs-keyglyph'>]</span>
+<a name="line-84"></a><span class='hs-definition'>flushH</span> <span class='hs-layout'>(</span><span class='hs-conid'>H4_2</span> <span class='hs-varid'>x</span> <span class='hs-varid'>y</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>invalidChar</span> <span class='hs-keyglyph'>[</span><span class='hs-varid'>x</span><span class='hs-layout'>,</span><span class='hs-varid'>y</span><span class='hs-keyglyph'>]</span>
+<a name="line-85"></a><span class='hs-definition'>flushH</span> <span class='hs-layout'>(</span><span class='hs-conid'>H4_3</span> <span class='hs-varid'>x</span> <span class='hs-varid'>y</span> <span class='hs-varid'>z</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>invalidChar</span> <span class='hs-keyglyph'>[</span><span class='hs-varid'>x</span><span class='hs-layout'>,</span><span class='hs-varid'>y</span><span class='hs-layout'>,</span><span class='hs-varid'>z</span><span class='hs-keyglyph'>]</span>
+<a name="line-86"></a>
+<a name="line-87"></a><a name="flushT"></a><span class='hs-comment'>-- flush a character tail </span>
+<a name="line-88"></a><span class='hs-definition'>flushT</span> <span class='hs-keyglyph'>::</span> <span class='hs-conid'>CharReducer</span> <span class='hs-varid'>m</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-keyglyph'>[</span><span class='hs-conid'>Word8</span><span class='hs-keyglyph'>]</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-varid'>m</span>
+<a name="line-89"></a><span class='hs-definition'>flushT</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>invalidChar</span>
+<a name="line-90"></a>
+<a name="line-91"></a><a name="snocH"></a><span class='hs-definition'>snocH</span> <span class='hs-keyglyph'>::</span> <span class='hs-conid'>CharReducer</span> <span class='hs-varid'>m</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>H</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-conid'>Word8</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-layout'>(</span><span class='hs-varid'>m</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-conid'>H</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-conid'>UTF8</span> <span class='hs-varid'>m</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-varid'>m</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-conid'>UTF8</span> <span class='hs-varid'>m</span>
+<a name="line-92"></a><span class='hs-definition'>snocH</span> <span class='hs-conid'>H0</span> <span class='hs-varid'>c</span> <span class='hs-varid'>k</span> <span class='hs-varid'>m</span> 
+<a name="line-93"></a>    <span class='hs-keyglyph'>|</span> <span class='hs-varid'>c</span> <span class='hs-varop'>&lt;</span> <span class='hs-num'>0x80</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>k</span> <span class='hs-layout'>(</span><span class='hs-varid'>m</span> <span class='hs-varop'>`mappend`</span> <span class='hs-varid'>b1</span> <span class='hs-varid'>c</span><span class='hs-layout'>)</span> <span class='hs-conid'>H0</span>
+<a name="line-94"></a>    <span class='hs-keyglyph'>|</span> <span class='hs-varid'>c</span> <span class='hs-varop'>&lt;</span> <span class='hs-num'>0xc0</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>k</span> <span class='hs-layout'>(</span><span class='hs-varid'>m</span> <span class='hs-varop'>`mappend`</span> <span class='hs-varid'>invalidChar</span> <span class='hs-keyglyph'>[</span><span class='hs-varid'>c</span><span class='hs-keyglyph'>]</span><span class='hs-layout'>)</span> <span class='hs-conid'>H0</span>
+<a name="line-95"></a>    <span class='hs-keyglyph'>|</span> <span class='hs-varid'>c</span> <span class='hs-varop'>&lt;</span> <span class='hs-num'>0xe0</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>k</span> <span class='hs-varid'>m</span> <span class='hs-layout'>(</span><span class='hs-conid'>H2_1</span> <span class='hs-varid'>c</span><span class='hs-layout'>)</span>
+<a name="line-96"></a>    <span class='hs-keyglyph'>|</span> <span class='hs-varid'>c</span> <span class='hs-varop'>&lt;</span> <span class='hs-num'>0xf0</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>k</span> <span class='hs-varid'>m</span> <span class='hs-layout'>(</span><span class='hs-conid'>H3_1</span> <span class='hs-varid'>c</span><span class='hs-layout'>)</span>
+<a name="line-97"></a>    <span class='hs-keyglyph'>|</span> <span class='hs-varid'>c</span> <span class='hs-varop'>&lt;</span> <span class='hs-num'>0xf5</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>k</span> <span class='hs-varid'>m</span> <span class='hs-layout'>(</span><span class='hs-conid'>H4_1</span> <span class='hs-varid'>c</span><span class='hs-layout'>)</span>
+<a name="line-98"></a>    <span class='hs-keyglyph'>|</span> <span class='hs-varid'>otherwise</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>k</span> <span class='hs-layout'>(</span><span class='hs-varid'>m</span> <span class='hs-varop'>`mappend`</span> <span class='hs-varid'>invalidChar</span> <span class='hs-keyglyph'>[</span><span class='hs-varid'>c</span><span class='hs-keyglyph'>]</span><span class='hs-layout'>)</span> <span class='hs-conid'>H0</span>
+<a name="line-99"></a><span class='hs-definition'>snocH</span> <span class='hs-layout'>(</span><span class='hs-conid'>H2_1</span> <span class='hs-varid'>c</span><span class='hs-layout'>)</span> <span class='hs-varid'>d</span> <span class='hs-varid'>k</span> <span class='hs-varid'>m</span>
+<a name="line-100"></a>    <span class='hs-keyglyph'>|</span> <span class='hs-varid'>d</span> <span class='hs-varop'>&gt;=</span> <span class='hs-num'>0x80</span> <span class='hs-varop'>&amp;&amp;</span> <span class='hs-varid'>d</span> <span class='hs-varop'>&lt;</span> <span class='hs-num'>0xc0</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>k</span> <span class='hs-layout'>(</span><span class='hs-varid'>m</span> <span class='hs-varop'>`mappend`</span> <span class='hs-varid'>b2</span> <span class='hs-varid'>c</span> <span class='hs-varid'>d</span><span class='hs-layout'>)</span> <span class='hs-conid'>H0</span>
+<a name="line-101"></a>    <span class='hs-keyglyph'>|</span> <span class='hs-varid'>otherwise</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>k</span> <span class='hs-layout'>(</span><span class='hs-varid'>m</span> <span class='hs-varop'>`mappend`</span> <span class='hs-varid'>invalidChar</span> <span class='hs-keyglyph'>[</span><span class='hs-varid'>c</span><span class='hs-keyglyph'>]</span><span class='hs-layout'>)</span> <span class='hs-conid'>H0</span>
+<a name="line-102"></a><span class='hs-definition'>snocH</span> <span class='hs-layout'>(</span><span class='hs-conid'>H3_1</span> <span class='hs-varid'>c</span><span class='hs-layout'>)</span> <span class='hs-varid'>d</span> <span class='hs-varid'>k</span> <span class='hs-varid'>m</span> 
+<a name="line-103"></a>    <span class='hs-keyglyph'>|</span> <span class='hs-varid'>d</span> <span class='hs-varop'>&gt;=</span> <span class='hs-num'>0x80</span> <span class='hs-varop'>&amp;&amp;</span> <span class='hs-varid'>d</span> <span class='hs-varop'>&lt;</span> <span class='hs-num'>0xc0</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>k</span> <span class='hs-varid'>m</span> <span class='hs-layout'>(</span><span class='hs-conid'>H3_2</span> <span class='hs-varid'>c</span> <span class='hs-varid'>d</span><span class='hs-layout'>)</span>
+<a name="line-104"></a>    <span class='hs-keyglyph'>|</span> <span class='hs-varid'>otherwise</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>k</span> <span class='hs-layout'>(</span><span class='hs-varid'>m</span> <span class='hs-varop'>`mappend`</span> <span class='hs-varid'>invalidChar</span> <span class='hs-keyglyph'>[</span><span class='hs-varid'>c</span><span class='hs-keyglyph'>]</span><span class='hs-layout'>)</span> <span class='hs-conid'>H0</span>
+<a name="line-105"></a><span class='hs-definition'>snocH</span> <span class='hs-layout'>(</span><span class='hs-conid'>H3_2</span> <span class='hs-varid'>c</span> <span class='hs-varid'>d</span><span class='hs-layout'>)</span> <span class='hs-varid'>e</span> <span class='hs-varid'>k</span> <span class='hs-varid'>m</span> 
+<a name="line-106"></a>    <span class='hs-keyglyph'>|</span> <span class='hs-varid'>d</span> <span class='hs-varop'>&gt;=</span> <span class='hs-num'>0x80</span> <span class='hs-varop'>&amp;&amp;</span> <span class='hs-varid'>d</span> <span class='hs-varop'>&lt;</span> <span class='hs-num'>0xc0</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>k</span> <span class='hs-layout'>(</span><span class='hs-varid'>m</span> <span class='hs-varop'>`mappend`</span> <span class='hs-varid'>b3</span> <span class='hs-varid'>c</span> <span class='hs-varid'>d</span> <span class='hs-varid'>e</span><span class='hs-layout'>)</span> <span class='hs-conid'>H0</span>
+<a name="line-107"></a>    <span class='hs-keyglyph'>|</span> <span class='hs-varid'>otherwise</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>k</span> <span class='hs-layout'>(</span><span class='hs-varid'>m</span> <span class='hs-varop'>`mappend`</span> <span class='hs-varid'>invalidChar</span> <span class='hs-keyglyph'>[</span><span class='hs-varid'>c</span><span class='hs-layout'>,</span><span class='hs-varid'>d</span><span class='hs-keyglyph'>]</span><span class='hs-layout'>)</span> <span class='hs-conid'>H0</span>
+<a name="line-108"></a><span class='hs-definition'>snocH</span> <span class='hs-layout'>(</span><span class='hs-conid'>H4_1</span> <span class='hs-varid'>c</span><span class='hs-layout'>)</span> <span class='hs-varid'>d</span> <span class='hs-varid'>k</span> <span class='hs-varid'>m</span> 
+<a name="line-109"></a>    <span class='hs-keyglyph'>|</span> <span class='hs-varid'>d</span> <span class='hs-varop'>&gt;=</span> <span class='hs-num'>0x80</span> <span class='hs-varop'>&amp;&amp;</span> <span class='hs-varid'>d</span> <span class='hs-varop'>&lt;</span> <span class='hs-num'>0xc0</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>k</span> <span class='hs-varid'>m</span> <span class='hs-layout'>(</span><span class='hs-conid'>H4_2</span> <span class='hs-varid'>c</span> <span class='hs-varid'>d</span><span class='hs-layout'>)</span>
+<a name="line-110"></a>    <span class='hs-keyglyph'>|</span> <span class='hs-varid'>otherwise</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>k</span> <span class='hs-layout'>(</span><span class='hs-varid'>m</span> <span class='hs-varop'>`mappend`</span> <span class='hs-varid'>invalidChar</span> <span class='hs-keyglyph'>[</span><span class='hs-varid'>c</span><span class='hs-layout'>,</span><span class='hs-varid'>d</span><span class='hs-keyglyph'>]</span><span class='hs-layout'>)</span> <span class='hs-conid'>H0</span>
+<a name="line-111"></a><span class='hs-definition'>snocH</span> <span class='hs-layout'>(</span><span class='hs-conid'>H4_2</span> <span class='hs-varid'>c</span> <span class='hs-varid'>d</span><span class='hs-layout'>)</span> <span class='hs-varid'>e</span> <span class='hs-varid'>k</span> <span class='hs-varid'>m</span> 
+<a name="line-112"></a>    <span class='hs-keyglyph'>|</span> <span class='hs-varid'>d</span> <span class='hs-varop'>&gt;=</span> <span class='hs-num'>0x80</span> <span class='hs-varop'>&amp;&amp;</span> <span class='hs-varid'>d</span> <span class='hs-varop'>&lt;</span> <span class='hs-num'>0xc0</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>k</span> <span class='hs-varid'>m</span> <span class='hs-layout'>(</span><span class='hs-conid'>H4_3</span> <span class='hs-varid'>c</span> <span class='hs-varid'>d</span> <span class='hs-varid'>e</span><span class='hs-layout'>)</span>
+<a name="line-113"></a>    <span class='hs-keyglyph'>|</span> <span class='hs-varid'>otherwise</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>k</span> <span class='hs-layout'>(</span><span class='hs-varid'>m</span> <span class='hs-varop'>`mappend`</span> <span class='hs-varid'>invalidChar</span> <span class='hs-keyglyph'>[</span><span class='hs-varid'>c</span><span class='hs-layout'>,</span><span class='hs-varid'>d</span><span class='hs-layout'>,</span><span class='hs-varid'>e</span><span class='hs-keyglyph'>]</span><span class='hs-layout'>)</span> <span class='hs-conid'>H0</span>
+<a name="line-114"></a><span class='hs-definition'>snocH</span> <span class='hs-layout'>(</span><span class='hs-conid'>H4_3</span> <span class='hs-varid'>c</span> <span class='hs-varid'>d</span> <span class='hs-varid'>e</span><span class='hs-layout'>)</span> <span class='hs-varid'>f</span> <span class='hs-varid'>k</span> <span class='hs-varid'>m</span> 
+<a name="line-115"></a>    <span class='hs-keyglyph'>|</span> <span class='hs-varid'>d</span> <span class='hs-varop'>&gt;=</span> <span class='hs-num'>0x80</span> <span class='hs-varop'>&amp;&amp;</span> <span class='hs-varid'>d</span> <span class='hs-varop'>&lt;</span> <span class='hs-num'>0xc0</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>k</span> <span class='hs-layout'>(</span><span class='hs-varid'>m</span> <span class='hs-varop'>`mappend`</span> <span class='hs-varid'>b4</span> <span class='hs-varid'>c</span> <span class='hs-varid'>d</span> <span class='hs-varid'>e</span> <span class='hs-varid'>f</span><span class='hs-layout'>)</span> <span class='hs-conid'>H0</span>
+<a name="line-116"></a>    <span class='hs-keyglyph'>|</span> <span class='hs-varid'>otherwise</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>k</span> <span class='hs-layout'>(</span><span class='hs-varid'>m</span> <span class='hs-varop'>`mappend`</span> <span class='hs-varid'>invalidChar</span> <span class='hs-keyglyph'>[</span><span class='hs-varid'>c</span><span class='hs-layout'>,</span><span class='hs-varid'>d</span><span class='hs-layout'>,</span><span class='hs-varid'>e</span><span class='hs-layout'>,</span><span class='hs-varid'>f</span><span class='hs-keyglyph'>]</span><span class='hs-layout'>)</span> <span class='hs-conid'>H0</span>
+<a name="line-117"></a>
+<a name="line-118"></a><a name="mask"></a><span class='hs-definition'>mask</span> <span class='hs-keyglyph'>::</span> <span class='hs-conid'>Word8</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-conid'>Word8</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-conid'>Int</span>
+<a name="line-119"></a><span class='hs-definition'>mask</span> <span class='hs-varid'>c</span> <span class='hs-varid'>m</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>fromEnum</span> <span class='hs-layout'>(</span><span class='hs-varid'>c</span> <span class='hs-varop'>.&amp;.</span> <span class='hs-varid'>m</span><span class='hs-layout'>)</span> 
+<a name="line-120"></a>
+<a name="line-121"></a><a name="combine"></a><span class='hs-definition'>combine</span> <span class='hs-keyglyph'>::</span> <span class='hs-conid'>Int</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-conid'>Word8</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-conid'>Int</span>
+<a name="line-122"></a><span class='hs-definition'>combine</span> <span class='hs-varid'>a</span> <span class='hs-varid'>r</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>shiftL</span> <span class='hs-varid'>a</span> <span class='hs-num'>6</span> <span class='hs-varop'>.|.</span> <span class='hs-varid'>fromEnum</span> <span class='hs-layout'>(</span><span class='hs-varid'>r</span> <span class='hs-varop'>.&amp;.</span> <span class='hs-num'>0x3f</span><span class='hs-layout'>)</span>
+<a name="line-123"></a>
+<a name="line-124"></a><a name="b1"></a><span class='hs-definition'>b1</span> <span class='hs-keyglyph'>::</span> <span class='hs-conid'>CharReducer</span> <span class='hs-varid'>m</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>Word8</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-varid'>m</span>
+<a name="line-125"></a><span class='hs-definition'>b1</span> <span class='hs-varid'>c</span> <span class='hs-keyglyph'>|</span> <span class='hs-varid'>c</span> <span class='hs-varop'>&lt;</span> <span class='hs-num'>0x80</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>fromChar</span> <span class='hs-varop'>.</span> <span class='hs-varid'>toEnum</span> <span class='hs-varop'>$</span> <span class='hs-varid'>fromEnum</span> <span class='hs-varid'>c</span>
+<a name="line-126"></a>     <span class='hs-keyglyph'>|</span> <span class='hs-varid'>otherwise</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>invalidChar</span> <span class='hs-keyglyph'>[</span><span class='hs-varid'>c</span><span class='hs-keyglyph'>]</span>
+<a name="line-127"></a>
+<a name="line-128"></a><a name="b2"></a><span class='hs-definition'>b2</span> <span class='hs-keyglyph'>::</span> <span class='hs-conid'>CharReducer</span> <span class='hs-varid'>m</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>Word8</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-conid'>Word8</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-varid'>m</span>
+<a name="line-129"></a><span class='hs-definition'>b2</span> <span class='hs-varid'>c</span> <span class='hs-varid'>d</span> <span class='hs-keyglyph'>|</span> <span class='hs-varid'>valid_b2</span> <span class='hs-varid'>c</span> <span class='hs-varid'>d</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>fromChar</span> <span class='hs-layout'>(</span><span class='hs-varid'>toEnum</span> <span class='hs-layout'>(</span><span class='hs-varid'>combine</span> <span class='hs-layout'>(</span><span class='hs-varid'>mask</span> <span class='hs-varid'>c</span> <span class='hs-num'>0x1f</span><span class='hs-layout'>)</span> <span class='hs-varid'>d</span><span class='hs-layout'>)</span><span class='hs-layout'>)</span>
+<a name="line-130"></a>       <span class='hs-keyglyph'>|</span> <span class='hs-varid'>otherwise</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>invalidChar</span> <span class='hs-keyglyph'>[</span><span class='hs-varid'>c</span><span class='hs-layout'>,</span><span class='hs-varid'>d</span><span class='hs-keyglyph'>]</span>
+<a name="line-131"></a>
+<a name="line-132"></a><a name="b3"></a><span class='hs-definition'>b3</span> <span class='hs-keyglyph'>::</span> <span class='hs-conid'>CharReducer</span> <span class='hs-varid'>m</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>Word8</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-conid'>Word8</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-conid'>Word8</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-varid'>m</span>
+<a name="line-133"></a><span class='hs-definition'>b3</span> <span class='hs-varid'>c</span> <span class='hs-varid'>d</span> <span class='hs-varid'>e</span> <span class='hs-keyglyph'>|</span> <span class='hs-varid'>valid_b3</span> <span class='hs-varid'>c</span> <span class='hs-varid'>d</span> <span class='hs-varid'>e</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>fromChar</span> <span class='hs-layout'>(</span><span class='hs-varid'>toEnum</span> <span class='hs-layout'>(</span><span class='hs-varid'>combine</span> <span class='hs-layout'>(</span><span class='hs-varid'>combine</span> <span class='hs-layout'>(</span><span class='hs-varid'>mask</span> <span class='hs-varid'>c</span> <span class='hs-num'>0x0f</span><span class='hs-layout'>)</span> <span class='hs-varid'>d</span><span class='hs-layout'>)</span> <span class='hs-varid'>e</span><span class='hs-layout'>)</span><span class='hs-layout'>)</span>
+<a name="line-134"></a>         <span class='hs-keyglyph'>|</span> <span class='hs-varid'>otherwise</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>invalidChar</span> <span class='hs-keyglyph'>[</span><span class='hs-varid'>c</span><span class='hs-layout'>,</span><span class='hs-varid'>d</span><span class='hs-layout'>,</span><span class='hs-varid'>e</span><span class='hs-keyglyph'>]</span>
+<a name="line-135"></a>
+<a name="line-136"></a>
+<a name="line-137"></a><a name="b4"></a><span class='hs-definition'>b4</span> <span class='hs-keyglyph'>::</span> <span class='hs-conid'>CharReducer</span> <span class='hs-varid'>m</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>Word8</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-conid'>Word8</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-conid'>Word8</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-conid'>Word8</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-varid'>m</span>
+<a name="line-138"></a><span class='hs-definition'>b4</span> <span class='hs-varid'>c</span> <span class='hs-varid'>d</span> <span class='hs-varid'>e</span> <span class='hs-varid'>f</span> <span class='hs-keyglyph'>|</span> <span class='hs-varid'>valid_b4</span> <span class='hs-varid'>c</span> <span class='hs-varid'>d</span> <span class='hs-varid'>e</span> <span class='hs-varid'>f</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>fromChar</span> <span class='hs-layout'>(</span><span class='hs-varid'>toEnum</span> <span class='hs-layout'>(</span><span class='hs-varid'>combine</span> <span class='hs-layout'>(</span><span class='hs-varid'>combine</span> <span class='hs-layout'>(</span><span class='hs-varid'>combine</span> <span class='hs-layout'>(</span><span class='hs-varid'>mask</span> <span class='hs-varid'>c</span> <span class='hs-num'>0x07</span><span class='hs-layout'>)</span> <span class='hs-varid'>d</span><span class='hs-layout'>)</span> <span class='hs-varid'>e</span><span class='hs-layout'>)</span> <span class='hs-varid'>f</span><span class='hs-layout'>)</span><span class='hs-layout'>)</span>
+<a name="line-139"></a>           <span class='hs-keyglyph'>|</span> <span class='hs-varid'>otherwise</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>invalidChar</span> <span class='hs-keyglyph'>[</span><span class='hs-varid'>c</span><span class='hs-layout'>,</span><span class='hs-varid'>d</span><span class='hs-layout'>,</span><span class='hs-varid'>e</span><span class='hs-layout'>,</span><span class='hs-varid'>f</span><span class='hs-keyglyph'>]</span>
+<a name="line-140"></a>
+<a name="line-141"></a><a name="valid_b2"></a><span class='hs-definition'>valid_b2</span> <span class='hs-keyglyph'>::</span> <span class='hs-conid'>Word8</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-conid'>Word8</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-conid'>Bool</span>
+<a name="line-142"></a><span class='hs-definition'>valid_b2</span> <span class='hs-varid'>c</span> <span class='hs-varid'>d</span> <span class='hs-keyglyph'>=</span> <span class='hs-layout'>(</span><span class='hs-varid'>c</span> <span class='hs-varop'>&gt;=</span> <span class='hs-num'>0xc2</span> <span class='hs-varop'>&amp;&amp;</span> <span class='hs-varid'>c</span> <span class='hs-varop'>&lt;=</span> <span class='hs-num'>0xdf</span> <span class='hs-varop'>&amp;&amp;</span> <span class='hs-varid'>d</span> <span class='hs-varop'>&gt;=</span> <span class='hs-num'>0x80</span> <span class='hs-varop'>&amp;&amp;</span> <span class='hs-varid'>d</span> <span class='hs-varop'>&lt;=</span> <span class='hs-num'>0xbf</span><span class='hs-layout'>)</span>
+<a name="line-143"></a>
+<a name="line-144"></a><a name="valid_b3"></a><span class='hs-definition'>valid_b3</span> <span class='hs-keyglyph'>::</span> <span class='hs-conid'>Word8</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-conid'>Word8</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-conid'>Word8</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-conid'>Bool</span>
+<a name="line-145"></a><span class='hs-definition'>valid_b3</span> <span class='hs-varid'>c</span> <span class='hs-varid'>d</span> <span class='hs-varid'>e</span> <span class='hs-keyglyph'>=</span> <span class='hs-layout'>(</span><span class='hs-varid'>c</span> <span class='hs-varop'>==</span> <span class='hs-num'>0xe0</span> <span class='hs-varop'>&amp;&amp;</span> <span class='hs-varid'>d</span> <span class='hs-varop'>&gt;=</span> <span class='hs-num'>0xa0</span> <span class='hs-varop'>&amp;&amp;</span> <span class='hs-varid'>d</span> <span class='hs-varop'>&lt;=</span> <span class='hs-num'>0xbf</span> <span class='hs-varop'>&amp;&amp;</span> <span class='hs-varid'>e</span> <span class='hs-varop'>&gt;=</span> <span class='hs-num'>0x80</span> <span class='hs-varop'>&amp;&amp;</span> <span class='hs-varid'>e</span> <span class='hs-varop'>&lt;=</span> <span class='hs-num'>0xbf</span><span class='hs-layout'>)</span> <span class='hs-varop'>||</span> 
+<a name="line-146"></a>                 <span class='hs-layout'>(</span><span class='hs-varid'>c</span> <span class='hs-varop'>&gt;=</span> <span class='hs-num'>0xe1</span> <span class='hs-varop'>&amp;&amp;</span> <span class='hs-varid'>c</span> <span class='hs-varop'>&lt;=</span> <span class='hs-num'>0xef</span> <span class='hs-varop'>&amp;&amp;</span> <span class='hs-varid'>d</span> <span class='hs-varop'>&gt;=</span> <span class='hs-num'>0x80</span> <span class='hs-varop'>&amp;&amp;</span> <span class='hs-varid'>d</span> <span class='hs-varop'>&lt;=</span> <span class='hs-num'>0xbf</span> <span class='hs-varop'>&amp;&amp;</span> <span class='hs-varid'>e</span> <span class='hs-varop'>&gt;=</span> <span class='hs-num'>0x80</span> <span class='hs-varop'>&amp;&amp;</span> <span class='hs-varid'>e</span> <span class='hs-varop'>&lt;=</span> <span class='hs-num'>0xbf</span><span class='hs-layout'>)</span>
+<a name="line-147"></a>
+<a name="line-148"></a><a name="valid_b4"></a><span class='hs-definition'>valid_b4</span> <span class='hs-keyglyph'>::</span> <span class='hs-conid'>Word8</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-conid'>Word8</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-conid'>Word8</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-conid'>Word8</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-conid'>Bool</span>
+<a name="line-149"></a><span class='hs-definition'>valid_b4</span> <span class='hs-varid'>c</span> <span class='hs-varid'>d</span> <span class='hs-varid'>e</span> <span class='hs-varid'>f</span> <span class='hs-keyglyph'>=</span> <span class='hs-layout'>(</span><span class='hs-varid'>c</span> <span class='hs-varop'>==</span> <span class='hs-num'>0xf0</span> <span class='hs-varop'>&amp;&amp;</span> <span class='hs-varid'>d</span> <span class='hs-varop'>&gt;=</span> <span class='hs-num'>0x90</span> <span class='hs-varop'>&amp;&amp;</span> <span class='hs-varid'>d</span> <span class='hs-varop'>&lt;=</span> <span class='hs-num'>0xbf</span> <span class='hs-varop'>&amp;&amp;</span> <span class='hs-varid'>e</span> <span class='hs-varop'>&gt;=</span> <span class='hs-num'>0x80</span> <span class='hs-varop'>&amp;&amp;</span> <span class='hs-varid'>e</span> <span class='hs-varop'>&lt;=</span> <span class='hs-num'>0xbf</span> <span class='hs-varop'>&amp;&amp;</span> <span class='hs-varid'>f</span> <span class='hs-varop'>&gt;=</span> <span class='hs-num'>0x80</span> <span class='hs-varop'>&amp;&amp;</span> <span class='hs-varid'>f</span> <span class='hs-varop'>&lt;=</span> <span class='hs-num'>0xbf</span><span class='hs-layout'>)</span> <span class='hs-varop'>||</span>
+<a name="line-150"></a>      <span class='hs-layout'>(</span><span class='hs-varid'>c</span> <span class='hs-varop'>&gt;=</span> <span class='hs-num'>0xf1</span> <span class='hs-varop'>&amp;&amp;</span> <span class='hs-varid'>c</span> <span class='hs-varop'>&lt;=</span> <span class='hs-num'>0xf3</span> <span class='hs-varop'>&amp;&amp;</span> <span class='hs-varid'>d</span> <span class='hs-varop'>&gt;=</span> <span class='hs-num'>0x80</span> <span class='hs-varop'>&amp;&amp;</span> <span class='hs-varid'>d</span> <span class='hs-varop'>&lt;=</span> <span class='hs-num'>0xbf</span> <span class='hs-varop'>&amp;&amp;</span> <span class='hs-varid'>e</span> <span class='hs-varop'>&gt;=</span> <span class='hs-num'>0x80</span> <span class='hs-varop'>&amp;&amp;</span> <span class='hs-varid'>e</span> <span class='hs-varop'>&lt;=</span> <span class='hs-num'>0xbf</span> <span class='hs-varop'>&amp;&amp;</span> <span class='hs-varid'>f</span> <span class='hs-varop'>&gt;=</span> <span class='hs-num'>0x80</span> <span class='hs-varop'>&amp;&amp;</span> <span class='hs-varid'>f</span> <span class='hs-varop'>&lt;=</span> <span class='hs-num'>0xbf</span><span class='hs-layout'>)</span> <span class='hs-varop'>||</span>
+<a name="line-151"></a>                   <span class='hs-layout'>(</span><span class='hs-varid'>c</span> <span class='hs-varop'>==</span> <span class='hs-num'>0xf4</span> <span class='hs-varop'>&amp;&amp;</span> <span class='hs-varid'>d</span> <span class='hs-varop'>&gt;=</span> <span class='hs-num'>0x80</span> <span class='hs-varop'>&amp;&amp;</span> <span class='hs-varid'>d</span> <span class='hs-varop'>&lt;=</span> <span class='hs-num'>0x8f</span> <span class='hs-varop'>&amp;&amp;</span> <span class='hs-varid'>e</span> <span class='hs-varop'>&gt;=</span> <span class='hs-num'>0x80</span> <span class='hs-varop'>&amp;&amp;</span> <span class='hs-varid'>e</span> <span class='hs-varop'>&lt;=</span> <span class='hs-num'>0xbf</span> <span class='hs-varop'>&amp;&amp;</span> <span class='hs-varid'>f</span> <span class='hs-varop'>&gt;=</span> <span class='hs-num'>0x80</span> <span class='hs-varop'>&amp;&amp;</span> <span class='hs-varid'>f</span> <span class='hs-varop'>&lt;=</span> <span class='hs-num'>0xbf</span><span class='hs-layout'>)</span>
+<a name="line-152"></a>
+<a name="line-153"></a><a name="consT"></a><span class='hs-definition'>consT</span> <span class='hs-keyglyph'>::</span> <span class='hs-conid'>CharReducer</span> <span class='hs-varid'>m</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>Word8</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-conid'>T</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-layout'>(</span><span class='hs-conid'>H</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-conid'>UTF8</span> <span class='hs-varid'>m</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-layout'>(</span><span class='hs-varid'>m</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-conid'>UTF8</span> <span class='hs-varid'>m</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-layout'>(</span><span class='hs-conid'>T</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-conid'>UTF8</span> <span class='hs-varid'>m</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-conid'>UTF8</span> <span class='hs-varid'>m</span>
+<a name="line-154"></a><span class='hs-definition'>consT</span> <span class='hs-varid'>c</span> <span class='hs-varid'>cs</span> <span class='hs-varid'>h</span> <span class='hs-varid'>m</span> <span class='hs-varid'>t</span>
+<a name="line-155"></a>             <span class='hs-keyglyph'>|</span> <span class='hs-varid'>c</span> <span class='hs-varop'>&lt;</span> <span class='hs-num'>0x80</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>m</span> <span class='hs-varop'>$</span> <span class='hs-varid'>b1</span> <span class='hs-varid'>c</span> <span class='hs-varop'>`mappend`</span> <span class='hs-varid'>invalidChars</span> <span class='hs-varid'>cs</span>
+<a name="line-156"></a>             <span class='hs-keyglyph'>|</span> <span class='hs-varid'>c</span> <span class='hs-varop'>&lt;</span> <span class='hs-num'>0xc0</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>t</span> <span class='hs-layout'>(</span><span class='hs-varid'>c</span><span class='hs-conop'>:</span><span class='hs-varid'>cs</span><span class='hs-layout'>)</span>
+<a name="line-157"></a>             <span class='hs-keyglyph'>|</span> <span class='hs-varid'>c</span> <span class='hs-varop'>&lt;</span> <span class='hs-num'>0xe0</span> <span class='hs-keyglyph'>=</span> <span class='hs-keyword'>case</span> <span class='hs-varid'>cs</span> <span class='hs-keyword'>of</span>
+<a name="line-158"></a>                        <span class='hs-conid'>[]</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-varid'>h</span> <span class='hs-varop'>$</span> <span class='hs-conid'>H2_1</span> <span class='hs-varid'>c</span>
+<a name="line-159"></a>                        <span class='hs-layout'>(</span><span class='hs-varid'>d</span><span class='hs-conop'>:</span><span class='hs-varid'>ds</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-varid'>m</span> <span class='hs-varop'>$</span> <span class='hs-varid'>b2</span> <span class='hs-varid'>c</span> <span class='hs-varid'>d</span> <span class='hs-varop'>`mappend`</span> <span class='hs-varid'>invalidChars</span> <span class='hs-varid'>ds</span>
+<a name="line-160"></a>             <span class='hs-keyglyph'>|</span> <span class='hs-varid'>c</span> <span class='hs-varop'>&lt;</span> <span class='hs-num'>0xf0</span> <span class='hs-keyglyph'>=</span> <span class='hs-keyword'>case</span> <span class='hs-varid'>cs</span> <span class='hs-keyword'>of</span>
+<a name="line-161"></a>                        <span class='hs-conid'>[]</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-varid'>h</span> <span class='hs-varop'>$</span> <span class='hs-conid'>H3_1</span> <span class='hs-varid'>c</span>
+<a name="line-162"></a>                        <span class='hs-keyglyph'>[</span><span class='hs-varid'>d</span><span class='hs-keyglyph'>]</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-varid'>h</span> <span class='hs-varop'>$</span> <span class='hs-conid'>H3_2</span> <span class='hs-varid'>c</span> <span class='hs-varid'>d</span>
+<a name="line-163"></a>                        <span class='hs-layout'>(</span><span class='hs-varid'>d</span><span class='hs-conop'>:</span><span class='hs-varid'>e</span><span class='hs-conop'>:</span><span class='hs-varid'>es</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-varid'>m</span> <span class='hs-varop'>$</span> <span class='hs-varid'>b3</span> <span class='hs-varid'>c</span> <span class='hs-varid'>d</span> <span class='hs-varid'>e</span> <span class='hs-varop'>`mappend`</span> <span class='hs-varid'>invalidChars</span> <span class='hs-varid'>es</span>
+<a name="line-164"></a>             <span class='hs-keyglyph'>|</span> <span class='hs-varid'>c</span> <span class='hs-varop'>&lt;</span> <span class='hs-num'>0xf5</span> <span class='hs-keyglyph'>=</span> <span class='hs-keyword'>case</span> <span class='hs-varid'>cs</span> <span class='hs-keyword'>of</span>
+<a name="line-165"></a>                        <span class='hs-conid'>[]</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-varid'>h</span> <span class='hs-varop'>$</span> <span class='hs-conid'>H4_1</span> <span class='hs-varid'>c</span>
+<a name="line-166"></a>                        <span class='hs-keyglyph'>[</span><span class='hs-varid'>d</span><span class='hs-keyglyph'>]</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-varid'>h</span> <span class='hs-varop'>$</span> <span class='hs-conid'>H4_2</span> <span class='hs-varid'>c</span> <span class='hs-varid'>d</span> 
+<a name="line-167"></a>                        <span class='hs-keyglyph'>[</span><span class='hs-varid'>d</span><span class='hs-layout'>,</span><span class='hs-varid'>e</span><span class='hs-keyglyph'>]</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-varid'>h</span> <span class='hs-varop'>$</span> <span class='hs-conid'>H4_3</span> <span class='hs-varid'>c</span> <span class='hs-varid'>d</span> <span class='hs-varid'>e</span> 
+<a name="line-168"></a>                        <span class='hs-layout'>(</span><span class='hs-varid'>d</span><span class='hs-conop'>:</span><span class='hs-varid'>e</span><span class='hs-conop'>:</span><span class='hs-varid'>f</span><span class='hs-conop'>:</span><span class='hs-varid'>fs</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-varid'>m</span> <span class='hs-varop'>$</span> <span class='hs-varid'>b4</span> <span class='hs-varid'>c</span> <span class='hs-varid'>d</span> <span class='hs-varid'>e</span> <span class='hs-varid'>f</span> <span class='hs-varop'>`mappend`</span> <span class='hs-varid'>invalidChars</span> <span class='hs-varid'>fs</span>
+<a name="line-169"></a>             <span class='hs-keyglyph'>|</span> <span class='hs-varid'>otherwise</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>mempty</span>
+<a name="line-170"></a>
+<a name="line-171"></a><a name="invalidChars"></a><span class='hs-definition'>invalidChars</span> <span class='hs-keyglyph'>::</span> <span class='hs-conid'>CharReducer</span> <span class='hs-varid'>m</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-keyglyph'>[</span><span class='hs-conid'>Word8</span><span class='hs-keyglyph'>]</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-varid'>m</span>
+<a name="line-172"></a><span class='hs-definition'>invalidChars</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>foldr</span> <span class='hs-layout'>(</span><span class='hs-varid'>mappend</span> <span class='hs-varop'>.</span> <span class='hs-varid'>invalidChar</span> <span class='hs-varop'>.</span> <span class='hs-varid'>return</span><span class='hs-layout'>)</span> <span class='hs-varid'>mempty</span>
+<a name="line-173"></a>
+<a name="line-174"></a><a name="merge"></a><span class='hs-definition'>merge</span> <span class='hs-keyglyph'>::</span> <span class='hs-conid'>CharReducer</span> <span class='hs-varid'>m</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>H</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-conid'>T</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-layout'>(</span><span class='hs-varid'>m</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-varid'>a</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-layout'>(</span><span class='hs-conid'>H</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-varid'>a</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-varid'>a</span>
+<a name="line-175"></a><span class='hs-definition'>merge</span> <span class='hs-conid'>H0</span> <span class='hs-varid'>cs</span> <span class='hs-varid'>k</span> <span class='hs-keyword'>_</span>               <span class='hs-keyglyph'>=</span> <span class='hs-varid'>k</span> <span class='hs-varop'>$</span> <span class='hs-varid'>invalidChars</span> <span class='hs-varid'>cs</span>
+<a name="line-176"></a><span class='hs-definition'>merge</span> <span class='hs-layout'>(</span><span class='hs-conid'>H2_1</span> <span class='hs-varid'>c</span><span class='hs-layout'>)</span> <span class='hs-conid'>[]</span> <span class='hs-keyword'>_</span> <span class='hs-varid'>p</span>         <span class='hs-keyglyph'>=</span> <span class='hs-varid'>p</span> <span class='hs-varop'>$</span> <span class='hs-conid'>H2_1</span> <span class='hs-varid'>c</span>
+<a name="line-177"></a><span class='hs-definition'>merge</span> <span class='hs-layout'>(</span><span class='hs-conid'>H2_1</span> <span class='hs-varid'>c</span><span class='hs-layout'>)</span> <span class='hs-layout'>(</span><span class='hs-varid'>d</span><span class='hs-conop'>:</span><span class='hs-varid'>ds</span><span class='hs-layout'>)</span> <span class='hs-varid'>k</span> <span class='hs-keyword'>_</span>     <span class='hs-keyglyph'>=</span> <span class='hs-varid'>k</span> <span class='hs-varop'>$</span> <span class='hs-varid'>b2</span> <span class='hs-varid'>c</span> <span class='hs-varid'>d</span> <span class='hs-varop'>`mappend`</span> <span class='hs-varid'>invalidChars</span> <span class='hs-varid'>ds</span>
+<a name="line-178"></a><span class='hs-definition'>merge</span> <span class='hs-layout'>(</span><span class='hs-conid'>H3_1</span> <span class='hs-varid'>c</span><span class='hs-layout'>)</span> <span class='hs-conid'>[]</span> <span class='hs-keyword'>_</span> <span class='hs-varid'>p</span>         <span class='hs-keyglyph'>=</span> <span class='hs-varid'>p</span> <span class='hs-varop'>$</span> <span class='hs-conid'>H3_1</span> <span class='hs-varid'>c</span>
+<a name="line-179"></a><span class='hs-definition'>merge</span> <span class='hs-layout'>(</span><span class='hs-conid'>H3_1</span> <span class='hs-varid'>c</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>[</span><span class='hs-varid'>d</span><span class='hs-keyglyph'>]</span> <span class='hs-keyword'>_</span> <span class='hs-varid'>p</span>        <span class='hs-keyglyph'>=</span> <span class='hs-varid'>p</span> <span class='hs-varop'>$</span> <span class='hs-conid'>H3_2</span> <span class='hs-varid'>c</span> <span class='hs-varid'>d</span>
+<a name="line-180"></a><span class='hs-definition'>merge</span> <span class='hs-layout'>(</span><span class='hs-conid'>H3_1</span> <span class='hs-varid'>c</span><span class='hs-layout'>)</span> <span class='hs-layout'>(</span><span class='hs-varid'>d</span><span class='hs-conop'>:</span><span class='hs-varid'>e</span><span class='hs-conop'>:</span><span class='hs-varid'>es</span><span class='hs-layout'>)</span> <span class='hs-varid'>k</span> <span class='hs-keyword'>_</span>   <span class='hs-keyglyph'>=</span> <span class='hs-varid'>k</span> <span class='hs-varop'>$</span> <span class='hs-varid'>b3</span> <span class='hs-varid'>c</span> <span class='hs-varid'>d</span> <span class='hs-varid'>e</span> <span class='hs-varop'>`mappend`</span> <span class='hs-varid'>invalidChars</span> <span class='hs-varid'>es</span>
+<a name="line-181"></a><span class='hs-definition'>merge</span> <span class='hs-layout'>(</span><span class='hs-conid'>H3_2</span> <span class='hs-varid'>c</span> <span class='hs-varid'>d</span><span class='hs-layout'>)</span> <span class='hs-conid'>[]</span> <span class='hs-keyword'>_</span> <span class='hs-varid'>p</span>       <span class='hs-keyglyph'>=</span> <span class='hs-varid'>p</span> <span class='hs-varop'>$</span> <span class='hs-conid'>H3_2</span> <span class='hs-varid'>c</span> <span class='hs-varid'>d</span>
+<a name="line-182"></a><span class='hs-definition'>merge</span> <span class='hs-layout'>(</span><span class='hs-conid'>H3_2</span> <span class='hs-varid'>c</span> <span class='hs-varid'>d</span><span class='hs-layout'>)</span> <span class='hs-layout'>(</span><span class='hs-varid'>e</span><span class='hs-conop'>:</span><span class='hs-varid'>es</span><span class='hs-layout'>)</span> <span class='hs-varid'>k</span> <span class='hs-keyword'>_</span>   <span class='hs-keyglyph'>=</span> <span class='hs-varid'>k</span> <span class='hs-varop'>$</span> <span class='hs-varid'>b3</span> <span class='hs-varid'>c</span> <span class='hs-varid'>d</span> <span class='hs-varid'>e</span> <span class='hs-varop'>`mappend`</span> <span class='hs-varid'>invalidChars</span> <span class='hs-varid'>es</span>
+<a name="line-183"></a><span class='hs-definition'>merge</span> <span class='hs-layout'>(</span><span class='hs-conid'>H4_1</span> <span class='hs-varid'>c</span><span class='hs-layout'>)</span> <span class='hs-conid'>[]</span> <span class='hs-keyword'>_</span> <span class='hs-varid'>p</span>         <span class='hs-keyglyph'>=</span> <span class='hs-varid'>p</span> <span class='hs-varop'>$</span> <span class='hs-conid'>H4_1</span> <span class='hs-varid'>c</span>
+<a name="line-184"></a><span class='hs-definition'>merge</span> <span class='hs-layout'>(</span><span class='hs-conid'>H4_1</span> <span class='hs-varid'>c</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>[</span><span class='hs-varid'>d</span><span class='hs-keyglyph'>]</span> <span class='hs-keyword'>_</span> <span class='hs-varid'>p</span>        <span class='hs-keyglyph'>=</span> <span class='hs-varid'>p</span> <span class='hs-varop'>$</span> <span class='hs-conid'>H4_2</span> <span class='hs-varid'>c</span> <span class='hs-varid'>d</span>
+<a name="line-185"></a><span class='hs-definition'>merge</span> <span class='hs-layout'>(</span><span class='hs-conid'>H4_1</span> <span class='hs-varid'>c</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>[</span><span class='hs-varid'>d</span><span class='hs-layout'>,</span><span class='hs-varid'>e</span><span class='hs-keyglyph'>]</span> <span class='hs-keyword'>_</span> <span class='hs-varid'>p</span>      <span class='hs-keyglyph'>=</span> <span class='hs-varid'>p</span> <span class='hs-varop'>$</span> <span class='hs-conid'>H4_3</span> <span class='hs-varid'>c</span> <span class='hs-varid'>d</span> <span class='hs-varid'>e</span>
+<a name="line-186"></a><span class='hs-definition'>merge</span> <span class='hs-layout'>(</span><span class='hs-conid'>H4_1</span> <span class='hs-varid'>c</span><span class='hs-layout'>)</span> <span class='hs-layout'>(</span><span class='hs-varid'>d</span><span class='hs-conop'>:</span><span class='hs-varid'>e</span><span class='hs-conop'>:</span><span class='hs-varid'>f</span><span class='hs-conop'>:</span><span class='hs-varid'>fs</span><span class='hs-layout'>)</span> <span class='hs-varid'>k</span> <span class='hs-keyword'>_</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>k</span> <span class='hs-varop'>$</span> <span class='hs-varid'>b4</span> <span class='hs-varid'>c</span> <span class='hs-varid'>d</span> <span class='hs-varid'>e</span> <span class='hs-varid'>f</span> <span class='hs-varop'>`mappend`</span> <span class='hs-varid'>invalidChars</span> <span class='hs-varid'>fs</span>
+<a name="line-187"></a><span class='hs-definition'>merge</span> <span class='hs-layout'>(</span><span class='hs-conid'>H4_2</span> <span class='hs-varid'>c</span> <span class='hs-varid'>d</span><span class='hs-layout'>)</span> <span class='hs-conid'>[]</span> <span class='hs-keyword'>_</span> <span class='hs-varid'>p</span>       <span class='hs-keyglyph'>=</span> <span class='hs-varid'>p</span> <span class='hs-varop'>$</span> <span class='hs-conid'>H4_2</span> <span class='hs-varid'>c</span> <span class='hs-varid'>d</span> 
+<a name="line-188"></a><span class='hs-definition'>merge</span> <span class='hs-layout'>(</span><span class='hs-conid'>H4_2</span> <span class='hs-varid'>c</span> <span class='hs-varid'>d</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>[</span><span class='hs-varid'>e</span><span class='hs-keyglyph'>]</span> <span class='hs-keyword'>_</span> <span class='hs-varid'>p</span>      <span class='hs-keyglyph'>=</span> <span class='hs-varid'>p</span> <span class='hs-varop'>$</span> <span class='hs-conid'>H4_3</span> <span class='hs-varid'>c</span> <span class='hs-varid'>d</span> <span class='hs-varid'>e</span>
+<a name="line-189"></a><span class='hs-definition'>merge</span> <span class='hs-layout'>(</span><span class='hs-conid'>H4_2</span> <span class='hs-varid'>c</span> <span class='hs-varid'>d</span><span class='hs-layout'>)</span> <span class='hs-layout'>(</span><span class='hs-varid'>e</span><span class='hs-conop'>:</span><span class='hs-varid'>f</span><span class='hs-conop'>:</span><span class='hs-varid'>fs</span><span class='hs-layout'>)</span> <span class='hs-varid'>k</span> <span class='hs-keyword'>_</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>k</span> <span class='hs-varop'>$</span> <span class='hs-varid'>b4</span> <span class='hs-varid'>c</span> <span class='hs-varid'>d</span> <span class='hs-varid'>e</span> <span class='hs-varid'>f</span> <span class='hs-varop'>`mappend`</span> <span class='hs-varid'>invalidChars</span> <span class='hs-varid'>fs</span>
+<a name="line-190"></a><span class='hs-definition'>merge</span> <span class='hs-layout'>(</span><span class='hs-conid'>H4_3</span> <span class='hs-varid'>c</span> <span class='hs-varid'>d</span> <span class='hs-varid'>e</span><span class='hs-layout'>)</span> <span class='hs-conid'>[]</span> <span class='hs-keyword'>_</span> <span class='hs-varid'>p</span>     <span class='hs-keyglyph'>=</span> <span class='hs-varid'>p</span> <span class='hs-varop'>$</span> <span class='hs-conid'>H4_3</span> <span class='hs-varid'>c</span> <span class='hs-varid'>d</span> <span class='hs-varid'>e</span>
+<a name="line-191"></a><span class='hs-definition'>merge</span> <span class='hs-layout'>(</span><span class='hs-conid'>H4_3</span> <span class='hs-varid'>c</span> <span class='hs-varid'>d</span> <span class='hs-varid'>e</span><span class='hs-layout'>)</span> <span class='hs-layout'>(</span><span class='hs-varid'>f</span><span class='hs-conop'>:</span><span class='hs-varid'>fs</span><span class='hs-layout'>)</span> <span class='hs-varid'>k</span> <span class='hs-keyword'>_</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>k</span> <span class='hs-varop'>$</span> <span class='hs-varid'>b4</span> <span class='hs-varid'>c</span> <span class='hs-varid'>d</span> <span class='hs-varid'>e</span> <span class='hs-varid'>f</span> <span class='hs-varop'>`mappend`</span> <span class='hs-varid'>invalidChars</span> <span class='hs-varid'>fs</span>
+<a name="line-192"></a>
+<a name="line-193"></a><span class='hs-keyword'>instance</span> <span class='hs-conid'>CharReducer</span> <span class='hs-varid'>m</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>Monoid</span> <span class='hs-layout'>(</span><span class='hs-conid'>UTF8</span> <span class='hs-varid'>m</span><span class='hs-layout'>)</span> <span class='hs-keyword'>where</span>
+<a name="line-194"></a>    <span class='hs-varid'>mempty</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>T</span> <span class='hs-conid'>[]</span>
+<a name="line-195"></a>    <span class='hs-conid'>T</span> <span class='hs-varid'>c</span> <span class='hs-varop'>`mappend`</span> <span class='hs-conid'>T</span> <span class='hs-varid'>d</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>T</span> <span class='hs-layout'>(</span><span class='hs-varid'>c</span> <span class='hs-varop'>++</span> <span class='hs-varid'>d</span><span class='hs-layout'>)</span>
+<a name="line-196"></a>    <span class='hs-conid'>T</span> <span class='hs-varid'>c</span> <span class='hs-varop'>`mappend`</span> <span class='hs-conid'>S</span> <span class='hs-varid'>l</span> <span class='hs-varid'>m</span> <span class='hs-varid'>r</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>S</span> <span class='hs-layout'>(</span><span class='hs-varid'>c</span> <span class='hs-varop'>++</span> <span class='hs-varid'>l</span><span class='hs-layout'>)</span> <span class='hs-varid'>m</span> <span class='hs-varid'>r</span>
+<a name="line-197"></a>    <span class='hs-conid'>S</span> <span class='hs-varid'>l</span> <span class='hs-varid'>m</span> <span class='hs-varid'>c</span> <span class='hs-varop'>`mappend`</span> <span class='hs-conid'>S</span> <span class='hs-varid'>c'</span> <span class='hs-varid'>m'</span> <span class='hs-varid'>r</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>S</span> <span class='hs-varid'>l</span> <span class='hs-layout'>(</span><span class='hs-varid'>m</span> <span class='hs-varop'>`mappend`</span> <span class='hs-varid'>merge</span> <span class='hs-varid'>c</span> <span class='hs-varid'>c'</span> <span class='hs-varid'>id</span> <span class='hs-varid'>flushH</span> <span class='hs-varop'>`mappend`</span> <span class='hs-varid'>m'</span><span class='hs-layout'>)</span> <span class='hs-varid'>r</span>
+<a name="line-198"></a>    <span class='hs-varid'>s</span><span class='hs-keyglyph'>@</span><span class='hs-layout'>(</span><span class='hs-conid'>S</span> <span class='hs-keyword'>_</span> <span class='hs-keyword'>_</span> <span class='hs-keyword'>_</span><span class='hs-layout'>)</span> <span class='hs-varop'>`mappend`</span> <span class='hs-conid'>T</span> <span class='hs-conid'>[]</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>s</span>
+<a name="line-199"></a>    <span class='hs-conid'>S</span> <span class='hs-varid'>l</span> <span class='hs-varid'>m</span> <span class='hs-varid'>c</span> <span class='hs-varop'>`mappend`</span> <span class='hs-conid'>T</span> <span class='hs-varid'>c'</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>merge</span> <span class='hs-varid'>c</span> <span class='hs-varid'>c'</span> <span class='hs-varid'>k</span> <span class='hs-layout'>(</span><span class='hs-conid'>S</span> <span class='hs-varid'>l</span> <span class='hs-varid'>m</span><span class='hs-layout'>)</span> <span class='hs-keyword'>where</span>
+<a name="line-200"></a>        <span class='hs-varid'>k</span> <span class='hs-varid'>m'</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>S</span> <span class='hs-varid'>l</span> <span class='hs-layout'>(</span><span class='hs-varid'>m</span> <span class='hs-varop'>`mappend`</span> <span class='hs-varid'>m'</span><span class='hs-layout'>)</span> <span class='hs-conid'>H0</span>
+<a name="line-201"></a>
+<a name="line-202"></a><span class='hs-keyword'>instance</span> <span class='hs-conid'>CharReducer</span> <span class='hs-varid'>m</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>Reducer</span> <span class='hs-conid'>Word8</span> <span class='hs-layout'>(</span><span class='hs-conid'>UTF8</span> <span class='hs-varid'>m</span><span class='hs-layout'>)</span> <span class='hs-keyword'>where</span>
+<a name="line-203"></a>    <span class='hs-varid'>unit</span> <span class='hs-varid'>c</span> <span class='hs-keyglyph'>|</span> <span class='hs-varid'>c</span> <span class='hs-varop'>&gt;=</span> <span class='hs-num'>0x80</span> <span class='hs-varop'>&amp;&amp;</span> <span class='hs-varid'>c</span> <span class='hs-varop'>&lt;</span> <span class='hs-num'>0xc0</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>T</span> <span class='hs-keyglyph'>[</span><span class='hs-varid'>c</span><span class='hs-keyglyph'>]</span>
+<a name="line-204"></a>           <span class='hs-keyglyph'>|</span> <span class='hs-varid'>otherwise</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>snocH</span> <span class='hs-conid'>H0</span> <span class='hs-varid'>c</span> <span class='hs-layout'>(</span><span class='hs-conid'>S</span> <span class='hs-conid'>[]</span><span class='hs-layout'>)</span> <span class='hs-varid'>mempty</span>
+<a name="line-205"></a>    <span class='hs-conid'>S</span> <span class='hs-varid'>t</span> <span class='hs-varid'>m</span> <span class='hs-varid'>h</span> <span class='hs-varop'>`snoc`</span> <span class='hs-varid'>c</span>        <span class='hs-keyglyph'>=</span> <span class='hs-varid'>snocH</span> <span class='hs-varid'>h</span> <span class='hs-varid'>c</span> <span class='hs-layout'>(</span><span class='hs-conid'>S</span> <span class='hs-varid'>t</span><span class='hs-layout'>)</span> <span class='hs-varid'>m</span>
+<a name="line-206"></a>    <span class='hs-conid'>T</span> <span class='hs-varid'>t</span>     <span class='hs-varop'>`snoc`</span> <span class='hs-varid'>c</span>        <span class='hs-keyglyph'>|</span> <span class='hs-varid'>c</span> <span class='hs-varop'>&gt;=</span> <span class='hs-num'>0x80</span> <span class='hs-varop'>&amp;&amp;</span> <span class='hs-varid'>c</span> <span class='hs-varop'>&lt;</span> <span class='hs-num'>0xc0</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>T</span> <span class='hs-layout'>(</span><span class='hs-varid'>t</span> <span class='hs-varop'>++</span> <span class='hs-keyglyph'>[</span><span class='hs-varid'>c</span><span class='hs-keyglyph'>]</span><span class='hs-layout'>)</span>
+<a name="line-207"></a>                            <span class='hs-keyglyph'>|</span> <span class='hs-varid'>otherwise</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>snocH</span> <span class='hs-conid'>H0</span> <span class='hs-varid'>c</span> <span class='hs-layout'>(</span><span class='hs-conid'>S</span> <span class='hs-varid'>t</span><span class='hs-layout'>)</span> <span class='hs-varid'>mempty</span>
+<a name="line-208"></a>
+<a name="line-209"></a>    <span class='hs-varid'>c</span>       <span class='hs-varop'>`cons`</span> <span class='hs-conid'>T</span> <span class='hs-varid'>cs</span>     <span class='hs-keyglyph'>=</span> <span class='hs-varid'>consT</span> <span class='hs-varid'>c</span> <span class='hs-varid'>cs</span> <span class='hs-layout'>(</span><span class='hs-conid'>S</span> <span class='hs-conid'>[]</span> <span class='hs-varid'>mempty</span><span class='hs-layout'>)</span> <span class='hs-layout'>(</span><span class='hs-varid'>flip</span> <span class='hs-layout'>(</span><span class='hs-conid'>S</span> <span class='hs-conid'>[]</span><span class='hs-layout'>)</span> <span class='hs-conid'>H0</span><span class='hs-layout'>)</span> <span class='hs-conid'>T</span>
+<a name="line-210"></a>    <span class='hs-varid'>c</span>       <span class='hs-varop'>`cons`</span> <span class='hs-conid'>S</span> <span class='hs-varid'>cs</span> <span class='hs-varid'>m</span> <span class='hs-varid'>h</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>consT</span> <span class='hs-varid'>c</span> <span class='hs-varid'>cs</span> <span class='hs-varid'>k1</span> <span class='hs-varid'>k2</span> <span class='hs-varid'>k3</span> <span class='hs-keyword'>where</span>
+<a name="line-211"></a>        <span class='hs-varid'>k1</span> <span class='hs-varid'>h'</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>S</span> <span class='hs-conid'>[]</span> <span class='hs-layout'>(</span><span class='hs-varid'>flushH</span> <span class='hs-varid'>h'</span> <span class='hs-varop'>`mappend`</span> <span class='hs-varid'>m</span><span class='hs-layout'>)</span> <span class='hs-varid'>h</span>
+<a name="line-212"></a>        <span class='hs-varid'>k2</span> <span class='hs-varid'>m'</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>S</span> <span class='hs-conid'>[]</span> <span class='hs-layout'>(</span><span class='hs-varid'>m'</span> <span class='hs-varop'>`mappend`</span> <span class='hs-varid'>m</span><span class='hs-layout'>)</span> <span class='hs-varid'>h</span>
+<a name="line-213"></a>        <span class='hs-varid'>k3</span> <span class='hs-varid'>t'</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>S</span> <span class='hs-varid'>t'</span> <span class='hs-varid'>m</span> <span class='hs-varid'>h</span>
+<a name="line-214"></a>    
+<a name="line-215"></a><span class='hs-keyword'>instance</span> <span class='hs-conid'>Functor</span> <span class='hs-conid'>UTF8</span> <span class='hs-keyword'>where</span>
+<a name="line-216"></a>    <span class='hs-varid'>fmap</span> <span class='hs-varid'>f</span> <span class='hs-layout'>(</span><span class='hs-conid'>S</span> <span class='hs-varid'>t</span> <span class='hs-varid'>x</span> <span class='hs-varid'>h</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>S</span> <span class='hs-varid'>t</span> <span class='hs-layout'>(</span><span class='hs-varid'>f</span> <span class='hs-varid'>x</span><span class='hs-layout'>)</span> <span class='hs-varid'>h</span>
+<a name="line-217"></a>    <span class='hs-varid'>fmap</span> <span class='hs-keyword'>_</span> <span class='hs-layout'>(</span><span class='hs-conid'>T</span> <span class='hs-varid'>t</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>T</span> <span class='hs-varid'>t</span>
+<a name="line-218"></a>
+<a name="line-219"></a><span class='hs-keyword'>instance</span> <span class='hs-conid'>Pointed</span> <span class='hs-conid'>UTF8</span> <span class='hs-keyword'>where</span>
+<a name="line-220"></a>    <span class='hs-varid'>point</span> <span class='hs-varid'>f</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>S</span> <span class='hs-conid'>[]</span> <span class='hs-varid'>f</span> <span class='hs-conid'>H0</span>
+<a name="line-221"></a>
+<a name="line-222"></a><a name="runUTF8"></a><span class='hs-definition'>runUTF8</span> <span class='hs-keyglyph'>::</span> <span class='hs-conid'>CharReducer</span> <span class='hs-varid'>m</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>UTF8</span> <span class='hs-varid'>m</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-varid'>m</span> 
+<a name="line-223"></a><span class='hs-definition'>runUTF8</span> <span class='hs-layout'>(</span><span class='hs-conid'>T</span> <span class='hs-varid'>t</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>flushT</span> <span class='hs-varid'>t</span>
+<a name="line-224"></a><span class='hs-definition'>runUTF8</span> <span class='hs-layout'>(</span><span class='hs-conid'>S</span> <span class='hs-varid'>t</span> <span class='hs-varid'>m</span> <span class='hs-varid'>h</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>flushT</span> <span class='hs-varid'>t</span> <span class='hs-varop'>`mappend`</span> <span class='hs-varid'>m</span> <span class='hs-varop'>`mappend`</span> <span class='hs-varid'>flushH</span> <span class='hs-varid'>h</span>
+</pre></body>
+</html>
addfile ./dist/doc/html/monoids/src/Data-Monoid-Lexical-Words.html
hunk ./dist/doc/html/monoids/src/Data-Monoid-Lexical-Words.html 1
+<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
+<html>
+<head>
+<!-- Generated by HsColour, http://www.cs.york.ac.uk/fp/darcs/hscolour/ -->
+<title>Data/Monoid/Lexical/Words.hs</title>
+<link type='text/css' rel='stylesheet' href='hscolour.css' />
+</head>
+<body>
+<pre><a name="line-1"></a><span class='hs-comment'>{-# LANGUAGE FlexibleInstances, MultiParamTypeClasses, FlexibleContexts, GeneralizedNewtypeDeriving, ParallelListComp, TypeFamilies, OverloadedStrings, UndecidableInstances #-}</span>
+<a name="line-2"></a>
+<a name="line-3"></a><span class='hs-comment'>-----------------------------------------------------------------------------</span>
+<a name="line-4"></a><span class='hs-comment'>-- |</span>
+<a name="line-5"></a><span class='hs-comment'>-- Module      :  Data.Monoid.Lexical.Words</span>
+<a name="line-6"></a><span class='hs-comment'>-- Copyright   :  (c) Edward Kmett 2009</span>
+<a name="line-7"></a><span class='hs-comment'>-- License     :  BSD-style</span>
+<a name="line-8"></a><span class='hs-comment'>-- Maintainer  :  libraries@haskell.org</span>
+<a name="line-9"></a><span class='hs-comment'>-- Stability   :  experimental</span>
+<a name="line-10"></a><span class='hs-comment'>-- Portability :  non-portable (MPTCs, OverloadedStrings)</span>
+<a name="line-11"></a><span class='hs-comment'>--</span>
+<a name="line-12"></a><span class='hs-comment'>-- A simple demonstration of tokenizing a 'Generator' into distinct words </span>
+<a name="line-13"></a><span class='hs-comment'>-- and/or lines using a word-parsing 'Monoid' that accumulates partial </span>
+<a name="line-14"></a><span class='hs-comment'>-- information about words and then builds up a token stream.</span>
+<a name="line-15"></a><span class='hs-comment'>--</span>
+<a name="line-16"></a><span class='hs-comment'>-----------------------------------------------------------------------------</span>
+<a name="line-17"></a>
+<a name="line-18"></a><span class='hs-keyword'>module</span> <span class='hs-conid'>Data</span><span class='hs-varop'>.</span><span class='hs-conid'>Monoid</span><span class='hs-varop'>.</span><span class='hs-conid'>Lexical</span><span class='hs-varop'>.</span><span class='hs-conid'>Words</span> 
+<a name="line-19"></a>    <span class='hs-layout'>(</span> <span class='hs-keyword'>module</span> <span class='hs-conid'>Data</span><span class='hs-varop'>.</span><span class='hs-conid'>Monoid</span><span class='hs-varop'>.</span><span class='hs-conid'>Reducer</span><span class='hs-varop'>.</span><span class='hs-conid'>Char</span>
+<a name="line-20"></a>    <span class='hs-comment'>-- * Words</span>
+<a name="line-21"></a>    <span class='hs-layout'>,</span> <span class='hs-conid'>Words</span>
+<a name="line-22"></a>    <span class='hs-layout'>,</span> <span class='hs-varid'>runWords</span>
+<a name="line-23"></a>    <span class='hs-layout'>,</span> <span class='hs-conid'>Unspaced</span><span class='hs-layout'>(</span><span class='hs-varid'>runUnspaced</span><span class='hs-layout'>)</span>
+<a name="line-24"></a>    <span class='hs-layout'>,</span> <span class='hs-varid'>wordsFrom</span>
+<a name="line-25"></a>    <span class='hs-comment'>-- * Lines</span>
+<a name="line-26"></a>    <span class='hs-layout'>,</span> <span class='hs-conid'>Lines</span>
+<a name="line-27"></a>    <span class='hs-layout'>,</span> <span class='hs-varid'>runLines</span>
+<a name="line-28"></a>    <span class='hs-layout'>,</span> <span class='hs-conid'>Unlined</span><span class='hs-layout'>(</span><span class='hs-varid'>runUnlined</span><span class='hs-layout'>)</span>
+<a name="line-29"></a>    <span class='hs-layout'>,</span> <span class='hs-varid'>linesFrom</span>
+<a name="line-30"></a>    <span class='hs-layout'>)</span> <span class='hs-keyword'>where</span>
+<a name="line-31"></a>
+<a name="line-32"></a><span class='hs-keyword'>import</span> <span class='hs-conid'>Data</span><span class='hs-varop'>.</span><span class='hs-conid'>String</span>
+<a name="line-33"></a><span class='hs-keyword'>import</span> <span class='hs-conid'>Data</span><span class='hs-varop'>.</span><span class='hs-conid'>Char</span> <span class='hs-layout'>(</span><span class='hs-varid'>isSpace</span><span class='hs-layout'>)</span>
+<a name="line-34"></a><span class='hs-keyword'>import</span> <span class='hs-conid'>Data</span><span class='hs-varop'>.</span><span class='hs-conid'>Maybe</span> <span class='hs-layout'>(</span><span class='hs-varid'>maybeToList</span><span class='hs-layout'>)</span>
+<a name="line-35"></a><span class='hs-keyword'>import</span> <span class='hs-conid'>Data</span><span class='hs-varop'>.</span><span class='hs-conid'>Monoid</span><span class='hs-varop'>.</span><span class='hs-conid'>Reducer</span><span class='hs-varop'>.</span><span class='hs-conid'>Char</span>
+<a name="line-36"></a><span class='hs-keyword'>import</span> <span class='hs-conid'>Data</span><span class='hs-varop'>.</span><span class='hs-conid'>Monoid</span><span class='hs-varop'>.</span><span class='hs-conid'>Generator</span>
+<a name="line-37"></a><span class='hs-keyword'>import</span> <span class='hs-conid'>Control</span><span class='hs-varop'>.</span><span class='hs-conid'>Functor</span><span class='hs-varop'>.</span><span class='hs-conid'>Pointed</span>
+<a name="line-38"></a>
+<a name="line-39"></a><a name="Words"></a><span class='hs-comment'>-- | A 'CharReducer' transformer that breaks a 'Char' 'Generator' into distinct words, feeding a 'Char' 'Reducer' each line in turn</span>
+<a name="line-40"></a><a name="Words"></a><span class='hs-keyword'>data</span> <span class='hs-conid'>Words</span> <span class='hs-varid'>m</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>Chunk</span> <span class='hs-layout'>(</span><span class='hs-conid'>Maybe</span> <span class='hs-varid'>m</span><span class='hs-layout'>)</span>
+<a name="line-41"></a>             <span class='hs-keyglyph'>|</span> <span class='hs-conid'>Segment</span> <span class='hs-layout'>(</span><span class='hs-conid'>Maybe</span> <span class='hs-varid'>m</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>[</span><span class='hs-varid'>m</span><span class='hs-keyglyph'>]</span> <span class='hs-layout'>(</span><span class='hs-conid'>Maybe</span> <span class='hs-varid'>m</span><span class='hs-layout'>)</span>
+<a name="line-42"></a>    <span class='hs-keyword'>deriving</span> <span class='hs-layout'>(</span><span class='hs-conid'>Show</span><span class='hs-layout'>,</span><span class='hs-conid'>Read</span><span class='hs-layout'>)</span>
+<a name="line-43"></a>
+<a name="line-44"></a><a name="runWords"></a><span class='hs-comment'>-- | Extract the matched words from the 'Words' 'Monoid'</span>
+<a name="line-45"></a><span class='hs-definition'>runWords</span> <span class='hs-keyglyph'>::</span> <span class='hs-conid'>Words</span> <span class='hs-varid'>m</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-keyglyph'>[</span><span class='hs-varid'>m</span><span class='hs-keyglyph'>]</span>
+<a name="line-46"></a><span class='hs-definition'>runWords</span> <span class='hs-layout'>(</span><span class='hs-conid'>Chunk</span> <span class='hs-varid'>m</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>maybeToList</span> <span class='hs-varid'>m</span>
+<a name="line-47"></a><span class='hs-definition'>runWords</span> <span class='hs-layout'>(</span><span class='hs-conid'>Segment</span> <span class='hs-varid'>l</span> <span class='hs-varid'>m</span> <span class='hs-varid'>r</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>maybeToList</span> <span class='hs-varid'>l</span> <span class='hs-varop'>++</span> <span class='hs-varid'>m</span> <span class='hs-varop'>++</span> <span class='hs-varid'>maybeToList</span> <span class='hs-varid'>r</span>
+<a name="line-48"></a>
+<a name="line-49"></a><span class='hs-keyword'>instance</span> <span class='hs-conid'>Monoid</span> <span class='hs-varid'>m</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>Monoid</span> <span class='hs-layout'>(</span><span class='hs-conid'>Words</span> <span class='hs-varid'>m</span><span class='hs-layout'>)</span> <span class='hs-keyword'>where</span>
+<a name="line-50"></a>    <span class='hs-varid'>mempty</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>Chunk</span> <span class='hs-varid'>mempty</span>
+<a name="line-51"></a>    <span class='hs-conid'>Chunk</span> <span class='hs-varid'>l</span> <span class='hs-varop'>`mappend`</span> <span class='hs-conid'>Chunk</span> <span class='hs-varid'>r</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>Chunk</span> <span class='hs-layout'>(</span><span class='hs-varid'>l</span> <span class='hs-varop'>`mappend`</span> <span class='hs-varid'>r</span><span class='hs-layout'>)</span>
+<a name="line-52"></a>    <span class='hs-conid'>Chunk</span> <span class='hs-varid'>l</span> <span class='hs-varop'>`mappend`</span> <span class='hs-conid'>Segment</span> <span class='hs-varid'>l'</span> <span class='hs-varid'>m</span> <span class='hs-varid'>r</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>Segment</span> <span class='hs-layout'>(</span><span class='hs-varid'>l</span> <span class='hs-varop'>`mappend`</span> <span class='hs-varid'>l'</span><span class='hs-layout'>)</span> <span class='hs-varid'>m</span> <span class='hs-varid'>r</span>
+<a name="line-53"></a>    <span class='hs-conid'>Segment</span> <span class='hs-varid'>l</span> <span class='hs-varid'>m</span> <span class='hs-varid'>r</span> <span class='hs-varop'>`mappend`</span> <span class='hs-conid'>Chunk</span> <span class='hs-varid'>r'</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>Segment</span> <span class='hs-varid'>l</span> <span class='hs-varid'>m</span> <span class='hs-layout'>(</span><span class='hs-varid'>r</span> <span class='hs-varop'>`mappend`</span> <span class='hs-varid'>r'</span><span class='hs-layout'>)</span>
+<a name="line-54"></a>    <span class='hs-conid'>Segment</span> <span class='hs-varid'>l</span> <span class='hs-varid'>m</span> <span class='hs-varid'>r</span> <span class='hs-varop'>`mappend`</span> <span class='hs-conid'>Segment</span> <span class='hs-varid'>l'</span> <span class='hs-varid'>m'</span> <span class='hs-varid'>r'</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>Segment</span> <span class='hs-varid'>l</span> <span class='hs-layout'>(</span><span class='hs-varid'>m</span> <span class='hs-varop'>++</span> <span class='hs-varid'>maybeToList</span> <span class='hs-layout'>(</span><span class='hs-varid'>r</span> <span class='hs-varop'>`mappend`</span> <span class='hs-varid'>l'</span><span class='hs-layout'>)</span> <span class='hs-varop'>++</span> <span class='hs-varid'>m'</span><span class='hs-layout'>)</span> <span class='hs-varid'>r'</span>
+<a name="line-55"></a>
+<a name="line-56"></a><span class='hs-keyword'>instance</span> <span class='hs-conid'>Reducer</span> <span class='hs-conid'>Char</span> <span class='hs-varid'>m</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>Reducer</span> <span class='hs-conid'>Char</span> <span class='hs-layout'>(</span><span class='hs-conid'>Words</span> <span class='hs-varid'>m</span><span class='hs-layout'>)</span> <span class='hs-keyword'>where</span>
+<a name="line-57"></a>    <span class='hs-varid'>unit</span> <span class='hs-varid'>c</span> <span class='hs-keyglyph'>|</span> <span class='hs-varid'>isSpace</span> <span class='hs-varid'>c</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>Segment</span> <span class='hs-layout'>(</span><span class='hs-conid'>Just</span> <span class='hs-layout'>(</span><span class='hs-varid'>unit</span> <span class='hs-varid'>c</span><span class='hs-layout'>)</span><span class='hs-layout'>)</span> <span class='hs-conid'>[]</span> <span class='hs-varid'>mempty</span>
+<a name="line-58"></a>           <span class='hs-keyglyph'>|</span> <span class='hs-varid'>otherwise</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>Chunk</span> <span class='hs-layout'>(</span><span class='hs-conid'>Just</span> <span class='hs-layout'>(</span><span class='hs-varid'>unit</span> <span class='hs-varid'>c</span><span class='hs-layout'>)</span><span class='hs-layout'>)</span>
+<a name="line-59"></a>
+<a name="line-60"></a><span class='hs-keyword'>instance</span> <span class='hs-conid'>Functor</span> <span class='hs-conid'>Words</span> <span class='hs-keyword'>where</span>
+<a name="line-61"></a>    <span class='hs-varid'>fmap</span> <span class='hs-varid'>f</span> <span class='hs-layout'>(</span><span class='hs-conid'>Chunk</span> <span class='hs-varid'>m</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>Chunk</span> <span class='hs-layout'>(</span><span class='hs-varid'>fmap</span> <span class='hs-varid'>f</span> <span class='hs-varid'>m</span><span class='hs-layout'>)</span>
+<a name="line-62"></a>    <span class='hs-varid'>fmap</span> <span class='hs-varid'>f</span> <span class='hs-layout'>(</span><span class='hs-conid'>Segment</span> <span class='hs-varid'>m</span> <span class='hs-varid'>ms</span> <span class='hs-varid'>m'</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>Segment</span> <span class='hs-layout'>(</span><span class='hs-varid'>fmap</span> <span class='hs-varid'>f</span> <span class='hs-varid'>m</span><span class='hs-layout'>)</span> <span class='hs-layout'>(</span><span class='hs-varid'>fmap</span> <span class='hs-varid'>f</span> <span class='hs-varid'>ms</span><span class='hs-layout'>)</span> <span class='hs-layout'>(</span><span class='hs-varid'>fmap</span> <span class='hs-varid'>f</span> <span class='hs-varid'>m'</span><span class='hs-layout'>)</span>
+<a name="line-63"></a>
+<a name="line-64"></a><span class='hs-keyword'>instance</span> <span class='hs-layout'>(</span><span class='hs-conid'>CharReducer</span> <span class='hs-varid'>m</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>CharReducer</span> <span class='hs-layout'>(</span><span class='hs-conid'>Words</span> <span class='hs-varid'>m</span><span class='hs-layout'>)</span> <span class='hs-keyword'>where</span>
+<a name="line-65"></a>    <span class='hs-varid'>invalidChar</span> <span class='hs-varid'>xs</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>Segment</span> <span class='hs-layout'>(</span><span class='hs-conid'>Just</span> <span class='hs-layout'>(</span><span class='hs-varid'>invalidChar</span> <span class='hs-varid'>xs</span><span class='hs-layout'>)</span><span class='hs-layout'>)</span> <span class='hs-conid'>[]</span> <span class='hs-varid'>mempty</span>
+<a name="line-66"></a>
+<a name="line-67"></a><span class='hs-keyword'>instance</span> <span class='hs-conid'>Reducer</span> <span class='hs-conid'>Char</span> <span class='hs-varid'>m</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>IsString</span> <span class='hs-layout'>(</span><span class='hs-conid'>Words</span> <span class='hs-varid'>m</span><span class='hs-layout'>)</span> <span class='hs-keyword'>where</span>
+<a name="line-68"></a>    <span class='hs-varid'>fromString</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>reduce</span>
+<a name="line-69"></a>
+<a name="line-70"></a><a name="Lines"></a><span class='hs-comment'>-- | A 'CharReducer' transformer that breaks a 'Char' 'Generator' into distinct lines, feeding a 'Char' 'Reducer' each line in turn.</span>
+<a name="line-71"></a><a name="Lines"></a><span class='hs-keyword'>newtype</span> <span class='hs-conid'>Lines</span> <span class='hs-varid'>m</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>Lines</span> <span class='hs-layout'>(</span><span class='hs-conid'>Words</span> <span class='hs-varid'>m</span><span class='hs-layout'>)</span> <span class='hs-keyword'>deriving</span> <span class='hs-layout'>(</span><span class='hs-conid'>Show</span><span class='hs-layout'>,</span><span class='hs-conid'>Read</span><span class='hs-layout'>,</span><span class='hs-conid'>Monoid</span><span class='hs-layout'>,</span><span class='hs-conid'>Functor</span><span class='hs-layout'>)</span>
+<a name="line-72"></a>
+<a name="line-73"></a><span class='hs-keyword'>instance</span> <span class='hs-conid'>Reducer</span> <span class='hs-conid'>Char</span> <span class='hs-varid'>m</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>Reducer</span> <span class='hs-conid'>Char</span> <span class='hs-layout'>(</span><span class='hs-conid'>Lines</span> <span class='hs-varid'>m</span><span class='hs-layout'>)</span> <span class='hs-keyword'>where</span>
+<a name="line-74"></a>    <span class='hs-varid'>unit</span> <span class='hs-chr'>'\n'</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>Lines</span> <span class='hs-varop'>$</span> <span class='hs-conid'>Segment</span> <span class='hs-layout'>(</span><span class='hs-conid'>Just</span> <span class='hs-layout'>(</span><span class='hs-varid'>unit</span> <span class='hs-chr'>'\n'</span><span class='hs-layout'>)</span><span class='hs-layout'>)</span> <span class='hs-conid'>[]</span> <span class='hs-varid'>mempty</span>
+<a name="line-75"></a>    <span class='hs-varid'>unit</span> <span class='hs-varid'>c</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>Lines</span> <span class='hs-varop'>$</span> <span class='hs-conid'>Chunk</span> <span class='hs-layout'>(</span><span class='hs-conid'>Just</span> <span class='hs-layout'>(</span><span class='hs-varid'>unit</span> <span class='hs-varid'>c</span><span class='hs-layout'>)</span><span class='hs-layout'>)</span>
+<a name="line-76"></a>
+<a name="line-77"></a><span class='hs-keyword'>instance</span> <span class='hs-layout'>(</span><span class='hs-conid'>CharReducer</span> <span class='hs-varid'>m</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>CharReducer</span> <span class='hs-layout'>(</span><span class='hs-conid'>Lines</span> <span class='hs-varid'>m</span><span class='hs-layout'>)</span> <span class='hs-keyword'>where</span>
+<a name="line-78"></a>    <span class='hs-varid'>invalidChar</span> <span class='hs-varid'>xs</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>Lines</span> <span class='hs-varop'>$</span> <span class='hs-conid'>Segment</span> <span class='hs-layout'>(</span><span class='hs-conid'>Just</span> <span class='hs-layout'>(</span><span class='hs-varid'>invalidChar</span> <span class='hs-varid'>xs</span><span class='hs-layout'>)</span><span class='hs-layout'>)</span> <span class='hs-conid'>[]</span> <span class='hs-varid'>mempty</span>
+<a name="line-79"></a>
+<a name="line-80"></a><span class='hs-keyword'>instance</span> <span class='hs-conid'>Reducer</span> <span class='hs-conid'>Char</span> <span class='hs-varid'>m</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>IsString</span> <span class='hs-layout'>(</span><span class='hs-conid'>Lines</span> <span class='hs-varid'>m</span><span class='hs-layout'>)</span> <span class='hs-keyword'>where</span>
+<a name="line-81"></a>    <span class='hs-varid'>fromString</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>reduce</span>
+<a name="line-82"></a>
+<a name="line-83"></a><a name="runLines"></a><span class='hs-comment'>-- | Extract the matched lines from the 'Lines' 'Monoid'</span>
+<a name="line-84"></a><span class='hs-definition'>runLines</span> <span class='hs-keyglyph'>::</span> <span class='hs-conid'>Lines</span> <span class='hs-varid'>m</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-keyglyph'>[</span><span class='hs-varid'>m</span><span class='hs-keyglyph'>]</span>
+<a name="line-85"></a><span class='hs-definition'>runLines</span> <span class='hs-layout'>(</span><span class='hs-conid'>Lines</span> <span class='hs-varid'>x</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>runWords</span> <span class='hs-varid'>x</span>
+<a name="line-86"></a>
+<a name="line-87"></a><a name="Unspaced"></a><span class='hs-comment'>-- | A 'CharReducer' transformer that strips out any character matched by `isSpace`</span>
+<a name="line-88"></a><a name="Unspaced"></a><span class='hs-keyword'>newtype</span> <span class='hs-conid'>Unspaced</span> <span class='hs-varid'>m</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>Unspaced</span> <span class='hs-layout'>{</span> <span class='hs-varid'>runUnspaced</span> <span class='hs-keyglyph'>::</span> <span class='hs-varid'>m</span> <span class='hs-layout'>}</span>  <span class='hs-keyword'>deriving</span> <span class='hs-layout'>(</span><span class='hs-conid'>Eq</span><span class='hs-layout'>,</span><span class='hs-conid'>Ord</span><span class='hs-layout'>,</span><span class='hs-conid'>Show</span><span class='hs-layout'>,</span><span class='hs-conid'>Read</span><span class='hs-layout'>,</span><span class='hs-conid'>Monoid</span><span class='hs-layout'>)</span>
+<a name="line-89"></a>
+<a name="line-90"></a><span class='hs-keyword'>instance</span> <span class='hs-conid'>Reducer</span> <span class='hs-conid'>Char</span> <span class='hs-varid'>m</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>Reducer</span> <span class='hs-conid'>Char</span> <span class='hs-layout'>(</span><span class='hs-conid'>Unspaced</span> <span class='hs-varid'>m</span><span class='hs-layout'>)</span> <span class='hs-keyword'>where</span>
+<a name="line-91"></a>    <span class='hs-varid'>unit</span> <span class='hs-varid'>c</span> <span class='hs-keyglyph'>|</span> <span class='hs-varid'>isSpace</span> <span class='hs-varid'>c</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>mempty</span>
+<a name="line-92"></a>           <span class='hs-keyglyph'>|</span> <span class='hs-varid'>otherwise</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>Unspaced</span> <span class='hs-layout'>(</span><span class='hs-varid'>unit</span> <span class='hs-varid'>c</span><span class='hs-layout'>)</span>
+<a name="line-93"></a>
+<a name="line-94"></a><span class='hs-keyword'>instance</span> <span class='hs-conid'>CharReducer</span> <span class='hs-varid'>m</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>CharReducer</span> <span class='hs-layout'>(</span><span class='hs-conid'>Unspaced</span> <span class='hs-varid'>m</span><span class='hs-layout'>)</span> <span class='hs-keyword'>where</span>
+<a name="line-95"></a>    <span class='hs-varid'>invalidChar</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>Unspaced</span> <span class='hs-varop'>.</span> <span class='hs-varid'>invalidChar</span>
+<a name="line-96"></a>
+<a name="line-97"></a><span class='hs-keyword'>instance</span> <span class='hs-conid'>Functor</span> <span class='hs-conid'>Unspaced</span> <span class='hs-keyword'>where</span>
+<a name="line-98"></a>    <span class='hs-varid'>fmap</span> <span class='hs-varid'>f</span> <span class='hs-layout'>(</span><span class='hs-conid'>Unspaced</span> <span class='hs-varid'>x</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>Unspaced</span> <span class='hs-layout'>(</span><span class='hs-varid'>f</span> <span class='hs-varid'>x</span><span class='hs-layout'>)</span>
+<a name="line-99"></a>
+<a name="line-100"></a><span class='hs-keyword'>instance</span> <span class='hs-conid'>Pointed</span> <span class='hs-conid'>Unspaced</span> <span class='hs-keyword'>where</span>
+<a name="line-101"></a>    <span class='hs-varid'>point</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>Unspaced</span>
+<a name="line-102"></a>
+<a name="line-103"></a><span class='hs-keyword'>instance</span> <span class='hs-conid'>Copointed</span> <span class='hs-conid'>Unspaced</span> <span class='hs-keyword'>where</span>
+<a name="line-104"></a>    <span class='hs-varid'>extract</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>runUnspaced</span>
+<a name="line-105"></a>
+<a name="line-106"></a><span class='hs-keyword'>instance</span> <span class='hs-conid'>Reducer</span> <span class='hs-conid'>Char</span> <span class='hs-varid'>m</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>IsString</span> <span class='hs-layout'>(</span><span class='hs-conid'>Unspaced</span> <span class='hs-varid'>m</span><span class='hs-layout'>)</span> <span class='hs-keyword'>where</span>
+<a name="line-107"></a>    <span class='hs-varid'>fromString</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>reduce</span>
+<a name="line-108"></a>
+<a name="line-109"></a><a name="Unlined"></a><span class='hs-comment'>-- | A 'CharReducer' transformer that strips out newlines</span>
+<a name="line-110"></a><a name="Unlined"></a><span class='hs-keyword'>newtype</span> <span class='hs-conid'>Unlined</span> <span class='hs-varid'>m</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>Unlined</span> <span class='hs-layout'>{</span> <span class='hs-varid'>runUnlined</span> <span class='hs-keyglyph'>::</span> <span class='hs-varid'>m</span> <span class='hs-layout'>}</span>  <span class='hs-keyword'>deriving</span> <span class='hs-layout'>(</span><span class='hs-conid'>Eq</span><span class='hs-layout'>,</span><span class='hs-conid'>Ord</span><span class='hs-layout'>,</span><span class='hs-conid'>Show</span><span class='hs-layout'>,</span><span class='hs-conid'>Read</span><span class='hs-layout'>,</span><span class='hs-conid'>Monoid</span><span class='hs-layout'>)</span>
+<a name="line-111"></a>
+<a name="line-112"></a><span class='hs-keyword'>instance</span> <span class='hs-conid'>Reducer</span> <span class='hs-conid'>Char</span> <span class='hs-varid'>m</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>Reducer</span> <span class='hs-conid'>Char</span> <span class='hs-layout'>(</span><span class='hs-conid'>Unlined</span> <span class='hs-varid'>m</span><span class='hs-layout'>)</span> <span class='hs-keyword'>where</span>
+<a name="line-113"></a>    <span class='hs-varid'>unit</span> <span class='hs-chr'>'\n'</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>mempty</span>
+<a name="line-114"></a>    <span class='hs-varid'>unit</span> <span class='hs-varid'>c</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>Unlined</span> <span class='hs-layout'>(</span><span class='hs-varid'>unit</span> <span class='hs-varid'>c</span><span class='hs-layout'>)</span>
+<a name="line-115"></a>
+<a name="line-116"></a><span class='hs-keyword'>instance</span> <span class='hs-conid'>CharReducer</span> <span class='hs-varid'>m</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>CharReducer</span> <span class='hs-layout'>(</span><span class='hs-conid'>Unlined</span> <span class='hs-varid'>m</span><span class='hs-layout'>)</span> <span class='hs-keyword'>where</span>
+<a name="line-117"></a>    <span class='hs-varid'>invalidChar</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>Unlined</span> <span class='hs-varop'>.</span> <span class='hs-varid'>invalidChar</span>
+<a name="line-118"></a>
+<a name="line-119"></a><span class='hs-keyword'>instance</span> <span class='hs-conid'>Functor</span> <span class='hs-conid'>Unlined</span> <span class='hs-keyword'>where</span>
+<a name="line-120"></a>    <span class='hs-varid'>fmap</span> <span class='hs-varid'>f</span> <span class='hs-layout'>(</span><span class='hs-conid'>Unlined</span> <span class='hs-varid'>x</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>Unlined</span> <span class='hs-layout'>(</span><span class='hs-varid'>f</span> <span class='hs-varid'>x</span><span class='hs-layout'>)</span>
+<a name="line-121"></a>
+<a name="line-122"></a><span class='hs-keyword'>instance</span> <span class='hs-conid'>Pointed</span> <span class='hs-conid'>Unlined</span> <span class='hs-keyword'>where</span>
+<a name="line-123"></a>    <span class='hs-varid'>point</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>Unlined</span>
+<a name="line-124"></a>
+<a name="line-125"></a><span class='hs-keyword'>instance</span> <span class='hs-conid'>Copointed</span> <span class='hs-conid'>Unlined</span> <span class='hs-keyword'>where</span>
+<a name="line-126"></a>    <span class='hs-varid'>extract</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>runUnlined</span>
+<a name="line-127"></a>
+<a name="line-128"></a><span class='hs-keyword'>instance</span> <span class='hs-conid'>Reducer</span> <span class='hs-conid'>Char</span> <span class='hs-varid'>m</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>IsString</span> <span class='hs-layout'>(</span><span class='hs-conid'>Unlined</span> <span class='hs-varid'>m</span><span class='hs-layout'>)</span> <span class='hs-keyword'>where</span>
+<a name="line-129"></a>    <span class='hs-varid'>fromString</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>reduce</span>
+<a name="line-130"></a>
+<a name="line-131"></a><a name="wordsFrom"></a><span class='hs-comment'>-- | Utility function to extract words using accumulator, inside-word, and until-next-word monoids</span>
+<a name="line-132"></a><span class='hs-definition'>wordsFrom</span> <span class='hs-keyglyph'>::</span> <span class='hs-layout'>(</span><span class='hs-conid'>Generator</span> <span class='hs-varid'>c</span><span class='hs-layout'>,</span> <span class='hs-conid'>Elem</span> <span class='hs-varid'>c</span> <span class='hs-keyglyph'>~</span> <span class='hs-conid'>Char</span><span class='hs-layout'>,</span> <span class='hs-conid'>Char</span> <span class='hs-varop'>`Reducer`</span> <span class='hs-varid'>m</span><span class='hs-layout'>,</span> <span class='hs-conid'>Char</span> <span class='hs-varop'>`Reducer`</span> <span class='hs-varid'>n</span><span class='hs-layout'>,</span> <span class='hs-conid'>Char</span> <span class='hs-varop'>`Reducer`</span> <span class='hs-varid'>o</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-varid'>m</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-varid'>c</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-keyglyph'>[</span><span class='hs-layout'>(</span><span class='hs-varid'>m</span><span class='hs-layout'>,</span><span class='hs-varid'>n</span><span class='hs-layout'>,</span><span class='hs-varid'>o</span><span class='hs-layout'>)</span><span class='hs-keyglyph'>]</span>
+<a name="line-133"></a><span class='hs-definition'>wordsFrom</span> <span class='hs-varid'>s</span> <span class='hs-varid'>c</span> <span class='hs-keyglyph'>=</span> <span class='hs-keyglyph'>[</span><span class='hs-layout'>(</span><span class='hs-varid'>x</span><span class='hs-layout'>,</span><span class='hs-varid'>runUnlined</span> <span class='hs-varid'>y</span><span class='hs-layout'>,</span><span class='hs-varid'>z</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>|</span> <span class='hs-varid'>x</span> <span class='hs-keyglyph'>&lt;-</span> <span class='hs-varid'>scanl</span> <span class='hs-varid'>mappend</span> <span class='hs-varid'>s</span> <span class='hs-varid'>ls</span> <span class='hs-keyglyph'>|</span> <span class='hs-layout'>(</span><span class='hs-varid'>y</span><span class='hs-layout'>,</span><span class='hs-varid'>z</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>&lt;-</span> <span class='hs-varid'>rs</span> <span class='hs-keyglyph'>]</span> <span class='hs-keyword'>where</span>
+<a name="line-134"></a>    <span class='hs-layout'>(</span><span class='hs-varid'>ls</span><span class='hs-layout'>,</span><span class='hs-varid'>rs</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>unzip</span> <span class='hs-layout'>(</span><span class='hs-varid'>runWords</span> <span class='hs-layout'>(</span><span class='hs-varid'>mapReduce</span> <span class='hs-varid'>id</span> <span class='hs-varid'>c</span><span class='hs-layout'>)</span><span class='hs-layout'>)</span>
+<a name="line-135"></a>
+<a name="line-136"></a><a name="linesFrom"></a><span class='hs-comment'>-- | Utility function to extract lines using accumulator, inside-line, and until-next-line monoids</span>
+<a name="line-137"></a><span class='hs-definition'>linesFrom</span> <span class='hs-keyglyph'>::</span> <span class='hs-layout'>(</span><span class='hs-conid'>Generator</span> <span class='hs-varid'>c</span><span class='hs-layout'>,</span> <span class='hs-conid'>Elem</span> <span class='hs-varid'>c</span> <span class='hs-keyglyph'>~</span> <span class='hs-conid'>Char</span><span class='hs-layout'>,</span> <span class='hs-conid'>Char</span> <span class='hs-varop'>`Reducer`</span> <span class='hs-varid'>m</span><span class='hs-layout'>,</span> <span class='hs-conid'>Char</span> <span class='hs-varop'>`Reducer`</span> <span class='hs-varid'>n</span><span class='hs-layout'>,</span> <span class='hs-conid'>Char</span> <span class='hs-varop'>`Reducer`</span> <span class='hs-varid'>o</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-varid'>m</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-varid'>c</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-keyglyph'>[</span><span class='hs-layout'>(</span><span class='hs-varid'>m</span><span class='hs-layout'>,</span><span class='hs-varid'>n</span><span class='hs-layout'>,</span><span class='hs-varid'>o</span><span class='hs-layout'>)</span><span class='hs-keyglyph'>]</span>
+<a name="line-138"></a><span class='hs-definition'>linesFrom</span> <span class='hs-varid'>s</span> <span class='hs-varid'>c</span> <span class='hs-keyglyph'>=</span> <span class='hs-keyglyph'>[</span><span class='hs-layout'>(</span><span class='hs-varid'>x</span><span class='hs-layout'>,</span><span class='hs-varid'>runUnlined</span> <span class='hs-varid'>y</span><span class='hs-layout'>,</span><span class='hs-varid'>z</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>|</span> <span class='hs-varid'>x</span> <span class='hs-keyglyph'>&lt;-</span> <span class='hs-varid'>scanl</span> <span class='hs-varid'>mappend</span> <span class='hs-varid'>s</span> <span class='hs-varid'>ls</span> <span class='hs-keyglyph'>|</span> <span class='hs-layout'>(</span><span class='hs-varid'>y</span><span class='hs-layout'>,</span><span class='hs-varid'>z</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>&lt;-</span> <span class='hs-varid'>rs</span> <span class='hs-keyglyph'>]</span> <span class='hs-keyword'>where</span>
+<a name="line-139"></a>    <span class='hs-layout'>(</span><span class='hs-varid'>ls</span><span class='hs-layout'>,</span><span class='hs-varid'>rs</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>unzip</span> <span class='hs-layout'>(</span><span class='hs-varid'>runLines</span> <span class='hs-layout'>(</span><span class='hs-varid'>mapReduce</span> <span class='hs-varid'>id</span> <span class='hs-varid'>c</span><span class='hs-layout'>)</span><span class='hs-layout'>)</span>
+</pre></body>
+</html>
addfile ./dist/doc/html/monoids/src/Data-Monoid-Monad.html
hunk ./dist/doc/html/monoids/src/Data-Monoid-Monad.html 1
+<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
+<html>
+<head>
+<!-- Generated by HsColour, http://www.cs.york.ac.uk/fp/darcs/hscolour/ -->
+<title>Data/Monoid/Monad.hs</title>
+<link type='text/css' rel='stylesheet' href='hscolour.css' />
+</head>
+<body>
+<pre><a name="line-1"></a><span class='hs-comment'>{-# LANGUAGE FlexibleInstances, MultiParamTypeClasses, GeneralizedNewtypeDeriving, FlexibleContexts #-}</span>
+<a name="line-2"></a>
+<a name="line-3"></a><span class='hs-comment'>-----------------------------------------------------------------------------</span>
+<a name="line-4"></a><span class='hs-comment'>-- |</span>
+<a name="line-5"></a><span class='hs-comment'>-- Module      :  Data.Monoid.Applicative</span>
+<a name="line-6"></a><span class='hs-comment'>-- Copyright   :  (c) Edward Kmett 2009</span>
+<a name="line-7"></a><span class='hs-comment'>-- License     :  BSD-style</span>
+<a name="line-8"></a><span class='hs-comment'>-- Maintainer  :  libraries@haskell.org</span>
+<a name="line-9"></a><span class='hs-comment'>-- Stability   :  experimental</span>
+<a name="line-10"></a><span class='hs-comment'>-- Portability :  non-portable (MPTCs)</span>
+<a name="line-11"></a><span class='hs-comment'>--</span>
+<a name="line-12"></a><span class='hs-comment'>-- 'Monoid' instances for working with a 'Monad'</span>
+<a name="line-13"></a><span class='hs-comment'>--</span>
+<a name="line-14"></a><span class='hs-comment'>-----------------------------------------------------------------------------</span>
+<a name="line-15"></a>
+<a name="line-16"></a><span class='hs-keyword'>module</span> <span class='hs-conid'>Data</span><span class='hs-varop'>.</span><span class='hs-conid'>Monoid</span><span class='hs-varop'>.</span><span class='hs-conid'>Monad</span> 
+<a name="line-17"></a>    <span class='hs-layout'>(</span> <span class='hs-keyword'>module</span> <span class='hs-conid'>Data</span><span class='hs-varop'>.</span><span class='hs-conid'>Monoid</span><span class='hs-varop'>.</span><span class='hs-conid'>Reducer</span>
+<a name="line-18"></a>    <span class='hs-layout'>,</span> <span class='hs-keyword'>module</span> <span class='hs-conid'>Data</span><span class='hs-varop'>.</span><span class='hs-conid'>Ring</span><span class='hs-varop'>.</span><span class='hs-conid'>Semi</span><span class='hs-varop'>.</span><span class='hs-conid'>Near</span>
+<a name="line-19"></a>    <span class='hs-comment'>-- * Actions</span>
+<a name="line-20"></a>    <span class='hs-layout'>,</span> <span class='hs-conid'>Action</span><span class='hs-layout'>(</span><span class='hs-conid'>Action</span><span class='hs-layout'>,</span><span class='hs-varid'>getAction</span><span class='hs-layout'>)</span>
+<a name="line-21"></a>    <span class='hs-layout'>,</span> <span class='hs-varid'>snocAction</span>
+<a name="line-22"></a>    <span class='hs-comment'>-- * Wrapped Monads</span>
+<a name="line-23"></a>    <span class='hs-layout'>,</span> <span class='hs-conid'>WrappedMonad</span><span class='hs-layout'>(</span><span class='hs-conid'>WrappedMonad</span><span class='hs-layout'>,</span> <span class='hs-varid'>getWrappedMonad</span><span class='hs-layout'>)</span>
+<a name="line-24"></a>    <span class='hs-layout'>)</span> <span class='hs-keyword'>where</span>
+<a name="line-25"></a>
+<a name="line-26"></a><span class='hs-keyword'>import</span> <span class='hs-conid'>Control</span><span class='hs-varop'>.</span><span class='hs-conid'>Functor</span><span class='hs-varop'>.</span><span class='hs-conid'>Pointed</span>
+<a name="line-27"></a><span class='hs-keyword'>import</span> <span class='hs-conid'>Data</span><span class='hs-varop'>.</span><span class='hs-conid'>Monoid</span><span class='hs-varop'>.</span><span class='hs-conid'>Reducer</span>
+<a name="line-28"></a><span class='hs-keyword'>import</span> <span class='hs-conid'>Data</span><span class='hs-varop'>.</span><span class='hs-conid'>Ring</span><span class='hs-varop'>.</span><span class='hs-conid'>Semi</span><span class='hs-varop'>.</span><span class='hs-conid'>Near</span>
+<a name="line-29"></a><span class='hs-keyword'>import</span> <span class='hs-conid'>Control</span><span class='hs-varop'>.</span><span class='hs-conid'>Monad</span>
+<a name="line-30"></a>
+<a name="line-31"></a><a name="Action"></a><span class='hs-comment'>-- | An 'Action' uses glues together 'Monad' actions with (&gt;&gt;)</span>
+<a name="line-32"></a><a name="Action"></a><span class='hs-comment'>--   in the manner of 'mapM_' from "Data.Foldable". Any values returned by </span>
+<a name="line-33"></a><a name="Action"></a><span class='hs-comment'>--   reduced actions are discarded.</span>
+<a name="line-34"></a><a name="Action"></a><span class='hs-keyword'>newtype</span> <span class='hs-conid'>Action</span> <span class='hs-varid'>m</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>Action</span> <span class='hs-layout'>{</span> <span class='hs-varid'>getAction</span> <span class='hs-keyglyph'>::</span> <span class='hs-varid'>m</span> <span class='hs-conid'>()</span> <span class='hs-layout'>}</span> 
+<a name="line-35"></a>
+<a name="line-36"></a><span class='hs-keyword'>instance</span> <span class='hs-conid'>Monad</span> <span class='hs-varid'>m</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>Monoid</span> <span class='hs-layout'>(</span><span class='hs-conid'>Action</span> <span class='hs-varid'>m</span><span class='hs-layout'>)</span> <span class='hs-keyword'>where</span>
+<a name="line-37"></a>    <span class='hs-varid'>mempty</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>Action</span> <span class='hs-layout'>(</span><span class='hs-varid'>return</span> <span class='hs-conid'>()</span><span class='hs-layout'>)</span>
+<a name="line-38"></a>    <span class='hs-conid'>Action</span> <span class='hs-varid'>a</span> <span class='hs-varop'>`mappend`</span> <span class='hs-conid'>Action</span> <span class='hs-varid'>b</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>Action</span> <span class='hs-layout'>(</span><span class='hs-varid'>a</span> <span class='hs-varop'>&gt;&gt;</span> <span class='hs-varid'>b</span><span class='hs-layout'>)</span>
+<a name="line-39"></a>
+<a name="line-40"></a><span class='hs-keyword'>instance</span> <span class='hs-conid'>Monad</span> <span class='hs-varid'>m</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>Reducer</span> <span class='hs-layout'>(</span><span class='hs-varid'>m</span> <span class='hs-varid'>a</span><span class='hs-layout'>)</span> <span class='hs-layout'>(</span><span class='hs-conid'>Action</span> <span class='hs-varid'>m</span><span class='hs-layout'>)</span> <span class='hs-keyword'>where</span>
+<a name="line-41"></a>    <span class='hs-varid'>unit</span> <span class='hs-varid'>a</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>Action</span> <span class='hs-layout'>(</span><span class='hs-varid'>a</span> <span class='hs-varop'>&gt;&gt;</span> <span class='hs-varid'>return</span> <span class='hs-conid'>()</span><span class='hs-layout'>)</span>
+<a name="line-42"></a>    <span class='hs-varid'>a</span> <span class='hs-varop'>`cons`</span> <span class='hs-conid'>Action</span> <span class='hs-varid'>b</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>Action</span> <span class='hs-layout'>(</span><span class='hs-varid'>a</span> <span class='hs-varop'>&gt;&gt;</span> <span class='hs-varid'>b</span><span class='hs-layout'>)</span>
+<a name="line-43"></a>    <span class='hs-conid'>Action</span> <span class='hs-varid'>a</span> <span class='hs-varop'>`snoc`</span> <span class='hs-varid'>b</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>Action</span> <span class='hs-layout'>(</span><span class='hs-varid'>a</span> <span class='hs-varop'>&gt;&gt;</span> <span class='hs-varid'>b</span> <span class='hs-varop'>&gt;&gt;</span> <span class='hs-varid'>return</span> <span class='hs-conid'>()</span><span class='hs-layout'>)</span>
+<a name="line-44"></a>
+<a name="line-45"></a><span class='hs-comment'>{-# RULES "unitAction" unit = Action #-}</span>
+<a name="line-46"></a><span class='hs-comment'>{-# RULES "snocAction" snoc = snocAction #-}</span> 
+<a name="line-47"></a>
+<a name="line-48"></a><a name="snocAction"></a><span class='hs-comment'>-- | Efficiently avoid needlessly rebinding when using 'snoc' on an action that already returns ()</span>
+<a name="line-49"></a><span class='hs-comment'>--   A rewrite rule automatically applies this when possible</span>
+<a name="line-50"></a><span class='hs-definition'>snocAction</span> <span class='hs-keyglyph'>::</span> <span class='hs-conid'>Reducer</span> <span class='hs-layout'>(</span><span class='hs-varid'>m</span> <span class='hs-conid'>()</span><span class='hs-layout'>)</span> <span class='hs-layout'>(</span><span class='hs-conid'>Action</span> <span class='hs-varid'>m</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>Action</span> <span class='hs-varid'>m</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-varid'>m</span> <span class='hs-conid'>()</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-conid'>Action</span> <span class='hs-varid'>m</span>
+<a name="line-51"></a><span class='hs-definition'>snocAction</span> <span class='hs-varid'>a</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>mappend</span> <span class='hs-varid'>a</span> <span class='hs-varop'>.</span> <span class='hs-conid'>Action</span>
+<a name="line-52"></a>
+<a name="line-53"></a><span class='hs-comment'>-- | A 'WrappedMonad' turns any 'MonadPlus' instance into a 'Monoid'.</span>
+<a name="line-54"></a><span class='hs-comment'>--   It also provides a 'Multiplicative' instance for a 'Monad' wrapped around a 'Monoid'</span>
+<a name="line-55"></a><span class='hs-comment'>--   and asserts that any 'MonadPlus' applied to a 'Monoid' forms a 'LeftSemiNearRing' </span>
+<a name="line-56"></a><span class='hs-comment'>--   under these operations.</span>
+<a name="line-57"></a>
+<a name="line-58"></a><a name="WrappedMonad"></a><span class='hs-keyword'>newtype</span> <span class='hs-conid'>WrappedMonad</span> <span class='hs-varid'>m</span> <span class='hs-varid'>a</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>WrappedMonad</span> <span class='hs-layout'>{</span> <span class='hs-varid'>getWrappedMonad</span> <span class='hs-keyglyph'>::</span> <span class='hs-varid'>m</span> <span class='hs-varid'>a</span> <span class='hs-layout'>}</span> 
+<a name="line-59"></a>    <span class='hs-keyword'>deriving</span> <span class='hs-layout'>(</span><span class='hs-conid'>Eq</span><span class='hs-layout'>,</span><span class='hs-conid'>Ord</span><span class='hs-layout'>,</span><span class='hs-conid'>Show</span><span class='hs-layout'>,</span><span class='hs-conid'>Read</span><span class='hs-layout'>,</span><span class='hs-conid'>Functor</span><span class='hs-layout'>,</span><span class='hs-conid'>Pointed</span><span class='hs-layout'>,</span> <span class='hs-conid'>Monad</span><span class='hs-layout'>,</span><span class='hs-conid'>MonadPlus</span><span class='hs-layout'>)</span>
+<a name="line-60"></a>
+<a name="line-61"></a><span class='hs-keyword'>instance</span> <span class='hs-layout'>(</span><span class='hs-conid'>Monad</span> <span class='hs-varid'>m</span><span class='hs-layout'>,</span> <span class='hs-conid'>Monoid</span> <span class='hs-varid'>a</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>Multiplicative</span> <span class='hs-layout'>(</span><span class='hs-conid'>WrappedMonad</span> <span class='hs-varid'>m</span> <span class='hs-varid'>a</span><span class='hs-layout'>)</span> <span class='hs-keyword'>where</span>
+<a name="line-62"></a>    <span class='hs-varid'>one</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>WrappedMonad</span> <span class='hs-layout'>(</span><span class='hs-varid'>return</span> <span class='hs-varid'>mempty</span><span class='hs-layout'>)</span>
+<a name="line-63"></a>    <span class='hs-conid'>WrappedMonad</span> <span class='hs-varid'>m</span> <span class='hs-varop'>`times`</span> <span class='hs-conid'>WrappedMonad</span> <span class='hs-varid'>n</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>WrappedMonad</span> <span class='hs-layout'>(</span><span class='hs-varid'>liftM2</span> <span class='hs-varid'>mappend</span> <span class='hs-varid'>m</span> <span class='hs-varid'>n</span><span class='hs-layout'>)</span>
+<a name="line-64"></a>    
+<a name="line-65"></a><span class='hs-keyword'>instance</span> <span class='hs-layout'>(</span><span class='hs-conid'>MonadPlus</span> <span class='hs-varid'>m</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>Monoid</span> <span class='hs-layout'>(</span><span class='hs-conid'>WrappedMonad</span> <span class='hs-varid'>m</span> <span class='hs-varid'>a</span><span class='hs-layout'>)</span> <span class='hs-keyword'>where</span>
+<a name="line-66"></a>    <span class='hs-varid'>mempty</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>mzero</span>
+<a name="line-67"></a>    <span class='hs-varid'>mappend</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>mplus</span>
+<a name="line-68"></a>
+<a name="line-69"></a><span class='hs-keyword'>instance</span> <span class='hs-layout'>(</span><span class='hs-conid'>MonadPlus</span> <span class='hs-varid'>m</span><span class='hs-layout'>,</span> <span class='hs-varid'>c</span> <span class='hs-varop'>`Reducer`</span> <span class='hs-varid'>a</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>Reducer</span> <span class='hs-varid'>c</span> <span class='hs-layout'>(</span><span class='hs-conid'>WrappedMonad</span> <span class='hs-varid'>m</span> <span class='hs-varid'>a</span><span class='hs-layout'>)</span> <span class='hs-keyword'>where</span>
+<a name="line-70"></a>    <span class='hs-varid'>unit</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>WrappedMonad</span> <span class='hs-varop'>.</span> <span class='hs-varid'>return</span> <span class='hs-varop'>.</span> <span class='hs-varid'>unit</span>
+<a name="line-71"></a>
+<a name="line-72"></a><span class='hs-keyword'>instance</span> <span class='hs-layout'>(</span><span class='hs-conid'>MonadPlus</span> <span class='hs-varid'>m</span><span class='hs-layout'>,</span> <span class='hs-conid'>Monoid</span> <span class='hs-varid'>a</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>LeftSemiNearRing</span> <span class='hs-layout'>(</span><span class='hs-conid'>WrappedMonad</span> <span class='hs-varid'>m</span> <span class='hs-varid'>a</span><span class='hs-layout'>)</span>
+</pre></body>
+</html>
addfile ./dist/doc/html/monoids/src/Data-Monoid-Multiplicative-Sugar.html
hunk ./dist/doc/html/monoids/src/Data-Monoid-Multiplicative-Sugar.html 1
+<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
+<html>
+<head>
+<!-- Generated by HsColour, http://www.cs.york.ac.uk/fp/darcs/hscolour/ -->
+<title>Data/Monoid/Multiplicative/Sugar.hs</title>
+<link type='text/css' rel='stylesheet' href='hscolour.css' />
+</head>
+<body>
+<pre><a name="line-1"></a><span class='hs-comment'>-----------------------------------------------------------------------------</span>
+<a name="line-2"></a><span class='hs-comment'>-- |</span>
+<a name="line-3"></a><span class='hs-comment'>-- Module      :  Data.Monoid.Multiplicative.Sugar</span>
+<a name="line-4"></a><span class='hs-comment'>-- Copyright   :  (c) Edward Kmett 2009</span>
+<a name="line-5"></a><span class='hs-comment'>-- License     :  BSD-style</span>
+<a name="line-6"></a><span class='hs-comment'>-- Maintainer  :  libraries@haskell.org</span>
+<a name="line-7"></a><span class='hs-comment'>-- Stability   :  experimental</span>
+<a name="line-8"></a><span class='hs-comment'>-- Portability :  portable</span>
+<a name="line-9"></a><span class='hs-comment'>--</span>
+<a name="line-10"></a><span class='hs-comment'>-- Syntactic sugar for working with a 'Multiplicative' monoids that conflicts with names from the "Prelude".</span>
+<a name="line-11"></a><span class='hs-comment'>--</span>
+<a name="line-12"></a><span class='hs-comment'>-- &gt; import Prelude hiding ((+),(*))</span>
+<a name="line-13"></a><span class='hs-comment'>-- &gt; import Data.Monoid.Multiplicative.Sugar</span>
+<a name="line-14"></a><span class='hs-comment'>--</span>
+<a name="line-15"></a><span class='hs-comment'>-----------------------------------------------------------------------------</span>
+<a name="line-16"></a>
+<a name="line-17"></a><span class='hs-keyword'>module</span> <span class='hs-conid'>Data</span><span class='hs-varop'>.</span><span class='hs-conid'>Monoid</span><span class='hs-varop'>.</span><span class='hs-conid'>Multiplicative</span><span class='hs-varop'>.</span><span class='hs-conid'>Sugar</span>
+<a name="line-18"></a>    <span class='hs-layout'>(</span> <span class='hs-keyword'>module</span> <span class='hs-conid'>Data</span><span class='hs-varop'>.</span><span class='hs-conid'>Monoid</span><span class='hs-varop'>.</span><span class='hs-conid'>Additive</span><span class='hs-varop'>.</span><span class='hs-conid'>Sugar</span>
+<a name="line-19"></a>    <span class='hs-layout'>,</span> <span class='hs-keyword'>module</span> <span class='hs-conid'>Data</span><span class='hs-varop'>.</span><span class='hs-conid'>Monoid</span><span class='hs-varop'>.</span><span class='hs-conid'>Multiplicative</span>
+<a name="line-20"></a>    <span class='hs-layout'>,</span> <span class='hs-layout'>(</span><span class='hs-varop'>*</span><span class='hs-layout'>)</span>
+<a name="line-21"></a>    <span class='hs-layout'>)</span> <span class='hs-keyword'>where</span>
+<a name="line-22"></a>
+<a name="line-23"></a><span class='hs-keyword'>import</span> <span class='hs-conid'>Data</span><span class='hs-varop'>.</span><span class='hs-conid'>Monoid</span><span class='hs-varop'>.</span><span class='hs-conid'>Additive</span><span class='hs-varop'>.</span><span class='hs-conid'>Sugar</span>
+<a name="line-24"></a><span class='hs-keyword'>import</span> <span class='hs-conid'>Data</span><span class='hs-varop'>.</span><span class='hs-conid'>Monoid</span><span class='hs-varop'>.</span><span class='hs-conid'>Multiplicative</span>
+<a name="line-25"></a><span class='hs-keyword'>import</span> <span class='hs-conid'>Prelude</span> <span class='hs-varid'>hiding</span> <span class='hs-layout'>(</span><span class='hs-layout'>(</span><span class='hs-varop'>*</span><span class='hs-layout'>)</span><span class='hs-layout'>)</span>
+<a name="line-26"></a>
+<a name="line-27"></a><span class='hs-keyword'>infixl</span> <span class='hs-num'>7</span> <span class='hs-varop'>*</span>
+<a name="line-28"></a>
+<a name="line-29"></a><a name="*"></a><span class='hs-layout'>(</span><span class='hs-varop'>*</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>::</span> <span class='hs-conid'>Multiplicative</span> <span class='hs-varid'>r</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-varid'>r</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-varid'>r</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-varid'>r</span>
+<a name="line-30"></a><span class='hs-layout'>(</span><span class='hs-varop'>*</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>times</span>
+</pre></body>
+</html>
addfile ./dist/doc/html/monoids/src/Data-Monoid-Multiplicative.html
hunk ./dist/doc/html/monoids/src/Data-Monoid-Multiplicative.html 1
+<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
+<html>
+<head>
+<!-- Generated by HsColour, http://www.cs.york.ac.uk/fp/darcs/hscolour/ -->
+<title>Data/Monoid/Multiplicative.hs</title>
+<link type='text/css' rel='stylesheet' href='hscolour.css' />
+</head>
+<body>
+<pre><a name="line-1"></a><span class='hs-comment'>{-# LANGUAGE FlexibleInstances, MultiParamTypeClasses, UndecidableInstances #-}</span>
+<a name="line-2"></a>
+<a name="line-3"></a><span class='hs-comment'>-----------------------------------------------------------------------------</span>
+<a name="line-4"></a><span class='hs-comment'>-- |</span>
+<a name="line-5"></a><span class='hs-comment'>-- Module      :  Data.Monoid.Multiplicative</span>
+<a name="line-6"></a><span class='hs-comment'>-- Copyright   :  (c) Edward Kmett 2009</span>
+<a name="line-7"></a><span class='hs-comment'>-- License     :  BSD-style</span>
+<a name="line-8"></a><span class='hs-comment'>-- Maintainer  :  libraries@haskell.org</span>
+<a name="line-9"></a><span class='hs-comment'>-- Stability   :  experimental</span>
+<a name="line-10"></a><span class='hs-comment'>-- Portability :  portable (but instances use MPTCs)</span>
+<a name="line-11"></a><span class='hs-comment'>--</span>
+<a name="line-12"></a><span class='hs-comment'>-- When dealing with a 'Ring' or other structure, you often need a pair of </span>
+<a name="line-13"></a><span class='hs-comment'>-- 'Monoid' instances that are closely related. Making a @newtype@ for one</span>
+<a name="line-14"></a><span class='hs-comment'>-- is unsatisfying and yields an unnatural programming style. </span>
+<a name="line-15"></a><span class='hs-comment'>--</span>
+<a name="line-16"></a><span class='hs-comment'>-- A 'Multiplicative' is a 'Monoid' that is intended for use in a scenario</span>
+<a name="line-17"></a><span class='hs-comment'>-- that can be extended to have another 'Monoid' slot in for addition. This</span>
+<a name="line-18"></a><span class='hs-comment'>-- enables one to use common notation.</span>
+<a name="line-19"></a><span class='hs-comment'>--</span>
+<a name="line-20"></a><span class='hs-comment'>-- Any 'Multiplicative' can be turned into a 'Monoid' using the 'Log' wrapper.</span>
+<a name="line-21"></a><span class='hs-comment'>--</span>
+<a name="line-22"></a><span class='hs-comment'>-- Any 'Monoid' can be turned into a 'Multiplicative' using the 'Exp' wrapper.</span>
+<a name="line-23"></a><span class='hs-comment'>--</span>
+<a name="line-24"></a><span class='hs-comment'>-- Instances are supplied for common Monads of Monoids, in a fashion </span>
+<a name="line-25"></a><span class='hs-comment'>-- which can be extended if the 'Monad' is a 'MonadPlus' to yield a 'LeftSemiNearRing'</span>
+<a name="line-26"></a><span class='hs-comment'>--</span>
+<a name="line-27"></a><span class='hs-comment'>-- Instances are also supplied for common Applicatives of Monoids, in a</span>
+<a name="line-28"></a><span class='hs-comment'>-- fashion which can be extended if the 'Applicative' is 'Alternative' to</span>
+<a name="line-29"></a><span class='hs-comment'>-- yield a 'LeftSemiNearRing'</span>
+<a name="line-30"></a><span class='hs-comment'>-----------------------------------------------------------------------------</span>
+<a name="line-31"></a>
+<a name="line-32"></a><span class='hs-keyword'>module</span> <span class='hs-conid'>Data</span><span class='hs-varop'>.</span><span class='hs-conid'>Monoid</span><span class='hs-varop'>.</span><span class='hs-conid'>Multiplicative</span> 
+<a name="line-33"></a>    <span class='hs-layout'>(</span> <span class='hs-keyword'>module</span> <span class='hs-conid'>Data</span><span class='hs-varop'>.</span><span class='hs-conid'>Monoid</span><span class='hs-varop'>.</span><span class='hs-conid'>Additive</span>
+<a name="line-34"></a>    <span class='hs-comment'>-- * Multiplicative Monoids</span>
+<a name="line-35"></a>    <span class='hs-layout'>,</span> <span class='hs-conid'>Multiplicative</span>
+<a name="line-36"></a>    <span class='hs-layout'>,</span> <span class='hs-varid'>one</span><span class='hs-layout'>,</span> <span class='hs-varid'>times</span>
+<a name="line-37"></a>    <span class='hs-comment'>-- * Multiplicative to Monoid</span>
+<a name="line-38"></a>    <span class='hs-layout'>,</span> <span class='hs-conid'>Log</span><span class='hs-layout'>(</span><span class='hs-conid'>Log</span><span class='hs-layout'>,</span> <span class='hs-varid'>getLog</span><span class='hs-layout'>)</span>
+<a name="line-39"></a>    <span class='hs-comment'>-- * Monoid to Multiplicative</span>
+<a name="line-40"></a>    <span class='hs-layout'>,</span> <span class='hs-conid'>Exp</span><span class='hs-layout'>(</span><span class='hs-conid'>Exp</span><span class='hs-layout'>,</span> <span class='hs-varid'>getExp</span><span class='hs-layout'>)</span>
+<a name="line-41"></a>    <span class='hs-layout'>)</span> <span class='hs-keyword'>where</span>
+<a name="line-42"></a>
+<a name="line-43"></a><span class='hs-keyword'>import</span> <span class='hs-conid'>Control</span><span class='hs-varop'>.</span><span class='hs-conid'>Applicative</span>
+<a name="line-44"></a>
+<a name="line-45"></a><span class='hs-keyword'>import</span> <span class='hs-conid'>Control</span><span class='hs-varop'>.</span><span class='hs-conid'>Concurrent</span><span class='hs-varop'>.</span><span class='hs-conid'>STM</span>
+<a name="line-46"></a>
+<a name="line-47"></a><span class='hs-keyword'>import</span> <span class='hs-conid'>Control</span><span class='hs-varop'>.</span><span class='hs-conid'>Monad</span><span class='hs-varop'>.</span><span class='hs-conid'>Cont</span>
+<a name="line-48"></a><span class='hs-keyword'>import</span> <span class='hs-conid'>Control</span><span class='hs-varop'>.</span><span class='hs-conid'>Monad</span><span class='hs-varop'>.</span><span class='hs-conid'>Identity</span>
+<a name="line-49"></a>
+<a name="line-50"></a><span class='hs-keyword'>import</span> <span class='hs-conid'>Control</span><span class='hs-varop'>.</span><span class='hs-conid'>Monad</span><span class='hs-varop'>.</span><span class='hs-conid'>Reader</span>
+<a name="line-51"></a>
+<a name="line-52"></a><span class='hs-keyword'>import</span> <span class='hs-keyword'>qualified</span> <span class='hs-conid'>Control</span><span class='hs-varop'>.</span><span class='hs-conid'>Monad</span><span class='hs-varop'>.</span><span class='hs-conid'>RWS</span><span class='hs-varop'>.</span><span class='hs-conid'>Lazy</span> <span class='hs-keyword'>as</span> <span class='hs-conid'>LRWS</span>
+<a name="line-53"></a><span class='hs-keyword'>import</span> <span class='hs-keyword'>qualified</span> <span class='hs-conid'>Control</span><span class='hs-varop'>.</span><span class='hs-conid'>Monad</span><span class='hs-varop'>.</span><span class='hs-conid'>RWS</span><span class='hs-varop'>.</span><span class='hs-conid'>Strict</span> <span class='hs-keyword'>as</span> <span class='hs-conid'>SRWS</span>
+<a name="line-54"></a>
+<a name="line-55"></a><span class='hs-keyword'>import</span> <span class='hs-keyword'>qualified</span> <span class='hs-conid'>Control</span><span class='hs-varop'>.</span><span class='hs-conid'>Monad</span><span class='hs-varop'>.</span><span class='hs-conid'>State</span><span class='hs-varop'>.</span><span class='hs-conid'>Lazy</span> <span class='hs-keyword'>as</span> <span class='hs-conid'>LState</span>
+<a name="line-56"></a><span class='hs-keyword'>import</span> <span class='hs-keyword'>qualified</span> <span class='hs-conid'>Control</span><span class='hs-varop'>.</span><span class='hs-conid'>Monad</span><span class='hs-varop'>.</span><span class='hs-conid'>State</span><span class='hs-varop'>.</span><span class='hs-conid'>Strict</span> <span class='hs-keyword'>as</span> <span class='hs-conid'>SState</span>
+<a name="line-57"></a>
+<a name="line-58"></a><span class='hs-keyword'>import</span> <span class='hs-keyword'>qualified</span> <span class='hs-conid'>Control</span><span class='hs-varop'>.</span><span class='hs-conid'>Monad</span><span class='hs-varop'>.</span><span class='hs-conid'>Writer</span><span class='hs-varop'>.</span><span class='hs-conid'>Lazy</span> <span class='hs-keyword'>as</span> <span class='hs-conid'>LWriter</span>
+<a name="line-59"></a><span class='hs-keyword'>import</span> <span class='hs-keyword'>qualified</span> <span class='hs-conid'>Control</span><span class='hs-varop'>.</span><span class='hs-conid'>Monad</span><span class='hs-varop'>.</span><span class='hs-conid'>Writer</span><span class='hs-varop'>.</span><span class='hs-conid'>Strict</span> <span class='hs-keyword'>as</span> <span class='hs-conid'>SWriter</span>
+<a name="line-60"></a>
+<a name="line-61"></a><span class='hs-keyword'>import</span> <span class='hs-keyword'>qualified</span> <span class='hs-conid'>Control</span><span class='hs-varop'>.</span><span class='hs-conid'>Monad</span><span class='hs-varop'>.</span><span class='hs-conid'>ST</span><span class='hs-varop'>.</span><span class='hs-conid'>Lazy</span> <span class='hs-keyword'>as</span> <span class='hs-conid'>LST</span>
+<a name="line-62"></a><span class='hs-keyword'>import</span> <span class='hs-keyword'>qualified</span> <span class='hs-conid'>Control</span><span class='hs-varop'>.</span><span class='hs-conid'>Monad</span><span class='hs-varop'>.</span><span class='hs-conid'>ST</span><span class='hs-varop'>.</span><span class='hs-conid'>Strict</span> <span class='hs-keyword'>as</span> <span class='hs-conid'>SST</span>
+<a name="line-63"></a>
+<a name="line-64"></a><span class='hs-keyword'>import</span> <span class='hs-conid'>Data</span><span class='hs-varop'>.</span><span class='hs-conid'>FingerTree</span>
+<a name="line-65"></a>
+<a name="line-66"></a><span class='hs-keyword'>import</span> <span class='hs-conid'>Data</span><span class='hs-varop'>.</span><span class='hs-conid'>Monoid</span><span class='hs-varop'>.</span><span class='hs-conid'>Additive</span>
+<a name="line-67"></a><span class='hs-keyword'>import</span> <span class='hs-conid'>Data</span><span class='hs-varop'>.</span><span class='hs-conid'>Monoid</span><span class='hs-varop'>.</span><span class='hs-conid'>FromString</span>
+<a name="line-68"></a><span class='hs-keyword'>import</span> <span class='hs-conid'>Data</span><span class='hs-varop'>.</span><span class='hs-conid'>Monoid</span><span class='hs-varop'>.</span><span class='hs-conid'>Generator</span>
+<a name="line-69"></a><span class='hs-keyword'>import</span> <span class='hs-conid'>Data</span><span class='hs-varop'>.</span><span class='hs-conid'>Monoid</span><span class='hs-varop'>.</span><span class='hs-conid'>Instances</span> <span class='hs-conid'>()</span>
+<a name="line-70"></a><span class='hs-keyword'>import</span> <span class='hs-conid'>Data</span><span class='hs-varop'>.</span><span class='hs-conid'>Monoid</span><span class='hs-varop'>.</span><span class='hs-conid'>Self</span>
+<a name="line-71"></a>
+<a name="line-72"></a><span class='hs-keyword'>import</span> <span class='hs-keyword'>qualified</span> <span class='hs-conid'>Data</span><span class='hs-varop'>.</span><span class='hs-conid'>Sequence</span> <span class='hs-keyword'>as</span> <span class='hs-conid'>Seq</span>
+<a name="line-73"></a><span class='hs-keyword'>import</span> <span class='hs-conid'>Data</span><span class='hs-varop'>.</span><span class='hs-conid'>Sequence</span> <span class='hs-layout'>(</span><span class='hs-conid'>Seq</span><span class='hs-layout'>)</span>
+<a name="line-74"></a>
+<a name="line-75"></a><span class='hs-keyword'>import</span> <span class='hs-conid'>Text</span><span class='hs-varop'>.</span><span class='hs-conid'>Parsec</span><span class='hs-varop'>.</span><span class='hs-conid'>Prim</span>
+<a name="line-76"></a>
+<a name="line-77"></a><a name="Multiplicative"></a><span class='hs-keyword'>class</span> <span class='hs-conid'>Multiplicative</span> <span class='hs-varid'>m</span> <span class='hs-keyword'>where</span>
+<a name="line-78"></a>    <span class='hs-varid'>one</span> <span class='hs-keyglyph'>::</span> <span class='hs-varid'>m</span>
+<a name="line-79"></a>    <span class='hs-varid'>times</span> <span class='hs-keyglyph'>::</span> <span class='hs-varid'>m</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-varid'>m</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-varid'>m</span>
+<a name="line-80"></a>
+<a name="line-81"></a><a name="Log"></a><span class='hs-comment'>-- | Convert a 'Multiplicative' into a 'Monoid'. Mnemonic: @Log a + Log b = Log (a * b)@</span>
+<a name="line-82"></a><a name="Log"></a><span class='hs-keyword'>data</span> <span class='hs-conid'>Log</span> <span class='hs-varid'>m</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>Log</span> <span class='hs-layout'>{</span> <span class='hs-varid'>getLog</span> <span class='hs-keyglyph'>::</span> <span class='hs-varid'>m</span> <span class='hs-layout'>}</span>
+<a name="line-83"></a>
+<a name="line-84"></a><span class='hs-keyword'>instance</span> <span class='hs-conid'>Multiplicative</span> <span class='hs-varid'>m</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>Monoid</span> <span class='hs-layout'>(</span><span class='hs-conid'>Log</span> <span class='hs-varid'>m</span><span class='hs-layout'>)</span> <span class='hs-keyword'>where</span>
+<a name="line-85"></a>    <span class='hs-varid'>mempty</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>Log</span> <span class='hs-varid'>one</span>
+<a name="line-86"></a>    <span class='hs-conid'>Log</span> <span class='hs-varid'>a</span> <span class='hs-varop'>`mappend`</span> <span class='hs-conid'>Log</span> <span class='hs-varid'>b</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>Log</span> <span class='hs-layout'>(</span><span class='hs-varid'>a</span> <span class='hs-varop'>`times`</span> <span class='hs-varid'>b</span><span class='hs-layout'>)</span>
+<a name="line-87"></a>
+<a name="line-88"></a><a name="Exp"></a><span class='hs-comment'>-- | Convert a 'Monoid' into a 'Multiplicative'. Mnemonic: @Exp a * Exp b = Exp (a + b)@</span>
+<a name="line-89"></a><a name="Exp"></a><span class='hs-keyword'>data</span> <span class='hs-conid'>Exp</span> <span class='hs-varid'>m</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>Exp</span> <span class='hs-layout'>{</span> <span class='hs-varid'>getExp</span> <span class='hs-keyglyph'>::</span> <span class='hs-varid'>m</span> <span class='hs-layout'>}</span>
+<a name="line-90"></a>
+<a name="line-91"></a><span class='hs-keyword'>instance</span> <span class='hs-conid'>Monoid</span> <span class='hs-varid'>m</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>Multiplicative</span> <span class='hs-layout'>(</span><span class='hs-conid'>Exp</span> <span class='hs-varid'>m</span><span class='hs-layout'>)</span> <span class='hs-keyword'>where</span>
+<a name="line-92"></a>    <span class='hs-varid'>one</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>Exp</span> <span class='hs-varid'>mempty</span>
+<a name="line-93"></a>    <span class='hs-conid'>Exp</span> <span class='hs-varid'>a</span> <span class='hs-varop'>`times`</span> <span class='hs-conid'>Exp</span> <span class='hs-varid'>b</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>Exp</span> <span class='hs-layout'>(</span><span class='hs-varid'>a</span> <span class='hs-varop'>`mappend`</span> <span class='hs-varid'>b</span><span class='hs-layout'>)</span>
+<a name="line-94"></a>
+<a name="line-95"></a><span class='hs-comment'>-- simple monoid transformer instances</span>
+<a name="line-96"></a><span class='hs-keyword'>instance</span> <span class='hs-conid'>Multiplicative</span> <span class='hs-varid'>m</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>Multiplicative</span> <span class='hs-layout'>(</span><span class='hs-conid'>Self</span> <span class='hs-varid'>m</span><span class='hs-layout'>)</span> <span class='hs-keyword'>where</span>
+<a name="line-97"></a>    <span class='hs-varid'>one</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>Self</span> <span class='hs-varid'>one</span>  
+<a name="line-98"></a>    <span class='hs-conid'>Self</span> <span class='hs-varid'>a</span> <span class='hs-varop'>`times`</span> <span class='hs-conid'>Self</span> <span class='hs-varid'>b</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>Self</span> <span class='hs-layout'>(</span><span class='hs-varid'>a</span> <span class='hs-varop'>`times`</span> <span class='hs-varid'>b</span><span class='hs-layout'>)</span>
+<a name="line-99"></a>
+<a name="line-100"></a><span class='hs-keyword'>instance</span> <span class='hs-conid'>Multiplicative</span> <span class='hs-varid'>m</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>Multiplicative</span> <span class='hs-layout'>(</span><span class='hs-conid'>FromString</span> <span class='hs-varid'>m</span><span class='hs-layout'>)</span> <span class='hs-keyword'>where</span>
+<a name="line-101"></a>    <span class='hs-varid'>one</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>FromString</span> <span class='hs-varid'>one</span>
+<a name="line-102"></a>    <span class='hs-conid'>FromString</span> <span class='hs-varid'>a</span> <span class='hs-varop'>`times`</span> <span class='hs-conid'>FromString</span> <span class='hs-varid'>b</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>FromString</span> <span class='hs-layout'>(</span><span class='hs-varid'>a</span> <span class='hs-varop'>`times`</span> <span class='hs-varid'>b</span><span class='hs-layout'>)</span>
+<a name="line-103"></a>
+<a name="line-104"></a><span class='hs-comment'>-- the goal of this is that I can make left seminearrings out of any 'Alternative' wrapped around a monoid</span>
+<a name="line-105"></a><span class='hs-comment'>-- in particular its useful for containers</span>
+<a name="line-106"></a>
+<a name="line-107"></a><span class='hs-keyword'>instance</span> <span class='hs-conid'>Monoid</span> <span class='hs-varid'>m</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>Multiplicative</span> <span class='hs-keyglyph'>[</span><span class='hs-varid'>m</span><span class='hs-keyglyph'>]</span> <span class='hs-keyword'>where</span>
+<a name="line-108"></a>    <span class='hs-varid'>one</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>return</span> <span class='hs-varid'>mempty</span>
+<a name="line-109"></a>    <span class='hs-varid'>times</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>liftM2</span> <span class='hs-varid'>mappend</span>
+<a name="line-110"></a>
+<a name="line-111"></a><span class='hs-keyword'>instance</span> <span class='hs-conid'>Monoid</span> <span class='hs-varid'>m</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>Multiplicative</span> <span class='hs-layout'>(</span><span class='hs-conid'>Seq</span> <span class='hs-varid'>m</span><span class='hs-layout'>)</span> <span class='hs-keyword'>where</span>
+<a name="line-112"></a>    <span class='hs-varid'>one</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>return</span> <span class='hs-varid'>mempty</span>
+<a name="line-113"></a>    <span class='hs-varid'>times</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>liftM2</span> <span class='hs-varid'>mappend</span>
+<a name="line-114"></a>
+<a name="line-115"></a><span class='hs-comment'>-- and things that can't quite be a Monad in Haskell</span>
+<a name="line-116"></a><span class='hs-keyword'>instance</span> <span class='hs-layout'>(</span><span class='hs-conid'>Measured</span> <span class='hs-varid'>v</span> <span class='hs-varid'>m</span><span class='hs-layout'>,</span> <span class='hs-conid'>Monoid</span> <span class='hs-varid'>m</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>Multiplicative</span> <span class='hs-layout'>(</span><span class='hs-conid'>FingerTree</span> <span class='hs-varid'>v</span> <span class='hs-varid'>m</span><span class='hs-layout'>)</span> <span class='hs-keyword'>where</span>
+<a name="line-117"></a>    <span class='hs-varid'>one</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>singleton</span> <span class='hs-varid'>mempty</span>
+<a name="line-118"></a>    <span class='hs-varid'>xss</span> <span class='hs-varop'>`times`</span> <span class='hs-varid'>yss</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>getSelf</span> <span class='hs-varop'>$</span> <span class='hs-varid'>mapReduce</span> <span class='hs-layout'>(</span><span class='hs-varid'>flip</span> <span class='hs-varid'>fmap'</span> <span class='hs-varid'>yss</span> <span class='hs-varop'>.</span> <span class='hs-varid'>mappend</span><span class='hs-layout'>)</span> <span class='hs-varid'>xss</span>
+<a name="line-119"></a>
+<a name="line-120"></a><span class='hs-comment'>-- but it can at least serve as a canonical multiplication for any monad. </span>
+<a name="line-121"></a><span class='hs-keyword'>instance</span> <span class='hs-conid'>Monoid</span> <span class='hs-varid'>m</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>Multiplicative</span> <span class='hs-layout'>(</span><span class='hs-conid'>Maybe</span> <span class='hs-varid'>m</span><span class='hs-layout'>)</span> <span class='hs-keyword'>where</span>
+<a name="line-122"></a>    <span class='hs-varid'>one</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>return</span> <span class='hs-varid'>mempty</span>
+<a name="line-123"></a>    <span class='hs-varid'>times</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>liftM2</span> <span class='hs-varid'>mappend</span>
+<a name="line-124"></a>
+<a name="line-125"></a><span class='hs-keyword'>instance</span> <span class='hs-conid'>Monoid</span> <span class='hs-varid'>m</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>Multiplicative</span> <span class='hs-layout'>(</span><span class='hs-conid'>Identity</span> <span class='hs-varid'>m</span><span class='hs-layout'>)</span> <span class='hs-keyword'>where</span>
+<a name="line-126"></a>    <span class='hs-varid'>one</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>return</span> <span class='hs-varid'>mempty</span>
+<a name="line-127"></a>    <span class='hs-varid'>times</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>liftM2</span> <span class='hs-varid'>mappend</span>
+<a name="line-128"></a>
+<a name="line-129"></a><span class='hs-keyword'>instance</span> <span class='hs-layout'>(</span><span class='hs-conid'>Monoid</span> <span class='hs-varid'>m</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>Multiplicative</span> <span class='hs-layout'>(</span><span class='hs-conid'>Cont</span> <span class='hs-varid'>r</span> <span class='hs-varid'>m</span><span class='hs-layout'>)</span> <span class='hs-keyword'>where</span>
+<a name="line-130"></a>    <span class='hs-varid'>one</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>return</span> <span class='hs-varid'>mempty</span>
+<a name="line-131"></a>    <span class='hs-varid'>times</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>liftM2</span> <span class='hs-varid'>mappend</span>
+<a name="line-132"></a>
+<a name="line-133"></a><span class='hs-keyword'>instance</span> <span class='hs-layout'>(</span><span class='hs-conid'>Monoid</span> <span class='hs-varid'>w</span><span class='hs-layout'>,</span> <span class='hs-conid'>Monoid</span> <span class='hs-varid'>m</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>Multiplicative</span> <span class='hs-layout'>(</span><span class='hs-conid'>SRWS</span><span class='hs-varop'>.</span><span class='hs-conid'>RWS</span> <span class='hs-varid'>r</span> <span class='hs-varid'>w</span> <span class='hs-varid'>s</span> <span class='hs-varid'>m</span><span class='hs-layout'>)</span> <span class='hs-keyword'>where</span>
+<a name="line-134"></a>    <span class='hs-varid'>one</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>return</span> <span class='hs-varid'>mempty</span>
+<a name="line-135"></a>    <span class='hs-varid'>times</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>liftM2</span> <span class='hs-varid'>mappend</span>
+<a name="line-136"></a>
+<a name="line-137"></a><span class='hs-keyword'>instance</span> <span class='hs-layout'>(</span><span class='hs-conid'>Monoid</span> <span class='hs-varid'>w</span><span class='hs-layout'>,</span> <span class='hs-conid'>Monoid</span> <span class='hs-varid'>m</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>Multiplicative</span> <span class='hs-layout'>(</span><span class='hs-conid'>LRWS</span><span class='hs-varop'>.</span><span class='hs-conid'>RWS</span> <span class='hs-varid'>r</span> <span class='hs-varid'>w</span> <span class='hs-varid'>s</span> <span class='hs-varid'>m</span><span class='hs-layout'>)</span> <span class='hs-keyword'>where</span>
+<a name="line-138"></a>    <span class='hs-varid'>one</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>return</span> <span class='hs-varid'>mempty</span>
+<a name="line-139"></a>    <span class='hs-varid'>times</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>liftM2</span> <span class='hs-varid'>mappend</span>
+<a name="line-140"></a>
+<a name="line-141"></a><span class='hs-keyword'>instance</span> <span class='hs-conid'>Monoid</span> <span class='hs-varid'>m</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>Multiplicative</span> <span class='hs-layout'>(</span><span class='hs-conid'>SState</span><span class='hs-varop'>.</span><span class='hs-conid'>State</span> <span class='hs-varid'>s</span> <span class='hs-varid'>m</span><span class='hs-layout'>)</span> <span class='hs-keyword'>where</span>
+<a name="line-142"></a>    <span class='hs-varid'>one</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>return</span> <span class='hs-varid'>mempty</span>
+<a name="line-143"></a>    <span class='hs-varid'>times</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>liftM2</span> <span class='hs-varid'>mappend</span>
+<a name="line-144"></a>
+<a name="line-145"></a><span class='hs-keyword'>instance</span> <span class='hs-conid'>Monoid</span> <span class='hs-varid'>m</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>Multiplicative</span> <span class='hs-layout'>(</span><span class='hs-conid'>LState</span><span class='hs-varop'>.</span><span class='hs-conid'>State</span> <span class='hs-varid'>s</span> <span class='hs-varid'>m</span><span class='hs-layout'>)</span> <span class='hs-keyword'>where</span>
+<a name="line-146"></a>    <span class='hs-varid'>one</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>return</span> <span class='hs-varid'>mempty</span>
+<a name="line-147"></a>    <span class='hs-varid'>times</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>liftM2</span> <span class='hs-varid'>mappend</span>
+<a name="line-148"></a>
+<a name="line-149"></a><span class='hs-keyword'>instance</span> <span class='hs-conid'>Monoid</span> <span class='hs-varid'>m</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>Multiplicative</span> <span class='hs-layout'>(</span><span class='hs-conid'>Reader</span> <span class='hs-varid'>e</span> <span class='hs-varid'>m</span><span class='hs-layout'>)</span> <span class='hs-keyword'>where</span>
+<a name="line-150"></a>    <span class='hs-varid'>one</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>return</span> <span class='hs-varid'>mempty</span>
+<a name="line-151"></a>    <span class='hs-varid'>times</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>liftM2</span> <span class='hs-varid'>mappend</span>
+<a name="line-152"></a>
+<a name="line-153"></a><span class='hs-keyword'>instance</span> <span class='hs-layout'>(</span><span class='hs-conid'>Monoid</span> <span class='hs-varid'>w</span><span class='hs-layout'>,</span> <span class='hs-conid'>Monoid</span> <span class='hs-varid'>m</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>Multiplicative</span> <span class='hs-layout'>(</span><span class='hs-conid'>SWriter</span><span class='hs-varop'>.</span><span class='hs-conid'>Writer</span> <span class='hs-varid'>w</span> <span class='hs-varid'>m</span><span class='hs-layout'>)</span> <span class='hs-keyword'>where</span>
+<a name="line-154"></a>    <span class='hs-varid'>one</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>return</span> <span class='hs-varid'>mempty</span>
+<a name="line-155"></a>    <span class='hs-varid'>times</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>liftM2</span> <span class='hs-varid'>mappend</span>
+<a name="line-156"></a>
+<a name="line-157"></a><span class='hs-keyword'>instance</span> <span class='hs-layout'>(</span><span class='hs-conid'>Monoid</span> <span class='hs-varid'>w</span><span class='hs-layout'>,</span> <span class='hs-conid'>Monoid</span> <span class='hs-varid'>m</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>Multiplicative</span> <span class='hs-layout'>(</span><span class='hs-conid'>LWriter</span><span class='hs-varop'>.</span><span class='hs-conid'>Writer</span> <span class='hs-varid'>w</span> <span class='hs-varid'>m</span><span class='hs-layout'>)</span> <span class='hs-keyword'>where</span>
+<a name="line-158"></a>    <span class='hs-varid'>one</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>return</span> <span class='hs-varid'>mempty</span>
+<a name="line-159"></a>    <span class='hs-varid'>times</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>liftM2</span> <span class='hs-varid'>mappend</span>
+<a name="line-160"></a>
+<a name="line-161"></a><span class='hs-keyword'>instance</span> <span class='hs-layout'>(</span><span class='hs-conid'>Monad</span> <span class='hs-varid'>m</span><span class='hs-layout'>,</span> <span class='hs-conid'>Monoid</span> <span class='hs-varid'>n</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>Multiplicative</span> <span class='hs-layout'>(</span><span class='hs-conid'>ContT</span> <span class='hs-varid'>r</span> <span class='hs-varid'>m</span> <span class='hs-varid'>n</span><span class='hs-layout'>)</span> <span class='hs-keyword'>where</span>
+<a name="line-162"></a>    <span class='hs-varid'>one</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>return</span> <span class='hs-varid'>mempty</span> 
+<a name="line-163"></a>    <span class='hs-varid'>times</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>liftM2</span> <span class='hs-varid'>mappend</span>
+<a name="line-164"></a>
+<a name="line-165"></a><span class='hs-keyword'>instance</span> <span class='hs-layout'>(</span><span class='hs-conid'>Monad</span> <span class='hs-varid'>m</span><span class='hs-layout'>,</span> <span class='hs-conid'>Monoid</span> <span class='hs-varid'>w</span><span class='hs-layout'>,</span> <span class='hs-conid'>Monoid</span> <span class='hs-varid'>n</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>Multiplicative</span> <span class='hs-layout'>(</span><span class='hs-conid'>SRWS</span><span class='hs-varop'>.</span><span class='hs-conid'>RWST</span> <span class='hs-varid'>r</span> <span class='hs-varid'>w</span> <span class='hs-varid'>s</span> <span class='hs-varid'>m</span> <span class='hs-varid'>n</span><span class='hs-layout'>)</span> <span class='hs-keyword'>where</span> 
+<a name="line-166"></a>    <span class='hs-varid'>one</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>return</span> <span class='hs-varid'>mempty</span> 
+<a name="line-167"></a>    <span class='hs-varid'>times</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>liftM2</span> <span class='hs-varid'>mappend</span>
+<a name="line-168"></a>
+<a name="line-169"></a><span class='hs-keyword'>instance</span> <span class='hs-layout'>(</span><span class='hs-conid'>Monad</span> <span class='hs-varid'>m</span><span class='hs-layout'>,</span> <span class='hs-conid'>Monoid</span> <span class='hs-varid'>w</span><span class='hs-layout'>,</span> <span class='hs-conid'>Monoid</span> <span class='hs-varid'>n</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>Multiplicative</span> <span class='hs-layout'>(</span><span class='hs-conid'>LRWS</span><span class='hs-varop'>.</span><span class='hs-conid'>RWST</span> <span class='hs-varid'>r</span> <span class='hs-varid'>w</span> <span class='hs-varid'>s</span> <span class='hs-varid'>m</span> <span class='hs-varid'>n</span><span class='hs-layout'>)</span> <span class='hs-keyword'>where</span> 
+<a name="line-170"></a>    <span class='hs-varid'>one</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>return</span> <span class='hs-varid'>mempty</span> 
+<a name="line-171"></a>    <span class='hs-varid'>times</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>liftM2</span> <span class='hs-varid'>mappend</span>
+<a name="line-172"></a>
+<a name="line-173"></a><span class='hs-keyword'>instance</span> <span class='hs-layout'>(</span><span class='hs-conid'>Monad</span> <span class='hs-varid'>m</span><span class='hs-layout'>,</span> <span class='hs-conid'>Monoid</span> <span class='hs-varid'>n</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>Multiplicative</span> <span class='hs-layout'>(</span><span class='hs-conid'>SState</span><span class='hs-varop'>.</span><span class='hs-conid'>StateT</span> <span class='hs-varid'>s</span> <span class='hs-varid'>m</span> <span class='hs-varid'>n</span><span class='hs-layout'>)</span> <span class='hs-keyword'>where</span>
+<a name="line-174"></a>    <span class='hs-varid'>one</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>return</span> <span class='hs-varid'>mempty</span>
+<a name="line-175"></a>    <span class='hs-varid'>times</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>liftM2</span> <span class='hs-varid'>mappend</span>
+<a name="line-176"></a>
+<a name="line-177"></a><span class='hs-keyword'>instance</span> <span class='hs-layout'>(</span><span class='hs-conid'>Monad</span> <span class='hs-varid'>m</span><span class='hs-layout'>,</span> <span class='hs-conid'>Monoid</span> <span class='hs-varid'>n</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>Multiplicative</span> <span class='hs-layout'>(</span><span class='hs-conid'>LState</span><span class='hs-varop'>.</span><span class='hs-conid'>StateT</span> <span class='hs-varid'>s</span> <span class='hs-varid'>m</span> <span class='hs-varid'>n</span><span class='hs-layout'>)</span> <span class='hs-keyword'>where</span>
+<a name="line-178"></a>    <span class='hs-varid'>one</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>return</span> <span class='hs-varid'>mempty</span>
+<a name="line-179"></a>    <span class='hs-varid'>times</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>liftM2</span> <span class='hs-varid'>mappend</span>
+<a name="line-180"></a>
+<a name="line-181"></a><span class='hs-keyword'>instance</span> <span class='hs-layout'>(</span><span class='hs-conid'>Monad</span> <span class='hs-varid'>m</span><span class='hs-layout'>,</span> <span class='hs-conid'>Monoid</span> <span class='hs-varid'>n</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>Multiplicative</span> <span class='hs-layout'>(</span><span class='hs-conid'>ReaderT</span> <span class='hs-varid'>e</span> <span class='hs-varid'>m</span> <span class='hs-varid'>n</span><span class='hs-layout'>)</span> <span class='hs-keyword'>where</span>
+<a name="line-182"></a>    <span class='hs-varid'>one</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>return</span> <span class='hs-varid'>mempty</span>
+<a name="line-183"></a>    <span class='hs-varid'>times</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>liftM2</span> <span class='hs-varid'>mappend</span>
+<a name="line-184"></a>
+<a name="line-185"></a><span class='hs-keyword'>instance</span> <span class='hs-layout'>(</span><span class='hs-conid'>Monad</span> <span class='hs-varid'>m</span><span class='hs-layout'>,</span> <span class='hs-conid'>Monoid</span> <span class='hs-varid'>w</span><span class='hs-layout'>,</span> <span class='hs-conid'>Monoid</span> <span class='hs-varid'>n</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>Multiplicative</span> <span class='hs-layout'>(</span><span class='hs-conid'>SWriter</span><span class='hs-varop'>.</span><span class='hs-conid'>WriterT</span> <span class='hs-varid'>w</span> <span class='hs-varid'>m</span> <span class='hs-varid'>n</span><span class='hs-layout'>)</span> <span class='hs-keyword'>where</span>
+<a name="line-186"></a>    <span class='hs-varid'>one</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>return</span> <span class='hs-varid'>mempty</span> 
+<a name="line-187"></a>    <span class='hs-varid'>times</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>liftM2</span> <span class='hs-varid'>mappend</span>
+<a name="line-188"></a>
+<a name="line-189"></a><span class='hs-keyword'>instance</span> <span class='hs-layout'>(</span><span class='hs-conid'>Monad</span> <span class='hs-varid'>m</span><span class='hs-layout'>,</span> <span class='hs-conid'>Monoid</span> <span class='hs-varid'>w</span><span class='hs-layout'>,</span> <span class='hs-conid'>Monoid</span> <span class='hs-varid'>n</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>Multiplicative</span> <span class='hs-layout'>(</span><span class='hs-conid'>LWriter</span><span class='hs-varop'>.</span><span class='hs-conid'>WriterT</span> <span class='hs-varid'>w</span> <span class='hs-varid'>m</span> <span class='hs-varid'>n</span><span class='hs-layout'>)</span> <span class='hs-keyword'>where</span>
+<a name="line-190"></a>    <span class='hs-varid'>one</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>return</span> <span class='hs-varid'>mempty</span> 
+<a name="line-191"></a>    <span class='hs-varid'>times</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>liftM2</span> <span class='hs-varid'>mappend</span>
+<a name="line-192"></a>
+<a name="line-193"></a><span class='hs-keyword'>instance</span> <span class='hs-conid'>Monoid</span> <span class='hs-varid'>n</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>Multiplicative</span> <span class='hs-layout'>(</span><span class='hs-conid'>IO</span> <span class='hs-varid'>n</span><span class='hs-layout'>)</span> <span class='hs-keyword'>where</span>
+<a name="line-194"></a>    <span class='hs-varid'>one</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>return</span> <span class='hs-varid'>mempty</span>
+<a name="line-195"></a>    <span class='hs-varid'>times</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>liftM2</span> <span class='hs-varid'>mappend</span>
+<a name="line-196"></a>
+<a name="line-197"></a><span class='hs-keyword'>instance</span> <span class='hs-conid'>Monoid</span> <span class='hs-varid'>n</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>Multiplicative</span> <span class='hs-layout'>(</span><span class='hs-conid'>SST</span><span class='hs-varop'>.</span><span class='hs-conid'>ST</span> <span class='hs-varid'>s</span> <span class='hs-varid'>n</span><span class='hs-layout'>)</span> <span class='hs-keyword'>where</span>
+<a name="line-198"></a>    <span class='hs-varid'>one</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>return</span> <span class='hs-varid'>mempty</span>
+<a name="line-199"></a>    <span class='hs-varid'>times</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>liftM2</span> <span class='hs-varid'>mappend</span>
+<a name="line-200"></a>
+<a name="line-201"></a><span class='hs-keyword'>instance</span> <span class='hs-conid'>Monoid</span> <span class='hs-varid'>n</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>Multiplicative</span> <span class='hs-layout'>(</span><span class='hs-conid'>LST</span><span class='hs-varop'>.</span><span class='hs-conid'>ST</span> <span class='hs-varid'>s</span> <span class='hs-varid'>n</span><span class='hs-layout'>)</span> <span class='hs-keyword'>where</span>
+<a name="line-202"></a>    <span class='hs-varid'>one</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>return</span> <span class='hs-varid'>mempty</span>
+<a name="line-203"></a>    <span class='hs-varid'>times</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>liftM2</span> <span class='hs-varid'>mappend</span>
+<a name="line-204"></a>
+<a name="line-205"></a><span class='hs-keyword'>instance</span> <span class='hs-conid'>Monoid</span> <span class='hs-varid'>n</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>Multiplicative</span> <span class='hs-layout'>(</span><span class='hs-conid'>STM</span> <span class='hs-varid'>n</span><span class='hs-layout'>)</span> <span class='hs-keyword'>where</span>
+<a name="line-206"></a>    <span class='hs-varid'>one</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>return</span> <span class='hs-varid'>mempty</span>
+<a name="line-207"></a>    <span class='hs-varid'>times</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>liftM2</span> <span class='hs-varid'>mappend</span>
+<a name="line-208"></a>
+<a name="line-209"></a><span class='hs-keyword'>instance</span> <span class='hs-layout'>(</span><span class='hs-conid'>Stream</span> <span class='hs-varid'>s</span> <span class='hs-varid'>m</span> <span class='hs-varid'>t</span><span class='hs-layout'>,</span> <span class='hs-conid'>Monoid</span> <span class='hs-varid'>n</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>Multiplicative</span> <span class='hs-layout'>(</span><span class='hs-conid'>ParsecT</span> <span class='hs-varid'>s</span> <span class='hs-varid'>u</span> <span class='hs-varid'>m</span> <span class='hs-varid'>n</span><span class='hs-layout'>)</span> <span class='hs-keyword'>where</span>
+<a name="line-210"></a>    <span class='hs-varid'>one</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>return</span> <span class='hs-varid'>mempty</span>
+<a name="line-211"></a>    <span class='hs-varid'>times</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>liftM2</span> <span class='hs-varid'>mappend</span>
+<a name="line-212"></a>
+<a name="line-213"></a><span class='hs-comment'>-- Applicative instances</span>
+<a name="line-214"></a>
+<a name="line-215"></a><span class='hs-keyword'>instance</span> <span class='hs-conid'>Monoid</span> <span class='hs-varid'>n</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>Multiplicative</span> <span class='hs-layout'>(</span><span class='hs-conid'>ZipList</span> <span class='hs-varid'>n</span><span class='hs-layout'>)</span> <span class='hs-keyword'>where</span>
+<a name="line-216"></a>    <span class='hs-varid'>one</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>pure</span> <span class='hs-varid'>mempty</span>
+<a name="line-217"></a>    <span class='hs-varid'>times</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>liftA2</span> <span class='hs-varid'>mappend</span>
+<a name="line-218"></a>
+<a name="line-219"></a><span class='hs-keyword'>instance</span> <span class='hs-conid'>Monoid</span> <span class='hs-varid'>m</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>Multiplicative</span> <span class='hs-layout'>(</span><span class='hs-conid'>Const</span> <span class='hs-varid'>m</span> <span class='hs-varid'>a</span><span class='hs-layout'>)</span> <span class='hs-keyword'>where</span>
+<a name="line-220"></a>    <span class='hs-varid'>one</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>pure</span> <span class='hs-varid'>undefined</span>
+<a name="line-221"></a>    <span class='hs-varid'>times</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>liftA2</span> <span class='hs-varid'>undefined</span>
+<a name="line-222"></a>
+</pre></body>
+</html>
addfile ./dist/doc/html/monoids/src/Data-Monoid-Ord.html
hunk ./dist/doc/html/monoids/src/Data-Monoid-Ord.html 1
+<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
+<html>
+<head>
+<!-- Generated by HsColour, http://www.cs.york.ac.uk/fp/darcs/hscolour/ -->
+<title>Data/Monoid/Ord.hs</title>
+<link type='text/css' rel='stylesheet' href='hscolour.css' />
+</head>
+<body>
+<pre><a name="line-1"></a><span class='hs-comment'>{-# LANGUAGE FlexibleInstances, MultiParamTypeClasses #-}</span>
+<a name="line-2"></a><span class='hs-comment'>-----------------------------------------------------------------------------</span>
+<a name="line-3"></a><span class='hs-comment'>---- |</span>
+<a name="line-4"></a><span class='hs-comment'>---- Module      :  Data.Monoid.Ord</span>
+<a name="line-5"></a><span class='hs-comment'>---- Copyright   :  (c) Edward Kmett 2009</span>
+<a name="line-6"></a><span class='hs-comment'>---- License     :  BSD-style</span>
+<a name="line-7"></a><span class='hs-comment'>---- Maintainer  :  libraries@haskell.org</span>
+<a name="line-8"></a><span class='hs-comment'>---- Stability   :  experimental</span>
+<a name="line-9"></a><span class='hs-comment'>---- Portability :  portable</span>
+<a name="line-10"></a><span class='hs-comment'>----</span>
+<a name="line-11"></a><span class='hs-comment'>---- Some 'Monoid' instances that should probably be in "Data.Monoid".</span>
+<a name="line-12"></a><span class='hs-comment'>----</span>
+<a name="line-13"></a><span class='hs-comment'>-----------------------------------------------------------------------------</span>
+<a name="line-14"></a>
+<a name="line-15"></a><span class='hs-keyword'>module</span> <span class='hs-conid'>Data</span><span class='hs-varop'>.</span><span class='hs-conid'>Monoid</span><span class='hs-varop'>.</span><span class='hs-conid'>Ord</span> 
+<a name="line-16"></a>    <span class='hs-layout'>(</span> <span class='hs-keyword'>module</span> <span class='hs-conid'>Data</span><span class='hs-varop'>.</span><span class='hs-conid'>Monoid</span><span class='hs-varop'>.</span><span class='hs-conid'>Reducer</span>
+<a name="line-17"></a>    <span class='hs-comment'>-- * Max</span>
+<a name="line-18"></a>    <span class='hs-layout'>,</span> <span class='hs-conid'>Max</span><span class='hs-layout'>(</span><span class='hs-conid'>Max</span><span class='hs-layout'>,</span><span class='hs-varid'>getMax</span><span class='hs-layout'>)</span>
+<a name="line-19"></a>    <span class='hs-comment'>-- * Min</span>
+<a name="line-20"></a>    <span class='hs-layout'>,</span> <span class='hs-conid'>Min</span><span class='hs-layout'>(</span><span class='hs-conid'>Min</span><span class='hs-layout'>,</span><span class='hs-varid'>getMin</span><span class='hs-layout'>)</span>
+<a name="line-21"></a>    <span class='hs-comment'>-- * MaxPriority: Max semigroup w/ added bottom</span>
+<a name="line-22"></a>    <span class='hs-layout'>,</span> <span class='hs-conid'>MaxPriority</span><span class='hs-layout'>(</span><span class='hs-conid'>MaxPriority</span><span class='hs-layout'>,</span><span class='hs-varid'>getMaxPriority</span><span class='hs-layout'>)</span>
+<a name="line-23"></a>    <span class='hs-layout'>,</span> <span class='hs-varid'>minfinity</span>
+<a name="line-24"></a>    <span class='hs-comment'>-- * MinPriority: Min semigroup w/ added top</span>
+<a name="line-25"></a>    <span class='hs-layout'>,</span> <span class='hs-conid'>MinPriority</span><span class='hs-layout'>(</span><span class='hs-conid'>MinPriority</span><span class='hs-layout'>,</span><span class='hs-varid'>getMinPriority</span><span class='hs-layout'>)</span>
+<a name="line-26"></a>    <span class='hs-layout'>,</span> <span class='hs-varid'>infinity</span>
+<a name="line-27"></a>    <span class='hs-layout'>)</span> <span class='hs-keyword'>where</span>
+<a name="line-28"></a>
+<a name="line-29"></a><span class='hs-keyword'>import</span> <span class='hs-conid'>Control</span><span class='hs-varop'>.</span><span class='hs-conid'>Functor</span><span class='hs-varop'>.</span><span class='hs-conid'>Pointed</span>
+<a name="line-30"></a><span class='hs-keyword'>import</span> <span class='hs-conid'>Data</span><span class='hs-varop'>.</span><span class='hs-conid'>Monoid</span><span class='hs-varop'>.</span><span class='hs-conid'>Reducer</span> <span class='hs-layout'>(</span><span class='hs-conid'>Reducer</span><span class='hs-layout'>,</span> <span class='hs-varid'>unit</span><span class='hs-layout'>,</span> <span class='hs-conid'>Monoid</span><span class='hs-layout'>,</span> <span class='hs-varid'>mappend</span><span class='hs-layout'>,</span> <span class='hs-varid'>mempty</span><span class='hs-layout'>)</span>
+<a name="line-31"></a><span class='hs-keyword'>import</span> <span class='hs-conid'>Data</span><span class='hs-varop'>.</span><span class='hs-conid'>Ring</span><span class='hs-varop'>.</span><span class='hs-conid'>Semi</span>
+<a name="line-32"></a>
+<a name="line-33"></a><a name="Max"></a><span class='hs-comment'>-- | The 'Monoid' @('max','minBound')@</span>
+<a name="line-34"></a><a name="Max"></a><span class='hs-keyword'>newtype</span> <span class='hs-conid'>Max</span> <span class='hs-varid'>a</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>Max</span> <span class='hs-layout'>{</span> <span class='hs-varid'>getMax</span> <span class='hs-keyglyph'>::</span> <span class='hs-varid'>a</span> <span class='hs-layout'>}</span> <span class='hs-keyword'>deriving</span> <span class='hs-layout'>(</span><span class='hs-conid'>Eq</span><span class='hs-layout'>,</span><span class='hs-conid'>Ord</span><span class='hs-layout'>,</span><span class='hs-conid'>Show</span><span class='hs-layout'>,</span><span class='hs-conid'>Read</span><span class='hs-layout'>,</span><span class='hs-conid'>Bounded</span><span class='hs-layout'>)</span>
+<a name="line-35"></a>
+<a name="line-36"></a><span class='hs-keyword'>instance</span> <span class='hs-layout'>(</span><span class='hs-conid'>Ord</span> <span class='hs-varid'>a</span><span class='hs-layout'>,</span> <span class='hs-conid'>Bounded</span> <span class='hs-varid'>a</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>Monoid</span> <span class='hs-layout'>(</span><span class='hs-conid'>Max</span> <span class='hs-varid'>a</span><span class='hs-layout'>)</span> <span class='hs-keyword'>where</span>
+<a name="line-37"></a>    <span class='hs-varid'>mempty</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>Max</span> <span class='hs-varid'>minBound</span>
+<a name="line-38"></a>    <span class='hs-varid'>mappend</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>max</span>
+<a name="line-39"></a>
+<a name="line-40"></a><span class='hs-keyword'>instance</span> <span class='hs-layout'>(</span><span class='hs-conid'>Ord</span> <span class='hs-varid'>a</span><span class='hs-layout'>,</span> <span class='hs-conid'>Bounded</span> <span class='hs-varid'>a</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>Reducer</span> <span class='hs-varid'>a</span> <span class='hs-layout'>(</span><span class='hs-conid'>Max</span> <span class='hs-varid'>a</span><span class='hs-layout'>)</span> <span class='hs-keyword'>where</span>
+<a name="line-41"></a>    <span class='hs-varid'>unit</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>Max</span>
+<a name="line-42"></a>
+<a name="line-43"></a><span class='hs-keyword'>instance</span> <span class='hs-conid'>Functor</span> <span class='hs-conid'>Max</span> <span class='hs-keyword'>where</span> 
+<a name="line-44"></a>    <span class='hs-varid'>fmap</span> <span class='hs-varid'>f</span> <span class='hs-layout'>(</span><span class='hs-conid'>Max</span> <span class='hs-varid'>a</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>Max</span> <span class='hs-layout'>(</span><span class='hs-varid'>f</span> <span class='hs-varid'>a</span><span class='hs-layout'>)</span>
+<a name="line-45"></a>
+<a name="line-46"></a><span class='hs-keyword'>instance</span> <span class='hs-conid'>Pointed</span> <span class='hs-conid'>Max</span> <span class='hs-keyword'>where</span>
+<a name="line-47"></a>    <span class='hs-varid'>point</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>Max</span>
+<a name="line-48"></a>
+<a name="line-49"></a><span class='hs-keyword'>instance</span> <span class='hs-conid'>Copointed</span> <span class='hs-conid'>Max</span> <span class='hs-keyword'>where</span>
+<a name="line-50"></a>    <span class='hs-varid'>extract</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>getMax</span>
+<a name="line-51"></a>
+<a name="line-52"></a><a name="Min"></a><span class='hs-comment'>-- | The 'Monoid' given by @('min','maxBound')@</span>
+<a name="line-53"></a><a name="Min"></a><span class='hs-keyword'>newtype</span> <span class='hs-conid'>Min</span> <span class='hs-varid'>a</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>Min</span> <span class='hs-layout'>{</span> <span class='hs-varid'>getMin</span> <span class='hs-keyglyph'>::</span> <span class='hs-varid'>a</span> <span class='hs-layout'>}</span> <span class='hs-keyword'>deriving</span> <span class='hs-layout'>(</span><span class='hs-conid'>Eq</span><span class='hs-layout'>,</span><span class='hs-conid'>Ord</span><span class='hs-layout'>,</span><span class='hs-conid'>Show</span><span class='hs-layout'>,</span><span class='hs-conid'>Read</span><span class='hs-layout'>,</span><span class='hs-conid'>Bounded</span><span class='hs-layout'>)</span>
+<a name="line-54"></a>
+<a name="line-55"></a><span class='hs-keyword'>instance</span> <span class='hs-layout'>(</span><span class='hs-conid'>Ord</span> <span class='hs-varid'>a</span><span class='hs-layout'>,</span> <span class='hs-conid'>Bounded</span> <span class='hs-varid'>a</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>Monoid</span> <span class='hs-layout'>(</span><span class='hs-conid'>Min</span> <span class='hs-varid'>a</span><span class='hs-layout'>)</span> <span class='hs-keyword'>where</span>
+<a name="line-56"></a>    <span class='hs-varid'>mempty</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>Min</span> <span class='hs-varid'>maxBound</span>
+<a name="line-57"></a>    <span class='hs-varid'>mappend</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>min</span>
+<a name="line-58"></a>
+<a name="line-59"></a><span class='hs-keyword'>instance</span> <span class='hs-layout'>(</span><span class='hs-conid'>Ord</span> <span class='hs-varid'>a</span><span class='hs-layout'>,</span> <span class='hs-conid'>Bounded</span> <span class='hs-varid'>a</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>Reducer</span> <span class='hs-varid'>a</span> <span class='hs-layout'>(</span><span class='hs-conid'>Min</span> <span class='hs-varid'>a</span><span class='hs-layout'>)</span> <span class='hs-keyword'>where</span>
+<a name="line-60"></a>    <span class='hs-varid'>unit</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>Min</span>
+<a name="line-61"></a>
+<a name="line-62"></a><span class='hs-keyword'>instance</span> <span class='hs-conid'>Functor</span> <span class='hs-conid'>Min</span> <span class='hs-keyword'>where</span>
+<a name="line-63"></a>    <span class='hs-varid'>fmap</span> <span class='hs-varid'>f</span> <span class='hs-layout'>(</span><span class='hs-conid'>Min</span> <span class='hs-varid'>a</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>Min</span> <span class='hs-layout'>(</span><span class='hs-varid'>f</span> <span class='hs-varid'>a</span><span class='hs-layout'>)</span>
+<a name="line-64"></a>
+<a name="line-65"></a><span class='hs-keyword'>instance</span> <span class='hs-conid'>Pointed</span> <span class='hs-conid'>Min</span> <span class='hs-keyword'>where</span>
+<a name="line-66"></a>    <span class='hs-varid'>point</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>Min</span>
+<a name="line-67"></a>
+<a name="line-68"></a><span class='hs-keyword'>instance</span> <span class='hs-conid'>Copointed</span> <span class='hs-conid'>Min</span> <span class='hs-keyword'>where</span>
+<a name="line-69"></a>    <span class='hs-varid'>extract</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>getMin</span>
+<a name="line-70"></a>
+<a name="line-71"></a><a name="minfinity"></a><span class='hs-definition'>minfinity</span> <span class='hs-keyglyph'>::</span> <span class='hs-conid'>MaxPriority</span> <span class='hs-varid'>a</span>
+<a name="line-72"></a><span class='hs-definition'>minfinity</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>MaxPriority</span> <span class='hs-conid'>Nothing</span>
+<a name="line-73"></a>
+<a name="line-74"></a><a name="MaxPriority"></a><span class='hs-comment'>-- | The 'Monoid' @('max','Nothing')@ over @'Maybe' a@ where 'Nothing' is the bottom element</span>
+<a name="line-75"></a><a name="MaxPriority"></a><span class='hs-keyword'>newtype</span> <span class='hs-conid'>MaxPriority</span> <span class='hs-varid'>a</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>MaxPriority</span> <span class='hs-layout'>{</span> <span class='hs-varid'>getMaxPriority</span> <span class='hs-keyglyph'>::</span> <span class='hs-conid'>Maybe</span> <span class='hs-varid'>a</span> <span class='hs-layout'>}</span> <span class='hs-keyword'>deriving</span> <span class='hs-layout'>(</span><span class='hs-conid'>Eq</span><span class='hs-layout'>,</span><span class='hs-conid'>Ord</span><span class='hs-layout'>,</span><span class='hs-conid'>Show</span><span class='hs-layout'>,</span><span class='hs-conid'>Read</span><span class='hs-layout'>)</span>
+<a name="line-76"></a>
+<a name="line-77"></a><span class='hs-keyword'>instance</span> <span class='hs-conid'>Ord</span> <span class='hs-varid'>a</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>Monoid</span> <span class='hs-layout'>(</span><span class='hs-conid'>MaxPriority</span> <span class='hs-varid'>a</span><span class='hs-layout'>)</span> <span class='hs-keyword'>where</span>
+<a name="line-78"></a>    <span class='hs-varid'>mempty</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>MaxPriority</span> <span class='hs-conid'>Nothing</span>
+<a name="line-79"></a>    <span class='hs-varid'>mappend</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>max</span>
+<a name="line-80"></a>
+<a name="line-81"></a><span class='hs-keyword'>instance</span> <span class='hs-conid'>Ord</span> <span class='hs-varid'>a</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>Reducer</span> <span class='hs-layout'>(</span><span class='hs-conid'>Maybe</span> <span class='hs-varid'>a</span><span class='hs-layout'>)</span> <span class='hs-layout'>(</span><span class='hs-conid'>MaxPriority</span> <span class='hs-varid'>a</span><span class='hs-layout'>)</span> <span class='hs-keyword'>where</span>
+<a name="line-82"></a>    <span class='hs-varid'>unit</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>MaxPriority</span>
+<a name="line-83"></a>
+<a name="line-84"></a><span class='hs-keyword'>instance</span> <span class='hs-conid'>Functor</span> <span class='hs-conid'>MaxPriority</span> <span class='hs-keyword'>where</span>
+<a name="line-85"></a>    <span class='hs-varid'>fmap</span> <span class='hs-varid'>f</span> <span class='hs-layout'>(</span><span class='hs-conid'>MaxPriority</span> <span class='hs-varid'>a</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>MaxPriority</span> <span class='hs-layout'>(</span><span class='hs-varid'>fmap</span> <span class='hs-varid'>f</span> <span class='hs-varid'>a</span><span class='hs-layout'>)</span>
+<a name="line-86"></a>
+<a name="line-87"></a><span class='hs-keyword'>instance</span> <span class='hs-conid'>Pointed</span> <span class='hs-conid'>MaxPriority</span> <span class='hs-keyword'>where</span>
+<a name="line-88"></a>    <span class='hs-varid'>point</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>MaxPriority</span> <span class='hs-varop'>.</span> <span class='hs-conid'>Just</span>
+<a name="line-89"></a>
+<a name="line-90"></a><a name="infinity"></a><span class='hs-definition'>infinity</span> <span class='hs-keyglyph'>::</span> <span class='hs-conid'>MinPriority</span> <span class='hs-varid'>a</span>
+<a name="line-91"></a><span class='hs-definition'>infinity</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>MinPriority</span> <span class='hs-conid'>Nothing</span>
+<a name="line-92"></a>
+<a name="line-93"></a><a name="MinPriority"></a><span class='hs-comment'>-- | The 'Monoid' @('min','Nothing')@ over @'Maybe' a@ where 'Nothing' is the top element</span>
+<a name="line-94"></a><a name="MinPriority"></a><span class='hs-keyword'>newtype</span> <span class='hs-conid'>MinPriority</span> <span class='hs-varid'>a</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>MinPriority</span> <span class='hs-layout'>{</span> <span class='hs-varid'>getMinPriority</span> <span class='hs-keyglyph'>::</span> <span class='hs-conid'>Maybe</span> <span class='hs-varid'>a</span> <span class='hs-layout'>}</span> <span class='hs-keyword'>deriving</span> <span class='hs-layout'>(</span><span class='hs-conid'>Eq</span><span class='hs-layout'>,</span><span class='hs-conid'>Show</span><span class='hs-layout'>,</span><span class='hs-conid'>Read</span><span class='hs-layout'>)</span>
+<a name="line-95"></a>
+<a name="line-96"></a><span class='hs-keyword'>instance</span> <span class='hs-conid'>Ord</span> <span class='hs-varid'>a</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>Ord</span> <span class='hs-layout'>(</span><span class='hs-conid'>MinPriority</span> <span class='hs-varid'>a</span><span class='hs-layout'>)</span> <span class='hs-keyword'>where</span>
+<a name="line-97"></a>    <span class='hs-conid'>MinPriority</span> <span class='hs-conid'>Nothing</span>  <span class='hs-varop'>`compare`</span> <span class='hs-conid'>MinPriority</span> <span class='hs-conid'>Nothing</span>  <span class='hs-keyglyph'>=</span> <span class='hs-conid'>EQ</span>
+<a name="line-98"></a>    <span class='hs-conid'>MinPriority</span> <span class='hs-conid'>Nothing</span>  <span class='hs-varop'>`compare`</span> <span class='hs-keyword'>_</span>                    <span class='hs-keyglyph'>=</span> <span class='hs-conid'>GT</span>
+<a name="line-99"></a>    <span class='hs-keyword'>_</span>                    <span class='hs-varop'>`compare`</span> <span class='hs-conid'>MinPriority</span> <span class='hs-conid'>Nothing</span>  <span class='hs-keyglyph'>=</span> <span class='hs-conid'>LT</span>
+<a name="line-100"></a>    <span class='hs-conid'>MinPriority</span> <span class='hs-layout'>(</span><span class='hs-conid'>Just</span> <span class='hs-varid'>a</span><span class='hs-layout'>)</span> <span class='hs-varop'>`compare`</span> <span class='hs-conid'>MinPriority</span> <span class='hs-layout'>(</span><span class='hs-conid'>Just</span> <span class='hs-varid'>b</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>a</span> <span class='hs-varop'>`compare`</span> <span class='hs-varid'>b</span>
+<a name="line-101"></a>
+<a name="line-102"></a><span class='hs-keyword'>instance</span> <span class='hs-conid'>Ord</span> <span class='hs-varid'>a</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>Monoid</span> <span class='hs-layout'>(</span><span class='hs-conid'>MinPriority</span> <span class='hs-varid'>a</span><span class='hs-layout'>)</span> <span class='hs-keyword'>where</span>
+<a name="line-103"></a>    <span class='hs-varid'>mempty</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>MinPriority</span> <span class='hs-conid'>Nothing</span>
+<a name="line-104"></a>    <span class='hs-varid'>mappend</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>min</span>
+<a name="line-105"></a>
+<a name="line-106"></a><span class='hs-keyword'>instance</span> <span class='hs-conid'>Ord</span> <span class='hs-varid'>a</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>Reducer</span> <span class='hs-layout'>(</span><span class='hs-conid'>Maybe</span> <span class='hs-varid'>a</span><span class='hs-layout'>)</span> <span class='hs-layout'>(</span><span class='hs-conid'>MinPriority</span> <span class='hs-varid'>a</span><span class='hs-layout'>)</span> <span class='hs-keyword'>where</span>
+<a name="line-107"></a>    <span class='hs-varid'>unit</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>MinPriority</span>
+<a name="line-108"></a>
+<a name="line-109"></a><span class='hs-keyword'>instance</span> <span class='hs-conid'>Functor</span> <span class='hs-conid'>MinPriority</span> <span class='hs-keyword'>where</span>
+<a name="line-110"></a>    <span class='hs-varid'>fmap</span> <span class='hs-varid'>f</span> <span class='hs-layout'>(</span><span class='hs-conid'>MinPriority</span> <span class='hs-varid'>a</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>MinPriority</span> <span class='hs-layout'>(</span><span class='hs-varid'>fmap</span> <span class='hs-varid'>f</span> <span class='hs-varid'>a</span><span class='hs-layout'>)</span>
+<a name="line-111"></a>
+<a name="line-112"></a><span class='hs-keyword'>instance</span> <span class='hs-conid'>Pointed</span> <span class='hs-conid'>MinPriority</span> <span class='hs-keyword'>where</span>
+<a name="line-113"></a>    <span class='hs-varid'>point</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>MinPriority</span> <span class='hs-varop'>.</span> <span class='hs-conid'>Just</span>
+</pre></body>
+</html>
addfile ./dist/doc/html/monoids/src/Data-Monoid-Reducer-Char.html
hunk ./dist/doc/html/monoids/src/Data-Monoid-Reducer-Char.html 1
+<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
+<html>
+<head>
+<!-- Generated by HsColour, http://www.cs.york.ac.uk/fp/darcs/hscolour/ -->
+<title>Data/Monoid/Reducer/Char.hs</title>
+<link type='text/css' rel='stylesheet' href='hscolour.css' />
+</head>
+<body>
+<pre><a name="line-1"></a><span class='hs-comment'>{-# LANGUAGE UndecidableInstances, FlexibleContexts, MultiParamTypeClasses, FlexibleInstances #-}</span>
+<a name="line-2"></a>
+<a name="line-3"></a><span class='hs-comment'>-----------------------------------------------------------------------------</span>
+<a name="line-4"></a><span class='hs-comment'>-- |</span>
+<a name="line-5"></a><span class='hs-comment'>-- Module      :  Data.Monoid.Reducer.Char</span>
+<a name="line-6"></a><span class='hs-comment'>-- Copyright   :  (c) Edward Kmett 2009</span>
+<a name="line-7"></a><span class='hs-comment'>-- License     :  BSD-style</span>
+<a name="line-8"></a><span class='hs-comment'>-- Maintainer  :  libraries@haskell.org</span>
+<a name="line-9"></a><span class='hs-comment'>-- Stability   :  experimental</span>
+<a name="line-10"></a><span class='hs-comment'>-- Portability :  non-portable (MPTCs)</span>
+<a name="line-11"></a><span class='hs-comment'>--</span>
+<a name="line-12"></a><span class='hs-comment'>-----------------------------------------------------------------------------</span>
+<a name="line-13"></a>
+<a name="line-14"></a><span class='hs-keyword'>module</span> <span class='hs-conid'>Data</span><span class='hs-varop'>.</span><span class='hs-conid'>Monoid</span><span class='hs-varop'>.</span><span class='hs-conid'>Reducer</span><span class='hs-varop'>.</span><span class='hs-conid'>Char</span>
+<a name="line-15"></a>    <span class='hs-layout'>(</span> <span class='hs-keyword'>module</span> <span class='hs-conid'>Data</span><span class='hs-varop'>.</span><span class='hs-conid'>Monoid</span><span class='hs-varop'>.</span><span class='hs-conid'>Reducer</span>
+<a name="line-16"></a>    <span class='hs-layout'>,</span> <span class='hs-conid'>CharReducer</span>
+<a name="line-17"></a>    <span class='hs-layout'>,</span> <span class='hs-varid'>invalidChar</span>
+<a name="line-18"></a>    <span class='hs-layout'>,</span> <span class='hs-varid'>fromChar</span>
+<a name="line-19"></a>    <span class='hs-layout'>)</span> <span class='hs-keyword'>where</span>
+<a name="line-20"></a>
+<a name="line-21"></a><span class='hs-keyword'>import</span> <span class='hs-conid'>Data</span><span class='hs-varop'>.</span><span class='hs-conid'>Monoid</span><span class='hs-varop'>.</span><span class='hs-conid'>Reducer</span>
+<a name="line-22"></a><span class='hs-keyword'>import</span> <span class='hs-conid'>Data</span><span class='hs-varop'>.</span><span class='hs-conid'>Word</span> <span class='hs-layout'>(</span><span class='hs-conid'>Word8</span><span class='hs-layout'>)</span>
+<a name="line-23"></a>
+<a name="line-24"></a><span class='hs-comment'>-- | Provides a mechanism for the UTF8 'Monoid' to report invalid characters to one or more monoids.</span>
+<a name="line-25"></a>
+<a name="line-26"></a><a name="CharReducer"></a><span class='hs-keyword'>class</span> <span class='hs-conid'>Reducer</span> <span class='hs-conid'>Char</span> <span class='hs-varid'>m</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>CharReducer</span> <span class='hs-varid'>m</span> <span class='hs-keyword'>where</span>
+<a name="line-27"></a>    <span class='hs-varid'>fromChar</span> <span class='hs-keyglyph'>::</span> <span class='hs-conid'>Char</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-varid'>m</span> 
+<a name="line-28"></a>    <span class='hs-varid'>fromChar</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>unit</span>
+<a name="line-29"></a>
+<a name="line-30"></a>    <span class='hs-varid'>invalidChar</span> <span class='hs-keyglyph'>::</span> <span class='hs-keyglyph'>[</span><span class='hs-conid'>Word8</span><span class='hs-keyglyph'>]</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-varid'>m</span>
+<a name="line-31"></a>    <span class='hs-varid'>invalidChar</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>const</span> <span class='hs-varid'>mempty</span>
+<a name="line-32"></a>
+<a name="line-33"></a><span class='hs-keyword'>instance</span> <span class='hs-layout'>(</span><span class='hs-conid'>CharReducer</span> <span class='hs-varid'>m</span><span class='hs-layout'>,</span> <span class='hs-conid'>CharReducer</span> <span class='hs-varid'>m'</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=&gt;</span>  <span class='hs-conid'>CharReducer</span> <span class='hs-layout'>(</span><span class='hs-varid'>m</span><span class='hs-layout'>,</span><span class='hs-varid'>m'</span><span class='hs-layout'>)</span> <span class='hs-keyword'>where</span>
+<a name="line-34"></a>    <span class='hs-varid'>invalidChar</span> <span class='hs-varid'>bs</span> <span class='hs-keyglyph'>=</span> <span class='hs-layout'>(</span><span class='hs-varid'>invalidChar</span> <span class='hs-varid'>bs</span><span class='hs-layout'>,</span> <span class='hs-varid'>invalidChar</span> <span class='hs-varid'>bs</span><span class='hs-layout'>)</span>
+<a name="line-35"></a>
+<a name="line-36"></a><span class='hs-keyword'>instance</span> <span class='hs-layout'>(</span><span class='hs-conid'>CharReducer</span> <span class='hs-varid'>m</span><span class='hs-layout'>,</span> <span class='hs-conid'>CharReducer</span> <span class='hs-varid'>m'</span><span class='hs-layout'>,</span> <span class='hs-conid'>CharReducer</span> <span class='hs-varid'>m''</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=&gt;</span>  <span class='hs-conid'>CharReducer</span> <span class='hs-layout'>(</span><span class='hs-varid'>m</span><span class='hs-layout'>,</span><span class='hs-varid'>m'</span><span class='hs-layout'>,</span><span class='hs-varid'>m''</span><span class='hs-layout'>)</span> <span class='hs-keyword'>where</span>
+<a name="line-37"></a>    <span class='hs-varid'>invalidChar</span> <span class='hs-varid'>bs</span> <span class='hs-keyglyph'>=</span> <span class='hs-layout'>(</span><span class='hs-varid'>invalidChar</span> <span class='hs-varid'>bs</span><span class='hs-layout'>,</span> <span class='hs-varid'>invalidChar</span> <span class='hs-varid'>bs</span><span class='hs-layout'>,</span> <span class='hs-varid'>invalidChar</span> <span class='hs-varid'>bs</span><span class='hs-layout'>)</span>
+<a name="line-38"></a>
+<a name="line-39"></a><span class='hs-keyword'>instance</span> <span class='hs-layout'>(</span><span class='hs-conid'>CharReducer</span> <span class='hs-varid'>m</span><span class='hs-layout'>,</span> <span class='hs-conid'>CharReducer</span> <span class='hs-varid'>m'</span><span class='hs-layout'>,</span> <span class='hs-conid'>CharReducer</span> <span class='hs-varid'>m''</span><span class='hs-layout'>,</span> <span class='hs-conid'>CharReducer</span> <span class='hs-varid'>m'''</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=&gt;</span>  <span class='hs-conid'>CharReducer</span> <span class='hs-layout'>(</span><span class='hs-varid'>m</span><span class='hs-layout'>,</span><span class='hs-varid'>m'</span><span class='hs-layout'>,</span><span class='hs-varid'>m''</span><span class='hs-layout'>,</span><span class='hs-varid'>m'''</span><span class='hs-layout'>)</span> <span class='hs-keyword'>where</span>
+<a name="line-40"></a>    <span class='hs-varid'>invalidChar</span> <span class='hs-varid'>bs</span> <span class='hs-keyglyph'>=</span> <span class='hs-layout'>(</span><span class='hs-varid'>invalidChar</span> <span class='hs-varid'>bs</span><span class='hs-layout'>,</span> <span class='hs-varid'>invalidChar</span> <span class='hs-varid'>bs</span><span class='hs-layout'>,</span> <span class='hs-varid'>invalidChar</span> <span class='hs-varid'>bs</span><span class='hs-layout'>,</span> <span class='hs-varid'>invalidChar</span> <span class='hs-varid'>bs</span><span class='hs-layout'>)</span>
+<a name="line-41"></a>
+<a name="line-42"></a><span class='hs-keyword'>instance</span> <span class='hs-conid'>CharReducer</span> <span class='hs-keyglyph'>[</span><span class='hs-conid'>Char</span><span class='hs-keyglyph'>]</span>
+</pre></body>
+</html>
addfile ./dist/doc/html/monoids/src/Data-Monoid-Reducer-With.html
hunk ./dist/doc/html/monoids/src/Data-Monoid-Reducer-With.html 1
+<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
+<html>
+<head>
+<!-- Generated by HsColour, http://www.cs.york.ac.uk/fp/darcs/hscolour/ -->
+<title>Data/Monoid/Reducer/With.hs</title>
+<link type='text/css' rel='stylesheet' href='hscolour.css' />
+</head>
+<body>
+<pre><a name="line-1"></a><span class='hs-comment'>{-# LANGUAGE UndecidableInstances, TypeOperators, FlexibleContexts, MultiParamTypeClasses, FlexibleInstances #-}</span>
+<a name="line-2"></a>
+<a name="line-3"></a><span class='hs-comment'>-----------------------------------------------------------------------------</span>
+<a name="line-4"></a><span class='hs-comment'>-- |</span>
+<a name="line-5"></a><span class='hs-comment'>-- Module      :  Data.Monoid.Reducer.With</span>
+<a name="line-6"></a><span class='hs-comment'>-- Copyright   :  (c) Edward Kmett 2009</span>
+<a name="line-7"></a><span class='hs-comment'>-- License     :  BSD-style</span>
+<a name="line-8"></a><span class='hs-comment'>-- Maintainer  :  libraries@haskell.org</span>
+<a name="line-9"></a><span class='hs-comment'>-- Stability   :  experimental</span>
+<a name="line-10"></a><span class='hs-comment'>-- Portability :  non-portable (MPTCs)</span>
+<a name="line-11"></a><span class='hs-comment'>--</span>
+<a name="line-12"></a><span class='hs-comment'>-----------------------------------------------------------------------------</span>
+<a name="line-13"></a>
+<a name="line-14"></a><span class='hs-keyword'>module</span> <span class='hs-conid'>Data</span><span class='hs-varop'>.</span><span class='hs-conid'>Monoid</span><span class='hs-varop'>.</span><span class='hs-conid'>Reducer</span><span class='hs-varop'>.</span><span class='hs-conid'>With</span>
+<a name="line-15"></a>    <span class='hs-layout'>(</span> <span class='hs-keyword'>module</span> <span class='hs-conid'>Data</span><span class='hs-varop'>.</span><span class='hs-conid'>Monoid</span><span class='hs-varop'>.</span><span class='hs-conid'>Reducer</span>
+<a name="line-16"></a>    <span class='hs-layout'>,</span> <span class='hs-conid'>WithReducer</span><span class='hs-layout'>(</span><span class='hs-conid'>WithReducer</span><span class='hs-layout'>,</span><span class='hs-varid'>withoutReducer</span><span class='hs-layout'>)</span>
+<a name="line-17"></a>    <span class='hs-layout'>)</span> <span class='hs-keyword'>where</span>
+<a name="line-18"></a>
+<a name="line-19"></a><span class='hs-keyword'>import</span> <span class='hs-conid'>Data</span><span class='hs-varop'>.</span><span class='hs-conid'>Monoid</span><span class='hs-varop'>.</span><span class='hs-conid'>Reducer</span>
+<a name="line-20"></a><span class='hs-keyword'>import</span> <span class='hs-conid'>Data</span><span class='hs-varop'>.</span><span class='hs-conid'>FingerTree</span>
+<a name="line-21"></a>
+<a name="line-22"></a><span class='hs-comment'>-- | If @m@ is a @c@-"Reducer", then m is @(c `WithReducer` m)@-"Reducer"</span>
+<a name="line-23"></a><span class='hs-comment'>--   This can be used to quickly select a "Reducer" for use as a 'FingerTree'</span>
+<a name="line-24"></a><span class='hs-comment'>--   'measure'.</span>
+<a name="line-25"></a>
+<a name="line-26"></a><a name="WithReducer"></a><span class='hs-keyword'>newtype</span> <span class='hs-conid'>WithReducer</span> <span class='hs-varid'>c</span> <span class='hs-varid'>m</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>WithReducer</span> <span class='hs-layout'>{</span> <span class='hs-varid'>withoutReducer</span> <span class='hs-keyglyph'>::</span> <span class='hs-varid'>c</span> <span class='hs-layout'>}</span> 
+<a name="line-27"></a>
+<a name="line-28"></a><span class='hs-keyword'>instance</span> <span class='hs-layout'>(</span><span class='hs-varid'>c</span> <span class='hs-varop'>`Reducer`</span> <span class='hs-varid'>m</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>Reducer</span> <span class='hs-layout'>(</span><span class='hs-varid'>c</span> <span class='hs-varop'>`WithReducer`</span> <span class='hs-varid'>m</span><span class='hs-layout'>)</span> <span class='hs-varid'>m</span> <span class='hs-keyword'>where</span>
+<a name="line-29"></a>    <span class='hs-varid'>unit</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>unit</span> <span class='hs-varop'>.</span> <span class='hs-varid'>withoutReducer</span> 
+<a name="line-30"></a>
+<a name="line-31"></a><span class='hs-keyword'>instance</span> <span class='hs-layout'>(</span><span class='hs-varid'>c</span> <span class='hs-varop'>`Reducer`</span> <span class='hs-varid'>m</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>Measured</span> <span class='hs-varid'>m</span> <span class='hs-layout'>(</span><span class='hs-varid'>c</span> <span class='hs-varop'>`WithReducer`</span> <span class='hs-varid'>m</span><span class='hs-layout'>)</span> <span class='hs-keyword'>where</span>
+<a name="line-32"></a>    <span class='hs-varid'>measure</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>unit</span> <span class='hs-varop'>.</span> <span class='hs-varid'>withoutReducer</span>
+</pre></body>
+</html>
addfile ./dist/doc/html/monoids/src/Data-Monoid-Reducer.html
hunk ./dist/doc/html/monoids/src/Data-Monoid-Reducer.html 1
+<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
+<html>
+<head>
+<!-- Generated by HsColour, http://www.cs.york.ac.uk/fp/darcs/hscolour/ -->
+<title>Data/Monoid/Reducer.hs</title>
+<link type='text/css' rel='stylesheet' href='hscolour.css' />
+</head>
+<body>
+<pre><a name="line-1"></a><span class='hs-comment'>{-# LANGUAGE UndecidableInstances , FlexibleContexts , MultiParamTypeClasses , FlexibleInstances , GeneralizedNewtypeDeriving #-}</span>
+<a name="line-2"></a>
+<a name="line-3"></a><span class='hs-comment'>-----------------------------------------------------------------------------</span>
+<a name="line-4"></a><span class='hs-comment'>-- |</span>
+<a name="line-5"></a><span class='hs-comment'>-- Module      :  Data.Monoid.Reducer</span>
+<a name="line-6"></a><span class='hs-comment'>-- Copyright   :  (c) Edward Kmett 2009</span>
+<a name="line-7"></a><span class='hs-comment'>-- License     :  BSD-style</span>
+<a name="line-8"></a><span class='hs-comment'>-- Maintainer  :  libraries@haskell.org</span>
+<a name="line-9"></a><span class='hs-comment'>-- Stability   :  experimental</span>
+<a name="line-10"></a><span class='hs-comment'>-- Portability :  non-portable (MPTCs)</span>
+<a name="line-11"></a><span class='hs-comment'>--</span>
+<a name="line-12"></a><span class='hs-comment'>-- A @c@-'Reducer' is a 'Monoid' with a canonical mapping from @c@ to the Monoid.</span>
+<a name="line-13"></a><span class='hs-comment'>-- This 'unit' acts in many ways like 'return' for a 'Monad' but is limited</span>
+<a name="line-14"></a><span class='hs-comment'>-- to a single type.</span>
+<a name="line-15"></a><span class='hs-comment'>--</span>
+<a name="line-16"></a><span class='hs-comment'>-----------------------------------------------------------------------------</span>
+<a name="line-17"></a>
+<a name="line-18"></a><span class='hs-keyword'>module</span> <span class='hs-conid'>Data</span><span class='hs-varop'>.</span><span class='hs-conid'>Monoid</span><span class='hs-varop'>.</span><span class='hs-conid'>Reducer</span>
+<a name="line-19"></a>    <span class='hs-layout'>(</span> <span class='hs-keyword'>module</span> <span class='hs-conid'>Data</span><span class='hs-varop'>.</span><span class='hs-conid'>Monoid</span>
+<a name="line-20"></a>    <span class='hs-layout'>,</span> <span class='hs-conid'>Reducer</span>
+<a name="line-21"></a>    <span class='hs-layout'>,</span> <span class='hs-varid'>unit</span><span class='hs-layout'>,</span> <span class='hs-varid'>snoc</span><span class='hs-layout'>,</span> <span class='hs-varid'>cons</span>
+<a name="line-22"></a>    <span class='hs-layout'>,</span> <span class='hs-varid'>foldMapReduce</span>
+<a name="line-23"></a>    <span class='hs-layout'>,</span> <span class='hs-varid'>foldReduce</span>
+<a name="line-24"></a>    <span class='hs-layout'>)</span> <span class='hs-keyword'>where</span>
+<a name="line-25"></a>
+<a name="line-26"></a><span class='hs-keyword'>import</span> <span class='hs-conid'>Data</span><span class='hs-varop'>.</span><span class='hs-conid'>Monoid</span>
+<a name="line-27"></a><span class='hs-keyword'>import</span> <span class='hs-conid'>Data</span><span class='hs-varop'>.</span><span class='hs-conid'>Monoid</span><span class='hs-varop'>.</span><span class='hs-conid'>Instances</span> <span class='hs-conid'>()</span>
+<a name="line-28"></a><span class='hs-keyword'>import</span> <span class='hs-conid'>Data</span><span class='hs-varop'>.</span><span class='hs-conid'>Foldable</span>
+<a name="line-29"></a><span class='hs-keyword'>import</span> <span class='hs-conid'>Data</span><span class='hs-varop'>.</span><span class='hs-conid'>FingerTree</span>
+<a name="line-30"></a><span class='hs-keyword'>import</span> <span class='hs-keyword'>qualified</span> <span class='hs-conid'>Data</span><span class='hs-varop'>.</span><span class='hs-conid'>Sequence</span> <span class='hs-keyword'>as</span> <span class='hs-conid'>Seq</span>
+<a name="line-31"></a><span class='hs-keyword'>import</span> <span class='hs-conid'>Data</span><span class='hs-varop'>.</span><span class='hs-conid'>Sequence</span> <span class='hs-layout'>(</span><span class='hs-conid'>Seq</span><span class='hs-layout'>)</span>
+<a name="line-32"></a><span class='hs-keyword'>import</span> <span class='hs-keyword'>qualified</span> <span class='hs-conid'>Data</span><span class='hs-varop'>.</span><span class='hs-conid'>Set</span> <span class='hs-keyword'>as</span> <span class='hs-conid'>Set</span>
+<a name="line-33"></a><span class='hs-keyword'>import</span> <span class='hs-conid'>Data</span><span class='hs-varop'>.</span><span class='hs-conid'>Set</span> <span class='hs-layout'>(</span><span class='hs-conid'>Set</span><span class='hs-layout'>)</span>
+<a name="line-34"></a><span class='hs-keyword'>import</span> <span class='hs-keyword'>qualified</span> <span class='hs-conid'>Data</span><span class='hs-varop'>.</span><span class='hs-conid'>IntSet</span> <span class='hs-keyword'>as</span> <span class='hs-conid'>IntSet</span>
+<a name="line-35"></a><span class='hs-keyword'>import</span> <span class='hs-conid'>Data</span><span class='hs-varop'>.</span><span class='hs-conid'>IntSet</span> <span class='hs-layout'>(</span><span class='hs-conid'>IntSet</span><span class='hs-layout'>)</span>
+<a name="line-36"></a><span class='hs-keyword'>import</span> <span class='hs-keyword'>qualified</span> <span class='hs-conid'>Data</span><span class='hs-varop'>.</span><span class='hs-conid'>IntMap</span> <span class='hs-keyword'>as</span> <span class='hs-conid'>IntMap</span>
+<a name="line-37"></a><span class='hs-keyword'>import</span> <span class='hs-conid'>Data</span><span class='hs-varop'>.</span><span class='hs-conid'>IntMap</span> <span class='hs-layout'>(</span><span class='hs-conid'>IntMap</span><span class='hs-layout'>)</span>
+<a name="line-38"></a><span class='hs-keyword'>import</span> <span class='hs-keyword'>qualified</span> <span class='hs-conid'>Data</span><span class='hs-varop'>.</span><span class='hs-conid'>Map</span> <span class='hs-keyword'>as</span> <span class='hs-conid'>Map</span>
+<a name="line-39"></a><span class='hs-keyword'>import</span> <span class='hs-conid'>Data</span><span class='hs-varop'>.</span><span class='hs-conid'>Map</span> <span class='hs-layout'>(</span><span class='hs-conid'>Map</span><span class='hs-layout'>)</span>
+<a name="line-40"></a><span class='hs-keyword'>import</span> <span class='hs-conid'>Text</span><span class='hs-varop'>.</span><span class='hs-conid'>Parsec</span><span class='hs-varop'>.</span><span class='hs-conid'>Prim</span>
+<a name="line-41"></a><span class='hs-keyword'>import</span> <span class='hs-conid'>Control</span><span class='hs-varop'>.</span><span class='hs-conid'>Monad</span> 
+<a name="line-42"></a><span class='hs-comment'>--import qualified Data.BitSet as BitSet</span>
+<a name="line-43"></a><span class='hs-comment'>--import Data.BitSet (BitSet)</span>
+<a name="line-44"></a>
+<a name="line-45"></a>
+<a name="line-46"></a><a name="Reducer"></a><span class='hs-comment'>-- | This type may be best read infix. A @c `Reducer` m@ is a 'Monoid' @m@ that maps</span>
+<a name="line-47"></a><a name="Reducer"></a><span class='hs-comment'>-- values of type @c@ through @unit@ to values of type @m@. A @c@-'Reducer' may also</span>
+<a name="line-48"></a><a name="Reducer"></a><span class='hs-comment'>-- supply operations which tack-on another @c@ to an existing 'Monoid' @m@ on the left</span>
+<a name="line-49"></a><a name="Reducer"></a><span class='hs-comment'>-- or right. These specialized reductions may be more efficient in some scenarios</span>
+<a name="line-50"></a><a name="Reducer"></a><span class='hs-comment'>-- and are used when appropriate by a 'Generator'. The names 'cons' and 'snoc' work</span>
+<a name="line-51"></a><a name="Reducer"></a><span class='hs-comment'>-- by analogy to the synonymous operations in the list monoid.</span>
+<a name="line-52"></a><a name="Reducer"></a><span class='hs-comment'>--</span>
+<a name="line-53"></a><a name="Reducer"></a><span class='hs-comment'>-- This class deliberately avoids functional-dependencies, so that () can be a @c@-Reducer</span>
+<a name="line-54"></a><a name="Reducer"></a><span class='hs-comment'>-- for all @c@, and so many common reducers can work over multiple types, for instance,</span>
+<a name="line-55"></a><a name="Reducer"></a><span class='hs-comment'>-- First and Last may reduce both @a@ and 'Maybe' @a@. Since a 'Generator' has a fixed element</span>
+<a name="line-56"></a><a name="Reducer"></a><span class='hs-comment'>-- type, the input to the reducer is generally known and extracting from the monoid usually</span>
+<a name="line-57"></a><a name="Reducer"></a><span class='hs-comment'>-- is sufficient to fix the result type. Combinators are available for most scenarios where</span>
+<a name="line-58"></a><a name="Reducer"></a><span class='hs-comment'>-- this is not the case, and the few remaining cases can be handled by using an explicit </span>
+<a name="line-59"></a><a name="Reducer"></a><span class='hs-comment'>-- type annotation.</span>
+<a name="line-60"></a><a name="Reducer"></a><span class='hs-comment'>--</span>
+<a name="line-61"></a><a name="Reducer"></a><span class='hs-comment'>-- Minimal definition: 'unit' or 'snoc'</span>
+<a name="line-62"></a><a name="Reducer"></a><span class='hs-keyword'>class</span> <span class='hs-conid'>Monoid</span> <span class='hs-varid'>m</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>Reducer</span> <span class='hs-varid'>c</span> <span class='hs-varid'>m</span> <span class='hs-keyword'>where</span>
+<a name="line-63"></a>    <span class='hs-comment'>-- | Convert a value into a 'Monoid'</span>
+<a name="line-64"></a>    <span class='hs-varid'>unit</span> <span class='hs-keyglyph'>::</span> <span class='hs-varid'>c</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-varid'>m</span> 
+<a name="line-65"></a>    <span class='hs-comment'>-- | Append a value to a 'Monoid' for use in left-to-right reduction</span>
+<a name="line-66"></a>    <span class='hs-varid'>snoc</span> <span class='hs-keyglyph'>::</span> <span class='hs-varid'>m</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-varid'>c</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-varid'>m</span>
+<a name="line-67"></a>    <span class='hs-comment'>-- | Prepend a value onto a 'Monoid' for use during right-to-left reduction</span>
+<a name="line-68"></a>    <span class='hs-varid'>cons</span> <span class='hs-keyglyph'>::</span> <span class='hs-varid'>c</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-varid'>m</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-varid'>m</span> 
+<a name="line-69"></a>
+<a name="line-70"></a>    <span class='hs-varid'>unit</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>snoc</span> <span class='hs-varid'>mempty</span> 
+<a name="line-71"></a>    <span class='hs-varid'>snoc</span> <span class='hs-varid'>m</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>mappend</span> <span class='hs-varid'>m</span> <span class='hs-varop'>.</span> <span class='hs-varid'>unit</span>
+<a name="line-72"></a>    <span class='hs-varid'>cons</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>mappend</span> <span class='hs-varop'>.</span> <span class='hs-varid'>unit</span>
+<a name="line-73"></a>
+<a name="line-74"></a><a name="foldMapReduce"></a><span class='hs-comment'>-- | Apply a 'Reducer' to a 'Foldable' container, after mapping the contents into a suitable form for reduction.</span>
+<a name="line-75"></a><span class='hs-definition'>foldMapReduce</span> <span class='hs-keyglyph'>::</span> <span class='hs-layout'>(</span><span class='hs-conid'>Foldable</span> <span class='hs-varid'>f</span><span class='hs-layout'>,</span> <span class='hs-varid'>e</span> <span class='hs-varop'>`Reducer`</span> <span class='hs-varid'>m</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-layout'>(</span><span class='hs-varid'>a</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-varid'>e</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-varid'>f</span> <span class='hs-varid'>a</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-varid'>m</span>
+<a name="line-76"></a><span class='hs-definition'>foldMapReduce</span> <span class='hs-varid'>f</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>foldMap</span> <span class='hs-layout'>(</span><span class='hs-varid'>unit</span> <span class='hs-varop'>.</span> <span class='hs-varid'>f</span><span class='hs-layout'>)</span>
+<a name="line-77"></a>
+<a name="line-78"></a><a name="foldReduce"></a><span class='hs-comment'>-- | Apply a 'Reducer' to a 'Foldable' mapping each element through 'unit'</span>
+<a name="line-79"></a><span class='hs-definition'>foldReduce</span> <span class='hs-keyglyph'>::</span> <span class='hs-layout'>(</span><span class='hs-conid'>Foldable</span> <span class='hs-varid'>f</span><span class='hs-layout'>,</span> <span class='hs-varid'>e</span> <span class='hs-varop'>`Reducer`</span> <span class='hs-varid'>m</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-varid'>f</span> <span class='hs-varid'>e</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-varid'>m</span>
+<a name="line-80"></a><span class='hs-definition'>foldReduce</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>foldMap</span> <span class='hs-varid'>unit</span>
+<a name="line-81"></a>
+<a name="line-82"></a><span class='hs-keyword'>instance</span> <span class='hs-layout'>(</span><span class='hs-conid'>Reducer</span> <span class='hs-varid'>c</span> <span class='hs-varid'>m</span><span class='hs-layout'>,</span> <span class='hs-conid'>Reducer</span> <span class='hs-varid'>c</span> <span class='hs-varid'>n</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>Reducer</span> <span class='hs-varid'>c</span> <span class='hs-layout'>(</span><span class='hs-varid'>m</span><span class='hs-layout'>,</span><span class='hs-varid'>n</span><span class='hs-layout'>)</span> <span class='hs-keyword'>where</span>
+<a name="line-83"></a>    <span class='hs-varid'>unit</span> <span class='hs-varid'>x</span> <span class='hs-keyglyph'>=</span> <span class='hs-layout'>(</span><span class='hs-varid'>unit</span> <span class='hs-varid'>x</span><span class='hs-layout'>,</span><span class='hs-varid'>unit</span> <span class='hs-varid'>x</span><span class='hs-layout'>)</span>
+<a name="line-84"></a>    <span class='hs-layout'>(</span><span class='hs-varid'>m</span><span class='hs-layout'>,</span><span class='hs-varid'>n</span><span class='hs-layout'>)</span> <span class='hs-varop'>`snoc`</span> <span class='hs-varid'>x</span> <span class='hs-keyglyph'>=</span> <span class='hs-layout'>(</span><span class='hs-varid'>m</span> <span class='hs-varop'>`snoc`</span> <span class='hs-varid'>x</span><span class='hs-layout'>,</span> <span class='hs-varid'>n</span> <span class='hs-varop'>`snoc`</span> <span class='hs-varid'>x</span><span class='hs-layout'>)</span>
+<a name="line-85"></a>    <span class='hs-varid'>x</span> <span class='hs-varop'>`cons`</span> <span class='hs-layout'>(</span><span class='hs-varid'>m</span><span class='hs-layout'>,</span><span class='hs-varid'>n</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=</span> <span class='hs-layout'>(</span><span class='hs-varid'>x</span> <span class='hs-varop'>`cons`</span> <span class='hs-varid'>m</span><span class='hs-layout'>,</span> <span class='hs-varid'>x</span> <span class='hs-varop'>`cons`</span> <span class='hs-varid'>n</span><span class='hs-layout'>)</span>
+<a name="line-86"></a>
+<a name="line-87"></a><span class='hs-keyword'>instance</span> <span class='hs-layout'>(</span><span class='hs-conid'>Reducer</span> <span class='hs-varid'>c</span> <span class='hs-varid'>m</span><span class='hs-layout'>,</span> <span class='hs-conid'>Reducer</span> <span class='hs-varid'>c</span> <span class='hs-varid'>n</span><span class='hs-layout'>,</span> <span class='hs-conid'>Reducer</span> <span class='hs-varid'>c</span> <span class='hs-varid'>o</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>Reducer</span> <span class='hs-varid'>c</span> <span class='hs-layout'>(</span><span class='hs-varid'>m</span><span class='hs-layout'>,</span><span class='hs-varid'>n</span><span class='hs-layout'>,</span><span class='hs-varid'>o</span><span class='hs-layout'>)</span> <span class='hs-keyword'>where</span>
+<a name="line-88"></a>    <span class='hs-varid'>unit</span> <span class='hs-varid'>x</span> <span class='hs-keyglyph'>=</span> <span class='hs-layout'>(</span><span class='hs-varid'>unit</span> <span class='hs-varid'>x</span><span class='hs-layout'>,</span><span class='hs-varid'>unit</span> <span class='hs-varid'>x</span><span class='hs-layout'>,</span> <span class='hs-varid'>unit</span> <span class='hs-varid'>x</span><span class='hs-layout'>)</span>
+<a name="line-89"></a>    <span class='hs-layout'>(</span><span class='hs-varid'>m</span><span class='hs-layout'>,</span><span class='hs-varid'>n</span><span class='hs-layout'>,</span><span class='hs-varid'>o</span><span class='hs-layout'>)</span> <span class='hs-varop'>`snoc`</span> <span class='hs-varid'>x</span> <span class='hs-keyglyph'>=</span> <span class='hs-layout'>(</span><span class='hs-varid'>m</span> <span class='hs-varop'>`snoc`</span> <span class='hs-varid'>x</span><span class='hs-layout'>,</span> <span class='hs-varid'>n</span> <span class='hs-varop'>`snoc`</span> <span class='hs-varid'>x</span><span class='hs-layout'>,</span> <span class='hs-varid'>o</span> <span class='hs-varop'>`snoc`</span> <span class='hs-varid'>x</span><span class='hs-layout'>)</span>
+<a name="line-90"></a>    <span class='hs-varid'>x</span> <span class='hs-varop'>`cons`</span> <span class='hs-layout'>(</span><span class='hs-varid'>m</span><span class='hs-layout'>,</span><span class='hs-varid'>n</span><span class='hs-layout'>,</span><span class='hs-varid'>o</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=</span> <span class='hs-layout'>(</span><span class='hs-varid'>x</span> <span class='hs-varop'>`cons`</span> <span class='hs-varid'>m</span><span class='hs-layout'>,</span> <span class='hs-varid'>x</span> <span class='hs-varop'>`cons`</span> <span class='hs-varid'>n</span><span class='hs-layout'>,</span> <span class='hs-varid'>x</span> <span class='hs-varop'>`cons`</span> <span class='hs-varid'>o</span><span class='hs-layout'>)</span>
+<a name="line-91"></a>
+<a name="line-92"></a><span class='hs-keyword'>instance</span> <span class='hs-layout'>(</span><span class='hs-conid'>Reducer</span> <span class='hs-varid'>c</span> <span class='hs-varid'>m</span><span class='hs-layout'>,</span> <span class='hs-conid'>Reducer</span> <span class='hs-varid'>c</span> <span class='hs-varid'>n</span><span class='hs-layout'>,</span> <span class='hs-conid'>Reducer</span> <span class='hs-varid'>c</span> <span class='hs-varid'>o</span><span class='hs-layout'>,</span> <span class='hs-conid'>Reducer</span> <span class='hs-varid'>c</span> <span class='hs-varid'>p</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>Reducer</span> <span class='hs-varid'>c</span> <span class='hs-layout'>(</span><span class='hs-varid'>m</span><span class='hs-layout'>,</span><span class='hs-varid'>n</span><span class='hs-layout'>,</span><span class='hs-varid'>o</span><span class='hs-layout'>,</span><span class='hs-varid'>p</span><span class='hs-layout'>)</span> <span class='hs-keyword'>where</span>
+<a name="line-93"></a>    <span class='hs-varid'>unit</span> <span class='hs-varid'>x</span> <span class='hs-keyglyph'>=</span> <span class='hs-layout'>(</span><span class='hs-varid'>unit</span> <span class='hs-varid'>x</span><span class='hs-layout'>,</span><span class='hs-varid'>unit</span> <span class='hs-varid'>x</span><span class='hs-layout'>,</span> <span class='hs-varid'>unit</span> <span class='hs-varid'>x</span><span class='hs-layout'>,</span> <span class='hs-varid'>unit</span> <span class='hs-varid'>x</span><span class='hs-layout'>)</span>
+<a name="line-94"></a>    <span class='hs-layout'>(</span><span class='hs-varid'>m</span><span class='hs-layout'>,</span><span class='hs-varid'>n</span><span class='hs-layout'>,</span><span class='hs-varid'>o</span><span class='hs-layout'>,</span><span class='hs-varid'>p</span><span class='hs-layout'>)</span> <span class='hs-varop'>`snoc`</span> <span class='hs-varid'>x</span> <span class='hs-keyglyph'>=</span> <span class='hs-layout'>(</span><span class='hs-varid'>m</span> <span class='hs-varop'>`snoc`</span> <span class='hs-varid'>x</span><span class='hs-layout'>,</span> <span class='hs-varid'>n</span> <span class='hs-varop'>`snoc`</span> <span class='hs-varid'>x</span><span class='hs-layout'>,</span> <span class='hs-varid'>o</span> <span class='hs-varop'>`snoc`</span> <span class='hs-varid'>x</span><span class='hs-layout'>,</span> <span class='hs-varid'>p</span> <span class='hs-varop'>`snoc`</span> <span class='hs-varid'>x</span><span class='hs-layout'>)</span>
+<a name="line-95"></a>    <span class='hs-varid'>x</span> <span class='hs-varop'>`cons`</span> <span class='hs-layout'>(</span><span class='hs-varid'>m</span><span class='hs-layout'>,</span><span class='hs-varid'>n</span><span class='hs-layout'>,</span><span class='hs-varid'>o</span><span class='hs-layout'>,</span><span class='hs-varid'>p</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=</span> <span class='hs-layout'>(</span><span class='hs-varid'>x</span> <span class='hs-varop'>`cons`</span> <span class='hs-varid'>m</span><span class='hs-layout'>,</span> <span class='hs-varid'>x</span> <span class='hs-varop'>`cons`</span> <span class='hs-varid'>n</span><span class='hs-layout'>,</span> <span class='hs-varid'>x</span> <span class='hs-varop'>`cons`</span> <span class='hs-varid'>o</span><span class='hs-layout'>,</span> <span class='hs-varid'>x</span> <span class='hs-varop'>`cons`</span> <span class='hs-varid'>p</span><span class='hs-layout'>)</span>
+<a name="line-96"></a>
+<a name="line-97"></a><span class='hs-keyword'>instance</span> <span class='hs-conid'>Reducer</span> <span class='hs-varid'>c</span> <span class='hs-keyglyph'>[</span><span class='hs-varid'>c</span><span class='hs-keyglyph'>]</span> <span class='hs-keyword'>where</span>
+<a name="line-98"></a>    <span class='hs-varid'>unit</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>return</span>
+<a name="line-99"></a>    <span class='hs-varid'>cons</span> <span class='hs-keyglyph'>=</span> <span class='hs-layout'>(</span><span class='hs-conop'>:</span><span class='hs-layout'>)</span>
+<a name="line-100"></a>    <span class='hs-varid'>xs</span> <span class='hs-varop'>`snoc`</span> <span class='hs-varid'>x</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>xs</span> <span class='hs-varop'>++</span> <span class='hs-keyglyph'>[</span><span class='hs-varid'>x</span><span class='hs-keyglyph'>]</span>
+<a name="line-101"></a>
+<a name="line-102"></a><span class='hs-keyword'>instance</span> <span class='hs-conid'>Reducer</span> <span class='hs-varid'>c</span> <span class='hs-conid'>()</span> <span class='hs-keyword'>where</span>
+<a name="line-103"></a>    <span class='hs-varid'>unit</span> <span class='hs-keyword'>_</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>()</span>
+<a name="line-104"></a>    <span class='hs-keyword'>_</span> <span class='hs-varop'>`snoc`</span> <span class='hs-keyword'>_</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>()</span>
+<a name="line-105"></a>    <span class='hs-keyword'>_</span> <span class='hs-varop'>`cons`</span> <span class='hs-keyword'>_</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>()</span>
+<a name="line-106"></a>
+<a name="line-107"></a><span class='hs-keyword'>instance</span> <span class='hs-conid'>Reducer</span> <span class='hs-conid'>Bool</span> <span class='hs-conid'>Any</span> <span class='hs-keyword'>where</span>
+<a name="line-108"></a>    <span class='hs-varid'>unit</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>Any</span>
+<a name="line-109"></a>
+<a name="line-110"></a><span class='hs-keyword'>instance</span> <span class='hs-conid'>Reducer</span> <span class='hs-conid'>Bool</span> <span class='hs-conid'>All</span> <span class='hs-keyword'>where</span>
+<a name="line-111"></a>    <span class='hs-varid'>unit</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>All</span>
+<a name="line-112"></a>
+<a name="line-113"></a><span class='hs-keyword'>instance</span> <span class='hs-conid'>Reducer</span> <span class='hs-layout'>(</span><span class='hs-varid'>a</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-varid'>a</span><span class='hs-layout'>)</span> <span class='hs-layout'>(</span><span class='hs-conid'>Endo</span> <span class='hs-varid'>a</span><span class='hs-layout'>)</span> <span class='hs-keyword'>where</span>
+<a name="line-114"></a>    <span class='hs-varid'>unit</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>Endo</span>
+<a name="line-115"></a>
+<a name="line-116"></a><span class='hs-keyword'>instance</span> <span class='hs-conid'>Monoid</span> <span class='hs-varid'>a</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>Reducer</span> <span class='hs-varid'>a</span> <span class='hs-layout'>(</span><span class='hs-conid'>Dual</span> <span class='hs-varid'>a</span><span class='hs-layout'>)</span> <span class='hs-keyword'>where</span>
+<a name="line-117"></a>    <span class='hs-varid'>unit</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>Dual</span>
+<a name="line-118"></a>    
+<a name="line-119"></a><span class='hs-keyword'>instance</span> <span class='hs-conid'>Num</span> <span class='hs-varid'>a</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>Reducer</span> <span class='hs-varid'>a</span> <span class='hs-layout'>(</span><span class='hs-conid'>Sum</span> <span class='hs-varid'>a</span><span class='hs-layout'>)</span> <span class='hs-keyword'>where</span>
+<a name="line-120"></a>    <span class='hs-varid'>unit</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>Sum</span>
+<a name="line-121"></a>
+<a name="line-122"></a><span class='hs-keyword'>instance</span> <span class='hs-conid'>Num</span> <span class='hs-varid'>a</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>Reducer</span> <span class='hs-varid'>a</span> <span class='hs-layout'>(</span><span class='hs-conid'>Product</span> <span class='hs-varid'>a</span><span class='hs-layout'>)</span> <span class='hs-keyword'>where</span>
+<a name="line-123"></a>    <span class='hs-varid'>unit</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>Product</span>
+<a name="line-124"></a>
+<a name="line-125"></a><span class='hs-keyword'>instance</span> <span class='hs-conid'>Reducer</span> <span class='hs-layout'>(</span><span class='hs-conid'>Maybe</span> <span class='hs-varid'>a</span><span class='hs-layout'>)</span> <span class='hs-layout'>(</span><span class='hs-conid'>First</span> <span class='hs-varid'>a</span><span class='hs-layout'>)</span> <span class='hs-keyword'>where</span>
+<a name="line-126"></a>    <span class='hs-varid'>unit</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>First</span>
+<a name="line-127"></a>
+<a name="line-128"></a><span class='hs-keyword'>instance</span> <span class='hs-conid'>Reducer</span> <span class='hs-varid'>a</span> <span class='hs-layout'>(</span><span class='hs-conid'>First</span> <span class='hs-varid'>a</span><span class='hs-layout'>)</span> <span class='hs-keyword'>where</span>
+<a name="line-129"></a>    <span class='hs-varid'>unit</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>First</span> <span class='hs-varop'>.</span> <span class='hs-conid'>Just</span>
+<a name="line-130"></a>
+<a name="line-131"></a><span class='hs-keyword'>instance</span> <span class='hs-conid'>Reducer</span> <span class='hs-layout'>(</span><span class='hs-conid'>Maybe</span> <span class='hs-varid'>a</span><span class='hs-layout'>)</span> <span class='hs-layout'>(</span><span class='hs-conid'>Last</span> <span class='hs-varid'>a</span><span class='hs-layout'>)</span> <span class='hs-keyword'>where</span>
+<a name="line-132"></a>    <span class='hs-varid'>unit</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>Last</span>
+<a name="line-133"></a>
+<a name="line-134"></a><span class='hs-keyword'>instance</span> <span class='hs-conid'>Reducer</span> <span class='hs-varid'>a</span> <span class='hs-layout'>(</span><span class='hs-conid'>Last</span> <span class='hs-varid'>a</span><span class='hs-layout'>)</span> <span class='hs-keyword'>where</span>
+<a name="line-135"></a>    <span class='hs-varid'>unit</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>Last</span> <span class='hs-varop'>.</span> <span class='hs-conid'>Just</span>
+<a name="line-136"></a>
+<a name="line-137"></a><span class='hs-keyword'>instance</span> <span class='hs-conid'>Measured</span> <span class='hs-varid'>v</span> <span class='hs-varid'>a</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>Reducer</span> <span class='hs-varid'>a</span> <span class='hs-layout'>(</span><span class='hs-conid'>FingerTree</span> <span class='hs-varid'>v</span> <span class='hs-varid'>a</span><span class='hs-layout'>)</span> <span class='hs-keyword'>where</span>
+<a name="line-138"></a>    <span class='hs-varid'>unit</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>singleton</span>
+<a name="line-139"></a>    <span class='hs-varid'>cons</span> <span class='hs-keyglyph'>=</span> <span class='hs-layout'>(</span><span class='hs-varop'>&lt;|</span><span class='hs-layout'>)</span>
+<a name="line-140"></a>    <span class='hs-varid'>snoc</span> <span class='hs-keyglyph'>=</span> <span class='hs-layout'>(</span><span class='hs-varop'>|&gt;</span><span class='hs-layout'>)</span> 
+<a name="line-141"></a>
+<a name="line-142"></a><span class='hs-keyword'>instance</span> <span class='hs-layout'>(</span><span class='hs-conid'>Stream</span> <span class='hs-varid'>s</span> <span class='hs-varid'>m</span> <span class='hs-varid'>t</span><span class='hs-layout'>,</span> <span class='hs-varid'>c</span> <span class='hs-varop'>`Reducer`</span> <span class='hs-varid'>a</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>Reducer</span> <span class='hs-varid'>c</span> <span class='hs-layout'>(</span><span class='hs-conid'>ParsecT</span> <span class='hs-varid'>s</span> <span class='hs-varid'>u</span> <span class='hs-varid'>m</span> <span class='hs-varid'>a</span><span class='hs-layout'>)</span> <span class='hs-keyword'>where</span>
+<a name="line-143"></a>    <span class='hs-varid'>unit</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>return</span> <span class='hs-varop'>.</span> <span class='hs-varid'>unit</span>
+<a name="line-144"></a>
+<a name="line-145"></a><span class='hs-keyword'>instance</span> <span class='hs-conid'>Reducer</span> <span class='hs-varid'>a</span> <span class='hs-layout'>(</span><span class='hs-conid'>Seq</span> <span class='hs-varid'>a</span><span class='hs-layout'>)</span> <span class='hs-keyword'>where</span>
+<a name="line-146"></a>    <span class='hs-varid'>unit</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>Seq</span><span class='hs-varop'>.</span><span class='hs-varid'>singleton</span>
+<a name="line-147"></a>    <span class='hs-varid'>cons</span> <span class='hs-keyglyph'>=</span> <span class='hs-layout'>(</span><span class='hs-conid'>Seq</span><span class='hs-varop'>.&lt;|</span><span class='hs-layout'>)</span>
+<a name="line-148"></a>    <span class='hs-varid'>snoc</span> <span class='hs-keyglyph'>=</span> <span class='hs-layout'>(</span><span class='hs-conid'>Seq</span><span class='hs-varop'>.|&gt;</span><span class='hs-layout'>)</span>
+<a name="line-149"></a>
+<a name="line-150"></a><span class='hs-keyword'>instance</span> <span class='hs-conid'>Reducer</span> <span class='hs-conid'>Int</span> <span class='hs-conid'>IntSet</span> <span class='hs-keyword'>where</span>
+<a name="line-151"></a>    <span class='hs-varid'>unit</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>IntSet</span><span class='hs-varop'>.</span><span class='hs-varid'>singleton</span>
+<a name="line-152"></a>    <span class='hs-varid'>cons</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>IntSet</span><span class='hs-varop'>.</span><span class='hs-varid'>insert</span>
+<a name="line-153"></a>    <span class='hs-varid'>snoc</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>flip</span> <span class='hs-conid'>IntSet</span><span class='hs-varop'>.</span><span class='hs-varid'>insert</span> <span class='hs-comment'>-- left bias irrelevant</span>
+<a name="line-154"></a>
+<a name="line-155"></a><span class='hs-keyword'>instance</span> <span class='hs-conid'>Ord</span> <span class='hs-varid'>a</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>Reducer</span> <span class='hs-varid'>a</span> <span class='hs-layout'>(</span><span class='hs-conid'>Set</span> <span class='hs-varid'>a</span><span class='hs-layout'>)</span> <span class='hs-keyword'>where</span>
+<a name="line-156"></a>    <span class='hs-varid'>unit</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>Set</span><span class='hs-varop'>.</span><span class='hs-varid'>singleton</span>
+<a name="line-157"></a>    <span class='hs-varid'>cons</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>Set</span><span class='hs-varop'>.</span><span class='hs-varid'>insert</span>
+<a name="line-158"></a>    <span class='hs-comment'>-- pedantic about order in case 'Eq' doesn't implement structural equality</span>
+<a name="line-159"></a>    <span class='hs-varid'>snoc</span> <span class='hs-varid'>s</span> <span class='hs-varid'>m</span> <span class='hs-keyglyph'>|</span> <span class='hs-conid'>Set</span><span class='hs-varop'>.</span><span class='hs-varid'>member</span> <span class='hs-varid'>m</span> <span class='hs-varid'>s</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>s</span> 
+<a name="line-160"></a>             <span class='hs-keyglyph'>|</span> <span class='hs-varid'>otherwise</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>Set</span><span class='hs-varop'>.</span><span class='hs-varid'>insert</span> <span class='hs-varid'>m</span> <span class='hs-varid'>s</span>
+<a name="line-161"></a>
+<a name="line-162"></a><span class='hs-keyword'>instance</span> <span class='hs-conid'>Reducer</span> <span class='hs-layout'>(</span><span class='hs-conid'>Int</span><span class='hs-layout'>,</span><span class='hs-varid'>v</span><span class='hs-layout'>)</span> <span class='hs-layout'>(</span><span class='hs-conid'>IntMap</span> <span class='hs-varid'>v</span><span class='hs-layout'>)</span> <span class='hs-keyword'>where</span>
+<a name="line-163"></a>    <span class='hs-varid'>unit</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>uncurry</span> <span class='hs-conid'>IntMap</span><span class='hs-varop'>.</span><span class='hs-varid'>singleton</span>
+<a name="line-164"></a>    <span class='hs-varid'>cons</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>uncurry</span> <span class='hs-conid'>IntMap</span><span class='hs-varop'>.</span><span class='hs-varid'>insert</span>
+<a name="line-165"></a>    <span class='hs-varid'>snoc</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>flip</span> <span class='hs-varop'>.</span> <span class='hs-varid'>uncurry</span> <span class='hs-varop'>.</span> <span class='hs-conid'>IntMap</span><span class='hs-varop'>.</span><span class='hs-varid'>insertWith</span> <span class='hs-varop'>$</span> <span class='hs-varid'>const</span> <span class='hs-varid'>id</span>
+<a name="line-166"></a>
+<a name="line-167"></a><span class='hs-keyword'>instance</span> <span class='hs-conid'>Ord</span> <span class='hs-varid'>k</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>Reducer</span> <span class='hs-layout'>(</span><span class='hs-varid'>k</span><span class='hs-layout'>,</span><span class='hs-varid'>v</span><span class='hs-layout'>)</span> <span class='hs-layout'>(</span><span class='hs-conid'>Map</span> <span class='hs-varid'>k</span> <span class='hs-varid'>v</span><span class='hs-layout'>)</span> <span class='hs-keyword'>where</span>
+<a name="line-168"></a>    <span class='hs-varid'>unit</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>uncurry</span> <span class='hs-conid'>Map</span><span class='hs-varop'>.</span><span class='hs-varid'>singleton</span>
+<a name="line-169"></a>    <span class='hs-varid'>cons</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>uncurry</span> <span class='hs-conid'>Map</span><span class='hs-varop'>.</span><span class='hs-varid'>insert</span>
+<a name="line-170"></a>    <span class='hs-varid'>snoc</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>flip</span> <span class='hs-varop'>.</span> <span class='hs-varid'>uncurry</span> <span class='hs-varop'>.</span> <span class='hs-conid'>Map</span><span class='hs-varop'>.</span><span class='hs-varid'>insertWith</span> <span class='hs-varop'>$</span> <span class='hs-varid'>const</span> <span class='hs-varid'>id</span>
+<a name="line-171"></a>
+<a name="line-172"></a><span class='hs-comment'>{-
+<a name="line-173"></a>instance Enum a =&gt; Reducer a (BitSet a) where
+<a name="line-174"></a>    unit m = BitSet.insert m BitSet.empty
+<a name="line-175"></a>-}</span>
+</pre></body>
+</html>
addfile ./dist/doc/html/monoids/src/Data-Monoid-Union.html
hunk ./dist/doc/html/monoids/src/Data-Monoid-Union.html 1
+<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
+<html>
+<head>
+<!-- Generated by HsColour, http://www.cs.york.ac.uk/fp/darcs/hscolour/ -->
+<title>Data/Monoid/Union.hs</title>
+<link type='text/css' rel='stylesheet' href='hscolour.css' />
+</head>
+<body>
+<pre><a name="line-1"></a><span class='hs-comment'>{-# LANGUAGE MultiParamTypeClasses, FlexibleInstances, GeneralizedNewtypeDeriving #-}</span>
+<a name="line-2"></a><span class='hs-keyword'>module</span> <span class='hs-conid'>Data</span><span class='hs-varop'>.</span><span class='hs-conid'>Monoid</span><span class='hs-varop'>.</span><span class='hs-conid'>Union</span>
+<a name="line-3"></a>    <span class='hs-layout'>(</span> <span class='hs-keyword'>module</span> <span class='hs-conid'>Data</span><span class='hs-varop'>.</span><span class='hs-conid'>Monoid</span><span class='hs-varop'>.</span><span class='hs-conid'>Reducer</span>
+<a name="line-4"></a>    <span class='hs-comment'>-- * Unions of Containers</span>
+<a name="line-5"></a>    <span class='hs-layout'>,</span> <span class='hs-conid'>HasUnion</span>
+<a name="line-6"></a>    <span class='hs-layout'>,</span> <span class='hs-varid'>empty</span>
+<a name="line-7"></a>    <span class='hs-layout'>,</span> <span class='hs-varid'>union</span>
+<a name="line-8"></a>    <span class='hs-layout'>,</span> <span class='hs-conid'>Union</span><span class='hs-layout'>(</span><span class='hs-conid'>Union</span><span class='hs-layout'>,</span><span class='hs-varid'>getUnion</span><span class='hs-layout'>)</span>
+<a name="line-9"></a>    <span class='hs-comment'>-- * Unions of Containers of Monoids</span>
+<a name="line-10"></a>    <span class='hs-layout'>,</span> <span class='hs-conid'>HasUnionWith</span>
+<a name="line-11"></a>    <span class='hs-layout'>,</span> <span class='hs-varid'>emptyWith</span>
+<a name="line-12"></a>    <span class='hs-layout'>,</span> <span class='hs-varid'>unionWith</span>
+<a name="line-13"></a>    <span class='hs-layout'>,</span> <span class='hs-conid'>UnionWith</span><span class='hs-layout'>(</span><span class='hs-conid'>UnionWith</span><span class='hs-layout'>,</span><span class='hs-varid'>getUnionWith</span><span class='hs-layout'>)</span>
+<a name="line-14"></a>    <span class='hs-layout'>)</span> <span class='hs-keyword'>where</span>
+<a name="line-15"></a>
+<a name="line-16"></a><span class='hs-keyword'>import</span> <span class='hs-keyword'>qualified</span> <span class='hs-conid'>Data</span><span class='hs-varop'>.</span><span class='hs-conid'>IntMap</span> <span class='hs-keyword'>as</span> <span class='hs-conid'>IntMap</span>
+<a name="line-17"></a><span class='hs-keyword'>import</span> <span class='hs-conid'>Data</span><span class='hs-varop'>.</span><span class='hs-conid'>IntMap</span> <span class='hs-layout'>(</span><span class='hs-conid'>IntMap</span><span class='hs-layout'>)</span>
+<a name="line-18"></a>
+<a name="line-19"></a><span class='hs-keyword'>import</span> <span class='hs-keyword'>qualified</span> <span class='hs-conid'>Data</span><span class='hs-varop'>.</span><span class='hs-conid'>IntSet</span> <span class='hs-keyword'>as</span> <span class='hs-conid'>IntSet</span>
+<a name="line-20"></a><span class='hs-keyword'>import</span> <span class='hs-conid'>Data</span><span class='hs-varop'>.</span><span class='hs-conid'>IntSet</span> <span class='hs-layout'>(</span><span class='hs-conid'>IntSet</span><span class='hs-layout'>)</span>
+<a name="line-21"></a>
+<a name="line-22"></a><span class='hs-keyword'>import</span> <span class='hs-keyword'>qualified</span> <span class='hs-conid'>Data</span><span class='hs-varop'>.</span><span class='hs-conid'>Map</span> <span class='hs-keyword'>as</span> <span class='hs-conid'>Map</span>
+<a name="line-23"></a><span class='hs-keyword'>import</span> <span class='hs-conid'>Data</span><span class='hs-varop'>.</span><span class='hs-conid'>Map</span> <span class='hs-layout'>(</span><span class='hs-conid'>Map</span><span class='hs-layout'>)</span>
+<a name="line-24"></a>
+<a name="line-25"></a><span class='hs-keyword'>import</span> <span class='hs-keyword'>qualified</span> <span class='hs-conid'>Data</span><span class='hs-varop'>.</span><span class='hs-conid'>Set</span> <span class='hs-keyword'>as</span> <span class='hs-conid'>Set</span>
+<a name="line-26"></a><span class='hs-keyword'>import</span> <span class='hs-conid'>Data</span><span class='hs-varop'>.</span><span class='hs-conid'>Set</span> <span class='hs-layout'>(</span><span class='hs-conid'>Set</span><span class='hs-layout'>)</span>
+<a name="line-27"></a>
+<a name="line-28"></a><span class='hs-keyword'>import</span> <span class='hs-keyword'>qualified</span> <span class='hs-conid'>Data</span><span class='hs-varop'>.</span><span class='hs-conid'>List</span> <span class='hs-keyword'>as</span> <span class='hs-conid'>List</span>
+<a name="line-29"></a>
+<a name="line-30"></a><span class='hs-keyword'>import</span> <span class='hs-conid'>Control</span><span class='hs-varop'>.</span><span class='hs-conid'>Functor</span><span class='hs-varop'>.</span><span class='hs-conid'>Pointed</span>
+<a name="line-31"></a>
+<a name="line-32"></a><span class='hs-keyword'>import</span> <span class='hs-conid'>Data</span><span class='hs-varop'>.</span><span class='hs-conid'>Monoid</span><span class='hs-varop'>.</span><span class='hs-conid'>Reducer</span> <span class='hs-layout'>(</span><span class='hs-conid'>Reducer</span><span class='hs-layout'>,</span> <span class='hs-varid'>unit</span><span class='hs-layout'>,</span> <span class='hs-varid'>cons</span><span class='hs-layout'>,</span> <span class='hs-varid'>snoc</span><span class='hs-layout'>,</span> <span class='hs-conid'>Monoid</span><span class='hs-layout'>,</span> <span class='hs-varid'>mappend</span><span class='hs-layout'>,</span> <span class='hs-varid'>mempty</span><span class='hs-layout'>)</span>
+<a name="line-33"></a>
+<a name="line-34"></a><a name="HasUnion"></a><span class='hs-comment'>-- | A Container suitable for the 'Union' 'Monoid'</span>
+<a name="line-35"></a><a name="HasUnion"></a><span class='hs-keyword'>class</span> <span class='hs-conid'>HasUnion</span> <span class='hs-varid'>f</span> <span class='hs-keyword'>where</span>
+<a name="line-36"></a>    <span class='hs-varid'>empty</span> <span class='hs-keyglyph'>::</span> <span class='hs-varid'>f</span>
+<a name="line-37"></a>    <span class='hs-comment'>{-# SPECIALIZE union :: IntMap a -&gt; IntMap a -&gt; IntMap a #-}</span>
+<a name="line-38"></a>    <span class='hs-comment'>{-# SPECIALIZE union :: Ord k =&gt; Map k a -&gt; Map k a -&gt; Map k a #-}</span>
+<a name="line-39"></a>    <span class='hs-comment'>{-# SPECIALIZE union :: Eq a =&gt; [a] -&gt; [a] -&gt; [a] #-}</span>
+<a name="line-40"></a>    <span class='hs-comment'>{-# SPECIALIZE union :: Ord a =&gt; Set a -&gt; Set a -&gt; Set a #-}</span>
+<a name="line-41"></a>    <span class='hs-comment'>{-# SPECIALIZE union :: IntSet -&gt; IntSet -&gt; IntSet #-}</span>
+<a name="line-42"></a>    <span class='hs-varid'>union</span> <span class='hs-keyglyph'>::</span> <span class='hs-varid'>f</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-varid'>f</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-varid'>f</span>
+<a name="line-43"></a>
+<a name="line-44"></a><span class='hs-keyword'>instance</span> <span class='hs-conid'>HasUnion</span> <span class='hs-layout'>(</span><span class='hs-conid'>IntMap</span> <span class='hs-varid'>a</span><span class='hs-layout'>)</span> <span class='hs-keyword'>where</span>
+<a name="line-45"></a>    <span class='hs-varid'>empty</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>IntMap</span><span class='hs-varop'>.</span><span class='hs-varid'>empty</span>
+<a name="line-46"></a>    <span class='hs-varid'>union</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>IntMap</span><span class='hs-varop'>.</span><span class='hs-varid'>union</span>
+<a name="line-47"></a>
+<a name="line-48"></a><span class='hs-keyword'>instance</span> <span class='hs-conid'>Ord</span> <span class='hs-varid'>k</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>HasUnion</span> <span class='hs-layout'>(</span><span class='hs-conid'>Map</span> <span class='hs-varid'>k</span> <span class='hs-varid'>a</span><span class='hs-layout'>)</span> <span class='hs-keyword'>where</span>
+<a name="line-49"></a>    <span class='hs-varid'>empty</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>Map</span><span class='hs-varop'>.</span><span class='hs-varid'>empty</span>
+<a name="line-50"></a>    <span class='hs-varid'>union</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>Map</span><span class='hs-varop'>.</span><span class='hs-varid'>union</span>
+<a name="line-51"></a>
+<a name="line-52"></a><span class='hs-keyword'>instance</span> <span class='hs-conid'>Eq</span> <span class='hs-varid'>a</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>HasUnion</span> <span class='hs-keyglyph'>[</span><span class='hs-varid'>a</span><span class='hs-keyglyph'>]</span> <span class='hs-keyword'>where</span>
+<a name="line-53"></a>    <span class='hs-varid'>empty</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>[]</span>
+<a name="line-54"></a>    <span class='hs-varid'>union</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>List</span><span class='hs-varop'>.</span><span class='hs-varid'>union</span>
+<a name="line-55"></a>
+<a name="line-56"></a><span class='hs-keyword'>instance</span> <span class='hs-conid'>Ord</span> <span class='hs-varid'>a</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>HasUnion</span> <span class='hs-layout'>(</span><span class='hs-conid'>Set</span> <span class='hs-varid'>a</span><span class='hs-layout'>)</span> <span class='hs-keyword'>where</span>
+<a name="line-57"></a>    <span class='hs-varid'>empty</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>Set</span><span class='hs-varop'>.</span><span class='hs-varid'>empty</span>
+<a name="line-58"></a>    <span class='hs-varid'>union</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>Set</span><span class='hs-varop'>.</span><span class='hs-varid'>union</span>
+<a name="line-59"></a>
+<a name="line-60"></a><span class='hs-keyword'>instance</span> <span class='hs-conid'>HasUnion</span> <span class='hs-conid'>IntSet</span> <span class='hs-keyword'>where</span>
+<a name="line-61"></a>    <span class='hs-varid'>empty</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>IntSet</span><span class='hs-varop'>.</span><span class='hs-varid'>empty</span>
+<a name="line-62"></a>    <span class='hs-varid'>union</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>IntSet</span><span class='hs-varop'>.</span><span class='hs-varid'>union</span>
+<a name="line-63"></a>
+<a name="line-64"></a><a name="Union"></a><span class='hs-comment'>-- | The 'Monoid' @('union','empty')@</span>
+<a name="line-65"></a><a name="Union"></a><span class='hs-keyword'>newtype</span> <span class='hs-conid'>Union</span> <span class='hs-varid'>f</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>Union</span> <span class='hs-layout'>{</span> <span class='hs-varid'>getUnion</span> <span class='hs-keyglyph'>::</span> <span class='hs-varid'>f</span> <span class='hs-layout'>}</span> 
+<a name="line-66"></a>    <span class='hs-keyword'>deriving</span> <span class='hs-layout'>(</span><span class='hs-conid'>Eq</span><span class='hs-layout'>,</span><span class='hs-conid'>Ord</span><span class='hs-layout'>,</span><span class='hs-conid'>Show</span><span class='hs-layout'>,</span><span class='hs-conid'>Read</span><span class='hs-layout'>)</span>
+<a name="line-67"></a>
+<a name="line-68"></a><span class='hs-keyword'>instance</span> <span class='hs-layout'>(</span><span class='hs-conid'>HasUnion</span> <span class='hs-varid'>f</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>Monoid</span> <span class='hs-layout'>(</span><span class='hs-conid'>Union</span> <span class='hs-varid'>f</span><span class='hs-layout'>)</span> <span class='hs-keyword'>where</span>
+<a name="line-69"></a>    <span class='hs-varid'>mempty</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>Union</span> <span class='hs-varid'>empty</span>
+<a name="line-70"></a>    <span class='hs-conid'>Union</span> <span class='hs-varid'>a</span> <span class='hs-varop'>`mappend`</span> <span class='hs-conid'>Union</span> <span class='hs-varid'>b</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>Union</span> <span class='hs-layout'>(</span><span class='hs-varid'>a</span> <span class='hs-varop'>`union`</span> <span class='hs-varid'>b</span><span class='hs-layout'>)</span>
+<a name="line-71"></a>
+<a name="line-72"></a><span class='hs-keyword'>instance</span> <span class='hs-layout'>(</span><span class='hs-conid'>HasUnion</span> <span class='hs-varid'>f</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>Reducer</span> <span class='hs-varid'>f</span> <span class='hs-layout'>(</span><span class='hs-conid'>Union</span> <span class='hs-varid'>f</span><span class='hs-layout'>)</span> <span class='hs-keyword'>where</span>
+<a name="line-73"></a>    <span class='hs-varid'>unit</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>Union</span>
+<a name="line-74"></a>
+<a name="line-75"></a><span class='hs-keyword'>instance</span> <span class='hs-conid'>Functor</span> <span class='hs-conid'>Union</span> <span class='hs-keyword'>where</span>
+<a name="line-76"></a>    <span class='hs-varid'>fmap</span> <span class='hs-varid'>f</span> <span class='hs-layout'>(</span><span class='hs-conid'>Union</span> <span class='hs-varid'>a</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>Union</span> <span class='hs-layout'>(</span><span class='hs-varid'>f</span> <span class='hs-varid'>a</span><span class='hs-layout'>)</span>
+<a name="line-77"></a>
+<a name="line-78"></a><span class='hs-keyword'>instance</span> <span class='hs-conid'>Pointed</span> <span class='hs-conid'>Union</span> <span class='hs-keyword'>where</span> 
+<a name="line-79"></a>    <span class='hs-varid'>point</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>Union</span>
+<a name="line-80"></a>
+<a name="line-81"></a><span class='hs-keyword'>instance</span> <span class='hs-conid'>Copointed</span> <span class='hs-conid'>Union</span> <span class='hs-keyword'>where</span>
+<a name="line-82"></a>    <span class='hs-varid'>extract</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>getUnion</span>
+<a name="line-83"></a>
+<a name="line-84"></a><a name="HasUnionWith"></a><span class='hs-comment'>-- | Polymorphic containers that we can supply an operation to handle unions with</span>
+<a name="line-85"></a><a name="HasUnionWith"></a><span class='hs-keyword'>class</span> <span class='hs-conid'>HasUnionWith</span> <span class='hs-varid'>f</span> <span class='hs-keyword'>where</span>
+<a name="line-86"></a>    <span class='hs-comment'>{-# SPECIALIZE unionWith :: (a -&gt; a -&gt; a) -&gt; IntMap a -&gt; IntMap a -&gt; IntMap a #-}</span>
+<a name="line-87"></a>    <span class='hs-comment'>{-# SPECIALIZE unionWith :: Ord k =&gt; (a -&gt; a -&gt; a) -&gt; Map k a -&gt; Map k a -&gt; Map k a #-}</span>
+<a name="line-88"></a>    <span class='hs-varid'>unionWith</span> <span class='hs-keyglyph'>::</span> <span class='hs-layout'>(</span><span class='hs-varid'>a</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-varid'>a</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-varid'>a</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-varid'>f</span> <span class='hs-varid'>a</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-varid'>f</span> <span class='hs-varid'>a</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-varid'>f</span> <span class='hs-varid'>a</span>
+<a name="line-89"></a>    <span class='hs-varid'>emptyWith</span> <span class='hs-keyglyph'>::</span> <span class='hs-varid'>f</span> <span class='hs-varid'>a</span> 
+<a name="line-90"></a>
+<a name="line-91"></a><span class='hs-keyword'>instance</span> <span class='hs-conid'>HasUnionWith</span> <span class='hs-conid'>IntMap</span> <span class='hs-keyword'>where</span> 
+<a name="line-92"></a>    <span class='hs-varid'>emptyWith</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>IntMap</span><span class='hs-varop'>.</span><span class='hs-varid'>empty</span>
+<a name="line-93"></a>    <span class='hs-varid'>unionWith</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>IntMap</span><span class='hs-varop'>.</span><span class='hs-varid'>unionWith</span>
+<a name="line-94"></a>
+<a name="line-95"></a><span class='hs-keyword'>instance</span> <span class='hs-conid'>Ord</span> <span class='hs-varid'>k</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>HasUnionWith</span> <span class='hs-layout'>(</span><span class='hs-conid'>Map</span> <span class='hs-varid'>k</span><span class='hs-layout'>)</span> <span class='hs-keyword'>where</span> 
+<a name="line-96"></a>    <span class='hs-varid'>emptyWith</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>Map</span><span class='hs-varop'>.</span><span class='hs-varid'>empty</span>
+<a name="line-97"></a>    <span class='hs-varid'>unionWith</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>Map</span><span class='hs-varop'>.</span><span class='hs-varid'>unionWith</span>
+<a name="line-98"></a>
+<a name="line-99"></a>
+<a name="line-100"></a><a name="UnionWith"></a><span class='hs-comment'>-- | The 'Monoid' @('unionWith mappend','empty')@ for containers full of monoids.</span>
+<a name="line-101"></a><a name="UnionWith"></a><span class='hs-keyword'>newtype</span> <span class='hs-conid'>UnionWith</span> <span class='hs-varid'>f</span> <span class='hs-varid'>m</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>UnionWith</span> <span class='hs-layout'>{</span> <span class='hs-varid'>getUnionWith</span> <span class='hs-keyglyph'>::</span> <span class='hs-varid'>f</span> <span class='hs-varid'>m</span> <span class='hs-layout'>}</span> 
+<a name="line-102"></a>    <span class='hs-keyword'>deriving</span> <span class='hs-layout'>(</span><span class='hs-conid'>Eq</span><span class='hs-layout'>,</span><span class='hs-conid'>Ord</span><span class='hs-layout'>,</span><span class='hs-conid'>Show</span><span class='hs-layout'>,</span><span class='hs-conid'>Read</span><span class='hs-layout'>,</span><span class='hs-conid'>Functor</span><span class='hs-layout'>,</span><span class='hs-conid'>Pointed</span><span class='hs-layout'>,</span><span class='hs-conid'>Monad</span><span class='hs-layout'>)</span>
+<a name="line-103"></a>
+<a name="line-104"></a><span class='hs-keyword'>instance</span> <span class='hs-layout'>(</span><span class='hs-conid'>HasUnionWith</span> <span class='hs-varid'>f</span><span class='hs-layout'>,</span> <span class='hs-conid'>Monoid</span> <span class='hs-varid'>m</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>Monoid</span> <span class='hs-layout'>(</span><span class='hs-conid'>UnionWith</span> <span class='hs-varid'>f</span> <span class='hs-varid'>m</span><span class='hs-layout'>)</span> <span class='hs-keyword'>where</span>
+<a name="line-105"></a>    <span class='hs-varid'>mempty</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>UnionWith</span> <span class='hs-varid'>emptyWith</span>
+<a name="line-106"></a>    <span class='hs-conid'>UnionWith</span> <span class='hs-varid'>a</span> <span class='hs-varop'>`mappend`</span> <span class='hs-conid'>UnionWith</span> <span class='hs-varid'>b</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>UnionWith</span> <span class='hs-layout'>(</span><span class='hs-varid'>unionWith</span> <span class='hs-varid'>mappend</span> <span class='hs-varid'>a</span> <span class='hs-varid'>b</span><span class='hs-layout'>)</span>
+<a name="line-107"></a>
+<a name="line-108"></a><span class='hs-keyword'>instance</span> <span class='hs-layout'>(</span><span class='hs-conid'>HasUnionWith</span> <span class='hs-varid'>f</span><span class='hs-layout'>,</span> <span class='hs-conid'>Monoid</span> <span class='hs-varid'>m</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>Reducer</span> <span class='hs-layout'>(</span><span class='hs-varid'>f</span> <span class='hs-varid'>m</span><span class='hs-layout'>)</span> <span class='hs-layout'>(</span><span class='hs-conid'>UnionWith</span> <span class='hs-varid'>f</span> <span class='hs-varid'>m</span><span class='hs-layout'>)</span> <span class='hs-keyword'>where</span>
+<a name="line-109"></a>    <span class='hs-varid'>unit</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>UnionWith</span>
+<a name="line-110"></a>
+</pre></body>
+</html>
addfile ./dist/doc/html/monoids/src/Data-Ring-Boolean.html
hunk ./dist/doc/html/monoids/src/Data-Ring-Boolean.html 1
+<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
+<html>
+<head>
+<!-- Generated by HsColour, http://www.cs.york.ac.uk/fp/darcs/hscolour/ -->
+<title>Data/Ring/Boolean.hs</title>
+<link type='text/css' rel='stylesheet' href='hscolour.css' />
+</head>
+<body>
+<pre><a name="line-1"></a><span class='hs-comment'>{-# LANGUAGE FlexibleInstances, MultiParamTypeClasses #-}</span>
+<a name="line-2"></a>
+<a name="line-3"></a><span class='hs-comment'>-----------------------------------------------------------------------------</span>
+<a name="line-4"></a><span class='hs-comment'>-- |</span>
+<a name="line-5"></a><span class='hs-comment'>-- Module      :  Data.Ring.Boolean</span>
+<a name="line-6"></a><span class='hs-comment'>-- Copyright   :  (c) Edward Kmett 2009</span>
+<a name="line-7"></a><span class='hs-comment'>-- License     :  BSD-style</span>
+<a name="line-8"></a><span class='hs-comment'>-- Maintainer  :  libraries@haskell.org</span>
+<a name="line-9"></a><span class='hs-comment'>-- Stability   :  experimental</span>
+<a name="line-10"></a><span class='hs-comment'>-- Portability :  non-portable (MPTCs)</span>
+<a name="line-11"></a><span class='hs-comment'>--</span>
+<a name="line-12"></a><span class='hs-comment'>-- A Boolean 'Ring' over 'Bool'. Note well that the 'mappend' of this ring is</span>
+<a name="line-13"></a><span class='hs-comment'>-- symmetric difference and not disjunction like you might expect. To get that </span>
+<a name="line-14"></a><span class='hs-comment'>-- you should use use 'Ord' from "Data.Ring.Semi.Ord.Order" on 'Bool' to get the '&amp;&amp;'/'||'-based </span>
+<a name="line-15"></a><span class='hs-comment'>-- distributive-lattice 'SemiRing'</span>
+<a name="line-16"></a><span class='hs-comment'>-----------------------------------------------------------------------------</span>
+<a name="line-17"></a>
+<a name="line-18"></a><span class='hs-keyword'>module</span> <span class='hs-conid'>Data</span><span class='hs-varop'>.</span><span class='hs-conid'>Ring</span><span class='hs-varop'>.</span><span class='hs-conid'>Boolean</span>
+<a name="line-19"></a>    <span class='hs-layout'>(</span> <span class='hs-keyword'>module</span> <span class='hs-conid'>Data</span><span class='hs-varop'>.</span><span class='hs-conid'>Ring</span>
+<a name="line-20"></a>    <span class='hs-layout'>,</span> <span class='hs-conid'>BoolRing</span><span class='hs-layout'>(</span><span class='hs-conid'>BoolRing</span><span class='hs-layout'>,</span> <span class='hs-varid'>getBoolRing</span><span class='hs-layout'>)</span>
+<a name="line-21"></a>    <span class='hs-layout'>)</span> <span class='hs-keyword'>where</span>
+<a name="line-22"></a>
+<a name="line-23"></a><span class='hs-keyword'>import</span> <span class='hs-conid'>Data</span><span class='hs-varop'>.</span><span class='hs-conid'>Ring</span>
+<a name="line-24"></a><span class='hs-keyword'>import</span> <span class='hs-conid'>Data</span><span class='hs-varop'>.</span><span class='hs-conid'>Monoid</span><span class='hs-varop'>.</span><span class='hs-conid'>Reducer</span>
+<a name="line-25"></a>
+<a name="line-26"></a><a name="BoolRing"></a><span class='hs-keyword'>newtype</span> <span class='hs-conid'>BoolRing</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>BoolRing</span> <span class='hs-layout'>{</span> <span class='hs-varid'>getBoolRing</span> <span class='hs-keyglyph'>::</span> <span class='hs-conid'>Bool</span> <span class='hs-layout'>}</span> <span class='hs-keyword'>deriving</span> <span class='hs-layout'>(</span><span class='hs-conid'>Eq</span><span class='hs-layout'>,</span><span class='hs-conid'>Ord</span><span class='hs-layout'>,</span><span class='hs-conid'>Show</span><span class='hs-layout'>,</span><span class='hs-conid'>Read</span><span class='hs-layout'>)</span>
+<a name="line-27"></a>
+<a name="line-28"></a><span class='hs-keyword'>instance</span> <span class='hs-conid'>Monoid</span> <span class='hs-conid'>BoolRing</span> <span class='hs-keyword'>where</span>
+<a name="line-29"></a>    <span class='hs-varid'>mempty</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>BoolRing</span> <span class='hs-conid'>False</span>
+<a name="line-30"></a>    <span class='hs-conid'>BoolRing</span> <span class='hs-varid'>a</span> <span class='hs-varop'>`mappend`</span> <span class='hs-conid'>BoolRing</span> <span class='hs-varid'>b</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>BoolRing</span> <span class='hs-layout'>(</span><span class='hs-layout'>(</span><span class='hs-varid'>a</span> <span class='hs-varop'>||</span> <span class='hs-varid'>b</span><span class='hs-layout'>)</span> <span class='hs-varop'>&amp;&amp;</span> <span class='hs-varid'>not</span> <span class='hs-layout'>(</span><span class='hs-varid'>a</span> <span class='hs-varop'>&amp;&amp;</span> <span class='hs-varid'>b</span><span class='hs-layout'>)</span><span class='hs-layout'>)</span>
+<a name="line-31"></a>
+<a name="line-32"></a><span class='hs-keyword'>instance</span> <span class='hs-conid'>Group</span> <span class='hs-conid'>BoolRing</span> <span class='hs-keyword'>where</span>
+<a name="line-33"></a>    <span class='hs-varid'>gnegate</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>BoolRing</span> <span class='hs-varop'>.</span> <span class='hs-varid'>not</span> <span class='hs-varop'>.</span> <span class='hs-varid'>getBoolRing</span>
+<a name="line-34"></a>
+<a name="line-35"></a><span class='hs-keyword'>instance</span> <span class='hs-conid'>Multiplicative</span> <span class='hs-conid'>BoolRing</span> <span class='hs-keyword'>where</span>
+<a name="line-36"></a>    <span class='hs-varid'>one</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>BoolRing</span> <span class='hs-conid'>True</span>
+<a name="line-37"></a>    <span class='hs-conid'>BoolRing</span> <span class='hs-varid'>a</span> <span class='hs-varop'>`times`</span> <span class='hs-conid'>BoolRing</span> <span class='hs-varid'>b</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>BoolRing</span> <span class='hs-layout'>(</span><span class='hs-varid'>a</span> <span class='hs-varop'>&amp;&amp;</span> <span class='hs-varid'>b</span><span class='hs-layout'>)</span>
+<a name="line-38"></a>
+<a name="line-39"></a><span class='hs-keyword'>instance</span> <span class='hs-conid'>LeftSemiNearRing</span> <span class='hs-conid'>BoolRing</span>
+<a name="line-40"></a><span class='hs-keyword'>instance</span> <span class='hs-conid'>RightSemiNearRing</span> <span class='hs-conid'>BoolRing</span>
+<a name="line-41"></a><span class='hs-keyword'>instance</span> <span class='hs-conid'>SemiRing</span> <span class='hs-conid'>BoolRing</span>
+<a name="line-42"></a><span class='hs-keyword'>instance</span> <span class='hs-conid'>Ring</span> <span class='hs-conid'>BoolRing</span>
+<a name="line-43"></a>
+<a name="line-44"></a><span class='hs-keyword'>instance</span> <span class='hs-conid'>Reducer</span> <span class='hs-conid'>Bool</span> <span class='hs-conid'>BoolRing</span> <span class='hs-keyword'>where</span>
+<a name="line-45"></a>    <span class='hs-varid'>unit</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>BoolRing</span>
+</pre></body>
+</html>
addfile ./dist/doc/html/monoids/src/Data-Ring-FromNum.html
hunk ./dist/doc/html/monoids/src/Data-Ring-FromNum.html 1
+<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
+<html>
+<head>
+<!-- Generated by HsColour, http://www.cs.york.ac.uk/fp/darcs/hscolour/ -->
+<title>Data/Ring/FromNum.hs</title>
+<link type='text/css' rel='stylesheet' href='hscolour.css' />
+</head>
+<body>
+<pre><a name="line-1"></a><span class='hs-comment'>{-# LANGUAGE FlexibleInstances, FlexibleContexts, MultiParamTypeClasses, GeneralizedNewtypeDeriving #-}</span>
+<a name="line-2"></a>
+<a name="line-3"></a><span class='hs-comment'>-----------------------------------------------------------------------------</span>
+<a name="line-4"></a><span class='hs-comment'>-- |</span>
+<a name="line-5"></a><span class='hs-comment'>-- Module      :  Data.Ring.FromNum</span>
+<a name="line-6"></a><span class='hs-comment'>-- Copyright   :  (c) Edward Kmett 2009</span>
+<a name="line-7"></a><span class='hs-comment'>-- License     :  BSD-style</span>
+<a name="line-8"></a><span class='hs-comment'>-- Maintainer  :  libraries@haskell.org</span>
+<a name="line-9"></a><span class='hs-comment'>-- Stability   :  experimental</span>
+<a name="line-10"></a><span class='hs-comment'>-- Portability :  non-portable (MPTCs)</span>
+<a name="line-11"></a><span class='hs-comment'>--</span>
+<a name="line-12"></a><span class='hs-comment'>-- A wrapper that lies for you and claims any instance of 'Num' is a 'Ring'.</span>
+<a name="line-13"></a><span class='hs-comment'>-- Who knows, for your type it might even be telling the truth!</span>
+<a name="line-14"></a><span class='hs-comment'>--</span>
+<a name="line-15"></a><span class='hs-comment'>-----------------------------------------------------------------------------</span>
+<a name="line-16"></a>
+<a name="line-17"></a><span class='hs-keyword'>module</span> <span class='hs-conid'>Data</span><span class='hs-varop'>.</span><span class='hs-conid'>Ring</span><span class='hs-varop'>.</span><span class='hs-conid'>FromNum</span> 
+<a name="line-18"></a>    <span class='hs-layout'>(</span> <span class='hs-keyword'>module</span> <span class='hs-conid'>Data</span><span class='hs-varop'>.</span><span class='hs-conid'>Ring</span>
+<a name="line-19"></a>    <span class='hs-layout'>,</span> <span class='hs-conid'>FromNum</span><span class='hs-layout'>(</span><span class='hs-conid'>FromNum</span><span class='hs-layout'>,</span> <span class='hs-varid'>getFromNum</span><span class='hs-layout'>)</span>
+<a name="line-20"></a>    <span class='hs-layout'>)</span> <span class='hs-keyword'>where</span>
+<a name="line-21"></a>
+<a name="line-22"></a><span class='hs-keyword'>import</span> <span class='hs-conid'>Data</span><span class='hs-varop'>.</span><span class='hs-conid'>Ring</span>
+<a name="line-23"></a><span class='hs-keyword'>import</span> <span class='hs-conid'>Data</span><span class='hs-varop'>.</span><span class='hs-conid'>Monoid</span><span class='hs-varop'>.</span><span class='hs-conid'>Reducer</span>
+<a name="line-24"></a>
+<a name="line-25"></a><a name="FromNum"></a><span class='hs-keyword'>newtype</span> <span class='hs-conid'>FromNum</span> <span class='hs-varid'>a</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>FromNum</span> <span class='hs-layout'>{</span> <span class='hs-varid'>getFromNum</span> <span class='hs-keyglyph'>::</span> <span class='hs-varid'>a</span> <span class='hs-layout'>}</span> <span class='hs-keyword'>deriving</span> <span class='hs-layout'>(</span><span class='hs-conid'>Eq</span><span class='hs-layout'>,</span><span class='hs-conid'>Show</span><span class='hs-layout'>,</span><span class='hs-conid'>Num</span><span class='hs-layout'>)</span>
+<a name="line-26"></a>
+<a name="line-27"></a><span class='hs-keyword'>instance</span> <span class='hs-conid'>Num</span> <span class='hs-varid'>a</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>Monoid</span> <span class='hs-layout'>(</span><span class='hs-conid'>FromNum</span> <span class='hs-varid'>a</span><span class='hs-layout'>)</span> <span class='hs-keyword'>where</span>
+<a name="line-28"></a>    <span class='hs-varid'>mempty</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>fromInteger</span> <span class='hs-num'>0</span>
+<a name="line-29"></a>    <span class='hs-varid'>mappend</span> <span class='hs-keyglyph'>=</span> <span class='hs-layout'>(</span><span class='hs-varop'>+</span><span class='hs-layout'>)</span>
+<a name="line-30"></a>
+<a name="line-31"></a><span class='hs-keyword'>instance</span> <span class='hs-conid'>Num</span> <span class='hs-varid'>a</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>Group</span> <span class='hs-layout'>(</span><span class='hs-conid'>FromNum</span> <span class='hs-varid'>a</span><span class='hs-layout'>)</span> <span class='hs-keyword'>where</span>
+<a name="line-32"></a>    <span class='hs-varid'>minus</span> <span class='hs-keyglyph'>=</span> <span class='hs-layout'>(</span><span class='hs-comment'>-</span><span class='hs-layout'>)</span>
+<a name="line-33"></a>    <span class='hs-varid'>gnegate</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>negate</span>
+<a name="line-34"></a>    
+<a name="line-35"></a><span class='hs-keyword'>instance</span> <span class='hs-conid'>Num</span> <span class='hs-varid'>a</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>Multiplicative</span> <span class='hs-layout'>(</span><span class='hs-conid'>FromNum</span> <span class='hs-varid'>a</span><span class='hs-layout'>)</span> <span class='hs-keyword'>where</span>
+<a name="line-36"></a>    <span class='hs-varid'>one</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>fromInteger</span> <span class='hs-num'>1</span>
+<a name="line-37"></a>    <span class='hs-varid'>times</span> <span class='hs-keyglyph'>=</span> <span class='hs-layout'>(</span><span class='hs-varop'>*</span><span class='hs-layout'>)</span>
+<a name="line-38"></a>
+<a name="line-39"></a><span class='hs-comment'>-- you can assume these, but you're probably lying to yourself</span>
+<a name="line-40"></a><span class='hs-keyword'>instance</span> <span class='hs-conid'>Num</span> <span class='hs-varid'>a</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>LeftSemiNearRing</span> <span class='hs-layout'>(</span><span class='hs-conid'>FromNum</span> <span class='hs-varid'>a</span><span class='hs-layout'>)</span>
+<a name="line-41"></a><span class='hs-keyword'>instance</span> <span class='hs-conid'>Num</span> <span class='hs-varid'>a</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>RightSemiNearRing</span> <span class='hs-layout'>(</span><span class='hs-conid'>FromNum</span> <span class='hs-varid'>a</span><span class='hs-layout'>)</span>
+<a name="line-42"></a><span class='hs-keyword'>instance</span> <span class='hs-conid'>Num</span> <span class='hs-varid'>a</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>SemiRing</span> <span class='hs-layout'>(</span><span class='hs-conid'>FromNum</span> <span class='hs-varid'>a</span><span class='hs-layout'>)</span>
+<a name="line-43"></a><span class='hs-keyword'>instance</span> <span class='hs-conid'>Num</span> <span class='hs-varid'>a</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>Ring</span> <span class='hs-layout'>(</span><span class='hs-conid'>FromNum</span> <span class='hs-varid'>a</span><span class='hs-layout'>)</span>
+<a name="line-44"></a>    
+<a name="line-45"></a><span class='hs-keyword'>instance</span> <span class='hs-conid'>Num</span> <span class='hs-varid'>a</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>Reducer</span> <span class='hs-conid'>Integer</span> <span class='hs-layout'>(</span><span class='hs-conid'>FromNum</span> <span class='hs-varid'>a</span><span class='hs-layout'>)</span> <span class='hs-keyword'>where</span>
+<a name="line-46"></a>    <span class='hs-varid'>unit</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>fromInteger</span>
+</pre></body>
+</html>
addfile ./dist/doc/html/monoids/src/Data-Ring-Semi-Near.html
hunk ./dist/doc/html/monoids/src/Data-Ring-Semi-Near.html 1
+<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
+<html>
+<head>
+<!-- Generated by HsColour, http://www.cs.york.ac.uk/fp/darcs/hscolour/ -->
+<title>Data/Ring/Semi/Near.hs</title>
+<link type='text/css' rel='stylesheet' href='hscolour.css' />
+</head>
+<body>
+<pre><a name="line-1"></a><span class='hs-comment'>{-# OPTIONS_GHC -fno-warn-orphans #-}</span>
+<a name="line-2"></a><span class='hs-comment'>{-# LANGUAGE FlexibleInstances, MultiParamTypeClasses, UndecidableInstances #-}</span>
+<a name="line-3"></a>
+<a name="line-4"></a><span class='hs-comment'>-----------------------------------------------------------------------------</span>
+<a name="line-5"></a><span class='hs-comment'>-- |</span>
+<a name="line-6"></a><span class='hs-comment'>-- Module      :  Data.Ring.Semi.Near</span>
+<a name="line-7"></a><span class='hs-comment'>-- Copyright   :  (c) Edward Kmett 2009</span>
+<a name="line-8"></a><span class='hs-comment'>-- License     :  BSD-style</span>
+<a name="line-9"></a><span class='hs-comment'>-- Maintainer  :  libraries@haskell.org</span>
+<a name="line-10"></a><span class='hs-comment'>-- Stability   :  experimental</span>
+<a name="line-11"></a><span class='hs-comment'>-- Portability :  portable (instances use MPTCs)</span>
+<a name="line-12"></a><span class='hs-comment'>--</span>
+<a name="line-13"></a><span class='hs-comment'>-- Defines left- and right- seminearrings. Every 'MonadPlus' wrapped around</span>
+<a name="line-14"></a><span class='hs-comment'>-- a 'Monoid' qualifies due to the distributivity of (&gt;&gt;=) over 'mplus'.</span>
+<a name="line-15"></a><span class='hs-comment'>--</span>
+<a name="line-16"></a><span class='hs-comment'>-- See &lt;<a href="http://conway.rutgers.edu/~ccshan/wiki/blog/posts/WordNumbers1/">http://conway.rutgers.edu/~ccshan/wiki/blog/posts/WordNumbers1/</a>&gt;</span>
+<a name="line-17"></a><span class='hs-comment'>--</span>
+<a name="line-18"></a><span class='hs-comment'>-----------------------------------------------------------------------------</span>
+<a name="line-19"></a>
+<a name="line-20"></a><span class='hs-keyword'>module</span> <span class='hs-conid'>Data</span><span class='hs-varop'>.</span><span class='hs-conid'>Ring</span><span class='hs-varop'>.</span><span class='hs-conid'>Semi</span><span class='hs-varop'>.</span><span class='hs-conid'>Near</span>
+<a name="line-21"></a>    <span class='hs-layout'>(</span> <span class='hs-keyword'>module</span> <span class='hs-conid'>Data</span><span class='hs-varop'>.</span><span class='hs-conid'>Monoid</span><span class='hs-varop'>.</span><span class='hs-conid'>Multiplicative</span>
+<a name="line-22"></a>    <span class='hs-layout'>,</span> <span class='hs-conid'>LeftSemiNearRing</span>
+<a name="line-23"></a>    <span class='hs-layout'>,</span> <span class='hs-conid'>RightSemiNearRing</span>
+<a name="line-24"></a>    <span class='hs-layout'>)</span> <span class='hs-keyword'>where</span>
+<a name="line-25"></a>
+<a name="line-26"></a><span class='hs-keyword'>import</span> <span class='hs-conid'>Control</span><span class='hs-varop'>.</span><span class='hs-conid'>Monad</span><span class='hs-varop'>.</span><span class='hs-conid'>Reader</span>
+<a name="line-27"></a>
+<a name="line-28"></a><span class='hs-keyword'>import</span> <span class='hs-keyword'>qualified</span> <span class='hs-conid'>Control</span><span class='hs-varop'>.</span><span class='hs-conid'>Monad</span><span class='hs-varop'>.</span><span class='hs-conid'>RWS</span><span class='hs-varop'>.</span><span class='hs-conid'>Lazy</span> <span class='hs-keyword'>as</span> <span class='hs-conid'>LRWS</span>
+<a name="line-29"></a><span class='hs-keyword'>import</span> <span class='hs-keyword'>qualified</span> <span class='hs-conid'>Control</span><span class='hs-varop'>.</span><span class='hs-conid'>Monad</span><span class='hs-varop'>.</span><span class='hs-conid'>RWS</span><span class='hs-varop'>.</span><span class='hs-conid'>Strict</span> <span class='hs-keyword'>as</span> <span class='hs-conid'>SRWS</span>
+<a name="line-30"></a>
+<a name="line-31"></a><span class='hs-keyword'>import</span> <span class='hs-keyword'>qualified</span> <span class='hs-conid'>Control</span><span class='hs-varop'>.</span><span class='hs-conid'>Monad</span><span class='hs-varop'>.</span><span class='hs-conid'>State</span><span class='hs-varop'>.</span><span class='hs-conid'>Lazy</span> <span class='hs-keyword'>as</span> <span class='hs-conid'>LState</span>
+<a name="line-32"></a><span class='hs-keyword'>import</span> <span class='hs-keyword'>qualified</span> <span class='hs-conid'>Control</span><span class='hs-varop'>.</span><span class='hs-conid'>Monad</span><span class='hs-varop'>.</span><span class='hs-conid'>State</span><span class='hs-varop'>.</span><span class='hs-conid'>Strict</span> <span class='hs-keyword'>as</span> <span class='hs-conid'>SState</span>
+<a name="line-33"></a>
+<a name="line-34"></a><span class='hs-keyword'>import</span> <span class='hs-keyword'>qualified</span> <span class='hs-conid'>Control</span><span class='hs-varop'>.</span><span class='hs-conid'>Monad</span><span class='hs-varop'>.</span><span class='hs-conid'>Writer</span><span class='hs-varop'>.</span><span class='hs-conid'>Lazy</span> <span class='hs-keyword'>as</span> <span class='hs-conid'>LWriter</span>
+<a name="line-35"></a><span class='hs-keyword'>import</span> <span class='hs-keyword'>qualified</span> <span class='hs-conid'>Control</span><span class='hs-varop'>.</span><span class='hs-conid'>Monad</span><span class='hs-varop'>.</span><span class='hs-conid'>Writer</span><span class='hs-varop'>.</span><span class='hs-conid'>Strict</span> <span class='hs-keyword'>as</span> <span class='hs-conid'>SWriter</span>
+<a name="line-36"></a>
+<a name="line-37"></a><span class='hs-keyword'>import</span> <span class='hs-conid'>Data</span><span class='hs-varop'>.</span><span class='hs-conid'>Monoid</span><span class='hs-varop'>.</span><span class='hs-conid'>Multiplicative</span>
+<a name="line-38"></a><span class='hs-keyword'>import</span> <span class='hs-conid'>Data</span><span class='hs-varop'>.</span><span class='hs-conid'>FingerTree</span>
+<a name="line-39"></a><span class='hs-keyword'>import</span> <span class='hs-conid'>Data</span><span class='hs-varop'>.</span><span class='hs-conid'>Monoid</span><span class='hs-varop'>.</span><span class='hs-conid'>FromString</span>
+<a name="line-40"></a><span class='hs-keyword'>import</span> <span class='hs-conid'>Data</span><span class='hs-varop'>.</span><span class='hs-conid'>Monoid</span><span class='hs-varop'>.</span><span class='hs-conid'>Self</span>
+<a name="line-41"></a><span class='hs-keyword'>import</span> <span class='hs-conid'>Data</span><span class='hs-varop'>.</span><span class='hs-conid'>Monoid</span><span class='hs-varop'>.</span><span class='hs-conid'>Generator</span>
+<a name="line-42"></a>
+<a name="line-43"></a><span class='hs-keyword'>import</span> <span class='hs-keyword'>qualified</span> <span class='hs-conid'>Data</span><span class='hs-varop'>.</span><span class='hs-conid'>Sequence</span> <span class='hs-keyword'>as</span> <span class='hs-conid'>Seq</span>
+<a name="line-44"></a><span class='hs-keyword'>import</span> <span class='hs-conid'>Data</span><span class='hs-varop'>.</span><span class='hs-conid'>Sequence</span> <span class='hs-layout'>(</span><span class='hs-conid'>Seq</span><span class='hs-layout'>)</span>
+<a name="line-45"></a>
+<a name="line-46"></a><span class='hs-keyword'>import</span> <span class='hs-conid'>Text</span><span class='hs-varop'>.</span><span class='hs-conid'>Parsec</span><span class='hs-varop'>.</span><span class='hs-conid'>Prim</span>
+<a name="line-47"></a>
+<a name="line-48"></a><a name="RightSemiNearRing"></a><span class='hs-comment'>-- | @(a + b) * c = (a * c) + (b * c)@</span>
+<a name="line-49"></a><a name="RightSemiNearRing"></a><span class='hs-keyword'>class</span> <span class='hs-layout'>(</span><span class='hs-conid'>Multiplicative</span> <span class='hs-varid'>m</span><span class='hs-layout'>,</span> <span class='hs-conid'>Monoid</span> <span class='hs-varid'>m</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>RightSemiNearRing</span> <span class='hs-varid'>m</span> 
+<a name="line-50"></a>
+<a name="line-51"></a><span class='hs-comment'>-- 'Monoid' transformers</span>
+<a name="line-52"></a><span class='hs-keyword'>instance</span> <span class='hs-conid'>RightSemiNearRing</span> <span class='hs-varid'>m</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>RightSemiNearRing</span> <span class='hs-layout'>(</span><span class='hs-conid'>Self</span> <span class='hs-varid'>m</span><span class='hs-layout'>)</span>
+<a name="line-53"></a><span class='hs-keyword'>instance</span> <span class='hs-conid'>RightSemiNearRing</span> <span class='hs-varid'>m</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>RightSemiNearRing</span> <span class='hs-layout'>(</span><span class='hs-conid'>FromString</span> <span class='hs-varid'>m</span><span class='hs-layout'>)</span>
+<a name="line-54"></a>
+<a name="line-55"></a><a name="LeftSemiNearRing"></a><span class='hs-comment'>-- | @a * (b + c) = (a * b) + (a * c)@</span>
+<a name="line-56"></a><a name="LeftSemiNearRing"></a><span class='hs-keyword'>class</span> <span class='hs-layout'>(</span><span class='hs-conid'>Multiplicative</span> <span class='hs-varid'>m</span><span class='hs-layout'>,</span> <span class='hs-conid'>Monoid</span> <span class='hs-varid'>m</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>LeftSemiNearRing</span> <span class='hs-varid'>m</span> 
+<a name="line-57"></a>
+<a name="line-58"></a><span class='hs-comment'>-- 'Monoid' transformers</span>
+<a name="line-59"></a><span class='hs-keyword'>instance</span> <span class='hs-conid'>LeftSemiNearRing</span> <span class='hs-varid'>m</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>LeftSemiNearRing</span> <span class='hs-layout'>(</span><span class='hs-conid'>Self</span> <span class='hs-varid'>m</span><span class='hs-layout'>)</span>
+<a name="line-60"></a><span class='hs-keyword'>instance</span> <span class='hs-conid'>LeftSemiNearRing</span> <span class='hs-varid'>m</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>LeftSemiNearRing</span> <span class='hs-layout'>(</span><span class='hs-conid'>FromString</span> <span class='hs-varid'>m</span><span class='hs-layout'>)</span>
+<a name="line-61"></a>
+<a name="line-62"></a><span class='hs-comment'>-- non-'Monad' instances</span>
+<a name="line-63"></a><span class='hs-keyword'>instance</span> <span class='hs-layout'>(</span><span class='hs-conid'>Measured</span> <span class='hs-varid'>v</span> <span class='hs-varid'>m</span><span class='hs-layout'>,</span> <span class='hs-conid'>Monoid</span> <span class='hs-varid'>m</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>LeftSemiNearRing</span> <span class='hs-layout'>(</span><span class='hs-conid'>FingerTree</span> <span class='hs-varid'>v</span> <span class='hs-varid'>m</span><span class='hs-layout'>)</span>
+<a name="line-64"></a>
+<a name="line-65"></a><span class='hs-comment'>-- 'Monad' instances</span>
+<a name="line-66"></a><span class='hs-comment'>-- Every 'MonadPlus' over a 'Monoid' with an appropriate 'Multiplicative' instance</span>
+<a name="line-67"></a><span class='hs-comment'>-- for 'liftM2 mappend' is a 'LeftSemiNearRing' by 'MonadPlus' left-distributivity</span>
+<a name="line-68"></a>
+<a name="line-69"></a><span class='hs-keyword'>instance</span> <span class='hs-conid'>Monoid</span> <span class='hs-varid'>m</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>LeftSemiNearRing</span> <span class='hs-keyglyph'>[</span><span class='hs-varid'>m</span><span class='hs-keyglyph'>]</span>
+<a name="line-70"></a>
+<a name="line-71"></a><span class='hs-keyword'>instance</span> <span class='hs-conid'>Monoid</span> <span class='hs-varid'>m</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>LeftSemiNearRing</span> <span class='hs-layout'>(</span><span class='hs-conid'>Maybe</span> <span class='hs-varid'>m</span><span class='hs-layout'>)</span>
+<a name="line-72"></a>
+<a name="line-73"></a><span class='hs-keyword'>instance</span> <span class='hs-conid'>Monoid</span> <span class='hs-varid'>m</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>LeftSemiNearRing</span> <span class='hs-layout'>(</span><span class='hs-conid'>Seq</span> <span class='hs-varid'>m</span><span class='hs-layout'>)</span>
+<a name="line-74"></a>
+<a name="line-75"></a><span class='hs-keyword'>instance</span> <span class='hs-layout'>(</span><span class='hs-conid'>Stream</span> <span class='hs-varid'>s</span> <span class='hs-varid'>m</span> <span class='hs-varid'>t</span><span class='hs-layout'>,</span> <span class='hs-conid'>Monoid</span> <span class='hs-varid'>a</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>LeftSemiNearRing</span> <span class='hs-layout'>(</span><span class='hs-conid'>ParsecT</span> <span class='hs-varid'>s</span> <span class='hs-varid'>u</span> <span class='hs-varid'>m</span> <span class='hs-varid'>a</span><span class='hs-layout'>)</span>
+<a name="line-76"></a>
+<a name="line-77"></a><span class='hs-keyword'>instance</span> <span class='hs-layout'>(</span><span class='hs-conid'>MonadPlus</span> <span class='hs-varid'>m</span><span class='hs-layout'>,</span> <span class='hs-conid'>Monoid</span> <span class='hs-varid'>n</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>LeftSemiNearRing</span> <span class='hs-layout'>(</span><span class='hs-conid'>SState</span><span class='hs-varop'>.</span><span class='hs-conid'>StateT</span> <span class='hs-varid'>s</span> <span class='hs-varid'>m</span> <span class='hs-varid'>n</span><span class='hs-layout'>)</span>
+<a name="line-78"></a>
+<a name="line-79"></a><span class='hs-keyword'>instance</span> <span class='hs-layout'>(</span><span class='hs-conid'>MonadPlus</span> <span class='hs-varid'>m</span><span class='hs-layout'>,</span> <span class='hs-conid'>Monoid</span> <span class='hs-varid'>n</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>LeftSemiNearRing</span> <span class='hs-layout'>(</span><span class='hs-conid'>LState</span><span class='hs-varop'>.</span><span class='hs-conid'>StateT</span> <span class='hs-varid'>s</span> <span class='hs-varid'>m</span> <span class='hs-varid'>n</span><span class='hs-layout'>)</span>
+<a name="line-80"></a>
+<a name="line-81"></a><span class='hs-keyword'>instance</span> <span class='hs-layout'>(</span><span class='hs-conid'>MonadPlus</span> <span class='hs-varid'>m</span><span class='hs-layout'>,</span> <span class='hs-conid'>Monoid</span> <span class='hs-varid'>n</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>LeftSemiNearRing</span> <span class='hs-layout'>(</span><span class='hs-conid'>ReaderT</span> <span class='hs-varid'>e</span> <span class='hs-varid'>m</span> <span class='hs-varid'>n</span><span class='hs-layout'>)</span>
+<a name="line-82"></a>
+<a name="line-83"></a><span class='hs-keyword'>instance</span> <span class='hs-layout'>(</span><span class='hs-conid'>MonadPlus</span> <span class='hs-varid'>m</span><span class='hs-layout'>,</span> <span class='hs-conid'>Monoid</span> <span class='hs-varid'>w</span><span class='hs-layout'>,</span> <span class='hs-conid'>Monoid</span> <span class='hs-varid'>n</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>LeftSemiNearRing</span> <span class='hs-layout'>(</span><span class='hs-conid'>SRWS</span><span class='hs-varop'>.</span><span class='hs-conid'>RWST</span> <span class='hs-varid'>r</span> <span class='hs-varid'>w</span> <span class='hs-varid'>s</span> <span class='hs-varid'>m</span> <span class='hs-varid'>n</span><span class='hs-layout'>)</span>
+<a name="line-84"></a>
+<a name="line-85"></a><span class='hs-keyword'>instance</span> <span class='hs-layout'>(</span><span class='hs-conid'>MonadPlus</span> <span class='hs-varid'>m</span><span class='hs-layout'>,</span> <span class='hs-conid'>Monoid</span> <span class='hs-varid'>w</span><span class='hs-layout'>,</span> <span class='hs-conid'>Monoid</span> <span class='hs-varid'>n</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>LeftSemiNearRing</span> <span class='hs-layout'>(</span><span class='hs-conid'>LRWS</span><span class='hs-varop'>.</span><span class='hs-conid'>RWST</span> <span class='hs-varid'>r</span> <span class='hs-varid'>w</span> <span class='hs-varid'>s</span> <span class='hs-varid'>m</span> <span class='hs-varid'>n</span><span class='hs-layout'>)</span>
+<a name="line-86"></a>
+<a name="line-87"></a><span class='hs-keyword'>instance</span> <span class='hs-layout'>(</span><span class='hs-conid'>MonadPlus</span> <span class='hs-varid'>m</span><span class='hs-layout'>,</span> <span class='hs-conid'>Monoid</span> <span class='hs-varid'>w</span><span class='hs-layout'>,</span> <span class='hs-conid'>Monoid</span> <span class='hs-varid'>n</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>LeftSemiNearRing</span> <span class='hs-layout'>(</span><span class='hs-conid'>SWriter</span><span class='hs-varop'>.</span><span class='hs-conid'>WriterT</span> <span class='hs-varid'>w</span> <span class='hs-varid'>m</span> <span class='hs-varid'>n</span><span class='hs-layout'>)</span>
+<a name="line-88"></a>
+<a name="line-89"></a><span class='hs-keyword'>instance</span> <span class='hs-layout'>(</span><span class='hs-conid'>MonadPlus</span> <span class='hs-varid'>m</span><span class='hs-layout'>,</span> <span class='hs-conid'>Monoid</span> <span class='hs-varid'>w</span><span class='hs-layout'>,</span> <span class='hs-conid'>Monoid</span> <span class='hs-varid'>n</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>LeftSemiNearRing</span> <span class='hs-layout'>(</span><span class='hs-conid'>LWriter</span><span class='hs-varop'>.</span><span class='hs-conid'>WriterT</span> <span class='hs-varid'>w</span> <span class='hs-varid'>m</span> <span class='hs-varid'>n</span><span class='hs-layout'>)</span>
+</pre></body>
+</html>
addfile ./dist/doc/html/monoids/src/Data-Ring-Semi-Ord.html
hunk ./dist/doc/html/monoids/src/Data-Ring-Semi-Ord.html 1
+<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
+<html>
+<head>
+<!-- Generated by HsColour, http://www.cs.york.ac.uk/fp/darcs/hscolour/ -->
+<title>Data/Ring/Semi/Ord.hs</title>
+<link type='text/css' rel='stylesheet' href='hscolour.css' />
+</head>
+<body>
+<pre><a name="line-1"></a><span class='hs-comment'>{-# LANGUAGE FlexibleInstances, FlexibleContexts, MultiParamTypeClasses, GeneralizedNewtypeDeriving #-}</span>
+<a name="line-2"></a><span class='hs-comment'>----------------------------------------------------------------------</span>
+<a name="line-3"></a><span class='hs-comment'>-- |</span>
+<a name="line-4"></a><span class='hs-comment'>-- Module      :  Data.Ring.Semi.Ord</span>
+<a name="line-5"></a><span class='hs-comment'>-- Copyright   :  (c) Edward Kmett 2009, Conal Elliott 2008</span>
+<a name="line-6"></a><span class='hs-comment'>-- License     :  BSD3</span>
+<a name="line-7"></a><span class='hs-comment'>-- </span>
+<a name="line-8"></a><span class='hs-comment'>-- Maintainer  :  ekmett@gmail.com</span>
+<a name="line-9"></a><span class='hs-comment'>-- Stability   :  experimental</span>
+<a name="line-10"></a><span class='hs-comment'>-- </span>
+<a name="line-11"></a><span class='hs-comment'>-- Turn an instance of 'Ord' into a 'SemiRing' over 'max' and 'min'</span>
+<a name="line-12"></a><span class='hs-comment'>------------------------------------------------------------------------</span>
+<a name="line-13"></a>
+<a name="line-14"></a><span class='hs-keyword'>module</span> <span class='hs-conid'>Data</span><span class='hs-varop'>.</span><span class='hs-conid'>Ring</span><span class='hs-varop'>.</span><span class='hs-conid'>Semi</span><span class='hs-varop'>.</span><span class='hs-conid'>Ord</span>
+<a name="line-15"></a>    <span class='hs-layout'>(</span> <span class='hs-keyword'>module</span> <span class='hs-conid'>Data</span><span class='hs-varop'>.</span><span class='hs-conid'>Ring</span><span class='hs-varop'>.</span><span class='hs-conid'>Semi</span>
+<a name="line-16"></a>    <span class='hs-layout'>,</span> <span class='hs-conid'>Order</span><span class='hs-layout'>(</span><span class='hs-conid'>Order</span><span class='hs-layout'>,</span><span class='hs-varid'>getOrder</span><span class='hs-layout'>)</span>
+<a name="line-17"></a>    <span class='hs-layout'>,</span> <span class='hs-conid'>Priority</span><span class='hs-layout'>(</span><span class='hs-conid'>MinBound</span><span class='hs-layout'>,</span><span class='hs-conid'>Priority</span><span class='hs-layout'>,</span><span class='hs-conid'>MaxBound</span><span class='hs-layout'>)</span>
+<a name="line-18"></a>    <span class='hs-layout'>)</span> <span class='hs-keyword'>where</span>
+<a name="line-19"></a>
+<a name="line-20"></a><span class='hs-keyword'>import</span> <span class='hs-conid'>Test</span><span class='hs-varop'>.</span><span class='hs-conid'>QuickCheck</span>
+<a name="line-21"></a><span class='hs-comment'>-- import Control.Applicative</span>
+<a name="line-22"></a><span class='hs-keyword'>import</span> <span class='hs-conid'>Control</span><span class='hs-varop'>.</span><span class='hs-conid'>Functor</span><span class='hs-varop'>.</span><span class='hs-conid'>Pointed</span>
+<a name="line-23"></a><span class='hs-keyword'>import</span> <span class='hs-conid'>Data</span><span class='hs-varop'>.</span><span class='hs-conid'>Ring</span><span class='hs-varop'>.</span><span class='hs-conid'>Semi</span>
+<a name="line-24"></a><span class='hs-keyword'>import</span> <span class='hs-conid'>Data</span><span class='hs-varop'>.</span><span class='hs-conid'>Monoid</span><span class='hs-varop'>.</span><span class='hs-conid'>Ord</span>
+<a name="line-25"></a><span class='hs-keyword'>import</span> <span class='hs-conid'>Data</span><span class='hs-varop'>.</span><span class='hs-conid'>Monoid</span><span class='hs-varop'>.</span><span class='hs-conid'>Reducer</span>
+<a name="line-26"></a>
+<a name="line-27"></a><a name="Order"></a><span class='hs-comment'>-- | A 'SemiRing' using a type's built-in Bounded instance.</span>
+<a name="line-28"></a><a name="Order"></a><span class='hs-keyword'>newtype</span> <span class='hs-conid'>Order</span> <span class='hs-varid'>a</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>Order</span> <span class='hs-layout'>{</span> <span class='hs-varid'>getOrder</span> <span class='hs-keyglyph'>::</span> <span class='hs-varid'>a</span> <span class='hs-layout'>}</span> <span class='hs-keyword'>deriving</span> <span class='hs-layout'>(</span><span class='hs-conid'>Eq</span><span class='hs-layout'>,</span><span class='hs-conid'>Ord</span><span class='hs-layout'>,</span><span class='hs-conid'>Read</span><span class='hs-layout'>,</span><span class='hs-conid'>Show</span><span class='hs-layout'>,</span><span class='hs-conid'>Bounded</span><span class='hs-layout'>,</span><span class='hs-conid'>Arbitrary</span><span class='hs-layout'>)</span>
+<a name="line-29"></a>
+<a name="line-30"></a><span class='hs-keyword'>instance</span> <span class='hs-layout'>(</span><span class='hs-conid'>Bounded</span> <span class='hs-varid'>a</span><span class='hs-layout'>,</span> <span class='hs-conid'>Ord</span> <span class='hs-varid'>a</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>Monoid</span> <span class='hs-layout'>(</span><span class='hs-conid'>Order</span> <span class='hs-varid'>a</span><span class='hs-layout'>)</span> <span class='hs-keyword'>where</span>
+<a name="line-31"></a>    <span class='hs-varid'>mappend</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>max</span>
+<a name="line-32"></a>    <span class='hs-varid'>mempty</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>minBound</span>
+<a name="line-33"></a>
+<a name="line-34"></a><span class='hs-keyword'>instance</span> <span class='hs-layout'>(</span><span class='hs-conid'>Bounded</span> <span class='hs-varid'>a</span><span class='hs-layout'>,</span> <span class='hs-conid'>Ord</span> <span class='hs-varid'>a</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>Multiplicative</span> <span class='hs-layout'>(</span><span class='hs-conid'>Order</span> <span class='hs-varid'>a</span><span class='hs-layout'>)</span> <span class='hs-keyword'>where</span>
+<a name="line-35"></a>    <span class='hs-varid'>times</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>min</span>
+<a name="line-36"></a>    <span class='hs-varid'>one</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>maxBound</span>
+<a name="line-37"></a>    
+<a name="line-38"></a><span class='hs-keyword'>instance</span> <span class='hs-layout'>(</span><span class='hs-conid'>Bounded</span> <span class='hs-varid'>a</span><span class='hs-layout'>,</span> <span class='hs-conid'>Ord</span> <span class='hs-varid'>a</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>RightSemiNearRing</span> <span class='hs-layout'>(</span><span class='hs-conid'>Order</span> <span class='hs-varid'>a</span><span class='hs-layout'>)</span>
+<a name="line-39"></a><span class='hs-keyword'>instance</span> <span class='hs-layout'>(</span><span class='hs-conid'>Bounded</span> <span class='hs-varid'>a</span><span class='hs-layout'>,</span> <span class='hs-conid'>Ord</span> <span class='hs-varid'>a</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>LeftSemiNearRing</span> <span class='hs-layout'>(</span><span class='hs-conid'>Order</span> <span class='hs-varid'>a</span><span class='hs-layout'>)</span>
+<a name="line-40"></a><span class='hs-keyword'>instance</span> <span class='hs-layout'>(</span><span class='hs-conid'>Bounded</span> <span class='hs-varid'>a</span><span class='hs-layout'>,</span> <span class='hs-conid'>Ord</span> <span class='hs-varid'>a</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>SemiRing</span> <span class='hs-layout'>(</span><span class='hs-conid'>Order</span> <span class='hs-varid'>a</span><span class='hs-layout'>)</span>
+<a name="line-41"></a><span class='hs-keyword'>instance</span> <span class='hs-layout'>(</span><span class='hs-conid'>Bounded</span> <span class='hs-varid'>a</span><span class='hs-layout'>,</span> <span class='hs-conid'>Ord</span> <span class='hs-varid'>a</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>Reducer</span> <span class='hs-varid'>a</span> <span class='hs-layout'>(</span><span class='hs-conid'>Order</span> <span class='hs-varid'>a</span><span class='hs-layout'>)</span> <span class='hs-keyword'>where</span>
+<a name="line-42"></a>    <span class='hs-varid'>unit</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>Order</span>
+<a name="line-43"></a>
+<a name="line-44"></a><span class='hs-keyword'>instance</span> <span class='hs-conid'>Functor</span> <span class='hs-conid'>Order</span> <span class='hs-keyword'>where</span>
+<a name="line-45"></a>    <span class='hs-varid'>fmap</span> <span class='hs-varid'>f</span> <span class='hs-layout'>(</span><span class='hs-conid'>Order</span> <span class='hs-varid'>a</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>Order</span> <span class='hs-layout'>(</span><span class='hs-varid'>f</span> <span class='hs-varid'>a</span><span class='hs-layout'>)</span>
+<a name="line-46"></a>
+<a name="line-47"></a><span class='hs-keyword'>instance</span> <span class='hs-conid'>Pointed</span> <span class='hs-conid'>Order</span> <span class='hs-keyword'>where</span>
+<a name="line-48"></a>    <span class='hs-varid'>point</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>Order</span>
+<a name="line-49"></a>
+<a name="line-50"></a><span class='hs-keyword'>instance</span> <span class='hs-conid'>Copointed</span> <span class='hs-conid'>Order</span> <span class='hs-keyword'>where</span>
+<a name="line-51"></a>    <span class='hs-varid'>extract</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>getOrder</span>
+<a name="line-52"></a>
+<a name="line-53"></a><a name="Priority"></a><span class='hs-comment'>-- | A 'SemiRing' which adds 'minBound' and 'maxBound' to a pre-existing type.</span>
+<a name="line-54"></a><a name="Priority"></a><span class='hs-keyword'>data</span> <span class='hs-conid'>Priority</span> <span class='hs-varid'>a</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>MinBound</span> <span class='hs-keyglyph'>|</span> <span class='hs-conid'>Priority</span> <span class='hs-varid'>a</span> <span class='hs-keyglyph'>|</span> <span class='hs-conid'>MaxBound</span> <span class='hs-keyword'>deriving</span> <span class='hs-layout'>(</span><span class='hs-conid'>Eq</span><span class='hs-layout'>,</span><span class='hs-conid'>Read</span><span class='hs-layout'>,</span><span class='hs-conid'>Show</span><span class='hs-layout'>)</span>
+<a name="line-55"></a>
+<a name="line-56"></a><span class='hs-keyword'>instance</span> <span class='hs-conid'>Bounded</span> <span class='hs-layout'>(</span><span class='hs-conid'>Priority</span> <span class='hs-varid'>a</span><span class='hs-layout'>)</span> <span class='hs-keyword'>where</span>
+<a name="line-57"></a>    <span class='hs-varid'>minBound</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>MinBound</span>
+<a name="line-58"></a>    <span class='hs-varid'>maxBound</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>MaxBound</span>
+<a name="line-59"></a>
+<a name="line-60"></a><span class='hs-keyword'>instance</span> <span class='hs-conid'>Ord</span> <span class='hs-varid'>a</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>Ord</span> <span class='hs-layout'>(</span><span class='hs-conid'>Priority</span> <span class='hs-varid'>a</span><span class='hs-layout'>)</span> <span class='hs-keyword'>where</span>
+<a name="line-61"></a>  <span class='hs-conid'>MinBound</span>   <span class='hs-varop'>&lt;=</span> <span class='hs-keyword'>_</span>         <span class='hs-keyglyph'>=</span> <span class='hs-conid'>True</span>
+<a name="line-62"></a>  <span class='hs-conid'>Priority</span> <span class='hs-keyword'>_</span> <span class='hs-varop'>&lt;=</span> <span class='hs-conid'>MinBound</span>  <span class='hs-keyglyph'>=</span> <span class='hs-conid'>False</span>
+<a name="line-63"></a>  <span class='hs-conid'>Priority</span> <span class='hs-varid'>a</span> <span class='hs-varop'>&lt;=</span> <span class='hs-conid'>Priority</span> <span class='hs-varid'>b</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>a</span> <span class='hs-varop'>&lt;=</span> <span class='hs-varid'>b</span>
+<a name="line-64"></a>  <span class='hs-conid'>Priority</span> <span class='hs-keyword'>_</span> <span class='hs-varop'>&lt;=</span> <span class='hs-conid'>MaxBound</span>  <span class='hs-keyglyph'>=</span> <span class='hs-conid'>True</span>
+<a name="line-65"></a>  <span class='hs-conid'>MaxBound</span>   <span class='hs-varop'>&lt;=</span> <span class='hs-conid'>MaxBound</span>  <span class='hs-keyglyph'>=</span> <span class='hs-conid'>True</span>
+<a name="line-66"></a>  <span class='hs-conid'>MaxBound</span>   <span class='hs-varop'>&lt;=</span> <span class='hs-keyword'>_</span>         <span class='hs-keyglyph'>=</span> <span class='hs-conid'>False</span>
+<a name="line-67"></a>
+<a name="line-68"></a>  <span class='hs-conid'>MinBound</span>   <span class='hs-varop'>`min`</span> <span class='hs-keyword'>_</span>          <span class='hs-keyglyph'>=</span> <span class='hs-conid'>MinBound</span>
+<a name="line-69"></a>  <span class='hs-keyword'>_</span>          <span class='hs-varop'>`min`</span> <span class='hs-conid'>MinBound</span>   <span class='hs-keyglyph'>=</span> <span class='hs-conid'>MinBound</span>
+<a name="line-70"></a>  <span class='hs-conid'>Priority</span> <span class='hs-varid'>a</span> <span class='hs-varop'>`min`</span> <span class='hs-conid'>Priority</span> <span class='hs-varid'>b</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>Priority</span> <span class='hs-layout'>(</span><span class='hs-varid'>a</span> <span class='hs-varop'>`min`</span> <span class='hs-varid'>b</span><span class='hs-layout'>)</span>
+<a name="line-71"></a>  <span class='hs-varid'>u</span>          <span class='hs-varop'>`min`</span> <span class='hs-conid'>MaxBound</span>   <span class='hs-keyglyph'>=</span> <span class='hs-varid'>u</span>
+<a name="line-72"></a>  <span class='hs-conid'>MaxBound</span>   <span class='hs-varop'>`min`</span> <span class='hs-varid'>v</span>          <span class='hs-keyglyph'>=</span> <span class='hs-varid'>v</span>
+<a name="line-73"></a>  
+<a name="line-74"></a>  <span class='hs-conid'>MinBound</span>   <span class='hs-varop'>`max`</span> <span class='hs-varid'>v</span>          <span class='hs-keyglyph'>=</span> <span class='hs-varid'>v</span>
+<a name="line-75"></a>  <span class='hs-varid'>u</span>          <span class='hs-varop'>`max`</span> <span class='hs-conid'>MinBound</span>   <span class='hs-keyglyph'>=</span> <span class='hs-varid'>u</span>
+<a name="line-76"></a>  <span class='hs-conid'>Priority</span> <span class='hs-varid'>a</span> <span class='hs-varop'>`max`</span> <span class='hs-conid'>Priority</span> <span class='hs-varid'>b</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>Priority</span> <span class='hs-layout'>(</span><span class='hs-varid'>a</span> <span class='hs-varop'>`max`</span> <span class='hs-varid'>b</span><span class='hs-layout'>)</span>
+<a name="line-77"></a>  <span class='hs-keyword'>_</span>          <span class='hs-varop'>`max`</span> <span class='hs-conid'>MaxBound</span>   <span class='hs-keyglyph'>=</span> <span class='hs-conid'>MaxBound</span>
+<a name="line-78"></a>  <span class='hs-conid'>MaxBound</span>   <span class='hs-varop'>`max`</span> <span class='hs-keyword'>_</span>          <span class='hs-keyglyph'>=</span> <span class='hs-conid'>MaxBound</span>
+<a name="line-79"></a>
+<a name="line-80"></a><span class='hs-keyword'>instance</span> <span class='hs-conid'>Arbitrary</span> <span class='hs-varid'>a</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>Arbitrary</span> <span class='hs-layout'>(</span><span class='hs-conid'>Priority</span> <span class='hs-varid'>a</span><span class='hs-layout'>)</span> <span class='hs-keyword'>where</span>
+<a name="line-81"></a>  <span class='hs-varid'>arbitrary</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>frequency</span> <span class='hs-keyglyph'>[</span> <span class='hs-layout'>(</span><span class='hs-num'>1</span> <span class='hs-layout'>,</span><span class='hs-varid'>return</span> <span class='hs-conid'>MinBound</span><span class='hs-layout'>)</span>
+<a name="line-82"></a>                        <span class='hs-layout'>,</span> <span class='hs-layout'>(</span><span class='hs-num'>10</span><span class='hs-layout'>,</span> <span class='hs-varid'>fmap</span> <span class='hs-conid'>Priority</span> <span class='hs-varid'>arbitrary</span><span class='hs-layout'>)</span>
+<a name="line-83"></a>                        <span class='hs-layout'>,</span> <span class='hs-layout'>(</span><span class='hs-num'>1</span> <span class='hs-layout'>,</span><span class='hs-varid'>return</span> <span class='hs-conid'>MaxBound</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>]</span>
+<a name="line-84"></a>  <span class='hs-varid'>coarbitrary</span> <span class='hs-conid'>MinBound</span>    <span class='hs-keyglyph'>=</span> <span class='hs-varid'>variant</span> <span class='hs-num'>0</span>
+<a name="line-85"></a>  <span class='hs-varid'>coarbitrary</span> <span class='hs-layout'>(</span><span class='hs-conid'>Priority</span> <span class='hs-varid'>a</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>variant</span> <span class='hs-num'>1</span> <span class='hs-varop'>.</span> <span class='hs-varid'>coarbitrary</span> <span class='hs-varid'>a</span>
+<a name="line-86"></a>  <span class='hs-varid'>coarbitrary</span> <span class='hs-conid'>MaxBound</span>    <span class='hs-keyglyph'>=</span> <span class='hs-varid'>variant</span> <span class='hs-num'>2</span>
+<a name="line-87"></a>
+<a name="line-88"></a><span class='hs-keyword'>instance</span> <span class='hs-conid'>Ord</span> <span class='hs-varid'>a</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>Monoid</span> <span class='hs-layout'>(</span><span class='hs-conid'>Priority</span> <span class='hs-varid'>a</span><span class='hs-layout'>)</span> <span class='hs-keyword'>where</span>
+<a name="line-89"></a>    <span class='hs-varid'>mappend</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>max</span>
+<a name="line-90"></a>    <span class='hs-varid'>mempty</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>minBound</span>
+<a name="line-91"></a>
+<a name="line-92"></a><span class='hs-keyword'>instance</span> <span class='hs-conid'>Ord</span> <span class='hs-varid'>a</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>Multiplicative</span> <span class='hs-layout'>(</span><span class='hs-conid'>Priority</span> <span class='hs-varid'>a</span><span class='hs-layout'>)</span> <span class='hs-keyword'>where</span>
+<a name="line-93"></a>    <span class='hs-varid'>times</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>min</span>
+<a name="line-94"></a>    <span class='hs-varid'>one</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>maxBound</span>
+<a name="line-95"></a>
+<a name="line-96"></a><span class='hs-keyword'>instance</span> <span class='hs-conid'>Ord</span> <span class='hs-varid'>a</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>LeftSemiNearRing</span> <span class='hs-layout'>(</span><span class='hs-conid'>Priority</span> <span class='hs-varid'>a</span><span class='hs-layout'>)</span>
+<a name="line-97"></a><span class='hs-keyword'>instance</span> <span class='hs-conid'>Ord</span> <span class='hs-varid'>a</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>RightSemiNearRing</span> <span class='hs-layout'>(</span><span class='hs-conid'>Priority</span> <span class='hs-varid'>a</span><span class='hs-layout'>)</span>
+<a name="line-98"></a><span class='hs-keyword'>instance</span> <span class='hs-conid'>Ord</span> <span class='hs-varid'>a</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>SemiRing</span> <span class='hs-layout'>(</span><span class='hs-conid'>Priority</span> <span class='hs-varid'>a</span><span class='hs-layout'>)</span>
+<a name="line-99"></a>
+<a name="line-100"></a><span class='hs-keyword'>instance</span> <span class='hs-conid'>Ord</span> <span class='hs-varid'>a</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>Reducer</span> <span class='hs-varid'>a</span> <span class='hs-layout'>(</span><span class='hs-conid'>Priority</span> <span class='hs-varid'>a</span><span class='hs-layout'>)</span> <span class='hs-keyword'>where</span>
+<a name="line-101"></a>    <span class='hs-varid'>unit</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>Priority</span>
+<a name="line-102"></a>
+<a name="line-103"></a><span class='hs-keyword'>instance</span> <span class='hs-conid'>Ord</span> <span class='hs-varid'>a</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>Reducer</span> <span class='hs-layout'>(</span><span class='hs-conid'>MinPriority</span> <span class='hs-varid'>a</span><span class='hs-layout'>)</span> <span class='hs-layout'>(</span><span class='hs-conid'>Priority</span> <span class='hs-varid'>a</span><span class='hs-layout'>)</span> <span class='hs-keyword'>where</span>
+<a name="line-104"></a>    <span class='hs-varid'>unit</span> <span class='hs-layout'>(</span><span class='hs-conid'>MinPriority</span> <span class='hs-conid'>Nothing</span><span class='hs-layout'>)</span>  <span class='hs-keyglyph'>=</span> <span class='hs-conid'>MaxBound</span>
+<a name="line-105"></a>    <span class='hs-varid'>unit</span> <span class='hs-layout'>(</span><span class='hs-conid'>MinPriority</span> <span class='hs-layout'>(</span><span class='hs-conid'>Just</span> <span class='hs-varid'>x</span><span class='hs-layout'>)</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>Priority</span> <span class='hs-varid'>x</span>
+<a name="line-106"></a>
+<a name="line-107"></a><span class='hs-keyword'>instance</span> <span class='hs-conid'>Ord</span> <span class='hs-varid'>a</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>Reducer</span> <span class='hs-layout'>(</span><span class='hs-conid'>MaxPriority</span> <span class='hs-varid'>a</span><span class='hs-layout'>)</span> <span class='hs-layout'>(</span><span class='hs-conid'>Priority</span> <span class='hs-varid'>a</span><span class='hs-layout'>)</span> <span class='hs-keyword'>where</span>
+<a name="line-108"></a>    <span class='hs-varid'>unit</span> <span class='hs-layout'>(</span><span class='hs-conid'>MaxPriority</span> <span class='hs-conid'>Nothing</span><span class='hs-layout'>)</span>  <span class='hs-keyglyph'>=</span> <span class='hs-conid'>MinBound</span>
+<a name="line-109"></a>    <span class='hs-varid'>unit</span> <span class='hs-layout'>(</span><span class='hs-conid'>MaxPriority</span> <span class='hs-layout'>(</span><span class='hs-conid'>Just</span> <span class='hs-varid'>x</span><span class='hs-layout'>)</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>Priority</span> <span class='hs-varid'>x</span>
+<a name="line-110"></a>
+<a name="line-111"></a><span class='hs-keyword'>instance</span> <span class='hs-conid'>Functor</span> <span class='hs-conid'>Priority</span> <span class='hs-keyword'>where</span>
+<a name="line-112"></a>    <span class='hs-varid'>fmap</span> <span class='hs-keyword'>_</span> <span class='hs-conid'>MaxBound</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>MaxBound</span>
+<a name="line-113"></a>    <span class='hs-varid'>fmap</span> <span class='hs-varid'>f</span> <span class='hs-layout'>(</span><span class='hs-conid'>Priority</span> <span class='hs-varid'>a</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>Priority</span> <span class='hs-layout'>(</span><span class='hs-varid'>f</span> <span class='hs-varid'>a</span><span class='hs-layout'>)</span>
+<a name="line-114"></a>    <span class='hs-varid'>fmap</span> <span class='hs-keyword'>_</span> <span class='hs-conid'>MinBound</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>MinBound</span>
+<a name="line-115"></a>
+<a name="line-116"></a><span class='hs-keyword'>instance</span> <span class='hs-conid'>Pointed</span> <span class='hs-conid'>Priority</span> <span class='hs-keyword'>where</span>
+<a name="line-117"></a>    <span class='hs-varid'>point</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>Priority</span>
+</pre></body>
+</html>
addfile ./dist/doc/html/monoids/src/Data-Ring-Semi-Tropical.html
hunk ./dist/doc/html/monoids/src/Data-Ring-Semi-Tropical.html 1
+<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
+<html>
+<head>
+<!-- Generated by HsColour, http://www.cs.york.ac.uk/fp/darcs/hscolour/ -->
+<title>Data/Ring/Semi/Tropical.hs</title>
+<link type='text/css' rel='stylesheet' href='hscolour.css' />
+</head>
+<body>
+<pre><a name="line-1"></a><span class='hs-comment'>{-# LANGUAGE FlexibleInstances, MultiParamTypeClasses #-}</span>
+<a name="line-2"></a><span class='hs-comment'>-----------------------------------------------------------------------------</span>
+<a name="line-3"></a><span class='hs-comment'>---- |</span>
+<a name="line-4"></a><span class='hs-comment'>---- Module      :  Data.Ring.Semi.Tropical</span>
+<a name="line-5"></a><span class='hs-comment'>---- Copyright   :  (c) Edward Kmett 2009</span>
+<a name="line-6"></a><span class='hs-comment'>---- License     :  BSD-style</span>
+<a name="line-7"></a><span class='hs-comment'>---- Maintainer  :  libraries@haskell.org</span>
+<a name="line-8"></a><span class='hs-comment'>---- Stability   :  experimental</span>
+<a name="line-9"></a><span class='hs-comment'>---- Portability :  portable</span>
+<a name="line-10"></a><span class='hs-comment'>----</span>
+<a name="line-11"></a><span class='hs-comment'>-----------------------------------------------------------------------------</span>
+<a name="line-12"></a>
+<a name="line-13"></a><span class='hs-keyword'>module</span> <span class='hs-conid'>Data</span><span class='hs-varop'>.</span><span class='hs-conid'>Ring</span><span class='hs-varop'>.</span><span class='hs-conid'>Semi</span><span class='hs-varop'>.</span><span class='hs-conid'>Tropical</span>
+<a name="line-14"></a>    <span class='hs-layout'>(</span> <span class='hs-keyword'>module</span> <span class='hs-conid'>Data</span><span class='hs-varop'>.</span><span class='hs-conid'>Monoid</span><span class='hs-varop'>.</span><span class='hs-conid'>Reducer</span>
+<a name="line-15"></a>    <span class='hs-layout'>,</span> <span class='hs-keyword'>module</span> <span class='hs-conid'>Data</span><span class='hs-varop'>.</span><span class='hs-conid'>Ring</span><span class='hs-varop'>.</span><span class='hs-conid'>Semi</span>
+<a name="line-16"></a>    <span class='hs-comment'>-- * Max</span>
+<a name="line-17"></a>    <span class='hs-layout'>,</span> <span class='hs-varid'>infinity</span>
+<a name="line-18"></a>    <span class='hs-layout'>,</span> <span class='hs-conid'>Tropical</span><span class='hs-layout'>(</span><span class='hs-conid'>Tropical</span><span class='hs-layout'>,</span><span class='hs-varid'>getTropical</span><span class='hs-layout'>)</span>
+<a name="line-19"></a>    <span class='hs-layout'>)</span> <span class='hs-keyword'>where</span>
+<a name="line-20"></a>
+<a name="line-21"></a><span class='hs-keyword'>import</span> <span class='hs-conid'>Control</span><span class='hs-varop'>.</span><span class='hs-conid'>Functor</span><span class='hs-varop'>.</span><span class='hs-conid'>Pointed</span>
+<a name="line-22"></a><span class='hs-keyword'>import</span> <span class='hs-conid'>Data</span><span class='hs-varop'>.</span><span class='hs-conid'>Monoid</span><span class='hs-varop'>.</span><span class='hs-conid'>Reducer</span> <span class='hs-layout'>(</span><span class='hs-conid'>Reducer</span><span class='hs-layout'>,</span> <span class='hs-varid'>unit</span><span class='hs-layout'>,</span> <span class='hs-conid'>Monoid</span><span class='hs-layout'>,</span> <span class='hs-varid'>mappend</span><span class='hs-layout'>,</span> <span class='hs-varid'>mempty</span><span class='hs-layout'>)</span>
+<a name="line-23"></a><span class='hs-keyword'>import</span> <span class='hs-conid'>Data</span><span class='hs-varop'>.</span><span class='hs-conid'>Ring</span><span class='hs-varop'>.</span><span class='hs-conid'>Semi</span>
+<a name="line-24"></a><span class='hs-keyword'>import</span> <span class='hs-conid'>Data</span><span class='hs-varop'>.</span><span class='hs-conid'>Monoid</span><span class='hs-varop'>.</span><span class='hs-conid'>Ord</span> <span class='hs-varid'>hiding</span> <span class='hs-layout'>(</span><span class='hs-varid'>infinity</span><span class='hs-layout'>)</span>
+<a name="line-25"></a>
+<a name="line-26"></a><a name="infinity"></a><span class='hs-definition'>infinity</span> <span class='hs-keyglyph'>::</span> <span class='hs-conid'>Tropical</span> <span class='hs-varid'>a</span>
+<a name="line-27"></a><span class='hs-definition'>infinity</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>Tropical</span> <span class='hs-conid'>Nothing</span>
+<a name="line-28"></a>
+<a name="line-29"></a><span class='hs-comment'>-- | The 'SemiRing' @('min','+')@ over @'a' extended with 'infinity'@.</span>
+<a name="line-30"></a><span class='hs-comment'>--   When @a@ has a Num instance with an addition that respects order, then this is </span>
+<a name="line-31"></a><span class='hs-comment'>--   transformed into a tropical semiring. It is assumed that 0 is the least element</span>
+<a name="line-32"></a><span class='hs-comment'>--   of a.</span>
+<a name="line-33"></a><span class='hs-comment'>--</span>
+<a name="line-34"></a><span class='hs-comment'>--   &lt;<a href="http://hal.archives-ouvertes.fr/docs/00/11/37/79/PDF/Tropical.pdf">http://hal.archives-ouvertes.fr/docs/00/11/37/79/PDF/Tropical.pdf</a>&gt;</span>
+<a name="line-35"></a>
+<a name="line-36"></a><a name="Tropical"></a><span class='hs-keyword'>newtype</span> <span class='hs-conid'>Tropical</span> <span class='hs-varid'>a</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>Tropical</span> <span class='hs-layout'>{</span> <span class='hs-varid'>getTropical</span> <span class='hs-keyglyph'>::</span> <span class='hs-conid'>Maybe</span> <span class='hs-varid'>a</span> <span class='hs-layout'>}</span> <span class='hs-keyword'>deriving</span> <span class='hs-layout'>(</span><span class='hs-conid'>Eq</span><span class='hs-layout'>,</span><span class='hs-conid'>Show</span><span class='hs-layout'>,</span><span class='hs-conid'>Read</span><span class='hs-layout'>)</span>
+<a name="line-37"></a>
+<a name="line-38"></a><span class='hs-keyword'>instance</span> <span class='hs-conid'>Ord</span> <span class='hs-varid'>a</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>Ord</span> <span class='hs-layout'>(</span><span class='hs-conid'>Tropical</span> <span class='hs-varid'>a</span><span class='hs-layout'>)</span> <span class='hs-keyword'>where</span>
+<a name="line-39"></a>    <span class='hs-conid'>Tropical</span> <span class='hs-conid'>Nothing</span>  <span class='hs-varop'>`compare`</span> <span class='hs-conid'>Tropical</span> <span class='hs-conid'>Nothing</span>  <span class='hs-keyglyph'>=</span> <span class='hs-conid'>EQ</span>
+<a name="line-40"></a>    <span class='hs-conid'>Tropical</span> <span class='hs-conid'>Nothing</span>  <span class='hs-varop'>`compare`</span> <span class='hs-keyword'>_</span>                    <span class='hs-keyglyph'>=</span> <span class='hs-conid'>GT</span>
+<a name="line-41"></a>    <span class='hs-keyword'>_</span>                 <span class='hs-varop'>`compare`</span> <span class='hs-conid'>Tropical</span> <span class='hs-conid'>Nothing</span>  <span class='hs-keyglyph'>=</span> <span class='hs-conid'>LT</span>
+<a name="line-42"></a>    <span class='hs-conid'>Tropical</span> <span class='hs-layout'>(</span><span class='hs-conid'>Just</span> <span class='hs-varid'>a</span><span class='hs-layout'>)</span> <span class='hs-varop'>`compare`</span> <span class='hs-conid'>Tropical</span> <span class='hs-layout'>(</span><span class='hs-conid'>Just</span> <span class='hs-varid'>b</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>a</span> <span class='hs-varop'>`compare`</span> <span class='hs-varid'>b</span>
+<a name="line-43"></a>
+<a name="line-44"></a><span class='hs-keyword'>instance</span> <span class='hs-conid'>Ord</span> <span class='hs-varid'>a</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>Monoid</span> <span class='hs-layout'>(</span><span class='hs-conid'>Tropical</span> <span class='hs-varid'>a</span><span class='hs-layout'>)</span> <span class='hs-keyword'>where</span>
+<a name="line-45"></a>    <span class='hs-varid'>mempty</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>infinity</span>
+<a name="line-46"></a>    <span class='hs-varid'>mappend</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>min</span>
+<a name="line-47"></a>
+<a name="line-48"></a><span class='hs-keyword'>instance</span> <span class='hs-conid'>Ord</span> <span class='hs-varid'>a</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>Reducer</span> <span class='hs-varid'>a</span> <span class='hs-layout'>(</span><span class='hs-conid'>Tropical</span> <span class='hs-varid'>a</span><span class='hs-layout'>)</span> <span class='hs-keyword'>where</span>
+<a name="line-49"></a>    <span class='hs-varid'>unit</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>Tropical</span> <span class='hs-varop'>.</span> <span class='hs-conid'>Just</span>
+<a name="line-50"></a>
+<a name="line-51"></a><span class='hs-keyword'>instance</span> <span class='hs-conid'>Ord</span> <span class='hs-varid'>a</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>Reducer</span> <span class='hs-layout'>(</span><span class='hs-conid'>Maybe</span> <span class='hs-varid'>a</span><span class='hs-layout'>)</span> <span class='hs-layout'>(</span><span class='hs-conid'>Tropical</span> <span class='hs-varid'>a</span><span class='hs-layout'>)</span> <span class='hs-keyword'>where</span>
+<a name="line-52"></a>    <span class='hs-varid'>unit</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>Tropical</span>
+<a name="line-53"></a>
+<a name="line-54"></a><span class='hs-keyword'>instance</span> <span class='hs-conid'>Ord</span> <span class='hs-varid'>a</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>Reducer</span> <span class='hs-layout'>(</span><span class='hs-conid'>MinPriority</span> <span class='hs-varid'>a</span><span class='hs-layout'>)</span> <span class='hs-layout'>(</span><span class='hs-conid'>Tropical</span> <span class='hs-varid'>a</span><span class='hs-layout'>)</span> <span class='hs-keyword'>where</span>
+<a name="line-55"></a>    <span class='hs-varid'>unit</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>Tropical</span> <span class='hs-varop'>.</span> <span class='hs-varid'>getMinPriority</span>
+<a name="line-56"></a>
+<a name="line-57"></a><span class='hs-keyword'>instance</span> <span class='hs-conid'>Functor</span> <span class='hs-conid'>Tropical</span> <span class='hs-keyword'>where</span>
+<a name="line-58"></a>    <span class='hs-varid'>fmap</span> <span class='hs-varid'>f</span> <span class='hs-layout'>(</span><span class='hs-conid'>Tropical</span> <span class='hs-varid'>a</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>Tropical</span> <span class='hs-layout'>(</span><span class='hs-varid'>fmap</span> <span class='hs-varid'>f</span> <span class='hs-varid'>a</span><span class='hs-layout'>)</span>
+<a name="line-59"></a>
+<a name="line-60"></a><span class='hs-keyword'>instance</span> <span class='hs-conid'>Pointed</span> <span class='hs-conid'>Tropical</span> <span class='hs-keyword'>where</span>
+<a name="line-61"></a>    <span class='hs-varid'>point</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>Tropical</span> <span class='hs-varop'>.</span> <span class='hs-conid'>Just</span>
+<a name="line-62"></a>
+<a name="line-63"></a><span class='hs-keyword'>instance</span> <span class='hs-conid'>Num</span> <span class='hs-varid'>a</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>Multiplicative</span> <span class='hs-layout'>(</span><span class='hs-conid'>Tropical</span> <span class='hs-varid'>a</span><span class='hs-layout'>)</span> <span class='hs-keyword'>where</span>
+<a name="line-64"></a>    <span class='hs-varid'>one</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>point</span> <span class='hs-varop'>$</span> <span class='hs-varid'>fromInteger</span> <span class='hs-num'>0</span>
+<a name="line-65"></a>    <span class='hs-conid'>Tropical</span> <span class='hs-conid'>Nothing</span> <span class='hs-varop'>`times`</span> <span class='hs-keyword'>_</span>       <span class='hs-keyglyph'>=</span> <span class='hs-varid'>infinity</span>
+<a name="line-66"></a>    <span class='hs-conid'>Tropical</span> <span class='hs-layout'>(</span><span class='hs-conid'>Just</span> <span class='hs-varid'>a</span><span class='hs-layout'>)</span> <span class='hs-varop'>`times`</span> <span class='hs-conid'>Tropical</span> <span class='hs-layout'>(</span><span class='hs-conid'>Just</span> <span class='hs-varid'>b</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>point</span> <span class='hs-layout'>(</span><span class='hs-varid'>a</span> <span class='hs-varop'>+</span> <span class='hs-varid'>b</span><span class='hs-layout'>)</span>
+<a name="line-67"></a>    <span class='hs-keyword'>_</span>  <span class='hs-varop'>`times`</span> <span class='hs-conid'>Tropical</span> <span class='hs-conid'>Nothing</span>      <span class='hs-keyglyph'>=</span> <span class='hs-varid'>infinity</span>
+<a name="line-68"></a>
+<a name="line-69"></a><span class='hs-keyword'>instance</span> <span class='hs-layout'>(</span><span class='hs-conid'>Ord</span> <span class='hs-varid'>a</span><span class='hs-layout'>,</span> <span class='hs-conid'>Num</span> <span class='hs-varid'>a</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>LeftSemiNearRing</span> <span class='hs-layout'>(</span><span class='hs-conid'>Tropical</span> <span class='hs-varid'>a</span><span class='hs-layout'>)</span>
+<a name="line-70"></a><span class='hs-keyword'>instance</span> <span class='hs-layout'>(</span><span class='hs-conid'>Ord</span> <span class='hs-varid'>a</span><span class='hs-layout'>,</span> <span class='hs-conid'>Num</span> <span class='hs-varid'>a</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>RightSemiNearRing</span> <span class='hs-layout'>(</span><span class='hs-conid'>Tropical</span> <span class='hs-varid'>a</span><span class='hs-layout'>)</span>
+<a name="line-71"></a><span class='hs-keyword'>instance</span> <span class='hs-layout'>(</span><span class='hs-conid'>Ord</span> <span class='hs-varid'>a</span><span class='hs-layout'>,</span> <span class='hs-conid'>Num</span> <span class='hs-varid'>a</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>SemiRing</span> <span class='hs-layout'>(</span><span class='hs-conid'>Tropical</span> <span class='hs-varid'>a</span><span class='hs-layout'>)</span>
+</pre></body>
+</html>
addfile ./dist/doc/html/monoids/src/Data-Ring-Semi.html
hunk ./dist/doc/html/monoids/src/Data-Ring-Semi.html 1
+<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
+<html>
+<head>
+<!-- Generated by HsColour, http://www.cs.york.ac.uk/fp/darcs/hscolour/ -->
+<title>Data/Ring/Semi.hs</title>
+<link type='text/css' rel='stylesheet' href='hscolour.css' />
+</head>
+<body>
+<pre><a name="line-1"></a><span class='hs-comment'>-----------------------------------------------------------------------------</span>
+<a name="line-2"></a><span class='hs-comment'>-- |</span>
+<a name="line-3"></a><span class='hs-comment'>-- Module      :  Data.Ring.Semi</span>
+<a name="line-4"></a><span class='hs-comment'>-- Copyright   :  (c) Edward Kmett 2009</span>
+<a name="line-5"></a><span class='hs-comment'>-- License     :  BSD-style</span>
+<a name="line-6"></a><span class='hs-comment'>-- Maintainer  :  libraries@haskell.org</span>
+<a name="line-7"></a><span class='hs-comment'>-- Stability   :  experimental</span>
+<a name="line-8"></a><span class='hs-comment'>-- Portability :  non-portable (MPTCs)</span>
+<a name="line-9"></a><span class='hs-comment'>--</span>
+<a name="line-10"></a><span class='hs-comment'>--</span>
+<a name="line-11"></a><span class='hs-comment'>-----------------------------------------------------------------------------</span>
+<a name="line-12"></a>
+<a name="line-13"></a><span class='hs-keyword'>module</span> <span class='hs-conid'>Data</span><span class='hs-varop'>.</span><span class='hs-conid'>Ring</span><span class='hs-varop'>.</span><span class='hs-conid'>Semi</span>
+<a name="line-14"></a>    <span class='hs-layout'>(</span> <span class='hs-keyword'>module</span> <span class='hs-conid'>Data</span><span class='hs-varop'>.</span><span class='hs-conid'>Ring</span><span class='hs-varop'>.</span><span class='hs-conid'>Semi</span><span class='hs-varop'>.</span><span class='hs-conid'>Near</span>
+<a name="line-15"></a>    <span class='hs-layout'>,</span> <span class='hs-conid'>SemiRing</span>
+<a name="line-16"></a>    <span class='hs-layout'>)</span> <span class='hs-keyword'>where</span>
+<a name="line-17"></a>
+<a name="line-18"></a><span class='hs-keyword'>import</span> <span class='hs-conid'>Data</span><span class='hs-varop'>.</span><span class='hs-conid'>Ring</span><span class='hs-varop'>.</span><span class='hs-conid'>Semi</span><span class='hs-varop'>.</span><span class='hs-conid'>Near</span>
+<a name="line-19"></a>
+<a name="line-20"></a><a name="SemiRing"></a><span class='hs-comment'>-- | A 'SemiRing' is an instance of both 'Multiplicative' and 'Monoid' where </span>
+<a name="line-21"></a><a name="SemiRing"></a><span class='hs-comment'>--   'times' distributes over 'plus'.</span>
+<a name="line-22"></a><a name="SemiRing"></a><span class='hs-keyword'>class</span> <span class='hs-layout'>(</span><span class='hs-conid'>RightSemiNearRing</span> <span class='hs-varid'>a</span><span class='hs-layout'>,</span> <span class='hs-conid'>LeftSemiNearRing</span> <span class='hs-varid'>a</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>SemiRing</span> <span class='hs-varid'>a</span>
+<a name="line-23"></a>
+</pre></body>
+</html>
addfile ./dist/doc/html/monoids/src/Data-Ring-Sugar.html
hunk ./dist/doc/html/monoids/src/Data-Ring-Sugar.html 1
+<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
+<html>
+<head>
+<!-- Generated by HsColour, http://www.cs.york.ac.uk/fp/darcs/hscolour/ -->
+<title>Data/Ring/Sugar.hs</title>
+<link type='text/css' rel='stylesheet' href='hscolour.css' />
+</head>
+<body>
+<pre><a name="line-1"></a><span class='hs-comment'>-----------------------------------------------------------------------------</span>
+<a name="line-2"></a><span class='hs-comment'>-- |</span>
+<a name="line-3"></a><span class='hs-comment'>-- Module      :  Data.Ring.Sugar</span>
+<a name="line-4"></a><span class='hs-comment'>-- Copyright   :  (c) Edward Kmett 2009</span>
+<a name="line-5"></a><span class='hs-comment'>-- License     :  BSD-style</span>
+<a name="line-6"></a><span class='hs-comment'>-- Maintainer  :  libraries@haskell.org</span>
+<a name="line-7"></a><span class='hs-comment'>-- Stability   :  experimental</span>
+<a name="line-8"></a><span class='hs-comment'>-- Portability :  portable</span>
+<a name="line-9"></a><span class='hs-comment'>--</span>
+<a name="line-10"></a><span class='hs-comment'>-- Syntactic sugar for working with rings that conflicts with names from the "Prelude".</span>
+<a name="line-11"></a><span class='hs-comment'>--</span>
+<a name="line-12"></a><span class='hs-comment'>-- &gt; import Prelude hiding ((-), (+), (*), negate, subtract)</span>
+<a name="line-13"></a><span class='hs-comment'>-- &gt; import Data.Ring.Sugar</span>
+<a name="line-14"></a><span class='hs-comment'>--</span>
+<a name="line-15"></a><span class='hs-comment'>-----------------------------------------------------------------------------</span>
+<a name="line-16"></a>
+<a name="line-17"></a><span class='hs-keyword'>module</span> <span class='hs-conid'>Data</span><span class='hs-varop'>.</span><span class='hs-conid'>Ring</span><span class='hs-varop'>.</span><span class='hs-conid'>Sugar</span> 
+<a name="line-18"></a>    <span class='hs-layout'>(</span> <span class='hs-keyword'>module</span> <span class='hs-conid'>Data</span><span class='hs-varop'>.</span><span class='hs-conid'>Monoid</span><span class='hs-varop'>.</span><span class='hs-conid'>Multiplicative</span><span class='hs-varop'>.</span><span class='hs-conid'>Sugar</span>
+<a name="line-19"></a>    <span class='hs-layout'>,</span> <span class='hs-keyword'>module</span> <span class='hs-conid'>Data</span><span class='hs-varop'>.</span><span class='hs-conid'>Ring</span><span class='hs-varop'>.</span><span class='hs-conid'>Semi</span><span class='hs-varop'>.</span><span class='hs-conid'>Near</span>
+<a name="line-20"></a>    <span class='hs-layout'>)</span> <span class='hs-keyword'>where</span>
+<a name="line-21"></a>
+<a name="line-22"></a><span class='hs-keyword'>import</span> <span class='hs-conid'>Data</span><span class='hs-varop'>.</span><span class='hs-conid'>Monoid</span><span class='hs-varop'>.</span><span class='hs-conid'>Multiplicative</span><span class='hs-varop'>.</span><span class='hs-conid'>Sugar</span>
+<a name="line-23"></a><span class='hs-keyword'>import</span> <span class='hs-conid'>Data</span><span class='hs-varop'>.</span><span class='hs-conid'>Ring</span><span class='hs-varop'>.</span><span class='hs-conid'>Semi</span><span class='hs-varop'>.</span><span class='hs-conid'>Near</span>
+</pre></body>
+</html>
addfile ./dist/doc/html/monoids/src/Data-Ring.html
hunk ./dist/doc/html/monoids/src/Data-Ring.html 1
+<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
+<html>
+<head>
+<!-- Generated by HsColour, http://www.cs.york.ac.uk/fp/darcs/hscolour/ -->
+<title>Data/Ring.hs</title>
+<link type='text/css' rel='stylesheet' href='hscolour.css' />
+</head>
+<body>
+<pre><a name="line-1"></a><span class='hs-comment'>{-# OPTIONS_GHC -fno-warn-orphans #-}</span>
+<a name="line-2"></a><span class='hs-keyword'>module</span> <span class='hs-conid'>Data</span><span class='hs-varop'>.</span><span class='hs-conid'>Ring</span>
+<a name="line-3"></a>    <span class='hs-layout'>(</span> <span class='hs-keyword'>module</span> <span class='hs-conid'>Data</span><span class='hs-varop'>.</span><span class='hs-conid'>Group</span>
+<a name="line-4"></a>    <span class='hs-layout'>,</span> <span class='hs-keyword'>module</span> <span class='hs-conid'>Data</span><span class='hs-varop'>.</span><span class='hs-conid'>Ring</span><span class='hs-varop'>.</span><span class='hs-conid'>Semi</span>
+<a name="line-5"></a>    <span class='hs-layout'>,</span> <span class='hs-conid'>Ring</span>
+<a name="line-6"></a>    <span class='hs-layout'>)</span> <span class='hs-keyword'>where</span>
+<a name="line-7"></a>
+<a name="line-8"></a><span class='hs-keyword'>import</span> <span class='hs-conid'>Data</span><span class='hs-varop'>.</span><span class='hs-conid'>Group</span>
+<a name="line-9"></a><span class='hs-keyword'>import</span> <span class='hs-conid'>Data</span><span class='hs-varop'>.</span><span class='hs-conid'>Ring</span><span class='hs-varop'>.</span><span class='hs-conid'>Semi</span>
+<a name="line-10"></a>
+<a name="line-11"></a><a name="Ring"></a><span class='hs-keyword'>class</span> <span class='hs-layout'>(</span><span class='hs-conid'>Group</span> <span class='hs-varid'>a</span><span class='hs-layout'>,</span> <span class='hs-conid'>SemiRing</span> <span class='hs-varid'>a</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>Ring</span> <span class='hs-varid'>a</span>
+</pre></body>
+</html>
addfile ./dist/doc/html/monoids/src/hscolour.css
hunk ./dist/doc/html/monoids/src/hscolour.css 1
+.hs-keyglyph, .hs-layout {color: red;}
+.hs-keyword {color: blue;}
+.hs-comment, .hs-comment a {color: green;}
+.hs-str, .hs-chr {color: teal;}
+.hs-keyword, .hs-conid, .hs-varid, .hs-conop, .hs-varop, .hs-num, .hs-cpp, .hs-sel, .hs-definition {}
hunk ./monoids.cabal 2
-version:	    0.1.5
+version:	    0.1.6
hunk ./monoids.cabal 44
+    Data.Ring.Semi.Tropical
}
