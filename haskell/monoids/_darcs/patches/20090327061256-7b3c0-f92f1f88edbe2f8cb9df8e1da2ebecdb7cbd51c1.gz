[Data.Monoid.Monad.*
ekmett@gmail.com**20090327061256] {
adddir ./Data/Monoid/Monad
adddir ./Data/Monoid/Monad/RWS
adddir ./Data/Monoid/Monad/ST
adddir ./Data/Monoid/Monad/State
adddir ./Data/Monoid/Monad/Writer
addfile ./Data/Monoid/FromString.hs
hunk ./Data/Monoid/FromString.hs 1
+{-# LANGUAGE FlexibleContexts, FlexibleInstances, MultiParamTypeClasses, UndecidableInstances #-}
+module Data.Monoid.FromString 
+    ( FromString(FromString,getFromString)
+    ) where
+
+import Control.Functor.Pointed
+import Data.Monoid.Generator
+import Data.Monoid.Reducer
+import GHC.Exts
+
+data FromString m = FromString { getFromString :: m } 
+
+instance Monoid m => Monoid (FromString m) where
+    mempty = FromString mempty
+    FromString a `mappend` FromString b = FromString (a `mappend` b)
+
+instance Reducer Char m => Reducer Char (FromString m) where
+    unit = FromString . unit
+
+instance Reducer Char m => IsString (FromString m) where
+    fromString = FromString . reduce
+
+instance Pointed FromString where
+    point = FromString
+
+instance Copointed FromString where
+    extract = getFromString
+
+instance Functor FromString where
+    fmap f (FromString x) = FromString (f x)
addfile ./Data/Monoid/Monad/Cont.hs
hunk ./Data/Monoid/Monad/Cont.hs 1
+module Data.Monoid.Monad.Cont
+    ( module Control.Monad.Cont
+    , module Data.Monoid
+    )  where
+
+import Control.Monad.Cont
+import Data.Monoid
+
+instance (Monoid m) => Monoid (Cont r m) where
+    mempty = return mempty
+    mappend = liftM2 mappend
+
+instance (Monad m, Monoid n) => Monoid (ContT r m n) where
+    mempty = return mempty 
+    mappend = liftM2 mappend
addfile ./Data/Monoid/Monad/Either.hs
hunk ./Data/Monoid/Monad/Either.hs 1
+module Data.Monoid.Monad.Either
+    ( module Control.Monad.Either
+    , module Data.Monoid
+    )  where
+
+import Control.Monad.Either
+import Data.Monoid
+
+instance Monoid m => Monoid (Either e m) where
+    mempty = return mempty
+    mappend = liftM2 mappend
+
+instance (Monad m, Monoid n) => Monoid (EitherT e m n) where
+    mempty = return mempty 
+    mappend = liftM2 mappend
addfile ./Data/Monoid/Monad/Error.hs
hunk ./Data/Monoid/Monad/Error.hs 1
+module Data.Monoid.Monad.Error
+    ( module Control.Monad.Error
+    , module Data.Monoid
+    )  where
+
+import Control.Monad.Error
+import Data.Monoid
+
+instance (Error e, Monoid m) => Monoid (Error e m) where
+    mempty = return mempty
+    mappend = liftM2 mappend
+
+instance (Error e, Monad m, Monoid n) => Monoid (ErrorT e m n) where
+    mempty = return mempty 
+    mappend = liftM2 mappend
addfile ./Data/Monoid/Monad/IO.hs
hunk ./Data/Monoid/Monad/IO.hs 1
+module Data.Monoid.Monad.IO
+    ( module System.IO
+    , module Data.Monoid
+    )  where
+
+import System.IO
+import Data.Monoid
+
+instance Monoid m => Monoid (IO m) where
+    mempty = return mempty
+    mappend = liftM2 mappend
addfile ./Data/Monoid/Monad/Identity.hs
hunk ./Data/Monoid/Monad/Identity.hs 1
+module Data.Monoid.Monad.Identity
+    ( module Control.Monad.Identity
+    , module Data.Monoid
+    )  where
+
+import Control.Monad.Identity
+import Data.Monoid
+
+instance (Monoid m) => Monoid (Identity r m) where
+    mempty = return mempty
+    mappend = liftM2 mappend
+
addfile ./Data/Monoid/Monad/RWS/Lazy.hs
hunk ./Data/Monoid/Monad/RWS/Lazy.hs 1
+module Data.Monoid.Monad.RWS
+    ( module Control.Monad.RWS.Lazy
+    , module Data.Monoid
+    )  where
+
+import Control.Monad.RWS.Lazy
+import Data.Monoid
+
+instance (Monoid w, Monoid m) => Monoid (RWS r w s m) where
+    mempty = return mempty
+    mappend = liftM2 mappend
+
+instance (Monad m, Monoid w, Monoid n) => Monoid (RWST r w s m n) where
+    mempty = return mempty 
+    mappend = liftM2 mappend
addfile ./Data/Monoid/Monad/RWS/Strict.hs
hunk ./Data/Monoid/Monad/RWS/Strict.hs 1
+module Data.Monoid.Monad.RWS
+    ( module Control.Monad.RWS.Strict
+    , module Data.Monoid
+    )  where
+
+import Control.Monad.RWS.Strict
+import Data.Monoid
+
+instance (Monoid w, Monoid m) => Monoid (RWS r w s m) where
+    mempty = return mempty
+    mappend = liftM2 mappend
+
+instance (Monad m, Monoid w, Monoid n) => Monoid (RWST r w s m n) where
+    mempty = return mempty 
+    mappend = liftM2 mappend
addfile ./Data/Monoid/Monad/Reader.hs
hunk ./Data/Monoid/Monad/Reader.hs 1
+module Data.Monoid.Monad.Reader
+    ( module Control.Monad.Reader
+    , module Data.Monoid
+    )  where
+
+import Control.Monad.Reader
+import Data.Monoid
+
+instance Monoid m => Monoid (Reader e m) where
+    mempty = return mempty
+    mappend = liftM2 mappend
+
+instance (Monad m, Monoid n) => Monoid (ReaderT e m n) where
+    mempty = return mempty
+    mappend = liftM2 mappend
+
addfile ./Data/Monoid/Monad/ST/Lazy.hs
hunk ./Data/Monoid/Monad/ST/Lazy.hs 1
+module Data.Monoid.Monad.ST.Lazy
+    ( module Control.Monad.ST.Lazy
+    , module Data.Monoid
+    )  where
+
+import Control.Monad.ST.Lazy
+import Data.Monoid
+
+instance Monoid m => Monoid (ST s m) where
+    mempty = return mempty
+    mappend = liftM2 mappend
+
+
addfile ./Data/Monoid/Monad/ST/Strict.hs
hunk ./Data/Monoid/Monad/ST/Strict.hs 1
+module Data.Monoid.Monad.ST.Strict
+    ( module Control.Monad.ST.Strict
+    , module Data.Monoid
+    )  where
+
+import Control.Monad.ST.Strict
+import Data.Monoid
+
+instance Monoid m => Monoid (ST s m) where
+    mempty = return mempty
+    mappend = liftM2 mappend
+
+
addfile ./Data/Monoid/Monad/State/Lazy.hs
hunk ./Data/Monoid/Monad/State/Lazy.hs 1
+module Data.Monoid.Monad.State
+    ( module Control.Monad.State.Lazy
+    , module Data.Monoid
+    )  where
+
+import Control.Monad.State.Lazy
+import Data.Monoid
+
+instance Monoid m => Monoid (State s m) where
+    mempty = return mempty
+    mappend = liftM2 mappend
+
+instance (Monad m, Monoid n) => Monoid (StateT s m n) where
+    mempty = return mempty
+    mappend = liftM2 mappend
+
addfile ./Data/Monoid/Monad/State/Strict.hs
hunk ./Data/Monoid/Monad/State/Strict.hs 1
+module Data.Monoid.Monad.State
+    ( module Control.Monad.State.Strict
+    , module Data.Monoid
+    )  where
+
+import Control.Monad.State.Strict
+import Data.Monoid
+
+instance Monoid m => Monoid (State s m) where
+    mempty = return mempty
+    mappend = liftM2 mappend
+
+instance (Monad m, Monoid n) => Monoid (StateT s m n) where
+    mempty = return mempty
+    mappend = liftM2 mappend
+
addfile ./Data/Monoid/Monad/Writer/Lazy.hs
hunk ./Data/Monoid/Monad/Writer/Lazy.hs 1
+module Data.Monoid.Monad.Writer
+    ( module Control.Monad.Writer.Lazy
+    , module Data.Monoid
+    )  where
+
+import Control.Monad.Writer.Lazy
+import Data.Monoid
+
+instance (Monoid w, Monoid m) => Monoid (Writer w m) where
+    mempty = return mempty
+    mappend = liftM2 mappend
+
+instance (Monad m, Monoid w, Monoid n) => Monoid (WriterT w m n) where
+    mempty = return mempty 
+    mappend = liftM2 mappend
addfile ./Data/Monoid/Monad/Writer/Strict.hs
hunk ./Data/Monoid/Monad/Writer/Strict.hs 1
+module Data.Monoid.Monad.Writer
+    ( module Control.Monad.Writer.Strict
+    , module Data.Monoid
+    )  where
+
+import Control.Monad.Writer.Strict
+import Data.Monoid
+
+instance (Monoid w, Monoid m) => Monoid (Writer w m) where
+    mempty = return mempty
+    mappend = liftM2 mappend
+
+instance (Monad m, Monoid w, Monoid n) => Monoid (WriterT w m n) where
+    mempty = return mempty 
+    mappend = liftM2 mappend
hunk ./monoids.cabal 28
+    Data.Monoid.Monad.Reader
+    Data.Monoid.Monad.Writer.Lazy
+    Data.Monoid.Monad.Writer.Strict
+    Data.Monoid.Monad.State.Lazy
+    Data.Monoid.Monad.State.Strict
+    Data.Monoid.Monad.Cont
+    Data.Monoid.Monad.Either
+    Data.Monoid.Monad.Error
+    Data.Monoid.Monad.Identity
+    Data.Monoid.Monad.RWS.Lazy
+    Data.Monoid.Monad.RWS.Strict
+    Data.Monoid.Monad.ST.Lazy
+    Data.Monoid.Monad.ST.Strict
+    Data.Monoid.Monad.IO
}
