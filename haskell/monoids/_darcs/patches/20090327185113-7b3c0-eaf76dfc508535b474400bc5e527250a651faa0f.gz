[added Boolean Rings
ekmett@gmail.com**20090327185113] {
addfile ./Data/Ring/Boolean.hs
hunk ./Data/Ring/Boolean.hs 1
+{-# LANGUAGE FlexibleInstances, MultiParamTypeClasses #-}
+{-# OPTIONS_GHC -fno-warn-orphans #-}
+module Data.Ring.Boolean
+    ( module Data.Ring
+    ) where
+
+import Data.Ring
+import Data.Monoid.Reducer
+
+-- | use @'Data.Ring.Semi.Ord.Order' 'Bool'@ to get the '&&'/'||' based distributive lattice 'Semiring'
+newtype BooleanRing = BooleanRing { getBooleanRing :: Bool } deriving (Eq,Ord,Show,Read)
+
+instance Monoid BooleanRing where
+    mempty = BooleanRing False
+    BooleanRing a `mappend` BooleanRing b = BooleanRing ((a || b) && not (a && b))
+
+instance Group BooleanRing where
+    gnegate = BooleanRing . not . getBooleanRing
+
+instance MultiplicativeMonoid BooleanRing where
+    one = BooleanRing True
+    BooleanRing a `times` BooleanRing b = BooleanRing (a && b)
+
+instance Seminearring BooleanRing
+instance Semiring BooleanRing
+instance Ring BooleanRing
+
+instance Reducer Bool BooleanRing where
+    unit = BooleanRing
hunk ./monoids.cabal 59
+    Data.Ring.Boolean
}
