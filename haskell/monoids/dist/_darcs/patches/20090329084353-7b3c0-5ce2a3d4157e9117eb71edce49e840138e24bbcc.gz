[auto
ekmett@gmail.com**20090329084353] {
hunk ./doc/html/monoids/Data-Monoid-Generator-LZ78.html 269
+><TD CLASS="decl"
+><A HREF="/usr/local/share/doc/ghc/libraries/base/Data-Foldable.html#t%3AFoldable"
+>Foldable</A
+> <A HREF="Data-Monoid-Generator-LZ78.html#t%3ALZ78"
+>LZ78</A
+></TD
+></TR
+><TR
hunk ./doc/html/monoids/src/Data-Monoid-Generator-LZ78.html 48
-<a name="line-40"></a><span class='hs-keyword'>import</span> <span class='hs-conid'>Data</span><span class='hs-varop'>.</span><span class='hs-conid'>Monoid</span><span class='hs-varop'>.</span><span class='hs-conid'>Self</span>
-<a name="line-41"></a>
-<a name="line-42"></a><span class='hs-comment'>-- | An LZ78 compressing 'Generator', which supports efficient 'mapReduce' operations</span>
-<a name="line-43"></a>
-<a name="line-44"></a><a name="Token"></a><span class='hs-keyword'>data</span> <span class='hs-conid'>Token</span> <span class='hs-varid'>a</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>Token</span> <span class='hs-varid'>a</span> <span class='hs-comment'>{-# UNPACK #-}</span> <span class='hs-varop'>!</span><span class='hs-conid'>Int</span> 
-<a name="line-45"></a>    <span class='hs-keyword'>deriving</span> <span class='hs-layout'>(</span><span class='hs-conid'>Eq</span><span class='hs-layout'>,</span><span class='hs-conid'>Ord</span><span class='hs-layout'>,</span><span class='hs-conid'>Show</span><span class='hs-layout'>,</span><span class='hs-conid'>Read</span><span class='hs-layout'>)</span>
-<a name="line-46"></a>
-<a name="line-47"></a><span class='hs-comment'>-- after using the Functor instance the encoding may no longer be minimal</span>
-<a name="line-48"></a><span class='hs-keyword'>instance</span> <span class='hs-conid'>Functor</span> <span class='hs-conid'>Token</span> <span class='hs-keyword'>where</span>
-<a name="line-49"></a>    <span class='hs-varid'>fmap</span> <span class='hs-varid'>f</span> <span class='hs-layout'>(</span><span class='hs-conid'>Token</span> <span class='hs-varid'>a</span> <span class='hs-varid'>n</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>Token</span> <span class='hs-layout'>(</span><span class='hs-varid'>f</span> <span class='hs-varid'>a</span><span class='hs-layout'>)</span> <span class='hs-varid'>n</span>
-<a name="line-50"></a>
-<a name="line-51"></a><a name="LZ78"></a><span class='hs-keyword'>newtype</span> <span class='hs-conid'>LZ78</span> <span class='hs-varid'>a</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>LZ78</span> <span class='hs-layout'>{</span> <span class='hs-varid'>getLZ78</span> <span class='hs-keyglyph'>::</span> <span class='hs-keyglyph'>[</span><span class='hs-conid'>Token</span> <span class='hs-varid'>a</span><span class='hs-keyglyph'>]</span> <span class='hs-layout'>}</span> 
-<a name="line-52"></a>
-<a name="line-53"></a><a name="emptyDict"></a><span class='hs-definition'>emptyDict</span> <span class='hs-keyglyph'>::</span> <span class='hs-conid'>Monoid</span> <span class='hs-varid'>m</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>Seq</span> <span class='hs-varid'>m</span>
-<a name="line-54"></a><span class='hs-definition'>emptyDict</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>Seq</span><span class='hs-varop'>.</span><span class='hs-varid'>singleton</span> <span class='hs-varid'>mempty</span>
-<a name="line-55"></a>
-<a name="line-56"></a><span class='hs-keyword'>instance</span> <span class='hs-conid'>Generator</span> <span class='hs-layout'>(</span><span class='hs-conid'>LZ78</span> <span class='hs-varid'>a</span><span class='hs-layout'>)</span> <span class='hs-keyword'>where</span>
-<a name="line-57"></a>    <span class='hs-keyword'>type</span> <span class='hs-conid'>Elem</span> <span class='hs-layout'>(</span><span class='hs-conid'>LZ78</span> <span class='hs-varid'>a</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>a</span>
-<a name="line-58"></a>    <span class='hs-varid'>mapTo</span> <span class='hs-varid'>f</span> <span class='hs-varid'>m</span> <span class='hs-layout'>(</span><span class='hs-conid'>LZ78</span> <span class='hs-varid'>xs</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>mapTo'</span> <span class='hs-varid'>f</span> <span class='hs-varid'>m</span> <span class='hs-varid'>emptyDict</span> <span class='hs-varid'>xs</span>
-<a name="line-59"></a>
-<a name="line-60"></a><span class='hs-keyword'>instance</span> <span class='hs-conid'>Functor</span> <span class='hs-conid'>LZ78</span> <span class='hs-keyword'>where</span>
-<a name="line-61"></a>    <span class='hs-varid'>fmap</span> <span class='hs-varid'>f</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>LZ78</span> <span class='hs-varop'>.</span> <span class='hs-varid'>fmap</span> <span class='hs-layout'>(</span><span class='hs-varid'>fmap</span> <span class='hs-varid'>f</span><span class='hs-layout'>)</span> <span class='hs-varop'>.</span> <span class='hs-varid'>getLZ78</span>
-<a name="line-62"></a>
-<a name="line-63"></a><span class='hs-keyword'>instance</span> <span class='hs-conid'>Foldable</span> <span class='hs-conid'>LZ78</span> <span class='hs-keyword'>where</span>
-<a name="line-64"></a>    <span class='hs-varid'>foldMap</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>getSelf</span> <span class='hs-varop'>.</span> <span class='hs-varid'>reduce</span>
-<a name="line-65"></a>
-<a name="line-66"></a><a name="mapTo'"></a><span class='hs-definition'>mapTo'</span> <span class='hs-keyglyph'>::</span> <span class='hs-layout'>(</span><span class='hs-varid'>e</span> <span class='hs-varop'>`Reducer`</span> <span class='hs-varid'>m</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-layout'>(</span><span class='hs-varid'>a</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-varid'>e</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-varid'>m</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-conid'>Seq</span> <span class='hs-varid'>m</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-keyglyph'>[</span><span class='hs-conid'>Token</span> <span class='hs-varid'>a</span><span class='hs-keyglyph'>]</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-varid'>m</span>
-<a name="line-67"></a><span class='hs-definition'>mapTo'</span> <span class='hs-keyword'>_</span> <span class='hs-varid'>m</span> <span class='hs-keyword'>_</span> <span class='hs-conid'>[]</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>m</span>
-<a name="line-68"></a><span class='hs-definition'>mapTo'</span> <span class='hs-varid'>f</span> <span class='hs-varid'>m</span> <span class='hs-varid'>s</span> <span class='hs-layout'>(</span><span class='hs-conid'>Token</span> <span class='hs-varid'>c</span> <span class='hs-varid'>w</span><span class='hs-conop'>:</span><span class='hs-varid'>ws</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>mapTo'</span> <span class='hs-varid'>f</span> <span class='hs-layout'>(</span><span class='hs-varid'>m</span> <span class='hs-varop'>`mappend`</span> <span class='hs-varid'>v</span><span class='hs-layout'>)</span> <span class='hs-layout'>(</span><span class='hs-varid'>s</span> <span class='hs-varop'>|&gt;</span> <span class='hs-varid'>v</span><span class='hs-layout'>)</span> <span class='hs-varid'>ws</span> 
-<a name="line-69"></a>    <span class='hs-keyword'>where</span> 
-<a name="line-70"></a>        <span class='hs-varid'>v</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>Seq</span><span class='hs-varop'>.</span><span class='hs-varid'>index</span> <span class='hs-varid'>s</span> <span class='hs-varid'>w</span> <span class='hs-varop'>`mappend`</span> <span class='hs-varid'>unit</span> <span class='hs-layout'>(</span><span class='hs-varid'>f</span> <span class='hs-varid'>c</span><span class='hs-layout'>)</span>
-<a name="line-71"></a>
-<a name="line-72"></a><span class='hs-comment'>-- | a type-constrained 'reduce' operation</span>
-<a name="line-73"></a>    
-<a name="line-74"></a><a name="decode"></a><span class='hs-definition'>decode</span> <span class='hs-keyglyph'>::</span> <span class='hs-conid'>LZ78</span> <span class='hs-varid'>a</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-keyglyph'>[</span><span class='hs-varid'>a</span><span class='hs-keyglyph'>]</span>
-<a name="line-75"></a><span class='hs-definition'>decode</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>reduce</span>
-<a name="line-76"></a>
-<a name="line-77"></a><span class='hs-comment'>-- | contruct an LZ78-compressed 'Generator' using a 'Map' internally, requires an instance of Ord.</span>
-<a name="line-78"></a>
-<a name="line-79"></a><a name="encode"></a><span class='hs-definition'>encode</span> <span class='hs-keyglyph'>::</span> <span class='hs-conid'>Ord</span> <span class='hs-varid'>a</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-keyglyph'>[</span><span class='hs-varid'>a</span><span class='hs-keyglyph'>]</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-conid'>LZ78</span> <span class='hs-varid'>a</span>
-<a name="line-80"></a><span class='hs-definition'>encode</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>LZ78</span> <span class='hs-varop'>.</span> <span class='hs-varid'>encode'</span> <span class='hs-conid'>Map</span><span class='hs-varop'>.</span><span class='hs-varid'>empty</span> <span class='hs-num'>1</span> <span class='hs-num'>0</span>
-<a name="line-81"></a>
-<a name="line-82"></a><a name="encode'"></a><span class='hs-definition'>encode'</span> <span class='hs-keyglyph'>::</span> <span class='hs-conid'>Ord</span> <span class='hs-varid'>a</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>Map</span> <span class='hs-layout'>(</span><span class='hs-conid'>Token</span> <span class='hs-varid'>a</span><span class='hs-layout'>)</span> <span class='hs-conid'>Int</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-conid'>Int</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-conid'>Int</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-keyglyph'>[</span><span class='hs-varid'>a</span><span class='hs-keyglyph'>]</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-keyglyph'>[</span><span class='hs-conid'>Token</span> <span class='hs-varid'>a</span><span class='hs-keyglyph'>]</span>
-<a name="line-83"></a><span class='hs-definition'>encode'</span> <span class='hs-keyword'>_</span> <span class='hs-keyword'>_</span> <span class='hs-varid'>p</span> <span class='hs-keyglyph'>[</span><span class='hs-varid'>c</span><span class='hs-keyglyph'>]</span> <span class='hs-keyglyph'>=</span> <span class='hs-keyglyph'>[</span><span class='hs-conid'>Token</span> <span class='hs-varid'>c</span> <span class='hs-varid'>p</span><span class='hs-keyglyph'>]</span>
-<a name="line-84"></a><span class='hs-definition'>encode'</span> <span class='hs-varid'>d</span> <span class='hs-varid'>f</span> <span class='hs-varid'>p</span> <span class='hs-layout'>(</span><span class='hs-varid'>c</span><span class='hs-conop'>:</span><span class='hs-varid'>cs</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=</span> <span class='hs-keyword'>let</span> <span class='hs-varid'>t</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>Token</span> <span class='hs-varid'>c</span> <span class='hs-varid'>p</span> <span class='hs-keyword'>in</span> <span class='hs-keyword'>case</span> <span class='hs-conid'>Map</span><span class='hs-varop'>.</span><span class='hs-varid'>lookup</span> <span class='hs-varid'>t</span> <span class='hs-varid'>d</span> <span class='hs-keyword'>of</span>
-<a name="line-85"></a>    <span class='hs-conid'>Just</span> <span class='hs-varid'>p'</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-varid'>encode'</span> <span class='hs-varid'>d</span> <span class='hs-varid'>f</span> <span class='hs-varid'>p'</span> <span class='hs-varid'>cs</span>
-<a name="line-86"></a>    <span class='hs-conid'>Nothing</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-varid'>t</span> <span class='hs-conop'>:</span> <span class='hs-varid'>encode'</span> <span class='hs-layout'>(</span><span class='hs-conid'>Map</span><span class='hs-varop'>.</span><span class='hs-varid'>insert</span> <span class='hs-varid'>t</span> <span class='hs-varid'>f</span> <span class='hs-varid'>d</span><span class='hs-layout'>)</span> <span class='hs-layout'>(</span><span class='hs-varid'>succ</span> <span class='hs-varid'>f</span><span class='hs-layout'>)</span> <span class='hs-num'>0</span> <span class='hs-varid'>cs</span>
-<a name="line-87"></a><span class='hs-definition'>encode'</span> <span class='hs-keyword'>_</span> <span class='hs-keyword'>_</span> <span class='hs-keyword'>_</span> <span class='hs-conid'>[]</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>[]</span>
-<a name="line-88"></a>
-<a name="line-89"></a><span class='hs-comment'>-- | contruct an LZ78-compressed 'Generator' using a list internally, requires an instance of Eq.</span>
-<a name="line-90"></a>
-<a name="line-91"></a><a name="encodeEq"></a><span class='hs-definition'>encodeEq</span> <span class='hs-keyglyph'>::</span> <span class='hs-conid'>Eq</span> <span class='hs-varid'>a</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-keyglyph'>[</span><span class='hs-varid'>a</span><span class='hs-keyglyph'>]</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-conid'>LZ78</span> <span class='hs-varid'>a</span>
-<a name="line-92"></a><span class='hs-definition'>encodeEq</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>LZ78</span> <span class='hs-varop'>.</span> <span class='hs-varid'>encodeEq'</span> <span class='hs-conid'>[]</span> <span class='hs-num'>1</span> <span class='hs-num'>0</span>
-<a name="line-93"></a>
-<a name="line-94"></a><a name="encodeEq'"></a><span class='hs-definition'>encodeEq'</span> <span class='hs-keyglyph'>::</span> <span class='hs-conid'>Eq</span> <span class='hs-varid'>a</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-keyglyph'>[</span><span class='hs-layout'>(</span><span class='hs-conid'>Token</span> <span class='hs-varid'>a</span><span class='hs-layout'>,</span><span class='hs-conid'>Int</span><span class='hs-layout'>)</span><span class='hs-keyglyph'>]</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-conid'>Int</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-conid'>Int</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-keyglyph'>[</span><span class='hs-varid'>a</span><span class='hs-keyglyph'>]</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-keyglyph'>[</span><span class='hs-conid'>Token</span> <span class='hs-varid'>a</span><span class='hs-keyglyph'>]</span>
-<a name="line-95"></a><span class='hs-definition'>encodeEq'</span> <span class='hs-keyword'>_</span> <span class='hs-keyword'>_</span> <span class='hs-varid'>p</span> <span class='hs-keyglyph'>[</span><span class='hs-varid'>c</span><span class='hs-keyglyph'>]</span> <span class='hs-keyglyph'>=</span> <span class='hs-keyglyph'>[</span><span class='hs-conid'>Token</span> <span class='hs-varid'>c</span> <span class='hs-varid'>p</span><span class='hs-keyglyph'>]</span>
-<a name="line-96"></a><span class='hs-definition'>encodeEq'</span> <span class='hs-varid'>d</span> <span class='hs-varid'>f</span> <span class='hs-varid'>p</span> <span class='hs-layout'>(</span><span class='hs-varid'>c</span><span class='hs-conop'>:</span><span class='hs-varid'>cs</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=</span> <span class='hs-keyword'>let</span> <span class='hs-varid'>t</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>Token</span> <span class='hs-varid'>c</span> <span class='hs-varid'>p</span> <span class='hs-keyword'>in</span> <span class='hs-keyword'>case</span> <span class='hs-conid'>List</span><span class='hs-varop'>.</span><span class='hs-varid'>lookup</span> <span class='hs-varid'>t</span> <span class='hs-varid'>d</span> <span class='hs-keyword'>of</span>
-<a name="line-97"></a>    <span class='hs-conid'>Just</span> <span class='hs-varid'>p'</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-varid'>encodeEq'</span> <span class='hs-varid'>d</span> <span class='hs-varid'>f</span> <span class='hs-varid'>p'</span> <span class='hs-varid'>cs</span>
-<a name="line-98"></a>    <span class='hs-conid'>Nothing</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-varid'>t</span> <span class='hs-conop'>:</span> <span class='hs-varid'>encodeEq'</span> <span class='hs-layout'>(</span><span class='hs-layout'>(</span><span class='hs-varid'>t</span><span class='hs-layout'>,</span><span class='hs-varid'>f</span><span class='hs-layout'>)</span><span class='hs-conop'>:</span><span class='hs-varid'>d</span><span class='hs-layout'>)</span> <span class='hs-layout'>(</span><span class='hs-varid'>succ</span> <span class='hs-varid'>f</span><span class='hs-layout'>)</span> <span class='hs-num'>0</span> <span class='hs-varid'>cs</span>
-<a name="line-99"></a><span class='hs-definition'>encodeEq'</span> <span class='hs-keyword'>_</span> <span class='hs-keyword'>_</span> <span class='hs-keyword'>_</span> <span class='hs-conid'>[]</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>[]</span>
-<a name="line-100"></a>
-<a name="line-101"></a><a name="prop_decode_encode"></a><span class='hs-comment'>-- | QuickCheck property: decode . encode = id</span>
-<a name="line-102"></a><span class='hs-definition'>prop_decode_encode</span> <span class='hs-keyglyph'>::</span> <span class='hs-conid'>Ord</span> <span class='hs-varid'>a</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-keyglyph'>[</span><span class='hs-varid'>a</span><span class='hs-keyglyph'>]</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-conid'>Bool</span>
-<a name="line-103"></a><span class='hs-definition'>prop_decode_encode</span> <span class='hs-varid'>xs</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>decode</span> <span class='hs-layout'>(</span><span class='hs-varid'>encode</span> <span class='hs-varid'>xs</span><span class='hs-layout'>)</span> <span class='hs-varop'>==</span> <span class='hs-varid'>xs</span>
-<a name="line-104"></a>
-<a name="line-105"></a><a name="prop_decode_encodeEq"></a><span class='hs-comment'>-- | QuickCheck property: decode . encodeEq = id</span>
-<a name="line-106"></a><span class='hs-definition'>prop_decode_encodeEq</span> <span class='hs-keyglyph'>::</span> <span class='hs-conid'>Eq</span> <span class='hs-varid'>a</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-keyglyph'>[</span><span class='hs-varid'>a</span><span class='hs-keyglyph'>]</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-conid'>Bool</span>
-<a name="line-107"></a><span class='hs-definition'>prop_decode_encodeEq</span> <span class='hs-varid'>xs</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>decode</span> <span class='hs-layout'>(</span><span class='hs-varid'>encodeEq</span> <span class='hs-varid'>xs</span><span class='hs-layout'>)</span> <span class='hs-varop'>==</span> <span class='hs-varid'>xs</span>
+<a name="line-40"></a><span class='hs-keyword'>import</span> <span class='hs-conid'>Data</span><span class='hs-varop'>.</span><span class='hs-conid'>Foldable</span>
+<a name="line-41"></a><span class='hs-keyword'>import</span> <span class='hs-conid'>Data</span><span class='hs-varop'>.</span><span class='hs-conid'>Monoid</span><span class='hs-varop'>.</span><span class='hs-conid'>Self</span>
+<a name="line-42"></a>
+<a name="line-43"></a><span class='hs-comment'>-- | An LZ78 compressing 'Generator', which supports efficient 'mapReduce' operations</span>
+<a name="line-44"></a>
+<a name="line-45"></a><a name="Token"></a><span class='hs-keyword'>data</span> <span class='hs-conid'>Token</span> <span class='hs-varid'>a</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>Token</span> <span class='hs-varid'>a</span> <span class='hs-comment'>{-# UNPACK #-}</span> <span class='hs-varop'>!</span><span class='hs-conid'>Int</span> 
+<a name="line-46"></a>    <span class='hs-keyword'>deriving</span> <span class='hs-layout'>(</span><span class='hs-conid'>Eq</span><span class='hs-layout'>,</span><span class='hs-conid'>Ord</span><span class='hs-layout'>,</span><span class='hs-conid'>Show</span><span class='hs-layout'>,</span><span class='hs-conid'>Read</span><span class='hs-layout'>)</span>
+<a name="line-47"></a>
+<a name="line-48"></a><span class='hs-comment'>-- after using the Functor instance the encoding may no longer be minimal</span>
+<a name="line-49"></a><span class='hs-keyword'>instance</span> <span class='hs-conid'>Functor</span> <span class='hs-conid'>Token</span> <span class='hs-keyword'>where</span>
+<a name="line-50"></a>    <span class='hs-varid'>fmap</span> <span class='hs-varid'>f</span> <span class='hs-layout'>(</span><span class='hs-conid'>Token</span> <span class='hs-varid'>a</span> <span class='hs-varid'>n</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>Token</span> <span class='hs-layout'>(</span><span class='hs-varid'>f</span> <span class='hs-varid'>a</span><span class='hs-layout'>)</span> <span class='hs-varid'>n</span>
+<a name="line-51"></a>
+<a name="line-52"></a><a name="LZ78"></a><span class='hs-keyword'>newtype</span> <span class='hs-conid'>LZ78</span> <span class='hs-varid'>a</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>LZ78</span> <span class='hs-layout'>{</span> <span class='hs-varid'>getLZ78</span> <span class='hs-keyglyph'>::</span> <span class='hs-keyglyph'>[</span><span class='hs-conid'>Token</span> <span class='hs-varid'>a</span><span class='hs-keyglyph'>]</span> <span class='hs-layout'>}</span> 
+<a name="line-53"></a>
+<a name="line-54"></a><a name="emptyDict"></a><span class='hs-definition'>emptyDict</span> <span class='hs-keyglyph'>::</span> <span class='hs-conid'>Monoid</span> <span class='hs-varid'>m</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>Seq</span> <span class='hs-varid'>m</span>
+<a name="line-55"></a><span class='hs-definition'>emptyDict</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>Seq</span><span class='hs-varop'>.</span><span class='hs-varid'>singleton</span> <span class='hs-varid'>mempty</span>
+<a name="line-56"></a>
+<a name="line-57"></a><span class='hs-keyword'>instance</span> <span class='hs-conid'>Generator</span> <span class='hs-layout'>(</span><span class='hs-conid'>LZ78</span> <span class='hs-varid'>a</span><span class='hs-layout'>)</span> <span class='hs-keyword'>where</span>
+<a name="line-58"></a>    <span class='hs-keyword'>type</span> <span class='hs-conid'>Elem</span> <span class='hs-layout'>(</span><span class='hs-conid'>LZ78</span> <span class='hs-varid'>a</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>a</span>
+<a name="line-59"></a>    <span class='hs-varid'>mapTo</span> <span class='hs-varid'>f</span> <span class='hs-varid'>m</span> <span class='hs-layout'>(</span><span class='hs-conid'>LZ78</span> <span class='hs-varid'>xs</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>mapTo'</span> <span class='hs-varid'>f</span> <span class='hs-varid'>m</span> <span class='hs-varid'>emptyDict</span> <span class='hs-varid'>xs</span>
+<a name="line-60"></a>
+<a name="line-61"></a><span class='hs-keyword'>instance</span> <span class='hs-conid'>Functor</span> <span class='hs-conid'>LZ78</span> <span class='hs-keyword'>where</span>
+<a name="line-62"></a>    <span class='hs-varid'>fmap</span> <span class='hs-varid'>f</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>LZ78</span> <span class='hs-varop'>.</span> <span class='hs-varid'>fmap</span> <span class='hs-layout'>(</span><span class='hs-varid'>fmap</span> <span class='hs-varid'>f</span><span class='hs-layout'>)</span> <span class='hs-varop'>.</span> <span class='hs-varid'>getLZ78</span>
+<a name="line-63"></a>
+<a name="line-64"></a><span class='hs-keyword'>instance</span> <span class='hs-conid'>Foldable</span> <span class='hs-conid'>LZ78</span> <span class='hs-keyword'>where</span>
+<a name="line-65"></a>    <span class='hs-varid'>foldMap</span> <span class='hs-varid'>f</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>getSelf</span> <span class='hs-varop'>.</span> <span class='hs-varid'>mapReduce</span> <span class='hs-varid'>f</span>
+<a name="line-66"></a>
+<a name="line-67"></a><a name="mapTo'"></a><span class='hs-definition'>mapTo'</span> <span class='hs-keyglyph'>::</span> <span class='hs-layout'>(</span><span class='hs-varid'>e</span> <span class='hs-varop'>`Reducer`</span> <span class='hs-varid'>m</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-layout'>(</span><span class='hs-varid'>a</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-varid'>e</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-varid'>m</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-conid'>Seq</span> <span class='hs-varid'>m</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-keyglyph'>[</span><span class='hs-conid'>Token</span> <span class='hs-varid'>a</span><span class='hs-keyglyph'>]</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-varid'>m</span>
+<a name="line-68"></a><span class='hs-definition'>mapTo'</span> <span class='hs-keyword'>_</span> <span class='hs-varid'>m</span> <span class='hs-keyword'>_</span> <span class='hs-conid'>[]</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>m</span>
+<a name="line-69"></a><span class='hs-definition'>mapTo'</span> <span class='hs-varid'>f</span> <span class='hs-varid'>m</span> <span class='hs-varid'>s</span> <span class='hs-layout'>(</span><span class='hs-conid'>Token</span> <span class='hs-varid'>c</span> <span class='hs-varid'>w</span><span class='hs-conop'>:</span><span class='hs-varid'>ws</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>mapTo'</span> <span class='hs-varid'>f</span> <span class='hs-layout'>(</span><span class='hs-varid'>m</span> <span class='hs-varop'>`mappend`</span> <span class='hs-varid'>v</span><span class='hs-layout'>)</span> <span class='hs-layout'>(</span><span class='hs-varid'>s</span> <span class='hs-varop'>|&gt;</span> <span class='hs-varid'>v</span><span class='hs-layout'>)</span> <span class='hs-varid'>ws</span> 
+<a name="line-70"></a>    <span class='hs-keyword'>where</span> 
+<a name="line-71"></a>        <span class='hs-varid'>v</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>Seq</span><span class='hs-varop'>.</span><span class='hs-varid'>index</span> <span class='hs-varid'>s</span> <span class='hs-varid'>w</span> <span class='hs-varop'>`mappend`</span> <span class='hs-varid'>unit</span> <span class='hs-layout'>(</span><span class='hs-varid'>f</span> <span class='hs-varid'>c</span><span class='hs-layout'>)</span>
+<a name="line-72"></a>
+<a name="line-73"></a><span class='hs-comment'>-- | a type-constrained 'reduce' operation</span>
+<a name="line-74"></a>    
+<a name="line-75"></a><a name="decode"></a><span class='hs-definition'>decode</span> <span class='hs-keyglyph'>::</span> <span class='hs-conid'>LZ78</span> <span class='hs-varid'>a</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-keyglyph'>[</span><span class='hs-varid'>a</span><span class='hs-keyglyph'>]</span>
+<a name="line-76"></a><span class='hs-definition'>decode</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>reduce</span>
+<a name="line-77"></a>
+<a name="line-78"></a><span class='hs-comment'>-- | contruct an LZ78-compressed 'Generator' using a 'Map' internally, requires an instance of Ord.</span>
+<a name="line-79"></a>
+<a name="line-80"></a><a name="encode"></a><span class='hs-definition'>encode</span> <span class='hs-keyglyph'>::</span> <span class='hs-conid'>Ord</span> <span class='hs-varid'>a</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-keyglyph'>[</span><span class='hs-varid'>a</span><span class='hs-keyglyph'>]</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-conid'>LZ78</span> <span class='hs-varid'>a</span>
+<a name="line-81"></a><span class='hs-definition'>encode</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>LZ78</span> <span class='hs-varop'>.</span> <span class='hs-varid'>encode'</span> <span class='hs-conid'>Map</span><span class='hs-varop'>.</span><span class='hs-varid'>empty</span> <span class='hs-num'>1</span> <span class='hs-num'>0</span>
+<a name="line-82"></a>
+<a name="line-83"></a><a name="encode'"></a><span class='hs-definition'>encode'</span> <span class='hs-keyglyph'>::</span> <span class='hs-conid'>Ord</span> <span class='hs-varid'>a</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>Map</span> <span class='hs-layout'>(</span><span class='hs-conid'>Token</span> <span class='hs-varid'>a</span><span class='hs-layout'>)</span> <span class='hs-conid'>Int</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-conid'>Int</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-conid'>Int</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-keyglyph'>[</span><span class='hs-varid'>a</span><span class='hs-keyglyph'>]</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-keyglyph'>[</span><span class='hs-conid'>Token</span> <span class='hs-varid'>a</span><span class='hs-keyglyph'>]</span>
+<a name="line-84"></a><span class='hs-definition'>encode'</span> <span class='hs-keyword'>_</span> <span class='hs-keyword'>_</span> <span class='hs-varid'>p</span> <span class='hs-keyglyph'>[</span><span class='hs-varid'>c</span><span class='hs-keyglyph'>]</span> <span class='hs-keyglyph'>=</span> <span class='hs-keyglyph'>[</span><span class='hs-conid'>Token</span> <span class='hs-varid'>c</span> <span class='hs-varid'>p</span><span class='hs-keyglyph'>]</span>
+<a name="line-85"></a><span class='hs-definition'>encode'</span> <span class='hs-varid'>d</span> <span class='hs-varid'>f</span> <span class='hs-varid'>p</span> <span class='hs-layout'>(</span><span class='hs-varid'>c</span><span class='hs-conop'>:</span><span class='hs-varid'>cs</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=</span> <span class='hs-keyword'>let</span> <span class='hs-varid'>t</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>Token</span> <span class='hs-varid'>c</span> <span class='hs-varid'>p</span> <span class='hs-keyword'>in</span> <span class='hs-keyword'>case</span> <span class='hs-conid'>Map</span><span class='hs-varop'>.</span><span class='hs-varid'>lookup</span> <span class='hs-varid'>t</span> <span class='hs-varid'>d</span> <span class='hs-keyword'>of</span>
+<a name="line-86"></a>    <span class='hs-conid'>Just</span> <span class='hs-varid'>p'</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-varid'>encode'</span> <span class='hs-varid'>d</span> <span class='hs-varid'>f</span> <span class='hs-varid'>p'</span> <span class='hs-varid'>cs</span>
+<a name="line-87"></a>    <span class='hs-conid'>Nothing</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-varid'>t</span> <span class='hs-conop'>:</span> <span class='hs-varid'>encode'</span> <span class='hs-layout'>(</span><span class='hs-conid'>Map</span><span class='hs-varop'>.</span><span class='hs-varid'>insert</span> <span class='hs-varid'>t</span> <span class='hs-varid'>f</span> <span class='hs-varid'>d</span><span class='hs-layout'>)</span> <span class='hs-layout'>(</span><span class='hs-varid'>succ</span> <span class='hs-varid'>f</span><span class='hs-layout'>)</span> <span class='hs-num'>0</span> <span class='hs-varid'>cs</span>
+<a name="line-88"></a><span class='hs-definition'>encode'</span> <span class='hs-keyword'>_</span> <span class='hs-keyword'>_</span> <span class='hs-keyword'>_</span> <span class='hs-conid'>[]</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>[]</span>
+<a name="line-89"></a>
+<a name="line-90"></a><span class='hs-comment'>-- | contruct an LZ78-compressed 'Generator' using a list internally, requires an instance of Eq.</span>
+<a name="line-91"></a>
+<a name="line-92"></a><a name="encodeEq"></a><span class='hs-definition'>encodeEq</span> <span class='hs-keyglyph'>::</span> <span class='hs-conid'>Eq</span> <span class='hs-varid'>a</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-keyglyph'>[</span><span class='hs-varid'>a</span><span class='hs-keyglyph'>]</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-conid'>LZ78</span> <span class='hs-varid'>a</span>
+<a name="line-93"></a><span class='hs-definition'>encodeEq</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>LZ78</span> <span class='hs-varop'>.</span> <span class='hs-varid'>encodeEq'</span> <span class='hs-conid'>[]</span> <span class='hs-num'>1</span> <span class='hs-num'>0</span>
+<a name="line-94"></a>
+<a name="line-95"></a><a name="encodeEq'"></a><span class='hs-definition'>encodeEq'</span> <span class='hs-keyglyph'>::</span> <span class='hs-conid'>Eq</span> <span class='hs-varid'>a</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-keyglyph'>[</span><span class='hs-layout'>(</span><span class='hs-conid'>Token</span> <span class='hs-varid'>a</span><span class='hs-layout'>,</span><span class='hs-conid'>Int</span><span class='hs-layout'>)</span><span class='hs-keyglyph'>]</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-conid'>Int</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-conid'>Int</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-keyglyph'>[</span><span class='hs-varid'>a</span><span class='hs-keyglyph'>]</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-keyglyph'>[</span><span class='hs-conid'>Token</span> <span class='hs-varid'>a</span><span class='hs-keyglyph'>]</span>
+<a name="line-96"></a><span class='hs-definition'>encodeEq'</span> <span class='hs-keyword'>_</span> <span class='hs-keyword'>_</span> <span class='hs-varid'>p</span> <span class='hs-keyglyph'>[</span><span class='hs-varid'>c</span><span class='hs-keyglyph'>]</span> <span class='hs-keyglyph'>=</span> <span class='hs-keyglyph'>[</span><span class='hs-conid'>Token</span> <span class='hs-varid'>c</span> <span class='hs-varid'>p</span><span class='hs-keyglyph'>]</span>
+<a name="line-97"></a><span class='hs-definition'>encodeEq'</span> <span class='hs-varid'>d</span> <span class='hs-varid'>f</span> <span class='hs-varid'>p</span> <span class='hs-layout'>(</span><span class='hs-varid'>c</span><span class='hs-conop'>:</span><span class='hs-varid'>cs</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=</span> <span class='hs-keyword'>let</span> <span class='hs-varid'>t</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>Token</span> <span class='hs-varid'>c</span> <span class='hs-varid'>p</span> <span class='hs-keyword'>in</span> <span class='hs-keyword'>case</span> <span class='hs-conid'>List</span><span class='hs-varop'>.</span><span class='hs-varid'>lookup</span> <span class='hs-varid'>t</span> <span class='hs-varid'>d</span> <span class='hs-keyword'>of</span>
+<a name="line-98"></a>    <span class='hs-conid'>Just</span> <span class='hs-varid'>p'</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-varid'>encodeEq'</span> <span class='hs-varid'>d</span> <span class='hs-varid'>f</span> <span class='hs-varid'>p'</span> <span class='hs-varid'>cs</span>
+<a name="line-99"></a>    <span class='hs-conid'>Nothing</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-varid'>t</span> <span class='hs-conop'>:</span> <span class='hs-varid'>encodeEq'</span> <span class='hs-layout'>(</span><span class='hs-layout'>(</span><span class='hs-varid'>t</span><span class='hs-layout'>,</span><span class='hs-varid'>f</span><span class='hs-layout'>)</span><span class='hs-conop'>:</span><span class='hs-varid'>d</span><span class='hs-layout'>)</span> <span class='hs-layout'>(</span><span class='hs-varid'>succ</span> <span class='hs-varid'>f</span><span class='hs-layout'>)</span> <span class='hs-num'>0</span> <span class='hs-varid'>cs</span>
+<a name="line-100"></a><span class='hs-definition'>encodeEq'</span> <span class='hs-keyword'>_</span> <span class='hs-keyword'>_</span> <span class='hs-keyword'>_</span> <span class='hs-conid'>[]</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>[]</span>
+<a name="line-101"></a>
+<a name="line-102"></a><a name="prop_decode_encode"></a><span class='hs-comment'>-- | QuickCheck property: decode . encode = id</span>
+<a name="line-103"></a><span class='hs-definition'>prop_decode_encode</span> <span class='hs-keyglyph'>::</span> <span class='hs-conid'>Ord</span> <span class='hs-varid'>a</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-keyglyph'>[</span><span class='hs-varid'>a</span><span class='hs-keyglyph'>]</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-conid'>Bool</span>
+<a name="line-104"></a><span class='hs-definition'>prop_decode_encode</span> <span class='hs-varid'>xs</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>decode</span> <span class='hs-layout'>(</span><span class='hs-varid'>encode</span> <span class='hs-varid'>xs</span><span class='hs-layout'>)</span> <span class='hs-varop'>==</span> <span class='hs-varid'>xs</span>
+<a name="line-105"></a>
+<a name="line-106"></a><a name="prop_decode_encodeEq"></a><span class='hs-comment'>-- | QuickCheck property: decode . encodeEq = id</span>
+<a name="line-107"></a><span class='hs-definition'>prop_decode_encodeEq</span> <span class='hs-keyglyph'>::</span> <span class='hs-conid'>Eq</span> <span class='hs-varid'>a</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-keyglyph'>[</span><span class='hs-varid'>a</span><span class='hs-keyglyph'>]</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-conid'>Bool</span>
+<a name="line-108"></a><span class='hs-definition'>prop_decode_encodeEq</span> <span class='hs-varid'>xs</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>decode</span> <span class='hs-layout'>(</span><span class='hs-varid'>encodeEq</span> <span class='hs-varid'>xs</span><span class='hs-layout'>)</span> <span class='hs-varop'>==</span> <span class='hs-varid'>xs</span>
}
