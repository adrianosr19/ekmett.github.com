[auto
ekmett@gmail.com**20090409090359
 Ignore-this: 9d8c078002a0408bb3246f5cbc7aa6d0
] {
addfile ./doc/html/monoids/Data-Monoid-Sugar.html
addfile ./doc/html/monoids/src/Data-Monoid-Sugar.html
addfile ./monoids-0.1.35.tar.gz
hunk ./doc/html/monoids/Data-Generator-Combinators.html 22
->monoids-0.1.33: Monoids, specialized containers and a general map/reduce framework</TD
+>monoids-0.1.35: Monoids, specialized containers and a general map/reduce framework</TD
hunk ./doc/html/monoids/Data-Generator-Compressive-LZ78.html 22
->monoids-0.1.33: Monoids, specialized containers and a general map/reduce framework</TD
+>monoids-0.1.35: Monoids, specialized containers and a general map/reduce framework</TD
hunk ./doc/html/monoids/Data-Generator-Compressive-RLE.html 22
->monoids-0.1.33: Monoids, specialized containers and a general map/reduce framework</TD
+>monoids-0.1.35: Monoids, specialized containers and a general map/reduce framework</TD
hunk ./doc/html/monoids/Data-Generator-Compressive-RLE.html 358
-><A HREF="/usr/local/share/doc/ghc/libraries/base/Data-Eq.html#t%3AEq"
->Eq</A
-> a =&gt; <A HREF="Data-Ring-Module.html#t%3AModule"
->Module</A
-> <A HREF="Data-Ring-Semi-Natural.html#t%3ANatural"
->Natural</A
-> (<A HREF="Data-Generator-Compressive-RLE.html#t%3ARLE"
->RLE</A
-> <A HREF="/usr/local/share/doc/ghc/libraries/containers/Data-Sequence.html#t%3ASeq"
->Seq</A
-> a)</TD
-></TR
-><TR
-><TD CLASS="decl"
-><A HREF="/usr/local/share/doc/ghc/libraries/base/Data-Eq.html#t%3AEq"
->Eq</A
-> a =&gt; <A HREF="Data-Ring-Module.html#t%3ARightModule"
->RightModule</A
-> <A HREF="Data-Ring-Semi-Natural.html#t%3ANatural"
->Natural</A
-> (<A HREF="Data-Generator-Compressive-RLE.html#t%3ARLE"
->RLE</A
-> <A HREF="/usr/local/share/doc/ghc/libraries/containers/Data-Sequence.html#t%3ASeq"
->Seq</A
-> a)</TD
-></TR
-><TR
-><TD CLASS="decl"
-><A HREF="/usr/local/share/doc/ghc/libraries/base/Data-Eq.html#t%3AEq"
->Eq</A
-> a =&gt; <A HREF="Data-Ring-Module.html#t%3ALeftModule"
->LeftModule</A
-> <A HREF="Data-Ring-Semi-Natural.html#t%3ANatural"
->Natural</A
-> (<A HREF="Data-Generator-Compressive-RLE.html#t%3ARLE"
->RLE</A
-> <A HREF="/usr/local/share/doc/ghc/libraries/containers/Data-Sequence.html#t%3ASeq"
->Seq</A
-> a)</TD
-></TR
-><TR
-><TD CLASS="decl"
hunk ./doc/html/monoids/Data-Generator-Free.html 22
->monoids-0.1.33: Monoids, specialized containers and a general map/reduce framework</TD
+>monoids-0.1.35: Monoids, specialized containers and a general map/reduce framework</TD
hunk ./doc/html/monoids/Data-Generator-Free.html 227
-><A HREF="Data-Ring-Module.html#t%3AModule"
->Module</A
+><A HREF="Data-Ring-Module.html#t%3ARightModule"
+>RightModule</A
hunk ./doc/html/monoids/Data-Generator-Free.html 237
-><A HREF="Data-Ring-Module.html#t%3ARightModule"
->RightModule</A
+><A HREF="Data-Ring-Module.html#t%3ALeftModule"
+>LeftModule</A
hunk ./doc/html/monoids/Data-Generator-Free.html 247
-><A HREF="Data-Ring-Module.html#t%3ALeftModule"
->LeftModule</A
+><A HREF="Data-Ring-Module.html#t%3AModule"
+>Module</A
hunk ./doc/html/monoids/Data-Generator.html 22
->monoids-0.1.33: Monoids, specialized containers and a general map/reduce framework</TD
+>monoids-0.1.35: Monoids, specialized containers and a general map/reduce framework</TD
hunk ./doc/html/monoids/Data-Generator.html 632
-> <A HREF="/usr/local/share/doc/ghc/libraries/containers/Data-IntSet.html#t%3AIntSet"
->IntSet</A
-></TD
-></TR
-><TR
-><TD CLASS="decl"
-><A HREF="Data-Generator.html#t%3AGenerator"
->Generator</A
hunk ./doc/html/monoids/Data-Generator.html 644
-> (<A HREF="/usr/local/share/doc/ghc/libraries/containers/Data-IntMap.html#t%3AIntMap"
->IntMap</A
-> v)</TD
-></TR
-><TR
-><TD CLASS="decl"
-><A HREF="Data-Generator.html#t%3AGenerator"
->Generator</A
-> (<A HREF="/usr/local/share/doc/ghc/libraries/containers/Data-Sequence.html#t%3ASeq"
->Seq</A
-> c)</TD
-></TR
-><TR
-><TD CLASS="decl"
-><A HREF="Data-Generator.html#t%3AGenerator"
->Generator</A
-> (<A HREF="/usr/local/share/doc/ghc/libraries/containers/Data-Set.html#t%3ASet"
->Set</A
-> a)</TD
-></TR
-><TR
-><TD CLASS="decl"
-><A HREF="Data-Generator.html#t%3AGenerator"
->Generator</A
hunk ./doc/html/monoids/Data-Generator.html 662
-><A HREF="/usr/local/share/doc/ghc/libraries/base/GHC-Arr.html#t%3AIx"
->Ix</A
-> i =&gt; <A HREF="Data-Generator.html#t%3AGenerator"
->Generator</A
-> (<A HREF="Data-Generator.html#t%3AValues"
->Values</A
-> (<A HREF="/usr/local/share/doc/ghc/libraries/base/GHC-Arr.html#t%3AArray"
->Array</A
-> i e))</TD
-></TR
-><TR
-><TD CLASS="decl"
-><A HREF="Data-Generator.html#t%3AGenerator"
->Generator</A
-> (<A HREF="Data-Generator.html#t%3AValues"
->Values</A
-> (<A HREF="/usr/local/share/doc/ghc/libraries/containers/Data-IntMap.html#t%3AIntMap"
->IntMap</A
-> v))</TD
-></TR
-><TR
-><TD CLASS="decl"
-><A HREF="Data-Generator.html#t%3AGenerator"
->Generator</A
-> (<A HREF="Data-Generator.html#t%3AValues"
->Values</A
-> (<A HREF="/usr/local/share/doc/ghc/libraries/containers/Data-Map.html#t%3AMap"
->Map</A
-> k v))</TD
-></TR
-><TR
-><TD CLASS="decl"
-><A HREF="/usr/local/share/doc/ghc/libraries/base/GHC-Arr.html#t%3AIx"
->Ix</A
-> i =&gt; <A HREF="Data-Generator.html#t%3AGenerator"
->Generator</A
-> (<A HREF="Data-Generator.html#t%3AKeys"
->Keys</A
-> (<A HREF="/usr/local/share/doc/ghc/libraries/base/GHC-Arr.html#t%3AArray"
->Array</A
-> i e))</TD
-></TR
-><TR
-><TD CLASS="decl"
-><A HREF="Data-Generator.html#t%3AGenerator"
->Generator</A
-> (<A HREF="Data-Generator.html#t%3AKeys"
->Keys</A
-> (<A HREF="/usr/local/share/doc/ghc/libraries/containers/Data-IntMap.html#t%3AIntMap"
->IntMap</A
-> v))</TD
-></TR
-><TR
-><TD CLASS="decl"
-><A HREF="Data-Generator.html#t%3AGenerator"
->Generator</A
-> (<A HREF="Data-Generator.html#t%3AKeys"
->Keys</A
-> (<A HREF="/usr/local/share/doc/ghc/libraries/containers/Data-Map.html#t%3AMap"
->Map</A
-> k v))</TD
-></TR
-><TR
-><TD CLASS="decl"
hunk ./doc/html/monoids/Data-Generator.html 686
-><A HREF="/usr/local/share/doc/ghc/libraries/base/GHC-Arr.html#t%3AIx"
->Ix</A
-> i =&gt; <A HREF="Data-Generator.html#t%3AGenerator"
->Generator</A
-> (<A HREF="/usr/local/share/doc/ghc/libraries/base/GHC-Arr.html#t%3AArray"
->Array</A
-> i e)</TD
-></TR
-><TR
-><TD CLASS="decl"
-><A HREF="Data-Generator.html#t%3AGenerator"
->Generator</A
-> (<A HREF="/usr/local/share/doc/ghc/libraries/containers/Data-Map.html#t%3AMap"
->Map</A
-> k v)</TD
-></TR
-><TR
-><TD CLASS="decl"
hunk ./doc/html/monoids/Data-Generator.html 874
-><TR
-><TD CLASS="section4"
-><IMG SRC="minus.gif" CLASS="coll" ONCLICK="toggle(this,'i:Keys')" ALT="show/hide"
-> Instances</TD
-></TR
-><TR
-><TD CLASS="body"
-><DIV ID="i:Keys" STYLE="display:block;"
-><TABLE CLASS="vanilla" CELLSPACING="1" CELLPADDING="0"
-><TR
-><TD CLASS="decl"
-><A HREF="/usr/local/share/doc/ghc/libraries/base/GHC-Arr.html#t%3AIx"
->Ix</A
-> i =&gt; <A HREF="Data-Generator.html#t%3AGenerator"
->Generator</A
-> (<A HREF="Data-Generator.html#t%3AKeys"
->Keys</A
-> (<A HREF="/usr/local/share/doc/ghc/libraries/base/GHC-Arr.html#t%3AArray"
->Array</A
-> i e))</TD
-></TR
-><TR
-><TD CLASS="decl"
-><A HREF="Data-Generator.html#t%3AGenerator"
->Generator</A
-> (<A HREF="Data-Generator.html#t%3AKeys"
->Keys</A
-> (<A HREF="/usr/local/share/doc/ghc/libraries/containers/Data-IntMap.html#t%3AIntMap"
->IntMap</A
-> v))</TD
-></TR
-><TR
-><TD CLASS="decl"
-><A HREF="Data-Generator.html#t%3AGenerator"
->Generator</A
-> (<A HREF="Data-Generator.html#t%3AKeys"
->Keys</A
-> (<A HREF="/usr/local/share/doc/ghc/libraries/containers/Data-Map.html#t%3AMap"
->Map</A
-> k v))</TD
-></TR
-></TABLE
-></DIV
-></TD
-></TR
hunk ./doc/html/monoids/Data-Generator.html 949
-><TR
-><TD CLASS="section4"
-><IMG SRC="minus.gif" CLASS="coll" ONCLICK="toggle(this,'i:Values')" ALT="show/hide"
-> Instances</TD
-></TR
-><TR
-><TD CLASS="body"
-><DIV ID="i:Values" STYLE="display:block;"
-><TABLE CLASS="vanilla" CELLSPACING="1" CELLPADDING="0"
-><TR
-><TD CLASS="decl"
-><A HREF="/usr/local/share/doc/ghc/libraries/base/GHC-Arr.html#t%3AIx"
->Ix</A
-> i =&gt; <A HREF="Data-Generator.html#t%3AGenerator"
->Generator</A
-> (<A HREF="Data-Generator.html#t%3AValues"
->Values</A
-> (<A HREF="/usr/local/share/doc/ghc/libraries/base/GHC-Arr.html#t%3AArray"
->Array</A
-> i e))</TD
-></TR
-><TR
-><TD CLASS="decl"
-><A HREF="Data-Generator.html#t%3AGenerator"
->Generator</A
-> (<A HREF="Data-Generator.html#t%3AValues"
->Values</A
-> (<A HREF="/usr/local/share/doc/ghc/libraries/containers/Data-IntMap.html#t%3AIntMap"
->IntMap</A
-> v))</TD
-></TR
-><TR
-><TD CLASS="decl"
-><A HREF="Data-Generator.html#t%3AGenerator"
->Generator</A
-> (<A HREF="Data-Generator.html#t%3AValues"
->Values</A
-> (<A HREF="/usr/local/share/doc/ghc/libraries/containers/Data-Map.html#t%3AMap"
->Map</A
-> k v))</TD
-></TR
-></TABLE
-></DIV
-></TD
-></TR
hunk ./doc/html/monoids/Data-Group-Combinators.html 22
->monoids-0.1.33: Monoids, specialized containers and a general map/reduce framework</TD
+>monoids-0.1.35: Monoids, specialized containers and a general map/reduce framework</TD
hunk ./doc/html/monoids/Data-Group-Sugar.html 22
->monoids-0.1.33: Monoids, specialized containers and a general map/reduce framework</TD
+>monoids-0.1.35: Monoids, specialized containers and a general map/reduce framework</TD
hunk ./doc/html/monoids/Data-Group-Sugar.html 89
-> import Prelude hiding ((-), (+), negate, subtract)
+> import Prelude hiding ((-), (+), (*), (/), (^), (^^), negate, subtract, recip)
hunk ./doc/html/monoids/Data-Group-Sugar.html 112
->module <A HREF="Data-Monoid-Additive-Sugar.html"
->Data.Monoid.Additive.Sugar</A
+>module <A HREF="Data-Monoid-Sugar.html"
+>Data.Monoid.Sugar</A
hunk ./doc/html/monoids/Data-Group-Sugar.html 203
+><TD CLASS="topdecl"
+><TABLE CLASS="declbar"
+><TR
+><TD CLASS="declname"
+><A NAME="v%3A%2F"
+></A
+><B
+>(/)</B
+> :: <A HREF="Data-Group.html#t%3AMultiplicativeGroup"
+>MultiplicativeGroup</A
+> g =&gt; g -&gt; g -&gt; g</TD
+><TD CLASS="declbut"
+><A HREF="src/Data-Group-Sugar.html#%2F"
+>Source</A
+></TD
+></TR
+></TABLE
+></TD
+></TR
+><TR
+><TD CLASS="s15"
+></TD
+></TR
+><TR
+><TD CLASS="topdecl"
+><TABLE CLASS="declbar"
+><TR
+><TD CLASS="declname"
+><A NAME="v%3A.%5C."
+></A
+><B
+>(.\.)</B
+> :: <A HREF="Data-Group.html#t%3AMultiplicativeGroup"
+>MultiplicativeGroup</A
+> g =&gt; g -&gt; g -&gt; g</TD
+><TD CLASS="declbut"
+><A HREF="src/Data-Group-Sugar.html#.%5C."
+>Source</A
+></TD
+></TR
+></TABLE
+></TD
+></TR
+><TR
+><TD CLASS="s15"
+></TD
+></TR
+><TR
+><TD CLASS="topdecl"
+><TABLE CLASS="declbar"
+><TR
+><TD CLASS="declname"
+><A NAME="v%3A%5E%5E"
+></A
+><B
+>(^^)</B
+> :: <A HREF="Data-Group.html#t%3AMultiplicativeGroup"
+>MultiplicativeGroup</A
+> g =&gt; g -&gt; Integer -&gt; g</TD
+><TD CLASS="declbut"
+><A HREF="src/Data-Group-Sugar.html#%5E%5E"
+>Source</A
+></TD
+></TR
+></TABLE
+></TD
+></TR
+><TR
+><TD CLASS="s15"
+></TD
+></TR
+><TR
+><TD CLASS="topdecl"
+><TABLE CLASS="declbar"
+><TR
+><TD CLASS="declname"
+><A NAME="v%3Arecip"
+></A
+><B
+>recip</B
+> :: <A HREF="Data-Group.html#t%3AMultiplicativeGroup"
+>MultiplicativeGroup</A
+> g =&gt; g -&gt; g</TD
+><TD CLASS="declbut"
+><A HREF="src/Data-Group-Sugar.html#recip"
+>Source</A
+></TD
+></TR
+></TABLE
+></TD
+></TR
+><TR
+><TD CLASS="s15"
+></TD
+></TR
+><TR
hunk ./doc/html/monoids/Data-Group.html 22
->monoids-0.1.33: Monoids, specialized containers and a general map/reduce framework</TD
+>monoids-0.1.35: Monoids, specialized containers and a general map/reduce framework</TD
hunk ./doc/html/monoids/Data-Group.html 111
->module <A HREF="Data-Monoid-Additive.html"
->Data.Monoid.Additive</A
+>module <A HREF="Data-Monoid-Multiplicative.html"
+>Data.Monoid.Multiplicative</A
hunk ./doc/html/monoids/Data-Group.html 191
+><TR
+><TD CLASS="s8"
+></TD
+></TR
+><TR
+><TD CLASS="decl"
+><SPAN CLASS="keyword"
+>class</SPAN
+> <A HREF="Data-Monoid-Multiplicative.html#t%3AMultiplicative"
+>Multiplicative</A
+> g =&gt; <A HREF="#t%3AMultiplicativeGroup"
+>MultiplicativeGroup</A
+> g  <SPAN CLASS="keyword"
+>where</SPAN
+></TD
+></TR
+><TR
+><TD CLASS="body"
+><TABLE CLASS="vanilla" CELLSPACING="0" CELLPADDING="0"
+><TR
+><TD CLASS="decl"
+><A HREF="#v%3Aover"
+>over</A
+> :: g -&gt; g -&gt; g</TD
+></TR
+><TR
+><TD CLASS="decl"
+><A HREF="#v%3Aunder"
+>under</A
+> :: g -&gt; g -&gt; g</TD
+></TR
+><TR
+><TD CLASS="decl"
+><A HREF="#v%3Agrecip"
+>grecip</A
+> :: g -&gt; g</TD
+></TR
+></TABLE
+></TD
+></TR
+><TR
+><TD CLASS="s8"
+></TD
+></TR
+><TR
+><TD CLASS="decl"
+><A HREF="#v%3Aover"
+>over</A
+> :: <A HREF="Data-Group.html#t%3AMultiplicativeGroup"
+>MultiplicativeGroup</A
+> g =&gt; g -&gt; g -&gt; g</TD
+></TR
+><TR
+><TD CLASS="s8"
+></TD
+></TR
+><TR
+><TD CLASS="decl"
+><A HREF="#v%3Aunder"
+>under</A
+> :: <A HREF="Data-Group.html#t%3AMultiplicativeGroup"
+>MultiplicativeGroup</A
+> g =&gt; g -&gt; g -&gt; g</TD
+></TR
+><TR
+><TD CLASS="s8"
+></TD
+></TR
+><TR
+><TD CLASS="decl"
+><A HREF="#v%3Agrecip"
+>grecip</A
+> :: <A HREF="Data-Group.html#t%3AMultiplicativeGroup"
+>MultiplicativeGroup</A
+> g =&gt; g -&gt; g</TD
+></TR
hunk ./doc/html/monoids/Data-Group.html 284
->module <A HREF="Data-Monoid-Additive.html"
->Data.Monoid.Additive</A
+>module <A HREF="Data-Monoid-Multiplicative.html"
+>Data.Monoid.Multiplicative</A
hunk ./doc/html/monoids/Data-Group.html 425
-> <A HREF="Data-Ring-Boolean.html#t%3ABoolRing"
->BoolRing</A
-></TD
-></TR
-><TR
-><TD CLASS="decl"
-><A HREF="Data-Group.html#t%3AGroup"
->Group</A
hunk ./doc/html/monoids/Data-Group.html 473
+><A HREF="Data-Group.html#t%3AMultiplicativeGroup"
+>MultiplicativeGroup</A
+> g =&gt; <A HREF="Data-Group.html#t%3AGroup"
+>Group</A
+> (<A HREF="Data-Monoid-Multiplicative.html#t%3ALog"
+>Log</A
+> g)</TD
+></TR
+><TR
+><TD CLASS="decl"
hunk ./doc/html/monoids/Data-Group.html 493
-><A HREF="Data-Group.html#t%3AGroup"
->Group</A
+><A HREF="/usr/local/share/doc/ghc/libraries/base/Data-Bits.html#t%3ABits"
+>Bits</A
hunk ./doc/html/monoids/Data-Group.html 497
-> (<A HREF="Data-Monoid-Reducer.html#t%3AReducedBy"
->ReducedBy</A
-> a s)</TD
+> (<A HREF="Data-Ring-Boolean.html#t%3ABoolean"
+>Boolean</A
+> a)</TD
hunk ./doc/html/monoids/Data-Group.html 503
->(<A HREF="Data-Ring-ModularArithmetic.html#t%3AModular"
->Modular</A
-> s a, <A HREF="/usr/local/share/doc/ghc/libraries/base/Prelude.html#t%3AIntegral"
->Integral</A
-> a) =&gt; <A HREF="Data-Group.html#t%3AGroup"
+><A HREF="Data-Group.html#t%3AGroup"
hunk ./doc/html/monoids/Data-Group.html 505
-> (<A HREF="Data-Ring-ModularArithmetic.html#t%3AMod"
->Mod</A
+> a =&gt; <A HREF="Data-Group.html#t%3AGroup"
+>Group</A
+> (<A HREF="Data-Monoid-Reducer.html#t%3AReducedBy"
+>ReducedBy</A
hunk ./doc/html/monoids/Data-Group.html 537
+>(<A HREF="Data-Ring-ModularArithmetic.html#t%3AModular"
+>Modular</A
+> s a, <A HREF="/usr/local/share/doc/ghc/libraries/base/Prelude.html#t%3AIntegral"
+>Integral</A
+> a) =&gt; <A HREF="Data-Group.html#t%3AGroup"
+>Group</A
+> (<A HREF="Data-Ring-ModularArithmetic.html#t%3AMod"
+>Mod</A
+> a s)</TD
+></TR
+><TR
+><TD CLASS="decl"
hunk ./doc/html/monoids/Data-Group.html 551
-> r, <A HREF="Data-Ring-Module.html#t%3AModule"
->Module</A
+> r, <A HREF="Data-Ring-Module.html#t%3ABimodule"
+>Bimodule</A
hunk ./doc/html/monoids/Data-Group.html 645
+><TD CLASS="topdecl"
+><TABLE CLASS="declbar"
+><TR
+><TD CLASS="declname"
+><SPAN CLASS="keyword"
+>class</SPAN
+> <A HREF="Data-Monoid-Multiplicative.html#t%3AMultiplicative"
+>Multiplicative</A
+> g =&gt; <A NAME="t%3AMultiplicativeGroup"
+></A
+><B
+>MultiplicativeGroup</B
+> g  <SPAN CLASS="keyword"
+>where</SPAN
+></TD
+><TD CLASS="declbut"
+><A HREF="src/Data-Group.html#MultiplicativeGroup"
+>Source</A
+></TD
+></TR
+></TABLE
+></TD
+></TR
+><TR
+><TD CLASS="body"
+><TABLE CLASS="vanilla" CELLSPACING="0" CELLPADDING="0"
+><TR
+><TD CLASS="ndoc"
+>Minimal definition over or grecip
+</TD
+></TR
+><TR
+><TD CLASS="s8"
+></TD
+></TR
+><TR
+><TD CLASS="section4"
+>Methods</TD
+></TR
+><TR
+><TD CLASS="body"
+><TABLE CLASS="vanilla" CELLSPACING="0" CELLPADDING="0"
+><TR
+><TD CLASS="topdecl"
+><TABLE CLASS="declbar"
+><TR
+><TD CLASS="declname"
+><A NAME="v%3Aover"
+></A
+><B
+>over</B
+> :: g -&gt; g -&gt; g</TD
+><TD CLASS="declbut"
+><A HREF="src/Data-Group.html#over"
+>Source</A
+></TD
+></TR
+></TABLE
+></TD
+></TR
+><TR
+><TD CLASS="doc"
+><PRE
+>x / y</PRE
+></TD
+></TR
+><TR
+><TD CLASS="s8"
+></TD
+></TR
+><TR
+><TD CLASS="topdecl"
+><TABLE CLASS="declbar"
+><TR
+><TD CLASS="declname"
+><A NAME="v%3Aunder"
+></A
+><B
+>under</B
+> :: g -&gt; g -&gt; g</TD
+><TD CLASS="declbut"
+><A HREF="src/Data-Group.html#under"
+>Source</A
+></TD
+></TR
+></TABLE
+></TD
+></TR
+><TR
+><TD CLASS="doc"
+><PRE
+>x  y</PRE
+></TD
+></TR
+><TR
+><TD CLASS="s8"
+></TD
+></TR
+><TR
+><TD CLASS="topdecl"
+><TABLE CLASS="declbar"
+><TR
+><TD CLASS="declname"
+><A NAME="v%3Agrecip"
+></A
+><B
+>grecip</B
+> :: g -&gt; g</TD
+><TD CLASS="declbut"
+><A HREF="src/Data-Group.html#grecip"
+>Source</A
+></TD
+></TR
+></TABLE
+></TD
+></TR
+></TABLE
+></TD
+></TR
+><TR
+><TD CLASS="s8"
+></TD
+></TR
+><TR
+><TD CLASS="section4"
+><IMG SRC="minus.gif" CLASS="coll" ONCLICK="toggle(this,'i:MultiplicativeGroup')" ALT="show/hide"
+> Instances</TD
+></TR
+><TR
+><TD CLASS="body"
+><DIV ID="i:MultiplicativeGroup" STYLE="display:block;"
+><TABLE CLASS="vanilla" CELLSPACING="1" CELLPADDING="0"
+><TR
+><TD CLASS="decl"
+><A HREF="Data-Group.html#t%3AMultiplicativeGroup"
+>MultiplicativeGroup</A
+> a =&gt; <A HREF="Data-Group.html#t%3AMultiplicativeGroup"
+>MultiplicativeGroup</A
+> (<A HREF="/usr/local/share/doc/ghc/libraries/base/Data-Monoid.html#t%3ADual"
+>Dual</A
+> a)</TD
+></TR
+><TR
+><TD CLASS="decl"
+><A HREF="Data-Group.html#t%3AMultiplicativeGroup"
+>MultiplicativeGroup</A
+> g =&gt; <A HREF="Data-Group.html#t%3AMultiplicativeGroup"
+>MultiplicativeGroup</A
+> (<A HREF="Data-Monoid-Self.html#t%3ASelf"
+>Self</A
+> g)</TD
+></TR
+><TR
+><TD CLASS="decl"
+><A HREF="Data-Group.html#t%3AMultiplicativeGroup"
+>MultiplicativeGroup</A
+> g =&gt; <A HREF="Data-Group.html#t%3AMultiplicativeGroup"
+>MultiplicativeGroup</A
+> (<A HREF="Data-Monoid-FromString.html#t%3AFromString"
+>FromString</A
+> g)</TD
+></TR
+><TR
+><TD CLASS="decl"
+><A HREF="Data-Group.html#t%3AGroup"
+>Group</A
+> g =&gt; <A HREF="Data-Group.html#t%3AMultiplicativeGroup"
+>MultiplicativeGroup</A
+> (<A HREF="Data-Monoid-Multiplicative.html#t%3AExp"
+>Exp</A
+> g)</TD
+></TR
+><TR
+><TD CLASS="decl"
+><A HREF="Data-Group.html#t%3AMultiplicativeGroup"
+>MultiplicativeGroup</A
+> g =&gt; <A HREF="Data-Group.html#t%3AMultiplicativeGroup"
+>MultiplicativeGroup</A
+> (<A HREF="Data-Monoid-Reducer.html#t%3AReducedBy"
+>ReducedBy</A
+> g s)</TD
+></TR
+></TABLE
+></DIV
+></TD
+></TR
+></TABLE
+></TD
+></TR
+><TR
+><TD CLASS="s15"
+></TD
+></TR
+><TR
+><TD CLASS="topdecl"
+><TABLE CLASS="declbar"
+><TR
+><TD CLASS="declname"
+><A NAME="v%3Aover"
+></A
+><B
+>over</B
+> :: <A HREF="Data-Group.html#t%3AMultiplicativeGroup"
+>MultiplicativeGroup</A
+> g =&gt; g -&gt; g -&gt; g</TD
+><TD CLASS="declbut"
+><A HREF="src/Data-Group.html#over"
+>Source</A
+></TD
+></TR
+></TABLE
+></TD
+></TR
+><TR
+><TD CLASS="doc"
+><PRE
+>x / y</PRE
+></TD
+></TR
+><TR
+><TD CLASS="s15"
+></TD
+></TR
+><TR
+><TD CLASS="topdecl"
+><TABLE CLASS="declbar"
+><TR
+><TD CLASS="declname"
+><A NAME="v%3Aunder"
+></A
+><B
+>under</B
+> :: <A HREF="Data-Group.html#t%3AMultiplicativeGroup"
+>MultiplicativeGroup</A
+> g =&gt; g -&gt; g -&gt; g</TD
+><TD CLASS="declbut"
+><A HREF="src/Data-Group.html#under"
+>Source</A
+></TD
+></TR
+></TABLE
+></TD
+></TR
+><TR
+><TD CLASS="doc"
+><PRE
+>x  y</PRE
+></TD
+></TR
+><TR
+><TD CLASS="s15"
+></TD
+></TR
+><TR
+><TD CLASS="topdecl"
+><TABLE CLASS="declbar"
+><TR
+><TD CLASS="declname"
+><A NAME="v%3Agrecip"
+></A
+><B
+>grecip</B
+> :: <A HREF="Data-Group.html#t%3AMultiplicativeGroup"
+>MultiplicativeGroup</A
+> g =&gt; g -&gt; g</TD
+><TD CLASS="declbut"
+><A HREF="src/Data-Group.html#grecip"
+>Source</A
+></TD
+></TR
+></TABLE
+></TD
+></TR
+><TR
+><TD CLASS="s15"
+></TD
+></TR
+><TR
hunk ./doc/html/monoids/Data-Monoid-Additive-Sugar.html 22
->monoids-0.1.33: Monoids, specialized containers and a general map/reduce framework</TD
+>monoids-0.1.35: Monoids, specialized containers and a general map/reduce framework</TD
hunk ./doc/html/monoids/Data-Monoid-Additive.html 22
->monoids-0.1.33: Monoids, specialized containers and a general map/reduce framework</TD
+>monoids-0.1.35: Monoids, specialized containers and a general map/reduce framework</TD
hunk ./doc/html/monoids/Data-Monoid-Applicative.html 22
->monoids-0.1.33: Monoids, specialized containers and a general map/reduce framework</TD
+>monoids-0.1.35: Monoids, specialized containers and a general map/reduce framework</TD
hunk ./doc/html/monoids/Data-Monoid-Applicative.html 121
->module <A HREF="Data-Ring-Semi-Near.html"
->Data.Ring.Semi.Near</A
-></TD
-></TR
-><TR
-><TD CLASS="s8"
-></TD
-></TR
-><TR
-><TD CLASS="decl"
hunk ./doc/html/monoids/Data-Monoid-Applicative.html 236
->module <A HREF="Data-Ring-Semi-Near.html"
->Data.Ring.Semi.Near</A
-></TD
-></TR
-><TR
-><TD CLASS="s15"
-></TD
-></TR
-><TR
-><TD CLASS="decl"
hunk ./doc/html/monoids/Data-Monoid-Applicative.html 333
-> f =&gt; <A HREF="Data-Ring-Module.html#t%3AModule"
->Module</A
+> f =&gt; <A HREF="Data-Ring-Module.html#t%3ARightModule"
+>RightModule</A
hunk ./doc/html/monoids/Data-Monoid-Applicative.html 345
-> f =&gt; <A HREF="Data-Ring-Module.html#t%3ARightModule"
->RightModule</A
+> f =&gt; <A HREF="Data-Ring-Module.html#t%3ALeftModule"
+>LeftModule</A
hunk ./doc/html/monoids/Data-Monoid-Applicative.html 357
-> f =&gt; <A HREF="Data-Ring-Module.html#t%3ALeftModule"
->LeftModule</A
+> f =&gt; <A HREF="Data-Ring-Module.html#t%3AModule"
+>Module</A
hunk ./doc/html/monoids/Data-Monoid-Applicative.html 456
-><A HREF="Data-Ring-Semi-Near.html#t%3ARightSemiNearRing"
+><A HREF="Data-Ring.html#t%3ARightSemiNearRing"
hunk ./doc/html/monoids/Data-Monoid-Applicative.html 512
-> f =&gt; <A HREF="Data-Ring-Module.html#t%3AModule"
->Module</A
+> f =&gt; <A HREF="Data-Ring-Module.html#t%3ARightModule"
+>RightModule</A
hunk ./doc/html/monoids/Data-Monoid-Applicative.html 524
-> f =&gt; <A HREF="Data-Ring-Module.html#t%3ARightModule"
->RightModule</A
+> f =&gt; <A HREF="Data-Ring-Module.html#t%3ALeftModule"
+>LeftModule</A
hunk ./doc/html/monoids/Data-Monoid-Applicative.html 536
-> f =&gt; <A HREF="Data-Ring-Module.html#t%3ALeftModule"
->LeftModule</A
+> f =&gt; <A HREF="Data-Ring-Module.html#t%3AModule"
+>Module</A
hunk ./doc/html/monoids/Data-Monoid-Applicative.html 666
-> a) =&gt; <A HREF="Data-Ring-Semi-Near.html#t%3ARightSemiNearRing"
+> a) =&gt; <A HREF="Data-Ring.html#t%3ARightSemiNearRing"
hunk ./doc/html/monoids/Data-Monoid-Applicative.html 678
-> a) =&gt; <A HREF="Data-Ring-Semi-Near.html#t%3ARingoid"
+> a) =&gt; <A HREF="Data-Ring.html#t%3ARingoid"
hunk ./doc/html/monoids/Data-Monoid-Applicative.html 808
->(<A HREF="Data-Ring-Module.html#t%3AModule"
->Module</A
-> r m, <A HREF="/usr/local/share/doc/ghc/libraries/base/Control-Applicative.html#t%3AApplicative"
->Applicative</A
-> f) =&gt; <A HREF="Data-Ring-Module.html#t%3AModule"
->Module</A
-> r (<A HREF="Data-Monoid-Applicative.html#t%3AApp"
->App</A
-> f m)</TD
-></TR
-><TR
-><TD CLASS="decl"
hunk ./doc/html/monoids/Data-Monoid-Applicative.html 832
+>(<A HREF="Data-Ring-Module.html#t%3AModule"
+>Module</A
+> r m, <A HREF="/usr/local/share/doc/ghc/libraries/base/Control-Applicative.html#t%3AApplicative"
+>Applicative</A
+> f) =&gt; <A HREF="Data-Ring-Module.html#t%3AModule"
+>Module</A
+> r (<A HREF="Data-Monoid-Applicative.html#t%3AApp"
+>App</A
+> f m)</TD
+></TR
+><TR
+><TD CLASS="decl"
hunk ./doc/html/monoids/Data-Monoid-Categorical.html 22
->monoids-0.1.33: Monoids, specialized containers and a general map/reduce framework</TD
+>monoids-0.1.35: Monoids, specialized containers and a general map/reduce framework</TD
hunk ./doc/html/monoids/Data-Monoid-Categorical.html 319
-> k =&gt; <A HREF="Data-Ring-Module.html#t%3AModule"
->Module</A
+> k =&gt; <A HREF="Data-Ring-Module.html#t%3ARightModule"
+>RightModule</A
hunk ./doc/html/monoids/Data-Monoid-Categorical.html 331
-> k =&gt; <A HREF="Data-Ring-Module.html#t%3ARightModule"
->RightModule</A
+> k =&gt; <A HREF="Data-Ring-Module.html#t%3ALeftModule"
+>LeftModule</A
hunk ./doc/html/monoids/Data-Monoid-Categorical.html 343
-> k =&gt; <A HREF="Data-Ring-Module.html#t%3ALeftModule"
->LeftModule</A
+> k =&gt; <A HREF="Data-Ring-Module.html#t%3AModule"
+>Module</A
hunk ./doc/html/monoids/Data-Monoid-Categorical.html 442
-> m =&gt; <A HREF="Data-Ring-Module.html#t%3AModule"
->Module</A
+> m =&gt; <A HREF="Data-Ring-Module.html#t%3ARightModule"
+>RightModule</A
hunk ./doc/html/monoids/Data-Monoid-Categorical.html 454
-> m =&gt; <A HREF="Data-Ring-Module.html#t%3ARightModule"
->RightModule</A
+> m =&gt; <A HREF="Data-Ring-Module.html#t%3ALeftModule"
+>LeftModule</A
hunk ./doc/html/monoids/Data-Monoid-Categorical.html 466
-> m =&gt; <A HREF="Data-Ring-Module.html#t%3ALeftModule"
->LeftModule</A
+> m =&gt; <A HREF="Data-Ring-Module.html#t%3AModule"
+>Module</A
hunk ./doc/html/monoids/Data-Monoid-Combinators.html 22
->monoids-0.1.33: Monoids, specialized containers and a general map/reduce framework</TD
+>monoids-0.1.35: Monoids, specialized containers and a general map/reduce framework</TD
hunk ./doc/html/monoids/Data-Monoid-FromString.html 22
->monoids-0.1.33: Monoids, specialized containers and a general map/reduce framework</TD
+>monoids-0.1.35: Monoids, specialized containers and a general map/reduce framework</TD
hunk ./doc/html/monoids/Data-Monoid-FromString.html 231
-> m =&gt; <A HREF="Data-Ring-Module.html#t%3AModule"
->Module</A
+> m =&gt; <A HREF="Data-Ring-Module.html#t%3ARightModule"
+>RightModule</A
hunk ./doc/html/monoids/Data-Monoid-FromString.html 243
-> m =&gt; <A HREF="Data-Ring-Module.html#t%3ARightModule"
->RightModule</A
+> m =&gt; <A HREF="Data-Ring-Module.html#t%3ALeftModule"
+>LeftModule</A
hunk ./doc/html/monoids/Data-Monoid-FromString.html 255
-> m =&gt; <A HREF="Data-Ring-Module.html#t%3ALeftModule"
->LeftModule</A
+> m =&gt; <A HREF="Data-Ring-Module.html#t%3AModule"
+>Module</A
hunk ./doc/html/monoids/Data-Monoid-FromString.html 297
-><A HREF="Data-Ring-Semi-Near.html#t%3ARightSemiNearRing"
->RightSemiNearRing</A
-> m =&gt; <A HREF="Data-Ring-Semi-Near.html#t%3ARightSemiNearRing"
->RightSemiNearRing</A
+><A HREF="Data-Group.html#t%3AMultiplicativeGroup"
+>MultiplicativeGroup</A
+> g =&gt; <A HREF="Data-Group.html#t%3AMultiplicativeGroup"
+>MultiplicativeGroup</A
hunk ./doc/html/monoids/Data-Monoid-FromString.html 303
-> m)</TD
+> g)</TD
hunk ./doc/html/monoids/Data-Monoid-FromString.html 307
-><A HREF="Data-Ring-Semi-Near.html#t%3ALeftSemiNearRing"
->LeftSemiNearRing</A
-> m =&gt; <A HREF="Data-Ring-Semi-Near.html#t%3ALeftSemiNearRing"
->LeftSemiNearRing</A
+><A HREF="Data-Group.html#t%3AGroup"
+>Group</A
+> a =&gt; <A HREF="Data-Group.html#t%3AGroup"
+>Group</A
hunk ./doc/html/monoids/Data-Monoid-FromString.html 313
-> m)</TD
+> a)</TD
hunk ./doc/html/monoids/Data-Monoid-FromString.html 317
-><A HREF="Data-Ring-Semi-Near.html#t%3ARingoid"
->Ringoid</A
-> m =&gt; <A HREF="Data-Ring-Semi-Near.html#t%3ARingoid"
->Ringoid</A
+><A HREF="Data-Ring.html#t%3AField"
+>Field</A
+> f =&gt; <A HREF="Data-Ring.html#t%3AField"
+>Field</A
hunk ./doc/html/monoids/Data-Monoid-FromString.html 323
-> m)</TD
+> f)</TD
hunk ./doc/html/monoids/Data-Monoid-FromString.html 327
-><A HREF="Data-Ring-Semi.html#t%3ASemiRing"
->SemiRing</A
-> r =&gt; <A HREF="Data-Ring-Semi.html#t%3ASemiRing"
->SemiRing</A
+><A HREF="Data-Ring.html#t%3ADivisionRing"
+>DivisionRing</A
+> r =&gt; <A HREF="Data-Ring.html#t%3ADivisionRing"
+>DivisionRing</A
hunk ./doc/html/monoids/Data-Monoid-FromString.html 337
-><A HREF="Data-Group.html#t%3AGroup"
->Group</A
-> a =&gt; <A HREF="Data-Group.html#t%3AGroup"
->Group</A
+><A HREF="Data-Ring.html#t%3ARing"
+>Ring</A
+> r =&gt; <A HREF="Data-Ring.html#t%3ARing"
+>Ring</A
hunk ./doc/html/monoids/Data-Monoid-FromString.html 343
-> a)</TD
+> r)</TD
hunk ./doc/html/monoids/Data-Monoid-FromString.html 347
-><A HREF="Data-Group-Multiplicative.html#t%3AMultiplicativeGroup"
->MultiplicativeGroup</A
-> g =&gt; <A HREF="Data-Group-Multiplicative.html#t%3AMultiplicativeGroup"
->MultiplicativeGroup</A
+><A HREF="Data-Ring.html#t%3ASemiRing"
+>SemiRing</A
+> r =&gt; <A HREF="Data-Ring.html#t%3ASemiRing"
+>SemiRing</A
hunk ./doc/html/monoids/Data-Monoid-FromString.html 353
-> g)</TD
+> r)</TD
hunk ./doc/html/monoids/Data-Monoid-FromString.html 357
-><A HREF="Data-Ring.html#t%3ARing"
->Ring</A
-> r =&gt; <A HREF="Data-Ring.html#t%3ARing"
->Ring</A
+><A HREF="Data-Ring.html#t%3ARightSemiNearRing"
+>RightSemiNearRing</A
+> m =&gt; <A HREF="Data-Ring.html#t%3ARightSemiNearRing"
+>RightSemiNearRing</A
hunk ./doc/html/monoids/Data-Monoid-FromString.html 363
-> r)</TD
+> m)</TD
hunk ./doc/html/monoids/Data-Monoid-FromString.html 367
-><A HREF="Data-Field.html#t%3AField"
->Field</A
-> f =&gt; <A HREF="Data-Field.html#t%3AField"
->Field</A
+><A HREF="Data-Ring.html#t%3ALeftSemiNearRing"
+>LeftSemiNearRing</A
+> m =&gt; <A HREF="Data-Ring.html#t%3ALeftSemiNearRing"
+>LeftSemiNearRing</A
hunk ./doc/html/monoids/Data-Monoid-FromString.html 373
-> f)</TD
+> m)</TD
+></TR
+><TR
+><TD CLASS="decl"
+><A HREF="Data-Ring.html#t%3ARingoid"
+>Ringoid</A
+> m =&gt; <A HREF="Data-Ring.html#t%3ARingoid"
+>Ringoid</A
+> (<A HREF="Data-Monoid-FromString.html#t%3AFromString"
+>FromString</A
+> m)</TD
hunk ./doc/html/monoids/Data-Monoid-Instances.html 22
->monoids-0.1.33: Monoids, specialized containers and a general map/reduce framework</TD
+>monoids-0.1.35: Monoids, specialized containers and a general map/reduce framework</TD
hunk ./doc/html/monoids/Data-Monoid-Instances.html 157
+><LI
+> <TT
+><A HREF="/usr/local/share/doc/ghc/libraries/base/Prelude.html#t%3ANum"
+>Num</A
+></TT
+> and <TT
+><A HREF="/usr/local/share/doc/ghc/libraries/base/Data-Bits.html#t%3ABits"
+>Bits</A
+></TT
+> instances for <TT
+><A HREF="/usr/local/share/doc/ghc/libraries/ghc-prim/GHC-Bool.html#t%3ABool"
+>Bool</A
+></TT
+> as a Boolean <TT
+><A HREF="/usr/local/share/doc/ghc/libraries/base/Data-Bool.html#v%3A%26%26"
+>&amp;&amp;</A
+></TT
+>/<TT
+><A HREF="/usr/local/share/doc/ghc/libraries/base/Data-Bool.html#v%3A%7C%7C"
+>||</A
+></TT
+> SemiRing
+</LI
hunk ./doc/html/monoids/Data-Monoid-Lexical-SourcePosition.html 22
->monoids-0.1.33: Monoids, specialized containers and a general map/reduce framework</TD
+>monoids-0.1.35: Monoids, specialized containers and a general map/reduce framework</TD
hunk ./doc/html/monoids/Data-Monoid-Lexical-SourcePosition.html 492
-><A HREF="Data-Ring-Module.html#t%3AModule"
->Module</A
+><A HREF="Data-Ring-Module.html#t%3ARightModule"
+>RightModule</A
hunk ./doc/html/monoids/Data-Monoid-Lexical-SourcePosition.html 502
-><A HREF="Data-Ring-Module.html#t%3ARightModule"
->RightModule</A
+><A HREF="Data-Ring-Module.html#t%3ALeftModule"
+>LeftModule</A
hunk ./doc/html/monoids/Data-Monoid-Lexical-SourcePosition.html 512
-><A HREF="Data-Ring-Module.html#t%3ALeftModule"
->LeftModule</A
+><A HREF="Data-Ring-Module.html#t%3AModule"
+>Module</A
hunk ./doc/html/monoids/Data-Monoid-Lexical-UTF8-Decoder.html 22
->monoids-0.1.33: Monoids, specialized containers and a general map/reduce framework</TD
+>monoids-0.1.35: Monoids, specialized containers and a general map/reduce framework</TD
hunk ./doc/html/monoids/Data-Monoid-Lexical-UTF8-Decoder.html 241
-> m =&gt; <A HREF="Data-Ring-Module.html#t%3AModule"
->Module</A
+> m =&gt; <A HREF="Data-Ring-Module.html#t%3ARightModule"
+>RightModule</A
hunk ./doc/html/monoids/Data-Monoid-Lexical-UTF8-Decoder.html 253
-> m =&gt; <A HREF="Data-Ring-Module.html#t%3ARightModule"
->RightModule</A
+> m =&gt; <A HREF="Data-Ring-Module.html#t%3ALeftModule"
+>LeftModule</A
hunk ./doc/html/monoids/Data-Monoid-Lexical-UTF8-Decoder.html 265
-> m =&gt; <A HREF="Data-Ring-Module.html#t%3ALeftModule"
->LeftModule</A
+> m =&gt; <A HREF="Data-Ring-Module.html#t%3AModule"
+>Module</A
hunk ./doc/html/monoids/Data-Monoid-Lexical-Words.html 22
->monoids-0.1.33: Monoids, specialized containers and a general map/reduce framework</TD
+>monoids-0.1.35: Monoids, specialized containers and a general map/reduce framework</TD
hunk ./doc/html/monoids/Data-Monoid-Monad.html 22
->monoids-0.1.33: Monoids, specialized containers and a general map/reduce framework</TD
+>monoids-0.1.35: Monoids, specialized containers and a general map/reduce framework</TD
hunk ./doc/html/monoids/Data-Monoid-Monad.html 158
->module <A HREF="Data-Ring-Semi-Near.html"
->Data.Ring.Semi.Near</A
+>module <A HREF="Data-Ring-Module.html"
+>Data.Ring.Module</A
hunk ./doc/html/monoids/Data-Monoid-Monad.html 273
->module <A HREF="Data-Ring-Semi-Near.html"
->Data.Ring.Semi.Near</A
+>module <A HREF="Data-Ring-Module.html"
+>Data.Ring.Module</A
hunk ./doc/html/monoids/Data-Monoid-Monad.html 385
-> f =&gt; <A HREF="Data-Ring-Module.html#t%3AModule"
->Module</A
+> f =&gt; <A HREF="Data-Ring-Module.html#t%3ARightModule"
+>RightModule</A
hunk ./doc/html/monoids/Data-Monoid-Monad.html 397
-> f =&gt; <A HREF="Data-Ring-Module.html#t%3ARightModule"
->RightModule</A
+> f =&gt; <A HREF="Data-Ring-Module.html#t%3ALeftModule"
+>LeftModule</A
hunk ./doc/html/monoids/Data-Monoid-Monad.html 409
-> f =&gt; <A HREF="Data-Ring-Module.html#t%3ALeftModule"
->LeftModule</A
+> f =&gt; <A HREF="Data-Ring-Module.html#t%3AModule"
+>Module</A
hunk ./doc/html/monoids/Data-Monoid-Monad.html 559
-><A HREF="Data-Ring-Semi-Near.html#t%3ARightSemiNearRing"
+><A HREF="Data-Ring.html#t%3ARightSemiNearRing"
hunk ./doc/html/monoids/Data-Monoid-Monad.html 615
-> f =&gt; <A HREF="Data-Ring-Module.html#t%3AModule"
->Module</A
+> f =&gt; <A HREF="Data-Ring-Module.html#t%3ARightModule"
+>RightModule</A
hunk ./doc/html/monoids/Data-Monoid-Monad.html 627
-> f =&gt; <A HREF="Data-Ring-Module.html#t%3ARightModule"
->RightModule</A
+> f =&gt; <A HREF="Data-Ring-Module.html#t%3ALeftModule"
+>LeftModule</A
hunk ./doc/html/monoids/Data-Monoid-Monad.html 639
-> f =&gt; <A HREF="Data-Ring-Module.html#t%3ALeftModule"
->LeftModule</A
+> f =&gt; <A HREF="Data-Ring-Module.html#t%3AModule"
+>Module</A
hunk ./doc/html/monoids/Data-Monoid-Monad.html 773
-> a) =&gt; <A HREF="Data-Ring-Semi-Near.html#t%3ARightSemiNearRing"
+> a) =&gt; <A HREF="Data-Ring.html#t%3ARightSemiNearRing"
hunk ./doc/html/monoids/Data-Monoid-Monad.html 785
-> a) =&gt; <A HREF="Data-Ring-Semi-Near.html#t%3ARingoid"
+> a) =&gt; <A HREF="Data-Ring.html#t%3ARingoid"
hunk ./doc/html/monoids/Data-Monoid-Monad.html 924
->(<A HREF="Data-Ring-Module.html#t%3AModule"
->Module</A
-> r m, <A HREF="/usr/local/share/doc/ghc/libraries/base/Control-Monad.html#t%3AMonad"
->Monad</A
-> f) =&gt; <A HREF="Data-Ring-Module.html#t%3AModule"
->Module</A
-> r (<A HREF="Data-Monoid-Monad.html#t%3AMon"
->Mon</A
-> f m)</TD
-></TR
-><TR
-><TD CLASS="decl"
hunk ./doc/html/monoids/Data-Monoid-Monad.html 948
+>(<A HREF="Data-Ring-Module.html#t%3AModule"
+>Module</A
+> r m, <A HREF="/usr/local/share/doc/ghc/libraries/base/Control-Monad.html#t%3AMonad"
+>Monad</A
+> f) =&gt; <A HREF="Data-Ring-Module.html#t%3AModule"
+>Module</A
+> r (<A HREF="Data-Monoid-Monad.html#t%3AMon"
+>Mon</A
+> f m)</TD
+></TR
+><TR
+><TD CLASS="decl"
hunk ./doc/html/monoids/Data-Monoid-Multiplicative-Sugar.html 22
->monoids-0.1.33: Monoids, specialized containers and a general map/reduce framework</TD
+>monoids-0.1.35: Monoids, specialized containers and a general map/reduce framework</TD
hunk ./doc/html/monoids/Data-Monoid-Multiplicative-Sugar.html 93
-> import Prelude hiding ((+),(*))
+> import Prelude hiding ((+),(*),(^))
hunk ./doc/html/monoids/Data-Monoid-Multiplicative-Sugar.html 135
+><TD CLASS="decl"
+>module <A HREF="Data-Ring-Semi-Natural.html"
+>Data.Ring.Semi.Natural</A
+></TD
+></TR
+><TR
+><TD CLASS="s15"
+></TD
+></TR
+><TR
hunk ./doc/html/monoids/Data-Monoid-Multiplicative-Sugar.html 169
+><TD CLASS="topdecl"
+><TABLE CLASS="declbar"
+><TR
+><TD CLASS="declname"
+><A NAME="v%3A%5E"
+></A
+><B
+>(^)</B
+> :: <A HREF="Data-Monoid-Multiplicative.html#t%3AMultiplicative"
+>Multiplicative</A
+> r =&gt; r -&gt; <A HREF="Data-Ring-Semi-Natural.html#t%3ANatural"
+>Natural</A
+> -&gt; r</TD
+><TD CLASS="declbut"
+><A HREF="src/Data-Monoid-Multiplicative-Sugar.html#%5E"
+>Source</A
+></TD
+></TR
+></TABLE
+></TD
+></TR
+><TR
+><TD CLASS="s15"
+></TD
+></TR
+><TR
hunk ./doc/html/monoids/Data-Monoid-Multiplicative.html 22
->monoids-0.1.33: Monoids, specialized containers and a general map/reduce framework</TD
+>monoids-0.1.35: Monoids, specialized containers and a general map/reduce framework</TD
hunk ./doc/html/monoids/Data-Monoid-Multiplicative.html 472
-> <A HREF="Data-Ring-Boolean.html#t%3ABoolRing"
->BoolRing</A
-></TD
-></TR
-><TR
-><TD CLASS="decl"
-><A HREF="Data-Monoid-Multiplicative.html#t%3AMultiplicative"
->Multiplicative</A
hunk ./doc/html/monoids/Data-Monoid-Multiplicative.html 550
-> (<A HREF="/usr/local/share/doc/ghc/libraries/containers/Data-Sequence.html#t%3ASeq"
->Seq</A
-> m)</TD
-></TR
-><TR
-><TD CLASS="decl"
-><A HREF="/usr/local/share/doc/ghc/libraries/base/Data-Monoid.html#t%3AMonoid"
->Monoid</A
-> m =&gt; <A HREF="Data-Monoid-Multiplicative.html#t%3AMultiplicative"
->Multiplicative</A
hunk ./doc/html/monoids/Data-Monoid-Multiplicative.html 586
+><A HREF="/usr/local/share/doc/ghc/libraries/base/Prelude.html#t%3ANum"
+>Num</A
+> a =&gt; <A HREF="Data-Monoid-Multiplicative.html#t%3AMultiplicative"
+>Multiplicative</A
+> (<A HREF="Data-Ring-FromNum.html#t%3AFromNum"
+>FromNum</A
+> a)</TD
+></TR
+><TR
+><TD CLASS="decl"
+><A HREF="/usr/local/share/doc/ghc/libraries/base/Data-Bits.html#t%3ABits"
+>Bits</A
+> a =&gt; <A HREF="Data-Monoid-Multiplicative.html#t%3AMultiplicative"
+>Multiplicative</A
+> (<A HREF="Data-Ring-Boolean.html#t%3ABoolean"
+>Boolean</A
+> a)</TD
+></TR
+><TR
+><TD CLASS="decl"
+>(<A HREF="/usr/local/share/doc/ghc/libraries/base/Prelude.html#t%3ABounded"
+>Bounded</A
+> a, <A HREF="/usr/local/share/doc/ghc/libraries/base/Prelude.html#t%3AEnum"
+>Enum</A
+> a) =&gt; <A HREF="Data-Monoid-Multiplicative.html#t%3AMultiplicative"
+>Multiplicative</A
+> (<A HREF="Data-Ring-Semi-BitSet.html#t%3ABitSet"
+>BitSet</A
+> a)</TD
+></TR
+><TR
+><TD CLASS="decl"
hunk ./doc/html/monoids/Data-Monoid-Multiplicative.html 650
-><A HREF="/usr/local/share/doc/ghc/libraries/base/Prelude.html#t%3ANum"
->Num</A
-> a =&gt; <A HREF="Data-Monoid-Multiplicative.html#t%3AMultiplicative"
->Multiplicative</A
-> (<A HREF="Data-Ring-FromNum.html#t%3AFromNum"
->FromNum</A
-> a)</TD
-></TR
-><TR
-><TD CLASS="decl"
->(<A HREF="/usr/local/share/doc/ghc/libraries/base/Prelude.html#t%3ABounded"
->Bounded</A
-> a, <A HREF="/usr/local/share/doc/ghc/libraries/base/Prelude.html#t%3AEnum"
->Enum</A
-> a) =&gt; <A HREF="Data-Monoid-Multiplicative.html#t%3AMultiplicative"
->Multiplicative</A
-> (<A HREF="Data-Ring-Semi-BitSet.html#t%3ABitSet"
->BitSet</A
-> a)</TD
-></TR
-><TR
-><TD CLASS="decl"
hunk ./doc/html/monoids/Data-Monoid-Multiplicative.html 762
->(<A HREF="Data-Ring-ModularArithmetic.html#t%3AModular"
->Modular</A
-> s a, <A HREF="/usr/local/share/doc/ghc/libraries/base/Prelude.html#t%3AIntegral"
->Integral</A
-> a) =&gt; <A HREF="Data-Monoid-Multiplicative.html#t%3AMultiplicative"
->Multiplicative</A
-> (<A HREF="Data-Ring-ModularArithmetic.html#t%3AMod"
->Mod</A
-> a s)</TD
-></TR
-><TR
-><TD CLASS="decl"
hunk ./doc/html/monoids/Data-Monoid-Multiplicative.html 786
+>(<A HREF="Data-Ring-ModularArithmetic.html#t%3AModular"
+>Modular</A
+> s a, <A HREF="/usr/local/share/doc/ghc/libraries/base/Prelude.html#t%3AIntegral"
+>Integral</A
+> a) =&gt; <A HREF="Data-Monoid-Multiplicative.html#t%3AMultiplicative"
+>Multiplicative</A
+> (<A HREF="Data-Ring-ModularArithmetic.html#t%3AMod"
+>Mod</A
+> a s)</TD
+></TR
+><TR
+><TD CLASS="decl"
hunk ./doc/html/monoids/Data-Monoid-Multiplicative.html 874
-><A HREF="Data-Ring-Module.html#t%3AModule"
->Module</A
+><A HREF="Data-Ring-Module.html#t%3ABimodule"
+>Bimodule</A
hunk ./doc/html/monoids/Data-Monoid-Multiplicative.html 1099
-> m =&gt; <A HREF="Data-Ring-Module.html#t%3AModule"
->Module</A
+> m =&gt; <A HREF="Data-Ring-Module.html#t%3ARightModule"
+>RightModule</A
hunk ./doc/html/monoids/Data-Monoid-Multiplicative.html 1111
-> m =&gt; <A HREF="Data-Ring-Module.html#t%3ARightModule"
->RightModule</A
+> m =&gt; <A HREF="Data-Ring-Module.html#t%3ALeftModule"
+>LeftModule</A
hunk ./doc/html/monoids/Data-Monoid-Multiplicative.html 1123
-> m =&gt; <A HREF="Data-Ring-Module.html#t%3ALeftModule"
->LeftModule</A
+> m =&gt; <A HREF="Data-Ring-Module.html#t%3AModule"
+>Module</A
hunk ./doc/html/monoids/Data-Monoid-Multiplicative.html 1141
+><TR
+><TD CLASS="decl"
+><A HREF="Data-Group.html#t%3AMultiplicativeGroup"
+>MultiplicativeGroup</A
+> g =&gt; <A HREF="Data-Group.html#t%3AGroup"
+>Group</A
+> (<A HREF="Data-Monoid-Multiplicative.html#t%3ALog"
+>Log</A
+> g)</TD
+></TR
hunk ./doc/html/monoids/Data-Monoid-Multiplicative.html 1266
+><TR
+><TD CLASS="decl"
+><A HREF="Data-Group.html#t%3AGroup"
+>Group</A
+> g =&gt; <A HREF="Data-Group.html#t%3AMultiplicativeGroup"
+>MultiplicativeGroup</A
+> (<A HREF="Data-Monoid-Multiplicative.html#t%3AExp"
+>Exp</A
+> g)</TD
+></TR
hunk ./doc/html/monoids/Data-Monoid-Ord.html 22
->monoids-0.1.33: Monoids, specialized containers and a general map/reduce framework</TD
+>monoids-0.1.35: Monoids, specialized containers and a general map/reduce framework</TD
hunk ./doc/html/monoids/Data-Monoid-Reducer-Char.html 22
->monoids-0.1.33: Monoids, specialized containers and a general map/reduce framework</TD
+>monoids-0.1.35: Monoids, specialized containers and a general map/reduce framework</TD
hunk ./doc/html/monoids/Data-Monoid-Reducer-With.html 22
->monoids-0.1.33: Monoids, specialized containers and a general map/reduce framework</TD
+>monoids-0.1.35: Monoids, specialized containers and a general map/reduce framework</TD
hunk ./doc/html/monoids/Data-Monoid-Reducer.html 22
->monoids-0.1.33: Monoids, specialized containers and a general map/reduce framework</TD
+>monoids-0.1.35: Monoids, specialized containers and a general map/reduce framework</TD
hunk ./doc/html/monoids/Data-Monoid-Reducer.html 563
-> <A HREF="/usr/local/share/doc/ghc/libraries/ghc-prim/GHC-Bool.html#t%3ABool"
->Bool</A
-> <A HREF="Data-Ring-Boolean.html#t%3ABoolRing"
->BoolRing</A
-></TD
-></TR
-><TR
-><TD CLASS="decl"
-><A HREF="Data-Monoid-Reducer.html#t%3AReducer"
->Reducer</A
-> <A HREF="/usr/local/share/doc/ghc/libraries/ghc-prim/GHC-Bool.html#t%3ABool"
->Bool</A
-> <A HREF="Data-Ring-Boolean.html#t%3ABoolRing"
->BoolRing</A
-></TD
-></TR
-><TR
-><TD CLASS="decl"
-><A HREF="Data-Monoid-Reducer.html#t%3AReducer"
->Reducer</A
-> <A HREF="/usr/local/share/doc/ghc/libraries/ghc-prim/GHC-Types.html#t%3AInt"
->Int</A
-> <A HREF="/usr/local/share/doc/ghc/libraries/containers/Data-IntSet.html#t%3AIntSet"
->IntSet</A
-></TD
-></TR
-><TR
-><TD CLASS="decl"
-><A HREF="Data-Monoid-Reducer.html#t%3AReducer"
->Reducer</A
-> <A HREF="/usr/local/share/doc/ghc/libraries/ghc-prim/GHC-Types.html#t%3AInt"
->Int</A
-> <A HREF="/usr/local/share/doc/ghc/libraries/containers/Data-IntSet.html#t%3AIntSet"
->IntSet</A
-></TD
-></TR
-><TR
-><TD CLASS="decl"
-><A HREF="Data-Monoid-Reducer.html#t%3AReducer"
->Reducer</A
hunk ./doc/html/monoids/Data-Monoid-Reducer.html 771
-><A HREF="/usr/local/share/doc/ghc/libraries/base/Data-Ord.html#t%3AOrd"
->Ord</A
-> a =&gt; <A HREF="Data-Monoid-Reducer.html#t%3AReducer"
->Reducer</A
-> a (<A HREF="/usr/local/share/doc/ghc/libraries/containers/Data-Set.html#t%3ASet"
->Set</A
-> a)</TD
-></TR
-><TR
-><TD CLASS="decl"
-><A HREF="Data-Monoid-Reducer.html#t%3AReducer"
->Reducer</A
-> a (<A HREF="/usr/local/share/doc/ghc/libraries/containers/Data-Sequence.html#t%3ASeq"
->Seq</A
-> a)</TD
-></TR
-><TR
-><TD CLASS="decl"
hunk ./doc/html/monoids/Data-Monoid-Reducer.html 867
+><A HREF="Data-Monoid-Reducer.html#t%3AReducer"
+>Reducer</A
+> a (<A HREF="Data-Generator-Free.html#t%3AFree"
+>Free</A
+> a)</TD
+></TR
+><TR
+><TD CLASS="decl"
+><A HREF="/usr/local/share/doc/ghc/libraries/base/Data-Bits.html#t%3ABits"
+>Bits</A
+> a =&gt; <A HREF="Data-Monoid-Reducer.html#t%3AReducer"
+>Reducer</A
+> a (<A HREF="Data-Ring-Boolean.html#t%3ABoolean"
+>Boolean</A
+> a)</TD
+></TR
+><TR
+><TD CLASS="decl"
+><A HREF="/usr/local/share/doc/ghc/libraries/base/Prelude.html#t%3AEnum"
+>Enum</A
+> a =&gt; <A HREF="Data-Monoid-Reducer.html#t%3AReducer"
+>Reducer</A
+> a (<A HREF="Data-Ring-Semi-BitSet.html#t%3ABitSet"
+>BitSet</A
+> a)</TD
+></TR
+><TR
+><TD CLASS="decl"
hunk ./doc/html/monoids/Data-Monoid-Reducer.html 927
-><A HREF="Data-Monoid-Reducer.html#t%3AReducer"
->Reducer</A
-> a (<A HREF="Data-Generator-Free.html#t%3AFree"
->Free</A
-> a)</TD
-></TR
-><TR
-><TD CLASS="decl"
-><A HREF="/usr/local/share/doc/ghc/libraries/base/Prelude.html#t%3AEnum"
->Enum</A
-> a =&gt; <A HREF="Data-Monoid-Reducer.html#t%3AReducer"
->Reducer</A
-> a (<A HREF="Data-Ring-Semi-BitSet.html#t%3ABitSet"
->BitSet</A
-> a)</TD
-></TR
-><TR
-><TD CLASS="decl"
hunk ./doc/html/monoids/Data-Monoid-Reducer.html 965
->(<A HREF="/usr/local/share/doc/ghc/libraries/base/Data-Ord.html#t%3AOrd"
->Ord</A
-> c, <A HREF="Data-Monoid-Reducer.html#t%3AReducer"
->Reducer</A
-> c m) =&gt; <A HREF="Data-Monoid-Reducer.html#t%3AReducer"
->Reducer</A
-> c (<A HREF="Data-Ring-Semi-Near-Trie.html#t%3ATrie"
->Trie</A
-> c m)</TD
-></TR
-><TR
-><TD CLASS="decl"
hunk ./doc/html/monoids/Data-Monoid-Reducer.html 989
+>(<A HREF="/usr/local/share/doc/ghc/libraries/base/Data-Ord.html#t%3AOrd"
+>Ord</A
+> c, <A HREF="Data-Monoid-Reducer.html#t%3AReducer"
+>Reducer</A
+> c m) =&gt; <A HREF="Data-Monoid-Reducer.html#t%3AReducer"
+>Reducer</A
+> c (<A HREF="Data-Ring-Semi-Near-Trie.html#t%3ATrie"
+>Trie</A
+> c m)</TD
+></TR
+><TR
+><TD CLASS="decl"
hunk ./doc/html/monoids/Data-Monoid-Reducer.html 1023
->(<A HREF="Data-Ring-Module.html#t%3AModule"
->Module</A
+>(<A HREF="Data-Ring-Module.html#t%3ABimodule"
+>Bimodule</A
hunk ./doc/html/monoids/Data-Monoid-Reducer.html 1321
-><A HREF="Data-Monoid-Reducer.html#t%3AReducer"
->Reducer</A
-> ((,) <A HREF="/usr/local/share/doc/ghc/libraries/ghc-prim/GHC-Types.html#t%3AInt"
->Int</A
-> v) (<A HREF="/usr/local/share/doc/ghc/libraries/containers/Data-IntMap.html#t%3AIntMap"
->IntMap</A
-> v)</TD
-></TR
-><TR
-><TD CLASS="decl"
-><A HREF="Data-Monoid-Reducer.html#t%3AReducer"
->Reducer</A
-> ((,) <A HREF="/usr/local/share/doc/ghc/libraries/ghc-prim/GHC-Types.html#t%3AInt"
->Int</A
-> v) (<A HREF="/usr/local/share/doc/ghc/libraries/containers/Data-IntMap.html#t%3AIntMap"
->IntMap</A
-> v)</TD
-></TR
-><TR
-><TD CLASS="decl"
-><A HREF="/usr/local/share/doc/ghc/libraries/base/Data-Ord.html#t%3AOrd"
->Ord</A
-> k =&gt; <A HREF="Data-Monoid-Reducer.html#t%3AReducer"
->Reducer</A
-> ((,) k v) (<A HREF="/usr/local/share/doc/ghc/libraries/containers/Data-Map.html#t%3AMap"
->Map</A
-> k v)</TD
-></TR
-><TR
-><TD CLASS="decl"
-><A HREF="/usr/local/share/doc/ghc/libraries/base/Data-Ord.html#t%3AOrd"
->Ord</A
-> k =&gt; <A HREF="Data-Monoid-Reducer.html#t%3AReducer"
->Reducer</A
-> ((,) k v) (<A HREF="/usr/local/share/doc/ghc/libraries/containers/Data-Map.html#t%3AMap"
->Map</A
-> k v)</TD
-></TR
-><TR
-><TD CLASS="decl"
hunk ./doc/html/monoids/Data-Monoid-Reducer.html 1673
-><A HREF="Data-Ring-Semi-Near.html#t%3ARightSemiNearRing"
->RightSemiNearRing</A
-> m =&gt; <A HREF="Data-Ring-Semi-Near.html#t%3ARightSemiNearRing"
->RightSemiNearRing</A
+><A HREF="Data-Group.html#t%3AMultiplicativeGroup"
+>MultiplicativeGroup</A
+> g =&gt; <A HREF="Data-Group.html#t%3AMultiplicativeGroup"
+>MultiplicativeGroup</A
hunk ./doc/html/monoids/Data-Monoid-Reducer.html 1679
-> m s)</TD
+> g s)</TD
hunk ./doc/html/monoids/Data-Monoid-Reducer.html 1683
-><A HREF="Data-Ring-Semi-Near.html#t%3ALeftSemiNearRing"
->LeftSemiNearRing</A
-> m =&gt; <A HREF="Data-Ring-Semi-Near.html#t%3ALeftSemiNearRing"
->LeftSemiNearRing</A
+><A HREF="Data-Group.html#t%3AGroup"
+>Group</A
+> a =&gt; <A HREF="Data-Group.html#t%3AGroup"
+>Group</A
hunk ./doc/html/monoids/Data-Monoid-Reducer.html 1689
-> m s)</TD
+> a s)</TD
hunk ./doc/html/monoids/Data-Monoid-Reducer.html 1693
-><A HREF="Data-Ring-Semi-Near.html#t%3ARingoid"
->Ringoid</A
-> m =&gt; <A HREF="Data-Ring-Semi-Near.html#t%3ARingoid"
->Ringoid</A
+><A HREF="Data-Ring.html#t%3AField"
+>Field</A
+> f =&gt; <A HREF="Data-Ring.html#t%3AField"
+>Field</A
hunk ./doc/html/monoids/Data-Monoid-Reducer.html 1699
-> m s)</TD
+> f s)</TD
hunk ./doc/html/monoids/Data-Monoid-Reducer.html 1703
-><A HREF="Data-Ring-Semi.html#t%3ASemiRing"
->SemiRing</A
-> r =&gt; <A HREF="Data-Ring-Semi.html#t%3ASemiRing"
->SemiRing</A
+><A HREF="Data-Ring.html#t%3ADivisionRing"
+>DivisionRing</A
+> r =&gt; <A HREF="Data-Ring.html#t%3ADivisionRing"
+>DivisionRing</A
hunk ./doc/html/monoids/Data-Monoid-Reducer.html 1713
-><A HREF="Data-Group.html#t%3AGroup"
->Group</A
-> a =&gt; <A HREF="Data-Group.html#t%3AGroup"
->Group</A
+><A HREF="Data-Ring.html#t%3ARing"
+>Ring</A
+> r =&gt; <A HREF="Data-Ring.html#t%3ARing"
+>Ring</A
hunk ./doc/html/monoids/Data-Monoid-Reducer.html 1719
-> a s)</TD
+> r s)</TD
hunk ./doc/html/monoids/Data-Monoid-Reducer.html 1723
-><A HREF="Data-Group-Multiplicative.html#t%3AMultiplicativeGroup"
->MultiplicativeGroup</A
-> g =&gt; <A HREF="Data-Group-Multiplicative.html#t%3AMultiplicativeGroup"
->MultiplicativeGroup</A
+><A HREF="Data-Ring.html#t%3ASemiRing"
+>SemiRing</A
+> r =&gt; <A HREF="Data-Ring.html#t%3ASemiRing"
+>SemiRing</A
hunk ./doc/html/monoids/Data-Monoid-Reducer.html 1729
-> g s)</TD
+> r s)</TD
hunk ./doc/html/monoids/Data-Monoid-Reducer.html 1733
-><A HREF="Data-Ring.html#t%3ARing"
->Ring</A
-> r =&gt; <A HREF="Data-Ring.html#t%3ARing"
->Ring</A
+><A HREF="Data-Ring.html#t%3ARightSemiNearRing"
+>RightSemiNearRing</A
+> m =&gt; <A HREF="Data-Ring.html#t%3ARightSemiNearRing"
+>RightSemiNearRing</A
hunk ./doc/html/monoids/Data-Monoid-Reducer.html 1739
-> r s)</TD
+> m s)</TD
hunk ./doc/html/monoids/Data-Monoid-Reducer.html 1743
-><A HREF="Data-Field.html#t%3AField"
->Field</A
-> f =&gt; <A HREF="Data-Field.html#t%3AField"
->Field</A
+><A HREF="Data-Ring.html#t%3ALeftSemiNearRing"
+>LeftSemiNearRing</A
+> m =&gt; <A HREF="Data-Ring.html#t%3ALeftSemiNearRing"
+>LeftSemiNearRing</A
hunk ./doc/html/monoids/Data-Monoid-Reducer.html 1749
-> f s)</TD
+> m s)</TD
+></TR
+><TR
+><TD CLASS="decl"
+><A HREF="Data-Ring.html#t%3ARingoid"
+>Ringoid</A
+> m =&gt; <A HREF="Data-Ring.html#t%3ARingoid"
+>Ringoid</A
+> (<A HREF="Data-Monoid-Reducer.html#t%3AReducedBy"
+>ReducedBy</A
+> m s)</TD
hunk ./doc/html/monoids/Data-Monoid-Self.html 22
->monoids-0.1.33: Monoids, specialized containers and a general map/reduce framework</TD
+>monoids-0.1.35: Monoids, specialized containers and a general map/reduce framework</TD
hunk ./doc/html/monoids/Data-Monoid-Self.html 262
-> m =&gt; <A HREF="Data-Ring-Module.html#t%3AModule"
->Module</A
+> m =&gt; <A HREF="Data-Ring-Module.html#t%3ARightModule"
+>RightModule</A
hunk ./doc/html/monoids/Data-Monoid-Self.html 274
-> m =&gt; <A HREF="Data-Ring-Module.html#t%3ARightModule"
->RightModule</A
+> m =&gt; <A HREF="Data-Ring-Module.html#t%3ALeftModule"
+>LeftModule</A
hunk ./doc/html/monoids/Data-Monoid-Self.html 286
-> m =&gt; <A HREF="Data-Ring-Module.html#t%3ALeftModule"
->LeftModule</A
+> m =&gt; <A HREF="Data-Ring-Module.html#t%3AModule"
+>Module</A
hunk ./doc/html/monoids/Data-Monoid-Self.html 316
-><A HREF="Data-Ring-Semi-Near.html#t%3ARightSemiNearRing"
->RightSemiNearRing</A
-> m =&gt; <A HREF="Data-Ring-Semi-Near.html#t%3ARightSemiNearRing"
->RightSemiNearRing</A
+><A HREF="Data-Group.html#t%3AMultiplicativeGroup"
+>MultiplicativeGroup</A
+> g =&gt; <A HREF="Data-Group.html#t%3AMultiplicativeGroup"
+>MultiplicativeGroup</A
hunk ./doc/html/monoids/Data-Monoid-Self.html 322
-> m)</TD
+> g)</TD
hunk ./doc/html/monoids/Data-Monoid-Self.html 326
-><A HREF="Data-Ring-Semi-Near.html#t%3ALeftSemiNearRing"
->LeftSemiNearRing</A
-> m =&gt; <A HREF="Data-Ring-Semi-Near.html#t%3ALeftSemiNearRing"
->LeftSemiNearRing</A
+><A HREF="Data-Group.html#t%3AGroup"
+>Group</A
+> a =&gt; <A HREF="Data-Group.html#t%3AGroup"
+>Group</A
hunk ./doc/html/monoids/Data-Monoid-Self.html 332
-> m)</TD
+> a)</TD
hunk ./doc/html/monoids/Data-Monoid-Self.html 336
-><A HREF="Data-Ring-Semi-Near.html#t%3ARingoid"
->Ringoid</A
-> m =&gt; <A HREF="Data-Ring-Semi-Near.html#t%3ARingoid"
->Ringoid</A
+><A HREF="Data-Ring.html#t%3AField"
+>Field</A
+> f =&gt; <A HREF="Data-Ring.html#t%3AField"
+>Field</A
hunk ./doc/html/monoids/Data-Monoid-Self.html 342
-> m)</TD
+> f)</TD
hunk ./doc/html/monoids/Data-Monoid-Self.html 346
-><A HREF="Data-Ring-Semi.html#t%3ASemiRing"
->SemiRing</A
-> r =&gt; <A HREF="Data-Ring-Semi.html#t%3ASemiRing"
->SemiRing</A
+><A HREF="Data-Ring.html#t%3ADivisionRing"
+>DivisionRing</A
+> r =&gt; <A HREF="Data-Ring.html#t%3ADivisionRing"
+>DivisionRing</A
hunk ./doc/html/monoids/Data-Monoid-Self.html 356
-><A HREF="Data-Group.html#t%3AGroup"
->Group</A
-> a =&gt; <A HREF="Data-Group.html#t%3AGroup"
->Group</A
+><A HREF="Data-Ring.html#t%3ARing"
+>Ring</A
+> r =&gt; <A HREF="Data-Ring.html#t%3ARing"
+>Ring</A
hunk ./doc/html/monoids/Data-Monoid-Self.html 362
-> a)</TD
+> r)</TD
hunk ./doc/html/monoids/Data-Monoid-Self.html 366
-><A HREF="Data-Group-Multiplicative.html#t%3AMultiplicativeGroup"
->MultiplicativeGroup</A
-> g =&gt; <A HREF="Data-Group-Multiplicative.html#t%3AMultiplicativeGroup"
->MultiplicativeGroup</A
+><A HREF="Data-Ring.html#t%3ASemiRing"
+>SemiRing</A
+> r =&gt; <A HREF="Data-Ring.html#t%3ASemiRing"
+>SemiRing</A
hunk ./doc/html/monoids/Data-Monoid-Self.html 372
-> g)</TD
+> r)</TD
hunk ./doc/html/monoids/Data-Monoid-Self.html 376
-><A HREF="Data-Ring.html#t%3ARing"
->Ring</A
-> r =&gt; <A HREF="Data-Ring.html#t%3ARing"
->Ring</A
+><A HREF="Data-Ring.html#t%3ARightSemiNearRing"
+>RightSemiNearRing</A
+> m =&gt; <A HREF="Data-Ring.html#t%3ARightSemiNearRing"
+>RightSemiNearRing</A
hunk ./doc/html/monoids/Data-Monoid-Self.html 382
-> r)</TD
+> m)</TD
hunk ./doc/html/monoids/Data-Monoid-Self.html 386
-><A HREF="Data-Field.html#t%3AField"
->Field</A
-> f =&gt; <A HREF="Data-Field.html#t%3AField"
->Field</A
+><A HREF="Data-Ring.html#t%3ALeftSemiNearRing"
+>LeftSemiNearRing</A
+> m =&gt; <A HREF="Data-Ring.html#t%3ALeftSemiNearRing"
+>LeftSemiNearRing</A
hunk ./doc/html/monoids/Data-Monoid-Self.html 392
-> f)</TD
+> m)</TD
+></TR
+><TR
+><TD CLASS="decl"
+><A HREF="Data-Ring.html#t%3ARingoid"
+>Ringoid</A
+> m =&gt; <A HREF="Data-Ring.html#t%3ARingoid"
+>Ringoid</A
+> (<A HREF="Data-Monoid-Self.html#t%3ASelf"
+>Self</A
+> m)</TD
hunk ./doc/html/monoids/Data-Monoid-Sugar.html 1
+<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd">
+<!--Rendered using the Haskell Html Library v0.2-->
+<HTML
+><HEAD
+><META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=UTF-8"
+><TITLE
+>Data.Monoid.Sugar</TITLE
+><LINK HREF="haddock.css" REL="stylesheet" TYPE="text/css"
+><SCRIPT SRC="haddock-util.js" TYPE="text/javascript"
+></SCRIPT
+></HEAD
+><BODY
+><TABLE CLASS="vanilla" CELLSPACING="0" CELLPADDING="0"
+><TR
+><TD CLASS="topbar"
+><TABLE CLASS="vanilla" CELLSPACING="0" CELLPADDING="0"
+><TR
+><TD
+><IMG SRC="haskell_icon.gif" WIDTH="16" HEIGHT="16" ALT=" "
+></TD
+><TD CLASS="title"
+>monoids-0.1.35: Monoids, specialized containers and a general map/reduce framework</TD
+><TD CLASS="topbut"
+><A HREF="src/Data-Monoid-Sugar.html"
+>Source code</A
+></TD
+><TD CLASS="topbut"
+><A HREF="index.html"
+>Contents</A
+></TD
+><TD CLASS="topbut"
+><A HREF="doc-index.html"
+>Index</A
+></TD
+></TR
+></TABLE
+></TD
+></TR
+><TR
+><TD CLASS="modulebar"
+><TABLE CLASS="vanilla" CELLSPACING="0" CELLPADDING="0"
+><TR
+><TD
+><FONT SIZE="6"
+>Data.Monoid.Sugar</FONT
+></TD
+><TD ALIGN="right"
+><TABLE CLASS="narrow" CELLSPACING="0" CELLPADDING="0"
+><TR
+><TD CLASS="infohead"
+>Portability</TD
+><TD CLASS="infoval"
+>portable</TD
+></TR
+><TR
+><TD CLASS="infohead"
+>Stability</TD
+><TD CLASS="infoval"
+>experimental</TD
+></TR
+><TR
+><TD CLASS="infohead"
+>Maintainer</TD
+><TD CLASS="infoval"
+>ekmett@gmail.com</TD
+></TR
+></TABLE
+></TD
+></TR
+></TABLE
+></TD
+></TR
+><TR
+><TD CLASS="s15"
+></TD
+></TR
+><TR
+><TD CLASS="section1"
+>Description</TD
+></TR
+><TR
+><TD CLASS="doc"
+><P
+>Syntactic sugar for working with a <TT
+><A HREF="/usr/local/share/doc/ghc/libraries/base/Data-Monoid.html#t%3AMonoid"
+>Monoid</A
+></TT
+> and <TT
+><A HREF="Data-Monoid-Multiplicative.html#t%3AMultiplicative"
+>Multiplicative</A
+></TT
+> instances 
+ that conflicts with names from the <A HREF="Prelude.html"
+>Prelude</A
+>.
+</P
+><PRE
+> import Prelude hiding ((+),(*),(^))
+ import Data.Monoid.Sugar
+</PRE
+></TD
+></TR
+><TR
+><TD CLASS="s15"
+></TD
+></TR
+><TR
+><TD CLASS="s15"
+></TD
+></TR
+><TR
+><TD CLASS="section1"
+>Documentation</TD
+></TR
+><TR
+><TD CLASS="s15"
+></TD
+></TR
+><TR
+><TD CLASS="decl"
+>module <A HREF="Data-Monoid-Multiplicative.html"
+>Data.Monoid.Multiplicative</A
+></TD
+></TR
+><TR
+><TD CLASS="s15"
+></TD
+></TR
+><TR
+><TD CLASS="decl"
+>module <A HREF="Data-Ring-Semi-Natural.html"
+>Data.Ring.Semi.Natural</A
+></TD
+></TR
+><TR
+><TD CLASS="s15"
+></TD
+></TR
+><TR
+><TD CLASS="topdecl"
+><TABLE CLASS="declbar"
+><TR
+><TD CLASS="declname"
+><A NAME="v%3A%2B"
+></A
+><B
+>(+)</B
+> :: <A HREF="/usr/local/share/doc/ghc/libraries/base/Data-Monoid.html#t%3AMonoid"
+>Monoid</A
+> m =&gt; m -&gt; m -&gt; m</TD
+><TD CLASS="declbut"
+><A HREF="src/Data-Monoid-Sugar.html#%2B"
+>Source</A
+></TD
+></TR
+></TABLE
+></TD
+></TR
+><TR
+><TD CLASS="s15"
+></TD
+></TR
+><TR
+><TD CLASS="topdecl"
+><TABLE CLASS="declbar"
+><TR
+><TD CLASS="declname"
+><A NAME="v%3A%2A"
+></A
+><B
+>(*)</B
+> :: <A HREF="Data-Monoid-Multiplicative.html#t%3AMultiplicative"
+>Multiplicative</A
+> r =&gt; r -&gt; r -&gt; r</TD
+><TD CLASS="declbut"
+><A HREF="src/Data-Monoid-Sugar.html#%2A"
+>Source</A
+></TD
+></TR
+></TABLE
+></TD
+></TR
+><TR
+><TD CLASS="s15"
+></TD
+></TR
+><TR
+><TD CLASS="topdecl"
+><TABLE CLASS="declbar"
+><TR
+><TD CLASS="declname"
+><A NAME="v%3A%5E"
+></A
+><B
+>(^)</B
+> :: <A HREF="Data-Monoid-Multiplicative.html#t%3AMultiplicative"
+>Multiplicative</A
+> r =&gt; r -&gt; <A HREF="Data-Ring-Semi-Natural.html#t%3ANatural"
+>Natural</A
+> -&gt; r</TD
+><TD CLASS="declbut"
+><A HREF="src/Data-Monoid-Sugar.html#%5E"
+>Source</A
+></TD
+></TR
+></TABLE
+></TD
+></TR
+><TR
+><TD CLASS="s15"
+></TD
+></TR
+><TR
+><TD CLASS="botbar"
+>Produced by <A HREF="http://www.haskell.org/haddock/"
+>Haddock</A
+> version 2.3.0</TD
+></TR
+></TABLE
+></BODY
+></HTML
+>
hunk ./doc/html/monoids/Data-Monoid-Union.html 22
->monoids-0.1.33: Monoids, specialized containers and a general map/reduce framework</TD
+>monoids-0.1.35: Monoids, specialized containers and a general map/reduce framework</TD
hunk ./doc/html/monoids/Data-Monoid-Union.html 966
-> r, <A HREF="Data-Ring-Semi-Near.html#t%3ARightSemiNearRing"
+> r, <A HREF="Data-Ring.html#t%3ARightSemiNearRing"
hunk ./doc/html/monoids/Data-Monoid-Union.html 968
-> r) =&gt; <A HREF="Data-Ring-Module.html#t%3AModule"
->Module</A
+> r) =&gt; <A HREF="Data-Ring-Module.html#t%3ARightModule"
+>RightModule</A
hunk ./doc/html/monoids/Data-Monoid-Union.html 982
-> r, <A HREF="Data-Ring-Semi-Near.html#t%3ARightSemiNearRing"
+> r, <A HREF="Data-Ring.html#t%3ARightSemiNearRing"
hunk ./doc/html/monoids/Data-Monoid-Union.html 984
-> r) =&gt; <A HREF="Data-Ring-Module.html#t%3ARightModule"
->RightModule</A
+> r) =&gt; <A HREF="Data-Ring-Module.html#t%3ALeftModule"
+>LeftModule</A
hunk ./doc/html/monoids/Data-Monoid-Union.html 998
-> r, <A HREF="Data-Ring-Semi-Near.html#t%3ARightSemiNearRing"
+> r, <A HREF="Data-Ring.html#t%3ARightSemiNearRing"
hunk ./doc/html/monoids/Data-Monoid-Union.html 1000
-> r) =&gt; <A HREF="Data-Ring-Module.html#t%3ALeftModule"
->LeftModule</A
+> r) =&gt; <A HREF="Data-Ring-Module.html#t%3AModule"
+>Module</A
hunk ./doc/html/monoids/Data-Ring-Algebra.html 22
->monoids-0.1.33: Monoids, specialized containers and a general map/reduce framework</TD
+>monoids-0.1.35: Monoids, specialized containers and a general map/reduce framework</TD
hunk ./doc/html/monoids/Data-Ring-Boolean.html 22
->monoids-0.1.33: Monoids, specialized containers and a general map/reduce framework</TD
+>monoids-0.1.35: Monoids, specialized containers and a general map/reduce framework</TD
hunk ./doc/html/monoids/Data-Ring-Boolean.html 83
+><P
hunk ./doc/html/monoids/Data-Ring-Boolean.html 88
-> over <TT
-><A HREF="/usr/local/share/doc/ghc/libraries/ghc-prim/GHC-Bool.html#t%3ABool"
->Bool</A
-></TT
->. Note well that the <TT
+> over any Bits instance. Note well that the <TT
hunk ./doc/html/monoids/Data-Ring-Boolean.html 92
-> of this ring is
- symmetric difference and not disjunction like you might expect. To get that 
- you should use use <TT
+> of this ring is xor.
+ You should use use <TT
hunk ./doc/html/monoids/Data-Ring-Boolean.html 105
-><A HREF="Data-Ring-Semi.html#t%3ASemiRing"
+><A HREF="Data-Ring.html#t%3ASemiRing"
hunk ./doc/html/monoids/Data-Ring-Boolean.html 108
->
-</TD
+>.
+</P
+><P
+>Also note that <TT
+>gnegate = id</TT
+> in a Boolean Ring!
+</P
+></TD
hunk ./doc/html/monoids/Data-Ring-Boolean.html 150
->  <A NAME="t%3ABoolRing"
+>  <A NAME="t%3ABoolean"
hunk ./doc/html/monoids/Data-Ring-Boolean.html 153
->BoolRing</B
->  </TD
+>Boolean</B
+> a </TD
hunk ./doc/html/monoids/Data-Ring-Boolean.html 156
-><A HREF="src/Data-Ring-Boolean.html#BoolRing"
+><A HREF="src/Data-Ring-Boolean.html#Boolean"
hunk ./doc/html/monoids/Data-Ring-Boolean.html 175
-><A NAME="v%3ABoolRing"
+><A NAME="v%3ABoolean"
hunk ./doc/html/monoids/Data-Ring-Boolean.html 178
->BoolRing</B
+>Boolean</B
hunk ./doc/html/monoids/Data-Ring-Boolean.html 188
-><A NAME="v%3AgetBoolRing"
+><A NAME="v%3AgetBoolean"
hunk ./doc/html/monoids/Data-Ring-Boolean.html 191
->getBoolRing</B
-> :: <A HREF="/usr/local/share/doc/ghc/libraries/ghc-prim/GHC-Bool.html#t%3ABool"
->Bool</A
-></TD
+>getBoolean</B
+> :: a</TD
hunk ./doc/html/monoids/Data-Ring-Boolean.html 204
-><IMG SRC="minus.gif" CLASS="coll" ONCLICK="toggle(this,'i:BoolRing')" ALT="show/hide"
+><IMG SRC="minus.gif" CLASS="coll" ONCLICK="toggle(this,'i:Boolean')" ALT="show/hide"
hunk ./doc/html/monoids/Data-Ring-Boolean.html 209
-><DIV ID="i:BoolRing" STYLE="display:block;"
+><DIV ID="i:Boolean" STYLE="display:block;"
hunk ./doc/html/monoids/Data-Ring-Boolean.html 213
+><A HREF="/usr/local/share/doc/ghc/libraries/base/Data-Bits.html#t%3ABits"
+>Bits</A
+> a =&gt; <A HREF="Data-Monoid-Reducer.html#t%3AReducer"
+>Reducer</A
+> a (<A HREF="Data-Ring-Boolean.html#t%3ABoolean"
+>Boolean</A
+> a)</TD
+></TR
+><TR
+><TD CLASS="decl"
+><A HREF="/usr/local/share/doc/ghc/libraries/base/Data-Bits.html#t%3ABits"
+>Bits</A
+> a =&gt; <A HREF="Data-Ring-Module.html#t%3ABimodule"
+>Bimodule</A
+> Integer (<A HREF="Data-Ring-Boolean.html#t%3ABoolean"
+>Boolean</A
+> a)</TD
+></TR
+><TR
+><TD CLASS="decl"
+><A HREF="/usr/local/share/doc/ghc/libraries/base/Data-Bits.html#t%3ABits"
+>Bits</A
+> a =&gt; <A HREF="Data-Ring-Module.html#t%3ABimodule"
+>Bimodule</A
+> <A HREF="Data-Ring-Semi-Natural.html#t%3ANatural"
+>Natural</A
+> (<A HREF="Data-Ring-Boolean.html#t%3ABoolean"
+>Boolean</A
+> a)</TD
+></TR
+><TR
+><TD CLASS="decl"
+><A HREF="/usr/local/share/doc/ghc/libraries/base/Data-Bits.html#t%3ABits"
+>Bits</A
+> a =&gt; <A HREF="Data-Ring-Module.html#t%3ARightModule"
+>RightModule</A
+> Integer (<A HREF="Data-Ring-Boolean.html#t%3ABoolean"
+>Boolean</A
+> a)</TD
+></TR
+><TR
+><TD CLASS="decl"
+><A HREF="/usr/local/share/doc/ghc/libraries/base/Data-Bits.html#t%3ABits"
+>Bits</A
+> a =&gt; <A HREF="Data-Ring-Module.html#t%3ARightModule"
+>RightModule</A
+> <A HREF="Data-Ring-Semi-Natural.html#t%3ANatural"
+>Natural</A
+> (<A HREF="Data-Ring-Boolean.html#t%3ABoolean"
+>Boolean</A
+> a)</TD
+></TR
+><TR
+><TD CLASS="decl"
+><A HREF="/usr/local/share/doc/ghc/libraries/base/Data-Bits.html#t%3ABits"
+>Bits</A
+> a =&gt; <A HREF="Data-Ring-Module.html#t%3ALeftModule"
+>LeftModule</A
+> Integer (<A HREF="Data-Ring-Boolean.html#t%3ABoolean"
+>Boolean</A
+> a)</TD
+></TR
+><TR
+><TD CLASS="decl"
+><A HREF="/usr/local/share/doc/ghc/libraries/base/Data-Bits.html#t%3ABits"
+>Bits</A
+> a =&gt; <A HREF="Data-Ring-Module.html#t%3ALeftModule"
+>LeftModule</A
+> <A HREF="Data-Ring-Semi-Natural.html#t%3ANatural"
+>Natural</A
+> (<A HREF="Data-Ring-Boolean.html#t%3ABoolean"
+>Boolean</A
+> a)</TD
+></TR
+><TR
+><TD CLASS="decl"
+><A HREF="/usr/local/share/doc/ghc/libraries/base/Data-Bits.html#t%3ABits"
+>Bits</A
+> a =&gt; <A HREF="Data-Ring-Module.html#t%3AModule"
+>Module</A
+> Integer (<A HREF="Data-Ring-Boolean.html#t%3ABoolean"
+>Boolean</A
+> a)</TD
+></TR
+><TR
+><TD CLASS="decl"
+><A HREF="/usr/local/share/doc/ghc/libraries/base/Data-Bits.html#t%3ABits"
+>Bits</A
+> a =&gt; <A HREF="Data-Ring-Module.html#t%3AModule"
+>Module</A
+> <A HREF="Data-Ring-Semi-Natural.html#t%3ANatural"
+>Natural</A
+> (<A HREF="Data-Ring-Boolean.html#t%3ABoolean"
+>Boolean</A
+> a)</TD
+></TR
+><TR
+><TD CLASS="decl"
hunk ./doc/html/monoids/Data-Ring-Boolean.html 313
-> <A HREF="Data-Ring-Boolean.html#t%3ABoolRing"
->BoolRing</A
-></TD
+> a =&gt; <A HREF="/usr/local/share/doc/ghc/libraries/base/Data-Eq.html#t%3AEq"
+>Eq</A
+> (<A HREF="Data-Ring-Boolean.html#t%3ABoolean"
+>Boolean</A
+> a)</TD
hunk ./doc/html/monoids/Data-Ring-Boolean.html 323
-> <A HREF="Data-Ring-Boolean.html#t%3ABoolRing"
->BoolRing</A
-></TD
+> a =&gt; <A HREF="/usr/local/share/doc/ghc/libraries/base/Data-Ord.html#t%3AOrd"
+>Ord</A
+> (<A HREF="Data-Ring-Boolean.html#t%3ABoolean"
+>Boolean</A
+> a)</TD
hunk ./doc/html/monoids/Data-Ring-Boolean.html 333
-> <A HREF="Data-Ring-Boolean.html#t%3ABoolRing"
->BoolRing</A
-></TD
+> a =&gt; <A HREF="/usr/local/share/doc/ghc/libraries/base/Text-Read.html#t%3ARead"
+>Read</A
+> (<A HREF="Data-Ring-Boolean.html#t%3ABoolean"
+>Boolean</A
+> a)</TD
hunk ./doc/html/monoids/Data-Ring-Boolean.html 343
-> <A HREF="Data-Ring-Boolean.html#t%3ABoolRing"
->BoolRing</A
-></TD
+> a =&gt; <A HREF="/usr/local/share/doc/ghc/libraries/base/Text-Show.html#t%3AShow"
+>Show</A
+> (<A HREF="Data-Ring-Boolean.html#t%3ABoolean"
+>Boolean</A
+> a)</TD
hunk ./doc/html/monoids/Data-Ring-Boolean.html 351
-><A HREF="/usr/local/share/doc/ghc/libraries/base/Data-Monoid.html#t%3AMonoid"
+><A HREF="/usr/local/share/doc/ghc/libraries/base/Data-Bits.html#t%3ABits"
+>Bits</A
+> a =&gt; <A HREF="/usr/local/share/doc/ghc/libraries/base/Data-Monoid.html#t%3AMonoid"
hunk ./doc/html/monoids/Data-Ring-Boolean.html 355
-> <A HREF="Data-Ring-Boolean.html#t%3ABoolRing"
->BoolRing</A
-></TD
+> (<A HREF="Data-Ring-Boolean.html#t%3ABoolean"
+>Boolean</A
+> a)</TD
hunk ./doc/html/monoids/Data-Ring-Boolean.html 361
->Arbitrary <A HREF="Data-Ring-Boolean.html#t%3ABoolRing"
->BoolRing</A
-></TD
+>Arbitrary a =&gt; Arbitrary (<A HREF="Data-Ring-Boolean.html#t%3ABoolean"
+>Boolean</A
+> a)</TD
hunk ./doc/html/monoids/Data-Ring-Boolean.html 367
->CoArbitrary <A HREF="Data-Ring-Boolean.html#t%3ABoolRing"
->BoolRing</A
-></TD
+>CoArbitrary a =&gt; CoArbitrary (<A HREF="Data-Ring-Boolean.html#t%3ABoolean"
+>Boolean</A
+> a)</TD
hunk ./doc/html/monoids/Data-Ring-Boolean.html 373
-><A HREF="Data-Monoid-Multiplicative.html#t%3AMultiplicative"
+><A HREF="/usr/local/share/doc/ghc/libraries/base/Data-Bits.html#t%3ABits"
+>Bits</A
+> a =&gt; <A HREF="Data-Monoid-Multiplicative.html#t%3AMultiplicative"
hunk ./doc/html/monoids/Data-Ring-Boolean.html 377
-> <A HREF="Data-Ring-Boolean.html#t%3ABoolRing"
->BoolRing</A
-></TD
+> (<A HREF="Data-Ring-Boolean.html#t%3ABoolean"
+>Boolean</A
+> a)</TD
hunk ./doc/html/monoids/Data-Ring-Boolean.html 383
-><A HREF="Data-Ring-Semi-Near.html#t%3ARightSemiNearRing"
+><A HREF="/usr/local/share/doc/ghc/libraries/base/Data-Bits.html#t%3ABits"
+>Bits</A
+> a =&gt; <A HREF="Data-Group.html#t%3AGroup"
+>Group</A
+> (<A HREF="Data-Ring-Boolean.html#t%3ABoolean"
+>Boolean</A
+> a)</TD
+></TR
+><TR
+><TD CLASS="decl"
+><A HREF="/usr/local/share/doc/ghc/libraries/base/Data-Bits.html#t%3ABits"
+>Bits</A
+> a =&gt; <A HREF="Data-Ring.html#t%3ARing"
+>Ring</A
+> (<A HREF="Data-Ring-Boolean.html#t%3ABoolean"
+>Boolean</A
+> a)</TD
+></TR
+><TR
+><TD CLASS="decl"
+><A HREF="/usr/local/share/doc/ghc/libraries/base/Data-Bits.html#t%3ABits"
+>Bits</A
+> a =&gt; <A HREF="Data-Ring.html#t%3ASemiRing"
+>SemiRing</A
+> (<A HREF="Data-Ring-Boolean.html#t%3ABoolean"
+>Boolean</A
+> a)</TD
+></TR
+><TR
+><TD CLASS="decl"
+><A HREF="/usr/local/share/doc/ghc/libraries/base/Data-Bits.html#t%3ABits"
+>Bits</A
+> a =&gt; <A HREF="Data-Ring.html#t%3ARightSemiNearRing"
hunk ./doc/html/monoids/Data-Ring-Boolean.html 417
-> <A HREF="Data-Ring-Boolean.html#t%3ABoolRing"
->BoolRing</A
-></TD
+> (<A HREF="Data-Ring-Boolean.html#t%3ABoolean"
+>Boolean</A
+> a)</TD
hunk ./doc/html/monoids/Data-Ring-Boolean.html 423
-><A HREF="Data-Ring-Semi-Near.html#t%3ALeftSemiNearRing"
+><A HREF="/usr/local/share/doc/ghc/libraries/base/Data-Bits.html#t%3ABits"
+>Bits</A
+> a =&gt; <A HREF="Data-Ring.html#t%3ALeftSemiNearRing"
hunk ./doc/html/monoids/Data-Ring-Boolean.html 427
-> <A HREF="Data-Ring-Boolean.html#t%3ABoolRing"
->BoolRing</A
-></TD
+> (<A HREF="Data-Ring-Boolean.html#t%3ABoolean"
+>Boolean</A
+> a)</TD
hunk ./doc/html/monoids/Data-Ring-Boolean.html 433
-><A HREF="Data-Ring-Semi-Near.html#t%3ARingoid"
+><A HREF="/usr/local/share/doc/ghc/libraries/base/Data-Bits.html#t%3ABits"
+>Bits</A
+> a =&gt; <A HREF="Data-Ring.html#t%3ARingoid"
hunk ./doc/html/monoids/Data-Ring-Boolean.html 437
-> <A HREF="Data-Ring-Boolean.html#t%3ABoolRing"
->BoolRing</A
-></TD
+> (<A HREF="Data-Ring-Boolean.html#t%3ABoolean"
+>Boolean</A
+> a)</TD
hunk ./doc/html/monoids/Data-Ring-Boolean.html 443
-><A HREF="Data-Ring-Semi.html#t%3ASemiRing"
->SemiRing</A
-> <A HREF="Data-Ring-Boolean.html#t%3ABoolRing"
->BoolRing</A
-></TD
+><A HREF="/usr/local/share/doc/ghc/libraries/base/Data-Bits.html#t%3ABits"
+>Bits</A
+> a =&gt; <A HREF="Data-Ring-Module.html#t%3ANormed"
+>Normed</A
+> (<A HREF="Data-Ring-Boolean.html#t%3ABoolean"
+>Boolean</A
+> a) (<A HREF="Data-Ring-Boolean.html#t%3ABoolean"
+>Boolean</A
+> a)</TD
hunk ./doc/html/monoids/Data-Ring-Boolean.html 455
-><A HREF="Data-Group.html#t%3AGroup"
->Group</A
-> <A HREF="Data-Ring-Boolean.html#t%3ABoolRing"
->BoolRing</A
-></TD
+><A HREF="/usr/local/share/doc/ghc/libraries/base/Data-Bits.html#t%3ABits"
+>Bits</A
+> a =&gt; <A HREF="Data-Ring-Module.html#t%3ABimodule"
+>Bimodule</A
+> (<A HREF="Data-Ring-Boolean.html#t%3ABoolean"
+>Boolean</A
+> a) (<A HREF="Data-Ring-Boolean.html#t%3ABoolean"
+>Boolean</A
+> a)</TD
hunk ./doc/html/monoids/Data-Ring-Boolean.html 467
-><A HREF="Data-Ring.html#t%3ARing"
->Ring</A
-> <A HREF="Data-Ring-Boolean.html#t%3ABoolRing"
->BoolRing</A
-></TD
+><A HREF="/usr/local/share/doc/ghc/libraries/base/Data-Bits.html#t%3ABits"
+>Bits</A
+> a =&gt; <A HREF="Data-Ring-Module.html#t%3ARightModule"
+>RightModule</A
+> (<A HREF="Data-Ring-Boolean.html#t%3ABoolean"
+>Boolean</A
+> a) (<A HREF="Data-Ring-Boolean.html#t%3ABoolean"
+>Boolean</A
+> a)</TD
hunk ./doc/html/monoids/Data-Ring-Boolean.html 479
-><A HREF="Data-Monoid-Reducer.html#t%3AReducer"
->Reducer</A
-> <A HREF="/usr/local/share/doc/ghc/libraries/ghc-prim/GHC-Bool.html#t%3ABool"
->Bool</A
-> <A HREF="Data-Ring-Boolean.html#t%3ABoolRing"
->BoolRing</A
-></TD
+><A HREF="/usr/local/share/doc/ghc/libraries/base/Data-Bits.html#t%3ABits"
+>Bits</A
+> a =&gt; <A HREF="Data-Ring-Module.html#t%3ALeftModule"
+>LeftModule</A
+> (<A HREF="Data-Ring-Boolean.html#t%3ABoolean"
+>Boolean</A
+> a) (<A HREF="Data-Ring-Boolean.html#t%3ABoolean"
+>Boolean</A
+> a)</TD
+></TR
+><TR
+><TD CLASS="decl"
+><A HREF="/usr/local/share/doc/ghc/libraries/base/Data-Bits.html#t%3ABits"
+>Bits</A
+> a =&gt; <A HREF="Data-Ring-Module.html#t%3AModule"
+>Module</A
+> (<A HREF="Data-Ring-Boolean.html#t%3ABoolean"
+>Boolean</A
+> a) (<A HREF="Data-Ring-Boolean.html#t%3ABoolean"
+>Boolean</A
+> a)</TD
hunk ./doc/html/monoids/Data-Ring-FromNum.html 22
->monoids-0.1.33: Monoids, specialized containers and a general map/reduce framework</TD
+>monoids-0.1.35: Monoids, specialized containers and a general map/reduce framework</TD
hunk ./doc/html/monoids/Data-Ring-FromNum.html 265
-> a =&gt; <A HREF="Data-Ring-Semi-Near.html#t%3ARightSemiNearRing"
->RightSemiNearRing</A
+> a =&gt; <A HREF="Data-Group.html#t%3AGroup"
+>Group</A
hunk ./doc/html/monoids/Data-Ring-FromNum.html 275
-> a =&gt; <A HREF="Data-Ring-Semi-Near.html#t%3ALeftSemiNearRing"
->LeftSemiNearRing</A
+> a =&gt; <A HREF="Data-Ring.html#t%3ARing"
+>Ring</A
hunk ./doc/html/monoids/Data-Ring-FromNum.html 285
-> a =&gt; <A HREF="Data-Ring-Semi-Near.html#t%3ARingoid"
->Ringoid</A
+> a =&gt; <A HREF="Data-Ring.html#t%3ASemiRing"
+>SemiRing</A
hunk ./doc/html/monoids/Data-Ring-FromNum.html 295
-> a =&gt; <A HREF="Data-Ring-Semi.html#t%3ASemiRing"
->SemiRing</A
+> a =&gt; <A HREF="Data-Ring.html#t%3ARightSemiNearRing"
+>RightSemiNearRing</A
hunk ./doc/html/monoids/Data-Ring-FromNum.html 305
-> a =&gt; <A HREF="Data-Group.html#t%3AGroup"
->Group</A
+> a =&gt; <A HREF="Data-Ring.html#t%3ALeftSemiNearRing"
+>LeftSemiNearRing</A
hunk ./doc/html/monoids/Data-Ring-FromNum.html 315
-> a =&gt; <A HREF="Data-Ring.html#t%3ARing"
->Ring</A
+> a =&gt; <A HREF="Data-Ring.html#t%3ARingoid"
+>Ringoid</A
hunk ./doc/html/monoids/Data-Ring-ModularArithmetic.html 22
->monoids-0.1.33: Monoids, specialized containers and a general map/reduce framework</TD
+>monoids-0.1.35: Monoids, specialized containers and a general map/reduce framework</TD
hunk ./doc/html/monoids/Data-Ring-ModularArithmetic.html 205
-> a) =&gt; <A HREF="Data-Ring-Semi-Near.html#t%3ARightSemiNearRing"
->RightSemiNearRing</A
+> a) =&gt; <A HREF="Data-Group.html#t%3AGroup"
+>Group</A
hunk ./doc/html/monoids/Data-Ring-ModularArithmetic.html 217
-> a) =&gt; <A HREF="Data-Ring-Semi-Near.html#t%3ALeftSemiNearRing"
->LeftSemiNearRing</A
+> a) =&gt; <A HREF="Data-Ring.html#t%3ARing"
+>Ring</A
hunk ./doc/html/monoids/Data-Ring-ModularArithmetic.html 229
-> a) =&gt; <A HREF="Data-Ring-Semi-Near.html#t%3ARingoid"
->Ringoid</A
+> a) =&gt; <A HREF="Data-Ring.html#t%3ASemiRing"
+>SemiRing</A
hunk ./doc/html/monoids/Data-Ring-ModularArithmetic.html 241
-> a) =&gt; <A HREF="Data-Ring-Semi.html#t%3ASemiRing"
->SemiRing</A
+> a) =&gt; <A HREF="Data-Ring.html#t%3ARightSemiNearRing"
+>RightSemiNearRing</A
hunk ./doc/html/monoids/Data-Ring-ModularArithmetic.html 253
-> a) =&gt; <A HREF="Data-Group.html#t%3AGroup"
->Group</A
+> a) =&gt; <A HREF="Data-Ring.html#t%3ALeftSemiNearRing"
+>LeftSemiNearRing</A
hunk ./doc/html/monoids/Data-Ring-ModularArithmetic.html 265
-> a) =&gt; <A HREF="Data-Ring.html#t%3ARing"
->Ring</A
+> a) =&gt; <A HREF="Data-Ring.html#t%3ARingoid"
+>Ringoid</A
hunk ./doc/html/monoids/Data-Ring-Module-AutomaticDifferentiation.html 22
->monoids-0.1.33: Monoids, specialized containers and a general map/reduce framework</TD
+>monoids-0.1.35: Monoids, specialized containers and a general map/reduce framework</TD
hunk ./doc/html/monoids/Data-Ring-Module-AutomaticDifferentiation.html 145
->(<A HREF="Data-Ring-Module.html#t%3AModule"
->Module</A
+>(<A HREF="Data-Ring-Module.html#t%3ABimodule"
+>Bimodule</A
hunk ./doc/html/monoids/Data-Ring-Module-AutomaticDifferentiation.html 223
-><A HREF="Data-Ring-Module.html#t%3AModule"
->Module</A
+><A HREF="Data-Ring-Module.html#t%3ABimodule"
+>Bimodule</A
hunk ./doc/html/monoids/Data-Ring-Module-AutomaticDifferentiation.html 245
-><A HREF="Data-Ring-Module.html#t%3AModule"
->Module</A
+><A HREF="Data-Ring-Module.html#t%3ABimodule"
+>Bimodule</A
hunk ./doc/html/monoids/Data-Ring-Module-AutomaticDifferentiation.html 255
->(<A HREF="Data-Ring-Semi-Near.html#t%3ARightSemiNearRing"
->RightSemiNearRing</A
-> r, <A HREF="Data-Ring-Module.html#t%3AModule"
->Module</A
-> r m) =&gt; <A HREF="Data-Ring-Semi-Near.html#t%3ARightSemiNearRing"
->RightSemiNearRing</A
+>(<A HREF="Data-Group.html#t%3AGroup"
+>Group</A
+> r, <A HREF="Data-Ring-Module.html#t%3ABimodule"
+>Bimodule</A
+> r m, <A HREF="Data-Group.html#t%3AGroup"
+>Group</A
+> m) =&gt; <A HREF="Data-Group.html#t%3AGroup"
+>Group</A
hunk ./doc/html/monoids/Data-Ring-Module-AutomaticDifferentiation.html 269
->(<A HREF="Data-Ring-Semi-Near.html#t%3ALeftSemiNearRing"
->LeftSemiNearRing</A
-> r, <A HREF="Data-Ring-Module.html#t%3AModule"
->Module</A
-> r m) =&gt; <A HREF="Data-Ring-Semi-Near.html#t%3ALeftSemiNearRing"
->LeftSemiNearRing</A
+>(<A HREF="Data-Ring.html#t%3ARing"
+>Ring</A
+> r, <A HREF="Data-Ring-Module.html#t%3ABimodule"
+>Bimodule</A
+> r m, <A HREF="Data-Group.html#t%3AGroup"
+>Group</A
+> m) =&gt; <A HREF="Data-Ring.html#t%3ARing"
+>Ring</A
hunk ./doc/html/monoids/Data-Ring-Module-AutomaticDifferentiation.html 283
->(<A HREF="Data-Ring-Semi-Near.html#t%3ARingoid"
->Ringoid</A
-> r, <A HREF="Data-Ring-Module.html#t%3AModule"
->Module</A
-> r m) =&gt; <A HREF="Data-Ring-Semi-Near.html#t%3ARingoid"
->Ringoid</A
+>(<A HREF="Data-Ring.html#t%3ASemiRing"
+>SemiRing</A
+> r, <A HREF="Data-Ring-Module.html#t%3ABimodule"
+>Bimodule</A
+> r m) =&gt; <A HREF="Data-Ring.html#t%3ASemiRing"
+>SemiRing</A
hunk ./doc/html/monoids/Data-Ring-Module-AutomaticDifferentiation.html 295
->(<A HREF="Data-Ring-Semi.html#t%3ASemiRing"
->SemiRing</A
-> r, <A HREF="Data-Ring-Module.html#t%3AModule"
->Module</A
-> r m) =&gt; <A HREF="Data-Ring-Semi.html#t%3ASemiRing"
->SemiRing</A
+>(<A HREF="Data-Ring.html#t%3ARightSemiNearRing"
+>RightSemiNearRing</A
+> r, <A HREF="Data-Ring-Module.html#t%3ABimodule"
+>Bimodule</A
+> r m) =&gt; <A HREF="Data-Ring.html#t%3ARightSemiNearRing"
+>RightSemiNearRing</A
hunk ./doc/html/monoids/Data-Ring-Module-AutomaticDifferentiation.html 307
->(<A HREF="Data-Group.html#t%3AGroup"
->Group</A
-> r, <A HREF="Data-Ring-Module.html#t%3AModule"
->Module</A
-> r m, <A HREF="Data-Group.html#t%3AGroup"
->Group</A
-> m) =&gt; <A HREF="Data-Group.html#t%3AGroup"
->Group</A
+>(<A HREF="Data-Ring.html#t%3ALeftSemiNearRing"
+>LeftSemiNearRing</A
+> r, <A HREF="Data-Ring-Module.html#t%3ABimodule"
+>Bimodule</A
+> r m) =&gt; <A HREF="Data-Ring.html#t%3ALeftSemiNearRing"
+>LeftSemiNearRing</A
hunk ./doc/html/monoids/Data-Ring-Module-AutomaticDifferentiation.html 319
->(<A HREF="Data-Ring.html#t%3ARing"
->Ring</A
-> r, <A HREF="Data-Ring-Module.html#t%3AModule"
->Module</A
-> r m, <A HREF="Data-Group.html#t%3AGroup"
->Group</A
-> m) =&gt; <A HREF="Data-Ring.html#t%3ARing"
->Ring</A
+>(<A HREF="Data-Ring.html#t%3ARingoid"
+>Ringoid</A
+> r, <A HREF="Data-Ring-Module.html#t%3ABimodule"
+>Bimodule</A
+> r m) =&gt; <A HREF="Data-Ring.html#t%3ARingoid"
+>Ringoid</A
hunk ./doc/html/monoids/Data-Ring-Module-AutomaticDifferentiation.html 349
-> :: (<A HREF="Data-Ring-Module.html#t%3AModule"
->Module</A
-> r m, <A HREF="Data-Ring-Semi-Near.html#t%3ARingoid"
+> :: (<A HREF="Data-Ring-Module.html#t%3ABimodule"
+>Bimodule</A
+> r m, <A HREF="Data-Ring.html#t%3ARingoid"
hunk ./doc/html/monoids/Data-Ring-Module-AutomaticDifferentiation.html 381
-> :: <A HREF="Data-Ring-Module.html#t%3AModule"
->Module</A
+> :: <A HREF="Data-Ring-Module.html#t%3ABimodule"
+>Bimodule</A
hunk ./doc/html/monoids/Data-Ring-Module.html 22
->monoids-0.1.33: Monoids, specialized containers and a general map/reduce framework</TD
+>monoids-0.1.35: Monoids, specialized containers and a general map/reduce framework</TD
hunk ./doc/html/monoids/Data-Ring-Module.html 78
+><TD
+><TABLE CLASS="vanilla" CELLSPACING="0" CELLPADDING="0"
+><TR
+><TD CLASS="section4"
+><B
+>Contents</B
+></TD
+></TR
+><TR
+><TD
+><DL
+><DT
+><A HREF="#1"
+>R-Modules
+</A
+></DT
+><DT
+><A HREF="#2"
+>R-Normed Modules
+</A
+></DT
+><DT
+><A HREF="#3"
+>Vector Spaces
+</A
+></DT
+><DT
+><A HREF="#4"
+>R-Algebras
+</A
+></DT
+></DL
+></TD
+></TR
+></TABLE
+></TD
+></TR
+><TR
+><TD CLASS="s15"
+></TD
+></TR
+><TR
hunk ./doc/html/monoids/Data-Ring-Module.html 163
-> (<A HREF="/usr/local/share/doc/ghc/libraries/base/Data-Monoid.html#t%3AMonoid"
->Monoid</A
-> r, <A HREF="Data-Monoid-Multiplicative.html#t%3AMultiplicative"
->Multiplicative</A
+> (<A HREF="Data-Ring.html#t%3ARingoid"
+>Ringoid</A
hunk ./doc/html/monoids/Data-Ring-Module.html 167
-> m) =&gt; <A HREF="#t%3ALeftModule"
+> m) =&gt; <A HREF="#t%3AModule"
+>Module</A
+> r m </TD
+></TR
+><TR
+><TD CLASS="s8"
+></TD
+></TR
+><TR
+><TD CLASS="decl"
+><SPAN CLASS="keyword"
+>class</SPAN
+> <A HREF="Data-Ring-Module.html#t%3AModule"
+>Module</A
+> r m =&gt; <A HREF="#t%3ALeftModule"
hunk ./doc/html/monoids/Data-Ring-Module.html 219
-> (<A HREF="/usr/local/share/doc/ghc/libraries/base/Data-Monoid.html#t%3AMonoid"
->Monoid</A
-> r, <A HREF="Data-Monoid-Multiplicative.html#t%3AMultiplicative"
->Multiplicative</A
-> r, <A HREF="/usr/local/share/doc/ghc/libraries/base/Data-Monoid.html#t%3AMonoid"
->Monoid</A
-> m) =&gt; <A HREF="#t%3ARightModule"
+> <A HREF="Data-Ring-Module.html#t%3AModule"
+>Module</A
+> r m =&gt; <A HREF="#t%3ARightModule"
hunk ./doc/html/monoids/Data-Ring-Module.html 263
-> r m) =&gt; <A HREF="#t%3AModule"
+> r m) =&gt; <A HREF="#t%3ABimodule"
+>Bimodule</A
+> r m </TD
+></TR
+><TR
+><TD CLASS="s8"
+></TD
+></TR
+><TR
+><TD CLASS="decl"
+><SPAN CLASS="keyword"
+>class</SPAN
+> <A HREF="Data-Ring-Module.html#t%3AModule"
hunk ./doc/html/monoids/Data-Ring-Module.html 277
+> r m =&gt; <A HREF="#t%3ANormed"
+>Normed</A
+> r m  <SPAN CLASS="keyword"
+>where</SPAN
+></TD
+></TR
+><TR
+><TD CLASS="body"
+><TABLE CLASS="vanilla" CELLSPACING="0" CELLPADDING="0"
+><TR
+><TD CLASS="decl"
+><A HREF="#v%3Amabs"
+>mabs</A
+> :: m -&gt; r</TD
+></TR
+></TABLE
+></TD
+></TR
+><TR
+><TD CLASS="s8"
+></TD
+></TR
+><TR
+><TD CLASS="decl"
+><A HREF="#v%3Amabs"
+>mabs</A
+> :: <A HREF="Data-Ring-Module.html#t%3ANormed"
+>Normed</A
+> r m =&gt; m -&gt; r</TD
+></TR
+><TR
+><TD CLASS="s8"
+></TD
+></TR
+><TR
+><TD CLASS="decl"
+><SPAN CLASS="keyword"
+>class</SPAN
+> (<A HREF="Data-Ring.html#t%3AField"
+>Field</A
+> f, <A HREF="Data-Ring-Module.html#t%3AModule"
+>Module</A
+> f g) =&gt; <A HREF="#t%3AVectorSpace"
+>VectorSpace</A
+> f g </TD
+></TR
+><TR
+><TD CLASS="s8"
+></TD
+></TR
+><TR
+><TD CLASS="decl"
+><SPAN CLASS="keyword"
+>class</SPAN
+> (<A HREF="Data-Ring-Module.html#t%3ABimodule"
+>Bimodule</A
+> r m, <A HREF="Data-Monoid-Multiplicative.html#t%3AMultiplicative"
+>Multiplicative</A
+> m) =&gt; <A HREF="#t%3AAlgebra"
+>Algebra</A
hunk ./doc/html/monoids/Data-Ring-Module.html 365
+><TD CLASS="section1"
+><A NAME="1"
+>R-Modules
+</A
+></TD
+></TR
+><TR
+><TD CLASS="s15"
+></TD
+></TR
+><TR
hunk ./doc/html/monoids/Data-Ring-Module.html 382
-> (<A HREF="/usr/local/share/doc/ghc/libraries/base/Data-Monoid.html#t%3AMonoid"
+> (<A HREF="Data-Ring.html#t%3ARingoid"
+>Ringoid</A
+> r, <A HREF="/usr/local/share/doc/ghc/libraries/base/Data-Monoid.html#t%3AMonoid"
hunk ./doc/html/monoids/Data-Ring-Module.html 386
-> r, <A HREF="Data-Monoid-Multiplicative.html#t%3AMultiplicative"
+> m) =&gt; <A NAME="t%3AModule"
+></A
+><B
+>Module</B
+> r m </TD
+><TD CLASS="declbut"
+><A HREF="src/Data-Ring-Module.html#Module"
+>Source</A
+></TD
+></TR
+></TABLE
+></TD
+></TR
+><TR
+><TD CLASS="body"
+><TABLE CLASS="vanilla" CELLSPACING="0" CELLPADDING="0"
+><TR
+><TD CLASS="s8"
+></TD
+></TR
+><TR
+><TD CLASS="section4"
+><IMG SRC="minus.gif" CLASS="coll" ONCLICK="toggle(this,'i:Module')" ALT="show/hide"
+> Instances</TD
+></TR
+><TR
+><TD CLASS="body"
+><DIV ID="i:Module" STYLE="display:block;"
+><TABLE CLASS="vanilla" CELLSPACING="1" CELLPADDING="0"
+><TR
+><TD CLASS="decl"
+><A HREF="Data-Ring-Module.html#t%3AModule"
+>Module</A
+> <A HREF="Data-Ring-Semi-Natural.html#t%3ANatural"
+>Natural</A
+> <A HREF="/usr/local/share/doc/ghc/libraries/ghc-prim/GHC-Ordering.html#t%3AOrdering"
+>Ordering</A
+></TD
+></TR
+><TR
+><TD CLASS="decl"
+><A HREF="Data-Ring-Module.html#t%3AModule"
+>Module</A
+> <A HREF="Data-Ring-Semi-Natural.html#t%3ANatural"
+>Natural</A
+> <A HREF="/usr/local/share/doc/ghc/libraries/ghc-prim/GHC-Ordering.html#t%3AOrdering"
+>Ordering</A
+></TD
+></TR
+><TR
+><TD CLASS="decl"
+><A HREF="Data-Ring-Module.html#t%3AModule"
+>Module</A
+> <A HREF="Data-Ring-Semi-Natural.html#t%3ANatural"
+>Natural</A
+> ()</TD
+></TR
+><TR
+><TD CLASS="decl"
+><A HREF="Data-Ring-Module.html#t%3AModule"
+>Module</A
+> <A HREF="Data-Ring-Semi-Natural.html#t%3ANatural"
+>Natural</A
+> ()</TD
+></TR
+><TR
+><TD CLASS="decl"
+><A HREF="Data-Ring-Module.html#t%3AModule"
+>Module</A
+> <A HREF="Data-Ring-Semi-Natural.html#t%3ANatural"
+>Natural</A
+> <A HREF="/usr/local/share/doc/ghc/libraries/base/Data-Monoid.html#t%3AAll"
+>All</A
+></TD
+></TR
+><TR
+><TD CLASS="decl"
+><A HREF="Data-Ring-Module.html#t%3AModule"
+>Module</A
+> <A HREF="Data-Ring-Semi-Natural.html#t%3ANatural"
+>Natural</A
+> <A HREF="/usr/local/share/doc/ghc/libraries/base/Data-Monoid.html#t%3AAll"
+>All</A
+></TD
+></TR
+><TR
+><TD CLASS="decl"
+><A HREF="Data-Ring-Module.html#t%3AModule"
+>Module</A
+> <A HREF="Data-Ring-Semi-Natural.html#t%3ANatural"
+>Natural</A
+> <A HREF="/usr/local/share/doc/ghc/libraries/base/Data-Monoid.html#t%3AAny"
+>Any</A
+></TD
+></TR
+><TR
+><TD CLASS="decl"
+><A HREF="Data-Ring-Module.html#t%3AModule"
+>Module</A
+> <A HREF="Data-Ring-Semi-Natural.html#t%3ANatural"
+>Natural</A
+> <A HREF="/usr/local/share/doc/ghc/libraries/base/Data-Monoid.html#t%3AAny"
+>Any</A
+></TD
+></TR
+><TR
+><TD CLASS="decl"
+><A HREF="/usr/local/share/doc/ghc/libraries/base/Data-Bits.html#t%3ABits"
+>Bits</A
+> a =&gt; <A HREF="Data-Ring-Module.html#t%3AModule"
+>Module</A
+> Integer (<A HREF="Data-Ring-Boolean.html#t%3ABoolean"
+>Boolean</A
+> a)</TD
+></TR
+><TR
+><TD CLASS="decl"
+><A HREF="/usr/local/share/doc/ghc/libraries/base/Data-Bits.html#t%3ABits"
+>Bits</A
+> a =&gt; <A HREF="Data-Ring-Module.html#t%3AModule"
+>Module</A
+> Integer (<A HREF="Data-Ring-Boolean.html#t%3ABoolean"
+>Boolean</A
+> a)</TD
+></TR
+><TR
+><TD CLASS="decl"
+><A HREF="Data-Ring-Module.html#t%3AModule"
+>Module</A
+> <A HREF="Data-Ring-Semi-Natural.html#t%3ANatural"
+>Natural</A
+> ([] a)</TD
+></TR
+><TR
+><TD CLASS="decl"
+><A HREF="Data-Ring-Module.html#t%3AModule"
+>Module</A
+> <A HREF="Data-Ring-Semi-Natural.html#t%3ANatural"
+>Natural</A
+> ([] a)</TD
+></TR
+><TR
+><TD CLASS="decl"
+><A HREF="/usr/local/share/doc/ghc/libraries/base/Data-Monoid.html#t%3AMonoid"
+>Monoid</A
+> m =&gt; <A HREF="Data-Ring-Module.html#t%3AModule"
+>Module</A
+> <A HREF="Data-Ring-Semi-Natural.html#t%3ANatural"
+>Natural</A
+> (<A HREF="/usr/local/share/doc/ghc/libraries/base/Data-Monoid.html#t%3ADual"
+>Dual</A
+> m)</TD
+></TR
+><TR
+><TD CLASS="decl"
+><A HREF="/usr/local/share/doc/ghc/libraries/base/Data-Monoid.html#t%3AMonoid"
+>Monoid</A
+> m =&gt; <A HREF="Data-Ring-Module.html#t%3AModule"
+>Module</A
+> <A HREF="Data-Ring-Semi-Natural.html#t%3ANatural"
+>Natural</A
+> (<A HREF="/usr/local/share/doc/ghc/libraries/base/Data-Monoid.html#t%3ADual"
+>Dual</A
+> m)</TD
+></TR
+><TR
+><TD CLASS="decl"
+><A HREF="Data-Ring-Module.html#t%3AModule"
+>Module</A
+> <A HREF="Data-Ring-Semi-Natural.html#t%3ANatural"
+>Natural</A
+> (<A HREF="/usr/local/share/doc/ghc/libraries/base/Data-Monoid.html#t%3AEndo"
+>Endo</A
+> a)</TD
+></TR
+><TR
+><TD CLASS="decl"
+><A HREF="Data-Ring-Module.html#t%3AModule"
+>Module</A
+> <A HREF="Data-Ring-Semi-Natural.html#t%3ANatural"
+>Natural</A
+> (<A HREF="/usr/local/share/doc/ghc/libraries/base/Data-Monoid.html#t%3AEndo"
+>Endo</A
+> a)</TD
+></TR
+><TR
+><TD CLASS="decl"
+><A HREF="/usr/local/share/doc/ghc/libraries/base/Prelude.html#t%3ANum"
+>Num</A
+> a =&gt; <A HREF="Data-Ring-Module.html#t%3AModule"
+>Module</A
+> <A HREF="Data-Ring-Semi-Natural.html#t%3ANatural"
+>Natural</A
+> (<A HREF="/usr/local/share/doc/ghc/libraries/base/Data-Monoid.html#t%3ASum"
+>Sum</A
+> a)</TD
+></TR
+><TR
+><TD CLASS="decl"
+><A HREF="/usr/local/share/doc/ghc/libraries/base/Prelude.html#t%3ANum"
+>Num</A
+> a =&gt; <A HREF="Data-Ring-Module.html#t%3AModule"
+>Module</A
+> <A HREF="Data-Ring-Semi-Natural.html#t%3ANatural"
+>Natural</A
+> (<A HREF="/usr/local/share/doc/ghc/libraries/base/Data-Monoid.html#t%3ASum"
+>Sum</A
+> a)</TD
+></TR
+><TR
+><TD CLASS="decl"
+><A HREF="/usr/local/share/doc/ghc/libraries/base/Prelude.html#t%3ANum"
+>Num</A
+> a =&gt; <A HREF="Data-Ring-Module.html#t%3AModule"
+>Module</A
+> <A HREF="Data-Ring-Semi-Natural.html#t%3ANatural"
+>Natural</A
+> (<A HREF="/usr/local/share/doc/ghc/libraries/base/Data-Monoid.html#t%3AProduct"
+>Product</A
+> a)</TD
+></TR
+><TR
+><TD CLASS="decl"
+><A HREF="/usr/local/share/doc/ghc/libraries/base/Prelude.html#t%3ANum"
+>Num</A
+> a =&gt; <A HREF="Data-Ring-Module.html#t%3AModule"
+>Module</A
+> <A HREF="Data-Ring-Semi-Natural.html#t%3ANatural"
+>Natural</A
+> (<A HREF="/usr/local/share/doc/ghc/libraries/base/Data-Monoid.html#t%3AProduct"
+>Product</A
+> a)</TD
+></TR
+><TR
+><TD CLASS="decl"
+><A HREF="Data-Ring-Module.html#t%3AModule"
+>Module</A
+> <A HREF="Data-Ring-Semi-Natural.html#t%3ANatural"
+>Natural</A
+> (<A HREF="/usr/local/share/doc/ghc/libraries/base/Data-Monoid.html#t%3AFirst"
+>First</A
+> a)</TD
+></TR
+><TR
+><TD CLASS="decl"
+><A HREF="Data-Ring-Module.html#t%3AModule"
+>Module</A
+> <A HREF="Data-Ring-Semi-Natural.html#t%3ANatural"
+>Natural</A
+> (<A HREF="/usr/local/share/doc/ghc/libraries/base/Data-Monoid.html#t%3AFirst"
+>First</A
+> a)</TD
+></TR
+><TR
+><TD CLASS="decl"
+><A HREF="Data-Ring-Module.html#t%3AModule"
+>Module</A
+> <A HREF="Data-Ring-Semi-Natural.html#t%3ANatural"
+>Natural</A
+> (<A HREF="/usr/local/share/doc/ghc/libraries/base/Data-Monoid.html#t%3ALast"
+>Last</A
+> a)</TD
+></TR
+><TR
+><TD CLASS="decl"
+><A HREF="Data-Ring-Module.html#t%3AModule"
+>Module</A
+> <A HREF="Data-Ring-Semi-Natural.html#t%3ANatural"
+>Natural</A
+> (<A HREF="/usr/local/share/doc/ghc/libraries/base/Data-Monoid.html#t%3ALast"
+>Last</A
+> a)</TD
+></TR
+><TR
+><TD CLASS="decl"
+><A HREF="Data-Monoid-Reducer-Char.html#t%3ACharReducer"
+>CharReducer</A
+> m =&gt; <A HREF="Data-Ring-Module.html#t%3AModule"
+>Module</A
+> <A HREF="Data-Ring-Semi-Natural.html#t%3ANatural"
+>Natural</A
+> (<A HREF="Data-Monoid-Lexical-UTF8-Decoder.html#t%3AUTF8"
+>UTF8</A
+> m)</TD
+></TR
+><TR
+><TD CLASS="decl"
+><A HREF="Data-Monoid-Reducer-Char.html#t%3ACharReducer"
+>CharReducer</A
+> m =&gt; <A HREF="Data-Ring-Module.html#t%3AModule"
+>Module</A
+> <A HREF="Data-Ring-Semi-Natural.html#t%3ANatural"
+>Natural</A
+> (<A HREF="Data-Monoid-Lexical-UTF8-Decoder.html#t%3AUTF8"
+>UTF8</A
+> m)</TD
+></TR
+><TR
+><TD CLASS="decl"
+><A HREF="Data-Ring-Module.html#t%3AModule"
+>Module</A
+> <A HREF="Data-Ring-Semi-Natural.html#t%3ANatural"
+>Natural</A
+> (<A HREF="Data-Monoid-Lexical-SourcePosition.html#t%3ASourcePosition"
+>SourcePosition</A
+> f)</TD
+></TR
+><TR
+><TD CLASS="decl"
+><A HREF="Data-Ring-Module.html#t%3AModule"
+>Module</A
+> <A HREF="Data-Ring-Semi-Natural.html#t%3ANatural"
+>Natural</A
+> (<A HREF="Data-Monoid-Lexical-SourcePosition.html#t%3ASourcePosition"
+>SourcePosition</A
+> f)</TD
+></TR
+><TR
+><TD CLASS="decl"
+><A HREF="/usr/local/share/doc/ghc/libraries/base/Data-Monoid.html#t%3AMonoid"
+>Monoid</A
+> m =&gt; <A HREF="Data-Ring-Module.html#t%3AModule"
+>Module</A
+> <A HREF="Data-Ring-Semi-Natural.html#t%3ANatural"
+>Natural</A
+> (<A HREF="Data-Monoid-Self.html#t%3ASelf"
+>Self</A
+> m)</TD
+></TR
+><TR
+><TD CLASS="decl"
+><A HREF="/usr/local/share/doc/ghc/libraries/base/Data-Monoid.html#t%3AMonoid"
+>Monoid</A
+> m =&gt; <A HREF="Data-Ring-Module.html#t%3AModule"
+>Module</A
+> <A HREF="Data-Ring-Semi-Natural.html#t%3ANatural"
+>Natural</A
+> (<A HREF="Data-Monoid-Self.html#t%3ASelf"
+>Self</A
+> m)</TD
+></TR
+><TR
+><TD CLASS="decl"
+><A HREF="/usr/local/share/doc/ghc/libraries/base/Data-Monoid.html#t%3AMonoid"
+>Monoid</A
+> m =&gt; <A HREF="Data-Ring-Module.html#t%3AModule"
+>Module</A
+> <A HREF="Data-Ring-Semi-Natural.html#t%3ANatural"
+>Natural</A
+> (<A HREF="Data-Monoid-FromString.html#t%3AFromString"
+>FromString</A
+> m)</TD
+></TR
+><TR
+><TD CLASS="decl"
+><A HREF="/usr/local/share/doc/ghc/libraries/base/Data-Monoid.html#t%3AMonoid"
+>Monoid</A
+> m =&gt; <A HREF="Data-Ring-Module.html#t%3AModule"
+>Module</A
+> <A HREF="Data-Ring-Semi-Natural.html#t%3ANatural"
+>Natural</A
+> (<A HREF="Data-Monoid-FromString.html#t%3AFromString"
+>FromString</A
+> m)</TD
+></TR
+><TR
+><TD CLASS="decl"
+><A HREF="Data-Monoid-Multiplicative.html#t%3AMultiplicative"
hunk ./doc/html/monoids/Data-Ring-Module.html 755
-> r, <A HREF="/usr/local/share/doc/ghc/libraries/base/Data-Monoid.html#t%3AMonoid"
+> m =&gt; <A HREF="Data-Ring-Module.html#t%3AModule"
+>Module</A
+> <A HREF="Data-Ring-Semi-Natural.html#t%3ANatural"
+>Natural</A
+> (<A HREF="Data-Monoid-Multiplicative.html#t%3ALog"
+>Log</A
+> m)</TD
+></TR
+><TR
+><TD CLASS="decl"
+><A HREF="Data-Monoid-Multiplicative.html#t%3AMultiplicative"
+>Multiplicative</A
+> m =&gt; <A HREF="Data-Ring-Module.html#t%3AModule"
+>Module</A
+> <A HREF="Data-Ring-Semi-Natural.html#t%3ANatural"
+>Natural</A
+> (<A HREF="Data-Monoid-Multiplicative.html#t%3ALog"
+>Log</A
+> m)</TD
+></TR
+><TR
+><TD CLASS="decl"
+><A HREF="/usr/local/share/doc/ghc/libraries/base/Control-Applicative.html#t%3AApplicative"
+>Applicative</A
+> f =&gt; <A HREF="Data-Ring-Module.html#t%3AModule"
+>Module</A
+> <A HREF="Data-Ring-Semi-Natural.html#t%3ANatural"
+>Natural</A
+> (<A HREF="Data-Monoid-Applicative.html#t%3ATraversal"
+>Traversal</A
+> f)</TD
+></TR
+><TR
+><TD CLASS="decl"
+><A HREF="/usr/local/share/doc/ghc/libraries/base/Control-Applicative.html#t%3AApplicative"
+>Applicative</A
+> f =&gt; <A HREF="Data-Ring-Module.html#t%3AModule"
+>Module</A
+> <A HREF="Data-Ring-Semi-Natural.html#t%3ANatural"
+>Natural</A
+> (<A HREF="Data-Monoid-Applicative.html#t%3ATraversal"
+>Traversal</A
+> f)</TD
+></TR
+><TR
+><TD CLASS="decl"
+><A HREF="/usr/local/share/doc/ghc/libraries/base/Control-Monad.html#t%3AMonad"
+>Monad</A
+> f =&gt; <A HREF="Data-Ring-Module.html#t%3AModule"
+>Module</A
+> <A HREF="Data-Ring-Semi-Natural.html#t%3ANatural"
+>Natural</A
+> (<A HREF="Data-Monoid-Monad.html#t%3AAction"
+>Action</A
+> f)</TD
+></TR
+><TR
+><TD CLASS="decl"
+><A HREF="/usr/local/share/doc/ghc/libraries/base/Control-Monad.html#t%3AMonad"
+>Monad</A
+> f =&gt; <A HREF="Data-Ring-Module.html#t%3AModule"
+>Module</A
+> <A HREF="Data-Ring-Semi-Natural.html#t%3ANatural"
+>Natural</A
+> (<A HREF="Data-Monoid-Monad.html#t%3AAction"
+>Action</A
+> f)</TD
+></TR
+><TR
+><TD CLASS="decl"
+><A HREF="Data-Ring-Module.html#t%3AModule"
+>Module</A
+> <A HREF="Data-Ring-Semi-Natural.html#t%3ANatural"
+>Natural</A
+> (<A HREF="Data-Generator-Free.html#t%3AFree"
+>Free</A
+> a)</TD
+></TR
+><TR
+><TD CLASS="decl"
+><A HREF="Data-Ring-Module.html#t%3AModule"
+>Module</A
+> <A HREF="Data-Ring-Semi-Natural.html#t%3ANatural"
+>Natural</A
+> (<A HREF="Data-Generator-Free.html#t%3AFree"
+>Free</A
+> a)</TD
+></TR
+><TR
+><TD CLASS="decl"
+><A HREF="/usr/local/share/doc/ghc/libraries/base/Data-Bits.html#t%3ABits"
+>Bits</A
+> a =&gt; <A HREF="Data-Ring-Module.html#t%3AModule"
+>Module</A
+> <A HREF="Data-Ring-Semi-Natural.html#t%3ANatural"
+>Natural</A
+> (<A HREF="Data-Ring-Boolean.html#t%3ABoolean"
+>Boolean</A
+> a)</TD
+></TR
+><TR
+><TD CLASS="decl"
+><A HREF="/usr/local/share/doc/ghc/libraries/base/Data-Bits.html#t%3ABits"
+>Bits</A
+> a =&gt; <A HREF="Data-Ring-Module.html#t%3AModule"
+>Module</A
+> <A HREF="Data-Ring-Semi-Natural.html#t%3ANatural"
+>Natural</A
+> (<A HREF="Data-Ring-Boolean.html#t%3ABoolean"
+>Boolean</A
+> a)</TD
+></TR
+><TR
+><TD CLASS="decl"
+><A HREF="/usr/local/share/doc/ghc/libraries/base/Prelude.html#t%3AEnum"
+>Enum</A
+> a =&gt; <A HREF="Data-Ring-Module.html#t%3AModule"
+>Module</A
+> <A HREF="Data-Ring-Semi-Natural.html#t%3ANatural"
+>Natural</A
+> (<A HREF="Data-Ring-Semi-BitSet.html#t%3ABitSet"
+>BitSet</A
+> a)</TD
+></TR
+><TR
+><TD CLASS="decl"
+><A HREF="/usr/local/share/doc/ghc/libraries/base/Prelude.html#t%3AEnum"
+>Enum</A
+> a =&gt; <A HREF="Data-Ring-Module.html#t%3AModule"
+>Module</A
+> <A HREF="Data-Ring-Semi-Natural.html#t%3ANatural"
+>Natural</A
+> (<A HREF="Data-Ring-Semi-BitSet.html#t%3ABitSet"
+>BitSet</A
+> a)</TD
+></TR
+><TR
+><TD CLASS="decl"
+>(<A HREF="/usr/local/share/doc/ghc/libraries/base/Data-Ord.html#t%3AOrd"
+>Ord</A
+> a, <A HREF="/usr/local/share/doc/ghc/libraries/base/Prelude.html#t%3ANum"
+>Num</A
+> a) =&gt; <A HREF="Data-Ring-Module.html#t%3AModule"
+>Module</A
+> <A HREF="Data-Ring-Semi-Natural.html#t%3ANatural"
+>Natural</A
+> (<A HREF="Data-Ring-Semi-Tropical.html#t%3ATropical"
+>Tropical</A
+> a)</TD
+></TR
+><TR
+><TD CLASS="decl"
+>(<A HREF="/usr/local/share/doc/ghc/libraries/base/Data-Ord.html#t%3AOrd"
+>Ord</A
+> a, <A HREF="/usr/local/share/doc/ghc/libraries/base/Prelude.html#t%3ANum"
+>Num</A
+> a) =&gt; <A HREF="Data-Ring-Module.html#t%3AModule"
+>Module</A
+> <A HREF="Data-Ring-Semi-Natural.html#t%3ANatural"
+>Natural</A
+> (<A HREF="Data-Ring-Semi-Tropical.html#t%3ATropical"
+>Tropical</A
+> a)</TD
+></TR
+><TR
+><TD CLASS="decl"
+>(<A HREF="Data-Monoid-Union.html#t%3AHasUnionWith"
+>HasUnionWith</A
+> f, <A HREF="/usr/local/share/doc/ghc/libraries/base/Data-Ord.html#t%3AOrd"
+>Ord</A
+> r, <A HREF="/usr/local/share/doc/ghc/libraries/base/Data-Eq.html#t%3AEq"
+>Eq</A
+> r, <A HREF="Data-Ring.html#t%3ARightSemiNearRing"
+>RightSemiNearRing</A
+> r) =&gt; <A HREF="Data-Ring-Module.html#t%3AModule"
+>Module</A
+> r (<A HREF="Data-Monoid-Union.html#t%3AUnionWith"
+>UnionWith</A
+> f r)</TD
+></TR
+><TR
+><TD CLASS="decl"
+>(<A HREF="Data-Ring-Module.html#t%3AModule"
+>Module</A
+> r m, <A HREF="Data-Ring-Module.html#t%3AModule"
+>Module</A
+> r n) =&gt; <A HREF="Data-Ring-Module.html#t%3AModule"
+>Module</A
+> r ((,) m n)</TD
+></TR
+><TR
+><TD CLASS="decl"
+>(<A HREF="Data-Ring-Module.html#t%3AModule"
+>Module</A
+> r m, <A HREF="/usr/local/share/doc/ghc/libraries/base/Control-Applicative.html#t%3AApplicative"
+>Applicative</A
+> f) =&gt; <A HREF="Data-Ring-Module.html#t%3AModule"
+>Module</A
+> r (<A HREF="Data-Monoid-Applicative.html#t%3AApp"
+>App</A
+> f m)</TD
+></TR
+><TR
+><TD CLASS="decl"
+>(<A HREF="Data-Ring-Module.html#t%3AModule"
+>Module</A
+> r m, <A HREF="/usr/local/share/doc/ghc/libraries/base/Control-Monad.html#t%3AMonad"
+>Monad</A
+> f) =&gt; <A HREF="Data-Ring-Module.html#t%3AModule"
+>Module</A
+> r (<A HREF="Data-Monoid-Monad.html#t%3AMon"
+>Mon</A
+> f m)</TD
+></TR
+><TR
+><TD CLASS="decl"
+><A HREF="/usr/local/share/doc/ghc/libraries/base/Data-Monoid.html#t%3AMonoid"
+>Monoid</A
+> m =&gt; <A HREF="Data-Ring-Module.html#t%3AModule"
+>Module</A
+> <A HREF="Data-Ring-Semi-Natural.html#t%3ANatural"
+>Natural</A
+> (a -&gt; m)</TD
+></TR
+><TR
+><TD CLASS="decl"
+><A HREF="/usr/local/share/doc/ghc/libraries/base/Data-Monoid.html#t%3AMonoid"
+>Monoid</A
+> m =&gt; <A HREF="Data-Ring-Module.html#t%3AModule"
+>Module</A
+> <A HREF="Data-Ring-Semi-Natural.html#t%3ANatural"
+>Natural</A
+> (a -&gt; m)</TD
+></TR
+><TR
+><TD CLASS="decl"
+><A HREF="/usr/local/share/doc/ghc/libraries/base/Control-Category.html#t%3ACategory"
+>Category</A
+> k =&gt; <A HREF="Data-Ring-Module.html#t%3AModule"
+>Module</A
+> <A HREF="Data-Ring-Semi-Natural.html#t%3ANatural"
+>Natural</A
+> (<A HREF="Data-Monoid-Categorical.html#t%3AGEndo"
+>GEndo</A
+> k a)</TD
+></TR
+><TR
+><TD CLASS="decl"
+><A HREF="/usr/local/share/doc/ghc/libraries/base/Control-Category.html#t%3ACategory"
+>Category</A
+> k =&gt; <A HREF="Data-Ring-Module.html#t%3AModule"
+>Module</A
+> <A HREF="Data-Ring-Semi-Natural.html#t%3ANatural"
+>Natural</A
+> (<A HREF="Data-Monoid-Categorical.html#t%3AGEndo"
+>GEndo</A
+> k a)</TD
+></TR
+><TR
+><TD CLASS="decl"
+><A HREF="/usr/local/share/doc/ghc/libraries/base/Control-Applicative.html#t%3AAlternative"
+>Alternative</A
+> f =&gt; <A HREF="Data-Ring-Module.html#t%3AModule"
+>Module</A
+> <A HREF="Data-Ring-Semi-Natural.html#t%3ANatural"
+>Natural</A
+> (<A HREF="Data-Monoid-Applicative.html#t%3AAlt"
+>Alt</A
+> f a)</TD
+></TR
+><TR
+><TD CLASS="decl"
+><A HREF="/usr/local/share/doc/ghc/libraries/base/Control-Applicative.html#t%3AAlternative"
+>Alternative</A
+> f =&gt; <A HREF="Data-Ring-Module.html#t%3AModule"
+>Module</A
+> <A HREF="Data-Ring-Semi-Natural.html#t%3ANatural"
+>Natural</A
+> (<A HREF="Data-Monoid-Applicative.html#t%3AAlt"
+>Alt</A
+> f a)</TD
+></TR
+><TR
+><TD CLASS="decl"
+><A HREF="/usr/local/share/doc/ghc/libraries/base/Control-Monad.html#t%3AMonadPlus"
+>MonadPlus</A
+> f =&gt; <A HREF="Data-Ring-Module.html#t%3AModule"
+>Module</A
+> <A HREF="Data-Ring-Semi-Natural.html#t%3ANatural"
+>Natural</A
+> (<A HREF="Data-Monoid-Monad.html#t%3AMonadSum"
+>MonadSum</A
+> f a)</TD
+></TR
+><TR
+><TD CLASS="decl"
+><A HREF="/usr/local/share/doc/ghc/libraries/base/Control-Monad.html#t%3AMonadPlus"
+>MonadPlus</A
+> f =&gt; <A HREF="Data-Ring-Module.html#t%3AModule"
+>Module</A
+> <A HREF="Data-Ring-Semi-Natural.html#t%3ANatural"
+>Natural</A
+> (<A HREF="Data-Monoid-Monad.html#t%3AMonadSum"
+>MonadSum</A
+> f a)</TD
+></TR
+><TR
+><TD CLASS="decl"
+>(<A HREF="Data-Ring-Module.html#t%3AModule"
+>Module</A
+> r m, <A HREF="Data-Ring-Module.html#t%3AModule"
+>Module</A
+> r n, <A HREF="Data-Ring-Module.html#t%3AModule"
+>Module</A
+> r o) =&gt; <A HREF="Data-Ring-Module.html#t%3AModule"
+>Module</A
+> r ((,,) m n o)</TD
+></TR
+><TR
+><TD CLASS="decl"
+><A HREF="/usr/local/share/doc/ghc/libraries/base/Data-Monoid.html#t%3AMonoid"
hunk ./doc/html/monoids/Data-Ring-Module.html 1077
-> m) =&gt; <A NAME="t%3ALeftModule"
+> m =&gt; <A HREF="Data-Ring-Module.html#t%3AModule"
+>Module</A
+> <A HREF="Data-Ring-Semi-Natural.html#t%3ANatural"
+>Natural</A
+> (<A HREF="Data-Monoid-Categorical.html#t%3ACMonoid"
+>CMonoid</A
+> m m m)</TD
+></TR
+><TR
+><TD CLASS="decl"
+><A HREF="/usr/local/share/doc/ghc/libraries/base/Data-Monoid.html#t%3AMonoid"
+>Monoid</A
+> m =&gt; <A HREF="Data-Ring-Module.html#t%3AModule"
+>Module</A
+> <A HREF="Data-Ring-Semi-Natural.html#t%3ANatural"
+>Natural</A
+> (<A HREF="Data-Monoid-Categorical.html#t%3ACMonoid"
+>CMonoid</A
+> m m m)</TD
+></TR
+><TR
+><TD CLASS="decl"
+>(<A HREF="Data-Ring-Module.html#t%3AModule"
+>Module</A
+> r m, <A HREF="Data-Ring-Module.html#t%3AModule"
+>Module</A
+> r n, <A HREF="Data-Ring-Module.html#t%3AModule"
+>Module</A
+> r o, <A HREF="Data-Ring-Module.html#t%3AModule"
+>Module</A
+> r p) =&gt; <A HREF="Data-Ring-Module.html#t%3AModule"
+>Module</A
+> r ((,,,) m n o p)</TD
+></TR
+><TR
+><TD CLASS="decl"
+>(<A HREF="Data-Ring-Module.html#t%3AModule"
+>Module</A
+> r m, <A HREF="Data-Ring-Module.html#t%3AModule"
+>Module</A
+> r n, <A HREF="Data-Ring-Module.html#t%3AModule"
+>Module</A
+> r o, <A HREF="Data-Ring-Module.html#t%3AModule"
+>Module</A
+> r p, <A HREF="Data-Ring-Module.html#t%3AModule"
+>Module</A
+> r q) =&gt; <A HREF="Data-Ring-Module.html#t%3AModule"
+>Module</A
+> r ((,,,,) m n o p q)</TD
+></TR
+><TR
+><TD CLASS="decl"
+><A HREF="/usr/local/share/doc/ghc/libraries/base/Data-Bits.html#t%3ABits"
+>Bits</A
+> a =&gt; <A HREF="Data-Ring-Module.html#t%3AModule"
+>Module</A
+> (<A HREF="Data-Ring-Boolean.html#t%3ABoolean"
+>Boolean</A
+> a) (<A HREF="Data-Ring-Boolean.html#t%3ABoolean"
+>Boolean</A
+> a)</TD
+></TR
+><TR
+><TD CLASS="decl"
+>(<A HREF="/usr/local/share/doc/ghc/libraries/base/Prelude.html#t%3ABounded"
+>Bounded</A
+> a, <A HREF="/usr/local/share/doc/ghc/libraries/base/Prelude.html#t%3AEnum"
+>Enum</A
+> a) =&gt; <A HREF="Data-Ring-Module.html#t%3AModule"
+>Module</A
+> (<A HREF="Data-Ring-Semi-BitSet.html#t%3ABitSet"
+>BitSet</A
+> a) (<A HREF="Data-Ring-Semi-BitSet.html#t%3ABitSet"
+>BitSet</A
+> a)</TD
+></TR
+><TR
+><TD CLASS="decl"
+>(<A HREF="/usr/local/share/doc/ghc/libraries/base/Data-Ord.html#t%3AOrd"
+>Ord</A
+> a, <A HREF="/usr/local/share/doc/ghc/libraries/base/Prelude.html#t%3ANum"
+>Num</A
+> a) =&gt; <A HREF="Data-Ring-Module.html#t%3AModule"
+>Module</A
+> (<A HREF="Data-Ring-Semi-Tropical.html#t%3ATropical"
+>Tropical</A
+> a) (<A HREF="Data-Ring-Semi-Tropical.html#t%3ATropical"
+>Tropical</A
+> a)</TD
+></TR
+></TABLE
+></DIV
+></TD
+></TR
+></TABLE
+></TD
+></TR
+><TR
+><TD CLASS="s15"
+></TD
+></TR
+><TR
+><TD CLASS="topdecl"
+><TABLE CLASS="declbar"
+><TR
+><TD CLASS="declname"
+><SPAN CLASS="keyword"
+>class</SPAN
+> <A HREF="Data-Ring-Module.html#t%3AModule"
+>Module</A
+> r m =&gt; <A NAME="t%3ALeftModule"
hunk ./doc/html/monoids/Data-Ring-Module.html 1334
+><A HREF="/usr/local/share/doc/ghc/libraries/base/Data-Bits.html#t%3ABits"
+>Bits</A
+> a =&gt; <A HREF="Data-Ring-Module.html#t%3ALeftModule"
+>LeftModule</A
+> Integer (<A HREF="Data-Ring-Boolean.html#t%3ABoolean"
+>Boolean</A
+> a)</TD
+></TR
+><TR
+><TD CLASS="decl"
+><A HREF="/usr/local/share/doc/ghc/libraries/base/Data-Bits.html#t%3ABits"
+>Bits</A
+> a =&gt; <A HREF="Data-Ring-Module.html#t%3ALeftModule"
+>LeftModule</A
+> Integer (<A HREF="Data-Ring-Boolean.html#t%3ABoolean"
+>Boolean</A
+> a)</TD
+></TR
+><TR
+><TD CLASS="decl"
hunk ./doc/html/monoids/Data-Ring-Module.html 1686
+><A HREF="/usr/local/share/doc/ghc/libraries/base/Data-Bits.html#t%3ABits"
+>Bits</A
+> a =&gt; <A HREF="Data-Ring-Module.html#t%3ALeftModule"
+>LeftModule</A
+> <A HREF="Data-Ring-Semi-Natural.html#t%3ANatural"
+>Natural</A
+> (<A HREF="Data-Ring-Boolean.html#t%3ABoolean"
+>Boolean</A
+> a)</TD
+></TR
+><TR
+><TD CLASS="decl"
+><A HREF="/usr/local/share/doc/ghc/libraries/base/Data-Bits.html#t%3ABits"
+>Bits</A
+> a =&gt; <A HREF="Data-Ring-Module.html#t%3ALeftModule"
+>LeftModule</A
+> <A HREF="Data-Ring-Semi-Natural.html#t%3ANatural"
+>Natural</A
+> (<A HREF="Data-Ring-Boolean.html#t%3ABoolean"
+>Boolean</A
+> a)</TD
+></TR
+><TR
+><TD CLASS="decl"
hunk ./doc/html/monoids/Data-Ring-Module.html 1734
+>(<A HREF="/usr/local/share/doc/ghc/libraries/base/Data-Ord.html#t%3AOrd"
+>Ord</A
+> a, <A HREF="/usr/local/share/doc/ghc/libraries/base/Prelude.html#t%3ANum"
+>Num</A
+> a) =&gt; <A HREF="Data-Ring-Module.html#t%3ALeftModule"
+>LeftModule</A
+> <A HREF="Data-Ring-Semi-Natural.html#t%3ANatural"
+>Natural</A
+> (<A HREF="Data-Ring-Semi-Tropical.html#t%3ATropical"
+>Tropical</A
+> a)</TD
+></TR
+><TR
+><TD CLASS="decl"
+>(<A HREF="/usr/local/share/doc/ghc/libraries/base/Data-Ord.html#t%3AOrd"
+>Ord</A
+> a, <A HREF="/usr/local/share/doc/ghc/libraries/base/Prelude.html#t%3ANum"
+>Num</A
+> a) =&gt; <A HREF="Data-Ring-Module.html#t%3ALeftModule"
+>LeftModule</A
+> <A HREF="Data-Ring-Semi-Natural.html#t%3ANatural"
+>Natural</A
+> (<A HREF="Data-Ring-Semi-Tropical.html#t%3ATropical"
+>Tropical</A
+> a)</TD
+></TR
+><TR
+><TD CLASS="decl"
hunk ./doc/html/monoids/Data-Ring-Module.html 1768
-> r, <A HREF="Data-Ring-Semi-Near.html#t%3ARightSemiNearRing"
+> r, <A HREF="Data-Ring.html#t%3ARightSemiNearRing"
hunk ./doc/html/monoids/Data-Ring-Module.html 1832
-><A HREF="/usr/local/share/doc/ghc/libraries/base/Data-Eq.html#t%3AEq"
->Eq</A
-> a =&gt; <A HREF="Data-Ring-Module.html#t%3ALeftModule"
->LeftModule</A
-> <A HREF="Data-Ring-Semi-Natural.html#t%3ANatural"
->Natural</A
-> (<A HREF="Data-Generator-Compressive-RLE.html#t%3ARLE"
->RLE</A
-> <A HREF="/usr/local/share/doc/ghc/libraries/containers/Data-Sequence.html#t%3ASeq"
->Seq</A
-> a)</TD
-></TR
-><TR
-><TD CLASS="decl"
-><A HREF="/usr/local/share/doc/ghc/libraries/base/Data-Eq.html#t%3AEq"
->Eq</A
-> a =&gt; <A HREF="Data-Ring-Module.html#t%3ALeftModule"
->LeftModule</A
-> <A HREF="Data-Ring-Semi-Natural.html#t%3ANatural"
->Natural</A
-> (<A HREF="Data-Generator-Compressive-RLE.html#t%3ARLE"
->RLE</A
-> <A HREF="/usr/local/share/doc/ghc/libraries/containers/Data-Sequence.html#t%3ASeq"
->Seq</A
-> a)</TD
-></TR
-><TR
-><TD CLASS="decl"
hunk ./doc/html/monoids/Data-Ring-Module.html 1970
+><A HREF="/usr/local/share/doc/ghc/libraries/base/Data-Bits.html#t%3ABits"
+>Bits</A
+> a =&gt; <A HREF="Data-Ring-Module.html#t%3ALeftModule"
+>LeftModule</A
+> (<A HREF="Data-Ring-Boolean.html#t%3ABoolean"
+>Boolean</A
+> a) (<A HREF="Data-Ring-Boolean.html#t%3ABoolean"
+>Boolean</A
+> a)</TD
+></TR
+><TR
+><TD CLASS="decl"
hunk ./doc/html/monoids/Data-Ring-Module.html 1994
+><TR
+><TD CLASS="decl"
+>(<A HREF="/usr/local/share/doc/ghc/libraries/base/Data-Ord.html#t%3AOrd"
+>Ord</A
+> a, <A HREF="/usr/local/share/doc/ghc/libraries/base/Prelude.html#t%3ANum"
+>Num</A
+> a) =&gt; <A HREF="Data-Ring-Module.html#t%3ALeftModule"
+>LeftModule</A
+> (<A HREF="Data-Ring-Semi-Tropical.html#t%3ATropical"
+>Tropical</A
+> a) (<A HREF="Data-Ring-Semi-Tropical.html#t%3ATropical"
+>Tropical</A
+> a)</TD
+></TR
hunk ./doc/html/monoids/Data-Ring-Module.html 2050
-> (<A HREF="/usr/local/share/doc/ghc/libraries/base/Data-Monoid.html#t%3AMonoid"
->Monoid</A
-> r, <A HREF="Data-Monoid-Multiplicative.html#t%3AMultiplicative"
->Multiplicative</A
-> r, <A HREF="/usr/local/share/doc/ghc/libraries/base/Data-Monoid.html#t%3AMonoid"
->Monoid</A
-> m) =&gt; <A NAME="t%3ARightModule"
+> <A HREF="Data-Ring-Module.html#t%3AModule"
+>Module</A
+> r m =&gt; <A NAME="t%3ARightModule"
hunk ./doc/html/monoids/Data-Ring-Module.html 2199
+><A HREF="/usr/local/share/doc/ghc/libraries/base/Data-Bits.html#t%3ABits"
+>Bits</A
+> a =&gt; <A HREF="Data-Ring-Module.html#t%3ARightModule"
+>RightModule</A
+> Integer (<A HREF="Data-Ring-Boolean.html#t%3ABoolean"
+>Boolean</A
+> a)</TD
+></TR
+><TR
+><TD CLASS="decl"
+><A HREF="/usr/local/share/doc/ghc/libraries/base/Data-Bits.html#t%3ABits"
+>Bits</A
+> a =&gt; <A HREF="Data-Ring-Module.html#t%3ARightModule"
+>RightModule</A
+> Integer (<A HREF="Data-Ring-Boolean.html#t%3ABoolean"
+>Boolean</A
+> a)</TD
+></TR
+><TR
+><TD CLASS="decl"
hunk ./doc/html/monoids/Data-Ring-Module.html 2551
+><A HREF="/usr/local/share/doc/ghc/libraries/base/Data-Bits.html#t%3ABits"
+>Bits</A
+> a =&gt; <A HREF="Data-Ring-Module.html#t%3ARightModule"
+>RightModule</A
+> <A HREF="Data-Ring-Semi-Natural.html#t%3ANatural"
+>Natural</A
+> (<A HREF="Data-Ring-Boolean.html#t%3ABoolean"
+>Boolean</A
+> a)</TD
+></TR
+><TR
+><TD CLASS="decl"
+><A HREF="/usr/local/share/doc/ghc/libraries/base/Data-Bits.html#t%3ABits"
+>Bits</A
+> a =&gt; <A HREF="Data-Ring-Module.html#t%3ARightModule"
+>RightModule</A
+> <A HREF="Data-Ring-Semi-Natural.html#t%3ANatural"
+>Natural</A
+> (<A HREF="Data-Ring-Boolean.html#t%3ABoolean"
+>Boolean</A
+> a)</TD
+></TR
+><TR
+><TD CLASS="decl"
hunk ./doc/html/monoids/Data-Ring-Module.html 2599
+>(<A HREF="/usr/local/share/doc/ghc/libraries/base/Data-Ord.html#t%3AOrd"
+>Ord</A
+> a, <A HREF="/usr/local/share/doc/ghc/libraries/base/Prelude.html#t%3ANum"
+>Num</A
+> a) =&gt; <A HREF="Data-Ring-Module.html#t%3ARightModule"
+>RightModule</A
+> <A HREF="Data-Ring-Semi-Natural.html#t%3ANatural"
+>Natural</A
+> (<A HREF="Data-Ring-Semi-Tropical.html#t%3ATropical"
+>Tropical</A
+> a)</TD
+></TR
+><TR
+><TD CLASS="decl"
+>(<A HREF="/usr/local/share/doc/ghc/libraries/base/Data-Ord.html#t%3AOrd"
+>Ord</A
+> a, <A HREF="/usr/local/share/doc/ghc/libraries/base/Prelude.html#t%3ANum"
+>Num</A
+> a) =&gt; <A HREF="Data-Ring-Module.html#t%3ARightModule"
+>RightModule</A
+> <A HREF="Data-Ring-Semi-Natural.html#t%3ANatural"
+>Natural</A
+> (<A HREF="Data-Ring-Semi-Tropical.html#t%3ATropical"
+>Tropical</A
+> a)</TD
+></TR
+><TR
+><TD CLASS="decl"
hunk ./doc/html/monoids/Data-Ring-Module.html 2633
-> r, <A HREF="Data-Ring-Semi-Near.html#t%3ARightSemiNearRing"
+> r, <A HREF="Data-Ring.html#t%3ARightSemiNearRing"
hunk ./doc/html/monoids/Data-Ring-Module.html 2697
-><A HREF="/usr/local/share/doc/ghc/libraries/base/Data-Eq.html#t%3AEq"
->Eq</A
-> a =&gt; <A HREF="Data-Ring-Module.html#t%3ARightModule"
->RightModule</A
-> <A HREF="Data-Ring-Semi-Natural.html#t%3ANatural"
->Natural</A
-> (<A HREF="Data-Generator-Compressive-RLE.html#t%3ARLE"
->RLE</A
-> <A HREF="/usr/local/share/doc/ghc/libraries/containers/Data-Sequence.html#t%3ASeq"
->Seq</A
-> a)</TD
-></TR
-><TR
-><TD CLASS="decl"
-><A HREF="/usr/local/share/doc/ghc/libraries/base/Data-Eq.html#t%3AEq"
->Eq</A
-> a =&gt; <A HREF="Data-Ring-Module.html#t%3ARightModule"
->RightModule</A
-> <A HREF="Data-Ring-Semi-Natural.html#t%3ANatural"
->Natural</A
-> (<A HREF="Data-Generator-Compressive-RLE.html#t%3ARLE"
->RLE</A
-> <A HREF="/usr/local/share/doc/ghc/libraries/containers/Data-Sequence.html#t%3ASeq"
->Seq</A
-> a)</TD
-></TR
-><TR
-><TD CLASS="decl"
hunk ./doc/html/monoids/Data-Ring-Module.html 2835
+><A HREF="/usr/local/share/doc/ghc/libraries/base/Data-Bits.html#t%3ABits"
+>Bits</A
+> a =&gt; <A HREF="Data-Ring-Module.html#t%3ARightModule"
+>RightModule</A
+> (<A HREF="Data-Ring-Boolean.html#t%3ABoolean"
+>Boolean</A
+> a) (<A HREF="Data-Ring-Boolean.html#t%3ABoolean"
+>Boolean</A
+> a)</TD
+></TR
+><TR
+><TD CLASS="decl"
hunk ./doc/html/monoids/Data-Ring-Module.html 2859
+><TR
+><TD CLASS="decl"
+>(<A HREF="/usr/local/share/doc/ghc/libraries/base/Data-Ord.html#t%3AOrd"
+>Ord</A
+> a, <A HREF="/usr/local/share/doc/ghc/libraries/base/Prelude.html#t%3ANum"
+>Num</A
+> a) =&gt; <A HREF="Data-Ring-Module.html#t%3ARightModule"
+>RightModule</A
+> (<A HREF="Data-Ring-Semi-Tropical.html#t%3ATropical"
+>Tropical</A
+> a) (<A HREF="Data-Ring-Semi-Tropical.html#t%3ATropical"
+>Tropical</A
+> a)</TD
+></TR
hunk ./doc/html/monoids/Data-Ring-Module.html 2919
-> r m) =&gt; <A NAME="t%3AModule"
+> r m) =&gt; <A NAME="t%3ABimodule"
hunk ./doc/html/monoids/Data-Ring-Module.html 2922
->Module</B
+>Bimodule</B
hunk ./doc/html/monoids/Data-Ring-Module.html 2925
-><A HREF="src/Data-Ring-Module.html#Module"
+><A HREF="src/Data-Ring-Module.html#Bimodule"
hunk ./doc/html/monoids/Data-Ring-Module.html 2947
-><IMG SRC="minus.gif" CLASS="coll" ONCLICK="toggle(this,'i:Module')" ALT="show/hide"
+><IMG SRC="minus.gif" CLASS="coll" ONCLICK="toggle(this,'i:Bimodule')" ALT="show/hide"
hunk ./doc/html/monoids/Data-Ring-Module.html 2952
-><DIV ID="i:Module" STYLE="display:block;"
+><DIV ID="i:Bimodule" STYLE="display:block;"
hunk ./doc/html/monoids/Data-Ring-Module.html 2956
-><A HREF="Data-Ring-Module.html#t%3AModule"
->Module</A
-> <A HREF="Data-Ring-Semi-Natural.html#t%3ANatural"
->Natural</A
-> <A HREF="/usr/local/share/doc/ghc/libraries/ghc-prim/GHC-Ordering.html#t%3AOrdering"
->Ordering</A
-></TD
-></TR
-><TR
-><TD CLASS="decl"
-><A HREF="Data-Ring-Module.html#t%3AModule"
->Module</A
-> <A HREF="Data-Ring-Semi-Natural.html#t%3ANatural"
->Natural</A
-> <A HREF="/usr/local/share/doc/ghc/libraries/ghc-prim/GHC-Ordering.html#t%3AOrdering"
->Ordering</A
-></TD
+><A HREF="/usr/local/share/doc/ghc/libraries/base/Data-Bits.html#t%3ABits"
+>Bits</A
+> a =&gt; <A HREF="Data-Ring-Module.html#t%3ABimodule"
+>Bimodule</A
+> Integer (<A HREF="Data-Ring-Boolean.html#t%3ABoolean"
+>Boolean</A
+> a)</TD
hunk ./doc/html/monoids/Data-Ring-Module.html 2966
-><A HREF="Data-Ring-Module.html#t%3AModule"
->Module</A
-> <A HREF="Data-Ring-Semi-Natural.html#t%3ANatural"
->Natural</A
-> ()</TD
+><A HREF="/usr/local/share/doc/ghc/libraries/base/Data-Bits.html#t%3ABits"
+>Bits</A
+> a =&gt; <A HREF="Data-Ring-Module.html#t%3ABimodule"
+>Bimodule</A
+> Integer (<A HREF="Data-Ring-Boolean.html#t%3ABoolean"
+>Boolean</A
+> a)</TD
hunk ./doc/html/monoids/Data-Ring-Module.html 2976
-><A HREF="Data-Ring-Module.html#t%3AModule"
->Module</A
+><A HREF="/usr/local/share/doc/ghc/libraries/base/Data-Bits.html#t%3ABits"
+>Bits</A
+> a =&gt; <A HREF="Data-Ring-Module.html#t%3ABimodule"
+>Bimodule</A
hunk ./doc/html/monoids/Data-Ring-Module.html 2982
-> ()</TD
+> (<A HREF="Data-Ring-Boolean.html#t%3ABoolean"
+>Boolean</A
+> a)</TD
hunk ./doc/html/monoids/Data-Ring-Module.html 2988
-><A HREF="Data-Ring-Module.html#t%3AModule"
->Module</A
+><A HREF="/usr/local/share/doc/ghc/libraries/base/Data-Bits.html#t%3ABits"
+>Bits</A
+> a =&gt; <A HREF="Data-Ring-Module.html#t%3ABimodule"
+>Bimodule</A
hunk ./doc/html/monoids/Data-Ring-Module.html 2994
-> <A HREF="/usr/local/share/doc/ghc/libraries/base/Data-Monoid.html#t%3AAll"
->All</A
-></TD
+> (<A HREF="Data-Ring-Boolean.html#t%3ABoolean"
+>Boolean</A
+> a)</TD
hunk ./doc/html/monoids/Data-Ring-Module.html 3000
-><A HREF="Data-Ring-Module.html#t%3AModule"
->Module</A
+><A HREF="/usr/local/share/doc/ghc/libraries/base/Prelude.html#t%3AEnum"
+>Enum</A
+> a =&gt; <A HREF="Data-Ring-Module.html#t%3ABimodule"
+>Bimodule</A
hunk ./doc/html/monoids/Data-Ring-Module.html 3006
-> <A HREF="/usr/local/share/doc/ghc/libraries/base/Data-Monoid.html#t%3AAll"
->All</A
-></TD
+> (<A HREF="Data-Ring-Semi-BitSet.html#t%3ABitSet"
+>BitSet</A
+> a)</TD
hunk ./doc/html/monoids/Data-Ring-Module.html 3012
-><A HREF="Data-Ring-Module.html#t%3AModule"
->Module</A
+><A HREF="/usr/local/share/doc/ghc/libraries/base/Prelude.html#t%3AEnum"
+>Enum</A
+> a =&gt; <A HREF="Data-Ring-Module.html#t%3ABimodule"
+>Bimodule</A
hunk ./doc/html/monoids/Data-Ring-Module.html 3018
-> <A HREF="/usr/local/share/doc/ghc/libraries/base/Data-Monoid.html#t%3AAny"
->Any</A
-></TD
+> (<A HREF="Data-Ring-Semi-BitSet.html#t%3ABitSet"
+>BitSet</A
+> a)</TD
hunk ./doc/html/monoids/Data-Ring-Module.html 3024
-><A HREF="Data-Ring-Module.html#t%3AModule"
->Module</A
+>(<A HREF="/usr/local/share/doc/ghc/libraries/base/Data-Ord.html#t%3AOrd"
+>Ord</A
+> a, <A HREF="/usr/local/share/doc/ghc/libraries/base/Prelude.html#t%3ANum"
+>Num</A
+> a) =&gt; <A HREF="Data-Ring-Module.html#t%3ABimodule"
+>Bimodule</A
hunk ./doc/html/monoids/Data-Ring-Module.html 3032
-> <A HREF="/usr/local/share/doc/ghc/libraries/base/Data-Monoid.html#t%3AAny"
->Any</A
-></TD
+> (<A HREF="Data-Ring-Semi-Tropical.html#t%3ATropical"
+>Tropical</A
+> a)</TD
hunk ./doc/html/monoids/Data-Ring-Module.html 3038
-><A HREF="Data-Ring-Module.html#t%3AModule"
->Module</A
+>(<A HREF="/usr/local/share/doc/ghc/libraries/base/Data-Ord.html#t%3AOrd"
+>Ord</A
+> a, <A HREF="/usr/local/share/doc/ghc/libraries/base/Prelude.html#t%3ANum"
+>Num</A
+> a) =&gt; <A HREF="Data-Ring-Module.html#t%3ABimodule"
+>Bimodule</A
hunk ./doc/html/monoids/Data-Ring-Module.html 3046
-> ([] a)</TD
+> (<A HREF="Data-Ring-Semi-Tropical.html#t%3ATropical"
+>Tropical</A
+> a)</TD
hunk ./doc/html/monoids/Data-Ring-Module.html 3052
-><A HREF="Data-Ring-Module.html#t%3AModule"
->Module</A
-> <A HREF="Data-Ring-Semi-Natural.html#t%3ANatural"
->Natural</A
-> ([] a)</TD
+>(<A HREF="Data-Ring-Module.html#t%3ABimodule"
+>Bimodule</A
+> r m, <A HREF="Data-Ring-Module.html#t%3ABimodule"
+>Bimodule</A
+> r n) =&gt; <A HREF="Data-Ring-Module.html#t%3ABimodule"
+>Bimodule</A
+> r ((,) m n)</TD
hunk ./doc/html/monoids/Data-Ring-Module.html 3062
-><A HREF="/usr/local/share/doc/ghc/libraries/base/Data-Monoid.html#t%3AMonoid"
->Monoid</A
-> m =&gt; <A HREF="Data-Ring-Module.html#t%3AModule"
->Module</A
-> <A HREF="Data-Ring-Semi-Natural.html#t%3ANatural"
->Natural</A
-> (<A HREF="/usr/local/share/doc/ghc/libraries/base/Data-Monoid.html#t%3ADual"
->Dual</A
-> m)</TD
+>(<A HREF="Data-Ring-Module.html#t%3ABimodule"
+>Bimodule</A
+> r m, <A HREF="Data-Ring-Module.html#t%3ABimodule"
+>Bimodule</A
+> r n, <A HREF="Data-Ring-Module.html#t%3ABimodule"
+>Bimodule</A
+> r o) =&gt; <A HREF="Data-Ring-Module.html#t%3ABimodule"
+>Bimodule</A
+> r ((,,) m n o)</TD
hunk ./doc/html/monoids/Data-Ring-Module.html 3074
-><A HREF="/usr/local/share/doc/ghc/libraries/base/Data-Monoid.html#t%3AMonoid"
->Monoid</A
-> m =&gt; <A HREF="Data-Ring-Module.html#t%3AModule"
->Module</A
-> <A HREF="Data-Ring-Semi-Natural.html#t%3ANatural"
->Natural</A
-> (<A HREF="/usr/local/share/doc/ghc/libraries/base/Data-Monoid.html#t%3ADual"
->Dual</A
-> m)</TD
+>(<A HREF="Data-Ring-Module.html#t%3ABimodule"
+>Bimodule</A
+> r m, <A HREF="Data-Ring-Module.html#t%3ABimodule"
+>Bimodule</A
+> r n, <A HREF="Data-Ring-Module.html#t%3ABimodule"
+>Bimodule</A
+> r o, <A HREF="Data-Ring-Module.html#t%3ABimodule"
+>Bimodule</A
+> r p) =&gt; <A HREF="Data-Ring-Module.html#t%3ABimodule"
+>Bimodule</A
+> r ((,,,) m n o p)</TD
hunk ./doc/html/monoids/Data-Ring-Module.html 3088
-><A HREF="Data-Ring-Module.html#t%3AModule"
->Module</A
-> <A HREF="Data-Ring-Semi-Natural.html#t%3ANatural"
->Natural</A
-> (<A HREF="/usr/local/share/doc/ghc/libraries/base/Data-Monoid.html#t%3AEndo"
->Endo</A
-> a)</TD
+>(<A HREF="Data-Ring-Module.html#t%3ABimodule"
+>Bimodule</A
+> r m, <A HREF="Data-Ring-Module.html#t%3ABimodule"
+>Bimodule</A
+> r n, <A HREF="Data-Ring-Module.html#t%3ABimodule"
+>Bimodule</A
+> r o, <A HREF="Data-Ring-Module.html#t%3ABimodule"
+>Bimodule</A
+> r p, <A HREF="Data-Ring-Module.html#t%3ABimodule"
+>Bimodule</A
+> r q) =&gt; <A HREF="Data-Ring-Module.html#t%3ABimodule"
+>Bimodule</A
+> r ((,,,,) m n o p q)</TD
hunk ./doc/html/monoids/Data-Ring-Module.html 3104
-><A HREF="Data-Ring-Module.html#t%3AModule"
->Module</A
-> <A HREF="Data-Ring-Semi-Natural.html#t%3ANatural"
->Natural</A
-> (<A HREF="/usr/local/share/doc/ghc/libraries/base/Data-Monoid.html#t%3AEndo"
->Endo</A
+><A HREF="/usr/local/share/doc/ghc/libraries/base/Data-Bits.html#t%3ABits"
+>Bits</A
+> a =&gt; <A HREF="Data-Ring-Module.html#t%3ABimodule"
+>Bimodule</A
+> (<A HREF="Data-Ring-Boolean.html#t%3ABoolean"
+>Boolean</A
+> a) (<A HREF="Data-Ring-Boolean.html#t%3ABoolean"
+>Boolean</A
hunk ./doc/html/monoids/Data-Ring-Module.html 3116
-><A HREF="/usr/local/share/doc/ghc/libraries/base/Prelude.html#t%3ANum"
->Num</A
-> a =&gt; <A HREF="Data-Ring-Module.html#t%3AModule"
->Module</A
-> <A HREF="Data-Ring-Semi-Natural.html#t%3ANatural"
->Natural</A
-> (<A HREF="/usr/local/share/doc/ghc/libraries/base/Data-Monoid.html#t%3ASum"
->Sum</A
+>(<A HREF="/usr/local/share/doc/ghc/libraries/base/Prelude.html#t%3ABounded"
+>Bounded</A
+> a, <A HREF="/usr/local/share/doc/ghc/libraries/base/Prelude.html#t%3AEnum"
+>Enum</A
+> a) =&gt; <A HREF="Data-Ring-Module.html#t%3ABimodule"
+>Bimodule</A
+> (<A HREF="Data-Ring-Semi-BitSet.html#t%3ABitSet"
+>BitSet</A
+> a) (<A HREF="Data-Ring-Semi-BitSet.html#t%3ABitSet"
+>BitSet</A
hunk ./doc/html/monoids/Data-Ring-Module.html 3130
-><A HREF="/usr/local/share/doc/ghc/libraries/base/Prelude.html#t%3ANum"
+>(<A HREF="/usr/local/share/doc/ghc/libraries/base/Data-Ord.html#t%3AOrd"
+>Ord</A
+> a, <A HREF="/usr/local/share/doc/ghc/libraries/base/Prelude.html#t%3ANum"
hunk ./doc/html/monoids/Data-Ring-Module.html 3134
-> a =&gt; <A HREF="Data-Ring-Module.html#t%3AModule"
->Module</A
-> <A HREF="Data-Ring-Semi-Natural.html#t%3ANatural"
->Natural</A
-> (<A HREF="/usr/local/share/doc/ghc/libraries/base/Data-Monoid.html#t%3ASum"
->Sum</A
+> a) =&gt; <A HREF="Data-Ring-Module.html#t%3ABimodule"
+>Bimodule</A
+> (<A HREF="Data-Ring-Semi-Tropical.html#t%3ATropical"
+>Tropical</A
+> a) (<A HREF="Data-Ring-Semi-Tropical.html#t%3ATropical"
+>Tropical</A
hunk ./doc/html/monoids/Data-Ring-Module.html 3142
-><TR
-><TD CLASS="decl"
-><A HREF="/usr/local/share/doc/ghc/libraries/base/Prelude.html#t%3ANum"
->Num</A
-> a =&gt; <A HREF="Data-Ring-Module.html#t%3AModule"
->Module</A
-> <A HREF="Data-Ring-Semi-Natural.html#t%3ANatural"
->Natural</A
-> (<A HREF="/usr/local/share/doc/ghc/libraries/base/Data-Monoid.html#t%3AProduct"
->Product</A
-> a)</TD
+></TABLE
+></DIV
+></TD
hunk ./doc/html/monoids/Data-Ring-Module.html 3146
-><TR
-><TD CLASS="decl"
-><A HREF="/usr/local/share/doc/ghc/libraries/base/Prelude.html#t%3ANum"
->Num</A
-> a =&gt; <A HREF="Data-Ring-Module.html#t%3AModule"
->Module</A
-> <A HREF="Data-Ring-Semi-Natural.html#t%3ANatural"
->Natural</A
-> (<A HREF="/usr/local/share/doc/ghc/libraries/base/Data-Monoid.html#t%3AProduct"
->Product</A
-> a)</TD
+></TABLE
+></TD
hunk ./doc/html/monoids/Data-Ring-Module.html 3150
-><TD CLASS="decl"
-><A HREF="Data-Ring-Module.html#t%3AModule"
->Module</A
-> <A HREF="Data-Ring-Semi-Natural.html#t%3ANatural"
->Natural</A
-> (<A HREF="/usr/local/share/doc/ghc/libraries/base/Data-Monoid.html#t%3AFirst"
->First</A
-> a)</TD
+><TD CLASS="s15"
+></TD
hunk ./doc/html/monoids/Data-Ring-Module.html 3154
-><TD CLASS="decl"
-><A HREF="Data-Ring-Module.html#t%3AModule"
->Module</A
-> <A HREF="Data-Ring-Semi-Natural.html#t%3ANatural"
->Natural</A
-> (<A HREF="/usr/local/share/doc/ghc/libraries/base/Data-Monoid.html#t%3AFirst"
->First</A
-> a)</TD
+><TD CLASS="section1"
+><A NAME="2"
+>R-Normed Modules
+</A
+></TD
hunk ./doc/html/monoids/Data-Ring-Module.html 3161
-><TD CLASS="decl"
-><A HREF="Data-Ring-Module.html#t%3AModule"
->Module</A
-> <A HREF="Data-Ring-Semi-Natural.html#t%3ANatural"
->Natural</A
-> (<A HREF="/usr/local/share/doc/ghc/libraries/base/Data-Monoid.html#t%3ALast"
->Last</A
-> a)</TD
+><TD CLASS="s15"
+></TD
hunk ./doc/html/monoids/Data-Ring-Module.html 3165
-><TD CLASS="decl"
-><A HREF="Data-Ring-Module.html#t%3AModule"
->Module</A
-> <A HREF="Data-Ring-Semi-Natural.html#t%3ANatural"
->Natural</A
-> (<A HREF="/usr/local/share/doc/ghc/libraries/base/Data-Monoid.html#t%3ALast"
->Last</A
-> a)</TD
-></TR
+><TD CLASS="topdecl"
+><TABLE CLASS="declbar"
hunk ./doc/html/monoids/Data-Ring-Module.html 3168
-><TD CLASS="decl"
-><A HREF="Data-Monoid-Reducer-Char.html#t%3ACharReducer"
->CharReducer</A
-> m =&gt; <A HREF="Data-Ring-Module.html#t%3AModule"
+><TD CLASS="declname"
+><SPAN CLASS="keyword"
+>class</SPAN
+> <A HREF="Data-Ring-Module.html#t%3AModule"
hunk ./doc/html/monoids/Data-Ring-Module.html 3173
-> <A HREF="Data-Ring-Semi-Natural.html#t%3ANatural"
->Natural</A
-> (<A HREF="Data-Monoid-Lexical-UTF8-Decoder.html#t%3AUTF8"
->UTF8</A
-> m)</TD
+> r m =&gt; <A NAME="t%3ANormed"
+></A
+><B
+>Normed</B
+> r m  <SPAN CLASS="keyword"
+>where</SPAN
+></TD
+><TD CLASS="declbut"
+><A HREF="src/Data-Ring-Module.html#Normed"
+>Source</A
+></TD
hunk ./doc/html/monoids/Data-Ring-Module.html 3185
-><TR
-><TD CLASS="decl"
-><A HREF="Data-Monoid-Reducer-Char.html#t%3ACharReducer"
->CharReducer</A
-> m =&gt; <A HREF="Data-Ring-Module.html#t%3AModule"
->Module</A
-> <A HREF="Data-Ring-Semi-Natural.html#t%3ANatural"
->Natural</A
-> (<A HREF="Data-Monoid-Lexical-UTF8-Decoder.html#t%3AUTF8"
->UTF8</A
-> m)</TD
+></TABLE
+></TD
hunk ./doc/html/monoids/Data-Ring-Module.html 3189
-><TD CLASS="decl"
-><A HREF="Data-Ring-Module.html#t%3AModule"
->Module</A
-> <A HREF="Data-Ring-Semi-Natural.html#t%3ANatural"
->Natural</A
-> (<A HREF="Data-Monoid-Lexical-SourcePosition.html#t%3ASourcePosition"
->SourcePosition</A
-> f)</TD
-></TR
+><TD CLASS="body"
+><TABLE CLASS="vanilla" CELLSPACING="0" CELLPADDING="0"
hunk ./doc/html/monoids/Data-Ring-Module.html 3192
-><TD CLASS="decl"
-><A HREF="Data-Ring-Module.html#t%3AModule"
->Module</A
-> <A HREF="Data-Ring-Semi-Natural.html#t%3ANatural"
->Natural</A
-> (<A HREF="Data-Monoid-Lexical-SourcePosition.html#t%3ASourcePosition"
->SourcePosition</A
-> f)</TD
+><TD CLASS="ndoc"
+><P
+>An r-normed module m satisfies:
+</P
+><OL
+><LI
+><PRE
+>mabs m &gt;= 0</PRE
+></LI
+></OL
+><P
+>2 <TT
+>mabs m == zero{-_r-} =&gt; m == zero{-_m-}</TT
+>
+</P
+><P
+>3 <TT
+>mabs (m + n) &lt;= mabs m + mabs n</TT
+>
+</P
+><P
+>4 <TT
+>r * mabs m = mabs (r *. m) -- if m is an r-LeftModule</TT
+>
+</P
+><P
+>5 <TT
+>mabs m * r = mabs (m .* r) -- if m is an r-RightModule</TT
+>
+</P
+></TD
hunk ./doc/html/monoids/Data-Ring-Module.html 3225
-><TD CLASS="decl"
-><A HREF="/usr/local/share/doc/ghc/libraries/base/Data-Monoid.html#t%3AMonoid"
->Monoid</A
-> m =&gt; <A HREF="Data-Ring-Module.html#t%3AModule"
->Module</A
-> <A HREF="Data-Ring-Semi-Natural.html#t%3ANatural"
->Natural</A
-> (<A HREF="Data-Monoid-Self.html#t%3ASelf"
->Self</A
-> m)</TD
+><TD CLASS="s8"
+></TD
hunk ./doc/html/monoids/Data-Ring-Module.html 3229
-><TD CLASS="decl"
-><A HREF="/usr/local/share/doc/ghc/libraries/base/Data-Monoid.html#t%3AMonoid"
->Monoid</A
-> m =&gt; <A HREF="Data-Ring-Module.html#t%3AModule"
->Module</A
-> <A HREF="Data-Ring-Semi-Natural.html#t%3ANatural"
->Natural</A
-> (<A HREF="Data-Monoid-Self.html#t%3ASelf"
->Self</A
-> m)</TD
+><TD CLASS="section4"
+>Methods</TD
hunk ./doc/html/monoids/Data-Ring-Module.html 3233
-><TD CLASS="decl"
-><A HREF="/usr/local/share/doc/ghc/libraries/base/Data-Monoid.html#t%3AMonoid"
->Monoid</A
-> m =&gt; <A HREF="Data-Ring-Module.html#t%3AModule"
->Module</A
-> <A HREF="Data-Ring-Semi-Natural.html#t%3ANatural"
->Natural</A
-> (<A HREF="Data-Monoid-FromString.html#t%3AFromString"
->FromString</A
-> m)</TD
-></TR
+><TD CLASS="body"
+><TABLE CLASS="vanilla" CELLSPACING="0" CELLPADDING="0"
hunk ./doc/html/monoids/Data-Ring-Module.html 3236
-><TD CLASS="decl"
-><A HREF="/usr/local/share/doc/ghc/libraries/base/Data-Monoid.html#t%3AMonoid"
->Monoid</A
-> m =&gt; <A HREF="Data-Ring-Module.html#t%3AModule"
->Module</A
-> <A HREF="Data-Ring-Semi-Natural.html#t%3ANatural"
->Natural</A
-> (<A HREF="Data-Monoid-FromString.html#t%3AFromString"
->FromString</A
-> m)</TD
-></TR
+><TD CLASS="topdecl"
+><TABLE CLASS="declbar"
hunk ./doc/html/monoids/Data-Ring-Module.html 3239
-><TD CLASS="decl"
-><A HREF="Data-Monoid-Multiplicative.html#t%3AMultiplicative"
->Multiplicative</A
-> m =&gt; <A HREF="Data-Ring-Module.html#t%3AModule"
->Module</A
-> <A HREF="Data-Ring-Semi-Natural.html#t%3ANatural"
->Natural</A
-> (<A HREF="Data-Monoid-Multiplicative.html#t%3ALog"
->Log</A
-> m)</TD
+><TD CLASS="declname"
+><A NAME="v%3Amabs"
+></A
+><B
+>mabs</B
+> :: m -&gt; r</TD
+><TD CLASS="declbut"
+><A HREF="src/Data-Ring-Module.html#mabs"
+>Source</A
+></TD
hunk ./doc/html/monoids/Data-Ring-Module.html 3250
-><TR
-><TD CLASS="decl"
-><A HREF="Data-Monoid-Multiplicative.html#t%3AMultiplicative"
->Multiplicative</A
-> m =&gt; <A HREF="Data-Ring-Module.html#t%3AModule"
->Module</A
-> <A HREF="Data-Ring-Semi-Natural.html#t%3ANatural"
->Natural</A
-> (<A HREF="Data-Monoid-Multiplicative.html#t%3ALog"
->Log</A
-> m)</TD
+></TABLE
+></TD
hunk ./doc/html/monoids/Data-Ring-Module.html 3253
-><TR
-><TD CLASS="decl"
-><A HREF="/usr/local/share/doc/ghc/libraries/base/Control-Applicative.html#t%3AApplicative"
->Applicative</A
-> f =&gt; <A HREF="Data-Ring-Module.html#t%3AModule"
->Module</A
-> <A HREF="Data-Ring-Semi-Natural.html#t%3ANatural"
->Natural</A
-> (<A HREF="Data-Monoid-Applicative.html#t%3ATraversal"
->Traversal</A
-> f)</TD
+></TABLE
+></TD
hunk ./doc/html/monoids/Data-Ring-Module.html 3257
-><TD CLASS="decl"
-><A HREF="/usr/local/share/doc/ghc/libraries/base/Control-Applicative.html#t%3AApplicative"
->Applicative</A
-> f =&gt; <A HREF="Data-Ring-Module.html#t%3AModule"
->Module</A
-> <A HREF="Data-Ring-Semi-Natural.html#t%3ANatural"
->Natural</A
-> (<A HREF="Data-Monoid-Applicative.html#t%3ATraversal"
->Traversal</A
-> f)</TD
+><TD CLASS="s8"
+></TD
hunk ./doc/html/monoids/Data-Ring-Module.html 3261
-><TD CLASS="decl"
-><A HREF="/usr/local/share/doc/ghc/libraries/base/Control-Monad.html#t%3AMonad"
->Monad</A
-> f =&gt; <A HREF="Data-Ring-Module.html#t%3AModule"
->Module</A
-> <A HREF="Data-Ring-Semi-Natural.html#t%3ANatural"
->Natural</A
-> (<A HREF="Data-Monoid-Monad.html#t%3AAction"
->Action</A
-> f)</TD
+><TD CLASS="section4"
+><IMG SRC="minus.gif" CLASS="coll" ONCLICK="toggle(this,'i:Normed')" ALT="show/hide"
+> Instances</TD
hunk ./doc/html/monoids/Data-Ring-Module.html 3266
-><TD CLASS="decl"
-><A HREF="/usr/local/share/doc/ghc/libraries/base/Control-Monad.html#t%3AMonad"
->Monad</A
-> f =&gt; <A HREF="Data-Ring-Module.html#t%3AModule"
->Module</A
-> <A HREF="Data-Ring-Semi-Natural.html#t%3ANatural"
->Natural</A
-> (<A HREF="Data-Monoid-Monad.html#t%3AAction"
->Action</A
-> f)</TD
-></TR
+><TD CLASS="body"
+><DIV ID="i:Normed" STYLE="display:block;"
+><TABLE CLASS="vanilla" CELLSPACING="1" CELLPADDING="0"
hunk ./doc/html/monoids/Data-Ring-Module.html 3271
-><A HREF="Data-Ring-Module.html#t%3AModule"
->Module</A
-> <A HREF="Data-Ring-Semi-Natural.html#t%3ANatural"
->Natural</A
-> (<A HREF="Data-Generator-Free.html#t%3AFree"
->Free</A
+><A HREF="/usr/local/share/doc/ghc/libraries/base/Data-Bits.html#t%3ABits"
+>Bits</A
+> a =&gt; <A HREF="Data-Ring-Module.html#t%3ANormed"
+>Normed</A
+> (<A HREF="Data-Ring-Boolean.html#t%3ABoolean"
+>Boolean</A
+> a) (<A HREF="Data-Ring-Boolean.html#t%3ABoolean"
+>Boolean</A
hunk ./doc/html/monoids/Data-Ring-Module.html 3281
-><TR
-><TD CLASS="decl"
-><A HREF="Data-Ring-Module.html#t%3AModule"
->Module</A
-> <A HREF="Data-Ring-Semi-Natural.html#t%3ANatural"
->Natural</A
-> (<A HREF="Data-Generator-Free.html#t%3AFree"
->Free</A
-> a)</TD
+></TABLE
+></DIV
+></TD
hunk ./doc/html/monoids/Data-Ring-Module.html 3285
-><TR
-><TD CLASS="decl"
-><A HREF="/usr/local/share/doc/ghc/libraries/base/Prelude.html#t%3AEnum"
->Enum</A
-> a =&gt; <A HREF="Data-Ring-Module.html#t%3AModule"
->Module</A
-> <A HREF="Data-Ring-Semi-Natural.html#t%3ANatural"
->Natural</A
-> (<A HREF="Data-Ring-Semi-BitSet.html#t%3ABitSet"
->BitSet</A
-> a)</TD
+></TABLE
+></TD
hunk ./doc/html/monoids/Data-Ring-Module.html 3289
-><TD CLASS="decl"
-><A HREF="/usr/local/share/doc/ghc/libraries/base/Prelude.html#t%3AEnum"
->Enum</A
-> a =&gt; <A HREF="Data-Ring-Module.html#t%3AModule"
->Module</A
-> <A HREF="Data-Ring-Semi-Natural.html#t%3ANatural"
->Natural</A
-> (<A HREF="Data-Ring-Semi-BitSet.html#t%3ABitSet"
->BitSet</A
-> a)</TD
+><TD CLASS="s15"
+></TD
hunk ./doc/html/monoids/Data-Ring-Module.html 3293
-><TD CLASS="decl"
->(<A HREF="Data-Monoid-Union.html#t%3AHasUnionWith"
->HasUnionWith</A
-> f, <A HREF="/usr/local/share/doc/ghc/libraries/base/Data-Ord.html#t%3AOrd"
->Ord</A
-> r, <A HREF="/usr/local/share/doc/ghc/libraries/base/Data-Eq.html#t%3AEq"
->Eq</A
-> r, <A HREF="Data-Ring-Semi-Near.html#t%3ARightSemiNearRing"
->RightSemiNearRing</A
-> r) =&gt; <A HREF="Data-Ring-Module.html#t%3AModule"
->Module</A
-> r (<A HREF="Data-Monoid-Union.html#t%3AUnionWith"
->UnionWith</A
-> f r)</TD
-></TR
+><TD CLASS="topdecl"
+><TABLE CLASS="declbar"
hunk ./doc/html/monoids/Data-Ring-Module.html 3296
-><TD CLASS="decl"
->(<A HREF="Data-Ring-Module.html#t%3AModule"
->Module</A
-> r m, <A HREF="Data-Ring-Module.html#t%3AModule"
->Module</A
-> r n) =&gt; <A HREF="Data-Ring-Module.html#t%3AModule"
->Module</A
-> r ((,) m n)</TD
+><TD CLASS="declname"
+><A NAME="v%3Amabs"
+></A
+><B
+>mabs</B
+> :: <A HREF="Data-Ring-Module.html#t%3ANormed"
+>Normed</A
+> r m =&gt; m -&gt; r</TD
+><TD CLASS="declbut"
+><A HREF="src/Data-Ring-Module.html#mabs"
+>Source</A
+></TD
hunk ./doc/html/monoids/Data-Ring-Module.html 3309
-><TR
-><TD CLASS="decl"
->(<A HREF="Data-Ring-Module.html#t%3AModule"
->Module</A
-> r m, <A HREF="/usr/local/share/doc/ghc/libraries/base/Control-Applicative.html#t%3AApplicative"
->Applicative</A
-> f) =&gt; <A HREF="Data-Ring-Module.html#t%3AModule"
->Module</A
-> r (<A HREF="Data-Monoid-Applicative.html#t%3AApp"
->App</A
-> f m)</TD
+></TABLE
+></TD
hunk ./doc/html/monoids/Data-Ring-Module.html 3313
-><TD CLASS="decl"
->(<A HREF="Data-Ring-Module.html#t%3AModule"
->Module</A
-> r m, <A HREF="/usr/local/share/doc/ghc/libraries/base/Control-Monad.html#t%3AMonad"
->Monad</A
-> f) =&gt; <A HREF="Data-Ring-Module.html#t%3AModule"
->Module</A
-> r (<A HREF="Data-Monoid-Monad.html#t%3AMon"
->Mon</A
-> f m)</TD
+><TD CLASS="s15"
+></TD
hunk ./doc/html/monoids/Data-Ring-Module.html 3317
-><TD CLASS="decl"
-><A HREF="/usr/local/share/doc/ghc/libraries/base/Data-Monoid.html#t%3AMonoid"
->Monoid</A
-> m =&gt; <A HREF="Data-Ring-Module.html#t%3AModule"
->Module</A
-> <A HREF="Data-Ring-Semi-Natural.html#t%3ANatural"
->Natural</A
-> (a -&gt; m)</TD
+><TD CLASS="section1"
+><A NAME="3"
+>Vector Spaces
+</A
+></TD
hunk ./doc/html/monoids/Data-Ring-Module.html 3324
-><TD CLASS="decl"
-><A HREF="/usr/local/share/doc/ghc/libraries/base/Data-Monoid.html#t%3AMonoid"
->Monoid</A
-> m =&gt; <A HREF="Data-Ring-Module.html#t%3AModule"
->Module</A
-> <A HREF="Data-Ring-Semi-Natural.html#t%3ANatural"
->Natural</A
-> (a -&gt; m)</TD
+><TD CLASS="s15"
+></TD
hunk ./doc/html/monoids/Data-Ring-Module.html 3328
-><TD CLASS="decl"
-><A HREF="/usr/local/share/doc/ghc/libraries/base/Data-Eq.html#t%3AEq"
->Eq</A
-> a =&gt; <A HREF="Data-Ring-Module.html#t%3AModule"
+><TD CLASS="topdecl"
+><TABLE CLASS="declbar"
+><TR
+><TD CLASS="declname"
+><SPAN CLASS="keyword"
+>class</SPAN
+> (<A HREF="Data-Ring.html#t%3AField"
+>Field</A
+> f, <A HREF="Data-Ring-Module.html#t%3AModule"
hunk ./doc/html/monoids/Data-Ring-Module.html 3338
-> <A HREF="Data-Ring-Semi-Natural.html#t%3ANatural"
->Natural</A
-> (<A HREF="Data-Generator-Compressive-RLE.html#t%3ARLE"
->RLE</A
-> <A HREF="/usr/local/share/doc/ghc/libraries/containers/Data-Sequence.html#t%3ASeq"
->Seq</A
-> a)</TD
+> f g) =&gt; <A NAME="t%3AVectorSpace"
+></A
+><B
+>VectorSpace</B
+> f g </TD
+><TD CLASS="declbut"
+><A HREF="src/Data-Ring-Module.html#VectorSpace"
+>Source</A
+></TD
+></TR
+></TABLE
+></TD
hunk ./doc/html/monoids/Data-Ring-Module.html 3352
-><TD CLASS="decl"
-><A HREF="/usr/local/share/doc/ghc/libraries/base/Data-Eq.html#t%3AEq"
->Eq</A
-> a =&gt; <A HREF="Data-Ring-Module.html#t%3AModule"
->Module</A
-> <A HREF="Data-Ring-Semi-Natural.html#t%3ANatural"
->Natural</A
-> (<A HREF="Data-Generator-Compressive-RLE.html#t%3ARLE"
->RLE</A
-> <A HREF="/usr/local/share/doc/ghc/libraries/containers/Data-Sequence.html#t%3ASeq"
->Seq</A
-> a)</TD
+><TD CLASS="body"
+><TABLE CLASS="vanilla" CELLSPACING="0" CELLPADDING="0"
+></TABLE
+></TD
hunk ./doc/html/monoids/Data-Ring-Module.html 3358
-><TD CLASS="decl"
-><A HREF="/usr/local/share/doc/ghc/libraries/base/Control-Category.html#t%3ACategory"
->Category</A
-> k =&gt; <A HREF="Data-Ring-Module.html#t%3AModule"
->Module</A
-> <A HREF="Data-Ring-Semi-Natural.html#t%3ANatural"
->Natural</A
-> (<A HREF="Data-Monoid-Categorical.html#t%3AGEndo"
->GEndo</A
-> k a)</TD
+><TD CLASS="s15"
+></TD
hunk ./doc/html/monoids/Data-Ring-Module.html 3362
-><TD CLASS="decl"
-><A HREF="/usr/local/share/doc/ghc/libraries/base/Control-Category.html#t%3ACategory"
->Category</A
-> k =&gt; <A HREF="Data-Ring-Module.html#t%3AModule"
->Module</A
-> <A HREF="Data-Ring-Semi-Natural.html#t%3ANatural"
->Natural</A
-> (<A HREF="Data-Monoid-Categorical.html#t%3AGEndo"
->GEndo</A
-> k a)</TD
+><TD CLASS="section1"
+><A NAME="4"
+>R-Algebras
+</A
+></TD
hunk ./doc/html/monoids/Data-Ring-Module.html 3369
-><TD CLASS="decl"
-><A HREF="/usr/local/share/doc/ghc/libraries/base/Control-Applicative.html#t%3AAlternative"
->Alternative</A
-> f =&gt; <A HREF="Data-Ring-Module.html#t%3AModule"
->Module</A
-> <A HREF="Data-Ring-Semi-Natural.html#t%3ANatural"
->Natural</A
-> (<A HREF="Data-Monoid-Applicative.html#t%3AAlt"
->Alt</A
-> f a)</TD
+><TD CLASS="s15"
+></TD
hunk ./doc/html/monoids/Data-Ring-Module.html 3373
-><TD CLASS="decl"
-><A HREF="/usr/local/share/doc/ghc/libraries/base/Control-Applicative.html#t%3AAlternative"
->Alternative</A
-> f =&gt; <A HREF="Data-Ring-Module.html#t%3AModule"
->Module</A
-> <A HREF="Data-Ring-Semi-Natural.html#t%3ANatural"
->Natural</A
-> (<A HREF="Data-Monoid-Applicative.html#t%3AAlt"
->Alt</A
-> f a)</TD
+><TD CLASS="topdecl"
+><TABLE CLASS="declbar"
+><TR
+><TD CLASS="declname"
+><SPAN CLASS="keyword"
+>class</SPAN
+> (<A HREF="Data-Ring-Module.html#t%3ABimodule"
+>Bimodule</A
+> r m, <A HREF="Data-Monoid-Multiplicative.html#t%3AMultiplicative"
+>Multiplicative</A
+> m) =&gt; <A NAME="t%3AAlgebra"
+></A
+><B
+>Algebra</B
+> r m </TD
+><TD CLASS="declbut"
+><A HREF="src/Data-Ring-Module.html#Algebra"
+>Source</A
+></TD
+></TR
+></TABLE
+></TD
hunk ./doc/html/monoids/Data-Ring-Module.html 3397
-><TD CLASS="decl"
-><A HREF="/usr/local/share/doc/ghc/libraries/base/Control-Monad.html#t%3AMonadPlus"
->MonadPlus</A
-> f =&gt; <A HREF="Data-Ring-Module.html#t%3AModule"
->Module</A
-> <A HREF="Data-Ring-Semi-Natural.html#t%3ANatural"
->Natural</A
-> (<A HREF="Data-Monoid-Monad.html#t%3AMonadSum"
->MonadSum</A
-> f a)</TD
+><TD CLASS="body"
+><TABLE CLASS="vanilla" CELLSPACING="0" CELLPADDING="0"
+><TR
+><TD CLASS="ndoc"
+>Algebra over a (near) (semi) ring.
+ <TT
+>r *. (x * y) = (r *. x) * y = x * (r *. y)</TT
+>
+ <TT
+>(x * y) .* r = y * (x .* r) = (y .* r) * x</TT
+>
+</TD
hunk ./doc/html/monoids/Data-Ring-Module.html 3411
-><TD CLASS="decl"
-><A HREF="/usr/local/share/doc/ghc/libraries/base/Control-Monad.html#t%3AMonadPlus"
->MonadPlus</A
-> f =&gt; <A HREF="Data-Ring-Module.html#t%3AModule"
->Module</A
-> <A HREF="Data-Ring-Semi-Natural.html#t%3ANatural"
->Natural</A
-> (<A HREF="Data-Monoid-Monad.html#t%3AMonadSum"
->MonadSum</A
-> f a)</TD
+><TD CLASS="s8"
+></TD
hunk ./doc/html/monoids/Data-Ring-Module.html 3415
-><TD CLASS="decl"
->(<A HREF="Data-Ring-Module.html#t%3AModule"
->Module</A
-> r m, <A HREF="Data-Ring-Module.html#t%3AModule"
->Module</A
-> r n, <A HREF="Data-Ring-Module.html#t%3AModule"
->Module</A
-> r o) =&gt; <A HREF="Data-Ring-Module.html#t%3AModule"
->Module</A
-> r ((,,) m n o)</TD
+><TD CLASS="section4"
+><IMG SRC="minus.gif" CLASS="coll" ONCLICK="toggle(this,'i:Algebra')" ALT="show/hide"
+> Instances</TD
hunk ./doc/html/monoids/Data-Ring-Module.html 3420
+><TD CLASS="body"
+><DIV ID="i:Algebra" STYLE="display:block;"
+><TABLE CLASS="vanilla" CELLSPACING="1" CELLPADDING="0"
+><TR
hunk ./doc/html/monoids/Data-Ring-Module.html 3425
-><A HREF="/usr/local/share/doc/ghc/libraries/base/Data-Monoid.html#t%3AMonoid"
->Monoid</A
-> m =&gt; <A HREF="Data-Ring-Module.html#t%3AModule"
->Module</A
+>(<A HREF="/usr/local/share/doc/ghc/libraries/base/Prelude.html#t%3ABounded"
+>Bounded</A
+> a, <A HREF="/usr/local/share/doc/ghc/libraries/base/Prelude.html#t%3AEnum"
+>Enum</A
+> a) =&gt; <A HREF="Data-Ring-Module.html#t%3AAlgebra"
+>Algebra</A
hunk ./doc/html/monoids/Data-Ring-Module.html 3433
-> (<A HREF="Data-Monoid-Categorical.html#t%3ACMonoid"
->CMonoid</A
-> m m m)</TD
+> (<A HREF="Data-Ring-Semi-BitSet.html#t%3ABitSet"
+>BitSet</A
+> a)</TD
hunk ./doc/html/monoids/Data-Ring-Module.html 3439
-><A HREF="/usr/local/share/doc/ghc/libraries/base/Data-Monoid.html#t%3AMonoid"
->Monoid</A
-> m =&gt; <A HREF="Data-Ring-Module.html#t%3AModule"
->Module</A
+>(<A HREF="/usr/local/share/doc/ghc/libraries/base/Prelude.html#t%3ABounded"
+>Bounded</A
+> a, <A HREF="/usr/local/share/doc/ghc/libraries/base/Prelude.html#t%3AEnum"
+>Enum</A
+> a) =&gt; <A HREF="Data-Ring-Module.html#t%3AAlgebra"
+>Algebra</A
hunk ./doc/html/monoids/Data-Ring-Module.html 3447
-> (<A HREF="Data-Monoid-Categorical.html#t%3ACMonoid"
->CMonoid</A
-> m m m)</TD
-></TR
-><TR
-><TD CLASS="decl"
->(<A HREF="Data-Ring-Module.html#t%3AModule"
->Module</A
-> r m, <A HREF="Data-Ring-Module.html#t%3AModule"
->Module</A
-> r n, <A HREF="Data-Ring-Module.html#t%3AModule"
->Module</A
-> r o, <A HREF="Data-Ring-Module.html#t%3AModule"
->Module</A
-> r p) =&gt; <A HREF="Data-Ring-Module.html#t%3AModule"
->Module</A
-> r ((,,,) m n o p)</TD
-></TR
-><TR
-><TD CLASS="decl"
->(<A HREF="Data-Ring-Module.html#t%3AModule"
->Module</A
-> r m, <A HREF="Data-Ring-Module.html#t%3AModule"
->Module</A
-> r n, <A HREF="Data-Ring-Module.html#t%3AModule"
->Module</A
-> r o, <A HREF="Data-Ring-Module.html#t%3AModule"
->Module</A
-> r p, <A HREF="Data-Ring-Module.html#t%3AModule"
->Module</A
-> r q) =&gt; <A HREF="Data-Ring-Module.html#t%3AModule"
->Module</A
-> r ((,,,,) m n o p q)</TD
+> (<A HREF="Data-Ring-Semi-BitSet.html#t%3ABitSet"
+>BitSet</A
+> a)</TD
hunk ./doc/html/monoids/Data-Ring-Module.html 3457
-> a) =&gt; <A HREF="Data-Ring-Module.html#t%3AModule"
->Module</A
+> a) =&gt; <A HREF="Data-Ring-Module.html#t%3AAlgebra"
+>Algebra</A
hunk ./doc/html/monoids/Data-Ring-Semi-BitSet.html 22
->monoids-0.1.33: Monoids, specialized containers and a general map/reduce framework</TD
+>monoids-0.1.35: Monoids, specialized containers and a general map/reduce framework</TD
hunk ./doc/html/monoids/Data-Ring-Semi-BitSet.html 125
- enumeration
+ enumeration. Treated as a Boolean semiring over <TT
+><A HREF="/usr/local/share/doc/ghc/libraries/base/Data-Bits.html#v%3A.%26."
+>.&amp;.</A
+></TT
+>/<TT
+><A HREF="/usr/local/share/doc/ghc/libraries/base/Data-Bits.html#v%3A.%7C."
+>.|.</A
+></TT
+>. To get a
+ Boolean <TT
+><A HREF="Data-Ring.html#t%3ARing"
+>Ring</A
+></TT
+>, use <TT
+>Boolean (<TT
+><A HREF="Data-Ring-Semi-BitSet.html#t%3ABitSet"
+>BitSet</A
+></TT
+> a)</TT
+>.
hunk ./doc/html/monoids/Data-Ring-Semi-BitSet.html 174
->module <A HREF="Data-Ring-Semi.html"
->Data.Ring.Semi</A
+>module <A HREF="Data-Ring.html"
+>Data.Ring</A
hunk ./doc/html/monoids/Data-Ring-Semi-BitSet.html 276
-><A HREF="#v%3Acomplement"
->complement</A
-> :: (<A HREF="/usr/local/share/doc/ghc/libraries/base/Prelude.html#t%3AEnum"
->Enum</A
-> a, <A HREF="/usr/local/share/doc/ghc/libraries/base/Prelude.html#t%3ABounded"
->Bounded</A
-> a) =&gt; <A HREF="Data-Ring-Semi-BitSet.html#t%3ABitSet"
->BitSet</A
-> a -&gt; <A HREF="Data-Ring-Semi-BitSet.html#t%3ABitSet"
->BitSet</A
-> a</TD
-></TR
-><TR
-><TD CLASS="s8"
-></TD
-></TR
-><TR
-><TD CLASS="decl"
hunk ./doc/html/monoids/Data-Ring-Semi-BitSet.html 447
->module <A HREF="Data-Ring-Semi.html"
->Data.Ring.Semi</A
+>module <A HREF="Data-Ring.html"
+>Data.Ring</A
hunk ./doc/html/monoids/Data-Ring-Semi-BitSet.html 533
+>(<A HREF="/usr/local/share/doc/ghc/libraries/base/Prelude.html#t%3ABounded"
+>Bounded</A
+> a, <A HREF="/usr/local/share/doc/ghc/libraries/base/Prelude.html#t%3AEnum"
+>Enum</A
+> a) =&gt; <A HREF="Data-Ring-Module.html#t%3AAlgebra"
+>Algebra</A
+> <A HREF="Data-Ring-Semi-Natural.html#t%3ANatural"
+>Natural</A
+> (<A HREF="Data-Ring-Semi-BitSet.html#t%3ABitSet"
+>BitSet</A
+> a)</TD
+></TR
+><TR
+><TD CLASS="decl"
hunk ./doc/html/monoids/Data-Ring-Semi-BitSet.html 549
-> a =&gt; <A HREF="Data-Ring-Module.html#t%3AModule"
->Module</A
+> a =&gt; <A HREF="Data-Ring-Module.html#t%3ABimodule"
+>Bimodule</A
hunk ./doc/html/monoids/Data-Ring-Semi-BitSet.html 583
->(<A HREF="/usr/local/share/doc/ghc/libraries/base/Prelude.html#t%3ABounded"
->Bounded</A
-> a, <A HREF="/usr/local/share/doc/ghc/libraries/base/Prelude.html#t%3AEnum"
+><A HREF="/usr/local/share/doc/ghc/libraries/base/Prelude.html#t%3AEnum"
hunk ./doc/html/monoids/Data-Ring-Semi-BitSet.html 585
-> a) =&gt; <A HREF="Data-Ring-Algebra.html#t%3ARAlgebra"
->RAlgebra</A
+> a =&gt; <A HREF="Data-Ring-Module.html#t%3AModule"
+>Module</A
hunk ./doc/html/monoids/Data-Ring-Semi-BitSet.html 639
+>(<A HREF="/usr/local/share/doc/ghc/libraries/base/Text-Show.html#t%3AShow"
+>Show</A
+> a, <A HREF="/usr/local/share/doc/ghc/libraries/base/Prelude.html#t%3ABounded"
+>Bounded</A
+> a, <A HREF="/usr/local/share/doc/ghc/libraries/base/Prelude.html#t%3AEnum"
+>Enum</A
+> a) =&gt; <A HREF="/usr/local/share/doc/ghc/libraries/base/Prelude.html#t%3ANum"
+>Num</A
+> (<A HREF="Data-Ring-Semi-BitSet.html#t%3ABitSet"
+>BitSet</A
+> a)</TD
+></TR
+><TR
+><TD CLASS="decl"
hunk ./doc/html/monoids/Data-Ring-Semi-BitSet.html 685
+>(<A HREF="/usr/local/share/doc/ghc/libraries/base/Text-Show.html#t%3AShow"
+>Show</A
+> a, <A HREF="/usr/local/share/doc/ghc/libraries/base/Prelude.html#t%3ABounded"
+>Bounded</A
+> a, <A HREF="/usr/local/share/doc/ghc/libraries/base/Prelude.html#t%3AEnum"
+>Enum</A
+> a) =&gt; <A HREF="/usr/local/share/doc/ghc/libraries/base/Data-Bits.html#t%3ABits"
+>Bits</A
+> (<A HREF="Data-Ring-Semi-BitSet.html#t%3ABitSet"
+>BitSet</A
+> a)</TD
+></TR
+><TR
+><TD CLASS="decl"
hunk ./doc/html/monoids/Data-Ring-Semi-BitSet.html 723
-> a) =&gt; <A HREF="Data-Ring-Semi-Near.html#t%3ARightSemiNearRing"
+> a) =&gt; <A HREF="Data-Ring.html#t%3ASemiRing"
+>SemiRing</A
+> (<A HREF="Data-Ring-Semi-BitSet.html#t%3ABitSet"
+>BitSet</A
+> a)</TD
+></TR
+><TR
+><TD CLASS="decl"
+>(<A HREF="/usr/local/share/doc/ghc/libraries/base/Prelude.html#t%3ABounded"
+>Bounded</A
+> a, <A HREF="/usr/local/share/doc/ghc/libraries/base/Prelude.html#t%3AEnum"
+>Enum</A
+> a) =&gt; <A HREF="Data-Ring.html#t%3ARightSemiNearRing"
hunk ./doc/html/monoids/Data-Ring-Semi-BitSet.html 747
-> a) =&gt; <A HREF="Data-Ring-Semi-Near.html#t%3ALeftSemiNearRing"
+> a) =&gt; <A HREF="Data-Ring.html#t%3ALeftSemiNearRing"
hunk ./doc/html/monoids/Data-Ring-Semi-BitSet.html 759
-> a) =&gt; <A HREF="Data-Ring-Semi-Near.html#t%3ARingoid"
+> a) =&gt; <A HREF="Data-Ring.html#t%3ARingoid"
hunk ./doc/html/monoids/Data-Ring-Semi-BitSet.html 771
-> a) =&gt; <A HREF="Data-Ring-Semi.html#t%3ASemiRing"
->SemiRing</A
+> a) =&gt; <A HREF="Data-Ring-Module.html#t%3AAlgebra"
+>Algebra</A
hunk ./doc/html/monoids/Data-Ring-Semi-BitSet.html 775
+> a) (<A HREF="Data-Ring-Semi-BitSet.html#t%3ABitSet"
+>BitSet</A
hunk ./doc/html/monoids/Data-Ring-Semi-BitSet.html 785
-> a) =&gt; <A HREF="Data-Ring-Module.html#t%3AModule"
->Module</A
+> a) =&gt; <A HREF="Data-Ring-Module.html#t%3ABimodule"
+>Bimodule</A
hunk ./doc/html/monoids/Data-Ring-Semi-BitSet.html 821
+><TR
+><TD CLASS="decl"
+>(<A HREF="/usr/local/share/doc/ghc/libraries/base/Prelude.html#t%3ABounded"
+>Bounded</A
+> a, <A HREF="/usr/local/share/doc/ghc/libraries/base/Prelude.html#t%3AEnum"
+>Enum</A
+> a) =&gt; <A HREF="Data-Ring-Module.html#t%3AModule"
+>Module</A
+> (<A HREF="Data-Ring-Semi-BitSet.html#t%3ABitSet"
+>BitSet</A
+> a) (<A HREF="Data-Ring-Semi-BitSet.html#t%3ABitSet"
+>BitSet</A
+> a)</TD
+></TR
hunk ./doc/html/monoids/Data-Ring-Semi-BitSet.html 1049
-><A NAME="v%3Acomplement"
-></A
-><B
->complement</B
-> :: (<A HREF="/usr/local/share/doc/ghc/libraries/base/Prelude.html#t%3AEnum"
->Enum</A
-> a, <A HREF="/usr/local/share/doc/ghc/libraries/base/Prelude.html#t%3ABounded"
->Bounded</A
-> a) =&gt; <A HREF="Data-Ring-Semi-BitSet.html#t%3ABitSet"
->BitSet</A
-> a -&gt; <A HREF="Data-Ring-Semi-BitSet.html#t%3ABitSet"
->BitSet</A
-> a</TD
-><TD CLASS="declbut"
-><A HREF="src/Data-Ring-Semi-BitSet.html#complement"
->Source</A
-></TD
-></TR
-></TABLE
-></TD
-></TR
-><TR
-><TD CLASS="doc"
-><EM
->O(d)</EM
-> Complements a <TT
-><A HREF="Data-Ring-Semi-BitSet.html#t%3ABitSet"
->BitSet</A
-></TT
-> with respect to the bounds of <TT
->a</TT
->. Preserves order of <TT
-><A HREF="Data-Ring-Semi-BitSet.html#v%3Anull"
->null</A
-></TT
-> and <TT
-><A HREF="Data-Ring-Semi-BitSet.html#v%3Asize"
->size</A
-></TT
->
-</TD
-></TR
-><TR
-><TD CLASS="s15"
-></TD
-></TR
-><TR
-><TD CLASS="topdecl"
-><TABLE CLASS="declbar"
-><TR
-><TD CLASS="declname"
hunk ./doc/html/monoids/Data-Ring-Semi-Kleene.html 22
->monoids-0.1.33: Monoids, specialized containers and a general map/reduce framework</TD
+>monoids-0.1.35: Monoids, specialized containers and a general map/reduce framework</TD
hunk ./doc/html/monoids/Data-Ring-Semi-Kleene.html 73
->module <A HREF="Data-Ring-Semi.html"
->Data.Ring.Semi</A
+>module <A HREF="Data-Ring.html"
+>Data.Ring</A
hunk ./doc/html/monoids/Data-Ring-Semi-Kleene.html 88
-> <A HREF="Data-Ring-Semi.html#t%3ASemiRing"
+> <A HREF="Data-Ring.html#t%3ASemiRing"
hunk ./doc/html/monoids/Data-Ring-Semi-Natural.html 22
->monoids-0.1.33: Monoids, specialized containers and a general map/reduce framework</TD
+>monoids-0.1.35: Monoids, specialized containers and a general map/reduce framework</TD
hunk ./doc/html/monoids/Data-Ring-Semi-Natural.html 113
->module <A HREF="Data-Ring-Semi.html"
->Data.Ring.Semi</A
+>module <A HREF="Data-Ring.html"
+>Data.Ring</A
hunk ./doc/html/monoids/Data-Ring-Semi-Natural.html 235
-><A HREF="Data-Ring-Semi-Near.html#t%3ARightSemiNearRing"
->RightSemiNearRing</A
+><A HREF="Data-Ring.html#t%3ASemiRing"
+>SemiRing</A
hunk ./doc/html/monoids/Data-Ring-Semi-Natural.html 243
-><A HREF="Data-Ring-Semi-Near.html#t%3ALeftSemiNearRing"
->LeftSemiNearRing</A
+><A HREF="Data-Ring.html#t%3ARightSemiNearRing"
+>RightSemiNearRing</A
hunk ./doc/html/monoids/Data-Ring-Semi-Natural.html 251
-><A HREF="Data-Ring-Semi-Near.html#t%3ARingoid"
->Ringoid</A
+><A HREF="Data-Ring.html#t%3ALeftSemiNearRing"
+>LeftSemiNearRing</A
hunk ./doc/html/monoids/Data-Ring-Semi-Natural.html 259
-><A HREF="Data-Ring-Semi.html#t%3ASemiRing"
->SemiRing</A
+><A HREF="Data-Ring.html#t%3ARingoid"
+>Ringoid</A
hunk ./doc/html/monoids/Data-Ring-Semi-Natural.html 267
-><A HREF="Data-Ring-Module.html#t%3AModule"
->Module</A
+><A HREF="Data-Ring-Module.html#t%3ARightModule"
+>RightModule</A
hunk ./doc/html/monoids/Data-Ring-Semi-Natural.html 277
-><A HREF="Data-Ring-Module.html#t%3AModule"
->Module</A
+><A HREF="Data-Ring-Module.html#t%3ARightModule"
+>RightModule</A
hunk ./doc/html/monoids/Data-Ring-Semi-Natural.html 285
-><A HREF="Data-Ring-Module.html#t%3AModule"
->Module</A
+><A HREF="Data-Ring-Module.html#t%3ARightModule"
+>RightModule</A
hunk ./doc/html/monoids/Data-Ring-Semi-Natural.html 295
-><A HREF="Data-Ring-Module.html#t%3AModule"
->Module</A
+><A HREF="Data-Ring-Module.html#t%3ARightModule"
+>RightModule</A
hunk ./doc/html/monoids/Data-Ring-Semi-Natural.html 305
-><A HREF="Data-Ring-Module.html#t%3ARightModule"
->RightModule</A
+><A HREF="Data-Ring-Module.html#t%3ALeftModule"
+>LeftModule</A
hunk ./doc/html/monoids/Data-Ring-Semi-Natural.html 315
-><A HREF="Data-Ring-Module.html#t%3ARightModule"
->RightModule</A
+><A HREF="Data-Ring-Module.html#t%3ALeftModule"
+>LeftModule</A
hunk ./doc/html/monoids/Data-Ring-Semi-Natural.html 323
-><A HREF="Data-Ring-Module.html#t%3ARightModule"
->RightModule</A
+><A HREF="Data-Ring-Module.html#t%3ALeftModule"
+>LeftModule</A
hunk ./doc/html/monoids/Data-Ring-Semi-Natural.html 333
-><A HREF="Data-Ring-Module.html#t%3ARightModule"
->RightModule</A
+><A HREF="Data-Ring-Module.html#t%3ALeftModule"
+>LeftModule</A
hunk ./doc/html/monoids/Data-Ring-Semi-Natural.html 343
-><A HREF="Data-Ring-Module.html#t%3ALeftModule"
->LeftModule</A
+><A HREF="Data-Ring-Module.html#t%3AModule"
+>Module</A
hunk ./doc/html/monoids/Data-Ring-Semi-Natural.html 353
-><A HREF="Data-Ring-Module.html#t%3ALeftModule"
->LeftModule</A
+><A HREF="Data-Ring-Module.html#t%3AModule"
+>Module</A
hunk ./doc/html/monoids/Data-Ring-Semi-Natural.html 361
-><A HREF="Data-Ring-Module.html#t%3ALeftModule"
->LeftModule</A
+><A HREF="Data-Ring-Module.html#t%3AModule"
+>Module</A
hunk ./doc/html/monoids/Data-Ring-Semi-Natural.html 371
-><A HREF="Data-Ring-Module.html#t%3ALeftModule"
->LeftModule</A
+><A HREF="Data-Ring-Module.html#t%3AModule"
+>Module</A
hunk ./doc/html/monoids/Data-Ring-Semi-Natural.html 381
-><A HREF="Data-Ring-Module.html#t%3AModule"
->Module</A
+>(<A HREF="/usr/local/share/doc/ghc/libraries/base/Prelude.html#t%3ABounded"
+>Bounded</A
+> a, <A HREF="/usr/local/share/doc/ghc/libraries/base/Prelude.html#t%3AEnum"
+>Enum</A
+> a) =&gt; <A HREF="Data-Ring-Module.html#t%3AAlgebra"
+>Algebra</A
+> <A HREF="Data-Ring-Semi-Natural.html#t%3ANatural"
+>Natural</A
+> (<A HREF="Data-Ring-Semi-BitSet.html#t%3ABitSet"
+>BitSet</A
+> a)</TD
+></TR
+><TR
+><TD CLASS="decl"
+><A HREF="/usr/local/share/doc/ghc/libraries/base/Data-Bits.html#t%3ABits"
+>Bits</A
+> a =&gt; <A HREF="Data-Ring-Module.html#t%3ABimodule"
+>Bimodule</A
+> <A HREF="Data-Ring-Semi-Natural.html#t%3ANatural"
+>Natural</A
+> (<A HREF="Data-Ring-Boolean.html#t%3ABoolean"
+>Boolean</A
+> a)</TD
+></TR
+><TR
+><TD CLASS="decl"
+><A HREF="/usr/local/share/doc/ghc/libraries/base/Prelude.html#t%3AEnum"
+>Enum</A
+> a =&gt; <A HREF="Data-Ring-Module.html#t%3ABimodule"
+>Bimodule</A
+> <A HREF="Data-Ring-Semi-Natural.html#t%3ANatural"
+>Natural</A
+> (<A HREF="Data-Ring-Semi-BitSet.html#t%3ABitSet"
+>BitSet</A
+> a)</TD
+></TR
+><TR
+><TD CLASS="decl"
+>(<A HREF="/usr/local/share/doc/ghc/libraries/base/Data-Ord.html#t%3AOrd"
+>Ord</A
+> a, <A HREF="/usr/local/share/doc/ghc/libraries/base/Prelude.html#t%3ANum"
+>Num</A
+> a) =&gt; <A HREF="Data-Ring-Module.html#t%3ABimodule"
+>Bimodule</A
+> <A HREF="Data-Ring-Semi-Natural.html#t%3ANatural"
+>Natural</A
+> (<A HREF="Data-Ring-Semi-Tropical.html#t%3ATropical"
+>Tropical</A
+> a)</TD
+></TR
+><TR
+><TD CLASS="decl"
+><A HREF="Data-Ring-Module.html#t%3ARightModule"
+>RightModule</A
hunk ./doc/html/monoids/Data-Ring-Semi-Natural.html 443
-> m =&gt; <A HREF="Data-Ring-Module.html#t%3AModule"
->Module</A
+> m =&gt; <A HREF="Data-Ring-Module.html#t%3ARightModule"
+>RightModule</A
hunk ./doc/html/monoids/Data-Ring-Semi-Natural.html 453
-><A HREF="Data-Ring-Module.html#t%3AModule"
->Module</A
+><A HREF="Data-Ring-Module.html#t%3ARightModule"
+>RightModule</A
hunk ./doc/html/monoids/Data-Ring-Semi-Natural.html 465
-> a =&gt; <A HREF="Data-Ring-Module.html#t%3AModule"
->Module</A
+> a =&gt; <A HREF="Data-Ring-Module.html#t%3ARightModule"
+>RightModule</A
hunk ./doc/html/monoids/Data-Ring-Semi-Natural.html 477
-> a =&gt; <A HREF="Data-Ring-Module.html#t%3AModule"
->Module</A
+> a =&gt; <A HREF="Data-Ring-Module.html#t%3ARightModule"
+>RightModule</A
hunk ./doc/html/monoids/Data-Ring-Semi-Natural.html 487
-><A HREF="Data-Ring-Module.html#t%3AModule"
->Module</A
+><A HREF="Data-Ring-Module.html#t%3ARightModule"
+>RightModule</A
hunk ./doc/html/monoids/Data-Ring-Semi-Natural.html 497
-><A HREF="Data-Ring-Module.html#t%3AModule"
->Module</A
+><A HREF="Data-Ring-Module.html#t%3ARightModule"
+>RightModule</A
hunk ./doc/html/monoids/Data-Ring-Semi-Natural.html 509
-> m =&gt; <A HREF="Data-Ring-Module.html#t%3AModule"
->Module</A
+> m =&gt; <A HREF="Data-Ring-Module.html#t%3ARightModule"
+>RightModule</A
hunk ./doc/html/monoids/Data-Ring-Semi-Natural.html 519
-><A HREF="Data-Ring-Module.html#t%3AModule"
->Module</A
+><A HREF="Data-Ring-Module.html#t%3ARightModule"
+>RightModule</A
hunk ./doc/html/monoids/Data-Ring-Semi-Natural.html 531
-> m =&gt; <A HREF="Data-Ring-Module.html#t%3AModule"
->Module</A
+> m =&gt; <A HREF="Data-Ring-Module.html#t%3ARightModule"
+>RightModule</A
hunk ./doc/html/monoids/Data-Ring-Semi-Natural.html 543
-> m =&gt; <A HREF="Data-Ring-Module.html#t%3AModule"
->Module</A
+> m =&gt; <A HREF="Data-Ring-Module.html#t%3ARightModule"
+>RightModule</A
hunk ./doc/html/monoids/Data-Ring-Semi-Natural.html 555
-> m =&gt; <A HREF="Data-Ring-Module.html#t%3AModule"
->Module</A
+> m =&gt; <A HREF="Data-Ring-Module.html#t%3ARightModule"
+>RightModule</A
hunk ./doc/html/monoids/Data-Ring-Semi-Natural.html 567
-> f =&gt; <A HREF="Data-Ring-Module.html#t%3AModule"
->Module</A
+> f =&gt; <A HREF="Data-Ring-Module.html#t%3ARightModule"
+>RightModule</A
hunk ./doc/html/monoids/Data-Ring-Semi-Natural.html 579
-> f =&gt; <A HREF="Data-Ring-Module.html#t%3AModule"
->Module</A
+> f =&gt; <A HREF="Data-Ring-Module.html#t%3ARightModule"
+>RightModule</A
hunk ./doc/html/monoids/Data-Ring-Semi-Natural.html 589
-><A HREF="Data-Ring-Module.html#t%3AModule"
->Module</A
+><A HREF="Data-Ring-Module.html#t%3ARightModule"
+>RightModule</A
hunk ./doc/html/monoids/Data-Ring-Semi-Natural.html 599
+><A HREF="/usr/local/share/doc/ghc/libraries/base/Data-Bits.html#t%3ABits"
+>Bits</A
+> a =&gt; <A HREF="Data-Ring-Module.html#t%3ARightModule"
+>RightModule</A
+> <A HREF="Data-Ring-Semi-Natural.html#t%3ANatural"
+>Natural</A
+> (<A HREF="Data-Ring-Boolean.html#t%3ABoolean"
+>Boolean</A
+> a)</TD
+></TR
+><TR
+><TD CLASS="decl"
hunk ./doc/html/monoids/Data-Ring-Semi-Natural.html 613
-> a =&gt; <A HREF="Data-Ring-Module.html#t%3AModule"
->Module</A
+> a =&gt; <A HREF="Data-Ring-Module.html#t%3ARightModule"
+>RightModule</A
hunk ./doc/html/monoids/Data-Ring-Semi-Natural.html 623
-><A HREF="Data-Ring-Module.html#t%3ARightModule"
+>(<A HREF="/usr/local/share/doc/ghc/libraries/base/Data-Ord.html#t%3AOrd"
+>Ord</A
+> a, <A HREF="/usr/local/share/doc/ghc/libraries/base/Prelude.html#t%3ANum"
+>Num</A
+> a) =&gt; <A HREF="Data-Ring-Module.html#t%3ARightModule"
hunk ./doc/html/monoids/Data-Ring-Semi-Natural.html 631
+> (<A HREF="Data-Ring-Semi-Tropical.html#t%3ATropical"
+>Tropical</A
+> a)</TD
+></TR
+><TR
+><TD CLASS="decl"
+><A HREF="Data-Ring-Module.html#t%3ALeftModule"
+>LeftModule</A
+> <A HREF="Data-Ring-Semi-Natural.html#t%3ANatural"
+>Natural</A
hunk ./doc/html/monoids/Data-Ring-Semi-Natural.html 647
-> m =&gt; <A HREF="Data-Ring-Module.html#t%3ARightModule"
->RightModule</A
+> m =&gt; <A HREF="Data-Ring-Module.html#t%3ALeftModule"
+>LeftModule</A
hunk ./doc/html/monoids/Data-Ring-Semi-Natural.html 657
-><A HREF="Data-Ring-Module.html#t%3ARightModule"
->RightModule</A
+><A HREF="Data-Ring-Module.html#t%3ALeftModule"
+>LeftModule</A
hunk ./doc/html/monoids/Data-Ring-Semi-Natural.html 669
-> a =&gt; <A HREF="Data-Ring-Module.html#t%3ARightModule"
->RightModule</A
+> a =&gt; <A HREF="Data-Ring-Module.html#t%3ALeftModule"
+>LeftModule</A
hunk ./doc/html/monoids/Data-Ring-Semi-Natural.html 681
-> a =&gt; <A HREF="Data-Ring-Module.html#t%3ARightModule"
->RightModule</A
+> a =&gt; <A HREF="Data-Ring-Module.html#t%3ALeftModule"
+>LeftModule</A
hunk ./doc/html/monoids/Data-Ring-Semi-Natural.html 691
-><A HREF="Data-Ring-Module.html#t%3ARightModule"
->RightModule</A
+><A HREF="Data-Ring-Module.html#t%3ALeftModule"
+>LeftModule</A
hunk ./doc/html/monoids/Data-Ring-Semi-Natural.html 701
-><A HREF="Data-Ring-Module.html#t%3ARightModule"
->RightModule</A
+><A HREF="Data-Ring-Module.html#t%3ALeftModule"
+>LeftModule</A
hunk ./doc/html/monoids/Data-Ring-Semi-Natural.html 713
-> m =&gt; <A HREF="Data-Ring-Module.html#t%3ARightModule"
->RightModule</A
+> m =&gt; <A HREF="Data-Ring-Module.html#t%3ALeftModule"
+>LeftModule</A
hunk ./doc/html/monoids/Data-Ring-Semi-Natural.html 723
-><A HREF="Data-Ring-Module.html#t%3ARightModule"
->RightModule</A
+><A HREF="Data-Ring-Module.html#t%3ALeftModule"
+>LeftModule</A
hunk ./doc/html/monoids/Data-Ring-Semi-Natural.html 735
-> m =&gt; <A HREF="Data-Ring-Module.html#t%3ARightModule"
->RightModule</A
+> m =&gt; <A HREF="Data-Ring-Module.html#t%3ALeftModule"
+>LeftModule</A
hunk ./doc/html/monoids/Data-Ring-Semi-Natural.html 747
-> m =&gt; <A HREF="Data-Ring-Module.html#t%3ARightModule"
->RightModule</A
+> m =&gt; <A HREF="Data-Ring-Module.html#t%3ALeftModule"
+>LeftModule</A
hunk ./doc/html/monoids/Data-Ring-Semi-Natural.html 759
-> m =&gt; <A HREF="Data-Ring-Module.html#t%3ARightModule"
->RightModule</A
+> m =&gt; <A HREF="Data-Ring-Module.html#t%3ALeftModule"
+>LeftModule</A
hunk ./doc/html/monoids/Data-Ring-Semi-Natural.html 771
-> f =&gt; <A HREF="Data-Ring-Module.html#t%3ARightModule"
->RightModule</A
+> f =&gt; <A HREF="Data-Ring-Module.html#t%3ALeftModule"
+>LeftModule</A
hunk ./doc/html/monoids/Data-Ring-Semi-Natural.html 783
-> f =&gt; <A HREF="Data-Ring-Module.html#t%3ARightModule"
->RightModule</A
+> f =&gt; <A HREF="Data-Ring-Module.html#t%3ALeftModule"
+>LeftModule</A
hunk ./doc/html/monoids/Data-Ring-Semi-Natural.html 793
-><A HREF="Data-Ring-Module.html#t%3ARightModule"
->RightModule</A
+><A HREF="Data-Ring-Module.html#t%3ALeftModule"
+>LeftModule</A
hunk ./doc/html/monoids/Data-Ring-Semi-Natural.html 803
+><A HREF="/usr/local/share/doc/ghc/libraries/base/Data-Bits.html#t%3ABits"
+>Bits</A
+> a =&gt; <A HREF="Data-Ring-Module.html#t%3ALeftModule"
+>LeftModule</A
+> <A HREF="Data-Ring-Semi-Natural.html#t%3ANatural"
+>Natural</A
+> (<A HREF="Data-Ring-Boolean.html#t%3ABoolean"
+>Boolean</A
+> a)</TD
+></TR
+><TR
+><TD CLASS="decl"
hunk ./doc/html/monoids/Data-Ring-Semi-Natural.html 817
-> a =&gt; <A HREF="Data-Ring-Module.html#t%3ARightModule"
->RightModule</A
+> a =&gt; <A HREF="Data-Ring-Module.html#t%3ALeftModule"
+>LeftModule</A
hunk ./doc/html/monoids/Data-Ring-Semi-Natural.html 827
-><A HREF="Data-Ring-Module.html#t%3ALeftModule"
+>(<A HREF="/usr/local/share/doc/ghc/libraries/base/Data-Ord.html#t%3AOrd"
+>Ord</A
+> a, <A HREF="/usr/local/share/doc/ghc/libraries/base/Prelude.html#t%3ANum"
+>Num</A
+> a) =&gt; <A HREF="Data-Ring-Module.html#t%3ALeftModule"
hunk ./doc/html/monoids/Data-Ring-Semi-Natural.html 835
+> (<A HREF="Data-Ring-Semi-Tropical.html#t%3ATropical"
+>Tropical</A
+> a)</TD
+></TR
+><TR
+><TD CLASS="decl"
+><A HREF="Data-Ring-Module.html#t%3AModule"
+>Module</A
+> <A HREF="Data-Ring-Semi-Natural.html#t%3ANatural"
+>Natural</A
hunk ./doc/html/monoids/Data-Ring-Semi-Natural.html 851
-> m =&gt; <A HREF="Data-Ring-Module.html#t%3ALeftModule"
->LeftModule</A
+> m =&gt; <A HREF="Data-Ring-Module.html#t%3AModule"
+>Module</A
hunk ./doc/html/monoids/Data-Ring-Semi-Natural.html 861
-><A HREF="Data-Ring-Module.html#t%3ALeftModule"
->LeftModule</A
+><A HREF="Data-Ring-Module.html#t%3AModule"
+>Module</A
hunk ./doc/html/monoids/Data-Ring-Semi-Natural.html 873
-> a =&gt; <A HREF="Data-Ring-Module.html#t%3ALeftModule"
->LeftModule</A
+> a =&gt; <A HREF="Data-Ring-Module.html#t%3AModule"
+>Module</A
hunk ./doc/html/monoids/Data-Ring-Semi-Natural.html 885
-> a =&gt; <A HREF="Data-Ring-Module.html#t%3ALeftModule"
->LeftModule</A
+> a =&gt; <A HREF="Data-Ring-Module.html#t%3AModule"
+>Module</A
hunk ./doc/html/monoids/Data-Ring-Semi-Natural.html 895
-><A HREF="Data-Ring-Module.html#t%3ALeftModule"
->LeftModule</A
+><A HREF="Data-Ring-Module.html#t%3AModule"
+>Module</A
hunk ./doc/html/monoids/Data-Ring-Semi-Natural.html 905
-><A HREF="Data-Ring-Module.html#t%3ALeftModule"
->LeftModule</A
+><A HREF="Data-Ring-Module.html#t%3AModule"
+>Module</A
hunk ./doc/html/monoids/Data-Ring-Semi-Natural.html 917
-> m =&gt; <A HREF="Data-Ring-Module.html#t%3ALeftModule"
->LeftModule</A
+> m =&gt; <A HREF="Data-Ring-Module.html#t%3AModule"
+>Module</A
hunk ./doc/html/monoids/Data-Ring-Semi-Natural.html 927
-><A HREF="Data-Ring-Module.html#t%3ALeftModule"
->LeftModule</A
+><A HREF="Data-Ring-Module.html#t%3AModule"
+>Module</A
hunk ./doc/html/monoids/Data-Ring-Semi-Natural.html 939
-> m =&gt; <A HREF="Data-Ring-Module.html#t%3ALeftModule"
->LeftModule</A
+> m =&gt; <A HREF="Data-Ring-Module.html#t%3AModule"
+>Module</A
hunk ./doc/html/monoids/Data-Ring-Semi-Natural.html 951
-> m =&gt; <A HREF="Data-Ring-Module.html#t%3ALeftModule"
->LeftModule</A
+> m =&gt; <A HREF="Data-Ring-Module.html#t%3AModule"
+>Module</A
hunk ./doc/html/monoids/Data-Ring-Semi-Natural.html 963
-> m =&gt; <A HREF="Data-Ring-Module.html#t%3ALeftModule"
->LeftModule</A
+> m =&gt; <A HREF="Data-Ring-Module.html#t%3AModule"
+>Module</A
hunk ./doc/html/monoids/Data-Ring-Semi-Natural.html 975
-> f =&gt; <A HREF="Data-Ring-Module.html#t%3ALeftModule"
->LeftModule</A
+> f =&gt; <A HREF="Data-Ring-Module.html#t%3AModule"
+>Module</A
hunk ./doc/html/monoids/Data-Ring-Semi-Natural.html 987
-> f =&gt; <A HREF="Data-Ring-Module.html#t%3ALeftModule"
->LeftModule</A
+> f =&gt; <A HREF="Data-Ring-Module.html#t%3AModule"
+>Module</A
hunk ./doc/html/monoids/Data-Ring-Semi-Natural.html 997
-><A HREF="Data-Ring-Module.html#t%3ALeftModule"
->LeftModule</A
+><A HREF="Data-Ring-Module.html#t%3AModule"
+>Module</A
hunk ./doc/html/monoids/Data-Ring-Semi-Natural.html 1007
-><A HREF="/usr/local/share/doc/ghc/libraries/base/Prelude.html#t%3AEnum"
->Enum</A
-> a =&gt; <A HREF="Data-Ring-Module.html#t%3ALeftModule"
->LeftModule</A
+><A HREF="/usr/local/share/doc/ghc/libraries/base/Data-Bits.html#t%3ABits"
+>Bits</A
+> a =&gt; <A HREF="Data-Ring-Module.html#t%3AModule"
+>Module</A
hunk ./doc/html/monoids/Data-Ring-Semi-Natural.html 1013
-> (<A HREF="Data-Ring-Semi-BitSet.html#t%3ABitSet"
->BitSet</A
+> (<A HREF="Data-Ring-Boolean.html#t%3ABoolean"
+>Boolean</A
hunk ./doc/html/monoids/Data-Ring-Semi-Natural.html 1019
->(<A HREF="/usr/local/share/doc/ghc/libraries/base/Prelude.html#t%3ABounded"
->Bounded</A
-> a, <A HREF="/usr/local/share/doc/ghc/libraries/base/Prelude.html#t%3AEnum"
+><A HREF="/usr/local/share/doc/ghc/libraries/base/Prelude.html#t%3AEnum"
hunk ./doc/html/monoids/Data-Ring-Semi-Natural.html 1021
-> a) =&gt; <A HREF="Data-Ring-Algebra.html#t%3ARAlgebra"
->RAlgebra</A
+> a =&gt; <A HREF="Data-Ring-Module.html#t%3AModule"
+>Module</A
hunk ./doc/html/monoids/Data-Ring-Semi-Natural.html 1031
-><A HREF="/usr/local/share/doc/ghc/libraries/base/Data-Monoid.html#t%3AMonoid"
->Monoid</A
-> m =&gt; <A HREF="Data-Ring-Module.html#t%3AModule"
+>(<A HREF="/usr/local/share/doc/ghc/libraries/base/Data-Ord.html#t%3AOrd"
+>Ord</A
+> a, <A HREF="/usr/local/share/doc/ghc/libraries/base/Prelude.html#t%3ANum"
+>Num</A
+> a) =&gt; <A HREF="Data-Ring-Module.html#t%3AModule"
hunk ./doc/html/monoids/Data-Ring-Semi-Natural.html 1039
-> (a -&gt; m)</TD
+> (<A HREF="Data-Ring-Semi-Tropical.html#t%3ATropical"
+>Tropical</A
+> a)</TD
hunk ./doc/html/monoids/Data-Ring-Semi-Natural.html 1045
-><A HREF="/usr/local/share/doc/ghc/libraries/base/Data-Eq.html#t%3AEq"
->Eq</A
-> a =&gt; <A HREF="Data-Ring-Module.html#t%3AModule"
->Module</A
+><A HREF="/usr/local/share/doc/ghc/libraries/base/Data-Monoid.html#t%3AMonoid"
+>Monoid</A
+> m =&gt; <A HREF="Data-Ring-Module.html#t%3ARightModule"
+>RightModule</A
hunk ./doc/html/monoids/Data-Ring-Semi-Natural.html 1051
-> (<A HREF="Data-Generator-Compressive-RLE.html#t%3ARLE"
->RLE</A
-> <A HREF="/usr/local/share/doc/ghc/libraries/containers/Data-Sequence.html#t%3ASeq"
->Seq</A
-> a)</TD
+> (a -&gt; m)</TD
hunk ./doc/html/monoids/Data-Ring-Semi-Natural.html 1057
-> k =&gt; <A HREF="Data-Ring-Module.html#t%3AModule"
->Module</A
+> k =&gt; <A HREF="Data-Ring-Module.html#t%3ARightModule"
+>RightModule</A
hunk ./doc/html/monoids/Data-Ring-Semi-Natural.html 1069
-> f =&gt; <A HREF="Data-Ring-Module.html#t%3AModule"
->Module</A
+> f =&gt; <A HREF="Data-Ring-Module.html#t%3ARightModule"
+>RightModule</A
hunk ./doc/html/monoids/Data-Ring-Semi-Natural.html 1081
-> f =&gt; <A HREF="Data-Ring-Module.html#t%3AModule"
->Module</A
+> f =&gt; <A HREF="Data-Ring-Module.html#t%3ARightModule"
+>RightModule</A
hunk ./doc/html/monoids/Data-Ring-Semi-Natural.html 1093
-> m =&gt; <A HREF="Data-Ring-Module.html#t%3ARightModule"
->RightModule</A
+> m =&gt; <A HREF="Data-Ring-Module.html#t%3ALeftModule"
+>LeftModule</A
hunk ./doc/html/monoids/Data-Ring-Semi-Natural.html 1101
-><A HREF="/usr/local/share/doc/ghc/libraries/base/Data-Eq.html#t%3AEq"
->Eq</A
-> a =&gt; <A HREF="Data-Ring-Module.html#t%3ARightModule"
->RightModule</A
-> <A HREF="Data-Ring-Semi-Natural.html#t%3ANatural"
->Natural</A
-> (<A HREF="Data-Generator-Compressive-RLE.html#t%3ARLE"
->RLE</A
-> <A HREF="/usr/local/share/doc/ghc/libraries/containers/Data-Sequence.html#t%3ASeq"
->Seq</A
-> a)</TD
-></TR
-><TR
-><TD CLASS="decl"
hunk ./doc/html/monoids/Data-Ring-Semi-Natural.html 1103
-> k =&gt; <A HREF="Data-Ring-Module.html#t%3ARightModule"
->RightModule</A
+> k =&gt; <A HREF="Data-Ring-Module.html#t%3ALeftModule"
+>LeftModule</A
hunk ./doc/html/monoids/Data-Ring-Semi-Natural.html 1115
-> f =&gt; <A HREF="Data-Ring-Module.html#t%3ARightModule"
->RightModule</A
+> f =&gt; <A HREF="Data-Ring-Module.html#t%3ALeftModule"
+>LeftModule</A
hunk ./doc/html/monoids/Data-Ring-Semi-Natural.html 1127
-> f =&gt; <A HREF="Data-Ring-Module.html#t%3ARightModule"
->RightModule</A
+> f =&gt; <A HREF="Data-Ring-Module.html#t%3ALeftModule"
+>LeftModule</A
hunk ./doc/html/monoids/Data-Ring-Semi-Natural.html 1139
-> m =&gt; <A HREF="Data-Ring-Module.html#t%3ALeftModule"
->LeftModule</A
+> m =&gt; <A HREF="Data-Ring-Module.html#t%3AModule"
+>Module</A
hunk ./doc/html/monoids/Data-Ring-Semi-Natural.html 1147
-><A HREF="/usr/local/share/doc/ghc/libraries/base/Data-Eq.html#t%3AEq"
->Eq</A
-> a =&gt; <A HREF="Data-Ring-Module.html#t%3ALeftModule"
->LeftModule</A
-> <A HREF="Data-Ring-Semi-Natural.html#t%3ANatural"
->Natural</A
-> (<A HREF="Data-Generator-Compressive-RLE.html#t%3ARLE"
->RLE</A
-> <A HREF="/usr/local/share/doc/ghc/libraries/containers/Data-Sequence.html#t%3ASeq"
->Seq</A
-> a)</TD
-></TR
-><TR
-><TD CLASS="decl"
hunk ./doc/html/monoids/Data-Ring-Semi-Natural.html 1149
-> k =&gt; <A HREF="Data-Ring-Module.html#t%3ALeftModule"
->LeftModule</A
+> k =&gt; <A HREF="Data-Ring-Module.html#t%3AModule"
+>Module</A
hunk ./doc/html/monoids/Data-Ring-Semi-Natural.html 1161
-> f =&gt; <A HREF="Data-Ring-Module.html#t%3ALeftModule"
->LeftModule</A
+> f =&gt; <A HREF="Data-Ring-Module.html#t%3AModule"
+>Module</A
hunk ./doc/html/monoids/Data-Ring-Semi-Natural.html 1173
-> f =&gt; <A HREF="Data-Ring-Module.html#t%3ALeftModule"
->LeftModule</A
+> f =&gt; <A HREF="Data-Ring-Module.html#t%3AModule"
+>Module</A
hunk ./doc/html/monoids/Data-Ring-Semi-Natural.html 1185
-> m =&gt; <A HREF="Data-Ring-Module.html#t%3AModule"
->Module</A
+> m =&gt; <A HREF="Data-Ring-Module.html#t%3ARightModule"
+>RightModule</A
hunk ./doc/html/monoids/Data-Ring-Semi-Natural.html 1197
-> m =&gt; <A HREF="Data-Ring-Module.html#t%3ARightModule"
->RightModule</A
+> m =&gt; <A HREF="Data-Ring-Module.html#t%3ALeftModule"
+>LeftModule</A
hunk ./doc/html/monoids/Data-Ring-Semi-Natural.html 1209
-> m =&gt; <A HREF="Data-Ring-Module.html#t%3ALeftModule"
->LeftModule</A
+> m =&gt; <A HREF="Data-Ring-Module.html#t%3AModule"
+>Module</A
hunk ./doc/html/monoids/Data-Ring-Semi-Natural.html 1233
-><A NAME="v%3Anatural"
+><A NAME="v%3AtoNatural"
hunk ./doc/html/monoids/Data-Ring-Semi-Natural.html 1236
->natural</B
+>toNatural</B
hunk ./doc/html/monoids/Data-Ring-Semi-Natural.html 1241
-><A HREF="src/Data-Ring-Semi-Natural.html#natural"
+><A HREF="src/Data-Ring-Semi-Natural.html#toNatural"
+>Source</A
+></TD
+></TR
+></TABLE
+></TD
+></TR
+><TR
+><TD CLASS="s15"
+></TD
+></TR
+><TR
+><TD CLASS="topdecl"
+><TABLE CLASS="declbar"
+><TR
+><TD CLASS="declname"
+><A NAME="v%3AfromNatural"
+></A
+><B
+>fromNatural</B
+> :: <A HREF="Data-Ring.html#t%3ARingoid"
+>Ringoid</A
+> r =&gt; <A HREF="Data-Ring-Semi-Natural.html#t%3ANatural"
+>Natural</A
+> -&gt; r</TD
+><TD CLASS="declbut"
+><A HREF="src/Data-Ring-Semi-Natural.html#fromNatural"
hunk ./doc/html/monoids/Data-Ring-Semi-Near-Trie.html 22
->monoids-0.1.33: Monoids, specialized containers and a general map/reduce framework</TD
+>monoids-0.1.35: Monoids, specialized containers and a general map/reduce framework</TD
hunk ./doc/html/monoids/Data-Ring-Semi-Near-Trie.html 73
->module <A HREF="Data-Ring-Semi-Near.html"
->Data.Ring.Semi.Near</A
+>module <A HREF="Data-Ring.html"
+>Data.Ring</A
hunk ./doc/html/monoids/Data-Ring-Semi-Ord.html 22
->monoids-0.1.33: Monoids, specialized containers and a general map/reduce framework</TD
+>monoids-0.1.35: Monoids, specialized containers and a general map/reduce framework</TD
hunk ./doc/html/monoids/Data-Ring-Semi-Ord.html 82
-><A HREF="Data-Ring-Semi.html#t%3ASemiRing"
+><A HREF="Data-Ring.html#t%3ASemiRing"
hunk ./doc/html/monoids/Data-Ring-Semi-Ord.html 113
->module <A HREF="Data-Ring-Semi.html"
->Data.Ring.Semi</A
+>module <A HREF="Data-Ring.html"
+>Data.Ring</A
hunk ./doc/html/monoids/Data-Ring-Semi-Ord.html 198
->module <A HREF="Data-Ring-Semi.html"
->Data.Ring.Semi</A
+>module <A HREF="Data-Ring.html"
+>Data.Ring</A
hunk ./doc/html/monoids/Data-Ring-Semi-Ord.html 232
-><A HREF="Data-Ring-Semi.html#t%3ASemiRing"
+><A HREF="Data-Ring.html#t%3ASemiRing"
hunk ./doc/html/monoids/Data-Ring-Semi-Ord.html 407
-> a) =&gt; <A HREF="Data-Ring-Semi-Near.html#t%3ARightSemiNearRing"
->RightSemiNearRing</A
+> a) =&gt; <A HREF="Data-Ring.html#t%3ASemiRing"
+>SemiRing</A
hunk ./doc/html/monoids/Data-Ring-Semi-Ord.html 419
-> a) =&gt; <A HREF="Data-Ring-Semi-Near.html#t%3ALeftSemiNearRing"
->LeftSemiNearRing</A
+> a) =&gt; <A HREF="Data-Ring.html#t%3ARightSemiNearRing"
+>RightSemiNearRing</A
hunk ./doc/html/monoids/Data-Ring-Semi-Ord.html 431
-> a) =&gt; <A HREF="Data-Ring-Semi-Near.html#t%3ARingoid"
->Ringoid</A
+> a) =&gt; <A HREF="Data-Ring.html#t%3ALeftSemiNearRing"
+>LeftSemiNearRing</A
hunk ./doc/html/monoids/Data-Ring-Semi-Ord.html 443
-> a) =&gt; <A HREF="Data-Ring-Semi.html#t%3ASemiRing"
->SemiRing</A
+> a) =&gt; <A HREF="Data-Ring.html#t%3ARingoid"
+>Ringoid</A
hunk ./doc/html/monoids/Data-Ring-Semi-Ord.html 486
-><A HREF="Data-Ring-Semi.html#t%3ASemiRing"
+><A HREF="Data-Ring.html#t%3ASemiRing"
hunk ./doc/html/monoids/Data-Ring-Semi-Ord.html 657
-> a =&gt; <A HREF="Data-Ring-Semi-Near.html#t%3ARightSemiNearRing"
->RightSemiNearRing</A
+> a =&gt; <A HREF="Data-Ring.html#t%3ASemiRing"
+>SemiRing</A
hunk ./doc/html/monoids/Data-Ring-Semi-Ord.html 667
-> a =&gt; <A HREF="Data-Ring-Semi-Near.html#t%3ALeftSemiNearRing"
->LeftSemiNearRing</A
+> a =&gt; <A HREF="Data-Ring.html#t%3ARightSemiNearRing"
+>RightSemiNearRing</A
hunk ./doc/html/monoids/Data-Ring-Semi-Ord.html 677
-> a =&gt; <A HREF="Data-Ring-Semi-Near.html#t%3ARingoid"
->Ringoid</A
+> a =&gt; <A HREF="Data-Ring.html#t%3ALeftSemiNearRing"
+>LeftSemiNearRing</A
hunk ./doc/html/monoids/Data-Ring-Semi-Ord.html 687
-> a =&gt; <A HREF="Data-Ring-Semi.html#t%3ASemiRing"
->SemiRing</A
+> a =&gt; <A HREF="Data-Ring.html#t%3ARingoid"
+>Ringoid</A
hunk ./doc/html/monoids/Data-Ring-Semi-Tropical.html 22
->monoids-0.1.33: Monoids, specialized containers and a general map/reduce framework</TD
+>monoids-0.1.35: Monoids, specialized containers and a general map/reduce framework</TD
hunk ./doc/html/monoids/Data-Ring-Semi-Tropical.html 109
->module <A HREF="Data-Ring-Semi.html"
->Data.Ring.Semi</A
+>module <A HREF="Data-Ring.html"
+>Data.Ring</A
hunk ./doc/html/monoids/Data-Ring-Semi-Tropical.html 176
->module <A HREF="Data-Ring-Semi.html"
->Data.Ring.Semi</A
+>module <A HREF="Data-Ring.html"
+>Data.Ring</A
hunk ./doc/html/monoids/Data-Ring-Semi-Tropical.html 246
-><A HREF="Data-Ring-Semi.html#t%3ASemiRing"
+><A HREF="Data-Ring.html#t%3ASemiRing"
hunk ./doc/html/monoids/Data-Ring-Semi-Tropical.html 352
+>(<A HREF="/usr/local/share/doc/ghc/libraries/base/Data-Ord.html#t%3AOrd"
+>Ord</A
+> a, <A HREF="/usr/local/share/doc/ghc/libraries/base/Prelude.html#t%3ANum"
+>Num</A
+> a) =&gt; <A HREF="Data-Ring-Module.html#t%3ABimodule"
+>Bimodule</A
+> <A HREF="Data-Ring-Semi-Natural.html#t%3ANatural"
+>Natural</A
+> (<A HREF="Data-Ring-Semi-Tropical.html#t%3ATropical"
+>Tropical</A
+> a)</TD
+></TR
+><TR
+><TD CLASS="decl"
+>(<A HREF="/usr/local/share/doc/ghc/libraries/base/Data-Ord.html#t%3AOrd"
+>Ord</A
+> a, <A HREF="/usr/local/share/doc/ghc/libraries/base/Prelude.html#t%3ANum"
+>Num</A
+> a) =&gt; <A HREF="Data-Ring-Module.html#t%3ARightModule"
+>RightModule</A
+> <A HREF="Data-Ring-Semi-Natural.html#t%3ANatural"
+>Natural</A
+> (<A HREF="Data-Ring-Semi-Tropical.html#t%3ATropical"
+>Tropical</A
+> a)</TD
+></TR
+><TR
+><TD CLASS="decl"
+>(<A HREF="/usr/local/share/doc/ghc/libraries/base/Data-Ord.html#t%3AOrd"
+>Ord</A
+> a, <A HREF="/usr/local/share/doc/ghc/libraries/base/Prelude.html#t%3ANum"
+>Num</A
+> a) =&gt; <A HREF="Data-Ring-Module.html#t%3ALeftModule"
+>LeftModule</A
+> <A HREF="Data-Ring-Semi-Natural.html#t%3ANatural"
+>Natural</A
+> (<A HREF="Data-Ring-Semi-Tropical.html#t%3ATropical"
+>Tropical</A
+> a)</TD
+></TR
+><TR
+><TD CLASS="decl"
+>(<A HREF="/usr/local/share/doc/ghc/libraries/base/Data-Ord.html#t%3AOrd"
+>Ord</A
+> a, <A HREF="/usr/local/share/doc/ghc/libraries/base/Prelude.html#t%3ANum"
+>Num</A
+> a) =&gt; <A HREF="Data-Ring-Module.html#t%3AModule"
+>Module</A
+> <A HREF="Data-Ring-Semi-Natural.html#t%3ANatural"
+>Natural</A
+> (<A HREF="Data-Ring-Semi-Tropical.html#t%3ATropical"
+>Tropical</A
+> a)</TD
+></TR
+><TR
+><TD CLASS="decl"
hunk ./doc/html/monoids/Data-Ring-Semi-Tropical.html 484
-> a) =&gt; <A HREF="Data-Ring-Semi-Near.html#t%3ARightSemiNearRing"
->RightSemiNearRing</A
+> a) =&gt; <A HREF="Data-Ring.html#t%3ASemiRing"
+>SemiRing</A
hunk ./doc/html/monoids/Data-Ring-Semi-Tropical.html 496
-> a) =&gt; <A HREF="Data-Ring-Semi-Near.html#t%3ALeftSemiNearRing"
->LeftSemiNearRing</A
+> a) =&gt; <A HREF="Data-Ring.html#t%3ARightSemiNearRing"
+>RightSemiNearRing</A
hunk ./doc/html/monoids/Data-Ring-Semi-Tropical.html 508
-> a) =&gt; <A HREF="Data-Ring-Semi-Near.html#t%3ARingoid"
->Ringoid</A
+> a) =&gt; <A HREF="Data-Ring.html#t%3ALeftSemiNearRing"
+>LeftSemiNearRing</A
hunk ./doc/html/monoids/Data-Ring-Semi-Tropical.html 520
-> a) =&gt; <A HREF="Data-Ring-Semi.html#t%3ASemiRing"
->SemiRing</A
+> a) =&gt; <A HREF="Data-Ring.html#t%3ARingoid"
+>Ringoid</A
hunk ./doc/html/monoids/Data-Ring-Semi-Tropical.html 550
+><TR
+><TD CLASS="decl"
+>(<A HREF="/usr/local/share/doc/ghc/libraries/base/Data-Ord.html#t%3AOrd"
+>Ord</A
+> a, <A HREF="/usr/local/share/doc/ghc/libraries/base/Prelude.html#t%3ANum"
+>Num</A
+> a) =&gt; <A HREF="Data-Ring-Module.html#t%3ABimodule"
+>Bimodule</A
+> (<A HREF="Data-Ring-Semi-Tropical.html#t%3ATropical"
+>Tropical</A
+> a) (<A HREF="Data-Ring-Semi-Tropical.html#t%3ATropical"
+>Tropical</A
+> a)</TD
+></TR
+><TR
+><TD CLASS="decl"
+>(<A HREF="/usr/local/share/doc/ghc/libraries/base/Data-Ord.html#t%3AOrd"
+>Ord</A
+> a, <A HREF="/usr/local/share/doc/ghc/libraries/base/Prelude.html#t%3ANum"
+>Num</A
+> a) =&gt; <A HREF="Data-Ring-Module.html#t%3ARightModule"
+>RightModule</A
+> (<A HREF="Data-Ring-Semi-Tropical.html#t%3ATropical"
+>Tropical</A
+> a) (<A HREF="Data-Ring-Semi-Tropical.html#t%3ATropical"
+>Tropical</A
+> a)</TD
+></TR
+><TR
+><TD CLASS="decl"
+>(<A HREF="/usr/local/share/doc/ghc/libraries/base/Data-Ord.html#t%3AOrd"
+>Ord</A
+> a, <A HREF="/usr/local/share/doc/ghc/libraries/base/Prelude.html#t%3ANum"
+>Num</A
+> a) =&gt; <A HREF="Data-Ring-Module.html#t%3ALeftModule"
+>LeftModule</A
+> (<A HREF="Data-Ring-Semi-Tropical.html#t%3ATropical"
+>Tropical</A
+> a) (<A HREF="Data-Ring-Semi-Tropical.html#t%3ATropical"
+>Tropical</A
+> a)</TD
+></TR
+><TR
+><TD CLASS="decl"
+>(<A HREF="/usr/local/share/doc/ghc/libraries/base/Data-Ord.html#t%3AOrd"
+>Ord</A
+> a, <A HREF="/usr/local/share/doc/ghc/libraries/base/Prelude.html#t%3ANum"
+>Num</A
+> a) =&gt; <A HREF="Data-Ring-Module.html#t%3AModule"
+>Module</A
+> (<A HREF="Data-Ring-Semi-Tropical.html#t%3ATropical"
+>Tropical</A
+> a) (<A HREF="Data-Ring-Semi-Tropical.html#t%3ATropical"
+>Tropical</A
+> a)</TD
+></TR
hunk ./doc/html/monoids/Data-Ring-Sugar.html 22
->monoids-0.1.33: Monoids, specialized containers and a general map/reduce framework</TD
+>monoids-0.1.35: Monoids, specialized containers and a general map/reduce framework</TD
hunk ./doc/html/monoids/Data-Ring-Sugar.html 122
->module <A HREF="Data-Ring-Semi-Near.html"
->Data.Ring.Semi.Near</A
+>module <A HREF="Data-Ring.html"
+>Data.Ring</A
+></TD
+></TR
+><TR
+><TD CLASS="s15"
+></TD
+></TR
+><TR
+><TD CLASS="decl"
+>module <A HREF="Data-Ring-Semi-Natural.html"
+>Data.Ring.Semi.Natural</A
+></TD
+></TR
+><TR
+><TD CLASS="s15"
+></TD
+></TR
+><TR
+><TD CLASS="topdecl"
+><TABLE CLASS="declbar"
+><TR
+><TD CLASS="declname"
+><A NAME="v%3A%5E%5E"
+></A
+><B
+>(^^)</B
+> :: <A HREF="Data-Group.html#t%3AMultiplicativeGroup"
+>MultiplicativeGroup</A
+> r =&gt; r -&gt; Integer -&gt; r</TD
+><TD CLASS="declbut"
+><A HREF="src/Data-Ring-Sugar.html#%5E%5E"
+>Source</A
+></TD
+></TR
+></TABLE
hunk ./doc/html/monoids/Data-Ring.html 22
->monoids-0.1.33: Monoids, specialized containers and a general map/reduce framework</TD
+>monoids-0.1.35: Monoids, specialized containers and a general map/reduce framework</TD
hunk ./doc/html/monoids/Data-Ring.html 83
+><P
+>Defines left- and right- seminearrings. Every <TT
+><A HREF="/usr/local/share/doc/ghc/libraries/base/Control-Monad.html#t%3AMonadPlus"
+>MonadPlus</A
+></TT
+> wrapped around
+ a <TT
+><A HREF="/usr/local/share/doc/ghc/libraries/base/Data-Monoid.html#t%3AMonoid"
+>Monoid</A
+></TT
+> qualifies due to the distributivity of (&gt;&gt;=) over <TT
+><A HREF="/usr/local/share/doc/ghc/libraries/base/Control-Monad.html#v%3Amplus"
+>mplus</A
+></TT
+>.
+</P
+><P
+>See <A HREF="http://conway.rutgers.edu/~ccshan/wiki/blog/posts/WordNumbers1/"
+>http://conway.rutgers.edu/~ccshan/wiki/blog/posts/WordNumbers1/</A
+>
+</P
hunk ./doc/html/monoids/Data-Ring.html 111
+><TD CLASS="section1"
+>Synopsis</TD
+></TR
+><TR
+><TD CLASS="s15"
+></TD
+></TR
+><TR
+><TD CLASS="body"
+><TABLE CLASS="vanilla" CELLSPACING="0" CELLPADDING="0"
+><TR
+><TD CLASS="decl"
+>module <A HREF="Data-Group.html"
+>Data.Group</A
+></TD
+></TR
+><TR
+><TD CLASS="s8"
+></TD
+></TR
+><TR
+><TD CLASS="decl"
+><SPAN CLASS="keyword"
+>class</SPAN
+> (<A HREF="Data-Monoid-Multiplicative.html#t%3AMultiplicative"
+>Multiplicative</A
+> m, <A HREF="/usr/local/share/doc/ghc/libraries/base/Data-Monoid.html#t%3AMonoid"
+>Monoid</A
+> m) =&gt; <A HREF="#t%3ARingoid"
+>Ringoid</A
+> m </TD
+></TR
+><TR
+><TD CLASS="s8"
+></TD
+></TR
+><TR
+><TD CLASS="decl"
+><SPAN CLASS="keyword"
+>class</SPAN
+> <A HREF="Data-Ring.html#t%3ARingoid"
+>Ringoid</A
+> m =&gt; <A HREF="#t%3ALeftSemiNearRing"
+>LeftSemiNearRing</A
+> m </TD
+></TR
+><TR
+><TD CLASS="s8"
+></TD
+></TR
+><TR
+><TD CLASS="decl"
+><SPAN CLASS="keyword"
+>class</SPAN
+> <A HREF="Data-Ring.html#t%3ARingoid"
+>Ringoid</A
+> m =&gt; <A HREF="#t%3ARightSemiNearRing"
+>RightSemiNearRing</A
+> m </TD
+></TR
+><TR
+><TD CLASS="s8"
+></TD
+></TR
+><TR
+><TD CLASS="decl"
+><SPAN CLASS="keyword"
+>class</SPAN
+> (<A HREF="Data-Ring.html#t%3ARightSemiNearRing"
+>RightSemiNearRing</A
+> a, <A HREF="Data-Ring.html#t%3ALeftSemiNearRing"
+>LeftSemiNearRing</A
+> a) =&gt; <A HREF="#t%3ASemiRing"
+>SemiRing</A
+> a </TD
+></TR
+><TR
+><TD CLASS="s8"
+></TD
+></TR
+><TR
+><TD CLASS="decl"
+><SPAN CLASS="keyword"
+>class</SPAN
+> (<A HREF="Data-Group.html#t%3AGroup"
+>Group</A
+> a, <A HREF="Data-Ring.html#t%3ASemiRing"
+>SemiRing</A
+> a) =&gt; <A HREF="#t%3ARing"
+>Ring</A
+> a </TD
+></TR
+><TR
+><TD CLASS="s8"
+></TD
+></TR
+><TR
+><TD CLASS="decl"
+><SPAN CLASS="keyword"
+>class</SPAN
+> (<A HREF="Data-Ring.html#t%3ARing"
+>Ring</A
+> a, <A HREF="Data-Group.html#t%3AMultiplicativeGroup"
+>MultiplicativeGroup</A
+> a) =&gt; <A HREF="#t%3ADivisionRing"
+>DivisionRing</A
+> a </TD
+></TR
+><TR
+><TD CLASS="s8"
+></TD
+></TR
+><TR
+><TD CLASS="decl"
+><SPAN CLASS="keyword"
+>class</SPAN
+> (<A HREF="Data-Ring.html#t%3ARing"
+>Ring</A
+> a, <A HREF="Data-Group.html#t%3AMultiplicativeGroup"
+>MultiplicativeGroup</A
+> a) =&gt; <A HREF="#t%3AField"
+>Field</A
+> a </TD
+></TR
+></TABLE
+></TD
+></TR
+><TR
hunk ./doc/html/monoids/Data-Ring.html 261
+><TD CLASS="topdecl"
+><TABLE CLASS="declbar"
+><TR
+><TD CLASS="declname"
+><SPAN CLASS="keyword"
+>class</SPAN
+> (<A HREF="Data-Monoid-Multiplicative.html#t%3AMultiplicative"
+>Multiplicative</A
+> m, <A HREF="/usr/local/share/doc/ghc/libraries/base/Data-Monoid.html#t%3AMonoid"
+>Monoid</A
+> m) =&gt; <A NAME="t%3ARingoid"
+></A
+><B
+>Ringoid</B
+> m </TD
+><TD CLASS="declbut"
+><A HREF="src/Data-Ring.html#Ringoid"
+>Source</A
+></TD
+></TR
+></TABLE
+></TD
+></TR
+><TR
+><TD CLASS="body"
+><TABLE CLASS="vanilla" CELLSPACING="0" CELLPADDING="0"
+><TR
+><TD CLASS="ndoc"
+><TT
+>0</TT
+> annihilates <TT
+><A HREF="Data-Monoid-Multiplicative.html#v%3Atimes"
+>times</A
+></TT
+>
+</TD
+></TR
+><TR
+><TD CLASS="s8"
+></TD
+></TR
+><TR
+><TD CLASS="section4"
+><IMG SRC="minus.gif" CLASS="coll" ONCLICK="toggle(this,'i:Ringoid')" ALT="show/hide"
+> Instances</TD
+></TR
+><TR
+><TD CLASS="body"
+><DIV ID="i:Ringoid" STYLE="display:block;"
+><TABLE CLASS="vanilla" CELLSPACING="1" CELLPADDING="0"
+><TR
+><TD CLASS="decl"
+><A HREF="Data-Ring.html#t%3ARingoid"
+>Ringoid</A
+> <A HREF="/usr/local/share/doc/ghc/libraries/ghc-prim/GHC-Types.html#t%3AInt"
+>Int</A
+></TD
+></TR
+><TR
+><TD CLASS="decl"
+><A HREF="Data-Ring.html#t%3ARingoid"
+>Ringoid</A
+> Integer</TD
+></TR
+><TR
+><TD CLASS="decl"
+><A HREF="Data-Ring.html#t%3ARingoid"
+>Ringoid</A
+> <A HREF="Data-Ring-Semi-Natural.html#t%3ANatural"
+>Natural</A
+></TD
+></TR
+><TR
+><TD CLASS="decl"
+><A HREF="/usr/local/share/doc/ghc/libraries/base/Data-Monoid.html#t%3AMonoid"
+>Monoid</A
+> m =&gt; <A HREF="Data-Ring.html#t%3ARingoid"
+>Ringoid</A
+> ([] m)</TD
+></TR
+><TR
+><TD CLASS="decl"
+><A HREF="/usr/local/share/doc/ghc/libraries/base/Data-Monoid.html#t%3AMonoid"
+>Monoid</A
+> m =&gt; <A HREF="Data-Ring.html#t%3ARingoid"
+>Ringoid</A
+> (<A HREF="/usr/local/share/doc/ghc/libraries/base/Data-Maybe.html#t%3AMaybe"
+>Maybe</A
+> m)</TD
+></TR
+><TR
+><TD CLASS="decl"
+><A HREF="Data-Ring.html#t%3ARingoid"
+>Ringoid</A
+> m =&gt; <A HREF="Data-Ring.html#t%3ARingoid"
+>Ringoid</A
+> (<A HREF="/usr/local/share/doc/ghc/libraries/base/Data-Monoid.html#t%3ADual"
+>Dual</A
+> m)</TD
+></TR
+><TR
+><TD CLASS="decl"
+><A HREF="Data-Ring.html#t%3ARingoid"
+>Ringoid</A
+> m =&gt; <A HREF="Data-Ring.html#t%3ARingoid"
+>Ringoid</A
+> (<A HREF="Data-Monoid-Self.html#t%3ASelf"
+>Self</A
+> m)</TD
+></TR
+><TR
+><TD CLASS="decl"
+><A HREF="Data-Ring.html#t%3ARingoid"
+>Ringoid</A
+> m =&gt; <A HREF="Data-Ring.html#t%3ARingoid"
+>Ringoid</A
+> (<A HREF="Data-Monoid-FromString.html#t%3AFromString"
+>FromString</A
+> m)</TD
+></TR
+><TR
+><TD CLASS="decl"
+><A HREF="/usr/local/share/doc/ghc/libraries/base/Prelude.html#t%3ANum"
+>Num</A
+> a =&gt; <A HREF="Data-Ring.html#t%3ARingoid"
+>Ringoid</A
+> (<A HREF="Data-Ring-FromNum.html#t%3AFromNum"
+>FromNum</A
+> a)</TD
+></TR
+><TR
+><TD CLASS="decl"
+><A HREF="/usr/local/share/doc/ghc/libraries/base/Data-Bits.html#t%3ABits"
+>Bits</A
+> a =&gt; <A HREF="Data-Ring.html#t%3ARingoid"
+>Ringoid</A
+> (<A HREF="Data-Ring-Boolean.html#t%3ABoolean"
+>Boolean</A
+> a)</TD
+></TR
+><TR
+><TD CLASS="decl"
+>(<A HREF="/usr/local/share/doc/ghc/libraries/base/Prelude.html#t%3ABounded"
+>Bounded</A
+> a, <A HREF="/usr/local/share/doc/ghc/libraries/base/Prelude.html#t%3AEnum"
+>Enum</A
+> a) =&gt; <A HREF="Data-Ring.html#t%3ARingoid"
+>Ringoid</A
+> (<A HREF="Data-Ring-Semi-BitSet.html#t%3ABitSet"
+>BitSet</A
+> a)</TD
+></TR
+><TR
+><TD CLASS="decl"
+><A HREF="/usr/local/share/doc/ghc/libraries/base/Data-Ord.html#t%3AOrd"
+>Ord</A
+> a =&gt; <A HREF="Data-Ring.html#t%3ARingoid"
+>Ringoid</A
+> (<A HREF="Data-Ring-Semi-Ord.html#t%3APriority"
+>Priority</A
+> a)</TD
+></TR
+><TR
+><TD CLASS="decl"
+>(<A HREF="/usr/local/share/doc/ghc/libraries/base/Prelude.html#t%3ABounded"
+>Bounded</A
+> a, <A HREF="/usr/local/share/doc/ghc/libraries/base/Data-Ord.html#t%3AOrd"
+>Ord</A
+> a) =&gt; <A HREF="Data-Ring.html#t%3ARingoid"
+>Ringoid</A
+> (<A HREF="Data-Ring-Semi-Ord.html#t%3AOrder"
+>Order</A
+> a)</TD
+></TR
+><TR
+><TD CLASS="decl"
+>(<A HREF="/usr/local/share/doc/ghc/libraries/base/Data-Ord.html#t%3AOrd"
+>Ord</A
+> a, <A HREF="/usr/local/share/doc/ghc/libraries/base/Prelude.html#t%3ANum"
+>Num</A
+> a) =&gt; <A HREF="Data-Ring.html#t%3ARingoid"
+>Ringoid</A
+> (<A HREF="Data-Ring-Semi-Tropical.html#t%3ATropical"
+>Tropical</A
+> a)</TD
+></TR
+><TR
+><TD CLASS="decl"
+>(Measured v m, <A HREF="/usr/local/share/doc/ghc/libraries/base/Data-Monoid.html#t%3AMonoid"
+>Monoid</A
+> m) =&gt; <A HREF="Data-Ring.html#t%3ARingoid"
+>Ringoid</A
+> (FingerTree v m)</TD
+></TR
+><TR
+><TD CLASS="decl"
+><A HREF="Data-Ring.html#t%3ARingoid"
+>Ringoid</A
+> m =&gt; <A HREF="Data-Ring.html#t%3ARingoid"
+>Ringoid</A
+> (<A HREF="Data-Monoid-Reducer.html#t%3AReducedBy"
+>ReducedBy</A
+> m s)</TD
+></TR
+><TR
+><TD CLASS="decl"
+>(<A HREF="/usr/local/share/doc/ghc/libraries/base/Control-Applicative.html#t%3AAlternative"
+>Alternative</A
+> f, <A HREF="/usr/local/share/doc/ghc/libraries/base/Data-Monoid.html#t%3AMonoid"
+>Monoid</A
+> a) =&gt; <A HREF="Data-Ring.html#t%3ARingoid"
+>Ringoid</A
+> (<A HREF="Data-Monoid-Applicative.html#t%3AAlt"
+>Alt</A
+> f a)</TD
+></TR
+><TR
+><TD CLASS="decl"
+>(<A HREF="/usr/local/share/doc/ghc/libraries/base/Control-Monad.html#t%3AMonadPlus"
+>MonadPlus</A
+> m, <A HREF="/usr/local/share/doc/ghc/libraries/base/Data-Monoid.html#t%3AMonoid"
+>Monoid</A
+> a) =&gt; <A HREF="Data-Ring.html#t%3ARingoid"
+>Ringoid</A
+> (<A HREF="Data-Monoid-Monad.html#t%3AMonadSum"
+>MonadSum</A
+> m a)</TD
+></TR
+><TR
+><TD CLASS="decl"
+>(<A HREF="Data-Ring-ModularArithmetic.html#t%3AModular"
+>Modular</A
+> s a, <A HREF="/usr/local/share/doc/ghc/libraries/base/Prelude.html#t%3AIntegral"
+>Integral</A
+> a) =&gt; <A HREF="Data-Ring.html#t%3ARingoid"
+>Ringoid</A
+> (<A HREF="Data-Ring-ModularArithmetic.html#t%3AMod"
+>Mod</A
+> a s)</TD
+></TR
+><TR
+><TD CLASS="decl"
+>(<A HREF="/usr/local/share/doc/ghc/libraries/base/Control-Monad.html#t%3AMonadPlus"
+>MonadPlus</A
+> m, <A HREF="/usr/local/share/doc/ghc/libraries/base/Data-Monoid.html#t%3AMonoid"
+>Monoid</A
+> w, <A HREF="/usr/local/share/doc/ghc/libraries/base/Data-Monoid.html#t%3AMonoid"
+>Monoid</A
+> n) =&gt; <A HREF="Data-Ring.html#t%3ARingoid"
+>Ringoid</A
+> (<A HREF="/usr/local/share/doc/ghc/libraries/mtl/Control-Monad-Writer-Strict.html#t%3AWriterT"
+>WriterT</A
+> w m n)</TD
+></TR
+><TR
+><TD CLASS="decl"
+>(<A HREF="/usr/local/share/doc/ghc/libraries/base/Control-Monad.html#t%3AMonadPlus"
+>MonadPlus</A
+> m, <A HREF="/usr/local/share/doc/ghc/libraries/base/Data-Monoid.html#t%3AMonoid"
+>Monoid</A
+> w, <A HREF="/usr/local/share/doc/ghc/libraries/base/Data-Monoid.html#t%3AMonoid"
+>Monoid</A
+> n) =&gt; <A HREF="Data-Ring.html#t%3ARingoid"
+>Ringoid</A
+> (<A HREF="/usr/local/share/doc/ghc/libraries/mtl/Control-Monad-Writer-Lazy.html#t%3AWriterT"
+>WriterT</A
+> w m n)</TD
+></TR
+><TR
+><TD CLASS="decl"
+>(<A HREF="/usr/local/share/doc/ghc/libraries/base/Control-Monad.html#t%3AMonadPlus"
+>MonadPlus</A
+> m, <A HREF="/usr/local/share/doc/ghc/libraries/base/Data-Monoid.html#t%3AMonoid"
+>Monoid</A
+> n) =&gt; <A HREF="Data-Ring.html#t%3ARingoid"
+>Ringoid</A
+> (<A HREF="/usr/local/share/doc/ghc/libraries/mtl/Control-Monad-State-Strict.html#t%3AStateT"
+>StateT</A
+> s m n)</TD
+></TR
+><TR
+><TD CLASS="decl"
+>(<A HREF="/usr/local/share/doc/ghc/libraries/base/Control-Monad.html#t%3AMonadPlus"
+>MonadPlus</A
+> m, <A HREF="/usr/local/share/doc/ghc/libraries/base/Data-Monoid.html#t%3AMonoid"
+>Monoid</A
+> n) =&gt; <A HREF="Data-Ring.html#t%3ARingoid"
+>Ringoid</A
+> (<A HREF="/usr/local/share/doc/ghc/libraries/mtl/Control-Monad-State-Lazy.html#t%3AStateT"
+>StateT</A
+> s m n)</TD
+></TR
+><TR
+><TD CLASS="decl"
+>(<A HREF="/usr/local/share/doc/ghc/libraries/base/Control-Monad.html#t%3AMonadPlus"
+>MonadPlus</A
+> m, <A HREF="/usr/local/share/doc/ghc/libraries/base/Data-Monoid.html#t%3AMonoid"
+>Monoid</A
+> n) =&gt; <A HREF="Data-Ring.html#t%3ARingoid"
+>Ringoid</A
+> (<A HREF="/usr/local/share/doc/ghc/libraries/mtl/Control-Monad-Reader.html#t%3AReaderT"
+>ReaderT</A
+> e m n)</TD
+></TR
+><TR
+><TD CLASS="decl"
+>(<A HREF="Data-Ring.html#t%3ARingoid"
+>Ringoid</A
+> r, <A HREF="Data-Ring-Module.html#t%3ABimodule"
+>Bimodule</A
+> r m) =&gt; <A HREF="Data-Ring.html#t%3ARingoid"
+>Ringoid</A
+> (<A HREF="Data-Ring-Module-AutomaticDifferentiation.html#t%3AD"
+>D</A
+> s r m)</TD
+></TR
+><TR
+><TD CLASS="decl"
+>(Stream s m t, <A HREF="/usr/local/share/doc/ghc/libraries/base/Data-Monoid.html#t%3AMonoid"
+>Monoid</A
+> a) =&gt; <A HREF="Data-Ring.html#t%3ARingoid"
+>Ringoid</A
+> (ParsecT s u m a)</TD
+></TR
+><TR
+><TD CLASS="decl"
+>(<A HREF="/usr/local/share/doc/ghc/libraries/base/Control-Monad.html#t%3AMonadPlus"
+>MonadPlus</A
+> m, <A HREF="/usr/local/share/doc/ghc/libraries/base/Data-Monoid.html#t%3AMonoid"
+>Monoid</A
+> w, <A HREF="/usr/local/share/doc/ghc/libraries/base/Data-Monoid.html#t%3AMonoid"
+>Monoid</A
+> n) =&gt; <A HREF="Data-Ring.html#t%3ARingoid"
+>Ringoid</A
+> (<A HREF="/usr/local/share/doc/ghc/libraries/mtl/Control-Monad-RWS-Strict.html#t%3ARWST"
+>RWST</A
+> r w s m n)</TD
+></TR
+><TR
+><TD CLASS="decl"
+>(<A HREF="/usr/local/share/doc/ghc/libraries/base/Control-Monad.html#t%3AMonadPlus"
+>MonadPlus</A
+> m, <A HREF="/usr/local/share/doc/ghc/libraries/base/Data-Monoid.html#t%3AMonoid"
+>Monoid</A
+> w, <A HREF="/usr/local/share/doc/ghc/libraries/base/Data-Monoid.html#t%3AMonoid"
+>Monoid</A
+> n) =&gt; <A HREF="Data-Ring.html#t%3ARingoid"
+>Ringoid</A
+> (<A HREF="/usr/local/share/doc/ghc/libraries/mtl/Control-Monad-RWS-Lazy.html#t%3ARWST"
+>RWST</A
+> r w s m n)</TD
+></TR
+></TABLE
+></DIV
+></TD
+></TR
+></TABLE
+></TD
+></TR
+><TR
+><TD CLASS="s15"
+></TD
+></TR
+><TR
+><TD CLASS="topdecl"
+><TABLE CLASS="declbar"
+><TR
+><TD CLASS="declname"
+><SPAN CLASS="keyword"
+>class</SPAN
+> <A HREF="Data-Ring.html#t%3ARingoid"
+>Ringoid</A
+> m =&gt; <A NAME="t%3ALeftSemiNearRing"
+></A
+><B
+>LeftSemiNearRing</B
+> m </TD
+><TD CLASS="declbut"
+><A HREF="src/Data-Ring.html#LeftSemiNearRing"
+>Source</A
+></TD
+></TR
+></TABLE
+></TD
+></TR
+><TR
+><TD CLASS="body"
+><TABLE CLASS="vanilla" CELLSPACING="0" CELLPADDING="0"
+><TR
+><TD CLASS="ndoc"
+><PRE
+>a * (b + c) = (a * b) + (a * c)</PRE
+></TD
+></TR
+><TR
+><TD CLASS="s8"
+></TD
+></TR
+><TR
+><TD CLASS="section4"
+><IMG SRC="minus.gif" CLASS="coll" ONCLICK="toggle(this,'i:LeftSemiNearRing')" ALT="show/hide"
+> Instances</TD
+></TR
+><TR
+><TD CLASS="body"
+><DIV ID="i:LeftSemiNearRing" STYLE="display:block;"
+><TABLE CLASS="vanilla" CELLSPACING="1" CELLPADDING="0"
+><TR
+><TD CLASS="decl"
+><A HREF="Data-Ring.html#t%3ALeftSemiNearRing"
+>LeftSemiNearRing</A
+> <A HREF="Data-Ring-Semi-Natural.html#t%3ANatural"
+>Natural</A
+></TD
+></TR
+><TR
+><TD CLASS="decl"
+><A HREF="Data-Ring.html#t%3ARightSemiNearRing"
+>RightSemiNearRing</A
+> m =&gt; <A HREF="Data-Ring.html#t%3ALeftSemiNearRing"
+>LeftSemiNearRing</A
+> (<A HREF="/usr/local/share/doc/ghc/libraries/base/Data-Monoid.html#t%3ADual"
+>Dual</A
+> m)</TD
+></TR
+><TR
+><TD CLASS="decl"
+><A HREF="Data-Ring.html#t%3ALeftSemiNearRing"
+>LeftSemiNearRing</A
+> m =&gt; <A HREF="Data-Ring.html#t%3ALeftSemiNearRing"
+>LeftSemiNearRing</A
+> (<A HREF="Data-Monoid-Self.html#t%3ASelf"
+>Self</A
+> m)</TD
+></TR
+><TR
+><TD CLASS="decl"
+><A HREF="Data-Ring.html#t%3ALeftSemiNearRing"
+>LeftSemiNearRing</A
+> m =&gt; <A HREF="Data-Ring.html#t%3ALeftSemiNearRing"
+>LeftSemiNearRing</A
+> (<A HREF="Data-Monoid-FromString.html#t%3AFromString"
+>FromString</A
+> m)</TD
+></TR
+><TR
+><TD CLASS="decl"
+><A HREF="/usr/local/share/doc/ghc/libraries/base/Prelude.html#t%3ANum"
+>Num</A
+> a =&gt; <A HREF="Data-Ring.html#t%3ALeftSemiNearRing"
+>LeftSemiNearRing</A
+> (<A HREF="Data-Ring-FromNum.html#t%3AFromNum"
+>FromNum</A
+> a)</TD
+></TR
+><TR
+><TD CLASS="decl"
+><A HREF="/usr/local/share/doc/ghc/libraries/base/Data-Bits.html#t%3ABits"
+>Bits</A
+> a =&gt; <A HREF="Data-Ring.html#t%3ALeftSemiNearRing"
+>LeftSemiNearRing</A
+> (<A HREF="Data-Ring-Boolean.html#t%3ABoolean"
+>Boolean</A
+> a)</TD
+></TR
+><TR
+><TD CLASS="decl"
+>(<A HREF="/usr/local/share/doc/ghc/libraries/base/Prelude.html#t%3ABounded"
+>Bounded</A
+> a, <A HREF="/usr/local/share/doc/ghc/libraries/base/Prelude.html#t%3AEnum"
+>Enum</A
+> a) =&gt; <A HREF="Data-Ring.html#t%3ALeftSemiNearRing"
+>LeftSemiNearRing</A
+> (<A HREF="Data-Ring-Semi-BitSet.html#t%3ABitSet"
+>BitSet</A
+> a)</TD
+></TR
+><TR
+><TD CLASS="decl"
+><A HREF="/usr/local/share/doc/ghc/libraries/base/Data-Ord.html#t%3AOrd"
+>Ord</A
+> a =&gt; <A HREF="Data-Ring.html#t%3ALeftSemiNearRing"
+>LeftSemiNearRing</A
+> (<A HREF="Data-Ring-Semi-Ord.html#t%3APriority"
+>Priority</A
+> a)</TD
+></TR
+><TR
+><TD CLASS="decl"
+>(<A HREF="/usr/local/share/doc/ghc/libraries/base/Prelude.html#t%3ABounded"
+>Bounded</A
+> a, <A HREF="/usr/local/share/doc/ghc/libraries/base/Data-Ord.html#t%3AOrd"
+>Ord</A
+> a) =&gt; <A HREF="Data-Ring.html#t%3ALeftSemiNearRing"
+>LeftSemiNearRing</A
+> (<A HREF="Data-Ring-Semi-Ord.html#t%3AOrder"
+>Order</A
+> a)</TD
+></TR
+><TR
+><TD CLASS="decl"
+>(<A HREF="/usr/local/share/doc/ghc/libraries/base/Data-Ord.html#t%3AOrd"
+>Ord</A
+> a, <A HREF="/usr/local/share/doc/ghc/libraries/base/Prelude.html#t%3ANum"
+>Num</A
+> a) =&gt; <A HREF="Data-Ring.html#t%3ALeftSemiNearRing"
+>LeftSemiNearRing</A
+> (<A HREF="Data-Ring-Semi-Tropical.html#t%3ATropical"
+>Tropical</A
+> a)</TD
+></TR
+><TR
+><TD CLASS="decl"
+><A HREF="Data-Ring.html#t%3ALeftSemiNearRing"
+>LeftSemiNearRing</A
+> m =&gt; <A HREF="Data-Ring.html#t%3ALeftSemiNearRing"
+>LeftSemiNearRing</A
+> (<A HREF="Data-Monoid-Reducer.html#t%3AReducedBy"
+>ReducedBy</A
+> m s)</TD
+></TR
+><TR
+><TD CLASS="decl"
+>(<A HREF="Data-Ring-ModularArithmetic.html#t%3AModular"
+>Modular</A
+> s a, <A HREF="/usr/local/share/doc/ghc/libraries/base/Prelude.html#t%3AIntegral"
+>Integral</A
+> a) =&gt; <A HREF="Data-Ring.html#t%3ALeftSemiNearRing"
+>LeftSemiNearRing</A
+> (<A HREF="Data-Ring-ModularArithmetic.html#t%3AMod"
+>Mod</A
+> a s)</TD
+></TR
+><TR
+><TD CLASS="decl"
+>(<A HREF="Data-Ring.html#t%3ALeftSemiNearRing"
+>LeftSemiNearRing</A
+> r, <A HREF="Data-Ring-Module.html#t%3ABimodule"
+>Bimodule</A
+> r m) =&gt; <A HREF="Data-Ring.html#t%3ALeftSemiNearRing"
+>LeftSemiNearRing</A
+> (<A HREF="Data-Ring-Module-AutomaticDifferentiation.html#t%3AD"
+>D</A
+> s r m)</TD
+></TR
+></TABLE
+></DIV
+></TD
+></TR
+></TABLE
+></TD
+></TR
+><TR
+><TD CLASS="s15"
+></TD
+></TR
+><TR
+><TD CLASS="topdecl"
+><TABLE CLASS="declbar"
+><TR
+><TD CLASS="declname"
+><SPAN CLASS="keyword"
+>class</SPAN
+> <A HREF="Data-Ring.html#t%3ARingoid"
+>Ringoid</A
+> m =&gt; <A NAME="t%3ARightSemiNearRing"
+></A
+><B
+>RightSemiNearRing</B
+> m </TD
+><TD CLASS="declbut"
+><A HREF="src/Data-Ring.html#RightSemiNearRing"
+>Source</A
+></TD
+></TR
+></TABLE
+></TD
+></TR
+><TR
+><TD CLASS="body"
+><TABLE CLASS="vanilla" CELLSPACING="0" CELLPADDING="0"
+><TR
+><TD CLASS="ndoc"
+><PRE
+>(a + b) * c = (a * c) + (b * c)</PRE
+></TD
+></TR
+><TR
+><TD CLASS="s8"
+></TD
+></TR
+><TR
+><TD CLASS="section4"
+><IMG SRC="minus.gif" CLASS="coll" ONCLICK="toggle(this,'i:RightSemiNearRing')" ALT="show/hide"
+> Instances</TD
+></TR
+><TR
+><TD CLASS="body"
+><DIV ID="i:RightSemiNearRing" STYLE="display:block;"
+><TABLE CLASS="vanilla" CELLSPACING="1" CELLPADDING="0"
+><TR
+><TD CLASS="decl"
+><A HREF="Data-Ring.html#t%3ARightSemiNearRing"
+>RightSemiNearRing</A
+> <A HREF="Data-Ring-Semi-Natural.html#t%3ANatural"
+>Natural</A
+></TD
+></TR
+><TR
+><TD CLASS="decl"
+><A HREF="/usr/local/share/doc/ghc/libraries/base/Data-Monoid.html#t%3AMonoid"
+>Monoid</A
+> m =&gt; <A HREF="Data-Ring.html#t%3ARightSemiNearRing"
+>RightSemiNearRing</A
+> ([] m)</TD
+></TR
+><TR
+><TD CLASS="decl"
+><A HREF="/usr/local/share/doc/ghc/libraries/base/Data-Monoid.html#t%3AMonoid"
+>Monoid</A
+> m =&gt; <A HREF="Data-Ring.html#t%3ARightSemiNearRing"
+>RightSemiNearRing</A
+> (<A HREF="/usr/local/share/doc/ghc/libraries/base/Data-Maybe.html#t%3AMaybe"
+>Maybe</A
+> m)</TD
+></TR
+><TR
+><TD CLASS="decl"
+><A HREF="Data-Ring.html#t%3ALeftSemiNearRing"
+>LeftSemiNearRing</A
+> m =&gt; <A HREF="Data-Ring.html#t%3ARightSemiNearRing"
+>RightSemiNearRing</A
+> (<A HREF="/usr/local/share/doc/ghc/libraries/base/Data-Monoid.html#t%3ADual"
+>Dual</A
+> m)</TD
+></TR
+><TR
+><TD CLASS="decl"
+><A HREF="Data-Ring.html#t%3ARightSemiNearRing"
+>RightSemiNearRing</A
+> m =&gt; <A HREF="Data-Ring.html#t%3ARightSemiNearRing"
+>RightSemiNearRing</A
+> (<A HREF="Data-Monoid-Self.html#t%3ASelf"
+>Self</A
+> m)</TD
+></TR
+><TR
+><TD CLASS="decl"
+><A HREF="Data-Ring.html#t%3ARightSemiNearRing"
+>RightSemiNearRing</A
+> m =&gt; <A HREF="Data-Ring.html#t%3ARightSemiNearRing"
+>RightSemiNearRing</A
+> (<A HREF="Data-Monoid-FromString.html#t%3AFromString"
+>FromString</A
+> m)</TD
+></TR
+><TR
+><TD CLASS="decl"
+><A HREF="/usr/local/share/doc/ghc/libraries/base/Prelude.html#t%3ANum"
+>Num</A
+> a =&gt; <A HREF="Data-Ring.html#t%3ARightSemiNearRing"
+>RightSemiNearRing</A
+> (<A HREF="Data-Ring-FromNum.html#t%3AFromNum"
+>FromNum</A
+> a)</TD
+></TR
+><TR
+><TD CLASS="decl"
+><A HREF="/usr/local/share/doc/ghc/libraries/base/Data-Bits.html#t%3ABits"
+>Bits</A
+> a =&gt; <A HREF="Data-Ring.html#t%3ARightSemiNearRing"
+>RightSemiNearRing</A
+> (<A HREF="Data-Ring-Boolean.html#t%3ABoolean"
+>Boolean</A
+> a)</TD
+></TR
+><TR
+><TD CLASS="decl"
+>(<A HREF="/usr/local/share/doc/ghc/libraries/base/Prelude.html#t%3ABounded"
+>Bounded</A
+> a, <A HREF="/usr/local/share/doc/ghc/libraries/base/Prelude.html#t%3AEnum"
+>Enum</A
+> a) =&gt; <A HREF="Data-Ring.html#t%3ARightSemiNearRing"
+>RightSemiNearRing</A
+> (<A HREF="Data-Ring-Semi-BitSet.html#t%3ABitSet"
+>BitSet</A
+> a)</TD
+></TR
+><TR
+><TD CLASS="decl"
+><A HREF="/usr/local/share/doc/ghc/libraries/base/Data-Ord.html#t%3AOrd"
+>Ord</A
+> a =&gt; <A HREF="Data-Ring.html#t%3ARightSemiNearRing"
+>RightSemiNearRing</A
+> (<A HREF="Data-Ring-Semi-Ord.html#t%3APriority"
+>Priority</A
+> a)</TD
+></TR
+><TR
+><TD CLASS="decl"
+>(<A HREF="/usr/local/share/doc/ghc/libraries/base/Prelude.html#t%3ABounded"
+>Bounded</A
+> a, <A HREF="/usr/local/share/doc/ghc/libraries/base/Data-Ord.html#t%3AOrd"
+>Ord</A
+> a) =&gt; <A HREF="Data-Ring.html#t%3ARightSemiNearRing"
+>RightSemiNearRing</A
+> (<A HREF="Data-Ring-Semi-Ord.html#t%3AOrder"
+>Order</A
+> a)</TD
+></TR
+><TR
+><TD CLASS="decl"
+>(<A HREF="/usr/local/share/doc/ghc/libraries/base/Data-Ord.html#t%3AOrd"
+>Ord</A
+> a, <A HREF="/usr/local/share/doc/ghc/libraries/base/Prelude.html#t%3ANum"
+>Num</A
+> a) =&gt; <A HREF="Data-Ring.html#t%3ARightSemiNearRing"
+>RightSemiNearRing</A
+> (<A HREF="Data-Ring-Semi-Tropical.html#t%3ATropical"
+>Tropical</A
+> a)</TD
+></TR
+><TR
+><TD CLASS="decl"
+>(Measured v m, <A HREF="/usr/local/share/doc/ghc/libraries/base/Data-Monoid.html#t%3AMonoid"
+>Monoid</A
+> m) =&gt; <A HREF="Data-Ring.html#t%3ARightSemiNearRing"
+>RightSemiNearRing</A
+> (FingerTree v m)</TD
+></TR
+><TR
+><TD CLASS="decl"
+><A HREF="Data-Ring.html#t%3ARightSemiNearRing"
+>RightSemiNearRing</A
+> m =&gt; <A HREF="Data-Ring.html#t%3ARightSemiNearRing"
+>RightSemiNearRing</A
+> (<A HREF="Data-Monoid-Reducer.html#t%3AReducedBy"
+>ReducedBy</A
+> m s)</TD
+></TR
+><TR
+><TD CLASS="decl"
+>(<A HREF="/usr/local/share/doc/ghc/libraries/base/Control-Applicative.html#t%3AAlternative"
+>Alternative</A
+> f, <A HREF="/usr/local/share/doc/ghc/libraries/base/Data-Monoid.html#t%3AMonoid"
+>Monoid</A
+> a) =&gt; <A HREF="Data-Ring.html#t%3ARightSemiNearRing"
+>RightSemiNearRing</A
+> (<A HREF="Data-Monoid-Applicative.html#t%3AAlt"
+>Alt</A
+> f a)</TD
+></TR
+><TR
+><TD CLASS="decl"
+>(<A HREF="/usr/local/share/doc/ghc/libraries/base/Control-Monad.html#t%3AMonadPlus"
+>MonadPlus</A
+> m, <A HREF="/usr/local/share/doc/ghc/libraries/base/Data-Monoid.html#t%3AMonoid"
+>Monoid</A
+> a) =&gt; <A HREF="Data-Ring.html#t%3ARightSemiNearRing"
+>RightSemiNearRing</A
+> (<A HREF="Data-Monoid-Monad.html#t%3AMonadSum"
+>MonadSum</A
+> m a)</TD
+></TR
+><TR
+><TD CLASS="decl"
+>(<A HREF="Data-Ring-ModularArithmetic.html#t%3AModular"
+>Modular</A
+> s a, <A HREF="/usr/local/share/doc/ghc/libraries/base/Prelude.html#t%3AIntegral"
+>Integral</A
+> a) =&gt; <A HREF="Data-Ring.html#t%3ARightSemiNearRing"
+>RightSemiNearRing</A
+> (<A HREF="Data-Ring-ModularArithmetic.html#t%3AMod"
+>Mod</A
+> a s)</TD
+></TR
+><TR
+><TD CLASS="decl"
+>(<A HREF="/usr/local/share/doc/ghc/libraries/base/Control-Monad.html#t%3AMonadPlus"
+>MonadPlus</A
+> m, <A HREF="/usr/local/share/doc/ghc/libraries/base/Data-Monoid.html#t%3AMonoid"
+>Monoid</A
+> w, <A HREF="/usr/local/share/doc/ghc/libraries/base/Data-Monoid.html#t%3AMonoid"
+>Monoid</A
+> n) =&gt; <A HREF="Data-Ring.html#t%3ARightSemiNearRing"
+>RightSemiNearRing</A
+> (<A HREF="/usr/local/share/doc/ghc/libraries/mtl/Control-Monad-Writer-Strict.html#t%3AWriterT"
+>WriterT</A
+> w m n)</TD
+></TR
+><TR
+><TD CLASS="decl"
+>(<A HREF="/usr/local/share/doc/ghc/libraries/base/Control-Monad.html#t%3AMonadPlus"
+>MonadPlus</A
+> m, <A HREF="/usr/local/share/doc/ghc/libraries/base/Data-Monoid.html#t%3AMonoid"
+>Monoid</A
+> w, <A HREF="/usr/local/share/doc/ghc/libraries/base/Data-Monoid.html#t%3AMonoid"
+>Monoid</A
+> n) =&gt; <A HREF="Data-Ring.html#t%3ARightSemiNearRing"
+>RightSemiNearRing</A
+> (<A HREF="/usr/local/share/doc/ghc/libraries/mtl/Control-Monad-Writer-Lazy.html#t%3AWriterT"
+>WriterT</A
+> w m n)</TD
+></TR
+><TR
+><TD CLASS="decl"
+>(<A HREF="/usr/local/share/doc/ghc/libraries/base/Control-Monad.html#t%3AMonadPlus"
+>MonadPlus</A
+> m, <A HREF="/usr/local/share/doc/ghc/libraries/base/Data-Monoid.html#t%3AMonoid"
+>Monoid</A
+> n) =&gt; <A HREF="Data-Ring.html#t%3ARightSemiNearRing"
+>RightSemiNearRing</A
+> (<A HREF="/usr/local/share/doc/ghc/libraries/mtl/Control-Monad-State-Strict.html#t%3AStateT"
+>StateT</A
+> s m n)</TD
+></TR
+><TR
+><TD CLASS="decl"
+>(<A HREF="/usr/local/share/doc/ghc/libraries/base/Control-Monad.html#t%3AMonadPlus"
+>MonadPlus</A
+> m, <A HREF="/usr/local/share/doc/ghc/libraries/base/Data-Monoid.html#t%3AMonoid"
+>Monoid</A
+> n) =&gt; <A HREF="Data-Ring.html#t%3ARightSemiNearRing"
+>RightSemiNearRing</A
+> (<A HREF="/usr/local/share/doc/ghc/libraries/mtl/Control-Monad-State-Lazy.html#t%3AStateT"
+>StateT</A
+> s m n)</TD
+></TR
+><TR
+><TD CLASS="decl"
+>(<A HREF="/usr/local/share/doc/ghc/libraries/base/Control-Monad.html#t%3AMonadPlus"
+>MonadPlus</A
+> m, <A HREF="/usr/local/share/doc/ghc/libraries/base/Data-Monoid.html#t%3AMonoid"
+>Monoid</A
+> n) =&gt; <A HREF="Data-Ring.html#t%3ARightSemiNearRing"
+>RightSemiNearRing</A
+> (<A HREF="/usr/local/share/doc/ghc/libraries/mtl/Control-Monad-Reader.html#t%3AReaderT"
+>ReaderT</A
+> e m n)</TD
+></TR
+><TR
+><TD CLASS="decl"
+>(<A HREF="Data-Ring.html#t%3ARightSemiNearRing"
+>RightSemiNearRing</A
+> r, <A HREF="Data-Ring-Module.html#t%3ABimodule"
+>Bimodule</A
+> r m) =&gt; <A HREF="Data-Ring.html#t%3ARightSemiNearRing"
+>RightSemiNearRing</A
+> (<A HREF="Data-Ring-Module-AutomaticDifferentiation.html#t%3AD"
+>D</A
+> s r m)</TD
+></TR
+><TR
+><TD CLASS="decl"
+>(Stream s m t, <A HREF="/usr/local/share/doc/ghc/libraries/base/Data-Monoid.html#t%3AMonoid"
+>Monoid</A
+> a) =&gt; <A HREF="Data-Ring.html#t%3ARightSemiNearRing"
+>RightSemiNearRing</A
+> (ParsecT s u m a)</TD
+></TR
+><TR
+><TD CLASS="decl"
+>(<A HREF="/usr/local/share/doc/ghc/libraries/base/Control-Monad.html#t%3AMonadPlus"
+>MonadPlus</A
+> m, <A HREF="/usr/local/share/doc/ghc/libraries/base/Data-Monoid.html#t%3AMonoid"
+>Monoid</A
+> w, <A HREF="/usr/local/share/doc/ghc/libraries/base/Data-Monoid.html#t%3AMonoid"
+>Monoid</A
+> n) =&gt; <A HREF="Data-Ring.html#t%3ARightSemiNearRing"
+>RightSemiNearRing</A
+> (<A HREF="/usr/local/share/doc/ghc/libraries/mtl/Control-Monad-RWS-Strict.html#t%3ARWST"
+>RWST</A
+> r w s m n)</TD
+></TR
+><TR
+><TD CLASS="decl"
+>(<A HREF="/usr/local/share/doc/ghc/libraries/base/Control-Monad.html#t%3AMonadPlus"
+>MonadPlus</A
+> m, <A HREF="/usr/local/share/doc/ghc/libraries/base/Data-Monoid.html#t%3AMonoid"
+>Monoid</A
+> w, <A HREF="/usr/local/share/doc/ghc/libraries/base/Data-Monoid.html#t%3AMonoid"
+>Monoid</A
+> n) =&gt; <A HREF="Data-Ring.html#t%3ARightSemiNearRing"
+>RightSemiNearRing</A
+> (<A HREF="/usr/local/share/doc/ghc/libraries/mtl/Control-Monad-RWS-Lazy.html#t%3ARWST"
+>RWST</A
+> r w s m n)</TD
+></TR
+></TABLE
+></DIV
+></TD
+></TR
+></TABLE
+></TD
+></TR
+><TR
+><TD CLASS="s15"
+></TD
+></TR
+><TR
+><TD CLASS="topdecl"
+><TABLE CLASS="declbar"
+><TR
+><TD CLASS="declname"
+><SPAN CLASS="keyword"
+>class</SPAN
+> (<A HREF="Data-Ring.html#t%3ARightSemiNearRing"
+>RightSemiNearRing</A
+> a, <A HREF="Data-Ring.html#t%3ALeftSemiNearRing"
+>LeftSemiNearRing</A
+> a) =&gt; <A NAME="t%3ASemiRing"
+></A
+><B
+>SemiRing</B
+> a </TD
+><TD CLASS="declbut"
+><A HREF="src/Data-Ring.html#SemiRing"
+>Source</A
+></TD
+></TR
+></TABLE
+></TD
+></TR
+><TR
+><TD CLASS="body"
+><TABLE CLASS="vanilla" CELLSPACING="0" CELLPADDING="0"
+><TR
+><TD CLASS="ndoc"
+>A <TT
+><A HREF="Data-Ring.html#t%3ASemiRing"
+>SemiRing</A
+></TT
+> is an instance of both <TT
+><A HREF="Data-Monoid-Multiplicative.html#t%3AMultiplicative"
+>Multiplicative</A
+></TT
+> and <TT
+><A HREF="/usr/local/share/doc/ghc/libraries/base/Data-Monoid.html#t%3AMonoid"
+>Monoid</A
+></TT
+> where 
+   <TT
+><A HREF="Data-Monoid-Multiplicative.html#v%3Atimes"
+>times</A
+></TT
+> distributes over <TT
+><A HREF="Data-Monoid-Additive.html#v%3Aplus"
+>plus</A
+></TT
+>.
+</TD
+></TR
+><TR
+><TD CLASS="s8"
+></TD
+></TR
+><TR
+><TD CLASS="section4"
+><IMG SRC="minus.gif" CLASS="coll" ONCLICK="toggle(this,'i:SemiRing')" ALT="show/hide"
+> Instances</TD
+></TR
+><TR
+><TD CLASS="body"
+><DIV ID="i:SemiRing" STYLE="display:block;"
+><TABLE CLASS="vanilla" CELLSPACING="1" CELLPADDING="0"
+><TR
+><TD CLASS="decl"
+><A HREF="Data-Ring.html#t%3ASemiRing"
+>SemiRing</A
+> <A HREF="Data-Ring-Semi-Natural.html#t%3ANatural"
+>Natural</A
+></TD
+></TR
+><TR
+><TD CLASS="decl"
+><A HREF="Data-Ring.html#t%3ASemiRing"
+>SemiRing</A
+> r =&gt; <A HREF="Data-Ring.html#t%3ASemiRing"
+>SemiRing</A
+> (<A HREF="/usr/local/share/doc/ghc/libraries/base/Data-Monoid.html#t%3ADual"
+>Dual</A
+> r)</TD
+></TR
+><TR
+><TD CLASS="decl"
+><A HREF="Data-Ring.html#t%3ASemiRing"
+>SemiRing</A
+> r =&gt; <A HREF="Data-Ring.html#t%3ASemiRing"
+>SemiRing</A
+> (<A HREF="Data-Monoid-Self.html#t%3ASelf"
+>Self</A
+> r)</TD
+></TR
+><TR
+><TD CLASS="decl"
+><A HREF="Data-Ring.html#t%3ASemiRing"
+>SemiRing</A
+> r =&gt; <A HREF="Data-Ring.html#t%3ASemiRing"
+>SemiRing</A
+> (<A HREF="Data-Monoid-FromString.html#t%3AFromString"
+>FromString</A
+> r)</TD
+></TR
+><TR
+><TD CLASS="decl"
+><A HREF="/usr/local/share/doc/ghc/libraries/base/Prelude.html#t%3ANum"
+>Num</A
+> a =&gt; <A HREF="Data-Ring.html#t%3ASemiRing"
+>SemiRing</A
+> (<A HREF="Data-Ring-FromNum.html#t%3AFromNum"
+>FromNum</A
+> a)</TD
+></TR
+><TR
hunk ./doc/html/monoids/Data-Ring.html 1276
->module <A HREF="Data-Ring-Semi.html"
->Data.Ring.Semi</A
+><A HREF="/usr/local/share/doc/ghc/libraries/base/Data-Bits.html#t%3ABits"
+>Bits</A
+> a =&gt; <A HREF="Data-Ring.html#t%3ASemiRing"
+>SemiRing</A
+> (<A HREF="Data-Ring-Boolean.html#t%3ABoolean"
+>Boolean</A
+> a)</TD
+></TR
+><TR
+><TD CLASS="decl"
+>(<A HREF="/usr/local/share/doc/ghc/libraries/base/Prelude.html#t%3ABounded"
+>Bounded</A
+> a, <A HREF="/usr/local/share/doc/ghc/libraries/base/Prelude.html#t%3AEnum"
+>Enum</A
+> a) =&gt; <A HREF="Data-Ring.html#t%3ASemiRing"
+>SemiRing</A
+> (<A HREF="Data-Ring-Semi-BitSet.html#t%3ABitSet"
+>BitSet</A
+> a)</TD
+></TR
+><TR
+><TD CLASS="decl"
+><A HREF="/usr/local/share/doc/ghc/libraries/base/Data-Ord.html#t%3AOrd"
+>Ord</A
+> a =&gt; <A HREF="Data-Ring.html#t%3ASemiRing"
+>SemiRing</A
+> (<A HREF="Data-Ring-Semi-Ord.html#t%3APriority"
+>Priority</A
+> a)</TD
+></TR
+><TR
+><TD CLASS="decl"
+>(<A HREF="/usr/local/share/doc/ghc/libraries/base/Prelude.html#t%3ABounded"
+>Bounded</A
+> a, <A HREF="/usr/local/share/doc/ghc/libraries/base/Data-Ord.html#t%3AOrd"
+>Ord</A
+> a) =&gt; <A HREF="Data-Ring.html#t%3ASemiRing"
+>SemiRing</A
+> (<A HREF="Data-Ring-Semi-Ord.html#t%3AOrder"
+>Order</A
+> a)</TD
+></TR
+><TR
+><TD CLASS="decl"
+>(<A HREF="/usr/local/share/doc/ghc/libraries/base/Data-Ord.html#t%3AOrd"
+>Ord</A
+> a, <A HREF="/usr/local/share/doc/ghc/libraries/base/Prelude.html#t%3ANum"
+>Num</A
+> a) =&gt; <A HREF="Data-Ring.html#t%3ASemiRing"
+>SemiRing</A
+> (<A HREF="Data-Ring-Semi-Tropical.html#t%3ATropical"
+>Tropical</A
+> a)</TD
+></TR
+><TR
+><TD CLASS="decl"
+><A HREF="Data-Ring.html#t%3ASemiRing"
+>SemiRing</A
+> r =&gt; <A HREF="Data-Ring.html#t%3ASemiRing"
+>SemiRing</A
+> (<A HREF="Data-Monoid-Reducer.html#t%3AReducedBy"
+>ReducedBy</A
+> r s)</TD
+></TR
+><TR
+><TD CLASS="decl"
+>(<A HREF="Data-Ring-ModularArithmetic.html#t%3AModular"
+>Modular</A
+> s a, <A HREF="/usr/local/share/doc/ghc/libraries/base/Prelude.html#t%3AIntegral"
+>Integral</A
+> a) =&gt; <A HREF="Data-Ring.html#t%3ASemiRing"
+>SemiRing</A
+> (<A HREF="Data-Ring-ModularArithmetic.html#t%3AMod"
+>Mod</A
+> a s)</TD
+></TR
+><TR
+><TD CLASS="decl"
+>(<A HREF="Data-Ring.html#t%3ASemiRing"
+>SemiRing</A
+> r, <A HREF="Data-Ring-Module.html#t%3ABimodule"
+>Bimodule</A
+> r m) =&gt; <A HREF="Data-Ring.html#t%3ASemiRing"
+>SemiRing</A
+> (<A HREF="Data-Ring-Module-AutomaticDifferentiation.html#t%3AD"
+>D</A
+> s r m)</TD
+></TR
+></TABLE
+></DIV
+></TD
+></TR
+></TABLE
hunk ./doc/html/monoids/Data-Ring.html 1384
-> a, <A HREF="Data-Ring-Semi.html#t%3ASemiRing"
+> a, <A HREF="Data-Ring.html#t%3ASemiRing"
hunk ./doc/html/monoids/Data-Ring.html 1419
-> <A HREF="Data-Ring-Boolean.html#t%3ABoolRing"
->BoolRing</A
-></TD
-></TR
-><TR
-><TD CLASS="decl"
-><A HREF="Data-Ring.html#t%3ARing"
->Ring</A
hunk ./doc/html/monoids/Data-Ring.html 1457
+><A HREF="/usr/local/share/doc/ghc/libraries/base/Data-Bits.html#t%3ABits"
+>Bits</A
+> a =&gt; <A HREF="Data-Ring.html#t%3ARing"
+>Ring</A
+> (<A HREF="Data-Ring-Boolean.html#t%3ABoolean"
+>Boolean</A
+> a)</TD
+></TR
+><TR
+><TD CLASS="decl"
hunk ./doc/html/monoids/Data-Ring.html 1491
-> r, <A HREF="Data-Ring-Module.html#t%3AModule"
->Module</A
+> r, <A HREF="Data-Ring-Module.html#t%3ABimodule"
+>Bimodule</A
hunk ./doc/html/monoids/Data-Ring.html 1513
+><TD CLASS="topdecl"
+><TABLE CLASS="declbar"
+><TR
+><TD CLASS="declname"
+><SPAN CLASS="keyword"
+>class</SPAN
+> (<A HREF="Data-Ring.html#t%3ARing"
+>Ring</A
+> a, <A HREF="Data-Group.html#t%3AMultiplicativeGroup"
+>MultiplicativeGroup</A
+> a) =&gt; <A NAME="t%3ADivisionRing"
+></A
+><B
+>DivisionRing</B
+> a </TD
+><TD CLASS="declbut"
+><A HREF="src/Data-Ring.html#DivisionRing"
+>Source</A
+></TD
+></TR
+></TABLE
+></TD
+></TR
+><TR
+><TD CLASS="body"
+><TABLE CLASS="vanilla" CELLSPACING="0" CELLPADDING="0"
+><TR
+><TD CLASS="s8"
+></TD
+></TR
+><TR
+><TD CLASS="section4"
+><IMG SRC="minus.gif" CLASS="coll" ONCLICK="toggle(this,'i:DivisionRing')" ALT="show/hide"
+> Instances</TD
+></TR
+><TR
+><TD CLASS="body"
+><DIV ID="i:DivisionRing" STYLE="display:block;"
+><TABLE CLASS="vanilla" CELLSPACING="1" CELLPADDING="0"
+><TR
+><TD CLASS="decl"
+><A HREF="Data-Ring.html#t%3ADivisionRing"
+>DivisionRing</A
+> r =&gt; <A HREF="Data-Ring.html#t%3ADivisionRing"
+>DivisionRing</A
+> (<A HREF="/usr/local/share/doc/ghc/libraries/base/Data-Monoid.html#t%3ADual"
+>Dual</A
+> r)</TD
+></TR
+><TR
+><TD CLASS="decl"
+><A HREF="Data-Ring.html#t%3ADivisionRing"
+>DivisionRing</A
+> r =&gt; <A HREF="Data-Ring.html#t%3ADivisionRing"
+>DivisionRing</A
+> (<A HREF="Data-Monoid-Self.html#t%3ASelf"
+>Self</A
+> r)</TD
+></TR
+><TR
+><TD CLASS="decl"
+><A HREF="Data-Ring.html#t%3ADivisionRing"
+>DivisionRing</A
+> r =&gt; <A HREF="Data-Ring.html#t%3ADivisionRing"
+>DivisionRing</A
+> (<A HREF="Data-Monoid-FromString.html#t%3AFromString"
+>FromString</A
+> r)</TD
+></TR
+><TR
+><TD CLASS="decl"
+><A HREF="Data-Ring.html#t%3ADivisionRing"
+>DivisionRing</A
+> r =&gt; <A HREF="Data-Ring.html#t%3ADivisionRing"
+>DivisionRing</A
+> (<A HREF="Data-Monoid-Reducer.html#t%3AReducedBy"
+>ReducedBy</A
+> r s)</TD
+></TR
+></TABLE
+></DIV
+></TD
+></TR
+></TABLE
+></TD
+></TR
+><TR
+><TD CLASS="s15"
+></TD
+></TR
+><TR
+><TD CLASS="topdecl"
+><TABLE CLASS="declbar"
+><TR
+><TD CLASS="declname"
+><SPAN CLASS="keyword"
+>class</SPAN
+> (<A HREF="Data-Ring.html#t%3ARing"
+>Ring</A
+> a, <A HREF="Data-Group.html#t%3AMultiplicativeGroup"
+>MultiplicativeGroup</A
+> a) =&gt; <A NAME="t%3AField"
+></A
+><B
+>Field</B
+> a </TD
+><TD CLASS="declbut"
+><A HREF="src/Data-Ring.html#Field"
+>Source</A
+></TD
+></TR
+></TABLE
+></TD
+></TR
+><TR
+><TD CLASS="body"
+><TABLE CLASS="vanilla" CELLSPACING="0" CELLPADDING="0"
+><TR
+><TD CLASS="s8"
+></TD
+></TR
+><TR
+><TD CLASS="section4"
+><IMG SRC="minus.gif" CLASS="coll" ONCLICK="toggle(this,'i:Field')" ALT="show/hide"
+> Instances</TD
+></TR
+><TR
+><TD CLASS="body"
+><DIV ID="i:Field" STYLE="display:block;"
+><TABLE CLASS="vanilla" CELLSPACING="1" CELLPADDING="0"
+><TR
+><TD CLASS="decl"
+><A HREF="Data-Ring.html#t%3AField"
+>Field</A
+> f =&gt; <A HREF="Data-Ring.html#t%3AField"
+>Field</A
+> (<A HREF="/usr/local/share/doc/ghc/libraries/base/Data-Monoid.html#t%3ADual"
+>Dual</A
+> f)</TD
+></TR
+><TR
+><TD CLASS="decl"
+><A HREF="Data-Ring.html#t%3AField"
+>Field</A
+> f =&gt; <A HREF="Data-Ring.html#t%3AField"
+>Field</A
+> (<A HREF="Data-Monoid-Self.html#t%3ASelf"
+>Self</A
+> f)</TD
+></TR
+><TR
+><TD CLASS="decl"
+><A HREF="Data-Ring.html#t%3AField"
+>Field</A
+> f =&gt; <A HREF="Data-Ring.html#t%3AField"
+>Field</A
+> (<A HREF="Data-Monoid-FromString.html#t%3AFromString"
+>FromString</A
+> f)</TD
+></TR
+><TR
+><TD CLASS="decl"
+><A HREF="Data-Ring.html#t%3AField"
+>Field</A
+> f =&gt; <A HREF="Data-Ring.html#t%3AField"
+>Field</A
+> (<A HREF="Data-Monoid-Reducer.html#t%3AReducedBy"
+>ReducedBy</A
+> f s)</TD
+></TR
+></TABLE
+></DIV
+></TD
+></TR
+></TABLE
+></TD
+></TR
+><TR
+><TD CLASS="s15"
+></TD
+></TR
+><TR
hunk ./doc/html/monoids/doc-index.html 7
->monoids-0.1.33: Monoids, specialized containers and a general map/reduce framework (Index)</TITLE
+>monoids-0.1.35: Monoids, specialized containers and a general map/reduce framework (Index)</TITLE
hunk ./doc/html/monoids/doc-index.html 22
->monoids-0.1.33: Monoids, specialized containers and a general map/reduce framework</TD
+>monoids-0.1.35: Monoids, specialized containers and a general map/reduce framework</TD
hunk ./doc/html/monoids/doc-index.html 52
-><A HREF="Data-Monoid-Multiplicative-Sugar.html#v%3A%2A"
->Data.Monoid.Multiplicative.Sugar</A
->, Data.Ring.Sugar, Data.Group.Multiplicative.Sugar</TD
+><A HREF="Data-Monoid-Sugar.html#v%3A%2A"
+>Data.Monoid.Sugar</A
+>, Data.Group.Sugar</TD
hunk ./doc/html/monoids/doc-index.html 62
->, Data.Monoid.Applicative, Data.Ring.Algebra, Data.Ring.Module.AutomaticDifferentiation, Data.Field.VectorSpace</TD
+>, Data.Monoid.Applicative, Data.Monoid.Monad, Data.Ring.Module.AutomaticDifferentiation</TD
hunk ./doc/html/monoids/doc-index.html 68
-><A HREF="Data-Monoid-Additive-Sugar.html#v%3A%2B"
->Data.Monoid.Additive.Sugar</A
->, Data.Monoid.Multiplicative.Sugar, Data.Ring.Sugar, Data.Group.Sugar, Data.Group.Multiplicative.Sugar</TD
+><A HREF="Data-Monoid-Sugar.html#v%3A%2B"
+>Data.Monoid.Sugar</A
+>, Data.Group.Sugar</TD
hunk ./doc/html/monoids/doc-index.html 78
->, Data.Group.Multiplicative.Sugar</TD
+></TD
hunk ./doc/html/monoids/doc-index.html 92
->, Data.Monoid.Applicative, Data.Ring.Algebra, Data.Ring.Module.AutomaticDifferentiation, Data.Field.VectorSpace</TD
+>, Data.Monoid.Applicative, Data.Monoid.Monad, Data.Ring.Module.AutomaticDifferentiation</TD
+></TR
+><TR CLASS="indexrow"
+><TD CLASS="indexentry"
+>.\.</TD
+><TD CLASS="indexlinks"
+><A HREF="Data-Group-Sugar.html#v%3A.%5C."
+>Data.Group.Sugar</A
+></TD
hunk ./doc/html/monoids/doc-index.html 106
-><A HREF="Data-Group-Multiplicative-Sugar.html#v%3A%2F"
->Data.Group.Multiplicative.Sugar</A
+><A HREF="Data-Group-Sugar.html#v%3A%2F"
+>Data.Group.Sugar</A
hunk ./doc/html/monoids/doc-index.html 143
+><TD CLASS="indexentry"
+>Algebra</TD
+><TD CLASS="indexlinks"
+><A HREF="Data-Ring-Module.html#t%3AAlgebra"
+>Data.Ring.Module</A
+>, Data.Monoid.Applicative, Data.Monoid.Monad, Data.Ring.Module.AutomaticDifferentiation</TD
+></TR
+><TR CLASS="indexrow"
hunk ./doc/html/monoids/doc-index.html 158
->Data.Monoid.Reducer, Data.Monoid.Reducer.Char, Data.Monoid.Lexical.UTF8.Decoder, Data.Monoid.Reducer.With, Data.Monoid.Union, Data.Generator, Data.Monoid.Lexical.SourcePosition, Data.Monoid.Lexical.Words, Data.Monoid.Self, Data.Generator.Compressive.LZ78, Data.Monoid.FromString, Data.Generator.Compressive.RLE, Data.Monoid.Categorical, Data.Monoid.Additive, Data.Monoid.Additive.Sugar, Data.Monoid.Multiplicative, Data.Monoid.Multiplicative.Sugar, Data.Ring.Semi.Near, Data.Ring.Semi, Data.Ring.Semi.Kleene, Data.Ring.Semi.Ord, Data.Ring.Semi.Tropical, Data.Ring.Semi.Near.Trie, Data.Ring.Sugar, Data.Group, Data.Group.Combinators, Data.Group.Multiplicative, Data.Group.Sugar, Data.Group.Multiplicative.Sugar, Data.Ring, Data.Ring.Boolean, Data.Ring.FromNum, Data.Ring.ModularArithmetic, Data.Ring.Module, Data.Monoid.Applicative, Data.Monoid.Monad, Data.Generator.Combinators, Data.Generator.Free, Data.Ring.Semi.Natural, Data.Ring.Algebra, Data.Ring.Semi.BitSet, Data.Ring.Module.AutomaticDifferentiation, Data.Field, Data.Field.VectorSpace</TD
+>Data.Monoid.Reducer, Data.Monoid.Reducer.Char, Data.Monoid.Lexical.UTF8.Decoder, Data.Monoid.Reducer.With, Data.Monoid.Union, Data.Monoid.Categorical, Data.Monoid.Additive, Data.Generator, Data.Generator.Compressive.RLE, Data.Monoid.Lexical.SourcePosition, Data.Monoid.Lexical.Words, Data.Monoid.Self, Data.Generator.Compressive.LZ78, Data.Monoid.FromString, Data.Monoid.Multiplicative, Data.Group, Data.Group.Combinators, Data.Ring, Data.Ring.FromNum, Data.Ring.Module, Data.Monoid.Applicative, Data.Monoid.Monad, Data.Generator.Combinators, Data.Generator.Free, Data.Ring.Module.AutomaticDifferentiation, Data.Ring.Semi.Kleene, Data.Ring.Semi.Near.Trie, Data.Ring.Semi.Natural, Data.Monoid.Sugar, Data.Group.Sugar, Data.Ring.Boolean, Data.Ring.Semi.BitSet, Data.Ring.Semi.Ord, Data.Ring.Semi.Tropical, Data.Ring.ModularArithmetic</TD
hunk ./doc/html/monoids/doc-index.html 164
->Data.Monoid.Reducer, Data.Monoid.Reducer.Char, Data.Monoid.Lexical.UTF8.Decoder, Data.Monoid.Reducer.With, Data.Monoid.Union, Data.Generator, Data.Monoid.Lexical.SourcePosition, Data.Monoid.Lexical.Words, Data.Monoid.Self, Data.Generator.Compressive.LZ78, Data.Monoid.FromString, Data.Generator.Compressive.RLE, Data.Monoid.Categorical, Data.Monoid.Additive, Data.Monoid.Additive.Sugar, Data.Monoid.Multiplicative, Data.Monoid.Multiplicative.Sugar, Data.Ring.Semi.Near, Data.Ring.Semi, Data.Ring.Semi.Kleene, Data.Ring.Semi.Ord, Data.Ring.Semi.Tropical, Data.Ring.Semi.Near.Trie, Data.Ring.Sugar, Data.Group, Data.Group.Combinators, Data.Group.Multiplicative, Data.Group.Sugar, Data.Group.Multiplicative.Sugar, Data.Ring, Data.Ring.Boolean, Data.Ring.FromNum, Data.Ring.ModularArithmetic, Data.Ring.Module, Data.Monoid.Applicative, Data.Monoid.Monad, Data.Generator.Combinators, Data.Generator.Free, Data.Ring.Semi.Natural, Data.Ring.Algebra, Data.Ring.Semi.BitSet, Data.Ring.Module.AutomaticDifferentiation, Data.Field, Data.Field.VectorSpace</TD
+>Data.Monoid.Reducer, Data.Monoid.Reducer.Char, Data.Monoid.Lexical.UTF8.Decoder, Data.Monoid.Reducer.With, Data.Monoid.Union, Data.Monoid.Categorical, Data.Monoid.Additive, Data.Generator, Data.Generator.Compressive.RLE, Data.Monoid.Lexical.SourcePosition, Data.Monoid.Lexical.Words, Data.Monoid.Self, Data.Generator.Compressive.LZ78, Data.Monoid.FromString, Data.Monoid.Multiplicative, Data.Group, Data.Group.Combinators, Data.Ring, Data.Ring.FromNum, Data.Ring.Module, Data.Monoid.Applicative, Data.Monoid.Monad, Data.Generator.Combinators, Data.Generator.Free, Data.Ring.Module.AutomaticDifferentiation, Data.Ring.Semi.Kleene, Data.Ring.Semi.Near.Trie, Data.Ring.Semi.Natural, Data.Monoid.Sugar, Data.Group.Sugar, Data.Ring.Boolean, Data.Ring.Semi.BitSet, Data.Ring.Semi.Ord, Data.Ring.Semi.Tropical, Data.Ring.ModularArithmetic</TD
hunk ./doc/html/monoids/doc-index.html 210
->Data.Monoid.Reducer, Data.Monoid.Reducer.Char, Data.Monoid.Lexical.UTF8.Decoder, Data.Monoid.Reducer.With, Data.Monoid.Union, Data.Generator, Data.Monoid.Lexical.SourcePosition, Data.Monoid.Lexical.Words, Data.Monoid.Self, Data.Generator.Compressive.LZ78, Data.Monoid.FromString, Data.Generator.Compressive.RLE, Data.Monoid.Categorical, Data.Monoid.Additive, Data.Monoid.Additive.Sugar, Data.Monoid.Multiplicative, Data.Monoid.Multiplicative.Sugar, Data.Ring.Semi.Near, Data.Ring.Semi, Data.Ring.Semi.Kleene, Data.Ring.Semi.Ord, Data.Ring.Semi.Tropical, Data.Ring.Semi.Near.Trie, Data.Ring.Sugar, Data.Group, Data.Group.Combinators, Data.Group.Multiplicative, Data.Group.Sugar, Data.Group.Multiplicative.Sugar, Data.Ring, Data.Ring.Boolean, Data.Ring.FromNum, Data.Ring.ModularArithmetic, Data.Ring.Module, Data.Monoid.Applicative, Data.Monoid.Monad, Data.Generator.Combinators, Data.Generator.Free, Data.Ring.Semi.Natural, Data.Ring.Algebra, Data.Ring.Semi.BitSet, Data.Ring.Module.AutomaticDifferentiation, Data.Field, Data.Field.VectorSpace</TD
+>Data.Monoid.Reducer, Data.Monoid.Reducer.Char, Data.Monoid.Lexical.UTF8.Decoder, Data.Monoid.Reducer.With, Data.Monoid.Union, Data.Monoid.Categorical, Data.Monoid.Additive, Data.Generator, Data.Generator.Compressive.RLE, Data.Monoid.Lexical.SourcePosition, Data.Monoid.Lexical.Words, Data.Monoid.Self, Data.Generator.Compressive.LZ78, Data.Monoid.FromString, Data.Monoid.Multiplicative, Data.Group, Data.Group.Combinators, Data.Ring, Data.Ring.FromNum, Data.Ring.Module, Data.Monoid.Applicative, Data.Monoid.Monad, Data.Generator.Combinators, Data.Generator.Free, Data.Ring.Module.AutomaticDifferentiation, Data.Ring.Semi.Kleene, Data.Ring.Semi.Near.Trie, Data.Ring.Semi.Natural, Data.Monoid.Sugar, Data.Group.Sugar, Data.Ring.Boolean, Data.Ring.Semi.BitSet, Data.Ring.Semi.Ord, Data.Ring.Semi.Tropical, Data.Ring.ModularArithmetic</TD
hunk ./doc/html/monoids/doc-index.html 216
->Data.Monoid.Reducer, Data.Monoid.Reducer.Char, Data.Monoid.Lexical.UTF8.Decoder, Data.Monoid.Reducer.With, Data.Monoid.Union, Data.Generator, Data.Monoid.Lexical.SourcePosition, Data.Monoid.Lexical.Words, Data.Monoid.Self, Data.Generator.Compressive.LZ78, Data.Monoid.FromString, Data.Generator.Compressive.RLE, Data.Monoid.Categorical, Data.Monoid.Additive, Data.Monoid.Additive.Sugar, Data.Monoid.Multiplicative, Data.Monoid.Multiplicative.Sugar, Data.Ring.Semi.Near, Data.Ring.Semi, Data.Ring.Semi.Kleene, Data.Ring.Semi.Ord, Data.Ring.Semi.Tropical, Data.Ring.Semi.Near.Trie, Data.Ring.Sugar, Data.Group, Data.Group.Combinators, Data.Group.Multiplicative, Data.Group.Sugar, Data.Group.Multiplicative.Sugar, Data.Ring, Data.Ring.Boolean, Data.Ring.FromNum, Data.Ring.ModularArithmetic, Data.Ring.Module, Data.Monoid.Applicative, Data.Monoid.Monad, Data.Generator.Combinators, Data.Generator.Free, Data.Ring.Semi.Natural, Data.Ring.Algebra, Data.Ring.Semi.BitSet, Data.Ring.Module.AutomaticDifferentiation, Data.Field, Data.Field.VectorSpace</TD
+>Data.Monoid.Reducer, Data.Monoid.Reducer.Char, Data.Monoid.Lexical.UTF8.Decoder, Data.Monoid.Reducer.With, Data.Monoid.Union, Data.Monoid.Categorical, Data.Monoid.Additive, Data.Generator, Data.Generator.Compressive.RLE, Data.Monoid.Lexical.SourcePosition, Data.Monoid.Lexical.Words, Data.Monoid.Self, Data.Generator.Compressive.LZ78, Data.Monoid.FromString, Data.Monoid.Multiplicative, Data.Group, Data.Group.Combinators, Data.Ring, Data.Ring.FromNum, Data.Ring.Module, Data.Monoid.Applicative, Data.Monoid.Monad, Data.Generator.Combinators, Data.Generator.Free, Data.Ring.Module.AutomaticDifferentiation, Data.Ring.Semi.Kleene, Data.Ring.Semi.Near.Trie, Data.Ring.Semi.Natural, Data.Monoid.Sugar, Data.Group.Sugar, Data.Ring.Boolean, Data.Ring.Semi.BitSet, Data.Ring.Semi.Ord, Data.Ring.Semi.Tropical, Data.Ring.ModularArithmetic</TD
hunk ./doc/html/monoids/doc-index.html 258
->Data.Monoid.Reducer, Data.Monoid.Reducer.Char, Data.Monoid.Lexical.UTF8.Decoder, Data.Monoid.Reducer.With, Data.Monoid.Union, Data.Generator, Data.Monoid.Lexical.SourcePosition, Data.Monoid.Lexical.Words, Data.Monoid.Self, Data.Generator.Compressive.LZ78, Data.Monoid.FromString, Data.Generator.Compressive.RLE, Data.Monoid.Categorical, Data.Monoid.Additive, Data.Monoid.Additive.Sugar, Data.Monoid.Multiplicative, Data.Monoid.Multiplicative.Sugar, Data.Ring.Semi.Near, Data.Ring.Semi, Data.Ring.Semi.Kleene, Data.Ring.Semi.Ord, Data.Ring.Semi.Tropical, Data.Ring.Semi.Near.Trie, Data.Ring.Sugar, Data.Group, Data.Group.Combinators, Data.Group.Multiplicative, Data.Group.Sugar, Data.Group.Multiplicative.Sugar, Data.Ring, Data.Ring.Boolean, Data.Ring.FromNum, Data.Ring.ModularArithmetic, Data.Ring.Module, Data.Monoid.Applicative, Data.Monoid.Monad, Data.Generator.Combinators, Data.Generator.Free, Data.Ring.Semi.Natural, Data.Ring.Algebra, Data.Ring.Semi.BitSet, Data.Ring.Module.AutomaticDifferentiation, Data.Field, Data.Field.VectorSpace</TD
+>Data.Monoid.Reducer, Data.Monoid.Reducer.Char, Data.Monoid.Lexical.UTF8.Decoder, Data.Monoid.Reducer.With, Data.Monoid.Union, Data.Monoid.Categorical, Data.Monoid.Additive, Data.Generator, Data.Generator.Compressive.RLE, Data.Monoid.Lexical.SourcePosition, Data.Monoid.Lexical.Words, Data.Monoid.Self, Data.Generator.Compressive.LZ78, Data.Monoid.FromString, Data.Monoid.Multiplicative, Data.Group, Data.Group.Combinators, Data.Ring, Data.Ring.FromNum, Data.Ring.Module, Data.Monoid.Applicative, Data.Monoid.Monad, Data.Generator.Combinators, Data.Generator.Free, Data.Ring.Module.AutomaticDifferentiation, Data.Ring.Semi.Kleene, Data.Ring.Semi.Near.Trie, Data.Ring.Semi.Natural, Data.Monoid.Sugar, Data.Group.Sugar, Data.Ring.Boolean, Data.Ring.Semi.BitSet, Data.Ring.Semi.Ord, Data.Ring.Semi.Tropical, Data.Ring.ModularArithmetic</TD
hunk ./doc/html/monoids/doc-index.html 270
+>Bimodule</TD
+><TD CLASS="indexlinks"
+><A HREF="Data-Ring-Module.html#t%3ABimodule"
+>Data.Ring.Module</A
+>, Data.Monoid.Applicative, Data.Monoid.Monad, Data.Ring.Module.AutomaticDifferentiation</TD
+></TR
+><TR CLASS="indexrow"
+><TD CLASS="indexentry"
hunk ./doc/html/monoids/doc-index.html 286
->BoolRing</TD
+>Boolean</TD
hunk ./doc/html/monoids/doc-index.html 292
-><A HREF="Data-Ring-Boolean.html#t%3ABoolRing"
+><A HREF="Data-Ring-Boolean.html#t%3ABoolean"
hunk ./doc/html/monoids/doc-index.html 300
-><A HREF="Data-Ring-Boolean.html#v%3ABoolRing"
+><A HREF="Data-Ring-Boolean.html#v%3ABoolean"
hunk ./doc/html/monoids/doc-index.html 328
->, Data.Generator.Compressive.LZ78, Data.Generator.Compressive.RLE, Data.Generator.Combinators, Data.Generator.Free</TD
+>, Data.Generator.Compressive.RLE, Data.Generator.Compressive.LZ78, Data.Generator.Combinators, Data.Generator.Free</TD
hunk ./doc/html/monoids/doc-index.html 336
->, Data.Generator.Compressive.LZ78, Data.Generator.Compressive.RLE, Data.Generator.Combinators, Data.Generator.Free</TD
+>, Data.Generator.Compressive.RLE, Data.Generator.Compressive.LZ78, Data.Generator.Combinators, Data.Generator.Free</TD
hunk ./doc/html/monoids/doc-index.html 374
-><A HREF="Data-Ring-Semi-BitSet.html#v%3Acomplement"
->Data.Ring.Semi.BitSet</A
-></TD
+>Data.Ring.Semi.BitSet</TD
hunk ./doc/html/monoids/doc-index.html 390
->, Data.Monoid.Reducer.Char, Data.Monoid.Lexical.UTF8.Decoder, Data.Monoid.Reducer.With, Data.Monoid.Union, Data.Generator, Data.Monoid.Lexical.SourcePosition, Data.Monoid.Lexical.Words, Data.Monoid.Self, Data.Generator.Compressive.LZ78, Data.Monoid.FromString, Data.Generator.Compressive.RLE, Data.Monoid.Categorical, Data.Monoid.Applicative, Data.Monoid.Monad, Data.Generator.Combinators, Data.Generator.Free, Data.Ring.Semi.BitSet</TD
+>, Data.Monoid.Reducer.Char, Data.Monoid.Lexical.UTF8.Decoder, Data.Monoid.Reducer.With, Data.Monoid.Union, Data.Monoid.Categorical, Data.Generator, Data.Generator.Compressive.RLE, Data.Monoid.Lexical.SourcePosition, Data.Monoid.Lexical.Words, Data.Monoid.Self, Data.Generator.Compressive.LZ78, Data.Monoid.FromString, Data.Monoid.Applicative, Data.Monoid.Monad, Data.Generator.Combinators, Data.Generator.Free, Data.Ring.Semi.BitSet, Data.Ring.Semi.Tropical</TD
hunk ./doc/html/monoids/doc-index.html 424
-><A HREF="Data-Generator-Compressive-LZ78.html#v%3Adecode"
->Data.Generator.Compressive.LZ78</A
-></TD
-></TR
-><TR CLASS="indexrow"
-><TD CLASS="indexannot"
->2 (Function)</TD
-><TD CLASS="indexlinks"
hunk ./doc/html/monoids/doc-index.html 429
-><TD CLASS="indexentry" COLSPAN="2"
->delete</TD
-></TR
-><TR CLASS="indexrow"
-><TD CLASS="indexannot"
->1 (Function)</TD
-><TD CLASS="indexlinks"
-><A HREF="Data-Set-Unboxed.html#v%3Adelete"
->Data.Set.Unboxed</A
-></TD
-></TR
-><TR CLASS="indexrow"
hunk ./doc/html/monoids/doc-index.html 432
-><A HREF="Data-Ring-Semi-BitSet.html#v%3Adelete"
->Data.Ring.Semi.BitSet</A
-></TD
-></TR
-><TR CLASS="indexrow"
-><TD CLASS="indexentry"
->deleteFindMax</TD
-><TD CLASS="indexlinks"
-><A HREF="Data-Set-Unboxed.html#v%3AdeleteFindMax"
->Data.Set.Unboxed</A
-></TD
-></TR
-><TR CLASS="indexrow"
-><TD CLASS="indexentry"
->deleteFindMin</TD
-><TD CLASS="indexlinks"
-><A HREF="Data-Set-Unboxed.html#v%3AdeleteFindMin"
->Data.Set.Unboxed</A
-></TD
-></TR
-><TR CLASS="indexrow"
-><TD CLASS="indexentry"
->deleteMax</TD
-><TD CLASS="indexlinks"
-><A HREF="Data-Set-Unboxed.html#v%3AdeleteMax"
->Data.Set.Unboxed</A
+><A HREF="Data-Generator-Compressive-LZ78.html#v%3Adecode"
+>Data.Generator.Compressive.LZ78</A
hunk ./doc/html/monoids/doc-index.html 438
->deleteMin</TD
+>delete</TD
hunk ./doc/html/monoids/doc-index.html 440
-><A HREF="Data-Set-Unboxed.html#v%3AdeleteMin"
->Data.Set.Unboxed</A
+><A HREF="Data-Ring-Semi-BitSet.html#v%3Adelete"
+>Data.Ring.Semi.BitSet</A
hunk ./doc/html/monoids/doc-index.html 446
->difference</TD
+>DivisionRing</TD
hunk ./doc/html/monoids/doc-index.html 448
-><A HREF="Data-Set-Unboxed.html#v%3Adifference"
->Data.Set.Unboxed</A
-></TD
+><A HREF="Data-Ring.html#t%3ADivisionRing"
+>Data.Ring</A
+>, Data.Ring.FromNum, Data.Ring.Module, Data.Monoid.Applicative, Data.Monoid.Monad, Data.Ring.Module.AutomaticDifferentiation, Data.Ring.Semi.Kleene, Data.Ring.Semi.Near.Trie, Data.Ring.Semi.Natural, Data.Monoid.Sugar, Data.Group.Sugar, Data.Ring.Boolean, Data.Ring.Semi.BitSet, Data.Ring.Semi.Ord, Data.Ring.Semi.Tropical, Data.Ring.ModularArithmetic</TD
hunk ./doc/html/monoids/doc-index.html 460
->Data.Monoid.Reducer, Data.Monoid.Reducer.Char, Data.Monoid.Lexical.UTF8.Decoder, Data.Monoid.Reducer.With, Data.Monoid.Union, Data.Generator, Data.Monoid.Lexical.SourcePosition, Data.Monoid.Lexical.Words, Data.Monoid.Self, Data.Generator.Compressive.LZ78, Data.Monoid.FromString, Data.Generator.Compressive.RLE, Data.Monoid.Categorical, Data.Monoid.Additive, Data.Monoid.Additive.Sugar, Data.Monoid.Multiplicative, Data.Monoid.Multiplicative.Sugar, Data.Ring.Semi.Near, Data.Ring.Semi, Data.Ring.Semi.Kleene, Data.Ring.Semi.Ord, Data.Ring.Semi.Tropical, Data.Ring.Semi.Near.Trie, Data.Ring.Sugar, Data.Group, Data.Group.Combinators, Data.Group.Multiplicative, Data.Group.Sugar, Data.Group.Multiplicative.Sugar, Data.Ring, Data.Ring.Boolean, Data.Ring.FromNum, Data.Ring.ModularArithmetic, Data.Ring.Module, Data.Monoid.Applicative, Data.Monoid.Monad, Data.Generator.Combinators, Data.Generator.Free, Data.Ring.Semi.Natural, Data.Ring.Algebra, Data.Ring.Semi.BitSet, Data.Ring.Module.AutomaticDifferentiation, Data.Field, Data.Field.VectorSpace</TD
+>Data.Monoid.Reducer, Data.Monoid.Reducer.Char, Data.Monoid.Lexical.UTF8.Decoder, Data.Monoid.Reducer.With, Data.Monoid.Union, Data.Monoid.Categorical, Data.Monoid.Additive, Data.Generator, Data.Generator.Compressive.RLE, Data.Monoid.Lexical.SourcePosition, Data.Monoid.Lexical.Words, Data.Monoid.Self, Data.Generator.Compressive.LZ78, Data.Monoid.FromString, Data.Monoid.Multiplicative, Data.Group, Data.Group.Combinators, Data.Ring, Data.Ring.FromNum, Data.Ring.Module, Data.Monoid.Applicative, Data.Monoid.Monad, Data.Generator.Combinators, Data.Generator.Free, Data.Ring.Module.AutomaticDifferentiation, Data.Ring.Semi.Kleene, Data.Ring.Semi.Near.Trie, Data.Ring.Semi.Natural, Data.Monoid.Sugar, Data.Group.Sugar, Data.Ring.Boolean, Data.Ring.Semi.BitSet, Data.Ring.Semi.Ord, Data.Ring.Semi.Tropical, Data.Ring.ModularArithmetic</TD
hunk ./doc/html/monoids/doc-index.html 466
->Data.Monoid.Reducer, Data.Monoid.Reducer.Char, Data.Monoid.Lexical.UTF8.Decoder, Data.Monoid.Reducer.With, Data.Monoid.Union, Data.Generator, Data.Monoid.Lexical.SourcePosition, Data.Monoid.Lexical.Words, Data.Monoid.Self, Data.Generator.Compressive.LZ78, Data.Monoid.FromString, Data.Generator.Compressive.RLE, Data.Monoid.Categorical, Data.Monoid.Additive, Data.Monoid.Additive.Sugar, Data.Monoid.Multiplicative, Data.Monoid.Multiplicative.Sugar, Data.Ring.Semi.Near, Data.Ring.Semi, Data.Ring.Semi.Kleene, Data.Ring.Semi.Ord, Data.Ring.Semi.Tropical, Data.Ring.Semi.Near.Trie, Data.Ring.Sugar, Data.Group, Data.Group.Combinators, Data.Group.Multiplicative, Data.Group.Sugar, Data.Group.Multiplicative.Sugar, Data.Ring, Data.Ring.Boolean, Data.Ring.FromNum, Data.Ring.ModularArithmetic, Data.Ring.Module, Data.Monoid.Applicative, Data.Monoid.Monad, Data.Generator.Combinators, Data.Generator.Free, Data.Ring.Semi.Natural, Data.Ring.Algebra, Data.Ring.Semi.BitSet, Data.Ring.Module.AutomaticDifferentiation, Data.Field, Data.Field.VectorSpace</TD
+>Data.Monoid.Reducer, Data.Monoid.Reducer.Char, Data.Monoid.Lexical.UTF8.Decoder, Data.Monoid.Reducer.With, Data.Monoid.Union, Data.Monoid.Categorical, Data.Monoid.Additive, Data.Generator, Data.Generator.Compressive.RLE, Data.Monoid.Lexical.SourcePosition, Data.Monoid.Lexical.Words, Data.Monoid.Self, Data.Generator.Compressive.LZ78, Data.Monoid.FromString, Data.Monoid.Multiplicative, Data.Group, Data.Group.Combinators, Data.Ring, Data.Ring.FromNum, Data.Ring.Module, Data.Monoid.Applicative, Data.Monoid.Monad, Data.Generator.Combinators, Data.Generator.Free, Data.Ring.Module.AutomaticDifferentiation, Data.Ring.Semi.Kleene, Data.Ring.Semi.Near.Trie, Data.Ring.Semi.Natural, Data.Monoid.Sugar, Data.Group.Sugar, Data.Ring.Boolean, Data.Ring.Semi.BitSet, Data.Ring.Semi.Ord, Data.Ring.Semi.Tropical, Data.Ring.ModularArithmetic</TD
hunk ./doc/html/monoids/doc-index.html 474
->, Data.Generator.Compressive.LZ78, Data.Generator.Compressive.RLE, Data.Generator.Combinators, Data.Generator.Free</TD
+>, Data.Generator.Compressive.RLE, Data.Generator.Compressive.LZ78, Data.Generator.Combinators, Data.Generator.Free</TD
hunk ./doc/html/monoids/doc-index.html 485
-><TD CLASS="indexentry"
->elems</TD
-><TD CLASS="indexlinks"
-><A HREF="Data-Set-Unboxed.html#v%3Aelems"
->Data.Set.Unboxed</A
-></TD
-></TR
-><TR CLASS="indexrow"
hunk ./doc/html/monoids/doc-index.html 508
-><A HREF="Data-Set-Unboxed.html#v%3Aempty"
->Data.Set.Unboxed</A
-></TD
-></TR
-><TR CLASS="indexrow"
-><TD CLASS="indexannot"
->4 (Function)</TD
-><TD CLASS="indexlinks"
hunk ./doc/html/monoids/doc-index.html 528
-><A HREF="Data-Generator-Compressive-LZ78.html#v%3Aencode"
->Data.Generator.Compressive.LZ78</A
+><A HREF="Data-Generator-Compressive-RLE.html#v%3Aencode"
+>Data.Generator.Compressive.RLE</A
hunk ./doc/html/monoids/doc-index.html 536
-><A HREF="Data-Generator-Compressive-RLE.html#v%3Aencode"
->Data.Generator.Compressive.RLE</A
+><A HREF="Data-Generator-Compressive-LZ78.html#v%3Aencode"
+>Data.Generator.Compressive.LZ78</A
hunk ./doc/html/monoids/doc-index.html 564
->Data.Monoid.Reducer, Data.Monoid.Reducer.Char, Data.Monoid.Lexical.UTF8.Decoder, Data.Monoid.Reducer.With, Data.Monoid.Union, Data.Generator, Data.Monoid.Lexical.SourcePosition, Data.Monoid.Lexical.Words, Data.Monoid.Self, Data.Generator.Compressive.LZ78, Data.Monoid.FromString, Data.Generator.Compressive.RLE, Data.Monoid.Categorical, Data.Monoid.Additive, Data.Monoid.Additive.Sugar, Data.Monoid.Multiplicative, Data.Monoid.Multiplicative.Sugar, Data.Ring.Semi.Near, Data.Ring.Semi, Data.Ring.Semi.Kleene, Data.Ring.Semi.Ord, Data.Ring.Semi.Tropical, Data.Ring.Semi.Near.Trie, Data.Ring.Sugar, Data.Group, Data.Group.Combinators, Data.Group.Multiplicative, Data.Group.Sugar, Data.Group.Multiplicative.Sugar, Data.Ring, Data.Ring.Boolean, Data.Ring.FromNum, Data.Ring.ModularArithmetic, Data.Ring.Module, Data.Monoid.Applicative, Data.Monoid.Monad, Data.Generator.Combinators, Data.Generator.Free, Data.Ring.Semi.Natural, Data.Ring.Algebra, Data.Ring.Semi.BitSet, Data.Ring.Module.AutomaticDifferentiation, Data.Field, Data.Field.VectorSpace</TD
+>Data.Monoid.Reducer, Data.Monoid.Reducer.Char, Data.Monoid.Lexical.UTF8.Decoder, Data.Monoid.Reducer.With, Data.Monoid.Union, Data.Monoid.Categorical, Data.Monoid.Additive, Data.Generator, Data.Generator.Compressive.RLE, Data.Monoid.Lexical.SourcePosition, Data.Monoid.Lexical.Words, Data.Monoid.Self, Data.Generator.Compressive.LZ78, Data.Monoid.FromString, Data.Monoid.Multiplicative, Data.Group, Data.Group.Combinators, Data.Ring, Data.Ring.FromNum, Data.Ring.Module, Data.Monoid.Applicative, Data.Monoid.Monad, Data.Generator.Combinators, Data.Generator.Free, Data.Ring.Module.AutomaticDifferentiation, Data.Ring.Semi.Kleene, Data.Ring.Semi.Near.Trie, Data.Ring.Semi.Natural, Data.Monoid.Sugar, Data.Group.Sugar, Data.Ring.Boolean, Data.Ring.Semi.BitSet, Data.Ring.Semi.Ord, Data.Ring.Semi.Tropical, Data.Ring.ModularArithmetic</TD
hunk ./doc/html/monoids/doc-index.html 570
->Data.Monoid.Reducer, Data.Monoid.Reducer.Char, Data.Monoid.Lexical.UTF8.Decoder, Data.Monoid.Reducer.With, Data.Monoid.Union, Data.Generator, Data.Monoid.Lexical.SourcePosition, Data.Monoid.Lexical.Words, Data.Monoid.Self, Data.Generator.Compressive.LZ78, Data.Monoid.FromString, Data.Generator.Compressive.RLE, Data.Monoid.Categorical, Data.Monoid.Additive, Data.Monoid.Additive.Sugar, Data.Monoid.Multiplicative, Data.Monoid.Multiplicative.Sugar, Data.Ring.Semi.Near, Data.Ring.Semi, Data.Ring.Semi.Kleene, Data.Ring.Semi.Ord, Data.Ring.Semi.Tropical, Data.Ring.Semi.Near.Trie, Data.Ring.Sugar, Data.Group, Data.Group.Combinators, Data.Group.Multiplicative, Data.Group.Sugar, Data.Group.Multiplicative.Sugar, Data.Ring, Data.Ring.Boolean, Data.Ring.FromNum, Data.Ring.ModularArithmetic, Data.Ring.Module, Data.Monoid.Applicative, Data.Monoid.Monad, Data.Generator.Combinators, Data.Generator.Free, Data.Ring.Semi.Natural, Data.Ring.Algebra, Data.Ring.Semi.BitSet, Data.Ring.Module.AutomaticDifferentiation, Data.Field, Data.Field.VectorSpace</TD
+>Data.Monoid.Reducer, Data.Monoid.Reducer.Char, Data.Monoid.Lexical.UTF8.Decoder, Data.Monoid.Reducer.With, Data.Monoid.Union, Data.Monoid.Categorical, Data.Monoid.Additive, Data.Generator, Data.Generator.Compressive.RLE, Data.Monoid.Lexical.SourcePosition, Data.Monoid.Lexical.Words, Data.Monoid.Self, Data.Generator.Compressive.LZ78, Data.Monoid.FromString, Data.Monoid.Multiplicative, Data.Group, Data.Group.Combinators, Data.Ring, Data.Ring.FromNum, Data.Ring.Module, Data.Monoid.Applicative, Data.Monoid.Monad, Data.Generator.Combinators, Data.Generator.Free, Data.Ring.Module.AutomaticDifferentiation, Data.Ring.Semi.Kleene, Data.Ring.Semi.Near.Trie, Data.Ring.Semi.Natural, Data.Monoid.Sugar, Data.Group.Sugar, Data.Ring.Boolean, Data.Ring.Semi.BitSet, Data.Ring.Semi.Ord, Data.Ring.Semi.Tropical, Data.Ring.ModularArithmetic</TD
hunk ./doc/html/monoids/doc-index.html 582
->, Data.Monoid.Multiplicative.Sugar, Data.Ring.Semi.Near, Data.Ring.Semi, Data.Ring.Semi.Kleene, Data.Ring.Semi.Ord, Data.Ring.Semi.Tropical, Data.Ring.Semi.Near.Trie, Data.Ring.Sugar, Data.Group.Multiplicative, Data.Group.Multiplicative.Sugar, Data.Ring, Data.Ring.Boolean, Data.Ring.FromNum, Data.Ring.ModularArithmetic, Data.Ring.Module, Data.Monoid.Applicative, Data.Monoid.Monad, Data.Ring.Semi.Natural, Data.Ring.Algebra, Data.Ring.Semi.BitSet, Data.Ring.Module.AutomaticDifferentiation, Data.Field, Data.Field.VectorSpace</TD
+>, Data.Group, Data.Group.Combinators, Data.Ring, Data.Ring.FromNum, Data.Ring.Module, Data.Monoid.Applicative, Data.Monoid.Monad, Data.Ring.Module.AutomaticDifferentiation, Data.Ring.Semi.Kleene, Data.Ring.Semi.Near.Trie, Data.Ring.Semi.Natural, Data.Monoid.Sugar, Data.Group.Sugar, Data.Ring.Boolean, Data.Ring.Semi.BitSet, Data.Ring.Semi.Ord, Data.Ring.Semi.Tropical, Data.Ring.ModularArithmetic</TD
hunk ./doc/html/monoids/doc-index.html 590
->, Data.Monoid.Multiplicative.Sugar, Data.Ring.Semi.Near, Data.Ring.Semi, Data.Ring.Semi.Kleene, Data.Ring.Semi.Ord, Data.Ring.Semi.Tropical, Data.Ring.Semi.Near.Trie, Data.Ring.Sugar, Data.Group.Multiplicative, Data.Group.Multiplicative.Sugar, Data.Ring, Data.Ring.Boolean, Data.Ring.FromNum, Data.Ring.ModularArithmetic, Data.Ring.Module, Data.Monoid.Applicative, Data.Monoid.Monad, Data.Ring.Semi.Natural, Data.Ring.Algebra, Data.Ring.Semi.BitSet, Data.Ring.Module.AutomaticDifferentiation, Data.Field, Data.Field.VectorSpace</TD
+>, Data.Group, Data.Group.Combinators, Data.Ring, Data.Ring.FromNum, Data.Ring.Module, Data.Monoid.Applicative, Data.Monoid.Monad, Data.Ring.Module.AutomaticDifferentiation, Data.Ring.Semi.Kleene, Data.Ring.Semi.Near.Trie, Data.Ring.Semi.Natural, Data.Monoid.Sugar, Data.Group.Sugar, Data.Ring.Boolean, Data.Ring.Semi.BitSet, Data.Ring.Semi.Ord, Data.Ring.Semi.Tropical, Data.Ring.ModularArithmetic</TD
hunk ./doc/html/monoids/doc-index.html 596
-><A HREF="Data-Field.html#t%3AField"
->Data.Field</A
->, Data.Field.VectorSpace</TD
+><A HREF="Data-Ring.html#t%3AField"
+>Data.Ring</A
+>, Data.Ring.FromNum, Data.Ring.Module, Data.Monoid.Applicative, Data.Monoid.Monad, Data.Ring.Module.AutomaticDifferentiation, Data.Ring.Semi.Kleene, Data.Ring.Semi.Near.Trie, Data.Ring.Semi.Natural, Data.Monoid.Sugar, Data.Group.Sugar, Data.Ring.Boolean, Data.Ring.Semi.BitSet, Data.Ring.Semi.Ord, Data.Ring.Semi.Tropical, Data.Ring.ModularArithmetic</TD
hunk ./doc/html/monoids/doc-index.html 601
-><TD CLASS="indexentry" COLSPAN="2"
+><TD CLASS="indexentry"
hunk ./doc/html/monoids/doc-index.html 603
-></TR
-><TR CLASS="indexrow"
-><TD CLASS="indexannot"
->1 (Function)</TD
hunk ./doc/html/monoids/doc-index.html 609
-><TD CLASS="indexannot"
->2 (Function)</TD
-><TD CLASS="indexlinks"
-><A HREF="Data-Set-Unboxed.html#v%3Afilter"
->Data.Set.Unboxed</A
-></TD
-></TR
-><TR CLASS="indexrow"
hunk ./doc/html/monoids/doc-index.html 625
-><TD CLASS="indexentry"
->findMax</TD
-><TD CLASS="indexlinks"
-><A HREF="Data-Set-Unboxed.html#v%3AfindMax"
->Data.Set.Unboxed</A
-></TD
-></TR
-><TR CLASS="indexrow"
-><TD CLASS="indexentry"
->findMin</TD
-><TD CLASS="indexlinks"
-><A HREF="Data-Set-Unboxed.html#v%3AfindMin"
->Data.Set.Unboxed</A
-></TD
-></TR
-><TR CLASS="indexrow"
hunk ./doc/html/monoids/doc-index.html 632
->Data.Monoid.Reducer, Data.Monoid.Reducer.Char, Data.Monoid.Lexical.UTF8.Decoder, Data.Monoid.Reducer.With, Data.Monoid.Union, Data.Generator, Data.Monoid.Lexical.SourcePosition, Data.Monoid.Lexical.Words, Data.Monoid.Self, Data.Generator.Compressive.LZ78, Data.Monoid.FromString, Data.Generator.Compressive.RLE, Data.Monoid.Categorical, Data.Monoid.Additive, Data.Monoid.Additive.Sugar, Data.Monoid.Multiplicative, Data.Monoid.Multiplicative.Sugar, Data.Ring.Semi.Near, Data.Ring.Semi, Data.Ring.Semi.Kleene, Data.Ring.Semi.Ord, Data.Ring.Semi.Tropical, Data.Ring.Semi.Near.Trie, Data.Ring.Sugar, Data.Group, Data.Group.Combinators, Data.Group.Multiplicative, Data.Group.Sugar, Data.Group.Multiplicative.Sugar, Data.Ring, Data.Ring.Boolean, Data.Ring.FromNum, Data.Ring.ModularArithmetic, Data.Ring.Module, Data.Monoid.Applicative, Data.Monoid.Monad, Data.Generator.Combinators, Data.Generator.Free, Data.Ring.Semi.Natural, Data.Ring.Algebra, Data.Ring.Semi.BitSet, Data.Ring.Module.AutomaticDifferentiation, Data.Field, Data.Field.VectorSpace</TD
+>Data.Monoid.Reducer, Data.Monoid.Reducer.Char, Data.Monoid.Lexical.UTF8.Decoder, Data.Monoid.Reducer.With, Data.Monoid.Union, Data.Monoid.Categorical, Data.Monoid.Additive, Data.Generator, Data.Generator.Compressive.RLE, Data.Monoid.Lexical.SourcePosition, Data.Monoid.Lexical.Words, Data.Monoid.Self, Data.Generator.Compressive.LZ78, Data.Monoid.FromString, Data.Monoid.Multiplicative, Data.Group, Data.Group.Combinators, Data.Ring, Data.Ring.FromNum, Data.Ring.Module, Data.Monoid.Applicative, Data.Monoid.Monad, Data.Generator.Combinators, Data.Generator.Free, Data.Ring.Module.AutomaticDifferentiation, Data.Ring.Semi.Kleene, Data.Ring.Semi.Near.Trie, Data.Ring.Semi.Natural, Data.Monoid.Sugar, Data.Group.Sugar, Data.Ring.Boolean, Data.Ring.Semi.BitSet, Data.Ring.Semi.Ord, Data.Ring.Semi.Tropical, Data.Ring.ModularArithmetic</TD
hunk ./doc/html/monoids/doc-index.html 638
->Data.Monoid.Reducer, Data.Monoid.Reducer.Char, Data.Monoid.Lexical.UTF8.Decoder, Data.Monoid.Reducer.With, Data.Monoid.Union, Data.Generator, Data.Monoid.Lexical.SourcePosition, Data.Monoid.Lexical.Words, Data.Monoid.Self, Data.Generator.Compressive.LZ78, Data.Monoid.FromString, Data.Generator.Compressive.RLE, Data.Monoid.Categorical, Data.Monoid.Additive, Data.Monoid.Additive.Sugar, Data.Monoid.Multiplicative, Data.Monoid.Multiplicative.Sugar, Data.Ring.Semi.Near, Data.Ring.Semi, Data.Ring.Semi.Kleene, Data.Ring.Semi.Ord, Data.Ring.Semi.Tropical, Data.Ring.Semi.Near.Trie, Data.Ring.Sugar, Data.Group, Data.Group.Combinators, Data.Group.Multiplicative, Data.Group.Sugar, Data.Group.Multiplicative.Sugar, Data.Ring, Data.Ring.Boolean, Data.Ring.FromNum, Data.Ring.ModularArithmetic, Data.Ring.Module, Data.Monoid.Applicative, Data.Monoid.Monad, Data.Generator.Combinators, Data.Generator.Free, Data.Ring.Semi.Natural, Data.Ring.Algebra, Data.Ring.Semi.BitSet, Data.Ring.Module.AutomaticDifferentiation, Data.Field, Data.Field.VectorSpace</TD
+>Data.Monoid.Reducer, Data.Monoid.Reducer.Char, Data.Monoid.Lexical.UTF8.Decoder, Data.Monoid.Reducer.With, Data.Monoid.Union, Data.Monoid.Categorical, Data.Monoid.Additive, Data.Generator, Data.Generator.Compressive.RLE, Data.Monoid.Lexical.SourcePosition, Data.Monoid.Lexical.Words, Data.Monoid.Self, Data.Generator.Compressive.LZ78, Data.Monoid.FromString, Data.Monoid.Multiplicative, Data.Group, Data.Group.Combinators, Data.Ring, Data.Ring.FromNum, Data.Ring.Module, Data.Monoid.Applicative, Data.Monoid.Monad, Data.Generator.Combinators, Data.Generator.Free, Data.Ring.Module.AutomaticDifferentiation, Data.Ring.Semi.Kleene, Data.Ring.Semi.Near.Trie, Data.Ring.Semi.Natural, Data.Monoid.Sugar, Data.Group.Sugar, Data.Ring.Boolean, Data.Ring.Semi.BitSet, Data.Ring.Semi.Ord, Data.Ring.Semi.Tropical, Data.Ring.ModularArithmetic</TD
hunk ./doc/html/monoids/doc-index.html 641
-><TD CLASS="indexentry" COLSPAN="2"
+><TD CLASS="indexentry"
hunk ./doc/html/monoids/doc-index.html 643
-></TR
-><TR CLASS="indexrow"
-><TD CLASS="indexannot"
->1 (Function)</TD
hunk ./doc/html/monoids/doc-index.html 649
-><TD CLASS="indexannot"
->2 (Function)</TD
-><TD CLASS="indexlinks"
-><A HREF="Data-Set-Unboxed.html#v%3Afold"
->Data.Set.Unboxed</A
-></TD
-></TR
-><TR CLASS="indexrow"
hunk ./doc/html/monoids/doc-index.html 662
->, Data.Monoid.Reducer.Char, Data.Monoid.Lexical.UTF8.Decoder, Data.Monoid.Reducer.With, Data.Monoid.Union, Data.Generator, Data.Monoid.Lexical.SourcePosition, Data.Monoid.Lexical.Words, Data.Monoid.Self, Data.Generator.Compressive.LZ78, Data.Monoid.FromString, Data.Generator.Compressive.RLE, Data.Monoid.Categorical, Data.Monoid.Applicative, Data.Monoid.Monad, Data.Generator.Combinators, Data.Generator.Free, Data.Ring.Semi.BitSet</TD
+>, Data.Monoid.Reducer.Char, Data.Monoid.Lexical.UTF8.Decoder, Data.Monoid.Reducer.With, Data.Monoid.Union, Data.Monoid.Categorical, Data.Generator, Data.Generator.Compressive.RLE, Data.Monoid.Lexical.SourcePosition, Data.Monoid.Lexical.Words, Data.Monoid.Self, Data.Generator.Compressive.LZ78, Data.Monoid.FromString, Data.Monoid.Applicative, Data.Monoid.Monad, Data.Generator.Combinators, Data.Generator.Free, Data.Ring.Semi.BitSet, Data.Ring.Semi.Tropical</TD
hunk ./doc/html/monoids/doc-index.html 670
->, Data.Monoid.Reducer.Char, Data.Monoid.Lexical.UTF8.Decoder, Data.Monoid.Reducer.With, Data.Monoid.Union, Data.Generator, Data.Monoid.Lexical.SourcePosition, Data.Monoid.Lexical.Words, Data.Monoid.Self, Data.Generator.Compressive.LZ78, Data.Monoid.FromString, Data.Generator.Compressive.RLE, Data.Monoid.Categorical, Data.Monoid.Applicative, Data.Monoid.Monad, Data.Generator.Combinators, Data.Generator.Free, Data.Ring.Semi.BitSet</TD
+>, Data.Monoid.Reducer.Char, Data.Monoid.Lexical.UTF8.Decoder, Data.Monoid.Reducer.With, Data.Monoid.Union, Data.Monoid.Categorical, Data.Generator, Data.Generator.Compressive.RLE, Data.Monoid.Lexical.SourcePosition, Data.Monoid.Lexical.Words, Data.Monoid.Self, Data.Generator.Compressive.LZ78, Data.Monoid.FromString, Data.Monoid.Applicative, Data.Monoid.Monad, Data.Generator.Combinators, Data.Generator.Free, Data.Ring.Semi.BitSet, Data.Ring.Semi.Tropical</TD
hunk ./doc/html/monoids/doc-index.html 698
->fromAscList</TD
-><TD CLASS="indexlinks"
-><A HREF="Data-Set-Unboxed.html#v%3AfromAscList"
->Data.Set.Unboxed</A
-></TD
-></TR
-><TR CLASS="indexrow"
-><TD CLASS="indexentry"
hunk ./doc/html/monoids/doc-index.html 705
-><TD CLASS="indexentry" COLSPAN="2"
+><TD CLASS="indexentry"
hunk ./doc/html/monoids/doc-index.html 707
-></TR
-><TR CLASS="indexrow"
-><TD CLASS="indexannot"
->1 (Function)</TD
-><TD CLASS="indexlinks"
-><A HREF="Data-Set-Unboxed.html#v%3AfromDistinctAscList"
->Data.Set.Unboxed</A
-></TD
-></TR
-><TR CLASS="indexrow"
-><TD CLASS="indexannot"
->2 (Function)</TD
hunk ./doc/html/monoids/doc-index.html 713
-><TD CLASS="indexentry" COLSPAN="2"
+><TD CLASS="indexentry"
hunk ./doc/html/monoids/doc-index.html 715
-></TR
-><TR CLASS="indexrow"
-><TD CLASS="indexannot"
->1 (Function)</TD
hunk ./doc/html/monoids/doc-index.html 716
-><A HREF="Data-Set-Unboxed.html#v%3AfromList"
->Data.Set.Unboxed</A
+><A HREF="Data-Ring-Semi-BitSet.html#v%3AfromList"
+>Data.Ring.Semi.BitSet</A
hunk ./doc/html/monoids/doc-index.html 721
-><TD CLASS="indexannot"
->2 (Function)</TD
+><TD CLASS="indexentry"
+>fromNatural</TD
hunk ./doc/html/monoids/doc-index.html 724
-><A HREF="Data-Ring-Semi-BitSet.html#v%3AfromList"
->Data.Ring.Semi.BitSet</A
-></TD
+><A HREF="Data-Ring-Semi-Natural.html#v%3AfromNatural"
+>Data.Ring.Semi.Natural</A
+>, Data.Monoid.Sugar, Data.Group.Sugar</TD
hunk ./doc/html/monoids/doc-index.html 802
->, Data.Generator.Compressive.LZ78, Data.Generator.Compressive.RLE, Data.Generator.Combinators, Data.Generator.Free</TD
+>, Data.Generator.Compressive.RLE, Data.Generator.Compressive.LZ78, Data.Generator.Combinators, Data.Generator.Free</TD
hunk ./doc/html/monoids/doc-index.html 816
->Data.Monoid.Reducer, Data.Monoid.Reducer.Char, Data.Monoid.Lexical.UTF8.Decoder, Data.Monoid.Reducer.With, Data.Monoid.Union, Data.Generator, Data.Monoid.Lexical.SourcePosition, Data.Monoid.Lexical.Words, Data.Monoid.Self, Data.Generator.Compressive.LZ78, Data.Monoid.FromString, Data.Generator.Compressive.RLE, Data.Monoid.Categorical, Data.Monoid.Additive, Data.Monoid.Additive.Sugar, Data.Monoid.Multiplicative, Data.Monoid.Multiplicative.Sugar, Data.Ring.Semi.Near, Data.Ring.Semi, Data.Ring.Semi.Kleene, Data.Ring.Semi.Ord, Data.Ring.Semi.Tropical, Data.Ring.Semi.Near.Trie, Data.Ring.Sugar, Data.Group, Data.Group.Combinators, Data.Group.Multiplicative, Data.Group.Sugar, Data.Group.Multiplicative.Sugar, Data.Ring, Data.Ring.Boolean, Data.Ring.FromNum, Data.Ring.ModularArithmetic, Data.Ring.Module, Data.Monoid.Applicative, Data.Monoid.Monad, Data.Generator.Combinators, Data.Generator.Free, Data.Ring.Semi.Natural, Data.Ring.Algebra, Data.Ring.Semi.BitSet, Data.Ring.Module.AutomaticDifferentiation, Data.Field, Data.Field.VectorSpace</TD
+>Data.Monoid.Reducer, Data.Monoid.Reducer.Char, Data.Monoid.Lexical.UTF8.Decoder, Data.Monoid.Reducer.With, Data.Monoid.Union, Data.Monoid.Categorical, Data.Monoid.Additive, Data.Generator, Data.Generator.Compressive.RLE, Data.Monoid.Lexical.SourcePosition, Data.Monoid.Lexical.Words, Data.Monoid.Self, Data.Generator.Compressive.LZ78, Data.Monoid.FromString, Data.Monoid.Multiplicative, Data.Group, Data.Group.Combinators, Data.Ring, Data.Ring.FromNum, Data.Ring.Module, Data.Monoid.Applicative, Data.Monoid.Monad, Data.Generator.Combinators, Data.Generator.Free, Data.Ring.Module.AutomaticDifferentiation, Data.Ring.Semi.Kleene, Data.Ring.Semi.Near.Trie, Data.Ring.Semi.Natural, Data.Monoid.Sugar, Data.Group.Sugar, Data.Ring.Boolean, Data.Ring.Semi.BitSet, Data.Ring.Semi.Ord, Data.Ring.Semi.Tropical, Data.Ring.ModularArithmetic</TD
hunk ./doc/html/monoids/doc-index.html 830
->Data.Monoid.Reducer, Data.Monoid.Reducer.Char, Data.Monoid.Lexical.UTF8.Decoder, Data.Monoid.Reducer.With, Data.Monoid.Union, Data.Generator, Data.Monoid.Lexical.SourcePosition, Data.Monoid.Lexical.Words, Data.Monoid.Self, Data.Generator.Compressive.LZ78, Data.Monoid.FromString, Data.Generator.Compressive.RLE, Data.Monoid.Categorical, Data.Monoid.Additive, Data.Monoid.Additive.Sugar, Data.Monoid.Multiplicative, Data.Monoid.Multiplicative.Sugar, Data.Ring.Semi.Near, Data.Ring.Semi, Data.Ring.Semi.Kleene, Data.Ring.Semi.Ord, Data.Ring.Semi.Tropical, Data.Ring.Semi.Near.Trie, Data.Ring.Sugar, Data.Group, Data.Group.Combinators, Data.Group.Multiplicative, Data.Group.Sugar, Data.Group.Multiplicative.Sugar, Data.Ring, Data.Ring.Boolean, Data.Ring.FromNum, Data.Ring.ModularArithmetic, Data.Ring.Module, Data.Monoid.Applicative, Data.Monoid.Monad, Data.Generator.Combinators, Data.Generator.Free, Data.Ring.Semi.Natural, Data.Ring.Algebra, Data.Ring.Semi.BitSet, Data.Ring.Module.AutomaticDifferentiation, Data.Field, Data.Field.VectorSpace</TD
+>Data.Monoid.Reducer, Data.Monoid.Reducer.Char, Data.Monoid.Lexical.UTF8.Decoder, Data.Monoid.Reducer.With, Data.Monoid.Union, Data.Monoid.Categorical, Data.Monoid.Additive, Data.Generator, Data.Generator.Compressive.RLE, Data.Monoid.Lexical.SourcePosition, Data.Monoid.Lexical.Words, Data.Monoid.Self, Data.Generator.Compressive.LZ78, Data.Monoid.FromString, Data.Monoid.Multiplicative, Data.Group, Data.Group.Combinators, Data.Ring, Data.Ring.FromNum, Data.Ring.Module, Data.Monoid.Applicative, Data.Monoid.Monad, Data.Generator.Combinators, Data.Generator.Free, Data.Ring.Module.AutomaticDifferentiation, Data.Ring.Semi.Kleene, Data.Ring.Semi.Near.Trie, Data.Ring.Semi.Natural, Data.Monoid.Sugar, Data.Group.Sugar, Data.Ring.Boolean, Data.Ring.Semi.BitSet, Data.Ring.Semi.Ord, Data.Ring.Semi.Tropical, Data.Ring.ModularArithmetic</TD
hunk ./doc/html/monoids/doc-index.html 842
->getBoolRing</TD
+>getBoolean</TD
hunk ./doc/html/monoids/doc-index.html 844
-><A HREF="Data-Ring-Boolean.html#v%3AgetBoolRing"
+><A HREF="Data-Ring-Boolean.html#v%3AgetBoolean"
hunk ./doc/html/monoids/doc-index.html 854
->, Data.Generator.Compressive.LZ78, Data.Generator.Compressive.RLE, Data.Generator.Combinators, Data.Generator.Free</TD
+>, Data.Generator.Compressive.RLE, Data.Generator.Compressive.LZ78, Data.Generator.Combinators, Data.Generator.Free</TD
hunk ./doc/html/monoids/doc-index.html 860
->Data.Monoid.Reducer, Data.Monoid.Reducer.Char, Data.Monoid.Lexical.UTF8.Decoder, Data.Monoid.Reducer.With, Data.Monoid.Union, Data.Generator, Data.Monoid.Lexical.SourcePosition, Data.Monoid.Lexical.Words, Data.Monoid.Self, Data.Generator.Compressive.LZ78, Data.Monoid.FromString, Data.Generator.Compressive.RLE, Data.Monoid.Categorical, Data.Monoid.Additive, Data.Monoid.Additive.Sugar, Data.Monoid.Multiplicative, Data.Monoid.Multiplicative.Sugar, Data.Ring.Semi.Near, Data.Ring.Semi, Data.Ring.Semi.Kleene, Data.Ring.Semi.Ord, Data.Ring.Semi.Tropical, Data.Ring.Semi.Near.Trie, Data.Ring.Sugar, Data.Group, Data.Group.Combinators, Data.Group.Multiplicative, Data.Group.Sugar, Data.Group.Multiplicative.Sugar, Data.Ring, Data.Ring.Boolean, Data.Ring.FromNum, Data.Ring.ModularArithmetic, Data.Ring.Module, Data.Monoid.Applicative, Data.Monoid.Monad, Data.Generator.Combinators, Data.Generator.Free, Data.Ring.Semi.Natural, Data.Ring.Algebra, Data.Ring.Semi.BitSet, Data.Ring.Module.AutomaticDifferentiation, Data.Field, Data.Field.VectorSpace</TD
+>Data.Monoid.Reducer, Data.Monoid.Reducer.Char, Data.Monoid.Lexical.UTF8.Decoder, Data.Monoid.Reducer.With, Data.Monoid.Union, Data.Monoid.Categorical, Data.Monoid.Additive, Data.Generator, Data.Generator.Compressive.RLE, Data.Monoid.Lexical.SourcePosition, Data.Monoid.Lexical.Words, Data.Monoid.Self, Data.Generator.Compressive.LZ78, Data.Monoid.FromString, Data.Monoid.Multiplicative, Data.Group, Data.Group.Combinators, Data.Ring, Data.Ring.FromNum, Data.Ring.Module, Data.Monoid.Applicative, Data.Monoid.Monad, Data.Generator.Combinators, Data.Generator.Free, Data.Ring.Module.AutomaticDifferentiation, Data.Ring.Semi.Kleene, Data.Ring.Semi.Near.Trie, Data.Ring.Semi.Natural, Data.Monoid.Sugar, Data.Group.Sugar, Data.Ring.Boolean, Data.Ring.Semi.BitSet, Data.Ring.Semi.Ord, Data.Ring.Semi.Tropical, Data.Ring.ModularArithmetic</TD
hunk ./doc/html/monoids/doc-index.html 868
->, Data.Monoid.Multiplicative.Sugar, Data.Ring.Semi.Near, Data.Ring.Semi, Data.Ring.Semi.Kleene, Data.Ring.Semi.Ord, Data.Ring.Semi.Tropical, Data.Ring.Semi.Near.Trie, Data.Ring.Sugar, Data.Group.Multiplicative, Data.Group.Multiplicative.Sugar, Data.Ring, Data.Ring.Boolean, Data.Ring.FromNum, Data.Ring.ModularArithmetic, Data.Ring.Module, Data.Monoid.Applicative, Data.Monoid.Monad, Data.Ring.Semi.Natural, Data.Ring.Algebra, Data.Ring.Semi.BitSet, Data.Ring.Module.AutomaticDifferentiation, Data.Field, Data.Field.VectorSpace</TD
+>, Data.Group, Data.Group.Combinators, Data.Ring, Data.Ring.FromNum, Data.Ring.Module, Data.Monoid.Applicative, Data.Monoid.Monad, Data.Ring.Module.AutomaticDifferentiation, Data.Ring.Semi.Kleene, Data.Ring.Semi.Near.Trie, Data.Ring.Semi.Natural, Data.Monoid.Sugar, Data.Group.Sugar, Data.Ring.Boolean, Data.Ring.Semi.BitSet, Data.Ring.Semi.Ord, Data.Ring.Semi.Tropical, Data.Ring.ModularArithmetic</TD
hunk ./doc/html/monoids/doc-index.html 874
->Data.Monoid.Reducer, Data.Monoid.Reducer.Char, Data.Monoid.Lexical.UTF8.Decoder, Data.Monoid.Reducer.With, Data.Monoid.Union, Data.Generator, Data.Monoid.Lexical.SourcePosition, Data.Monoid.Lexical.Words, Data.Monoid.Self, Data.Generator.Compressive.LZ78, Data.Monoid.FromString, Data.Generator.Compressive.RLE, Data.Monoid.Categorical, Data.Monoid.Additive, Data.Monoid.Additive.Sugar, Data.Monoid.Multiplicative, Data.Monoid.Multiplicative.Sugar, Data.Ring.Semi.Near, Data.Ring.Semi, Data.Ring.Semi.Kleene, Data.Ring.Semi.Ord, Data.Ring.Semi.Tropical, Data.Ring.Semi.Near.Trie, Data.Ring.Sugar, Data.Group, Data.Group.Combinators, Data.Group.Multiplicative, Data.Group.Sugar, Data.Group.Multiplicative.Sugar, Data.Ring, Data.Ring.Boolean, Data.Ring.FromNum, Data.Ring.ModularArithmetic, Data.Ring.Module, Data.Monoid.Applicative, Data.Monoid.Monad, Data.Generator.Combinators, Data.Generator.Free, Data.Ring.Semi.Natural, Data.Ring.Algebra, Data.Ring.Semi.BitSet, Data.Ring.Module.AutomaticDifferentiation, Data.Field, Data.Field.VectorSpace</TD
+>Data.Monoid.Reducer, Data.Monoid.Reducer.Char, Data.Monoid.Lexical.UTF8.Decoder, Data.Monoid.Reducer.With, Data.Monoid.Union, Data.Monoid.Categorical, Data.Monoid.Additive, Data.Generator, Data.Generator.Compressive.RLE, Data.Monoid.Lexical.SourcePosition, Data.Monoid.Lexical.Words, Data.Monoid.Self, Data.Generator.Compressive.LZ78, Data.Monoid.FromString, Data.Monoid.Multiplicative, Data.Group, Data.Group.Combinators, Data.Ring, Data.Ring.FromNum, Data.Ring.Module, Data.Monoid.Applicative, Data.Monoid.Monad, Data.Generator.Combinators, Data.Generator.Free, Data.Ring.Module.AutomaticDifferentiation, Data.Ring.Semi.Kleene, Data.Ring.Semi.Near.Trie, Data.Ring.Semi.Natural, Data.Monoid.Sugar, Data.Group.Sugar, Data.Ring.Boolean, Data.Ring.Semi.BitSet, Data.Ring.Semi.Ord, Data.Ring.Semi.Tropical, Data.Ring.ModularArithmetic</TD
hunk ./doc/html/monoids/doc-index.html 906
->, Data.Generator.Compressive.LZ78, Data.Generator.Compressive.RLE, Data.Generator.Combinators, Data.Generator.Free</TD
+>, Data.Generator.Compressive.RLE, Data.Generator.Compressive.LZ78, Data.Generator.Combinators, Data.Generator.Free</TD
hunk ./doc/html/monoids/doc-index.html 912
->Data.Monoid.Reducer, Data.Monoid.Reducer.Char, Data.Monoid.Lexical.UTF8.Decoder, Data.Monoid.Reducer.With, Data.Monoid.Union, Data.Generator, Data.Monoid.Lexical.SourcePosition, Data.Monoid.Lexical.Words, Data.Monoid.Self, Data.Generator.Compressive.LZ78, Data.Monoid.FromString, Data.Generator.Compressive.RLE, Data.Monoid.Categorical, Data.Monoid.Additive, Data.Monoid.Additive.Sugar, Data.Monoid.Multiplicative, Data.Monoid.Multiplicative.Sugar, Data.Ring.Semi.Near, Data.Ring.Semi, Data.Ring.Semi.Kleene, Data.Ring.Semi.Ord, Data.Ring.Semi.Tropical, Data.Ring.Semi.Near.Trie, Data.Ring.Sugar, Data.Group, Data.Group.Combinators, Data.Group.Multiplicative, Data.Group.Sugar, Data.Group.Multiplicative.Sugar, Data.Ring, Data.Ring.Boolean, Data.Ring.FromNum, Data.Ring.ModularArithmetic, Data.Ring.Module, Data.Monoid.Applicative, Data.Monoid.Monad, Data.Generator.Combinators, Data.Generator.Free, Data.Ring.Semi.Natural, Data.Ring.Algebra, Data.Ring.Semi.BitSet, Data.Ring.Module.AutomaticDifferentiation, Data.Field, Data.Field.VectorSpace</TD
+>Data.Monoid.Reducer, Data.Monoid.Reducer.Char, Data.Monoid.Lexical.UTF8.Decoder, Data.Monoid.Reducer.With, Data.Monoid.Union, Data.Monoid.Categorical, Data.Monoid.Additive, Data.Generator, Data.Generator.Compressive.RLE, Data.Monoid.Lexical.SourcePosition, Data.Monoid.Lexical.Words, Data.Monoid.Self, Data.Generator.Compressive.LZ78, Data.Monoid.FromString, Data.Monoid.Multiplicative, Data.Group, Data.Group.Combinators, Data.Ring, Data.Ring.FromNum, Data.Ring.Module, Data.Monoid.Applicative, Data.Monoid.Monad, Data.Generator.Combinators, Data.Generator.Free, Data.Ring.Module.AutomaticDifferentiation, Data.Ring.Semi.Kleene, Data.Ring.Semi.Near.Trie, Data.Ring.Semi.Natural, Data.Monoid.Sugar, Data.Group.Sugar, Data.Ring.Boolean, Data.Ring.Semi.BitSet, Data.Ring.Semi.Ord, Data.Ring.Semi.Tropical, Data.Ring.ModularArithmetic</TD
hunk ./doc/html/monoids/doc-index.html 920
->, Data.Monoid.Multiplicative.Sugar, Data.Ring.Semi.Near, Data.Ring.Semi, Data.Ring.Semi.Kleene, Data.Ring.Semi.Ord, Data.Ring.Semi.Tropical, Data.Ring.Semi.Near.Trie, Data.Ring.Sugar, Data.Group.Multiplicative, Data.Group.Multiplicative.Sugar, Data.Ring, Data.Ring.Boolean, Data.Ring.FromNum, Data.Ring.ModularArithmetic, Data.Ring.Module, Data.Monoid.Applicative, Data.Monoid.Monad, Data.Ring.Semi.Natural, Data.Ring.Algebra, Data.Ring.Semi.BitSet, Data.Ring.Module.AutomaticDifferentiation, Data.Field, Data.Field.VectorSpace</TD
+>, Data.Group, Data.Group.Combinators, Data.Ring, Data.Ring.FromNum, Data.Ring.Module, Data.Monoid.Applicative, Data.Monoid.Monad, Data.Ring.Module.AutomaticDifferentiation, Data.Ring.Semi.Kleene, Data.Ring.Semi.Near.Trie, Data.Ring.Semi.Natural, Data.Monoid.Sugar, Data.Group.Sugar, Data.Ring.Boolean, Data.Ring.Semi.BitSet, Data.Ring.Semi.Ord, Data.Ring.Semi.Tropical, Data.Ring.ModularArithmetic</TD
hunk ./doc/html/monoids/doc-index.html 990
->Data.Monoid.Reducer, Data.Monoid.Reducer.Char, Data.Monoid.Lexical.UTF8.Decoder, Data.Monoid.Reducer.With, Data.Monoid.Union, Data.Generator, Data.Monoid.Lexical.SourcePosition, Data.Monoid.Lexical.Words, Data.Monoid.Self, Data.Generator.Compressive.LZ78, Data.Monoid.FromString, Data.Generator.Compressive.RLE, Data.Monoid.Categorical, Data.Monoid.Additive, Data.Monoid.Additive.Sugar, Data.Monoid.Multiplicative, Data.Monoid.Multiplicative.Sugar, Data.Ring.Semi.Near, Data.Ring.Semi, Data.Ring.Semi.Kleene, Data.Ring.Semi.Ord, Data.Ring.Semi.Tropical, Data.Ring.Semi.Near.Trie, Data.Ring.Sugar, Data.Group, Data.Group.Combinators, Data.Group.Multiplicative, Data.Group.Sugar, Data.Group.Multiplicative.Sugar, Data.Ring, Data.Ring.Boolean, Data.Ring.FromNum, Data.Ring.ModularArithmetic, Data.Ring.Module, Data.Monoid.Applicative, Data.Monoid.Monad, Data.Generator.Combinators, Data.Generator.Free, Data.Ring.Semi.Natural, Data.Ring.Algebra, Data.Ring.Semi.BitSet, Data.Ring.Module.AutomaticDifferentiation, Data.Field, Data.Field.VectorSpace</TD
+>Data.Monoid.Reducer, Data.Monoid.Reducer.Char, Data.Monoid.Lexical.UTF8.Decoder, Data.Monoid.Reducer.With, Data.Monoid.Union, Data.Monoid.Categorical, Data.Monoid.Additive, Data.Generator, Data.Generator.Compressive.RLE, Data.Monoid.Lexical.SourcePosition, Data.Monoid.Lexical.Words, Data.Monoid.Self, Data.Generator.Compressive.LZ78, Data.Monoid.FromString, Data.Monoid.Multiplicative, Data.Group, Data.Group.Combinators, Data.Ring, Data.Ring.FromNum, Data.Ring.Module, Data.Monoid.Applicative, Data.Monoid.Monad, Data.Generator.Combinators, Data.Generator.Free, Data.Ring.Module.AutomaticDifferentiation, Data.Ring.Semi.Kleene, Data.Ring.Semi.Near.Trie, Data.Ring.Semi.Natural, Data.Monoid.Sugar, Data.Group.Sugar, Data.Ring.Boolean, Data.Ring.Semi.BitSet, Data.Ring.Semi.Ord, Data.Ring.Semi.Tropical, Data.Ring.ModularArithmetic</TD
hunk ./doc/html/monoids/doc-index.html 998
->, Data.Monoid.Reducer.Char, Data.Monoid.Lexical.UTF8.Decoder, Data.Monoid.Reducer.With, Data.Monoid.Union, Data.Generator, Data.Monoid.Lexical.SourcePosition, Data.Monoid.Lexical.Words, Data.Monoid.Self, Data.Generator.Compressive.LZ78, Data.Monoid.FromString, Data.Generator.Compressive.RLE, Data.Monoid.Categorical, Data.Monoid.Applicative, Data.Monoid.Monad, Data.Generator.Combinators, Data.Generator.Free, Data.Ring.Semi.BitSet</TD
+>, Data.Monoid.Reducer.Char, Data.Monoid.Lexical.UTF8.Decoder, Data.Monoid.Reducer.With, Data.Monoid.Union, Data.Monoid.Categorical, Data.Generator, Data.Generator.Compressive.RLE, Data.Monoid.Lexical.SourcePosition, Data.Monoid.Lexical.Words, Data.Monoid.Self, Data.Generator.Compressive.LZ78, Data.Monoid.FromString, Data.Monoid.Applicative, Data.Monoid.Monad, Data.Generator.Combinators, Data.Generator.Free, Data.Ring.Semi.BitSet, Data.Ring.Semi.Tropical</TD
hunk ./doc/html/monoids/doc-index.html 1020
->Data.Monoid.Reducer, Data.Monoid.Reducer.Char, Data.Monoid.Lexical.UTF8.Decoder, Data.Monoid.Reducer.With, Data.Monoid.Union, Data.Generator, Data.Monoid.Lexical.SourcePosition, Data.Monoid.Lexical.Words, Data.Monoid.Self, Data.Generator.Compressive.LZ78, Data.Monoid.FromString, Data.Generator.Compressive.RLE, Data.Monoid.Categorical, Data.Monoid.Additive, Data.Monoid.Additive.Sugar, Data.Monoid.Multiplicative, Data.Monoid.Multiplicative.Sugar, Data.Ring.Semi.Near, Data.Ring.Semi, Data.Ring.Semi.Kleene, Data.Ring.Semi.Ord, Data.Ring.Semi.Tropical, Data.Ring.Semi.Near.Trie, Data.Ring.Sugar, Data.Group, Data.Group.Combinators, Data.Group.Multiplicative, Data.Group.Sugar, Data.Group.Multiplicative.Sugar, Data.Ring, Data.Ring.Boolean, Data.Ring.FromNum, Data.Ring.ModularArithmetic, Data.Ring.Module, Data.Monoid.Applicative, Data.Monoid.Monad, Data.Generator.Combinators, Data.Generator.Free, Data.Ring.Semi.Natural, Data.Ring.Algebra, Data.Ring.Semi.BitSet, Data.Ring.Module.AutomaticDifferentiation, Data.Field, Data.Field.VectorSpace</TD
+>Data.Monoid.Reducer, Data.Monoid.Reducer.Char, Data.Monoid.Lexical.UTF8.Decoder, Data.Monoid.Reducer.With, Data.Monoid.Union, Data.Monoid.Categorical, Data.Monoid.Additive, Data.Generator, Data.Generator.Compressive.RLE, Data.Monoid.Lexical.SourcePosition, Data.Monoid.Lexical.Words, Data.Monoid.Self, Data.Generator.Compressive.LZ78, Data.Monoid.FromString, Data.Monoid.Multiplicative, Data.Group, Data.Group.Combinators, Data.Ring, Data.Ring.FromNum, Data.Ring.Module, Data.Monoid.Applicative, Data.Monoid.Monad, Data.Generator.Combinators, Data.Generator.Free, Data.Ring.Module.AutomaticDifferentiation, Data.Ring.Semi.Kleene, Data.Ring.Semi.Near.Trie, Data.Ring.Semi.Natural, Data.Monoid.Sugar, Data.Group.Sugar, Data.Ring.Boolean, Data.Ring.Semi.BitSet, Data.Ring.Semi.Ord, Data.Ring.Semi.Tropical, Data.Ring.ModularArithmetic</TD
hunk ./doc/html/monoids/doc-index.html 1060
->, Data.Generator.Compressive.LZ78, Data.Generator.Compressive.RLE, Data.Generator.Combinators, Data.Generator.Free</TD
+>, Data.Generator.Compressive.RLE, Data.Generator.Compressive.LZ78, Data.Generator.Combinators, Data.Generator.Free</TD
hunk ./doc/html/monoids/doc-index.html 1068
->, Data.Group.Combinators, Data.Group.Multiplicative, Data.Group.Sugar, Data.Group.Multiplicative.Sugar, Data.Ring, Data.Ring.Boolean, Data.Ring.FromNum, Data.Ring.ModularArithmetic, Data.Ring.Module, Data.Monoid.Applicative, Data.Ring.Algebra, Data.Ring.Module.AutomaticDifferentiation, Data.Field, Data.Field.VectorSpace</TD
+>, Data.Group.Combinators, Data.Ring, Data.Ring.FromNum, Data.Ring.Module, Data.Monoid.Applicative, Data.Monoid.Monad, Data.Ring.Module.AutomaticDifferentiation, Data.Ring.Semi.Kleene, Data.Ring.Semi.Near.Trie, Data.Ring.Semi.Natural, Data.Monoid.Sugar, Data.Group.Sugar, Data.Ring.Boolean, Data.Ring.Semi.BitSet, Data.Ring.Semi.Ord, Data.Ring.Semi.Tropical, Data.Ring.ModularArithmetic</TD
hunk ./doc/html/monoids/doc-index.html 1074
-><A HREF="Data-Group-Multiplicative.html#v%3Agrecip"
->Data.Group.Multiplicative</A
->, Data.Group.Multiplicative.Sugar, Data.Field, Data.Field.VectorSpace</TD
+><A HREF="Data-Group.html#v%3Agrecip"
+>Data.Group</A
+>, Data.Group.Combinators, Data.Ring, Data.Ring.FromNum, Data.Ring.Module, Data.Monoid.Applicative, Data.Monoid.Monad, Data.Ring.Module.AutomaticDifferentiation, Data.Ring.Semi.Kleene, Data.Ring.Semi.Near.Trie, Data.Ring.Semi.Natural, Data.Monoid.Sugar, Data.Group.Sugar, Data.Ring.Boolean, Data.Ring.Semi.BitSet, Data.Ring.Semi.Ord, Data.Ring.Semi.Tropical, Data.Ring.ModularArithmetic</TD
hunk ./doc/html/monoids/doc-index.html 1084
->, Data.Group.Combinators, Data.Group.Multiplicative, Data.Group.Sugar, Data.Group.Multiplicative.Sugar, Data.Ring, Data.Ring.Boolean, Data.Ring.FromNum, Data.Ring.ModularArithmetic, Data.Ring.Module, Data.Monoid.Applicative, Data.Ring.Algebra, Data.Ring.Module.AutomaticDifferentiation, Data.Field, Data.Field.VectorSpace</TD
+>, Data.Group.Combinators, Data.Ring, Data.Ring.FromNum, Data.Ring.Module, Data.Monoid.Applicative, Data.Monoid.Monad, Data.Ring.Module.AutomaticDifferentiation, Data.Ring.Semi.Kleene, Data.Ring.Semi.Near.Trie, Data.Ring.Semi.Natural, Data.Monoid.Sugar, Data.Group.Sugar, Data.Ring.Boolean, Data.Ring.Semi.BitSet, Data.Ring.Semi.Ord, Data.Ring.Semi.Tropical, Data.Ring.ModularArithmetic</TD
hunk ./doc/html/monoids/doc-index.html 1092
->, Data.Group.Combinators, Data.Group.Multiplicative, Data.Group.Sugar, Data.Group.Multiplicative.Sugar, Data.Ring, Data.Ring.Boolean, Data.Ring.FromNum, Data.Ring.ModularArithmetic, Data.Ring.Module, Data.Monoid.Applicative, Data.Ring.Algebra, Data.Ring.Module.AutomaticDifferentiation, Data.Field, Data.Field.VectorSpace</TD
+>, Data.Group.Combinators, Data.Ring, Data.Ring.FromNum, Data.Ring.Module, Data.Monoid.Applicative, Data.Monoid.Monad, Data.Ring.Module.AutomaticDifferentiation, Data.Ring.Semi.Kleene, Data.Ring.Semi.Near.Trie, Data.Ring.Semi.Natural, Data.Monoid.Sugar, Data.Group.Sugar, Data.Ring.Boolean, Data.Ring.Semi.BitSet, Data.Ring.Semi.Ord, Data.Ring.Semi.Tropical, Data.Ring.ModularArithmetic</TD
hunk ./doc/html/monoids/doc-index.html 1137
-><TD CLASS="indexentry" COLSPAN="2"
+><TD CLASS="indexentry"
hunk ./doc/html/monoids/doc-index.html 1139
-></TR
-><TR CLASS="indexrow"
-><TD CLASS="indexannot"
->1 (Function)</TD
-><TD CLASS="indexlinks"
-><A HREF="Data-Set-Unboxed.html#v%3Ainsert"
->Data.Set.Unboxed</A
-></TD
-></TR
-><TR CLASS="indexrow"
-><TD CLASS="indexannot"
->2 (Function)</TD
hunk ./doc/html/monoids/doc-index.html 1145
-><TD CLASS="indexentry" COLSPAN="2"
+><TD CLASS="indexentry"
hunk ./doc/html/monoids/doc-index.html 1147
-></TR
-><TR CLASS="indexrow"
-><TD CLASS="indexannot"
->1 (Function)</TD
-><TD CLASS="indexlinks"
-><A HREF="Data-Set-Unboxed.html#v%3Aintersection"
->Data.Set.Unboxed</A
-></TD
-></TR
-><TR CLASS="indexrow"
-><TD CLASS="indexannot"
->2 (Function)</TD
hunk ./doc/html/monoids/doc-index.html 1169
-><TD CLASS="indexentry"
->isProperSubsetOf</TD
-><TD CLASS="indexlinks"
-><A HREF="Data-Set-Unboxed.html#v%3AisProperSubsetOf"
->Data.Set.Unboxed</A
-></TD
-></TR
-><TR CLASS="indexrow"
-><TD CLASS="indexentry"
->isSubsetOf</TD
-><TD CLASS="indexlinks"
-><A HREF="Data-Set-Unboxed.html#v%3AisSubsetOf"
->Data.Set.Unboxed</A
-></TD
-></TR
-><TR CLASS="indexrow"
hunk ./doc/html/monoids/doc-index.html 1178
->, Data.Generator.Compressive.LZ78, Data.Generator.Compressive.RLE, Data.Generator.Combinators, Data.Generator.Free</TD
+>, Data.Generator.Compressive.RLE, Data.Generator.Compressive.LZ78, Data.Generator.Combinators, Data.Generator.Free</TD
hunk ./doc/html/monoids/doc-index.html 1186
->, Data.Generator.Compressive.LZ78, Data.Generator.Compressive.RLE, Data.Generator.Combinators, Data.Generator.Free</TD
+>, Data.Generator.Compressive.RLE, Data.Generator.Compressive.LZ78, Data.Generator.Combinators, Data.Generator.Free</TD
hunk ./doc/html/monoids/doc-index.html 1212
->Data.Monoid.Reducer, Data.Monoid.Reducer.Char, Data.Monoid.Lexical.UTF8.Decoder, Data.Monoid.Reducer.With, Data.Monoid.Union, Data.Generator, Data.Monoid.Lexical.SourcePosition, Data.Monoid.Lexical.Words, Data.Monoid.Self, Data.Generator.Compressive.LZ78, Data.Monoid.FromString, Data.Generator.Compressive.RLE, Data.Monoid.Categorical, Data.Monoid.Additive, Data.Monoid.Additive.Sugar, Data.Monoid.Multiplicative, Data.Monoid.Multiplicative.Sugar, Data.Ring.Semi.Near, Data.Ring.Semi, Data.Ring.Semi.Kleene, Data.Ring.Semi.Ord, Data.Ring.Semi.Tropical, Data.Ring.Semi.Near.Trie, Data.Ring.Sugar, Data.Group, Data.Group.Combinators, Data.Group.Multiplicative, Data.Group.Sugar, Data.Group.Multiplicative.Sugar, Data.Ring, Data.Ring.Boolean, Data.Ring.FromNum, Data.Ring.ModularArithmetic, Data.Ring.Module, Data.Monoid.Applicative, Data.Monoid.Monad, Data.Generator.Combinators, Data.Generator.Free, Data.Ring.Semi.Natural, Data.Ring.Algebra, Data.Ring.Semi.BitSet, Data.Ring.Module.AutomaticDifferentiation, Data.Field, Data.Field.VectorSpace</TD
+>Data.Monoid.Reducer, Data.Monoid.Reducer.Char, Data.Monoid.Lexical.UTF8.Decoder, Data.Monoid.Reducer.With, Data.Monoid.Union, Data.Monoid.Categorical, Data.Monoid.Additive, Data.Generator, Data.Generator.Compressive.RLE, Data.Monoid.Lexical.SourcePosition, Data.Monoid.Lexical.Words, Data.Monoid.Self, Data.Generator.Compressive.LZ78, Data.Monoid.FromString, Data.Monoid.Multiplicative, Data.Group, Data.Group.Combinators, Data.Ring, Data.Ring.FromNum, Data.Ring.Module, Data.Monoid.Applicative, Data.Monoid.Monad, Data.Generator.Combinators, Data.Generator.Free, Data.Ring.Module.AutomaticDifferentiation, Data.Ring.Semi.Kleene, Data.Ring.Semi.Near.Trie, Data.Ring.Semi.Natural, Data.Monoid.Sugar, Data.Group.Sugar, Data.Ring.Boolean, Data.Ring.Semi.BitSet, Data.Ring.Semi.Ord, Data.Ring.Semi.Tropical, Data.Ring.ModularArithmetic</TD
hunk ./doc/html/monoids/doc-index.html 1218
->Data.Monoid.Reducer, Data.Monoid.Reducer.Char, Data.Monoid.Lexical.UTF8.Decoder, Data.Monoid.Reducer.With, Data.Monoid.Union, Data.Generator, Data.Monoid.Lexical.SourcePosition, Data.Monoid.Lexical.Words, Data.Monoid.Self, Data.Generator.Compressive.LZ78, Data.Monoid.FromString, Data.Generator.Compressive.RLE, Data.Monoid.Categorical, Data.Monoid.Additive, Data.Monoid.Additive.Sugar, Data.Monoid.Multiplicative, Data.Monoid.Multiplicative.Sugar, Data.Ring.Semi.Near, Data.Ring.Semi, Data.Ring.Semi.Kleene, Data.Ring.Semi.Ord, Data.Ring.Semi.Tropical, Data.Ring.Semi.Near.Trie, Data.Ring.Sugar, Data.Group, Data.Group.Combinators, Data.Group.Multiplicative, Data.Group.Sugar, Data.Group.Multiplicative.Sugar, Data.Ring, Data.Ring.Boolean, Data.Ring.FromNum, Data.Ring.ModularArithmetic, Data.Ring.Module, Data.Monoid.Applicative, Data.Monoid.Monad, Data.Generator.Combinators, Data.Generator.Free, Data.Ring.Semi.Natural, Data.Ring.Algebra, Data.Ring.Semi.BitSet, Data.Ring.Module.AutomaticDifferentiation, Data.Field, Data.Field.VectorSpace</TD
+>Data.Monoid.Reducer, Data.Monoid.Reducer.Char, Data.Monoid.Lexical.UTF8.Decoder, Data.Monoid.Reducer.With, Data.Monoid.Union, Data.Monoid.Categorical, Data.Monoid.Additive, Data.Generator, Data.Generator.Compressive.RLE, Data.Monoid.Lexical.SourcePosition, Data.Monoid.Lexical.Words, Data.Monoid.Self, Data.Generator.Compressive.LZ78, Data.Monoid.FromString, Data.Monoid.Multiplicative, Data.Group, Data.Group.Combinators, Data.Ring, Data.Ring.FromNum, Data.Ring.Module, Data.Monoid.Applicative, Data.Monoid.Monad, Data.Generator.Combinators, Data.Generator.Free, Data.Ring.Module.AutomaticDifferentiation, Data.Ring.Semi.Kleene, Data.Ring.Semi.Near.Trie, Data.Ring.Semi.Natural, Data.Monoid.Sugar, Data.Group.Sugar, Data.Ring.Boolean, Data.Ring.Semi.BitSet, Data.Ring.Semi.Ord, Data.Ring.Semi.Tropical, Data.Ring.ModularArithmetic</TD
hunk ./doc/html/monoids/doc-index.html 1226
->, Data.Monoid.Applicative, Data.Ring.Algebra, Data.Ring.Module.AutomaticDifferentiation, Data.Field.VectorSpace</TD
+>, Data.Monoid.Applicative, Data.Monoid.Monad, Data.Ring.Module.AutomaticDifferentiation</TD
hunk ./doc/html/monoids/doc-index.html 1232
-><A HREF="Data-Ring-Semi-Near.html#t%3ALeftSemiNearRing"
->Data.Ring.Semi.Near</A
->, Data.Ring.Semi, Data.Ring.Semi.Kleene, Data.Ring.Semi.Ord, Data.Ring.Semi.Tropical, Data.Ring.Semi.Near.Trie, Data.Ring.Sugar, Data.Ring, Data.Ring.Boolean, Data.Ring.FromNum, Data.Ring.ModularArithmetic, Data.Ring.Module, Data.Monoid.Applicative, Data.Monoid.Monad, Data.Ring.Semi.Natural, Data.Ring.Algebra, Data.Ring.Semi.BitSet, Data.Ring.Module.AutomaticDifferentiation, Data.Field, Data.Field.VectorSpace</TD
+><A HREF="Data-Ring.html#t%3ALeftSemiNearRing"
+>Data.Ring</A
+>, Data.Ring.FromNum, Data.Ring.Module, Data.Monoid.Applicative, Data.Monoid.Monad, Data.Ring.Module.AutomaticDifferentiation, Data.Ring.Semi.Kleene, Data.Ring.Semi.Near.Trie, Data.Ring.Semi.Natural, Data.Monoid.Sugar, Data.Group.Sugar, Data.Ring.Boolean, Data.Ring.Semi.BitSet, Data.Ring.Semi.Ord, Data.Ring.Semi.Tropical, Data.Ring.ModularArithmetic</TD
hunk ./doc/html/monoids/doc-index.html 1282
->, Data.Monoid.Multiplicative.Sugar, Data.Ring.Semi.Near, Data.Ring.Semi, Data.Ring.Semi.Kleene, Data.Ring.Semi.Ord, Data.Ring.Semi.Tropical, Data.Ring.Semi.Near.Trie, Data.Ring.Sugar, Data.Group.Multiplicative, Data.Group.Multiplicative.Sugar, Data.Ring, Data.Ring.Boolean, Data.Ring.FromNum, Data.Ring.ModularArithmetic, Data.Ring.Module, Data.Monoid.Applicative, Data.Monoid.Monad, Data.Ring.Semi.Natural, Data.Ring.Algebra, Data.Ring.Semi.BitSet, Data.Ring.Module.AutomaticDifferentiation, Data.Field, Data.Field.VectorSpace</TD
+>, Data.Group, Data.Group.Combinators, Data.Ring, Data.Ring.FromNum, Data.Ring.Module, Data.Monoid.Applicative, Data.Monoid.Monad, Data.Ring.Module.AutomaticDifferentiation, Data.Ring.Semi.Kleene, Data.Ring.Semi.Near.Trie, Data.Ring.Semi.Natural, Data.Monoid.Sugar, Data.Group.Sugar, Data.Ring.Boolean, Data.Ring.Semi.BitSet, Data.Ring.Semi.Ord, Data.Ring.Semi.Tropical, Data.Ring.ModularArithmetic</TD
hunk ./doc/html/monoids/doc-index.html 1290
->, Data.Monoid.Multiplicative.Sugar, Data.Ring.Semi.Near, Data.Ring.Semi, Data.Ring.Semi.Kleene, Data.Ring.Semi.Ord, Data.Ring.Semi.Tropical, Data.Ring.Semi.Near.Trie, Data.Ring.Sugar, Data.Group.Multiplicative, Data.Group.Multiplicative.Sugar, Data.Ring, Data.Ring.Boolean, Data.Ring.FromNum, Data.Ring.ModularArithmetic, Data.Ring.Module, Data.Monoid.Applicative, Data.Monoid.Monad, Data.Ring.Semi.Natural, Data.Ring.Algebra, Data.Ring.Semi.BitSet, Data.Ring.Module.AutomaticDifferentiation, Data.Field, Data.Field.VectorSpace</TD
+>, Data.Group, Data.Group.Combinators, Data.Ring, Data.Ring.FromNum, Data.Ring.Module, Data.Monoid.Applicative, Data.Monoid.Monad, Data.Ring.Module.AutomaticDifferentiation, Data.Ring.Semi.Kleene, Data.Ring.Semi.Near.Trie, Data.Ring.Semi.Natural, Data.Monoid.Sugar, Data.Group.Sugar, Data.Ring.Boolean, Data.Ring.Semi.BitSet, Data.Ring.Semi.Ord, Data.Ring.Semi.Tropical, Data.Ring.ModularArithmetic</TD
hunk ./doc/html/monoids/doc-index.html 1302
->map</TD
+>mabs</TD
hunk ./doc/html/monoids/doc-index.html 1304
-><A HREF="Data-Set-Unboxed.html#v%3Amap"
->Data.Set.Unboxed</A
-></TD
+><A HREF="Data-Ring-Module.html#v%3Amabs"
+>Data.Ring.Module</A
+>, Data.Monoid.Applicative, Data.Monoid.Monad, Data.Ring.Module.AutomaticDifferentiation</TD
hunk ./doc/html/monoids/doc-index.html 1314
->, Data.Generator.Compressive.LZ78, Data.Generator.Compressive.RLE, Data.Generator.Combinators, Data.Generator.Free</TD
-></TR
-><TR CLASS="indexrow"
-><TD CLASS="indexentry"
->mapMonotonic</TD
-><TD CLASS="indexlinks"
-><A HREF="Data-Set-Unboxed.html#v%3AmapMonotonic"
->Data.Set.Unboxed</A
-></TD
+>, Data.Generator.Compressive.RLE, Data.Generator.Compressive.LZ78, Data.Generator.Combinators, Data.Generator.Free</TD
hunk ./doc/html/monoids/doc-index.html 1328
->Data.Monoid.Reducer, Data.Monoid.Reducer.Char, Data.Monoid.Lexical.UTF8.Decoder, Data.Monoid.Reducer.With, Data.Monoid.Union, Data.Generator, Data.Monoid.Lexical.SourcePosition, Data.Monoid.Lexical.Words, Data.Monoid.Self, Data.Generator.Compressive.LZ78, Data.Monoid.FromString, Data.Generator.Compressive.RLE, Data.Monoid.Categorical, Data.Monoid.Additive, Data.Monoid.Additive.Sugar, Data.Monoid.Multiplicative, Data.Monoid.Multiplicative.Sugar, Data.Ring.Semi.Near, Data.Ring.Semi, Data.Monoid.Ord, Data.Ring.Semi.Kleene, Data.Ring.Semi.Ord, Data.Ring.Semi.Tropical, Data.Ring.Semi.Near.Trie, Data.Ring.Sugar, Data.Group, Data.Group.Combinators, Data.Group.Multiplicative, Data.Group.Sugar, Data.Group.Multiplicative.Sugar, Data.Ring, Data.Ring.Boolean, Data.Ring.FromNum, Data.Ring.ModularArithmetic, Data.Ring.Module, Data.Monoid.Applicative, Data.Monoid.Monad, Data.Generator.Combinators, Data.Generator.Free, Data.Ring.Semi.Natural, Data.Ring.Algebra, Data.Ring.Semi.BitSet, Data.Ring.Module.AutomaticDifferentiation, Data.Field, Data.Field.VectorSpace</TD
+>Data.Monoid.Reducer, Data.Monoid.Reducer.Char, Data.Monoid.Lexical.UTF8.Decoder, Data.Monoid.Reducer.With, Data.Monoid.Union, Data.Monoid.Categorical, Data.Monoid.Additive, Data.Generator, Data.Generator.Compressive.RLE, Data.Monoid.Lexical.SourcePosition, Data.Monoid.Lexical.Words, Data.Monoid.Self, Data.Generator.Compressive.LZ78, Data.Monoid.FromString, Data.Monoid.Multiplicative, Data.Group, Data.Group.Combinators, Data.Ring, Data.Monoid.Ord, Data.Ring.FromNum, Data.Ring.Module, Data.Monoid.Applicative, Data.Monoid.Monad, Data.Generator.Combinators, Data.Generator.Free, Data.Ring.Module.AutomaticDifferentiation, Data.Ring.Semi.Kleene, Data.Ring.Semi.Near.Trie, Data.Ring.Semi.Natural, Data.Monoid.Sugar, Data.Group.Sugar, Data.Ring.Boolean, Data.Ring.Semi.BitSet, Data.Ring.Semi.Ord, Data.Ring.Semi.Tropical, Data.Ring.ModularArithmetic</TD
hunk ./doc/html/monoids/doc-index.html 1336
->, Data.Generator.Compressive.LZ78, Data.Generator.Compressive.RLE, Data.Generator.Combinators, Data.Generator.Free</TD
+>, Data.Generator.Compressive.RLE, Data.Generator.Compressive.LZ78, Data.Generator.Combinators, Data.Generator.Free</TD
hunk ./doc/html/monoids/doc-index.html 1344
->, Data.Generator.Compressive.LZ78, Data.Generator.Compressive.RLE, Data.Generator.Combinators, Data.Generator.Free</TD
+>, Data.Generator.Compressive.RLE, Data.Generator.Compressive.LZ78, Data.Generator.Combinators, Data.Generator.Free</TD
hunk ./doc/html/monoids/doc-index.html 1352
->, Data.Generator.Compressive.LZ78, Data.Generator.Compressive.RLE, Data.Generator.Combinators, Data.Generator.Free</TD
+>, Data.Generator.Compressive.RLE, Data.Generator.Compressive.LZ78, Data.Generator.Combinators, Data.Generator.Free</TD
hunk ./doc/html/monoids/doc-index.html 1404
->maxView</TD
-><TD CLASS="indexlinks"
-><A HREF="Data-Set-Unboxed.html#v%3AmaxView"
->Data.Set.Unboxed</A
-></TD
-></TR
-><TR CLASS="indexrow"
-><TD CLASS="indexentry"
hunk ./doc/html/monoids/doc-index.html 1406
->Data.Monoid.Reducer, Data.Monoid.Reducer.Char, Data.Monoid.Lexical.UTF8.Decoder, Data.Monoid.Reducer.With, Data.Monoid.Union, Data.Generator, Data.Monoid.Lexical.SourcePosition, Data.Monoid.Lexical.Words, Data.Monoid.Self, Data.Generator.Compressive.LZ78, Data.Monoid.FromString, Data.Generator.Compressive.RLE, Data.Monoid.Categorical, Data.Monoid.Additive, Data.Monoid.Additive.Sugar, Data.Monoid.Multiplicative, Data.Monoid.Multiplicative.Sugar, Data.Ring.Semi.Near, Data.Ring.Semi, Data.Ring.Semi.Kleene, Data.Ring.Semi.Ord, Data.Ring.Semi.Tropical, Data.Ring.Semi.Near.Trie, Data.Ring.Sugar, Data.Group, Data.Group.Combinators, Data.Group.Multiplicative, Data.Group.Sugar, Data.Group.Multiplicative.Sugar, Data.Ring, Data.Ring.Boolean, Data.Ring.FromNum, Data.Ring.ModularArithmetic, Data.Ring.Module, Data.Monoid.Applicative, Data.Monoid.Monad, Data.Generator.Combinators, Data.Generator.Free, Data.Ring.Semi.Natural, Data.Ring.Algebra, Data.Ring.Semi.BitSet, Data.Ring.Module.AutomaticDifferentiation, Data.Field, Data.Field.VectorSpace</TD
+>Data.Monoid.Reducer, Data.Monoid.Reducer.Char, Data.Monoid.Lexical.UTF8.Decoder, Data.Monoid.Reducer.With, Data.Monoid.Union, Data.Monoid.Categorical, Data.Monoid.Additive, Data.Generator, Data.Generator.Compressive.RLE, Data.Monoid.Lexical.SourcePosition, Data.Monoid.Lexical.Words, Data.Monoid.Self, Data.Generator.Compressive.LZ78, Data.Monoid.FromString, Data.Monoid.Multiplicative, Data.Group, Data.Group.Combinators, Data.Ring, Data.Ring.FromNum, Data.Ring.Module, Data.Monoid.Applicative, Data.Monoid.Monad, Data.Generator.Combinators, Data.Generator.Free, Data.Ring.Module.AutomaticDifferentiation, Data.Ring.Semi.Kleene, Data.Ring.Semi.Near.Trie, Data.Ring.Semi.Natural, Data.Monoid.Sugar, Data.Group.Sugar, Data.Ring.Boolean, Data.Ring.Semi.BitSet, Data.Ring.Semi.Ord, Data.Ring.Semi.Tropical, Data.Ring.ModularArithmetic</TD
hunk ./doc/html/monoids/doc-index.html 1409
-><TD CLASS="indexentry" COLSPAN="2"
+><TD CLASS="indexentry"
hunk ./doc/html/monoids/doc-index.html 1411
-></TR
-><TR CLASS="indexrow"
-><TD CLASS="indexannot"
->1 (Function)</TD
-><TD CLASS="indexlinks"
-><A HREF="Data-Set-Unboxed.html#v%3Amember"
->Data.Set.Unboxed</A
-></TD
-></TR
-><TR CLASS="indexrow"
-><TD CLASS="indexannot"
->2 (Function)</TD
hunk ./doc/html/monoids/doc-index.html 1420
->Data.Monoid.Reducer, Data.Monoid.Reducer.Char, Data.Monoid.Lexical.UTF8.Decoder, Data.Monoid.Reducer.With, Data.Monoid.Union, Data.Generator, Data.Monoid.Lexical.SourcePosition, Data.Monoid.Lexical.Words, Data.Monoid.Self, Data.Generator.Compressive.LZ78, Data.Monoid.FromString, Data.Generator.Compressive.RLE, Data.Monoid.Categorical, Data.Monoid.Additive, Data.Monoid.Additive.Sugar, Data.Monoid.Multiplicative, Data.Monoid.Multiplicative.Sugar, Data.Ring.Semi.Near, Data.Ring.Semi, Data.Monoid.Ord, Data.Ring.Semi.Kleene, Data.Ring.Semi.Ord, Data.Ring.Semi.Tropical, Data.Ring.Semi.Near.Trie, Data.Ring.Sugar, Data.Group, Data.Group.Combinators, Data.Group.Multiplicative, Data.Group.Sugar, Data.Group.Multiplicative.Sugar, Data.Ring, Data.Ring.Boolean, Data.Ring.FromNum, Data.Ring.ModularArithmetic, Data.Ring.Module, Data.Monoid.Applicative, Data.Monoid.Monad, Data.Generator.Combinators, Data.Generator.Free, Data.Ring.Semi.Natural, Data.Ring.Algebra, Data.Ring.Semi.BitSet, Data.Ring.Module.AutomaticDifferentiation, Data.Field, Data.Field.VectorSpace</TD
+>Data.Monoid.Reducer, Data.Monoid.Reducer.Char, Data.Monoid.Lexical.UTF8.Decoder, Data.Monoid.Reducer.With, Data.Monoid.Union, Data.Monoid.Categorical, Data.Monoid.Additive, Data.Generator, Data.Generator.Compressive.RLE, Data.Monoid.Lexical.SourcePosition, Data.Monoid.Lexical.Words, Data.Monoid.Self, Data.Generator.Compressive.LZ78, Data.Monoid.FromString, Data.Monoid.Multiplicative, Data.Group, Data.Group.Combinators, Data.Ring, Data.Monoid.Ord, Data.Ring.FromNum, Data.Ring.Module, Data.Monoid.Applicative, Data.Monoid.Monad, Data.Generator.Combinators, Data.Generator.Free, Data.Ring.Module.AutomaticDifferentiation, Data.Ring.Semi.Kleene, Data.Ring.Semi.Near.Trie, Data.Ring.Semi.Natural, Data.Monoid.Sugar, Data.Group.Sugar, Data.Ring.Boolean, Data.Ring.Semi.BitSet, Data.Ring.Semi.Ord, Data.Ring.Semi.Tropical, Data.Ring.ModularArithmetic</TD
hunk ./doc/html/monoids/doc-index.html 1484
->, Data.Group.Combinators, Data.Group.Multiplicative, Data.Group.Sugar, Data.Group.Multiplicative.Sugar, Data.Ring, Data.Ring.Boolean, Data.Ring.FromNum, Data.Ring.ModularArithmetic, Data.Ring.Module, Data.Monoid.Applicative, Data.Ring.Algebra, Data.Ring.Module.AutomaticDifferentiation, Data.Field, Data.Field.VectorSpace</TD
-></TR
-><TR CLASS="indexrow"
-><TD CLASS="indexentry"
->minView</TD
-><TD CLASS="indexlinks"
-><A HREF="Data-Set-Unboxed.html#v%3AminView"
->Data.Set.Unboxed</A
-></TD
+>, Data.Group.Combinators, Data.Ring, Data.Ring.FromNum, Data.Ring.Module, Data.Monoid.Applicative, Data.Monoid.Monad, Data.Ring.Module.AutomaticDifferentiation, Data.Ring.Semi.Kleene, Data.Ring.Semi.Near.Trie, Data.Ring.Semi.Natural, Data.Monoid.Sugar, Data.Group.Sugar, Data.Ring.Boolean, Data.Ring.Semi.BitSet, Data.Ring.Semi.Ord, Data.Ring.Semi.Tropical, Data.Ring.ModularArithmetic</TD
hunk ./doc/html/monoids/doc-index.html 1508
->, Data.Monoid.Applicative, Data.Ring.Algebra, Data.Ring.Module.AutomaticDifferentiation, Data.Field.VectorSpace</TD
+>, Data.Monoid.Applicative, Data.Monoid.Monad, Data.Ring.Module.AutomaticDifferentiation</TD
hunk ./doc/html/monoids/doc-index.html 1562
->Data.Monoid.Reducer, Data.Monoid.Reducer.Char, Data.Monoid.Lexical.UTF8.Decoder, Data.Monoid.Reducer.With, Data.Monoid.Union, Data.Generator, Data.Monoid.Lexical.SourcePosition, Data.Monoid.Lexical.Words, Data.Monoid.Self, Data.Generator.Compressive.LZ78, Data.Monoid.FromString, Data.Generator.Compressive.RLE, Data.Monoid.Categorical, Data.Monoid.Additive, Data.Monoid.Additive.Sugar, Data.Monoid.Multiplicative, Data.Monoid.Multiplicative.Sugar, Data.Ring.Semi.Near, Data.Ring.Semi, Data.Monoid.Ord, Data.Ring.Semi.Kleene, Data.Ring.Semi.Ord, Data.Ring.Semi.Tropical, Data.Ring.Semi.Near.Trie, Data.Ring.Sugar, Data.Group, Data.Group.Combinators, Data.Group.Multiplicative, Data.Group.Sugar, Data.Group.Multiplicative.Sugar, Data.Ring, Data.Ring.Boolean, Data.Ring.FromNum, Data.Ring.ModularArithmetic, Data.Ring.Module, Data.Monoid.Applicative, Data.Monoid.Monad, Data.Generator.Combinators, Data.Generator.Free, Data.Ring.Semi.Natural, Data.Ring.Algebra, Data.Ring.Semi.BitSet, Data.Ring.Module.AutomaticDifferentiation, Data.Field, Data.Field.VectorSpace</TD
+>Data.Monoid.Reducer, Data.Monoid.Reducer.Char, Data.Monoid.Lexical.UTF8.Decoder, Data.Monoid.Reducer.With, Data.Monoid.Union, Data.Monoid.Categorical, Data.Monoid.Additive, Data.Generator, Data.Generator.Compressive.RLE, Data.Monoid.Lexical.SourcePosition, Data.Monoid.Lexical.Words, Data.Monoid.Self, Data.Generator.Compressive.LZ78, Data.Monoid.FromString, Data.Monoid.Multiplicative, Data.Group, Data.Group.Combinators, Data.Ring, Data.Monoid.Ord, Data.Ring.FromNum, Data.Ring.Module, Data.Monoid.Applicative, Data.Monoid.Monad, Data.Generator.Combinators, Data.Generator.Free, Data.Ring.Module.AutomaticDifferentiation, Data.Ring.Semi.Kleene, Data.Ring.Semi.Near.Trie, Data.Ring.Semi.Natural, Data.Monoid.Sugar, Data.Group.Sugar, Data.Ring.Boolean, Data.Ring.Semi.BitSet, Data.Ring.Semi.Ord, Data.Ring.Semi.Tropical, Data.Ring.ModularArithmetic</TD
hunk ./doc/html/monoids/doc-index.html 1586
->, Data.Monoid.Multiplicative.Sugar, Data.Ring.Semi.Near, Data.Ring.Semi, Data.Ring.Semi.Kleene, Data.Ring.Semi.Ord, Data.Ring.Semi.Tropical, Data.Ring.Semi.Near.Trie, Data.Ring.Sugar, Data.Group.Multiplicative, Data.Group.Multiplicative.Sugar, Data.Ring, Data.Ring.Boolean, Data.Ring.FromNum, Data.Ring.ModularArithmetic, Data.Ring.Module, Data.Monoid.Applicative, Data.Monoid.Monad, Data.Ring.Semi.Natural, Data.Ring.Algebra, Data.Ring.Semi.BitSet, Data.Ring.Module.AutomaticDifferentiation, Data.Field, Data.Field.VectorSpace</TD
+>, Data.Group, Data.Group.Combinators, Data.Ring, Data.Ring.FromNum, Data.Ring.Module, Data.Monoid.Applicative, Data.Monoid.Monad, Data.Ring.Module.AutomaticDifferentiation, Data.Ring.Semi.Kleene, Data.Ring.Semi.Near.Trie, Data.Ring.Semi.Natural, Data.Monoid.Sugar, Data.Group.Sugar, Data.Ring.Boolean, Data.Ring.Semi.BitSet, Data.Ring.Semi.Ord, Data.Ring.Semi.Tropical, Data.Ring.ModularArithmetic</TD
hunk ./doc/html/monoids/doc-index.html 1592
-><A HREF="Data-Group-Multiplicative.html#t%3AMultiplicativeGroup"
->Data.Group.Multiplicative</A
->, Data.Group.Multiplicative.Sugar, Data.Field, Data.Field.VectorSpace</TD
+><A HREF="Data-Group.html#t%3AMultiplicativeGroup"
+>Data.Group</A
+>, Data.Group.Combinators, Data.Ring, Data.Ring.FromNum, Data.Ring.Module, Data.Monoid.Applicative, Data.Monoid.Monad, Data.Ring.Module.AutomaticDifferentiation, Data.Ring.Semi.Kleene, Data.Ring.Semi.Near.Trie, Data.Ring.Semi.Natural, Data.Monoid.Sugar, Data.Group.Sugar, Data.Ring.Boolean, Data.Ring.Semi.BitSet, Data.Ring.Semi.Ord, Data.Ring.Semi.Tropical, Data.Ring.ModularArithmetic</TD
hunk ./doc/html/monoids/doc-index.html 1602
-></TD
-></TR
-><TR CLASS="indexrow"
-><TD CLASS="indexentry"
->natural</TD
-><TD CLASS="indexlinks"
-><A HREF="Data-Ring-Semi-Natural.html#v%3Anatural"
->Data.Ring.Semi.Natural</A
-></TD
+>, Data.Monoid.Sugar, Data.Group.Sugar</TD
hunk ./doc/html/monoids/doc-index.html 1610
->, Data.Group.Multiplicative.Sugar</TD
+></TD
hunk ./doc/html/monoids/doc-index.html 1622
->notElem</TD
+>Normed</TD
hunk ./doc/html/monoids/doc-index.html 1624
-><A HREF="Data-Generator-Combinators.html#v%3AnotElem"
->Data.Generator.Combinators</A
-></TD
+><A HREF="Data-Ring-Module.html#t%3ANormed"
+>Data.Ring.Module</A
+>, Data.Monoid.Applicative, Data.Monoid.Monad, Data.Ring.Module.AutomaticDifferentiation</TD
hunk ./doc/html/monoids/doc-index.html 1630
->notMember</TD
+>notElem</TD
hunk ./doc/html/monoids/doc-index.html 1632
-><A HREF="Data-Set-Unboxed.html#v%3AnotMember"
->Data.Set.Unboxed</A
+><A HREF="Data-Generator-Combinators.html#v%3AnotElem"
+>Data.Generator.Combinators</A
hunk ./doc/html/monoids/doc-index.html 1652
-><A HREF="Data-Set-Unboxed.html#v%3Anull"
->Data.Set.Unboxed</A
-></TD
-></TR
-><TR CLASS="indexrow"
-><TD CLASS="indexannot"
->3 (Function)</TD
-><TD CLASS="indexlinks"
hunk ./doc/html/monoids/doc-index.html 1662
->, Data.Monoid.Multiplicative.Sugar, Data.Ring.Semi.Near, Data.Ring.Semi, Data.Ring.Semi.Kleene, Data.Ring.Semi.Ord, Data.Ring.Semi.Tropical, Data.Ring.Semi.Near.Trie, Data.Ring.Sugar, Data.Group.Multiplicative, Data.Group.Multiplicative.Sugar, Data.Ring, Data.Ring.Boolean, Data.Ring.FromNum, Data.Ring.ModularArithmetic, Data.Ring.Module, Data.Monoid.Applicative, Data.Monoid.Monad, Data.Ring.Semi.Natural, Data.Ring.Algebra, Data.Ring.Semi.BitSet, Data.Ring.Module.AutomaticDifferentiation, Data.Field, Data.Field.VectorSpace</TD
+>, Data.Group, Data.Group.Combinators, Data.Ring, Data.Ring.FromNum, Data.Ring.Module, Data.Monoid.Applicative, Data.Monoid.Monad, Data.Ring.Module.AutomaticDifferentiation, Data.Ring.Semi.Kleene, Data.Ring.Semi.Near.Trie, Data.Ring.Semi.Natural, Data.Monoid.Sugar, Data.Group.Sugar, Data.Ring.Boolean, Data.Ring.Semi.BitSet, Data.Ring.Semi.Ord, Data.Ring.Semi.Tropical, Data.Ring.ModularArithmetic</TD
hunk ./doc/html/monoids/doc-index.html 1696
-><A HREF="Data-Group-Multiplicative.html#v%3Aover"
->Data.Group.Multiplicative</A
->, Data.Group.Multiplicative.Sugar, Data.Field, Data.Field.VectorSpace</TD
-></TR
-><TR CLASS="indexrow"
-><TD CLASS="indexentry"
->partition</TD
-><TD CLASS="indexlinks"
-><A HREF="Data-Set-Unboxed.html#v%3Apartition"
->Data.Set.Unboxed</A
-></TD
+><A HREF="Data-Group.html#v%3Aover"
+>Data.Group</A
+>, Data.Group.Combinators, Data.Ring, Data.Ring.FromNum, Data.Ring.Module, Data.Monoid.Applicative, Data.Monoid.Monad, Data.Ring.Module.AutomaticDifferentiation, Data.Ring.Semi.Kleene, Data.Ring.Semi.Near.Trie, Data.Ring.Semi.Natural, Data.Monoid.Sugar, Data.Group.Sugar, Data.Ring.Boolean, Data.Ring.Semi.BitSet, Data.Ring.Semi.Ord, Data.Ring.Semi.Tropical, Data.Ring.ModularArithmetic</TD
hunk ./doc/html/monoids/doc-index.html 1706
->, Data.Monoid.Additive.Sugar, Data.Monoid.Multiplicative, Data.Monoid.Multiplicative.Sugar, Data.Ring.Semi.Near, Data.Ring.Semi, Data.Ring.Semi.Kleene, Data.Ring.Semi.Ord, Data.Ring.Semi.Tropical, Data.Ring.Semi.Near.Trie, Data.Ring.Sugar, Data.Group, Data.Group.Combinators, Data.Group.Multiplicative, Data.Group.Sugar, Data.Group.Multiplicative.Sugar, Data.Ring, Data.Ring.Boolean, Data.Ring.FromNum, Data.Ring.ModularArithmetic, Data.Ring.Module, Data.Monoid.Applicative, Data.Monoid.Monad, Data.Ring.Semi.Natural, Data.Ring.Algebra, Data.Ring.Semi.BitSet, Data.Ring.Module.AutomaticDifferentiation, Data.Field, Data.Field.VectorSpace</TD
+>, Data.Monoid.Multiplicative, Data.Group, Data.Group.Combinators, Data.Ring, Data.Ring.FromNum, Data.Ring.Module, Data.Monoid.Applicative, Data.Monoid.Monad, Data.Ring.Module.AutomaticDifferentiation, Data.Ring.Semi.Kleene, Data.Ring.Semi.Near.Trie, Data.Ring.Semi.Natural, Data.Monoid.Sugar, Data.Group.Sugar, Data.Ring.Boolean, Data.Ring.Semi.BitSet, Data.Ring.Semi.Ord, Data.Ring.Semi.Tropical, Data.Ring.ModularArithmetic</TD
hunk ./doc/html/monoids/doc-index.html 1744
->Data.Monoid.Reducer, Data.Monoid.Reducer.Char, Data.Monoid.Lexical.UTF8.Decoder, Data.Monoid.Reducer.With, Data.Monoid.Union, Data.Generator, Data.Monoid.Lexical.SourcePosition, Data.Monoid.Lexical.Words, Data.Monoid.Self, Data.Generator.Compressive.LZ78, Data.Monoid.FromString, Data.Generator.Compressive.RLE, Data.Monoid.Categorical, Data.Monoid.Additive, Data.Monoid.Additive.Sugar, Data.Monoid.Multiplicative, Data.Monoid.Multiplicative.Sugar, Data.Ring.Semi.Near, Data.Ring.Semi, Data.Ring.Semi.Kleene, Data.Ring.Semi.Ord, Data.Ring.Semi.Tropical, Data.Ring.Semi.Near.Trie, Data.Ring.Sugar, Data.Group, Data.Group.Combinators, Data.Group.Multiplicative, Data.Group.Sugar, Data.Group.Multiplicative.Sugar, Data.Ring, Data.Ring.Boolean, Data.Ring.FromNum, Data.Ring.ModularArithmetic, Data.Ring.Module, Data.Monoid.Applicative, Data.Monoid.Monad, Data.Generator.Combinators, Data.Generator.Free, Data.Ring.Semi.Natural, Data.Ring.Algebra, Data.Ring.Semi.BitSet, Data.Ring.Module.AutomaticDifferentiation, Data.Field, Data.Field.VectorSpace</TD
+>Data.Monoid.Reducer, Data.Monoid.Reducer.Char, Data.Monoid.Lexical.UTF8.Decoder, Data.Monoid.Reducer.With, Data.Monoid.Union, Data.Monoid.Categorical, Data.Monoid.Additive, Data.Generator, Data.Generator.Compressive.RLE, Data.Monoid.Lexical.SourcePosition, Data.Monoid.Lexical.Words, Data.Monoid.Self, Data.Generator.Compressive.LZ78, Data.Monoid.FromString, Data.Monoid.Multiplicative, Data.Group, Data.Group.Combinators, Data.Ring, Data.Ring.FromNum, Data.Ring.Module, Data.Monoid.Applicative, Data.Monoid.Monad, Data.Generator.Combinators, Data.Generator.Free, Data.Ring.Module.AutomaticDifferentiation, Data.Ring.Semi.Kleene, Data.Ring.Semi.Near.Trie, Data.Ring.Semi.Natural, Data.Monoid.Sugar, Data.Group.Sugar, Data.Ring.Boolean, Data.Ring.Semi.BitSet, Data.Ring.Semi.Ord, Data.Ring.Semi.Tropical, Data.Ring.ModularArithmetic</TD
hunk ./doc/html/monoids/doc-index.html 1750
->Data.Monoid.Reducer, Data.Monoid.Reducer.Char, Data.Monoid.Lexical.UTF8.Decoder, Data.Monoid.Reducer.With, Data.Monoid.Union, Data.Generator, Data.Monoid.Lexical.SourcePosition, Data.Monoid.Lexical.Words, Data.Monoid.Self, Data.Generator.Compressive.LZ78, Data.Monoid.FromString, Data.Generator.Compressive.RLE, Data.Monoid.Categorical, Data.Monoid.Additive, Data.Monoid.Additive.Sugar, Data.Monoid.Multiplicative, Data.Monoid.Multiplicative.Sugar, Data.Ring.Semi.Near, Data.Ring.Semi, Data.Ring.Semi.Kleene, Data.Ring.Semi.Ord, Data.Ring.Semi.Tropical, Data.Ring.Semi.Near.Trie, Data.Ring.Sugar, Data.Group, Data.Group.Combinators, Data.Group.Multiplicative, Data.Group.Sugar, Data.Group.Multiplicative.Sugar, Data.Ring, Data.Ring.Boolean, Data.Ring.FromNum, Data.Ring.ModularArithmetic, Data.Ring.Module, Data.Monoid.Applicative, Data.Monoid.Monad, Data.Generator.Combinators, Data.Generator.Free, Data.Ring.Semi.Natural, Data.Ring.Algebra, Data.Ring.Semi.BitSet, Data.Ring.Module.AutomaticDifferentiation, Data.Field, Data.Field.VectorSpace</TD
+>Data.Monoid.Reducer, Data.Monoid.Reducer.Char, Data.Monoid.Lexical.UTF8.Decoder, Data.Monoid.Reducer.With, Data.Monoid.Union, Data.Monoid.Categorical, Data.Monoid.Additive, Data.Generator, Data.Generator.Compressive.RLE, Data.Monoid.Lexical.SourcePosition, Data.Monoid.Lexical.Words, Data.Monoid.Self, Data.Generator.Compressive.LZ78, Data.Monoid.FromString, Data.Monoid.Multiplicative, Data.Group, Data.Group.Combinators, Data.Ring, Data.Ring.FromNum, Data.Ring.Module, Data.Monoid.Applicative, Data.Monoid.Monad, Data.Generator.Combinators, Data.Generator.Free, Data.Ring.Module.AutomaticDifferentiation, Data.Ring.Semi.Kleene, Data.Ring.Semi.Near.Trie, Data.Ring.Semi.Natural, Data.Monoid.Sugar, Data.Group.Sugar, Data.Ring.Boolean, Data.Ring.Semi.BitSet, Data.Ring.Semi.Ord, Data.Ring.Semi.Tropical, Data.Ring.ModularArithmetic</TD
hunk ./doc/html/monoids/doc-index.html 1768
-><A HREF="Data-Generator-Compressive-LZ78.html#v%3Aprop_decode_encode"
->Data.Generator.Compressive.LZ78</A
+><A HREF="Data-Generator-Compressive-RLE.html#v%3Aprop_decode_encode"
+>Data.Generator.Compressive.RLE</A
hunk ./doc/html/monoids/doc-index.html 1776
-><A HREF="Data-Generator-Compressive-RLE.html#v%3Aprop_decode_encode"
->Data.Generator.Compressive.RLE</A
+><A HREF="Data-Generator-Compressive-LZ78.html#v%3Aprop_decode_encode"
+>Data.Generator.Compressive.LZ78</A
hunk ./doc/html/monoids/doc-index.html 1822
->, Data.Monoid.Reducer.Char, Data.Monoid.Lexical.UTF8.Decoder, Data.Monoid.Reducer.With, Data.Monoid.Union, Data.Generator, Data.Monoid.Lexical.SourcePosition, Data.Monoid.Lexical.Words, Data.Monoid.Self, Data.Generator.Compressive.LZ78, Data.Monoid.FromString, Data.Generator.Compressive.RLE, Data.Monoid.Categorical, Data.Monoid.Applicative, Data.Monoid.Monad, Data.Generator.Combinators, Data.Generator.Free, Data.Ring.Semi.BitSet</TD
-></TR
-><TR CLASS="indexrow"
-><TD CLASS="indexentry"
->RAlgebra</TD
-><TD CLASS="indexlinks"
-><A HREF="Data-Ring-Algebra.html#t%3ARAlgebra"
->Data.Ring.Algebra</A
-></TD
+>, Data.Monoid.Reducer.Char, Data.Monoid.Lexical.UTF8.Decoder, Data.Monoid.Reducer.With, Data.Monoid.Union, Data.Monoid.Categorical, Data.Generator, Data.Generator.Compressive.RLE, Data.Monoid.Lexical.SourcePosition, Data.Monoid.Lexical.Words, Data.Monoid.Self, Data.Generator.Compressive.LZ78, Data.Monoid.FromString, Data.Monoid.Applicative, Data.Monoid.Monad, Data.Generator.Combinators, Data.Generator.Free, Data.Ring.Semi.BitSet, Data.Ring.Semi.Tropical</TD
hunk ./doc/html/monoids/doc-index.html 1828
-><A HREF="Data-Group-Multiplicative-Sugar.html#v%3Arecip"
->Data.Group.Multiplicative.Sugar</A
+><A HREF="Data-Group-Sugar.html#v%3Arecip"
+>Data.Group.Sugar</A
hunk ./doc/html/monoids/doc-index.html 1838
->, Data.Generator.Compressive.LZ78, Data.Generator.Compressive.RLE, Data.Generator.Combinators, Data.Generator.Free</TD
+>, Data.Generator.Compressive.RLE, Data.Generator.Compressive.LZ78, Data.Generator.Combinators, Data.Generator.Free</TD
hunk ./doc/html/monoids/doc-index.html 1846
->, Data.Monoid.Reducer.Char, Data.Monoid.Lexical.UTF8.Decoder, Data.Monoid.Reducer.With, Data.Monoid.Union, Data.Generator, Data.Monoid.Lexical.SourcePosition, Data.Monoid.Lexical.Words, Data.Monoid.Self, Data.Generator.Compressive.LZ78, Data.Monoid.FromString, Data.Generator.Compressive.RLE, Data.Monoid.Categorical, Data.Monoid.Applicative, Data.Monoid.Monad, Data.Generator.Combinators, Data.Generator.Free, Data.Ring.Semi.BitSet</TD
+>, Data.Monoid.Reducer.Char, Data.Monoid.Lexical.UTF8.Decoder, Data.Monoid.Reducer.With, Data.Monoid.Union, Data.Monoid.Categorical, Data.Generator, Data.Generator.Compressive.RLE, Data.Monoid.Lexical.SourcePosition, Data.Monoid.Lexical.Words, Data.Monoid.Self, Data.Generator.Compressive.LZ78, Data.Monoid.FromString, Data.Monoid.Applicative, Data.Monoid.Monad, Data.Generator.Combinators, Data.Generator.Free, Data.Ring.Semi.BitSet, Data.Ring.Semi.Tropical</TD
hunk ./doc/html/monoids/doc-index.html 1854
->, Data.Monoid.Reducer.Char, Data.Monoid.Lexical.UTF8.Decoder, Data.Monoid.Reducer.With, Data.Monoid.Union, Data.Generator, Data.Monoid.Lexical.SourcePosition, Data.Monoid.Lexical.Words, Data.Monoid.Self, Data.Generator.Compressive.LZ78, Data.Monoid.FromString, Data.Generator.Compressive.RLE, Data.Monoid.Categorical, Data.Monoid.Ord, Data.Ring.Semi.Tropical, Data.Monoid.Applicative, Data.Monoid.Monad, Data.Generator.Combinators, Data.Generator.Free, Data.Ring.Semi.BitSet</TD
+>, Data.Monoid.Reducer.Char, Data.Monoid.Lexical.UTF8.Decoder, Data.Monoid.Reducer.With, Data.Monoid.Union, Data.Monoid.Categorical, Data.Generator, Data.Generator.Compressive.RLE, Data.Monoid.Lexical.SourcePosition, Data.Monoid.Lexical.Words, Data.Monoid.Self, Data.Generator.Compressive.LZ78, Data.Monoid.FromString, Data.Monoid.Ord, Data.Monoid.Applicative, Data.Monoid.Monad, Data.Generator.Combinators, Data.Generator.Free, Data.Ring.Semi.BitSet, Data.Ring.Semi.Tropical</TD
hunk ./doc/html/monoids/doc-index.html 1862
->, Data.Generator.Compressive.LZ78, Data.Generator.Compressive.RLE, Data.Generator.Combinators, Data.Generator.Free</TD
+>, Data.Generator.Compressive.RLE, Data.Generator.Compressive.LZ78, Data.Generator.Combinators, Data.Generator.Free</TD
hunk ./doc/html/monoids/doc-index.html 1870
->, Data.Monoid.Reducer.Char, Data.Monoid.Lexical.UTF8.Decoder, Data.Monoid.Reducer.With, Data.Monoid.Union, Data.Generator, Data.Monoid.Lexical.SourcePosition, Data.Monoid.Lexical.Words, Data.Monoid.Self, Data.Generator.Compressive.LZ78, Data.Monoid.FromString, Data.Generator.Compressive.RLE, Data.Monoid.Categorical, Data.Monoid.Applicative, Data.Monoid.Monad, Data.Generator.Combinators, Data.Generator.Free, Data.Ring.Semi.BitSet</TD
+>, Data.Monoid.Reducer.Char, Data.Monoid.Lexical.UTF8.Decoder, Data.Monoid.Reducer.With, Data.Monoid.Union, Data.Monoid.Categorical, Data.Generator, Data.Generator.Compressive.RLE, Data.Monoid.Lexical.SourcePosition, Data.Monoid.Lexical.Words, Data.Monoid.Self, Data.Generator.Compressive.LZ78, Data.Monoid.FromString, Data.Monoid.Applicative, Data.Monoid.Monad, Data.Generator.Combinators, Data.Generator.Free, Data.Ring.Semi.BitSet, Data.Ring.Semi.Tropical</TD
hunk ./doc/html/monoids/doc-index.html 1906
->, Data.Monoid.Reducer.Char, Data.Monoid.Lexical.UTF8.Decoder, Data.Monoid.Reducer.With, Data.Monoid.Union, Data.Generator, Data.Monoid.Lexical.SourcePosition, Data.Monoid.Lexical.Words, Data.Monoid.Self, Data.Generator.Compressive.LZ78, Data.Monoid.FromString, Data.Generator.Compressive.RLE, Data.Monoid.Categorical, Data.Monoid.Applicative, Data.Monoid.Monad, Data.Generator.Combinators, Data.Generator.Free, Data.Ring.Semi.BitSet</TD
+>, Data.Monoid.Reducer.Char, Data.Monoid.Lexical.UTF8.Decoder, Data.Monoid.Reducer.With, Data.Monoid.Union, Data.Monoid.Categorical, Data.Generator, Data.Generator.Compressive.RLE, Data.Monoid.Lexical.SourcePosition, Data.Monoid.Lexical.Words, Data.Monoid.Self, Data.Generator.Compressive.LZ78, Data.Monoid.FromString, Data.Monoid.Applicative, Data.Monoid.Monad, Data.Generator.Combinators, Data.Generator.Free, Data.Ring.Semi.BitSet, Data.Ring.Semi.Tropical</TD
hunk ./doc/html/monoids/doc-index.html 1914
->, Data.Monoid.Applicative, Data.Ring.Algebra, Data.Ring.Module.AutomaticDifferentiation, Data.Field.VectorSpace</TD
+>, Data.Monoid.Applicative, Data.Monoid.Monad, Data.Ring.Module.AutomaticDifferentiation</TD
hunk ./doc/html/monoids/doc-index.html 1920
-><A HREF="Data-Ring-Semi-Near.html#t%3ARightSemiNearRing"
->Data.Ring.Semi.Near</A
->, Data.Ring.Semi, Data.Ring.Semi.Kleene, Data.Ring.Semi.Ord, Data.Ring.Semi.Tropical, Data.Ring.Semi.Near.Trie, Data.Ring.Sugar, Data.Ring, Data.Ring.Boolean, Data.Ring.FromNum, Data.Ring.ModularArithmetic, Data.Ring.Module, Data.Monoid.Applicative, Data.Monoid.Monad, Data.Ring.Semi.Natural, Data.Ring.Algebra, Data.Ring.Semi.BitSet, Data.Ring.Module.AutomaticDifferentiation, Data.Field, Data.Field.VectorSpace</TD
+><A HREF="Data-Ring.html#t%3ARightSemiNearRing"
+>Data.Ring</A
+>, Data.Ring.FromNum, Data.Ring.Module, Data.Monoid.Applicative, Data.Monoid.Monad, Data.Ring.Module.AutomaticDifferentiation, Data.Ring.Semi.Kleene, Data.Ring.Semi.Near.Trie, Data.Ring.Semi.Natural, Data.Monoid.Sugar, Data.Group.Sugar, Data.Ring.Boolean, Data.Ring.Semi.BitSet, Data.Ring.Semi.Ord, Data.Ring.Semi.Tropical, Data.Ring.ModularArithmetic</TD
hunk ./doc/html/monoids/doc-index.html 1930
->, Data.Ring.Boolean, Data.Ring.FromNum, Data.Ring.ModularArithmetic, Data.Ring.Module, Data.Monoid.Applicative, Data.Ring.Algebra, Data.Ring.Module.AutomaticDifferentiation, Data.Field, Data.Field.VectorSpace</TD
+>, Data.Ring.FromNum, Data.Ring.Module, Data.Monoid.Applicative, Data.Monoid.Monad, Data.Ring.Module.AutomaticDifferentiation, Data.Ring.Semi.Kleene, Data.Ring.Semi.Near.Trie, Data.Ring.Semi.Natural, Data.Monoid.Sugar, Data.Group.Sugar, Data.Ring.Boolean, Data.Ring.Semi.BitSet, Data.Ring.Semi.Ord, Data.Ring.Semi.Tropical, Data.Ring.ModularArithmetic</TD
hunk ./doc/html/monoids/doc-index.html 1936
-><A HREF="Data-Ring-Semi-Near.html#t%3ARingoid"
->Data.Ring.Semi.Near</A
->, Data.Ring.Semi, Data.Ring.Semi.Kleene, Data.Ring.Semi.Ord, Data.Ring.Semi.Tropical, Data.Ring.Semi.Near.Trie, Data.Ring.Sugar, Data.Ring, Data.Ring.Boolean, Data.Ring.FromNum, Data.Ring.ModularArithmetic, Data.Ring.Module, Data.Monoid.Applicative, Data.Monoid.Monad, Data.Ring.Semi.Natural, Data.Ring.Algebra, Data.Ring.Semi.BitSet, Data.Ring.Module.AutomaticDifferentiation, Data.Field, Data.Field.VectorSpace</TD
+><A HREF="Data-Ring.html#t%3ARingoid"
+>Data.Ring</A
+>, Data.Ring.FromNum, Data.Ring.Module, Data.Monoid.Applicative, Data.Monoid.Monad, Data.Ring.Module.AutomaticDifferentiation, Data.Ring.Semi.Kleene, Data.Ring.Semi.Near.Trie, Data.Ring.Semi.Natural, Data.Monoid.Sugar, Data.Group.Sugar, Data.Ring.Boolean, Data.Ring.Semi.BitSet, Data.Ring.Semi.Ord, Data.Ring.Semi.Tropical, Data.Ring.ModularArithmetic</TD
hunk ./doc/html/monoids/doc-index.html 2044
-><A HREF="Data-Ring-Semi.html#t%3ASemiRing"
->Data.Ring.Semi</A
->, Data.Ring.Semi.Kleene, Data.Ring.Semi.Ord, Data.Ring.Semi.Tropical, Data.Ring, Data.Ring.Boolean, Data.Ring.FromNum, Data.Ring.ModularArithmetic, Data.Ring.Module, Data.Monoid.Applicative, Data.Ring.Semi.Natural, Data.Ring.Algebra, Data.Ring.Semi.BitSet, Data.Ring.Module.AutomaticDifferentiation, Data.Field, Data.Field.VectorSpace</TD
+><A HREF="Data-Ring.html#t%3ASemiRing"
+>Data.Ring</A
+>, Data.Ring.FromNum, Data.Ring.Module, Data.Monoid.Applicative, Data.Monoid.Monad, Data.Ring.Module.AutomaticDifferentiation, Data.Ring.Semi.Kleene, Data.Ring.Semi.Near.Trie, Data.Ring.Semi.Natural, Data.Monoid.Sugar, Data.Group.Sugar, Data.Ring.Boolean, Data.Ring.Semi.BitSet, Data.Ring.Semi.Ord, Data.Ring.Semi.Tropical, Data.Ring.ModularArithmetic</TD
hunk ./doc/html/monoids/doc-index.html 2057
-><TD CLASS="indexentry"
->showTree</TD
-><TD CLASS="indexlinks"
-><A HREF="Data-Set-Unboxed.html#v%3AshowTree"
->Data.Set.Unboxed</A
-></TD
-></TR
-><TR CLASS="indexrow"
-><TD CLASS="indexentry"
->showTreeWith</TD
-><TD CLASS="indexlinks"
-><A HREF="Data-Set-Unboxed.html#v%3AshowTreeWith"
->Data.Set.Unboxed</A
-></TD
-></TR
-><TR CLASS="indexrow"
hunk ./doc/html/monoids/doc-index.html 2072
-><A HREF="Data-Set-Unboxed.html#v%3Asingleton"
->Data.Set.Unboxed</A
-></TD
-></TR
-><TR CLASS="indexrow"
-><TD CLASS="indexannot"
->3 (Function)</TD
-><TD CLASS="indexlinks"
hunk ./doc/html/monoids/doc-index.html 2077
-><TD CLASS="indexentry" COLSPAN="2"
+><TD CLASS="indexentry"
hunk ./doc/html/monoids/doc-index.html 2079
-></TR
-><TR CLASS="indexrow"
-><TD CLASS="indexannot"
->1 (Function)</TD
-><TD CLASS="indexlinks"
-><A HREF="Data-Set-Unboxed.html#v%3Asize"
->Data.Set.Unboxed</A
-></TD
-></TR
-><TR CLASS="indexrow"
-><TD CLASS="indexannot"
->2 (Function)</TD
hunk ./doc/html/monoids/doc-index.html 2090
->, Data.Monoid.Reducer.Char, Data.Monoid.Lexical.UTF8.Decoder, Data.Monoid.Reducer.With, Data.Monoid.Union, Data.Generator, Data.Monoid.Lexical.SourcePosition, Data.Monoid.Lexical.Words, Data.Monoid.Self, Data.Generator.Compressive.LZ78, Data.Monoid.FromString, Data.Generator.Compressive.RLE, Data.Monoid.Categorical, Data.Monoid.Applicative, Data.Monoid.Monad, Data.Generator.Combinators, Data.Generator.Free, Data.Ring.Semi.BitSet</TD
+>, Data.Monoid.Reducer.Char, Data.Monoid.Lexical.UTF8.Decoder, Data.Monoid.Reducer.With, Data.Monoid.Union, Data.Monoid.Categorical, Data.Generator, Data.Generator.Compressive.RLE, Data.Monoid.Lexical.SourcePosition, Data.Monoid.Lexical.Words, Data.Monoid.Self, Data.Generator.Compressive.LZ78, Data.Monoid.FromString, Data.Monoid.Applicative, Data.Monoid.Monad, Data.Generator.Combinators, Data.Generator.Free, Data.Ring.Semi.BitSet, Data.Ring.Semi.Tropical</TD
hunk ./doc/html/monoids/doc-index.html 2150
->split</TD
-><TD CLASS="indexlinks"
-><A HREF="Data-Set-Unboxed.html#v%3Asplit"
->Data.Set.Unboxed</A
-></TD
-></TR
-><TR CLASS="indexrow"
-><TD CLASS="indexentry"
->splitMember</TD
-><TD CLASS="indexlinks"
-><A HREF="Data-Set-Unboxed.html#v%3AsplitMember"
->Data.Set.Unboxed</A
-></TD
-></TR
-><TR CLASS="indexrow"
-><TD CLASS="indexentry"
hunk ./doc/html/monoids/doc-index.html 2170
->, Data.Group.Multiplicative.Sugar</TD
+></TD
hunk ./doc/html/monoids/doc-index.html 2180
->Data.Monoid.Reducer, Data.Monoid.Reducer.Char, Data.Monoid.Lexical.UTF8.Decoder, Data.Monoid.Reducer.With, Data.Monoid.Union, Data.Generator, Data.Monoid.Lexical.SourcePosition, Data.Monoid.Lexical.Words, Data.Monoid.Self, Data.Generator.Compressive.LZ78, Data.Monoid.FromString, Data.Generator.Compressive.RLE, Data.Monoid.Categorical, Data.Monoid.Additive, Data.Monoid.Additive.Sugar, Data.Monoid.Multiplicative, Data.Monoid.Multiplicative.Sugar, Data.Ring.Semi.Near, Data.Ring.Semi, Data.Ring.Semi.Kleene, Data.Ring.Semi.Ord, Data.Ring.Semi.Tropical, Data.Ring.Semi.Near.Trie, Data.Ring.Sugar, Data.Group, Data.Group.Combinators, Data.Group.Multiplicative, Data.Group.Sugar, Data.Group.Multiplicative.Sugar, Data.Ring, Data.Ring.Boolean, Data.Ring.FromNum, Data.Ring.ModularArithmetic, Data.Ring.Module, Data.Monoid.Applicative, Data.Monoid.Monad, Data.Generator.Combinators, Data.Generator.Free, Data.Ring.Semi.Natural, Data.Ring.Algebra, Data.Ring.Semi.BitSet, Data.Ring.Module.AutomaticDifferentiation, Data.Field, Data.Field.VectorSpace</TD
+>Data.Monoid.Reducer, Data.Monoid.Reducer.Char, Data.Monoid.Lexical.UTF8.Decoder, Data.Monoid.Reducer.With, Data.Monoid.Union, Data.Monoid.Categorical, Data.Monoid.Additive, Data.Generator, Data.Generator.Compressive.RLE, Data.Monoid.Lexical.SourcePosition, Data.Monoid.Lexical.Words, Data.Monoid.Self, Data.Generator.Compressive.LZ78, Data.Monoid.FromString, Data.Monoid.Multiplicative, Data.Group, Data.Group.Combinators, Data.Ring, Data.Ring.FromNum, Data.Ring.Module, Data.Monoid.Applicative, Data.Monoid.Monad, Data.Generator.Combinators, Data.Generator.Free, Data.Ring.Module.AutomaticDifferentiation, Data.Ring.Semi.Kleene, Data.Ring.Semi.Near.Trie, Data.Ring.Semi.Natural, Data.Monoid.Sugar, Data.Group.Sugar, Data.Ring.Boolean, Data.Ring.Semi.BitSet, Data.Ring.Semi.Ord, Data.Ring.Semi.Tropical, Data.Ring.ModularArithmetic</TD
hunk ./doc/html/monoids/doc-index.html 2186
->Data.Monoid.Reducer, Data.Monoid.Reducer.Char, Data.Monoid.Lexical.UTF8.Decoder, Data.Monoid.Reducer.With, Data.Monoid.Union, Data.Generator, Data.Monoid.Lexical.SourcePosition, Data.Monoid.Lexical.Words, Data.Monoid.Self, Data.Generator.Compressive.LZ78, Data.Monoid.FromString, Data.Generator.Compressive.RLE, Data.Monoid.Categorical, Data.Monoid.Additive, Data.Monoid.Additive.Sugar, Data.Monoid.Multiplicative, Data.Monoid.Multiplicative.Sugar, Data.Ring.Semi.Near, Data.Ring.Semi, Data.Ring.Semi.Kleene, Data.Ring.Semi.Ord, Data.Ring.Semi.Tropical, Data.Ring.Semi.Near.Trie, Data.Ring.Sugar, Data.Group, Data.Group.Combinators, Data.Group.Multiplicative, Data.Group.Sugar, Data.Group.Multiplicative.Sugar, Data.Ring, Data.Ring.Boolean, Data.Ring.FromNum, Data.Ring.ModularArithmetic, Data.Ring.Module, Data.Monoid.Applicative, Data.Monoid.Monad, Data.Generator.Combinators, Data.Generator.Free, Data.Ring.Semi.Natural, Data.Ring.Algebra, Data.Ring.Semi.BitSet, Data.Ring.Module.AutomaticDifferentiation, Data.Field, Data.Field.VectorSpace</TD
+>Data.Monoid.Reducer, Data.Monoid.Reducer.Char, Data.Monoid.Lexical.UTF8.Decoder, Data.Monoid.Reducer.With, Data.Monoid.Union, Data.Monoid.Categorical, Data.Monoid.Additive, Data.Generator, Data.Generator.Compressive.RLE, Data.Monoid.Lexical.SourcePosition, Data.Monoid.Lexical.Words, Data.Monoid.Self, Data.Generator.Compressive.LZ78, Data.Monoid.FromString, Data.Monoid.Multiplicative, Data.Group, Data.Group.Combinators, Data.Ring, Data.Ring.FromNum, Data.Ring.Module, Data.Monoid.Applicative, Data.Monoid.Monad, Data.Generator.Combinators, Data.Generator.Free, Data.Ring.Module.AutomaticDifferentiation, Data.Ring.Semi.Kleene, Data.Ring.Semi.Near.Trie, Data.Ring.Semi.Natural, Data.Monoid.Sugar, Data.Group.Sugar, Data.Ring.Boolean, Data.Ring.Semi.BitSet, Data.Ring.Semi.Ord, Data.Ring.Semi.Tropical, Data.Ring.ModularArithmetic</TD
hunk ./doc/html/monoids/doc-index.html 2210
->, Data.Monoid.Multiplicative.Sugar, Data.Ring.Semi.Near, Data.Ring.Semi, Data.Ring.Semi.Kleene, Data.Ring.Semi.Ord, Data.Ring.Semi.Tropical, Data.Ring.Semi.Near.Trie, Data.Ring.Sugar, Data.Group.Multiplicative, Data.Group.Multiplicative.Sugar, Data.Ring, Data.Ring.Boolean, Data.Ring.FromNum, Data.Ring.ModularArithmetic, Data.Ring.Module, Data.Monoid.Applicative, Data.Monoid.Monad, Data.Ring.Semi.Natural, Data.Ring.Algebra, Data.Ring.Semi.BitSet, Data.Ring.Module.AutomaticDifferentiation, Data.Field, Data.Field.VectorSpace</TD
-></TR
-><TR CLASS="indexrow"
-><TD CLASS="indexentry"
->toAscList</TD
-><TD CLASS="indexlinks"
-><A HREF="Data-Set-Unboxed.html#v%3AtoAscList"
->Data.Set.Unboxed</A
-></TD
+>, Data.Group, Data.Group.Combinators, Data.Ring, Data.Ring.FromNum, Data.Ring.Module, Data.Monoid.Applicative, Data.Monoid.Monad, Data.Ring.Module.AutomaticDifferentiation, Data.Ring.Semi.Kleene, Data.Ring.Semi.Near.Trie, Data.Ring.Semi.Natural, Data.Monoid.Sugar, Data.Group.Sugar, Data.Ring.Boolean, Data.Ring.Semi.BitSet, Data.Ring.Semi.Ord, Data.Ring.Semi.Tropical, Data.Ring.ModularArithmetic</TD
hunk ./doc/html/monoids/doc-index.html 2221
-><TD CLASS="indexentry" COLSPAN="2"
+><TD CLASS="indexentry"
hunk ./doc/html/monoids/doc-index.html 2223
-></TR
-><TR CLASS="indexrow"
-><TD CLASS="indexannot"
->1 (Function)</TD
hunk ./doc/html/monoids/doc-index.html 2229
-><TD CLASS="indexannot"
->2 (Function)</TD
+><TD CLASS="indexentry"
+>toNatural</TD
hunk ./doc/html/monoids/doc-index.html 2232
-><A HREF="Data-Set-Unboxed.html#v%3AtoList"
->Data.Set.Unboxed</A
-></TD
+><A HREF="Data-Ring-Semi-Natural.html#v%3AtoNatural"
+>Data.Ring.Semi.Natural</A
+>, Data.Monoid.Sugar, Data.Group.Sugar</TD
hunk ./doc/html/monoids/doc-index.html 2316
-><A HREF="Data-Group-Multiplicative.html#v%3Aunder"
->Data.Group.Multiplicative</A
->, Data.Group.Multiplicative.Sugar, Data.Field, Data.Field.VectorSpace</TD
+><A HREF="Data-Group.html#v%3Aunder"
+>Data.Group</A
+>, Data.Group.Combinators, Data.Ring, Data.Ring.FromNum, Data.Ring.Module, Data.Monoid.Applicative, Data.Monoid.Monad, Data.Ring.Module.AutomaticDifferentiation, Data.Ring.Semi.Kleene, Data.Ring.Semi.Near.Trie, Data.Ring.Semi.Natural, Data.Monoid.Sugar, Data.Group.Sugar, Data.Ring.Boolean, Data.Ring.Semi.BitSet, Data.Ring.Semi.Ord, Data.Ring.Semi.Tropical, Data.Ring.ModularArithmetic</TD
hunk ./doc/html/monoids/doc-index.html 2356
-><A HREF="Data-Set-Unboxed.html#v%3Aunion"
->Data.Set.Unboxed</A
-></TD
-></TR
-><TR CLASS="indexrow"
-><TD CLASS="indexannot"
->3 (Function)</TD
-><TD CLASS="indexlinks"
hunk ./doc/html/monoids/doc-index.html 2361
-><TD CLASS="indexentry"
->unions</TD
-><TD CLASS="indexlinks"
-><A HREF="Data-Set-Unboxed.html#v%3Aunions"
->Data.Set.Unboxed</A
-></TD
-></TR
-><TR CLASS="indexrow"
hunk ./doc/html/monoids/doc-index.html 2394
->, Data.Monoid.Reducer.Char, Data.Monoid.Lexical.UTF8.Decoder, Data.Monoid.Reducer.With, Data.Monoid.Union, Data.Generator, Data.Monoid.Lexical.SourcePosition, Data.Monoid.Lexical.Words, Data.Monoid.Self, Data.Generator.Compressive.LZ78, Data.Monoid.FromString, Data.Generator.Compressive.RLE, Data.Monoid.Categorical, Data.Monoid.Ord, Data.Ring.Semi.Tropical, Data.Monoid.Applicative, Data.Monoid.Monad, Data.Generator.Combinators, Data.Generator.Free, Data.Ring.Semi.BitSet</TD
+>, Data.Monoid.Reducer.Char, Data.Monoid.Lexical.UTF8.Decoder, Data.Monoid.Reducer.With, Data.Monoid.Union, Data.Monoid.Categorical, Data.Generator, Data.Generator.Compressive.RLE, Data.Monoid.Lexical.SourcePosition, Data.Monoid.Lexical.Words, Data.Monoid.Self, Data.Generator.Compressive.LZ78, Data.Monoid.FromString, Data.Monoid.Ord, Data.Monoid.Applicative, Data.Monoid.Monad, Data.Generator.Combinators, Data.Generator.Free, Data.Ring.Semi.BitSet, Data.Ring.Semi.Tropical</TD
hunk ./doc/html/monoids/doc-index.html 2414
->US</TD
-><TD CLASS="indexlinks"
-><A HREF="Data-Set-Unboxed.html#t%3AUS"
->Data.Set.Unboxed</A
-></TD
-></TR
-><TR CLASS="indexrow"
-><TD CLASS="indexentry"
->USet</TD
-><TD CLASS="indexlinks"
-><A HREF="Data-Set-Unboxed.html#t%3AUSet"
->Data.Set.Unboxed</A
-></TD
-></TR
-><TR CLASS="indexrow"
-><TD CLASS="indexentry"
hunk ./doc/html/monoids/doc-index.html 2421
-><TD CLASS="indexentry"
->valid</TD
-><TD CLASS="indexlinks"
-><A HREF="Data-Set-Unboxed.html#v%3Avalid"
->Data.Set.Unboxed</A
-></TD
-></TR
-><TR CLASS="indexrow"
hunk ./doc/html/monoids/doc-index.html 2430
->, Data.Generator.Compressive.LZ78, Data.Generator.Compressive.RLE, Data.Generator.Combinators, Data.Generator.Free</TD
+>, Data.Generator.Compressive.RLE, Data.Generator.Compressive.LZ78, Data.Generator.Combinators, Data.Generator.Free</TD
hunk ./doc/html/monoids/doc-index.html 2438
->, Data.Generator.Compressive.LZ78, Data.Generator.Compressive.RLE, Data.Generator.Combinators, Data.Generator.Free</TD
+>, Data.Generator.Compressive.RLE, Data.Generator.Compressive.LZ78, Data.Generator.Combinators, Data.Generator.Free</TD
hunk ./doc/html/monoids/doc-index.html 2444
-><A HREF="Data-Field-VectorSpace.html#t%3AVectorSpace"
->Data.Field.VectorSpace</A
-></TD
+><A HREF="Data-Ring-Module.html#t%3AVectorSpace"
+>Data.Ring.Module</A
+>, Data.Monoid.Applicative, Data.Monoid.Monad, Data.Ring.Module.AutomaticDifferentiation</TD
hunk ./doc/html/monoids/doc-index.html 2506
->, Data.Monoid.Additive.Sugar, Data.Monoid.Multiplicative, Data.Monoid.Multiplicative.Sugar, Data.Ring.Semi.Near, Data.Ring.Semi, Data.Ring.Semi.Kleene, Data.Ring.Semi.Ord, Data.Ring.Semi.Tropical, Data.Ring.Semi.Near.Trie, Data.Ring.Sugar, Data.Group, Data.Group.Combinators, Data.Group.Multiplicative, Data.Group.Sugar, Data.Group.Multiplicative.Sugar, Data.Ring, Data.Ring.Boolean, Data.Ring.FromNum, Data.Ring.ModularArithmetic, Data.Ring.Module, Data.Monoid.Applicative, Data.Monoid.Monad, Data.Ring.Semi.Natural, Data.Ring.Algebra, Data.Ring.Semi.BitSet, Data.Ring.Module.AutomaticDifferentiation, Data.Field, Data.Field.VectorSpace</TD
+>, Data.Monoid.Multiplicative, Data.Group, Data.Group.Combinators, Data.Ring, Data.Ring.FromNum, Data.Ring.Module, Data.Monoid.Applicative, Data.Monoid.Monad, Data.Ring.Module.AutomaticDifferentiation, Data.Ring.Semi.Kleene, Data.Ring.Semi.Near.Trie, Data.Ring.Semi.Natural, Data.Monoid.Sugar, Data.Group.Sugar, Data.Ring.Boolean, Data.Ring.Semi.BitSet, Data.Ring.Semi.Ord, Data.Ring.Semi.Tropical, Data.Ring.ModularArithmetic</TD
hunk ./doc/html/monoids/doc-index.html 2509
-><TD CLASS="indexentry" COLSPAN="2"
+><TD CLASS="indexentry"
hunk ./doc/html/monoids/doc-index.html 2511
-></TR
-><TR CLASS="indexrow"
-><TD CLASS="indexannot"
->1 (Function)</TD
hunk ./doc/html/monoids/doc-index.html 2512
-><A HREF="Data-Group-Multiplicative-Sugar.html#v%3A%5C%5C"
->Data.Group.Multiplicative.Sugar</A
+><A HREF="Data-Ring-Semi-BitSet.html#v%3A%5C%5C"
+>Data.Ring.Semi.BitSet</A
hunk ./doc/html/monoids/doc-index.html 2517
-><TD CLASS="indexannot"
->2 (Function)</TD
+><TD CLASS="indexentry"
+>^</TD
hunk ./doc/html/monoids/doc-index.html 2520
-><A HREF="Data-Set-Unboxed.html#v%3A%5C%5C"
->Data.Set.Unboxed</A
-></TD
+><A HREF="Data-Monoid-Sugar.html#v%3A%5E"
+>Data.Monoid.Sugar</A
+>, Data.Group.Sugar</TD
hunk ./doc/html/monoids/doc-index.html 2525
-><TD CLASS="indexannot"
->3 (Function)</TD
+><TD CLASS="indexentry"
+>^^</TD
hunk ./doc/html/monoids/doc-index.html 2528
-><A HREF="Data-Ring-Semi-BitSet.html#v%3A%5C%5C"
->Data.Ring.Semi.BitSet</A
+><A HREF="Data-Group-Sugar.html#v%3A%5E%5E"
+>Data.Group.Sugar</A
hunk ./doc/html/monoids/index.html 7
->monoids-0.1.33: Monoids, specialized containers and a general map/reduce framework</TITLE
+>monoids-0.1.35: Monoids, specialized containers and a general map/reduce framework</TITLE
hunk ./doc/html/monoids/index.html 22
->monoids-0.1.33: Monoids, specialized containers and a general map/reduce framework</TD
+>monoids-0.1.35: Monoids, specialized containers and a general map/reduce framework</TD
hunk ./doc/html/monoids/index.html 37
->monoids-0.1.33: Monoids, specialized containers and a general map/reduce framework</TD
+>monoids-0.1.35: Monoids, specialized containers and a general map/reduce framework</TD
hunk ./doc/html/monoids/index.html 66
-><A HREF="Data-Field.html"
->Data.Field</A
-></TD
-><TD
-></TD
-><TD
-></TD
-></TR
-><TR
-><TD STYLE="padding: 0; padding-left: 2em" COLSPAN="3"
-><TABLE CLASS="vanilla2" CELLSPACING="0" CELLPADDING="0" ID="n:1" STYLE="display:block;"
-><TR
-><TD STYLE="padding-left: 1.25em;width: 46em"
-><A HREF="Data-Field-VectorSpace.html"
->Data.Field.VectorSpace</A
-></TD
-><TD
-></TD
-><TD
-></TD
-></TR
-></TABLE
-></TD
-></TR
-><TR
-><TD STYLE="width: 48em"
-><IMG SRC="minus.gif" CLASS="coll" ONCLICK="toggle(this,'n:2')" ALT="show/hide"
hunk ./doc/html/monoids/index.html 76
-><TABLE CLASS="vanilla2" CELLSPACING="0" CELLPADDING="0" ID="n:2" STYLE="display:block;"
+><TABLE CLASS="vanilla2" CELLSPACING="0" CELLPADDING="0" ID="n:1" STYLE="display:block;"
hunk ./doc/html/monoids/index.html 89
-><IMG SRC="minus.gif" CLASS="coll" ONCLICK="toggle(this,'n:3')" ALT="show/hide"
+><IMG SRC="minus.gif" CLASS="coll" ONCLICK="toggle(this,'n:2')" ALT="show/hide"
hunk ./doc/html/monoids/index.html 98
-><TABLE CLASS="vanilla2" CELLSPACING="0" CELLPADDING="0" ID="n:3" STYLE="display:block;"
+><TABLE CLASS="vanilla2" CELLSPACING="0" CELLPADDING="0" ID="n:2" STYLE="display:block;"
hunk ./doc/html/monoids/index.html 137
-><IMG SRC="minus.gif" CLASS="coll" ONCLICK="toggle(this,'n:4')" ALT="show/hide"
+><IMG SRC="minus.gif" CLASS="coll" ONCLICK="toggle(this,'n:3')" ALT="show/hide"
hunk ./doc/html/monoids/index.html 148
-><TABLE CLASS="vanilla2" CELLSPACING="0" CELLPADDING="0" ID="n:4" STYLE="display:block;"
+><TABLE CLASS="vanilla2" CELLSPACING="0" CELLPADDING="0" ID="n:3" STYLE="display:block;"
hunk ./doc/html/monoids/index.html 160
-><TD STYLE="width: 46em"
-><IMG SRC="minus.gif" CLASS="coll" ONCLICK="toggle(this,'n:5')" ALT="show/hide"
-><A HREF="Data-Group-Multiplicative.html"
->Data.Group.Multiplicative</A
-></TD
-><TD
-></TD
-><TD
-></TD
-></TR
-><TR
-><TD STYLE="padding: 0; padding-left: 2em" COLSPAN="3"
-><TABLE CLASS="vanilla2" CELLSPACING="0" CELLPADDING="0" ID="n:5" STYLE="display:block;"
-><TR
-><TD STYLE="padding-left: 1.25em;width: 44em"
-><A HREF="Data-Group-Multiplicative-Sugar.html"
->Data.Group.Multiplicative.Sugar</A
-></TD
-><TD
-></TD
-><TD
-></TD
-></TR
-></TABLE
-></TD
-></TR
-><TR
hunk ./doc/html/monoids/index.html 174
-><IMG SRC="minus.gif" CLASS="coll" ONCLICK="toggle(this,'n:6')" ALT="show/hide"
+><IMG SRC="minus.gif" CLASS="coll" ONCLICK="toggle(this,'n:4')" ALT="show/hide"
hunk ./doc/html/monoids/index.html 183
-><TABLE CLASS="vanilla2" CELLSPACING="0" CELLPADDING="0" ID="n:6" STYLE="display:block;"
+><TABLE CLASS="vanilla2" CELLSPACING="0" CELLPADDING="0" ID="n:4" STYLE="display:block;"
hunk ./doc/html/monoids/index.html 185
-><TD STYLE="width: 46em"
-><IMG SRC="minus.gif" CLASS="coll" ONCLICK="toggle(this,'n:7')" ALT="show/hide"
+><TD STYLE="padding-left: 1.25em;width: 46em"
hunk ./doc/html/monoids/index.html 195
-><TD STYLE="padding: 0; padding-left: 2em" COLSPAN="3"
-><TABLE CLASS="vanilla2" CELLSPACING="0" CELLPADDING="0" ID="n:7" STYLE="display:block;"
-><TR
-><TD STYLE="padding-left: 1.25em;width: 44em"
-><A HREF="Data-Monoid-Additive-Sugar.html"
->Data.Monoid.Additive.Sugar</A
-></TD
-><TD
-></TD
-><TD
-></TD
-></TR
-></TABLE
-></TD
-></TR
-><TR
hunk ./doc/html/monoids/index.html 246
-><IMG SRC="minus.gif" CLASS="coll" ONCLICK="toggle(this,'n:8')" ALT="show/hide"
+><IMG SRC="minus.gif" CLASS="coll" ONCLICK="toggle(this,'n:5')" ALT="show/hide"
hunk ./doc/html/monoids/index.html 255
-><TABLE CLASS="vanilla2" CELLSPACING="0" CELLPADDING="0" ID="n:8" STYLE="display:block;"
+><TABLE CLASS="vanilla2" CELLSPACING="0" CELLPADDING="0" ID="n:5" STYLE="display:block;"
hunk ./doc/html/monoids/index.html 268
-><IMG SRC="minus.gif" CLASS="coll" ONCLICK="toggle(this,'n:9')" ALT="show/hide"
+><IMG SRC="minus.gif" CLASS="coll" ONCLICK="toggle(this,'n:6')" ALT="show/hide"
hunk ./doc/html/monoids/index.html 277
-><TABLE CLASS="vanilla2" CELLSPACING="0" CELLPADDING="0" ID="n:9" STYLE="display:block;"
+><TABLE CLASS="vanilla2" CELLSPACING="0" CELLPADDING="0" ID="n:6" STYLE="display:block;"
hunk ./doc/html/monoids/index.html 315
-><TD STYLE="width: 46em"
-><IMG SRC="minus.gif" CLASS="coll" ONCLICK="toggle(this,'n:10')" ALT="show/hide"
+><TD STYLE="padding-left: 1.25em;width: 46em"
hunk ./doc/html/monoids/index.html 325
-><TD STYLE="padding: 0; padding-left: 2em" COLSPAN="3"
-><TABLE CLASS="vanilla2" CELLSPACING="0" CELLPADDING="0" ID="n:10" STYLE="display:block;"
-><TR
-><TD STYLE="padding-left: 1.25em;width: 44em"
-><A HREF="Data-Monoid-Multiplicative-Sugar.html"
->Data.Monoid.Multiplicative.Sugar</A
-></TD
-><TD
-></TD
-><TD
-></TD
-></TR
-></TABLE
-></TD
-></TR
-><TR
hunk ./doc/html/monoids/index.html 336
-><IMG SRC="minus.gif" CLASS="coll" ONCLICK="toggle(this,'n:11')" ALT="show/hide"
+><IMG SRC="minus.gif" CLASS="coll" ONCLICK="toggle(this,'n:7')" ALT="show/hide"
hunk ./doc/html/monoids/index.html 347
-><TABLE CLASS="vanilla2" CELLSPACING="0" CELLPADDING="0" ID="n:11" STYLE="display:block;"
+><TABLE CLASS="vanilla2" CELLSPACING="0" CELLPADDING="0" ID="n:7" STYLE="display:block;"
hunk ./doc/html/monoids/index.html 383
+><A HREF="Data-Monoid-Sugar.html"
+>Data.Monoid.Sugar</A
+></TD
+><TD
+></TD
+><TD
+></TD
+></TR
+><TR
+><TD STYLE="padding-left: 1.25em;width: 46em"
hunk ./doc/html/monoids/index.html 406
-><IMG SRC="minus.gif" CLASS="coll" ONCLICK="toggle(this,'n:12')" ALT="show/hide"
+><IMG SRC="minus.gif" CLASS="coll" ONCLICK="toggle(this,'n:8')" ALT="show/hide"
hunk ./doc/html/monoids/index.html 417
-><TABLE CLASS="vanilla2" CELLSPACING="0" CELLPADDING="0" ID="n:12" STYLE="display:block;"
-><TR
-><TD STYLE="padding-left: 1.25em;width: 46em"
-><A HREF="Data-Ring-Algebra.html"
->Data.Ring.Algebra</A
-></TD
-><TD
-></TD
-><TD
-></TD
-></TR
+><TABLE CLASS="vanilla2" CELLSPACING="0" CELLPADDING="0" ID="n:8" STYLE="display:block;"
hunk ./doc/html/monoids/index.html 450
-><IMG SRC="minus.gif" CLASS="coll" ONCLICK="toggle(this,'n:13')" ALT="show/hide"
+><IMG SRC="minus.gif" CLASS="coll" ONCLICK="toggle(this,'n:9')" ALT="show/hide"
hunk ./doc/html/monoids/index.html 461
-><TABLE CLASS="vanilla2" CELLSPACING="0" CELLPADDING="0" ID="n:13" STYLE="display:block;"
+><TABLE CLASS="vanilla2" CELLSPACING="0" CELLPADDING="0" ID="n:9" STYLE="display:block;"
hunk ./doc/html/monoids/index.html 477
-><IMG SRC="minus.gif" CLASS="coll" ONCLICK="toggle(this,'n:14')" ALT="show/hide"
-><A HREF="Data-Ring-Semi.html"
->Data.Ring.Semi</A
-></TD
+><IMG SRC="minus.gif" CLASS="coll" ONCLICK="toggle(this,'n:10')" ALT="show/hide"
+>Semi</TD
hunk ./doc/html/monoids/index.html 486
-><TABLE CLASS="vanilla2" CELLSPACING="0" CELLPADDING="0" ID="n:14" STYLE="display:block;"
+><TABLE CLASS="vanilla2" CELLSPACING="0" CELLPADDING="0" ID="n:10" STYLE="display:block;"
hunk ./doc/html/monoids/index.html 519
-><IMG SRC="minus.gif" CLASS="coll" ONCLICK="toggle(this,'n:15')" ALT="show/hide"
-><A HREF="Data-Ring-Semi-Near.html"
->Data.Ring.Semi.Near</A
-></TD
+><IMG SRC="minus.gif" CLASS="coll" ONCLICK="toggle(this,'n:11')" ALT="show/hide"
+>Near</TD
hunk ./doc/html/monoids/index.html 528
-><TABLE CLASS="vanilla2" CELLSPACING="0" CELLPADDING="0" ID="n:15" STYLE="display:block;"
+><TABLE CLASS="vanilla2" CELLSPACING="0" CELLPADDING="0" ID="n:11" STYLE="display:block;"
hunk ./doc/html/monoids/index.html 565
-><TR
-><TD STYLE="padding-left: 1.25em;width: 46em"
-><A HREF="Data-Ring-Sugar.html"
->Data.Ring.Sugar</A
-></TD
-><TD
-></TD
-><TD
-></TD
-></TR
-></TABLE
-></TD
-></TR
-><TR
-><TD STYLE="width: 48em"
-><IMG SRC="minus.gif" CLASS="coll" ONCLICK="toggle(this,'n:16')" ALT="show/hide"
->Set</TD
-><TD
-></TD
-><TD
-></TD
-></TR
-><TR
-><TD STYLE="padding: 0; padding-left: 2em" COLSPAN="3"
-><TABLE CLASS="vanilla2" CELLSPACING="0" CELLPADDING="0" ID="n:16" STYLE="display:block;"
-><TR
-><TD STYLE="padding-left: 1.25em;width: 46em"
-><A HREF="Data-Set-Unboxed.html"
->Data.Set.Unboxed</A
-></TD
-><TD
-></TD
-><TD
-></TD
-></TR
binary ./doc/html/monoids/monoids.haddock
oldhex
*0d0cface0004000000000001c02d0000000000019b9fff00000128000000000000000000000000
*000000000000000000000001000000000000000100000000000000000000000000000001000000
*000000000200000000000000000000000000000001000000000000000300000000000000000000
*000000000001000000000000000400000000000000000000000000000001000000000000000500
*000000000000000000000000000001000000000000000600000000000000000000000000000001
*000000000000000700000000000000000000000000000001000000000000000800000000000000
*000000000000000001000000000000000900000000000000000000000000000001000000000000
*000a00000000000000000000000000000001000000000000000b00000000000000000000000000
*000002000000000000000c00000000000000000000000000000002000000000000000d00000000
*000000000000000000000002000000000000000e00000000000000000000000000000003000000
*000000000f00000000000000000000000000000003000000000000001000000000000000000000
*000000000004000000000000001100000000000000000000000000000004000000000000001200
*000000000000000000000000000004000000000000001300000000000000000000000000000005
*000000000000001400000000000000000000000000000005000000000000001500000000000000
*000000000000000005000000000000001600000000000000000000000000000005000000000000
*001700000000000000000000000000000005000000000000001800000000000000000000000000
*000005000000000000001900000000000000000000000000000005000000000000001a00000000
*000000000000000000000005000000000000001b00000000000000000000000000000005000000
*000000001c00000000000000000000000000000005000000000000001d00000000000000000000
*000000000005000000000000001e00000000000000000000000000000005000000000000001f00
*000000000000000000000000000006000000000000002000000000000000000000000000000006
*000000000000002100000000000000000000000000000006000000000000002200000000000000
*000000000000000006000000000000002300000000000000000000000000000006000000000000
*002400000000000000000000000000000006000000000000002500000000000000000000000000
*000006000000000000002600000000000000000000000000000006000000000000002700000000
*000000000000000000000006000000000000002800000000000000000000000000000006000000
*000000002900000000000000000000000000000006000000000000002a00000000000000000000
*000000000006000000000000002b00000000000000000000000000000006000000000000002c00
*000000000000000000000000000006000000000000002d00000000000000000000000000000006
*000000000000002e00000000000000000000000000000006000000000000002f00000000000000
*000000000000000006000000000000003000000000000000000000000000000007000000000000
*003100000000000000000000000000000007000000000000003200000000000000000000000000
*000007000000000000003300000000000000000000000000000007000000000000003400000000
*000000000000000000000007000000000000003500000000000000000000000000000007000000
*000000003600000000000000000000000000000007000000000000003700000000000000000000
*000000000007000000000000003800000000000000000000000000000007000000000000003900
*000000000000000000000000000007000000000000003a00000000000000000000000000000007
*000000000000003b00000000000000000000000000000007000000000000003c00000000000000
*000000000000000008000000000000003d00000000000000000000000000000008000000000000
*003e00000000000000000000000000000008000000000000003f00000000000000000000000000
*000008000000000000004000000000000000000000000000000008000000000000004100000000
*000000000000000000000008000000000000004200000000000000000000000000000008000000
*000000004300000000000000000000000000000008000000000000004400000000000000000000
*000000000008000000000000004500000000000000000000000000000008000000000000004600
*000000000000000000000000000009000000000000004700000000000000000000000000000009
*000000000000004800000000000000000000000000000009000000000000004900000000000000
*00000000000000000a000000000000004a0000000000000000000000000000000a000000000000
*004b0000000000000000000000000000000a000000000000004c00000000000000000000000000
*00000a000000000000004d0000000000000000000000000000000a000000000000004e00000000
*00000000000000000000000a000000000000004f0000000000000000000000000000000b000000
*00000000500000000000000000000000000000000b000000000000005100000000000000000000
*00000000000b00000000000000520000000000000000000000000000000c000000000000005300
*00000000000000000000000000000c00000000000000540000000000000000000000000000000c
*00000000000000550000000000000000000000000000000c000000000000005600000000000000
*00000000000000000d00000000000000570000000000000000000000000000000d000000000000
*00580000000000000000000000000000000d000000000000005900000000000000000000000000
*00000d000000000000005a0000000000000000000000000000000d000000000000005b00000000
*00000000000000000000000d000000000000005c0000000000000000000000000000000d000000
*000000005d0000000000000000000000000000000d000000000000005e00000000000000000000
*00000000000d000000000000005f0000000000000000000000000000000d000000000000006000
*00000000000000000000000000000e00000000000000610000000000000000000000000000000e
*00000000000000620000000000000000000000000000000e000000000000006300000000000000
*00000000000000000e00000000000000640000000000000000000000000000000e000000000000
*00650000000000000000000000000000000e000000000000006600000000000000000000000000
*00000f00000000000000670000000000000000000000000000000f000000000000006800000000
*000000000000000000000010000000000000006900000000000000000000000000000011000000
*000000006a00000000000000000000000000000011000000000000006b00000000000000000000
*000000000011000000000000006c00000000000000000000000000000011000000000000006d00
*000000000000000000000000000011000000000000006e00000000000000000000000000000011
*000000000000006f00000000000000000000000000000011000000000000007000000000000000
*000000000000000011000000000000007100000000000000000000000000000011000000000000
*007200000000000000000000000000000012000000000000007300000000000000000000000000
*000013000000000000007400000000000000000000000000000013000000000000007500000000
*000000000000000000000013000000000000007600000000000000000000000000000014000000
*000000007700000000000000000000000000000015000000000000007800000000000000000000
*000000000015000000000000007900000000000000000000000000000015000000000000007a00
*000000000000000000000000000015000000000000007b00000000000000000000000000000015
*000000000000007c00000000000000000000000000000015000000000000007d00000000000000
*000000000000000015000000000000007e00000000000000000000000000000015000000000000
*007f00000000000000000000000000000015000000000000008000000000000000000000000000
*000015000000000000008100000000000000000000000000000015000000000000008200000000
*000000000000000000000015000000000000008300000000000000000000000000000015000000
*000000008400000000000000000000000000000015000000000000008500000000000000000000
*000000000016000000000000008600000000000000000000000000000016000000000000008700
*000000000000000000000000000017000000000000008800000000000000000000000000000017
*000000000000008900000000000000000000000000000017000000000000008a00000000000000
*000000000000000017000000000000008b00000000000000000000000000000017000000000000
*008c00000000000000000000000000000017000000000000008d00000000000000000000000000
*000017000000000000008e00000000000000000000000000000018000000000000008f00000000
*000000000000000000000018000000000000009000000000000000000000000000000018000000
*000000009100000000000000000000000000000018000000000000009200000000000000000000
*000000000019000000000000009300000000000000000000000000000019000000000000009400
*000000000000000000000000000019000000000000009500000000000000000000000000000019
*000000000000009600000000000000000000000000000019000000000000009700000000000000
*000000000000000019000000000000009800000000000000000000000000000019000000000000
*009900000000000000000000000000000019000000000000009a00000000000000000000000000
*00001a000000000000009b0000000000000000000000000000001a000000000000009c00000000
*00000000000000000000001a000000000000009d0000000000000000000000000000001a000000
*000000009e0000000000000000000000000000001b000000000000009f00000000000000000000
*00000000001b00000000000000a00000000000000000000000000000001c00000000000000a100
*00000000000000000000000000001c00000000000000a20000000000000000000000000000001c
*00000000000000a30000000000000000000000000000001c00000000000000a400000000000000
*00000000000000001d00000000000000a50000000000000000000000000000001d000000000000
*00a60000000000000000000000000000001d00000000000000a700000000000000000000000000
*00001e00000000000000a80000000000000000000000000000001e00000000000000a900000000
*00000000000000000000001e00000000000000aa0000000000000000000000000000001f000000
*00000000ab0000000000000000000000000000002000000000000000ac00000000000000000000
*00000000002000000000000000ad0000000000000000000000000000002000000000000000ae00
*00000000000000000000000000002100000000000000af00000000000000000000000000000021
*00000000000000b00000000000000000000000000000002100000000000000b100000000000000
*00000000000000002200000000000000b200000000000000000000000000000022000000000000
*00b30000000000000000000000000000002200000000000000b400000000000000000000000000
*00002200000000000000b50000000000000000000000000000002200000000000000b600000000
*00000000000000000000002300000000000000b700000000000000000000000000000023000000
*00000000b80000000000000000000000000000002300000000000000b900000000000000000000
*00000000002300000000000000ba0000000000000000000000000000002300000000000000bb00
*00000000000000000000000000002400000000000000bc00000000000000000000000000000024
*00000000000000bd0000000000000000000000000000002400000000000000be00000000000000
*00000000000000002400000000000000bf00000000000000000000000000000024000000000000
*00c00000000000000000000000000000002400000000000000c100000000000000000000000000
*00002400000000000000c20000000000000000000000000000002400000000000000c300000000
*00000000000000000000002400000000000000c400000000000000000000000000000024000000
*00000000c50000000000000000000000000000002500000000000000c600000000000000000000
*00000000002500000000000000c70000000000000000000000000000002500000000000000c800
*00000000000000000000000000002500000000000000c900000000000000000000000000000025
*00000000000000ca0000000000000000000000000000002500000000000000cb00000000000000
*00000000000000002500000000000000cc00000000000000000000000000000025000000000000
*00cd0000000000000000000000000000002500000000000000ce00000000000000000000000000
*00002500000000000000cf0000000000000000000000000000002600000000000000d000000000
*00000000000000000000002600000000000000d100000000000000000000000000000026000000
*00000000d20000000000000000000000000000002600000000000000d300000000000000000000
*00000000002600000000000000d40000000000000000000000000000002600000000000000d500
*00000000000000000000000000002600000000000000d600000000000000000000000000000026
*00000000000000d70000000000000000000000000000002600000000000000d800000000000000
*00000000000000002600000000000000d900000000000000000000000000000026000000000000
*00da0000000000000000000000000000002600000000000000db00000000000000000000000000
*00002600000000000000dc0000000000000000000000000000002600000000000000dd00000000
*00000000000000000000002600000000000000de00000000000000000000000000000026000000
*00000000df0000000000000000000000000000002600000000000000e000000000000000000000
*00000000002600000000000000e10000000000000000000000000000002600000000000000e200
*00000000000000000000000000002600000000000000e300000000000000000000000000000026
*00000000000000e40000000000000000000000000000002700000000000000e500000000000000
*00000000000000002700000000000000e600000000000000000000000000000028000000000000
*00e70000000000000000000000000000002800000000000000e800000000000000000000000000
*00002800000000000000e90000000000000000000000000000002800000000000000ea00000000
*00000000000000000000002800000000000000eb00000000000000000000000000000028000000
*00000000ec0000000000000000000000000000002800000000000000ed00000000000000000000
*00000000002800000000000000ee0000000000000000000000000000002800000000000000ef00
*00000000000000000000000000002800000000000000f000000000000000000000000000000028
*00000000000000f10000000000000000000000000000002800000000000000f200000000000000
*00000000000000002800000000000000f300000000000000000000000000000028000000000000
*00f40000000000000000000000000000002800000000000000f500000000000000000000000000
*00002800000000000000f60000000000000000000000000000002800000000000000f700000000
*00000000000000000000002800000000000000f800000000000000000000000000000028000000
*00000000f90000000000000000000000000000002800000000000000fa00000000000000000000
*00000000002800000000000000fb0000000000000000000000000000002800000000000000fc00
*00000000000000000000000000002800000000000000fd00000000000000000000000000000028
*00000000000000fe0000000000000000000000000000002800000000000000ff00000000000000
*000000000000000028000000000000010000000000000000000000000000000028000000000000
*010100000000000000000000000000000028000000000000010200000000000000000000000000
*000028000000000000010300000000000000000000000000000028000000000000010400000000
*000000000000000000000028000000000000010500000000000000000000000000000028000000
*000000010600000000000000000000000000000028000000000000010700000000000000000000
*000000000028000000000000010800000000000000000000000000000028000000000000010900
*000000000000000000000000000028000000000000010a00000000000000000000000000000028
*000000000000010b00000000000000000000000000000028000000000000010c00000000000000
*000000000000000028000000000000010d00000000000000000000000000000028000000000000
*010e00000000000000000000000000000028000000000000010f00000000000000000000000000
*000029000000000000011000000000000000000000000000000029000000000000011100000000
*00000000000000000000002a00000000000001120000000000000000000000000000002b000000
*00000001130000000000000000000000000000002b000000000000011400000000000000000000
*00000000002b00000000000001150000000000000000000000000000002b000000000000011600
*00000000000000000000000000002b00000000000001170000000000000000000000000000002b
*00000000000001180000000000000000000000000000002b000000000000011900000000000000
*00000000000000002b000000000000011a0000000000000000000000000000002b000000000000
*011b0000000000000000000000000000002b000000000000011c00000000000000000000000000
*00002b000000000000011d0000000000000000000000000000002b000000000000011e00000000
*00000000000000000000002b000000000000011f0000000000000000000000000000002b000000
*00000001200000000000000000000000000000002b000000000000012100000000000000000000
*00000000002b00000000000001220000000000000000000000000000002b000000000000012300
*00000000000000000000000000002c00000000000001240000000000000000000000000000002c
*00000000000001250000000000000000000000000000002c000000000000012600000000000000
*00000000000000002d00000000000001270000000000000000000000000000002e300000000000
*000000000000000000002f000108000000700000006f0000007200000074000000610000006200
*00006c00000065010c0000006500000078000000700000006500000072000000690000006d0000
*00650000006e00000074000000610000006c0110000000650000006b0000006d00000065000000
*740000007400000040000000670000006d00000061000000690000006c0000002e000000630000
*006f0000006d000000000000000000000000000000000000010001140000006e0000006f000000
*6e0000002d000000700000006f000000720000007400000061000000620000006c000000650000
*0020000000280000004d0000005000000054000000430000007300000029010c00000065000000
*78000000700000006500000072000000690000006d000000650000006e00000074000000610000
*006c0110000000650000006b0000006d0000006500000074000000740000004000000067000000
*6d00000061000000690000006c0000002e000000630000006f0000006d06000000000000000301
*030102240000005400000068000000690000007300000020000000740000007900000070000000
*65000000200000006d000000610000007900000020000000620000006500000020000000620000
*006500000073000000740000002000000072000000650000006100000064000000200000006900
*00006e0000006600000069000000780000002e0000002000000041000000200107010202000000
*630000002001040100000000000000000300000000000000000000000000000001020200000020
*0000006d0102060000002000000069000000730000002000000061000000200104010000000000
*000001280000000000000030000000000000003101020100000020010702010000006d01020b00
*00002000000074000000680000006100000074000000200000006d000000610000007000000073
*0000000a0102100000002000000076000000610000006c00000075000000650000007300000020
*0000006f0000006600000020000000740000007900000070000000650000002001070201000000
*63010209000000200000007400000068000000720000006f000000750000006700000068000000
*2001070204000000750000006e000000690000007401021300000020000000740000006f000000
*2000000076000000610000006c000000750000006500000073000000200000006f000000660000
*00200000007400000079000000700000006500000020010702010000006d0102040000002e0000
*0020000000410000002001070201000000630102010000002d0104010000000000000000030000
*000000000000000000000000000101020a000000200000006d0000006100000079000000200000
*00610000006c000000730000006f0000000a010229000000200000007300000075000000700000
*00700000006c00000079000000200000006f000000700000006500000072000000610000007400
*0000690000006f0000006e00000073000000200000007700000068000000690000006300000068
*000000200000007400000061000000630000006b0000002d0000006f0000006e00000020000000
*610000006e0000006f000000740000006800000065000000720000002001070201000000630102
*1000000020000000740000006f00000020000000610000006e0000002000000065000000780000
*00690000007300000074000000690000006e000000670000002001040100000000000000012800
*00000000000030000000000000003101020100000020010702010000006d01020d000000200000
*006f0000006e00000020000000740000006800000065000000200000006c000000650000006600
*0000740000000a010250000000200000006f000000720000002000000072000000690000006700
*000068000000740000002e00000020000000540000006800000065000000730000006500000020
*0000007300000070000000650000006300000069000000610000006c000000690000007a000000
*650000006400000020000000720000006500000064000000750000006300000074000000690000
*006f0000006e00000073000000200000006d000000610000007900000020000000620000006500
*0000200000006d0000006f00000072000000650000002000000065000000660000006600000069
*0000006300000069000000650000006e0000007400000020000000690000006e00000020000000
*730000006f0000006d00000065000000200000007300000063000000650000006e000000610000
*0072000000690000006f000000730000000a01022400000020000000610000006e000000640000
*002000000061000000720000006500000020000000750000007300000065000000640000002000
*00007700000068000000650000006e00000020000000610000007000000070000000720000006f
*000000700000007200000069000000610000007400000065000000200000006200000079000000
*20000000610000002001020900000047000000650000006e000000650000007200000061000000
*740000006f0000007201020c0000002e0000002000000054000000680000006500000020000000
*6e000000610000006d000000650000007300000020010401000000000000000006000000000000
*0000000000000000000101020500000020000000610000006e0000006400000020010401000000
*0000000000050000000000000000000000000000000101020600000020000000770000006f0000
*00720000006b0000000a023d00000020000000620000007900000020000000610000006e000000
*610000006c0000006f000000670000007900000020000000740000006f00000020000000740000
*0068000000650000002000000073000000790000006e0000006f0000006e000000790000006d00
*00006f0000007500000073000000200000006f0000007000000065000000720000006100000074
*000000690000006f0000006e0000007300000020000000690000006e0000002000000074000000
*6800000065000000200000006c000000690000007300000074000000200000006d0000006f0000
*006e0000006f00000069000000640000002e0000000a010301024c000000540000006800000069
*0000007300000020000000630000006c0000006100000073000000730000002000000064000000
*650000006c000000690000006200000065000000720000006100000074000000650000006c0000
*00790000002000000061000000760000006f000000690000006400000073000000200000006600
*0000750000006e0000006300000074000000690000006f0000006e000000610000006c0000002d
*000000640000006500000070000000650000006e00000064000000650000006e00000063000000
*6900000065000000730000002c00000020000000730000006f0000002000000074000000680000
*0061000000740000002000000028000000290000002000000063000000610000006e0000002000
*0000620000006500000020000000610000002001070201000000630102090000002d0000005200
*00006500000064000000750000006300000065000000720000000a010209000000200000006600
*00006f0000007200000020000000610000006c0000006c00000020010702010000006301024a00
*00002c00000020000000610000006e0000006400000020000000730000006f000000200000006d
*000000610000006e0000007900000020000000630000006f0000006d0000006d0000006f000000
*6e0000002000000072000000650000006400000075000000630000006500000072000000730000
*002000000063000000610000006e00000020000000770000006f000000720000006b0000002000
*00006f000000760000006500000072000000200000006d000000750000006c0000007400000069
*000000700000006c00000065000000200000007400000079000000700000006500000073000000
*2c00000020000000660000006f0000007200000020000000690000006e00000073000000740000
*00610000006e00000063000000650000002c0000000a0102200000002000000046000000690000
*0072000000730000007400000020000000610000006e00000064000000200000004c0000006100
*00007300000074000000200000006d000000610000007900000020000000720000006500000064
*00000075000000630000006500000020000000620000006f000000740000006800000020010702
*010000006101020500000020000000610000006e00000064000000200104010000000000000001
*290000000000000030000000000000003201020100000020010702010000006101020a0000002e
*0000002000000053000000690000006e0000006300000065000000200000006100000020010209
*00000047000000650000006e000000650000007200000061000000740000006f00000072010215
*000000200000006800000061000000730000002000000061000000200000006600000069000000
*78000000650000006400000020000000650000006c000000650000006d000000650000006e0000
*00740000000a01025a00000020000000740000007900000070000000650000002c000000200000
*0074000000680000006500000020000000690000006e0000007000000075000000740000002000
*0000740000006f0000002000000074000000680000006500000020000000720000006500000064
*000000750000006300000065000000720000002000000069000000730000002000000067000000
*650000006e0000006500000072000000610000006c0000006c00000079000000200000006b0000
*006e0000006f000000770000006e00000020000000610000006e00000064000000200000006500
*0000780000007400000072000000610000006300000074000000690000006e0000006700000020
*00000066000000720000006f0000006d0000002000000074000000680000006500000020000000
*6d0000006f0000006e0000006f0000006900000064000000200000007500000073000000750000
*00610000006c0000006c000000790000000a01025a000000200000006900000073000000200000
*0073000000750000006600000066000000690000006300000069000000650000006e0000007400
*000020000000740000006f00000020000000660000006900000078000000200000007400000068
*0000006500000020000000720000006500000073000000750000006c0000007400000020000000
*740000007900000070000000650000002e00000020000000430000006f0000006d000000620000
*00690000006e00000061000000740000006f000000720000007300000020000000610000007200
*00006500000020000000610000007600000061000000690000006c00000061000000620000006c
*0000006500000020000000660000006f00000072000000200000006d0000006f00000073000000
*74000000200000007300000063000000650000006e0000006100000072000000690000006f0000
*00730000002000000077000000680000006500000072000000650000000a010258000000200000
*0074000000680000006900000073000000200000006900000073000000200000006e0000006f00
*000074000000200000007400000068000000650000002000000063000000610000007300000065
*0000002c00000020000000610000006e0000006400000020000000740000006800000065000000
*200000006600000065000000770000002000000072000000650000006d00000061000000690000
*006e000000690000006e0000006700000020000000630000006100000073000000650000007300
*00002000000063000000610000006e000000200000006200000065000000200000006800000061
*0000006e000000640000006c000000650000006400000020000000620000007900000020000000
*7500000073000000690000006e0000006700000020000000610000006e00000020000000650000
*0078000000700000006c00000069000000630000006900000074000000200000000a0212000000
*200000007400000079000000700000006500000020000000610000006e0000006e0000006f0000
*00740000006100000074000000690000006f0000006e0000002e0000000a030102140000004d00
*0000690000006e000000690000006d000000610000006c00000020000000640000006500000066
*000000690000006e0000006900000074000000690000006f0000006e0000003a00000020010401
*00000000000000000400000000000000000000000000000001010204000000200000006f000000
*72000000200104010000000000000000050000000000000000000000000000000102010000000a
*000000000000000403010217000000430000006f0000006e000000760000006500000072000000
*7400000020000000610000002000000076000000610000006c0000007500000065000000200000
*00690000006e000000740000006f00000020000000610000002001040100000000000000012800
*00000000000030000000000000003102010000000a000000000000000503010214000000410000
*007000000070000000650000006e00000064000000200000006100000020000000760000006100
*00006c000000750000006500000020000000740000006f00000020000000610000002001040100
*000000000000012800000000000000300000000000000031022400000020000000660000006f00
*0000720000002000000075000000730000006500000020000000690000006e000000200000006c
*0000006500000066000000740000002d000000740000006f0000002d0000007200000069000000
*670000006800000074000000200000007200000065000000640000007500000063000000740000
*00690000006f0000006e0000000a00000000000000060301021700000050000000720000006500
*000070000000650000006e0000006400000020000000610000002000000076000000610000006c
*0000007500000065000000200000006f0000006e000000740000006f0000002000000061000000
*200104010000000000000001280000000000000030000000000000003102280000002000000066
*0000006f0000007200000020000000750000007300000065000000200000006400000075000000
*72000000690000006e000000670000002000000072000000690000006700000068000000740000
*002d000000740000006f0000002d0000006c000000650000006600000074000000200000007200
*00006500000064000000750000006300000074000000690000006f0000006e0000000a00000000
*00000007030102080000004100000070000000700000006c000000790000002000000061000000
*200104010000000000000000030000000000000000000000000000000101020600000020000000
*740000006f00000020000000610000002001040100000000000000012a00000000000000300000
*000000000033024b00000020000000630000006f0000006e000000740000006100000069000000
*6e00000065000000720000002c0000002000000061000000660000007400000065000000720000
*00200000006d000000610000007000000070000000690000006e00000067000000200000007400
*0000680000006500000020000000630000006f0000006e00000074000000650000006e00000074
*0000007300000020000000690000006e000000740000006f000000200000006100000020000000
*7300000075000000690000007400000061000000620000006c0000006500000020000000660000
*006f000000720000006d00000020000000660000006f0000007200000020000000720000006500
*000064000000750000006300000074000000690000006f0000006e0000002e0000000a00000000
*00000008030102080000004100000070000000700000006c000000790000002000000061000000
*200104010000000000000000030000000000000000000000000000000101020600000020000000
*740000006f00000020000000610000002001040100000000000000012a00000000000000300000
*00000000003301021e000000200000006d000000610000007000000070000000690000006e0000
*0067000000200000006500000061000000630000006800000020000000650000006c0000006500
*00006d000000650000006e00000074000000200000007400000068000000720000006f00000075
*000000670000006800000020010401000000000000000004000000000000000000000000000000
*0102010000000a27000000000000012b000000000000012c000000000000012d00000000000001
*28000000000000012e000000000000012f00000000000001300000000000000131000000000000
*013200000000000001330000000000000134000000000000013500000000000001360000000000
*00013700000000000001380000000000000139000000000000013a000000000000013b00000000
*0000013c000000000000013d000000000000013e000000000000013f0000000000000140000000
*000000014100000000000001420000000000000143000000000000014400000000000001450000
*000000000000000000000000000100000000000000020000000000000003000000000000000400
*000000000000050000000000000006000000000000000700000000000000080000000000000009
*000000000000000a0b000000000000000300000000000000040000000000000005000000000000
*000600000000000000070000000000000008000000000000000a00000000000000090000000000
*000000000000000000000100000000000000020000000000000000000000000000000200011400
*00006e0000006f0000006e0000002d000000700000006f00000072000000740000006100000062
*0000006c0000006500000020000000280000004d00000050000000540000004300000073000000
*29010c0000006500000078000000700000006500000072000000690000006d000000650000006e
*00000074000000610000006c0110000000650000006b0000006d00000065000000740000007400
*000040000000670000006d00000061000000690000006c0000002e000000630000006f0000006d
*01000000000000000b0301022200000050000000720000006f0000007600000069000000640000
*0065000000730000002000000061000000200000006d0000006500000063000000680000006100
*00006e00000069000000730000006d00000020000000660000006f000000720000002000000074
*000000680000006500000020000000550000005400000046000000380000002001040100000000
*000000012800000000000000300000000000000031023600000020000000740000006f00000020
*0000007200000065000000700000006f000000720000007400000020000000690000006e000000
*76000000610000006c000000690000006400000020000000630000006800000061000000720000
*0061000000630000007400000065000000720000007300000020000000740000006f0000002000
*00006f0000006e00000065000000200000006f00000072000000200000006d0000006f00000072
*00000065000000200000006d0000006f0000006e0000006f000000690000006400000073000000
*2e0000000a2a000000000000012b000000000000012c000000000000012d000000000000012800
*0000000000012e000000000000012f000000000000013000000000000001310000000000000132
*000000000000013300000000000001340000000000000135000000000000013600000000000001
*3700000000000001380000000000000139000000000000013a000000000000013b000000000000
*013c000000000000013d000000000000013e000000000000013f00000000000001400000000000
*000141000000000000014200000000000001430000000000000144000000000000014500000000
*000000000000000000000001000000000000000200000000000000030000000000000004000000
*000000000500000000000000060000000000000007000000000000000800000000000000090000
*00000000000a000000000000000b000000000000000c000000000000000d03000000000000000b
*000000000000000d000000000000000c000000000000000000000000000000030001140000006e
*0000006f0000006e0000002d000000700000006f00000072000000740000006100000062000000
*6c0000006500000020000000280000004d0000005000000054000000430000007300000029010c
*0000006500000078000000700000006500000072000000690000006d000000650000006e000000
*74000000610000006c0110000000650000006b0000006d00000065000000740000007400000040
*000000670000006d00000061000000690000006c0000002e000000630000006f0000006d002c00
*0000000000012b000000000000012c000000000000012d0000000000000128000000000000012e
*000000000000012f00000000000001300000000000000131000000000000013200000000000001
*330000000000000134000000000000013500000000000001360000000000000137000000000000
*01380000000000000139000000000000013a000000000000013b000000000000013c0000000000
*00013d000000000000013e000000000000013f0000000000000140000000000000014100000000
*000001420000000000000143000000000000014400000000000001450000000000000000000000
*000000000100000000000000020000000000000003000000000000000400000000000000050000
*000000000006000000000000000700000000000000080000000000000009000000000000000a00
*0000000000000b000000000000000c000000000000000d000000000000000e000000000000000f
*02000000000000000e000000000000000f00000000000000000000000000000004000114000000
*6e0000006f0000006e0000002d000000700000006f000000720000007400000061000000620000
*006c0000006500000020000000280000004d000000500000005400000043000000730000002901
*0c0000006500000078000000700000006500000072000000690000006d000000650000006e0000
*0074000000610000006c0110000000650000006b0000006d000000650000007400000074000000
*40000000670000006d00000061000000690000006c0000002e000000630000006f0000006d0100
*0000000000001003010203000000490000006600000020010702010000006d0102060000002000
*0000690000007300000020000000610000002001070201000000630102010000002d0105070000
*005200000065000000640000007500000063000000650000007201020c0000002c000000200000
*007400000068000000650000006e000000200000006d0000002000000069000000730000002001
*070102030000002800000063000000200104020000000000000000110000000000000000000000
*000000000400000000000000001000000000000000000000000000000004020300000020000000
*6d000000290102010000002d010507000000520000006500000064000000750000006300000065
*000000720102010000000a01022800000020000000200000002000000054000000680000006900
*0000730000002000000063000000610000006e0000002000000062000000650000002000000075
*00000073000000650000006400000020000000740000006f000000200000007100000075000000
*69000000630000006b0000006c000000790000002000000073000000650000006c000000650000
*006300000074000000200000006100000020010507000000520000006500000064000000750000
*0063000000650000007201020e00000020000000660000006f0000007200000020000000750000
*007300000065000000200000006100000073000000200000006100000020010401010000000000
*0001460102010000000a0102030000002000000020000000200104010100000000000001470202
*0000002e0000000a2a000000000000012b000000000000012c000000000000012d000000000000
*0128000000000000012e000000000000012f000000000000013000000000000001310000000000
*000132000000000000013300000000000001340000000000000135000000000000013600000000
*0000013700000000000001380000000000000139000000000000013a000000000000013b000000
*000000013c000000000000013d000000000000013e000000000000013f00000000000001400000
*000000000141000000000000014200000000000001430000000000000144000000000000014500
*000000000000000000000000000001000000000000000200000000000000030000000000000004
*000000000000000500000000000000060000000000000007000000000000000800000000000000
*09000000000000000a000000000000001000000000000000110000000000000012030000000000
*000010000000000000001100000000000000120000000000000000000000000000000500000000
*040000000000000013030102040000005400000068000000650000002001040100000000000000
*012800000000000000300000000000000031010201000000200107010201000000280102010000
*0027010211000000750000006e000000690000006f0000006e0000005700000069000000740000
*0068000000200000006d000000610000007000000070000000650000006e000000640102010000
*00270102010000002c01040100000000000000001d000000000000000000000000000000050201
*00000029022100000020000000660000006f0000007200000020000000630000006f0000006e00
*00007400000061000000690000006e000000650000007200000073000000200000006600000075
*0000006c0000006c000000200000006f00000066000000200000006d0000006f0000006e000000
*6f0000006900000064000000730000002e0000000a000000000000001603024d00000050000000
*6f0000006c000000790000006d0000006f00000072000000700000006800000069000000630000
*0020000000630000006f0000006e0000007400000061000000690000006e000000650000007200
*000073000000200000007400000068000000610000007400000020000000770000006500000020
*00000063000000610000006e00000020000000730000007500000070000000700000006c000000
*7900000020000000610000006e000000200000006f000000700000006500000072000000610000
*0074000000690000006f0000006e00000020000000740000006f00000020000000680000006100
*00006e000000640000006c0000006500000020000000750000006e000000690000006f0000006e
*0000007300000020000000770000006900000074000000680000000a0000000000000019030102
*040000005400000068000000650000002001040100000000000000012800000000000000300000
*0000000000310102010000002001070102010000002801040100000000000000001e0000000000
*00000000000000000000050102010000002c01040100000000000000001d000000000000000000
*0000000000000502010000002902010000000a000000000000001c0301021d0000004100000020
*000000430000006f0000006e0000007400000061000000690000006e0000006500000072000000
*200000007300000075000000690000007400000061000000620000006c00000065000000200000
*00660000006f000000720000002000000074000000680000006500000020010402000000000000
*00001a000000000000000000000000000000050000000000000000190000000000000000000000
*000000000501020100000020010401000000000000000128000000000000003000000000000000
*3102010000000a33000000000000012b000000000000012c000000000000012d00000000000001
*28000000000000012e000000000000012f00000000000001300000000000000131000000000000
*013200000000000001330000000000000134000000000000013500000000000001360000000000
*00013700000000000001380000000000000139000000000000013a000000000000013b00000000
*0000013c000000000000013d000000000000013e000000000000013f0000000000000140000000
*000000014100000000000001420000000000000143000000000000014400000000000001450000
*000000000000000000000000000100000000000000020000000000000003000000000000000400
*000000000000050000000000000006000000000000000700000000000000080000000000000009
*000000000000000a00000000000000130000000000000014000000000000001500000000000000
*16000000000000001700000000000000180000000000000019000000000000001a000000000000
*001b000000000000001c000000000000001d000000000000001e0c000000000000001c00000000
*0000001d000000000000001e0000000000000019000000000000001a000000000000001b000000
*000000001600000000000000180000000000000017000000000000001300000000000000140000
*00000000001500000000000000000000000000000006000108000000700000006f000000720000
*007400000061000000620000006c00000065010c00000065000000780000007000000065000000
*72000000690000006d000000650000006e00000074000000610000006c0110000000650000006b
*0000006d00000065000000740000007400000040000000670000006d0000006100000069000000
*6c0000002e000000630000006f0000006d05000000000000001f03010202000000610000002001
*040100000000000000002800000000000000000000000000000006010219000000200000007400
*000072000000610000006e00000073000000660000006f000000720000006d0000006500000072
*000000200000007400000068000000610000007400000020000000740000007200000065000000
*610000007400000073000000200104010000000000000001480000000000000030000000000000
*003401020400000020000000610000007300000020010401000000000000000149000000000000
*003500000000000000360102010000000a01021500000020000000540000006800000069000000
*73000000200000006c00000065000000740000007300000020000000790000006f000000750000
*002000000075000000730000006500000020000000610000002001020a00000042000000790000
*007400000065000000530000007400000072000000690000006e00000067010206000000200000
*006100000073000000200000006100000020010401000000000000000149000000000000003500
*0000000000003601022000000020000000730000006f0000007500000072000000630000006500
*000020000000770000006900000074000000680000006f00000075000000740000002000000067
*0000006f000000690000006e00000067000000200000007400000068000000720000006f000000
*750000006700000068000000200000006100000020010401000000000000000128000000000000
*00300000000000000031010212000000200000007400000072000000610000006e000000730000
*00660000006f000000720000006d0000006500000072000000200000006c000000690000006b00
*000065000000200102040000005500000054000000460000003802010000000a00000000000000
*220301020200000061000000200104010000000000000000280000000000000000000000000000
*0006024d000000200000007400000072000000610000006e00000073000000660000006f000000
*720000006d00000065000000720000002000000074000000680000006100000074000000200000
*0061000000730000006b00000073000000200000006f0000006e0000006c000000790000002000
*0000660000006f0000007200000020000000740000006800000065000000200000007600000061
*0000006c00000075000000650000007300000020000000630000006f0000006e00000074000000
*61000000690000006e000000650000006400000020000000690000006e00000020000000610000
*006e00000020000000690000006e00000064000000650000007800000065000000640000002000
*0000630000006f0000006e0000007400000061000000690000006e00000065000000720000000a
*000000000000002503010202000000610000002001040100000000000000002800000000000000
*0000000000000000060241000000200000007400000072000000610000006e0000007300000066
*0000006f000000720000006d000000650000007200000020000000740000006800000061000000
*740000002000000061000000730000006b00000073000000200000006f0000006e0000006c0000
*007900000020000000660000006f00000072000000200000007400000068000000650000002000
*00006b000000650000007900000073000000200000006f0000006600000020000000610000006e
*00000020000000690000006e000000640000006500000078000000650000006400000020000000
*630000006f0000006e0000007400000061000000690000006e00000065000000720000000a0000
*000000000028030102130000006d000000690000006e000000690000006d000000610000006c00
*000020000000640000006500000066000000690000006e0000006900000074000000690000006f
*0000006e0000002001040100000000000000002a00000000000000000000000000000006010204
*000000200000006f000000720000002001040100000000000000002b0000000000000000000000
*000000000602010000000a000000000000002d030102080000004100000070000000700000006c
*000000790000002000000061000000200104010000000000000000030000000000000000000000
*000000000101021f00000020000000640000006900000072000000650000006300000074000000
*6c0000007900000020000000740000006f00000020000000740000006800000065000000200000
*00650000006c000000650000006d000000650000006e0000007400000073000000200000006f00
*000066000000200000006100000020010401000000000000000028000000000000000000000000
*0000000602010000000a38000000000000012b000000000000012c000000000000012d00000000
*00000128000000000000012e000000000000012f00000000000001300000000000000131000000
*000000013200000000000001330000000000000134000000000000013500000000000001360000
*00000000013700000000000001380000000000000139000000000000013a000000000000013b00
*0000000000013c000000000000013d000000000000013e000000000000013f0000000000000140
*000000000000014100000000000001420000000000000143000000000000014400000000000001
*450000000000000000000000000000000100000000000000020000000000000003000000000000
*000400000000000000050000000000000006000000000000000700000000000000080000000000
*000009000000000000000a000000000000001f0000000000000020000000000000002100000000
*000000220000000000000023000000000000002400000000000000250000000000000026000000
*000000002700000000000000280000000000000029000000000000002a000000000000002b0000
*00000000002c000000000000002d000000000000002e000000000000002f110000000000000028
*0000000000000029000000000000002a000000000000002b000000000000002c00000000000000
*250000000000000026000000000000002700000000000000220000000000000023000000000000
*0024000000000000001f00000000000000200000000000000021000000000000002d0000000000
*00002e000000000000002f000000000000000000000000000000070001270000006e0000006f00
*00006e0000002d000000700000006f000000720000007400000061000000620000006c00000065
*00000020000000280000004d000000500000005400000043000000730000002c00000020000000
*4f0000007600000065000000720000006c0000006f000000610000006400000065000000640000
*00530000007400000072000000690000006e000000670000007300000029010c00000065000000
*78000000700000006500000072000000690000006d000000650000006e00000074000000610000
*006c0110000000650000006b0000006d0000006500000074000000740000004000000067000000
*6d00000061000000690000006c0000002e000000630000006f0000006d06000000000000003003
*010202000000410000002001040100000000000000012800000000000000300000000000000031
*01023a000000200000006f00000066000000200000007000000061000000720000007400000069
*000000610000006c00000020000000690000006e000000660000006f000000720000006d000000
*6100000074000000690000006f0000006e0000002000000061000000620000006f000000750000
*0074000000200000006c0000006f000000630000006100000074000000690000006f0000006e00
*00007300000020000000690000006e000000200000006100000020000000730000006f00000075
*0000007200000063000000650000002000000066000000690000006c000000650000002e000000
*0a025f000000200000002000000020000000540000006800000069000000730000002000000069
*0000007300000020000000700000006f0000006c000000790000006d0000006f00000072000000
*7000000068000000690000006300000020000000690000006e0000002000000074000000680000
*0065000000200000006b000000690000006e00000064000000200000006f000000660000002000
*0000690000006e000000660000006f000000720000006d0000006100000074000000690000006f
*0000006e00000020000000790000006f000000750000002000000077000000610000006e000000
*7400000020000000740000006f000000200000006d00000061000000690000006e000000740000
*0061000000690000006e0000002000000061000000620000006f00000075000000740000002000
*00006500000061000000630000006800000020000000730000006f000000750000007200000063
*000000650000002000000066000000690000006c000000650000002e0000000a00000000000000
*3703023f000000430000006f0000006d0000007000000075000000740000006500000020000000
*740000006800000065000000200000006c0000006f000000630000006100000074000000690000
*006f0000006e000000200000006f00000066000000200000007400000068000000650000002000
*00006e000000650000007800000074000000200000007300000074000000610000006e00000064
*00000061000000720000006400000020000000380000002d000000630000006f0000006c000000
*750000006d0000006e00000020000000610000006c00000069000000670000006e000000650000
*0064000000200000007400000061000000620000000a0000000000000038030102350000006c00
*000069000000660000007400000020000000690000006e000000660000006f000000720000006d
*0000006100000074000000690000006f0000006e0000002000000061000000620000006f000000
*7500000074000000200000006100000020000000730000006f0000007500000072000000630000
*00650000002000000066000000690000006c0000006500000020000000690000006e0000007400
*00006f000000200000006100000020000000730000007400000061000000720000007400000069
*0000006e0000006700000020010401000000000000000030000000000000000000000000000000
*07020f00000020000000660000006f000000720000002000000074000000680000006100000074
*0000002000000066000000690000006c000000650000000a000000000000003903026a00000065
*000000780000007400000072000000610000006300000074000000200000007000000061000000
*720000007400000069000000610000006c00000020000000690000006e000000660000006f0000
*00720000006d0000006100000074000000690000006f0000006e00000020000000610000006200
*00006f000000750000007400000020000000740000006800000065000000200000006300000075
*0000007200000072000000650000006e0000007400000020000000630000006f0000006c000000
*750000006d0000006e0000002c000000200000006500000076000000650000006e000000200000
*00690000006e000000200000007400000068000000650000002000000061000000620000007300
*0000650000006e0000006300000065000000200000006f00000066000000200000006b0000006e
*0000006f000000770000006c00000065000000640000006700000065000000200000006f000000
*660000002000000074000000680000006500000020000000730000006f00000075000000720000
*0063000000650000002000000066000000690000006c000000650000000a000000000000003a03
*024600000065000000780000007400000072000000610000006300000074000000200000007000
*000061000000720000007400000069000000610000006c00000020000000690000006e00000066
*0000006f000000720000006d0000006100000074000000690000006f0000006e00000020000000
*61000000620000006f000000750000007400000020000000740000006800000065000000200000
*0063000000750000007200000072000000650000006e00000074000000200000006c0000006900
*00006e00000065000000200000006e000000750000006d00000062000000650000007200000020
*000000690000006600000020000000700000006f00000073000000730000006900000062000000
*6c000000650000000a000000000000003b03023c00000065000000780000007400000072000000
*610000006300000074000000200000007400000068000000650000002000000073000000740000
*00610000006e0000006400000061000000720000006400000020000000660000006f0000007200
*00006d000000610000007400000020000000660000006f0000007200000020000000610000006e
*000000200000006100000062000000730000006f0000006c000000750000007400000065000000
*20000000730000006f0000007500000072000000630000006500000020000000700000006f0000
*00730000006900000074000000690000006f0000006e0000000a36000000000000012b00000000
*0000012c000000000000012d0000000000000128000000000000012e000000000000012f000000
*000000013000000000000001310000000000000132000000000000013300000000000001340000
*000000000135000000000000013600000000000001370000000000000138000000000000013900
*0000000000013a000000000000013b000000000000013c000000000000013d000000000000013e
*000000000000013f00000000000001400000000000000141000000000000014200000000000001
*430000000000000144000000000000014500000000000000000000000000000001000000000000
*000200000000000000030000000000000004000000000000000500000000000000060000000000
*00000700000000000000080000000000000009000000000000000a000000000000000b00000000
*0000000c000000000000000d000000000000003000000000000000310000000000000032000000
*000000003300000000000000340000000000000035000000000000003600000000000000370000
*0000000000380000000000000039000000000000003a000000000000003b0c0000000000000037
*000000000000003000000000000000340000000000000033000000000000003200000000000000
*3100000000000000360000000000000035000000000000003a0000000000000039000000000000
*0038000000000000003b000000000000000000000000000000080001270000006e0000006f0000
*006e0000002d000000700000006f000000720000007400000061000000620000006c0000006500
*000020000000280000004d000000500000005400000043000000730000002c000000200000004f
*0000007600000065000000720000006c0000006f00000061000000640000006500000064000000
*530000007400000072000000690000006e000000670000007300000029010c0000006500000078
*000000700000006500000072000000690000006d000000650000006e0000007400000061000000
*6c0110000000650000006b0000006d00000065000000740000007400000040000000670000006d
*00000061000000690000006c0000002e000000630000006f0000006d08000000000000003c0301
*0202000000410000002001040100000000000000000b0000000000000000000000000000000202
*26000000200000007400000072000000610000006e00000073000000660000006f000000720000
*006d00000065000000720000002000000074000000680000006100000074000000200000007300
*00007400000072000000690000007000000073000000200000006f000000750000007400000020
*0000006e00000065000000770000006c000000690000006e00000065000000730000000a000000
*000000003e03010202000000410000002001040100000000000000000b00000000000000000000
*000000000002010236000000200000007400000072000000610000006e00000073000000660000
*006f000000720000006d0000006500000072000000200000007400000068000000610000007400
*000020000000730000007400000072000000690000007000000073000000200000006f00000075
*0000007400000020000000610000006e0000007900000020000000630000006800000061000000
*720000006100000063000000740000006500000072000000200000006d00000061000000740000
*006300000068000000650000006400000020000000620000007900000020010401000000000000
*00014a0000000000000030000000000000003702010000000a0000000000000040030102020000
*00410000002001040100000000000000000b0000000000000000000000000000000201021b0000
*00200000007400000072000000610000006e00000073000000660000006f000000720000006d00
*000065000000720000002000000074000000680000006100000074000000200000006200000072
*00000065000000610000006b000000730000002000000061000000200104010000000000000001
*490000000000000035000000000000003601020100000020010401000000000000000028000000
*0000000000000000000000000601022000000020000000690000006e000000740000006f000000
*2000000064000000690000007300000074000000690000006e0000006300000074000000200000
*006c000000690000006e00000065000000730000002c0000002000000066000000650000006500
*000064000000690000006e00000067000000200000006100000020010401000000000000000149
*000000000000003500000000000000360102010000002001040100000000000000000300000000
*000000000000000000000001021400000020000000650000006100000063000000680000002000
*00006c000000690000006e0000006500000020000000690000006e000000200000007400000075
*000000720000006e0000002e0000000a0000000000000041030102020000004100000020010401
*00000000000000000b0000000000000000000000000000000201021b0000002000000074000000
*72000000610000006e00000073000000660000006f000000720000006d00000065000000720000
*002000000074000000680000006100000074000000200000006200000072000000650000006100
*00006b000000730000002000000061000000200104010000000000000001490000000000000035
*000000000000003601020100000020010401000000000000000028000000000000000000000000
*0000000601022000000020000000690000006e000000740000006f000000200000006400000069
*0000007300000074000000690000006e000000630000007400000020000000770000006f000000
*7200000064000000730000002c0000002000000066000000650000006500000064000000690000
*006e00000067000000200000006100000020010401000000000000000149000000000000003500
*000000000000360102010000002001040100000000000000000300000000000000000000000000
*00000102130000002000000065000000610000006300000068000000200000006c000000690000
*006e0000006500000020000000690000006e000000200000007400000075000000720000006e00
*00000a000000000000004203010223000000450000007800000074000000720000006100000063
*0000007400000020000000740000006800000065000000200000006d0000006100000074000000
*6300000068000000650000006400000020000000770000006f0000007200000064000000730000
*002000000066000000720000006f0000006d000000200000007400000068000000650000002001
*040100000000000000004100000000000000000000000000000008010201000000200104010000
*000000000001280000000000000030000000000000003102010000000a00000000000000430301
*022300000045000000780000007400000072000000610000006300000074000000200000007400
*00006800000065000000200000006d000000610000007400000063000000680000006500000064
*000000200000006c000000690000006e0000006500000073000000200000006600000072000000
*6f0000006d00000020000000740000006800000065000000200104010000000000000000400000
*000000000000000000000000000801020100000020010401000000000000000128000000000000
*0030000000000000003102010000000a000000000000004403025e000000550000007400000069
*0000006c0000006900000074000000790000002000000066000000750000006e00000063000000
*74000000690000006f0000006e00000020000000740000006f0000002000000065000000780000
*00740000007200000061000000630000007400000020000000770000006f000000720000006400
*000073000000200000007500000073000000690000006e00000067000000200000006100000063
*00000063000000750000006d000000750000006c00000061000000740000006f00000072000000
*2c00000020000000690000006e000000730000006900000064000000650000002d000000770000
*006f00000072000000640000002c00000020000000610000006e00000064000000200000007500
*00006e00000074000000690000006c0000002d0000006e0000006500000078000000740000002d
*000000770000006f0000007200000064000000200000006d0000006f0000006e0000006f000000
*6900000064000000730000000a000000000000004503025e000000550000007400000069000000
*6c0000006900000074000000790000002000000066000000750000006e00000063000000740000
*00690000006f0000006e00000020000000740000006f0000002000000065000000780000007400
*000072000000610000006300000074000000200000006c000000690000006e0000006500000073
*000000200000007500000073000000690000006e00000067000000200000006100000063000000
*63000000750000006d000000750000006c00000061000000740000006f000000720000002c0000
*0020000000690000006e000000730000006900000064000000650000002d0000006c0000006900
*00006e000000650000002c00000020000000610000006e0000006400000020000000750000006e
*00000074000000690000006c0000002d0000006e0000006500000078000000740000002d000000
*6c000000690000006e00000065000000200000006d0000006f0000006e0000006f000000690000
*0064000000730000000a34000000000000012b000000000000012c000000000000012d00000000
*00000128000000000000012e000000000000012f00000000000001300000000000000131000000
*000000013200000000000001330000000000000134000000000000013500000000000001360000
*00000000013700000000000001380000000000000139000000000000013a000000000000013b00
*0000000000013c000000000000013d000000000000013e000000000000013f0000000000000140
*000000000000014100000000000001420000000000000143000000000000014400000000000001
*450000000000000000000000000000000100000000000000020000000000000003000000000000
*000400000000000000050000000000000006000000000000000700000000000000080000000000
*000009000000000000000a000000000000000b000000000000000c000000000000000d00000000
*0000003c000000000000003d000000000000003e000000000000003f0000000000000040000000
*000000004100000000000000420000000000000043000000000000004400000000000000450a00
*000000000000410000000000000042000000000000003e000000000000003f0000000000000044
*00000000000000400000000000000043000000000000003c000000000000003d00000000000000
*4500000000000000000000000000000009000108000000700000006f0000007200000074000000
*61000000620000006c00000065010c000000650000007800000070000000650000007200000069
*0000006d000000650000006e00000074000000610000006c0110000000650000006b0000006d00
*000065000000740000007400000040000000670000006d00000061000000690000006c0000002e
*000000630000006f0000006d002a000000000000012b000000000000012c000000000000012d00
*00000000000128000000000000012e000000000000012f00000000000001300000000000000131
*000000000000013200000000000001330000000000000134000000000000013500000000000001
*36000000000000013700000000000001380000000000000139000000000000013a000000000000
*013b000000000000013c000000000000013d000000000000013e000000000000013f0000000000
*000140000000000000014100000000000001420000000000000143000000000000014400000000
*000001450000000000000000000000000000000100000000000000020000000000000003000000
*000000000400000000000000050000000000000006000000000000000700000000000000080000
*000000000009000000000000000a00000000000000460000000000000047000000000000004803
*000000000000004600000000000000470000000000000048000000000000000000000000000000
*0a000108000000700000006f000000720000007400000061000000620000006c00000065010c00
*00006500000078000000700000006500000072000000690000006d000000650000006e00000074
*000000610000006c0110000000650000006b0000006d0000006500000074000000740000004000
*0000670000006d00000061000000690000006c0000002e000000630000006f0000006d06000000
*000000014b03010214000000410000006e000000200000004c0000005a00000037000000380000
*0020000000630000006f0000006d00000070000000720000006500000073000000730000006900
*00006e000000670000002001040100000000000000002800000000000000000000000000000006
*01021b0000002c0000002000000077000000680000006900000063000000680000002000000073
*0000007500000070000000700000006f0000007200000074000000730000002000000065000000
*6600000066000000690000006300000069000000650000006e0000007400000020010401000000
*00000000002a00000000000000000000000000000006020c000000200000006f00000070000000
*65000000720000006100000074000000690000006f0000006e000000730000000a000000000000
*004a030102130000006100000020000000740000007900000070000000650000002d0000006300
*00006f0000006e00000073000000740000007200000061000000690000006e0000006500000064
*0000002001040100000000000000002d00000000000000000000000000000006020b0000002000
*00006f0000007000000065000000720000006100000074000000690000006f0000006e0000000a
*000000000000004b0301021c000000630000006f0000006e000000740000007200000075000000
*630000007400000020000000610000006e000000200000004c0000005a00000037000000380000
*002d000000630000006f0000006d00000070000000720000006500000073000000730000006500
*000064000000200104010000000000000000280000000000000000000000000000000601020900
*0000200000007500000073000000690000006e0000006700000020000000610000002001040100
*000000000000014c00000000000000380000000000000039022a00000020000000690000006e00
*00007400000065000000720000006e000000610000006c0000006c000000790000002c00000020
*000000720000006500000071000000750000006900000072000000650000007300000020000000
*610000006e00000020000000690000006e0000007300000074000000610000006e000000630000
*0065000000200000006f00000066000000200000004f00000072000000640000002e0000000a00
*0000000000004c0301021c000000630000006f0000006e00000074000000720000007500000063
*0000007400000020000000610000006e000000200000004c0000005a0000003700000038000000
*2d000000630000006f0000006d0000007000000072000000650000007300000073000000650000
*006400000020010401000000000000000028000000000000000000000000000000060236000000
*200000007500000073000000690000006e000000670000002000000061000000200000006c0000
*0069000000730000007400000020000000690000006e0000007400000065000000720000006e00
*0000610000006c0000006c000000790000002c0000002000000072000000650000007100000075
*0000006900000072000000650000007300000020000000610000006e0000002000000069000000
*6e0000007300000074000000610000006e0000006300000065000000200000006f000000660000
*002000000045000000710000002e0000000a000000000000004d03022a00000051000000750000
*0069000000630000006b000000430000006800000065000000630000006b000000200000007000
*0000720000006f00000070000000650000007200000074000000790000003a0000002000000064
*00000065000000630000006f0000006400000065000000200000002e0000002000000065000000
*6e000000630000006f0000006400000065000000200000003d0000002000000069000000640000
*000a000000000000004e03022c000000510000007500000069000000630000006b000000430000
*006800000065000000630000006b0000002000000070000000720000006f000000700000006500
*00007200000074000000790000003a000000200000006400000065000000630000006f00000064
*00000065000000200000002e00000020000000650000006e000000630000006f00000064000000
*650000004500000071000000200000003d0000002000000069000000640000000a3e0000000000
*00012b000000000000012c000000000000012d0000000000000128000000000000012e00000000
*0000012f0000000000000130000000000000013100000000000001320000000000000133000000
*000000013400000000000001350000000000000136000000000000013700000000000001380000
*000000000139000000000000013a000000000000013b000000000000013c000000000000013d00
*0000000000013e000000000000013f000000000000014000000000000001410000000000000142
*000000000000014300000000000001440000000000000145000000000000000000000000000000
*010000000000000002000000000000000300000000000000040000000000000005000000000000
*0006000000000000000700000000000000080000000000000009000000000000000a0000000000
*00001f000000000000002000000000000000210000000000000022000000000000002300000000
*000000240000000000000025000000000000002600000000000000270000000000000028000000
*0000000029000000000000002a000000000000002b000000000000002c000000000000002d0000
*00000000002e000000000000002f0000000000000049000000000000004a000000000000004b00
*0000000000004c000000000000004d000000000000004e06000000000000004900000000000000
*4a000000000000004b000000000000004c000000000000004d000000000000004e000000000000
*0000000000000000000b0001280000006e0000006f0000006e0000002d000000700000006f0000
*00720000007400000061000000620000006c0000006500000020000000280000006f0000007600
*000065000000720000006c0000006f000000610000006400000065000000640000002000000073
*0000007400000072000000690000006e00000067000000730000002c000000200000004d000000
*5000000054000000430000007300000029010c0000006500000078000000700000006500000072
*000000690000006d000000650000006e00000074000000610000006c0110000000650000006b00
*00006d00000065000000740000007400000040000000670000006d00000061000000690000006c
*0000002e000000630000006f0000006d002a000000000000012b000000000000012c0000000000
*00012d0000000000000128000000000000012e000000000000012f000000000000013000000000
*000001310000000000000132000000000000013300000000000001340000000000000135000000
*0000000136000000000000013700000000000001380000000000000139000000000000013a0000
*00000000013b000000000000013c000000000000013d000000000000013e000000000000013f00
*000000000001400000000000000141000000000000014200000000000001430000000000000144
*000000000000014500000000000000000000000000000001000000000000000200000000000000
*030000000000000004000000000000000500000000000000060000000000000007000000000000
*00080000000000000009000000000000000a000000000000004f00000000000000500000000000
*00005103000000000000004f000000000000005000000000000000510000000000000000000000
*000000000c0001230000006e0000006f0000006e0000002d000000700000006f00000072000000
*7400000061000000620000006c0000006500000020000000280000007400000079000000700000
*00650000002000000066000000610000006d000000690000006c00000069000000650000007300
*00002c000000200000004d0000005000000054000000430000007300000029010c000000650000
*0078000000700000006500000072000000690000006d000000650000006e000000740000006100
*00006c0110000000650000006b0000006d00000065000000740000007400000040000000670000
*006d00000061000000690000006c0000002e000000630000006f0000006d030000000000000052
*03010214000000410000002000000067000000650000006e000000650000007200000061000000
*6c000000690000007a0000006100000074000000690000006f0000006e000000200000006f0000
*00660000002001020f000000440000006100000074000000610000002e0000004c000000690000
*0073000000740000002e0000006300000079000000630000006c00000065010211000000200000
*00740000006f00000020000000610000006e000000200000006100000072000000620000006900
*000074000000720000006100000072000000790000002001040100000000000000012800000000
*00000030000000000000003102390000002e000000200000004d00000061000000790000002000
*00006600000061000000690000006c00000020000000740000006f000000200000007400000065
*000000720000006d000000690000006e0000006100000074000000650000002000000066000000
*6f0000007200000020000000730000006f0000006d000000650000002000000076000000610000
*006c00000075000000650000007300000020000000690000006e00000020000000730000006f00
*00006d00000065000000200000006d0000006f0000006e0000006f000000690000006400000073
*0000002e0000000a00000000000000530301021400000041000000200000006700000065000000
*6e0000006500000072000000610000006c000000690000007a0000006100000074000000690000
*006f0000006e000000200000006f00000066000000200102100000004400000061000000740000
*00610000002e0000004c0000006900000073000000740000002e00000072000000650000007000
*000065000000610000007401021100000020000000740000006f00000020000000610000006e00
*000020000000610000007200000062000000690000007400000072000000610000007200000079
*000000200104010000000000000001280000000000000030000000000000003102390000002e00
*0000200000004d0000006100000079000000200000006600000061000000690000006c00000020
*000000740000006f000000200000007400000065000000720000006d000000690000006e000000
*61000000740000006500000020000000660000006f0000007200000020000000730000006f0000
*006d000000650000002000000076000000610000006c0000007500000065000000730000002000
*0000690000006e00000020000000730000006f0000006d00000065000000200000006d0000006f
*0000006e0000006f0000006900000064000000730000002e0000000a0000000000000054030102
*14000000410000002000000067000000650000006e0000006500000072000000610000006c0000
*00690000007a0000006100000074000000690000006f0000006e000000200000006f0000006600
*000020010213000000440000006100000074000000610000002e0000004c000000690000007300
*0000740000002e0000007200000065000000700000006c00000069000000630000006100000074
*0000006501021100000020000000740000006f00000020000000610000006e0000002000000061
*000000720000006200000069000000740000007200000061000000720000007900000020010401
*000000000000000128000000000000003000000000000000310102100000002e00000020000000
*410000006400000061000000700000007400000065000000640000002000000066000000720000
*006f0000006d000000200000000a01020100000020010c4a000000680000007400000074000000
*700000003a0000002f0000002f0000006100000075000000670000007500000073000000740000
*0073000000730000002e000000620000006c0000006f0000006700000073000000700000006f00
*0000740000002e000000630000006f0000006d0000002f00000032000000300000003000000038
*0000002f00000030000000370000002f0000006c0000006f00000073000000740000002d000000
*610000006e000000640000002d000000660000006f000000750000006e000000640000002d0000
*0069000000660000002d000000690000002d000000770000007200000069000000740000006500
*00002d0000003100000030000000380000002d000000690000006e0000002e0000006800000074
*0000006d0000006c02010000000a04000000000000005200000000000000530000000000000054
*000000000000005504000000000000005300000000000000540000000000000052000000000000
*00550000000000000000000000000000000d000108000000700000006f00000072000000740000
*0061000000620000006c00000065010c0000006500000078000000700000006500000072000000
*690000006d000000650000006e00000074000000610000006c0110000000650000006b0000006d
*00000065000000740000007400000040000000670000006d00000061000000690000006c000000
*2e000000630000006f0000006d0400000000000000560301020200000041000000200104010000
*000000000000280000000000000000000000000000000601021a00000020000000770000006800
*000069000000630000006800000020000000730000007500000070000000700000006f00000072
*000000740000007300000020000000650000006600000066000000690000006300000069000000
*650000006e000000740000002001040100000000000000002a0000000000000000000000000000
*0006022a000000200000006f000000700000006500000072000000610000007400000069000000
*6f0000006e00000073000000200000006f00000076000000650000007200000020000000720000
*00750000006e0000002d0000006c000000650000006e0000006700000074000000680000002000
*0000650000006e000000630000006f000000640000006500000064000000200000006400000061
*00000074000000610000002e0000000a0000000000000059030223000000410000002000000073
*000000690000006e000000670000006c000000650000002000000072000000750000006e000000
*200000007700000069000000740000006800000020000000610000002000000073000000740000
*0072000000690000006300000074000000200000006c000000650000006e000000670000007400
*0000680000002e0000000a000000000000005c03023c0000006e00000061000000690000007600
*000065000000200000006c00000065000000660000007400000020000000740000006f00000020
*000000720000006900000067000000680000007400000020000000650000006e00000063000000
*6f0000006400000065000000720000002c00000020000000770000006800000069000000630000
*00680000002000000063000000610000006e0000002000000068000000610000006e0000006400
*00006c0000006500000020000000690000006e00000066000000690000006e0000006900000074
*0000006500000020000000640000006100000074000000610000000a000000000000005d03022a
*000000510000007500000069000000630000006b00000043000000680000006500000063000000
*6b0000002000000070000000720000006f00000070000000650000007200000074000000790000
*003a000000200000006400000065000000630000006f0000006400000065000000200000002e00
*000020000000650000006e000000630000006f0000006400000065000000200000003d00000020
*00000069000000640000000a42000000000000012b000000000000012c000000000000012d0000
*000000000128000000000000012e000000000000012f0000000000000130000000000000013100
*000000000001320000000000000133000000000000013400000000000001350000000000000136
*000000000000013700000000000001380000000000000139000000000000013a00000000000001
*3b000000000000013c000000000000013d000000000000013e000000000000013f000000000000
*014000000000000001410000000000000142000000000000014300000000000001440000000000
*000145000000000000000000000000000000010000000000000002000000000000000300000000
*000000040000000000000005000000000000000600000000000000070000000000000008000000
*0000000009000000000000000a000000000000001f000000000000002000000000000000210000
*000000000022000000000000002300000000000000240000000000000025000000000000002600
*0000000000002700000000000000280000000000000029000000000000002a000000000000002b
*000000000000002c000000000000002d000000000000002e000000000000002f00000000000000
*56000000000000005700000000000000580000000000000059000000000000005a000000000000
*005b000000000000005c000000000000005d000000000000005e000000000000005f0a00000000
*00000056000000000000005700000000000000580000000000000059000000000000005a000000
*000000005b000000000000005e000000000000005c000000000000005f000000000000005d0000
*000000000000000000000000000e000108000000700000006f0000007200000074000000610000
*00620000006c00000065010c000000650000007800000070000000650000007200000069000000
*6d000000650000006e00000074000000610000006c0110000000650000006b0000006d00000065
*000000740000007400000040000000670000006d00000061000000690000006c0000002e000000
*630000006f0000006d040000000000000060030102020000004100000020010401000000000000
*0001280000000000000030000000000000003101020b0000002000000069000000730000002000
*00006a00000075000000730000007400000020000000610000002001040100000000000000014d
*0000000000000030000000000000003a022e000000200000007700000069000000740000006800
*0000200000006f0000006e00000065000000200000006f000000620000006a0000006500000063
*000000740000002e00000020000000540000006800000069000000730000002000000066000000
*610000006b00000065000000730000002000000074000000680000006100000074000000200000
*007700000069000000740000006800000020000000610000002000000047000000410000004400
*0000540000000a0000000000000061030102040000005400000068000000650000002001040100
*000000000000012800000000000000300000000000000031010237000000200000006f00000066
*0000002000000074000000680000006500000020000000650000006e000000640000006f000000
*6d0000006f00000072000000700000006800000069000000730000006d00000073000000200000
*006f00000076000000650000007200000020000000730000006f0000006d000000650000002000
*00006f000000620000006a00000065000000630000007400000020000000690000006e00000020
*000000610000006e00000020000000610000007200000062000000690000007400000072000000
*6100000072000000790000002001040100000000000000014d0000000000000030000000000000
*003a02020000002e0000000a00000000000000640301020c000000450000007800000074000000
*720000006100000063000000740000002000000074000000680000006500000020010401000000
*0000000001280000000000000030000000000000003101021e0000002000000066000000720000
*006f0000006d000000200000006900000074000000730000002000000072000000650000007000
*0000720000006500000073000000650000006e000000740000006100000074000000690000006f
*0000006e0000002000000061000000730000002000000061000000200104010000000000000001
*4d0000000000000030000000000000003a02010000000a00000000000000650301021500000043
*0000006f0000006e00000076000000650000007200000074000000200000006100000020000000
*76000000610000006c000000750000006500000020000000690000006e00000020000000610000
*002001040100000000000000012800000000000000300000000000000031010214000000200000
*00690000006e000000740000006f00000020000000610000006e00000020000000610000007200
*0000720000006f0000007700000020000000690000006e00000020000000610000002001040100
*000000000000014d0000000000000030000000000000003a02020000002e0000000a3200000000
*0000012b000000000000012c000000000000012d0000000000000128000000000000012e000000
*000000012f00000000000001300000000000000131000000000000013200000000000001330000
*000000000134000000000000013500000000000001360000000000000137000000000000013800
*00000000000139000000000000013a000000000000013b000000000000013c000000000000013d
*000000000000013e000000000000013f0000000000000140000000000000014100000000000001
*42000000000000014300000000000001440000000000000145000000000000014e000000000000
*014f00000000000001500000000000000151000000000000014d00000000000000000000000000
*000001000000000000000200000000000000030000000000000004000000000000000500000000
*00000006000000000000000700000000000000080000000000000009000000000000000a000000
*000000006000000000000000610000000000000062000000000000006300000000000000640000
*000000000065060000000000000061000000000000006200000000000000630000000000000060
*000000000000006400000000000000650000000000000000000000000000000f00010800000070
*0000006f000000720000007400000061000000620000006c00000065010c000000650000007800
*0000700000006500000072000000690000006d000000650000006e00000074000000610000006c
*0110000000650000006b0000006d00000065000000740000007400000040000000670000006d00
*000061000000690000006c0000002e000000630000006f0000006d001e000000000000012b0000
*00000000012c000000000000012d0000000000000128000000000000012e000000000000012f00
*000000000001300000000000000131000000000000013200000000000001330000000000000134
*000000000000013500000000000001360000000000000137000000000000013800000000000001
*39000000000000013a000000000000013b000000000000013c000000000000013d000000000000
*013e000000000000013f0000000000000140000000000000014100000000000001420000000000
*000143000000000000014400000000000001450000000000000066000000000000006702000000
*000000006600000000000000670000000000000000000000000000001000010800000070000000
*6f000000720000007400000061000000620000006c00000065010c000000650000007800000070
*0000006500000072000000690000006d000000650000006e00000074000000610000006c011000
*0000650000006b0000006d00000065000000740000007400000040000000670000006d00000061
*000000690000006c0000002e000000630000006f0000006d001f000000000000012b0000000000
*00012c000000000000012d0000000000000128000000000000012e000000000000012f00000000
*000001300000000000000131000000000000013200000000000001330000000000000134000000
*000000013500000000000001360000000000000137000000000000013800000000000001390000
*00000000013a000000000000013b000000000000013c000000000000013d000000000000013e00
*0000000000013f0000000000000140000000000000014100000000000001420000000000000143
*000000000000014400000000000001450000000000000066000000000000006700000000000000
*6801000000000000006800000000000000000000000000000011000122000000700000006f0000
*00720000007400000061000000620000006c000000650000002000000028000000620000007500
*00007400000020000000690000006e0000007300000074000000610000006e0000006300000065
*0000007300000020000000750000007300000065000000200000004d0000005000000054000000
*430000007300000029010c0000006500000078000000700000006500000072000000690000006d
*000000650000006e00000074000000610000006c0110000000650000006b0000006d0000006500
*0000740000007400000040000000670000006d00000061000000690000006c0000002e00000063
*0000006f0000006d0200000000000000690301020a000000430000006f0000006e000000760000
*006500000072000000740000002000000061000000200104010000000000000001280000000000
*000030000000000000003101020800000020000000690000006e000000740000006f0000002000
*0000610000002001040100000000000000006f0000000000000000000000000000001101020c00
*00002e000000200000004d0000006e000000650000006d0000006f0000006e0000006900000063
*0000003a000000200107021b000000450000007800000070000000200000006100000020000000
*2a000000200000004500000078000000700000002000000062000000200000003d000000200000
*00450000007800000070000000200000002800000061000000200000002b000000200000006200
*00002902010000000a000000000000006c0301020a000000430000006f0000006e000000760000
*0065000000720000007400000020000000610000002001040100000000000000006f0000000000
*000000000000000000001101020800000020000000690000006e000000740000006f0000002000
*000061000000200104010000000000000001280000000000000030000000000000003101020c00
*00002e000000200000004d0000006e000000650000006d0000006f0000006e0000006900000063
*0000003a000000200107021b0000004c0000006f00000067000000200000006100000020000000
*2b000000200000004c0000006f000000670000002000000062000000200000003d000000200000
*004c0000006f00000067000000200000002800000061000000200000002a000000200000006200
*00002902010000000a27000000000000012b000000000000012c000000000000012d0000000000
*000128000000000000012e000000000000012f0000000000000130000000000000013100000000
*000001320000000000000133000000000000013400000000000001350000000000000136000000
*000000013700000000000001380000000000000139000000000000013a000000000000013b0000
*00000000013c000000000000013d000000000000013e000000000000013f000000000000014000
*000000000001410000000000000142000000000000014300000000000001440000000000000145
*000000000000006600000000000000670000000000000069000000000000006a00000000000000
*6b000000000000006c000000000000006d000000000000006e000000000000006f000000000000
*0070000000000000007109000000000000006f0000000000000070000000000000007100000000
*0000006c000000000000006d000000000000006e0000000000000069000000000000006a000000
*000000006b00000000000000000000000000000012000108000000700000006f00000072000000
*7400000061000000620000006c00000065010c0000006500000078000000700000006500000072
*000000690000006d000000650000006e00000074000000610000006c0110000000650000006b00
*00006d00000065000000740000007400000040000000670000006d00000061000000690000006c
*0000002e000000630000006f0000006d0029000000000000012b000000000000012c0000000000
*00012d0000000000000128000000000000012e000000000000012f000000000000013000000000
*000001310000000000000132000000000000013300000000000001340000000000000135000000
*0000000136000000000000013700000000000001380000000000000139000000000000013a0000
*00000000013b000000000000013c000000000000013d000000000000013e000000000000013f00
*000000000001400000000000000141000000000000014200000000000001430000000000000144
*000000000000014500000000000000660000000000000067000000000000006800000000000000
*69000000000000006a000000000000006b000000000000006c000000000000006d000000000000
*006e000000000000006f0000000000000070000000000000007100000000000000720100000000
*000000720000000000000000000000000000001300011e000000700000006f0000007200000074
*00000061000000620000006c000000650000002000000028000000690000006e00000073000000
*74000000610000006e000000630000006500000073000000200000007500000073000000650000
*00200000004d0000005000000054000000430000007300000029010c0000006500000078000000
*700000006500000072000000690000006d000000650000006e00000074000000610000006c0110
*000000650000006b0000006d00000065000000740000007400000040000000670000006d000000
*61000000690000006c0000002e000000630000006f0000006d0300000000000000730b021f0000
*002800000061000000200000002b000000200000006200000029000000200000002a0000002000
*000063000000200000003d000000200000002800000061000000200000002a0000002000000063
*00000029000000200000002b000000200000002800000062000000200000002a00000020000000
*630000002900000000000000740b021f00000061000000200000002a0000002000000028000000
*62000000200000002b000000200000006300000029000000200000003d00000020000000280000
*0061000000200000002a000000200000006200000029000000200000002b000000200000002800
*000061000000200000002a00000020000000630000002900000000000000750301070201000000
*3001020d00000020000000610000006e0000006e0000006900000068000000690000006c000000
*610000007400000065000000730000002001040100000000000000007100000000000000000000
*00000000001102010000000a2a000000000000012b000000000000012c000000000000012d0000
*000000000128000000000000012e000000000000012f0000000000000130000000000000013100
*000000000001320000000000000133000000000000013400000000000001350000000000000136
*000000000000013700000000000001380000000000000139000000000000013a00000000000001
*3b000000000000013c000000000000013d000000000000013e000000000000013f000000000000
*014000000000000001410000000000000142000000000000014300000000000001440000000000
*000145000000000000006600000000000000670000000000000069000000000000006a00000000
*0000006b000000000000006c000000000000006d000000000000006e000000000000006f000000
*000000007000000000000000710000000000000073000000000000007400000000000000750300
*000000000000750000000000000074000000000000007300000000000000000000000000000014
*0001140000006e0000006f0000006e0000002d000000700000006f000000720000007400000061
*000000620000006c0000006500000020000000280000004d000000500000005400000043000000
*7300000029010c0000006500000078000000700000006500000072000000690000006d00000065
*0000006e00000074000000610000006c0110000000650000006b0000006d000000650000007400
*00007400000040000000670000006d00000061000000690000006c0000002e000000630000006f
*0000006d0100000000000000760301020200000041000000200104010000000000000000760000
*000000000000000000000000001401021800000020000000690000007300000020000000610000
*006e00000020000000690000006e0000007300000074000000610000006e000000630000006500
*0000200000006f0000006600000020000000620000006f00000074000000680000002001040100
*000000000000006f0000000000000000000000000000001101020500000020000000610000006e
*000000640000002001040100000000000000012800000000000000300000000000000031010208
*000000200000007700000068000000650000007200000065000000200000000a01020300000020
*000000200000002001040100000000000000007100000000000000000000000000000011010212
*000000200000006400000069000000730000007400000072000000690000006200000075000000
*740000006500000073000000200000006f00000076000000650000007200000020010401000000
*0000000000660000000000000000000000000000000f02020000002e0000000a2b000000000000
*012b000000000000012c000000000000012d0000000000000128000000000000012e0000000000
*00012f000000000000013000000000000001310000000000000132000000000000013300000000
*000001340000000000000135000000000000013600000000000001370000000000000138000000
*0000000139000000000000013a000000000000013b000000000000013c000000000000013d0000
*00000000013e000000000000013f00000000000001400000000000000141000000000000014200
*000000000001430000000000000144000000000000014500000000000000660000000000000067
*0000000000000069000000000000006a000000000000006b000000000000006c00000000000000
*6d000000000000006e000000000000006f00000000000000700000000000000071000000000000
*007300000000000000740000000000000075000000000000007601000000000000007600000000
*000000000000000000000015000000000400000000000000770301020400000054000000680000
*006500000020010401000000000000000128000000000000003000000000000000310102010000
*00200107010201000000280104010000000000000001520000000000000030000000000000003b
*0102010000002c0104010000000000000001530000000000000030000000000000003202010000
*0029010206000000200000006f0000007600000065000000720000002001070104010000000000
*000001290000000000000030000000000000003202020000002000000061010207000000200000
*007700000068000000650000007200000065000000200104010000000000000001530000000000
*000030000000000000003202140000002000000069000000730000002000000074000000680000
*006500000020000000740000006f0000007000000020000000650000006c000000650000006d00
*0000650000006e000000740000000a000000000000007a03010204000000540000006800000065
*000000200104010000000000000001280000000000000030000000000000003101020100000020
*0107010201000000280104010000000000000001540000000000000030000000000000003b0102
*010000002c01040100000000000000015300000000000000300000000000000032020100000029
*010206000000200000006f00000076000000650000007200000020010701040100000000000000
*012900000000000000300000000000000032020200000020000000610102070000002000000077
*000000680000006500000072000000650000002001040100000000000000015300000000000000
*300000000000000032021700000020000000690000007300000020000000740000006800000065
*00000020000000620000006f00000074000000740000006f0000006d0000002000000065000000
*6c000000650000006d000000650000006e000000740000000a000000000000007d030102040000
*005400000068000000650000002001040100000000000000012800000000000000300000000000
*00003101020a00000020000000670000006900000076000000650000006e000000200000006200
*000079000000200107010201000000280104010000000000000001520000000000000030000000
*000000003b0102010000002c010401000000000000000155000000000000003000000000000000
*3c02010000002902010000000a0000000000000080030102040000005400000068000000650000
*002001040100000000000000012800000000000000300000000000000031010201000000200107
*010201000000280104010000000000000001540000000000000030000000000000003b01020100
*00002c0104010000000000000001560000000000000030000000000000003c0201000000290201
*0000000a13000000000000012b000000000000012d000000000000012800000000000000030000
*000000000004000000000000007700000000000000780000000000000079000000000000007a00
*0000000000007b000000000000007c000000000000007d000000000000007e000000000000007f
*000000000000008000000000000000810000000000000082000000000000008300000000000000
*840e000000000000008000000000000000810000000000000082000000000000007d0000000000
*00007e000000000000007f000000000000007a000000000000007b000000000000007c00000000
*000000830000000000000077000000000000007800000000000000790000000000000084000000
*0000000000000000000000001600000000002d000000000000012b000000000000012c00000000
*0000012d0000000000000128000000000000012e000000000000012f0000000000000130000000
*000000013100000000000001320000000000000133000000000000013400000000000001350000
*000000000136000000000000013700000000000001380000000000000139000000000000013a00
*0000000000013b000000000000013c000000000000013d000000000000013e000000000000013f
*000000000000014000000000000001410000000000000142000000000000014300000000000001
*440000000000000145000000000000006600000000000000670000000000000069000000000000
*006a000000000000006b000000000000006c000000000000006d000000000000006e0000000000
*00006f000000000000007000000000000000710000000000000073000000000000007400000000
*000000750000000000000076000000000000008500000000000000860200000000000000850000
*000000000086000000000000000000000000000000170000010c00000065000000780000007000
*00006500000072000000690000006d000000650000006e00000074000000610000006c01100000
*00650000006b0000006d00000065000000740000007400000040000000670000006d0000006100
*0000690000006c0000002e000000630000006f0000006d02000000000000008703010202000000
*41000000200104010000000000000000760000000000000000000000000000001401020c000000
*200000007700000068000000690000006300000068000000200000006100000064000000640000
*0073000000200104010000000000000001560000000000000030000000000000003c0102050000
*0020000000610000006e0000006400000020010401000000000000000155000000000000003000
*0000000000003c021900000020000000740000006f000000200000006100000020000000700000
*0072000000650000002d0000006500000078000000690000007300000074000000690000006e00
*00006700000020000000740000007900000070000000650000002e0000000a000000000000008b
*030102020000004100000020010401000000000000000076000000000000000000000000000000
*1401020d000000200000007500000073000000690000006e000000670000002000000061000000
*200000007400000079000000700000006501020100000027021d00000073000000200000006200
*000075000000690000006c000000740000002d000000690000006e00000020000000420000006f
*000000750000006e00000064000000650000006400000020000000690000006e00000073000000
*74000000610000006e00000063000000650000002e0000000a32000000000000012b0000000000
*00012c000000000000012d0000000000000128000000000000012e000000000000012f00000000
*000001300000000000000131000000000000013200000000000001330000000000000134000000
*000000013500000000000001360000000000000137000000000000013800000000000001390000
*00000000013a000000000000013b000000000000013c000000000000013d000000000000013e00
*0000000000013f0000000000000140000000000000014100000000000001420000000000000143
*000000000000014400000000000001450000000000000066000000000000006700000000000000
*69000000000000006a000000000000006b000000000000006c000000000000006d000000000000
*006e000000000000006f0000000000000070000000000000007100000000000000730000000000
*000074000000000000007500000000000000760000000000000087000000000000008800000000
*00000089000000000000008a000000000000008b000000000000008c000000000000008d070000
*00000000008b000000000000008c000000000000008d0000000000000087000000000000008a00
*000000000000890000000000000088000000000000000000000000000000180000000001000000
*000000008e01030102040000005400000068000000650000002001040100000000000000007600
*000000000000000000000000000014010201000000200107010201000000280104010000000000
*000001520000000000000030000000000000003b0102010000002c010401000000000000000157
*0000000000000030000000000000003c020100000029010206000000200000006f000000760000
*0065000000720000002001070102010000006101020f0000002000000065000000780000007400
*0000650000006e0000006400000065000000640000002000000077000000690000007400000068
*000000200401000000000000000091000000000000000000000000000000180102020000002e00
*00000a0102080000002000000020000000200000005700000068000000650000006e0000002001
*070201000000610102480000002000000068000000610000007300000020000000610000002000
*00004e000000750000006d00000020000000690000006e0000007300000074000000610000006e
*000000630000006500000020000000770000006900000074000000680000002000000061000000
*6e000000200000006100000064000000640000006900000074000000690000006f0000006e0000
*002000000074000000680000006100000074000000200000007200000065000000730000007000
*000065000000630000007400000073000000200000006f00000072000000640000006500000072
*0000002c000000200000007400000068000000650000006e000000200000007400000068000000
*6900000073000000200000006900000073000000200000000a0102530000002000000020000000
*200000007400000072000000610000006e00000073000000660000006f000000720000006d0000
*00650000006400000020000000690000006e000000740000006f00000020000000610000002000
*000074000000720000006f000000700000006900000063000000610000006c0000002000000073
*000000650000006d0000006900000072000000690000006e000000670000002e00000020000000
*490000007400000020000000690000007300000020000000610000007300000073000000750000
*006d00000065000000640000002000000074000000680000006100000074000000200000003000
*000020000000690000007300000020000000740000006800000065000000200000006c00000065
*00000061000000730000007400000020000000650000006c000000650000006d00000065000000
*6e000000740000000a02090000002000000020000000200000006f000000660000002000000061
*0000002e0000000a03010c41000000680000007400000074000000700000003a0000002f000000
*2f00000068000000610000006c0000002e00000061000000720000006300000068000000690000
*007600000065000000730000002d0000006f000000750000007600000065000000720000007400
*000065000000730000002e00000066000000720000002f000000640000006f0000006300000073
*0000002f00000030000000300000002f00000031000000310000002f0000003300000037000000
*2f00000037000000390000002f0000005000000044000000460000002f00000054000000720000
*006f000000700000006900000063000000610000006c0000002e00000070000000640000006602
*010000000a31000000000000012b000000000000012c000000000000012d000000000000012800
*0000000000012e000000000000012f000000000000013000000000000001310000000000000132
*000000000000013300000000000001340000000000000135000000000000013600000000000001
*3700000000000001380000000000000139000000000000013a000000000000013b000000000000
*013c000000000000013d000000000000013e000000000000013f00000000000001400000000000
*000141000000000000014200000000000001430000000000000144000000000000014500000000
*000000030000000000000004000000000000006600000000000000670000000000000069000000
*000000006a000000000000006b000000000000006c000000000000006d000000000000006e0000
*00000000006f000000000000007000000000000000710000000000000073000000000000007400
*000000000000750000000000000076000000000000008e000000000000008f0000000000000090
*0000000000000091040000000000000091000000000000008e000000000000008f000000000000
*009000000000000000000000000000000019000000000032000000000000012b00000000000001
*2c000000000000012d0000000000000128000000000000012e000000000000012f000000000000
*013000000000000001310000000000000132000000000000013300000000000001340000000000
*000135000000000000013600000000000001370000000000000138000000000000013900000000
*0000013a000000000000013b000000000000013c000000000000013d000000000000013e000000
*000000013f00000000000001400000000000000141000000000000014200000000000001430000
*000000000144000000000000014500000000000000660000000000000067000000000000006900
*0000000000006a000000000000006b000000000000006c000000000000006d000000000000006e
*000000000000006f00000000000000700000000000000071000000000000007300000000000000
*740000000000000075000000000000009200000000000000930000000000000094000000000000
*009500000000000000960000000000000097000000000000009800000000000000990800000000
*000000920000000000000093000000000000009400000000000000950000000000000096000000
*0000000097000000000000009800000000000000990000000000000000000000000000003d0001
*08000000700000006f000000720000007400000061000000620000006c00000065010c00000065
*00000078000000700000006500000072000000690000006d000000650000006e00000074000000
*610000006c0110000000650000006b0000006d0000006500000074000000740000004000000067
*0000006d00000061000000690000006c0000002e000000630000006f0000006d002c0000000000
*00012b000000000000012c000000000000012d0000000000000128000000000000012e00000000
*0000012f0000000000000130000000000000013100000000000001320000000000000133000000
*000000013400000000000001350000000000000136000000000000013700000000000001380000
*000000000139000000000000013a000000000000013b000000000000013c000000000000013d00
*0000000000013e000000000000013f000000000000014000000000000001410000000000000142
*000000000000014300000000000001440000000000000145000000000000006600000000000000
*6700000000000000680000000000000069000000000000006a000000000000006b000000000000
*006c000000000000006d000000000000006e000000000000006f00000000000000700000000000
*000071000000000000007200000000000000730000000000000074000000000000007500000000
*0000000000000000000000001a000108000000700000006f000000720000007400000061000000
*620000006c00000065010c0000006500000078000000700000006500000072000000690000006d
*000000650000006e00000074000000610000006c011f0000004500000064000000770000006100
*00007200000064000000200000004b0000006d000000650000007400000074000000200000003c
*000000650000006b0000006d00000065000000740000007400000040000000670000006d000000
*61000000690000006c0000002e000000630000006f0000006d0000003e01000000000000009a03
*01021d0000004d000000690000006e000000690000006d000000610000006c0000002000000063
*0000006f0000006d000000700000006c0000006500000074000000650000002000000064000000
*6500000066000000690000006e0000006900000074000000690000006f0000006e0000003a0000
*002001040100000000000000009b0000000000000000000000000000001a010204000000200000
*006f000000720000002001040100000000000000009c0000000000000000000000000000001a02
*010000000a22000000000000012b000000000000012c000000000000012d000000000000012800
*0000000000012e000000000000012f000000000000013000000000000001310000000000000132
*000000000000013300000000000001340000000000000135000000000000013600000000000001
*3700000000000001380000000000000139000000000000013a000000000000013b000000000000
*013c000000000000013d000000000000013e000000000000013f00000000000001400000000000
*000141000000000000014200000000000001430000000000000144000000000000014500000000
*000000660000000000000067000000000000009a000000000000009b000000000000009c000000
*000000009d04000000000000009a000000000000009b000000000000009d000000000000009c00
*00000000000000000000000000001b000108000000700000006f00000072000000740000006100
*0000620000006c00000065010c0000006500000078000000700000006500000072000000690000
*006d000000650000006e00000074000000610000006c0110000000650000006b0000006d000000
*65000000740000007400000040000000670000006d00000061000000690000006c0000002e0000
*00630000006f0000006d0024000000000000012b000000000000012c000000000000012d000000
*0000000128000000000000012e000000000000012f000000000000013000000000000001310000
*000000000132000000000000013300000000000001340000000000000135000000000000013600
*0000000000013700000000000001380000000000000139000000000000013a000000000000013b
*000000000000013c000000000000013d000000000000013e000000000000013f00000000000001
*400000000000000141000000000000014200000000000001430000000000000144000000000000
*014500000000000000660000000000000067000000000000009a000000000000009b0000000000
*00009c000000000000009d000000000000009e000000000000009f02000000000000009e000000
*000000009f0000000000000000000000000000001c000108000000700000006f00000072000000
*7400000061000000620000006c00000065010c0000006500000078000000700000006500000072
*000000690000006d000000650000006e00000074000000610000006c0110000000650000006b00
*00006d00000065000000740000007400000040000000670000006d00000061000000690000006c
*0000002e000000630000006f0000006d0300000000000000a00302220000004d00000069000000
*6e000000690000006d000000610000006c00000020000000640000006500000066000000690000
*006e0000006900000074000000690000006f0000006e000000200000006f000000760000006500
*000072000000200000006f00000072000000200000006700000072000000650000006300000069
*000000700000000a00000000000000a10b01020200000078000000200102010000002f02020000
*00200000007900000000000000a20b010202000000780000002001020100000020020100000079
*2f000000000000012b000000000000012c000000000000012d0000000000000128000000000000
*012e000000000000012f0000000000000130000000000000013100000000000001320000000000
*000133000000000000013400000000000001350000000000000136000000000000013700000000
*000001380000000000000139000000000000013a000000000000013b000000000000013c000000
*000000013d000000000000013e000000000000013f000000000000014000000000000001410000
*000000000142000000000000014300000000000001440000000000000145000000000000006600
*000000000000670000000000000069000000000000006a000000000000006b000000000000006c
*000000000000006d000000000000006e000000000000006f000000000000007000000000000000
*71000000000000009a000000000000009b000000000000009c000000000000009d000000000000
*00a000000000000000a100000000000000a200000000000000a30400000000000000a000000000
*000000a100000000000000a200000000000000a30000000000000000000000000000001d000108
*000000700000006f000000720000007400000061000000620000006c00000065010c0000006500
*000078000000700000006500000072000000690000006d000000650000006e0000007400000061
*0000006c0110000000650000006b0000006d000000650000007400000074000000400000006700
*00006d00000061000000690000006c0000002e000000630000006f0000006d0026000000000000
*012b000000000000012c000000000000012d0000000000000128000000000000012e0000000000
*00012f000000000000013000000000000001310000000000000132000000000000013300000000
*000001340000000000000135000000000000013600000000000001370000000000000138000000
*0000000139000000000000013a000000000000013b000000000000013c000000000000013d0000
*00000000013e000000000000013f00000000000001400000000000000141000000000000014200
*000000000001430000000000000144000000000000014500000000000000660000000000000067
*0000000000000068000000000000009a000000000000009b000000000000009c00000000000000
*9d00000000000000a400000000000000a500000000000000a60300000000000000a40000000000
*0000a500000000000000a60000000000000000000000000000001e000108000000700000006f00
*0000720000007400000061000000620000006c00000065010c0000006500000078000000700000
*006500000072000000690000006d000000650000006e00000074000000610000006c0110000000
*650000006b0000006d00000065000000740000007400000040000000670000006d000000610000
*00690000006c0000002e000000630000006f0000006d0037000000000000012b00000000000001
*2c000000000000012d0000000000000128000000000000012e000000000000012f000000000000
*013000000000000001310000000000000132000000000000013300000000000001340000000000
*000135000000000000013600000000000001370000000000000138000000000000013900000000
*0000013a000000000000013b000000000000013c000000000000013d000000000000013e000000
*000000013f00000000000001400000000000000141000000000000014200000000000001430000
*000000000144000000000000014500000000000000660000000000000067000000000000006800
*00000000000069000000000000006a000000000000006b000000000000006c000000000000006d
*000000000000006e000000000000006f0000000000000070000000000000007100000000000000
*72000000000000009a000000000000009b000000000000009c000000000000009d000000000000
*00a000000000000000a100000000000000a200000000000000a300000000000000a40000000000
*0000a500000000000000a600000000000000a700000000000000a800000000000000a903000000
*00000000a700000000000000a800000000000000a90000000000000000000000000000001f0001
*1e000000700000006f000000720000007400000061000000620000006c00000065000000200000
*0028000000690000006e0000007300000074000000610000006e00000063000000650000007300
*000020000000750000007300000065000000200000004d00000050000000540000004300000073
*00000029010c0000006500000078000000700000006500000072000000690000006d0000006500
*00006e00000074000000610000006c0110000000650000006b0000006d00000065000000740000
*007400000040000000670000006d00000061000000690000006c0000002e000000630000006f00
*00006d0030000000000000012b000000000000012c000000000000012d00000000000001280000
*00000000012e000000000000012f00000000000001300000000000000131000000000000013200
*000000000001330000000000000134000000000000013500000000000001360000000000000137
*00000000000001380000000000000139000000000000013a000000000000013b00000000000001
*3c000000000000013d000000000000013e000000000000013f0000000000000140000000000000
*014100000000000001420000000000000143000000000000014400000000000001450000000000
*00006600000000000000670000000000000069000000000000006a000000000000006b00000000
*0000006c000000000000006d000000000000006e000000000000006f0000000000000070000000
*000000007100000000000000730000000000000074000000000000007500000000000000760000
*00000000009a000000000000009b000000000000009c000000000000009d00000000000000aa01
*00000000000000aa000000000000000000000000000000200001140000006e0000006f0000006e
*0000002d000000700000006f000000720000007400000061000000620000006c00000065000000
*20000000280000004d0000005000000054000000430000007300000029010c0000006500000078
*000000700000006500000072000000690000006d000000650000006e0000007400000061000000
*6c0110000000650000006b0000006d00000065000000740000007400000040000000670000006d
*00000061000000690000006c0000002e000000630000006f0000006d0033000000000000012b00
*0000000000012c000000000000012d0000000000000128000000000000012e000000000000012f
*000000000000013000000000000001310000000000000132000000000000013300000000000001
*340000000000000135000000000000013600000000000001370000000000000138000000000000
*0139000000000000013a000000000000013b000000000000013c000000000000013d0000000000
*00013e000000000000013f00000000000001400000000000000141000000000000014200000000
*000001430000000000000144000000000000014500000000000000660000000000000067000000
*0000000069000000000000006a000000000000006b000000000000006c000000000000006d0000
*00000000006e000000000000006f00000000000000700000000000000071000000000000007300
*0000000000007400000000000000750000000000000076000000000000009a000000000000009b
*000000000000009c000000000000009d00000000000000aa00000000000000ab00000000000000
*ac00000000000000ad0300000000000000ab00000000000000ac00000000000000ad0000000000
*00000000000000000000210001140000006e0000006f0000006e0000002d000000700000006f00
*0000720000007400000061000000620000006c0000006500000020000000280000004d00000050
*00000054000000430000007300000029010c000000650000007800000070000000650000007200
*0000690000006d000000650000006e00000074000000610000006c0110000000650000006b0000
*006d00000065000000740000007400000040000000670000006d00000061000000690000006c00
*00002e000000630000006f0000006d0033000000000000012b000000000000012c000000000000
*012d0000000000000128000000000000012e000000000000012f00000000000001300000000000
*000131000000000000013200000000000001330000000000000134000000000000013500000000
*00000136000000000000013700000000000001380000000000000139000000000000013a000000
*000000013b000000000000013c000000000000013d000000000000013e000000000000013f0000
*000000000140000000000000014100000000000001420000000000000143000000000000014400
*00000000000145000000000000006600000000000000670000000000000069000000000000006a
*000000000000006b000000000000006c000000000000006d000000000000006e00000000000000
*6f0000000000000070000000000000007100000000000000730000000000000074000000000000
*00750000000000000076000000000000009a000000000000009b000000000000009c0000000000
*00009d00000000000000aa00000000000000ae00000000000000af00000000000000b003000000
*00000000ae00000000000000af00000000000000b0000000000000000000000000000000220001
*3f0000006e0000006f0000006e0000002d000000700000006f0000007200000074000000610000
*00620000006c0000006500000020000000280000004d0000005000000054000000430000007300
*00002c0000002000000073000000630000006f0000007000000065000000640000002000000074
*000000790000007000000065000000730000002c00000020000000650000006d00000070000000
*7400000079000000200000006400000065000000630000006c000000730000002c000000200000
*0074000000790000007000000065000000200000006f0000007000000065000000720000006100
*0000740000006f000000720000007300000029010c000000650000007800000070000000650000
*0072000000690000006d000000650000006e00000074000000610000006c011f00000045000000
*6400000077000000610000007200000064000000200000004b0000006d00000065000000740000
*0074000000200000003c000000650000006b0000006d0000006500000074000000740000004000
*0000670000006d00000061000000690000006c0000002e000000630000006f0000006d0000003e
*0035000000000000012b000000000000012c000000000000012d00000000000001280000000000
*00012e000000000000012f00000000000001300000000000000131000000000000013200000000
*000001330000000000000134000000000000013500000000000001360000000000000137000000
*00000001380000000000000139000000000000013a000000000000013b000000000000013c0000
*00000000013d000000000000013e000000000000013f0000000000000140000000000000014100
*000000000001420000000000000143000000000000014400000000000001450000000000000066
*00000000000000670000000000000069000000000000006a000000000000006b00000000000000
*6c000000000000006d000000000000006e000000000000006f0000000000000070000000000000
*007100000000000000730000000000000074000000000000007500000000000000760000000000
*00009a000000000000009b000000000000009c000000000000009d00000000000000aa00000000
*000000b100000000000000b200000000000000b300000000000000b400000000000000b5050000
*0000000000b300000000000000b400000000000000b100000000000000b200000000000000b500
*0000000000000000000000000000230001140000006e0000006f0000006e0000002d0000007000
*00006f000000720000007400000061000000620000006c0000006500000020000000280000004d
*0000005000000054000000430000007300000029010c0000006500000078000000700000006500
*000072000000690000006d000000650000006e00000074000000610000006c0110000000650000
*006b0000006d00000065000000740000007400000040000000670000006d000000610000006900
*00006c0000002e000000630000006f0000006d0300000000000000b60b021e0000002000000028
*00000078000000200000002a0000002e000000200000006d00000029000000200000002e000000
*2a0000002000000079000000200000003d0000002000000078000000200000002a0000002e0000
*0020000000280000006d000000200000002e0000002a0000002000000079000000290000000000
*0000b70b021c00000020000000280000006d000000200000002e0000002a000000200000007800
*000029000000200000002a0000002000000079000000200000003d000000200000006d00000020
*0000002e0000002a000000200000002800000078000000200000002a0000002000000079000000
*2900000000000000b90b021c000000200000002800000078000000200000002a00000020000000
*7900000029000000200000002a0000002e000000200000006d000000200000003d000000200000
*0078000000200000002a000000200000002800000079000000200000002a0000002e0000002000
*00006d0000002935000000000000012b000000000000012c000000000000012d00000000000001
*28000000000000012e000000000000012f00000000000001300000000000000131000000000000
*013200000000000001330000000000000134000000000000013500000000000001360000000000
*00013700000000000001380000000000000139000000000000013a000000000000013b00000000
*0000013c000000000000013d000000000000013e000000000000013f0000000000000140000000
*000000014100000000000001420000000000000143000000000000014400000000000001450000
*00000000006600000000000000670000000000000069000000000000006a000000000000006b00
*0000000000006c000000000000006d000000000000006e000000000000006f0000000000000070
*000000000000007100000000000000730000000000000074000000000000007500000000000000
*76000000000000009a000000000000009b000000000000009c000000000000009d000000000000
*00aa00000000000000b600000000000000b700000000000000b800000000000000b90000000000
*0000ba0500000000000000b900000000000000ba00000000000000b700000000000000b8000000
*00000000b6000000000000000000000000000000240001140000006e0000006f0000006e000000
*2d000000700000006f000000720000007400000061000000620000006c00000065000000200000
*00280000004d0000005000000054000000430000007300000029010c0000006500000078000000
*700000006500000072000000690000006d000000650000006e00000074000000610000006c0110
*000000650000006b0000006d00000065000000740000007400000040000000670000006d000000
*61000000690000006c0000002e000000630000006f0000006d0400000000000000bb0301020300
*0000690000006600000020010702010000006d0102060000002000000069000000730000002000
*000061000000200104010000000000000000b60000000000000000000000000000002301020600
*0000200000006f0000007600000065000000720000002001070201000000720102050000002000
*0000610000006e0000006400000020010702010000006601020600000020000000690000007300
*00002000000061000000200104010000000000000001580000000000000030000000000000003e
*010206000000200000007400000068000000650000006e00000020010701020200000066000000
*200104020000000000000000bc000000000000000000000000000000240000000000000000bb00
*0000000000000000000000000000240202000000200000006d0102060000002000000069000000
*730000002000000061000000200104010000000000000000b60000000000000000000000000000
*0023010206000000200000006f0000007600000065000000720000002001070201000000720209
*0000002000000061000000730000002000000077000000650000006c0000006c0000000a000000
*00000000be0301020200000041000000200104020000000000000000bf00000000000000000000
*0000000000240000000000000000be0000000000000000000000000000002401020b0000002000
*00007400000075000000720000006e0000007300000020000000610000006e0000007900000020
*0104010000000000000001590000000000000030000000000000003e0102110000002000000069
*0000006e0000007300000074000000610000006e00000063000000650000002000000069000000
*6e000000740000006f000000200000006100000020010401000000000000000128000000000000
*003000000000000000310102020000002e0000000a010216000000200000002000000020000000
*490000007400000020000000610000006c000000730000006f0000002000000070000000720000
*006f00000076000000690000006400000065000000730000002000000061000000200104010000
*0000000000006f0000000000000000000000000000001101021100000020000000690000006e00
*00007300000074000000610000006e000000630000006500000020000000660000006f00000072
*00000020000000610000006e000000200104010000000000000001580000000000000030000000
*000000003e01021a0000002000000066000000750000006e00000063000000740000006f000000
*720000002000000077000000720000006100000070000000700000006500000064000000200000
*0061000000720000006f000000750000006e000000640000002000000061000000200104010000
*00000000000128000000000000003000000000000000310102010000000a010218000000200000
*002000000020000000610000006e00000064000000200000006100000073000000730000006500
*000072000000740000007300000020000000740000006800000061000000740000002000000061
*0000006e0000007900000020010401000000000000000159000000000000003000000000000000
*3e01020e000000200000006100000070000000700000006c000000690000006500000064000000
*20000000740000006f000000200000006100000020010401000000000000000128000000000000
*0030000000000000003101020900000020000000660000006f000000720000006d000000730000
*002000000061000000200104010000000000000000730000000000000000000000000000001301
*0202000000200000000a021b000000200000002000000020000000750000006e00000064000000
*6500000072000000200000007400000068000000650000007300000065000000200000006f0000
*007000000065000000720000006100000074000000690000006f0000006e000000730000002e00
*00000a00000000000000c10301020200000041000000200104020000000000000000c200000000
*0000000000000000000000240000000000000000c1000000000000000000000000000000240102
*18000000200000007500000073000000650000007300000020000000610000006e000000200000
*00670000006c00000075000000650000007300000020000000740000006f000000670000006500
*000074000000680000006500000072000000200104010000000000000001580000000000000030
*000000000000003e01021300000020000000610000006300000074000000690000006f0000006e
*00000073000000200000007700000069000000740000006800000020000000280000002a000000
*3e000000290000000a010214000000200000002000000020000000690000006e00000020000000
*740000006800000065000000200000006d000000610000006e0000006e00000065000000720000
*00200000006f000000660000002001020900000074000000720000006100000076000000650000
*007200000073000000650000005f0102060000002000000066000000720000006f0000006d0000
*002001050d000000440000006100000074000000610000002e000000460000006f0000006c0000
*006400000061000000620000006c0000006501021a0000002e00000020000000410000006e0000
*00790000002000000076000000610000006c000000750000006500000073000000200000007200
*0000650000007400000075000000720000006e0000006500000064000000200000006200000079
*000000200000000a02220000002000000020000000200000007200000065000000640000007500
*000063000000650000006400000020000000610000006300000074000000690000006f0000006e
*000000730000002000000061000000720000006500000020000000640000006900000073000000
*6300000061000000720000006400000065000000640000002e0000000a00000000000000c40301
*0232000000450000006600000066000000690000006300000069000000650000006e0000007400
*00006c000000790000002000000061000000760000006f0000006900000064000000200000006e
*0000006500000065000000640000006c0000006500000073000000730000006c00000079000000
*20000000720000006500000062000000690000006e00000064000000690000006e000000670000
*00200000007700000068000000650000006e000000200000007500000073000000690000006e00
*000067000000200104010000000000000000050000000000000000000000000000000101022600
*0000200000006f0000006e00000020000000610000006e00000020000000610000006300000074
*000000690000006f0000006e000000200000007400000068000000610000007400000020000000
*610000006c00000072000000650000006100000064000000790000002000000072000000650000
*007400000075000000720000006e000000730000002000000028000000290000000a023b000000
*200000002000000020000000410000002000000072000000650000007700000072000000690000
*0074000000650000002000000072000000750000006c0000006500000020000000610000007500
*0000740000006f0000006d00000061000000740000006900000063000000610000006c0000006c
*00000079000000200000006100000070000000700000006c000000690000006500000073000000
*2000000074000000680000006900000073000000200000007700000068000000650000006e0000
*0020000000700000006f000000730000007300000069000000620000006c000000650000000a4a
*000000000000012b000000000000012c000000000000012d000000000000012800000000000001
*2e000000000000012f000000000000013000000000000001310000000000000132000000000000
*013300000000000001340000000000000135000000000000013600000000000001370000000000
*0001380000000000000139000000000000013a000000000000013b000000000000013c00000000
*0000013d000000000000013e000000000000013f00000000000001400000000000000141000000
*000000014200000000000001430000000000000144000000000000014500000000000000000000
*000000000001000000000000000200000000000000030000000000000004000000000000000500
*00000000000006000000000000000700000000000000080000000000000009000000000000000a
*000000000000006600000000000000670000000000000069000000000000006a00000000000000
*6b000000000000006c000000000000006d000000000000006e000000000000006f000000000000
*007000000000000000710000000000000073000000000000007400000000000000750000000000
*000076000000000000009a000000000000009b000000000000009c000000000000009d00000000
*000000aa00000000000000b600000000000000b700000000000000b800000000000000b9000000
*00000000ba00000000000000bb00000000000000bc00000000000000bd00000000000000be0000
*0000000000bf00000000000000c000000000000000c100000000000000c200000000000000c300
*000000000000c40a00000000000000c100000000000000c200000000000000c300000000000000
*be00000000000000bf00000000000000c000000000000000bb00000000000000bc000000000000
*00bd00000000000000c4000000000000000000000000000000250001140000006e0000006f0000
*006e0000002d000000700000006f000000720000007400000061000000620000006c0000006500
*000020000000280000004d0000005000000054000000430000007300000029010c000000650000
*0078000000700000006500000072000000690000006d000000650000006e000000740000006100
*00006c0110000000650000006b0000006d00000065000000740000007400000040000000670000
*006d00000061000000690000006c0000002e000000630000006f0000006d0400000000000000c5
*03010203000000690000006600000020010702010000006d010206000000200000006900000073
*0000002000000061000000200104010000000000000000b6000000000000000000000000000000
*23010206000000200000006f000000760000006500000072000000200107020100000072010205
*00000020000000610000006e000000640000002001070201000000660102060000002000000069
*0000007300000020000000610000002001040100000000000000015a0000000000000030000000
*000000003f010206000000200000007400000068000000650000006e0000002001070102020000
*0066000000200104020000000000000000c6000000000000000000000000000000250000000000
*000000c5000000000000000000000000000000250202000000200000006d010206000000200000
*0069000000730000002000000061000000200104010000000000000000b6000000000000000000
*0000000000002302090000002000000061000000730000002000000077000000650000006c0000
*006c0000000a00000000000000c80301020200000041000000200104020000000000000000c900
*0000000000000000000000000000250000000000000000c8000000000000000000000000000000
*2501020b000000200000007400000075000000720000006e000000730000002000000061000000
*6e000000790000002001040100000000000000015b0000000000000030000000000000003f0102
*1100000020000000690000006e0000007300000074000000610000006e00000063000000650000
*0020000000690000006e000000740000006f000000200000006100000020010401000000000000
*000128000000000000003000000000000000310102020000002e0000000a010216000000200000
*002000000020000000490000007400000020000000610000006c000000730000006f0000002000
*000070000000720000006f00000076000000690000006400000065000000730000002000000061
*0000002001040100000000000000006f0000000000000000000000000000001101021000000020
*000000690000006e0000007300000074000000610000006e000000630000006500000020000000
*660000006f0000007200000020000000610000002001040100000000000000015a000000000000
*0030000000000000003f0102120000002000000077000000720000006100000070000000700000
*0065000000640000002000000061000000720000006f000000750000006e000000640000002000
*000061000000200104010000000000000001280000000000000030000000000000003101020100
*00000a010218000000200000002000000020000000610000006e00000064000000200000006100
*000073000000730000006500000072000000740000007300000020000000740000006800000061
*0000007400000020000000610000006e000000790000002001040100000000000000015b000000
*0000000030000000000000003f01020e000000200000006100000070000000700000006c000000
*69000000650000006400000020000000740000006f000000200000006100000020010401000000
*0000000001280000000000000030000000000000003101020900000020000000660000006f0000
*00720000006d000000730000002000000061000000200104010000000000000000730000000000
*0000000000000000000013010202000000200000000a021b000000200000002000000020000000
*750000006e00000064000000650000007200000020000000740000006800000065000000730000
*0065000000200000006f0000007000000065000000720000006100000074000000690000006f00
*00006e000000730000002e0000000a00000000000000cb03010203000000410000006e00000020
*0104020000000000000000cc000000000000000000000000000000250000000000000000cb0000
*000000000000000000000000002501021500000020000000750000007300000065000000730000
*0020000000670000006c00000075000000650000007300000020000000740000006f0000006700
*000065000000740000006800000065000000720000002001040100000000000000015a00000000
*00000030000000000000003f01021300000020000000610000006300000074000000690000006f
*0000006e0000007300000020000000770000006900000074000000680000002000000028000000
*3e0000003e000000290000000a010214000000200000002000000020000000690000006e000000
*20000000740000006800000065000000200000006d000000610000006e0000006e000000650000
*0072000000200000006f000000660000002001040100000000000000015c000000000000003000
*0000000000003f0102060000002000000066000000720000006f0000006d0000002001050d0000
*00440000006100000074000000610000002e000000460000006f0000006c000000640000006100
*0000620000006c0000006501021a0000002e00000020000000410000006e000000790000002000
*000076000000610000006c00000075000000650000007300000020000000720000006500000074
*00000075000000720000006e000000650000006400000020000000620000007900000020000000
*0a0222000000200000002000000020000000720000006500000064000000750000006300000065
*0000006400000020000000610000006300000074000000690000006f0000006e00000073000000
*200000006100000072000000650000002000000064000000690000007300000063000000610000
*00720000006400000065000000640000002e0000000a00000000000000ce030102320000004500
*00006600000066000000690000006300000069000000650000006e000000740000006c00000079
*0000002000000061000000760000006f0000006900000064000000200000006e00000065000000
*65000000640000006c0000006500000073000000730000006c0000007900000020000000720000
*006500000062000000690000006e00000064000000690000006e00000067000000200000007700
*000068000000650000006e000000200000007500000073000000690000006e0000006700000020
*01040100000000000000000500000000000000000000000000000001010226000000200000006f
*0000006e00000020000000610000006e0000002000000061000000630000007400000069000000
*6f0000006e000000200000007400000068000000610000007400000020000000610000006c0000
*007200000065000000610000006400000079000000200000007200000065000000740000007500
*0000720000006e000000730000002000000028000000290000000a023b00000020000000200000
*002000000041000000200000007200000065000000770000007200000069000000740000006500
*00002000000072000000750000006c00000065000000200000006100000075000000740000006f
*0000006d00000061000000740000006900000063000000610000006c0000006c00000079000000
*200000006100000070000000700000006c00000069000000650000007300000020000000740000
*00680000006900000073000000200000007700000068000000650000006e000000200000007000
*00006f000000730000007300000069000000620000006c000000650000000a3f00000000000001
*2b000000000000012c000000000000012d0000000000000128000000000000012e000000000000
*012f00000000000001300000000000000131000000000000013200000000000001330000000000
*000134000000000000013500000000000001360000000000000137000000000000013800000000
*00000139000000000000013a000000000000013b000000000000013c000000000000013d000000
*000000013e000000000000013f0000000000000140000000000000014100000000000001420000
*000000000143000000000000014400000000000001450000000000000000000000000000000100
*000000000000020000000000000003000000000000000400000000000000050000000000000006
*000000000000000700000000000000080000000000000009000000000000000a00000000000000
*6600000000000000670000000000000069000000000000006a000000000000006b000000000000
*006c000000000000006d000000000000006e000000000000006f00000000000000700000000000
*00007100000000000000730000000000000074000000000000007500000000000000c500000000
*000000c600000000000000c700000000000000c800000000000000c900000000000000ca000000
*00000000cb00000000000000cc00000000000000cd00000000000000ce0a00000000000000cb00
*000000000000cc00000000000000cd00000000000000ce00000000000000c800000000000000c9
*00000000000000ca00000000000000c500000000000000c600000000000000c700000000000000
*0000000000000000260001230000006e0000006f0000006e0000002d000000700000006f000000
*720000007400000061000000620000006c00000065000000200000002800000074000000790000
*0070000000650000002000000066000000610000006d000000690000006c000000690000006500
*0000730000002c000000200000004d0000005000000054000000430000007300000029010c0000
*006500000078000000700000006500000072000000690000006d000000650000006e0000007400
*0000610000006c0110000000650000006b0000006d000000650000007400000074000000400000
*00670000006d00000061000000690000006c0000002e000000630000006f0000006d1500000000
*000000cf010301020c000000450000006600000066000000690000006300000069000000650000
*006e000000740000006c000000790000002001040100000000000000002a000000000000000000
*000000000000060102030000002000000061000000200104010000000000000000280000000000
*000000000000000000000601020b000000200000007500000073000000690000006e0000006700
*000020000000740000006800000065000000200104020000000000000000c20000000000000000
*00000000000000240000000000000000c100000000000000000000000000000024010234000000
*200000006d0000006f0000006e0000006f00000069000000640000002e00000020000000410000
*00200000007300000070000000650000006300000069000000610000006c000000690000007a00
*000065000000640000002000000076000000650000007200000073000000690000006f0000006e
*000000200000006f0000006600000020000000690000007400000073000000200000006e000000
*610000006d0000006500000073000000610000006b000000650000002000000066000000720000
*006f0000006d0000002001050d000000440000006100000074000000610000002e000000460000
*006f0000006c0000006400000061000000620000006c0000006502010000000a0b010201000000
*0a010205000000200000002000000020000000200000002001040100000000000000002a000000
*00000000000000000000000006010201000000200104010000000000000000c300000000000000
*0000000000000000240102010000000a020000000000000000d00103010221000000430000006f
*0000006e00000076000000650000006e00000069000000650000006e0000006300000065000000
*2000000066000000750000006e0000006300000074000000690000006f0000006e000000200000
*00610000007300000020000000660000006f000000750000006e00000064000000200000006900
*00006e0000002001050d000000440000006100000074000000610000002e000000460000006f00
*00006c0000006400000061000000620000006c0000006502010000000a0b0102010000000a0102
*05000000200000002000000020000000200000002001040100000000000000015d000000000000
*0030000000000000003c010201000000200104010000000000000000cf00000000000000000000
*0000000000260102010000000a020000000000000000d101030102310000005400000068000000
*650000002000000073000000750000006d000000200000006f0000006600000020000000610000
*0020000000630000006f0000006c0000006c000000650000006300000074000000690000006f00
*00006e000000200000006f0000006600000020000000610000006300000074000000690000006f
*0000006e000000730000002c0000002000000067000000650000006e0000006500000072000000
*610000006c000000690000007a000000690000006e000000670000002001040100000000000000
*015e0000000000000030000000000000004002010000000a0b0102010000000a01020400000020
*00000020000000200000002001040100000000000000002f000000000000000000000000000000
*06010201000000200104010000000000000000c000000000000000000000000000000024010201
*0000000a020000000000000000d2010301020c0000004500000066000000660000006900000063
*00000069000000650000006e000000740000006c00000079000000200104010000000000000000
*2a0000000000000000000000000000000601020300000020000000610000002001040100000000
*00000000280000000000000000000000000000000601020b000000200000007500000073000000
*690000006e00000067000000200000007400000068000000650000002001040200000000000000
*00cc000000000000000000000000000000250000000000000000cb000000000000000000000000
*00000025010234000000200000006d0000006f0000006e0000006f00000069000000640000002e
*000000200000004100000020000000730000007000000065000000630000006900000061000000
*6c000000690000007a000000650000006400000020000000760000006500000072000000730000
*00690000006f0000006e000000200000006f000000660000002000000069000000740000007300
*0000200000006e000000610000006d0000006500000073000000610000006b0000006500000020
*00000066000000720000006f0000006d0000002001050d00000044000000610000007400000061
*0000002e000000460000006f0000006c0000006400000061000000620000006c00000065010205
*00000020000000610000006e000000640000002001050d000000430000006f0000006e00000074
*000000720000006f0000006c0000002e0000004d0000006f0000006e0000006100000064020100
*00000a0b0102010000000a01020400000020000000200000002000000020010401000000000000
*00002e00000000000000000000000000000006010201000000200104010000000000000000cd00
*0000000000000000000000000000250102010000000a020000000000000000d301030102210000
*00430000006f0000006e00000076000000650000006e00000069000000650000006e0000006300
*0000650000002000000066000000750000006e0000006300000074000000690000006f0000006e
*00000020000000610000007300000020000000660000006f000000750000006e00000064000000
*20000000690000006e0000002001050d000000440000006100000074000000610000002e000000
*460000006f0000006c0000006400000061000000620000006c0000006501020500000020000000
*610000006e000000640000002001050d000000430000006f0000006e0000007400000072000000
*6f0000006c0000002e0000004d0000006f0000006e000000610000006402010000000a0b010201
*0000000a010205000000200000002000000020000000200000002001040100000000000000015d
*0000000000000030000000000000003c010201000000200104010000000000000000d200000000
*0000000000000000000000260102010000000a020000000000000000d401030102310000005400
*000068000000650000002000000073000000750000006d000000200000006f0000006600000020
*0000006100000020000000630000006f0000006c0000006c000000650000006300000074000000
*690000006f0000006e000000200000006f00000066000000200000006100000063000000740000
*00690000006f0000006e000000730000002c0000002000000067000000650000006e0000006500
*000072000000610000006c000000690000007a000000690000006e000000670000002001040100
*000000000000015e0000000000000030000000000000004002010000000a0b0102010000000a01
*0205000000200000002000000020000000200000002001040100000000000000002f0000000000
*0000000000000000000006010201000000200104010000000000000000ca000000000000000000
*000000000000250102010000000a020000000000000000d5010301020c00000045000000660000
*0066000000690000006300000069000000650000006e000000740000006c000000790000002001
*040100000000000000002a00000000000000000000000000000006010203000000200000006100
*0000200104010000000000000000280000000000000000000000000000000601020b0000002000
*00007500000073000000690000006e000000670000002000000074000000680000006500000020
*010402000000000000000047000000000000000000000000000000090000000000000000460000
*0000000000000000000000000009010234000000200000006d0000006f0000006e0000006f0000
*0069000000640000002e0000002000000041000000200000007300000070000000650000006300
*000069000000610000006c000000690000007a0000006500000064000000200000007600000065
*0000007200000073000000690000006f0000006e000000200000006f0000006600000020000000
*690000007400000073000000200000006e000000610000006d0000006500000073000000610000
*006b000000650000002000000066000000720000006f0000006d0000002001050d000000440000
*006100000074000000610000002e000000460000006f0000006c00000064000000610000006200
*00006c0000006502010000000a0b0102010000000a010205000000200000002000000020000000
*200000002001040100000000000000002e00000000000000000000000000000006010201000000
*20010401000000000000000048000000000000000000000000000000090102010000000a020000
*000000000000d60301021700000054000000790000007000000065000000200000007300000070
*000000650000006300000069000000610000006c000000690000007a0000006100000074000000
*690000006f0000006e000000200000006f0000006600000020010507000000660000006f000000
*6c000000640000004d000000610000007002070000002000000061000000620000006f00000076
*000000650000000a00000000000000d7010301020c000000450000006600000066000000690000
*006300000069000000650000006e000000740000006c0000007900000020010401000000000000
*00002d000000000000000000000000000000060102030000002000000061000000200104010000
*000000000000280000000000000000000000000000000601020b00000020000000750000007300
*0000690000006e0000006700000020000000740000006800000065000000200104020000000000
*000000470000000000000000000000000000000900000000000000004600000000000000000000
*000000000009010234000000200000006d0000006f0000006e0000006f00000069000000640000
*002e00000020000000410000002000000073000000700000006500000063000000690000006100
*00006c000000690000007a00000065000000640000002000000076000000650000007200000073
*000000690000006f0000006e000000200000006f00000066000000200000006900000074000000
*73000000200000006e000000610000006d0000006500000073000000610000006b000000650000
*002000000066000000720000006f0000006d0000002001050d0000004400000061000000740000
*00610000002e000000460000006f0000006c0000006400000061000000620000006c0000006502
*010000000a0b0102010000000a0102050000002000000020000000200000002000000020010401
*00000000000000002f000000000000000000000000000000060102010000002001040100000000
*0000000048000000000000000000000000000000090102010000000a020000000000000000d803
*01020c000000430000006f0000006e000000760000006500000072000000740000002000000061
*0000006e0000007900000020010401000000000000000028000000000000000000000000000000
*0601022e00000020000000740000006f0000002000000061000000200000006c00000069000000
*7300000074000000200000006f0000006600000020000000690000007400000073000000200000
*00630000006f0000006e00000074000000650000006e00000074000000730000002e0000002000
*00005300000070000000650000006300000069000000610000006c000000690000007a00000061
*00000074000000690000006f0000006e000000200000006f000000660000002001040100000000
*000000002d0000000000000000000000000000000602010000000a00000000000000d901030102
*0c000000450000006600000066000000690000006300000069000000650000006e000000740000
*006c000000790000002001040100000000000000002d0000000000000000000000000000000601
*020300000020000000610000002001040100000000000000002800000000000000000000000000
*00000601021e000000200000007400000068000000610000007400000020000000630000006f00
*00006e0000007400000061000000690000006e000000730000002000000076000000610000006c
*000000750000006500000073000000200000006f00000066000000200000007400000079000000
*70000000650000002001040100000000000000015f000000000000003500000000000000410201
*0000000a0b0102010000000a010205000000200000002000000020000000200000002001040100
*000000000000002f00000000000000000000000000000006010201000000200104010000000000
*00000134000000000000003000000000000000310102010000000a020000000000000000da0103
*01020c000000450000006600000066000000690000006300000069000000650000006e00000074
*0000006c000000790000002001040100000000000000002d000000000000000000000000000000
*060102030000002000000061000000200104010000000000000000280000000000000000000000
*000000000601021e00000020000000740000006800000061000000740000002000000063000000
*6f0000006e0000007400000061000000690000006e000000730000002000000076000000610000
*006c000000750000006500000073000000200000006f0000006600000020000000740000007900
*000070000000650000002001040100000000000000015f00000000000000350000000000000041
*02010000000a0b0102010000000a01020500000020000000200000002000000020000000200104
*0100000000000000002f0000000000000000000000000000000601020100000020010401000000
*000000000137000000000000003000000000000000310102010000000a020000000000000000db
*010301020c000000450000006600000066000000690000006300000069000000650000006e0000
*00740000006c000000790000002001040100000000000000002a00000000000000000000000000
*00000601020500000020000000610000006e000000790000002001040100000000000000002800
*000000000000000000000000000006024300000020000000630000006800000065000000630000
*006b000000690000006e0000006700000020000000740000006f00000020000000730000006500
*00006500000020000000690000006600000020000000610000006e00000079000000200000006f
*00000066000000200000006900000074000000730000002000000076000000610000006c000000
*750000006500000073000000200000006d00000061000000740000006300000068000000200000
*0074000000680000006500000020000000730000007500000070000000700000006c0000006900
*000065000000640000002000000070000000720000006500000064000000690000006300000061
*00000074000000650000000a0b0102010000000a01020500000020000000200000002000000020
*0000002001040100000000000000002e0000000000000000000000000000000601020100000020
*010401000000000000000137000000000000003000000000000000310102010000000a02000000
*0000000000dc010301020c00000045000000660000006600000069000000630000006900000065
*0000006e000000740000006c000000790000002001040100000000000000002a00000000000000
*00000000000000000601020500000020000000610000006e000000790000002001040100000000
*000000002800000000000000000000000000000006024300000020000000630000006800000065
*000000630000006b000000690000006e0000006700000020000000740000006f00000020000000
*73000000650000006500000020000000690000006600000020000000610000006c0000006c0000
*00200000006f000000660000002000000069000000740000007300000020000000760000006100
*00006c000000750000006500000073000000200000006d00000061000000740000006300000068
*000000200000007400000068000000650000002000000073000000750000007000000070000000
*6c0000006900000065000000640000002000000070000000720000006500000064000000690000
*00630000006100000074000000650000000a0b0102010000000a01020500000020000000200000
*0020000000200000002001040100000000000000002e0000000000000000000000000000000601
*020100000020010401000000000000000134000000000000003000000000000000310102010000
*000a020000000000000000dd010301022800000045000000660000006600000069000000630000
*0069000000650000006e000000740000006c000000790000002000000073000000750000006d00
*0000200000006f0000007600000065000000720000002000000074000000680000006500000020
*0000006d000000650000006d00000062000000650000007200000073000000200000006f000000
*6600000020000000610000006e0000007900000020010401000000000000000028000000000000
*0000000000000000000602010000000a0b0102010000000a010205000000200000002000000020
*000000200000002001040100000000000000002f00000000000000000000000000000006010201
*0000002001040100000000000000013a000000000000003000000000000000310102010000000a
*020000000000000000de0103010232000000450000006600000066000000690000006300000069
*000000650000006e000000740000006c000000790000002000000074000000610000006b000000
*65000000200000007400000068000000650000002000000070000000720000006f000000640000
*00750000006300000074000000200000006f000000660000002000000065000000760000006500
*00007200000079000000200000006d000000650000006d00000062000000650000007200000020
*0000006f0000006600000020000000610000002001040100000000000000002800000000000000
*00000000000000000602010000000a0b0102010000000a01020500000020000000200000002000
*0000200000002001040100000000000000002f0000000000000000000000000000000601020100
*00002001040100000000000000013d000000000000003000000000000000310102010000000a02
*0000000000000000df03010210000000430000006800000065000000630000006b000000200000
*00740000006f000000200000007300000065000000650000002000000069000000660000002001
*04010000000000000000db0000000000000000000000000000002601020f000000200000006d00
*0000650000006d000000620000006500000072000000200000006f000000660000002000000074
*000000680000006500000020010401000000000000000028000000000000000000000000000000
*06021c000000200000006d00000061000000740000006300000068000000650000007300000020
*00000074000000680000006500000020000000730000007500000070000000700000006c000000
*6900000065000000640000002000000076000000610000006c00000075000000650000000a0000
*0000000000e003010242000000430000006800000065000000630000006b000000200000007400
*00006f000000200000006d000000610000006b0000006500000020000000730000007500000072
*000000650000002000000074000000680000006100000074000000200000007400000068000000
*6500000020000000730000007500000070000000700000006c0000006900000065000000640000
*002000000076000000610000006c00000075000000650000002000000069000000730000002000
*00006e0000006f000000740000002000000061000000200000006d000000650000006d00000062
*0000006500000072000000200000006f0000006600000020000000740000006800000065000000
*200104010000000000000000280000000000000000000000000000000602010000000a00000000
*000000e10301020c00000045000000660000006600000069000000630000006900000065000000
*6e000000740000006c000000790000002001040100000000000000002a00000000000000000000
*00000000000601021f000000200000006100000020000000730000007500000062000000730000
*006500000074000000200000006f00000066000000200000007400000068000000650000002000
*0000650000006c000000650000006d000000650000006e00000074000000730000002000000069
*0000006e0000002000000061000000200104010000000000000000280000000000000000000000
*000000000602010000000a00000000000000e203026a000000410000006c0000006c0000006f00
*00007700000073000000200000006900000064000000690000006f0000006d0000006100000074
*000000690000006300000020000000730000007000000065000000630000006900000061000000
*6c000000690000007a0000006100000074000000690000006f0000006e000000200000006f0000
*00660000002000000066000000690000006c000000740000006500000072000000200000006200
*0000790000002000000070000000720000006f00000076000000690000006e0000006700000020
*000000610000002000000066000000750000006e0000006300000074000000690000006f000000
*6e00000020000000740000006800000061000000740000002000000077000000690000006c0000
*006c00000020000000620000006500000020000000750000007300000065000000640000002000
*0000740000006f000000200000007400000072000000610000006e00000073000000660000006f
*000000720000006d00000020000000740000006800000065000000200000006f00000075000000
*740000007000000075000000740000000a00000000000000e30103010214000000410000002000
*00007300000070000000650000006300000069000000610000006c000000690000007a00000061
*00000074000000690000006f0000006e000000200000006f000000660000002001040100000000
*00000000e10000000000000000000000000000002601020b000000200000007500000073000000
*690000006e00000067000000200000007400000068000000650000002001040200000000000000
*014100000000000000300000000000000031000000000000000142000000000000003000000000
*000000310102010000002001040100000000000000012800000000000000300000000000000031
*01020f0000002c00000020000000610000006e000000610000006c0000006f000000670000006f
*000000750000007300000020000000740000006f0000002001020e000000440000006100000074
*000000610000002e0000004c0000006900000073000000740000002e0000006600000069000000
*6e0000006402010000000a0b0102010000000a0102050000002000000020000000200000002000
*0000200104010000000000000000e2000000000000000000000000000000260102010000002001
*0401000000000000000140000000000000003000000000000000310102010000000a02004d0000
*00000000012b000000000000012c000000000000012d0000000000000128000000000000012e00
*0000000000012f0000000000000130000000000000013100000000000001320000000000000133
*000000000000013400000000000001350000000000000136000000000000013700000000000001
*380000000000000139000000000000013a000000000000013b000000000000013c000000000000
*013d000000000000013e000000000000013f000000000000014000000000000001410000000000
*000142000000000000014300000000000001440000000000000145000000000000000000000000
*000000010000000000000002000000000000000300000000000000040000000000000005000000
*0000000006000000000000000700000000000000080000000000000009000000000000000a0000
*00000000001f000000000000002000000000000000210000000000000022000000000000002300
*000000000000240000000000000025000000000000002600000000000000270000000000000028
*0000000000000029000000000000002a000000000000002b000000000000002c00000000000000
*2d000000000000002e000000000000002f00000000000000cf00000000000000d0000000000000
*00d100000000000000d200000000000000d300000000000000d400000000000000d50000000000
*0000d600000000000000d700000000000000d800000000000000d900000000000000da00000000
*000000db00000000000000dc00000000000000dd00000000000000de00000000000000df000000
*00000000e000000000000000e100000000000000e200000000000000e31500000000000000d200
*000000000000d300000000000000d400000000000000cf00000000000000d000000000000000d1
*00000000000000d900000000000000da00000000000000db00000000000000dc00000000000000
*d500000000000000d700000000000000d800000000000000d600000000000000df000000000000
*00e100000000000000e200000000000000e300000000000000dd00000000000000de0000000000
*0000e0000000000000000000000000000000270001140000006e0000006f0000006e0000002d00
*0000700000006f000000720000007400000061000000620000006c000000650000002000000028
*0000004d0000005000000054000000430000007300000029010c00000065000000780000007000
*00006500000072000000690000006d000000650000006e00000074000000610000006c01100000
*00650000006b0000006d00000065000000740000007400000040000000670000006d0000006100
*0000690000006c0000002e000000630000006f0000006d003a000000000000012b000000000000
*012c000000000000012d0000000000000128000000000000012e000000000000012f0000000000
*000130000000000000013100000000000001320000000000000133000000000000013400000000
*000001350000000000000136000000000000013700000000000001380000000000000139000000
*000000013a000000000000013b000000000000013c000000000000013d000000000000013e0000
*00000000013f000000000000014000000000000001410000000000000142000000000000014300
*000000000001440000000000000145000000000000000000000000000000010000000000000002
*000000000000000300000000000000040000000000000005000000000000000600000000000000
*0700000000000000080000000000000009000000000000000a000000000000001f000000000000
*002000000000000000210000000000000022000000000000002300000000000000240000000000
*000025000000000000002600000000000000270000000000000028000000000000002900000000
*0000002a000000000000002b000000000000002c000000000000002d000000000000002e000000
*000000002f00000000000000e400000000000000e50200000000000000e400000000000000e500
*000000000000000000000000000028000000002a00000000000001600301021000000041000000
*20000000730000006500000074000000200000006f000000660000002000000076000000610000
*006c00000075000000650000007300000020010702010000006102020000002e0000000a000000
*00000000e803010602060000004f000000280000006e0000002b0000006d000000290102060000
*002e00000020000000530000006500000065000000200104010000000000000000f90000000000
*000000000000000000002802020000002e0000000a00000000000000e903010602040000004f00
*000028000000310000002902190000002e00000020000000490000007300000020000000740000
*006800000069000000730000002000000074000000680000006500000020000000650000006d00
*0000700000007400000079000000200000007300000065000000740000003f0000000a00000000
*000000ea03010602040000004f00000028000000310000002902250000002e0000002000000054
*0000006800000065000000200000006e000000750000006d000000620000006500000072000000
*200000006f0000006600000020000000650000006c000000650000006d000000650000006e0000
*00740000007300000020000000690000006e000000200000007400000068000000650000002000
*00007300000065000000740000002e0000000a00000000000000eb03010602080000004f000000
*280000006c0000006f00000067000000200000006e00000029021d0000002e0000002000000049
*000000730000002000000074000000680000006500000020000000650000006c00000065000000
*6d000000650000006e0000007400000020000000690000006e0000002000000074000000680000
*0065000000200000007300000065000000740000003f0000000a00000000000000ec0301060208
*0000004f000000280000006c0000006f00000067000000200000006e0000002902210000002e00
*00002000000049000000730000002000000074000000680000006500000020000000650000006c
*000000650000006d000000650000006e00000074000000200000006e0000006f00000074000000
*20000000690000006e000000200000007400000068000000650000002000000073000000650000
*00740000003f0000000a00000000000000ed03010602040000004f000000280000003100000029
*02110000002e0000002000000054000000680000006500000020000000650000006d0000007000
*00007400000079000000200000007300000065000000740000002e0000000a00000000000000ee
*03010602040000004f000000280000003100000029021a0000002e000000200000004300000072
*000000650000006100000074000000650000002000000061000000200000007300000069000000
*6e000000670000006c00000065000000740000006f0000006e0000002000000073000000650000
*00740000002e0000000a00000000000000ef03010602080000004f000000280000006c0000006f
*00000067000000200000006e0000002901021e0000002e00000020000000490000006e00000073
*00000065000000720000007400000020000000610000006e00000020000000650000006c000000
*650000006d000000650000006e0000007400000020000000690000006e00000020000000610000
*00200000007300000065000000740000002e0000000a0102420000002000000049000000660000
*002000000074000000680000006500000020000000730000006500000074000000200000006100
*00006c000000720000006500000061000000640000007900000020000000630000006f0000006e
*0000007400000061000000690000006e0000007300000020000000610000006e00000020000000
*650000006c000000650000006d000000650000006e000000740000002000000065000000710000
*0075000000610000006c00000020000000740000006f0000002000000074000000680000006500
*000020000000670000006900000076000000650000006e0000002000000076000000610000006c
*00000075000000650000002c0000000a0224000000200000006900000074000000200000006900
*000073000000200000007200000065000000700000006c00000061000000630000006500000064
*000000200000007700000069000000740000006800000020000000740000006800000065000000
*200000006e00000065000000770000002000000076000000610000006c00000075000000650000
*002e0000000a00000000000000f003010602080000004f000000280000006c0000006f00000067
*000000200000006e0000002902200000002e0000002000000044000000650000006c0000006500
*0000740000006500000020000000610000006e00000020000000650000006c000000650000006d
*000000650000006e000000740000002000000066000000720000006f0000006d00000020000000
*61000000200000007300000065000000740000002e0000000a00000000000000f1030106020600
*00004f000000280000006e0000002b0000006d0000002902390000002e00000020000000490000
*007300000020000000740000006800000069000000730000002000000061000000200000007000
*0000720000006f0000007000000065000000720000002000000073000000750000006200000073
*00000065000000740000003f000000200000002800000069000000650000002e00000020000000
*610000002000000073000000750000006200000073000000650000007400000020000000620000
*007500000074000000200000006e0000006f000000740000002000000065000000710000007500
*0000610000006c000000290000002e0000000a00000000000000f203010602060000004f000000
*280000006e0000002b0000006d000000290102140000002e000000200000004900000073000000
*200000007400000068000000690000007300000020000000610000002000000073000000750000
*00620000007300000065000000740000003f0000000a0102010000002001070102040000002800
*00007300000031000000200104010000000000000000f200000000000000000000000000000028
*02040000002000000073000000320000002901020f0000002000000074000000650000006c0000
*006c00000073000000200000007700000068000000650000007400000068000000650000007200
*000020010702020000007300000031010210000000200000006900000073000000200000006100
*000020000000730000007500000062000000730000006500000074000000200000006f00000066
*0000002001070202000000730000003202020000002e0000000a00000000000000f30301060208
*0000004f000000280000006c0000006f00000067000000200000006e0000002902200000002e00
*000020000000540000006800000065000000200000006d000000690000006e000000690000006d
*000000610000006c00000020000000650000006c000000650000006d000000650000006e000000
*74000000200000006f000000660000002000000061000000200000007300000065000000740000
*002e0000000a00000000000000f403010602080000004f000000280000006c0000006f00000067
*000000200000006e0000002902200000002e000000200000005400000068000000650000002000
*00006d0000006100000078000000690000006d000000610000006c00000020000000650000006c
*000000650000006d000000650000006e00000074000000200000006f0000006600000020000000
*61000000200000007300000065000000740000002e0000000a00000000000000f5030106020800
*00004f000000280000006c0000006f00000067000000200000006e00000029021e0000002e0000
*002000000044000000650000006c00000065000000740000006500000020000000740000006800
*000065000000200000006d000000690000006e000000690000006d000000610000006c00000020
*000000650000006c000000650000006d000000650000006e000000740000002e0000000a000000
*00000000f603010602080000004f000000280000006c0000006f00000067000000200000006e00
*000029021e0000002e0000002000000044000000650000006c0000006500000074000000650000
*0020000000740000006800000065000000200000006d0000006100000078000000690000006d00
*0000610000006c00000020000000650000006c000000650000006d000000650000006e00000074
*0000002e0000000a00000000000000f70301021e00000054000000680000006500000020000000
*750000006e000000690000006f0000006e000000200000006f0000006600000020000000610000
*00200000006c000000690000007300000074000000200000006f00000066000000200000007300
*00006500000074000000730000003a000000200000002801070104010000000000000000f70000
*0000000000000000000000000028010204000000200000003d0000003d00000020010401000000
*000000000161000000000000003000000000000000400102010000002001040100000000000000
*00f8000000000000000000000000000000280102010000002004010000000000000000ed000000
*000000000000000000000000280203000000290000002e0000000a00000000000000f803010602
*060000004f000000280000006e0000002b0000006d000000290102370000002e00000020000000
*54000000680000006500000020000000750000006e000000690000006f0000006e000000200000
*006f000000660000002000000074000000770000006f0000002000000073000000650000007400
*0000730000002c0000002000000070000000720000006500000066000000650000007200000072
*000000690000006e00000067000000200000007400000068000000650000002000000066000000
*690000007200000073000000740000002000000073000000650000007400000020000000770000
*0068000000650000006e0000000a01022100000020000000650000007100000075000000610000
*006c00000020000000650000006c000000650000006d000000650000006e000000740000007300
*00002000000061000000720000006500000020000000650000006e000000630000006f00000075
*0000006e00000074000000650000007200000065000000640000002e0000000a01022700000020
*00000054000000680000006500000020000000690000006d000000700000006c00000065000000
*6d000000650000006e000000740000006100000074000000690000006f0000006e000000200000
*007500000073000000650000007300000020000000740000006800000065000000200000006500
*00006600000066000000690000006300000069000000650000006e00000074000000200106020b
*00000068000000650000006400000067000000650000002d000000750000006e00000069000000
*6f0000006e01020c00000020000000610000006c000000670000006f0000007200000069000000
*74000000680000006d0000002e0000000a01022a00000020000000480000006500000064000000
*67000000650000002d000000750000006e000000690000006f0000006e00000020000000690000
*0073000000200000006d0000006f00000072000000650000002000000065000000660000006600
*0000690000006300000069000000650000006e00000074000000200000006f0000006e00000020
*000000280000006200000069000000670000007300000065000000740000002001040100000000
*00000000f800000000000000000000000000000028020c00000020000000730000006d00000061
*0000006c0000006c000000730000006500000074000000290000002e0000000a00000000000000
*f903010602060000004f000000280000006e0000002b0000006d0000002901021b0000002e0000
*0020000000440000006900000066000000660000006500000072000000650000006e0000006300
*000065000000200000006f000000660000002000000074000000770000006f0000002000000073
*0000006500000074000000730000002e000000200000000a010226000000200000005400000068
*0000006500000020000000690000006d000000700000006c000000650000006d00000065000000
*6e000000740000006100000074000000690000006f0000006e0000002000000075000000730000
*00650000007300000020000000610000006e000000200000006500000066000000660000006900
*00006300000069000000650000006e000000740000002001060205000000680000006500000064
*000000670000006501021b00000020000000610000006c000000670000006f0000007200000069
*00000074000000680000006d00000020000000630000006f0000006d0000007000000061000000
*7200000061000000620000006c0000006500000020000000770000006900000074000000680000
*00200106020b00000068000000650000006400000067000000650000002d000000750000006e00
*0000690000006f0000006e02020000002e0000000a00000000000000fa0103010602060000004f
*000000280000006e0000002b0000006d000000290102200000002e000000200000005400000068
*0000006500000020000000690000006e0000007400000065000000720000007300000065000000
*6300000074000000690000006f0000006e000000200000006f0000006600000020000000740000
*00770000006f00000020000000730000006500000074000000730000002e0000000a0240000000
*20000000450000006c000000650000006d000000650000006e0000007400000073000000200000
*006f00000066000000200000007400000068000000650000002000000072000000650000007300
*0000750000006c0000007400000020000000630000006f0000006d000000650000002000000066
*000000720000006f0000006d000000200000007400000068000000650000002000000066000000
*69000000720000007300000074000000200000007300000065000000740000002c000000200000
*00730000006f00000020000000660000006f000000720000002000000065000000780000006100
*00006d000000700000006c000000650000000a010b01022000000020000000690000006d000000
*700000006f0000007200000074000000200000007100000075000000610000006c000000690000
*006600000069000000650000006400000020000000440000006100000074000000610000002e00
*000053000000650000007400000020000000610000007300000020000000530000000a01021f00
*00002000000064000000610000007400000061000000200000004100000042000000200000003d
*0000002000000041000000200000007c0000002000000042000000200000006400000065000000
*720000006900000076000000690000006e000000670000002000000053000000680000006f0000
*00770000000a01022800000020000000690000006e0000007300000074000000610000006e0000
*006300000065000000200000004f00000072000000640000002000000041000000420000002000
*0000770000006800000065000000720000006500000020000000630000006f0000006d00000070
*000000610000007200000065000000200000005f000000200000005f000000200000003d000000
*2000000045000000510000000a01022400000020000000690000006e0000007300000074000000
*610000006e00000063000000650000002000000045000000710000002000000041000000420000
*00200000007700000068000000650000007200000065000000200000005f000000200000003d00
*00003d000000200000005f000000200000003d0000002000000054000000720000007500000065
*0000000a01023d000000200000006d00000061000000690000006e000000200000003d00000020
*0000007000000072000000690000006e000000740000002000000028000000530000002e000000
*73000000690000006e000000670000006c00000065000000740000006f0000006e000000200000
*00410000002000000060000000530000002e000000690000006e00000074000000650000007200
*000073000000650000006300000074000000690000006f0000006e000000600000002000000053
*0000002e00000073000000690000006e000000670000006c00000065000000740000006f000000
*6e00000020000000420000002c0000000a023d0000002000000020000000200000002000000020
*000000200000002000000020000000200000002000000020000000200000002000000020000000
*20000000530000002e00000073000000690000006e000000670000006c00000065000000740000
*006f0000006e00000020000000420000002000000060000000530000002e000000690000006e00
*000074000000650000007200000073000000650000006300000074000000690000006f0000006e
*0000006000000020000000530000002e00000073000000690000006e000000670000006c000000
*65000000740000006f0000006e0000002000000041000000290000000a03010207000000700000
*0072000000690000006e000000740000007300000020010701020c000000280000006600000072
*0000006f0000006d0000004c000000690000007300000074000000200000005b00000041010201
*0000005d01020c0000002c00000066000000720000006f0000006d0000004c0000006900000073
*00000074000000200000005b000000420102010000005d02010000002902020000002e0000000a
*00000000000000fb03010602040000004f000000280000006e0000002902320000002e00000020
*00000046000000690000006c00000074000000650000007200000020000000610000006c000000
*6c00000020000000650000006c000000650000006d000000650000006e00000074000000730000
*002000000074000000680000006100000074000000200000007300000061000000740000006900
*000073000000660000007900000020000000740000006800000065000000200000007000000072
*000000650000006400000069000000630000006100000074000000650000002e0000000a000000
*00000000fc03010602040000004f000000280000006e000000290102460000002e000000200000
*00500000006100000072000000740000006900000074000000690000006f0000006e0000002000
*00007400000068000000650000002000000073000000650000007400000020000000690000006e
*000000740000006f0000002000000074000000770000006f000000200000007300000065000000
*74000000730000002c000000200000006f0000006e000000650000002000000077000000690000
*00740000006800000020000000610000006c0000006c00000020000000650000006c0000006500
*00006d000000650000006e00000074000000730000002000000074000000680000006100000074
*00000020000000730000006100000074000000690000007300000066000000790000000a010231
*000000200000007400000068000000650000002000000070000000720000006500000064000000
*690000006300000061000000740000006500000020000000610000006e00000064000000200000
*006f0000006e000000650000002000000077000000690000007400000068000000200000006100
*00006c0000006c00000020000000650000006c000000650000006d000000650000006e00000074
*00000073000000200000007400000068000000610000007400000020000000640000006f000000
*6e0102010000002701021900000074000000200000007300000061000000740000006900000073
*000000660000007900000020000000740000006800000065000000200000007000000072000000
*650000006400000069000000630000006100000074000000650000002e0000000a01020a000000
*2000000053000000650000006500000020000000610000006c000000730000006f000000200104
*010000000000000001060000000000000000000000000000002802020000002e0000000a000000
*00000000fd01030106020a0000004f000000280000006e0000002a0000006c0000006f00000067
*000000200000006e000000290102030000002e000000200000000a010201000000200107010401
*0000000000000000fd000000000000000000000000000000280204000000200000006600000020
*000000730102210000002000000069000000730000002000000074000000680000006500000020
*000000730000006500000074000000200000006f00000062000000740000006100000069000000
*6e0000006500000064000000200000006200000079000000200000006100000070000000700000
*006c00000079000000690000006e00000067000000200107020100000066010214000000200000
*00740000006f000000200000006500000061000000630000006800000020000000650000006c00
*0000650000006d000000650000006e00000074000000200000006f000000660000002001070201
*0000007302020000002e0000000a0301020200000049000000740102010000002701023e000000
*7300000020000000770000006f000000720000007400000068000000200000006e0000006f0000
*0074000000690000006e0000006700000020000000740000006800000061000000740000002000
*00007400000068000000650000002000000073000000690000007a00000065000000200000006f
*000000660000002000000074000000680000006500000020000000720000006500000073000000
*750000006c00000074000000200000006d00000061000000790000002000000062000000650000
*0020000000730000006d000000610000006c0000006c0000006500000072000000200000006900
*0000660000002c0000000a01020a00000020000000660000006f00000072000000200000007300
*00006f0000006d00000065000000200107020500000028000000780000002c0000007900000029
*0102020000002c00000020010701020200000078000000200102010000002f0102040000003d00
*00002000000079000000200102010000002601020100000026020b000000200000006600000020
*00000078000000200000003d0000003d0000002000000066000000200000007902010000000a00
*000000000000fe0103010602040000004f000000280000006e0000002902070000002e00000020
*000000540000006800000065000000200000000a010301070104010000000000000000fe000000
*000000000000000000000000280102080000002000000066000000200000007300000020000000
*3d0000003d000000200104010000000000000000fd000000000000000000000000000000280204
*000000200000006600000020000000730102160000002c00000020000000620000007500000074
*00000020000000770000006f000000720000006b00000073000000200000006f0000006e000000
*6c00000079000000200000007700000068000000650000006e0000002001070201000000660102
*0f000000200000006900000073000000200000006d0000006f0000006e0000006f000000740000
*006f0000006e00000069000000630000002e0000000a0102010000002001060220000000540000
*00680000006500000020000000700000007200000065000000630000006f0000006e0000006400
*00006900000074000000690000006f0000006e000000200000006900000073000000200000006e
*0000006f0000007400000020000000630000006800000065000000630000006b00000065000000
*640000002e0102010000000a02190000002000000053000000650000006d000000690000002d00
*0000660000006f000000720000006d000000610000006c0000006c000000790000002c00000020
*000000770000006500000020000000680000006100000076000000650000003a0000000a0b0102
*2f00000020000000610000006e00000064000000200000005b00000078000000200000003c0000
*002000000079000000200000003d0000003d0000003e0000002000000066000000200000007800
*0000200000003c00000020000000660000002000000079000000200000007c0000002000000078
*000000200000003c0000002d000000200000006c000000730000002c0000002000000079000000
*200000003c0000002d000000200000006c000000730000005d000000200000000a010235000000
*200000002000000020000000200000002000000020000000200000002000000020000000200000
*002000000020000000200000002000000020000000200000002000000020000000200000002000
*0000200000003d0000003d0000003e000000200000006d00000061000000700000004d0000006f
*0000006e0000006f000000740000006f0000006e00000069000000630000002000000066000000
*2000000073000000200000003d0000003d000000200000006d0000006100000070000000200000
*006600000020000000730000000a02190000002000000020000000200000002000000020000000
*7700000068000000650000007200000065000000200000006c00000073000000200000003d0000
*0020000000740000006f0000004c00000069000000730000007400000020000000730000000a00
*000000000000ff03010602040000004f000000280000006e00000029023b0000002e0000002000
*0000460000006f0000006c00000064000000200000006f00000076000000650000007200000020
*00000074000000680000006500000020000000650000006c000000650000006d00000065000000
*6e0000007400000073000000200000006f00000066000000200000006100000020000000730000
*00650000007400000020000000690000006e00000020000000610000006e000000200000007500
*00006e000000730000007000000065000000630000006900000066000000690000006500000064
*000000200000006f000000720000006400000065000000720000002e0000000a00000000000001
*6203010602040000004f000000280000006e0000002902130000002e0000002000000050000000
*6f00000073000000740000002d0000006f00000072000000640000006500000072000000200000
*00660000006f0000006c000000640000002e0000000a000000000000010003010602040000004f
*000000280000006e0000002902190000002e000000200000005400000068000000650000002000
*0000650000006c000000650000006d000000650000006e0000007400000073000000200000006f
*000000660000002000000061000000200000007300000065000000740000002e0000000a000000
*000000010103010602040000004f000000280000006e0000002902290000002e00000020000000
*430000006f0000006e000000760000006500000072000000740000002000000074000000680000
*00650000002000000073000000650000007400000020000000740000006f000000200000006100
*0000200000006c000000690000007300000074000000200000006f000000660000002000000065
*0000006c000000650000006d000000650000006e00000074000000730000002e0000000a000000
*000000010203010602040000004f000000280000006e0000002902340000002e00000020000000
*430000006f0000006e000000760000006500000072000000740000002000000074000000680000
*00650000002000000073000000650000007400000020000000740000006f000000200000006100
*00006e00000020000000610000007300000063000000650000006e00000064000000690000006e
*00000067000000200000006c000000690000007300000074000000200000006f00000066000000
*20000000650000006c000000650000006d000000650000006e00000074000000730000002e0000
*000a0000000000000103030106020a0000004f000000280000006e0000002a0000006c0000006f
*00000067000000200000006e0000002902280000002e0000002000000043000000720000006500
*000061000000740000006500000020000000610000002000000073000000650000007400000020
*00000066000000720000006f0000006d0000002000000061000000200000006c00000069000000
*7300000074000000200000006f0000006600000020000000650000006c000000650000006d0000
*00650000006e00000074000000730000002e0000000a000000000000010403010602040000004f
*000000280000006e000000290102350000002e000000200000004200000075000000690000006c
*000000640000002000000061000000200000007300000065000000740000002000000066000000
*720000006f0000006d00000020000000610000006e000000200000006100000073000000630000
*00650000006e00000064000000690000006e00000067000000200000006c000000690000007300
*00007400000020000000690000006e000000200000006c000000690000006e0000006500000061
*000000720000002000000074000000690000006d000000650000002e0000000a01020100000020
*0106023a0000005400000068000000650000002000000070000000720000006500000063000000
*6f0000006e000000640000006900000074000000690000006f0000006e00000020000000280000
*00690000006e000000700000007500000074000000200000006c00000069000000730000007400
*000020000000690000007300000020000000610000007300000063000000650000006e00000064
*000000690000006e0000006700000029000000200000006900000073000000200000006e000000
*6f0000007400000020000000630000006800000065000000630000006b00000065000000640000
*002e02010000000a000000000000010503010602040000004f000000280000006e000000290102
*4a0000002e000000200000004200000075000000690000006c0000006400000020000000610000
*00200000007300000065000000740000002000000066000000720000006f0000006d0000002000
*0000610000006e00000020000000610000007300000063000000650000006e0000006400000069
*0000006e00000067000000200000006c000000690000007300000074000000200000006f000000
*660000002000000064000000690000007300000074000000690000006e00000063000000740000
*0020000000650000006c000000650000006d000000650000006e00000074000000730000002000
*0000690000006e000000200000006c000000690000006e00000065000000610000007200000020
*00000074000000690000006d000000650000002e0000000a010201000000200106024300000054
*000000680000006500000020000000700000007200000065000000630000006f0000006e000000
*640000006900000074000000690000006f0000006e0000002000000028000000690000006e0000
*00700000007500000074000000200000006c000000690000007300000074000000200000006900
*000073000000200000007300000074000000720000006900000063000000740000006c00000079
*00000020000000610000007300000063000000650000006e00000064000000690000006e000000
*6700000029000000200000006900000073000000200000006e0000006f00000074000000200000
*00630000006800000065000000630000006b00000065000000640000002e02010000000a000000
*000000010603010602080000004f000000280000006c0000006f00000067000000200000006e00
*0000290102120000002e0000002000000054000000680000006500000020000000650000007800
*00007000000072000000650000007300000073000000690000006f0000006e0000002000000028
*010701040100000000000000010600000000000000000000000000000028020600000020000000
*780000002000000073000000650000007401020c00000029000000200000006900000073000000
*20000000610000002000000070000000610000006900000072000000200107020b000000280000
*00730000006500000074000000310000002c000000730000006500000074000000320000002901
*02010000000a010207000000200000007700000068000000650000007200000065000000200107
*02040000007300000065000000740000003101021b00000020000000630000006f0000006d0000
*007000000072000000690000007300000065000000730000002000000074000000680000006500
*000020000000650000006c000000650000006d000000650000006e000000740000007300000020
*0000006f00000066000000200107020300000073000000650000007401020b000000200000006c
*000000650000007300000073000000200000007400000068000000610000006e00000020010702
*010000007801020500000020000000610000006e00000064000000200107020400000073000000
*6500000074000000320102010000000a01021b00000020000000630000006f0000006d00000070
*000000720000006900000073000000650000007300000020000000740000006800000065000000
*20000000650000006c000000650000006d000000650000006e0000007400000073000000200000
*006f00000066000000200107020300000073000000650000007401020e00000020000000670000
*007200000065000000610000007400000065000000720000002000000074000000680000006100
*00006e00000020010702010000007802020000002e0000000a0000000000000107030106020800
*00004f000000280000006c0000006f00000067000000200000006e0000002901020d0000002e00
*000020000000500000006500000072000000660000006f000000720000006d0000007300000020
*000000610000002001040100000000000000010600000000000000000000000000000028010224
*0000002000000062000000750000007400000020000000610000006c000000730000006f000000
*2000000072000000650000007400000075000000720000006e0000007300000020000000770000
*006800000065000000740000006800000065000000720000002000000074000000680000006500
*0000200000007000000069000000760000006f000000740000000a022800000020000000650000
*006c000000650000006d000000650000006e000000740000002000000077000000610000007300
*000020000000660000006f000000750000006e0000006400000020000000690000006e00000020
*000000740000006800000065000000200000006f00000072000000690000006700000069000000
*6e000000610000006c000000200000007300000065000000740000002e0000000a000000000000
*016303010602080000004f000000280000006c0000006f00000067000000200000006e00000029
*01020d0000002e00000020000000500000006500000072000000660000006f000000720000006d
*000000730000002000000061000000200104010000000000000001060000000000000000000000
*000000002801021c0000002000000062000000750000007400000020000000610000006c000000
*730000006f0000002000000072000000650000007400000075000000720000006e000000730000
*0020000000740000006800000065000000200000007000000069000000760000006f0000007400
*00000a022d00000020000000650000006c000000650000006d000000650000006e000000740000
*002000000074000000680000006100000074000000200000007700000061000000730000002000
*0000660000006f000000750000006e0000006400000020000000690000006e0000002000000074
*0000006800000065000000200000006f000000720000006900000067000000690000006e000000
*610000006c000000200000007300000065000000740000002e0000000a00000000000001080103
*010602080000004f000000280000006c0000006f00000067000000200000006e00000029022700
*00002e0000002000000044000000650000006c0000006500000074000000650000002000000061
*0000006e000000640000002000000066000000690000006e000000640000002000000074000000
*6800000065000000200000006d000000690000006e000000690000006d000000610000006c0000
*0020000000650000006c000000650000006d000000650000006e000000740000002e0000000a0b
*02320000002000000064000000650000006c000000650000007400000065000000460000006900
*00006e000000640000004d000000690000006e0000002000000073000000650000007400000020
*0000003d000000200000002800000066000000690000006e000000640000004d00000069000000
*6e000000200000007300000065000000740000002c0000002000000064000000650000006c0000
*006500000074000000650000004d000000690000006e0000002000000073000000650000007400
*0000290000000a00000000000001090103010602080000004f000000280000006c0000006f0000
*0067000000200000006e0000002902270000002e0000002000000044000000650000006c000000
*65000000740000006500000020000000610000006e000000640000002000000066000000690000
*006e0000006400000020000000740000006800000065000000200000006d000000610000007800
*0000690000006d000000610000006c00000020000000650000006c000000650000006d00000065
*0000006e000000740000002e0000000a0b02320000002000000064000000650000006c00000065
*000000740000006500000046000000690000006e000000640000004d0000006100000078000000
*20000000730000006500000074000000200000003d000000200000002800000066000000690000
*006e000000640000004d0000006100000078000000200000007300000065000000740000002c00
*00002000000064000000650000006c0000006500000074000000650000004d0000006100000078
*00000020000000730000006500000074000000290000000a000000000000010a03010602080000
*004f000000280000006c0000006f00000067000000200000006e000000290102340000002e0000
*002000000052000000650000007400000072000000690000006500000076000000650000007300
*000020000000740000006800000065000000200000006d000000690000006e000000690000006d
*000000610000006c000000200000006b0000006500000079000000200000006f00000066000000
*20000000740000006800000065000000200000007300000065000000740000002c000000200000
*00610000006e000000640000002000000074000000680000006500000020000000730000006500
*0000740000000a01021e0000002000000073000000740000007200000069000000700000007000
*00006500000064000000200000006f000000660000002000000074000000680000006100000074
*00000020000000650000006c000000650000006d000000650000006e000000740000002c000000
*200000006f00000072000000200104010000000000000001530000000000000030000000000000
*003202190000002000000069000000660000002000000070000000610000007300000073000000
*650000006400000020000000610000006e00000020000000650000006d00000070000000740000
*0079000000200000007300000065000000740000002e0000000a000000000000010b0301060208
*0000004f000000280000006c0000006f00000067000000200000006e000000290102340000002e
*000000200000005200000065000000740000007200000069000000650000007600000065000000
*7300000020000000740000006800000065000000200000006d0000006100000078000000690000
*006d000000610000006c000000200000006b0000006500000079000000200000006f0000006600
*000020000000740000006800000065000000200000007300000065000000740000002c00000020
*000000610000006e00000064000000200000007400000068000000650000002000000073000000
*65000000740000000a01021e000000200000007300000074000000720000006900000070000000
*700000006500000064000000200000006f00000066000000200000007400000068000000610000
*007400000020000000650000006c000000650000006d000000650000006e000000740000002c00
*0000200000006f0000007200000020010401000000000000000153000000000000003000000000
*000000320219000000200000006900000066000000200000007000000061000000730000007300
*0000650000006400000020000000610000006e00000020000000650000006d0000007000000074
*00000079000000200000007300000065000000740000002e0000000a000000000000010c030106
*02040000004f000000280000006e0000002901023b0000002e0000002000000053000000680000
*006f00000077000000200000007400000068000000650000002000000074000000720000006500
*000065000000200000007400000068000000610000007400000020000000690000006d00000070
*0000006c000000650000006d000000650000006e00000074000000730000002000000074000000
*6800000065000000200000007300000065000000740000002e0000002000000054000000680000
*006500000020000000740000007200000065000000650000002000000069000000730000002000
*000073000000680000006f000000770000006e0000000a022200000020000000690000006e0000
*00200000006100000020000000630000006f0000006d0000007000000072000000650000007300
*00007300000065000000640000002c0000002000000068000000610000006e0000006700000069
*0000006e0000006700000020000000660000006f000000720000006d0000006100000074000000
*2e0000000a000000000000010d0103010602040000004f000000280000006e0000002901021200
*00002e000000200000005400000068000000650000002000000065000000780000007000000072
*000000650000007300000073000000690000006f0000006e00000020000000280107021a000000
*73000000680000006f000000770000005400000072000000650000006500000057000000690000
*0074000000680000002000000068000000610000006e0000006700000020000000770000006900
*00006400000065000000200000006d000000610000007001020800000029000000200000007300
*0000680000006f00000077000000730000000a0102260000002000000074000000680000006500
*000020000000740000007200000065000000650000002000000074000000680000006100000074
*00000020000000690000006d000000700000006c000000650000006d000000650000006e000000
*740000007300000020000000740000006800000065000000200000007300000065000000740000
*002e000000200000004900000066000000200107020400000068000000610000006e0000006701
*02040000002000000069000000730000000a010201000000200107020400000054000000720000
*0075000000650102040000002c0000002000000061000000200106020700000068000000610000
*006e00000067000000690000006e00000067010235000000200000007400000072000000650000
*00650000002000000069000000730000002000000073000000680000006f000000770000006e00
*0000200000006f0000007400000068000000650000007200000077000000690000007300000065
*000000200000006100000020000000720000006f00000074000000610000007400000065000000
*640000002000000074000000720000006500000065000000200000006900000073000000200000
*0073000000680000006f000000770000006e0000002e0000002000000049000000660000000a01
*020100000020010702040000007700000069000000640000006501020400000020000000690000
*007300000020010401000000000000000164000000000000003500000000000000410222000000
*2c00000020000000610000006e0000002000000065000000780000007400000072000000610000
*002000000077000000690000006400000065000000200000007600000065000000720000007300
*0000690000006f0000006e0000002000000069000000730000002000000073000000680000006f
*000000770000006e0000002e0000000a0b01024600000020000000530000006500000074000000
*3e000000200000007000000075000000740000005300000074000000720000004c0000006e0000
*0020000000240000002000000073000000680000006f0000007700000054000000720000006500
*000065000000570000006900000074000000680000002000000054000000720000007500000065
*0000002000000046000000610000006c0000007300000065000000200000002400000020000000
*66000000720000006f0000006d00000044000000690000007300000074000000690000006e0000
*0063000000740000004100000073000000630000004c0000006900000073000000740000002000
*00005b000000310000002e0000002e000000350000005d0000000a010203000000200000003400
*00000a010206000000200000002b0000002d0000002d000000320000000a010209000000200000
*007c00000020000000200000002b0000002d0000002d000000310000000a010209000000200000
*007c00000020000000200000002b0000002d0000002d000000330000000a010206000000200000
*002b0000002d0000002d000000350000000a010202000000200000000a01024500000020000000
*5300000065000000740000003e0000002000000070000000750000007400000053000000740000
*00720000004c0000006e00000020000000240000002000000073000000680000006f0000007700
*000054000000720000006500000065000000570000006900000074000000680000002000000054
*000000720000007500000065000000200000005400000072000000750000006500000020000000
*240000002000000066000000720000006f0000006d000000440000006900000073000000740000
*00690000006e00000063000000740000004100000073000000630000004c000000690000007300
*000074000000200000005b000000310000002e0000002e000000350000005d0000000a01020300
*000020000000340000000a010203000000200000007c0000000a010206000000200000002b0000
*002d0000002d000000320000000a010206000000200000007c00000020000000200000007c0000
*000a010209000000200000007c00000020000000200000002b0000002d0000002d000000310000
*000a010206000000200000007c00000020000000200000007c0000000a01020900000020000000
*7c00000020000000200000002b0000002d0000002d000000330000000a01020300000020000000
*7c0000000a010206000000200000002b0000002d0000002d000000350000000a01020200000020
*0000000a010246000000200000005300000065000000740000003e000000200000007000000075
*000000740000005300000074000000720000004c0000006e000000200000002400000020000000
*73000000680000006f000000770000005400000072000000650000006500000057000000690000
*0074000000680000002000000046000000610000006c0000007300000065000000200000005400
*000072000000750000006500000020000000240000002000000066000000720000006f0000006d
*00000044000000690000007300000074000000690000006e000000630000007400000041000000
*73000000630000004c000000690000007300000074000000200000005b000000310000002e0000
*002e000000350000005d0000000a010206000000200000002b0000002d0000002d000000350000
*000a010203000000200000007c0000000a01020300000020000000340000000a01020300000020
*0000007c0000000a010209000000200000007c00000020000000200000002b0000002d0000002d
*000000330000000a010206000000200000007c00000020000000200000007c0000000a01020600
*0000200000002b0000002d0000002d000000320000000a01020600000020000000200000002000
*0000200000007c0000000a0209000000200000002000000020000000200000002b0000002d0000
*002d000000310000000a000000000000010e03010602040000004f000000280000006e00000029
*022f0000002e000000200000005400000065000000730000007400000020000000690000006600
*00002000000074000000680000006500000020000000690000006e000000740000006500000072
*0000006e000000610000006c000000200000007300000065000000740000002000000073000000
*740000007200000075000000630000007400000075000000720000006500000020000000690000
*00730000002000000076000000610000006c00000069000000640000002e0000000a2900000000
*000000e600000000000000e700000000000000e800000000000000e900000000000000ea000000
*00000000eb00000000000000ec00000000000000ed00000000000000ee00000000000000ef0000
*0000000000f000000000000000f100000000000000f200000000000000f300000000000000f400
*000000000000f500000000000000f600000000000000f700000000000000f800000000000000f9
*00000000000000fa00000000000000fb00000000000000fc00000000000000fd00000000000000
*fe00000000000000ff000000000000010000000000000001010000000000000102000000000000
*010300000000000001040000000000000105000000000000010600000000000001070000000000
*0001080000000000000109000000000000010a000000000000010b000000000000010c00000000
*0000010d000000000000010e2900000000000000e700000000000000e600000000000000e80000
*0000000000e900000000000000ea00000000000000eb00000000000000ec00000000000000f200
*000000000000f100000000000000ed00000000000000ee00000000000000ef00000000000000f0
*00000000000000f800000000000000f700000000000000f900000000000000fa00000000000000
*fb00000000000000fc0000000000000106000000000000010700000000000000fd000000000000
*00fe00000000000000ff00000000000000f300000000000000f400000000000000f50000000000
*0000f600000000000001080000000000000109000000000000010b000000000000010a00000000
*000001000000000000000101000000000000010300000000000001020000000000000104000000
*0000000105000000000000010c000000000000010d000000000000010e00000000000000000000
*0000000000290001230000006e0000006f0000006e0000002d000000700000006f000000720000
*007400000061000000620000006c00000065000000200000002800000074000000790000007000
*0000650000002000000066000000610000006d000000690000006c000000690000006500000073
*0000002c000000200000004d0000005000000054000000430000007300000029010c0000006500
*000078000000700000006500000072000000690000006d000000650000006e0000007400000061
*0000006c0110000000650000006b0000006d000000650000007400000074000000400000006700
*00006d00000061000000690000006c0000002e000000630000006f0000006d002d000000000000
*012b000000000000012c000000000000012d0000000000000128000000000000012e0000000000
*00012f000000000000013000000000000001310000000000000132000000000000013300000000
*000001340000000000000135000000000000013600000000000001370000000000000138000000
*0000000139000000000000013a000000000000013b000000000000013c000000000000013d0000
*00000000013e000000000000013f00000000000001400000000000000141000000000000014200
*000000000001430000000000000144000000000000014500000000000000660000000000000067
*0000000000000069000000000000006a000000000000006b000000000000006c00000000000000
*6d000000000000006e000000000000006f00000000000000700000000000000071000000000000
*0073000000000000007400000000000000750000000000000076000000000000010f0000000000
*00011002000000000000010f00000000000001100000000000000000000000000000002a000000
*0001000000000000011101030223000000410000006c0000006700000065000000620000007200
*000061000000200000006f00000076000000650000007200000020000000610000002000000028
*0000006e0000006500000061000000720000002900000020000000280000007300000065000000
*6d00000069000000290000002000000072000000690000006e000000670000002e0000000a010b
*022a00000072000000200000002a0000002e000000200000002800000078000000200000002a00
*0000200000007900000029000000200000003d000000200000002800000072000000200000002a
*0000002e000000200000007800000029000000200000002a000000200000007900000020000000
*3d0000002000000078000000200000002a000000200000002800000072000000200000002a0000
*002e0000002000000079000000290b022a0000002800000078000000200000002a000000200000
*007900000029000000200000002e0000002a0000002000000072000000200000003d0000002000
*000079000000200000002a000000200000002800000078000000200000002e0000002a00000020
*0000007200000029000000200000003d000000200000002800000079000000200000002e000000
*2a000000200000007200000029000000200000002a000000200000007836000000000000012b00
*0000000000012c000000000000012d0000000000000128000000000000012e000000000000012f
*000000000000013000000000000001310000000000000132000000000000013300000000000001
*340000000000000135000000000000013600000000000001370000000000000138000000000000
*0139000000000000013a000000000000013b000000000000013c000000000000013d0000000000
*00013e000000000000013f00000000000001400000000000000141000000000000014200000000
*000001430000000000000144000000000000014500000000000000660000000000000067000000
*0000000069000000000000006a000000000000006b000000000000006c000000000000006d0000
*00000000006e000000000000006f00000000000000700000000000000071000000000000007300
*0000000000007400000000000000750000000000000076000000000000009a000000000000009b
*000000000000009c000000000000009d00000000000000aa00000000000000b600000000000000
*b700000000000000b800000000000000b900000000000000ba0000000000000111010000000000
*0001110000000000000000000000000000002b00011e000000700000006f000000720000007400
*000061000000620000006c000000650000002000000028000000690000006e0000007300000074
*000000610000006e00000063000000650000007300000020000000750000007300000065000000
*200000004d0000005000000054000000430000007300000029010c000000650000007800000070
*0000006500000072000000690000006d000000650000006e00000074000000610000006c011000
*0000650000006b0000006d00000065000000740000007400000040000000670000006d00000061
*000000690000006c0000002e000000630000006f0000006d220000000000000112030102760000
*00530000006500000074000000200000006f000000700000006500000072000000610000007400
*0000690000006f0000006e00000073000000200000006f0000007000000074000000690000006d
*000000690000007a000000650000006400000020000000660000006f0000007200000020000000
*74000000690000006700000068000000740000006c000000790000002000000067000000720000
*006f00000075000000700000006500000064000000200000007300000065000000740000007300
*0000200000006f00000072000000200000006e0000006500000061000000720000006c00000079
*00000020000000750000006e000000690000007600000065000000720000007300000061000000
*6c0000002000000073000000650000007400000073000000200000007700000069000000740000
*0068000000200000006100000020000000630000006c0000006f00000073000000650000002000
*000062000000790000002000000067000000720000006f0000007500000070000000200000006f
*0000006600000020000000650000006c000000650000006d000000650000006e00000074000000
*73000000200000006d000000690000007300000073000000690000006e000000670000002e0000
*000a01027700000020000000200000002000000053000000740000006f00000072000000650000
*007300000020000000690000007400000073000000650000006c00000066000000200000006c00
*0000690000006b0000006500000020000000610000006e00000020000000610000007200000062
*000000690000007400000072000000610000007200000079000000200000007000000072000000
*65000000630000006900000073000000690000006f0000006e00000020000000660000006c0000
*006f0000006100000074000000690000006e0000006700000020000000700000006f0000006900
*00006e00000074000000200000006e000000750000006d0000006200000065000000720000002c
*00000020000000740000007200000061000000630000006b000000690000006e00000067000000
*20000000740000006800000065000000200000006c000000650000006100000073000000740000
*002000000076000000610000006c000000750000006500000064000000200000006d0000006500
*00006d000000620000006500000072000000200000006f00000066000000200000007400000068
*000000650000002000000073000000650000007400000020000000610000006e00000064000000
*20000000610000006e0000000a0226000000200000002000000020000000490000006e00000074
*0000006500000067000000650000007200000020000000630000006f0000006d00000070000000
*7200000069000000730000006500000064000000200000006f0000006600000020000000740000
*006800000065000000200000006d000000650000006d0000006200000065000000720000007300
*00002e000000200000000a0000000000000165030102310000004100000020000000630000006f
*0000006e0000007300000065000000720000007600000061000000740000006900000076000000
*6500000020000000750000007000000070000000650000007200000020000000620000006f0000
*00750000006e00000064000000200000006f0000006e0000002000000074000000680000006500
*000020000000650000006c000000650000006d000000650000006e000000740000002000000063
*0000006f000000750000006e000000740000002e0000000a024100000020000000200000002000
*00004900000066000000200000006e000000650000006700000061000000740000006900000076
*000000650000002c00000020000000770000006500000020000000610000007200000065000000
*20000000630000006f0000006d000000700000006c000000650000006d000000650000006e0000
*007400000065000000640000002000000077000000690000007400000068000000200000007200
*000065000000730000007000000065000000630000007400000020000000740000006f00000020
*00000074000000680000006500000020000000750000006e000000690000007600000065000000
*7200000073000000650000000a0000000000000166030102310000004100000020000000630000
*006f0000006e000000730000006500000072000000760000006100000074000000690000007600
*000065000000200000006c0000006f00000077000000650000007200000020000000620000006f
*000000750000006e00000064000000200000006f0000006e000000200000007400000068000000
*6500000020000000650000006c000000650000006d000000650000006e00000074000000200000
*00630000006f000000750000006e000000740000002e0000000a02410000002000000020000000
*200000004900000066000000200000006e00000065000000670000006100000074000000690000
*0076000000650000002c0000002000000077000000650000002000000061000000720000006500
*000020000000630000006f0000006d000000700000006c000000650000006d000000650000006e
*000000740000006500000064000000200000007700000069000000740000006800000020000000
*7200000065000000730000007000000065000000630000007400000020000000740000006f0000
*002000000074000000680000006500000020000000750000006e00000069000000760000006500
*00007200000073000000650000000a000000000000016703024b0000004c000000610000007a00
*00007900000020000000650000006c000000650000006d000000650000006e0000007400000020
*000000630000006f000000750000006e0000007400000020000000750000007300000065000000
*64000000200000007700000068000000650000006e000000200000007400000068000000650000
*002000000061000000620000006f00000076000000650000002000000074000000770000006f00
*00002000000064000000690000007300000061000000670000007200000065000000650000002e
*000000200000004f00000028000000310000002900000020000000650000006e00000076000000
*69000000720000006f0000006e0000006d000000650000006e0000007400000020000000730000
*00690000007a000000650000000a00000000000001680302430000004c0000006f000000770000
*00200000007700000061000000740000006500000072000000200000006d000000610000007200
*00006b0000002e00000020000000690000006e000000640000006500000078000000200000006f
*0000006600000020000000740000006800000065000000200000006c0000006500000061000000
*730000007400000020000000650000006c000000650000006d000000650000006e000000740000
*0020000000700000006f00000074000000650000006e0000007400000069000000610000006c00
*00006c0000007900000020000000690000006e0000002000000074000000680000006500000020
*0000007300000065000000740000002e0000000a00000000000001690302470000004800000069
*000000670000006800000020000000770000006100000074000000650000007200000020000000
*6d00000061000000720000006b0000002e00000020000000690000006e00000064000000650000
*0078000000200000006f0000006600000020000000740000006800000065000000200000006700
*00007200000065000000610000007400000065000000730000007400000020000000650000006c
*000000650000006d000000650000006e0000007400000020000000700000006f00000074000000
*650000006e0000007400000069000000610000006c0000006c0000007900000020000000690000
*006e00000020000000740000006800000065000000200000007300000065000000740000002e00
*00000a000000000000016a0301022c000000740000006800000065000000200000007300000065
*00000074000000200000006f000000660000002000000062000000690000007400000073000000
*200000007300000074000000610000007200000074000000690000006e00000067000000200000
*0066000000720000006f0000006d00000020000000740000006800000065000000200000006500
*000078000000700000006f0000006e000000650000006e000000740000002e0000000a02430000
*002000000020000000200000006900000066000000200000006e00000065000000670000006100
*0000740000006900000076000000650000002c000000200000007400000068000000650000006e
*000000200000007700000065000000200000006100000072000000650000002000000063000000
*6f0000006d000000700000006c0000006d000000650000006e000000650000006e000000740000
*006500000064000000200000007700000069000000740000006800000020000000720000006500
*0000730000007000000065000000630000007400000020000000740000006f0000002000000075
*0000006e0000006900000076000000650000007200000073000000650000000a00000000000001
*6b0301021d000000690000006e00000076000000610000007200000069000000610000006e0000
*00740000003a000000200000007700000068000000650000006e00000065000000760000006500
*000072000000200000006d000000610000006e0000007400000069000000730000007300000061
*000000200102010000003c023500000020000000300000002c00000020000000750000006e0000
*00690000007600000065000000720000007300000065000000200000003d000000200000002800
*000066000000720000006f0000006d000000450000006e000000750000006d000000200000006d
*000000690000006e000000420000006f000000750000006e000000640000002c00000066000000
*720000006f0000006d000000450000006e000000750000006d000000200000006d000000610000
*0078000000420000006f000000750000006e00000064000000290000000a000000000000016c03
*023500000073000000650000006c000000660000002d000000630000006f0000006e0000007400
*000061000000690000006e00000065000000640000002000000065000000780000007400000072
*000000610000006300000074000000690000006f0000006e000000200000006200000065000000
*680000006100000076000000690000006f000000720000002c00000020000000650000006e0000
*0061000000620000006c000000650000007300000020000000460000006f0000006c0000006400
*000061000000620000006c000000650000000a000000000000016d030245000000490000006e00
*00007400000065000000720000006e000000610000006c00000020000000730000006d00000061
*000000720000007400000020000000630000006f0000006e000000730000007400000072000000
*7500000063000000740000006f000000720000002e00000020000000460000006f000000720000
*0063000000650000007300000020000000630000006f000000750000006e000000740000002000
*00007700000068000000650000006e000000650000007600000065000000720000002000000069
*000000740000002000000069000000730000002000000070000000690000006700000065000000
*6f0000006e000000680000006f0000006c00000065000000640000002e0000000a000000000000
*016e03010602040000004f00000028000000640000002901020700000020000000770000006800
*0000650000007200000065000000200106020100000064023e0000002000000069000000730000
*00200000006100000062000000730000006f0000006c0000007500000074000000650000002000
*0000640000006500000076000000690000006100000074000000690000006f0000006e00000020
*000000690000006e00000020000000740000006800000065000000200000006f00000075000000
*74000000700000007500000074000000200000006f000000660000002000000066000000720000
*006f0000006d000000450000006e000000750000006d000000200000006f000000760000006500
*00007200000020000000740000006800000065000000200000007300000065000000740000000a
*000000000000011303010602040000004f00000028000000310000002901021800000020000000
*54000000680000006500000020000000650000006d000000700000007400000079000000200000
*007300000065000000740000002e000000200000005000000065000000720000006d0000006900
*0000740000007300000020010602040000004f0000002800000031000000290210000000200000
*006e000000750000006c0000006c00000020000000610000006e00000064000000200000007300
*0000690000007a000000650000002e0000000a000000000000011403010602040000004f000000
*28000000310000002901020d00000020000000430000006f0000006e0000007300000074000000
*720000007500000063000000740000002000000061000000200107020600000042000000690000
*007400000053000000650000007401022000000020000000770000006900000074000000680000
*0020000000610000002000000073000000690000006e000000670000006c000000650000002000
*0000650000006c000000650000006d000000650000006e000000740000002e0000002000000050
*00000065000000720000006d00000069000000740000007300000020010602040000004f000000
*280000003100000029020f000000200000006e000000750000006c0000006c0000002000000061
*0000006e000000640000002000000073000000690000007a000000650000000a00000000000001
*1503010602040000004f00000028000000310000002901021800000020000000610000006d0000
*006f0000007200000074000000690000007a000000650000006400000020000000630000006f00
*000073000000740000002e00000020000000490000007300000020000000740000006800000065
*000000200104010000000000000001120000000000000000000000000000002b01022700000020
*000000650000006d0000007000000074000000790000003f000000200000004d00000061000000
*790000002000000062000000650000002000000066000000610000007300000074000000650000
*0072000000200000007400000068000000610000006e0000002000000063000000680000006500
*0000630000006b000000690000006e000000670000002000000069000000660000002001070104
*010000000000000001160000000000000000000000000000002b0205000000200000003d000000
*3d000000200000003002020000002e0000000a000000000000011603010602040000004f000000
*280000003100000029023800000020000000610000006d0000006f000000720000007400000069
*0000007a000000650000006400000020000000630000006f00000073000000740000002e000000
*20000000540000006800000065000000200000006e000000750000006d00000062000000650000
*0072000000200000006f0000006600000020000000650000006c000000650000006d0000006500
*00006e000000740000007300000020000000690000006e00000020000000740000006800000065
*00000020000000620000006900000074000000200000007300000065000000740000002e000000
*0a000000000000011703010602040000004f000000280000006400000029010203000000200000
*0041000000200104010000000000000001120000000000000000000000000000002b01022f0000
*0020000000630000006f0000006e0000007400000061000000690000006e000000690000006e00
*000067000000200000006500000076000000650000007200000079000000200000006d00000065
*0000006d000000620000006500000072000000200000006f000000660000002000000074000000
*680000006500000020000000650000006e000000750000006d0000006500000072000000610000
*0074000000690000006f0000006e000000200000006f0000006600000020010702010000006102
*020000002e0000000a000000000000011803010602040000004f00000028000000640000002901
*020f00000020000000430000006f0000006d000000700000006c000000650000006d0000006500
*00006e000000740000007300000020000000610000002001040100000000000000011200000000
*00000000000000000000002b01021f000000200000007700000069000000740000006800000020
*000000720000006500000073000000700000006500000063000000740000002000000074000000
*6f0000002000000074000000680000006500000020000000620000006f000000750000006e0000
*006400000073000000200000006f000000660000002001070201000000610102150000002e0000
*002000000050000000720000006500000073000000650000007200000076000000650000007300
*0000200000006f00000072000000640000006500000072000000200000006f0000006600000020
*0104010000000000000001150000000000000000000000000000002b0102050000002000000061
*0000006e0000006400000020010401000000000000000116000000000000000000000000000000
*2b02010000000a000000000000016f03010602040000004f000000280000006400000029025c00
*000020000000750000006e0000007300000061000000660000006500000020000000690000006e
*0000007400000065000000720000006e000000610000006c000000200000006d00000065000000
*74000000680000006f000000640000003a00000020000000630000006f0000006d000000700000
*006c000000650000006d000000650000006e000000740000002000000061000000200000007300
*000065000000740000002000000074000000680000006100000074000000200000006800000061
*0000007300000020000000610000006c0000007200000065000000610000006400000079000000
*200000006200000065000000650000006e00000020000000630000006f0000006d000000700000
*006c000000650000006d000000650000006e000000740000006500000064000000200000006100
*000074000000200000006c00000065000000610000007300000074000000200000006f0000006e
*00000063000000650000002e0000000a000000000000017003010602040000004f000000280000
*006400000029025c00000020000000750000006e00000073000000610000006600000065000000
*20000000690000006e0000007400000065000000720000006e000000610000006c000000200000
*006d0000006500000074000000680000006f000000640000003a00000020000000630000006f00
*00006d000000700000006c000000650000006d000000650000006e000000740000002000000061
*000000200000007300000065000000740000002000000074000000680000006100000074000000
*2000000068000000610000007300000020000000610000006c0000007200000065000000610000
*006400000079000000200000006200000065000000650000006e00000020000000630000006f00
*00006d000000700000006c000000650000006d000000650000006e000000740000006500000064
*000000200000006100000074000000200000006c00000065000000610000007300000074000000
*200000006f0000006e00000063000000650000002e0000000a0000000000000119030106020800
*00004f0000002800000064000000200000002a000000200000006e000000290102080000002000
*00004d000000610000006b00000065000000200000006100000020010401000000000000000112
*0000000000000000000000000000002b02170000002000000066000000720000006f0000006d00
*00002000000061000000200000006c000000690000007300000074000000200000006f00000066
*000000200000006900000074000000650000006d000000730000002e0000000a00000000000001
*1a03010602080000004f0000002800000064000000200000002a000000200000006e0000002901
*0208000000200000004d000000610000006b000000650000002000000061000000200104010000
*000000000001120000000000000000000000000000002b02290000002000000066000000720000
*006f0000006d000000200000006100000020000000640000006900000073000000740000006900
*00006e000000630000007400000020000000610000007300000063000000650000006e00000064
*000000690000006e00000067000000200000006c00000069000000730000007400000020000000
*6f00000066000000200000006900000074000000650000006d000000730000000a000000000000
*011b03010602040000004f00000028000000640000002901022100000020000000490000006e00
*00007300000065000000720000007400000020000000610000002000000073000000690000006e
*000000670000006c0000006500000020000000650000006c000000650000006d00000065000000
*6e00000074000000200000006f0000006600000020000000740000007900000070000000650000
*0020010702010000006101020a00000020000000690000006e000000740000006f000000200000
*007400000068000000650000002001040100000000000000011200000000000000000000000000
*00002b0102150000002e0000002000000050000000720000006500000073000000650000007200
*0000760000006500000073000000200000006f0000007200000064000000650000007200000020
*0000006f0000006600000020010401000000000000000115000000000000000000000000000000
*2b01020500000020000000610000006e0000006400000020010401000000000000000116000000
*0000000000000000000000002b02010000000a000000000000011c03010602040000004f000000
*28000000640000002901021f0000002000000044000000650000006c0000006500000074000000
*6500000020000000610000002000000073000000690000006e000000670000006c000000650000
*00200000006900000074000000650000006d0000002000000066000000720000006f0000006d00
*000020000000740000006800000065000000200104010000000000000001120000000000000000
*000000000000002b0102150000002e000000200000005000000072000000650000007300000065
*00000072000000760000006500000073000000200000006f000000720000006400000065000000
*72000000200000006f000000660000002001040100000000000000011500000000000000000000
*00000000002b01020500000020000000610000006e000000640000002001040100000000000000
*01160000000000000000000000000000002b02010000000a000000000000011d03010602040000
*004f00000028000000310000002901021a00000020000000540000006500000073000000740000
*0020000000660000006f00000072000000200000006d000000650000006d000000620000006500
*0000720000007300000068000000690000007000000020000000690000006e0000002000000061
*000000200104010000000000000001120000000000000000000000000000002b02010000000a00
*0000000000011e03010602040000004f0000002800000064000000290242000000200000006300
*00006f0000006e0000007600000065000000720000007400000020000000740000006f00000020
*000000610000006e00000020000000490000006e00000074000000650000006700000065000000
*7200000020000000720000006500000070000000720000006500000073000000650000006e0000
*00740000006100000074000000690000006f0000006e0000002e00000020000000440000006900
*0000730000006300000061000000720000006400000073000000200000006e0000006500000067
*000000610000007400000069000000760000006500000020000000650000006c00000065000000
*6d000000650000006e00000074000000730000000a000000000000011f03010602040000004f00
*000028000000640000002902020000002e0000000a000000000000012003010602040000004f00
*000028000000310000002901023600000020000000430000006800000065000000630000006b00
*000020000000740000006f00000020000000730000006500000065000000200000006900000066
*000000200000007700000065000000200000006100000072000000650000002000000072000000
*6500000070000000720000006500000073000000650000006e0000007400000065000000640000
*00200000006100000073000000200000006100000020000000630000006f0000006d0000007000
*00006c000000650000006d000000650000006e0000007400000065000000640000002001040100
*00000000000001120000000000000000000000000000002b02030000002e000000200000000a00
*0000000000012103010602040000004f0000002800000064000000290202000000200000000a00
*0000000000017101030253000000550000006e0000007300000061000000660000006500000020
*000000690000006e0000007400000065000000720000006e000000610000006c00000020000000
*6d0000006500000074000000680000006f0000006400000020000000660000006f000000720000
*0020000000630000006f0000006d000000700000007500000074000000690000006e0000006700
*000020000000640000006900000066000000660000006500000072000000650000006e00000063
*000000650000007300000020000000690000006e0000002000000061000000200000006b000000
*6e0000006f000000770000006e00000020000000750000006e0000006900000076000000650000
*00720000007300000065000000200000006f000000660000002000000064000000690000007300
*0000630000006f000000750000007200000073000000650000002e0000000a0103020f00000050
*0000007200000065000000630000006f0000006e00000064000000690000007400000069000000
*6f0000006e000000730000003a0000000a09010301020100000020010702060000006d00000020
*0000003e0000003d00000020000000300102010000000a01020500000020000000320000002000
*0000200000002001070102010000006d010201000000270205000000200000003e0000003d0000
*0020000000300102010000000a0102050000002000000033000000200000002000000020010701
*020200000061000000200102010000002f02040000003d000000200000002d0000003101020100
*00000a010205000000200000003400000020000000200000002001070102010000006101020100
*000027010201000000200102010000002f02040000003d000000200000002d0000003101020100
*00000a010205000000200000003500000020000000200000002001070102020000006200000020
*0102010000002f02030000003d00000020000000300102010000000a0102050000002000000036
*000000200000002000000020010701020100000062010201000000270102010000002001020100
*00002f02030000003d00000020000000300102010000000a010205000000200000003700000020
*000000200000002001070102010000007501020100000027020100000027010222000000200000
*006900000073000000200000006100000020000000700000007200000065000000760000006900
*00006f00000075000000730000006c00000079000000200000006f000000620000007400000061
*000000690000006e000000650000006400000020000000630000006f0000007000000079000000
*200000006f0000006600000020010702260000002800000066000000720000006f0000006d0000
*00450000006e000000750000006d000000200000006d000000690000006e000000420000006f00
*0000750000006e000000640000002c0000002000000066000000720000006f0000006d00000045
*0000006e000000750000006d000000200000006d0000006100000078000000420000006f000000
*750000006e000000640000002902010000000a000000000000017203010602040000004f000000
*28000000640000002902410000002000000052000000650000006d0000006f0000007600000065
*00000020000000610000006c0000006c00000020000000650000006c000000650000006d000000
*650000006e00000074000000730000002000000070000000720000006500000073000000650000
*006e0000007400000020000000690000006e000000200000007400000068000000650000002000
*00007300000065000000630000006f0000006e0000006400000020000000620000006900000074
*0000007300000065000000740000002000000066000000720000006f0000006d00000020000000
*7400000068000000650000002000000066000000690000007200000073000000740000000a0000
*00000000012203010602040000004f000000280000006400000029010207000000200000004900
*00006e0000006600000069000000780000002001040101000000000000017202010000000a0000
*0000000001730302380000005500000074000000690000006c0000006900000074000000790000
*002000000066000000750000006e0000006300000074000000690000006f0000006e0000002000
*0000740000006f0000002000000061000000760000006f00000069000000640000002000000072
*0000006500000071000000750000006900000072000000690000006e0000006700000020000000
*53000000630000006f000000700000006500000064000000540000007900000070000000650000
*005600000061000000720000006900000061000000620000006c00000065000000730000000a00
*0000000000017403010602040000004f00000028000000640000002902010000000a0000000000
*00017503010602040000004f000000280000006400000029024f0000002e000000200000004300
*00006f0000006d0000007000000075000000740000006500000073000000200000007400000068
*00000065000000200000006500000071000000750000006900000076000000610000006c000000
*650000006e00000074000000200000006f00000066000000200000002800000074000000720000
*00750000006e00000063000000610000007400000065000000200000002e000000200000006c00
*00006f00000067000000420000006100000073000000650000002000000032000000200000002e
*000000200000006100000062000000730000002900000020000000650000007800000074000000
*650000006e00000064000000650000006400000020000000770000006900000074000000680000
*00200000003000000020000000610000007400000020000000300000000a47000000000000012b
*000000000000012c000000000000012d0000000000000128000000000000012e00000000000001
*2f0000000000000130000000000000013100000000000001320000000000000133000000000000
*013400000000000001350000000000000136000000000000013700000000000001380000000000
*000139000000000000013a000000000000013b000000000000013c000000000000013d00000000
*0000013e000000000000013f000000000000014000000000000001410000000000000142000000
*000000014300000000000001440000000000000145000000000000000000000000000000010000
*000000000002000000000000000300000000000000040000000000000005000000000000000600
*0000000000000700000000000000080000000000000009000000000000000a0000000000000066
*00000000000000670000000000000069000000000000006a000000000000006b00000000000000
*6c000000000000006d000000000000006e000000000000006f0000000000000070000000000000
*007100000000000000730000000000000074000000000000007500000000000000760000000000
*000112000000000000011300000000000001140000000000000115000000000000011600000000
*0000011700000000000001180000000000000119000000000000011a000000000000011b000000
*000000011c000000000000011d000000000000011e000000000000011f00000000000001200000
*000000000121000000000000012211000000000000011200000000000001130000000000000114
*0000000000000117000000000000011f0000000000000121000000000000011800000000000001
*1b000000000000011c00000000000001220000000000000119000000000000011a000000000000
*011d000000000000011500000000000001160000000000000120000000000000011e0000000000
*000000000000000000002c00011e000000700000006f0000007200000074000000610000006200
*00006c000000650000002000000028000000690000006e0000007300000074000000610000006e
*00000063000000650000007300000020000000750000007300000065000000200000004d000000
*5000000054000000430000007300000029010c0000006500000078000000700000006500000072
*000000690000006d000000650000006e00000074000000610000006c0110000000650000006b00
*00006d00000065000000740000007400000040000000670000006d00000061000000690000006c
*0000002e000000630000006f0000006d0038000000000000012b000000000000012c0000000000
*00012d0000000000000128000000000000012e000000000000012f000000000000013000000000
*000001310000000000000132000000000000013300000000000001340000000000000135000000
*0000000136000000000000013700000000000001380000000000000139000000000000013a0000
*00000000013b000000000000013c000000000000013d000000000000013e000000000000013f00
*000000000001400000000000000141000000000000014200000000000001430000000000000144
*000000000000014500000000000000660000000000000067000000000000006900000000000000
*6a000000000000006b000000000000006c000000000000006d000000000000006e000000000000
*006f00000000000000700000000000000071000000000000007300000000000000740000000000
*0000750000000000000076000000000000009a000000000000009b000000000000009c00000000
*0000009d00000000000000aa00000000000000b600000000000000b700000000000000b8000000
*00000000b900000000000000ba0000000000000123000000000000012400000000000001250300
*00000000000123000000000000012500000000000001240000000000000000000000000000002d
*000108000000700000006f000000720000007400000061000000620000006c00000065010c0000
*006500000078000000700000006500000072000000690000006d000000650000006e0000007400
*0000610000006c0110000000650000006b0000006d000000650000007400000074000000400000
*00670000006d00000061000000690000006c0000002e000000630000006f0000006d0035000000
*000000012b000000000000012c000000000000012d0000000000000128000000000000012e0000
*00000000012f000000000000013000000000000001310000000000000132000000000000013300
*000000000001340000000000000135000000000000013600000000000001370000000000000138
*0000000000000139000000000000013a000000000000013b000000000000013c00000000000001
*3d000000000000013e000000000000013f00000000000001400000000000000141000000000000
*014200000000000001430000000000000144000000000000014500000000000000660000000000
*0000670000000000000069000000000000006a000000000000006b000000000000006c00000000
*0000006d000000000000006e000000000000006f00000000000000700000000000000071000000
*0000000073000000000000007400000000000000750000000000000076000000000000009a0000
*00000000009b000000000000009c000000000000009d00000000000000a000000000000000a100
*000000000000a200000000000000a300000000000000aa00000000000001260100000000000001
*260000000000000000000000000000002e00000000003b000000000000012b000000000000012c
*000000000000012d0000000000000128000000000000012e000000000000012f00000000000001
*300000000000000131000000000000013200000000000001330000000000000134000000000000
*013500000000000001360000000000000137000000000000013800000000000001390000000000
*00013a000000000000013b000000000000013c000000000000013d000000000000013e00000000
*0000013f0000000000000140000000000000014100000000000001420000000000000143000000
*000000014400000000000001450000000000000066000000000000006700000000000000690000
*00000000006a000000000000006b000000000000006c000000000000006d000000000000006e00
*0000000000006f0000000000000070000000000000007100000000000000730000000000000074
*00000000000000750000000000000076000000000000009a000000000000009b00000000000000
*9c000000000000009d00000000000000a000000000000000a100000000000000a2000000000000
*00a300000000000000aa00000000000000b600000000000000b700000000000000b80000000000
*0000b900000000000000ba00000000000001260000000000000127010000000000000127000000
*000000017600000000000000000000000000000001030000000000000042000000000000000000
*000000000000010100000000000000430000000000000000000000000000000100000000000000
*004400000000000000000000000000000001030000000000000045000000000000000000000000
*000000010000000000000000460000000000000000000000000000000100000000000000004700
*000000000000000000000000000001000000000000000048000000000000000000000000000000
*010000000000000000490000000000000000000000000000000100000000000000004a00000000
*00000000000000000000000100000000000000004b000000000000000000000000000000010000
*0000000000004c0000000000000000000000000000000203000000000000004d00000000000000
*00000000000000000200000000000000004e000000000000000000000000000000020000000000
*0000004f0000000000000000000000000000000303000000000000005000000000000000000000
*000000000003000000000000000051000000000000000000000000000000040300000000000000
*520000000000000000000000000000000401000000000000005200000000000000000000000000
*000004000000000000000053000000000000000000000000000000050300000000000000540000
*000000000000000000000000000501000000000000005400000000000000000000000000000005
*000000000000000055000000000000000000000000000000050300000000000000560000000000
*000000000000000000000500000000000000005700000000000000000000000000000005000000
*000000000058000000000000000000000000000000050300000000000000590000000000000000
*000000000000000501000000000000005900000000000000000000000000000005000000000000
*00005a0000000000000000000000000000000503000000000000005b0000000000000000000000
*000000000500000000000000005c0000000000000000000000000000000500000000000000005d
*0000000000000000000000000000000603000000000000005e0000000000000000000000000000
*000601000000000000005e0000000000000000000000000000000600000000000000005f000000
*000000000000000000000000060300000000000000600000000000000000000000000000000601
*000000000000006000000000000000000000000000000006000000000000000061000000000000
*000000000000000000060300000000000000620000000000000000000000000000000601000000
*000000006200000000000000000000000000000006000000000000000063000000000000000000
*000000000000060300000000000000640000000000000000000000000000000603000000000000
*006500000000000000000000000000000006000000000000000066000000000000000000000000
*000000060000000000000000670000000000000000000000000000000600000000000000006800
*000000000000000000000000000006000000000000000069000000000000000000000000000000
*0600000000000000006a0000000000000000000000000000000600000000000000006b00000000
*00000000000000000000000703000000000000006c000000000000000000000000000000070100
*0000000000006d0000000000000000000000000000000701000000000000006e00000000000000
*00000000000000000701000000000000006f000000000000000000000000000000070100000000
*000000700000000000000000000000000000000703000000000000007100000000000000000000
*000000000007030000000000000072000000000000000000000000000000070000000000000000
*730000000000000000000000000000000700000000000000007400000000000000000000000000
*000007000000000000000075000000000000000000000000000000070000000000000000760000
*000000000000000000000000000700000000000000007700000000000000000000000000000008
*030000000000000078000000000000000000000000000000080000000000000000790000000000
*000000000000000000000803000000000000007a00000000000000000000000000000008000000
*00000000007b0000000000000000000000000000000803000000000000006f0000000000000000
*000000000000000803000000000000007c00000000000000000000000000000008000000000000
*00007d0000000000000000000000000000000800000000000000007e0000000000000000000000
*000000000800000000000000007f00000000000000000000000000000008000000000000000080
*000000000000000000000000000000090300000000000000810000000000000000000000000000
*000901000000000000008100000000000000000000000000000009000000000000000082000000
*0000000000000000000000000a0300000000000000830000000000000000000000000000000a00
*00000000000000840000000000000000000000000000000a000000000000000085000000000000
*0000000000000000000a0000000000000000860000000000000000000000000000000a00000000
*00000000870000000000000000000000000000000a000000000000000088000000000000000000
*0000000000000b0300000000000000890000000000000000000000000000000b01000000000000
*00890000000000000000000000000000000b00000000000000008a000000000000000000000000
*0000000c00000000000000008b0000000000000000000000000000000c00000000000000008c00
*00000000000000000000000000000c00000000000000008d000000000000000000000000000000
*0c00000000000000008e0000000000000000000000000000000d03000000000000008f00000000
*00000000000000000000000d01000000000000008f0000000000000000000000000000000d0000
*000000000000900000000000000000000000000000000d03000000000000009100000000000000
*00000000000000000d0100000000000000910000000000000000000000000000000d0000000000
*000000840000000000000000000000000000000d00000000000000009200000000000000000000
*00000000000d0000000000000000930000000000000000000000000000000d0000000000000000
*850000000000000000000000000000000d00000000000000008700000000000000000000000000
*00000e0300000000000000940000000000000000000000000000000e0300000000000000950000
*000000000000000000000000000e0100000000000000950000000000000000000000000000000e
*0000000000000000960000000000000000000000000000000e0000000000000000970000000000
*000000000000000000000e0000000000000000980000000000000000000000000000000f000000
*0000000000990000000000000000000000000000000f00000000000000009a0000000000000000
*000000000000001000000000000000009b00000000000000000000000000000011030000000000
*00009c0000000000000000000000000000001101000000000000009c0000000000000000000000
*000000001100000000000000009d0000000000000000000000000000001103000000000000009e
*0000000000000000000000000000001101000000000000009e0000000000000000000000000000
*001100000000000000009f000000000000000000000000000000110300000000000000a0000000
*000000000000000000000000110000000000000000a10000000000000000000000000000001100
*00000000000000a2000000000000000000000000000000120000000000000000a3000000000000
*000000000000000000130300000000000000a40000000000000000000000000000001303000000
*00000000a5000000000000000000000000000000130300000000000000a6000000000000000000
*000000000000140300000000000000a70000000000000000000000000000001503000000000000
*00a8000000000000000000000000000000150100000000000000a8000000000000000000000000
*000000150000000000000000a9000000000000000000000000000000150300000000000000aa00
*0000000000000000000000000000150100000000000000aa000000000000000000000000000000
*150000000000000000ab000000000000000000000000000000150300000000000000ac00000000
*0000000000000000000000150100000000000000ac000000000000000000000000000000150000
*000000000000ad000000000000000000000000000000150300000000000000ae00000000000000
*0000000000000000150100000000000000ae000000000000000000000000000000150000000000
*000000af000000000000000000000000000000150000000000000000b000000000000000000000
*0000000000150000000000000000b1000000000000000000000000000000160300000000000000
*b2000000000000000000000000000000160000000000000000b300000000000000000000000000
*0000170300000000000000b4000000000000000000000000000000170100000000000000b50000
*00000000000000000000000000170100000000000000b400000000000000000000000000000017
*0100000000000000b6000000000000000000000000000000170300000000000000b70000000000
*00000000000000000000170100000000000000b700000000000000000000000000000017000000
*0000000000b8000000000000000000000000000000180300000000000000b90000000000000000
*00000000000000180100000000000000b900000000000000000000000000000018000000000000
*0000ba000000000000000000000000000000180000000000000000b10000000000000000000000
*00000000190300000000000000bb000000000000000000000000000000190100000000000000bb
*000000000000000000000000000000190000000000000000bc0000000000000000000000000000
*00190000000000000000bd000000000000000000000000000000190000000000000000be000000
*000000000000000000000000190000000000000000bf0000000000000000000000000000001900
*000000000000005c000000000000000000000000000000190000000000000000c0000000000000
*0000000000000000001a0300000000000000c10000000000000000000000000000001a00000000
*00000000c20000000000000000000000000000001a0000000000000000c3000000000000000000
*0000000000001a0000000000000000c40000000000000000000000000000001b00000000000000
*008d0000000000000000000000000000001b00000000000000008e000000000000000000000000
*0000001c0300000000000000c50000000000000000000000000000001c0000000000000000c600
*00000000000000000000000000001c0000000000000000c7000000000000000000000000000000
*1c0000000000000000c80000000000000000000000000000001d0000000000000000c900000000
*00000000000000000000001d0000000000000000ca0000000000000000000000000000001d0000
*000000000000cb0000000000000000000000000000001e0000000000000000cc00000000000000
*00000000000000001e0000000000000000cd0000000000000000000000000000001e0000000000
*000000ce0000000000000000000000000000001f0300000000000000cf00000000000000000000
*0000000000200300000000000000d0000000000000000000000000000000200100000000000000
*d0000000000000000000000000000000200000000000000000d100000000000000000000000000
*0000210300000000000000d2000000000000000000000000000000210100000000000000d20000
*00000000000000000000000000210000000000000000d300000000000000000000000000000022
*0300000000000000d4000000000000000000000000000000220000000000000000d50000000000
*00000000000000000000220300000000000000d600000000000000000000000000000022000000
*0000000000d7000000000000000000000000000000220000000000000000d80000000000000000
*00000000000000230300000000000000d900000000000000000000000000000023030000000000
*0000da000000000000000000000000000000230000000000000000db0000000000000000000000
*00000000230300000000000000dc000000000000000000000000000000230000000000000000dd
*000000000000000000000000000000240300000000000000de0000000000000000000000000000
*00240100000000000000de000000000000000000000000000000240000000000000000df000000
*000000000000000000000000240300000000000000e00000000000000000000000000000002401
*00000000000000e0000000000000000000000000000000240000000000000000e1000000000000
*000000000000000000240300000000000000e20000000000000000000000000000002401000000
*00000000e2000000000000000000000000000000240000000000000000e3000000000000000000
*000000000000240000000000000000e40000000000000000000000000000002503000000000000
*00e5000000000000000000000000000000250100000000000000e5000000000000000000000000
*000000250000000000000000e6000000000000000000000000000000250300000000000000e700
*0000000000000000000000000000250100000000000000e7000000000000000000000000000000
*250000000000000000e8000000000000000000000000000000250300000000000000e900000000
*0000000000000000000000250100000000000000e9000000000000000000000000000000250000
*000000000000ea000000000000000000000000000000250000000000000000eb00000000000000
*0000000000000000260000000000000000ec000000000000000000000000000000260000000000
*000000ed000000000000000000000000000000260000000000000000ee00000000000000000000
*0000000000260000000000000000ef000000000000000000000000000000260000000000000000
*f0000000000000000000000000000000260000000000000000f100000000000000000000000000
*0000260000000000000000f2000000000000000000000000000000260000000000000000f30000
*00000000000000000000000000260000000000000000f400000000000000000000000000000026
*0000000000000000f5000000000000000000000000000000260000000000000000f60000000000
*00000000000000000000260000000000000000f700000000000000000000000000000026000000
*0000000000f8000000000000000000000000000000260000000000000000f90000000000000000
*00000000000000260000000000000000fa00000000000000000000000000000026000000000000
*0000fb000000000000000000000000000000260000000000000000fc0000000000000000000000
*00000000260000000000000000fd000000000000000000000000000000260000000000000000fe
*000000000000000000000000000000260000000000000000ff0000000000000000000000000000
*002600000000000000010000000000000000000000000000000027030000000000000101000000
*000000000000000000000000270100000000000001020000000000000000000000000000002803
*000000000000010300000000000000000000000000000028030000000000000104000000000000
*000000000000000000280000000000000000cd0000000000000000000000000000002800000000
*00000000c000000000000000000000000000000028000000000000000105000000000000000000
*000000000000280000000000000001060000000000000000000000000000002800000000000000
*01070000000000000000000000000000002800000000000000005c000000000000000000000000
*000000280000000000000000bf0000000000000000000000000000002800000000000000010800
*000000000000000000000000000028000000000000000109000000000000000000000000000000
*2800000000000000010a0000000000000000000000000000002800000000000000010b00000000
*00000000000000000000002800000000000000010c000000000000000000000000000000280000
*0000000000010d0000000000000000000000000000002800000000000000010e00000000000000
*00000000000000002800000000000000010f000000000000000000000000000000280000000000
*000001100000000000000000000000000000002800000000000000005d00000000000000000000
*000000000028000000000000000111000000000000000000000000000000280000000000000001
*12000000000000000000000000000000280000000000000000fe00000000000000000000000000
*000028000000000000000113000000000000000000000000000000280000000000000001140000
*000000000000000000000000002800000000000000011500000000000000000000000000000028
*0000000000000000f4000000000000000000000000000000280000000000000001160000000000
*00000000000000000000280000000000000000f500000000000000000000000000000028000000
*000000000117000000000000000000000000000000280000000000000001180000000000000000
*000000000000002800000000000000011900000000000000000000000000000028000000000000
*00011a0000000000000000000000000000002800000000000000011b0000000000000000000000
*000000002800000000000000011c0000000000000000000000000000002800000000000000011d
*0000000000000000000000000000002800000000000000011e0000000000000000000000000000
*002800000000000000011f00000000000000000000000000000028000000000000000120000000
*000000000000000000000000280000000000000001210000000000000000000000000000002800
*000000000000012200000000000000000000000000000028000000000000000123000000000000
*000000000000000000290300000000000001240000000000000000000000000000002900000000
*00000001250000000000000000000000000000002a030000000000000126000000000000000000
*0000000000002b0300000000000001270000000000000000000000000000002b00000000000000
*005c0000000000000000000000000000002b0000000000000000bf000000000000000000000000
*0000002b0000000000000000c00000000000000000000000000000002b00000000000000010500
*00000000000000000000000000002b000000000000000128000000000000000000000000000000
*2b0000000000000001290000000000000000000000000000002b00000000000000011800000000
*00000000000000000000002b00000000000000011a0000000000000000000000000000002b0000
*000000000001080000000000000000000000000000002b00000000000000010900000000000000
*00000000000000002b0000000000000001060000000000000000000000000000002b0000000000
*0000012a0000000000000000000000000000002b00000000000000005d00000000000000000000
*00000000002b00000000000000012b0000000000000000000000000000002b0000000000000001
*120000000000000000000000000000002b0000000000000000cd00000000000000000000000000
*00002c03000000000000012c0000000000000000000000000000002c00000000000000012d0000
*000000000000000000000000002c00000000000000012e0000000000000000000000000000002d
*03000000000000012f0000000000000000000000000000002e0300000000000001300000000000
*000030000000000000003103000000000000013100000000000000300000000000000032030000
*000000000132000000000000003000000000000000330300000000000001330000000000000030
*000000000000003100000000000000013400000000000000300000000000000031000000000000
*000135000000000000003000000000000000310000000000000001360000000000000030000000
*000000003100000000000000013700000000000000300000000000000031010000000000000138
*000000000000003000000000000000310300000000000001380000000000000030000000000000
*00310000000000000001390000000000000030000000000000003101000000000000013a000000
*0000000030000000000000003103000000000000013a0000000000000030000000000000003100
*000000000000013b0000000000000030000000000000003101000000000000013c000000000000
*0030000000000000003103000000000000013c0000000000000030000000000000003100000000
*000000013d0000000000000030000000000000003101000000000000013e000000000000003000
*0000000000003103000000000000013e0000000000000030000000000000003100000000000000
*013f00000000000000300000000000000031010000000000000140000000000000003000000000
*000000310300000000000001400000000000000030000000000000003100000000000000014100
*000000000000300000000000000031010000000000000142000000000000003000000000000000
*310300000000000001420000000000000030000000000000003100000000000000014300000000
*000000300000000000000031010000000000000144000000000000003000000000000000310300
*000000000001440000000000000030000000000000003100000000000000014500000000000000
*300000000000000031010000000000000146000000000000003000000000000000310300000000
*000001460000000000000147000000000000014803000000000000014900000000000001470000
*00000000014800000000000000014a0000000000000030000000000000014b0300000000000001
*4c0000000000000035000000000000003603000000000000014d00000000000000300000000000
*00003700000000000000014e0000000000000000000000000000000a03000000000000014f0000
*00000000003800000000000000390300000000000001500000000000000030000000000000003a
*0300000000000001510000000000000030000000000000003a0000000000000001520000000000
*000030000000000000003a0000000000000001530000000000000030000000000000003a000000
*0000000001540000000000000030000000000000003a0000000000000001550000000000000030
*000000000000015600000000000000015700000000000000300000000000000032010000000000
*000158000000000000003000000000000001560000000000000001590000000000000030000000
*000000015a00000000000000015b0000000000000030000000000000015a00000000000000015c
*0000000000000030000000000000015d00000000000000009b0000000000000030000000000000
*003e03000000000000015e0000000000000030000000000000003e03000000000000015f000000
*000000003000000000000001600300000000000001610000000000000030000000000000003f03
*00000000000001620000000000000030000000000000003f0000000000000000ef000000000000
*003000000000000001600000000000000001630000000000000030000000000000016400000000
*000000016500000000000000350000000000000041030000000000000166000000000000000000
*000000000000280300000000000001670000000000000030000000000000016400000000000000
*016800000000000000000000000000000028000000000000000169000000000000000000000000
*0000002800000000000000016a0000000000000035000000000000004101000000000000016b00
*00000000000000000000000000002b00000000000000016c000000000000000000000000000000
*2b00000000000000016d0000000000000000000000000000002b00000000000000016e00000000
*00000000000000000000002b00000000000000016f0000000000000000000000000000002b0000
*000000000001700000000000000000000000000000002b00000000000000017100000000000000
*00000000000000002b0000000000000001720000000000000000000000000000002b0000000000
*000001730000000000000000000000000000002b00000000000000017400000000000000000000
*00000000002b0000000000000000f50000000000000000000000000000002b0000000000000001
*750000000000000000000000000000002b00000000000000017600000000000000000000000000
*00002b0000000000000001770000000000000000000000000000002b0000000000000001110000
*000000000000000000000000002b0000000000000001780000000000000000000000000000002b
*0000000000000001790000000000000000000000000000002b00000000000000017a0000000000
*00017b000000000000000e6d6f6e6f6964732d302e312e33330000000000000013446174612e4d
*6f6e6f69642e526564756365720000000000000018446174612e4d6f6e6f69642e526564756365
*722e436861720000000000000020446174612e4d6f6e6f69642e4c65786963616c2e555446382e
*4465636f6465720000000000000018446174612e4d6f6e6f69642e526564756365722e57697468
*0000000000000011446174612e4d6f6e6f69642e556e696f6e000000000000000e446174612e47
*656e657261746f720000000000000022446174612e4d6f6e6f69642e4c65786963616c2e536f75
*726365506f736974696f6e0000000000000019446174612e4d6f6e6f69642e4c65786963616c2e
*576f7264730000000000000010446174612e4d6f6e6f69642e53656c66000000000000001f4461
*74612e47656e657261746f722e436f6d70726573736976652e4c5a373800000000000000164461
*74612e4d6f6e6f69642e46726f6d537472696e670000000000000017446174612e4d6f6e6f6964
*2e436f6d62696e61746f7273000000000000001e446174612e47656e657261746f722e436f6d70
*726573736976652e524c450000000000000017446174612e4d6f6e6f69642e43617465676f7269
*63616c0000000000000014446174612e4d6f6e6f69642e4164646974697665000000000000001a
*446174612e4d6f6e6f69642e41646469746976652e5375676172000000000000001a446174612e
*4d6f6e6f69642e4d756c7469706c696361746976650000000000000020446174612e4d6f6e6f69
*642e4d756c7469706c696361746976652e53756761720000000000000013446174612e52696e67
*2e53656d692e4e656172000000000000000e446174612e52696e672e53656d6900000000000000
*0f446174612e4d6f6e6f69642e4f72640000000000000015446174612e52696e672e53656d692e
*4b6c65656e650000000000000012446174612e52696e672e53656d692e4f726400000000000000
*17446174612e52696e672e53656d692e54726f706963616c0000000000000018446174612e5269
*6e672e53656d692e4e6561722e54726965000000000000000a446174612e47726f757000000000
*00000016446174612e47726f75702e436f6d62696e61746f72730000000000000019446174612e
*47726f75702e4d756c7469706c696361746976650000000000000010446174612e47726f75702e
*5375676172000000000000001f446174612e47726f75702e4d756c7469706c696361746976652e
*53756761720000000000000009446174612e52696e670000000000000011446174612e52696e67
*2e426f6f6c65616e0000000000000011446174612e52696e672e46726f6d4e756d000000000000
*001b446174612e52696e672e4d6f64756c617241726974686d6574696300000000000000104461
*74612e52696e672e4d6f64756c650000000000000017446174612e4d6f6e6f69642e4170706c69
*6361746976650000000000000011446174612e4d6f6e6f69642e4d6f6e6164000000000000001a
*446174612e47656e657261746f722e436f6d62696e61746f72730000000000000013446174612e
*47656e657261746f722e467265650000000000000010446174612e5365742e556e626f78656400
*00000000000016446174612e52696e672e53656d692e4e61747572616c00000000000000114461
*74612e52696e672e416c67656272610000000000000015446174612e52696e672e53656d692e42
*69745365740000000000000029446174612e52696e672e4d6f64756c652e4175746f6d61746963
*446966666572656e74696174696f6e000000000000000a446174612e4669656c64000000000000
*0016446174612e4669656c642e566563746f7253706163650000000000000015446174612e4d6f
*6e6f69642e496e7374616e636573000000000000000462617365000000000000000b446174612e
*4d6f6e6f6964000000000000000a446174612e4d61796265000000000000000d446174612e466f
*6c6461626c650000000000000009446174612e576f726400000000000000086768632d7072696d
*00000000000000094748432e5479706573000000000000000b4748432e556e69636f6465000000
*0000000012636f6e7461696e6572732d302e322e302e300000000000000008446174612e4d6170
*0000000000000010436f6e74726f6c2e43617465676f72790000000000000008446174612e4f72
*6400000000000000075072656c756465000000000000000f446174612e52696e672e5375676172
*0000000000000013436f6e74726f6c2e4170706c69636174697665000000000000000d436f6e74
*726f6c2e4d6f6e61640000000000000009446174612e4c69737400000000000000084748432e42
*6f6f6c00000000000000095265647563656442790000000000000009526564756374696f6e0000
*00000000000c676574526564756374696f6e000000000000000752656475636572000000000000
*0004756e69740000000000000004736e6f630000000000000004636f6e73000000000000000d66
*6f6c644d6170526564756365000000000000000a666f6c64526564756365000000000000000a72
*657475726e556e6974000000000000000870757265556e6974000000000000000b436861725265
*6475636572000000000000000866726f6d43686172000000000000000b696e76616c6964436861
*72000000000000000455544638000000000000000772756e55544638000000000000000b576974
*6852656475636572000000000000000e776974686f757452656475636572000000000000000955
*6e696f6e57697468000000000000000c676574556e696f6e57697468000000000000000c486173
*556e696f6e576974680000000000000009756e696f6e576974680000000000000009656d707479
*576974680000000000000005556e696f6e0000000000000008676574556e696f6e000000000000
*0008486173556e696f6e0000000000000005656d7074790000000000000005756e696f6e000000
*0000000005436861723800000000000000086765744368617238000000000000000656616c7565
*73000000000000000967657456616c75657300000000000000044b657973000000000000000767
*65744b657973000000000000000947656e657261746f720000000000000004456c656d00000000
*000000096d617052656475636500000000000000056d6170546f00000000000000076d61704672
*6f6d0000000000000006726564756365000000000000000d6d6170526564756365576974680000
*00000000000a72656475636557697468000000000000000e536f75726365506f736974696f6e00
*000000000000035461620000000000000007436f6c756d6e7300000000000000054c696e657300
*00000000000003506f73000000000000000c536f75726365436f6c756d6e000000000000000a53
*6f757263654c696e6500000000000000076e657874546162000000000000000b73746172744f66
*46696c65000000000000000c736f75726365436f6c756d6e000000000000000a736f757263654c
*696e65000000000000001273686f77536f75726365506f736974696f6e0000000000000007556e
*6c696e6564000000000000000a72756e556e6c696e65640000000000000008556e737061636564
*000000000000000b72756e556e7370616365640000000000000005576f72647300000000000000
*0872756e576f726473000000000000000872756e4c696e65730000000000000009776f72647346
*726f6d00000000000000096c696e657346726f6d000000000000000453656c6600000000000000
*0767657453656c6600000000000000044c5a373800000000000000066465636f64650000000000
*000006656e636f64650000000000000008656e636f64654571000000000000001270726f705f64
*65636f64655f656e636f6465000000000000001470726f705f6465636f64655f656e636f646545
*71000000000000000a46726f6d537472696e67000000000000000d67657446726f6d537472696e
*6700000000000000056379636c6500000000000000067265706561740000000000000009726570
*6c6963617465000000000000002170726f705f7265706c69636174655f72696768745f64697374
*72696275746976650000000000000003524c450000000000000006676574524c45000000000000
*000352756e000000000000000a656e636f64654c697374000000000000001670726f705f646563
*6f64655f656e636f64654c6973740000000000000007434d6f6e6f696400000000000000054745
*6e646f000000000000000867657447456e646f000000000000001063617465676f7279546f4d6f
*6e6f696400000000000000106d6f6e6f6964546f43617465676f72790000000000000004706c75
*7300000000000000047a65726f00000000000000012b0000000000000003457870000000000000
*000667657445787000000000000000034c6f6700000000000000066765744c6f67000000000000
*000e4d756c7469706c6963617469766500000000000000036f6e65000000000000000574696d65
*7300000000000000012a0000000000000011526967687453656d694e65617252696e6700000000
*000000104c65667453656d694e65617252696e67000000000000000752696e676f696400000000
*0000000853656d6952696e67000000000000000b4d696e5072696f72697479000000000000000e
*6765744d696e5072696f72697479000000000000000b4d61785072696f72697479000000000000
*000e6765744d61785072696f7269747900000000000000034d696e00000000000000066765744d
*696e00000000000000034d617800000000000000066765744d617800000000000000096d696e66
*696e6974790000000000000008696e66696e697479000000000000000d4b6c65656e65416c6765
*62726100000000000000047374617200000000000000085072696f726974790000000000000008
*4d6178426f756e6400000000000000084d696e426f756e6400000000000000054f726465720000
*0000000000086765744f72646572000000000000000854726f706963616c000000000000000b67
*657454726f706963616c0000000000000004547269650000000000000005746f74616c00000000
*000000056c6162656c00000000000000086368696c6472656e000000000000000973696e676c65
*746f6e00000000000000046e756c6c000000000000000547726f75700000000000000007676e65
*6761746500000000000000056d696e757300000000000000096773756274726163740000000000
*0000134d756c7469706c6963617469766547726f757000000000000000046f7665720000000000
*000005756e646572000000000000000667726563697000000000000000012d0000000000000006
*6e65676174650000000000000008737562747261637400000000000000012f0000000000000002
*5c5c00000000000000057265636970000000000000000452696e670000000000000008426f6f6c
*52696e67000000000000000b676574426f6f6c52696e67000000000000000746726f6d4e756d00
*0000000000000a67657446726f6d4e756d00000000000000074d6f64756c617200000000000000
*076d6f64756c757300000000000000034d6f6400000000000000066765744d6f64000000000000
*001377697468496e74656772616c4d6f64756c757300000000000000064d6f64756c6500000000
*0000000b52696768744d6f64756c6500000000000000022e2a000000000000000a4c6566744d6f
*64756c6500000000000000022a2e00000000000000034170700000000000000006676574417070
*0000000000000003416c740000000000000006676574416c740000000000000009547261766572
*73616c000000000000000c67657454726176657273616c000000000000000d736e6f6354726176
*657273616c00000000000000034d6f6e00000000000000066765744d6f6e00000000000000084d
*6f6e616453756d000000000000000b6765744d6f6e616453756d0000000000000006416374696f
*6e0000000000000009676574416374696f6e000000000000000a736e6f63416374696f6e000000
*000000000974726176657273655f0000000000000004666f725f00000000000000046173756d00
*000000000000056d61704d5f0000000000000005666f724d5f00000000000000046d73756d0000
*000000000007666f6c644d61700000000000000009636f6e6361744d6170000000000000000466
*6f6c640000000000000006746f4c6973740000000000000003616e6400000000000000026f7200
*00000000000003616e790000000000000003616c6c000000000000000373756d00000000000000
*0770726f647563740000000000000004656c656d00000000000000076e6f74456c656d00000000
*0000000666696c746572000000000000000a66696c74657257697468000000000000000466696e
*64000000000000000446726565000000000000000c416e7947656e657261746f72000000000000
*00025553000000000000000455536574000000000000000473697a6500000000000000066d656d
*62657200000000000000096e6f744d656d6265720000000000000006696e736572740000000000
*00000664656c6574650000000000000010697350726f7065725375627365744f66000000000000
*000a69735375627365744f66000000000000000766696e644d696e000000000000000766696e64
*4d6178000000000000000964656c6574654d696e000000000000000964656c6574654d61780000
*000000000006756e696f6e73000000000000000a646966666572656e6365000000000000000c69
*6e74657273656374696f6e0000000000000009706172746974696f6e00000000000000036d6170
*000000000000000c6d61704d6f6e6f746f6e69630000000000000005656c656d73000000000000
*0009746f4173634c697374000000000000000866726f6d4c697374000000000000000b66726f6d
*4173634c697374000000000000001366726f6d44697374696e63744173634c6973740000000000
*00000573706c6974000000000000000b73706c69744d656d626572000000000000000d64656c65
*746546696e644d696e000000000000000d64656c65746546696e644d617800000000000000076d
*696e5669657700000000000000076d617856696577000000000000000873686f77547265650000
*00000000000c73686f775472656557697468000000000000000576616c69640000000000000007
*4e61747572616c00000000000000076e61747572616c000000000000000852416c676562726100
*00000000000006426974536574000000000000000466756c6c000000000000000a636f6d706c65
*6d656e740000000000000009746f496e7465676572000000000000000e6973436f6d706c656d65
*6e74656400000000000000014400000000000000046c6966740000000000000001640000000000
*0000054669656c64000000000000000b566563746f72537061636500000000000000064d6f6e6f
*696400000000000000054d617962650000000000000008466f6c6461626c650000000000000007
*6d617070656e6400000000000000076d636f6e63617400000000000000066d656d707479000000
*00000000076765744475616c00000000000000044475616c0000000000000007617070456e646f
*0000000000000004456e646f0000000000000006676574416c6c0000000000000003416c6c0000
*000000000006676574416e790000000000000003416e79000000000000000667657453756d0000
*00000000000353756d000000000000000a67657450726f64756374000000000000000750726f64
*756374000000000000000867657446697273740000000000000005466972737400000000000000
*076765744c61737400000000000000044c617374000000000000000e66696e676572747265652d
*302e30000000000000000f446174612e46696e67657254726565000000000000000a46696e6765
*725472656500000000000000076d65617375726500000000000000084748432e576f7264000000
*0000000005576f7264380000000000000004436861720000000000000007697353706163650000
*000000000005546f6b656e00000000000000034d6170000000000000000843617465676f727900
*000000000000033e3e3e00000000000000033c3c3c00000000000000012e000000000000000269
*64000000000000000b4748432e436c617373657300000000000000036d696e0000000000000007
*4e6f7468696e6700000000000000036d617800000000000000084748432e456e756d0000000000
*0000086d6178426f756e6400000000000000086d696e426f756e6400000000000000074748432e
*4e756d000000000000000b4170706c69636174697665000000000000000b416c7465726e617469
*766500000000000000084748432e4261736500000000000000054d6f6e61640000000000000009
*4d6f6e6164506c75730000000000000004666c697000000000000000084748432e4c6973740000
*000000000006636f6e6361740000000000000004426f6f6c000000000000000353657400000000
*00000005666f6c646c0000000000000005666f6c6472000000000000000b73706c69744c6f6f6b
*7570000000000000000454727565000000000000000d5f636f756e7441744c6561737400000000
*0000000c5f636f756e7441744d6f737400000000000000065f636f756e74000000000000000865
*78706f6e656e7400000000000000045f68776d00000000000000086d616e746973736100000000
*000000095f756e69766572736500000000000000095f66726f6d456e756d000000000000000262
*73000000000000000c7265636f6d706c656d656e74000000000000001070736575646f436f6d70
*6c656d656e74000000000000000464696666000000000000000b6173417267547970654f660000
*0000000000077265636f756e74000000000000000368776d
newhex
*0d0cface000400000000000166a900000000000145eaff00000105000000000000000000000000
*000000000000000000000001000000000000000100000000000000000000000000000001000000
*000000000200000000000000000000000000000001000000000000000300000000000000000000
*000000000001000000000000000400000000000000000000000000000001000000000000000500
*000000000000000000000000000001000000000000000600000000000000000000000000000001
*000000000000000700000000000000000000000000000001000000000000000800000000000000
*000000000000000001000000000000000900000000000000000000000000000001000000000000
*000a00000000000000000000000000000001000000000000000b00000000000000000000000000
*000002000000000000000c00000000000000000000000000000002000000000000000d00000000
*000000000000000000000002000000000000000e00000000000000000000000000000003000000
*000000000f00000000000000000000000000000003000000000000001000000000000000000000
*000000000004000000000000001100000000000000000000000000000004000000000000001200
*000000000000000000000000000004000000000000001300000000000000000000000000000005
*000000000000001400000000000000000000000000000005000000000000001500000000000000
*000000000000000005000000000000001600000000000000000000000000000005000000000000
*001700000000000000000000000000000005000000000000001800000000000000000000000000
*000005000000000000001900000000000000000000000000000005000000000000001a00000000
*000000000000000000000005000000000000001b00000000000000000000000000000005000000
*000000001c00000000000000000000000000000005000000000000001d00000000000000000000
*000000000005000000000000001e00000000000000000000000000000005000000000000001f00
*000000000000000000000000000006000000000000002000000000000000000000000000000006
*000000000000002100000000000000000000000000000006000000000000002200000000000000
*000000000000000006000000000000002300000000000000000000000000000007000000000000
*002400000000000000000000000000000007000000000000002500000000000000000000000000
*000007000000000000002600000000000000000000000000000007000000000000002700000000
*000000000000000000000007000000000000002800000000000000000000000000000007000000
*000000002900000000000000000000000000000008000000000000002a00000000000000000000
*000000000008000000000000002b00000000000000000000000000000009000000000000002c00
*000000000000000000000000000009000000000000002d00000000000000000000000000000009
*000000000000002e00000000000000000000000000000009000000000000002f00000000000000
*000000000000000009000000000000003000000000000000000000000000000009000000000000
*003100000000000000000000000000000009000000000000003200000000000000000000000000
*000009000000000000003300000000000000000000000000000009000000000000003400000000
*000000000000000000000009000000000000003500000000000000000000000000000009000000
*000000003600000000000000000000000000000009000000000000003700000000000000000000
*000000000009000000000000003800000000000000000000000000000009000000000000003900
*000000000000000000000000000009000000000000003a00000000000000000000000000000009
*000000000000003b00000000000000000000000000000009000000000000003c00000000000000
*00000000000000000a000000000000003d0000000000000000000000000000000a000000000000
*003e0000000000000000000000000000000a000000000000003f00000000000000000000000000
*00000a00000000000000400000000000000000000000000000000a000000000000004100000000
*00000000000000000000000a00000000000000420000000000000000000000000000000a000000
*00000000430000000000000000000000000000000a000000000000004400000000000000000000
*00000000000a00000000000000450000000000000000000000000000000a000000000000004600
*00000000000000000000000000000b00000000000000470000000000000000000000000000000b
*00000000000000480000000000000000000000000000000b000000000000004900000000000000
*00000000000000000b000000000000004a0000000000000000000000000000000b000000000000
*004b0000000000000000000000000000000b000000000000004c00000000000000000000000000
*00000b000000000000004d0000000000000000000000000000000b000000000000004e00000000
*00000000000000000000000b000000000000004f0000000000000000000000000000000b000000
*00000000500000000000000000000000000000000b000000000000005100000000000000000000
*00000000000b00000000000000520000000000000000000000000000000c000000000000005300
*00000000000000000000000000000c00000000000000540000000000000000000000000000000c
*00000000000000550000000000000000000000000000000c000000000000005600000000000000
*00000000000000000c00000000000000570000000000000000000000000000000c000000000000
*00580000000000000000000000000000000c000000000000005900000000000000000000000000
*00000c000000000000005a0000000000000000000000000000000c000000000000005b00000000
*00000000000000000000000c000000000000005c0000000000000000000000000000000d000000
*000000005d0000000000000000000000000000000d000000000000005e00000000000000000000
*00000000000d000000000000005f0000000000000000000000000000000e000000000000006000
*00000000000000000000000000000e00000000000000610000000000000000000000000000000e
*00000000000000620000000000000000000000000000000e000000000000006300000000000000
*00000000000000000e00000000000000640000000000000000000000000000000e000000000000
*00650000000000000000000000000000000f000000000000006600000000000000000000000000
*00000f00000000000000670000000000000000000000000000000f000000000000006800000000
*000000000000000000000010000000000000006900000000000000000000000000000010000000
*000000006a00000000000000000000000000000010000000000000006b00000000000000000000
*000000000010000000000000006c00000000000000000000000000000010000000000000006d00
*000000000000000000000000000010000000000000006e00000000000000000000000000000010
*000000000000006f00000000000000000000000000000010000000000000007000000000000000
*000000000000000010000000000000007100000000000000000000000000000011000000000000
*007200000000000000000000000000000011000000000000007300000000000000000000000000
*000011000000000000007400000000000000000000000000000011000000000000007500000000
*000000000000000000000011000000000000007600000000000000000000000000000011000000
*000000007700000000000000000000000000000011000000000000007800000000000000000000
*000000000011000000000000007900000000000000000000000000000012000000000000007a00
*000000000000000000000000000012000000000000007b00000000000000000000000000000013
*000000000000007c00000000000000000000000000000013000000000000007d00000000000000
*000000000000000013000000000000007e00000000000000000000000000000013000000000000
*007f00000000000000000000000000000013000000000000008000000000000000000000000000
*000013000000000000008100000000000000000000000000000013000000000000008200000000
*000000000000000000000014000000000000008300000000000000000000000000000014000000
*000000008400000000000000000000000000000014000000000000008500000000000000000000
*000000000014000000000000008600000000000000000000000000000014000000000000008700
*000000000000000000000000000014000000000000008800000000000000000000000000000014
*000000000000008900000000000000000000000000000014000000000000008a00000000000000
*000000000000000014000000000000008b00000000000000000000000000000014000000000000
*008c00000000000000000000000000000014000000000000008d00000000000000000000000000
*000014000000000000008e00000000000000000000000000000014000000000000008f00000000
*000000000000000000000014000000000000009000000000000000000000000000000015000000
*000000009100000000000000000000000000000015000000000000009200000000000000000000
*000000000015000000000000009300000000000000000000000000000016000000000000009400
*000000000000000000000000000016000000000000009500000000000000000000000000000016
*000000000000009600000000000000000000000000000016000000000000009700000000000000
*000000000000000016000000000000009800000000000000000000000000000016000000000000
*009900000000000000000000000000000016000000000000009a00000000000000000000000000
*000016000000000000009b00000000000000000000000000000016000000000000009c00000000
*000000000000000000000016000000000000009d00000000000000000000000000000017000000
*000000009e00000000000000000000000000000017000000000000009f00000000000000000000
*00000000001700000000000000a00000000000000000000000000000001700000000000000a100
*00000000000000000000000000001700000000000000a200000000000000000000000000000017
*00000000000000a30000000000000000000000000000001700000000000000a400000000000000
*00000000000000001700000000000000a500000000000000000000000000000017000000000000
*00a60000000000000000000000000000001700000000000000a700000000000000000000000000
*00001800000000000000a80000000000000000000000000000001800000000000000a900000000
*00000000000000000000001800000000000000aa00000000000000000000000000000018000000
*00000000ab0000000000000000000000000000001800000000000000ac00000000000000000000
*00000000001800000000000000ad0000000000000000000000000000001800000000000000ae00
*00000000000000000000000000001800000000000000af00000000000000000000000000000018
*00000000000000b00000000000000000000000000000001800000000000000b100000000000000
*00000000000000001900000000000000b200000000000000000000000000000019000000000000
*00b30000000000000000000000000000001900000000000000b400000000000000000000000000
*00001900000000000000b50000000000000000000000000000001900000000000000b600000000
*00000000000000000000001900000000000000b700000000000000000000000000000019000000
*00000000b80000000000000000000000000000001900000000000000b900000000000000000000
*00000000001900000000000000ba0000000000000000000000000000001900000000000000bb00
*00000000000000000000000000001900000000000000bc00000000000000000000000000000019
*00000000000000bd0000000000000000000000000000001900000000000000be00000000000000
*00000000000000001900000000000000bf00000000000000000000000000000019000000000000
*00c00000000000000000000000000000001900000000000000c100000000000000000000000000
*00001900000000000000c20000000000000000000000000000001900000000000000c300000000
*00000000000000000000001900000000000000c400000000000000000000000000000019000000
*00000000c50000000000000000000000000000001900000000000000c600000000000000000000
*00000000001a00000000000000c70000000000000000000000000000001a00000000000000c800
*00000000000000000000000000001b00000000000000c90000000000000000000000000000001b
*00000000000000ca0000000000000000000000000000001b00000000000000cb00000000000000
*00000000000000001c00000000000000cc0000000000000000000000000000001c000000000000
*00cd0000000000000000000000000000001d00000000000000ce00000000000000000000000000
*00001d00000000000000cf0000000000000000000000000000001d00000000000000d000000000
*00000000000000000000001d00000000000000d10000000000000000000000000000001d000000
*00000000d20000000000000000000000000000001d00000000000000d300000000000000000000
*00000000001d00000000000000d40000000000000000000000000000001d00000000000000d500
*00000000000000000000000000001e00000000000000d60000000000000000000000000000001e
*00000000000000d70000000000000000000000000000001e00000000000000d800000000000000
*00000000000000001f00000000000000d90000000000000000000000000000001f000000000000
*00da0000000000000000000000000000001f00000000000000db00000000000000000000000000
*00002000000000000000dc0000000000000000000000000000002000000000000000dd00000000
*00000000000000000000002000000000000000de00000000000000000000000000000020000000
*00000000df0000000000000000000000000000002000000000000000e000000000000000000000
*00000000002000000000000000e10000000000000000000000000000002000000000000000e200
*00000000000000000000000000002100000000000000e300000000000000000000000000000021
*00000000000000e40000000000000000000000000000002100000000000000e500000000000000
*00000000000000002200000000000000e600000000000000000000000000000022000000000000
*00e70000000000000000000000000000002200000000000000e800000000000000000000000000
*00002200000000000000e90000000000000000000000000000002200000000000000ea00000000
*00000000000000000000002200000000000000eb00000000000000000000000000000022000000
*00000000ec0000000000000000000000000000002200000000000000ed00000000000000000000
*00000000002200000000000000ee0000000000000000000000000000002200000000000000ef00
*00000000000000000000000000002200000000000000f000000000000000000000000000000022
*00000000000000f10000000000000000000000000000002200000000000000f200000000000000
*00000000000000002200000000000000f300000000000000000000000000000022000000000000
*00f40000000000000000000000000000002200000000000000f500000000000000000000000000
*00002300000000000000f60000000000000000000000000000002300000000000000f700000000
*00000000000000000000002300000000000000f800000000000000000000000000000023000000
*00000000f90000000000000000000000000000002300000000000000fa00000000000000000000
*00000000002300000000000000fb0000000000000000000000000000002300000000000000fc00
*00000000000000000000000000002400000000000000fd00000000000000000000000000000024
*00000000000000fe0000000000000000000000000000002400000000000000ff00000000000000
*000000000000000024000000000000010000000000000000000000000000000025000000000000
*010100000000000000000000000000000025000000000000010200000000000000000000000000
*000025000000000000010300000000000000000000000000000025000000000000010400000000
*000000000000000000000025260000000000000000000000000000002600010800000070000000
*6f000000720000007400000061000000620000006c00000065010c000000650000007800000070
*0000006500000072000000690000006d000000650000006e00000074000000610000006c011000
*0000650000006b0000006d00000065000000740000007400000040000000670000006d00000061
*000000690000006c0000002e000000630000006f0000006d000000000000000000000000000000
*000000010001140000006e0000006f0000006e0000002d000000700000006f0000007200000074
*00000061000000620000006c0000006500000020000000280000004d0000005000000054000000
*430000007300000029010c0000006500000078000000700000006500000072000000690000006d
*000000650000006e00000074000000610000006c0110000000650000006b0000006d0000006500
*0000740000007400000040000000670000006d00000061000000690000006c0000002e00000063
*0000006f0000006d06000000000000000301030102240000005400000068000000690000007300
*00002000000074000000790000007000000065000000200000006d000000610000007900000020
*000000620000006500000020000000620000006500000073000000740000002000000072000000
*65000000610000006400000020000000690000006e0000006600000069000000780000002e0000
*002000000041000000200107010202000000630000002001040100000000000000000300000000
*0000000000000000000000010202000000200000006d0102060000002000000069000000730000
*002000000061000000200104010000000000000001050000000000000027000000000000002801
*020100000020010702010000006d01020b00000020000000740000006800000061000000740000
*00200000006d0000006100000070000000730000000a0102100000002000000076000000610000
*006c000000750000006500000073000000200000006f0000006600000020000000740000007900
*000070000000650000002001070201000000630102090000002000000074000000680000007200
*00006f0000007500000067000000680000002001070204000000750000006e0000006900000074
*01021300000020000000740000006f0000002000000076000000610000006c0000007500000065
*00000073000000200000006f000000660000002000000074000000790000007000000065000000
*20010702010000006d0102040000002e0000002000000041000000200107020100000063010201
*0000002d0104010000000000000000030000000000000000000000000000000101020a00000020
*0000006d000000610000007900000020000000610000006c000000730000006f0000000a010229
*00000020000000730000007500000070000000700000006c00000079000000200000006f000000
*7000000065000000720000006100000074000000690000006f0000006e00000073000000200000
*007700000068000000690000006300000068000000200000007400000061000000630000006b00
*00002d0000006f0000006e00000020000000610000006e0000006f000000740000006800000065
*0000007200000020010702010000006301021000000020000000740000006f0000002000000061
*0000006e000000200000006500000078000000690000007300000074000000690000006e000000
*670000002001040100000000000000010500000000000000270000000000000028010201000000
*20010702010000006d01020d000000200000006f0000006e000000200000007400000068000000
*65000000200000006c0000006500000066000000740000000a010250000000200000006f000000
*720000002000000072000000690000006700000068000000740000002e00000020000000540000
*006800000065000000730000006500000020000000730000007000000065000000630000006900
*0000610000006c000000690000007a000000650000006400000020000000720000006500000064
*000000750000006300000074000000690000006f0000006e00000073000000200000006d000000
*6100000079000000200000006200000065000000200000006d0000006f00000072000000650000
*0020000000650000006600000066000000690000006300000069000000650000006e0000007400
*000020000000690000006e00000020000000730000006f0000006d000000650000002000000073
*00000063000000650000006e0000006100000072000000690000006f000000730000000a010224
*00000020000000610000006e000000640000002000000061000000720000006500000020000000
*75000000730000006500000064000000200000007700000068000000650000006e000000200000
*00610000007000000070000000720000006f000000700000007200000069000000610000007400
*000065000000200000006200000079000000200000006100000020010209000000470000006500
*00006e000000650000007200000061000000740000006f0000007201020c0000002e0000002000
*0000540000006800000065000000200000006e000000610000006d000000650000007300000020
*010401000000000000000006000000000000000000000000000000010102050000002000000061
*0000006e0000006400000020010401000000000000000005000000000000000000000000000000
*0101020600000020000000770000006f000000720000006b0000000a023d000000200000006200
*00007900000020000000610000006e000000610000006c0000006f000000670000007900000020
*000000740000006f00000020000000740000006800000065000000200000007300000079000000
*6e0000006f0000006e000000790000006d0000006f0000007500000073000000200000006f0000
*007000000065000000720000006100000074000000690000006f0000006e000000730000002000
*0000690000006e00000020000000740000006800000065000000200000006c0000006900000073
*00000074000000200000006d0000006f0000006e0000006f00000069000000640000002e000000
*0a010301024c0000005400000068000000690000007300000020000000630000006c0000006100
*000073000000730000002000000064000000650000006c00000069000000620000006500000072
*0000006100000074000000650000006c000000790000002000000061000000760000006f000000
*6900000064000000730000002000000066000000750000006e0000006300000074000000690000
*006f0000006e000000610000006c0000002d000000640000006500000070000000650000006e00
*000064000000650000006e000000630000006900000065000000730000002c0000002000000073
*0000006f0000002000000074000000680000006100000074000000200000002800000029000000
*2000000063000000610000006e0000002000000062000000650000002000000061000000200107
*0201000000630102090000002d0000005200000065000000640000007500000063000000650000
*00720000000a01020900000020000000660000006f0000007200000020000000610000006c0000
*006c00000020010702010000006301024a0000002c00000020000000610000006e000000640000
*0020000000730000006f000000200000006d000000610000006e00000079000000200000006300
*00006f0000006d0000006d0000006f0000006e0000002000000072000000650000006400000075
*000000630000006500000072000000730000002000000063000000610000006e00000020000000
*770000006f000000720000006b000000200000006f000000760000006500000072000000200000
*006d000000750000006c0000007400000069000000700000006c00000065000000200000007400
*0000790000007000000065000000730000002c00000020000000660000006f0000007200000020
*000000690000006e0000007300000074000000610000006e00000063000000650000002c000000
*0a0102200000002000000046000000690000007200000073000000740000002000000061000000
*6e00000064000000200000004c000000610000007300000074000000200000006d000000610000
*007900000020000000720000006500000064000000750000006300000065000000200000006200
*00006f000000740000006800000020010702010000006101020500000020000000610000006e00
*000064000000200104010000000000000001060000000000000027000000000000002901020100
*000020010702010000006101020a0000002e0000002000000053000000690000006e0000006300
*00006500000020000000610000002001020900000047000000650000006e000000650000007200
*000061000000740000006f00000072010215000000200000006800000061000000730000002000
*00006100000020000000660000006900000078000000650000006400000020000000650000006c
*000000650000006d000000650000006e000000740000000a01025a000000200000007400000079
*00000070000000650000002c000000200000007400000068000000650000002000000069000000
*6e00000070000000750000007400000020000000740000006f0000002000000074000000680000
*006500000020000000720000006500000064000000750000006300000065000000720000002000
*000069000000730000002000000067000000650000006e0000006500000072000000610000006c
*0000006c00000079000000200000006b0000006e0000006f000000770000006e00000020000000
*610000006e00000064000000200000006500000078000000740000007200000061000000630000
*0074000000690000006e000000670000002000000066000000720000006f0000006d0000002000
*0000740000006800000065000000200000006d0000006f0000006e0000006f0000006900000064
*00000020000000750000007300000075000000610000006c0000006c000000790000000a01025a
*000000200000006900000073000000200000007300000075000000660000006600000069000000
*6300000069000000650000006e0000007400000020000000740000006f00000020000000660000
*006900000078000000200000007400000068000000650000002000000072000000650000007300
*0000750000006c0000007400000020000000740000007900000070000000650000002e00000020
*000000430000006f0000006d00000062000000690000006e00000061000000740000006f000000
*720000007300000020000000610000007200000065000000200000006100000076000000610000
*00690000006c00000061000000620000006c0000006500000020000000660000006f0000007200
*0000200000006d0000006f0000007300000074000000200000007300000063000000650000006e
*0000006100000072000000690000006f0000007300000020000000770000006800000065000000
*72000000650000000a010258000000200000007400000068000000690000007300000020000000
*6900000073000000200000006e0000006f00000074000000200000007400000068000000650000
*0020000000630000006100000073000000650000002c00000020000000610000006e0000006400
*000020000000740000006800000065000000200000006600000065000000770000002000000072
*000000650000006d00000061000000690000006e000000690000006e0000006700000020000000
*63000000610000007300000065000000730000002000000063000000610000006e000000200000
*0062000000650000002000000068000000610000006e000000640000006c000000650000006400
*0000200000006200000079000000200000007500000073000000690000006e0000006700000020
*000000610000006e000000200000006500000078000000700000006c0000006900000063000000
*6900000074000000200000000a0212000000200000007400000079000000700000006500000020
*000000610000006e0000006e0000006f000000740000006100000074000000690000006f000000
*6e0000002e0000000a030102140000004d000000690000006e000000690000006d000000610000
*006c00000020000000640000006500000066000000690000006e00000069000000740000006900
*00006f0000006e0000003a00000020010401000000000000000004000000000000000000000000
*00000001010204000000200000006f000000720000002001040100000000000000000500000000
*00000000000000000000000102010000000a000000000000000403010217000000430000006f00
*00006e000000760000006500000072000000740000002000000061000000200000007600000061
*0000006c000000750000006500000020000000690000006e000000740000006f00000020000000
*61000000200104010000000000000001050000000000000027000000000000002802010000000a
*000000000000000503010214000000410000007000000070000000650000006e00000064000000
*20000000610000002000000076000000610000006c000000750000006500000020000000740000
*006f00000020000000610000002001040100000000000000010500000000000000270000000000
*000028022400000020000000660000006f00000072000000200000007500000073000000650000
*0020000000690000006e000000200000006c0000006500000066000000740000002d0000007400
*00006f0000002d0000007200000069000000670000006800000074000000200000007200000065
*00000064000000750000006300000074000000690000006f0000006e0000000a00000000000000
*060301021700000050000000720000006500000070000000650000006e00000064000000200000
*00610000002000000076000000610000006c0000007500000065000000200000006f0000006e00
*0000740000006f0000002000000061000000200104010000000000000001050000000000000027
*0000000000000028022800000020000000660000006f0000007200000020000000750000007300
*00006500000020000000640000007500000072000000690000006e000000670000002000000072
*000000690000006700000068000000740000002d000000740000006f0000002d0000006c000000
*650000006600000074000000200000007200000065000000640000007500000063000000740000
*00690000006f0000006e0000000a00000000000000070301020800000041000000700000007000
*00006c000000790000002000000061000000200104010000000000000000030000000000000000
*000000000000000101020600000020000000740000006f00000020000000610000002001040100
*00000000000001070000000000000027000000000000002a024b00000020000000630000006f00
*00006e0000007400000061000000690000006e00000065000000720000002c0000002000000061
*00000066000000740000006500000072000000200000006d000000610000007000000070000000
*690000006e000000670000002000000074000000680000006500000020000000630000006f0000
*006e00000074000000650000006e000000740000007300000020000000690000006e0000007400
*00006f000000200000006100000020000000730000007500000069000000740000006100000062
*0000006c0000006500000020000000660000006f000000720000006d0000002000000066000000
*6f0000007200000020000000720000006500000064000000750000006300000074000000690000
*006f0000006e0000002e0000000a00000000000000080301020800000041000000700000007000
*00006c000000790000002000000061000000200104010000000000000000030000000000000000
*000000000000000101020600000020000000740000006f00000020000000610000002001040100
*00000000000001070000000000000027000000000000002a01021e000000200000006d00000061
*0000007000000070000000690000006e0000006700000020000000650000006100000063000000
*6800000020000000650000006c000000650000006d000000650000006e00000074000000200000
*007400000068000000720000006f00000075000000670000006800000020010401000000000000
*0000040000000000000000000000000000000102010000000a2700000000000001080000000000
*000109000000000000010a0000000000000105000000000000010b000000000000010c00000000
*0000010d000000000000010e000000000000010f00000000000001100000000000000111000000
*000000011200000000000001130000000000000114000000000000011500000000000001160000
*00000000011700000000000001180000000000000119000000000000011a000000000000011b00
*0000000000011c000000000000011d000000000000011e000000000000011f0000000000000120
*000000000000012100000000000001220000000000000000000000000000000100000000000000
*020000000000000003000000000000000400000000000000050000000000000006000000000000
*000700000000000000080000000000000009000000000000000a0b000000000000000300000000
*000000040000000000000005000000000000000600000000000000070000000000000008000000
*000000000a00000000000000090000000000000000000000000000000100000000000000020000
*00000000000000000000000000020001140000006e0000006f0000006e0000002d000000700000
*006f000000720000007400000061000000620000006c0000006500000020000000280000004d00
*00005000000054000000430000007300000029010c000000650000007800000070000000650000
*0072000000690000006d000000650000006e00000074000000610000006c011000000065000000
*6b0000006d00000065000000740000007400000040000000670000006d00000061000000690000
*006c0000002e000000630000006f0000006d01000000000000000b030102220000005000000072
*0000006f0000007600000069000000640000006500000073000000200000006100000020000000
*6d000000650000006300000068000000610000006e00000069000000730000006d000000200000
*00660000006f000000720000002000000074000000680000006500000020000000550000005400
*000046000000380000002001040100000000000000010500000000000000270000000000000028
*023600000020000000740000006f000000200000007200000065000000700000006f0000007200
*00007400000020000000690000006e00000076000000610000006c000000690000006400000020
*000000630000006800000061000000720000006100000063000000740000006500000072000000
*7300000020000000740000006f000000200000006f0000006e00000065000000200000006f0000
*0072000000200000006d0000006f0000007200000065000000200000006d0000006f0000006e00
*00006f0000006900000064000000730000002e0000000a2a000000000000010800000000000001
*09000000000000010a0000000000000105000000000000010b000000000000010c000000000000
*010d000000000000010e000000000000010f000000000000011000000000000001110000000000
*000112000000000000011300000000000001140000000000000115000000000000011600000000
*0000011700000000000001180000000000000119000000000000011a000000000000011b000000
*000000011c000000000000011d000000000000011e000000000000011f00000000000001200000
*000000000121000000000000012200000000000000000000000000000001000000000000000200
*000000000000030000000000000004000000000000000500000000000000060000000000000007
*00000000000000080000000000000009000000000000000a000000000000000b00000000000000
*0c000000000000000d03000000000000000b000000000000000d000000000000000c0000000000
*00000000000000000000030001140000006e0000006f0000006e0000002d000000700000006f00
*0000720000007400000061000000620000006c0000006500000020000000280000004d00000050
*00000054000000430000007300000029010c000000650000007800000070000000650000007200
*0000690000006d000000650000006e00000074000000610000006c0110000000650000006b0000
*006d00000065000000740000007400000040000000670000006d00000061000000690000006c00
*00002e000000630000006f0000006d002c00000000000001080000000000000109000000000000
*010a0000000000000105000000000000010b000000000000010c000000000000010d0000000000
*00010e000000000000010f00000000000001100000000000000111000000000000011200000000
*000001130000000000000114000000000000011500000000000001160000000000000117000000
*00000001180000000000000119000000000000011a000000000000011b000000000000011c0000
*00000000011d000000000000011e000000000000011f0000000000000120000000000000012100
*000000000001220000000000000000000000000000000100000000000000020000000000000003
*000000000000000400000000000000050000000000000006000000000000000700000000000000
*080000000000000009000000000000000a000000000000000b000000000000000c000000000000
*000d000000000000000e000000000000000f02000000000000000e000000000000000f00000000
*0000000000000000000000040001140000006e0000006f0000006e0000002d000000700000006f
*000000720000007400000061000000620000006c0000006500000020000000280000004d000000
*5000000054000000430000007300000029010c0000006500000078000000700000006500000072
*000000690000006d000000650000006e00000074000000610000006c0110000000650000006b00
*00006d00000065000000740000007400000040000000670000006d00000061000000690000006c
*0000002e000000630000006f0000006d0100000000000000100301020300000049000000660000
*0020010702010000006d0102060000002000000069000000730000002000000061000000200107
*0201000000630102010000002d0105070000005200000065000000640000007500000063000000
*650000007201020c0000002c000000200000007400000068000000650000006e00000020000000
*6d0000002000000069000000730000002001070102030000002800000063000000200104020000
*000000000000110000000000000000000000000000000400000000000000001000000000000000
*0000000000000000040203000000200000006d000000290102010000002d010507000000520000
*006500000064000000750000006300000065000000720102010000000a01022800000020000000
*2000000020000000540000006800000069000000730000002000000063000000610000006e0000
*002000000062000000650000002000000075000000730000006500000064000000200000007400
*00006f00000020000000710000007500000069000000630000006b0000006c0000007900000020
*00000073000000650000006c000000650000006300000074000000200000006100000020010507
*0000005200000065000000640000007500000063000000650000007201020e0000002000000066
*0000006f0000007200000020000000750000007300000065000000200000006100000073000000
*2000000061000000200104010100000000000001230102010000000a0102030000002000000020
*0000002001040101000000000000012402020000002e0000000a2a000000000000010800000000
*00000109000000000000010a0000000000000105000000000000010b000000000000010c000000
*000000010d000000000000010e000000000000010f000000000000011000000000000001110000
*000000000112000000000000011300000000000001140000000000000115000000000000011600
*0000000000011700000000000001180000000000000119000000000000011a000000000000011b
*000000000000011c000000000000011d000000000000011e000000000000011f00000000000001
*200000000000000121000000000000012200000000000000000000000000000001000000000000
*000200000000000000030000000000000004000000000000000500000000000000060000000000
*00000700000000000000080000000000000009000000000000000a000000000000001000000000
*000000110000000000000012030000000000000010000000000000001100000000000000120000
*000000000000000000000000000500000000040000000000000013030102040000005400000068
*000000650000002001040100000000000000010500000000000000270000000000000028010201
*0000002001070102010000002801020100000027010211000000750000006e000000690000006f
*0000006e00000057000000690000007400000068000000200000006d0000006100000070000000
*70000000650000006e00000064010201000000270102010000002c01040100000000000000001d
*00000000000000000000000000000005020100000029022100000020000000660000006f000000
*7200000020000000630000006f0000006e0000007400000061000000690000006e000000650000
*0072000000730000002000000066000000750000006c0000006c000000200000006f0000006600
*0000200000006d0000006f0000006e0000006f0000006900000064000000730000002e0000000a
*000000000000001603024d000000500000006f0000006c000000790000006d0000006f00000072
*0000007000000068000000690000006300000020000000630000006f0000006e00000074000000
*61000000690000006e000000650000007200000073000000200000007400000068000000610000
*00740000002000000077000000650000002000000063000000610000006e000000200000007300
*00007500000070000000700000006c0000007900000020000000610000006e000000200000006f
*0000007000000065000000720000006100000074000000690000006f0000006e00000020000000
*740000006f0000002000000068000000610000006e000000640000006c00000065000000200000
*00750000006e000000690000006f0000006e000000730000002000000077000000690000007400
*0000680000000a0000000000000019030102040000005400000068000000650000002001040100
*000000000000010500000000000000270000000000000028010201000000200107010201000000
*2801040100000000000000001e000000000000000000000000000000050102010000002c010401
*00000000000000001d0000000000000000000000000000000502010000002902010000000a0000
*00000000001c0301021d0000004100000020000000430000006f0000006e000000740000006100
*0000690000006e0000006500000072000000200000007300000075000000690000007400000061
*000000620000006c0000006500000020000000660000006f000000720000002000000074000000
*68000000650000002001040200000000000000001a000000000000000000000000000000050000
*000000000000190000000000000000000000000000000501020100000020010401000000000000
*0001050000000000000027000000000000002802010000000a3300000000000001080000000000
*000109000000000000010a0000000000000105000000000000010b000000000000010c00000000
*0000010d000000000000010e000000000000010f00000000000001100000000000000111000000
*000000011200000000000001130000000000000114000000000000011500000000000001160000
*00000000011700000000000001180000000000000119000000000000011a000000000000011b00
*0000000000011c000000000000011d000000000000011e000000000000011f0000000000000120
*000000000000012100000000000001220000000000000000000000000000000100000000000000
*020000000000000003000000000000000400000000000000050000000000000006000000000000
*000700000000000000080000000000000009000000000000000a00000000000000130000000000
*000014000000000000001500000000000000160000000000000017000000000000001800000000
*00000019000000000000001a000000000000001b000000000000001c000000000000001d000000
*000000001e0c000000000000001c000000000000001d000000000000001e000000000000001900
*0000000000001a000000000000001b000000000000001600000000000000180000000000000017
*000000000000001300000000000000140000000000000015000000000000000000000000000000
*060001230000006e0000006f0000006e0000002d000000700000006f0000007200000074000000
*61000000620000006c000000650000002000000028000000740000007900000070000000650000
*002000000066000000610000006d000000690000006c0000006900000065000000730000002c00
*0000200000004d0000005000000054000000430000007300000029010c00000065000000780000
*00700000006500000072000000690000006d000000650000006e00000074000000610000006c01
*10000000650000006b0000006d00000065000000740000007400000040000000670000006d0000
*0061000000690000006c0000002e000000630000006f0000006d03000000000000001f03010214
*000000410000002000000067000000650000006e0000006500000072000000610000006c000000
*690000007a0000006100000074000000690000006f0000006e000000200000006f000000660000
*002001020f000000440000006100000074000000610000002e0000004c00000069000000730000
*00740000002e0000006300000079000000630000006c0000006501021100000020000000740000
*006f00000020000000610000006e00000020000000610000007200000062000000690000007400
*000072000000610000007200000079000000200104010000000000000001050000000000000027
*000000000000002802390000002e000000200000004d0000006100000079000000200000006600
*000061000000690000006c00000020000000740000006f00000020000000740000006500000072
*0000006d000000690000006e00000061000000740000006500000020000000660000006f000000
*7200000020000000730000006f0000006d000000650000002000000076000000610000006c0000
*0075000000650000007300000020000000690000006e00000020000000730000006f0000006d00
*000065000000200000006d0000006f0000006e0000006f0000006900000064000000730000002e
*0000000a000000000000002003010214000000410000002000000067000000650000006e000000
*6500000072000000610000006c000000690000007a0000006100000074000000690000006f0000
*006e000000200000006f0000006600000020010210000000440000006100000074000000610000
*002e0000004c0000006900000073000000740000002e0000007200000065000000700000006500
*0000610000007401021100000020000000740000006f00000020000000610000006e0000002000
*000061000000720000006200000069000000740000007200000061000000720000007900000020
*0104010000000000000001050000000000000027000000000000002802390000002e0000002000
*00004d0000006100000079000000200000006600000061000000690000006c0000002000000074
*0000006f000000200000007400000065000000720000006d000000690000006e00000061000000
*740000006500000020000000660000006f0000007200000020000000730000006f0000006d0000
*00650000002000000076000000610000006c000000750000006500000073000000200000006900
*00006e00000020000000730000006f0000006d00000065000000200000006d0000006f0000006e
*0000006f0000006900000064000000730000002e0000000a000000000000002103010214000000
*410000002000000067000000650000006e0000006500000072000000610000006c000000690000
*007a0000006100000074000000690000006f0000006e000000200000006f000000660000002001
*0213000000440000006100000074000000610000002e0000004c00000069000000730000007400
*00002e0000007200000065000000700000006c0000006900000063000000610000007400000065
*01021100000020000000740000006f00000020000000610000006e000000200000006100000072
*000000620000006900000074000000720000006100000072000000790000002001040100000000
*0000000105000000000000002700000000000000280102100000002e0000002000000041000000
*6400000061000000700000007400000065000000640000002000000066000000720000006f0000
*006d000000200000000a01020100000020010c4a00000068000000740000007400000070000000
*3a0000002f0000002f000000610000007500000067000000750000007300000074000000730000
*00730000002e000000620000006c0000006f0000006700000073000000700000006f0000007400
*00002e000000630000006f0000006d0000002f000000320000003000000030000000380000002f
*00000030000000370000002f0000006c0000006f00000073000000740000002d00000061000000
*6e000000640000002d000000660000006f000000750000006e000000640000002d000000690000
*00660000002d000000690000002d00000077000000720000006900000074000000650000002d00
*00003100000030000000380000002d000000690000006e0000002e00000068000000740000006d
*0000006c02010000000a04000000000000001f0000000000000020000000000000002100000000
*000000220400000000000000200000000000000021000000000000001f00000000000000220000
*0000000000000000000000000007000108000000700000006f0000007200000074000000610000
*00620000006c00000065010c000000650000007800000070000000650000007200000069000000
*6d000000650000006e00000074000000610000006c0110000000650000006b0000006d00000065
*000000740000007400000040000000670000006d00000061000000690000006c0000002e000000
*630000006f0000006d040000000000000023030102020000004100000020010401000000000000
*0001050000000000000027000000000000002801020b0000002000000069000000730000002000
*00006a000000750000007300000074000000200000006100000020010401000000000000000125
*0000000000000027000000000000002b022e000000200000007700000069000000740000006800
*0000200000006f0000006e00000065000000200000006f000000620000006a0000006500000063
*000000740000002e00000020000000540000006800000069000000730000002000000066000000
*610000006b00000065000000730000002000000074000000680000006100000074000000200000
*007700000069000000740000006800000020000000610000002000000047000000410000004400
*0000540000000a0000000000000024030102040000005400000068000000650000002001040100
*000000000000010500000000000000270000000000000028010237000000200000006f00000066
*0000002000000074000000680000006500000020000000650000006e000000640000006f000000
*6d0000006f00000072000000700000006800000069000000730000006d00000073000000200000
*006f00000076000000650000007200000020000000730000006f0000006d000000650000002000
*00006f000000620000006a00000065000000630000007400000020000000690000006e00000020
*000000610000006e00000020000000610000007200000062000000690000007400000072000000
*610000007200000079000000200104010000000000000001250000000000000027000000000000
*002b02020000002e0000000a00000000000000270301020c000000450000007800000074000000
*720000006100000063000000740000002000000074000000680000006500000020010401000000
*0000000001050000000000000027000000000000002801021e0000002000000066000000720000
*006f0000006d000000200000006900000074000000730000002000000072000000650000007000
*0000720000006500000073000000650000006e000000740000006100000074000000690000006f
*0000006e0000002000000061000000730000002000000061000000200104010000000000000001
*250000000000000027000000000000002b02010000000a00000000000000280301021500000043
*0000006f0000006e00000076000000650000007200000074000000200000006100000020000000
*76000000610000006c000000750000006500000020000000690000006e00000020000000610000
*002001040100000000000000010500000000000000270000000000000028010214000000200000
*00690000006e000000740000006f00000020000000610000006e00000020000000610000007200
*0000720000006f0000007700000020000000690000006e00000020000000610000002001040100
*00000000000001250000000000000027000000000000002b02020000002e0000000a3200000000
*000001080000000000000109000000000000010a0000000000000105000000000000010b000000
*000000010c000000000000010d000000000000010e000000000000010f00000000000001100000
*000000000111000000000000011200000000000001130000000000000114000000000000011500
*00000000000116000000000000011700000000000001180000000000000119000000000000011a
*000000000000011b000000000000011c000000000000011d000000000000011e00000000000001
*1f0000000000000120000000000000012100000000000001220000000000000126000000000000
*012700000000000001280000000000000129000000000000012500000000000000000000000000
*000001000000000000000200000000000000030000000000000004000000000000000500000000
*00000006000000000000000700000000000000080000000000000009000000000000000a000000
*000000002300000000000000240000000000000025000000000000002600000000000000270000
*000000000028060000000000000024000000000000002500000000000000260000000000000023
*000000000000002700000000000000280000000000000000000000000000000800010800000070
*0000006f000000720000007400000061000000620000006c00000065010c000000650000007800
*0000700000006500000072000000690000006d000000650000006e00000074000000610000006c
*0110000000650000006b0000006d00000065000000740000007400000040000000670000006d00
*000061000000690000006c0000002e000000630000006f0000006d001e00000000000001080000
*000000000109000000000000010a0000000000000105000000000000010b000000000000010c00
*0000000000010d000000000000010e000000000000010f00000000000001100000000000000111
*000000000000011200000000000001130000000000000114000000000000011500000000000001
*16000000000000011700000000000001180000000000000119000000000000011a000000000000
*011b000000000000011c000000000000011d000000000000011e000000000000011f0000000000
*000120000000000000012100000000000001220000000000000029000000000000002a02000000
*0000000029000000000000002a0000000000000000000000000000000900010800000070000000
*6f000000720000007400000061000000620000006c00000065010c000000650000007800000070
*0000006500000072000000690000006d000000650000006e00000074000000610000006c011000
*0000650000006b0000006d00000065000000740000007400000040000000670000006d00000061
*000000690000006c0000002e000000630000006f0000006d05000000000000002b030102020000
*006100000020010401000000000000000034000000000000000000000000000000090102190000
*00200000007400000072000000610000006e00000073000000660000006f000000720000006d00
*000065000000720000002000000074000000680000006100000074000000200000007400000072
*000000650000006100000074000000730000002001040100000000000000012a00000000000000
*27000000000000002c010204000000200000006100000073000000200104010000000000000001
*2b000000000000002d000000000000002e0102010000000a010215000000200000005400000068
*0000006900000073000000200000006c0000006500000074000000730000002000000079000000
*6f000000750000002000000075000000730000006500000020000000610000002001020a000000
*42000000790000007400000065000000530000007400000072000000690000006e000000670102
*0600000020000000610000007300000020000000610000002001040100000000000000012b0000
*00000000002d000000000000002e01022000000020000000730000006f00000075000000720000
*00630000006500000020000000770000006900000074000000680000006f000000750000007400
*000020000000670000006f000000690000006e0000006700000020000000740000006800000072
*0000006f0000007500000067000000680000002000000061000000200104010000000000000001
*050000000000000027000000000000002801021200000020000000740000007200000061000000
*6e00000073000000660000006f000000720000006d0000006500000072000000200000006c0000
*00690000006b00000065000000200102040000005500000054000000460000003802010000000a
*000000000000002e03010202000000610000002001040100000000000000003400000000000000
*000000000000000009024d000000200000007400000072000000610000006e0000007300000066
*0000006f000000720000006d000000650000007200000020000000740000006800000061000000
*740000002000000061000000730000006b00000073000000200000006f0000006e0000006c0000
*007900000020000000660000006f00000072000000200000007400000068000000650000002000
*000076000000610000006c00000075000000650000007300000020000000630000006f0000006e
*0000007400000061000000690000006e000000650000006400000020000000690000006e000000
*20000000610000006e00000020000000690000006e000000640000006500000078000000650000
*006400000020000000630000006f0000006e0000007400000061000000690000006e0000006500
*0000720000000a0000000000000031030102020000006100000020010401000000000000000034
*000000000000000000000000000000090241000000200000007400000072000000610000006e00
*000073000000660000006f000000720000006d0000006500000072000000200000007400000068
*00000061000000740000002000000061000000730000006b00000073000000200000006f000000
*6e0000006c0000007900000020000000660000006f000000720000002000000074000000680000
*0065000000200000006b000000650000007900000073000000200000006f000000660000002000
*0000610000006e00000020000000690000006e0000006400000065000000780000006500000064
*00000020000000630000006f0000006e0000007400000061000000690000006e00000065000000
*720000000a0000000000000034030102130000006d000000690000006e000000690000006d0000
*00610000006c00000020000000640000006500000066000000690000006e000000690000007400
*0000690000006f0000006e00000020010401000000000000000036000000000000000000000000
*00000009010204000000200000006f000000720000002001040100000000000000003700000000
*00000000000000000000000902010000000a000000000000003903010208000000410000007000
*0000700000006c0000007900000020000000610000002001040100000000000000000300000000
*00000000000000000000000101021f000000200000006400000069000000720000006500000063
*000000740000006c0000007900000020000000740000006f000000200000007400000068000000
*6500000020000000650000006c000000650000006d000000650000006e00000074000000730000
*00200000006f000000660000002000000061000000200104010000000000000000340000000000
*000000000000000000000902010000000a38000000000000010800000000000001090000000000
*00010a0000000000000105000000000000010b000000000000010c000000000000010d00000000
*0000010e000000000000010f000000000000011000000000000001110000000000000112000000
*000000011300000000000001140000000000000115000000000000011600000000000001170000
*0000000001180000000000000119000000000000011a000000000000011b000000000000011c00
*0000000000011d000000000000011e000000000000011f00000000000001200000000000000121
*000000000000012200000000000000000000000000000001000000000000000200000000000000
*030000000000000004000000000000000500000000000000060000000000000007000000000000
*00080000000000000009000000000000000a000000000000002b000000000000002c0000000000
*00002d000000000000002e000000000000002f0000000000000030000000000000003100000000
*000000320000000000000033000000000000003400000000000000350000000000000036000000
*000000003700000000000000380000000000000039000000000000003a000000000000003b1100
*000000000000340000000000000035000000000000003600000000000000370000000000000038
*000000000000003100000000000000320000000000000033000000000000002e00000000000000
*2f0000000000000030000000000000002b000000000000002c000000000000002d000000000000
*0039000000000000003a000000000000003b0000000000000000000000000000000a0001080000
*00700000006f000000720000007400000061000000620000006c00000065010c00000065000000
*78000000700000006500000072000000690000006d000000650000006e00000074000000610000
*006c0110000000650000006b0000006d0000006500000074000000740000004000000067000000
*6d00000061000000690000006c0000002e000000630000006f0000006d04000000000000003c03
*010202000000410000002001040100000000000000003400000000000000000000000000000009
*01021a000000200000007700000068000000690000006300000068000000200000007300000075
*00000070000000700000006f000000720000007400000073000000200000006500000066000000
*66000000690000006300000069000000650000006e000000740000002001040100000000000000
*003600000000000000000000000000000009022a000000200000006f0000007000000065000000
*720000006100000074000000690000006f0000006e00000073000000200000006f000000760000
*0065000000720000002000000072000000750000006e0000002d0000006c000000650000006e00
*000067000000740000006800000020000000650000006e000000630000006f0000006400000065
*0000006400000020000000640000006100000074000000610000002e0000000a00000000000000
*3f030223000000410000002000000073000000690000006e000000670000006c00000065000000
*2000000072000000750000006e0000002000000077000000690000007400000068000000200000
*006100000020000000730000007400000072000000690000006300000074000000200000006c00
*0000650000006e0000006700000074000000680000002e0000000a000000000000004203023c00
*00006e00000061000000690000007600000065000000200000006c000000650000006600000074
*00000020000000740000006f000000200000007200000069000000670000006800000074000000
*20000000650000006e000000630000006f0000006400000065000000720000002c000000200000
*0077000000680000006900000063000000680000002000000063000000610000006e0000002000
*000068000000610000006e000000640000006c0000006500000020000000690000006e00000066
*000000690000006e00000069000000740000006500000020000000640000006100000074000000
*610000000a000000000000004303022a000000510000007500000069000000630000006b000000
*430000006800000065000000630000006b0000002000000070000000720000006f000000700000
*00650000007200000074000000790000003a000000200000006400000065000000630000006f00
*00006400000065000000200000002e00000020000000650000006e000000630000006f00000064
*00000065000000200000003d0000002000000069000000640000000a4200000000000001080000
*000000000109000000000000010a0000000000000105000000000000010b000000000000010c00
*0000000000010d000000000000010e000000000000010f00000000000001100000000000000111
*000000000000011200000000000001130000000000000114000000000000011500000000000001
*16000000000000011700000000000001180000000000000119000000000000011a000000000000
*011b000000000000011c000000000000011d000000000000011e000000000000011f0000000000
*000120000000000000012100000000000001220000000000000000000000000000000100000000
*000000020000000000000003000000000000000400000000000000050000000000000006000000
*000000000700000000000000080000000000000009000000000000000a000000000000002b0000
*00000000002c000000000000002d000000000000002e000000000000002f000000000000003000
*000000000000310000000000000032000000000000003300000000000000340000000000000035
*000000000000003600000000000000370000000000000038000000000000003900000000000000
*3a000000000000003b000000000000003c000000000000003d000000000000003e000000000000
*003f00000000000000400000000000000041000000000000004200000000000000430000000000
*00004400000000000000450a000000000000003c000000000000003d000000000000003e000000
*000000003f00000000000000400000000000000041000000000000004400000000000000420000
*00000000004500000000000000430000000000000000000000000000000b0001270000006e0000
*006f0000006e0000002d000000700000006f000000720000007400000061000000620000006c00
*00006500000020000000280000004d000000500000005400000043000000730000002c00000020
*0000004f0000007600000065000000720000006c0000006f000000610000006400000065000000
*64000000530000007400000072000000690000006e000000670000007300000029010c00000065
*00000078000000700000006500000072000000690000006d000000650000006e00000074000000
*610000006c0110000000650000006b0000006d0000006500000074000000740000004000000067
*0000006d00000061000000690000006c0000002e000000630000006f0000006d06000000000000
*004603010202000000410000002001040100000000000000010500000000000000270000000000
*00002801023a000000200000006f00000066000000200000007000000061000000720000007400
*000069000000610000006c00000020000000690000006e000000660000006f000000720000006d
*0000006100000074000000690000006f0000006e0000002000000061000000620000006f000000
*7500000074000000200000006c0000006f000000630000006100000074000000690000006f0000
*006e0000007300000020000000690000006e000000200000006100000020000000730000006f00
*0000750000007200000063000000650000002000000066000000690000006c000000650000002e
*0000000a025f000000200000002000000020000000540000006800000069000000730000002000
*0000690000007300000020000000700000006f0000006c000000790000006d0000006f00000072
*0000007000000068000000690000006300000020000000690000006e0000002000000074000000
*6800000065000000200000006b000000690000006e00000064000000200000006f000000660000
*0020000000690000006e000000660000006f000000720000006d00000061000000740000006900
*00006f0000006e00000020000000790000006f000000750000002000000077000000610000006e
*0000007400000020000000740000006f000000200000006d00000061000000690000006e000000
*7400000061000000690000006e0000002000000061000000620000006f00000075000000740000
*00200000006500000061000000630000006800000020000000730000006f000000750000007200
*000063000000650000002000000066000000690000006c000000650000002e0000000a00000000
*0000004d03023f000000430000006f0000006d0000007000000075000000740000006500000020
*000000740000006800000065000000200000006c0000006f000000630000006100000074000000
*690000006f0000006e000000200000006f00000066000000200000007400000068000000650000
*00200000006e000000650000007800000074000000200000007300000074000000610000006e00
*00006400000061000000720000006400000020000000380000002d000000630000006f0000006c
*000000750000006d0000006e00000020000000610000006c00000069000000670000006e000000
*6500000064000000200000007400000061000000620000000a000000000000004e030102350000
*006c00000069000000660000007400000020000000690000006e000000660000006f0000007200
*00006d0000006100000074000000690000006f0000006e0000002000000061000000620000006f
*0000007500000074000000200000006100000020000000730000006f0000007500000072000000
*63000000650000002000000066000000690000006c0000006500000020000000690000006e0000
*00740000006f000000200000006100000020000000730000007400000061000000720000007400
*0000690000006e0000006700000020010401000000000000000046000000000000000000000000
*0000000b020f00000020000000660000006f000000720000002000000074000000680000006100
*0000740000002000000066000000690000006c000000650000000a000000000000004f03026a00
*000065000000780000007400000072000000610000006300000074000000200000007000000061
*000000720000007400000069000000610000006c00000020000000690000006e00000066000000
*6f000000720000006d0000006100000074000000690000006f0000006e00000020000000610000
*00620000006f000000750000007400000020000000740000006800000065000000200000006300
*0000750000007200000072000000650000006e0000007400000020000000630000006f0000006c
*000000750000006d0000006e0000002c000000200000006500000076000000650000006e000000
*20000000690000006e000000200000007400000068000000650000002000000061000000620000
*0073000000650000006e0000006300000065000000200000006f00000066000000200000006b00
*00006e0000006f000000770000006c00000065000000640000006700000065000000200000006f
*000000660000002000000074000000680000006500000020000000730000006f00000075000000
*7200000063000000650000002000000066000000690000006c000000650000000a000000000000
*005003024600000065000000780000007400000072000000610000006300000074000000200000
*007000000061000000720000007400000069000000610000006c00000020000000690000006e00
*0000660000006f000000720000006d0000006100000074000000690000006f0000006e00000020
*00000061000000620000006f000000750000007400000020000000740000006800000065000000
*2000000063000000750000007200000072000000650000006e00000074000000200000006c0000
*00690000006e00000065000000200000006e000000750000006d00000062000000650000007200
*000020000000690000006600000020000000700000006f00000073000000730000006900000062
*0000006c000000650000000a000000000000005103023c00000065000000780000007400000072
*000000610000006300000074000000200000007400000068000000650000002000000073000000
*74000000610000006e0000006400000061000000720000006400000020000000660000006f0000
*00720000006d000000610000007400000020000000660000006f00000072000000200000006100
*00006e000000200000006100000062000000730000006f0000006c000000750000007400000065
*00000020000000730000006f000000750000007200000063000000650000002000000070000000
*6f000000730000006900000074000000690000006f0000006e0000000a36000000000000010800
*00000000000109000000000000010a0000000000000105000000000000010b000000000000010c
*000000000000010d000000000000010e000000000000010f000000000000011000000000000001
*110000000000000112000000000000011300000000000001140000000000000115000000000000
*0116000000000000011700000000000001180000000000000119000000000000011a0000000000
*00011b000000000000011c000000000000011d000000000000011e000000000000011f00000000
*000001200000000000000121000000000000012200000000000000000000000000000001000000
*000000000200000000000000030000000000000004000000000000000500000000000000060000
*00000000000700000000000000080000000000000009000000000000000a000000000000000b00
*0000000000000c000000000000000d000000000000004600000000000000470000000000000048
*0000000000000049000000000000004a000000000000004b000000000000004c00000000000000
*4d000000000000004e000000000000004f000000000000005000000000000000510c0000000000
*00004d0000000000000046000000000000004a0000000000000049000000000000004800000000
*00000047000000000000004c000000000000004b0000000000000050000000000000004f000000
*000000004e00000000000000510000000000000000000000000000000c0001270000006e000000
*6f0000006e0000002d000000700000006f000000720000007400000061000000620000006c0000
*006500000020000000280000004d000000500000005400000043000000730000002c0000002000
*00004f0000007600000065000000720000006c0000006f00000061000000640000006500000064
*000000530000007400000072000000690000006e000000670000007300000029010c0000006500
*000078000000700000006500000072000000690000006d000000650000006e0000007400000061
*0000006c0110000000650000006b0000006d000000650000007400000074000000400000006700
*00006d00000061000000690000006c0000002e000000630000006f0000006d0800000000000000
*5203010202000000410000002001040100000000000000000b0000000000000000000000000000
*00020226000000200000007400000072000000610000006e00000073000000660000006f000000
*720000006d00000065000000720000002000000074000000680000006100000074000000200000
*00730000007400000072000000690000007000000073000000200000006f000000750000007400
*0000200000006e00000065000000770000006c000000690000006e00000065000000730000000a
*000000000000005403010202000000410000002001040100000000000000000b00000000000000
*000000000000000002010236000000200000007400000072000000610000006e00000073000000
*660000006f000000720000006d0000006500000072000000200000007400000068000000610000
*007400000020000000730000007400000072000000690000007000000073000000200000006f00
*0000750000007400000020000000610000006e0000007900000020000000630000006800000061
*000000720000006100000063000000740000006500000072000000200000006d00000061000000
*740000006300000068000000650000006400000020000000620000007900000020010401000000
*00000000012c0000000000000027000000000000002f02010000000a0000000000000056030102
*02000000410000002001040100000000000000000b000000000000000000000000000000020102
*1b000000200000007400000072000000610000006e00000073000000660000006f000000720000
*006d00000065000000720000002000000074000000680000006100000074000000200000006200
*00007200000065000000610000006b000000730000002000000061000000200104010000000000
*0000012b000000000000002d000000000000002e01020100000020010401000000000000000034
*0000000000000000000000000000000901022000000020000000690000006e000000740000006f
*0000002000000064000000690000007300000074000000690000006e0000006300000074000000
*200000006c000000690000006e00000065000000730000002c0000002000000066000000650000
*006500000064000000690000006e00000067000000200000006100000020010401000000000000
*00012b000000000000002d000000000000002e0102010000002001040100000000000000000300
*000000000000000000000000000001021400000020000000650000006100000063000000680000
*00200000006c000000690000006e0000006500000020000000690000006e000000200000007400
*000075000000720000006e0000002e0000000a0000000000000057030102020000004100000020
*01040100000000000000000b0000000000000000000000000000000201021b0000002000000074
*00000072000000610000006e00000073000000660000006f000000720000006d00000065000000
*720000002000000074000000680000006100000074000000200000006200000072000000650000
*00610000006b0000007300000020000000610000002001040100000000000000012b0000000000
*00002d000000000000002e01020100000020010401000000000000000034000000000000000000
*0000000000000901022000000020000000690000006e000000740000006f000000200000006400
*0000690000007300000074000000690000006e000000630000007400000020000000770000006f
*0000007200000064000000730000002c0000002000000066000000650000006500000064000000
*690000006e0000006700000020000000610000002001040100000000000000012b000000000000
*002d000000000000002e0102010000002001040100000000000000000300000000000000000000
*00000000000102130000002000000065000000610000006300000068000000200000006c000000
*690000006e0000006500000020000000690000006e000000200000007400000075000000720000
*006e0000000a000000000000005803010223000000450000007800000074000000720000006100
*0000630000007400000020000000740000006800000065000000200000006d0000006100000074
*0000006300000068000000650000006400000020000000770000006f0000007200000064000000
*730000002000000066000000720000006f0000006d000000200000007400000068000000650000
*00200104010000000000000000570000000000000000000000000000000c010201000000200104
*010000000000000001050000000000000027000000000000002802010000000a00000000000000
*590301022300000045000000780000007400000072000000610000006300000074000000200000
*00740000006800000065000000200000006d000000610000007400000063000000680000006500
*000064000000200000006c000000690000006e0000006500000073000000200000006600000072
*0000006f0000006d00000020000000740000006800000065000000200104010000000000000000
*560000000000000000000000000000000c01020100000020010401000000000000000105000000
*0000000027000000000000002802010000000a000000000000005a03025e000000550000007400
*0000690000006c0000006900000074000000790000002000000066000000750000006e00000063
*00000074000000690000006f0000006e00000020000000740000006f0000002000000065000000
*78000000740000007200000061000000630000007400000020000000770000006f000000720000
*006400000073000000200000007500000073000000690000006e00000067000000200000006100
*00006300000063000000750000006d000000750000006c00000061000000740000006f00000072
*0000002c00000020000000690000006e000000730000006900000064000000650000002d000000
*770000006f00000072000000640000002c00000020000000610000006e00000064000000200000
*00750000006e00000074000000690000006c0000002d0000006e00000065000000780000007400
*00002d000000770000006f0000007200000064000000200000006d0000006f0000006e0000006f
*0000006900000064000000730000000a000000000000005b03025e000000550000007400000069
*0000006c0000006900000074000000790000002000000066000000750000006e00000063000000
*74000000690000006f0000006e00000020000000740000006f0000002000000065000000780000
*007400000072000000610000006300000074000000200000006c000000690000006e0000006500
*000073000000200000007500000073000000690000006e00000067000000200000006100000063
*00000063000000750000006d000000750000006c00000061000000740000006f00000072000000
*2c00000020000000690000006e000000730000006900000064000000650000002d0000006c0000
*00690000006e000000650000002c00000020000000610000006e00000064000000200000007500
*00006e00000074000000690000006c0000002d0000006e0000006500000078000000740000002d
*0000006c000000690000006e00000065000000200000006d0000006f0000006e0000006f000000
*6900000064000000730000000a3400000000000001080000000000000109000000000000010a00
*00000000000105000000000000010b000000000000010c000000000000010d000000000000010e
*000000000000010f00000000000001100000000000000111000000000000011200000000000001
*130000000000000114000000000000011500000000000001160000000000000117000000000000
*01180000000000000119000000000000011a000000000000011b000000000000011c0000000000
*00011d000000000000011e000000000000011f0000000000000120000000000000012100000000
*000001220000000000000000000000000000000100000000000000020000000000000003000000
*000000000400000000000000050000000000000006000000000000000700000000000000080000
*000000000009000000000000000a000000000000000b000000000000000c000000000000000d00
*000000000000520000000000000053000000000000005400000000000000550000000000000056
*000000000000005700000000000000580000000000000059000000000000005a00000000000000
*5b0a00000000000000570000000000000058000000000000005400000000000000550000000000
*00005a000000000000005600000000000000590000000000000052000000000000005300000000
*0000005b0000000000000000000000000000000d000108000000700000006f0000007200000074
*00000061000000620000006c00000065010c000000650000007800000070000000650000007200
*0000690000006d000000650000006e00000074000000610000006c0110000000650000006b0000
*006d00000065000000740000007400000040000000670000006d00000061000000690000006c00
*00002e000000630000006f0000006d002a00000000000001080000000000000109000000000000
*010a0000000000000105000000000000010b000000000000010c000000000000010d0000000000
*00010e000000000000010f00000000000001100000000000000111000000000000011200000000
*000001130000000000000114000000000000011500000000000001160000000000000117000000
*00000001180000000000000119000000000000011a000000000000011b000000000000011c0000
*00000000011d000000000000011e000000000000011f0000000000000120000000000000012100
*000000000001220000000000000000000000000000000100000000000000020000000000000003
*000000000000000400000000000000050000000000000006000000000000000700000000000000
*080000000000000009000000000000000a000000000000005c000000000000005d000000000000
*005e03000000000000005c000000000000005d000000000000005e000000000000000000000000
*0000000e000108000000700000006f000000720000007400000061000000620000006c00000065
*010c0000006500000078000000700000006500000072000000690000006d000000650000006e00
*000074000000610000006c0110000000650000006b0000006d0000006500000074000000740000
*0040000000670000006d00000061000000690000006c0000002e000000630000006f0000006d06
*000000000000012d03010214000000410000006e000000200000004c0000005a00000037000000
*3800000020000000630000006f0000006d00000070000000720000006500000073000000730000
*00690000006e000000670000002001040100000000000000003400000000000000000000000000
*00000901021b0000002c0000002000000077000000680000006900000063000000680000002000
*0000730000007500000070000000700000006f0000007200000074000000730000002000000065
*0000006600000066000000690000006300000069000000650000006e0000007400000020010401
*00000000000000003600000000000000000000000000000009020c000000200000006f00000070
*00000065000000720000006100000074000000690000006f0000006e000000730000000a000000
*0000000060030102130000006100000020000000740000007900000070000000650000002d0000
*00630000006f0000006e00000073000000740000007200000061000000690000006e0000006500
*0000640000002001040100000000000000003900000000000000000000000000000009020b0000
*00200000006f0000007000000065000000720000006100000074000000690000006f0000006e00
*00000a00000000000000610301021c000000630000006f0000006e000000740000007200000075
*000000630000007400000020000000610000006e000000200000004c0000005a00000037000000
*380000002d000000630000006f0000006d00000070000000720000006500000073000000730000
*006500000064000000200104010000000000000000340000000000000000000000000000000901
*0209000000200000007500000073000000690000006e0000006700000020000000610000002001
*040100000000000000012e00000000000000300000000000000031022a00000020000000690000
*006e0000007400000065000000720000006e000000610000006c0000006c000000790000002c00
*000020000000720000006500000071000000750000006900000072000000650000007300000020
*000000610000006e00000020000000690000006e0000007300000074000000610000006e000000
*6300000065000000200000006f00000066000000200000004f00000072000000640000002e0000
*000a00000000000000620301021c000000630000006f0000006e00000074000000720000007500
*0000630000007400000020000000610000006e000000200000004c0000005a0000003700000038
*0000002d000000630000006f0000006d0000007000000072000000650000007300000073000000
*650000006400000020010401000000000000000034000000000000000000000000000000090236
*000000200000007500000073000000690000006e00000067000000200000006100000020000000
*6c00000069000000730000007400000020000000690000006e0000007400000065000000720000
*006e000000610000006c0000006c000000790000002c0000002000000072000000650000007100
*0000750000006900000072000000650000007300000020000000610000006e0000002000000069
*0000006e0000007300000074000000610000006e0000006300000065000000200000006f000000
*660000002000000045000000710000002e0000000a000000000000006303022a00000051000000
*7500000069000000630000006b000000430000006800000065000000630000006b000000200000
*0070000000720000006f00000070000000650000007200000074000000790000003a0000002000
*00006400000065000000630000006f0000006400000065000000200000002e0000002000000065
*0000006e000000630000006f0000006400000065000000200000003d0000002000000069000000
*640000000a000000000000006403022c000000510000007500000069000000630000006b000000
*430000006800000065000000630000006b0000002000000070000000720000006f000000700000
*00650000007200000074000000790000003a000000200000006400000065000000630000006f00
*00006400000065000000200000002e00000020000000650000006e000000630000006f00000064
*000000650000004500000071000000200000003d0000002000000069000000640000000a3e0000
*0000000001080000000000000109000000000000010a0000000000000105000000000000010b00
*0000000000010c000000000000010d000000000000010e000000000000010f0000000000000110
*000000000000011100000000000001120000000000000113000000000000011400000000000001
*150000000000000116000000000000011700000000000001180000000000000119000000000000
*011a000000000000011b000000000000011c000000000000011d000000000000011e0000000000
*00011f000000000000012000000000000001210000000000000122000000000000000000000000
*000000010000000000000002000000000000000300000000000000040000000000000005000000
*0000000006000000000000000700000000000000080000000000000009000000000000000a0000
*00000000002b000000000000002c000000000000002d000000000000002e000000000000002f00
*000000000000300000000000000031000000000000003200000000000000330000000000000034
*000000000000003500000000000000360000000000000037000000000000003800000000000000
*39000000000000003a000000000000003b000000000000005f0000000000000060000000000000
*006100000000000000620000000000000063000000000000006406000000000000005f00000000
*000000600000000000000061000000000000006200000000000000630000000000000064000000
*0000000000000000000000000f0001280000006e0000006f0000006e0000002d00000070000000
*6f000000720000007400000061000000620000006c0000006500000020000000280000006f0000
*007600000065000000720000006c0000006f000000610000006400000065000000640000002000
*0000730000007400000072000000690000006e00000067000000730000002c000000200000004d
*0000005000000054000000430000007300000029010c0000006500000078000000700000006500
*000072000000690000006d000000650000006e00000074000000610000006c0110000000650000
*006b0000006d00000065000000740000007400000040000000670000006d000000610000006900
*00006c0000002e000000630000006f0000006d002a000000000000010800000000000001090000
*00000000010a0000000000000105000000000000010b000000000000010c000000000000010d00
*0000000000010e000000000000010f000000000000011000000000000001110000000000000112
*000000000000011300000000000001140000000000000115000000000000011600000000000001
*1700000000000001180000000000000119000000000000011a000000000000011b000000000000
*011c000000000000011d000000000000011e000000000000011f00000000000001200000000000
*000121000000000000012200000000000000000000000000000001000000000000000200000000
*000000030000000000000004000000000000000500000000000000060000000000000007000000
*00000000080000000000000009000000000000000a000000000000006500000000000000660000
*000000000067030000000000000065000000000000006600000000000000670000000000000000
*0000000000000010000122000000700000006f000000720000007400000061000000620000006c
*00000065000000200000002800000062000000750000007400000020000000690000006e000000
*7300000074000000610000006e0000006300000065000000730000002000000075000000730000
*0065000000200000004d0000005000000054000000430000007300000029010c00000065000000
*78000000700000006500000072000000690000006d000000650000006e00000074000000610000
*006c0110000000650000006b0000006d0000006500000074000000740000004000000067000000
*6d00000061000000690000006c0000002e000000630000006f0000006d02000000000000006803
*01020a000000430000006f0000006e000000760000006500000072000000740000002000000061
*000000200104010000000000000001050000000000000027000000000000002801020800000020
*000000690000006e000000740000006f0000002000000061000000200104010000000000000000
*6e0000000000000000000000000000001001020c0000002e000000200000004d0000006e000000
*650000006d0000006f0000006e00000069000000630000003a000000200107021b000000450000
*0078000000700000002000000061000000200000002a0000002000000045000000780000007000
*00002000000062000000200000003d000000200000004500000078000000700000002000000028
*00000061000000200000002b00000020000000620000002902010000000a000000000000006b03
*01020a000000430000006f0000006e000000760000006500000072000000740000002000000061
*0000002001040100000000000000006e0000000000000000000000000000001001020800000020
*000000690000006e000000740000006f0000002000000061000000200104010000000000000001
*050000000000000027000000000000002801020c0000002e000000200000004d0000006e000000
*650000006d0000006f0000006e00000069000000630000003a000000200107021b0000004c0000
*006f000000670000002000000061000000200000002b000000200000004c0000006f0000006700
*00002000000062000000200000003d000000200000004c0000006f000000670000002000000028
*00000061000000200000002a00000020000000620000002902010000000a270000000000000108
*0000000000000109000000000000010a0000000000000105000000000000010b00000000000001
*0c000000000000010d000000000000010e000000000000010f0000000000000110000000000000
*011100000000000001120000000000000113000000000000011400000000000001150000000000
*000116000000000000011700000000000001180000000000000119000000000000011a00000000
*0000011b000000000000011c000000000000011d000000000000011e000000000000011f000000
*0000000120000000000000012100000000000001220000000000000029000000000000002a0000
*0000000000680000000000000069000000000000006a000000000000006b000000000000006c00
*0000000000006d000000000000006e000000000000006f00000000000000700900000000000000
*6e000000000000006f0000000000000070000000000000006b000000000000006c000000000000
*006d00000000000000680000000000000069000000000000006a00000000000000000000000000
*000011000108000000700000006f000000720000007400000061000000620000006c0000006501
*0c0000006500000078000000700000006500000072000000690000006d000000650000006e0000
*0074000000610000006c011f000000450000006400000077000000610000007200000064000000
*200000004b0000006d000000650000007400000074000000200000003c000000650000006b0000
*006d00000065000000740000007400000040000000670000006d00000061000000690000006c00
*00002e000000630000006f0000006d0000003e0400000000000000710302220000004d00000069
*0000006e000000690000006d000000610000006c00000020000000640000006500000066000000
*690000006e0000006900000074000000690000006f0000006e000000200000006f000000760000
*006500000072000000200000006f00000072000000200000006700000072000000650000006300
*000069000000700000000a00000000000000720b01020200000078000000200102010000002f02
*02000000200000007900000000000000730b010202000000780000002001020100000020020100
*00007900000000000000750301021d0000004d000000690000006e000000690000006d00000061
*0000006c00000020000000630000006f0000006d000000700000006c0000006500000074000000
*6500000020000000640000006500000066000000690000006e0000006900000074000000690000
*006f0000006e0000003a0000002001040100000000000000007600000000000000000000000000
*000011010204000000200000006f00000072000000200104010000000000000000770000000000
*000000000000000000001102010000000a2f000000000000010800000000000001090000000000
*00010a0000000000000105000000000000010b000000000000010c000000000000010d00000000
*0000010e000000000000010f000000000000011000000000000001110000000000000112000000
*000000011300000000000001140000000000000115000000000000011600000000000001170000
*0000000001180000000000000119000000000000011a000000000000011b000000000000011c00
*0000000000011d000000000000011e000000000000011f00000000000001200000000000000121
*00000000000001220000000000000029000000000000002a000000000000006800000000000000
*69000000000000006a000000000000006b000000000000006c000000000000006d000000000000
*006e000000000000006f0000000000000070000000000000007100000000000000720000000000
*000073000000000000007400000000000000750000000000000076000000000000007700000000
*000000780800000000000000750000000000000076000000000000007800000000000000770000
*000000000071000000000000007200000000000000730000000000000074000000000000000000
*00000000000012000108000000700000006f000000720000007400000061000000620000006c00
*000065010c0000006500000078000000700000006500000072000000690000006d000000650000
*006e00000074000000610000006c0110000000650000006b0000006d0000006500000074000000
*7400000040000000670000006d00000061000000690000006c0000002e000000630000006f0000
*006d003100000000000001080000000000000109000000000000010a0000000000000105000000
*000000010b000000000000010c000000000000010d000000000000010e000000000000010f0000
*000000000110000000000000011100000000000001120000000000000113000000000000011400
*000000000001150000000000000116000000000000011700000000000001180000000000000119
*000000000000011a000000000000011b000000000000011c000000000000011d00000000000001
*1e000000000000011f000000000000012000000000000001210000000000000122000000000000
*0029000000000000002a00000000000000680000000000000069000000000000006a0000000000
*00006b000000000000006c000000000000006d000000000000006e000000000000006f00000000
*000000700000000000000071000000000000007200000000000000730000000000000074000000
*000000007500000000000000760000000000000077000000000000007800000000000000790000
*00000000007a020000000000000079000000000000007a00000000000000000000000000000013
*00011e000000700000006f000000720000007400000061000000620000006c0000006500000020
*00000028000000690000006e0000007300000074000000610000006e0000006300000065000000
*7300000020000000750000007300000065000000200000004d0000005000000054000000430000
*007300000029010c0000006500000078000000700000006500000072000000690000006d000000
*650000006e00000074000000610000006c0110000000650000006b0000006d0000006500000074
*0000007400000040000000670000006d00000061000000690000006c0000002e00000063000000
*6f0000006d04000000000000007e03010202000000410000002001040100000000000000007e00
*000000000000000000000000000013010218000000200000006900000073000000200000006100
*00006e00000020000000690000006e0000007300000074000000610000006e0000006300000065
*000000200000006f0000006600000020000000620000006f000000740000006800000020010401
*00000000000000006e000000000000000000000000000000100102050000002000000061000000
*6e0000006400000020010401000000000000000105000000000000002700000000000000280102
*08000000200000007700000068000000650000007200000065000000200000000a010203000000
*200000002000000020010401000000000000000070000000000000000000000000000000100102
*120000002000000064000000690000007300000074000000720000006900000062000000750000
*00740000006500000073000000200000006f000000760000006500000072000000200104010000
*000000000000290000000000000000000000000000000802020000002e0000000a000000000000
*007f0b021f0000002800000061000000200000002b000000200000006200000029000000200000
*002a0000002000000063000000200000003d000000200000002800000061000000200000002a00
*0000200000006300000029000000200000002b000000200000002800000062000000200000002a
*00000020000000630000002900000000000000800b021f00000061000000200000002a00000020
*0000002800000062000000200000002b000000200000006300000029000000200000003d000000
*200000002800000061000000200000002a000000200000006200000029000000200000002b0000
*00200000002800000061000000200000002a000000200000006300000029000000000000008103
*010702010000003001020d00000020000000610000006e0000006e000000690000006800000069
*0000006c0000006100000074000000650000007300000020010401000000000000000070000000
*0000000000000000000000001002010000000a3600000000000001080000000000000109000000
*000000010a0000000000000105000000000000010b000000000000010c000000000000010d0000
*00000000010e000000000000010f00000000000001100000000000000111000000000000011200
*000000000001130000000000000114000000000000011500000000000001160000000000000117
*00000000000001180000000000000119000000000000011a000000000000011b00000000000001
*1c000000000000011d000000000000011e000000000000011f0000000000000120000000000000
*012100000000000001220000000000000029000000000000002a00000000000000680000000000
*000069000000000000006a000000000000006b000000000000006c000000000000006d00000000
*0000006e000000000000006f000000000000007000000000000000710000000000000072000000
*000000007300000000000000740000000000000075000000000000007600000000000000770000
*000000000078000000000000007b000000000000007c000000000000007d000000000000007e00
*0000000000007f0000000000000080000000000000008107000000000000008100000000000000
*80000000000000007f000000000000007e000000000000007d000000000000007c000000000000
*007b00000000000000000000000000000014000000000400000000000000820301020400000054
*000000680000006500000020010401000000000000000105000000000000002700000000000000
*280102010000002001070102010000002801040100000000000000012f00000000000000270000
*0000000000320102010000002c0104010000000000000001300000000000000027000000000000
*0029020100000029010206000000200000006f0000007600000065000000720000002001070104
*010000000000000001060000000000000027000000000000002902020000002000000061010207
*000000200000007700000068000000650000007200000065000000200104010000000000000001
*300000000000000027000000000000002902140000002000000069000000730000002000000074
*000000680000006500000020000000740000006f0000007000000020000000650000006c000000
*650000006d000000650000006e000000740000000a000000000000008503010204000000540000
*006800000065000000200104010000000000000001050000000000000027000000000000002801
*020100000020010701020100000028010401000000000000000131000000000000002700000000
*000000320102010000002c01040100000000000000013000000000000000270000000000000029
*020100000029010206000000200000006f00000076000000650000007200000020010701040100
*000000000000010600000000000000270000000000000029020200000020000000610102070000
*002000000077000000680000006500000072000000650000002001040100000000000000013000
*000000000000270000000000000029021700000020000000690000007300000020000000740000
*00680000006500000020000000620000006f00000074000000740000006f0000006d0000002000
*0000650000006c000000650000006d000000650000006e000000740000000a0000000000000088
*030102040000005400000068000000650000002001040100000000000000010500000000000000
*27000000000000002801020a00000020000000670000006900000076000000650000006e000000
*2000000062000000790000002001070102010000002801040100000000000000012f0000000000
*00002700000000000000320102010000002c010401000000000000000132000000000000002700
*0000000000003302010000002902010000000a000000000000008b030102040000005400000068
*000000650000002001040100000000000000010500000000000000270000000000000028010201
*000000200107010201000000280104010000000000000001310000000000000027000000000000
*00320102010000002c010401000000000000000133000000000000002700000000000000330201
*0000002902010000000a130000000000000108000000000000010a000000000000010500000000
*000000030000000000000004000000000000008200000000000000830000000000000084000000
*000000008500000000000000860000000000000087000000000000008800000000000000890000
*00000000008a000000000000008b000000000000008c000000000000008d000000000000008e00
*0000000000008f0e000000000000008b000000000000008c000000000000008d00000000000000
*880000000000000089000000000000008a00000000000000850000000000000086000000000000
*0087000000000000008e0000000000000082000000000000008300000000000000840000000000
*00008f000000000000000000000000000000150001140000006e0000006f0000006e0000002d00
*0000700000006f000000720000007400000061000000620000006c000000650000002000000028
*0000004d0000005000000054000000430000007300000029010c00000065000000780000007000
*00006500000072000000690000006d000000650000006e00000074000000610000006c01100000
*00650000006b0000006d00000065000000740000007400000040000000670000006d0000006100
*0000690000006c0000002e000000630000006f0000006d00390000000000000108000000000000
*0109000000000000010a0000000000000105000000000000010b000000000000010c0000000000
*00010d000000000000010e000000000000010f0000000000000110000000000000011100000000
*000001120000000000000113000000000000011400000000000001150000000000000116000000
*000000011700000000000001180000000000000119000000000000011a000000000000011b0000
*00000000011c000000000000011d000000000000011e000000000000011f000000000000012000
*0000000000012100000000000001220000000000000029000000000000002a0000000000000068
*0000000000000069000000000000006a000000000000006b000000000000006c00000000000000
*6d000000000000006e000000000000006f00000000000000700000000000000071000000000000
*007200000000000000730000000000000074000000000000007500000000000000760000000000
*0000770000000000000078000000000000007b000000000000007c000000000000007d00000000
*0000007e000000000000007f000000000000008000000000000000810000000000000090000000
*000000009100000000000000920300000000000000900000000000000091000000000000009200
*0000000000000000000000000000160001140000006e0000006f0000006e0000002d0000007000
*00006f000000720000007400000061000000620000006c0000006500000020000000280000004d
*0000005000000054000000430000007300000029010c0000006500000078000000700000006500
*000072000000690000006d000000650000006e00000074000000610000006c0110000000650000
*006b0000006d00000065000000740000007400000040000000670000006d000000610000006900
*00006c0000002e000000630000006f0000006d0500000000000000930301022300000041000000
*6c0000006700000065000000620000007200000061000000200000006f00000076000000650000
*0072000000200000006100000020000000280000006e0000006500000061000000720000002900
*0000200000002800000073000000650000006d0000006900000029000000200000007200000069
*0000006e000000670000002e0000000a010201000000200107022a00000072000000200000002a
*0000002e000000200000002800000078000000200000002a000000200000007900000029000000
*200000003d000000200000002800000072000000200000002a0000002e00000020000000780000
*0029000000200000002a0000002000000079000000200000003d00000020000000780000002000
*00002a000000200000002800000072000000200000002a0000002e000000200000007900000029
*0102010000000a010201000000200107022a0000002800000078000000200000002a0000002000
*00007900000029000000200000002e0000002a0000002000000072000000200000003d00000020
*00000079000000200000002a000000200000002800000078000000200000002e0000002a000000
*200000007200000029000000200000003d000000200000002800000079000000200000002e0000
*002a000000200000007200000029000000200000002a000000200000007802010000000a000000
*000000009401030220000000410000006e00000020000000720000002d0000006e0000006f0000
*00720000006d0000006500000064000000200000006d0000006f00000064000000750000006c00
*000065000000200000006d00000020000000730000006100000074000000690000007300000066
*0000006900000065000000730000003a0000000a0109010b020b0000006d000000610000006200
*000073000000200000006d000000200000003e0000003d00000020000000300103010202000000
*3200000020010702270000006d000000610000006200000073000000200000006d000000200000
*003d0000003d000000200000007a00000065000000720000006f0000007b0000002d0000005f00
*0000720000002d0000007d000000200000003d0000003e000000200000006d000000200000003d
*0000003d000000200000007a00000065000000720000006f0000007b0000002d0000005f000000
*6d0000002d0000007d02010000000a01030102020000003300000020010701020d0000006d0000
*0061000000620000007300000020000000280000006d000000200000002b000000200000006e00
*000029000000200102010000003c02110000003d000000200000006d0000006100000062000000
*73000000200000006d000000200000002b000000200000006d0000006100000062000000730000
*00200000006e02010000000a010301020200000034000000200107023500000072000000200000
*002a000000200000006d000000610000006200000073000000200000006d000000200000003d00
*0000200000006d000000610000006200000073000000200000002800000072000000200000002a
*0000002e000000200000006d00000029000000200000002d0000002d0000002000000069000000
*66000000200000006d00000020000000690000007300000020000000610000006e000000200000
*00720000002d0000004c0000006500000066000000740000004d0000006f000000640000007500
*00006c0000006502010000000a030102020000003500000020010702360000006d000000610000
*006200000073000000200000006d000000200000002a0000002000000072000000200000003d00
*0000200000006d00000061000000620000007300000020000000280000006d000000200000002e
*0000002a000000200000007200000029000000200000002d0000002d0000002000000069000000
*66000000200000006d00000020000000690000007300000020000000610000006e000000200000
*00720000002d00000052000000690000006700000068000000740000004d0000006f0000006400
*0000750000006c0000006502010000000a00000000000000970b021e0000002000000028000000
*78000000200000002a0000002e000000200000006d00000029000000200000002e0000002a0000
*002000000079000000200000003d0000002000000078000000200000002a0000002e0000002000
*0000280000006d000000200000002e0000002a0000002000000079000000290000000000000098
*0b021c00000020000000280000006d000000200000002e0000002a000000200000007800000029
*000000200000002a0000002000000079000000200000003d000000200000006d00000020000000
*2e0000002a000000200000002800000078000000200000002a0000002000000079000000290000
*00000000009a0b021c000000200000002800000078000000200000002a00000020000000790000
*0029000000200000002a0000002e000000200000006d000000200000003d000000200000007800
*0000200000002a000000200000002800000079000000200000002a0000002e000000200000006d
*000000294000000000000001080000000000000109000000000000010a00000000000001050000
*00000000010b000000000000010c000000000000010d000000000000010e000000000000010f00
*000000000001100000000000000111000000000000011200000000000001130000000000000114
*000000000000011500000000000001160000000000000117000000000000011800000000000001
*19000000000000011a000000000000011b000000000000011c000000000000011d000000000000
*011e000000000000011f0000000000000120000000000000012100000000000001220000000000
*000029000000000000002a00000000000000680000000000000069000000000000006a00000000
*0000006b000000000000006c000000000000006d000000000000006e000000000000006f000000
*000000007000000000000000710000000000000072000000000000007300000000000000740000
*000000000075000000000000007600000000000000770000000000000078000000000000007b00
*0000000000007c000000000000007d000000000000007e000000000000007f0000000000000080
*000000000000008100000000000000930000000000000094000000000000009500000000000000
*96000000000000009700000000000000980000000000000099000000000000009a000000000000
*009b000000000000009c0a000000000000009c000000000000009a000000000000009b00000000
*000000980000000000000099000000000000009700000000000000940000000000000095000000
*00000000960000000000000093000000000000000000000000000000170001140000006e000000
*6f0000006e0000002d000000700000006f000000720000007400000061000000620000006c0000
*006500000020000000280000004d0000005000000054000000430000007300000029010c000000
*6500000078000000700000006500000072000000690000006d000000650000006e000000740000
*00610000006c0110000000650000006b0000006d00000065000000740000007400000040000000
*670000006d00000061000000690000006c0000002e000000630000006f0000006d040000000000
*00009d03010203000000690000006600000020010702010000006d010206000000200000006900
*00007300000020000000610000002001040100000000000000009c000000000000000000000000
*00000016010206000000200000006f000000760000006500000072000000200107020100000072
*01020500000020000000610000006e000000640000002001070201000000660102060000002000
*000069000000730000002000000061000000200104010000000000000001340000000000000027
*0000000000000034010206000000200000007400000068000000650000006e0000002001070102
*02000000660000002001040200000000000000009e000000000000000000000000000000170000
*0000000000009d000000000000000000000000000000170202000000200000006d010206000000
*20000000690000007300000020000000610000002001040100000000000000009c000000000000
*00000000000000000016010206000000200000006f000000760000006500000072000000200107
*02010000007202090000002000000061000000730000002000000077000000650000006c000000
*6c0000000a00000000000000a00301020200000041000000200104020000000000000000a10000
*00000000000000000000000000170000000000000000a000000000000000000000000000000017
*01020b000000200000007400000075000000720000006e0000007300000020000000610000006e
*000000790000002001040100000000000000013500000000000000270000000000000034010211
*00000020000000690000006e0000007300000074000000610000006e0000006300000065000000
*20000000690000006e000000740000006f00000020000000610000002001040100000000000000
*0105000000000000002700000000000000280102020000002e0000000a01021600000020000000
*2000000020000000490000007400000020000000610000006c000000730000006f000000200000
*0070000000720000006f0000007600000069000000640000006500000073000000200000006100
*00002001040100000000000000006e000000000000000000000000000000100102110000002000
*0000690000006e0000007300000074000000610000006e00000063000000650000002000000066
*0000006f0000007200000020000000610000006e00000020010401000000000000000134000000
*0000000027000000000000003401021a0000002000000066000000750000006e00000063000000
*740000006f00000072000000200000007700000072000000610000007000000070000000650000
*00640000002000000061000000720000006f000000750000006e00000064000000200000006100
*000020010401000000000000000105000000000000002700000000000000280102010000000a01
*0218000000200000002000000020000000610000006e0000006400000020000000610000007300
*000073000000650000007200000074000000730000002000000074000000680000006100000074
*00000020000000610000006e000000790000002001040100000000000000013500000000000000
*27000000000000003401020e000000200000006100000070000000700000006c00000069000000
*650000006400000020000000740000006f00000020000000610000002001040100000000000000
*01050000000000000027000000000000002801020900000020000000660000006f000000720000
*006d0000007300000020000000610000002001040100000000000000007f000000000000000000
*00000000000013010202000000200000000a021b00000020000000200000002000000075000000
*6e0000006400000065000000720000002000000074000000680000006500000073000000650000
*00200000006f0000007000000065000000720000006100000074000000690000006f0000006e00
*0000730000002e0000000a00000000000000a30301020200000041000000200104020000000000
*000000a4000000000000000000000000000000170000000000000000a300000000000000000000
*000000000017010218000000200000007500000073000000650000007300000020000000610000
*006e00000020000000670000006c00000075000000650000007300000020000000740000006f00
*000067000000650000007400000068000000650000007200000020010401000000000000000134
*000000000000002700000000000000340102130000002000000061000000630000007400000069
*0000006f0000006e00000073000000200000007700000069000000740000006800000020000000
*280000002a0000003e000000290000000a01021400000020000000200000002000000069000000
*6e00000020000000740000006800000065000000200000006d000000610000006e0000006e0000
*006500000072000000200000006f00000066000000200102090000007400000072000000610000
*0076000000650000007200000073000000650000005f0102060000002000000066000000720000
*006f0000006d0000002001050d000000440000006100000074000000610000002e000000460000
*006f0000006c0000006400000061000000620000006c0000006501021a0000002e000000200000
*00410000006e000000790000002000000076000000610000006c00000075000000650000007300
*00002000000072000000650000007400000075000000720000006e000000650000006400000020
*0000006200000079000000200000000a0222000000200000002000000020000000720000006500
*000064000000750000006300000065000000640000002000000061000000630000007400000069
*0000006f0000006e00000073000000200000006100000072000000650000002000000064000000
*69000000730000006300000061000000720000006400000065000000640000002e0000000a0000
*0000000000a6030102320000004500000066000000660000006900000063000000690000006500
*00006e000000740000006c000000790000002000000061000000760000006f0000006900000064
*000000200000006e0000006500000065000000640000006c000000650000007300000073000000
*6c0000007900000020000000720000006500000062000000690000006e00000064000000690000
*006e00000067000000200000007700000068000000650000006e00000020000000750000007300
*0000690000006e0000006700000020010401000000000000000005000000000000000000000000
*00000001010226000000200000006f0000006e00000020000000610000006e0000002000000061
*0000006300000074000000690000006f0000006e00000020000000740000006800000061000000
*7400000020000000610000006c0000007200000065000000610000006400000079000000200000
*0072000000650000007400000075000000720000006e0000007300000020000000280000002900
*00000a023b00000020000000200000002000000041000000200000007200000065000000770000
*00720000006900000074000000650000002000000072000000750000006c000000650000002000
*00006100000075000000740000006f0000006d0000006100000074000000690000006300000061
*0000006c0000006c00000079000000200000006100000070000000700000006c00000069000000
*650000007300000020000000740000006800000069000000730000002000000077000000680000
*00650000006e00000020000000700000006f000000730000007300000069000000620000006c00
*0000650000000a5500000000000001080000000000000109000000000000010a00000000000001
*05000000000000010b000000000000010c000000000000010d000000000000010e000000000000
*010f00000000000001100000000000000111000000000000011200000000000001130000000000
*000114000000000000011500000000000001160000000000000117000000000000011800000000
*00000119000000000000011a000000000000011b000000000000011c000000000000011d000000
*000000011e000000000000011f0000000000000120000000000000012100000000000001220000
*000000000000000000000000000100000000000000020000000000000003000000000000000400
*000000000000050000000000000006000000000000000700000000000000080000000000000009
*000000000000000a0000000000000029000000000000002a000000000000006800000000000000
*69000000000000006a000000000000006b000000000000006c000000000000006d000000000000
*006e000000000000006f0000000000000070000000000000007100000000000000720000000000
*000073000000000000007400000000000000750000000000000076000000000000007700000000
*00000078000000000000007b000000000000007c000000000000007d000000000000007e000000
*000000007f00000000000000800000000000000081000000000000009300000000000000940000
*000000000095000000000000009600000000000000970000000000000098000000000000009900
*0000000000009a000000000000009b000000000000009c000000000000009d000000000000009e
*000000000000009f00000000000000a000000000000000a100000000000000a200000000000000
*a300000000000000a400000000000000a500000000000000a60a00000000000000a30000000000
*0000a400000000000000a500000000000000a000000000000000a100000000000000a200000000
*0000009d000000000000009e000000000000009f00000000000000a60000000000000000000000
*00000000180001140000006e0000006f0000006e0000002d000000700000006f00000072000000
*7400000061000000620000006c0000006500000020000000280000004d00000050000000540000
*00430000007300000029010c000000650000007800000070000000650000007200000069000000
*6d000000650000006e00000074000000610000006c0110000000650000006b0000006d00000065
*000000740000007400000040000000670000006d00000061000000690000006c0000002e000000
*630000006f0000006d0400000000000000a7030102030000006900000066000000200107020100
*00006d010206000000200000006900000073000000200000006100000020010401000000000000
*00009c00000000000000000000000000000016010206000000200000006f000000760000006500
*00007200000020010702010000007201020500000020000000610000006e000000640000002001
*070201000000660102060000002000000069000000730000002000000061000000200104010000
*000000000001360000000000000027000000000000003501020600000020000000740000006800
*0000650000006e00000020010701020200000066000000200104020000000000000000a8000000
*000000000000000000000000180000000000000000a70000000000000000000000000000001802
*02000000200000006d010206000000200000006900000073000000200000006100000020010401
*00000000000000009c000000000000000000000000000000160209000000200000006100000073
*0000002000000077000000650000006c0000006c0000000a00000000000000aa03010202000000
*41000000200104020000000000000000ab00000000000000000000000000000018000000000000
*0000aa0000000000000000000000000000001801020b0000002000000074000000750000007200
*00006e0000007300000020000000610000006e0000007900000020010401000000000000000137
*0000000000000027000000000000003501021100000020000000690000006e0000007300000074
*000000610000006e000000630000006500000020000000690000006e000000740000006f000000
*200000006100000020010401000000000000000105000000000000002700000000000000280102
*020000002e0000000a010216000000200000002000000020000000490000007400000020000000
*610000006c000000730000006f0000002000000070000000720000006f00000076000000690000
*0064000000650000007300000020000000610000002001040100000000000000006e0000000000
*000000000000000000001001021000000020000000690000006e00000073000000740000006100
*00006e000000630000006500000020000000660000006f00000072000000200000006100000020
*010401000000000000000136000000000000002700000000000000350102120000002000000077
*000000720000006100000070000000700000006500000064000000200000006100000072000000
*6f000000750000006e000000640000002000000061000000200104010000000000000001050000
*00000000002700000000000000280102010000000a010218000000200000002000000020000000
*610000006e00000064000000200000006100000073000000730000006500000072000000740000
*0073000000200000007400000068000000610000007400000020000000610000006e0000007900
*0000200104010000000000000001370000000000000027000000000000003501020e0000002000
*00006100000070000000700000006c00000069000000650000006400000020000000740000006f
*000000200000006100000020010401000000000000000105000000000000002700000000000000
*2801020900000020000000660000006f000000720000006d000000730000002000000061000000
*2001040100000000000000007f0000000000000000000000000000001301020200000020000000
*0a021b000000200000002000000020000000750000006e00000064000000650000007200000020
*0000007400000068000000650000007300000065000000200000006f0000007000000065000000
*720000006100000074000000690000006f0000006e000000730000002e0000000a000000000000
*00ad03010203000000410000006e000000200104020000000000000000ae000000000000000000
*000000000000180000000000000000ad0000000000000000000000000000001801021500000020
*0000007500000073000000650000007300000020000000670000006c0000007500000065000000
*7300000020000000740000006f0000006700000065000000740000006800000065000000720000
*002001040100000000000000013600000000000000270000000000000035010213000000200000
*00610000006300000074000000690000006f0000006e0000007300000020000000770000006900
*0000740000006800000020000000280000003e0000003e000000290000000a0102140000002000
*00002000000020000000690000006e00000020000000740000006800000065000000200000006d
*000000610000006e0000006e0000006500000072000000200000006f0000006600000020010401
*000000000000000138000000000000002700000000000000350102060000002000000066000000
*720000006f0000006d0000002001050d000000440000006100000074000000610000002e000000
*460000006f0000006c0000006400000061000000620000006c0000006501021a0000002e000000
*20000000410000006e000000790000002000000076000000610000006c00000075000000650000
*00730000002000000072000000650000007400000075000000720000006e000000650000006400
*0000200000006200000079000000200000000a0222000000200000002000000020000000720000
*006500000064000000750000006300000065000000640000002000000061000000630000007400
*0000690000006f0000006e00000073000000200000006100000072000000650000002000000064
*00000069000000730000006300000061000000720000006400000065000000640000002e000000
*0a00000000000000b0030102320000004500000066000000660000006900000063000000690000
*00650000006e000000740000006c000000790000002000000061000000760000006f0000006900
*000064000000200000006e0000006500000065000000640000006c000000650000007300000073
*0000006c0000007900000020000000720000006500000062000000690000006e00000064000000
*690000006e00000067000000200000007700000068000000650000006e00000020000000750000
*0073000000690000006e0000006700000020010401000000000000000005000000000000000000
*00000000000001010226000000200000006f0000006e00000020000000610000006e0000002000
*0000610000006300000074000000690000006f0000006e00000020000000740000006800000061
*0000007400000020000000610000006c0000007200000065000000610000006400000079000000
*2000000072000000650000007400000075000000720000006e0000007300000020000000280000
*00290000000a023b00000020000000200000002000000041000000200000007200000065000000
*77000000720000006900000074000000650000002000000072000000750000006c000000650000
*00200000006100000075000000740000006f0000006d0000006100000074000000690000006300
*0000610000006c0000006c00000079000000200000006100000070000000700000006c00000069
*000000650000007300000020000000740000006800000069000000730000002000000077000000
*68000000650000006e00000020000000700000006f000000730000007300000069000000620000
*006c000000650000000a5500000000000001080000000000000109000000000000010a00000000
*00000105000000000000010b000000000000010c000000000000010d000000000000010e000000
*000000010f00000000000001100000000000000111000000000000011200000000000001130000
*000000000114000000000000011500000000000001160000000000000117000000000000011800
*00000000000119000000000000011a000000000000011b000000000000011c000000000000011d
*000000000000011e000000000000011f0000000000000120000000000000012100000000000001
*220000000000000000000000000000000100000000000000020000000000000003000000000000
*000400000000000000050000000000000006000000000000000700000000000000080000000000
*000009000000000000000a0000000000000029000000000000002a000000000000006800000000
*00000069000000000000006a000000000000006b000000000000006c000000000000006d000000
*000000006e000000000000006f0000000000000070000000000000007100000000000000720000
*000000000073000000000000007400000000000000750000000000000076000000000000007700
*00000000000078000000000000007b000000000000007c000000000000007d000000000000007e
*000000000000007f00000000000000800000000000000081000000000000009300000000000000
*940000000000000095000000000000009600000000000000970000000000000098000000000000
*0099000000000000009a000000000000009b000000000000009c00000000000000a70000000000
*0000a800000000000000a900000000000000aa00000000000000ab00000000000000ac00000000
*000000ad00000000000000ae00000000000000af00000000000000b00a00000000000000ad0000
*0000000000ae00000000000000af00000000000000b000000000000000aa00000000000000ab00
*000000000000ac00000000000000a700000000000000a800000000000000a90000000000000000
*00000000000000190001230000006e0000006f0000006e0000002d000000700000006f00000072
*0000007400000061000000620000006c0000006500000020000000280000007400000079000000
*70000000650000002000000066000000610000006d000000690000006c00000069000000650000
*00730000002c000000200000004d0000005000000054000000430000007300000029010c000000
*6500000078000000700000006500000072000000690000006d000000650000006e000000740000
*00610000006c0110000000650000006b0000006d00000065000000740000007400000040000000
*670000006d00000061000000690000006c0000002e000000630000006f0000006d150000000000
*0000b1010301020c00000045000000660000006600000069000000630000006900000065000000
*6e000000740000006c000000790000002001040100000000000000003600000000000000000000
*000000000009010203000000200000006100000020010401000000000000000034000000000000
*0000000000000000000901020b000000200000007500000073000000690000006e000000670000
*0020000000740000006800000065000000200104020000000000000000a4000000000000000000
*000000000000170000000000000000a30000000000000000000000000000001701023400000020
*0000006d0000006f0000006e0000006f00000069000000640000002e0000002000000041000000
*200000007300000070000000650000006300000069000000610000006c000000690000007a0000
*0065000000640000002000000076000000650000007200000073000000690000006f0000006e00
*0000200000006f0000006600000020000000690000007400000073000000200000006e00000061
*0000006d0000006500000073000000610000006b00000065000000200000006600000072000000
*6f0000006d0000002001050d000000440000006100000074000000610000002e00000046000000
*6f0000006c0000006400000061000000620000006c0000006502010000000a0b0102010000000a
*010205000000200000002000000020000000200000002001040100000000000000003600000000
*000000000000000000000009010201000000200104010000000000000000a50000000000000000
*00000000000000170102010000000a020000000000000000b20103010221000000430000006f00
*00006e00000076000000650000006e00000069000000650000006e000000630000006500000020
*00000066000000750000006e0000006300000074000000690000006f0000006e00000020000000
*610000007300000020000000660000006f000000750000006e0000006400000020000000690000
*006e0000002001050d000000440000006100000074000000610000002e000000460000006f0000
*006c0000006400000061000000620000006c0000006502010000000a0b0102010000000a010205
*000000200000002000000020000000200000002001040100000000000000013900000000000000
*270000000000000033010201000000200104010000000000000000b10000000000000000000000
*00000000190102010000000a020000000000000000b30103010231000000540000006800000065
*0000002000000073000000750000006d000000200000006f000000660000002000000061000000
*20000000630000006f0000006c0000006c000000650000006300000074000000690000006f0000
*006e000000200000006f0000006600000020000000610000006300000074000000690000006f00
*00006e000000730000002c0000002000000067000000650000006e000000650000007200000061
*0000006c000000690000007a000000690000006e00000067000000200104010000000000000001
*3a0000000000000027000000000000003602010000000a0b0102010000000a0102040000002000
*000020000000200000002001040100000000000000003b00000000000000000000000000000009
*010201000000200104010000000000000000a20000000000000000000000000000001701020100
*00000a020000000000000000b4010301020c000000450000006600000066000000690000006300
*000069000000650000006e000000740000006c0000007900000020010401000000000000000036
*000000000000000000000000000000090102030000002000000061000000200104010000000000
*000000340000000000000000000000000000000901020b00000020000000750000007300000069
*0000006e0000006700000020000000740000006800000065000000200104020000000000000000
*ae000000000000000000000000000000180000000000000000ad00000000000000000000000000
*000018010234000000200000006d0000006f0000006e0000006f00000069000000640000002e00
*00002000000041000000200000007300000070000000650000006300000069000000610000006c
*000000690000007a00000065000000640000002000000076000000650000007200000073000000
*690000006f0000006e000000200000006f00000066000000200000006900000074000000730000
*00200000006e000000610000006d0000006500000073000000610000006b000000650000002000
*000066000000720000006f0000006d0000002001050d0000004400000061000000740000006100
*00002e000000460000006f0000006c0000006400000061000000620000006c0000006501020500
*000020000000610000006e000000640000002001050d000000430000006f0000006e0000007400
*0000720000006f0000006c0000002e0000004d0000006f0000006e000000610000006402010000
*000a0b0102010000000a0102040000002000000020000000200000002001040100000000000000
*003a00000000000000000000000000000009010201000000200104010000000000000000af0000
*00000000000000000000000000180102010000000a020000000000000000b50103010221000000
*430000006f0000006e00000076000000650000006e00000069000000650000006e000000630000
*00650000002000000066000000750000006e0000006300000074000000690000006f0000006e00
*000020000000610000007300000020000000660000006f000000750000006e0000006400000020
*000000690000006e0000002001050d000000440000006100000074000000610000002e00000046
*0000006f0000006c0000006400000061000000620000006c000000650102050000002000000061
*0000006e000000640000002001050d000000430000006f0000006e00000074000000720000006f
*0000006c0000002e0000004d0000006f0000006e000000610000006402010000000a0b01020100
*00000a010205000000200000002000000020000000200000002001040100000000000000013900
*000000000000270000000000000033010201000000200104010000000000000000b40000000000
*00000000000000000000190102010000000a020000000000000000b60103010231000000540000
*0068000000650000002000000073000000750000006d000000200000006f000000660000002000
*00006100000020000000630000006f0000006c0000006c00000065000000630000007400000069
*0000006f0000006e000000200000006f0000006600000020000000610000006300000074000000
*690000006f0000006e000000730000002c0000002000000067000000650000006e000000650000
*0072000000610000006c000000690000007a000000690000006e00000067000000200104010000
*0000000000013a0000000000000027000000000000003602010000000a0b0102010000000a0102
*05000000200000002000000020000000200000002001040100000000000000003b000000000000
*00000000000000000009010201000000200104010000000000000000ac00000000000000000000
*0000000000180102010000000a020000000000000000b7010301020c0000004500000066000000
*66000000690000006300000069000000650000006e000000740000006c00000079000000200104
*010000000000000000360000000000000000000000000000000901020300000020000000610000
*00200104010000000000000000340000000000000000000000000000000901020b000000200000
*007500000073000000690000006e00000067000000200000007400000068000000650000002001
*040200000000000000005d0000000000000000000000000000000d00000000000000005c000000
*0000000000000000000000000d010234000000200000006d0000006f0000006e0000006f000000
*69000000640000002e000000200000004100000020000000730000007000000065000000630000
*0069000000610000006c000000690000007a000000650000006400000020000000760000006500
*00007200000073000000690000006f0000006e000000200000006f000000660000002000000069
*0000007400000073000000200000006e000000610000006d000000650000007300000061000000
*6b000000650000002000000066000000720000006f0000006d0000002001050d00000044000000
*6100000074000000610000002e000000460000006f0000006c0000006400000061000000620000
*006c0000006502010000000a0b0102010000000a01020500000020000000200000002000000020
*0000002001040100000000000000003a0000000000000000000000000000000901020100000020
*01040100000000000000005e0000000000000000000000000000000d0102010000000a02000000
*0000000000b8030102170000005400000079000000700000006500000020000000730000007000
*0000650000006300000069000000610000006c000000690000007a000000610000007400000069
*0000006f0000006e000000200000006f0000006600000020010507000000660000006f0000006c
*000000640000004d000000610000007002070000002000000061000000620000006f0000007600
*0000650000000a00000000000000b9010301020c00000045000000660000006600000069000000
*6300000069000000650000006e000000740000006c000000790000002001040100000000000000
*003900000000000000000000000000000009010203000000200000006100000020010401000000
*0000000000340000000000000000000000000000000901020b0000002000000075000000730000
*00690000006e000000670000002000000074000000680000006500000020010402000000000000
*00005d0000000000000000000000000000000d00000000000000005c0000000000000000000000
*000000000d010234000000200000006d0000006f0000006e0000006f0000006900000064000000
*2e0000002000000041000000200000007300000070000000650000006300000069000000610000
*006c000000690000007a0000006500000064000000200000007600000065000000720000007300
*0000690000006f0000006e000000200000006f0000006600000020000000690000007400000073
*000000200000006e000000610000006d0000006500000073000000610000006b00000065000000
*2000000066000000720000006f0000006d0000002001050d000000440000006100000074000000
*610000002e000000460000006f0000006c0000006400000061000000620000006c000000650201
*0000000a0b0102010000000a010205000000200000002000000020000000200000002001040100
*000000000000003b00000000000000000000000000000009010201000000200104010000000000
*0000005e0000000000000000000000000000000d0102010000000a020000000000000000ba0301
*020c000000430000006f0000006e00000076000000650000007200000074000000200000006100
*00006e000000790000002001040100000000000000003400000000000000000000000000000009
*01022e00000020000000740000006f0000002000000061000000200000006c0000006900000073
*00000074000000200000006f000000660000002000000069000000740000007300000020000000
*630000006f0000006e00000074000000650000006e00000074000000730000002e000000200000
*005300000070000000650000006300000069000000610000006c000000690000007a0000006100
*000074000000690000006f0000006e000000200000006f00000066000000200104010000000000
*000000390000000000000000000000000000000902010000000a00000000000000bb010301020c
*000000450000006600000066000000690000006300000069000000650000006e00000074000000
*6c0000007900000020010401000000000000000039000000000000000000000000000000090102
*030000002000000061000000200104010000000000000000340000000000000000000000000000
*000901021e000000200000007400000068000000610000007400000020000000630000006f0000
*006e0000007400000061000000690000006e000000730000002000000076000000610000006c00
*0000750000006500000073000000200000006f0000006600000020000000740000007900000070
*000000650000002001040100000000000000013b000000000000002d0000000000000037020100
*00000a0b0102010000000a01020500000020000000200000002000000020000000200104010000
*0000000000003b0000000000000000000000000000000901020100000020010401000000000000
*000111000000000000002700000000000000280102010000000a020000000000000000bc010301
*020c000000450000006600000066000000690000006300000069000000650000006e0000007400
*00006c000000790000002001040100000000000000003900000000000000000000000000000009
*010203000000200000006100000020010401000000000000000034000000000000000000000000
*0000000901021e000000200000007400000068000000610000007400000020000000630000006f
*0000006e0000007400000061000000690000006e00000073000000200000007600000061000000
*6c000000750000006500000073000000200000006f000000660000002000000074000000790000
*0070000000650000002001040100000000000000013b000000000000002d000000000000003702
*010000000a0b0102010000000a0102050000002000000020000000200000002000000020010401
*00000000000000003b000000000000000000000000000000090102010000002001040100000000
*0000000114000000000000002700000000000000280102010000000a020000000000000000bd01
*0301020c000000450000006600000066000000690000006300000069000000650000006e000000
*740000006c00000079000000200104010000000000000000360000000000000000000000000000
*000901020500000020000000610000006e00000079000000200104010000000000000000340000
*000000000000000000000000000902430000002000000063000000680000006500000063000000
*6b000000690000006e0000006700000020000000740000006f0000002000000073000000650000
*006500000020000000690000006600000020000000610000006e00000079000000200000006f00
*000066000000200000006900000074000000730000002000000076000000610000006c00000075
*0000006500000073000000200000006d0000006100000074000000630000006800000020000000
*74000000680000006500000020000000730000007500000070000000700000006c000000690000
*006500000064000000200000007000000072000000650000006400000069000000630000006100
*000074000000650000000a0b0102010000000a0102050000002000000020000000200000002000
*00002001040100000000000000003a000000000000000000000000000000090102010000002001
*0401000000000000000114000000000000002700000000000000280102010000000a0200000000
*00000000be010301020c0000004500000066000000660000006900000063000000690000006500
*00006e000000740000006c00000079000000200104010000000000000000360000000000000000
*000000000000000901020500000020000000610000006e00000079000000200104010000000000
*000000340000000000000000000000000000000902430000002000000063000000680000006500
*0000630000006b000000690000006e0000006700000020000000740000006f0000002000000073
*000000650000006500000020000000690000006600000020000000610000006c0000006c000000
*200000006f00000066000000200000006900000074000000730000002000000076000000610000
*006c000000750000006500000073000000200000006d0000006100000074000000630000006800
*00002000000074000000680000006500000020000000730000007500000070000000700000006c
*000000690000006500000064000000200000007000000072000000650000006400000069000000
*630000006100000074000000650000000a0b0102010000000a0102050000002000000020000000
*20000000200000002001040100000000000000003a000000000000000000000000000000090102
*010000002001040100000000000000011100000000000000270000000000000028010201000000
*0a020000000000000000bf01030102280000004500000066000000660000006900000063000000
*69000000650000006e000000740000006c000000790000002000000073000000750000006d0000
*00200000006f000000760000006500000072000000200000007400000068000000650000002000
*00006d000000650000006d00000062000000650000007200000073000000200000006f00000066
*00000020000000610000006e000000790000002001040100000000000000003400000000000000
*00000000000000000902010000000a0b0102010000000a01020500000020000000200000002000
*0000200000002001040100000000000000003b0000000000000000000000000000000901020100
*000020010401000000000000000117000000000000002700000000000000280102010000000a02
*0000000000000000c0010301023200000045000000660000006600000069000000630000006900
*0000650000006e000000740000006c000000790000002000000074000000610000006b00000065
*000000200000007400000068000000650000002000000070000000720000006f00000064000000
*750000006300000074000000200000006f00000066000000200000006500000076000000650000
*007200000079000000200000006d000000650000006d0000006200000065000000720000002000
*00006f000000660000002000000061000000200104010000000000000000340000000000000000
*000000000000000902010000000a0b0102010000000a0102050000002000000020000000200000
*00200000002001040100000000000000003b000000000000000000000000000000090102010000
*002001040100000000000000011a000000000000002700000000000000280102010000000a0200
*00000000000000c103010210000000430000006800000065000000630000006b00000020000000
*740000006f00000020000000730000006500000065000000200000006900000066000000200104
*010000000000000000bd0000000000000000000000000000001901020f000000200000006d0000
*00650000006d000000620000006500000072000000200000006f00000066000000200000007400
*000068000000650000002001040100000000000000003400000000000000000000000000000009
*021c000000200000006d0000006100000074000000630000006800000065000000730000002000
*000074000000680000006500000020000000730000007500000070000000700000006c00000069
*00000065000000640000002000000076000000610000006c00000075000000650000000a000000
*00000000c203010242000000430000006800000065000000630000006b00000020000000740000
*006f000000200000006d000000610000006b000000650000002000000073000000750000007200
*000065000000200000007400000068000000610000007400000020000000740000006800000065
*00000020000000730000007500000070000000700000006c000000690000006500000064000000
*2000000076000000610000006c0000007500000065000000200000006900000073000000200000
*006e0000006f000000740000002000000061000000200000006d000000650000006d0000006200
*00006500000072000000200000006f000000660000002000000074000000680000006500000020
*0104010000000000000000340000000000000000000000000000000902010000000a0000000000
*0000c30301020c000000450000006600000066000000690000006300000069000000650000006e
*000000740000006c00000079000000200104010000000000000000360000000000000000000000
*000000000901021f00000020000000610000002000000073000000750000006200000073000000
*6500000074000000200000006f0000006600000020000000740000006800000065000000200000
*00650000006c000000650000006d000000650000006e0000007400000073000000200000006900
*00006e000000200000006100000020010401000000000000000034000000000000000000000000
*0000000902010000000a00000000000000c403026a000000410000006c0000006c0000006f0000
*007700000073000000200000006900000064000000690000006f0000006d000000610000007400
*00006900000063000000200000007300000070000000650000006300000069000000610000006c
*000000690000007a0000006100000074000000690000006f0000006e000000200000006f000000
*660000002000000066000000690000006c00000074000000650000007200000020000000620000
*00790000002000000070000000720000006f00000076000000690000006e000000670000002000
*0000610000002000000066000000750000006e0000006300000074000000690000006f0000006e
*00000020000000740000006800000061000000740000002000000077000000690000006c000000
*6c0000002000000062000000650000002000000075000000730000006500000064000000200000
*00740000006f000000200000007400000072000000610000006e00000073000000660000006f00
*0000720000006d00000020000000740000006800000065000000200000006f0000007500000074
*0000007000000075000000740000000a00000000000000c5010301021400000041000000200000
*007300000070000000650000006300000069000000610000006c000000690000007a0000006100
*000074000000690000006f0000006e000000200000006f00000066000000200104010000000000
*000000c30000000000000000000000000000001901020b00000020000000750000007300000069
*0000006e0000006700000020000000740000006800000065000000200104020000000000000001
*1e0000000000000027000000000000002800000000000000011f00000000000000270000000000
*000028010201000000200104010000000000000001050000000000000027000000000000002801
*020f0000002c00000020000000610000006e000000610000006c0000006f000000670000006f00
*0000750000007300000020000000740000006f0000002001020e00000044000000610000007400
*0000610000002e0000004c0000006900000073000000740000002e00000066000000690000006e
*0000006402010000000a0b0102010000000a010205000000200000002000000020000000200000
*00200104010000000000000000c400000000000000000000000000000019010201000000200104
*0100000000000000011d000000000000002700000000000000280102010000000a02004d000000
*00000001080000000000000109000000000000010a0000000000000105000000000000010b0000
*00000000010c000000000000010d000000000000010e000000000000010f000000000000011000
*000000000001110000000000000112000000000000011300000000000001140000000000000115
*000000000000011600000000000001170000000000000118000000000000011900000000000001
*1a000000000000011b000000000000011c000000000000011d000000000000011e000000000000
*011f00000000000001200000000000000121000000000000012200000000000000000000000000
*000001000000000000000200000000000000030000000000000004000000000000000500000000
*00000006000000000000000700000000000000080000000000000009000000000000000a000000
*000000002b000000000000002c000000000000002d000000000000002e000000000000002f0000
*000000000030000000000000003100000000000000320000000000000033000000000000003400
*000000000000350000000000000036000000000000003700000000000000380000000000000039
*000000000000003a000000000000003b00000000000000b100000000000000b200000000000000
*b300000000000000b400000000000000b500000000000000b600000000000000b7000000000000
*00b800000000000000b900000000000000ba00000000000000bb00000000000000bc0000000000
*0000bd00000000000000be00000000000000bf00000000000000c000000000000000c100000000
*000000c200000000000000c300000000000000c400000000000000c51500000000000000b40000
*0000000000b500000000000000b600000000000000b100000000000000b200000000000000b300
*000000000000bb00000000000000bc00000000000000bd00000000000000be00000000000000b7
*00000000000000b900000000000000ba00000000000000b800000000000000c100000000000000
*c300000000000000c400000000000000c500000000000000bf00000000000000c0000000000000
*00c20000000000000000000000000000001a0001140000006e0000006f0000006e0000002d0000
*00700000006f000000720000007400000061000000620000006c00000065000000200000002800
*00004d0000005000000054000000430000007300000029010c0000006500000078000000700000
*006500000072000000690000006d000000650000006e00000074000000610000006c0110000000
*650000006b0000006d00000065000000740000007400000040000000670000006d000000610000
*00690000006c0000002e000000630000006f0000006d003a000000000000010800000000000001
*09000000000000010a0000000000000105000000000000010b000000000000010c000000000000
*010d000000000000010e000000000000010f000000000000011000000000000001110000000000
*000112000000000000011300000000000001140000000000000115000000000000011600000000
*0000011700000000000001180000000000000119000000000000011a000000000000011b000000
*000000011c000000000000011d000000000000011e000000000000011f00000000000001200000
*000000000121000000000000012200000000000000000000000000000001000000000000000200
*000000000000030000000000000004000000000000000500000000000000060000000000000007
*00000000000000080000000000000009000000000000000a000000000000002b00000000000000
*2c000000000000002d000000000000002e000000000000002f0000000000000030000000000000
*003100000000000000320000000000000033000000000000003400000000000000350000000000
*000036000000000000003700000000000000380000000000000039000000000000003a00000000
*0000003b00000000000000c600000000000000c70200000000000000c600000000000000c70000
*000000000000000000000000001b00011e000000700000006f0000007200000074000000610000
*00620000006c000000650000002000000028000000690000006e00000073000000740000006100
*00006e00000063000000650000007300000020000000750000007300000065000000200000004d
*0000005000000054000000430000007300000029010c0000006500000078000000700000006500
*000072000000690000006d000000650000006e00000074000000610000006c0110000000650000
*006b0000006d00000065000000740000007400000040000000670000006d000000610000006900
*00006c0000002e000000630000006f0000006d0043000000000000010800000000000001090000
*00000000010a0000000000000105000000000000010b000000000000010c000000000000010d00
*0000000000010e000000000000010f000000000000011000000000000001110000000000000112
*000000000000011300000000000001140000000000000115000000000000011600000000000001
*1700000000000001180000000000000119000000000000011a000000000000011b000000000000
*011c000000000000011d000000000000011e000000000000011f00000000000001200000000000
*00012100000000000001220000000000000029000000000000002a000000000000006800000000
*00000069000000000000006a000000000000006b000000000000006c000000000000006d000000
*000000006e000000000000006f0000000000000070000000000000007100000000000000720000
*000000000073000000000000007400000000000000750000000000000076000000000000007700
*00000000000078000000000000007b000000000000007c000000000000007d000000000000007e
*000000000000007f00000000000000800000000000000081000000000000009300000000000000
*940000000000000095000000000000009600000000000000970000000000000098000000000000
*0099000000000000009a000000000000009b000000000000009c00000000000000c80000000000
*0000c900000000000000ca0300000000000000c800000000000000ca00000000000000c9000000
*0000000000000000000000001c0000000000380000000000000108000000000000010900000000
*0000010a0000000000000105000000000000010b000000000000010c000000000000010d000000
*000000010e000000000000010f0000000000000110000000000000011100000000000001120000
*000000000113000000000000011400000000000001150000000000000116000000000000011700
*000000000001180000000000000119000000000000011a000000000000011b000000000000011c
*000000000000011d000000000000011e000000000000011f000000000000012000000000000001
*2100000000000001220000000000000029000000000000002a0000000000000068000000000000
*0069000000000000006a000000000000006b000000000000006c000000000000006d0000000000
*00006e000000000000006f00000000000000700000000000000071000000000000007200000000
*000000730000000000000074000000000000007500000000000000760000000000000077000000
*0000000078000000000000007b000000000000007c000000000000007d000000000000007e0000
*00000000007f0000000000000080000000000000008100000000000000cb00000000000000cc02
*00000000000000cb00000000000000cc0000000000000000000000000000001d00000000003e00
*000000000001080000000000000109000000000000010a0000000000000105000000000000010b
*000000000000010c000000000000010d000000000000010e000000000000010f00000000000001
*100000000000000111000000000000011200000000000001130000000000000114000000000000
*011500000000000001160000000000000117000000000000011800000000000001190000000000
*00011a000000000000011b000000000000011c000000000000011d000000000000011e00000000
*0000011f0000000000000120000000000000012100000000000001220000000000000029000000
*000000002a00000000000000680000000000000069000000000000006a000000000000006b0000
*00000000006c000000000000006d000000000000006e000000000000006f000000000000007000
*000000000000710000000000000072000000000000007300000000000000740000000000000075
*000000000000007600000000000000770000000000000078000000000000007b00000000000000
*7c000000000000007d000000000000007e000000000000007f0000000000000080000000000000
*008100000000000000cd00000000000000ce00000000000000cf00000000000000d00000000000
*0000d100000000000000d200000000000000d300000000000000d40800000000000000cd000000
*00000000ce00000000000000cf00000000000000d000000000000000d100000000000000d20000
*0000000000d300000000000000d40000000000000000000000000000001e0001230000006e0000
*006f0000006e0000002d000000700000006f000000720000007400000061000000620000006c00
*000065000000200000002800000074000000790000007000000065000000200000006600000061
*0000006d000000690000006c0000006900000065000000730000002c000000200000004d000000
*5000000054000000430000007300000029010c0000006500000078000000700000006500000072
*000000690000006d000000650000006e00000074000000610000006c0110000000650000006b00
*00006d00000065000000740000007400000040000000670000006d00000061000000690000006c
*0000002e000000630000006f0000006d0039000000000000010800000000000001090000000000
*00010a0000000000000105000000000000010b000000000000010c000000000000010d00000000
*0000010e000000000000010f000000000000011000000000000001110000000000000112000000
*000000011300000000000001140000000000000115000000000000011600000000000001170000
*0000000001180000000000000119000000000000011a000000000000011b000000000000011c00
*0000000000011d000000000000011e000000000000011f00000000000001200000000000000121
*00000000000001220000000000000029000000000000002a000000000000006800000000000000
*69000000000000006a000000000000006b000000000000006c000000000000006d000000000000
*006e000000000000006f0000000000000070000000000000007100000000000000720000000000
*000073000000000000007400000000000000750000000000000076000000000000007700000000
*00000078000000000000007b000000000000007c000000000000007d000000000000007e000000
*000000007f0000000000000080000000000000008100000000000000d500000000000000d60000
*0000000000d70300000000000000d500000000000000d600000000000000d70000000000000000
*000000000000001f000108000000700000006f000000720000007400000061000000620000006c
*00000065010c0000006500000078000000700000006500000072000000690000006d0000006500
*00006e00000074000000610000006c0110000000650000006b0000006d00000065000000740000
*007400000040000000670000006d00000061000000690000006c0000002e000000630000006f00
*00006d003c00000000000001080000000000000109000000000000010a00000000000001050000
*00000000010b000000000000010c000000000000010d000000000000010e000000000000010f00
*000000000001100000000000000111000000000000011200000000000001130000000000000114
*000000000000011500000000000001160000000000000117000000000000011800000000000001
*19000000000000011a000000000000011b000000000000011c000000000000011d000000000000
*011e000000000000011f0000000000000120000000000000012100000000000001220000000000
*000029000000000000002a00000000000000680000000000000069000000000000006a00000000
*0000006b000000000000006c000000000000006d000000000000006e000000000000006f000000
*000000007000000000000000710000000000000072000000000000007300000000000000740000
*000000000075000000000000007600000000000000770000000000000078000000000000007b00
*0000000000007c000000000000007d000000000000007e000000000000007f0000000000000080
*000000000000008100000000000000d500000000000000d600000000000000d700000000000000
*d800000000000000d900000000000000da0300000000000000d800000000000000d90000000000
*0000da00000000000000000000000000000020000108000000700000006f000000720000007400
*000061000000620000006c00000065010c00000065000000780000007000000065000000720000
*00690000006d000000650000006e00000074000000610000006c0110000000650000006b000000
*6d00000065000000740000007400000040000000670000006d00000061000000690000006c0000
*002e000000630000006f0000006d00430000000000000108000000000000010900000000000001
*0a0000000000000105000000000000010b000000000000010c000000000000010d000000000000
*010e000000000000010f0000000000000110000000000000011100000000000001120000000000
*000113000000000000011400000000000001150000000000000116000000000000011700000000
*000001180000000000000119000000000000011a000000000000011b000000000000011c000000
*000000011d000000000000011e000000000000011f000000000000012000000000000001210000
*0000000001220000000000000029000000000000002a0000000000000068000000000000006900
*0000000000006a000000000000006b000000000000006c000000000000006d000000000000006e
*000000000000006f00000000000000700000000000000071000000000000007200000000000000
*730000000000000074000000000000007500000000000000760000000000000077000000000000
*0078000000000000007b000000000000007c000000000000007d000000000000007e0000000000
*00007f0000000000000080000000000000008100000000000000d500000000000000d600000000
*000000d700000000000000d800000000000000d900000000000000da00000000000000db000000
*00000000dc00000000000000dd00000000000000de00000000000000df00000000000000e00000
*0000000000e10700000000000000db00000000000000dc00000000000000dd00000000000000de
*00000000000000df00000000000000e100000000000000e0000000000000000000000000000000
*210001140000006e0000006f0000006e0000002d000000700000006f0000007200000074000000
*61000000620000006c0000006500000020000000280000004d0000005000000054000000430000
*007300000029010c0000006500000078000000700000006500000072000000690000006d000000
*650000006e00000074000000610000006c0110000000650000006b0000006d0000006500000074
*0000007400000040000000670000006d00000061000000690000006c0000002e00000063000000
*6f0000006d003900000000000001080000000000000109000000000000010a0000000000000105
*000000000000010b000000000000010c000000000000010d000000000000010e00000000000001
*0f0000000000000110000000000000011100000000000001120000000000000113000000000000
*011400000000000001150000000000000116000000000000011700000000000001180000000000
*000119000000000000011a000000000000011b000000000000011c000000000000011d00000000
*0000011e000000000000011f000000000000012000000000000001210000000000000122000000
*0000000029000000000000002a00000000000000680000000000000069000000000000006a0000
*00000000006b000000000000006c000000000000006d000000000000006e000000000000006f00
*000000000000700000000000000071000000000000007200000000000000730000000000000074
*000000000000007500000000000000760000000000000077000000000000007800000000000000
*7b000000000000007c000000000000007d000000000000007e000000000000007f000000000000
*0080000000000000008100000000000000e200000000000000e300000000000000e40300000000
*000000e200000000000000e300000000000000e40000000000000000000000000000002200011e
*000000700000006f000000720000007400000061000000620000006c0000006500000020000000
*28000000690000006e0000007300000074000000610000006e0000006300000065000000730000
*0020000000750000007300000065000000200000004d0000005000000054000000430000007300
*000029010c0000006500000078000000700000006500000072000000690000006d000000650000
*006e00000074000000610000006c0110000000650000006b0000006d0000006500000074000000
*7400000040000000670000006d00000061000000690000006c0000002e000000630000006f0000
*006d2100000000000000e503010276000000530000006500000074000000200000006f00000070
*00000065000000720000006100000074000000690000006f0000006e0000007300000020000000
*6f0000007000000074000000690000006d000000690000007a0000006500000064000000200000
*00660000006f000000720000002000000074000000690000006700000068000000740000006c00
*0000790000002000000067000000720000006f0000007500000070000000650000006400000020
*00000073000000650000007400000073000000200000006f00000072000000200000006e000000
*6500000061000000720000006c0000007900000020000000750000006e00000069000000760000
*00650000007200000073000000610000006c000000200000007300000065000000740000007300
*00002000000077000000690000007400000068000000200000006100000020000000630000006c
*0000006f0000007300000065000000200000006200000079000000200000006700000072000000
*6f0000007500000070000000200000006f0000006600000020000000650000006c000000650000
*006d000000650000006e0000007400000073000000200000006d00000069000000730000007300
*0000690000006e000000670000002e0000000a0102770000002000000020000000200000005300
*0000740000006f0000007200000065000000730000002000000069000000740000007300000065
*0000006c00000066000000200000006c000000690000006b000000650000002000000061000000
*6e0000002000000061000000720000006200000069000000740000007200000061000000720000
*007900000020000000700000007200000065000000630000006900000073000000690000006f00
*00006e00000020000000660000006c0000006f0000006100000074000000690000006e00000067
*00000020000000700000006f000000690000006e00000074000000200000006e00000075000000
*6d0000006200000065000000720000002c00000020000000740000007200000061000000630000
*006b000000690000006e0000006700000020000000740000006800000065000000200000006c00
*0000650000006100000073000000740000002000000076000000610000006c0000007500000065
*00000064000000200000006d000000650000006d00000062000000650000007200000020000000
*6f0000006600000020000000740000006800000065000000200000007300000065000000740000
*0020000000610000006e0000006400000020000000610000006e0000000a022600000020000000
*2000000020000000490000006e0000007400000065000000670000006500000072000000200000
*00630000006f0000006d0000007000000072000000690000007300000065000000640000002000
*00006f0000006600000020000000740000006800000065000000200000006d000000650000006d
*000000620000006500000072000000730000002e000000200000000a000000000000013c030102
*310000004100000020000000630000006f0000006e000000730000006500000072000000760000
*006100000074000000690000007600000065000000200000007500000070000000700000006500
*00007200000020000000620000006f000000750000006e00000064000000200000006f0000006e
*0000002000000074000000680000006500000020000000650000006c000000650000006d000000
*650000006e0000007400000020000000630000006f000000750000006e000000740000002e0000
*000a02410000002000000020000000200000004900000066000000200000006e00000065000000
*6700000061000000740000006900000076000000650000002c0000002000000077000000650000
*002000000061000000720000006500000020000000630000006f0000006d000000700000006c00
*0000650000006d000000650000006e000000740000006500000064000000200000007700000069
*000000740000006800000020000000720000006500000073000000700000006500000063000000
*7400000020000000740000006f0000002000000074000000680000006500000020000000750000
*006e0000006900000076000000650000007200000073000000650000000a000000000000013d03
*0102310000004100000020000000630000006f0000006e00000073000000650000007200000076
*0000006100000074000000690000007600000065000000200000006c0000006f00000077000000
*650000007200000020000000620000006f000000750000006e00000064000000200000006f0000
*006e0000002000000074000000680000006500000020000000650000006c000000650000006d00
*0000650000006e0000007400000020000000630000006f000000750000006e000000740000002e
*0000000a02410000002000000020000000200000004900000066000000200000006e0000006500
*00006700000061000000740000006900000076000000650000002c000000200000007700000065
*0000002000000061000000720000006500000020000000630000006f0000006d00000070000000
*6c000000650000006d000000650000006e00000074000000650000006400000020000000770000
*006900000074000000680000002000000072000000650000007300000070000000650000006300
*00007400000020000000740000006f000000200000007400000068000000650000002000000075
*0000006e0000006900000076000000650000007200000073000000650000000a00000000000001
*3e03024b0000004c000000610000007a0000007900000020000000650000006c00000065000000
*6d000000650000006e0000007400000020000000630000006f000000750000006e000000740000
*002000000075000000730000006500000064000000200000007700000068000000650000006e00
*0000200000007400000068000000650000002000000061000000620000006f0000007600000065
*0000002000000074000000770000006f0000002000000064000000690000007300000061000000
*670000007200000065000000650000002e000000200000004f0000002800000031000000290000
*0020000000650000006e0000007600000069000000720000006f0000006e0000006d0000006500
*00006e000000740000002000000073000000690000007a000000650000000a000000000000013f
*0302430000004c0000006f00000077000000200000007700000061000000740000006500000072
*000000200000006d00000061000000720000006b0000002e00000020000000690000006e000000
*640000006500000078000000200000006f00000066000000200000007400000068000000650000
*00200000006c0000006500000061000000730000007400000020000000650000006c0000006500
*00006d000000650000006e0000007400000020000000700000006f00000074000000650000006e
*0000007400000069000000610000006c0000006c0000007900000020000000690000006e000000
*20000000740000006800000065000000200000007300000065000000740000002e0000000a0000
*000000000140030247000000480000006900000067000000680000002000000077000000610000
*00740000006500000072000000200000006d00000061000000720000006b0000002e0000002000
*0000690000006e000000640000006500000078000000200000006f000000660000002000000074
*000000680000006500000020000000670000007200000065000000610000007400000065000000
*730000007400000020000000650000006c000000650000006d000000650000006e000000740000
*0020000000700000006f00000074000000650000006e0000007400000069000000610000006c00
*00006c0000007900000020000000690000006e0000002000000074000000680000006500000020
*0000007300000065000000740000002e0000000a00000000000001410301022c00000074000000
*680000006500000020000000730000006500000074000000200000006f00000066000000200000
*006200000069000000740000007300000020000000730000007400000061000000720000007400
*0000690000006e000000670000002000000066000000720000006f0000006d0000002000000074
*0000006800000065000000200000006500000078000000700000006f0000006e00000065000000
*6e000000740000002e0000000a0243000000200000002000000020000000690000006600000020
*0000006e000000650000006700000061000000740000006900000076000000650000002c000000
*200000007400000068000000650000006e00000020000000770000006500000020000000610000
*00720000006500000020000000630000006f0000006d000000700000006c0000006d0000006500
*00006e000000650000006e00000074000000650000006400000020000000770000006900000074
*000000680000002000000072000000650000007300000070000000650000006300000074000000
*20000000740000006f00000020000000750000006e000000690000007600000065000000720000
*0073000000650000000a00000000000001420301021d000000690000006e000000760000006100
*00007200000069000000610000006e000000740000003a00000020000000770000006800000065
*0000006e00000065000000760000006500000072000000200000006d000000610000006e000000
*7400000069000000730000007300000061000000200102010000003c0235000000200000003000
*00002c00000020000000750000006e000000690000007600000065000000720000007300000065
*000000200000003d000000200000002800000066000000720000006f0000006d00000045000000
*6e000000750000006d000000200000006d000000690000006e000000420000006f000000750000
*006e000000640000002c00000066000000720000006f0000006d000000450000006e0000007500
*00006d000000200000006d0000006100000078000000420000006f000000750000006e00000064
*000000290000000a000000000000014303023500000073000000650000006c000000660000002d
*000000630000006f0000006e0000007400000061000000690000006e0000006500000064000000
*2000000065000000780000007400000072000000610000006300000074000000690000006f0000
*006e000000200000006200000065000000680000006100000076000000690000006f0000007200
*00002c00000020000000650000006e00000061000000620000006c000000650000007300000020
*000000460000006f0000006c0000006400000061000000620000006c000000650000000a000000
*0000000144030245000000490000006e0000007400000065000000720000006e00000061000000
*6c00000020000000730000006d00000061000000720000007400000020000000630000006f0000
*006e0000007300000074000000720000007500000063000000740000006f000000720000002e00
*000020000000460000006f0000007200000063000000650000007300000020000000630000006f
*000000750000006e00000074000000200000007700000068000000650000006e00000065000000
*760000006500000072000000200000006900000074000000200000006900000073000000200000
*00700000006900000067000000650000006f0000006e000000680000006f0000006c0000006500
*0000640000002e0000000a000000000000014503010602040000004f0000002800000064000000
*290102070000002000000077000000680000006500000072000000650000002001060201000000
*64023e000000200000006900000073000000200000006100000062000000730000006f0000006c
*000000750000007400000065000000200000006400000065000000760000006900000061000000
*74000000690000006f0000006e00000020000000690000006e0000002000000074000000680000
*0065000000200000006f0000007500000074000000700000007500000074000000200000006f00
*0000660000002000000066000000720000006f0000006d000000450000006e000000750000006d
*000000200000006f00000076000000650000007200000020000000740000006800000065000000
*200000007300000065000000740000000a00000000000000e603010602040000004f0000002800
*000031000000290102180000002000000054000000680000006500000020000000650000006d00
*0000700000007400000079000000200000007300000065000000740000002e0000002000000050
*00000065000000720000006d00000069000000740000007300000020010602040000004f000000
*2800000031000000290210000000200000006e000000750000006c0000006c0000002000000061
*0000006e000000640000002000000073000000690000007a000000650000002e0000000a000000
*00000000e703010602040000004f00000028000000310000002901020d00000020000000430000
*006f0000006e000000730000007400000072000000750000006300000074000000200000006100
*000020010702060000004200000069000000740000005300000065000000740102200000002000
*00007700000069000000740000006800000020000000610000002000000073000000690000006e
*000000670000006c0000006500000020000000650000006c000000650000006d00000065000000
*6e000000740000002e000000200000005000000065000000720000006d00000069000000740000
*007300000020010602040000004f000000280000003100000029020f000000200000006e000000
*750000006c0000006c00000020000000610000006e000000640000002000000073000000690000
*007a000000650000000a00000000000000e803010602040000004f000000280000003100000029
*01021800000020000000610000006d0000006f0000007200000074000000690000007a00000065
*0000006400000020000000630000006f00000073000000740000002e0000002000000049000000
*7300000020000000740000006800000065000000200104010000000000000000e5000000000000
*0000000000000000002201022700000020000000650000006d0000007000000074000000790000
*003f000000200000004d0000006100000079000000200000006200000065000000200000006600
*00006100000073000000740000006500000072000000200000007400000068000000610000006e
*00000020000000630000006800000065000000630000006b000000690000006e00000067000000
*2000000069000000660000002001070104010000000000000000e9000000000000000000000000
*000000220205000000200000003d0000003d000000200000003002020000002e0000000a000000
*00000000e903010602040000004f00000028000000310000002902380000002000000061000000
*6d0000006f0000007200000074000000690000007a000000650000006400000020000000630000
*006f00000073000000740000002e00000020000000540000006800000065000000200000006e00
*0000750000006d000000620000006500000072000000200000006f000000660000002000000065
*0000006c000000650000006d000000650000006e00000074000000730000002000000069000000
*6e0000002000000074000000680000006500000020000000620000006900000074000000200000
*007300000065000000740000002e0000000a00000000000000ea03010602040000004f00000028
*00000064000000290102030000002000000041000000200104010000000000000000e500000000
*00000000000000000000002201022f00000020000000630000006f0000006e0000007400000061
*000000690000006e000000690000006e0000006700000020000000650000007600000065000000
*7200000079000000200000006d000000650000006d000000620000006500000072000000200000
*006f000000660000002000000074000000680000006500000020000000650000006e0000007500
*00006d00000065000000720000006100000074000000690000006f0000006e000000200000006f
*0000006600000020010702010000006102020000002e0000000a00000000000001460301060204
*0000004f000000280000006400000029025c00000020000000750000006e000000730000006100
*0000660000006500000020000000690000006e0000007400000065000000720000006e00000061
*0000006c000000200000006d0000006500000074000000680000006f000000640000003a000000
*20000000630000006f0000006d000000700000006c000000650000006d000000650000006e0000
*007400000020000000610000002000000073000000650000007400000020000000740000006800
*000061000000740000002000000068000000610000007300000020000000610000006c00000072
*00000065000000610000006400000079000000200000006200000065000000650000006e000000
*20000000630000006f0000006d000000700000006c000000650000006d000000650000006e0000
*00740000006500000064000000200000006100000074000000200000006c000000650000006100
*00007300000074000000200000006f0000006e00000063000000650000002e0000000a00000000
*0000014703010602040000004f000000280000006400000029025c00000020000000750000006e
*0000007300000061000000660000006500000020000000690000006e0000007400000065000000
*720000006e000000610000006c000000200000006d0000006500000074000000680000006f0000
*00640000003a00000020000000630000006f0000006d000000700000006c000000650000006d00
*0000650000006e0000007400000020000000610000002000000073000000650000007400000020
*000000740000006800000061000000740000002000000068000000610000007300000020000000
*610000006c00000072000000650000006100000064000000790000002000000062000000650000
*00650000006e00000020000000630000006f0000006d000000700000006c000000650000006d00
*0000650000006e000000740000006500000064000000200000006100000074000000200000006c
*00000065000000610000007300000074000000200000006f0000006e0000006300000065000000
*2e0000000a00000000000000eb03010602080000004f0000002800000064000000200000002a00
*0000200000006e00000029010208000000200000004d000000610000006b000000650000002000
*000061000000200104010000000000000000e50000000000000000000000000000002202170000
*002000000066000000720000006f0000006d0000002000000061000000200000006c0000006900
*00007300000074000000200000006f00000066000000200000006900000074000000650000006d
*000000730000002e0000000a00000000000000ec03010602080000004f00000028000000640000
*00200000002a000000200000006e00000029010208000000200000004d000000610000006b0000
*00650000002000000061000000200104010000000000000000e500000000000000000000000000
*00002202290000002000000066000000720000006f0000006d0000002000000061000000200000
*0064000000690000007300000074000000690000006e0000006300000074000000200000006100
*00007300000063000000650000006e00000064000000690000006e00000067000000200000006c
*000000690000007300000074000000200000006f00000066000000200000006900000074000000
*650000006d000000730000000a00000000000000ed03010602040000004f000000280000006400
*00002901022100000020000000490000006e000000730000006500000072000000740000002000
*0000610000002000000073000000690000006e000000670000006c000000650000002000000065
*0000006c000000650000006d000000650000006e00000074000000200000006f00000066000000
*200000007400000079000000700000006500000020010702010000006101020a00000020000000
*690000006e000000740000006f0000002000000074000000680000006500000020010401000000
*0000000000e5000000000000000000000000000000220102150000002e00000020000000500000
*007200000065000000730000006500000072000000760000006500000073000000200000006f00
*000072000000640000006500000072000000200000006f00000066000000200104010000000000
*000000e80000000000000000000000000000002201020500000020000000610000006e00000064
*000000200104010000000000000000e90000000000000000000000000000002202010000000a00
*000000000000ee03010602040000004f00000028000000640000002901021f0000002000000044
*000000650000006c00000065000000740000006500000020000000610000002000000073000000
*690000006e000000670000006c00000065000000200000006900000074000000650000006d0000
*002000000066000000720000006f0000006d000000200000007400000068000000650000002001
*04010000000000000000e5000000000000000000000000000000220102150000002e0000002000
*000050000000720000006500000073000000650000007200000076000000650000007300000020
*0000006f00000072000000640000006500000072000000200000006f0000006600000020010401
*0000000000000000e8000000000000000000000000000000220102050000002000000061000000
*6e00000064000000200104010000000000000000e9000000000000000000000000000000220201
*0000000a00000000000000ef03010602040000004f00000028000000310000002901021a000000
*200000005400000065000000730000007400000020000000660000006f00000072000000200000
*006d000000650000006d0000006200000065000000720000007300000068000000690000007000
*000020000000690000006e0000002000000061000000200104010000000000000000e500000000
*00000000000000000000002202010000000a00000000000000f003010602040000004f00000028
*0000006400000029024200000020000000630000006f0000006e00000076000000650000007200
*00007400000020000000740000006f00000020000000610000006e00000020000000490000006e
*000000740000006500000067000000650000007200000020000000720000006500000070000000
*720000006500000073000000650000006e000000740000006100000074000000690000006f0000
*006e0000002e000000200000004400000069000000730000006300000061000000720000006400
*000073000000200000006e00000065000000670000006100000074000000690000007600000065
*00000020000000650000006c000000650000006d000000650000006e0000007400000073000000
*0a00000000000000f103010602040000004f00000028000000640000002902020000002e000000
*0a00000000000000f203010602040000004f000000280000003100000029010236000000200000
*00430000006800000065000000630000006b00000020000000740000006f000000200000007300
*000065000000650000002000000069000000660000002000000077000000650000002000000061
*000000720000006500000020000000720000006500000070000000720000006500000073000000
*650000006e00000074000000650000006400000020000000610000007300000020000000610000
*0020000000630000006f0000006d000000700000006c000000650000006d000000650000006e00
*0000740000006500000064000000200104010000000000000000e5000000000000000000000000
*0000002202030000002e000000200000000a00000000000000f303010602040000004f00000028
*00000064000000290202000000200000000a000000000000014801030253000000550000006e00
*00007300000061000000660000006500000020000000690000006e000000740000006500000072
*0000006e000000610000006c000000200000006d0000006500000074000000680000006f000000
*6400000020000000660000006f0000007200000020000000630000006f0000006d000000700000
*007500000074000000690000006e00000067000000200000006400000069000000660000006600
*00006500000072000000650000006e00000063000000650000007300000020000000690000006e
*0000002000000061000000200000006b0000006e0000006f000000770000006e00000020000000
*750000006e000000690000007600000065000000720000007300000065000000200000006f0000
*006600000020000000640000006900000073000000630000006f00000075000000720000007300
*0000650000002e0000000a0103020f000000500000007200000065000000630000006f0000006e
*000000640000006900000074000000690000006f0000006e000000730000003a0000000a090103
*01020100000020010702060000006d000000200000003e0000003d000000200000003001020100
*00000a010205000000200000003200000020000000200000002001070102010000006d01020100
*0000270205000000200000003e0000003d00000020000000300102010000000a01020500000020
*00000033000000200000002000000020010701020200000061000000200102010000002f020400
*00003d000000200000002d000000310102010000000a0102050000002000000034000000200000
*00200000002001070102010000006101020100000027010201000000200102010000002f020400
*00003d000000200000002d000000310102010000000a0102050000002000000035000000200000
*002000000020010701020200000062000000200102010000002f02030000003d00000020000000
*300102010000000a01020500000020000000360000002000000020000000200107010201000000
*6201020100000027010201000000200102010000002f02030000003d0000002000000030010201
*0000000a0102050000002000000037000000200000002000000020010701020100000075010201
*000000270201000000270102220000002000000069000000730000002000000061000000200000
*0070000000720000006500000076000000690000006f00000075000000730000006c0000007900
*0000200000006f000000620000007400000061000000690000006e000000650000006400000020
*000000630000006f0000007000000079000000200000006f000000660000002001070226000000
*2800000066000000720000006f0000006d000000450000006e000000750000006d000000200000
*006d000000690000006e000000420000006f000000750000006e000000640000002c0000002000
*000066000000720000006f0000006d000000450000006e000000750000006d000000200000006d
*0000006100000078000000420000006f000000750000006e000000640000002902010000000a00
*0000000000014903010602040000004f0000002800000064000000290241000000200000005200
*0000650000006d0000006f000000760000006500000020000000610000006c0000006c00000020
*000000650000006c000000650000006d000000650000006e000000740000007300000020000000
*70000000720000006500000073000000650000006e0000007400000020000000690000006e0000
*0020000000740000006800000065000000200000007300000065000000630000006f0000006e00
*000064000000200000006200000069000000740000007300000065000000740000002000000066
*000000720000006f0000006d000000200000007400000068000000650000002000000066000000
*690000007200000073000000740000000a00000000000000f403010602040000004f0000002800
*0000640000002901020700000020000000490000006e0000006600000069000000780000002001
*040101000000000000014902010000000a000000000000014a0302380000005500000074000000
*690000006c0000006900000074000000790000002000000066000000750000006e000000630000
*0074000000690000006f0000006e00000020000000740000006f00000020000000610000007600
*00006f000000690000006400000020000000720000006500000071000000750000006900000072
*000000690000006e000000670000002000000053000000630000006f0000007000000065000000
*640000005400000079000000700000006500000056000000610000007200000069000000610000
*00620000006c00000065000000730000000a000000000000014b03010602040000004f00000028
*000000640000002902010000000a000000000000014c03010602040000004f0000002800000064
*00000029024f0000002e00000020000000430000006f0000006d00000070000000750000007400
*000065000000730000002000000074000000680000006500000020000000650000007100000075
*0000006900000076000000610000006c000000650000006e00000074000000200000006f000000
*6600000020000000280000007400000072000000750000006e0000006300000061000000740000
*0065000000200000002e000000200000006c0000006f0000006700000042000000610000007300
*0000650000002000000032000000200000002e0000002000000061000000620000007300000029
*00000020000000650000007800000074000000650000006e000000640000006500000064000000
*200000007700000069000000740000006800000020000000300000002000000061000000740000
*0020000000300000000a5200000000000001080000000000000109000000000000010a00000000
*00000105000000000000010b000000000000010c000000000000010d000000000000010e000000
*000000010f00000000000001100000000000000111000000000000011200000000000001130000
*000000000114000000000000011500000000000001160000000000000117000000000000011800
*00000000000119000000000000011a000000000000011b000000000000011c000000000000011d
*000000000000011e000000000000011f0000000000000120000000000000012100000000000001
*22000000000000014d000000000000000000000000000000010000000000000002000000000000
*000300000000000000040000000000000005000000000000000600000000000000070000000000
*0000080000000000000009000000000000000a0000000000000029000000000000002a00000000
*000000680000000000000069000000000000006a000000000000006b000000000000006c000000
*000000006d000000000000006e000000000000006f000000000000007000000000000000710000
*000000000072000000000000007300000000000000740000000000000075000000000000007600
*000000000000770000000000000078000000000000007b000000000000007c000000000000007d
*000000000000007e000000000000007f0000000000000080000000000000008100000000000000
*e500000000000000e600000000000000e700000000000000e800000000000000e9000000000000
*00ea00000000000000eb00000000000000ec00000000000000ed00000000000000ee0000000000
*0000ef00000000000000f000000000000000f100000000000000f200000000000000f300000000
*000000f41000000000000000e500000000000000e600000000000000e700000000000000ea0000
*0000000000f100000000000000f300000000000000ed00000000000000ee00000000000000f400
*000000000000eb00000000000000ec00000000000000ef00000000000000e800000000000000e9
*00000000000000f200000000000000f0000000000000000000000000000000230000010c000000
*6500000078000000700000006500000072000000690000006d000000650000006e000000740000
*00610000006c0110000000650000006b0000006d00000065000000740000007400000040000000
*670000006d00000061000000690000006c0000002e000000630000006f0000006d020000000000
*0000f503010202000000410000002001040100000000000000007e000000000000000000000000
*0000001301020c0000002000000077000000680000006900000063000000680000002000000061
*000000640000006400000073000000200104010000000000000001330000000000000027000000
*000000003301020500000020000000610000006e00000064000000200104010000000000000001
*3200000000000000270000000000000033021900000020000000740000006f0000002000000061
*000000200000007000000072000000650000002d00000065000000780000006900000073000000
*74000000690000006e0000006700000020000000740000007900000070000000650000002e0000
*000a00000000000000f903010202000000410000002001040100000000000000007e0000000000
*000000000000000000001301020d000000200000007500000073000000690000006e0000006700
*00002000000061000000200000007400000079000000700000006501020100000027021d000000
*73000000200000006200000075000000690000006c000000740000002d000000690000006e0000
*0020000000420000006f000000750000006e000000640000006500000064000000200000006900
*00006e0000007300000074000000610000006e00000063000000650000002e0000000a3d000000
*00000001080000000000000109000000000000010a0000000000000105000000000000010b0000
*00000000010c000000000000010d000000000000010e000000000000010f000000000000011000
*000000000001110000000000000112000000000000011300000000000001140000000000000115
*000000000000011600000000000001170000000000000118000000000000011900000000000001
*1a000000000000011b000000000000011c000000000000011d000000000000011e000000000000
*011f00000000000001200000000000000121000000000000012200000000000000290000000000
*00002a00000000000000680000000000000069000000000000006a000000000000006b00000000
*0000006c000000000000006d000000000000006e000000000000006f0000000000000070000000
*000000007100000000000000720000000000000073000000000000007400000000000000750000
*00000000007600000000000000770000000000000078000000000000007b000000000000007c00
*0000000000007d000000000000007e000000000000007f00000000000000800000000000000081
*00000000000000f500000000000000f600000000000000f700000000000000f800000000000000
*f900000000000000fa00000000000000fb0700000000000000f900000000000000fa0000000000
*0000fb00000000000000f500000000000000f800000000000000f700000000000000f600000000
*000000000000000000000024000000000100000000000000fc0103010204000000540000006800
*0000650000002001040100000000000000007e0000000000000000000000000000001301020100
*00002001070102010000002801040100000000000000012f000000000000002700000000000000
*320102010000002c01040100000000000000014e00000000000000270000000000000033020100
*000029010206000000200000006f00000076000000650000007200000020010701020100000061
*01020f00000020000000650000007800000074000000650000006e000000640000006500000064
*00000020000000770000006900000074000000680000002004010000000000000000ff00000000
*0000000000000000000000240102020000002e0000000a01020800000020000000200000002000
*00005700000068000000650000006e000000200107020100000061010248000000200000006800
*000061000000730000002000000061000000200000004e000000750000006d0000002000000069
*0000006e0000007300000074000000610000006e00000063000000650000002000000077000000
*69000000740000006800000020000000610000006e000000200000006100000064000000640000
*006900000074000000690000006f0000006e000000200000007400000068000000610000007400
*000020000000720000006500000073000000700000006500000063000000740000007300000020
*0000006f000000720000006400000065000000720000002c000000200000007400000068000000
*650000006e00000020000000740000006800000069000000730000002000000069000000730000
*00200000000a0102530000002000000020000000200000007400000072000000610000006e0000
*0073000000660000006f000000720000006d000000650000006400000020000000690000006e00
*0000740000006f00000020000000610000002000000074000000720000006f0000007000000069
*00000063000000610000006c0000002000000073000000650000006d0000006900000072000000
*690000006e000000670000002e0000002000000049000000740000002000000069000000730000
*0020000000610000007300000073000000750000006d0000006500000064000000200000007400
*000068000000610000007400000020000000300000002000000069000000730000002000000074
*0000006800000065000000200000006c0000006500000061000000730000007400000020000000
*650000006c000000650000006d000000650000006e000000740000000a02090000002000000020
*000000200000006f0000006600000020000000610000002e0000000a03010c4100000068000000
*7400000074000000700000003a0000002f0000002f00000068000000610000006c0000002e0000
*0061000000720000006300000068000000690000007600000065000000730000002d0000006f00
*0000750000007600000065000000720000007400000065000000730000002e0000006600000072
*0000002f000000640000006f00000063000000730000002f00000030000000300000002f000000
*31000000310000002f00000033000000370000002f00000037000000390000002f000000500000
*0044000000460000002f00000054000000720000006f0000007000000069000000630000006100
*00006c0000002e00000070000000640000006602010000000a4500000000000001080000000000
*000109000000000000010a0000000000000105000000000000010b000000000000010c00000000
*0000010d000000000000010e000000000000010f00000000000001100000000000000111000000
*000000011200000000000001130000000000000114000000000000011500000000000001160000
*00000000011700000000000001180000000000000119000000000000011a000000000000011b00
*0000000000011c000000000000011d000000000000011e000000000000011f0000000000000120
*000000000000012100000000000001220000000000000000000000000000000100000000000000
*020000000000000003000000000000000400000000000000050000000000000006000000000000
*000700000000000000080000000000000009000000000000000a00000000000000290000000000
*00002a00000000000000680000000000000069000000000000006a000000000000006b00000000
*0000006c000000000000006d000000000000006e000000000000006f0000000000000070000000
*000000007100000000000000720000000000000073000000000000007400000000000000750000
*00000000007600000000000000770000000000000078000000000000007b000000000000007c00
*0000000000007d000000000000007e000000000000007f00000000000000800000000000000081
*00000000000000fc00000000000000fd00000000000000fe00000000000000ff04000000000000
*00ff00000000000000fc00000000000000fd00000000000000fe00000000000000000000000000
*00002500013f0000006e0000006f0000006e0000002d000000700000006f000000720000007400
*000061000000620000006c0000006500000020000000280000004d000000500000005400000043
*000000730000002c0000002000000073000000630000006f000000700000006500000064000000
*2000000074000000790000007000000065000000730000002c00000020000000650000006d0000
*00700000007400000079000000200000006400000065000000630000006c000000730000002c00
*00002000000074000000790000007000000065000000200000006f000000700000006500000072
*00000061000000740000006f000000720000007300000029010c00000065000000780000007000
*00006500000072000000690000006d000000650000006e00000074000000610000006c011f0000
*00450000006400000077000000610000007200000064000000200000004b0000006d0000006500
*00007400000074000000200000003c000000650000006b0000006d000000650000007400000074
*00000040000000670000006d00000061000000690000006c0000002e000000630000006f000000
*6d0000003e003b00000000000001080000000000000109000000000000010a0000000000000105
*000000000000010b000000000000010c000000000000010d000000000000010e00000000000001
*0f0000000000000110000000000000011100000000000001120000000000000113000000000000
*011400000000000001150000000000000116000000000000011700000000000001180000000000
*000119000000000000011a000000000000011b000000000000011c000000000000011d00000000
*0000011e000000000000011f000000000000012000000000000001210000000000000122000000
*0000000029000000000000002a00000000000000680000000000000069000000000000006a0000
*00000000006b000000000000006c000000000000006d000000000000006e000000000000006f00
*000000000000700000000000000071000000000000007200000000000000730000000000000074
*000000000000007500000000000000760000000000000077000000000000007800000000000000
*7b000000000000007c000000000000007d000000000000007e000000000000007f000000000000
*008000000000000000810000000000000100000000000000010100000000000001020000000000
*000103000000000000010405000000000000010200000000000001030000000000000100000000
*00000001010000000000000104000000000000014f000000000000000000000000000000010300
*000000000000380000000000000000000000000000000101000000000000003900000000000000
*00000000000000000100000000000000003a000000000000000000000000000000010300000000
*0000003b0000000000000000000000000000000100000000000000003c00000000000000000000
*00000000000100000000000000003d000000000000000000000000000000010000000000000000
*3e0000000000000000000000000000000100000000000000003f00000000000000000000000000
*000001000000000000000040000000000000000000000000000000010000000000000000410000
*000000000000000000000000000100000000000000004200000000000000000000000000000002
*030000000000000043000000000000000000000000000000020000000000000000440000000000
*000000000000000000000200000000000000004500000000000000000000000000000003030000
*000000000046000000000000000000000000000000030000000000000000470000000000000000
*000000000000000403000000000000004800000000000000000000000000000004010000000000
*000048000000000000000000000000000000040000000000000000490000000000000000000000
*000000000503000000000000004a0000000000000000000000000000000501000000000000004a
*0000000000000000000000000000000500000000000000004b0000000000000000000000000000
*000503000000000000004c0000000000000000000000000000000500000000000000004d000000
*0000000000000000000000000500000000000000004e0000000000000000000000000000000503
*000000000000004f0000000000000000000000000000000501000000000000004f000000000000
*000000000000000000050000000000000000500000000000000000000000000000000503000000
*000000005100000000000000000000000000000005000000000000000052000000000000000000
*000000000000050000000000000000530000000000000000000000000000000600000000000000
*005400000000000000000000000000000006000000000000000055000000000000000000000000
*000000060000000000000000560000000000000000000000000000000600000000000000005700
*000000000000000000000000000007030000000000000058000000000000000000000000000000
*070300000000000000590000000000000000000000000000000701000000000000005900000000
*00000000000000000000000700000000000000005a000000000000000000000000000000070000
*0000000000005b0000000000000000000000000000000700000000000000005c00000000000000
*00000000000000000800000000000000005d000000000000000000000000000000080000000000
*0000005e0000000000000000000000000000000903000000000000005f00000000000000000000
*00000000000901000000000000005f000000000000000000000000000000090000000000000000
*600000000000000000000000000000000903000000000000006100000000000000000000000000
*000009010000000000000061000000000000000000000000000000090000000000000000620000
*000000000000000000000000000903000000000000006300000000000000000000000000000009
*010000000000000063000000000000000000000000000000090000000000000000640000000000
*000000000000000000000903000000000000006500000000000000000000000000000009030000
*000000000066000000000000000000000000000000090000000000000000670000000000000000
*000000000000000900000000000000006800000000000000000000000000000009000000000000
*0000690000000000000000000000000000000900000000000000006a0000000000000000000000
*000000000900000000000000006b0000000000000000000000000000000900000000000000006c
*0000000000000000000000000000000a03000000000000006d0000000000000000000000000000
*000a01000000000000006d0000000000000000000000000000000a00000000000000006e000000
*0000000000000000000000000a03000000000000006f0000000000000000000000000000000a01
*000000000000006f0000000000000000000000000000000a000000000000000070000000000000
*0000000000000000000a0000000000000000710000000000000000000000000000000a00000000
*00000000720000000000000000000000000000000a000000000000000073000000000000000000
*0000000000000a0000000000000000740000000000000000000000000000000b03000000000000
*00750000000000000000000000000000000b010000000000000076000000000000000000000000
*0000000b0100000000000000770000000000000000000000000000000b01000000000000007800
*00000000000000000000000000000b010000000000000079000000000000000000000000000000
*0b03000000000000007a0000000000000000000000000000000b03000000000000007b00000000
*00000000000000000000000b00000000000000007c0000000000000000000000000000000b0000
*0000000000007d0000000000000000000000000000000b00000000000000007e00000000000000
*00000000000000000b00000000000000007f0000000000000000000000000000000b0000000000
*000000800000000000000000000000000000000c03000000000000008100000000000000000000
*00000000000c0000000000000000820000000000000000000000000000000c0300000000000000
*830000000000000000000000000000000c00000000000000008400000000000000000000000000
*00000c0300000000000000780000000000000000000000000000000c0300000000000000850000
*000000000000000000000000000c0000000000000000860000000000000000000000000000000c
*0000000000000000870000000000000000000000000000000c0000000000000000880000000000
*000000000000000000000c0000000000000000890000000000000000000000000000000d030000
*00000000008a0000000000000000000000000000000d01000000000000008a0000000000000000
*000000000000000d00000000000000008b0000000000000000000000000000000e030000000000
*00008c0000000000000000000000000000000e0000000000000000700000000000000000000000
*000000000e0000000000000000730000000000000000000000000000000e00000000000000008d
*0000000000000000000000000000000e0000000000000000740000000000000000000000000000
*000e00000000000000008e0000000000000000000000000000000f03000000000000008f000000
*0000000000000000000000000f01000000000000008f0000000000000000000000000000000f00
*000000000000009000000000000000000000000000000010030000000000000091000000000000
*000000000000000000100100000000000000910000000000000000000000000000001000000000
*000000009200000000000000000000000000000010030000000000000093000000000000000000
*000000000000100100000000000000930000000000000000000000000000001000000000000000
*009400000000000000000000000000000010030000000000000095000000000000000000000000
*000000100000000000000000960000000000000000000000000000001000000000000000009700
*000000000000000000000000000011030000000000000098000000000000000000000000000000
*110000000000000000990000000000000000000000000000001100000000000000009a00000000
*00000000000000000000001100000000000000009b000000000000000000000000000000110300
*0000000000009c0000000000000000000000000000001100000000000000009d00000000000000
*00000000000000001100000000000000009e000000000000000000000000000000110000000000
*0000009f0000000000000000000000000000001200000000000000005600000000000000000000
*000000000012000000000000000057000000000000000000000000000000130300000000000000
*a0000000000000000000000000000000130300000000000000a100000000000000000000000000
*0000130300000000000000a2000000000000000000000000000000130300000000000000a30000
*00000000000000000000000000130300000000000000a400000000000000000000000000000013
*0300000000000000a5000000000000000000000000000000130300000000000000a60000000000
*00000000000000000000140300000000000000a700000000000000000000000000000014010000
*0000000000a7000000000000000000000000000000140000000000000000a80000000000000000
*00000000000000140300000000000000a900000000000000000000000000000014010000000000
*0000a9000000000000000000000000000000140000000000000000aa0000000000000000000000
*00000000140300000000000000ab000000000000000000000000000000140100000000000000ab
*000000000000000000000000000000140000000000000000ac0000000000000000000000000000
*00140300000000000000ad000000000000000000000000000000140100000000000000ad000000
*000000000000000000000000140000000000000000ae0000000000000000000000000000001400
*00000000000000af000000000000000000000000000000140000000000000000b0000000000000
*000000000000000000150300000000000000b10000000000000000000000000000001501000000
*00000000b1000000000000000000000000000000150000000000000000b2000000000000000000
*000000000000160300000000000000b30000000000000000000000000000001603000000000000
*00b4000000000000000000000000000000160000000000000000b5000000000000000000000000
*000000160300000000000000b6000000000000000000000000000000160300000000000000b700
*0000000000000000000000000000160300000000000000b8000000000000000000000000000000
*160000000000000000b9000000000000000000000000000000160300000000000000ba00000000
*0000000000000000000000160000000000000000bb000000000000000000000000000000160300
*000000000000bc000000000000000000000000000000170300000000000000bd00000000000000
*0000000000000000170100000000000000bd000000000000000000000000000000170000000000
*000000be000000000000000000000000000000170300000000000000bf00000000000000000000
*0000000000170100000000000000bf000000000000000000000000000000170000000000000000
*c0000000000000000000000000000000170300000000000000c100000000000000000000000000
*0000170100000000000000c1000000000000000000000000000000170000000000000000c20000
*00000000000000000000000000170000000000000000c300000000000000000000000000000018
*0300000000000000c4000000000000000000000000000000180100000000000000c40000000000
*00000000000000000000180000000000000000c500000000000000000000000000000018030000
*0000000000c6000000000000000000000000000000180100000000000000c60000000000000000
*00000000000000180000000000000000c700000000000000000000000000000018030000000000
*0000c8000000000000000000000000000000180100000000000000c80000000000000000000000
*00000000180000000000000000c9000000000000000000000000000000180000000000000000ca
*000000000000000000000000000000190000000000000000cb0000000000000000000000000000
*00190000000000000000cc000000000000000000000000000000190000000000000000cd000000
*000000000000000000000000190000000000000000ce0000000000000000000000000000001900
*00000000000000cf000000000000000000000000000000190000000000000000d0000000000000
*000000000000000000190000000000000000d10000000000000000000000000000001900000000
*00000000d2000000000000000000000000000000190000000000000000d3000000000000000000
*000000000000190000000000000000d40000000000000000000000000000001900000000000000
*00d5000000000000000000000000000000190000000000000000d6000000000000000000000000
*000000190000000000000000d7000000000000000000000000000000190000000000000000d800
*0000000000000000000000000000190000000000000000d9000000000000000000000000000000
*190000000000000000da000000000000000000000000000000190000000000000000db00000000
*0000000000000000000000190000000000000000dc000000000000000000000000000000190000
*000000000000dd000000000000000000000000000000190000000000000000de00000000000000
*0000000000000000190000000000000000df0000000000000000000000000000001a0300000000
*000000e00000000000000000000000000000001a0100000000000000e100000000000000000000
*00000000001b0300000000000000e20000000000000000000000000000001b0000000000000000
*e30000000000000000000000000000001b0000000000000000e400000000000000000000000000
*00001c0300000000000000e50000000000000000000000000000001c0000000000000000e60000
*000000000000000000000000001d0300000000000000e70000000000000000000000000000001d
*0100000000000000e70000000000000000000000000000001d0000000000000000e80000000000
*000000000000000000001d0000000000000000e90000000000000000000000000000001d000000
*0000000000ea0000000000000000000000000000001d0000000000000000eb0000000000000000
*000000000000001d0000000000000000520000000000000000000000000000001d000000000000
*0000ec0000000000000000000000000000001e0300000000000000ed0000000000000000000000
*000000001e0000000000000000ee0000000000000000000000000000001e0000000000000000ef
*0000000000000000000000000000001f0000000000000000f00000000000000000000000000000
*001f0000000000000000f10000000000000000000000000000001f0000000000000000f2000000
*000000000000000000000000200000000000000000f30000000000000000000000000000002000
*00000000000000f4000000000000000000000000000000200000000000000000f5000000000000
*000000000000000000200000000000000000f60000000000000000000000000000002000000000
*00000000f7000000000000000000000000000000200000000000000000f8000000000000000000
*000000000000200000000000000000f90000000000000000000000000000002103000000000000
*00fa000000000000000000000000000000210100000000000000fa000000000000000000000000
*000000210000000000000000fb000000000000000000000000000000220300000000000000fc00
*000000000000000000000000000022000000000000000052000000000000000000000000000000
*220000000000000000eb000000000000000000000000000000220000000000000000ec00000000
*0000000000000000000000220000000000000000fd000000000000000000000000000000220000
*000000000000fe000000000000000000000000000000220000000000000000ff00000000000000
*000000000000000022000000000000000100000000000000000000000000000000220000000000
*000001010000000000000000000000000000002200000000000000010200000000000000000000
*000000000022000000000000000103000000000000000000000000000000220000000000000001
*040000000000000000000000000000002200000000000000005300000000000000000000000000
*000022000000000000000105000000000000000000000000000000220000000000000001060000
*000000000000000000000000002200000000000000010700000000000000000000000000000023
*030000000000000108000000000000000000000000000000230100000000000001090000000000
*000000000000000000002301000000000000010800000000000000000000000000000023010000
*00000000010a0000000000000000000000000000002303000000000000010b0000000000000000
*000000000000002301000000000000010b00000000000000000000000000000023000000000000
*00010c0000000000000000000000000000002403000000000000010d0000000000000000000000
*000000002401000000000000010d0000000000000000000000000000002400000000000000010e
*000000000000000000000000000000240000000000000000b00000000000000000000000000000
*002503000000000000010f00000000000000000000000000000025000000000000000110000000
*000000000000000000000000250300000000000001110000000000000000000000000000002500
*000000000000011200000000000000000000000000000025000000000000000113000000000000
*002700000000000000280300000000000001140000000000000027000000000000002903000000
*00000001150000000000000027000000000000002a030000000000000116000000000000002700
*000000000000280000000000000001170000000000000027000000000000002800000000000000
*011800000000000000270000000000000028000000000000000119000000000000002700000000
*0000002800000000000000011a0000000000000027000000000000002801000000000000011b00
*00000000000027000000000000002803000000000000011b000000000000002700000000000000
*2800000000000000011c0000000000000027000000000000002801000000000000011d00000000
*00000027000000000000002803000000000000011d000000000000002700000000000000280000
*0000000000011e0000000000000027000000000000002801000000000000011f00000000000000
*27000000000000002803000000000000011f000000000000002700000000000000280000000000
*000001200000000000000027000000000000002801000000000000012100000000000000270000
*000000000028030000000000000121000000000000002700000000000000280000000000000001
*220000000000000027000000000000002801000000000000012300000000000000270000000000
*000028030000000000000123000000000000002700000000000000280000000000000001240000
*000000000027000000000000002801000000000000012500000000000000270000000000000028
*030000000000000125000000000000002700000000000000280000000000000001260000000000
*000027000000000000002801000000000000012700000000000000270000000000000028030000
*000000000127000000000000002700000000000000280000000000000001280000000000000027
*000000000000002801000000000000012900000000000000270000000000000028030000000000
*000129000000000000012a000000000000012b03000000000000012c000000000000012a000000
*000000012b00000000000000012d0000000000000027000000000000002b03000000000000012e
*0000000000000027000000000000002b00000000000000012f0000000000000027000000000000
*002b0000000000000001300000000000000027000000000000002b000000000000000131000000
*0000000027000000000000002b0000000000000001320000000000000027000000000000013303
*0000000000000134000000000000002d000000000000002e030000000000000135000000000000
*0027000000000000002f0000000000000001360000000000000000000000000000000e03000000
*000000013700000000000000300000000000000031030000000000000138000000000000002700
*0000000000013900000000000000013a0000000000000027000000000000002901000000000000
*013b0000000000000027000000000000013900000000000000013c000000000000002700000000
*0000013d00000000000000013e0000000000000027000000000000013d00000000000000013f00
*000000000000270000000000000034030000000000000140000000000000002700000000000000
*340300000000000001410000000000000027000000000000014203000000000000014300000000
*000000270000000000000035030000000000000144000000000000002700000000000000350000
*000000000000ce0000000000000027000000000000014200000000000000014500000000000000
*270000000000000146000000000000000147000000000000002d00000000000000370300000000
*000001480000000000000000000000000000002200000000000000014900000000000000000000
*00000000002200000000000000014a000000000000000000000000000000220000000000000001
*4b0000000000000000000000000000002200000000000000014c00000000000000000000000000
*00002200000000000000014d0000000000000000000000000000002200000000000000014e0000
*000000000000000000000000002200000000000000014f00000000000000000000000000000022
*000000000000000150000000000000000000000000000000220000000000000001510000000000
*00000000000000000000220000000000000000d400000000000000000000000000000022000000
*000000000152000000000000000000000000000000220000000000000001530000000000000000
*000000000000002200000000000000015400000000000000000000000000000022000000000000
*000155000000000000000000000000000000220000000000000001560000000000000000000000
*000000002200000000000000015700000000000000000000000000000022000000000000000158
*0000000000000027000000000000015900000000000000015a0000000000000027000000000000
*015b0000000000000000f0000000000000015c000000000000000e6d6f6e6f6964732d302e312e
*33350000000000000013446174612e4d6f6e6f69642e5265647563657200000000000000184461
*74612e4d6f6e6f69642e526564756365722e436861720000000000000020446174612e4d6f6e6f
*69642e4c65786963616c2e555446382e4465636f6465720000000000000018446174612e4d6f6e
*6f69642e526564756365722e576974680000000000000011446174612e4d6f6e6f69642e556e69
*6f6e0000000000000017446174612e4d6f6e6f69642e436f6d62696e61746f7273000000000000
*0017446174612e4d6f6e6f69642e43617465676f726963616c0000000000000014446174612e4d
*6f6e6f69642e4164646974697665000000000000000e446174612e47656e657261746f72000000
*000000001e446174612e47656e657261746f722e436f6d70726573736976652e524c4500000000
*00000022446174612e4d6f6e6f69642e4c65786963616c2e536f75726365506f736974696f6e00
*00000000000019446174612e4d6f6e6f69642e4c65786963616c2e576f72647300000000000000
*10446174612e4d6f6e6f69642e53656c66000000000000001f446174612e47656e657261746f72
*2e436f6d70726573736976652e4c5a37380000000000000016446174612e4d6f6e6f69642e4672
*6f6d537472696e67000000000000001a446174612e4d6f6e6f69642e4d756c7469706c69636174
*697665000000000000000a446174612e47726f75700000000000000016446174612e47726f7570
*2e436f6d62696e61746f72730000000000000009446174612e52696e67000000000000000f4461
*74612e4d6f6e6f69642e4f72640000000000000011446174612e52696e672e46726f6d4e756d00
*00000000000010446174612e52696e672e4d6f64756c650000000000000017446174612e4d6f6e
*6f69642e4170706c696361746976650000000000000011446174612e4d6f6e6f69642e4d6f6e61
*64000000000000001a446174612e47656e657261746f722e436f6d62696e61746f727300000000
*00000013446174612e47656e657261746f722e467265650000000000000029446174612e52696e
*672e4d6f64756c652e4175746f6d61746963446966666572656e74696174696f6e000000000000
*0015446174612e52696e672e53656d692e4b6c65656e650000000000000018446174612e52696e
*672e53656d692e4e6561722e547269650000000000000016446174612e52696e672e53656d692e
*4e61747572616c0000000000000011446174612e4d6f6e6f69642e537567617200000000000000
*10446174612e47726f75702e53756761720000000000000011446174612e52696e672e426f6f6c
*65616e0000000000000015446174612e52696e672e53656d692e42697453657400000000000000
*12446174612e52696e672e53656d692e4f72640000000000000017446174612e52696e672e5365
*6d692e54726f706963616c000000000000001b446174612e52696e672e4d6f64756c6172417269
*74686d657469630000000000000015446174612e4d6f6e6f69642e496e7374616e636573000000
*000000000462617365000000000000000b446174612e4d6f6e6f6964000000000000000a446174
*612e4d61796265000000000000000d446174612e466f6c6461626c650000000000000010436f6e
*74726f6c2e43617465676f72790000000000000009446174612e576f7264000000000000000867
*68632d7072696d00000000000000094748432e5479706573000000000000000b4748432e556e69
*636f64650000000000000012636f6e7461696e6572732d302e322e302e30000000000000000844
*6174612e4d61700000000000000008446174612e4f726400000000000000075072656c75646500
*00000000000013436f6e74726f6c2e4170706c69636174697665000000000000000d436f6e7472
*6f6c2e4d6f6e61640000000000000009446174612e4c69737400000000000000084748432e426f
*6f6c00000000000000095265647563656442790000000000000009526564756374696f6e000000
*000000000c676574526564756374696f6e00000000000000075265647563657200000000000000
*04756e69740000000000000004736e6f630000000000000004636f6e73000000000000000d666f
*6c644d6170526564756365000000000000000a666f6c64526564756365000000000000000a7265
*7475726e556e6974000000000000000870757265556e6974000000000000000b43686172526564
*75636572000000000000000866726f6d43686172000000000000000b696e76616c696443686172
*000000000000000455544638000000000000000772756e55544638000000000000000b57697468
*52656475636572000000000000000e776974686f7574526564756365720000000000000009556e
*696f6e57697468000000000000000c676574556e696f6e57697468000000000000000c48617355
*6e696f6e576974680000000000000009756e696f6e576974680000000000000009656d70747957
*6974680000000000000005556e696f6e0000000000000008676574556e696f6e00000000000000
*08486173556e696f6e0000000000000005656d7074790000000000000005756e696f6e00000000
*000000056379636c65000000000000000672657065617400000000000000097265706c69636174
*65000000000000002170726f705f7265706c69636174655f72696768745f646973747269627574
*6976650000000000000007434d6f6e6f6964000000000000000547456e646f0000000000000008
*67657447456e646f000000000000001063617465676f7279546f4d6f6e6f696400000000000000
*106d6f6e6f6964546f43617465676f72790000000000000004706c757300000000000000047a65
*726f00000000000000054368617238000000000000000867657443686172380000000000000006
*56616c756573000000000000000967657456616c75657300000000000000044b65797300000000
*000000076765744b657973000000000000000947656e657261746f720000000000000004456c65
*6d00000000000000096d617052656475636500000000000000056d6170546f0000000000000007
*6d617046726f6d0000000000000006726564756365000000000000000d6d617052656475636557
*697468000000000000000a726564756365576974680000000000000003524c4500000000000000
*06676574524c45000000000000000352756e00000000000000066465636f646500000000000000
*0a656e636f64654c697374000000000000001670726f705f6465636f64655f656e636f64654c69
*73740000000000000006656e636f6465000000000000001270726f705f6465636f64655f656e63
*6f6465000000000000000e536f75726365506f736974696f6e0000000000000003546162000000
*0000000007436f6c756d6e7300000000000000054c696e65730000000000000003506f73000000
*000000000c536f75726365436f6c756d6e000000000000000a536f757263654c696e6500000000
*000000076e657874546162000000000000000b73746172744f6646696c65000000000000000c73
*6f75726365436f6c756d6e000000000000000a736f757263654c696e6500000000000000127368
*6f77536f75726365506f736974696f6e0000000000000007556e6c696e6564000000000000000a
*72756e556e6c696e65640000000000000008556e737061636564000000000000000b72756e556e
*7370616365640000000000000005576f726473000000000000000872756e576f72647300000000
*0000000872756e4c696e65730000000000000009776f72647346726f6d00000000000000096c69
*6e657346726f6d000000000000000453656c66000000000000000767657453656c660000000000
*0000044c5a37380000000000000008656e636f64654571000000000000001470726f705f646563
*6f64655f656e636f64654571000000000000000a46726f6d537472696e67000000000000000d67
*657446726f6d537472696e67000000000000000345787000000000000000066765744578700000
*0000000000034c6f6700000000000000066765744c6f67000000000000000e4d756c7469706c69
*63617469766500000000000000036f6e65000000000000000574696d657300000000000000134d
*756c7469706c6963617469766547726f757000000000000000046f766572000000000000000575
*6e6465720000000000000006677265636970000000000000000547726f75700000000000000007
*676e656761746500000000000000056d696e757300000000000000096773756274726163740000
*0000000000054669656c64000000000000000c4469766973696f6e52696e670000000000000004
*52696e67000000000000000853656d6952696e670000000000000011526967687453656d694e65
*617252696e6700000000000000104c65667453656d694e65617252696e67000000000000000752
*696e676f6964000000000000000b4d696e5072696f72697479000000000000000e6765744d696e
*5072696f72697479000000000000000b4d61785072696f72697479000000000000000e6765744d
*61785072696f7269747900000000000000034d696e00000000000000066765744d696e00000000
*000000034d617800000000000000066765744d617800000000000000096d696e66696e69747900
*00000000000008696e66696e697479000000000000000746726f6d4e756d000000000000000a67
*657446726f6d4e756d0000000000000007416c676562726100000000000000064e6f726d656400
*000000000000046d616273000000000000000b566563746f725370616365000000000000000842
*696d6f64756c65000000000000000b52696768744d6f64756c6500000000000000022e2a000000
*000000000a4c6566744d6f64756c6500000000000000022a2e00000000000000064d6f64756c65
*000000000000000341707000000000000000066765744170700000000000000003416c74000000
*0000000006676574416c74000000000000000954726176657273616c000000000000000c676574
*54726176657273616c000000000000000d736e6f6354726176657273616c00000000000000034d
*6f6e00000000000000066765744d6f6e00000000000000084d6f6e616453756d00000000000000
*0b6765744d6f6e616453756d0000000000000006416374696f6e00000000000000096765744163
*74696f6e000000000000000a736e6f63416374696f6e000000000000000974726176657273655f
*0000000000000004666f725f00000000000000046173756d00000000000000056d61704d5f0000
*000000000005666f724d5f00000000000000046d73756d0000000000000007666f6c644d617000
*00000000000009636f6e6361744d61700000000000000004666f6c640000000000000006746f4c
*6973740000000000000003616e6400000000000000026f720000000000000003616e7900000000
*00000003616c6c000000000000000373756d000000000000000770726f64756374000000000000
*0004656c656d00000000000000076e6f74456c656d000000000000000666696c74657200000000
*0000000a66696c74657257697468000000000000000466696e6400000000000000044672656500
*0000000000000c416e7947656e657261746f7200000000000000014400000000000000046c6966
*74000000000000000164000000000000000d4b6c65656e65416c67656272610000000000000004
*737461720000000000000004547269650000000000000005746f74616c00000000000000056c61
*62656c00000000000000086368696c6472656e000000000000000973696e676c65746f6e000000
*00000000046e756c6c00000000000000074e61747572616c0000000000000009746f4e61747572
*616c000000000000000b66726f6d4e61747572616c00000000000000012b00000000000000012a
*00000000000000015e00000000000000012d00000000000000066e656761746500000000000000
*08737562747261637400000000000000012f00000000000000032e5c2e00000000000000057265
*63697000000000000000025e5e0000000000000007426f6f6c65616e000000000000000a676574
*426f6f6c65616e0000000000000006426974536574000000000000000473697a65000000000000
*000466756c6c000000000000000866726f6d4c697374000000000000001366726f6d4469737469
*6e63744173634c6973740000000000000006696e73657274000000000000000664656c65746500
*000000000000066d656d6265720000000000000009746f496e7465676572000000000000000e69
*73436f6d706c656d656e746564000000000000000c696e74657273656374696f6e000000000000
*00025c5c00000000000000085072696f7269747900000000000000084d6178426f756e64000000
*00000000084d696e426f756e6400000000000000054f7264657200000000000000086765744f72
*646572000000000000000854726f706963616c000000000000000b67657454726f706963616c00
*000000000000074d6f64756c617200000000000000076d6f64756c757300000000000000034d6f
*6400000000000000066765744d6f64000000000000001377697468496e74656772616c4d6f6475
*6c757300000000000000064d6f6e6f696400000000000000054d61796265000000000000000846
*6f6c6461626c6500000000000000076d617070656e6400000000000000076d636f6e6361740000
*0000000000066d656d70747900000000000000076765744475616c00000000000000044475616c
*0000000000000007617070456e646f0000000000000004456e646f000000000000000667657441
*6c6c0000000000000003416c6c0000000000000006676574416e790000000000000003416e7900
*0000000000000667657453756d000000000000000353756d000000000000000a67657450726f64
*756374000000000000000750726f64756374000000000000000867657446697273740000000000
*000005466972737400000000000000076765744c61737400000000000000044c61737400000000
*0000000e66696e676572747265652d302e30000000000000000f446174612e46696e6765725472
*6565000000000000000a46696e6765725472656500000000000000076d65617375726500000000
*0000000843617465676f727900000000000000033e3e3e00000000000000033c3c3c0000000000
*0000012e0000000000000002696400000000000000084748432e576f7264000000000000000557
*6f7264380000000000000004436861720000000000000007697353706163650000000000000005
*546f6b656e00000000000000034d6170000000000000000b4748432e436c617373657300000000
*000000036d696e00000000000000074e6f7468696e6700000000000000036d6178000000000000
*00084748432e456e756d00000000000000086d6178426f756e6400000000000000086d696e426f
*756e64000000000000000b4170706c69636174697665000000000000000b416c7465726e617469
*766500000000000000084748432e4261736500000000000000054d6f6e61640000000000000009
*4d6f6e6164506c75730000000000000004666c697000000000000000084748432e4c6973740000
*000000000006636f6e6361740000000000000004426f6f6c000000000000000d5f636f756e7441
*744c65617374000000000000000c5f636f756e7441744d6f737400000000000000065f636f756e
*7400000000000000086578706f6e656e7400000000000000045f68776d00000000000000086d61
*6e746973736100000000000000095f756e69766572736500000000000000095f66726f6d456e75
*6d00000000000000026273000000000000000c7265636f6d706c656d656e740000000000000010
*70736575646f436f6d706c656d656e74000000000000000464696666000000000000000a646966
*666572656e6365000000000000000b6173417267547970654f6600000000000000077265636f75
*6e74000000000000000368776d0000000000000009446174612e42697473000000000000000a63
*6f6d706c656d656e7400000000000000074748432e4e756d
hunk ./doc/html/monoids/src/Data-Generator.html 9
-<pre><a name="line-1"></a><span class='hs-comment'>{-# LANGUAGE UndecidableInstances, TypeOperators, FlexibleContexts, MultiParamTypeClasses, FlexibleInstances, TypeFamilies #-}</span>
+<pre><a name="line-1"></a><span class='hs-comment'>{-# LANGUAGE UndecidableInstances, TypeOperators, FlexibleContexts, MultiParamTypeClasses, FlexibleInstances, TypeFamilies, CPP #-}</span>
hunk ./doc/html/monoids/src/Data-Generator.html 47
-<a name="line-39"></a><span class='hs-keyword'>import</span> <span class='hs-conid'>Data</span><span class='hs-varop'>.</span><span class='hs-conid'>Array</span> 
-<a name="line-40"></a><span class='hs-keyword'>import</span> <span class='hs-conid'>Data</span><span class='hs-varop'>.</span><span class='hs-conid'>Word</span> <span class='hs-layout'>(</span><span class='hs-conid'>Word8</span><span class='hs-layout'>)</span>
-<a name="line-41"></a><span class='hs-keyword'>import</span> <span class='hs-conid'>Data</span><span class='hs-varop'>.</span><span class='hs-conid'>Text</span> <span class='hs-layout'>(</span><span class='hs-conid'>Text</span><span class='hs-layout'>)</span>
-<a name="line-42"></a><span class='hs-keyword'>import</span> <span class='hs-conid'>Data</span><span class='hs-varop'>.</span><span class='hs-conid'>Foldable</span> <span class='hs-layout'>(</span><span class='hs-varid'>fold</span><span class='hs-layout'>,</span><span class='hs-varid'>foldMap</span><span class='hs-layout'>)</span>
-<a name="line-43"></a><span class='hs-keyword'>import</span> <span class='hs-keyword'>qualified</span> <span class='hs-conid'>Data</span><span class='hs-varop'>.</span><span class='hs-conid'>Text</span> <span class='hs-keyword'>as</span> <span class='hs-conid'>Text</span>
-<a name="line-44"></a><span class='hs-keyword'>import</span> <span class='hs-keyword'>qualified</span> <span class='hs-conid'>Data</span><span class='hs-varop'>.</span><span class='hs-conid'>ByteString</span> <span class='hs-keyword'>as</span> <span class='hs-conid'>Strict</span> <span class='hs-layout'>(</span><span class='hs-conid'>ByteString</span><span class='hs-layout'>,</span> <span class='hs-varid'>foldl'</span><span class='hs-layout'>)</span>
-<a name="line-45"></a><span class='hs-keyword'>import</span> <span class='hs-keyword'>qualified</span> <span class='hs-conid'>Data</span><span class='hs-varop'>.</span><span class='hs-conid'>ByteString</span><span class='hs-varop'>.</span><span class='hs-conid'>Char8</span> <span class='hs-keyword'>as</span> <span class='hs-conid'>Strict8</span> <span class='hs-layout'>(</span><span class='hs-varid'>foldl'</span><span class='hs-layout'>)</span>
-<a name="line-46"></a><span class='hs-keyword'>import</span> <span class='hs-keyword'>qualified</span> <span class='hs-conid'>Data</span><span class='hs-varop'>.</span><span class='hs-conid'>ByteString</span><span class='hs-varop'>.</span><span class='hs-conid'>Lazy</span> <span class='hs-keyword'>as</span> <span class='hs-conid'>Lazy</span> <span class='hs-layout'>(</span><span class='hs-conid'>ByteString</span><span class='hs-layout'>,</span> <span class='hs-varid'>toChunks</span><span class='hs-layout'>)</span>
-<a name="line-47"></a><span class='hs-keyword'>import</span> <span class='hs-keyword'>qualified</span> <span class='hs-conid'>Data</span><span class='hs-varop'>.</span><span class='hs-conid'>ByteString</span><span class='hs-varop'>.</span><span class='hs-conid'>Lazy</span><span class='hs-varop'>.</span><span class='hs-conid'>Char8</span> <span class='hs-keyword'>as</span> <span class='hs-conid'>Lazy8</span> <span class='hs-layout'>(</span><span class='hs-varid'>toChunks</span><span class='hs-layout'>)</span>
-<a name="line-48"></a><span class='hs-keyword'>import</span> <span class='hs-keyword'>qualified</span> <span class='hs-conid'>Data</span><span class='hs-varop'>.</span><span class='hs-conid'>Sequence</span> <span class='hs-keyword'>as</span> <span class='hs-conid'>Seq</span>
-<a name="line-49"></a><span class='hs-keyword'>import</span> <span class='hs-conid'>Data</span><span class='hs-varop'>.</span><span class='hs-conid'>FingerTree</span> <span class='hs-layout'>(</span><span class='hs-conid'>Measured</span><span class='hs-layout'>,</span> <span class='hs-conid'>FingerTree</span><span class='hs-layout'>)</span>
-<a name="line-50"></a><span class='hs-keyword'>import</span> <span class='hs-conid'>Data</span><span class='hs-varop'>.</span><span class='hs-conid'>Sequence</span> <span class='hs-layout'>(</span><span class='hs-conid'>Seq</span><span class='hs-layout'>)</span>
-<a name="line-51"></a><span class='hs-keyword'>import</span> <span class='hs-keyword'>qualified</span> <span class='hs-conid'>Data</span><span class='hs-varop'>.</span><span class='hs-conid'>Set</span> <span class='hs-keyword'>as</span> <span class='hs-conid'>Set</span>
-<a name="line-52"></a><span class='hs-keyword'>import</span> <span class='hs-conid'>Data</span><span class='hs-varop'>.</span><span class='hs-conid'>Set</span> <span class='hs-layout'>(</span><span class='hs-conid'>Set</span><span class='hs-layout'>)</span>
-<a name="line-53"></a><span class='hs-keyword'>import</span> <span class='hs-keyword'>qualified</span> <span class='hs-conid'>Data</span><span class='hs-varop'>.</span><span class='hs-conid'>IntSet</span> <span class='hs-keyword'>as</span> <span class='hs-conid'>IntSet</span>
-<a name="line-54"></a><span class='hs-keyword'>import</span> <span class='hs-conid'>Data</span><span class='hs-varop'>.</span><span class='hs-conid'>IntSet</span> <span class='hs-layout'>(</span><span class='hs-conid'>IntSet</span><span class='hs-layout'>)</span>
-<a name="line-55"></a><span class='hs-keyword'>import</span> <span class='hs-keyword'>qualified</span> <span class='hs-conid'>Data</span><span class='hs-varop'>.</span><span class='hs-conid'>IntMap</span> <span class='hs-keyword'>as</span> <span class='hs-conid'>IntMap</span>
-<a name="line-56"></a><span class='hs-keyword'>import</span> <span class='hs-conid'>Data</span><span class='hs-varop'>.</span><span class='hs-conid'>IntMap</span> <span class='hs-layout'>(</span><span class='hs-conid'>IntMap</span><span class='hs-layout'>)</span>
-<a name="line-57"></a><span class='hs-keyword'>import</span> <span class='hs-keyword'>qualified</span> <span class='hs-conid'>Data</span><span class='hs-varop'>.</span><span class='hs-conid'>Map</span> <span class='hs-keyword'>as</span> <span class='hs-conid'>Map</span>
-<a name="line-58"></a><span class='hs-keyword'>import</span> <span class='hs-conid'>Data</span><span class='hs-varop'>.</span><span class='hs-conid'>Map</span> <span class='hs-layout'>(</span><span class='hs-conid'>Map</span><span class='hs-layout'>)</span>
-<a name="line-59"></a>
-<a name="line-60"></a><span class='hs-keyword'>import</span> <span class='hs-conid'>Control</span><span class='hs-varop'>.</span><span class='hs-conid'>Parallel</span><span class='hs-varop'>.</span><span class='hs-conid'>Strategies</span>
-<a name="line-61"></a><span class='hs-keyword'>import</span> <span class='hs-conid'>Data</span><span class='hs-varop'>.</span><span class='hs-conid'>Monoid</span><span class='hs-varop'>.</span><span class='hs-conid'>Reducer</span>
-<a name="line-62"></a>
-<a name="line-63"></a><span class='hs-comment'>-- | minimal definition 'mapReduce' or 'mapTo'</span>
-<a name="line-64"></a><span class='hs-keyword'>class</span> <span class='hs-conid'>Generator</span> <span class='hs-varid'>c</span> <span class='hs-keyword'>where</span>
-<a name="line-65"></a>    <span class='hs-keyword'>type</span> <span class='hs-conid'>Elem</span> <span class='hs-varid'>c</span> <span class='hs-keyglyph'>::</span> <span class='hs-varop'>*</span> 
-<a name="line-66"></a>    <span class='hs-varid'>mapReduce</span> <span class='hs-keyglyph'>::</span> <span class='hs-layout'>(</span><span class='hs-varid'>e</span> <span class='hs-varop'>`Reducer`</span> <span class='hs-varid'>m</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-layout'>(</span><span class='hs-conid'>Elem</span> <span class='hs-varid'>c</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-varid'>e</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-varid'>c</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-varid'>m</span>
-<a name="line-67"></a>    <span class='hs-varid'>mapTo</span>     <span class='hs-keyglyph'>::</span> <span class='hs-layout'>(</span><span class='hs-varid'>e</span> <span class='hs-varop'>`Reducer`</span> <span class='hs-varid'>m</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-layout'>(</span><span class='hs-conid'>Elem</span> <span class='hs-varid'>c</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-varid'>e</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-varid'>m</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-varid'>c</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-varid'>m</span> 
-<a name="line-68"></a>    <span class='hs-varid'>mapFrom</span>   <span class='hs-keyglyph'>::</span> <span class='hs-layout'>(</span><span class='hs-varid'>e</span> <span class='hs-varop'>`Reducer`</span> <span class='hs-varid'>m</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-layout'>(</span><span class='hs-conid'>Elem</span> <span class='hs-varid'>c</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-varid'>e</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-varid'>c</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-varid'>m</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-varid'>m</span>
-<a name="line-69"></a>
-<a name="line-70"></a>    <span class='hs-varid'>mapReduce</span> <span class='hs-varid'>f</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>mapTo</span> <span class='hs-varid'>f</span> <span class='hs-varid'>mempty</span>
-<a name="line-71"></a>    <span class='hs-varid'>mapTo</span> <span class='hs-varid'>f</span> <span class='hs-varid'>m</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>mappend</span> <span class='hs-varid'>m</span> <span class='hs-varop'>.</span> <span class='hs-varid'>mapReduce</span> <span class='hs-varid'>f</span>
-<a name="line-72"></a>    <span class='hs-varid'>mapFrom</span> <span class='hs-varid'>f</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>mappend</span> <span class='hs-varop'>.</span> <span class='hs-varid'>mapReduce</span> <span class='hs-varid'>f</span>
-<a name="line-73"></a>
-<a name="line-74"></a><span class='hs-keyword'>instance</span> <span class='hs-conid'>Generator</span> <span class='hs-conid'>Strict</span><span class='hs-varop'>.</span><span class='hs-conid'>ByteString</span> <span class='hs-keyword'>where</span>
-<a name="line-75"></a>    <span class='hs-keyword'>type</span> <span class='hs-conid'>Elem</span> <span class='hs-conid'>Strict</span><span class='hs-varop'>.</span><span class='hs-conid'>ByteString</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>Word8</span>
-<a name="line-76"></a>    <span class='hs-varid'>mapTo</span> <span class='hs-varid'>f</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>Strict</span><span class='hs-varop'>.</span><span class='hs-varid'>foldl'</span> <span class='hs-layout'>(</span><span class='hs-keyglyph'>\</span><span class='hs-varid'>a</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-varid'>snoc</span> <span class='hs-varid'>a</span> <span class='hs-varop'>.</span> <span class='hs-varid'>f</span><span class='hs-layout'>)</span>
-<a name="line-77"></a>
-<a name="line-78"></a><span class='hs-keyword'>instance</span> <span class='hs-conid'>Generator</span> <span class='hs-conid'>Lazy</span><span class='hs-varop'>.</span><span class='hs-conid'>ByteString</span> <span class='hs-keyword'>where</span>
-<a name="line-79"></a>    <span class='hs-keyword'>type</span> <span class='hs-conid'>Elem</span> <span class='hs-conid'>Lazy</span><span class='hs-varop'>.</span><span class='hs-conid'>ByteString</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>Word8</span>
-<a name="line-80"></a>    <span class='hs-varid'>mapReduce</span> <span class='hs-varid'>f</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>fold</span> <span class='hs-varop'>.</span> <span class='hs-varid'>parMap</span> <span class='hs-varid'>rwhnf</span> <span class='hs-layout'>(</span><span class='hs-varid'>mapReduce</span> <span class='hs-varid'>f</span><span class='hs-layout'>)</span> <span class='hs-varop'>.</span> <span class='hs-conid'>Lazy</span><span class='hs-varop'>.</span><span class='hs-varid'>toChunks</span>
+<a name="line-39"></a><span class='hs-cpp'>#ifdef M_ARRAY</span>
+<a name="line-40"></a><span class='hs-keyword'>import</span> <span class='hs-conid'>Data</span><span class='hs-varop'>.</span><span class='hs-conid'>Array</span> 
+<a name="line-41"></a><span class='hs-cpp'>#endif</span>
+<a name="line-42"></a>
+<a name="line-43"></a>
+<a name="line-44"></a><span class='hs-cpp'>#ifdef M_TEXT</span>
+<a name="line-45"></a><span class='hs-keyword'>import</span> <span class='hs-conid'>Data</span><span class='hs-varop'>.</span><span class='hs-conid'>Text</span> <span class='hs-layout'>(</span><span class='hs-conid'>Text</span><span class='hs-layout'>)</span>
+<a name="line-46"></a><span class='hs-keyword'>import</span> <span class='hs-keyword'>qualified</span> <span class='hs-conid'>Data</span><span class='hs-varop'>.</span><span class='hs-conid'>Text</span> <span class='hs-keyword'>as</span> <span class='hs-conid'>Text</span>
+<a name="line-47"></a><span class='hs-cpp'>#endif</span>
+<a name="line-48"></a>
+<a name="line-49"></a>
+<a name="line-50"></a><span class='hs-cpp'>#ifdef M_BYTESTRING</span>
+<a name="line-51"></a><span class='hs-keyword'>import</span> <span class='hs-keyword'>qualified</span> <span class='hs-conid'>Data</span><span class='hs-varop'>.</span><span class='hs-conid'>ByteString</span> <span class='hs-keyword'>as</span> <span class='hs-conid'>Strict</span> <span class='hs-layout'>(</span><span class='hs-conid'>ByteString</span><span class='hs-layout'>,</span> <span class='hs-varid'>foldl'</span><span class='hs-layout'>)</span>
+<a name="line-52"></a><span class='hs-keyword'>import</span> <span class='hs-keyword'>qualified</span> <span class='hs-conid'>Data</span><span class='hs-varop'>.</span><span class='hs-conid'>ByteString</span><span class='hs-varop'>.</span><span class='hs-conid'>Char8</span> <span class='hs-keyword'>as</span> <span class='hs-conid'>Strict8</span> <span class='hs-layout'>(</span><span class='hs-varid'>foldl'</span><span class='hs-layout'>)</span>
+<a name="line-53"></a><span class='hs-keyword'>import</span> <span class='hs-keyword'>qualified</span> <span class='hs-conid'>Data</span><span class='hs-varop'>.</span><span class='hs-conid'>ByteString</span><span class='hs-varop'>.</span><span class='hs-conid'>Lazy</span> <span class='hs-keyword'>as</span> <span class='hs-conid'>Lazy</span> <span class='hs-layout'>(</span><span class='hs-conid'>ByteString</span><span class='hs-layout'>,</span> <span class='hs-varid'>toChunks</span><span class='hs-layout'>)</span>
+<a name="line-54"></a><span class='hs-keyword'>import</span> <span class='hs-keyword'>qualified</span> <span class='hs-conid'>Data</span><span class='hs-varop'>.</span><span class='hs-conid'>ByteString</span><span class='hs-varop'>.</span><span class='hs-conid'>Lazy</span><span class='hs-varop'>.</span><span class='hs-conid'>Char8</span> <span class='hs-keyword'>as</span> <span class='hs-conid'>Lazy8</span> <span class='hs-layout'>(</span><span class='hs-varid'>toChunks</span><span class='hs-layout'>)</span>
+<a name="line-55"></a><span class='hs-keyword'>import</span> <span class='hs-conid'>Data</span><span class='hs-varop'>.</span><span class='hs-conid'>Word</span> <span class='hs-layout'>(</span><span class='hs-conid'>Word8</span><span class='hs-layout'>)</span>
+<a name="line-56"></a><span class='hs-cpp'>#endif</span>
+<a name="line-57"></a>
+<a name="line-58"></a><span class='hs-cpp'>#ifdef M_FINGERTREE</span>
+<a name="line-59"></a><span class='hs-keyword'>import</span> <span class='hs-conid'>Data</span><span class='hs-varop'>.</span><span class='hs-conid'>FingerTree</span> <span class='hs-layout'>(</span><span class='hs-conid'>Measured</span><span class='hs-layout'>,</span> <span class='hs-conid'>FingerTree</span><span class='hs-layout'>)</span>
+<a name="line-60"></a><span class='hs-cpp'>#endif</span>
+<a name="line-61"></a>
+<a name="line-62"></a><span class='hs-cpp'>#ifdef M_CONTAINERS</span>
+<a name="line-63"></a><span class='hs-keyword'>import</span> <span class='hs-keyword'>qualified</span> <span class='hs-conid'>Data</span><span class='hs-varop'>.</span><span class='hs-conid'>Sequence</span> <span class='hs-keyword'>as</span> <span class='hs-conid'>Seq</span>
+<a name="line-64"></a><span class='hs-keyword'>import</span> <span class='hs-conid'>Data</span><span class='hs-varop'>.</span><span class='hs-conid'>Sequence</span> <span class='hs-layout'>(</span><span class='hs-conid'>Seq</span><span class='hs-layout'>)</span>
+<a name="line-65"></a><span class='hs-keyword'>import</span> <span class='hs-keyword'>qualified</span> <span class='hs-conid'>Data</span><span class='hs-varop'>.</span><span class='hs-conid'>Set</span> <span class='hs-keyword'>as</span> <span class='hs-conid'>Set</span>
+<a name="line-66"></a><span class='hs-keyword'>import</span> <span class='hs-conid'>Data</span><span class='hs-varop'>.</span><span class='hs-conid'>Set</span> <span class='hs-layout'>(</span><span class='hs-conid'>Set</span><span class='hs-layout'>)</span>
+<a name="line-67"></a><span class='hs-keyword'>import</span> <span class='hs-keyword'>qualified</span> <span class='hs-conid'>Data</span><span class='hs-varop'>.</span><span class='hs-conid'>IntSet</span> <span class='hs-keyword'>as</span> <span class='hs-conid'>IntSet</span>
+<a name="line-68"></a><span class='hs-keyword'>import</span> <span class='hs-conid'>Data</span><span class='hs-varop'>.</span><span class='hs-conid'>IntSet</span> <span class='hs-layout'>(</span><span class='hs-conid'>IntSet</span><span class='hs-layout'>)</span>
+<a name="line-69"></a><span class='hs-keyword'>import</span> <span class='hs-keyword'>qualified</span> <span class='hs-conid'>Data</span><span class='hs-varop'>.</span><span class='hs-conid'>IntMap</span> <span class='hs-keyword'>as</span> <span class='hs-conid'>IntMap</span>
+<a name="line-70"></a><span class='hs-keyword'>import</span> <span class='hs-conid'>Data</span><span class='hs-varop'>.</span><span class='hs-conid'>IntMap</span> <span class='hs-layout'>(</span><span class='hs-conid'>IntMap</span><span class='hs-layout'>)</span>
+<a name="line-71"></a><span class='hs-keyword'>import</span> <span class='hs-keyword'>qualified</span> <span class='hs-conid'>Data</span><span class='hs-varop'>.</span><span class='hs-conid'>Map</span> <span class='hs-keyword'>as</span> <span class='hs-conid'>Map</span>
+<a name="line-72"></a><span class='hs-keyword'>import</span> <span class='hs-conid'>Data</span><span class='hs-varop'>.</span><span class='hs-conid'>Map</span> <span class='hs-layout'>(</span><span class='hs-conid'>Map</span><span class='hs-layout'>)</span>
+<a name="line-73"></a><span class='hs-cpp'>#endif</span>
+<a name="line-74"></a>
+<a name="line-75"></a><span class='hs-cpp'>#ifdef M_PARALLEL</span>
+<a name="line-76"></a><span class='hs-keyword'>import</span> <span class='hs-conid'>Control</span><span class='hs-varop'>.</span><span class='hs-conid'>Parallel</span><span class='hs-varop'>.</span><span class='hs-conid'>Strategies</span>
+<a name="line-77"></a><span class='hs-cpp'>#endif</span>
+<a name="line-78"></a>
+<a name="line-79"></a><span class='hs-keyword'>import</span> <span class='hs-conid'>Data</span><span class='hs-varop'>.</span><span class='hs-conid'>Foldable</span> <span class='hs-layout'>(</span><span class='hs-varid'>fold</span><span class='hs-layout'>,</span><span class='hs-varid'>foldMap</span><span class='hs-layout'>)</span>
+<a name="line-80"></a><span class='hs-keyword'>import</span> <span class='hs-conid'>Data</span><span class='hs-varop'>.</span><span class='hs-conid'>Monoid</span><span class='hs-varop'>.</span><span class='hs-conid'>Reducer</span>
hunk ./doc/html/monoids/src/Data-Generator.html 90
-<a name="line-82"></a><span class='hs-keyword'>instance</span> <span class='hs-conid'>Generator</span> <span class='hs-conid'>Text</span> <span class='hs-keyword'>where</span>
-<a name="line-83"></a>    <span class='hs-keyword'>type</span> <span class='hs-conid'>Elem</span> <span class='hs-conid'>Text</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>Char</span>
-<a name="line-84"></a>    <span class='hs-varid'>mapTo</span> <span class='hs-varid'>f</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>Text</span><span class='hs-varop'>.</span><span class='hs-varid'>foldl'</span> <span class='hs-layout'>(</span><span class='hs-keyglyph'>\</span><span class='hs-varid'>a</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-varid'>snoc</span> <span class='hs-varid'>a</span> <span class='hs-varop'>.</span> <span class='hs-varid'>f</span><span class='hs-layout'>)</span>
-<a name="line-85"></a>
-<a name="line-86"></a><span class='hs-keyword'>instance</span> <span class='hs-conid'>Generator</span> <span class='hs-keyglyph'>[</span><span class='hs-varid'>c</span><span class='hs-keyglyph'>]</span> <span class='hs-keyword'>where</span>
-<a name="line-87"></a>    <span class='hs-keyword'>type</span> <span class='hs-conid'>Elem</span> <span class='hs-keyglyph'>[</span><span class='hs-varid'>c</span><span class='hs-keyglyph'>]</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>c</span>
-<a name="line-88"></a>    <span class='hs-varid'>mapReduce</span> <span class='hs-varid'>f</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>foldr</span> <span class='hs-layout'>(</span><span class='hs-varid'>cons</span> <span class='hs-varop'>.</span> <span class='hs-varid'>f</span><span class='hs-layout'>)</span> <span class='hs-varid'>mempty</span>
-<a name="line-89"></a>
-<a name="line-90"></a><span class='hs-keyword'>instance</span> <span class='hs-conid'>Measured</span> <span class='hs-varid'>v</span> <span class='hs-varid'>e</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>Generator</span> <span class='hs-layout'>(</span><span class='hs-conid'>FingerTree</span> <span class='hs-varid'>v</span> <span class='hs-varid'>e</span><span class='hs-layout'>)</span> <span class='hs-keyword'>where</span>
-<a name="line-91"></a>    <span class='hs-keyword'>type</span> <span class='hs-conid'>Elem</span> <span class='hs-layout'>(</span><span class='hs-conid'>FingerTree</span> <span class='hs-varid'>v</span> <span class='hs-varid'>e</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>e</span>
-<a name="line-92"></a>    <span class='hs-varid'>mapReduce</span> <span class='hs-varid'>f</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>foldMap</span> <span class='hs-layout'>(</span><span class='hs-varid'>unit</span> <span class='hs-varop'>.</span> <span class='hs-varid'>f</span><span class='hs-layout'>)</span>
-<a name="line-93"></a>
-<a name="line-94"></a><span class='hs-keyword'>instance</span> <span class='hs-conid'>Generator</span> <span class='hs-layout'>(</span><span class='hs-conid'>Seq</span> <span class='hs-varid'>c</span><span class='hs-layout'>)</span> <span class='hs-keyword'>where</span>
-<a name="line-95"></a>    <span class='hs-keyword'>type</span> <span class='hs-conid'>Elem</span> <span class='hs-layout'>(</span><span class='hs-conid'>Seq</span> <span class='hs-varid'>c</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>c</span>
-<a name="line-96"></a>    <span class='hs-varid'>mapReduce</span> <span class='hs-varid'>f</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>foldMap</span> <span class='hs-layout'>(</span><span class='hs-varid'>unit</span> <span class='hs-varop'>.</span> <span class='hs-varid'>f</span><span class='hs-layout'>)</span>
+<a name="line-82"></a><span class='hs-comment'>-- | minimal definition 'mapReduce' or 'mapTo'</span>
+<a name="line-83"></a><span class='hs-keyword'>class</span> <span class='hs-conid'>Generator</span> <span class='hs-varid'>c</span> <span class='hs-keyword'>where</span>
+<a name="line-84"></a>    <span class='hs-keyword'>type</span> <span class='hs-conid'>Elem</span> <span class='hs-varid'>c</span> <span class='hs-keyglyph'>::</span> <span class='hs-varop'>*</span> 
+<a name="line-85"></a>    <span class='hs-varid'>mapReduce</span> <span class='hs-keyglyph'>::</span> <span class='hs-layout'>(</span><span class='hs-varid'>e</span> <span class='hs-varop'>`Reducer`</span> <span class='hs-varid'>m</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-layout'>(</span><span class='hs-conid'>Elem</span> <span class='hs-varid'>c</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-varid'>e</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-varid'>c</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-varid'>m</span>
+<a name="line-86"></a>    <span class='hs-varid'>mapTo</span>     <span class='hs-keyglyph'>::</span> <span class='hs-layout'>(</span><span class='hs-varid'>e</span> <span class='hs-varop'>`Reducer`</span> <span class='hs-varid'>m</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-layout'>(</span><span class='hs-conid'>Elem</span> <span class='hs-varid'>c</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-varid'>e</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-varid'>m</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-varid'>c</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-varid'>m</span> 
+<a name="line-87"></a>    <span class='hs-varid'>mapFrom</span>   <span class='hs-keyglyph'>::</span> <span class='hs-layout'>(</span><span class='hs-varid'>e</span> <span class='hs-varop'>`Reducer`</span> <span class='hs-varid'>m</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-layout'>(</span><span class='hs-conid'>Elem</span> <span class='hs-varid'>c</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-varid'>e</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-varid'>c</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-varid'>m</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-varid'>m</span>
+<a name="line-88"></a>
+<a name="line-89"></a>    <span class='hs-varid'>mapReduce</span> <span class='hs-varid'>f</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>mapTo</span> <span class='hs-varid'>f</span> <span class='hs-varid'>mempty</span>
+<a name="line-90"></a>    <span class='hs-varid'>mapTo</span> <span class='hs-varid'>f</span> <span class='hs-varid'>m</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>mappend</span> <span class='hs-varid'>m</span> <span class='hs-varop'>.</span> <span class='hs-varid'>mapReduce</span> <span class='hs-varid'>f</span>
+<a name="line-91"></a>    <span class='hs-varid'>mapFrom</span> <span class='hs-varid'>f</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>mappend</span> <span class='hs-varop'>.</span> <span class='hs-varid'>mapReduce</span> <span class='hs-varid'>f</span>
+<a name="line-92"></a>
+<a name="line-93"></a><span class='hs-cpp'>#ifdef M_BYTESTRING</span>
+<a name="line-94"></a><span class='hs-keyword'>instance</span> <span class='hs-conid'>Generator</span> <span class='hs-conid'>Strict</span><span class='hs-varop'>.</span><span class='hs-conid'>ByteString</span> <span class='hs-keyword'>where</span>
+<a name="line-95"></a>    <span class='hs-keyword'>type</span> <span class='hs-conid'>Elem</span> <span class='hs-conid'>Strict</span><span class='hs-varop'>.</span><span class='hs-conid'>ByteString</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>Word8</span>
+<a name="line-96"></a>    <span class='hs-varid'>mapTo</span> <span class='hs-varid'>f</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>Strict</span><span class='hs-varop'>.</span><span class='hs-varid'>foldl'</span> <span class='hs-layout'>(</span><span class='hs-keyglyph'>\</span><span class='hs-varid'>a</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-varid'>snoc</span> <span class='hs-varid'>a</span> <span class='hs-varop'>.</span> <span class='hs-varid'>f</span><span class='hs-layout'>)</span>
hunk ./doc/html/monoids/src/Data-Generator.html 106
-<a name="line-98"></a><span class='hs-keyword'>instance</span> <span class='hs-conid'>Generator</span> <span class='hs-conid'>IntSet</span> <span class='hs-keyword'>where</span>
-<a name="line-99"></a>    <span class='hs-keyword'>type</span> <span class='hs-conid'>Elem</span> <span class='hs-conid'>IntSet</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>Int</span>
-<a name="line-100"></a>    <span class='hs-varid'>mapReduce</span> <span class='hs-varid'>f</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>mapReduce</span> <span class='hs-varid'>f</span> <span class='hs-varop'>.</span> <span class='hs-conid'>IntSet</span><span class='hs-varop'>.</span><span class='hs-varid'>toList</span>
-<a name="line-101"></a>
-<a name="line-102"></a><span class='hs-keyword'>instance</span> <span class='hs-conid'>Generator</span> <span class='hs-layout'>(</span><span class='hs-conid'>Set</span> <span class='hs-varid'>a</span><span class='hs-layout'>)</span> <span class='hs-keyword'>where</span>
-<a name="line-103"></a>    <span class='hs-keyword'>type</span> <span class='hs-conid'>Elem</span> <span class='hs-layout'>(</span><span class='hs-conid'>Set</span> <span class='hs-varid'>a</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>a</span>
-<a name="line-104"></a>    <span class='hs-varid'>mapReduce</span> <span class='hs-varid'>f</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>mapReduce</span> <span class='hs-varid'>f</span> <span class='hs-varop'>.</span> <span class='hs-conid'>Set</span><span class='hs-varop'>.</span><span class='hs-varid'>toList</span>
-<a name="line-105"></a>
-<a name="line-106"></a><span class='hs-keyword'>instance</span> <span class='hs-conid'>Generator</span> <span class='hs-layout'>(</span><span class='hs-conid'>IntMap</span> <span class='hs-varid'>v</span><span class='hs-layout'>)</span> <span class='hs-keyword'>where</span>
-<a name="line-107"></a>    <span class='hs-keyword'>type</span> <span class='hs-conid'>Elem</span> <span class='hs-layout'>(</span><span class='hs-conid'>IntMap</span> <span class='hs-varid'>v</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=</span> <span class='hs-layout'>(</span><span class='hs-conid'>Int</span><span class='hs-layout'>,</span><span class='hs-varid'>v</span><span class='hs-layout'>)</span>
-<a name="line-108"></a>    <span class='hs-varid'>mapReduce</span> <span class='hs-varid'>f</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>mapReduce</span> <span class='hs-varid'>f</span> <span class='hs-varop'>.</span> <span class='hs-conid'>IntMap</span><span class='hs-varop'>.</span><span class='hs-varid'>toList</span>
-<a name="line-109"></a>
-<a name="line-110"></a><span class='hs-keyword'>instance</span> <span class='hs-conid'>Generator</span> <span class='hs-layout'>(</span><span class='hs-conid'>Map</span> <span class='hs-varid'>k</span> <span class='hs-varid'>v</span><span class='hs-layout'>)</span> <span class='hs-keyword'>where</span>
-<a name="line-111"></a>    <span class='hs-keyword'>type</span> <span class='hs-conid'>Elem</span> <span class='hs-layout'>(</span><span class='hs-conid'>Map</span> <span class='hs-varid'>k</span> <span class='hs-varid'>v</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=</span> <span class='hs-layout'>(</span><span class='hs-varid'>k</span><span class='hs-layout'>,</span><span class='hs-varid'>v</span><span class='hs-layout'>)</span> 
-<a name="line-112"></a>    <span class='hs-varid'>mapReduce</span> <span class='hs-varid'>f</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>mapReduce</span> <span class='hs-varid'>f</span> <span class='hs-varop'>.</span> <span class='hs-conid'>Map</span><span class='hs-varop'>.</span><span class='hs-varid'>toList</span>
-<a name="line-113"></a>
-<a name="line-114"></a><span class='hs-keyword'>instance</span> <span class='hs-conid'>Ix</span> <span class='hs-varid'>i</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>Generator</span> <span class='hs-layout'>(</span><span class='hs-conid'>Array</span> <span class='hs-varid'>i</span> <span class='hs-varid'>e</span><span class='hs-layout'>)</span> <span class='hs-keyword'>where</span>
-<a name="line-115"></a>    <span class='hs-keyword'>type</span> <span class='hs-conid'>Elem</span> <span class='hs-layout'>(</span><span class='hs-conid'>Array</span> <span class='hs-varid'>i</span> <span class='hs-varid'>e</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=</span> <span class='hs-layout'>(</span><span class='hs-varid'>i</span><span class='hs-layout'>,</span><span class='hs-varid'>e</span><span class='hs-layout'>)</span>
-<a name="line-116"></a>    <span class='hs-varid'>mapReduce</span> <span class='hs-varid'>f</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>mapReduce</span> <span class='hs-varid'>f</span> <span class='hs-varop'>.</span> <span class='hs-varid'>assocs</span>
-<a name="line-117"></a>
-<a name="line-118"></a><a name="Keys"></a><span class='hs-comment'>-- | a 'Generator' transformer that asks only for the keys of an indexed container</span>
-<a name="line-119"></a><a name="Keys"></a><span class='hs-keyword'>newtype</span> <span class='hs-conid'>Keys</span> <span class='hs-varid'>c</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>Keys</span> <span class='hs-layout'>{</span> <span class='hs-varid'>getKeys</span> <span class='hs-keyglyph'>::</span> <span class='hs-varid'>c</span> <span class='hs-layout'>}</span> 
-<a name="line-120"></a>
-<a name="line-121"></a><span class='hs-keyword'>instance</span> <span class='hs-conid'>Generator</span> <span class='hs-layout'>(</span><span class='hs-conid'>Keys</span> <span class='hs-layout'>(</span><span class='hs-conid'>IntMap</span> <span class='hs-varid'>v</span><span class='hs-layout'>)</span><span class='hs-layout'>)</span> <span class='hs-keyword'>where</span>
-<a name="line-122"></a>    <span class='hs-keyword'>type</span> <span class='hs-conid'>Elem</span> <span class='hs-layout'>(</span><span class='hs-conid'>Keys</span> <span class='hs-layout'>(</span><span class='hs-conid'>IntMap</span> <span class='hs-varid'>v</span><span class='hs-layout'>)</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>Int</span>
-<a name="line-123"></a>    <span class='hs-varid'>mapReduce</span> <span class='hs-varid'>f</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>mapReduce</span> <span class='hs-varid'>f</span> <span class='hs-varop'>.</span> <span class='hs-conid'>IntMap</span><span class='hs-varop'>.</span><span class='hs-varid'>keys</span> <span class='hs-varop'>.</span> <span class='hs-varid'>getKeys</span>
-<a name="line-124"></a>
-<a name="line-125"></a><span class='hs-keyword'>instance</span> <span class='hs-conid'>Generator</span> <span class='hs-layout'>(</span><span class='hs-conid'>Keys</span> <span class='hs-layout'>(</span><span class='hs-conid'>Map</span> <span class='hs-varid'>k</span> <span class='hs-varid'>v</span><span class='hs-layout'>)</span><span class='hs-layout'>)</span> <span class='hs-keyword'>where</span>
-<a name="line-126"></a>    <span class='hs-keyword'>type</span> <span class='hs-conid'>Elem</span> <span class='hs-layout'>(</span><span class='hs-conid'>Keys</span> <span class='hs-layout'>(</span><span class='hs-conid'>Map</span> <span class='hs-varid'>k</span> <span class='hs-varid'>v</span><span class='hs-layout'>)</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>k</span>
-<a name="line-127"></a>    <span class='hs-varid'>mapReduce</span> <span class='hs-varid'>f</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>mapReduce</span> <span class='hs-varid'>f</span> <span class='hs-varop'>.</span> <span class='hs-conid'>Map</span><span class='hs-varop'>.</span><span class='hs-varid'>keys</span> <span class='hs-varop'>.</span> <span class='hs-varid'>getKeys</span>
-<a name="line-128"></a>
-<a name="line-129"></a><span class='hs-keyword'>instance</span> <span class='hs-conid'>Ix</span> <span class='hs-varid'>i</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>Generator</span> <span class='hs-layout'>(</span><span class='hs-conid'>Keys</span> <span class='hs-layout'>(</span><span class='hs-conid'>Array</span> <span class='hs-varid'>i</span> <span class='hs-varid'>e</span><span class='hs-layout'>)</span><span class='hs-layout'>)</span> <span class='hs-keyword'>where</span>
-<a name="line-130"></a>    <span class='hs-keyword'>type</span> <span class='hs-conid'>Elem</span> <span class='hs-layout'>(</span><span class='hs-conid'>Keys</span> <span class='hs-layout'>(</span><span class='hs-conid'>Array</span> <span class='hs-varid'>i</span> <span class='hs-varid'>e</span><span class='hs-layout'>)</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>i</span>
-<a name="line-131"></a>    <span class='hs-varid'>mapReduce</span> <span class='hs-varid'>f</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>mapReduce</span> <span class='hs-varid'>f</span> <span class='hs-varop'>.</span> <span class='hs-varid'>range</span> <span class='hs-varop'>.</span> <span class='hs-varid'>bounds</span> <span class='hs-varop'>.</span> <span class='hs-varid'>getKeys</span>
-<a name="line-132"></a>
-<a name="line-133"></a><a name="Values"></a><span class='hs-comment'>-- | a 'Generator' transformer that asks only for the values contained in an indexed container</span>
-<a name="line-134"></a><a name="Values"></a><span class='hs-keyword'>newtype</span> <span class='hs-conid'>Values</span> <span class='hs-varid'>c</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>Values</span> <span class='hs-layout'>{</span> <span class='hs-varid'>getValues</span> <span class='hs-keyglyph'>::</span> <span class='hs-varid'>c</span> <span class='hs-layout'>}</span> 
+<a name="line-98"></a><span class='hs-keyword'>instance</span> <span class='hs-conid'>Generator</span> <span class='hs-conid'>Lazy</span><span class='hs-varop'>.</span><span class='hs-conid'>ByteString</span> <span class='hs-keyword'>where</span>
+<a name="line-99"></a>    <span class='hs-keyword'>type</span> <span class='hs-conid'>Elem</span> <span class='hs-conid'>Lazy</span><span class='hs-varop'>.</span><span class='hs-conid'>ByteString</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>Word8</span>
+<a name="line-100"></a>    <span class='hs-varid'>mapReduce</span> <span class='hs-varid'>f</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>fold</span> <span class='hs-varop'>.</span> <span class='hs-varid'>parMap</span> <span class='hs-varid'>rwhnf</span> <span class='hs-layout'>(</span><span class='hs-varid'>mapReduce</span> <span class='hs-varid'>f</span><span class='hs-layout'>)</span> <span class='hs-varop'>.</span> <span class='hs-conid'>Lazy</span><span class='hs-varop'>.</span><span class='hs-varid'>toChunks</span>
+<a name="line-101"></a><span class='hs-cpp'>#endif</span>
+<a name="line-102"></a>
+<a name="line-103"></a><span class='hs-cpp'>#ifdef M_TEXT</span>
+<a name="line-104"></a><span class='hs-keyword'>instance</span> <span class='hs-conid'>Generator</span> <span class='hs-conid'>Text</span> <span class='hs-keyword'>where</span>
+<a name="line-105"></a>    <span class='hs-keyword'>type</span> <span class='hs-conid'>Elem</span> <span class='hs-conid'>Text</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>Char</span>
+<a name="line-106"></a>    <span class='hs-varid'>mapTo</span> <span class='hs-varid'>f</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>Text</span><span class='hs-varop'>.</span><span class='hs-varid'>foldl'</span> <span class='hs-layout'>(</span><span class='hs-keyglyph'>\</span><span class='hs-varid'>a</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-varid'>snoc</span> <span class='hs-varid'>a</span> <span class='hs-varop'>.</span> <span class='hs-varid'>f</span><span class='hs-layout'>)</span>
+<a name="line-107"></a><span class='hs-cpp'>#endif</span>
+<a name="line-108"></a>
+<a name="line-109"></a><span class='hs-keyword'>instance</span> <span class='hs-conid'>Generator</span> <span class='hs-keyglyph'>[</span><span class='hs-varid'>c</span><span class='hs-keyglyph'>]</span> <span class='hs-keyword'>where</span>
+<a name="line-110"></a>    <span class='hs-keyword'>type</span> <span class='hs-conid'>Elem</span> <span class='hs-keyglyph'>[</span><span class='hs-varid'>c</span><span class='hs-keyglyph'>]</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>c</span>
+<a name="line-111"></a>    <span class='hs-varid'>mapReduce</span> <span class='hs-varid'>f</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>foldr</span> <span class='hs-layout'>(</span><span class='hs-varid'>cons</span> <span class='hs-varop'>.</span> <span class='hs-varid'>f</span><span class='hs-layout'>)</span> <span class='hs-varid'>mempty</span>
+<a name="line-112"></a>
+<a name="line-113"></a><span class='hs-cpp'>#ifdef M_FINGERTREE</span>
+<a name="line-114"></a><span class='hs-keyword'>instance</span> <span class='hs-conid'>Measured</span> <span class='hs-varid'>v</span> <span class='hs-varid'>e</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>Generator</span> <span class='hs-layout'>(</span><span class='hs-conid'>FingerTree</span> <span class='hs-varid'>v</span> <span class='hs-varid'>e</span><span class='hs-layout'>)</span> <span class='hs-keyword'>where</span>
+<a name="line-115"></a>    <span class='hs-keyword'>type</span> <span class='hs-conid'>Elem</span> <span class='hs-layout'>(</span><span class='hs-conid'>FingerTree</span> <span class='hs-varid'>v</span> <span class='hs-varid'>e</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>e</span>
+<a name="line-116"></a>    <span class='hs-varid'>mapReduce</span> <span class='hs-varid'>f</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>foldMap</span> <span class='hs-layout'>(</span><span class='hs-varid'>unit</span> <span class='hs-varop'>.</span> <span class='hs-varid'>f</span><span class='hs-layout'>)</span>
+<a name="line-117"></a><span class='hs-cpp'>#endif</span>
+<a name="line-118"></a>
+<a name="line-119"></a><span class='hs-cpp'>#ifdef M_CONTAINERS</span>
+<a name="line-120"></a><span class='hs-keyword'>instance</span> <span class='hs-conid'>Generator</span> <span class='hs-layout'>(</span><span class='hs-conid'>Seq</span> <span class='hs-varid'>c</span><span class='hs-layout'>)</span> <span class='hs-keyword'>where</span>
+<a name="line-121"></a>    <span class='hs-keyword'>type</span> <span class='hs-conid'>Elem</span> <span class='hs-layout'>(</span><span class='hs-conid'>Seq</span> <span class='hs-varid'>c</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>c</span>
+<a name="line-122"></a>    <span class='hs-varid'>mapReduce</span> <span class='hs-varid'>f</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>foldMap</span> <span class='hs-layout'>(</span><span class='hs-varid'>unit</span> <span class='hs-varop'>.</span> <span class='hs-varid'>f</span><span class='hs-layout'>)</span>
+<a name="line-123"></a>
+<a name="line-124"></a><span class='hs-keyword'>instance</span> <span class='hs-conid'>Generator</span> <span class='hs-conid'>IntSet</span> <span class='hs-keyword'>where</span>
+<a name="line-125"></a>    <span class='hs-keyword'>type</span> <span class='hs-conid'>Elem</span> <span class='hs-conid'>IntSet</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>Int</span>
+<a name="line-126"></a>    <span class='hs-varid'>mapReduce</span> <span class='hs-varid'>f</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>mapReduce</span> <span class='hs-varid'>f</span> <span class='hs-varop'>.</span> <span class='hs-conid'>IntSet</span><span class='hs-varop'>.</span><span class='hs-varid'>toList</span>
+<a name="line-127"></a>
+<a name="line-128"></a><span class='hs-keyword'>instance</span> <span class='hs-conid'>Generator</span> <span class='hs-layout'>(</span><span class='hs-conid'>Set</span> <span class='hs-varid'>a</span><span class='hs-layout'>)</span> <span class='hs-keyword'>where</span>
+<a name="line-129"></a>    <span class='hs-keyword'>type</span> <span class='hs-conid'>Elem</span> <span class='hs-layout'>(</span><span class='hs-conid'>Set</span> <span class='hs-varid'>a</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>a</span>
+<a name="line-130"></a>    <span class='hs-varid'>mapReduce</span> <span class='hs-varid'>f</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>mapReduce</span> <span class='hs-varid'>f</span> <span class='hs-varop'>.</span> <span class='hs-conid'>Set</span><span class='hs-varop'>.</span><span class='hs-varid'>toList</span>
+<a name="line-131"></a>
+<a name="line-132"></a><span class='hs-keyword'>instance</span> <span class='hs-conid'>Generator</span> <span class='hs-layout'>(</span><span class='hs-conid'>IntMap</span> <span class='hs-varid'>v</span><span class='hs-layout'>)</span> <span class='hs-keyword'>where</span>
+<a name="line-133"></a>    <span class='hs-keyword'>type</span> <span class='hs-conid'>Elem</span> <span class='hs-layout'>(</span><span class='hs-conid'>IntMap</span> <span class='hs-varid'>v</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=</span> <span class='hs-layout'>(</span><span class='hs-conid'>Int</span><span class='hs-layout'>,</span><span class='hs-varid'>v</span><span class='hs-layout'>)</span>
+<a name="line-134"></a>    <span class='hs-varid'>mapReduce</span> <span class='hs-varid'>f</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>mapReduce</span> <span class='hs-varid'>f</span> <span class='hs-varop'>.</span> <span class='hs-conid'>IntMap</span><span class='hs-varop'>.</span><span class='hs-varid'>toList</span>
hunk ./doc/html/monoids/src/Data-Generator.html 144
-<a name="line-136"></a><span class='hs-keyword'>instance</span> <span class='hs-conid'>Generator</span> <span class='hs-layout'>(</span><span class='hs-conid'>Values</span> <span class='hs-layout'>(</span><span class='hs-conid'>IntMap</span> <span class='hs-varid'>v</span><span class='hs-layout'>)</span><span class='hs-layout'>)</span> <span class='hs-keyword'>where</span>
-<a name="line-137"></a>    <span class='hs-keyword'>type</span> <span class='hs-conid'>Elem</span> <span class='hs-layout'>(</span><span class='hs-conid'>Values</span> <span class='hs-layout'>(</span><span class='hs-conid'>IntMap</span> <span class='hs-varid'>v</span><span class='hs-layout'>)</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>v</span>
-<a name="line-138"></a>    <span class='hs-varid'>mapReduce</span> <span class='hs-varid'>f</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>mapReduce</span> <span class='hs-varid'>f</span> <span class='hs-varop'>.</span> <span class='hs-conid'>IntMap</span><span class='hs-varop'>.</span><span class='hs-varid'>elems</span> <span class='hs-varop'>.</span> <span class='hs-varid'>getValues</span>
-<a name="line-139"></a>
-<a name="line-140"></a><span class='hs-keyword'>instance</span> <span class='hs-conid'>Generator</span> <span class='hs-layout'>(</span><span class='hs-conid'>Values</span> <span class='hs-layout'>(</span><span class='hs-conid'>Map</span> <span class='hs-varid'>k</span> <span class='hs-varid'>v</span><span class='hs-layout'>)</span><span class='hs-layout'>)</span> <span class='hs-keyword'>where</span>
-<a name="line-141"></a>    <span class='hs-keyword'>type</span> <span class='hs-conid'>Elem</span> <span class='hs-layout'>(</span><span class='hs-conid'>Values</span> <span class='hs-layout'>(</span><span class='hs-conid'>Map</span> <span class='hs-varid'>k</span> <span class='hs-varid'>v</span><span class='hs-layout'>)</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>v</span>
-<a name="line-142"></a>    <span class='hs-varid'>mapReduce</span> <span class='hs-varid'>f</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>mapReduce</span> <span class='hs-varid'>f</span> <span class='hs-varop'>.</span> <span class='hs-conid'>Map</span><span class='hs-varop'>.</span><span class='hs-varid'>elems</span> <span class='hs-varop'>.</span> <span class='hs-varid'>getValues</span>
-<a name="line-143"></a>
-<a name="line-144"></a><span class='hs-keyword'>instance</span> <span class='hs-conid'>Ix</span> <span class='hs-varid'>i</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>Generator</span> <span class='hs-layout'>(</span><span class='hs-conid'>Values</span> <span class='hs-layout'>(</span><span class='hs-conid'>Array</span> <span class='hs-varid'>i</span> <span class='hs-varid'>e</span><span class='hs-layout'>)</span><span class='hs-layout'>)</span> <span class='hs-keyword'>where</span>
-<a name="line-145"></a>    <span class='hs-keyword'>type</span> <span class='hs-conid'>Elem</span> <span class='hs-layout'>(</span><span class='hs-conid'>Values</span> <span class='hs-layout'>(</span><span class='hs-conid'>Array</span> <span class='hs-varid'>i</span> <span class='hs-varid'>e</span><span class='hs-layout'>)</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>e</span>
-<a name="line-146"></a>    <span class='hs-varid'>mapReduce</span> <span class='hs-varid'>f</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>mapReduce</span> <span class='hs-varid'>f</span> <span class='hs-varop'>.</span> <span class='hs-varid'>elems</span> <span class='hs-varop'>.</span> <span class='hs-varid'>getValues</span>
-<a name="line-147"></a>
-<a name="line-148"></a><a name="Char8"></a><span class='hs-comment'>-- | a 'Generator' transformer that treats 'Word8' as 'Char'</span>
-<a name="line-149"></a><a name="Char8"></a><span class='hs-comment'>-- This lets you use a 'ByteString' as a 'Char' source without going through a 'Monoid' transformer like 'UTF8'</span>
-<a name="line-150"></a><a name="Char8"></a><span class='hs-keyword'>newtype</span> <span class='hs-conid'>Char8</span> <span class='hs-varid'>c</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>Char8</span> <span class='hs-layout'>{</span> <span class='hs-varid'>getChar8</span> <span class='hs-keyglyph'>::</span> <span class='hs-varid'>c</span> <span class='hs-layout'>}</span> 
-<a name="line-151"></a>
-<a name="line-152"></a><span class='hs-keyword'>instance</span> <span class='hs-conid'>Generator</span> <span class='hs-layout'>(</span><span class='hs-conid'>Char8</span> <span class='hs-conid'>Strict</span><span class='hs-varop'>.</span><span class='hs-conid'>ByteString</span><span class='hs-layout'>)</span> <span class='hs-keyword'>where</span>
-<a name="line-153"></a>    <span class='hs-keyword'>type</span> <span class='hs-conid'>Elem</span> <span class='hs-layout'>(</span><span class='hs-conid'>Char8</span> <span class='hs-conid'>Strict</span><span class='hs-varop'>.</span><span class='hs-conid'>ByteString</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>Char</span>
-<a name="line-154"></a>    <span class='hs-varid'>mapTo</span> <span class='hs-varid'>f</span> <span class='hs-varid'>m</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>Strict8</span><span class='hs-varop'>.</span><span class='hs-varid'>foldl'</span> <span class='hs-layout'>(</span><span class='hs-keyglyph'>\</span><span class='hs-varid'>a</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-varid'>snoc</span> <span class='hs-varid'>a</span> <span class='hs-varop'>.</span> <span class='hs-varid'>f</span><span class='hs-layout'>)</span> <span class='hs-varid'>m</span> <span class='hs-varop'>.</span> <span class='hs-varid'>getChar8</span>
-<a name="line-155"></a>
-<a name="line-156"></a><span class='hs-keyword'>instance</span> <span class='hs-conid'>Generator</span> <span class='hs-layout'>(</span><span class='hs-conid'>Char8</span> <span class='hs-conid'>Lazy</span><span class='hs-varop'>.</span><span class='hs-conid'>ByteString</span><span class='hs-layout'>)</span> <span class='hs-keyword'>where</span>
-<a name="line-157"></a>    <span class='hs-keyword'>type</span> <span class='hs-conid'>Elem</span> <span class='hs-layout'>(</span><span class='hs-conid'>Char8</span> <span class='hs-conid'>Lazy</span><span class='hs-varop'>.</span><span class='hs-conid'>ByteString</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>Char</span>
-<a name="line-158"></a>    <span class='hs-varid'>mapReduce</span> <span class='hs-varid'>f</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>fold</span> <span class='hs-varop'>.</span> <span class='hs-varid'>parMap</span> <span class='hs-varid'>rwhnf</span> <span class='hs-layout'>(</span><span class='hs-varid'>mapReduce</span> <span class='hs-varid'>f</span> <span class='hs-varop'>.</span> <span class='hs-conid'>Char8</span><span class='hs-layout'>)</span> <span class='hs-varop'>.</span> <span class='hs-conid'>Lazy8</span><span class='hs-varop'>.</span><span class='hs-varid'>toChunks</span> <span class='hs-varop'>.</span> <span class='hs-varid'>getChar8</span>
+<a name="line-136"></a><span class='hs-keyword'>instance</span> <span class='hs-conid'>Generator</span> <span class='hs-layout'>(</span><span class='hs-conid'>Map</span> <span class='hs-varid'>k</span> <span class='hs-varid'>v</span><span class='hs-layout'>)</span> <span class='hs-keyword'>where</span>
+<a name="line-137"></a>    <span class='hs-keyword'>type</span> <span class='hs-conid'>Elem</span> <span class='hs-layout'>(</span><span class='hs-conid'>Map</span> <span class='hs-varid'>k</span> <span class='hs-varid'>v</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=</span> <span class='hs-layout'>(</span><span class='hs-varid'>k</span><span class='hs-layout'>,</span><span class='hs-varid'>v</span><span class='hs-layout'>)</span> 
+<a name="line-138"></a>    <span class='hs-varid'>mapReduce</span> <span class='hs-varid'>f</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>mapReduce</span> <span class='hs-varid'>f</span> <span class='hs-varop'>.</span> <span class='hs-conid'>Map</span><span class='hs-varop'>.</span><span class='hs-varid'>toList</span>
+<a name="line-139"></a><span class='hs-cpp'>#endif</span>
+<a name="line-140"></a>
+<a name="line-141"></a><span class='hs-cpp'>#ifdef M_ARRAY</span>
+<a name="line-142"></a><span class='hs-keyword'>instance</span> <span class='hs-conid'>Ix</span> <span class='hs-varid'>i</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>Generator</span> <span class='hs-layout'>(</span><span class='hs-conid'>Array</span> <span class='hs-varid'>i</span> <span class='hs-varid'>e</span><span class='hs-layout'>)</span> <span class='hs-keyword'>where</span>
+<a name="line-143"></a>    <span class='hs-keyword'>type</span> <span class='hs-conid'>Elem</span> <span class='hs-layout'>(</span><span class='hs-conid'>Array</span> <span class='hs-varid'>i</span> <span class='hs-varid'>e</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=</span> <span class='hs-layout'>(</span><span class='hs-varid'>i</span><span class='hs-layout'>,</span><span class='hs-varid'>e</span><span class='hs-layout'>)</span>
+<a name="line-144"></a>    <span class='hs-varid'>mapReduce</span> <span class='hs-varid'>f</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>mapReduce</span> <span class='hs-varid'>f</span> <span class='hs-varop'>.</span> <span class='hs-varid'>assocs</span>
+<a name="line-145"></a><span class='hs-cpp'>#endif</span>
+<a name="line-146"></a>
+<a name="line-147"></a><a name="Keys"></a><span class='hs-comment'>-- | a 'Generator' transformer that asks only for the keys of an indexed container</span>
+<a name="line-148"></a><a name="Keys"></a><span class='hs-keyword'>newtype</span> <span class='hs-conid'>Keys</span> <span class='hs-varid'>c</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>Keys</span> <span class='hs-layout'>{</span> <span class='hs-varid'>getKeys</span> <span class='hs-keyglyph'>::</span> <span class='hs-varid'>c</span> <span class='hs-layout'>}</span> 
+<a name="line-149"></a>
+<a name="line-150"></a><span class='hs-cpp'>#ifdef M_CONTAINERS</span>
+<a name="line-151"></a><span class='hs-keyword'>instance</span> <span class='hs-conid'>Generator</span> <span class='hs-layout'>(</span><span class='hs-conid'>Keys</span> <span class='hs-layout'>(</span><span class='hs-conid'>IntMap</span> <span class='hs-varid'>v</span><span class='hs-layout'>)</span><span class='hs-layout'>)</span> <span class='hs-keyword'>where</span>
+<a name="line-152"></a>    <span class='hs-keyword'>type</span> <span class='hs-conid'>Elem</span> <span class='hs-layout'>(</span><span class='hs-conid'>Keys</span> <span class='hs-layout'>(</span><span class='hs-conid'>IntMap</span> <span class='hs-varid'>v</span><span class='hs-layout'>)</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>Int</span>
+<a name="line-153"></a>    <span class='hs-varid'>mapReduce</span> <span class='hs-varid'>f</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>mapReduce</span> <span class='hs-varid'>f</span> <span class='hs-varop'>.</span> <span class='hs-conid'>IntMap</span><span class='hs-varop'>.</span><span class='hs-varid'>keys</span> <span class='hs-varop'>.</span> <span class='hs-varid'>getKeys</span>
+<a name="line-154"></a>
+<a name="line-155"></a><span class='hs-keyword'>instance</span> <span class='hs-conid'>Generator</span> <span class='hs-layout'>(</span><span class='hs-conid'>Keys</span> <span class='hs-layout'>(</span><span class='hs-conid'>Map</span> <span class='hs-varid'>k</span> <span class='hs-varid'>v</span><span class='hs-layout'>)</span><span class='hs-layout'>)</span> <span class='hs-keyword'>where</span>
+<a name="line-156"></a>    <span class='hs-keyword'>type</span> <span class='hs-conid'>Elem</span> <span class='hs-layout'>(</span><span class='hs-conid'>Keys</span> <span class='hs-layout'>(</span><span class='hs-conid'>Map</span> <span class='hs-varid'>k</span> <span class='hs-varid'>v</span><span class='hs-layout'>)</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>k</span>
+<a name="line-157"></a>    <span class='hs-varid'>mapReduce</span> <span class='hs-varid'>f</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>mapReduce</span> <span class='hs-varid'>f</span> <span class='hs-varop'>.</span> <span class='hs-conid'>Map</span><span class='hs-varop'>.</span><span class='hs-varid'>keys</span> <span class='hs-varop'>.</span> <span class='hs-varid'>getKeys</span>
+<a name="line-158"></a><span class='hs-cpp'>#endif</span>
hunk ./doc/html/monoids/src/Data-Generator.html 168
-<a name="line-160"></a><a name="reduce"></a><span class='hs-comment'>-- | Apply a 'Reducer' directly to the elements of a 'Generator'</span>
-<a name="line-161"></a><span class='hs-definition'>reduce</span> <span class='hs-keyglyph'>::</span> <span class='hs-layout'>(</span><span class='hs-conid'>Generator</span> <span class='hs-varid'>c</span><span class='hs-layout'>,</span> <span class='hs-conid'>Elem</span> <span class='hs-varid'>c</span> <span class='hs-varop'>`Reducer`</span> <span class='hs-varid'>m</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-varid'>c</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-varid'>m</span>
-<a name="line-162"></a><span class='hs-definition'>reduce</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>mapReduce</span> <span class='hs-varid'>id</span>
-<a name="line-163"></a><span class='hs-comment'>{-# SPECIALIZE reduce :: (Word8 `Reducer` m) =&gt; Strict.ByteString -&gt; m #-}</span>
-<a name="line-164"></a><span class='hs-comment'>{-# SPECIALIZE reduce :: (Word8 `Reducer` m) =&gt; Lazy.ByteString -&gt; m #-}</span>
-<a name="line-165"></a><span class='hs-comment'>{-# SPECIALIZE reduce :: (Char `Reducer` m) =&gt; Char8 Strict.ByteString -&gt; m #-}</span>
-<a name="line-166"></a><span class='hs-comment'>{-# SPECIALIZE reduce :: (Char `Reducer` m) =&gt; Char8 Lazy.ByteString -&gt; m #-}</span>
-<a name="line-167"></a><span class='hs-comment'>{-# SPECIALIZE reduce :: (c `Reducer` m) =&gt; [c] -&gt; m #-}</span>
-<a name="line-168"></a><span class='hs-comment'>{-# SPECIALIZE reduce :: (Generator (FingerTree v e), e `Reducer` m) =&gt; FingerTree v e -&gt; m #-}</span>
-<a name="line-169"></a><span class='hs-comment'>{-# SPECIALIZE reduce :: (Char `Reducer` m) =&gt; Text -&gt; m #-}</span>
-<a name="line-170"></a><span class='hs-comment'>{-# SPECIALIZE reduce :: (e `Reducer` m) =&gt; Seq e -&gt; m #-}</span>
-<a name="line-171"></a><span class='hs-comment'>{-# SPECIALIZE reduce :: (Int `Reducer` m) =&gt; IntSet -&gt; m #-}</span>
-<a name="line-172"></a><span class='hs-comment'>{-# SPECIALIZE reduce :: (a `Reducer` m) =&gt; Set a -&gt; m #-}</span>
-<a name="line-173"></a><span class='hs-comment'>{-# SPECIALIZE reduce :: ((Int,v) `Reducer` m) =&gt; IntMap v -&gt; m #-}</span>
-<a name="line-174"></a><span class='hs-comment'>{-# SPECIALIZE reduce :: ((k,v) `Reducer` m) =&gt; Map k v -&gt; m #-}</span>
-<a name="line-175"></a><span class='hs-comment'>{-# SPECIALIZE reduce :: (Int `Reducer` m) =&gt; Keys (IntMap v) -&gt; m #-}</span>
-<a name="line-176"></a><span class='hs-comment'>{-# SPECIALIZE reduce :: (k `Reducer` m) =&gt; Keys (Map k v) -&gt; m #-}</span>
-<a name="line-177"></a><span class='hs-comment'>{-# SPECIALIZE reduce :: (v `Reducer` m) =&gt; Values (IntMap v) -&gt; m #-}</span>
-<a name="line-178"></a><span class='hs-comment'>{-# SPECIALIZE reduce :: (v `Reducer` m) =&gt; Values (Map k v) -&gt; m #-}</span>
-<a name="line-179"></a>
-<a name="line-180"></a><a name="mapReduceWith"></a><span class='hs-definition'>mapReduceWith</span> <span class='hs-keyglyph'>::</span> <span class='hs-layout'>(</span><span class='hs-conid'>Generator</span> <span class='hs-varid'>c</span><span class='hs-layout'>,</span> <span class='hs-varid'>e</span> <span class='hs-varop'>`Reducer`</span> <span class='hs-varid'>m</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-layout'>(</span><span class='hs-varid'>m</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-varid'>n</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-layout'>(</span><span class='hs-conid'>Elem</span> <span class='hs-varid'>c</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-varid'>e</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-varid'>c</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-varid'>n</span>
-<a name="line-181"></a><span class='hs-definition'>mapReduceWith</span> <span class='hs-varid'>f</span> <span class='hs-varid'>g</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>f</span> <span class='hs-varop'>.</span> <span class='hs-varid'>mapReduce</span> <span class='hs-varid'>g</span>
-<a name="line-182"></a><span class='hs-comment'>{-# INLINE mapReduceWith #-}</span>
-<a name="line-183"></a>
-<a name="line-184"></a><a name="reduceWith"></a><span class='hs-definition'>reduceWith</span> <span class='hs-keyglyph'>::</span> <span class='hs-layout'>(</span><span class='hs-conid'>Generator</span> <span class='hs-varid'>c</span><span class='hs-layout'>,</span> <span class='hs-conid'>Elem</span> <span class='hs-varid'>c</span> <span class='hs-varop'>`Reducer`</span> <span class='hs-varid'>m</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-layout'>(</span><span class='hs-varid'>m</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-varid'>n</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-varid'>c</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-varid'>n</span>
-<a name="line-185"></a><span class='hs-definition'>reduceWith</span> <span class='hs-varid'>f</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>f</span> <span class='hs-varop'>.</span> <span class='hs-varid'>reduce</span>
-<a name="line-186"></a><span class='hs-comment'>{-# INLINE reduceWith #-}</span>
+<a name="line-160"></a><span class='hs-cpp'>#ifdef M_ARRAY</span>
+<a name="line-161"></a><span class='hs-keyword'>instance</span> <span class='hs-conid'>Ix</span> <span class='hs-varid'>i</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>Generator</span> <span class='hs-layout'>(</span><span class='hs-conid'>Keys</span> <span class='hs-layout'>(</span><span class='hs-conid'>Array</span> <span class='hs-varid'>i</span> <span class='hs-varid'>e</span><span class='hs-layout'>)</span><span class='hs-layout'>)</span> <span class='hs-keyword'>where</span>
+<a name="line-162"></a>    <span class='hs-keyword'>type</span> <span class='hs-conid'>Elem</span> <span class='hs-layout'>(</span><span class='hs-conid'>Keys</span> <span class='hs-layout'>(</span><span class='hs-conid'>Array</span> <span class='hs-varid'>i</span> <span class='hs-varid'>e</span><span class='hs-layout'>)</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>i</span>
+<a name="line-163"></a>    <span class='hs-varid'>mapReduce</span> <span class='hs-varid'>f</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>mapReduce</span> <span class='hs-varid'>f</span> <span class='hs-varop'>.</span> <span class='hs-varid'>range</span> <span class='hs-varop'>.</span> <span class='hs-varid'>bounds</span> <span class='hs-varop'>.</span> <span class='hs-varid'>getKeys</span>
+<a name="line-164"></a><span class='hs-cpp'>#endif</span>
+<a name="line-165"></a>
+<a name="line-166"></a><a name="Values"></a><span class='hs-comment'>-- | a 'Generator' transformer that asks only for the values contained in an indexed container</span>
+<a name="line-167"></a><a name="Values"></a><span class='hs-keyword'>newtype</span> <span class='hs-conid'>Values</span> <span class='hs-varid'>c</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>Values</span> <span class='hs-layout'>{</span> <span class='hs-varid'>getValues</span> <span class='hs-keyglyph'>::</span> <span class='hs-varid'>c</span> <span class='hs-layout'>}</span> 
+<a name="line-168"></a>
+<a name="line-169"></a><span class='hs-cpp'>#ifdef M_CONTAINERS</span>
+<a name="line-170"></a><span class='hs-keyword'>instance</span> <span class='hs-conid'>Generator</span> <span class='hs-layout'>(</span><span class='hs-conid'>Values</span> <span class='hs-layout'>(</span><span class='hs-conid'>IntMap</span> <span class='hs-varid'>v</span><span class='hs-layout'>)</span><span class='hs-layout'>)</span> <span class='hs-keyword'>where</span>
+<a name="line-171"></a>    <span class='hs-keyword'>type</span> <span class='hs-conid'>Elem</span> <span class='hs-layout'>(</span><span class='hs-conid'>Values</span> <span class='hs-layout'>(</span><span class='hs-conid'>IntMap</span> <span class='hs-varid'>v</span><span class='hs-layout'>)</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>v</span>
+<a name="line-172"></a>    <span class='hs-varid'>mapReduce</span> <span class='hs-varid'>f</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>mapReduce</span> <span class='hs-varid'>f</span> <span class='hs-varop'>.</span> <span class='hs-conid'>IntMap</span><span class='hs-varop'>.</span><span class='hs-varid'>elems</span> <span class='hs-varop'>.</span> <span class='hs-varid'>getValues</span>
+<a name="line-173"></a>
+<a name="line-174"></a><span class='hs-keyword'>instance</span> <span class='hs-conid'>Generator</span> <span class='hs-layout'>(</span><span class='hs-conid'>Values</span> <span class='hs-layout'>(</span><span class='hs-conid'>Map</span> <span class='hs-varid'>k</span> <span class='hs-varid'>v</span><span class='hs-layout'>)</span><span class='hs-layout'>)</span> <span class='hs-keyword'>where</span>
+<a name="line-175"></a>    <span class='hs-keyword'>type</span> <span class='hs-conid'>Elem</span> <span class='hs-layout'>(</span><span class='hs-conid'>Values</span> <span class='hs-layout'>(</span><span class='hs-conid'>Map</span> <span class='hs-varid'>k</span> <span class='hs-varid'>v</span><span class='hs-layout'>)</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>v</span>
+<a name="line-176"></a>    <span class='hs-varid'>mapReduce</span> <span class='hs-varid'>f</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>mapReduce</span> <span class='hs-varid'>f</span> <span class='hs-varop'>.</span> <span class='hs-conid'>Map</span><span class='hs-varop'>.</span><span class='hs-varid'>elems</span> <span class='hs-varop'>.</span> <span class='hs-varid'>getValues</span>
+<a name="line-177"></a><span class='hs-cpp'>#endif</span>
+<a name="line-178"></a>
+<a name="line-179"></a><span class='hs-cpp'>#ifdef M_ARRAY</span>
+<a name="line-180"></a><span class='hs-keyword'>instance</span> <span class='hs-conid'>Ix</span> <span class='hs-varid'>i</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>Generator</span> <span class='hs-layout'>(</span><span class='hs-conid'>Values</span> <span class='hs-layout'>(</span><span class='hs-conid'>Array</span> <span class='hs-varid'>i</span> <span class='hs-varid'>e</span><span class='hs-layout'>)</span><span class='hs-layout'>)</span> <span class='hs-keyword'>where</span>
+<a name="line-181"></a>    <span class='hs-keyword'>type</span> <span class='hs-conid'>Elem</span> <span class='hs-layout'>(</span><span class='hs-conid'>Values</span> <span class='hs-layout'>(</span><span class='hs-conid'>Array</span> <span class='hs-varid'>i</span> <span class='hs-varid'>e</span><span class='hs-layout'>)</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>e</span>
+<a name="line-182"></a>    <span class='hs-varid'>mapReduce</span> <span class='hs-varid'>f</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>mapReduce</span> <span class='hs-varid'>f</span> <span class='hs-varop'>.</span> <span class='hs-varid'>elems</span> <span class='hs-varop'>.</span> <span class='hs-varid'>getValues</span>
+<a name="line-183"></a><span class='hs-cpp'>#endif</span>
+<a name="line-184"></a>
+<a name="line-185"></a><a name="Char8"></a><span class='hs-comment'>-- | a 'Generator' transformer that treats 'Word8' as 'Char'</span>
+<a name="line-186"></a><a name="Char8"></a><span class='hs-comment'>-- This lets you use a 'ByteString' as a 'Char' source without going through a 'Monoid' transformer like 'UTF8'</span>
+<a name="line-187"></a><a name="Char8"></a><span class='hs-keyword'>newtype</span> <span class='hs-conid'>Char8</span> <span class='hs-varid'>c</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>Char8</span> <span class='hs-layout'>{</span> <span class='hs-varid'>getChar8</span> <span class='hs-keyglyph'>::</span> <span class='hs-varid'>c</span> <span class='hs-layout'>}</span> 
+<a name="line-188"></a>
+<a name="line-189"></a><span class='hs-cpp'>#ifdef M_BYTESTRING</span>
+<a name="line-190"></a><span class='hs-keyword'>instance</span> <span class='hs-conid'>Generator</span> <span class='hs-layout'>(</span><span class='hs-conid'>Char8</span> <span class='hs-conid'>Strict</span><span class='hs-varop'>.</span><span class='hs-conid'>ByteString</span><span class='hs-layout'>)</span> <span class='hs-keyword'>where</span>
+<a name="line-191"></a>    <span class='hs-keyword'>type</span> <span class='hs-conid'>Elem</span> <span class='hs-layout'>(</span><span class='hs-conid'>Char8</span> <span class='hs-conid'>Strict</span><span class='hs-varop'>.</span><span class='hs-conid'>ByteString</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>Char</span>
+<a name="line-192"></a>    <span class='hs-varid'>mapTo</span> <span class='hs-varid'>f</span> <span class='hs-varid'>m</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>Strict8</span><span class='hs-varop'>.</span><span class='hs-varid'>foldl'</span> <span class='hs-layout'>(</span><span class='hs-keyglyph'>\</span><span class='hs-varid'>a</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-varid'>snoc</span> <span class='hs-varid'>a</span> <span class='hs-varop'>.</span> <span class='hs-varid'>f</span><span class='hs-layout'>)</span> <span class='hs-varid'>m</span> <span class='hs-varop'>.</span> <span class='hs-varid'>getChar8</span>
+<a name="line-193"></a>
+<a name="line-194"></a><span class='hs-keyword'>instance</span> <span class='hs-conid'>Generator</span> <span class='hs-layout'>(</span><span class='hs-conid'>Char8</span> <span class='hs-conid'>Lazy</span><span class='hs-varop'>.</span><span class='hs-conid'>ByteString</span><span class='hs-layout'>)</span> <span class='hs-keyword'>where</span>
+<a name="line-195"></a>    <span class='hs-keyword'>type</span> <span class='hs-conid'>Elem</span> <span class='hs-layout'>(</span><span class='hs-conid'>Char8</span> <span class='hs-conid'>Lazy</span><span class='hs-varop'>.</span><span class='hs-conid'>ByteString</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>Char</span>
+<a name="line-196"></a>    <span class='hs-varid'>mapReduce</span> <span class='hs-varid'>f</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>fold</span> <span class='hs-varop'>.</span> <span class='hs-varid'>parMap</span> <span class='hs-varid'>rwhnf</span> <span class='hs-layout'>(</span><span class='hs-varid'>mapReduce</span> <span class='hs-varid'>f</span> <span class='hs-varop'>.</span> <span class='hs-conid'>Char8</span><span class='hs-layout'>)</span> <span class='hs-varop'>.</span> <span class='hs-conid'>Lazy8</span><span class='hs-varop'>.</span><span class='hs-varid'>toChunks</span> <span class='hs-varop'>.</span> <span class='hs-varid'>getChar8</span>
+<a name="line-197"></a><span class='hs-cpp'>#endif</span>
+<a name="line-198"></a>
+<a name="line-199"></a><a name="reduce"></a><span class='hs-comment'>-- | Apply a 'Reducer' directly to the elements of a 'Generator'</span>
+<a name="line-200"></a><span class='hs-definition'>reduce</span> <span class='hs-keyglyph'>::</span> <span class='hs-layout'>(</span><span class='hs-conid'>Generator</span> <span class='hs-varid'>c</span><span class='hs-layout'>,</span> <span class='hs-conid'>Elem</span> <span class='hs-varid'>c</span> <span class='hs-varop'>`Reducer`</span> <span class='hs-varid'>m</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-varid'>c</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-varid'>m</span>
+<a name="line-201"></a><span class='hs-definition'>reduce</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>mapReduce</span> <span class='hs-varid'>id</span>
+<a name="line-202"></a><span class='hs-cpp'>#ifdef M_BYTESTRING</span>
+<a name="line-203"></a><span class='hs-comment'>{-# SPECIALIZE reduce :: (Word8 `Reducer` m) =&gt; Strict.ByteString -&gt; m #-}</span>
+<a name="line-204"></a><span class='hs-comment'>{-# SPECIALIZE reduce :: (Word8 `Reducer` m) =&gt; Lazy.ByteString -&gt; m #-}</span>
+<a name="line-205"></a><span class='hs-comment'>{-# SPECIALIZE reduce :: (Char `Reducer` m) =&gt; Char8 Strict.ByteString -&gt; m #-}</span>
+<a name="line-206"></a><span class='hs-comment'>{-# SPECIALIZE reduce :: (Char `Reducer` m) =&gt; Char8 Lazy.ByteString -&gt; m #-}</span>
+<a name="line-207"></a><span class='hs-cpp'>#endif</span>
+<a name="line-208"></a><span class='hs-comment'>{-# SPECIALIZE reduce :: (c `Reducer` m) =&gt; [c] -&gt; m #-}</span>
+<a name="line-209"></a><span class='hs-cpp'>#ifdef M_FINGERTREE</span>
+<a name="line-210"></a><span class='hs-comment'>{-# SPECIALIZE reduce :: (Generator (FingerTree v e), e `Reducer` m) =&gt; FingerTree v e -&gt; m #-}</span>
+<a name="line-211"></a><span class='hs-cpp'>#endif</span>
+<a name="line-212"></a><span class='hs-cpp'>#ifdef M_TEXT</span>
+<a name="line-213"></a><span class='hs-comment'>{-# SPECIALIZE reduce :: (Char `Reducer` m) =&gt; Text -&gt; m #-}</span>
+<a name="line-214"></a><span class='hs-cpp'>#endif</span>
+<a name="line-215"></a><span class='hs-cpp'>#ifdef M_CONTAINERS</span>
+<a name="line-216"></a><span class='hs-comment'>{-# SPECIALIZE reduce :: (e `Reducer` m) =&gt; Seq e -&gt; m #-}</span>
+<a name="line-217"></a><span class='hs-comment'>{-# SPECIALIZE reduce :: (Int `Reducer` m) =&gt; IntSet -&gt; m #-}</span>
+<a name="line-218"></a><span class='hs-comment'>{-# SPECIALIZE reduce :: (a `Reducer` m) =&gt; Set a -&gt; m #-}</span>
+<a name="line-219"></a><span class='hs-comment'>{-# SPECIALIZE reduce :: ((Int,v) `Reducer` m) =&gt; IntMap v -&gt; m #-}</span>
+<a name="line-220"></a><span class='hs-comment'>{-# SPECIALIZE reduce :: ((k,v) `Reducer` m) =&gt; Map k v -&gt; m #-}</span>
+<a name="line-221"></a><span class='hs-comment'>{-# SPECIALIZE reduce :: (Int `Reducer` m) =&gt; Keys (IntMap v) -&gt; m #-}</span>
+<a name="line-222"></a><span class='hs-comment'>{-# SPECIALIZE reduce :: (k `Reducer` m) =&gt; Keys (Map k v) -&gt; m #-}</span>
+<a name="line-223"></a><span class='hs-comment'>{-# SPECIALIZE reduce :: (v `Reducer` m) =&gt; Values (IntMap v) -&gt; m #-}</span>
+<a name="line-224"></a><span class='hs-comment'>{-# SPECIALIZE reduce :: (v `Reducer` m) =&gt; Values (Map k v) -&gt; m #-}</span>
+<a name="line-225"></a><span class='hs-cpp'>#endif</span>
+<a name="line-226"></a>
+<a name="line-227"></a><a name="mapReduceWith"></a><span class='hs-definition'>mapReduceWith</span> <span class='hs-keyglyph'>::</span> <span class='hs-layout'>(</span><span class='hs-conid'>Generator</span> <span class='hs-varid'>c</span><span class='hs-layout'>,</span> <span class='hs-varid'>e</span> <span class='hs-varop'>`Reducer`</span> <span class='hs-varid'>m</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-layout'>(</span><span class='hs-varid'>m</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-varid'>n</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-layout'>(</span><span class='hs-conid'>Elem</span> <span class='hs-varid'>c</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-varid'>e</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-varid'>c</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-varid'>n</span>
+<a name="line-228"></a><span class='hs-definition'>mapReduceWith</span> <span class='hs-varid'>f</span> <span class='hs-varid'>g</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>f</span> <span class='hs-varop'>.</span> <span class='hs-varid'>mapReduce</span> <span class='hs-varid'>g</span>
+<a name="line-229"></a><span class='hs-comment'>{-# INLINE mapReduceWith #-}</span>
+<a name="line-230"></a>
+<a name="line-231"></a><a name="reduceWith"></a><span class='hs-definition'>reduceWith</span> <span class='hs-keyglyph'>::</span> <span class='hs-layout'>(</span><span class='hs-conid'>Generator</span> <span class='hs-varid'>c</span><span class='hs-layout'>,</span> <span class='hs-conid'>Elem</span> <span class='hs-varid'>c</span> <span class='hs-varop'>`Reducer`</span> <span class='hs-varid'>m</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-layout'>(</span><span class='hs-varid'>m</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-varid'>n</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-varid'>c</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-varid'>n</span>
+<a name="line-232"></a><span class='hs-definition'>reduceWith</span> <span class='hs-varid'>f</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>f</span> <span class='hs-varop'>.</span> <span class='hs-varid'>reduce</span>
+<a name="line-233"></a><span class='hs-comment'>{-# INLINE reduceWith #-}</span>
hunk ./doc/html/monoids/src/Data-Group-Sugar.html 20
-<a name="line-12"></a><span class='hs-comment'>-- &gt; import Prelude hiding ((-), (+), negate, subtract)</span>
+<a name="line-12"></a><span class='hs-comment'>-- &gt; import Prelude hiding ((-), (+), (*), (/), (^), (^^), negate, subtract, recip)</span>
hunk ./doc/html/monoids/src/Data-Group-Sugar.html 26
-<a name="line-18"></a>    <span class='hs-layout'>(</span> <span class='hs-keyword'>module</span> <span class='hs-conid'>Data</span><span class='hs-varop'>.</span><span class='hs-conid'>Monoid</span><span class='hs-varop'>.</span><span class='hs-conid'>Additive</span><span class='hs-varop'>.</span><span class='hs-conid'>Sugar</span>
+<a name="line-18"></a>    <span class='hs-layout'>(</span> <span class='hs-keyword'>module</span> <span class='hs-conid'>Data</span><span class='hs-varop'>.</span><span class='hs-conid'>Monoid</span><span class='hs-varop'>.</span><span class='hs-conid'>Sugar</span>
hunk ./doc/html/monoids/src/Data-Group-Sugar.html 31
-<a name="line-23"></a>    <span class='hs-layout'>)</span> <span class='hs-keyword'>where</span>
-<a name="line-24"></a>
-<a name="line-25"></a><span class='hs-keyword'>import</span> <span class='hs-conid'>Data</span><span class='hs-varop'>.</span><span class='hs-conid'>Monoid</span><span class='hs-varop'>.</span><span class='hs-conid'>Additive</span><span class='hs-varop'>.</span><span class='hs-conid'>Sugar</span>
-<a name="line-26"></a><span class='hs-keyword'>import</span> <span class='hs-conid'>Data</span><span class='hs-varop'>.</span><span class='hs-conid'>Group</span>
-<a name="line-27"></a><span class='hs-keyword'>import</span> <span class='hs-conid'>Prelude</span> <span class='hs-varid'>hiding</span> <span class='hs-layout'>(</span><span class='hs-layout'>(</span><span class='hs-comment'>-</span><span class='hs-layout'>)</span><span class='hs-layout'>,</span> <span class='hs-varid'>negate</span><span class='hs-layout'>,</span> <span class='hs-varid'>subtract</span><span class='hs-layout'>)</span>
+<a name="line-23"></a>    <span class='hs-layout'>,</span> <span class='hs-layout'>(</span><span class='hs-varop'>/</span><span class='hs-layout'>)</span>
+<a name="line-24"></a>    <span class='hs-layout'>,</span> <span class='hs-layout'>(</span><span class='hs-varop'>.\.</span><span class='hs-layout'>)</span>
+<a name="line-25"></a>    <span class='hs-layout'>,</span> <span class='hs-layout'>(</span><span class='hs-varop'>^^</span><span class='hs-layout'>)</span>
+<a name="line-26"></a>    <span class='hs-layout'>,</span> <span class='hs-varid'>recip</span>
+<a name="line-27"></a>    <span class='hs-layout'>)</span> <span class='hs-keyword'>where</span>
hunk ./doc/html/monoids/src/Data-Group-Sugar.html 37
-<a name="line-29"></a><span class='hs-keyword'>infixl</span> <span class='hs-num'>7</span> <span class='hs-comment'>-</span>
-<a name="line-30"></a>
-<a name="line-31"></a><span class='hs-layout'>(</span><span class='hs-comment'>-</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>::</span> <span class='hs-conid'>Group</span> <span class='hs-varid'>g</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-varid'>g</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-varid'>g</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-varid'>g</span>
-<a name="line-32"></a><span class='hs-layout'>(</span><span class='hs-comment'>-</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>minus</span>
+<a name="line-29"></a><span class='hs-keyword'>import</span> <span class='hs-conid'>Data</span><span class='hs-varop'>.</span><span class='hs-conid'>Monoid</span><span class='hs-varop'>.</span><span class='hs-conid'>Sugar</span>
+<a name="line-30"></a><span class='hs-keyword'>import</span> <span class='hs-conid'>Data</span><span class='hs-varop'>.</span><span class='hs-conid'>Group</span><span class='hs-varop'>.</span><span class='hs-conid'>Combinators</span> <span class='hs-keyword'>as</span> <span class='hs-conid'>Group</span>
+<a name="line-31"></a><span class='hs-keyword'>import</span> <span class='hs-conid'>Data</span><span class='hs-varop'>.</span><span class='hs-conid'>Group</span>
+<a name="line-32"></a><span class='hs-keyword'>import</span> <span class='hs-conid'>Prelude</span> <span class='hs-varid'>hiding</span> <span class='hs-layout'>(</span><span class='hs-layout'>(</span><span class='hs-comment'>-</span><span class='hs-layout'>)</span><span class='hs-layout'>,</span> <span class='hs-layout'>(</span><span class='hs-varop'>+</span><span class='hs-layout'>)</span><span class='hs-layout'>,</span> <span class='hs-layout'>(</span><span class='hs-varop'>*</span><span class='hs-layout'>)</span><span class='hs-layout'>,</span> <span class='hs-layout'>(</span><span class='hs-varop'>/</span><span class='hs-layout'>)</span><span class='hs-layout'>,</span> <span class='hs-layout'>(</span><span class='hs-varop'>^^</span><span class='hs-layout'>)</span><span class='hs-layout'>,</span> <span class='hs-varid'>negate</span><span class='hs-layout'>,</span> <span class='hs-varid'>subtract</span><span class='hs-layout'>,</span> <span class='hs-varid'>recip</span><span class='hs-layout'>)</span>
hunk ./doc/html/monoids/src/Data-Group-Sugar.html 42
-<a name="line-34"></a><a name="negate"></a><span class='hs-definition'>negate</span> <span class='hs-keyglyph'>::</span> <span class='hs-conid'>Group</span> <span class='hs-varid'>g</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-varid'>g</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-varid'>g</span>
-<a name="line-35"></a><span class='hs-definition'>negate</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>gnegate</span>
-<a name="line-36"></a>
-<a name="line-37"></a><a name="subtract"></a><span class='hs-definition'>subtract</span> <span class='hs-keyglyph'>::</span> <span class='hs-conid'>Group</span> <span class='hs-varid'>g</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-varid'>g</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-varid'>g</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-varid'>g</span>
-<a name="line-38"></a><span class='hs-definition'>subtract</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>gsubtract</span>
+<a name="line-34"></a><span class='hs-keyword'>infixl</span> <span class='hs-num'>8</span> <span class='hs-varop'>/</span>
+<a name="line-35"></a><span class='hs-keyword'>infixr</span> <span class='hs-num'>8</span> <span class='hs-varop'>.\.</span>
+<a name="line-36"></a><span class='hs-keyword'>infixl</span> <span class='hs-num'>7</span> <span class='hs-comment'>-</span>
+<a name="line-37"></a>
+<a name="line-38"></a><span class='hs-layout'>(</span><span class='hs-comment'>-</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>::</span> <span class='hs-conid'>Group</span> <span class='hs-varid'>g</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-varid'>g</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-varid'>g</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-varid'>g</span>
+<a name="line-39"></a><span class='hs-layout'>(</span><span class='hs-comment'>-</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>minus</span>
+<a name="line-40"></a>
+<a name="line-41"></a><a name="negate"></a><span class='hs-definition'>negate</span> <span class='hs-keyglyph'>::</span> <span class='hs-conid'>Group</span> <span class='hs-varid'>g</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-varid'>g</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-varid'>g</span>
+<a name="line-42"></a><span class='hs-definition'>negate</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>gnegate</span>
+<a name="line-43"></a>
+<a name="line-44"></a><a name="subtract"></a><span class='hs-definition'>subtract</span> <span class='hs-keyglyph'>::</span> <span class='hs-conid'>Group</span> <span class='hs-varid'>g</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-varid'>g</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-varid'>g</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-varid'>g</span>
+<a name="line-45"></a><span class='hs-definition'>subtract</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>gsubtract</span>
+<a name="line-46"></a>
+<a name="line-47"></a><a name="/"></a><span class='hs-layout'>(</span><span class='hs-varop'>/</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>::</span> <span class='hs-conid'>MultiplicativeGroup</span> <span class='hs-varid'>g</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-varid'>g</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-varid'>g</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-varid'>g</span>
+<a name="line-48"></a><span class='hs-layout'>(</span><span class='hs-varop'>/</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>over</span>
+<a name="line-49"></a>
+<a name="line-50"></a><a name=".\."></a><span class='hs-layout'>(</span><span class='hs-varop'>.\.</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>::</span> <span class='hs-conid'>MultiplicativeGroup</span> <span class='hs-varid'>g</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-varid'>g</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-varid'>g</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-varid'>g</span>
+<a name="line-51"></a><span class='hs-layout'>(</span><span class='hs-varop'>.\.</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>under</span>
+<a name="line-52"></a>
+<a name="line-53"></a><a name="recip"></a><span class='hs-definition'>recip</span> <span class='hs-keyglyph'>::</span> <span class='hs-conid'>MultiplicativeGroup</span> <span class='hs-varid'>g</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-varid'>g</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-varid'>g</span>
+<a name="line-54"></a><span class='hs-definition'>recip</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>grecip</span>
+<a name="line-55"></a>
+<a name="line-56"></a><a name="^^"></a><span class='hs-layout'>(</span><span class='hs-varop'>^^</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>::</span> <span class='hs-conid'>MultiplicativeGroup</span> <span class='hs-varid'>g</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-varid'>g</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-conid'>Integer</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-varid'>g</span>
+<a name="line-57"></a><a name="g"></a><span class='hs-definition'>g</span> <span class='hs-varop'>^^</span> <span class='hs-varid'>n</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>getLog</span> <span class='hs-layout'>(</span><span class='hs-conid'>Group</span><span class='hs-varop'>.</span><span class='hs-varid'>replicate</span> <span class='hs-layout'>(</span><span class='hs-conid'>Log</span> <span class='hs-varid'>g</span><span class='hs-layout'>)</span> <span class='hs-varid'>n</span><span class='hs-layout'>)</span>
hunk ./doc/html/monoids/src/Data-Group.html 23
-<a name="line-15"></a>    <span class='hs-layout'>(</span> <span class='hs-keyword'>module</span> <span class='hs-conid'>Data</span><span class='hs-varop'>.</span><span class='hs-conid'>Monoid</span><span class='hs-varop'>.</span><span class='hs-conid'>Additive</span>
+<a name="line-15"></a>    <span class='hs-layout'>(</span> <span class='hs-keyword'>module</span> <span class='hs-conid'>Data</span><span class='hs-varop'>.</span><span class='hs-conid'>Monoid</span><span class='hs-varop'>.</span><span class='hs-conid'>Multiplicative</span>
hunk ./doc/html/monoids/src/Data-Group.html 28
-<a name="line-20"></a>    <span class='hs-layout'>)</span> <span class='hs-keyword'>where</span>
-<a name="line-21"></a>
-<a name="line-22"></a><span class='hs-keyword'>import</span> <span class='hs-conid'>Data</span><span class='hs-varop'>.</span><span class='hs-conid'>Monoid</span><span class='hs-varop'>.</span><span class='hs-conid'>Additive</span>
-<a name="line-23"></a><span class='hs-keyword'>import</span> <span class='hs-conid'>Data</span><span class='hs-varop'>.</span><span class='hs-conid'>Monoid</span><span class='hs-varop'>.</span><span class='hs-conid'>Self</span>
-<a name="line-24"></a><span class='hs-keyword'>import</span> <span class='hs-conid'>Data</span><span class='hs-varop'>.</span><span class='hs-conid'>Monoid</span><span class='hs-varop'>.</span><span class='hs-conid'>FromString</span>
-<a name="line-25"></a><span class='hs-keyword'>import</span> <span class='hs-conid'>Data</span><span class='hs-varop'>.</span><span class='hs-conid'>Monoid</span><span class='hs-varop'>.</span><span class='hs-conid'>Reducer</span>
-<a name="line-26"></a>
-<a name="line-27"></a><span class='hs-keyword'>infixl</span> <span class='hs-num'>6</span> <span class='hs-varop'>`minus`</span>
+<a name="line-20"></a>    <span class='hs-layout'>,</span> <span class='hs-conid'>MultiplicativeGroup</span>
+<a name="line-21"></a>    <span class='hs-layout'>,</span> <span class='hs-varid'>over</span>
+<a name="line-22"></a>    <span class='hs-layout'>,</span> <span class='hs-varid'>under</span>
+<a name="line-23"></a>    <span class='hs-layout'>,</span> <span class='hs-varid'>grecip</span>
+<a name="line-24"></a>    <span class='hs-layout'>)</span> <span class='hs-keyword'>where</span>
+<a name="line-25"></a>
+<a name="line-26"></a><span class='hs-keyword'>import</span> <span class='hs-conid'>Data</span><span class='hs-varop'>.</span><span class='hs-conid'>Monoid</span><span class='hs-varop'>.</span><span class='hs-conid'>Multiplicative</span>
+<a name="line-27"></a><span class='hs-keyword'>import</span> <span class='hs-conid'>Data</span><span class='hs-varop'>.</span><span class='hs-conid'>Monoid</span><span class='hs-varop'>.</span><span class='hs-conid'>Self</span>
hunk ./doc/html/monoids/src/Data-Group.html 37
-<a name="line-29"></a><a name="Group"></a><span class='hs-comment'>-- | Minimal complete definition: 'gnegate' or 'minus'</span>
-<a name="line-30"></a><a name="Group"></a><span class='hs-keyword'>class</span> <span class='hs-conid'>Monoid</span> <span class='hs-varid'>a</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>Group</span> <span class='hs-varid'>a</span> <span class='hs-keyword'>where</span>
-<a name="line-31"></a>    <span class='hs-comment'>-- additive inverse</span>
-<a name="line-32"></a>    <span class='hs-varid'>gnegate</span> <span class='hs-keyglyph'>::</span> <span class='hs-varid'>a</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-varid'>a</span>
-<a name="line-33"></a>    <span class='hs-varid'>minus</span> <span class='hs-keyglyph'>::</span> <span class='hs-varid'>a</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-varid'>a</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-varid'>a</span>
-<a name="line-34"></a>    <span class='hs-varid'>gsubtract</span> <span class='hs-keyglyph'>::</span> <span class='hs-varid'>a</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-varid'>a</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-varid'>a</span> 
-<a name="line-35"></a>
-<a name="line-36"></a>    <span class='hs-varid'>gnegate</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>minus</span> <span class='hs-varid'>zero</span>
-<a name="line-37"></a>    <span class='hs-varid'>a</span> <span class='hs-varop'>`minus`</span> <span class='hs-varid'>b</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>a</span> <span class='hs-varop'>`plus`</span> <span class='hs-varid'>gnegate</span> <span class='hs-varid'>b</span> 
-<a name="line-38"></a>    <span class='hs-varid'>a</span> <span class='hs-varop'>`gsubtract`</span> <span class='hs-varid'>b</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>gnegate</span> <span class='hs-varid'>a</span> <span class='hs-varop'>`plus`</span> <span class='hs-varid'>b</span>
-<a name="line-39"></a>
-<a name="line-40"></a><span class='hs-keyword'>instance</span> <span class='hs-conid'>Num</span> <span class='hs-varid'>a</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>Group</span> <span class='hs-layout'>(</span><span class='hs-conid'>Sum</span> <span class='hs-varid'>a</span><span class='hs-layout'>)</span> <span class='hs-keyword'>where</span>
-<a name="line-41"></a>    <span class='hs-varid'>gnegate</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>Sum</span> <span class='hs-varop'>.</span> <span class='hs-varid'>negate</span> <span class='hs-varop'>.</span> <span class='hs-varid'>getSum</span>
-<a name="line-42"></a>    <span class='hs-conid'>Sum</span> <span class='hs-varid'>a</span> <span class='hs-varop'>`minus`</span> <span class='hs-conid'>Sum</span> <span class='hs-varid'>b</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>Sum</span> <span class='hs-layout'>(</span><span class='hs-varid'>a</span> <span class='hs-comment'>-</span> <span class='hs-varid'>b</span><span class='hs-layout'>)</span>
-<a name="line-43"></a>    
-<a name="line-44"></a><span class='hs-keyword'>instance</span> <span class='hs-conid'>Fractional</span> <span class='hs-varid'>a</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>Group</span> <span class='hs-layout'>(</span><span class='hs-conid'>Product</span> <span class='hs-varid'>a</span><span class='hs-layout'>)</span> <span class='hs-keyword'>where</span>
-<a name="line-45"></a>    <span class='hs-varid'>gnegate</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>Product</span> <span class='hs-varop'>.</span> <span class='hs-varid'>negate</span> <span class='hs-varop'>.</span> <span class='hs-varid'>getProduct</span>
-<a name="line-46"></a>    <span class='hs-conid'>Product</span> <span class='hs-varid'>a</span> <span class='hs-varop'>`minus`</span> <span class='hs-conid'>Product</span> <span class='hs-varid'>b</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>Product</span> <span class='hs-layout'>(</span><span class='hs-varid'>a</span> <span class='hs-varop'>/</span> <span class='hs-varid'>b</span><span class='hs-layout'>)</span>
-<a name="line-47"></a>    
-<a name="line-48"></a><span class='hs-keyword'>instance</span> <span class='hs-conid'>Group</span> <span class='hs-varid'>a</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>Group</span> <span class='hs-layout'>(</span><span class='hs-conid'>Dual</span> <span class='hs-varid'>a</span><span class='hs-layout'>)</span> <span class='hs-keyword'>where</span>
-<a name="line-49"></a>    <span class='hs-varid'>gnegate</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>Dual</span> <span class='hs-varop'>.</span> <span class='hs-varid'>gnegate</span> <span class='hs-varop'>.</span> <span class='hs-varid'>getDual</span>
-<a name="line-50"></a>
-<a name="line-51"></a><span class='hs-keyword'>instance</span> <span class='hs-conid'>Group</span> <span class='hs-varid'>a</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>Group</span> <span class='hs-layout'>(</span><span class='hs-conid'>Self</span> <span class='hs-varid'>a</span><span class='hs-layout'>)</span> <span class='hs-keyword'>where</span>
-<a name="line-52"></a>    <span class='hs-varid'>gnegate</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>Self</span> <span class='hs-varop'>.</span> <span class='hs-varid'>gnegate</span> <span class='hs-varop'>.</span> <span class='hs-varid'>getSelf</span>
-<a name="line-53"></a>    <span class='hs-conid'>Self</span> <span class='hs-varid'>a</span> <span class='hs-varop'>`minus`</span> <span class='hs-conid'>Self</span> <span class='hs-varid'>b</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>Self</span> <span class='hs-layout'>(</span><span class='hs-varid'>a</span> <span class='hs-varop'>`minus`</span> <span class='hs-varid'>b</span><span class='hs-layout'>)</span>
-<a name="line-54"></a>
-<a name="line-55"></a><span class='hs-keyword'>instance</span> <span class='hs-conid'>Group</span> <span class='hs-varid'>a</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>Group</span> <span class='hs-layout'>(</span><span class='hs-conid'>FromString</span> <span class='hs-varid'>a</span><span class='hs-layout'>)</span> <span class='hs-keyword'>where</span>
-<a name="line-56"></a>    <span class='hs-varid'>gnegate</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>FromString</span> <span class='hs-varop'>.</span> <span class='hs-varid'>gnegate</span> <span class='hs-varop'>.</span> <span class='hs-varid'>getFromString</span>
-<a name="line-57"></a>    <span class='hs-conid'>FromString</span> <span class='hs-varid'>a</span> <span class='hs-varop'>`minus`</span> <span class='hs-conid'>FromString</span> <span class='hs-varid'>b</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>FromString</span> <span class='hs-layout'>(</span><span class='hs-varid'>a</span> <span class='hs-varop'>`minus`</span> <span class='hs-varid'>b</span><span class='hs-layout'>)</span>
-<a name="line-58"></a>
-<a name="line-59"></a><span class='hs-keyword'>instance</span> <span class='hs-conid'>Group</span> <span class='hs-varid'>a</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>Group</span> <span class='hs-layout'>(</span><span class='hs-conid'>ReducedBy</span> <span class='hs-varid'>a</span> <span class='hs-varid'>s</span><span class='hs-layout'>)</span> <span class='hs-keyword'>where</span>
-<a name="line-60"></a>    <span class='hs-varid'>gnegate</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>Reduction</span> <span class='hs-varop'>.</span> <span class='hs-varid'>gnegate</span> <span class='hs-varop'>.</span> <span class='hs-varid'>getReduction</span>
-<a name="line-61"></a>    <span class='hs-conid'>Reduction</span> <span class='hs-varid'>a</span> <span class='hs-varop'>`minus`</span> <span class='hs-conid'>Reduction</span> <span class='hs-varid'>b</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>Reduction</span> <span class='hs-layout'>(</span><span class='hs-varid'>a</span> <span class='hs-varop'>`minus`</span> <span class='hs-varid'>b</span><span class='hs-layout'>)</span>
-<a name="line-62"></a>
+<a name="line-29"></a><span class='hs-cpp'>#ifdef X_OverloadedStrings</span>
+<a name="line-30"></a><span class='hs-keyword'>import</span> <span class='hs-conid'>Data</span><span class='hs-varop'>.</span><span class='hs-conid'>Monoid</span><span class='hs-varop'>.</span><span class='hs-conid'>FromString</span>
+<a name="line-31"></a><span class='hs-cpp'>#endif</span>
+<a name="line-32"></a>
+<a name="line-33"></a><span class='hs-keyword'>infixl</span> <span class='hs-num'>6</span> <span class='hs-varop'>`minus`</span>
+<a name="line-34"></a>
+<a name="line-35"></a><a name="Group"></a><span class='hs-comment'>-- | Minimal complete definition: 'gnegate' or 'minus'</span>
+<a name="line-36"></a><a name="Group"></a><span class='hs-keyword'>class</span> <span class='hs-conid'>Monoid</span> <span class='hs-varid'>a</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>Group</span> <span class='hs-varid'>a</span> <span class='hs-keyword'>where</span>
+<a name="line-37"></a>    <span class='hs-comment'>-- additive inverse</span>
+<a name="line-38"></a>    <span class='hs-varid'>gnegate</span> <span class='hs-keyglyph'>::</span> <span class='hs-varid'>a</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-varid'>a</span>
+<a name="line-39"></a>    <span class='hs-varid'>minus</span> <span class='hs-keyglyph'>::</span> <span class='hs-varid'>a</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-varid'>a</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-varid'>a</span>
+<a name="line-40"></a>    <span class='hs-varid'>gsubtract</span> <span class='hs-keyglyph'>::</span> <span class='hs-varid'>a</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-varid'>a</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-varid'>a</span> 
+<a name="line-41"></a>
+<a name="line-42"></a>    <span class='hs-varid'>gnegate</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>minus</span> <span class='hs-varid'>zero</span>
+<a name="line-43"></a>    <span class='hs-varid'>a</span> <span class='hs-varop'>`minus`</span> <span class='hs-varid'>b</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>a</span> <span class='hs-varop'>`plus`</span> <span class='hs-varid'>gnegate</span> <span class='hs-varid'>b</span> 
+<a name="line-44"></a>    <span class='hs-varid'>a</span> <span class='hs-varop'>`gsubtract`</span> <span class='hs-varid'>b</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>gnegate</span> <span class='hs-varid'>a</span> <span class='hs-varop'>`plus`</span> <span class='hs-varid'>b</span>
+<a name="line-45"></a>
+<a name="line-46"></a><span class='hs-keyword'>instance</span> <span class='hs-conid'>Num</span> <span class='hs-varid'>a</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>Group</span> <span class='hs-layout'>(</span><span class='hs-conid'>Sum</span> <span class='hs-varid'>a</span><span class='hs-layout'>)</span> <span class='hs-keyword'>where</span>
+<a name="line-47"></a>    <span class='hs-varid'>gnegate</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>Sum</span> <span class='hs-varop'>.</span> <span class='hs-varid'>negate</span> <span class='hs-varop'>.</span> <span class='hs-varid'>getSum</span>
+<a name="line-48"></a>    <span class='hs-conid'>Sum</span> <span class='hs-varid'>a</span> <span class='hs-varop'>`minus`</span> <span class='hs-conid'>Sum</span> <span class='hs-varid'>b</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>Sum</span> <span class='hs-layout'>(</span><span class='hs-varid'>a</span> <span class='hs-comment'>-</span> <span class='hs-varid'>b</span><span class='hs-layout'>)</span>
+<a name="line-49"></a>    
+<a name="line-50"></a><span class='hs-keyword'>instance</span> <span class='hs-conid'>Fractional</span> <span class='hs-varid'>a</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>Group</span> <span class='hs-layout'>(</span><span class='hs-conid'>Product</span> <span class='hs-varid'>a</span><span class='hs-layout'>)</span> <span class='hs-keyword'>where</span>
+<a name="line-51"></a>    <span class='hs-varid'>gnegate</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>Product</span> <span class='hs-varop'>.</span> <span class='hs-varid'>negate</span> <span class='hs-varop'>.</span> <span class='hs-varid'>getProduct</span>
+<a name="line-52"></a>    <span class='hs-conid'>Product</span> <span class='hs-varid'>a</span> <span class='hs-varop'>`minus`</span> <span class='hs-conid'>Product</span> <span class='hs-varid'>b</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>Product</span> <span class='hs-layout'>(</span><span class='hs-varid'>a</span> <span class='hs-varop'>/</span> <span class='hs-varid'>b</span><span class='hs-layout'>)</span>
+<a name="line-53"></a>    
+<a name="line-54"></a><span class='hs-keyword'>instance</span> <span class='hs-conid'>Group</span> <span class='hs-varid'>a</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>Group</span> <span class='hs-layout'>(</span><span class='hs-conid'>Dual</span> <span class='hs-varid'>a</span><span class='hs-layout'>)</span> <span class='hs-keyword'>where</span>
+<a name="line-55"></a>    <span class='hs-varid'>gnegate</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>Dual</span> <span class='hs-varop'>.</span> <span class='hs-varid'>gnegate</span> <span class='hs-varop'>.</span> <span class='hs-varid'>getDual</span>
+<a name="line-56"></a>
+<a name="line-57"></a><span class='hs-keyword'>instance</span> <span class='hs-conid'>Group</span> <span class='hs-varid'>a</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>Group</span> <span class='hs-layout'>(</span><span class='hs-conid'>Self</span> <span class='hs-varid'>a</span><span class='hs-layout'>)</span> <span class='hs-keyword'>where</span>
+<a name="line-58"></a>    <span class='hs-varid'>gnegate</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>Self</span> <span class='hs-varop'>.</span> <span class='hs-varid'>gnegate</span> <span class='hs-varop'>.</span> <span class='hs-varid'>getSelf</span>
+<a name="line-59"></a>    <span class='hs-conid'>Self</span> <span class='hs-varid'>a</span> <span class='hs-varop'>`minus`</span> <span class='hs-conid'>Self</span> <span class='hs-varid'>b</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>Self</span> <span class='hs-layout'>(</span><span class='hs-varid'>a</span> <span class='hs-varop'>`minus`</span> <span class='hs-varid'>b</span><span class='hs-layout'>)</span>
+<a name="line-60"></a>
+<a name="line-61"></a><a name="MultiplicativeGroup"></a><span class='hs-comment'>-- | Minimal definition over or grecip</span>
+<a name="line-62"></a><a name="MultiplicativeGroup"></a><span class='hs-keyword'>class</span> <span class='hs-conid'>Multiplicative</span> <span class='hs-varid'>g</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>MultiplicativeGroup</span> <span class='hs-varid'>g</span> <span class='hs-keyword'>where</span>
+<a name="line-63"></a>    <span class='hs-comment'>-- | @x / y@</span>
+<a name="line-64"></a>    <span class='hs-varid'>over</span> <span class='hs-keyglyph'>::</span> <span class='hs-varid'>g</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-varid'>g</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-varid'>g</span>
+<a name="line-65"></a>    <span class='hs-comment'>-- | @x \ y@</span>
+<a name="line-66"></a>    <span class='hs-varid'>under</span> <span class='hs-keyglyph'>::</span> <span class='hs-varid'>g</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-varid'>g</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-varid'>g</span>
+<a name="line-67"></a>    <span class='hs-varid'>grecip</span> <span class='hs-keyglyph'>::</span> <span class='hs-varid'>g</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-varid'>g</span>
+<a name="line-68"></a>
+<a name="line-69"></a>    <span class='hs-varid'>x</span> <span class='hs-varop'>`under`</span> <span class='hs-varid'>y</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>grecip</span> <span class='hs-varid'>x</span> <span class='hs-varop'>`times`</span> <span class='hs-varid'>y</span>
+<a name="line-70"></a>    <span class='hs-varid'>x</span> <span class='hs-varop'>`over`</span> <span class='hs-varid'>y</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>x</span> <span class='hs-varop'>`times`</span> <span class='hs-varid'>grecip</span> <span class='hs-varid'>y</span>
+<a name="line-71"></a>    <span class='hs-varid'>grecip</span> <span class='hs-varid'>x</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>one</span> <span class='hs-varop'>`over`</span> <span class='hs-varid'>x</span>
+<a name="line-72"></a>
+<a name="line-73"></a><span class='hs-keyword'>instance</span> <span class='hs-conid'>MultiplicativeGroup</span> <span class='hs-varid'>g</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>Group</span> <span class='hs-layout'>(</span><span class='hs-conid'>Log</span> <span class='hs-varid'>g</span><span class='hs-layout'>)</span> <span class='hs-keyword'>where</span>
+<a name="line-74"></a>    <span class='hs-conid'>Log</span> <span class='hs-varid'>x</span> <span class='hs-varop'>`minus`</span> <span class='hs-conid'>Log</span> <span class='hs-varid'>y</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>Log</span> <span class='hs-layout'>(</span><span class='hs-varid'>x</span> <span class='hs-varop'>`over`</span> <span class='hs-varid'>y</span><span class='hs-layout'>)</span>
+<a name="line-75"></a>    <span class='hs-conid'>Log</span> <span class='hs-varid'>x</span> <span class='hs-varop'>`gsubtract`</span> <span class='hs-conid'>Log</span> <span class='hs-varid'>y</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>Log</span> <span class='hs-layout'>(</span><span class='hs-varid'>x</span> <span class='hs-varop'>`under`</span> <span class='hs-varid'>y</span><span class='hs-layout'>)</span>
+<a name="line-76"></a>    <span class='hs-varid'>gnegate</span> <span class='hs-layout'>(</span><span class='hs-conid'>Log</span> <span class='hs-varid'>x</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>Log</span> <span class='hs-layout'>(</span><span class='hs-varid'>grecip</span> <span class='hs-varid'>x</span><span class='hs-layout'>)</span>
+<a name="line-77"></a>
+<a name="line-78"></a><span class='hs-keyword'>instance</span> <span class='hs-conid'>Group</span> <span class='hs-varid'>g</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>MultiplicativeGroup</span> <span class='hs-layout'>(</span><span class='hs-conid'>Exp</span> <span class='hs-varid'>g</span><span class='hs-layout'>)</span> <span class='hs-keyword'>where</span>
+<a name="line-79"></a>    <span class='hs-conid'>Exp</span> <span class='hs-varid'>x</span> <span class='hs-varop'>`over`</span> <span class='hs-conid'>Exp</span> <span class='hs-varid'>y</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>Exp</span> <span class='hs-layout'>(</span><span class='hs-varid'>x</span> <span class='hs-varop'>`minus`</span> <span class='hs-varid'>y</span><span class='hs-layout'>)</span>
+<a name="line-80"></a>    <span class='hs-conid'>Exp</span> <span class='hs-varid'>x</span> <span class='hs-varop'>`under`</span> <span class='hs-conid'>Exp</span> <span class='hs-varid'>y</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>Exp</span> <span class='hs-layout'>(</span><span class='hs-varid'>x</span> <span class='hs-varop'>`gsubtract`</span> <span class='hs-varid'>y</span><span class='hs-layout'>)</span>
+<a name="line-81"></a>    <span class='hs-varid'>grecip</span> <span class='hs-layout'>(</span><span class='hs-conid'>Exp</span> <span class='hs-varid'>x</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>Exp</span> <span class='hs-layout'>(</span><span class='hs-varid'>gnegate</span> <span class='hs-varid'>x</span><span class='hs-layout'>)</span>
+<a name="line-82"></a>
+<a name="line-83"></a><span class='hs-keyword'>instance</span> <span class='hs-conid'>MultiplicativeGroup</span> <span class='hs-varid'>g</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>MultiplicativeGroup</span> <span class='hs-layout'>(</span><span class='hs-conid'>Self</span> <span class='hs-varid'>g</span><span class='hs-layout'>)</span> <span class='hs-keyword'>where</span>
+<a name="line-84"></a>    <span class='hs-conid'>Self</span> <span class='hs-varid'>x</span> <span class='hs-varop'>`over`</span> <span class='hs-conid'>Self</span> <span class='hs-varid'>y</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>Self</span> <span class='hs-layout'>(</span><span class='hs-varid'>x</span> <span class='hs-varop'>`over`</span> <span class='hs-varid'>y</span><span class='hs-layout'>)</span>
+<a name="line-85"></a>    <span class='hs-conid'>Self</span> <span class='hs-varid'>x</span> <span class='hs-varop'>`under`</span> <span class='hs-conid'>Self</span> <span class='hs-varid'>y</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>Self</span> <span class='hs-layout'>(</span><span class='hs-varid'>x</span> <span class='hs-varop'>`under`</span> <span class='hs-varid'>y</span><span class='hs-layout'>)</span>
+<a name="line-86"></a>    <span class='hs-varid'>grecip</span> <span class='hs-layout'>(</span><span class='hs-conid'>Self</span> <span class='hs-varid'>x</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>Self</span> <span class='hs-layout'>(</span><span class='hs-varid'>grecip</span> <span class='hs-varid'>x</span><span class='hs-layout'>)</span>
+<a name="line-87"></a>
+<a name="line-88"></a><span class='hs-cpp'>#ifdef M_REFLECTION</span>
+<a name="line-89"></a><span class='hs-keyword'>instance</span> <span class='hs-conid'>MultiplicativeGroup</span> <span class='hs-varid'>g</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>MultiplicativeGroup</span> <span class='hs-layout'>(</span><span class='hs-conid'>ReducedBy</span> <span class='hs-varid'>g</span> <span class='hs-varid'>s</span><span class='hs-layout'>)</span> <span class='hs-keyword'>where</span>
+<a name="line-90"></a>    <span class='hs-conid'>Reduction</span> <span class='hs-varid'>x</span> <span class='hs-varop'>`over`</span> <span class='hs-conid'>Reduction</span> <span class='hs-varid'>y</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>Reduction</span> <span class='hs-layout'>(</span><span class='hs-varid'>x</span> <span class='hs-varop'>`over`</span> <span class='hs-varid'>y</span><span class='hs-layout'>)</span>
+<a name="line-91"></a>    <span class='hs-conid'>Reduction</span> <span class='hs-varid'>x</span> <span class='hs-varop'>`under`</span> <span class='hs-conid'>Reduction</span> <span class='hs-varid'>y</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>Reduction</span> <span class='hs-layout'>(</span><span class='hs-varid'>x</span> <span class='hs-varop'>`under`</span> <span class='hs-varid'>y</span><span class='hs-layout'>)</span>
+<a name="line-92"></a>    <span class='hs-varid'>grecip</span> <span class='hs-layout'>(</span><span class='hs-conid'>Reduction</span> <span class='hs-varid'>x</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>Reduction</span> <span class='hs-layout'>(</span><span class='hs-varid'>grecip</span> <span class='hs-varid'>x</span><span class='hs-layout'>)</span>
+<a name="line-93"></a>
+<a name="line-94"></a><span class='hs-keyword'>instance</span> <span class='hs-conid'>Group</span> <span class='hs-varid'>a</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>Group</span> <span class='hs-layout'>(</span><span class='hs-conid'>ReducedBy</span> <span class='hs-varid'>a</span> <span class='hs-varid'>s</span><span class='hs-layout'>)</span> <span class='hs-keyword'>where</span>
+<a name="line-95"></a>    <span class='hs-varid'>gnegate</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>Reduction</span> <span class='hs-varop'>.</span> <span class='hs-varid'>gnegate</span> <span class='hs-varop'>.</span> <span class='hs-varid'>getReduction</span>
+<a name="line-96"></a>    <span class='hs-conid'>Reduction</span> <span class='hs-varid'>a</span> <span class='hs-varop'>`minus`</span> <span class='hs-conid'>Reduction</span> <span class='hs-varid'>b</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>Reduction</span> <span class='hs-layout'>(</span><span class='hs-varid'>a</span> <span class='hs-varop'>`minus`</span> <span class='hs-varid'>b</span><span class='hs-layout'>)</span>
+<a name="line-97"></a>    <span class='hs-conid'>Reduction</span> <span class='hs-varid'>a</span> <span class='hs-varop'>`gsubtract`</span> <span class='hs-conid'>Reduction</span> <span class='hs-varid'>b</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>Reduction</span> <span class='hs-layout'>(</span><span class='hs-varid'>a</span> <span class='hs-varop'>`gsubtract`</span> <span class='hs-varid'>b</span><span class='hs-layout'>)</span>
+<a name="line-98"></a><span class='hs-cpp'>#endif</span>
+<a name="line-99"></a>
+<a name="line-100"></a><span class='hs-keyword'>instance</span> <span class='hs-conid'>MultiplicativeGroup</span> <span class='hs-varid'>a</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>MultiplicativeGroup</span> <span class='hs-layout'>(</span><span class='hs-conid'>Dual</span> <span class='hs-varid'>a</span><span class='hs-layout'>)</span> <span class='hs-keyword'>where</span>
+<a name="line-101"></a>    <span class='hs-varid'>grecip</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>Dual</span> <span class='hs-varop'>.</span> <span class='hs-varid'>grecip</span> <span class='hs-varop'>.</span> <span class='hs-varid'>getDual</span>
+<a name="line-102"></a>
+<a name="line-103"></a><span class='hs-cpp'>#ifdef X_OverloadedStrings</span>
+<a name="line-104"></a><span class='hs-keyword'>instance</span> <span class='hs-conid'>MultiplicativeGroup</span> <span class='hs-varid'>g</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>MultiplicativeGroup</span> <span class='hs-layout'>(</span><span class='hs-conid'>FromString</span> <span class='hs-varid'>g</span><span class='hs-layout'>)</span> <span class='hs-keyword'>where</span>
+<a name="line-105"></a>    <span class='hs-conid'>FromString</span> <span class='hs-varid'>x</span> <span class='hs-varop'>`over`</span> <span class='hs-conid'>FromString</span> <span class='hs-varid'>y</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>FromString</span> <span class='hs-layout'>(</span><span class='hs-varid'>x</span> <span class='hs-varop'>`over`</span> <span class='hs-varid'>y</span><span class='hs-layout'>)</span>
+<a name="line-106"></a>    <span class='hs-conid'>FromString</span> <span class='hs-varid'>x</span> <span class='hs-varop'>`under`</span> <span class='hs-conid'>FromString</span> <span class='hs-varid'>y</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>FromString</span> <span class='hs-layout'>(</span><span class='hs-varid'>x</span> <span class='hs-varop'>`under`</span> <span class='hs-varid'>y</span><span class='hs-layout'>)</span>
+<a name="line-107"></a>    <span class='hs-varid'>grecip</span> <span class='hs-layout'>(</span><span class='hs-conid'>FromString</span> <span class='hs-varid'>x</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>FromString</span> <span class='hs-layout'>(</span><span class='hs-varid'>grecip</span> <span class='hs-varid'>x</span><span class='hs-layout'>)</span>
+<a name="line-108"></a>
+<a name="line-109"></a><span class='hs-keyword'>instance</span> <span class='hs-conid'>Group</span> <span class='hs-varid'>a</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>Group</span> <span class='hs-layout'>(</span><span class='hs-conid'>FromString</span> <span class='hs-varid'>a</span><span class='hs-layout'>)</span> <span class='hs-keyword'>where</span>
+<a name="line-110"></a>    <span class='hs-varid'>gnegate</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>FromString</span> <span class='hs-varop'>.</span> <span class='hs-varid'>gnegate</span> <span class='hs-varop'>.</span> <span class='hs-varid'>getFromString</span>
+<a name="line-111"></a>    <span class='hs-conid'>FromString</span> <span class='hs-varid'>a</span> <span class='hs-varop'>`minus`</span> <span class='hs-conid'>FromString</span> <span class='hs-varid'>b</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>FromString</span> <span class='hs-layout'>(</span><span class='hs-varid'>a</span> <span class='hs-varop'>`minus`</span> <span class='hs-varid'>b</span><span class='hs-layout'>)</span>
+<a name="line-112"></a>    <span class='hs-conid'>FromString</span> <span class='hs-varid'>a</span> <span class='hs-varop'>`gsubtract`</span> <span class='hs-conid'>FromString</span> <span class='hs-varid'>b</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>FromString</span> <span class='hs-layout'>(</span><span class='hs-varid'>a</span> <span class='hs-varop'>`gsubtract`</span> <span class='hs-varid'>b</span><span class='hs-layout'>)</span>
+<a name="line-113"></a><span class='hs-cpp'>#endif</span>
+<a name="line-114"></a>
hunk ./doc/html/monoids/src/Data-Monoid-Applicative.html 26
-<a name="line-18"></a>    <span class='hs-layout'>,</span> <span class='hs-keyword'>module</span> <span class='hs-conid'>Data</span><span class='hs-varop'>.</span><span class='hs-conid'>Ring</span><span class='hs-varop'>.</span><span class='hs-conid'>Semi</span><span class='hs-varop'>.</span><span class='hs-conid'>Near</span>
-<a name="line-19"></a>    <span class='hs-layout'>,</span> <span class='hs-keyword'>module</span> <span class='hs-conid'>Data</span><span class='hs-varop'>.</span><span class='hs-conid'>Ring</span><span class='hs-varop'>.</span><span class='hs-conid'>Module</span>
-<a name="line-20"></a>    <span class='hs-layout'>,</span> <span class='hs-conid'>Traversal</span><span class='hs-layout'>(</span><span class='hs-conid'>Traversal</span><span class='hs-layout'>,</span><span class='hs-varid'>getTraversal</span><span class='hs-layout'>)</span>
-<a name="line-21"></a>    <span class='hs-layout'>,</span> <span class='hs-conid'>Alt</span><span class='hs-layout'>(</span><span class='hs-conid'>Alt</span><span class='hs-layout'>,</span><span class='hs-varid'>getAlt</span><span class='hs-layout'>)</span>
-<a name="line-22"></a>    <span class='hs-layout'>,</span> <span class='hs-conid'>App</span><span class='hs-layout'>(</span><span class='hs-conid'>App</span><span class='hs-layout'>,</span><span class='hs-varid'>getApp</span><span class='hs-layout'>)</span>
-<a name="line-23"></a>    <span class='hs-layout'>,</span> <span class='hs-varid'>snocTraversal</span>
-<a name="line-24"></a>    <span class='hs-layout'>)</span> <span class='hs-keyword'>where</span>
-<a name="line-25"></a>
-<a name="line-26"></a><span class='hs-keyword'>import</span> <span class='hs-conid'>Control</span><span class='hs-varop'>.</span><span class='hs-conid'>Applicative</span>
-<a name="line-27"></a><span class='hs-keyword'>import</span> <span class='hs-conid'>Data</span><span class='hs-varop'>.</span><span class='hs-conid'>Monoid</span><span class='hs-varop'>.</span><span class='hs-conid'>Reducer</span>
-<a name="line-28"></a><span class='hs-keyword'>import</span> <span class='hs-conid'>Data</span><span class='hs-varop'>.</span><span class='hs-conid'>Ring</span><span class='hs-varop'>.</span><span class='hs-conid'>Semi</span><span class='hs-varop'>.</span><span class='hs-conid'>Near</span>
-<a name="line-29"></a><span class='hs-keyword'>import</span> <span class='hs-conid'>Data</span><span class='hs-varop'>.</span><span class='hs-conid'>Ring</span><span class='hs-varop'>.</span><span class='hs-conid'>Module</span>
-<a name="line-30"></a><span class='hs-keyword'>import</span> <span class='hs-conid'>Control</span><span class='hs-varop'>.</span><span class='hs-conid'>Functor</span><span class='hs-varop'>.</span><span class='hs-conid'>Pointed</span>
-<a name="line-31"></a>
-<a name="line-32"></a><a name="Traversal"></a><span class='hs-comment'>-- | A 'Traversal' uses an glues together 'Applicative' actions with (*&gt;)</span>
-<a name="line-33"></a><a name="Traversal"></a><span class='hs-comment'>--   in the manner of 'traverse_' from "Data.Foldable". Any values returned by </span>
-<a name="line-34"></a><a name="Traversal"></a><span class='hs-comment'>--   reduced actions are discarded.</span>
-<a name="line-35"></a><a name="Traversal"></a><span class='hs-keyword'>newtype</span> <span class='hs-conid'>Traversal</span> <span class='hs-varid'>f</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>Traversal</span> <span class='hs-layout'>{</span> <span class='hs-varid'>getTraversal</span> <span class='hs-keyglyph'>::</span> <span class='hs-varid'>f</span> <span class='hs-conid'>()</span> <span class='hs-layout'>}</span> 
-<a name="line-36"></a>
-<a name="line-37"></a><span class='hs-keyword'>instance</span> <span class='hs-conid'>Applicative</span> <span class='hs-varid'>f</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>Monoid</span> <span class='hs-layout'>(</span><span class='hs-conid'>Traversal</span> <span class='hs-varid'>f</span><span class='hs-layout'>)</span> <span class='hs-keyword'>where</span>
-<a name="line-38"></a>    <span class='hs-varid'>mempty</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>Traversal</span> <span class='hs-layout'>(</span><span class='hs-varid'>pure</span> <span class='hs-conid'>()</span><span class='hs-layout'>)</span>
-<a name="line-39"></a>    <span class='hs-conid'>Traversal</span> <span class='hs-varid'>a</span> <span class='hs-varop'>`mappend`</span> <span class='hs-conid'>Traversal</span> <span class='hs-varid'>b</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>Traversal</span> <span class='hs-layout'>(</span><span class='hs-varid'>a</span> <span class='hs-varop'>*&gt;</span> <span class='hs-varid'>b</span><span class='hs-layout'>)</span>
-<a name="line-40"></a>
-<a name="line-41"></a><span class='hs-keyword'>instance</span> <span class='hs-conid'>Applicative</span> <span class='hs-varid'>f</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>Reducer</span> <span class='hs-layout'>(</span><span class='hs-varid'>f</span> <span class='hs-varid'>a</span><span class='hs-layout'>)</span> <span class='hs-layout'>(</span><span class='hs-conid'>Traversal</span> <span class='hs-varid'>f</span><span class='hs-layout'>)</span> <span class='hs-keyword'>where</span>
-<a name="line-42"></a>    <span class='hs-varid'>unit</span> <span class='hs-varid'>a</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>Traversal</span> <span class='hs-layout'>(</span><span class='hs-varid'>a</span> <span class='hs-varop'>*&gt;</span> <span class='hs-varid'>pure</span> <span class='hs-conid'>()</span><span class='hs-layout'>)</span>
-<a name="line-43"></a>    <span class='hs-varid'>a</span> <span class='hs-varop'>`cons`</span> <span class='hs-conid'>Traversal</span> <span class='hs-varid'>b</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>Traversal</span> <span class='hs-layout'>(</span><span class='hs-varid'>a</span> <span class='hs-varop'>*&gt;</span> <span class='hs-varid'>b</span><span class='hs-layout'>)</span>
-<a name="line-44"></a>    <span class='hs-conid'>Traversal</span> <span class='hs-varid'>a</span> <span class='hs-varop'>`snoc`</span> <span class='hs-varid'>b</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>Traversal</span> <span class='hs-layout'>(</span><span class='hs-varid'>a</span> <span class='hs-varop'>*&gt;</span> <span class='hs-varid'>b</span> <span class='hs-varop'>*&gt;</span> <span class='hs-varid'>pure</span> <span class='hs-conid'>()</span><span class='hs-layout'>)</span>
-<a name="line-45"></a>
-<a name="line-46"></a>
-<a name="line-47"></a><a name="snocTraversal"></a><span class='hs-comment'>-- | Efficiently avoid needlessly rebinding when using 'snoc' on an action that already returns ()</span>
-<a name="line-48"></a><span class='hs-comment'>--   A rewrite rule automatically applies this when possible</span>
-<a name="line-49"></a><span class='hs-definition'>snocTraversal</span> <span class='hs-keyglyph'>::</span> <span class='hs-conid'>Reducer</span> <span class='hs-layout'>(</span><span class='hs-varid'>f</span> <span class='hs-conid'>()</span><span class='hs-layout'>)</span> <span class='hs-layout'>(</span><span class='hs-conid'>Traversal</span> <span class='hs-varid'>f</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>Traversal</span> <span class='hs-varid'>f</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-varid'>f</span> <span class='hs-conid'>()</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-conid'>Traversal</span> <span class='hs-varid'>f</span>
-<a name="line-50"></a><span class='hs-definition'>snocTraversal</span> <span class='hs-varid'>a</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>mappend</span> <span class='hs-varid'>a</span> <span class='hs-varop'>.</span> <span class='hs-conid'>Traversal</span>
-<a name="line-51"></a><span class='hs-comment'>{-# RULES "unitTraversal" unit = Traversal #-}</span>
-<a name="line-52"></a><span class='hs-comment'>{-# RULES "snocTraversal" snoc = snocTraversal #-}</span>
-<a name="line-53"></a>
-<a name="line-54"></a><span class='hs-comment'>-- | A 'Alt' turns any 'Alternative' instance into a 'Monoid'.</span>
-<a name="line-55"></a><span class='hs-comment'>--   It also provides a 'Multiplicative' instance for an 'Applicative' functor wrapped around a 'Monoid'</span>
-<a name="line-56"></a><span class='hs-comment'>--   and asserts that any 'Alternative' applied to a 'Monoid' forms a 'RightSemiNearRing' </span>
-<a name="line-57"></a><span class='hs-comment'>--   under these operations.</span>
-<a name="line-58"></a>
-<a name="line-59"></a><a name="Alt"></a><span class='hs-keyword'>newtype</span> <span class='hs-conid'>Alt</span> <span class='hs-varid'>f</span> <span class='hs-varid'>a</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>Alt</span> <span class='hs-layout'>{</span> <span class='hs-varid'>getAlt</span> <span class='hs-keyglyph'>::</span> <span class='hs-varid'>f</span> <span class='hs-varid'>a</span> <span class='hs-layout'>}</span> 
-<a name="line-60"></a>    <span class='hs-keyword'>deriving</span> <span class='hs-layout'>(</span><span class='hs-conid'>Eq</span><span class='hs-layout'>,</span><span class='hs-conid'>Ord</span><span class='hs-layout'>,</span><span class='hs-conid'>Show</span><span class='hs-layout'>,</span><span class='hs-conid'>Read</span><span class='hs-layout'>,</span><span class='hs-conid'>Functor</span><span class='hs-layout'>,</span><span class='hs-conid'>Applicative</span><span class='hs-layout'>,</span><span class='hs-conid'>Alternative</span><span class='hs-layout'>,</span><span class='hs-conid'>Copointed</span><span class='hs-layout'>)</span>
-<a name="line-61"></a>
-<a name="line-62"></a><span class='hs-keyword'>instance</span> <span class='hs-conid'>Alternative</span> <span class='hs-varid'>f</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>Monoid</span> <span class='hs-layout'>(</span><span class='hs-conid'>Alt</span> <span class='hs-varid'>f</span> <span class='hs-varid'>a</span><span class='hs-layout'>)</span> <span class='hs-keyword'>where</span>
-<a name="line-63"></a>    <span class='hs-varid'>mempty</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>empty</span> 
-<a name="line-64"></a>    <span class='hs-conid'>Alt</span> <span class='hs-varid'>a</span> <span class='hs-varop'>`mappend`</span> <span class='hs-conid'>Alt</span> <span class='hs-varid'>b</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>Alt</span> <span class='hs-layout'>(</span><span class='hs-varid'>a</span> <span class='hs-varop'>&lt;|&gt;</span> <span class='hs-varid'>b</span><span class='hs-layout'>)</span> 
-<a name="line-65"></a>
-<a name="line-66"></a><span class='hs-keyword'>instance</span> <span class='hs-layout'>(</span><span class='hs-conid'>Applicative</span> <span class='hs-varid'>f</span><span class='hs-layout'>,</span> <span class='hs-conid'>Monoid</span> <span class='hs-varid'>a</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>Multiplicative</span> <span class='hs-layout'>(</span><span class='hs-conid'>Alt</span> <span class='hs-varid'>f</span> <span class='hs-varid'>a</span><span class='hs-layout'>)</span> <span class='hs-keyword'>where</span>
-<a name="line-67"></a>    <span class='hs-varid'>one</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>pure</span> <span class='hs-varid'>mempty</span>
-<a name="line-68"></a>    <span class='hs-varid'>times</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>liftA2</span> <span class='hs-varid'>mappend</span>
-<a name="line-69"></a>
-<a name="line-70"></a><span class='hs-keyword'>instance</span> <span class='hs-conid'>Applicative</span> <span class='hs-varid'>f</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>Pointed</span> <span class='hs-layout'>(</span><span class='hs-conid'>Alt</span> <span class='hs-varid'>f</span><span class='hs-layout'>)</span> <span class='hs-keyword'>where</span>
-<a name="line-71"></a>    <span class='hs-varid'>point</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>pure</span>
-<a name="line-72"></a>
-<a name="line-73"></a><span class='hs-keyword'>instance</span> <span class='hs-conid'>Alternative</span> <span class='hs-varid'>f</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>Reducer</span> <span class='hs-layout'>(</span><span class='hs-varid'>f</span> <span class='hs-varid'>a</span><span class='hs-layout'>)</span> <span class='hs-layout'>(</span><span class='hs-conid'>Alt</span> <span class='hs-varid'>f</span> <span class='hs-varid'>a</span><span class='hs-layout'>)</span> <span class='hs-keyword'>where</span>
-<a name="line-74"></a>    <span class='hs-varid'>unit</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>Alt</span> 
+<a name="line-18"></a>    <span class='hs-layout'>,</span> <span class='hs-keyword'>module</span> <span class='hs-conid'>Data</span><span class='hs-varop'>.</span><span class='hs-conid'>Ring</span><span class='hs-varop'>.</span><span class='hs-conid'>Module</span>
+<a name="line-19"></a>    <span class='hs-layout'>,</span> <span class='hs-conid'>Traversal</span><span class='hs-layout'>(</span><span class='hs-conid'>Traversal</span><span class='hs-layout'>,</span><span class='hs-varid'>getTraversal</span><span class='hs-layout'>)</span>
+<a name="line-20"></a>    <span class='hs-layout'>,</span> <span class='hs-conid'>Alt</span><span class='hs-layout'>(</span><span class='hs-conid'>Alt</span><span class='hs-layout'>,</span><span class='hs-varid'>getAlt</span><span class='hs-layout'>)</span>
+<a name="line-21"></a>    <span class='hs-layout'>,</span> <span class='hs-conid'>App</span><span class='hs-layout'>(</span><span class='hs-conid'>App</span><span class='hs-layout'>,</span><span class='hs-varid'>getApp</span><span class='hs-layout'>)</span>
+<a name="line-22"></a>    <span class='hs-layout'>,</span> <span class='hs-varid'>snocTraversal</span>
+<a name="line-23"></a>    <span class='hs-layout'>)</span> <span class='hs-keyword'>where</span>
+<a name="line-24"></a>
+<a name="line-25"></a><span class='hs-keyword'>import</span> <span class='hs-conid'>Control</span><span class='hs-varop'>.</span><span class='hs-conid'>Applicative</span>
+<a name="line-26"></a><span class='hs-keyword'>import</span> <span class='hs-conid'>Data</span><span class='hs-varop'>.</span><span class='hs-conid'>Monoid</span><span class='hs-varop'>.</span><span class='hs-conid'>Reducer</span>
+<a name="line-27"></a><span class='hs-keyword'>import</span> <span class='hs-conid'>Data</span><span class='hs-varop'>.</span><span class='hs-conid'>Ring</span><span class='hs-varop'>.</span><span class='hs-conid'>Module</span>
+<a name="line-28"></a><span class='hs-keyword'>import</span> <span class='hs-conid'>Control</span><span class='hs-varop'>.</span><span class='hs-conid'>Functor</span><span class='hs-varop'>.</span><span class='hs-conid'>Pointed</span>
+<a name="line-29"></a>
+<a name="line-30"></a><a name="Traversal"></a><span class='hs-comment'>-- | A 'Traversal' uses an glues together 'Applicative' actions with (*&gt;)</span>
+<a name="line-31"></a><a name="Traversal"></a><span class='hs-comment'>--   in the manner of 'traverse_' from "Data.Foldable". Any values returned by </span>
+<a name="line-32"></a><a name="Traversal"></a><span class='hs-comment'>--   reduced actions are discarded.</span>
+<a name="line-33"></a><a name="Traversal"></a><span class='hs-keyword'>newtype</span> <span class='hs-conid'>Traversal</span> <span class='hs-varid'>f</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>Traversal</span> <span class='hs-layout'>{</span> <span class='hs-varid'>getTraversal</span> <span class='hs-keyglyph'>::</span> <span class='hs-varid'>f</span> <span class='hs-conid'>()</span> <span class='hs-layout'>}</span> 
+<a name="line-34"></a>
+<a name="line-35"></a><span class='hs-keyword'>instance</span> <span class='hs-conid'>Applicative</span> <span class='hs-varid'>f</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>Monoid</span> <span class='hs-layout'>(</span><span class='hs-conid'>Traversal</span> <span class='hs-varid'>f</span><span class='hs-layout'>)</span> <span class='hs-keyword'>where</span>
+<a name="line-36"></a>    <span class='hs-varid'>mempty</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>Traversal</span> <span class='hs-layout'>(</span><span class='hs-varid'>pure</span> <span class='hs-conid'>()</span><span class='hs-layout'>)</span>
+<a name="line-37"></a>    <span class='hs-conid'>Traversal</span> <span class='hs-varid'>a</span> <span class='hs-varop'>`mappend`</span> <span class='hs-conid'>Traversal</span> <span class='hs-varid'>b</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>Traversal</span> <span class='hs-layout'>(</span><span class='hs-varid'>a</span> <span class='hs-varop'>*&gt;</span> <span class='hs-varid'>b</span><span class='hs-layout'>)</span>
+<a name="line-38"></a>
+<a name="line-39"></a><span class='hs-keyword'>instance</span> <span class='hs-conid'>Applicative</span> <span class='hs-varid'>f</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>Reducer</span> <span class='hs-layout'>(</span><span class='hs-varid'>f</span> <span class='hs-varid'>a</span><span class='hs-layout'>)</span> <span class='hs-layout'>(</span><span class='hs-conid'>Traversal</span> <span class='hs-varid'>f</span><span class='hs-layout'>)</span> <span class='hs-keyword'>where</span>
+<a name="line-40"></a>    <span class='hs-varid'>unit</span> <span class='hs-varid'>a</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>Traversal</span> <span class='hs-layout'>(</span><span class='hs-varid'>a</span> <span class='hs-varop'>*&gt;</span> <span class='hs-varid'>pure</span> <span class='hs-conid'>()</span><span class='hs-layout'>)</span>
+<a name="line-41"></a>    <span class='hs-varid'>a</span> <span class='hs-varop'>`cons`</span> <span class='hs-conid'>Traversal</span> <span class='hs-varid'>b</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>Traversal</span> <span class='hs-layout'>(</span><span class='hs-varid'>a</span> <span class='hs-varop'>*&gt;</span> <span class='hs-varid'>b</span><span class='hs-layout'>)</span>
+<a name="line-42"></a>    <span class='hs-conid'>Traversal</span> <span class='hs-varid'>a</span> <span class='hs-varop'>`snoc`</span> <span class='hs-varid'>b</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>Traversal</span> <span class='hs-layout'>(</span><span class='hs-varid'>a</span> <span class='hs-varop'>*&gt;</span> <span class='hs-varid'>b</span> <span class='hs-varop'>*&gt;</span> <span class='hs-varid'>pure</span> <span class='hs-conid'>()</span><span class='hs-layout'>)</span>
+<a name="line-43"></a>
+<a name="line-44"></a>
+<a name="line-45"></a><a name="snocTraversal"></a><span class='hs-comment'>-- | Efficiently avoid needlessly rebinding when using 'snoc' on an action that already returns ()</span>
+<a name="line-46"></a><span class='hs-comment'>--   A rewrite rule automatically applies this when possible</span>
+<a name="line-47"></a><span class='hs-definition'>snocTraversal</span> <span class='hs-keyglyph'>::</span> <span class='hs-conid'>Reducer</span> <span class='hs-layout'>(</span><span class='hs-varid'>f</span> <span class='hs-conid'>()</span><span class='hs-layout'>)</span> <span class='hs-layout'>(</span><span class='hs-conid'>Traversal</span> <span class='hs-varid'>f</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>Traversal</span> <span class='hs-varid'>f</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-varid'>f</span> <span class='hs-conid'>()</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-conid'>Traversal</span> <span class='hs-varid'>f</span>
+<a name="line-48"></a><span class='hs-definition'>snocTraversal</span> <span class='hs-varid'>a</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>mappend</span> <span class='hs-varid'>a</span> <span class='hs-varop'>.</span> <span class='hs-conid'>Traversal</span>
+<a name="line-49"></a><span class='hs-comment'>{-# RULES "unitTraversal" unit = Traversal #-}</span>
+<a name="line-50"></a><span class='hs-comment'>{-# RULES "snocTraversal" snoc = snocTraversal #-}</span>
+<a name="line-51"></a>
+<a name="line-52"></a><span class='hs-comment'>-- | A 'Alt' turns any 'Alternative' instance into a 'Monoid'.</span>
+<a name="line-53"></a><span class='hs-comment'>--   It also provides a 'Multiplicative' instance for an 'Applicative' functor wrapped around a 'Monoid'</span>
+<a name="line-54"></a><span class='hs-comment'>--   and asserts that any 'Alternative' applied to a 'Monoid' forms a 'RightSemiNearRing' </span>
+<a name="line-55"></a><span class='hs-comment'>--   under these operations.</span>
+<a name="line-56"></a>
+<a name="line-57"></a><a name="Alt"></a><span class='hs-keyword'>newtype</span> <span class='hs-conid'>Alt</span> <span class='hs-varid'>f</span> <span class='hs-varid'>a</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>Alt</span> <span class='hs-layout'>{</span> <span class='hs-varid'>getAlt</span> <span class='hs-keyglyph'>::</span> <span class='hs-varid'>f</span> <span class='hs-varid'>a</span> <span class='hs-layout'>}</span> 
+<a name="line-58"></a>    <span class='hs-keyword'>deriving</span> <span class='hs-layout'>(</span><span class='hs-conid'>Eq</span><span class='hs-layout'>,</span><span class='hs-conid'>Ord</span><span class='hs-layout'>,</span><span class='hs-conid'>Show</span><span class='hs-layout'>,</span><span class='hs-conid'>Read</span><span class='hs-layout'>,</span><span class='hs-conid'>Functor</span><span class='hs-layout'>,</span><span class='hs-conid'>Applicative</span><span class='hs-layout'>,</span><span class='hs-conid'>Alternative</span><span class='hs-layout'>,</span><span class='hs-conid'>Copointed</span><span class='hs-layout'>)</span>
+<a name="line-59"></a>
+<a name="line-60"></a><span class='hs-keyword'>instance</span> <span class='hs-conid'>Alternative</span> <span class='hs-varid'>f</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>Monoid</span> <span class='hs-layout'>(</span><span class='hs-conid'>Alt</span> <span class='hs-varid'>f</span> <span class='hs-varid'>a</span><span class='hs-layout'>)</span> <span class='hs-keyword'>where</span>
+<a name="line-61"></a>    <span class='hs-varid'>mempty</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>empty</span> 
+<a name="line-62"></a>    <span class='hs-conid'>Alt</span> <span class='hs-varid'>a</span> <span class='hs-varop'>`mappend`</span> <span class='hs-conid'>Alt</span> <span class='hs-varid'>b</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>Alt</span> <span class='hs-layout'>(</span><span class='hs-varid'>a</span> <span class='hs-varop'>&lt;|&gt;</span> <span class='hs-varid'>b</span><span class='hs-layout'>)</span> 
+<a name="line-63"></a>
+<a name="line-64"></a><span class='hs-keyword'>instance</span> <span class='hs-layout'>(</span><span class='hs-conid'>Applicative</span> <span class='hs-varid'>f</span><span class='hs-layout'>,</span> <span class='hs-conid'>Monoid</span> <span class='hs-varid'>a</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>Multiplicative</span> <span class='hs-layout'>(</span><span class='hs-conid'>Alt</span> <span class='hs-varid'>f</span> <span class='hs-varid'>a</span><span class='hs-layout'>)</span> <span class='hs-keyword'>where</span>
+<a name="line-65"></a>    <span class='hs-varid'>one</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>pure</span> <span class='hs-varid'>mempty</span>
+<a name="line-66"></a>    <span class='hs-varid'>times</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>liftA2</span> <span class='hs-varid'>mappend</span>
+<a name="line-67"></a>
+<a name="line-68"></a><span class='hs-keyword'>instance</span> <span class='hs-conid'>Applicative</span> <span class='hs-varid'>f</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>Pointed</span> <span class='hs-layout'>(</span><span class='hs-conid'>Alt</span> <span class='hs-varid'>f</span><span class='hs-layout'>)</span> <span class='hs-keyword'>where</span>
+<a name="line-69"></a>    <span class='hs-varid'>point</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>pure</span>
+<a name="line-70"></a>
+<a name="line-71"></a><span class='hs-keyword'>instance</span> <span class='hs-conid'>Alternative</span> <span class='hs-varid'>f</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>Reducer</span> <span class='hs-layout'>(</span><span class='hs-varid'>f</span> <span class='hs-varid'>a</span><span class='hs-layout'>)</span> <span class='hs-layout'>(</span><span class='hs-conid'>Alt</span> <span class='hs-varid'>f</span> <span class='hs-varid'>a</span><span class='hs-layout'>)</span> <span class='hs-keyword'>where</span>
+<a name="line-72"></a>    <span class='hs-varid'>unit</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>Alt</span> 
+<a name="line-73"></a>
+<a name="line-74"></a><span class='hs-keyword'>instance</span> <span class='hs-layout'>(</span><span class='hs-conid'>Alternative</span> <span class='hs-varid'>f</span><span class='hs-layout'>,</span> <span class='hs-conid'>Monoid</span> <span class='hs-varid'>a</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>Ringoid</span> <span class='hs-layout'>(</span><span class='hs-conid'>Alt</span> <span class='hs-varid'>f</span> <span class='hs-varid'>a</span><span class='hs-layout'>)</span>
hunk ./doc/html/monoids/src/Data-Monoid-Applicative.html 84
-<a name="line-76"></a><span class='hs-keyword'>instance</span> <span class='hs-layout'>(</span><span class='hs-conid'>Alternative</span> <span class='hs-varid'>f</span><span class='hs-layout'>,</span> <span class='hs-conid'>Monoid</span> <span class='hs-varid'>a</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>Ringoid</span> <span class='hs-layout'>(</span><span class='hs-conid'>Alt</span> <span class='hs-varid'>f</span> <span class='hs-varid'>a</span><span class='hs-layout'>)</span>
+<a name="line-76"></a><span class='hs-keyword'>instance</span> <span class='hs-layout'>(</span><span class='hs-conid'>Alternative</span> <span class='hs-varid'>f</span><span class='hs-layout'>,</span> <span class='hs-conid'>Monoid</span> <span class='hs-varid'>a</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>RightSemiNearRing</span> <span class='hs-layout'>(</span><span class='hs-conid'>Alt</span> <span class='hs-varid'>f</span> <span class='hs-varid'>a</span><span class='hs-layout'>)</span>
hunk ./doc/html/monoids/src/Data-Monoid-Applicative.html 86
-<a name="line-78"></a><span class='hs-keyword'>instance</span> <span class='hs-layout'>(</span><span class='hs-conid'>Alternative</span> <span class='hs-varid'>f</span><span class='hs-layout'>,</span> <span class='hs-conid'>Monoid</span> <span class='hs-varid'>a</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>RightSemiNearRing</span> <span class='hs-layout'>(</span><span class='hs-conid'>Alt</span> <span class='hs-varid'>f</span> <span class='hs-varid'>a</span><span class='hs-layout'>)</span>
+<a name="line-78"></a><span class='hs-comment'>-- | if @m@ is a 'Module' over @r@ and @f@ is a 'Applicative' then @f `App` m@ is a 'Module' over @r@ as well</span>
hunk ./doc/html/monoids/src/Data-Monoid-Applicative.html 88
-<a name="line-80"></a><span class='hs-comment'>-- | if @m@ is a 'Module' over @r@ and @f@ is a 'Applicative' then @f `App` m@ is a 'Module' over @r@ as well</span>
-<a name="line-81"></a>
-<a name="line-82"></a><a name="App"></a><span class='hs-keyword'>newtype</span> <span class='hs-conid'>App</span> <span class='hs-varid'>f</span> <span class='hs-varid'>m</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>App</span> <span class='hs-layout'>{</span> <span class='hs-varid'>getApp</span> <span class='hs-keyglyph'>::</span> <span class='hs-varid'>f</span> <span class='hs-varid'>m</span> <span class='hs-layout'>}</span> 
-<a name="line-83"></a>    <span class='hs-keyword'>deriving</span> <span class='hs-layout'>(</span><span class='hs-conid'>Eq</span><span class='hs-layout'>,</span><span class='hs-conid'>Ord</span><span class='hs-layout'>,</span><span class='hs-conid'>Show</span><span class='hs-layout'>,</span><span class='hs-conid'>Read</span><span class='hs-layout'>,</span><span class='hs-conid'>Functor</span><span class='hs-layout'>,</span><span class='hs-conid'>Pointed</span><span class='hs-layout'>,</span><span class='hs-conid'>Applicative</span><span class='hs-layout'>,</span><span class='hs-conid'>Alternative</span><span class='hs-layout'>,</span><span class='hs-conid'>Copointed</span><span class='hs-layout'>)</span>
-<a name="line-84"></a>
-<a name="line-85"></a><span class='hs-keyword'>instance</span> <span class='hs-layout'>(</span><span class='hs-conid'>Monoid</span> <span class='hs-varid'>m</span><span class='hs-layout'>,</span> <span class='hs-conid'>Applicative</span> <span class='hs-varid'>f</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>Monoid</span> <span class='hs-layout'>(</span><span class='hs-varid'>f</span> <span class='hs-varop'>`App`</span> <span class='hs-varid'>m</span><span class='hs-layout'>)</span> <span class='hs-keyword'>where</span>
-<a name="line-86"></a>    <span class='hs-varid'>mempty</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>pure</span> <span class='hs-varid'>mempty</span>
-<a name="line-87"></a>    <span class='hs-varid'>mappend</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>liftA2</span> <span class='hs-varid'>mappend</span>
-<a name="line-88"></a>
-<a name="line-89"></a><span class='hs-keyword'>instance</span> <span class='hs-layout'>(</span><span class='hs-conid'>Group</span> <span class='hs-varid'>m</span><span class='hs-layout'>,</span> <span class='hs-conid'>Applicative</span> <span class='hs-varid'>f</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>Group</span> <span class='hs-layout'>(</span><span class='hs-varid'>f</span> <span class='hs-varop'>`App`</span> <span class='hs-varid'>m</span><span class='hs-layout'>)</span> <span class='hs-keyword'>where</span>
-<a name="line-90"></a>    <span class='hs-varid'>gnegate</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>fmap</span> <span class='hs-varid'>gnegate</span>
-<a name="line-91"></a>    <span class='hs-varid'>minus</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>liftA2</span> <span class='hs-varid'>minus</span>
-<a name="line-92"></a>    <span class='hs-varid'>gsubtract</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>liftA2</span> <span class='hs-varid'>gsubtract</span>
-<a name="line-93"></a>
-<a name="line-94"></a><span class='hs-keyword'>instance</span> <span class='hs-layout'>(</span><span class='hs-varid'>c</span> <span class='hs-varop'>`Reducer`</span> <span class='hs-varid'>m</span><span class='hs-layout'>,</span> <span class='hs-conid'>Applicative</span> <span class='hs-varid'>f</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>Reducer</span> <span class='hs-varid'>c</span> <span class='hs-layout'>(</span><span class='hs-varid'>f</span> <span class='hs-varop'>`App`</span> <span class='hs-varid'>m</span><span class='hs-layout'>)</span> <span class='hs-keyword'>where</span>
-<a name="line-95"></a>    <span class='hs-varid'>unit</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>pure</span> <span class='hs-varop'>.</span> <span class='hs-varid'>unit</span>
-<a name="line-96"></a>
-<a name="line-97"></a><span class='hs-keyword'>instance</span> <span class='hs-layout'>(</span><span class='hs-conid'>LeftModule</span> <span class='hs-varid'>r</span> <span class='hs-varid'>m</span><span class='hs-layout'>,</span> <span class='hs-conid'>Applicative</span> <span class='hs-varid'>f</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>LeftModule</span> <span class='hs-varid'>r</span> <span class='hs-layout'>(</span><span class='hs-varid'>f</span> <span class='hs-varop'>`App`</span> <span class='hs-varid'>m</span><span class='hs-layout'>)</span> <span class='hs-keyword'>where</span> <span class='hs-varid'>x</span> <span class='hs-varop'>*.</span> <span class='hs-varid'>m</span> <span class='hs-keyglyph'>=</span> <span class='hs-layout'>(</span><span class='hs-varid'>x</span> <span class='hs-varop'>*.</span><span class='hs-layout'>)</span> <span class='hs-varop'>&lt;$&gt;</span> <span class='hs-varid'>m</span>
-<a name="line-98"></a><span class='hs-keyword'>instance</span> <span class='hs-layout'>(</span><span class='hs-conid'>RightModule</span> <span class='hs-varid'>r</span> <span class='hs-varid'>m</span><span class='hs-layout'>,</span> <span class='hs-conid'>Applicative</span> <span class='hs-varid'>f</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>RightModule</span> <span class='hs-varid'>r</span> <span class='hs-layout'>(</span><span class='hs-varid'>f</span> <span class='hs-varop'>`App`</span> <span class='hs-varid'>m</span><span class='hs-layout'>)</span> <span class='hs-keyword'>where</span> <span class='hs-varid'>m</span> <span class='hs-varop'>.*</span> <span class='hs-varid'>y</span> <span class='hs-keyglyph'>=</span> <span class='hs-layout'>(</span><span class='hs-varop'>.*</span> <span class='hs-varid'>y</span><span class='hs-layout'>)</span> <span class='hs-varop'>&lt;$&gt;</span> <span class='hs-varid'>m</span>
-<a name="line-99"></a><span class='hs-keyword'>instance</span> <span class='hs-layout'>(</span><span class='hs-conid'>Module</span> <span class='hs-varid'>r</span> <span class='hs-varid'>m</span><span class='hs-layout'>,</span> <span class='hs-conid'>Applicative</span> <span class='hs-varid'>f</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>Module</span> <span class='hs-varid'>r</span> <span class='hs-layout'>(</span><span class='hs-varid'>f</span> <span class='hs-varop'>`App`</span> <span class='hs-varid'>m</span><span class='hs-layout'>)</span>
+<a name="line-80"></a><a name="App"></a><span class='hs-keyword'>newtype</span> <span class='hs-conid'>App</span> <span class='hs-varid'>f</span> <span class='hs-varid'>m</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>App</span> <span class='hs-layout'>{</span> <span class='hs-varid'>getApp</span> <span class='hs-keyglyph'>::</span> <span class='hs-varid'>f</span> <span class='hs-varid'>m</span> <span class='hs-layout'>}</span> 
+<a name="line-81"></a>    <span class='hs-keyword'>deriving</span> <span class='hs-layout'>(</span><span class='hs-conid'>Eq</span><span class='hs-layout'>,</span><span class='hs-conid'>Ord</span><span class='hs-layout'>,</span><span class='hs-conid'>Show</span><span class='hs-layout'>,</span><span class='hs-conid'>Read</span><span class='hs-layout'>,</span><span class='hs-conid'>Functor</span><span class='hs-layout'>,</span><span class='hs-conid'>Applicative</span><span class='hs-layout'>,</span><span class='hs-conid'>Alternative</span><span class='hs-layout'>,</span><span class='hs-conid'>Pointed</span><span class='hs-layout'>,</span><span class='hs-conid'>Copointed</span><span class='hs-layout'>)</span>
+<a name="line-82"></a>
+<a name="line-83"></a><span class='hs-keyword'>instance</span> <span class='hs-layout'>(</span><span class='hs-conid'>Monoid</span> <span class='hs-varid'>m</span><span class='hs-layout'>,</span> <span class='hs-conid'>Applicative</span> <span class='hs-varid'>f</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>Monoid</span> <span class='hs-layout'>(</span><span class='hs-varid'>f</span> <span class='hs-varop'>`App`</span> <span class='hs-varid'>m</span><span class='hs-layout'>)</span> <span class='hs-keyword'>where</span>
+<a name="line-84"></a>    <span class='hs-varid'>mempty</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>pure</span> <span class='hs-varid'>mempty</span>
+<a name="line-85"></a>    <span class='hs-varid'>mappend</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>liftA2</span> <span class='hs-varid'>mappend</span>
+<a name="line-86"></a>
+<a name="line-87"></a><span class='hs-keyword'>instance</span> <span class='hs-layout'>(</span><span class='hs-conid'>Group</span> <span class='hs-varid'>m</span><span class='hs-layout'>,</span> <span class='hs-conid'>Applicative</span> <span class='hs-varid'>f</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>Group</span> <span class='hs-layout'>(</span><span class='hs-varid'>f</span> <span class='hs-varop'>`App`</span> <span class='hs-varid'>m</span><span class='hs-layout'>)</span> <span class='hs-keyword'>where</span>
+<a name="line-88"></a>    <span class='hs-varid'>gnegate</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>fmap</span> <span class='hs-varid'>gnegate</span>
+<a name="line-89"></a>    <span class='hs-varid'>minus</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>liftA2</span> <span class='hs-varid'>minus</span>
+<a name="line-90"></a>    <span class='hs-varid'>gsubtract</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>liftA2</span> <span class='hs-varid'>gsubtract</span>
+<a name="line-91"></a>
+<a name="line-92"></a><span class='hs-keyword'>instance</span> <span class='hs-layout'>(</span><span class='hs-varid'>c</span> <span class='hs-varop'>`Reducer`</span> <span class='hs-varid'>m</span><span class='hs-layout'>,</span> <span class='hs-conid'>Applicative</span> <span class='hs-varid'>f</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>Reducer</span> <span class='hs-varid'>c</span> <span class='hs-layout'>(</span><span class='hs-varid'>f</span> <span class='hs-varop'>`App`</span> <span class='hs-varid'>m</span><span class='hs-layout'>)</span> <span class='hs-keyword'>where</span>
+<a name="line-93"></a>    <span class='hs-varid'>unit</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>pure</span> <span class='hs-varop'>.</span> <span class='hs-varid'>unit</span>
+<a name="line-94"></a>
+<a name="line-95"></a><span class='hs-keyword'>instance</span> <span class='hs-layout'>(</span><span class='hs-conid'>LeftModule</span> <span class='hs-varid'>r</span> <span class='hs-varid'>m</span><span class='hs-layout'>,</span> <span class='hs-conid'>Applicative</span> <span class='hs-varid'>f</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>LeftModule</span> <span class='hs-varid'>r</span> <span class='hs-layout'>(</span><span class='hs-varid'>f</span> <span class='hs-varop'>`App`</span> <span class='hs-varid'>m</span><span class='hs-layout'>)</span> <span class='hs-keyword'>where</span> <span class='hs-varid'>x</span> <span class='hs-varop'>*.</span> <span class='hs-varid'>m</span> <span class='hs-keyglyph'>=</span> <span class='hs-layout'>(</span><span class='hs-varid'>x</span> <span class='hs-varop'>*.</span><span class='hs-layout'>)</span> <span class='hs-varop'>&lt;$&gt;</span> <span class='hs-varid'>m</span>
+<a name="line-96"></a><span class='hs-keyword'>instance</span> <span class='hs-layout'>(</span><span class='hs-conid'>RightModule</span> <span class='hs-varid'>r</span> <span class='hs-varid'>m</span><span class='hs-layout'>,</span> <span class='hs-conid'>Applicative</span> <span class='hs-varid'>f</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>RightModule</span> <span class='hs-varid'>r</span> <span class='hs-layout'>(</span><span class='hs-varid'>f</span> <span class='hs-varop'>`App`</span> <span class='hs-varid'>m</span><span class='hs-layout'>)</span> <span class='hs-keyword'>where</span> <span class='hs-varid'>m</span> <span class='hs-varop'>.*</span> <span class='hs-varid'>y</span> <span class='hs-keyglyph'>=</span> <span class='hs-layout'>(</span><span class='hs-varop'>.*</span> <span class='hs-varid'>y</span><span class='hs-layout'>)</span> <span class='hs-varop'>&lt;$&gt;</span> <span class='hs-varid'>m</span>
+<a name="line-97"></a><span class='hs-keyword'>instance</span> <span class='hs-layout'>(</span><span class='hs-conid'>Module</span> <span class='hs-varid'>r</span> <span class='hs-varid'>m</span><span class='hs-layout'>,</span> <span class='hs-conid'>Applicative</span> <span class='hs-varid'>f</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>Module</span> <span class='hs-varid'>r</span> <span class='hs-layout'>(</span><span class='hs-varid'>f</span> <span class='hs-varop'>`App`</span> <span class='hs-varid'>m</span><span class='hs-layout'>)</span>
hunk ./doc/html/monoids/src/Data-Monoid-Combinators.html 9
-<pre><a name="line-1"></a><span class='hs-comment'>{-# LANGUAGE UndecidableInstances, TypeOperators, FlexibleContexts, MultiParamTypeClasses, FlexibleInstances, TypeFamilies #-}</span>
+<pre><a name="line-1"></a><span class='hs-comment'>{-# LANGUAGE UndecidableInstances, TypeOperators, FlexibleContexts, MultiParamTypeClasses, FlexibleInstances, TypeFamilies, CPP #-}</span>
hunk ./doc/html/monoids/src/Data-Monoid-Combinators.html 33
-<a name="line-25"></a>    <span class='hs-comment'>-- * QuickCheck Properties</span>
-<a name="line-26"></a>    <span class='hs-layout'>,</span> <span class='hs-varid'>prop_replicate_right_distributive</span>
-<a name="line-27"></a>    <span class='hs-layout'>)</span> <span class='hs-keyword'>where</span>
-<a name="line-28"></a>
-<a name="line-29"></a><span class='hs-keyword'>import</span> <span class='hs-conid'>Prelude</span> <span class='hs-varid'>hiding</span> <span class='hs-layout'>(</span><span class='hs-varid'>replicate</span><span class='hs-layout'>,</span> <span class='hs-varid'>cycle</span><span class='hs-layout'>,</span> <span class='hs-varid'>repeat</span><span class='hs-layout'>)</span>
-<a name="line-30"></a><span class='hs-keyword'>import</span> <span class='hs-conid'>Data</span><span class='hs-varop'>.</span><span class='hs-conid'>Monoid</span><span class='hs-varop'>.</span><span class='hs-conid'>Reducer</span>
-<a name="line-31"></a><span class='hs-keyword'>import</span> <span class='hs-conid'>Test</span><span class='hs-varop'>.</span><span class='hs-conid'>QuickCheck</span>
-<a name="line-32"></a>
+<a name="line-25"></a><span class='hs-cpp'>#ifdef M_QUICKCHECK</span>
+<a name="line-26"></a>    <span class='hs-comment'>-- * QuickCheck Properties</span>
+<a name="line-27"></a>    <span class='hs-layout'>,</span> <span class='hs-varid'>prop_replicate_right_distributive</span>
+<a name="line-28"></a><span class='hs-cpp'>#endif</span>
+<a name="line-29"></a>    <span class='hs-layout'>)</span> <span class='hs-keyword'>where</span>
+<a name="line-30"></a>
+<a name="line-31"></a><span class='hs-keyword'>import</span> <span class='hs-conid'>Prelude</span> <span class='hs-varid'>hiding</span> <span class='hs-layout'>(</span><span class='hs-varid'>replicate</span><span class='hs-layout'>,</span> <span class='hs-varid'>cycle</span><span class='hs-layout'>,</span> <span class='hs-varid'>repeat</span><span class='hs-layout'>)</span>
+<a name="line-32"></a><span class='hs-keyword'>import</span> <span class='hs-conid'>Data</span><span class='hs-varop'>.</span><span class='hs-conid'>Monoid</span><span class='hs-varop'>.</span><span class='hs-conid'>Reducer</span>
hunk ./doc/html/monoids/src/Data-Monoid-Combinators.html 42
-<a name="line-34"></a><a name="cycle"></a><span class='hs-comment'>-- | A generalization of 'Data.List.cycle' to an arbitrary 'Monoid'. May fail to terminate for some values in some monoids.</span>
-<a name="line-35"></a><span class='hs-definition'>cycle</span> <span class='hs-keyglyph'>::</span> <span class='hs-conid'>Monoid</span> <span class='hs-varid'>m</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-varid'>m</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-varid'>m</span>
-<a name="line-36"></a><span class='hs-definition'>cycle</span> <span class='hs-varid'>xs</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>xs'</span> <span class='hs-keyword'>where</span> <span class='hs-varid'>xs'</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>xs</span> <span class='hs-varop'>`mappend`</span> <span class='hs-varid'>xs'</span>
+<a name="line-34"></a><span class='hs-cpp'>#ifdef M_QUICKCHECK </span>
+<a name="line-35"></a><span class='hs-keyword'>import</span> <span class='hs-conid'>Test</span><span class='hs-varop'>.</span><span class='hs-conid'>QuickCheck</span>
+<a name="line-36"></a><span class='hs-cpp'>#endif</span>
hunk ./doc/html/monoids/src/Data-Monoid-Combinators.html 46
-<a name="line-38"></a><a name="repeat"></a><span class='hs-comment'>-- | A generalization of 'Data.List.repeat' to an arbitrary 'Monoid'. May fail to terminate for some values in some monoids.</span>
-<a name="line-39"></a><span class='hs-definition'>repeat</span> <span class='hs-keyglyph'>::</span> <span class='hs-layout'>(</span><span class='hs-varid'>e</span> <span class='hs-varop'>`Reducer`</span> <span class='hs-varid'>m</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-varid'>e</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-varid'>m</span> 
-<a name="line-40"></a><span class='hs-definition'>repeat</span> <span class='hs-varid'>x</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>xs</span> <span class='hs-keyword'>where</span> <span class='hs-varid'>xs</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>cons</span> <span class='hs-varid'>x</span> <span class='hs-varid'>xs</span> 
+<a name="line-38"></a><a name="cycle"></a><span class='hs-comment'>-- | A generalization of 'Data.List.cycle' to an arbitrary 'Monoid'. May fail to terminate for some values in some monoids.</span>
+<a name="line-39"></a><span class='hs-definition'>cycle</span> <span class='hs-keyglyph'>::</span> <span class='hs-conid'>Monoid</span> <span class='hs-varid'>m</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-varid'>m</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-varid'>m</span>
+<a name="line-40"></a><span class='hs-definition'>cycle</span> <span class='hs-varid'>xs</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>xs'</span> <span class='hs-keyword'>where</span> <span class='hs-varid'>xs'</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>xs</span> <span class='hs-varop'>`mappend`</span> <span class='hs-varid'>xs'</span>
hunk ./doc/html/monoids/src/Data-Monoid-Combinators.html 50
-<a name="line-42"></a><a name="replicate"></a><span class='hs-comment'>-- | A generalization of 'Data.List.replicate' to an arbitrary 'Monoid'. Adapted from </span>
-<a name="line-43"></a><span class='hs-comment'>-- &lt;<a href="http://augustss.blogspot.com/2008/07/lost-and-found-if-i-write-108-in.html">http://augustss.blogspot.com/2008/07/lost-and-found-if-i-write-108-in.html</a>&gt;</span>
-<a name="line-44"></a><span class='hs-definition'>replicate</span> <span class='hs-keyglyph'>::</span> <span class='hs-layout'>(</span><span class='hs-conid'>Monoid</span> <span class='hs-varid'>m</span><span class='hs-layout'>,</span> <span class='hs-conid'>Integral</span> <span class='hs-varid'>n</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-varid'>m</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-varid'>n</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-varid'>m</span>
-<a name="line-45"></a><span class='hs-definition'>replicate</span> <span class='hs-varid'>x0</span> <span class='hs-varid'>y0</span> 
-<a name="line-46"></a>    <span class='hs-keyglyph'>|</span> <span class='hs-varid'>y0</span> <span class='hs-varop'>&lt;</span> <span class='hs-num'>0</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>mempty</span> <span class='hs-comment'>-- error "negative length"</span>
-<a name="line-47"></a>    <span class='hs-keyglyph'>|</span> <span class='hs-varid'>y0</span> <span class='hs-varop'>==</span> <span class='hs-num'>0</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>mempty</span>
-<a name="line-48"></a>    <span class='hs-keyglyph'>|</span> <span class='hs-varid'>otherwise</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>f</span> <span class='hs-varid'>x0</span> <span class='hs-varid'>y0</span>
-<a name="line-49"></a>    <span class='hs-keyword'>where</span>
-<a name="line-50"></a>        <span class='hs-varid'>f</span> <span class='hs-varid'>x</span> <span class='hs-varid'>y</span> 
-<a name="line-51"></a>            <span class='hs-keyglyph'>|</span> <span class='hs-varid'>even</span> <span class='hs-varid'>y</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>f</span> <span class='hs-layout'>(</span><span class='hs-varid'>x</span> <span class='hs-varop'>`mappend`</span> <span class='hs-varid'>x</span><span class='hs-layout'>)</span> <span class='hs-layout'>(</span><span class='hs-varid'>y</span> <span class='hs-varop'>`quot`</span> <span class='hs-num'>2</span><span class='hs-layout'>)</span>
-<a name="line-52"></a>            <span class='hs-keyglyph'>|</span> <span class='hs-varid'>y</span> <span class='hs-varop'>==</span> <span class='hs-num'>1</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>x</span>
-<a name="line-53"></a>            <span class='hs-keyglyph'>|</span> <span class='hs-varid'>otherwise</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>g</span> <span class='hs-layout'>(</span><span class='hs-varid'>x</span> <span class='hs-varop'>`mappend`</span> <span class='hs-varid'>x</span><span class='hs-layout'>)</span> <span class='hs-layout'>(</span><span class='hs-layout'>(</span><span class='hs-varid'>y</span> <span class='hs-comment'>-</span> <span class='hs-num'>1</span><span class='hs-layout'>)</span> <span class='hs-varop'>`quot`</span> <span class='hs-num'>2</span><span class='hs-layout'>)</span> <span class='hs-varid'>x</span>
-<a name="line-54"></a>        <span class='hs-varid'>g</span> <span class='hs-varid'>x</span> <span class='hs-varid'>y</span> <span class='hs-varid'>z</span> 
-<a name="line-55"></a>            <span class='hs-keyglyph'>|</span> <span class='hs-varid'>even</span> <span class='hs-varid'>y</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>g</span> <span class='hs-layout'>(</span><span class='hs-varid'>x</span> <span class='hs-varop'>`mappend`</span> <span class='hs-varid'>x</span><span class='hs-layout'>)</span> <span class='hs-layout'>(</span><span class='hs-varid'>y</span> <span class='hs-varop'>`quot`</span> <span class='hs-num'>2</span><span class='hs-layout'>)</span> <span class='hs-varid'>z</span>
-<a name="line-56"></a>            <span class='hs-keyglyph'>|</span> <span class='hs-varid'>y</span> <span class='hs-varop'>==</span> <span class='hs-num'>1</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>x</span> <span class='hs-varop'>`mappend`</span> <span class='hs-varid'>z</span>
-<a name="line-57"></a>            <span class='hs-keyglyph'>|</span> <span class='hs-varid'>otherwise</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>g</span> <span class='hs-layout'>(</span><span class='hs-varid'>x</span> <span class='hs-varop'>`mappend`</span> <span class='hs-varid'>x</span><span class='hs-layout'>)</span> <span class='hs-layout'>(</span><span class='hs-layout'>(</span><span class='hs-varid'>y</span> <span class='hs-comment'>-</span> <span class='hs-num'>1</span><span class='hs-layout'>)</span> <span class='hs-varop'>`quot`</span> <span class='hs-num'>2</span><span class='hs-layout'>)</span> <span class='hs-layout'>(</span><span class='hs-varid'>x</span> <span class='hs-varop'>`mappend`</span> <span class='hs-varid'>z</span><span class='hs-layout'>)</span>
-<a name="line-58"></a><span class='hs-comment'>{-# INLINE replicate #-}</span>
-<a name="line-59"></a>
-<a name="line-60"></a><a name="prop_replicate_right_distributive"></a><span class='hs-definition'>prop_replicate_right_distributive</span> <span class='hs-keyglyph'>::</span> <span class='hs-layout'>(</span><span class='hs-conid'>Eq</span> <span class='hs-varid'>m</span><span class='hs-layout'>,</span> <span class='hs-conid'>Monoid</span> <span class='hs-varid'>m</span><span class='hs-layout'>,</span> <span class='hs-conid'>Arbitrary</span> <span class='hs-varid'>m</span><span class='hs-layout'>,</span> <span class='hs-conid'>Integral</span> <span class='hs-varid'>n</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-varid'>m</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-varid'>n</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-varid'>n</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-conid'>Bool</span>
-<a name="line-61"></a><span class='hs-definition'>prop_replicate_right_distributive</span> <span class='hs-varid'>m</span> <span class='hs-varid'>x</span> <span class='hs-varid'>y</span>
-<a name="line-62"></a>    <span class='hs-keyglyph'>=</span> <span class='hs-varid'>replicate</span> <span class='hs-varid'>m</span> <span class='hs-layout'>(</span><span class='hs-varid'>x</span> <span class='hs-varop'>+</span> <span class='hs-varid'>y</span><span class='hs-layout'>)</span> <span class='hs-varop'>==</span> <span class='hs-varid'>replicate</span> <span class='hs-varid'>m</span> <span class='hs-varid'>x</span> <span class='hs-varop'>`mappend`</span> <span class='hs-varid'>replicate</span> <span class='hs-varid'>m</span> <span class='hs-varid'>y</span>
+<a name="line-42"></a><a name="repeat"></a><span class='hs-comment'>-- | A generalization of 'Data.List.repeat' to an arbitrary 'Monoid'. May fail to terminate for some values in some monoids.</span>
+<a name="line-43"></a><span class='hs-definition'>repeat</span> <span class='hs-keyglyph'>::</span> <span class='hs-layout'>(</span><span class='hs-varid'>e</span> <span class='hs-varop'>`Reducer`</span> <span class='hs-varid'>m</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-varid'>e</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-varid'>m</span> 
+<a name="line-44"></a><span class='hs-definition'>repeat</span> <span class='hs-varid'>x</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>xs</span> <span class='hs-keyword'>where</span> <span class='hs-varid'>xs</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>cons</span> <span class='hs-varid'>x</span> <span class='hs-varid'>xs</span> 
+<a name="line-45"></a>
+<a name="line-46"></a><a name="replicate"></a><span class='hs-comment'>-- | A generalization of 'Data.List.replicate' to an arbitrary 'Monoid'. Adapted from </span>
+<a name="line-47"></a><span class='hs-comment'>-- &lt;<a href="http://augustss.blogspot.com/2008/07/lost-and-found-if-i-write-108-in.html">http://augustss.blogspot.com/2008/07/lost-and-found-if-i-write-108-in.html</a>&gt;</span>
+<a name="line-48"></a><span class='hs-definition'>replicate</span> <span class='hs-keyglyph'>::</span> <span class='hs-layout'>(</span><span class='hs-conid'>Monoid</span> <span class='hs-varid'>m</span><span class='hs-layout'>,</span> <span class='hs-conid'>Integral</span> <span class='hs-varid'>n</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-varid'>m</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-varid'>n</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-varid'>m</span>
+<a name="line-49"></a><span class='hs-definition'>replicate</span> <span class='hs-varid'>x0</span> <span class='hs-varid'>y0</span> 
+<a name="line-50"></a>    <span class='hs-keyglyph'>|</span> <span class='hs-varid'>y0</span> <span class='hs-varop'>&lt;</span> <span class='hs-num'>0</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>error</span> <span class='hs-str'>"Data.Monoid.Combinators.replicate: negative length"</span>
+<a name="line-51"></a>    <span class='hs-keyglyph'>|</span> <span class='hs-varid'>y0</span> <span class='hs-varop'>==</span> <span class='hs-num'>0</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>mempty</span>
+<a name="line-52"></a>    <span class='hs-keyglyph'>|</span> <span class='hs-varid'>otherwise</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>f</span> <span class='hs-varid'>x0</span> <span class='hs-varid'>y0</span>
+<a name="line-53"></a>    <span class='hs-keyword'>where</span>
+<a name="line-54"></a>        <span class='hs-varid'>f</span> <span class='hs-varid'>x</span> <span class='hs-varid'>y</span> 
+<a name="line-55"></a>            <span class='hs-keyglyph'>|</span> <span class='hs-varid'>even</span> <span class='hs-varid'>y</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>f</span> <span class='hs-layout'>(</span><span class='hs-varid'>x</span> <span class='hs-varop'>`mappend`</span> <span class='hs-varid'>x</span><span class='hs-layout'>)</span> <span class='hs-layout'>(</span><span class='hs-varid'>y</span> <span class='hs-varop'>`quot`</span> <span class='hs-num'>2</span><span class='hs-layout'>)</span>
+<a name="line-56"></a>            <span class='hs-keyglyph'>|</span> <span class='hs-varid'>y</span> <span class='hs-varop'>==</span> <span class='hs-num'>1</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>x</span>
+<a name="line-57"></a>            <span class='hs-keyglyph'>|</span> <span class='hs-varid'>otherwise</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>g</span> <span class='hs-layout'>(</span><span class='hs-varid'>x</span> <span class='hs-varop'>`mappend`</span> <span class='hs-varid'>x</span><span class='hs-layout'>)</span> <span class='hs-layout'>(</span><span class='hs-layout'>(</span><span class='hs-varid'>y</span> <span class='hs-comment'>-</span> <span class='hs-num'>1</span><span class='hs-layout'>)</span> <span class='hs-varop'>`quot`</span> <span class='hs-num'>2</span><span class='hs-layout'>)</span> <span class='hs-varid'>x</span>
+<a name="line-58"></a>        <span class='hs-varid'>g</span> <span class='hs-varid'>x</span> <span class='hs-varid'>y</span> <span class='hs-varid'>z</span> 
+<a name="line-59"></a>            <span class='hs-keyglyph'>|</span> <span class='hs-varid'>even</span> <span class='hs-varid'>y</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>g</span> <span class='hs-layout'>(</span><span class='hs-varid'>x</span> <span class='hs-varop'>`mappend`</span> <span class='hs-varid'>x</span><span class='hs-layout'>)</span> <span class='hs-layout'>(</span><span class='hs-varid'>y</span> <span class='hs-varop'>`quot`</span> <span class='hs-num'>2</span><span class='hs-layout'>)</span> <span class='hs-varid'>z</span>
+<a name="line-60"></a>            <span class='hs-keyglyph'>|</span> <span class='hs-varid'>y</span> <span class='hs-varop'>==</span> <span class='hs-num'>1</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>x</span> <span class='hs-varop'>`mappend`</span> <span class='hs-varid'>z</span>
+<a name="line-61"></a>            <span class='hs-keyglyph'>|</span> <span class='hs-varid'>otherwise</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>g</span> <span class='hs-layout'>(</span><span class='hs-varid'>x</span> <span class='hs-varop'>`mappend`</span> <span class='hs-varid'>x</span><span class='hs-layout'>)</span> <span class='hs-layout'>(</span><span class='hs-layout'>(</span><span class='hs-varid'>y</span> <span class='hs-comment'>-</span> <span class='hs-num'>1</span><span class='hs-layout'>)</span> <span class='hs-varop'>`quot`</span> <span class='hs-num'>2</span><span class='hs-layout'>)</span> <span class='hs-layout'>(</span><span class='hs-varid'>x</span> <span class='hs-varop'>`mappend`</span> <span class='hs-varid'>z</span><span class='hs-layout'>)</span>
+<a name="line-62"></a><span class='hs-comment'>{-# INLINE replicate #-}</span>
+<a name="line-63"></a>
+<a name="line-64"></a><span class='hs-cpp'>#ifdef M_QUICKCHECK</span>
+<a name="line-65"></a><a name="prop_replicate_right_distributive"></a><span class='hs-definition'>prop_replicate_right_distributive</span> <span class='hs-keyglyph'>::</span> <span class='hs-layout'>(</span><span class='hs-conid'>Eq</span> <span class='hs-varid'>m</span><span class='hs-layout'>,</span> <span class='hs-conid'>Monoid</span> <span class='hs-varid'>m</span><span class='hs-layout'>,</span> <span class='hs-conid'>Arbitrary</span> <span class='hs-varid'>m</span><span class='hs-layout'>,</span> <span class='hs-conid'>Integral</span> <span class='hs-varid'>n</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-varid'>m</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-varid'>n</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-varid'>n</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-conid'>Bool</span>
+<a name="line-66"></a><span class='hs-definition'>prop_replicate_right_distributive</span> <span class='hs-varid'>m</span> <span class='hs-varid'>x</span> <span class='hs-varid'>y</span>
+<a name="line-67"></a>    <span class='hs-keyglyph'>=</span> <span class='hs-varid'>replicate</span> <span class='hs-varid'>m</span> <span class='hs-layout'>(</span><span class='hs-varid'>x</span> <span class='hs-varop'>+</span> <span class='hs-varid'>y</span><span class='hs-layout'>)</span> <span class='hs-varop'>==</span> <span class='hs-varid'>replicate</span> <span class='hs-varid'>m</span> <span class='hs-varid'>x</span> <span class='hs-varop'>`mappend`</span> <span class='hs-varid'>replicate</span> <span class='hs-varid'>m</span> <span class='hs-varid'>y</span>
+<a name="line-68"></a><span class='hs-cpp'>#endif</span>
hunk ./doc/html/monoids/src/Data-Monoid-FromString.html 13
-<a name="line-5"></a><span class='hs-comment'>-- Module      :  Data.Monoid.Additive</span>
+<a name="line-5"></a><span class='hs-comment'>-- Module      :  Data.Monoid.FromString</span>
hunk ./doc/html/monoids/src/Data-Monoid-FromString.html 34
-<a name="line-26"></a><span class='hs-keyword'>import</span> <span class='hs-conid'>GHC</span><span class='hs-varop'>.</span><span class='hs-conid'>Exts</span>
+<a name="line-26"></a><span class='hs-keyword'>import</span> <span class='hs-conid'>Data</span><span class='hs-varop'>.</span><span class='hs-conid'>String</span>
hunk ./doc/html/monoids/src/Data-Monoid-Instances.html 9
-<pre><a name="line-1"></a><span class='hs-comment'>{-# LANGUAGE FlexibleInstances, MultiParamTypeClasses, UndecidableInstances, OverloadedStrings #-}</span>
+<pre><a name="line-1"></a><span class='hs-comment'>{-# LANGUAGE FlexibleInstances, MultiParamTypeClasses, UndecidableInstances, OverloadedStrings, CPP #-}</span>
hunk ./doc/html/monoids/src/Data-Monoid-Instances.html 38
-<a name="line-30"></a><span class='hs-comment'>-- This module is automatically included everywhere this functionality is required</span>
-<a name="line-31"></a><span class='hs-comment'>-- within this package. You should only have to import this module yourself if you </span>
-<a name="line-32"></a><span class='hs-comment'>-- want these instances for your own purposes.</span>
-<a name="line-33"></a><span class='hs-comment'>-----------------------------------------------------------------------------</span>
-<a name="line-34"></a>
-<a name="line-35"></a><span class='hs-keyword'>module</span> <span class='hs-conid'>Data</span><span class='hs-varop'>.</span><span class='hs-conid'>Monoid</span><span class='hs-varop'>.</span><span class='hs-conid'>Instances</span> <span class='hs-keyword'>where</span>
+<a name="line-30"></a><span class='hs-comment'>-- * 'Num' and 'Bits' instances for 'Bool' as a 'Boolean' `&amp;&amp;`/`||` 'SemiRing'</span>
+<a name="line-31"></a><span class='hs-comment'>--</span>
+<a name="line-32"></a><span class='hs-comment'>-- This module is automatically included everywhere this functionality is required</span>
+<a name="line-33"></a><span class='hs-comment'>-- within this package. You should only have to import this module yourself if you </span>
+<a name="line-34"></a><span class='hs-comment'>-- want these instances for your own purposes.</span>
+<a name="line-35"></a><span class='hs-comment'>-----------------------------------------------------------------------------</span>
hunk ./doc/html/monoids/src/Data-Monoid-Instances.html 45
-<a name="line-37"></a><span class='hs-keyword'>import</span> <span class='hs-conid'>Control</span><span class='hs-varop'>.</span><span class='hs-conid'>Monad</span><span class='hs-varop'>.</span><span class='hs-conid'>Reader</span>
+<a name="line-37"></a><span class='hs-keyword'>module</span> <span class='hs-conid'>Data</span><span class='hs-varop'>.</span><span class='hs-conid'>Monoid</span><span class='hs-varop'>.</span><span class='hs-conid'>Instances</span> <span class='hs-conid'>()</span> <span class='hs-keyword'>where</span>
hunk ./doc/html/monoids/src/Data-Monoid-Instances.html 47
-<a name="line-39"></a><span class='hs-keyword'>import</span> <span class='hs-keyword'>qualified</span> <span class='hs-conid'>Control</span><span class='hs-varop'>.</span><span class='hs-conid'>Monad</span><span class='hs-varop'>.</span><span class='hs-conid'>RWS</span><span class='hs-varop'>.</span><span class='hs-conid'>Lazy</span> <span class='hs-keyword'>as</span> <span class='hs-conid'>LRWS</span>
-<a name="line-40"></a><span class='hs-keyword'>import</span> <span class='hs-keyword'>qualified</span> <span class='hs-conid'>Control</span><span class='hs-varop'>.</span><span class='hs-conid'>Monad</span><span class='hs-varop'>.</span><span class='hs-conid'>RWS</span><span class='hs-varop'>.</span><span class='hs-conid'>Strict</span> <span class='hs-keyword'>as</span> <span class='hs-conid'>SRWS</span>
-<a name="line-41"></a>
-<a name="line-42"></a><span class='hs-keyword'>import</span> <span class='hs-keyword'>qualified</span> <span class='hs-conid'>Control</span><span class='hs-varop'>.</span><span class='hs-conid'>Monad</span><span class='hs-varop'>.</span><span class='hs-conid'>State</span><span class='hs-varop'>.</span><span class='hs-conid'>Lazy</span> <span class='hs-keyword'>as</span> <span class='hs-conid'>LState</span>
-<a name="line-43"></a><span class='hs-keyword'>import</span> <span class='hs-keyword'>qualified</span> <span class='hs-conid'>Control</span><span class='hs-varop'>.</span><span class='hs-conid'>Monad</span><span class='hs-varop'>.</span><span class='hs-conid'>State</span><span class='hs-varop'>.</span><span class='hs-conid'>Strict</span> <span class='hs-keyword'>as</span> <span class='hs-conid'>SState</span>
-<a name="line-44"></a>
+<a name="line-39"></a><span class='hs-cpp'>#ifdef M_MTL</span>
+<a name="line-40"></a><span class='hs-keyword'>import</span> <span class='hs-conid'>Control</span><span class='hs-varop'>.</span><span class='hs-conid'>Monad</span><span class='hs-varop'>.</span><span class='hs-conid'>Reader</span>
+<a name="line-41"></a><span class='hs-keyword'>import</span> <span class='hs-keyword'>qualified</span> <span class='hs-conid'>Control</span><span class='hs-varop'>.</span><span class='hs-conid'>Monad</span><span class='hs-varop'>.</span><span class='hs-conid'>RWS</span><span class='hs-varop'>.</span><span class='hs-conid'>Lazy</span> <span class='hs-keyword'>as</span> <span class='hs-conid'>LRWS</span>
+<a name="line-42"></a><span class='hs-keyword'>import</span> <span class='hs-keyword'>qualified</span> <span class='hs-conid'>Control</span><span class='hs-varop'>.</span><span class='hs-conid'>Monad</span><span class='hs-varop'>.</span><span class='hs-conid'>RWS</span><span class='hs-varop'>.</span><span class='hs-conid'>Strict</span> <span class='hs-keyword'>as</span> <span class='hs-conid'>SRWS</span>
+<a name="line-43"></a><span class='hs-keyword'>import</span> <span class='hs-keyword'>qualified</span> <span class='hs-conid'>Control</span><span class='hs-varop'>.</span><span class='hs-conid'>Monad</span><span class='hs-varop'>.</span><span class='hs-conid'>State</span><span class='hs-varop'>.</span><span class='hs-conid'>Lazy</span> <span class='hs-keyword'>as</span> <span class='hs-conid'>LState</span>
+<a name="line-44"></a><span class='hs-keyword'>import</span> <span class='hs-keyword'>qualified</span> <span class='hs-conid'>Control</span><span class='hs-varop'>.</span><span class='hs-conid'>Monad</span><span class='hs-varop'>.</span><span class='hs-conid'>State</span><span class='hs-varop'>.</span><span class='hs-conid'>Strict</span> <span class='hs-keyword'>as</span> <span class='hs-conid'>SState</span>
hunk ./doc/html/monoids/src/Data-Monoid-Instances.html 55
-<a name="line-47"></a>
-<a name="line-48"></a><span class='hs-keyword'>import</span> <span class='hs-conid'>Data</span><span class='hs-varop'>.</span><span class='hs-conid'>String</span>
-<a name="line-49"></a>
-<a name="line-50"></a><span class='hs-keyword'>import</span> <span class='hs-conid'>Data</span><span class='hs-varop'>.</span><span class='hs-conid'>Ratio</span>
-<a name="line-51"></a>
-<a name="line-52"></a><span class='hs-keyword'>import</span> <span class='hs-conid'>Data</span><span class='hs-varop'>.</span><span class='hs-conid'>FingerTree</span>
-<a name="line-53"></a>
-<a name="line-54"></a><span class='hs-keyword'>import</span> <span class='hs-conid'>Text</span><span class='hs-varop'>.</span><span class='hs-conid'>Parsec</span><span class='hs-varop'>.</span><span class='hs-conid'>Prim</span>
+<a name="line-47"></a><span class='hs-cpp'>#endif</span>
+<a name="line-48"></a>
+<a name="line-49"></a><span class='hs-cpp'>#ifdef X_OverloadedStrings</span>
+<a name="line-50"></a><span class='hs-keyword'>import</span> <span class='hs-conid'>Data</span><span class='hs-varop'>.</span><span class='hs-conid'>String</span>
+<a name="line-51"></a><span class='hs-cpp'>#endif</span>
+<a name="line-52"></a>
+<a name="line-53"></a><span class='hs-keyword'>import</span> <span class='hs-conid'>Data</span><span class='hs-varop'>.</span><span class='hs-conid'>Bits</span>
+<a name="line-54"></a><span class='hs-keyword'>import</span> <span class='hs-conid'>Data</span><span class='hs-varop'>.</span><span class='hs-conid'>Ratio</span>
hunk ./doc/html/monoids/src/Data-Monoid-Instances.html 64
-<a name="line-56"></a><span class='hs-comment'>-- orphan Monoid instances for Monad Transformers</span>
-<a name="line-57"></a><span class='hs-keyword'>instance</span> <span class='hs-layout'>(</span><span class='hs-conid'>MonadPlus</span> <span class='hs-varid'>m</span><span class='hs-layout'>,</span> <span class='hs-conid'>Monoid</span> <span class='hs-varid'>w</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>Monoid</span> <span class='hs-layout'>(</span><span class='hs-conid'>SWriter</span><span class='hs-varop'>.</span><span class='hs-conid'>WriterT</span> <span class='hs-varid'>w</span> <span class='hs-varid'>m</span> <span class='hs-varid'>n</span><span class='hs-layout'>)</span> <span class='hs-keyword'>where</span>
-<a name="line-58"></a>    <span class='hs-varid'>mempty</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>mzero</span>
-<a name="line-59"></a>    <span class='hs-varid'>mappend</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>mplus</span>
-<a name="line-60"></a>
-<a name="line-61"></a><span class='hs-keyword'>instance</span> <span class='hs-layout'>(</span><span class='hs-conid'>MonadPlus</span> <span class='hs-varid'>m</span><span class='hs-layout'>,</span> <span class='hs-conid'>Monoid</span> <span class='hs-varid'>w</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>Monoid</span> <span class='hs-layout'>(</span><span class='hs-conid'>WriterT</span> <span class='hs-varid'>w</span> <span class='hs-varid'>m</span> <span class='hs-varid'>n</span><span class='hs-layout'>)</span> <span class='hs-keyword'>where</span>
-<a name="line-62"></a>    <span class='hs-varid'>mempty</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>mzero</span>
-<a name="line-63"></a>    <span class='hs-varid'>mappend</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>mplus</span>
-<a name="line-64"></a>
-<a name="line-65"></a><span class='hs-keyword'>instance</span> <span class='hs-layout'>(</span><span class='hs-conid'>MonadPlus</span> <span class='hs-varid'>m</span><span class='hs-layout'>,</span> <span class='hs-conid'>Monoid</span> <span class='hs-varid'>w</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>Monoid</span> <span class='hs-layout'>(</span><span class='hs-conid'>SRWS</span><span class='hs-varop'>.</span><span class='hs-conid'>RWST</span> <span class='hs-varid'>r</span> <span class='hs-varid'>w</span> <span class='hs-varid'>s</span> <span class='hs-varid'>m</span> <span class='hs-varid'>n</span><span class='hs-layout'>)</span> <span class='hs-keyword'>where</span> 
+<a name="line-56"></a><span class='hs-cpp'>#ifdef M_FINGERTREE</span>
+<a name="line-57"></a><span class='hs-keyword'>import</span> <span class='hs-conid'>Data</span><span class='hs-varop'>.</span><span class='hs-conid'>FingerTree</span>
+<a name="line-58"></a><span class='hs-cpp'>#endif</span>
+<a name="line-59"></a>
+<a name="line-60"></a><span class='hs-cpp'>#ifdef M_PARSEC</span>
+<a name="line-61"></a><span class='hs-keyword'>import</span> <span class='hs-conid'>Text</span><span class='hs-varop'>.</span><span class='hs-conid'>Parsec</span><span class='hs-varop'>.</span><span class='hs-conid'>Prim</span>
+<a name="line-62"></a><span class='hs-cpp'>#endif</span>
+<a name="line-63"></a>
+<a name="line-64"></a><span class='hs-cpp'>#ifdef M_MTL</span>
+<a name="line-65"></a><span class='hs-keyword'>instance</span> <span class='hs-layout'>(</span><span class='hs-conid'>MonadPlus</span> <span class='hs-varid'>m</span><span class='hs-layout'>,</span> <span class='hs-conid'>Monoid</span> <span class='hs-varid'>w</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>Monoid</span> <span class='hs-layout'>(</span><span class='hs-conid'>SWriter</span><span class='hs-varop'>.</span><span class='hs-conid'>WriterT</span> <span class='hs-varid'>w</span> <span class='hs-varid'>m</span> <span class='hs-varid'>n</span><span class='hs-layout'>)</span> <span class='hs-keyword'>where</span>
hunk ./doc/html/monoids/src/Data-Monoid-Instances.html 77
-<a name="line-69"></a><span class='hs-keyword'>instance</span> <span class='hs-layout'>(</span><span class='hs-conid'>MonadPlus</span> <span class='hs-varid'>m</span><span class='hs-layout'>,</span> <span class='hs-conid'>Monoid</span> <span class='hs-varid'>w</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>Monoid</span> <span class='hs-layout'>(</span><span class='hs-conid'>LRWS</span><span class='hs-varop'>.</span><span class='hs-conid'>RWST</span> <span class='hs-varid'>r</span> <span class='hs-varid'>w</span> <span class='hs-varid'>s</span> <span class='hs-varid'>m</span> <span class='hs-varid'>n</span><span class='hs-layout'>)</span> <span class='hs-keyword'>where</span> 
+<a name="line-69"></a><span class='hs-keyword'>instance</span> <span class='hs-layout'>(</span><span class='hs-conid'>MonadPlus</span> <span class='hs-varid'>m</span><span class='hs-layout'>,</span> <span class='hs-conid'>Monoid</span> <span class='hs-varid'>w</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>Monoid</span> <span class='hs-layout'>(</span><span class='hs-conid'>WriterT</span> <span class='hs-varid'>w</span> <span class='hs-varid'>m</span> <span class='hs-varid'>n</span><span class='hs-layout'>)</span> <span class='hs-keyword'>where</span>
hunk ./doc/html/monoids/src/Data-Monoid-Instances.html 81
-<a name="line-73"></a><span class='hs-keyword'>instance</span> <span class='hs-conid'>MonadPlus</span> <span class='hs-varid'>m</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>Monoid</span> <span class='hs-layout'>(</span><span class='hs-conid'>ReaderT</span> <span class='hs-varid'>e</span> <span class='hs-varid'>m</span> <span class='hs-varid'>n</span><span class='hs-layout'>)</span> <span class='hs-keyword'>where</span>
+<a name="line-73"></a><span class='hs-keyword'>instance</span> <span class='hs-layout'>(</span><span class='hs-conid'>MonadPlus</span> <span class='hs-varid'>m</span><span class='hs-layout'>,</span> <span class='hs-conid'>Monoid</span> <span class='hs-varid'>w</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>Monoid</span> <span class='hs-layout'>(</span><span class='hs-conid'>SRWS</span><span class='hs-varop'>.</span><span class='hs-conid'>RWST</span> <span class='hs-varid'>r</span> <span class='hs-varid'>w</span> <span class='hs-varid'>s</span> <span class='hs-varid'>m</span> <span class='hs-varid'>n</span><span class='hs-layout'>)</span> <span class='hs-keyword'>where</span> 
hunk ./doc/html/monoids/src/Data-Monoid-Instances.html 85
-<a name="line-77"></a><span class='hs-keyword'>instance</span> <span class='hs-conid'>MonadPlus</span> <span class='hs-varid'>m</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>Monoid</span> <span class='hs-layout'>(</span><span class='hs-conid'>SState</span><span class='hs-varop'>.</span><span class='hs-conid'>StateT</span> <span class='hs-varid'>s</span> <span class='hs-varid'>m</span> <span class='hs-varid'>n</span><span class='hs-layout'>)</span> <span class='hs-keyword'>where</span>
+<a name="line-77"></a><span class='hs-keyword'>instance</span> <span class='hs-layout'>(</span><span class='hs-conid'>MonadPlus</span> <span class='hs-varid'>m</span><span class='hs-layout'>,</span> <span class='hs-conid'>Monoid</span> <span class='hs-varid'>w</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>Monoid</span> <span class='hs-layout'>(</span><span class='hs-conid'>LRWS</span><span class='hs-varop'>.</span><span class='hs-conid'>RWST</span> <span class='hs-varid'>r</span> <span class='hs-varid'>w</span> <span class='hs-varid'>s</span> <span class='hs-varid'>m</span> <span class='hs-varid'>n</span><span class='hs-layout'>)</span> <span class='hs-keyword'>where</span> 
hunk ./doc/html/monoids/src/Data-Monoid-Instances.html 89
-<a name="line-81"></a><span class='hs-keyword'>instance</span> <span class='hs-conid'>MonadPlus</span> <span class='hs-varid'>m</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>Monoid</span> <span class='hs-layout'>(</span><span class='hs-conid'>LState</span><span class='hs-varop'>.</span><span class='hs-conid'>StateT</span> <span class='hs-varid'>s</span> <span class='hs-varid'>m</span> <span class='hs-varid'>n</span><span class='hs-layout'>)</span> <span class='hs-keyword'>where</span>
+<a name="line-81"></a><span class='hs-keyword'>instance</span> <span class='hs-conid'>MonadPlus</span> <span class='hs-varid'>m</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>Monoid</span> <span class='hs-layout'>(</span><span class='hs-conid'>ReaderT</span> <span class='hs-varid'>e</span> <span class='hs-varid'>m</span> <span class='hs-varid'>n</span><span class='hs-layout'>)</span> <span class='hs-keyword'>where</span>
hunk ./doc/html/monoids/src/Data-Monoid-Instances.html 93
-<a name="line-85"></a><span class='hs-comment'>-- orphan, which should be in Data.FingerTree</span>
-<a name="line-86"></a><span class='hs-keyword'>instance</span> <span class='hs-conid'>Measured</span> <span class='hs-varid'>v</span> <span class='hs-varid'>a</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>Monoid</span> <span class='hs-layout'>(</span><span class='hs-conid'>FingerTree</span> <span class='hs-varid'>v</span> <span class='hs-varid'>a</span><span class='hs-layout'>)</span> <span class='hs-keyword'>where</span>
-<a name="line-87"></a>    <span class='hs-varid'>mempty</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>empty</span>
-<a name="line-88"></a>    <span class='hs-varid'>mappend</span> <span class='hs-keyglyph'>=</span> <span class='hs-layout'>(</span><span class='hs-varop'>&gt;&lt;</span><span class='hs-layout'>)</span>
-<a name="line-89"></a>
-<a name="line-90"></a><span class='hs-comment'>-- orphan, which should be in Parsec</span>
-<a name="line-91"></a><span class='hs-keyword'>instance</span> <span class='hs-conid'>Stream</span> <span class='hs-varid'>s</span> <span class='hs-varid'>m</span> <span class='hs-varid'>t</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>Monoid</span> <span class='hs-layout'>(</span><span class='hs-conid'>ParsecT</span> <span class='hs-varid'>s</span> <span class='hs-varid'>u</span> <span class='hs-varid'>m</span> <span class='hs-varid'>a</span><span class='hs-layout'>)</span> <span class='hs-keyword'>where</span>
-<a name="line-92"></a>    <span class='hs-varid'>mempty</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>mzero</span>
-<a name="line-93"></a>    <span class='hs-varid'>a</span> <span class='hs-varop'>`mappend`</span> <span class='hs-varid'>b</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>try</span> <span class='hs-varid'>a</span> <span class='hs-varop'>&lt;|&gt;</span> <span class='hs-varid'>b</span>
-<a name="line-94"></a>
-<a name="line-95"></a><span class='hs-comment'>-- orphan, perhaps should be in Data.String</span>
-<a name="line-96"></a><span class='hs-keyword'>instance</span> <span class='hs-layout'>(</span><span class='hs-conid'>IsString</span> <span class='hs-varid'>a</span><span class='hs-layout'>,</span> <span class='hs-conid'>IsString</span> <span class='hs-varid'>b</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>IsString</span> <span class='hs-layout'>(</span><span class='hs-varid'>a</span><span class='hs-layout'>,</span><span class='hs-varid'>b</span><span class='hs-layout'>)</span> <span class='hs-keyword'>where</span>
-<a name="line-97"></a>    <span class='hs-varid'>fromString</span> <span class='hs-varid'>a</span> <span class='hs-keyglyph'>=</span> <span class='hs-layout'>(</span><span class='hs-varid'>fromString</span> <span class='hs-varid'>a</span><span class='hs-layout'>,</span> <span class='hs-varid'>fromString</span> <span class='hs-varid'>a</span><span class='hs-layout'>)</span>
-<a name="line-98"></a>
-<a name="line-99"></a><span class='hs-keyword'>instance</span> <span class='hs-layout'>(</span><span class='hs-conid'>IsString</span> <span class='hs-varid'>a</span><span class='hs-layout'>,</span> <span class='hs-conid'>IsString</span> <span class='hs-varid'>b</span><span class='hs-layout'>,</span> <span class='hs-conid'>IsString</span> <span class='hs-varid'>c</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>IsString</span> <span class='hs-layout'>(</span><span class='hs-varid'>a</span><span class='hs-layout'>,</span><span class='hs-varid'>b</span><span class='hs-layout'>,</span><span class='hs-varid'>c</span><span class='hs-layout'>)</span> <span class='hs-keyword'>where</span>
-<a name="line-100"></a>    <span class='hs-varid'>fromString</span> <span class='hs-varid'>a</span> <span class='hs-keyglyph'>=</span> <span class='hs-layout'>(</span><span class='hs-varid'>fromString</span> <span class='hs-varid'>a</span><span class='hs-layout'>,</span> <span class='hs-varid'>fromString</span> <span class='hs-varid'>a</span><span class='hs-layout'>,</span> <span class='hs-varid'>fromString</span> <span class='hs-varid'>a</span><span class='hs-layout'>)</span>
-<a name="line-101"></a>
-<a name="line-102"></a><span class='hs-keyword'>instance</span> <span class='hs-layout'>(</span><span class='hs-conid'>IsString</span> <span class='hs-varid'>a</span><span class='hs-layout'>,</span> <span class='hs-conid'>IsString</span> <span class='hs-varid'>b</span><span class='hs-layout'>,</span> <span class='hs-conid'>IsString</span> <span class='hs-varid'>c</span><span class='hs-layout'>,</span> <span class='hs-conid'>IsString</span> <span class='hs-varid'>d</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>IsString</span> <span class='hs-layout'>(</span><span class='hs-varid'>a</span><span class='hs-layout'>,</span><span class='hs-varid'>b</span><span class='hs-layout'>,</span><span class='hs-varid'>c</span><span class='hs-layout'>,</span><span class='hs-varid'>d</span><span class='hs-layout'>)</span> <span class='hs-keyword'>where</span>
-<a name="line-103"></a>    <span class='hs-varid'>fromString</span> <span class='hs-varid'>a</span> <span class='hs-keyglyph'>=</span> <span class='hs-layout'>(</span><span class='hs-varid'>fromString</span> <span class='hs-varid'>a</span><span class='hs-layout'>,</span> <span class='hs-varid'>fromString</span> <span class='hs-varid'>a</span><span class='hs-layout'>,</span> <span class='hs-varid'>fromString</span> <span class='hs-varid'>a</span><span class='hs-layout'>,</span> <span class='hs-varid'>fromString</span> <span class='hs-varid'>a</span><span class='hs-layout'>)</span>
-<a name="line-104"></a>
-<a name="line-105"></a><span class='hs-keyword'>instance</span> <span class='hs-layout'>(</span><span class='hs-conid'>IsString</span> <span class='hs-varid'>a</span><span class='hs-layout'>,</span> <span class='hs-conid'>IsString</span> <span class='hs-varid'>b</span><span class='hs-layout'>,</span> <span class='hs-conid'>IsString</span> <span class='hs-varid'>c</span><span class='hs-layout'>,</span> <span class='hs-conid'>IsString</span> <span class='hs-varid'>d</span><span class='hs-layout'>,</span> <span class='hs-conid'>IsString</span> <span class='hs-varid'>e</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>IsString</span> <span class='hs-layout'>(</span><span class='hs-varid'>a</span><span class='hs-layout'>,</span><span class='hs-varid'>b</span><span class='hs-layout'>,</span><span class='hs-varid'>c</span><span class='hs-layout'>,</span><span class='hs-varid'>d</span><span class='hs-layout'>,</span><span class='hs-varid'>e</span><span class='hs-layout'>)</span> <span class='hs-keyword'>where</span>
-<a name="line-106"></a>    <span class='hs-varid'>fromString</span> <span class='hs-varid'>a</span> <span class='hs-keyglyph'>=</span> <span class='hs-layout'>(</span><span class='hs-varid'>fromString</span> <span class='hs-varid'>a</span><span class='hs-layout'>,</span> <span class='hs-varid'>fromString</span> <span class='hs-varid'>a</span><span class='hs-layout'>,</span> <span class='hs-varid'>fromString</span> <span class='hs-varid'>a</span><span class='hs-layout'>,</span> <span class='hs-varid'>fromString</span> <span class='hs-varid'>a</span><span class='hs-layout'>,</span> <span class='hs-varid'>fromString</span> <span class='hs-varid'>a</span><span class='hs-layout'>)</span>
-<a name="line-107"></a>
-<a name="line-108"></a><span class='hs-keyword'>instance</span> <span class='hs-conid'>Monoid</span> <span class='hs-conid'>Int</span> <span class='hs-keyword'>where</span>
-<a name="line-109"></a>    <span class='hs-varid'>mempty</span> <span class='hs-keyglyph'>=</span> <span class='hs-num'>0</span>
-<a name="line-110"></a>    <span class='hs-varid'>mappend</span> <span class='hs-keyglyph'>=</span> <span class='hs-layout'>(</span><span class='hs-varop'>+</span><span class='hs-layout'>)</span>
-<a name="line-111"></a>
-<a name="line-112"></a><span class='hs-keyword'>instance</span> <span class='hs-conid'>Monoid</span> <span class='hs-conid'>Integer</span> <span class='hs-keyword'>where</span>
-<a name="line-113"></a>    <span class='hs-varid'>mempty</span> <span class='hs-keyglyph'>=</span> <span class='hs-num'>0</span>
-<a name="line-114"></a>    <span class='hs-varid'>mappend</span> <span class='hs-keyglyph'>=</span> <span class='hs-layout'>(</span><span class='hs-varop'>+</span><span class='hs-layout'>)</span>
+<a name="line-85"></a><span class='hs-keyword'>instance</span> <span class='hs-conid'>MonadPlus</span> <span class='hs-varid'>m</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>Monoid</span> <span class='hs-layout'>(</span><span class='hs-conid'>SState</span><span class='hs-varop'>.</span><span class='hs-conid'>StateT</span> <span class='hs-varid'>s</span> <span class='hs-varid'>m</span> <span class='hs-varid'>n</span><span class='hs-layout'>)</span> <span class='hs-keyword'>where</span>
+<a name="line-86"></a>    <span class='hs-varid'>mempty</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>mzero</span>
+<a name="line-87"></a>    <span class='hs-varid'>mappend</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>mplus</span>
+<a name="line-88"></a>
+<a name="line-89"></a><span class='hs-keyword'>instance</span> <span class='hs-conid'>MonadPlus</span> <span class='hs-varid'>m</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>Monoid</span> <span class='hs-layout'>(</span><span class='hs-conid'>LState</span><span class='hs-varop'>.</span><span class='hs-conid'>StateT</span> <span class='hs-varid'>s</span> <span class='hs-varid'>m</span> <span class='hs-varid'>n</span><span class='hs-layout'>)</span> <span class='hs-keyword'>where</span>
+<a name="line-90"></a>    <span class='hs-varid'>mempty</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>mzero</span>
+<a name="line-91"></a>    <span class='hs-varid'>mappend</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>mplus</span>
+<a name="line-92"></a><span class='hs-cpp'>#endif</span>
+<a name="line-93"></a>
+<a name="line-94"></a><span class='hs-cpp'>#ifdef M_FINGERTREE</span>
+<a name="line-95"></a><span class='hs-keyword'>instance</span> <span class='hs-conid'>Measured</span> <span class='hs-varid'>v</span> <span class='hs-varid'>a</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>Monoid</span> <span class='hs-layout'>(</span><span class='hs-conid'>FingerTree</span> <span class='hs-varid'>v</span> <span class='hs-varid'>a</span><span class='hs-layout'>)</span> <span class='hs-keyword'>where</span>
+<a name="line-96"></a>    <span class='hs-varid'>mempty</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>empty</span>
+<a name="line-97"></a>    <span class='hs-varid'>mappend</span> <span class='hs-keyglyph'>=</span> <span class='hs-layout'>(</span><span class='hs-varop'>&gt;&lt;</span><span class='hs-layout'>)</span>
+<a name="line-98"></a><span class='hs-cpp'>#endif</span>
+<a name="line-99"></a>
+<a name="line-100"></a><span class='hs-cpp'>#ifdef M_PARSEC</span>
+<a name="line-101"></a><span class='hs-keyword'>instance</span> <span class='hs-conid'>Stream</span> <span class='hs-varid'>s</span> <span class='hs-varid'>m</span> <span class='hs-varid'>t</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>Monoid</span> <span class='hs-layout'>(</span><span class='hs-conid'>ParsecT</span> <span class='hs-varid'>s</span> <span class='hs-varid'>u</span> <span class='hs-varid'>m</span> <span class='hs-varid'>a</span><span class='hs-layout'>)</span> <span class='hs-keyword'>where</span>
+<a name="line-102"></a>    <span class='hs-varid'>mempty</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>mzero</span>
+<a name="line-103"></a>    <span class='hs-varid'>a</span> <span class='hs-varop'>`mappend`</span> <span class='hs-varid'>b</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>try</span> <span class='hs-varid'>a</span> <span class='hs-varop'>&lt;|&gt;</span> <span class='hs-varid'>b</span>
+<a name="line-104"></a><span class='hs-cpp'>#endif</span>
+<a name="line-105"></a>
+<a name="line-106"></a><span class='hs-cpp'>#ifdef X_OverloadedStrings</span>
+<a name="line-107"></a><span class='hs-keyword'>instance</span> <span class='hs-layout'>(</span><span class='hs-conid'>IsString</span> <span class='hs-varid'>a</span><span class='hs-layout'>,</span> <span class='hs-conid'>IsString</span> <span class='hs-varid'>b</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>IsString</span> <span class='hs-layout'>(</span><span class='hs-varid'>a</span><span class='hs-layout'>,</span><span class='hs-varid'>b</span><span class='hs-layout'>)</span> <span class='hs-keyword'>where</span>
+<a name="line-108"></a>    <span class='hs-varid'>fromString</span> <span class='hs-varid'>a</span> <span class='hs-keyglyph'>=</span> <span class='hs-layout'>(</span><span class='hs-varid'>fromString</span> <span class='hs-varid'>a</span><span class='hs-layout'>,</span> <span class='hs-varid'>fromString</span> <span class='hs-varid'>a</span><span class='hs-layout'>)</span>
+<a name="line-109"></a>
+<a name="line-110"></a><span class='hs-keyword'>instance</span> <span class='hs-layout'>(</span><span class='hs-conid'>IsString</span> <span class='hs-varid'>a</span><span class='hs-layout'>,</span> <span class='hs-conid'>IsString</span> <span class='hs-varid'>b</span><span class='hs-layout'>,</span> <span class='hs-conid'>IsString</span> <span class='hs-varid'>c</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>IsString</span> <span class='hs-layout'>(</span><span class='hs-varid'>a</span><span class='hs-layout'>,</span><span class='hs-varid'>b</span><span class='hs-layout'>,</span><span class='hs-varid'>c</span><span class='hs-layout'>)</span> <span class='hs-keyword'>where</span>
+<a name="line-111"></a>    <span class='hs-varid'>fromString</span> <span class='hs-varid'>a</span> <span class='hs-keyglyph'>=</span> <span class='hs-layout'>(</span><span class='hs-varid'>fromString</span> <span class='hs-varid'>a</span><span class='hs-layout'>,</span> <span class='hs-varid'>fromString</span> <span class='hs-varid'>a</span><span class='hs-layout'>,</span> <span class='hs-varid'>fromString</span> <span class='hs-varid'>a</span><span class='hs-layout'>)</span>
+<a name="line-112"></a>
+<a name="line-113"></a><span class='hs-keyword'>instance</span> <span class='hs-layout'>(</span><span class='hs-conid'>IsString</span> <span class='hs-varid'>a</span><span class='hs-layout'>,</span> <span class='hs-conid'>IsString</span> <span class='hs-varid'>b</span><span class='hs-layout'>,</span> <span class='hs-conid'>IsString</span> <span class='hs-varid'>c</span><span class='hs-layout'>,</span> <span class='hs-conid'>IsString</span> <span class='hs-varid'>d</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>IsString</span> <span class='hs-layout'>(</span><span class='hs-varid'>a</span><span class='hs-layout'>,</span><span class='hs-varid'>b</span><span class='hs-layout'>,</span><span class='hs-varid'>c</span><span class='hs-layout'>,</span><span class='hs-varid'>d</span><span class='hs-layout'>)</span> <span class='hs-keyword'>where</span>
+<a name="line-114"></a>    <span class='hs-varid'>fromString</span> <span class='hs-varid'>a</span> <span class='hs-keyglyph'>=</span> <span class='hs-layout'>(</span><span class='hs-varid'>fromString</span> <span class='hs-varid'>a</span><span class='hs-layout'>,</span> <span class='hs-varid'>fromString</span> <span class='hs-varid'>a</span><span class='hs-layout'>,</span> <span class='hs-varid'>fromString</span> <span class='hs-varid'>a</span><span class='hs-layout'>,</span> <span class='hs-varid'>fromString</span> <span class='hs-varid'>a</span><span class='hs-layout'>)</span>
hunk ./doc/html/monoids/src/Data-Monoid-Instances.html 124
-<a name="line-116"></a><span class='hs-keyword'>instance</span> <span class='hs-conid'>Integral</span> <span class='hs-varid'>m</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>Monoid</span> <span class='hs-layout'>(</span><span class='hs-conid'>Ratio</span> <span class='hs-varid'>m</span><span class='hs-layout'>)</span> <span class='hs-keyword'>where</span>
-<a name="line-117"></a>    <span class='hs-varid'>mempty</span> <span class='hs-keyglyph'>=</span> <span class='hs-num'>0</span>
-<a name="line-118"></a>    <span class='hs-varid'>mappend</span> <span class='hs-keyglyph'>=</span> <span class='hs-layout'>(</span><span class='hs-varop'>+</span><span class='hs-layout'>)</span>
+<a name="line-116"></a><span class='hs-keyword'>instance</span> <span class='hs-layout'>(</span><span class='hs-conid'>IsString</span> <span class='hs-varid'>a</span><span class='hs-layout'>,</span> <span class='hs-conid'>IsString</span> <span class='hs-varid'>b</span><span class='hs-layout'>,</span> <span class='hs-conid'>IsString</span> <span class='hs-varid'>c</span><span class='hs-layout'>,</span> <span class='hs-conid'>IsString</span> <span class='hs-varid'>d</span><span class='hs-layout'>,</span> <span class='hs-conid'>IsString</span> <span class='hs-varid'>e</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>IsString</span> <span class='hs-layout'>(</span><span class='hs-varid'>a</span><span class='hs-layout'>,</span><span class='hs-varid'>b</span><span class='hs-layout'>,</span><span class='hs-varid'>c</span><span class='hs-layout'>,</span><span class='hs-varid'>d</span><span class='hs-layout'>,</span><span class='hs-varid'>e</span><span class='hs-layout'>)</span> <span class='hs-keyword'>where</span>
+<a name="line-117"></a>    <span class='hs-varid'>fromString</span> <span class='hs-varid'>a</span> <span class='hs-keyglyph'>=</span> <span class='hs-layout'>(</span><span class='hs-varid'>fromString</span> <span class='hs-varid'>a</span><span class='hs-layout'>,</span> <span class='hs-varid'>fromString</span> <span class='hs-varid'>a</span><span class='hs-layout'>,</span> <span class='hs-varid'>fromString</span> <span class='hs-varid'>a</span><span class='hs-layout'>,</span> <span class='hs-varid'>fromString</span> <span class='hs-varid'>a</span><span class='hs-layout'>,</span> <span class='hs-varid'>fromString</span> <span class='hs-varid'>a</span><span class='hs-layout'>)</span>
+<a name="line-118"></a><span class='hs-cpp'>#endif</span>
+<a name="line-119"></a>
+<a name="line-120"></a><span class='hs-keyword'>instance</span> <span class='hs-conid'>Monoid</span> <span class='hs-conid'>Int</span> <span class='hs-keyword'>where</span>
+<a name="line-121"></a>    <span class='hs-varid'>mempty</span> <span class='hs-keyglyph'>=</span> <span class='hs-num'>0</span>
+<a name="line-122"></a>    <span class='hs-varid'>mappend</span> <span class='hs-keyglyph'>=</span> <span class='hs-layout'>(</span><span class='hs-varop'>+</span><span class='hs-layout'>)</span>
+<a name="line-123"></a>
+<a name="line-124"></a><span class='hs-keyword'>instance</span> <span class='hs-conid'>Monoid</span> <span class='hs-conid'>Integer</span> <span class='hs-keyword'>where</span>
+<a name="line-125"></a>    <span class='hs-varid'>mempty</span> <span class='hs-keyglyph'>=</span> <span class='hs-num'>0</span>
+<a name="line-126"></a>    <span class='hs-varid'>mappend</span> <span class='hs-keyglyph'>=</span> <span class='hs-layout'>(</span><span class='hs-varop'>+</span><span class='hs-layout'>)</span>
+<a name="line-127"></a>
+<a name="line-128"></a><span class='hs-keyword'>instance</span> <span class='hs-conid'>Integral</span> <span class='hs-varid'>m</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>Monoid</span> <span class='hs-layout'>(</span><span class='hs-conid'>Ratio</span> <span class='hs-varid'>m</span><span class='hs-layout'>)</span> <span class='hs-keyword'>where</span>
+<a name="line-129"></a>    <span class='hs-varid'>mempty</span> <span class='hs-keyglyph'>=</span> <span class='hs-num'>0</span>
+<a name="line-130"></a>    <span class='hs-varid'>mappend</span> <span class='hs-keyglyph'>=</span> <span class='hs-layout'>(</span><span class='hs-varop'>+</span><span class='hs-layout'>)</span>
+<a name="line-131"></a>
+<a name="line-132"></a><span class='hs-keyword'>instance</span> <span class='hs-conid'>Monoid</span> <span class='hs-conid'>Bool</span> <span class='hs-keyword'>where</span>
+<a name="line-133"></a>    <span class='hs-varid'>mempty</span> <span class='hs-keyglyph'>=</span> <span class='hs-num'>0</span>
+<a name="line-134"></a>    <span class='hs-varid'>mappend</span> <span class='hs-keyglyph'>=</span> <span class='hs-layout'>(</span><span class='hs-varop'>||</span><span class='hs-layout'>)</span>
+<a name="line-135"></a>
+<a name="line-136"></a><span class='hs-comment'>-- boolean semiring</span>
+<a name="line-137"></a><span class='hs-keyword'>instance</span> <span class='hs-conid'>Num</span> <span class='hs-conid'>Bool</span> <span class='hs-keyword'>where</span>
+<a name="line-138"></a>    <span class='hs-layout'>(</span><span class='hs-varop'>+</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=</span> <span class='hs-layout'>(</span><span class='hs-varop'>||</span><span class='hs-layout'>)</span>
+<a name="line-139"></a>    <span class='hs-layout'>(</span><span class='hs-varop'>*</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=</span> <span class='hs-layout'>(</span><span class='hs-varop'>&amp;&amp;</span><span class='hs-layout'>)</span>
+<a name="line-140"></a>    <span class='hs-varid'>x</span> <span class='hs-comment'>-</span> <span class='hs-varid'>y</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>x</span> <span class='hs-varop'>&amp;&amp;</span> <span class='hs-varid'>not</span> <span class='hs-varid'>y</span>
+<a name="line-141"></a>    <span class='hs-varid'>negate</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>not</span>
+<a name="line-142"></a>    <span class='hs-varid'>abs</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>id</span>
+<a name="line-143"></a>    <span class='hs-varid'>signum</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>id</span>
+<a name="line-144"></a>    <span class='hs-varid'>fromInteger</span> <span class='hs-num'>0</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>False</span>
+<a name="line-145"></a>    <span class='hs-varid'>fromInteger</span> <span class='hs-keyword'>_</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>True</span>
+<a name="line-146"></a>
+<a name="line-147"></a><span class='hs-keyword'>instance</span> <span class='hs-conid'>Bits</span> <span class='hs-conid'>Bool</span> <span class='hs-keyword'>where</span>
+<a name="line-148"></a>    <span class='hs-layout'>(</span><span class='hs-varop'>.&amp;.</span><span class='hs-layout'>)</span>           <span class='hs-keyglyph'>=</span> <span class='hs-layout'>(</span><span class='hs-varop'>&amp;&amp;</span><span class='hs-layout'>)</span>
+<a name="line-149"></a>    <span class='hs-layout'>(</span><span class='hs-varop'>.|.</span><span class='hs-layout'>)</span>           <span class='hs-keyglyph'>=</span> <span class='hs-layout'>(</span><span class='hs-varop'>||</span><span class='hs-layout'>)</span>
+<a name="line-150"></a>    <span class='hs-varid'>xor</span> <span class='hs-conid'>True</span> <span class='hs-conid'>True</span>   <span class='hs-keyglyph'>=</span> <span class='hs-conid'>False</span>
+<a name="line-151"></a>    <span class='hs-varid'>xor</span> <span class='hs-conid'>False</span> <span class='hs-conid'>False</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>False</span>
+<a name="line-152"></a>    <span class='hs-varid'>xor</span> <span class='hs-keyword'>_</span> <span class='hs-keyword'>_</span>         <span class='hs-keyglyph'>=</span> <span class='hs-conid'>True</span>
+<a name="line-153"></a>    <span class='hs-varid'>complement</span>      <span class='hs-keyglyph'>=</span> <span class='hs-varid'>not</span>
+<a name="line-154"></a>    <span class='hs-varid'>shiftL</span> <span class='hs-varid'>a</span> <span class='hs-varid'>b</span>      <span class='hs-keyglyph'>=</span> <span class='hs-varid'>a</span> <span class='hs-varop'>&amp;&amp;</span> <span class='hs-layout'>(</span><span class='hs-varid'>b</span> <span class='hs-varop'>==</span> <span class='hs-num'>0</span><span class='hs-layout'>)</span>
+<a name="line-155"></a>    <span class='hs-varid'>shiftR</span> <span class='hs-varid'>a</span> <span class='hs-varid'>b</span>      <span class='hs-keyglyph'>=</span> <span class='hs-varid'>a</span> <span class='hs-varop'>&amp;&amp;</span> <span class='hs-layout'>(</span><span class='hs-varid'>b</span> <span class='hs-varop'>==</span> <span class='hs-num'>0</span><span class='hs-layout'>)</span>
+<a name="line-156"></a>    <span class='hs-varid'>shift</span>  <span class='hs-varid'>a</span> <span class='hs-varid'>b</span>      <span class='hs-keyglyph'>=</span> <span class='hs-varid'>a</span> <span class='hs-varop'>&amp;&amp;</span> <span class='hs-layout'>(</span><span class='hs-varid'>b</span> <span class='hs-varop'>==</span> <span class='hs-num'>0</span><span class='hs-layout'>)</span>
+<a name="line-157"></a>    <span class='hs-varid'>rotate</span> <span class='hs-varid'>a</span> <span class='hs-keyword'>_</span>      <span class='hs-keyglyph'>=</span> <span class='hs-varid'>a</span>
+<a name="line-158"></a>    <span class='hs-varid'>bit</span>             <span class='hs-keyglyph'>=</span> <span class='hs-layout'>(</span><span class='hs-varop'>==</span><span class='hs-num'>0</span><span class='hs-layout'>)</span>
+<a name="line-159"></a>    <span class='hs-varid'>setBit</span> <span class='hs-varid'>a</span> <span class='hs-varid'>b</span>      <span class='hs-keyglyph'>=</span> <span class='hs-varid'>a</span> <span class='hs-varop'>||</span> <span class='hs-layout'>(</span><span class='hs-varid'>b</span> <span class='hs-varop'>==</span> <span class='hs-num'>0</span><span class='hs-layout'>)</span>
+<a name="line-160"></a>    <span class='hs-varid'>testBit</span> <span class='hs-varid'>a</span> <span class='hs-varid'>b</span>     <span class='hs-keyglyph'>=</span> <span class='hs-varid'>a</span> <span class='hs-varop'>&amp;&amp;</span> <span class='hs-layout'>(</span><span class='hs-varid'>b</span> <span class='hs-varop'>==</span> <span class='hs-num'>0</span><span class='hs-layout'>)</span>
+<a name="line-161"></a>    <span class='hs-varid'>bitSize</span> <span class='hs-keyword'>_</span>       <span class='hs-keyglyph'>=</span> <span class='hs-num'>1</span>
+<a name="line-162"></a>    <span class='hs-varid'>isSigned</span> <span class='hs-keyword'>_</span>      <span class='hs-keyglyph'>=</span> <span class='hs-conid'>False</span>
hunk ./doc/html/monoids/src/Data-Monoid-Monad.html 26
-<a name="line-18"></a>    <span class='hs-layout'>,</span> <span class='hs-keyword'>module</span> <span class='hs-conid'>Data</span><span class='hs-varop'>.</span><span class='hs-conid'>Ring</span><span class='hs-varop'>.</span><span class='hs-conid'>Semi</span><span class='hs-varop'>.</span><span class='hs-conid'>Near</span>
+<a name="line-18"></a>    <span class='hs-layout'>,</span> <span class='hs-keyword'>module</span> <span class='hs-conid'>Data</span><span class='hs-varop'>.</span><span class='hs-conid'>Ring</span><span class='hs-varop'>.</span><span class='hs-conid'>Module</span>
hunk ./doc/html/monoids/src/Data-Monoid-Monad.html 39
-<a name="line-31"></a><span class='hs-keyword'>import</span> <span class='hs-conid'>Data</span><span class='hs-varop'>.</span><span class='hs-conid'>Ring</span><span class='hs-varop'>.</span><span class='hs-conid'>Semi</span><span class='hs-varop'>.</span><span class='hs-conid'>Near</span>
-<a name="line-32"></a><span class='hs-keyword'>import</span> <span class='hs-conid'>Data</span><span class='hs-varop'>.</span><span class='hs-conid'>Ring</span><span class='hs-varop'>.</span><span class='hs-conid'>Module</span>
-<a name="line-33"></a><span class='hs-keyword'>import</span> <span class='hs-conid'>Control</span><span class='hs-varop'>.</span><span class='hs-conid'>Monad</span>
-<a name="line-34"></a>
-<a name="line-35"></a><a name="Action"></a><span class='hs-comment'>-- | An 'Action' uses glues together 'Monad' actions with (&gt;&gt;)</span>
-<a name="line-36"></a><a name="Action"></a><span class='hs-comment'>--   in the manner of 'mapM_' from "Data.Foldable". Any values returned by </span>
-<a name="line-37"></a><a name="Action"></a><span class='hs-comment'>--   reduced actions are discarded.</span>
-<a name="line-38"></a><a name="Action"></a><span class='hs-keyword'>newtype</span> <span class='hs-conid'>Action</span> <span class='hs-varid'>m</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>Action</span> <span class='hs-layout'>{</span> <span class='hs-varid'>getAction</span> <span class='hs-keyglyph'>::</span> <span class='hs-varid'>m</span> <span class='hs-conid'>()</span> <span class='hs-layout'>}</span> 
-<a name="line-39"></a>
-<a name="line-40"></a><span class='hs-keyword'>instance</span> <span class='hs-conid'>Monad</span> <span class='hs-varid'>m</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>Monoid</span> <span class='hs-layout'>(</span><span class='hs-conid'>Action</span> <span class='hs-varid'>m</span><span class='hs-layout'>)</span> <span class='hs-keyword'>where</span>
-<a name="line-41"></a>    <span class='hs-varid'>mempty</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>Action</span> <span class='hs-layout'>(</span><span class='hs-varid'>return</span> <span class='hs-conid'>()</span><span class='hs-layout'>)</span>
-<a name="line-42"></a>    <span class='hs-conid'>Action</span> <span class='hs-varid'>a</span> <span class='hs-varop'>`mappend`</span> <span class='hs-conid'>Action</span> <span class='hs-varid'>b</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>Action</span> <span class='hs-layout'>(</span><span class='hs-varid'>a</span> <span class='hs-varop'>&gt;&gt;</span> <span class='hs-varid'>b</span><span class='hs-layout'>)</span>
-<a name="line-43"></a>
-<a name="line-44"></a><span class='hs-keyword'>instance</span> <span class='hs-conid'>Monad</span> <span class='hs-varid'>m</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>Reducer</span> <span class='hs-layout'>(</span><span class='hs-varid'>m</span> <span class='hs-varid'>a</span><span class='hs-layout'>)</span> <span class='hs-layout'>(</span><span class='hs-conid'>Action</span> <span class='hs-varid'>m</span><span class='hs-layout'>)</span> <span class='hs-keyword'>where</span>
-<a name="line-45"></a>    <span class='hs-varid'>unit</span> <span class='hs-varid'>a</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>Action</span> <span class='hs-layout'>(</span><span class='hs-varid'>a</span> <span class='hs-varop'>&gt;&gt;</span> <span class='hs-varid'>return</span> <span class='hs-conid'>()</span><span class='hs-layout'>)</span>
-<a name="line-46"></a>    <span class='hs-varid'>a</span> <span class='hs-varop'>`cons`</span> <span class='hs-conid'>Action</span> <span class='hs-varid'>b</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>Action</span> <span class='hs-layout'>(</span><span class='hs-varid'>a</span> <span class='hs-varop'>&gt;&gt;</span> <span class='hs-varid'>b</span><span class='hs-layout'>)</span>
-<a name="line-47"></a>    <span class='hs-conid'>Action</span> <span class='hs-varid'>a</span> <span class='hs-varop'>`snoc`</span> <span class='hs-varid'>b</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>Action</span> <span class='hs-layout'>(</span><span class='hs-varid'>a</span> <span class='hs-varop'>&gt;&gt;</span> <span class='hs-varid'>b</span> <span class='hs-varop'>&gt;&gt;</span> <span class='hs-varid'>return</span> <span class='hs-conid'>()</span><span class='hs-layout'>)</span>
-<a name="line-48"></a>
-<a name="line-49"></a><span class='hs-comment'>{-# RULES "unitAction" unit = Action #-}</span>
-<a name="line-50"></a><span class='hs-comment'>{-# RULES "snocAction" snoc = snocAction #-}</span> 
-<a name="line-51"></a>
-<a name="line-52"></a><a name="snocAction"></a><span class='hs-comment'>-- | Efficiently avoid needlessly rebinding when using 'snoc' on an action that already returns ()</span>
-<a name="line-53"></a><span class='hs-comment'>--   A rewrite rule automatically applies this when possible</span>
-<a name="line-54"></a><span class='hs-definition'>snocAction</span> <span class='hs-keyglyph'>::</span> <span class='hs-conid'>Reducer</span> <span class='hs-layout'>(</span><span class='hs-varid'>m</span> <span class='hs-conid'>()</span><span class='hs-layout'>)</span> <span class='hs-layout'>(</span><span class='hs-conid'>Action</span> <span class='hs-varid'>m</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>Action</span> <span class='hs-varid'>m</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-varid'>m</span> <span class='hs-conid'>()</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-conid'>Action</span> <span class='hs-varid'>m</span>
-<a name="line-55"></a><span class='hs-definition'>snocAction</span> <span class='hs-varid'>a</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>mappend</span> <span class='hs-varid'>a</span> <span class='hs-varop'>.</span> <span class='hs-conid'>Action</span>
-<a name="line-56"></a>
-<a name="line-57"></a><span class='hs-comment'>-- | A 'MonadSum' turns any 'MonadPlus' instance into a 'Monoid'.</span>
-<a name="line-58"></a><span class='hs-comment'>--   It also provides a 'Multiplicative' instance for a 'Monad' wrapped around a 'Monoid'</span>
-<a name="line-59"></a><span class='hs-comment'>--   and asserts that any 'MonadPlus' applied to a 'Monoid' forms a 'RightSemiNearRing' </span>
-<a name="line-60"></a><span class='hs-comment'>--   under these operations.</span>
-<a name="line-61"></a>
-<a name="line-62"></a><a name="MonadSum"></a><span class='hs-keyword'>newtype</span> <span class='hs-conid'>MonadSum</span> <span class='hs-varid'>m</span> <span class='hs-varid'>a</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>MonadSum</span> <span class='hs-layout'>{</span> <span class='hs-varid'>getMonadSum</span> <span class='hs-keyglyph'>::</span> <span class='hs-varid'>m</span> <span class='hs-varid'>a</span> <span class='hs-layout'>}</span> 
-<a name="line-63"></a>    <span class='hs-keyword'>deriving</span> <span class='hs-layout'>(</span><span class='hs-conid'>Eq</span><span class='hs-layout'>,</span><span class='hs-conid'>Ord</span><span class='hs-layout'>,</span><span class='hs-conid'>Show</span><span class='hs-layout'>,</span><span class='hs-conid'>Read</span><span class='hs-layout'>,</span><span class='hs-conid'>Monad</span><span class='hs-layout'>,</span><span class='hs-conid'>MonadPlus</span><span class='hs-layout'>)</span>
-<a name="line-64"></a>
-<a name="line-65"></a><span class='hs-keyword'>instance</span> <span class='hs-conid'>MonadPlus</span> <span class='hs-varid'>m</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>Monoid</span> <span class='hs-layout'>(</span><span class='hs-conid'>MonadSum</span> <span class='hs-varid'>m</span> <span class='hs-varid'>a</span><span class='hs-layout'>)</span> <span class='hs-keyword'>where</span>
-<a name="line-66"></a>    <span class='hs-varid'>mempty</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>mzero</span>
-<a name="line-67"></a>    <span class='hs-varid'>mappend</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>mplus</span>
-<a name="line-68"></a>
-<a name="line-69"></a><span class='hs-keyword'>instance</span> <span class='hs-layout'>(</span><span class='hs-conid'>Monad</span> <span class='hs-varid'>m</span><span class='hs-layout'>,</span> <span class='hs-conid'>Monoid</span> <span class='hs-varid'>a</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>Multiplicative</span> <span class='hs-layout'>(</span><span class='hs-conid'>MonadSum</span> <span class='hs-varid'>m</span> <span class='hs-varid'>a</span><span class='hs-layout'>)</span> <span class='hs-keyword'>where</span>
-<a name="line-70"></a>    <span class='hs-varid'>one</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>return</span> <span class='hs-varid'>mempty</span>
-<a name="line-71"></a>    <span class='hs-varid'>times</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>liftM2</span> <span class='hs-varid'>mappend</span>
-<a name="line-72"></a>
-<a name="line-73"></a><span class='hs-keyword'>instance</span> <span class='hs-conid'>Monad</span> <span class='hs-varid'>m</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>Functor</span> <span class='hs-layout'>(</span><span class='hs-conid'>MonadSum</span> <span class='hs-varid'>m</span><span class='hs-layout'>)</span> <span class='hs-keyword'>where</span>
-<a name="line-74"></a>    <span class='hs-varid'>fmap</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>liftM</span>
-<a name="line-75"></a>
-<a name="line-76"></a><span class='hs-keyword'>instance</span> <span class='hs-conid'>Monad</span> <span class='hs-varid'>m</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>Applicative</span> <span class='hs-layout'>(</span><span class='hs-conid'>MonadSum</span> <span class='hs-varid'>m</span><span class='hs-layout'>)</span> <span class='hs-keyword'>where</span>
-<a name="line-77"></a>    <span class='hs-varid'>pure</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>return</span>
-<a name="line-78"></a>    <span class='hs-layout'>(</span><span class='hs-varop'>&lt;*&gt;</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>ap</span>
-<a name="line-79"></a>
-<a name="line-80"></a><span class='hs-keyword'>instance</span> <span class='hs-conid'>Monad</span> <span class='hs-varid'>m</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>Pointed</span> <span class='hs-layout'>(</span><span class='hs-conid'>MonadSum</span> <span class='hs-varid'>m</span><span class='hs-layout'>)</span> <span class='hs-keyword'>where</span>
-<a name="line-81"></a>    <span class='hs-varid'>point</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>return</span>
-<a name="line-82"></a>
-<a name="line-83"></a><span class='hs-keyword'>instance</span> <span class='hs-conid'>MonadPlus</span> <span class='hs-varid'>m</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>Reducer</span> <span class='hs-layout'>(</span><span class='hs-varid'>m</span> <span class='hs-varid'>a</span><span class='hs-layout'>)</span> <span class='hs-layout'>(</span><span class='hs-conid'>MonadSum</span> <span class='hs-varid'>m</span> <span class='hs-varid'>a</span><span class='hs-layout'>)</span> <span class='hs-keyword'>where</span>
-<a name="line-84"></a>    <span class='hs-varid'>unit</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>MonadSum</span>
-<a name="line-85"></a>
-<a name="line-86"></a><span class='hs-keyword'>instance</span> <span class='hs-layout'>(</span><span class='hs-conid'>MonadPlus</span> <span class='hs-varid'>m</span><span class='hs-layout'>,</span> <span class='hs-conid'>Monoid</span> <span class='hs-varid'>a</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>Ringoid</span> <span class='hs-layout'>(</span><span class='hs-conid'>MonadSum</span> <span class='hs-varid'>m</span> <span class='hs-varid'>a</span><span class='hs-layout'>)</span>
-<a name="line-87"></a>
-<a name="line-88"></a><span class='hs-keyword'>instance</span> <span class='hs-layout'>(</span><span class='hs-conid'>MonadPlus</span> <span class='hs-varid'>m</span><span class='hs-layout'>,</span> <span class='hs-conid'>Monoid</span> <span class='hs-varid'>a</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>RightSemiNearRing</span> <span class='hs-layout'>(</span><span class='hs-conid'>MonadSum</span> <span class='hs-varid'>m</span> <span class='hs-varid'>a</span><span class='hs-layout'>)</span>
-<a name="line-89"></a>
-<a name="line-90"></a><span class='hs-comment'>-- | if @m@ is a 'Module' over @r@ and @f@ is a 'Monad' then @f `Mon` m@ is a 'Module' as well</span>
-<a name="line-91"></a>
-<a name="line-92"></a><a name="Mon"></a><span class='hs-keyword'>newtype</span> <span class='hs-conid'>Mon</span> <span class='hs-varid'>f</span> <span class='hs-varid'>m</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>Mon</span> <span class='hs-layout'>{</span> <span class='hs-varid'>getMon</span> <span class='hs-keyglyph'>::</span> <span class='hs-varid'>f</span> <span class='hs-varid'>m</span> <span class='hs-layout'>}</span> 
-<a name="line-93"></a>    <span class='hs-keyword'>deriving</span> <span class='hs-layout'>(</span><span class='hs-conid'>Eq</span><span class='hs-layout'>,</span><span class='hs-conid'>Ord</span><span class='hs-layout'>,</span><span class='hs-conid'>Show</span><span class='hs-layout'>,</span><span class='hs-conid'>Read</span><span class='hs-layout'>,</span><span class='hs-conid'>Functor</span><span class='hs-layout'>,</span><span class='hs-conid'>Pointed</span><span class='hs-layout'>,</span> <span class='hs-conid'>Monad</span><span class='hs-layout'>,</span><span class='hs-conid'>MonadPlus</span><span class='hs-layout'>)</span>
-<a name="line-94"></a>
-<a name="line-95"></a><span class='hs-keyword'>instance</span> <span class='hs-layout'>(</span><span class='hs-conid'>Monoid</span> <span class='hs-varid'>m</span><span class='hs-layout'>,</span> <span class='hs-conid'>Monad</span> <span class='hs-varid'>f</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>Monoid</span> <span class='hs-layout'>(</span><span class='hs-varid'>f</span> <span class='hs-varop'>`Mon`</span> <span class='hs-varid'>m</span><span class='hs-layout'>)</span> <span class='hs-keyword'>where</span>
-<a name="line-96"></a>    <span class='hs-varid'>mempty</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>return</span> <span class='hs-varid'>mempty</span>
-<a name="line-97"></a>    <span class='hs-varid'>mappend</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>liftM2</span> <span class='hs-varid'>mappend</span>
-<a name="line-98"></a>
-<a name="line-99"></a><span class='hs-keyword'>instance</span> <span class='hs-layout'>(</span><span class='hs-conid'>Group</span> <span class='hs-varid'>m</span><span class='hs-layout'>,</span> <span class='hs-conid'>Monad</span> <span class='hs-varid'>f</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>Group</span> <span class='hs-layout'>(</span><span class='hs-varid'>f</span> <span class='hs-varop'>`Mon`</span> <span class='hs-varid'>m</span><span class='hs-layout'>)</span> <span class='hs-keyword'>where</span>
-<a name="line-100"></a>    <span class='hs-varid'>gnegate</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>liftM</span> <span class='hs-varid'>gnegate</span>
-<a name="line-101"></a>    <span class='hs-varid'>minus</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>liftM2</span> <span class='hs-varid'>minus</span>
-<a name="line-102"></a>    <span class='hs-varid'>gsubtract</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>liftM2</span> <span class='hs-varid'>gsubtract</span>
-<a name="line-103"></a>
-<a name="line-104"></a><span class='hs-keyword'>instance</span> <span class='hs-layout'>(</span><span class='hs-varid'>c</span> <span class='hs-varop'>`Reducer`</span> <span class='hs-varid'>m</span><span class='hs-layout'>,</span> <span class='hs-conid'>Monad</span> <span class='hs-varid'>f</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>Reducer</span> <span class='hs-varid'>c</span> <span class='hs-layout'>(</span><span class='hs-varid'>f</span> <span class='hs-varop'>`Mon`</span> <span class='hs-varid'>m</span><span class='hs-layout'>)</span> <span class='hs-keyword'>where</span>
-<a name="line-105"></a>    <span class='hs-varid'>unit</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>return</span> <span class='hs-varop'>.</span> <span class='hs-varid'>unit</span>
-<a name="line-106"></a>
-<a name="line-107"></a><span class='hs-keyword'>instance</span> <span class='hs-layout'>(</span><span class='hs-conid'>LeftModule</span> <span class='hs-varid'>r</span> <span class='hs-varid'>m</span><span class='hs-layout'>,</span> <span class='hs-conid'>Monad</span> <span class='hs-varid'>f</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>LeftModule</span> <span class='hs-varid'>r</span> <span class='hs-layout'>(</span><span class='hs-varid'>f</span> <span class='hs-varop'>`Mon`</span> <span class='hs-varid'>m</span><span class='hs-layout'>)</span> <span class='hs-keyword'>where</span>
-<a name="line-108"></a>    <span class='hs-varid'>x</span> <span class='hs-varop'>*.</span> <span class='hs-varid'>m</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>liftM</span> <span class='hs-layout'>(</span><span class='hs-varid'>x</span> <span class='hs-varop'>*.</span><span class='hs-layout'>)</span> <span class='hs-varid'>m</span>
-<a name="line-109"></a>
-<a name="line-110"></a><span class='hs-keyword'>instance</span> <span class='hs-layout'>(</span><span class='hs-conid'>RightModule</span> <span class='hs-varid'>r</span> <span class='hs-varid'>m</span><span class='hs-layout'>,</span> <span class='hs-conid'>Monad</span> <span class='hs-varid'>f</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>RightModule</span> <span class='hs-varid'>r</span> <span class='hs-layout'>(</span><span class='hs-varid'>f</span> <span class='hs-varop'>`Mon`</span> <span class='hs-varid'>m</span><span class='hs-layout'>)</span> <span class='hs-keyword'>where</span>
-<a name="line-111"></a>    <span class='hs-varid'>m</span> <span class='hs-varop'>.*</span> <span class='hs-varid'>y</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>liftM</span> <span class='hs-layout'>(</span><span class='hs-varop'>.*</span> <span class='hs-varid'>y</span><span class='hs-layout'>)</span> <span class='hs-varid'>m</span>
-<a name="line-112"></a>
-<a name="line-113"></a><span class='hs-keyword'>instance</span> <span class='hs-layout'>(</span><span class='hs-conid'>Module</span> <span class='hs-varid'>r</span> <span class='hs-varid'>m</span><span class='hs-layout'>,</span> <span class='hs-conid'>Monad</span> <span class='hs-varid'>f</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>Module</span> <span class='hs-varid'>r</span> <span class='hs-layout'>(</span><span class='hs-varid'>f</span> <span class='hs-varop'>`Mon`</span> <span class='hs-varid'>m</span><span class='hs-layout'>)</span>
+<a name="line-31"></a><span class='hs-keyword'>import</span> <span class='hs-conid'>Data</span><span class='hs-varop'>.</span><span class='hs-conid'>Ring</span><span class='hs-varop'>.</span><span class='hs-conid'>Module</span>
+<a name="line-32"></a><span class='hs-keyword'>import</span> <span class='hs-conid'>Control</span><span class='hs-varop'>.</span><span class='hs-conid'>Monad</span>
+<a name="line-33"></a>
+<a name="line-34"></a><a name="Action"></a><span class='hs-comment'>-- | An 'Action' uses glues together 'Monad' actions with (&gt;&gt;)</span>
+<a name="line-35"></a><a name="Action"></a><span class='hs-comment'>--   in the manner of 'mapM_' from "Data.Foldable". Any values returned by </span>
+<a name="line-36"></a><a name="Action"></a><span class='hs-comment'>--   reduced actions are discarded.</span>
+<a name="line-37"></a><a name="Action"></a><span class='hs-keyword'>newtype</span> <span class='hs-conid'>Action</span> <span class='hs-varid'>m</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>Action</span> <span class='hs-layout'>{</span> <span class='hs-varid'>getAction</span> <span class='hs-keyglyph'>::</span> <span class='hs-varid'>m</span> <span class='hs-conid'>()</span> <span class='hs-layout'>}</span> 
+<a name="line-38"></a>
+<a name="line-39"></a><span class='hs-keyword'>instance</span> <span class='hs-conid'>Monad</span> <span class='hs-varid'>m</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>Monoid</span> <span class='hs-layout'>(</span><span class='hs-conid'>Action</span> <span class='hs-varid'>m</span><span class='hs-layout'>)</span> <span class='hs-keyword'>where</span>
+<a name="line-40"></a>    <span class='hs-varid'>mempty</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>Action</span> <span class='hs-layout'>(</span><span class='hs-varid'>return</span> <span class='hs-conid'>()</span><span class='hs-layout'>)</span>
+<a name="line-41"></a>    <span class='hs-conid'>Action</span> <span class='hs-varid'>a</span> <span class='hs-varop'>`mappend`</span> <span class='hs-conid'>Action</span> <span class='hs-varid'>b</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>Action</span> <span class='hs-layout'>(</span><span class='hs-varid'>a</span> <span class='hs-varop'>&gt;&gt;</span> <span class='hs-varid'>b</span><span class='hs-layout'>)</span>
+<a name="line-42"></a>
+<a name="line-43"></a><span class='hs-keyword'>instance</span> <span class='hs-conid'>Monad</span> <span class='hs-varid'>m</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>Reducer</span> <span class='hs-layout'>(</span><span class='hs-varid'>m</span> <span class='hs-varid'>a</span><span class='hs-layout'>)</span> <span class='hs-layout'>(</span><span class='hs-conid'>Action</span> <span class='hs-varid'>m</span><span class='hs-layout'>)</span> <span class='hs-keyword'>where</span>
+<a name="line-44"></a>    <span class='hs-varid'>unit</span> <span class='hs-varid'>a</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>Action</span> <span class='hs-layout'>(</span><span class='hs-varid'>a</span> <span class='hs-varop'>&gt;&gt;</span> <span class='hs-varid'>return</span> <span class='hs-conid'>()</span><span class='hs-layout'>)</span>
+<a name="line-45"></a>    <span class='hs-varid'>a</span> <span class='hs-varop'>`cons`</span> <span class='hs-conid'>Action</span> <span class='hs-varid'>b</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>Action</span> <span class='hs-layout'>(</span><span class='hs-varid'>a</span> <span class='hs-varop'>&gt;&gt;</span> <span class='hs-varid'>b</span><span class='hs-layout'>)</span>
+<a name="line-46"></a>    <span class='hs-conid'>Action</span> <span class='hs-varid'>a</span> <span class='hs-varop'>`snoc`</span> <span class='hs-varid'>b</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>Action</span> <span class='hs-layout'>(</span><span class='hs-varid'>a</span> <span class='hs-varop'>&gt;&gt;</span> <span class='hs-varid'>b</span> <span class='hs-varop'>&gt;&gt;</span> <span class='hs-varid'>return</span> <span class='hs-conid'>()</span><span class='hs-layout'>)</span>
+<a name="line-47"></a>
+<a name="line-48"></a><span class='hs-comment'>{-# RULES "unitAction" unit = Action #-}</span>
+<a name="line-49"></a><span class='hs-comment'>{-# RULES "snocAction" snoc = snocAction #-}</span> 
+<a name="line-50"></a>
+<a name="line-51"></a><a name="snocAction"></a><span class='hs-comment'>-- | Efficiently avoid needlessly rebinding when using 'snoc' on an action that already returns ()</span>
+<a name="line-52"></a><span class='hs-comment'>--   A rewrite rule automatically applies this when possible</span>
+<a name="line-53"></a><span class='hs-definition'>snocAction</span> <span class='hs-keyglyph'>::</span> <span class='hs-conid'>Reducer</span> <span class='hs-layout'>(</span><span class='hs-varid'>m</span> <span class='hs-conid'>()</span><span class='hs-layout'>)</span> <span class='hs-layout'>(</span><span class='hs-conid'>Action</span> <span class='hs-varid'>m</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>Action</span> <span class='hs-varid'>m</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-varid'>m</span> <span class='hs-conid'>()</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-conid'>Action</span> <span class='hs-varid'>m</span>
+<a name="line-54"></a><span class='hs-definition'>snocAction</span> <span class='hs-varid'>a</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>mappend</span> <span class='hs-varid'>a</span> <span class='hs-varop'>.</span> <span class='hs-conid'>Action</span>
+<a name="line-55"></a>
+<a name="line-56"></a><span class='hs-comment'>-- | A 'MonadSum' turns any 'MonadPlus' instance into a 'Monoid'.</span>
+<a name="line-57"></a><span class='hs-comment'>--   It also provides a 'Multiplicative' instance for a 'Monad' wrapped around a 'Monoid'</span>
+<a name="line-58"></a><span class='hs-comment'>--   and asserts that any 'MonadPlus' applied to a 'Monoid' forms a 'RightSemiNearRing' </span>
+<a name="line-59"></a><span class='hs-comment'>--   under these operations.</span>
+<a name="line-60"></a>
+<a name="line-61"></a><a name="MonadSum"></a><span class='hs-keyword'>newtype</span> <span class='hs-conid'>MonadSum</span> <span class='hs-varid'>m</span> <span class='hs-varid'>a</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>MonadSum</span> <span class='hs-layout'>{</span> <span class='hs-varid'>getMonadSum</span> <span class='hs-keyglyph'>::</span> <span class='hs-varid'>m</span> <span class='hs-varid'>a</span> <span class='hs-layout'>}</span> 
+<a name="line-62"></a>    <span class='hs-keyword'>deriving</span> <span class='hs-layout'>(</span><span class='hs-conid'>Eq</span><span class='hs-layout'>,</span><span class='hs-conid'>Ord</span><span class='hs-layout'>,</span><span class='hs-conid'>Show</span><span class='hs-layout'>,</span><span class='hs-conid'>Read</span><span class='hs-layout'>,</span><span class='hs-conid'>Monad</span><span class='hs-layout'>,</span><span class='hs-conid'>MonadPlus</span><span class='hs-layout'>)</span>
+<a name="line-63"></a>
+<a name="line-64"></a><span class='hs-keyword'>instance</span> <span class='hs-conid'>MonadPlus</span> <span class='hs-varid'>m</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>Monoid</span> <span class='hs-layout'>(</span><span class='hs-conid'>MonadSum</span> <span class='hs-varid'>m</span> <span class='hs-varid'>a</span><span class='hs-layout'>)</span> <span class='hs-keyword'>where</span>
+<a name="line-65"></a>    <span class='hs-varid'>mempty</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>mzero</span>
+<a name="line-66"></a>    <span class='hs-varid'>mappend</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>mplus</span>
+<a name="line-67"></a>
+<a name="line-68"></a><span class='hs-keyword'>instance</span> <span class='hs-layout'>(</span><span class='hs-conid'>Monad</span> <span class='hs-varid'>m</span><span class='hs-layout'>,</span> <span class='hs-conid'>Monoid</span> <span class='hs-varid'>a</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>Multiplicative</span> <span class='hs-layout'>(</span><span class='hs-conid'>MonadSum</span> <span class='hs-varid'>m</span> <span class='hs-varid'>a</span><span class='hs-layout'>)</span> <span class='hs-keyword'>where</span>
+<a name="line-69"></a>    <span class='hs-varid'>one</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>return</span> <span class='hs-varid'>mempty</span>
+<a name="line-70"></a>    <span class='hs-varid'>times</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>liftM2</span> <span class='hs-varid'>mappend</span>
+<a name="line-71"></a>
+<a name="line-72"></a><span class='hs-keyword'>instance</span> <span class='hs-conid'>Monad</span> <span class='hs-varid'>m</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>Functor</span> <span class='hs-layout'>(</span><span class='hs-conid'>MonadSum</span> <span class='hs-varid'>m</span><span class='hs-layout'>)</span> <span class='hs-keyword'>where</span>
+<a name="line-73"></a>    <span class='hs-varid'>fmap</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>liftM</span>
+<a name="line-74"></a>
+<a name="line-75"></a><span class='hs-keyword'>instance</span> <span class='hs-conid'>Monad</span> <span class='hs-varid'>m</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>Applicative</span> <span class='hs-layout'>(</span><span class='hs-conid'>MonadSum</span> <span class='hs-varid'>m</span><span class='hs-layout'>)</span> <span class='hs-keyword'>where</span>
+<a name="line-76"></a>    <span class='hs-varid'>pure</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>return</span>
+<a name="line-77"></a>    <span class='hs-layout'>(</span><span class='hs-varop'>&lt;*&gt;</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>ap</span>
+<a name="line-78"></a>
+<a name="line-79"></a><span class='hs-keyword'>instance</span> <span class='hs-conid'>Monad</span> <span class='hs-varid'>m</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>Pointed</span> <span class='hs-layout'>(</span><span class='hs-conid'>MonadSum</span> <span class='hs-varid'>m</span><span class='hs-layout'>)</span> <span class='hs-keyword'>where</span>
+<a name="line-80"></a>    <span class='hs-varid'>point</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>return</span>
+<a name="line-81"></a>
+<a name="line-82"></a><span class='hs-keyword'>instance</span> <span class='hs-conid'>MonadPlus</span> <span class='hs-varid'>m</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>Reducer</span> <span class='hs-layout'>(</span><span class='hs-varid'>m</span> <span class='hs-varid'>a</span><span class='hs-layout'>)</span> <span class='hs-layout'>(</span><span class='hs-conid'>MonadSum</span> <span class='hs-varid'>m</span> <span class='hs-varid'>a</span><span class='hs-layout'>)</span> <span class='hs-keyword'>where</span>
+<a name="line-83"></a>    <span class='hs-varid'>unit</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>MonadSum</span>
+<a name="line-84"></a>
+<a name="line-85"></a><span class='hs-keyword'>instance</span> <span class='hs-layout'>(</span><span class='hs-conid'>MonadPlus</span> <span class='hs-varid'>m</span><span class='hs-layout'>,</span> <span class='hs-conid'>Monoid</span> <span class='hs-varid'>a</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>Ringoid</span> <span class='hs-layout'>(</span><span class='hs-conid'>MonadSum</span> <span class='hs-varid'>m</span> <span class='hs-varid'>a</span><span class='hs-layout'>)</span>
+<a name="line-86"></a>
+<a name="line-87"></a><span class='hs-keyword'>instance</span> <span class='hs-layout'>(</span><span class='hs-conid'>MonadPlus</span> <span class='hs-varid'>m</span><span class='hs-layout'>,</span> <span class='hs-conid'>Monoid</span> <span class='hs-varid'>a</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>RightSemiNearRing</span> <span class='hs-layout'>(</span><span class='hs-conid'>MonadSum</span> <span class='hs-varid'>m</span> <span class='hs-varid'>a</span><span class='hs-layout'>)</span>
+<a name="line-88"></a>
+<a name="line-89"></a><span class='hs-comment'>-- | if @m@ is a 'Module' over @r@ and @f@ is a 'Monad' then @f `Mon` m@ is a 'Module' as well</span>
+<a name="line-90"></a>
+<a name="line-91"></a><a name="Mon"></a><span class='hs-keyword'>newtype</span> <span class='hs-conid'>Mon</span> <span class='hs-varid'>f</span> <span class='hs-varid'>m</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>Mon</span> <span class='hs-layout'>{</span> <span class='hs-varid'>getMon</span> <span class='hs-keyglyph'>::</span> <span class='hs-varid'>f</span> <span class='hs-varid'>m</span> <span class='hs-layout'>}</span> 
+<a name="line-92"></a>    <span class='hs-keyword'>deriving</span> <span class='hs-layout'>(</span><span class='hs-conid'>Eq</span><span class='hs-layout'>,</span><span class='hs-conid'>Ord</span><span class='hs-layout'>,</span><span class='hs-conid'>Show</span><span class='hs-layout'>,</span><span class='hs-conid'>Read</span><span class='hs-layout'>,</span><span class='hs-conid'>Functor</span><span class='hs-layout'>,</span><span class='hs-conid'>Pointed</span><span class='hs-layout'>,</span> <span class='hs-conid'>Monad</span><span class='hs-layout'>,</span><span class='hs-conid'>MonadPlus</span><span class='hs-layout'>)</span>
+<a name="line-93"></a>
+<a name="line-94"></a><span class='hs-keyword'>instance</span> <span class='hs-layout'>(</span><span class='hs-conid'>Monoid</span> <span class='hs-varid'>m</span><span class='hs-layout'>,</span> <span class='hs-conid'>Monad</span> <span class='hs-varid'>f</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>Monoid</span> <span class='hs-layout'>(</span><span class='hs-varid'>f</span> <span class='hs-varop'>`Mon`</span> <span class='hs-varid'>m</span><span class='hs-layout'>)</span> <span class='hs-keyword'>where</span>
+<a name="line-95"></a>    <span class='hs-varid'>mempty</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>return</span> <span class='hs-varid'>mempty</span>
+<a name="line-96"></a>    <span class='hs-varid'>mappend</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>liftM2</span> <span class='hs-varid'>mappend</span>
+<a name="line-97"></a>
+<a name="line-98"></a><span class='hs-keyword'>instance</span> <span class='hs-layout'>(</span><span class='hs-conid'>Group</span> <span class='hs-varid'>m</span><span class='hs-layout'>,</span> <span class='hs-conid'>Monad</span> <span class='hs-varid'>f</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>Group</span> <span class='hs-layout'>(</span><span class='hs-varid'>f</span> <span class='hs-varop'>`Mon`</span> <span class='hs-varid'>m</span><span class='hs-layout'>)</span> <span class='hs-keyword'>where</span>
+<a name="line-99"></a>    <span class='hs-varid'>gnegate</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>liftM</span> <span class='hs-varid'>gnegate</span>
+<a name="line-100"></a>    <span class='hs-varid'>minus</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>liftM2</span> <span class='hs-varid'>minus</span>
+<a name="line-101"></a>    <span class='hs-varid'>gsubtract</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>liftM2</span> <span class='hs-varid'>gsubtract</span>
+<a name="line-102"></a>
+<a name="line-103"></a><span class='hs-keyword'>instance</span> <span class='hs-layout'>(</span><span class='hs-varid'>c</span> <span class='hs-varop'>`Reducer`</span> <span class='hs-varid'>m</span><span class='hs-layout'>,</span> <span class='hs-conid'>Monad</span> <span class='hs-varid'>f</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>Reducer</span> <span class='hs-varid'>c</span> <span class='hs-layout'>(</span><span class='hs-varid'>f</span> <span class='hs-varop'>`Mon`</span> <span class='hs-varid'>m</span><span class='hs-layout'>)</span> <span class='hs-keyword'>where</span>
+<a name="line-104"></a>    <span class='hs-varid'>unit</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>return</span> <span class='hs-varop'>.</span> <span class='hs-varid'>unit</span>
+<a name="line-105"></a>
+<a name="line-106"></a><span class='hs-keyword'>instance</span> <span class='hs-layout'>(</span><span class='hs-conid'>LeftModule</span> <span class='hs-varid'>r</span> <span class='hs-varid'>m</span><span class='hs-layout'>,</span> <span class='hs-conid'>Monad</span> <span class='hs-varid'>f</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>LeftModule</span> <span class='hs-varid'>r</span> <span class='hs-layout'>(</span><span class='hs-varid'>f</span> <span class='hs-varop'>`Mon`</span> <span class='hs-varid'>m</span><span class='hs-layout'>)</span> <span class='hs-keyword'>where</span>
+<a name="line-107"></a>    <span class='hs-varid'>x</span> <span class='hs-varop'>*.</span> <span class='hs-varid'>m</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>liftM</span> <span class='hs-layout'>(</span><span class='hs-varid'>x</span> <span class='hs-varop'>*.</span><span class='hs-layout'>)</span> <span class='hs-varid'>m</span>
+<a name="line-108"></a>
+<a name="line-109"></a><span class='hs-keyword'>instance</span> <span class='hs-layout'>(</span><span class='hs-conid'>RightModule</span> <span class='hs-varid'>r</span> <span class='hs-varid'>m</span><span class='hs-layout'>,</span> <span class='hs-conid'>Monad</span> <span class='hs-varid'>f</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>RightModule</span> <span class='hs-varid'>r</span> <span class='hs-layout'>(</span><span class='hs-varid'>f</span> <span class='hs-varop'>`Mon`</span> <span class='hs-varid'>m</span><span class='hs-layout'>)</span> <span class='hs-keyword'>where</span>
+<a name="line-110"></a>    <span class='hs-varid'>m</span> <span class='hs-varop'>.*</span> <span class='hs-varid'>y</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>liftM</span> <span class='hs-layout'>(</span><span class='hs-varop'>.*</span> <span class='hs-varid'>y</span><span class='hs-layout'>)</span> <span class='hs-varid'>m</span>
+<a name="line-111"></a>
+<a name="line-112"></a><span class='hs-keyword'>instance</span> <span class='hs-layout'>(</span><span class='hs-conid'>Module</span> <span class='hs-varid'>r</span> <span class='hs-varid'>m</span><span class='hs-layout'>,</span> <span class='hs-conid'>Monad</span> <span class='hs-varid'>f</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>Module</span> <span class='hs-varid'>r</span> <span class='hs-layout'>(</span><span class='hs-varid'>f</span> <span class='hs-varop'>`Mon`</span> <span class='hs-varid'>m</span><span class='hs-layout'>)</span>
hunk ./doc/html/monoids/src/Data-Monoid-Multiplicative-Sugar.html 20
-<a name="line-12"></a><span class='hs-comment'>-- &gt; import Prelude hiding ((+),(*))</span>
+<a name="line-12"></a><span class='hs-comment'>-- &gt; import Prelude hiding ((+),(*),(^))</span>
hunk ./doc/html/monoids/src/Data-Monoid-Multiplicative-Sugar.html 28
-<a name="line-20"></a>    <span class='hs-layout'>,</span> <span class='hs-layout'>(</span><span class='hs-varop'>*</span><span class='hs-layout'>)</span>
-<a name="line-21"></a>    <span class='hs-layout'>)</span> <span class='hs-keyword'>where</span>
-<a name="line-22"></a>
-<a name="line-23"></a><span class='hs-keyword'>import</span> <span class='hs-conid'>Data</span><span class='hs-varop'>.</span><span class='hs-conid'>Monoid</span><span class='hs-varop'>.</span><span class='hs-conid'>Additive</span><span class='hs-varop'>.</span><span class='hs-conid'>Sugar</span>
-<a name="line-24"></a><span class='hs-keyword'>import</span> <span class='hs-conid'>Data</span><span class='hs-varop'>.</span><span class='hs-conid'>Monoid</span><span class='hs-varop'>.</span><span class='hs-conid'>Multiplicative</span>
-<a name="line-25"></a><span class='hs-keyword'>import</span> <span class='hs-conid'>Prelude</span> <span class='hs-varid'>hiding</span> <span class='hs-layout'>(</span><span class='hs-layout'>(</span><span class='hs-varop'>*</span><span class='hs-layout'>)</span><span class='hs-layout'>)</span>
-<a name="line-26"></a>
-<a name="line-27"></a><span class='hs-keyword'>infixl</span> <span class='hs-num'>7</span> <span class='hs-varop'>*</span>
-<a name="line-28"></a>
-<a name="line-29"></a><a name="*"></a><span class='hs-layout'>(</span><span class='hs-varop'>*</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>::</span> <span class='hs-conid'>Multiplicative</span> <span class='hs-varid'>r</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-varid'>r</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-varid'>r</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-varid'>r</span>
-<a name="line-30"></a><span class='hs-layout'>(</span><span class='hs-varop'>*</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>times</span>
+<a name="line-20"></a>    <span class='hs-layout'>,</span> <span class='hs-keyword'>module</span> <span class='hs-conid'>Data</span><span class='hs-varop'>.</span><span class='hs-conid'>Ring</span><span class='hs-varop'>.</span><span class='hs-conid'>Semi</span><span class='hs-varop'>.</span><span class='hs-conid'>Natural</span>
+<a name="line-21"></a>    <span class='hs-layout'>,</span> <span class='hs-layout'>(</span><span class='hs-varop'>*</span><span class='hs-layout'>)</span>
+<a name="line-22"></a>    <span class='hs-layout'>,</span> <span class='hs-layout'>(</span><span class='hs-varop'>^</span><span class='hs-layout'>)</span>
+<a name="line-23"></a>    <span class='hs-layout'>)</span> <span class='hs-keyword'>where</span>
+<a name="line-24"></a>
+<a name="line-25"></a><span class='hs-keyword'>import</span> <span class='hs-conid'>Data</span><span class='hs-varop'>.</span><span class='hs-conid'>Monoid</span><span class='hs-varop'>.</span><span class='hs-conid'>Additive</span><span class='hs-varop'>.</span><span class='hs-conid'>Sugar</span>
+<a name="line-26"></a><span class='hs-keyword'>import</span> <span class='hs-conid'>Data</span><span class='hs-varop'>.</span><span class='hs-conid'>Monoid</span><span class='hs-varop'>.</span><span class='hs-conid'>Multiplicative</span>
+<a name="line-27"></a><span class='hs-keyword'>import</span> <span class='hs-conid'>Data</span><span class='hs-varop'>.</span><span class='hs-conid'>Monoid</span><span class='hs-varop'>.</span><span class='hs-conid'>Combinators</span> <span class='hs-keyword'>as</span> <span class='hs-conid'>Monoid</span>
+<a name="line-28"></a><span class='hs-keyword'>import</span> <span class='hs-conid'>Data</span><span class='hs-varop'>.</span><span class='hs-conid'>Ring</span><span class='hs-varop'>.</span><span class='hs-conid'>Semi</span><span class='hs-varop'>.</span><span class='hs-conid'>Natural</span>
+<a name="line-29"></a><span class='hs-keyword'>import</span> <span class='hs-conid'>Prelude</span> <span class='hs-varid'>hiding</span> <span class='hs-layout'>(</span><span class='hs-layout'>(</span><span class='hs-varop'>*</span><span class='hs-layout'>)</span><span class='hs-layout'>,</span><span class='hs-layout'>(</span><span class='hs-varop'>^</span><span class='hs-layout'>)</span><span class='hs-layout'>)</span>
+<a name="line-30"></a>
+<a name="line-31"></a><span class='hs-keyword'>infixl</span> <span class='hs-num'>7</span> <span class='hs-varop'>*</span>
+<a name="line-32"></a>
+<a name="line-33"></a><a name="*"></a><span class='hs-layout'>(</span><span class='hs-varop'>*</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>::</span> <span class='hs-conid'>Multiplicative</span> <span class='hs-varid'>r</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-varid'>r</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-varid'>r</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-varid'>r</span>
+<a name="line-34"></a><span class='hs-layout'>(</span><span class='hs-varop'>*</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>times</span>
+<a name="line-35"></a>
+<a name="line-36"></a><a name="^"></a><span class='hs-layout'>(</span><span class='hs-varop'>^</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>::</span> <span class='hs-conid'>Multiplicative</span> <span class='hs-varid'>r</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-varid'>r</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-conid'>Natural</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-varid'>r</span>
+<a name="line-37"></a><a name="r"></a><span class='hs-definition'>r</span> <span class='hs-varop'>^</span> <span class='hs-varid'>n</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>getLog</span> <span class='hs-layout'>(</span><span class='hs-conid'>Monoid</span><span class='hs-varop'>.</span><span class='hs-varid'>replicate</span> <span class='hs-layout'>(</span><span class='hs-conid'>Log</span> <span class='hs-varid'>r</span><span class='hs-layout'>)</span> <span class='hs-varid'>n</span><span class='hs-layout'>)</span>
hunk ./doc/html/monoids/src/Data-Monoid-Multiplicative.html 52
-<a name="line-44"></a>
-<a name="line-45"></a><span class='hs-keyword'>import</span> <span class='hs-conid'>Control</span><span class='hs-varop'>.</span><span class='hs-conid'>Concurrent</span><span class='hs-varop'>.</span><span class='hs-conid'>STM</span>
-<a name="line-46"></a>
-<a name="line-47"></a><span class='hs-keyword'>import</span> <span class='hs-conid'>Control</span><span class='hs-varop'>.</span><span class='hs-conid'>Monad</span><span class='hs-varop'>.</span><span class='hs-conid'>Cont</span>
-<a name="line-48"></a><span class='hs-keyword'>import</span> <span class='hs-conid'>Control</span><span class='hs-varop'>.</span><span class='hs-conid'>Monad</span><span class='hs-varop'>.</span><span class='hs-conid'>Identity</span>
+<a name="line-44"></a><span class='hs-keyword'>import</span> <span class='hs-conid'>Data</span><span class='hs-varop'>.</span><span class='hs-conid'>Monoid</span><span class='hs-varop'>.</span><span class='hs-conid'>Additive</span>
+<a name="line-45"></a><span class='hs-keyword'>import</span> <span class='hs-conid'>Data</span><span class='hs-varop'>.</span><span class='hs-conid'>Generator</span>
+<a name="line-46"></a><span class='hs-keyword'>import</span> <span class='hs-conid'>Data</span><span class='hs-varop'>.</span><span class='hs-conid'>Monoid</span><span class='hs-varop'>.</span><span class='hs-conid'>Instances</span> <span class='hs-conid'>()</span>
+<a name="line-47"></a><span class='hs-keyword'>import</span> <span class='hs-conid'>Data</span><span class='hs-varop'>.</span><span class='hs-conid'>Monoid</span><span class='hs-varop'>.</span><span class='hs-conid'>Self</span>
+<a name="line-48"></a><span class='hs-keyword'>import</span> <span class='hs-conid'>Data</span><span class='hs-varop'>.</span><span class='hs-conid'>Ratio</span>
hunk ./doc/html/monoids/src/Data-Monoid-Multiplicative.html 58
-<a name="line-50"></a><span class='hs-keyword'>import</span> <span class='hs-conid'>Control</span><span class='hs-varop'>.</span><span class='hs-conid'>Monad</span><span class='hs-varop'>.</span><span class='hs-conid'>Reader</span>
-<a name="line-51"></a>
-<a name="line-52"></a><span class='hs-keyword'>import</span> <span class='hs-keyword'>qualified</span> <span class='hs-conid'>Control</span><span class='hs-varop'>.</span><span class='hs-conid'>Monad</span><span class='hs-varop'>.</span><span class='hs-conid'>RWS</span><span class='hs-varop'>.</span><span class='hs-conid'>Lazy</span> <span class='hs-keyword'>as</span> <span class='hs-conid'>LRWS</span>
-<a name="line-53"></a><span class='hs-keyword'>import</span> <span class='hs-keyword'>qualified</span> <span class='hs-conid'>Control</span><span class='hs-varop'>.</span><span class='hs-conid'>Monad</span><span class='hs-varop'>.</span><span class='hs-conid'>RWS</span><span class='hs-varop'>.</span><span class='hs-conid'>Strict</span> <span class='hs-keyword'>as</span> <span class='hs-conid'>SRWS</span>
-<a name="line-54"></a>
-<a name="line-55"></a><span class='hs-keyword'>import</span> <span class='hs-keyword'>qualified</span> <span class='hs-conid'>Control</span><span class='hs-varop'>.</span><span class='hs-conid'>Monad</span><span class='hs-varop'>.</span><span class='hs-conid'>State</span><span class='hs-varop'>.</span><span class='hs-conid'>Lazy</span> <span class='hs-keyword'>as</span> <span class='hs-conid'>LState</span>
-<a name="line-56"></a><span class='hs-keyword'>import</span> <span class='hs-keyword'>qualified</span> <span class='hs-conid'>Control</span><span class='hs-varop'>.</span><span class='hs-conid'>Monad</span><span class='hs-varop'>.</span><span class='hs-conid'>State</span><span class='hs-varop'>.</span><span class='hs-conid'>Strict</span> <span class='hs-keyword'>as</span> <span class='hs-conid'>SState</span>
-<a name="line-57"></a>
-<a name="line-58"></a><span class='hs-keyword'>import</span> <span class='hs-keyword'>qualified</span> <span class='hs-conid'>Control</span><span class='hs-varop'>.</span><span class='hs-conid'>Monad</span><span class='hs-varop'>.</span><span class='hs-conid'>Writer</span><span class='hs-varop'>.</span><span class='hs-conid'>Lazy</span> <span class='hs-keyword'>as</span> <span class='hs-conid'>LWriter</span>
-<a name="line-59"></a><span class='hs-keyword'>import</span> <span class='hs-keyword'>qualified</span> <span class='hs-conid'>Control</span><span class='hs-varop'>.</span><span class='hs-conid'>Monad</span><span class='hs-varop'>.</span><span class='hs-conid'>Writer</span><span class='hs-varop'>.</span><span class='hs-conid'>Strict</span> <span class='hs-keyword'>as</span> <span class='hs-conid'>SWriter</span>
-<a name="line-60"></a>
-<a name="line-61"></a><span class='hs-keyword'>import</span> <span class='hs-keyword'>qualified</span> <span class='hs-conid'>Control</span><span class='hs-varop'>.</span><span class='hs-conid'>Monad</span><span class='hs-varop'>.</span><span class='hs-conid'>ST</span><span class='hs-varop'>.</span><span class='hs-conid'>Lazy</span> <span class='hs-keyword'>as</span> <span class='hs-conid'>LST</span>
-<a name="line-62"></a><span class='hs-keyword'>import</span> <span class='hs-keyword'>qualified</span> <span class='hs-conid'>Control</span><span class='hs-varop'>.</span><span class='hs-conid'>Monad</span><span class='hs-varop'>.</span><span class='hs-conid'>ST</span><span class='hs-varop'>.</span><span class='hs-conid'>Strict</span> <span class='hs-keyword'>as</span> <span class='hs-conid'>SST</span>
-<a name="line-63"></a>
-<a name="line-64"></a><span class='hs-keyword'>import</span> <span class='hs-conid'>Data</span><span class='hs-varop'>.</span><span class='hs-conid'>FingerTree</span>
-<a name="line-65"></a>
-<a name="line-66"></a><span class='hs-keyword'>import</span> <span class='hs-conid'>Data</span><span class='hs-varop'>.</span><span class='hs-conid'>Monoid</span><span class='hs-varop'>.</span><span class='hs-conid'>Additive</span>
-<a name="line-67"></a><span class='hs-keyword'>import</span> <span class='hs-conid'>Data</span><span class='hs-varop'>.</span><span class='hs-conid'>Monoid</span><span class='hs-varop'>.</span><span class='hs-conid'>FromString</span>
-<a name="line-68"></a><span class='hs-keyword'>import</span> <span class='hs-conid'>Data</span><span class='hs-varop'>.</span><span class='hs-conid'>Generator</span>
-<a name="line-69"></a><span class='hs-keyword'>import</span> <span class='hs-conid'>Data</span><span class='hs-varop'>.</span><span class='hs-conid'>Monoid</span><span class='hs-varop'>.</span><span class='hs-conid'>Instances</span> <span class='hs-conid'>()</span>
-<a name="line-70"></a><span class='hs-keyword'>import</span> <span class='hs-conid'>Data</span><span class='hs-varop'>.</span><span class='hs-conid'>Monoid</span><span class='hs-varop'>.</span><span class='hs-conid'>Self</span>
+<a name="line-50"></a><span class='hs-cpp'>#ifdef M_STM</span>
+<a name="line-51"></a><span class='hs-keyword'>import</span> <span class='hs-conid'>Control</span><span class='hs-varop'>.</span><span class='hs-conid'>Concurrent</span><span class='hs-varop'>.</span><span class='hs-conid'>STM</span>
+<a name="line-52"></a><span class='hs-cpp'>#endif</span>
+<a name="line-53"></a>
+<a name="line-54"></a><span class='hs-cpp'>#ifdef M_MTL</span>
+<a name="line-55"></a><span class='hs-keyword'>import</span> <span class='hs-conid'>Control</span><span class='hs-varop'>.</span><span class='hs-conid'>Monad</span><span class='hs-varop'>.</span><span class='hs-conid'>Cont</span>
+<a name="line-56"></a><span class='hs-keyword'>import</span> <span class='hs-conid'>Control</span><span class='hs-varop'>.</span><span class='hs-conid'>Monad</span><span class='hs-varop'>.</span><span class='hs-conid'>Identity</span>
+<a name="line-57"></a><span class='hs-keyword'>import</span> <span class='hs-conid'>Control</span><span class='hs-varop'>.</span><span class='hs-conid'>Monad</span><span class='hs-varop'>.</span><span class='hs-conid'>Reader</span>
+<a name="line-58"></a><span class='hs-keyword'>import</span> <span class='hs-keyword'>qualified</span> <span class='hs-conid'>Control</span><span class='hs-varop'>.</span><span class='hs-conid'>Monad</span><span class='hs-varop'>.</span><span class='hs-conid'>RWS</span><span class='hs-varop'>.</span><span class='hs-conid'>Lazy</span> <span class='hs-keyword'>as</span> <span class='hs-conid'>LRWS</span>
+<a name="line-59"></a><span class='hs-keyword'>import</span> <span class='hs-keyword'>qualified</span> <span class='hs-conid'>Control</span><span class='hs-varop'>.</span><span class='hs-conid'>Monad</span><span class='hs-varop'>.</span><span class='hs-conid'>RWS</span><span class='hs-varop'>.</span><span class='hs-conid'>Strict</span> <span class='hs-keyword'>as</span> <span class='hs-conid'>SRWS</span>
+<a name="line-60"></a><span class='hs-keyword'>import</span> <span class='hs-keyword'>qualified</span> <span class='hs-conid'>Control</span><span class='hs-varop'>.</span><span class='hs-conid'>Monad</span><span class='hs-varop'>.</span><span class='hs-conid'>State</span><span class='hs-varop'>.</span><span class='hs-conid'>Lazy</span> <span class='hs-keyword'>as</span> <span class='hs-conid'>LState</span>
+<a name="line-61"></a><span class='hs-keyword'>import</span> <span class='hs-keyword'>qualified</span> <span class='hs-conid'>Control</span><span class='hs-varop'>.</span><span class='hs-conid'>Monad</span><span class='hs-varop'>.</span><span class='hs-conid'>State</span><span class='hs-varop'>.</span><span class='hs-conid'>Strict</span> <span class='hs-keyword'>as</span> <span class='hs-conid'>SState</span>
+<a name="line-62"></a><span class='hs-keyword'>import</span> <span class='hs-keyword'>qualified</span> <span class='hs-conid'>Control</span><span class='hs-varop'>.</span><span class='hs-conid'>Monad</span><span class='hs-varop'>.</span><span class='hs-conid'>Writer</span><span class='hs-varop'>.</span><span class='hs-conid'>Lazy</span> <span class='hs-keyword'>as</span> <span class='hs-conid'>LWriter</span>
+<a name="line-63"></a><span class='hs-keyword'>import</span> <span class='hs-keyword'>qualified</span> <span class='hs-conid'>Control</span><span class='hs-varop'>.</span><span class='hs-conid'>Monad</span><span class='hs-varop'>.</span><span class='hs-conid'>Writer</span><span class='hs-varop'>.</span><span class='hs-conid'>Strict</span> <span class='hs-keyword'>as</span> <span class='hs-conid'>SWriter</span>
+<a name="line-64"></a><span class='hs-keyword'>import</span> <span class='hs-keyword'>qualified</span> <span class='hs-conid'>Control</span><span class='hs-varop'>.</span><span class='hs-conid'>Monad</span><span class='hs-varop'>.</span><span class='hs-conid'>ST</span><span class='hs-varop'>.</span><span class='hs-conid'>Lazy</span> <span class='hs-keyword'>as</span> <span class='hs-conid'>LST</span>
+<a name="line-65"></a><span class='hs-keyword'>import</span> <span class='hs-keyword'>qualified</span> <span class='hs-conid'>Control</span><span class='hs-varop'>.</span><span class='hs-conid'>Monad</span><span class='hs-varop'>.</span><span class='hs-conid'>ST</span><span class='hs-varop'>.</span><span class='hs-conid'>Strict</span> <span class='hs-keyword'>as</span> <span class='hs-conid'>SST</span>
+<a name="line-66"></a><span class='hs-cpp'>#endif</span>
+<a name="line-67"></a>
+<a name="line-68"></a><span class='hs-cpp'>#ifdef M_FINGERTREE</span>
+<a name="line-69"></a><span class='hs-keyword'>import</span> <span class='hs-conid'>Data</span><span class='hs-varop'>.</span><span class='hs-conid'>FingerTree</span>
+<a name="line-70"></a><span class='hs-cpp'>#endif</span>
hunk ./doc/html/monoids/src/Data-Monoid-Multiplicative.html 80
-<a name="line-72"></a><span class='hs-keyword'>import</span> <span class='hs-conid'>Data</span><span class='hs-varop'>.</span><span class='hs-conid'>Ratio</span>
-<a name="line-73"></a>
-<a name="line-74"></a><span class='hs-keyword'>import</span> <span class='hs-keyword'>qualified</span> <span class='hs-conid'>Data</span><span class='hs-varop'>.</span><span class='hs-conid'>Sequence</span> <span class='hs-keyword'>as</span> <span class='hs-conid'>Seq</span>
-<a name="line-75"></a><span class='hs-keyword'>import</span> <span class='hs-conid'>Data</span><span class='hs-varop'>.</span><span class='hs-conid'>Sequence</span> <span class='hs-layout'>(</span><span class='hs-conid'>Seq</span><span class='hs-layout'>)</span>
+<a name="line-72"></a><span class='hs-cpp'>#ifdef M_CONTAINERS</span>
+<a name="line-73"></a><span class='hs-keyword'>import</span> <span class='hs-keyword'>qualified</span> <span class='hs-conid'>Data</span><span class='hs-varop'>.</span><span class='hs-conid'>Sequence</span> <span class='hs-keyword'>as</span> <span class='hs-conid'>Seq</span>
+<a name="line-74"></a><span class='hs-keyword'>import</span> <span class='hs-conid'>Data</span><span class='hs-varop'>.</span><span class='hs-conid'>Sequence</span> <span class='hs-layout'>(</span><span class='hs-conid'>Seq</span><span class='hs-layout'>)</span>
+<a name="line-75"></a><span class='hs-cpp'>#endif</span>
hunk ./doc/html/monoids/src/Data-Monoid-Multiplicative.html 85
-<a name="line-77"></a><span class='hs-keyword'>import</span> <span class='hs-conid'>Text</span><span class='hs-varop'>.</span><span class='hs-conid'>Parsec</span><span class='hs-varop'>.</span><span class='hs-conid'>Prim</span>
-<a name="line-78"></a>
-<a name="line-79"></a><a name="Multiplicative"></a><span class='hs-keyword'>class</span> <span class='hs-conid'>Multiplicative</span> <span class='hs-varid'>m</span> <span class='hs-keyword'>where</span>
-<a name="line-80"></a>    <span class='hs-varid'>one</span> <span class='hs-keyglyph'>::</span> <span class='hs-varid'>m</span>
-<a name="line-81"></a>    <span class='hs-varid'>times</span> <span class='hs-keyglyph'>::</span> <span class='hs-varid'>m</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-varid'>m</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-varid'>m</span>
-<a name="line-82"></a>
-<a name="line-83"></a><span class='hs-keyword'>instance</span> <span class='hs-conid'>Multiplicative</span> <span class='hs-varid'>m</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>Multiplicative</span> <span class='hs-layout'>(</span><span class='hs-conid'>Dual</span> <span class='hs-varid'>m</span><span class='hs-layout'>)</span> <span class='hs-keyword'>where</span>
-<a name="line-84"></a>    <span class='hs-varid'>one</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>Dual</span> <span class='hs-varid'>one</span>
-<a name="line-85"></a>    <span class='hs-conid'>Dual</span> <span class='hs-varid'>x</span> <span class='hs-varop'>`times`</span> <span class='hs-conid'>Dual</span> <span class='hs-varid'>y</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>Dual</span> <span class='hs-layout'>(</span><span class='hs-varid'>y</span> <span class='hs-varop'>`times`</span> <span class='hs-varid'>x</span><span class='hs-layout'>)</span>
-<a name="line-86"></a>
-<a name="line-87"></a><span class='hs-keyword'>instance</span> <span class='hs-conid'>Multiplicative</span> <span class='hs-varid'>m</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>Multiplicative</span> <span class='hs-layout'>(</span><span class='hs-varid'>m</span> <span class='hs-varop'>`ReducedBy`</span> <span class='hs-varid'>s</span><span class='hs-layout'>)</span> <span class='hs-keyword'>where</span>
-<a name="line-88"></a>    <span class='hs-varid'>one</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>Reduction</span> <span class='hs-varid'>one</span>
-<a name="line-89"></a>    <span class='hs-conid'>Reduction</span> <span class='hs-varid'>x</span> <span class='hs-varop'>`times`</span> <span class='hs-conid'>Reduction</span> <span class='hs-varid'>y</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>Reduction</span> <span class='hs-layout'>(</span><span class='hs-varid'>x</span> <span class='hs-varop'>`times`</span> <span class='hs-varid'>y</span><span class='hs-layout'>)</span>
-<a name="line-90"></a>
-<a name="line-91"></a><a name="Log"></a><span class='hs-comment'>-- | Convert a 'Multiplicative' into a 'Monoid'. Mnemonic: @Log a + Log b = Log (a * b)@</span>
-<a name="line-92"></a><a name="Log"></a><span class='hs-keyword'>data</span> <span class='hs-conid'>Log</span> <span class='hs-varid'>m</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>Log</span> <span class='hs-layout'>{</span> <span class='hs-varid'>getLog</span> <span class='hs-keyglyph'>::</span> <span class='hs-varid'>m</span> <span class='hs-layout'>}</span>
-<a name="line-93"></a>
-<a name="line-94"></a><span class='hs-keyword'>instance</span> <span class='hs-conid'>Multiplicative</span> <span class='hs-varid'>m</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>Monoid</span> <span class='hs-layout'>(</span><span class='hs-conid'>Log</span> <span class='hs-varid'>m</span><span class='hs-layout'>)</span> <span class='hs-keyword'>where</span>
-<a name="line-95"></a>    <span class='hs-varid'>mempty</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>Log</span> <span class='hs-varid'>one</span>
-<a name="line-96"></a>    <span class='hs-conid'>Log</span> <span class='hs-varid'>a</span> <span class='hs-varop'>`mappend`</span> <span class='hs-conid'>Log</span> <span class='hs-varid'>b</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>Log</span> <span class='hs-layout'>(</span><span class='hs-varid'>a</span> <span class='hs-varop'>`times`</span> <span class='hs-varid'>b</span><span class='hs-layout'>)</span>
-<a name="line-97"></a>
-<a name="line-98"></a><a name="Exp"></a><span class='hs-comment'>-- | Convert a 'Monoid' into a 'Multiplicative'. Mnemonic: @Exp a * Exp b = Exp (a + b)@</span>
-<a name="line-99"></a><a name="Exp"></a><span class='hs-keyword'>data</span> <span class='hs-conid'>Exp</span> <span class='hs-varid'>m</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>Exp</span> <span class='hs-layout'>{</span> <span class='hs-varid'>getExp</span> <span class='hs-keyglyph'>::</span> <span class='hs-varid'>m</span> <span class='hs-layout'>}</span>
-<a name="line-100"></a>
-<a name="line-101"></a><span class='hs-keyword'>instance</span> <span class='hs-conid'>Monoid</span> <span class='hs-varid'>m</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>Multiplicative</span> <span class='hs-layout'>(</span><span class='hs-conid'>Exp</span> <span class='hs-varid'>m</span><span class='hs-layout'>)</span> <span class='hs-keyword'>where</span>
-<a name="line-102"></a>    <span class='hs-varid'>one</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>Exp</span> <span class='hs-varid'>mempty</span>
-<a name="line-103"></a>    <span class='hs-conid'>Exp</span> <span class='hs-varid'>a</span> <span class='hs-varop'>`times`</span> <span class='hs-conid'>Exp</span> <span class='hs-varid'>b</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>Exp</span> <span class='hs-layout'>(</span><span class='hs-varid'>a</span> <span class='hs-varop'>`mappend`</span> <span class='hs-varid'>b</span><span class='hs-layout'>)</span>
-<a name="line-104"></a>
-<a name="line-105"></a><span class='hs-comment'>-- simple monoid transformer instances</span>
-<a name="line-106"></a><span class='hs-keyword'>instance</span> <span class='hs-conid'>Multiplicative</span> <span class='hs-varid'>m</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>Multiplicative</span> <span class='hs-layout'>(</span><span class='hs-conid'>Self</span> <span class='hs-varid'>m</span><span class='hs-layout'>)</span> <span class='hs-keyword'>where</span>
-<a name="line-107"></a>    <span class='hs-varid'>one</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>Self</span> <span class='hs-varid'>one</span>  
-<a name="line-108"></a>    <span class='hs-conid'>Self</span> <span class='hs-varid'>a</span> <span class='hs-varop'>`times`</span> <span class='hs-conid'>Self</span> <span class='hs-varid'>b</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>Self</span> <span class='hs-layout'>(</span><span class='hs-varid'>a</span> <span class='hs-varop'>`times`</span> <span class='hs-varid'>b</span><span class='hs-layout'>)</span>
-<a name="line-109"></a>
-<a name="line-110"></a><span class='hs-keyword'>instance</span> <span class='hs-conid'>Multiplicative</span> <span class='hs-varid'>m</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>Multiplicative</span> <span class='hs-layout'>(</span><span class='hs-conid'>FromString</span> <span class='hs-varid'>m</span><span class='hs-layout'>)</span> <span class='hs-keyword'>where</span>
-<a name="line-111"></a>    <span class='hs-varid'>one</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>FromString</span> <span class='hs-varid'>one</span>
-<a name="line-112"></a>    <span class='hs-conid'>FromString</span> <span class='hs-varid'>a</span> <span class='hs-varop'>`times`</span> <span class='hs-conid'>FromString</span> <span class='hs-varid'>b</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>FromString</span> <span class='hs-layout'>(</span><span class='hs-varid'>a</span> <span class='hs-varop'>`times`</span> <span class='hs-varid'>b</span><span class='hs-layout'>)</span>
-<a name="line-113"></a>
-<a name="line-114"></a><span class='hs-comment'>-- the goal of this is that I can make left seminearrings out of any 'Alternative' wrapped around a monoid</span>
-<a name="line-115"></a><span class='hs-comment'>-- in particular its useful for containers</span>
-<a name="line-116"></a>
-<a name="line-117"></a><span class='hs-keyword'>instance</span> <span class='hs-conid'>Monoid</span> <span class='hs-varid'>m</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>Multiplicative</span> <span class='hs-keyglyph'>[</span><span class='hs-varid'>m</span><span class='hs-keyglyph'>]</span> <span class='hs-keyword'>where</span>
-<a name="line-118"></a>    <span class='hs-varid'>one</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>return</span> <span class='hs-varid'>mempty</span>
-<a name="line-119"></a>    <span class='hs-varid'>times</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>liftM2</span> <span class='hs-varid'>mappend</span>
-<a name="line-120"></a>
-<a name="line-121"></a><span class='hs-keyword'>instance</span> <span class='hs-conid'>Monoid</span> <span class='hs-varid'>m</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>Multiplicative</span> <span class='hs-layout'>(</span><span class='hs-conid'>Seq</span> <span class='hs-varid'>m</span><span class='hs-layout'>)</span> <span class='hs-keyword'>where</span>
-<a name="line-122"></a>    <span class='hs-varid'>one</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>return</span> <span class='hs-varid'>mempty</span>
-<a name="line-123"></a>    <span class='hs-varid'>times</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>liftM2</span> <span class='hs-varid'>mappend</span>
-<a name="line-124"></a>
-<a name="line-125"></a><span class='hs-comment'>-- and things that can't quite be a Monad in Haskell</span>
-<a name="line-126"></a><span class='hs-keyword'>instance</span> <span class='hs-layout'>(</span><span class='hs-conid'>Measured</span> <span class='hs-varid'>v</span> <span class='hs-varid'>m</span><span class='hs-layout'>,</span> <span class='hs-conid'>Monoid</span> <span class='hs-varid'>m</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>Multiplicative</span> <span class='hs-layout'>(</span><span class='hs-conid'>FingerTree</span> <span class='hs-varid'>v</span> <span class='hs-varid'>m</span><span class='hs-layout'>)</span> <span class='hs-keyword'>where</span>
-<a name="line-127"></a>    <span class='hs-varid'>one</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>singleton</span> <span class='hs-varid'>mempty</span>
-<a name="line-128"></a>    <span class='hs-varid'>xss</span> <span class='hs-varop'>`times`</span> <span class='hs-varid'>yss</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>getSelf</span> <span class='hs-varop'>$</span> <span class='hs-varid'>mapReduce</span> <span class='hs-layout'>(</span><span class='hs-varid'>flip</span> <span class='hs-varid'>fmap'</span> <span class='hs-varid'>yss</span> <span class='hs-varop'>.</span> <span class='hs-varid'>mappend</span><span class='hs-layout'>)</span> <span class='hs-varid'>xss</span>
-<a name="line-129"></a>
-<a name="line-130"></a><span class='hs-comment'>-- but it can at least serve as a canonical multiplication for any monad. </span>
-<a name="line-131"></a><span class='hs-keyword'>instance</span> <span class='hs-conid'>Monoid</span> <span class='hs-varid'>m</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>Multiplicative</span> <span class='hs-layout'>(</span><span class='hs-conid'>Maybe</span> <span class='hs-varid'>m</span><span class='hs-layout'>)</span> <span class='hs-keyword'>where</span>
-<a name="line-132"></a>    <span class='hs-varid'>one</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>return</span> <span class='hs-varid'>mempty</span>
-<a name="line-133"></a>    <span class='hs-varid'>times</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>liftM2</span> <span class='hs-varid'>mappend</span>
-<a name="line-134"></a>
-<a name="line-135"></a><span class='hs-keyword'>instance</span> <span class='hs-conid'>Monoid</span> <span class='hs-varid'>m</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>Multiplicative</span> <span class='hs-layout'>(</span><span class='hs-conid'>Identity</span> <span class='hs-varid'>m</span><span class='hs-layout'>)</span> <span class='hs-keyword'>where</span>
-<a name="line-136"></a>    <span class='hs-varid'>one</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>return</span> <span class='hs-varid'>mempty</span>
-<a name="line-137"></a>    <span class='hs-varid'>times</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>liftM2</span> <span class='hs-varid'>mappend</span>
-<a name="line-138"></a>
-<a name="line-139"></a><span class='hs-keyword'>instance</span> <span class='hs-layout'>(</span><span class='hs-conid'>Monoid</span> <span class='hs-varid'>m</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>Multiplicative</span> <span class='hs-layout'>(</span><span class='hs-conid'>Cont</span> <span class='hs-varid'>r</span> <span class='hs-varid'>m</span><span class='hs-layout'>)</span> <span class='hs-keyword'>where</span>
-<a name="line-140"></a>    <span class='hs-varid'>one</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>return</span> <span class='hs-varid'>mempty</span>
-<a name="line-141"></a>    <span class='hs-varid'>times</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>liftM2</span> <span class='hs-varid'>mappend</span>
-<a name="line-142"></a>
-<a name="line-143"></a><span class='hs-keyword'>instance</span> <span class='hs-layout'>(</span><span class='hs-conid'>Monoid</span> <span class='hs-varid'>w</span><span class='hs-layout'>,</span> <span class='hs-conid'>Monoid</span> <span class='hs-varid'>m</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>Multiplicative</span> <span class='hs-layout'>(</span><span class='hs-conid'>SRWS</span><span class='hs-varop'>.</span><span class='hs-conid'>RWS</span> <span class='hs-varid'>r</span> <span class='hs-varid'>w</span> <span class='hs-varid'>s</span> <span class='hs-varid'>m</span><span class='hs-layout'>)</span> <span class='hs-keyword'>where</span>
-<a name="line-144"></a>    <span class='hs-varid'>one</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>return</span> <span class='hs-varid'>mempty</span>
-<a name="line-145"></a>    <span class='hs-varid'>times</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>liftM2</span> <span class='hs-varid'>mappend</span>
-<a name="line-146"></a>
-<a name="line-147"></a><span class='hs-keyword'>instance</span> <span class='hs-layout'>(</span><span class='hs-conid'>Monoid</span> <span class='hs-varid'>w</span><span class='hs-layout'>,</span> <span class='hs-conid'>Monoid</span> <span class='hs-varid'>m</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>Multiplicative</span> <span class='hs-layout'>(</span><span class='hs-conid'>LRWS</span><span class='hs-varop'>.</span><span class='hs-conid'>RWS</span> <span class='hs-varid'>r</span> <span class='hs-varid'>w</span> <span class='hs-varid'>s</span> <span class='hs-varid'>m</span><span class='hs-layout'>)</span> <span class='hs-keyword'>where</span>
-<a name="line-148"></a>    <span class='hs-varid'>one</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>return</span> <span class='hs-varid'>mempty</span>
-<a name="line-149"></a>    <span class='hs-varid'>times</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>liftM2</span> <span class='hs-varid'>mappend</span>
-<a name="line-150"></a>
-<a name="line-151"></a><span class='hs-keyword'>instance</span> <span class='hs-conid'>Monoid</span> <span class='hs-varid'>m</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>Multiplicative</span> <span class='hs-layout'>(</span><span class='hs-conid'>SState</span><span class='hs-varop'>.</span><span class='hs-conid'>State</span> <span class='hs-varid'>s</span> <span class='hs-varid'>m</span><span class='hs-layout'>)</span> <span class='hs-keyword'>where</span>
-<a name="line-152"></a>    <span class='hs-varid'>one</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>return</span> <span class='hs-varid'>mempty</span>
-<a name="line-153"></a>    <span class='hs-varid'>times</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>liftM2</span> <span class='hs-varid'>mappend</span>
-<a name="line-154"></a>
-<a name="line-155"></a><span class='hs-keyword'>instance</span> <span class='hs-conid'>Monoid</span> <span class='hs-varid'>m</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>Multiplicative</span> <span class='hs-layout'>(</span><span class='hs-conid'>LState</span><span class='hs-varop'>.</span><span class='hs-conid'>State</span> <span class='hs-varid'>s</span> <span class='hs-varid'>m</span><span class='hs-layout'>)</span> <span class='hs-keyword'>where</span>
+<a name="line-77"></a><span class='hs-cpp'>#ifdef M_PARSEC</span>
+<a name="line-78"></a><span class='hs-keyword'>import</span> <span class='hs-conid'>Text</span><span class='hs-varop'>.</span><span class='hs-conid'>Parsec</span><span class='hs-varop'>.</span><span class='hs-conid'>Prim</span>
+<a name="line-79"></a><span class='hs-cpp'>#endif</span>
+<a name="line-80"></a>
+<a name="line-81"></a><span class='hs-cpp'>#ifdef X_OverloadedStrings</span>
+<a name="line-82"></a><span class='hs-keyword'>import</span> <span class='hs-conid'>Data</span><span class='hs-varop'>.</span><span class='hs-conid'>Monoid</span><span class='hs-varop'>.</span><span class='hs-conid'>FromString</span>
+<a name="line-83"></a><span class='hs-cpp'>#endif</span>
+<a name="line-84"></a>
+<a name="line-85"></a><a name="Multiplicative"></a><span class='hs-keyword'>class</span> <span class='hs-conid'>Multiplicative</span> <span class='hs-varid'>m</span> <span class='hs-keyword'>where</span>
+<a name="line-86"></a>    <span class='hs-varid'>one</span> <span class='hs-keyglyph'>::</span> <span class='hs-varid'>m</span>
+<a name="line-87"></a>    <span class='hs-varid'>times</span> <span class='hs-keyglyph'>::</span> <span class='hs-varid'>m</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-varid'>m</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-varid'>m</span>
+<a name="line-88"></a>
+<a name="line-89"></a><span class='hs-keyword'>instance</span> <span class='hs-conid'>Multiplicative</span> <span class='hs-varid'>m</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>Multiplicative</span> <span class='hs-layout'>(</span><span class='hs-conid'>Dual</span> <span class='hs-varid'>m</span><span class='hs-layout'>)</span> <span class='hs-keyword'>where</span>
+<a name="line-90"></a>    <span class='hs-varid'>one</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>Dual</span> <span class='hs-varid'>one</span>
+<a name="line-91"></a>    <span class='hs-conid'>Dual</span> <span class='hs-varid'>x</span> <span class='hs-varop'>`times`</span> <span class='hs-conid'>Dual</span> <span class='hs-varid'>y</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>Dual</span> <span class='hs-layout'>(</span><span class='hs-varid'>y</span> <span class='hs-varop'>`times`</span> <span class='hs-varid'>x</span><span class='hs-layout'>)</span>
+<a name="line-92"></a>
+<a name="line-93"></a><span class='hs-keyword'>instance</span> <span class='hs-conid'>Multiplicative</span> <span class='hs-varid'>m</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>Multiplicative</span> <span class='hs-layout'>(</span><span class='hs-varid'>m</span> <span class='hs-varop'>`ReducedBy`</span> <span class='hs-varid'>s</span><span class='hs-layout'>)</span> <span class='hs-keyword'>where</span>
+<a name="line-94"></a>    <span class='hs-varid'>one</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>Reduction</span> <span class='hs-varid'>one</span>
+<a name="line-95"></a>    <span class='hs-conid'>Reduction</span> <span class='hs-varid'>x</span> <span class='hs-varop'>`times`</span> <span class='hs-conid'>Reduction</span> <span class='hs-varid'>y</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>Reduction</span> <span class='hs-layout'>(</span><span class='hs-varid'>x</span> <span class='hs-varop'>`times`</span> <span class='hs-varid'>y</span><span class='hs-layout'>)</span>
+<a name="line-96"></a>
+<a name="line-97"></a><a name="Log"></a><span class='hs-comment'>-- | Convert a 'Multiplicative' into a 'Monoid'. Mnemonic: @Log a + Log b = Log (a * b)@</span>
+<a name="line-98"></a><a name="Log"></a><span class='hs-keyword'>data</span> <span class='hs-conid'>Log</span> <span class='hs-varid'>m</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>Log</span> <span class='hs-layout'>{</span> <span class='hs-varid'>getLog</span> <span class='hs-keyglyph'>::</span> <span class='hs-varid'>m</span> <span class='hs-layout'>}</span>
+<a name="line-99"></a>
+<a name="line-100"></a><span class='hs-keyword'>instance</span> <span class='hs-conid'>Multiplicative</span> <span class='hs-varid'>m</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>Monoid</span> <span class='hs-layout'>(</span><span class='hs-conid'>Log</span> <span class='hs-varid'>m</span><span class='hs-layout'>)</span> <span class='hs-keyword'>where</span>
+<a name="line-101"></a>    <span class='hs-varid'>mempty</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>Log</span> <span class='hs-varid'>one</span>
+<a name="line-102"></a>    <span class='hs-conid'>Log</span> <span class='hs-varid'>a</span> <span class='hs-varop'>`mappend`</span> <span class='hs-conid'>Log</span> <span class='hs-varid'>b</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>Log</span> <span class='hs-layout'>(</span><span class='hs-varid'>a</span> <span class='hs-varop'>`times`</span> <span class='hs-varid'>b</span><span class='hs-layout'>)</span>
+<a name="line-103"></a>
+<a name="line-104"></a><a name="Exp"></a><span class='hs-comment'>-- | Convert a 'Monoid' into a 'Multiplicative'. Mnemonic: @Exp a * Exp b = Exp (a + b)@</span>
+<a name="line-105"></a><a name="Exp"></a><span class='hs-keyword'>data</span> <span class='hs-conid'>Exp</span> <span class='hs-varid'>m</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>Exp</span> <span class='hs-layout'>{</span> <span class='hs-varid'>getExp</span> <span class='hs-keyglyph'>::</span> <span class='hs-varid'>m</span> <span class='hs-layout'>}</span>
+<a name="line-106"></a>
+<a name="line-107"></a><span class='hs-keyword'>instance</span> <span class='hs-conid'>Monoid</span> <span class='hs-varid'>m</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>Multiplicative</span> <span class='hs-layout'>(</span><span class='hs-conid'>Exp</span> <span class='hs-varid'>m</span><span class='hs-layout'>)</span> <span class='hs-keyword'>where</span>
+<a name="line-108"></a>    <span class='hs-varid'>one</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>Exp</span> <span class='hs-varid'>mempty</span>
+<a name="line-109"></a>    <span class='hs-conid'>Exp</span> <span class='hs-varid'>a</span> <span class='hs-varop'>`times`</span> <span class='hs-conid'>Exp</span> <span class='hs-varid'>b</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>Exp</span> <span class='hs-layout'>(</span><span class='hs-varid'>a</span> <span class='hs-varop'>`mappend`</span> <span class='hs-varid'>b</span><span class='hs-layout'>)</span>
+<a name="line-110"></a>
+<a name="line-111"></a><span class='hs-keyword'>instance</span> <span class='hs-conid'>Multiplicative</span> <span class='hs-varid'>m</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>Multiplicative</span> <span class='hs-layout'>(</span><span class='hs-conid'>Self</span> <span class='hs-varid'>m</span><span class='hs-layout'>)</span> <span class='hs-keyword'>where</span>
+<a name="line-112"></a>    <span class='hs-varid'>one</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>Self</span> <span class='hs-varid'>one</span>  
+<a name="line-113"></a>    <span class='hs-conid'>Self</span> <span class='hs-varid'>a</span> <span class='hs-varop'>`times`</span> <span class='hs-conid'>Self</span> <span class='hs-varid'>b</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>Self</span> <span class='hs-layout'>(</span><span class='hs-varid'>a</span> <span class='hs-varop'>`times`</span> <span class='hs-varid'>b</span><span class='hs-layout'>)</span>
+<a name="line-114"></a>
+<a name="line-115"></a><span class='hs-comment'>-- Monad instances</span>
+<a name="line-116"></a><span class='hs-keyword'>instance</span> <span class='hs-conid'>Monoid</span> <span class='hs-varid'>m</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>Multiplicative</span> <span class='hs-keyglyph'>[</span><span class='hs-varid'>m</span><span class='hs-keyglyph'>]</span> <span class='hs-keyword'>where</span>
+<a name="line-117"></a>    <span class='hs-varid'>one</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>return</span> <span class='hs-varid'>mempty</span>
+<a name="line-118"></a>    <span class='hs-varid'>times</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>liftM2</span> <span class='hs-varid'>mappend</span>
+<a name="line-119"></a><span class='hs-keyword'>instance</span> <span class='hs-conid'>Monoid</span> <span class='hs-varid'>m</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>Multiplicative</span> <span class='hs-layout'>(</span><span class='hs-conid'>Maybe</span> <span class='hs-varid'>m</span><span class='hs-layout'>)</span> <span class='hs-keyword'>where</span>
+<a name="line-120"></a>    <span class='hs-varid'>one</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>return</span> <span class='hs-varid'>mempty</span>
+<a name="line-121"></a>    <span class='hs-varid'>times</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>liftM2</span> <span class='hs-varid'>mappend</span>
+<a name="line-122"></a><span class='hs-keyword'>instance</span> <span class='hs-conid'>Monoid</span> <span class='hs-varid'>n</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>Multiplicative</span> <span class='hs-layout'>(</span><span class='hs-conid'>IO</span> <span class='hs-varid'>n</span><span class='hs-layout'>)</span> <span class='hs-keyword'>where</span>
+<a name="line-123"></a>    <span class='hs-varid'>one</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>return</span> <span class='hs-varid'>mempty</span>
+<a name="line-124"></a>    <span class='hs-varid'>times</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>liftM2</span> <span class='hs-varid'>mappend</span>
+<a name="line-125"></a><span class='hs-keyword'>instance</span> <span class='hs-conid'>Monoid</span> <span class='hs-varid'>n</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>Multiplicative</span> <span class='hs-layout'>(</span><span class='hs-conid'>SST</span><span class='hs-varop'>.</span><span class='hs-conid'>ST</span> <span class='hs-varid'>s</span> <span class='hs-varid'>n</span><span class='hs-layout'>)</span> <span class='hs-keyword'>where</span>
+<a name="line-126"></a>    <span class='hs-varid'>one</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>return</span> <span class='hs-varid'>mempty</span>
+<a name="line-127"></a>    <span class='hs-varid'>times</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>liftM2</span> <span class='hs-varid'>mappend</span>
+<a name="line-128"></a><span class='hs-keyword'>instance</span> <span class='hs-conid'>Monoid</span> <span class='hs-varid'>n</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>Multiplicative</span> <span class='hs-layout'>(</span><span class='hs-conid'>LST</span><span class='hs-varop'>.</span><span class='hs-conid'>ST</span> <span class='hs-varid'>s</span> <span class='hs-varid'>n</span><span class='hs-layout'>)</span> <span class='hs-keyword'>where</span>
+<a name="line-129"></a>    <span class='hs-varid'>one</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>return</span> <span class='hs-varid'>mempty</span>
+<a name="line-130"></a>    <span class='hs-varid'>times</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>liftM2</span> <span class='hs-varid'>mappend</span>
+<a name="line-131"></a>
+<a name="line-132"></a><span class='hs-comment'>-- Applicative instances</span>
+<a name="line-133"></a><span class='hs-keyword'>instance</span> <span class='hs-conid'>Monoid</span> <span class='hs-varid'>n</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>Multiplicative</span> <span class='hs-layout'>(</span><span class='hs-conid'>ZipList</span> <span class='hs-varid'>n</span><span class='hs-layout'>)</span> <span class='hs-keyword'>where</span>
+<a name="line-134"></a>    <span class='hs-varid'>one</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>pure</span> <span class='hs-varid'>mempty</span>
+<a name="line-135"></a>    <span class='hs-varid'>times</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>liftA2</span> <span class='hs-varid'>mappend</span>
+<a name="line-136"></a>
+<a name="line-137"></a><span class='hs-keyword'>instance</span> <span class='hs-conid'>Monoid</span> <span class='hs-varid'>m</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>Multiplicative</span> <span class='hs-layout'>(</span><span class='hs-conid'>Const</span> <span class='hs-varid'>m</span> <span class='hs-varid'>a</span><span class='hs-layout'>)</span> <span class='hs-keyword'>where</span>
+<a name="line-138"></a>    <span class='hs-varid'>one</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>pure</span> <span class='hs-varid'>undefined</span>
+<a name="line-139"></a>    <span class='hs-varid'>times</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>liftA2</span> <span class='hs-varid'>undefined</span>
+<a name="line-140"></a>
+<a name="line-141"></a><span class='hs-comment'>-- Numeric instances</span>
+<a name="line-142"></a><span class='hs-keyword'>instance</span> <span class='hs-conid'>Multiplicative</span> <span class='hs-conid'>Int</span> <span class='hs-keyword'>where</span>
+<a name="line-143"></a>    <span class='hs-varid'>one</span> <span class='hs-keyglyph'>=</span> <span class='hs-num'>1</span>
+<a name="line-144"></a>    <span class='hs-varid'>times</span> <span class='hs-keyglyph'>=</span> <span class='hs-layout'>(</span><span class='hs-varop'>*</span><span class='hs-layout'>)</span>
+<a name="line-145"></a>
+<a name="line-146"></a><span class='hs-keyword'>instance</span> <span class='hs-conid'>Multiplicative</span> <span class='hs-conid'>Integer</span> <span class='hs-keyword'>where</span>
+<a name="line-147"></a>    <span class='hs-varid'>one</span> <span class='hs-keyglyph'>=</span> <span class='hs-num'>1</span>
+<a name="line-148"></a>    <span class='hs-varid'>times</span> <span class='hs-keyglyph'>=</span> <span class='hs-layout'>(</span><span class='hs-varop'>*</span><span class='hs-layout'>)</span>
+<a name="line-149"></a>
+<a name="line-150"></a><span class='hs-keyword'>instance</span> <span class='hs-conid'>Integral</span> <span class='hs-varid'>m</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>Multiplicative</span> <span class='hs-layout'>(</span><span class='hs-conid'>Ratio</span> <span class='hs-varid'>m</span><span class='hs-layout'>)</span> <span class='hs-keyword'>where</span>
+<a name="line-151"></a>    <span class='hs-varid'>one</span> <span class='hs-keyglyph'>=</span> <span class='hs-num'>1</span>
+<a name="line-152"></a>    <span class='hs-varid'>times</span> <span class='hs-keyglyph'>=</span> <span class='hs-layout'>(</span><span class='hs-varop'>*</span><span class='hs-layout'>)</span>
+<a name="line-153"></a>
+<a name="line-154"></a><span class='hs-cpp'>#ifdef M_CONTAINERS</span>
+<a name="line-155"></a><span class='hs-keyword'>instance</span> <span class='hs-conid'>Monoid</span> <span class='hs-varid'>m</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>Multiplicative</span> <span class='hs-layout'>(</span><span class='hs-conid'>Seq</span> <span class='hs-varid'>m</span><span class='hs-layout'>)</span> <span class='hs-keyword'>where</span>
hunk ./doc/html/monoids/src/Data-Monoid-Multiplicative.html 166
-<a name="line-158"></a>
-<a name="line-159"></a><span class='hs-keyword'>instance</span> <span class='hs-conid'>Monoid</span> <span class='hs-varid'>m</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>Multiplicative</span> <span class='hs-layout'>(</span><span class='hs-conid'>Reader</span> <span class='hs-varid'>e</span> <span class='hs-varid'>m</span><span class='hs-layout'>)</span> <span class='hs-keyword'>where</span>
-<a name="line-160"></a>    <span class='hs-varid'>one</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>return</span> <span class='hs-varid'>mempty</span>
-<a name="line-161"></a>    <span class='hs-varid'>times</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>liftM2</span> <span class='hs-varid'>mappend</span>
-<a name="line-162"></a>
-<a name="line-163"></a><span class='hs-keyword'>instance</span> <span class='hs-layout'>(</span><span class='hs-conid'>Monoid</span> <span class='hs-varid'>w</span><span class='hs-layout'>,</span> <span class='hs-conid'>Monoid</span> <span class='hs-varid'>m</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>Multiplicative</span> <span class='hs-layout'>(</span><span class='hs-conid'>SWriter</span><span class='hs-varop'>.</span><span class='hs-conid'>Writer</span> <span class='hs-varid'>w</span> <span class='hs-varid'>m</span><span class='hs-layout'>)</span> <span class='hs-keyword'>where</span>
-<a name="line-164"></a>    <span class='hs-varid'>one</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>return</span> <span class='hs-varid'>mempty</span>
-<a name="line-165"></a>    <span class='hs-varid'>times</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>liftM2</span> <span class='hs-varid'>mappend</span>
+<a name="line-158"></a><span class='hs-cpp'>#endif</span>
+<a name="line-159"></a>
+<a name="line-160"></a><span class='hs-cpp'>#ifdef M_FINGERTREE</span>
+<a name="line-161"></a><span class='hs-comment'>-- and things that can't quite be a Monad in Haskell</span>
+<a name="line-162"></a><span class='hs-keyword'>instance</span> <span class='hs-layout'>(</span><span class='hs-conid'>Measured</span> <span class='hs-varid'>v</span> <span class='hs-varid'>m</span><span class='hs-layout'>,</span> <span class='hs-conid'>Monoid</span> <span class='hs-varid'>m</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>Multiplicative</span> <span class='hs-layout'>(</span><span class='hs-conid'>FingerTree</span> <span class='hs-varid'>v</span> <span class='hs-varid'>m</span><span class='hs-layout'>)</span> <span class='hs-keyword'>where</span>
+<a name="line-163"></a>    <span class='hs-varid'>one</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>singleton</span> <span class='hs-varid'>mempty</span>
+<a name="line-164"></a>    <span class='hs-varid'>xss</span> <span class='hs-varop'>`times`</span> <span class='hs-varid'>yss</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>getSelf</span> <span class='hs-varop'>$</span> <span class='hs-varid'>mapReduce</span> <span class='hs-layout'>(</span><span class='hs-varid'>flip</span> <span class='hs-varid'>fmap'</span> <span class='hs-varid'>yss</span> <span class='hs-varop'>.</span> <span class='hs-varid'>mappend</span><span class='hs-layout'>)</span> <span class='hs-varid'>xss</span>
+<a name="line-165"></a><span class='hs-cpp'>#endif</span>
hunk ./doc/html/monoids/src/Data-Monoid-Multiplicative.html 175
-<a name="line-167"></a><span class='hs-keyword'>instance</span> <span class='hs-layout'>(</span><span class='hs-conid'>Monoid</span> <span class='hs-varid'>w</span><span class='hs-layout'>,</span> <span class='hs-conid'>Monoid</span> <span class='hs-varid'>m</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>Multiplicative</span> <span class='hs-layout'>(</span><span class='hs-conid'>LWriter</span><span class='hs-varop'>.</span><span class='hs-conid'>Writer</span> <span class='hs-varid'>w</span> <span class='hs-varid'>m</span><span class='hs-layout'>)</span> <span class='hs-keyword'>where</span>
-<a name="line-168"></a>    <span class='hs-varid'>one</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>return</span> <span class='hs-varid'>mempty</span>
-<a name="line-169"></a>    <span class='hs-varid'>times</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>liftM2</span> <span class='hs-varid'>mappend</span>
-<a name="line-170"></a>
-<a name="line-171"></a><span class='hs-keyword'>instance</span> <span class='hs-layout'>(</span><span class='hs-conid'>Monad</span> <span class='hs-varid'>m</span><span class='hs-layout'>,</span> <span class='hs-conid'>Monoid</span> <span class='hs-varid'>n</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>Multiplicative</span> <span class='hs-layout'>(</span><span class='hs-conid'>ContT</span> <span class='hs-varid'>r</span> <span class='hs-varid'>m</span> <span class='hs-varid'>n</span><span class='hs-layout'>)</span> <span class='hs-keyword'>where</span>
-<a name="line-172"></a>    <span class='hs-varid'>one</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>return</span> <span class='hs-varid'>mempty</span> 
+<a name="line-167"></a><span class='hs-cpp'>#ifdef M_MTL</span>
+<a name="line-168"></a><span class='hs-keyword'>instance</span> <span class='hs-conid'>Monoid</span> <span class='hs-varid'>m</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>Multiplicative</span> <span class='hs-layout'>(</span><span class='hs-conid'>Identity</span> <span class='hs-varid'>m</span><span class='hs-layout'>)</span> <span class='hs-keyword'>where</span>
+<a name="line-169"></a>    <span class='hs-varid'>one</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>return</span> <span class='hs-varid'>mempty</span>
+<a name="line-170"></a>    <span class='hs-varid'>times</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>liftM2</span> <span class='hs-varid'>mappend</span>
+<a name="line-171"></a><span class='hs-keyword'>instance</span> <span class='hs-layout'>(</span><span class='hs-conid'>Monoid</span> <span class='hs-varid'>m</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>Multiplicative</span> <span class='hs-layout'>(</span><span class='hs-conid'>Cont</span> <span class='hs-varid'>r</span> <span class='hs-varid'>m</span><span class='hs-layout'>)</span> <span class='hs-keyword'>where</span>
+<a name="line-172"></a>    <span class='hs-varid'>one</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>return</span> <span class='hs-varid'>mempty</span>
hunk ./doc/html/monoids/src/Data-Monoid-Multiplicative.html 182
-<a name="line-174"></a>
-<a name="line-175"></a><span class='hs-keyword'>instance</span> <span class='hs-layout'>(</span><span class='hs-conid'>Monad</span> <span class='hs-varid'>m</span><span class='hs-layout'>,</span> <span class='hs-conid'>Monoid</span> <span class='hs-varid'>w</span><span class='hs-layout'>,</span> <span class='hs-conid'>Monoid</span> <span class='hs-varid'>n</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>Multiplicative</span> <span class='hs-layout'>(</span><span class='hs-conid'>SRWS</span><span class='hs-varop'>.</span><span class='hs-conid'>RWST</span> <span class='hs-varid'>r</span> <span class='hs-varid'>w</span> <span class='hs-varid'>s</span> <span class='hs-varid'>m</span> <span class='hs-varid'>n</span><span class='hs-layout'>)</span> <span class='hs-keyword'>where</span> 
-<a name="line-176"></a>    <span class='hs-varid'>one</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>return</span> <span class='hs-varid'>mempty</span> 
-<a name="line-177"></a>    <span class='hs-varid'>times</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>liftM2</span> <span class='hs-varid'>mappend</span>
-<a name="line-178"></a>
-<a name="line-179"></a><span class='hs-keyword'>instance</span> <span class='hs-layout'>(</span><span class='hs-conid'>Monad</span> <span class='hs-varid'>m</span><span class='hs-layout'>,</span> <span class='hs-conid'>Monoid</span> <span class='hs-varid'>w</span><span class='hs-layout'>,</span> <span class='hs-conid'>Monoid</span> <span class='hs-varid'>n</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>Multiplicative</span> <span class='hs-layout'>(</span><span class='hs-conid'>LRWS</span><span class='hs-varop'>.</span><span class='hs-conid'>RWST</span> <span class='hs-varid'>r</span> <span class='hs-varid'>w</span> <span class='hs-varid'>s</span> <span class='hs-varid'>m</span> <span class='hs-varid'>n</span><span class='hs-layout'>)</span> <span class='hs-keyword'>where</span> 
-<a name="line-180"></a>    <span class='hs-varid'>one</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>return</span> <span class='hs-varid'>mempty</span> 
-<a name="line-181"></a>    <span class='hs-varid'>times</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>liftM2</span> <span class='hs-varid'>mappend</span>
-<a name="line-182"></a>
-<a name="line-183"></a><span class='hs-keyword'>instance</span> <span class='hs-layout'>(</span><span class='hs-conid'>Monad</span> <span class='hs-varid'>m</span><span class='hs-layout'>,</span> <span class='hs-conid'>Monoid</span> <span class='hs-varid'>n</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>Multiplicative</span> <span class='hs-layout'>(</span><span class='hs-conid'>SState</span><span class='hs-varop'>.</span><span class='hs-conid'>StateT</span> <span class='hs-varid'>s</span> <span class='hs-varid'>m</span> <span class='hs-varid'>n</span><span class='hs-layout'>)</span> <span class='hs-keyword'>where</span>
+<a name="line-174"></a><span class='hs-keyword'>instance</span> <span class='hs-layout'>(</span><span class='hs-conid'>Monoid</span> <span class='hs-varid'>w</span><span class='hs-layout'>,</span> <span class='hs-conid'>Monoid</span> <span class='hs-varid'>m</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>Multiplicative</span> <span class='hs-layout'>(</span><span class='hs-conid'>SRWS</span><span class='hs-varop'>.</span><span class='hs-conid'>RWS</span> <span class='hs-varid'>r</span> <span class='hs-varid'>w</span> <span class='hs-varid'>s</span> <span class='hs-varid'>m</span><span class='hs-layout'>)</span> <span class='hs-keyword'>where</span>
+<a name="line-175"></a>    <span class='hs-varid'>one</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>return</span> <span class='hs-varid'>mempty</span>
+<a name="line-176"></a>    <span class='hs-varid'>times</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>liftM2</span> <span class='hs-varid'>mappend</span>
+<a name="line-177"></a><span class='hs-keyword'>instance</span> <span class='hs-layout'>(</span><span class='hs-conid'>Monoid</span> <span class='hs-varid'>w</span><span class='hs-layout'>,</span> <span class='hs-conid'>Monoid</span> <span class='hs-varid'>m</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>Multiplicative</span> <span class='hs-layout'>(</span><span class='hs-conid'>LRWS</span><span class='hs-varop'>.</span><span class='hs-conid'>RWS</span> <span class='hs-varid'>r</span> <span class='hs-varid'>w</span> <span class='hs-varid'>s</span> <span class='hs-varid'>m</span><span class='hs-layout'>)</span> <span class='hs-keyword'>where</span>
+<a name="line-178"></a>    <span class='hs-varid'>one</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>return</span> <span class='hs-varid'>mempty</span>
+<a name="line-179"></a>    <span class='hs-varid'>times</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>liftM2</span> <span class='hs-varid'>mappend</span>
+<a name="line-180"></a><span class='hs-keyword'>instance</span> <span class='hs-conid'>Monoid</span> <span class='hs-varid'>m</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>Multiplicative</span> <span class='hs-layout'>(</span><span class='hs-conid'>SState</span><span class='hs-varop'>.</span><span class='hs-conid'>State</span> <span class='hs-varid'>s</span> <span class='hs-varid'>m</span><span class='hs-layout'>)</span> <span class='hs-keyword'>where</span>
+<a name="line-181"></a>    <span class='hs-varid'>one</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>return</span> <span class='hs-varid'>mempty</span>
+<a name="line-182"></a>    <span class='hs-varid'>times</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>liftM2</span> <span class='hs-varid'>mappend</span>
+<a name="line-183"></a><span class='hs-keyword'>instance</span> <span class='hs-conid'>Monoid</span> <span class='hs-varid'>m</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>Multiplicative</span> <span class='hs-layout'>(</span><span class='hs-conid'>LState</span><span class='hs-varop'>.</span><span class='hs-conid'>State</span> <span class='hs-varid'>s</span> <span class='hs-varid'>m</span><span class='hs-layout'>)</span> <span class='hs-keyword'>where</span>
hunk ./doc/html/monoids/src/Data-Monoid-Multiplicative.html 194
-<a name="line-186"></a>
-<a name="line-187"></a><span class='hs-keyword'>instance</span> <span class='hs-layout'>(</span><span class='hs-conid'>Monad</span> <span class='hs-varid'>m</span><span class='hs-layout'>,</span> <span class='hs-conid'>Monoid</span> <span class='hs-varid'>n</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>Multiplicative</span> <span class='hs-layout'>(</span><span class='hs-conid'>LState</span><span class='hs-varop'>.</span><span class='hs-conid'>StateT</span> <span class='hs-varid'>s</span> <span class='hs-varid'>m</span> <span class='hs-varid'>n</span><span class='hs-layout'>)</span> <span class='hs-keyword'>where</span>
-<a name="line-188"></a>    <span class='hs-varid'>one</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>return</span> <span class='hs-varid'>mempty</span>
-<a name="line-189"></a>    <span class='hs-varid'>times</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>liftM2</span> <span class='hs-varid'>mappend</span>
-<a name="line-190"></a>
-<a name="line-191"></a><span class='hs-keyword'>instance</span> <span class='hs-layout'>(</span><span class='hs-conid'>Monad</span> <span class='hs-varid'>m</span><span class='hs-layout'>,</span> <span class='hs-conid'>Monoid</span> <span class='hs-varid'>n</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>Multiplicative</span> <span class='hs-layout'>(</span><span class='hs-conid'>ReaderT</span> <span class='hs-varid'>e</span> <span class='hs-varid'>m</span> <span class='hs-varid'>n</span><span class='hs-layout'>)</span> <span class='hs-keyword'>where</span>
-<a name="line-192"></a>    <span class='hs-varid'>one</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>return</span> <span class='hs-varid'>mempty</span>
-<a name="line-193"></a>    <span class='hs-varid'>times</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>liftM2</span> <span class='hs-varid'>mappend</span>
-<a name="line-194"></a>
-<a name="line-195"></a><span class='hs-keyword'>instance</span> <span class='hs-layout'>(</span><span class='hs-conid'>Monad</span> <span class='hs-varid'>m</span><span class='hs-layout'>,</span> <span class='hs-conid'>Monoid</span> <span class='hs-varid'>w</span><span class='hs-layout'>,</span> <span class='hs-conid'>Monoid</span> <span class='hs-varid'>n</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>Multiplicative</span> <span class='hs-layout'>(</span><span class='hs-conid'>SWriter</span><span class='hs-varop'>.</span><span class='hs-conid'>WriterT</span> <span class='hs-varid'>w</span> <span class='hs-varid'>m</span> <span class='hs-varid'>n</span><span class='hs-layout'>)</span> <span class='hs-keyword'>where</span>
+<a name="line-186"></a><span class='hs-keyword'>instance</span> <span class='hs-conid'>Monoid</span> <span class='hs-varid'>m</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>Multiplicative</span> <span class='hs-layout'>(</span><span class='hs-conid'>Reader</span> <span class='hs-varid'>e</span> <span class='hs-varid'>m</span><span class='hs-layout'>)</span> <span class='hs-keyword'>where</span>
+<a name="line-187"></a>    <span class='hs-varid'>one</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>return</span> <span class='hs-varid'>mempty</span>
+<a name="line-188"></a>    <span class='hs-varid'>times</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>liftM2</span> <span class='hs-varid'>mappend</span>
+<a name="line-189"></a><span class='hs-keyword'>instance</span> <span class='hs-layout'>(</span><span class='hs-conid'>Monoid</span> <span class='hs-varid'>w</span><span class='hs-layout'>,</span> <span class='hs-conid'>Monoid</span> <span class='hs-varid'>m</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>Multiplicative</span> <span class='hs-layout'>(</span><span class='hs-conid'>SWriter</span><span class='hs-varop'>.</span><span class='hs-conid'>Writer</span> <span class='hs-varid'>w</span> <span class='hs-varid'>m</span><span class='hs-layout'>)</span> <span class='hs-keyword'>where</span>
+<a name="line-190"></a>    <span class='hs-varid'>one</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>return</span> <span class='hs-varid'>mempty</span>
+<a name="line-191"></a>    <span class='hs-varid'>times</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>liftM2</span> <span class='hs-varid'>mappend</span>
+<a name="line-192"></a><span class='hs-keyword'>instance</span> <span class='hs-layout'>(</span><span class='hs-conid'>Monoid</span> <span class='hs-varid'>w</span><span class='hs-layout'>,</span> <span class='hs-conid'>Monoid</span> <span class='hs-varid'>m</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>Multiplicative</span> <span class='hs-layout'>(</span><span class='hs-conid'>LWriter</span><span class='hs-varop'>.</span><span class='hs-conid'>Writer</span> <span class='hs-varid'>w</span> <span class='hs-varid'>m</span><span class='hs-layout'>)</span> <span class='hs-keyword'>where</span>
+<a name="line-193"></a>    <span class='hs-varid'>one</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>return</span> <span class='hs-varid'>mempty</span>
+<a name="line-194"></a>    <span class='hs-varid'>times</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>liftM2</span> <span class='hs-varid'>mappend</span>
+<a name="line-195"></a><span class='hs-keyword'>instance</span> <span class='hs-layout'>(</span><span class='hs-conid'>Monad</span> <span class='hs-varid'>m</span><span class='hs-layout'>,</span> <span class='hs-conid'>Monoid</span> <span class='hs-varid'>n</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>Multiplicative</span> <span class='hs-layout'>(</span><span class='hs-conid'>ContT</span> <span class='hs-varid'>r</span> <span class='hs-varid'>m</span> <span class='hs-varid'>n</span><span class='hs-layout'>)</span> <span class='hs-keyword'>where</span>
hunk ./doc/html/monoids/src/Data-Monoid-Multiplicative.html 206
-<a name="line-198"></a>
-<a name="line-199"></a><span class='hs-keyword'>instance</span> <span class='hs-layout'>(</span><span class='hs-conid'>Monad</span> <span class='hs-varid'>m</span><span class='hs-layout'>,</span> <span class='hs-conid'>Monoid</span> <span class='hs-varid'>w</span><span class='hs-layout'>,</span> <span class='hs-conid'>Monoid</span> <span class='hs-varid'>n</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>Multiplicative</span> <span class='hs-layout'>(</span><span class='hs-conid'>LWriter</span><span class='hs-varop'>.</span><span class='hs-conid'>WriterT</span> <span class='hs-varid'>w</span> <span class='hs-varid'>m</span> <span class='hs-varid'>n</span><span class='hs-layout'>)</span> <span class='hs-keyword'>where</span>
-<a name="line-200"></a>    <span class='hs-varid'>one</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>return</span> <span class='hs-varid'>mempty</span> 
-<a name="line-201"></a>    <span class='hs-varid'>times</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>liftM2</span> <span class='hs-varid'>mappend</span>
-<a name="line-202"></a>
-<a name="line-203"></a><span class='hs-keyword'>instance</span> <span class='hs-conid'>Monoid</span> <span class='hs-varid'>n</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>Multiplicative</span> <span class='hs-layout'>(</span><span class='hs-conid'>IO</span> <span class='hs-varid'>n</span><span class='hs-layout'>)</span> <span class='hs-keyword'>where</span>
-<a name="line-204"></a>    <span class='hs-varid'>one</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>return</span> <span class='hs-varid'>mempty</span>
-<a name="line-205"></a>    <span class='hs-varid'>times</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>liftM2</span> <span class='hs-varid'>mappend</span>
-<a name="line-206"></a>
-<a name="line-207"></a><span class='hs-keyword'>instance</span> <span class='hs-conid'>Monoid</span> <span class='hs-varid'>n</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>Multiplicative</span> <span class='hs-layout'>(</span><span class='hs-conid'>SST</span><span class='hs-varop'>.</span><span class='hs-conid'>ST</span> <span class='hs-varid'>s</span> <span class='hs-varid'>n</span><span class='hs-layout'>)</span> <span class='hs-keyword'>where</span>
+<a name="line-198"></a><span class='hs-keyword'>instance</span> <span class='hs-layout'>(</span><span class='hs-conid'>Monad</span> <span class='hs-varid'>m</span><span class='hs-layout'>,</span> <span class='hs-conid'>Monoid</span> <span class='hs-varid'>w</span><span class='hs-layout'>,</span> <span class='hs-conid'>Monoid</span> <span class='hs-varid'>n</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>Multiplicative</span> <span class='hs-layout'>(</span><span class='hs-conid'>SRWS</span><span class='hs-varop'>.</span><span class='hs-conid'>RWST</span> <span class='hs-varid'>r</span> <span class='hs-varid'>w</span> <span class='hs-varid'>s</span> <span class='hs-varid'>m</span> <span class='hs-varid'>n</span><span class='hs-layout'>)</span> <span class='hs-keyword'>where</span> 
+<a name="line-199"></a>    <span class='hs-varid'>one</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>return</span> <span class='hs-varid'>mempty</span> 
+<a name="line-200"></a>    <span class='hs-varid'>times</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>liftM2</span> <span class='hs-varid'>mappend</span>
+<a name="line-201"></a><span class='hs-keyword'>instance</span> <span class='hs-layout'>(</span><span class='hs-conid'>Monad</span> <span class='hs-varid'>m</span><span class='hs-layout'>,</span> <span class='hs-conid'>Monoid</span> <span class='hs-varid'>w</span><span class='hs-layout'>,</span> <span class='hs-conid'>Monoid</span> <span class='hs-varid'>n</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>Multiplicative</span> <span class='hs-layout'>(</span><span class='hs-conid'>LRWS</span><span class='hs-varop'>.</span><span class='hs-conid'>RWST</span> <span class='hs-varid'>r</span> <span class='hs-varid'>w</span> <span class='hs-varid'>s</span> <span class='hs-varid'>m</span> <span class='hs-varid'>n</span><span class='hs-layout'>)</span> <span class='hs-keyword'>where</span> 
+<a name="line-202"></a>    <span class='hs-varid'>one</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>return</span> <span class='hs-varid'>mempty</span> 
+<a name="line-203"></a>    <span class='hs-varid'>times</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>liftM2</span> <span class='hs-varid'>mappend</span>
+<a name="line-204"></a><span class='hs-keyword'>instance</span> <span class='hs-layout'>(</span><span class='hs-conid'>Monad</span> <span class='hs-varid'>m</span><span class='hs-layout'>,</span> <span class='hs-conid'>Monoid</span> <span class='hs-varid'>n</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>Multiplicative</span> <span class='hs-layout'>(</span><span class='hs-conid'>SState</span><span class='hs-varop'>.</span><span class='hs-conid'>StateT</span> <span class='hs-varid'>s</span> <span class='hs-varid'>m</span> <span class='hs-varid'>n</span><span class='hs-layout'>)</span> <span class='hs-keyword'>where</span>
+<a name="line-205"></a>    <span class='hs-varid'>one</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>return</span> <span class='hs-varid'>mempty</span>
+<a name="line-206"></a>    <span class='hs-varid'>times</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>liftM2</span> <span class='hs-varid'>mappend</span>
+<a name="line-207"></a><span class='hs-keyword'>instance</span> <span class='hs-layout'>(</span><span class='hs-conid'>Monad</span> <span class='hs-varid'>m</span><span class='hs-layout'>,</span> <span class='hs-conid'>Monoid</span> <span class='hs-varid'>n</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>Multiplicative</span> <span class='hs-layout'>(</span><span class='hs-conid'>LState</span><span class='hs-varop'>.</span><span class='hs-conid'>StateT</span> <span class='hs-varid'>s</span> <span class='hs-varid'>m</span> <span class='hs-varid'>n</span><span class='hs-layout'>)</span> <span class='hs-keyword'>where</span>
hunk ./doc/html/monoids/src/Data-Monoid-Multiplicative.html 218
-<a name="line-210"></a>
-<a name="line-211"></a><span class='hs-keyword'>instance</span> <span class='hs-conid'>Monoid</span> <span class='hs-varid'>n</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>Multiplicative</span> <span class='hs-layout'>(</span><span class='hs-conid'>LST</span><span class='hs-varop'>.</span><span class='hs-conid'>ST</span> <span class='hs-varid'>s</span> <span class='hs-varid'>n</span><span class='hs-layout'>)</span> <span class='hs-keyword'>where</span>
-<a name="line-212"></a>    <span class='hs-varid'>one</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>return</span> <span class='hs-varid'>mempty</span>
-<a name="line-213"></a>    <span class='hs-varid'>times</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>liftM2</span> <span class='hs-varid'>mappend</span>
-<a name="line-214"></a>
-<a name="line-215"></a><span class='hs-keyword'>instance</span> <span class='hs-conid'>Monoid</span> <span class='hs-varid'>n</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>Multiplicative</span> <span class='hs-layout'>(</span><span class='hs-conid'>STM</span> <span class='hs-varid'>n</span><span class='hs-layout'>)</span> <span class='hs-keyword'>where</span>
-<a name="line-216"></a>    <span class='hs-varid'>one</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>return</span> <span class='hs-varid'>mempty</span>
-<a name="line-217"></a>    <span class='hs-varid'>times</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>liftM2</span> <span class='hs-varid'>mappend</span>
-<a name="line-218"></a>
-<a name="line-219"></a><span class='hs-keyword'>instance</span> <span class='hs-layout'>(</span><span class='hs-conid'>Stream</span> <span class='hs-varid'>s</span> <span class='hs-varid'>m</span> <span class='hs-varid'>t</span><span class='hs-layout'>,</span> <span class='hs-conid'>Monoid</span> <span class='hs-varid'>n</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>Multiplicative</span> <span class='hs-layout'>(</span><span class='hs-conid'>ParsecT</span> <span class='hs-varid'>s</span> <span class='hs-varid'>u</span> <span class='hs-varid'>m</span> <span class='hs-varid'>n</span><span class='hs-layout'>)</span> <span class='hs-keyword'>where</span>
-<a name="line-220"></a>    <span class='hs-varid'>one</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>return</span> <span class='hs-varid'>mempty</span>
-<a name="line-221"></a>    <span class='hs-varid'>times</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>liftM2</span> <span class='hs-varid'>mappend</span>
-<a name="line-222"></a>
-<a name="line-223"></a><span class='hs-comment'>-- Applicative instances</span>
-<a name="line-224"></a>
-<a name="line-225"></a><span class='hs-keyword'>instance</span> <span class='hs-conid'>Monoid</span> <span class='hs-varid'>n</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>Multiplicative</span> <span class='hs-layout'>(</span><span class='hs-conid'>ZipList</span> <span class='hs-varid'>n</span><span class='hs-layout'>)</span> <span class='hs-keyword'>where</span>
-<a name="line-226"></a>    <span class='hs-varid'>one</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>pure</span> <span class='hs-varid'>mempty</span>
-<a name="line-227"></a>    <span class='hs-varid'>times</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>liftA2</span> <span class='hs-varid'>mappend</span>
-<a name="line-228"></a>
-<a name="line-229"></a><span class='hs-keyword'>instance</span> <span class='hs-conid'>Monoid</span> <span class='hs-varid'>m</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>Multiplicative</span> <span class='hs-layout'>(</span><span class='hs-conid'>Const</span> <span class='hs-varid'>m</span> <span class='hs-varid'>a</span><span class='hs-layout'>)</span> <span class='hs-keyword'>where</span>
-<a name="line-230"></a>    <span class='hs-varid'>one</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>pure</span> <span class='hs-varid'>undefined</span>
-<a name="line-231"></a>    <span class='hs-varid'>times</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>liftA2</span> <span class='hs-varid'>undefined</span>
+<a name="line-210"></a><span class='hs-keyword'>instance</span> <span class='hs-layout'>(</span><span class='hs-conid'>Monad</span> <span class='hs-varid'>m</span><span class='hs-layout'>,</span> <span class='hs-conid'>Monoid</span> <span class='hs-varid'>n</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>Multiplicative</span> <span class='hs-layout'>(</span><span class='hs-conid'>ReaderT</span> <span class='hs-varid'>e</span> <span class='hs-varid'>m</span> <span class='hs-varid'>n</span><span class='hs-layout'>)</span> <span class='hs-keyword'>where</span>
+<a name="line-211"></a>    <span class='hs-varid'>one</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>return</span> <span class='hs-varid'>mempty</span>
+<a name="line-212"></a>    <span class='hs-varid'>times</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>liftM2</span> <span class='hs-varid'>mappend</span>
+<a name="line-213"></a><span class='hs-keyword'>instance</span> <span class='hs-layout'>(</span><span class='hs-conid'>Monad</span> <span class='hs-varid'>m</span><span class='hs-layout'>,</span> <span class='hs-conid'>Monoid</span> <span class='hs-varid'>w</span><span class='hs-layout'>,</span> <span class='hs-conid'>Monoid</span> <span class='hs-varid'>n</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>Multiplicative</span> <span class='hs-layout'>(</span><span class='hs-conid'>SWriter</span><span class='hs-varop'>.</span><span class='hs-conid'>WriterT</span> <span class='hs-varid'>w</span> <span class='hs-varid'>m</span> <span class='hs-varid'>n</span><span class='hs-layout'>)</span> <span class='hs-keyword'>where</span>
+<a name="line-214"></a>    <span class='hs-varid'>one</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>return</span> <span class='hs-varid'>mempty</span> 
+<a name="line-215"></a>    <span class='hs-varid'>times</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>liftM2</span> <span class='hs-varid'>mappend</span>
+<a name="line-216"></a><span class='hs-keyword'>instance</span> <span class='hs-layout'>(</span><span class='hs-conid'>Monad</span> <span class='hs-varid'>m</span><span class='hs-layout'>,</span> <span class='hs-conid'>Monoid</span> <span class='hs-varid'>w</span><span class='hs-layout'>,</span> <span class='hs-conid'>Monoid</span> <span class='hs-varid'>n</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>Multiplicative</span> <span class='hs-layout'>(</span><span class='hs-conid'>LWriter</span><span class='hs-varop'>.</span><span class='hs-conid'>WriterT</span> <span class='hs-varid'>w</span> <span class='hs-varid'>m</span> <span class='hs-varid'>n</span><span class='hs-layout'>)</span> <span class='hs-keyword'>where</span>
+<a name="line-217"></a>    <span class='hs-varid'>one</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>return</span> <span class='hs-varid'>mempty</span> 
+<a name="line-218"></a>    <span class='hs-varid'>times</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>liftM2</span> <span class='hs-varid'>mappend</span>
+<a name="line-219"></a><span class='hs-cpp'>#endif</span>
+<a name="line-220"></a>
+<a name="line-221"></a><span class='hs-cpp'>#ifdef M_STM</span>
+<a name="line-222"></a><span class='hs-keyword'>instance</span> <span class='hs-conid'>Monoid</span> <span class='hs-varid'>n</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>Multiplicative</span> <span class='hs-layout'>(</span><span class='hs-conid'>STM</span> <span class='hs-varid'>n</span><span class='hs-layout'>)</span> <span class='hs-keyword'>where</span>
+<a name="line-223"></a>    <span class='hs-varid'>one</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>return</span> <span class='hs-varid'>mempty</span>
+<a name="line-224"></a>    <span class='hs-varid'>times</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>liftM2</span> <span class='hs-varid'>mappend</span>
+<a name="line-225"></a><span class='hs-cpp'>#endif</span>
+<a name="line-226"></a>
+<a name="line-227"></a><span class='hs-cpp'>#ifdef M_PARSEC</span>
+<a name="line-228"></a><span class='hs-keyword'>instance</span> <span class='hs-layout'>(</span><span class='hs-conid'>Stream</span> <span class='hs-varid'>s</span> <span class='hs-varid'>m</span> <span class='hs-varid'>t</span><span class='hs-layout'>,</span> <span class='hs-conid'>Monoid</span> <span class='hs-varid'>n</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>Multiplicative</span> <span class='hs-layout'>(</span><span class='hs-conid'>ParsecT</span> <span class='hs-varid'>s</span> <span class='hs-varid'>u</span> <span class='hs-varid'>m</span> <span class='hs-varid'>n</span><span class='hs-layout'>)</span> <span class='hs-keyword'>where</span>
+<a name="line-229"></a>    <span class='hs-varid'>one</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>return</span> <span class='hs-varid'>mempty</span>
+<a name="line-230"></a>    <span class='hs-varid'>times</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>liftM2</span> <span class='hs-varid'>mappend</span>
+<a name="line-231"></a><span class='hs-cpp'>#endif</span>
hunk ./doc/html/monoids/src/Data-Monoid-Multiplicative.html 241
-<a name="line-233"></a><span class='hs-comment'>-- Numeric instances</span>
-<a name="line-234"></a><span class='hs-keyword'>instance</span> <span class='hs-conid'>Multiplicative</span> <span class='hs-conid'>Int</span> <span class='hs-keyword'>where</span>
-<a name="line-235"></a>    <span class='hs-varid'>one</span> <span class='hs-keyglyph'>=</span> <span class='hs-num'>1</span>
-<a name="line-236"></a>    <span class='hs-varid'>times</span> <span class='hs-keyglyph'>=</span> <span class='hs-layout'>(</span><span class='hs-varop'>*</span><span class='hs-layout'>)</span>
-<a name="line-237"></a>
-<a name="line-238"></a><span class='hs-keyword'>instance</span> <span class='hs-conid'>Multiplicative</span> <span class='hs-conid'>Integer</span> <span class='hs-keyword'>where</span>
-<a name="line-239"></a>    <span class='hs-varid'>one</span> <span class='hs-keyglyph'>=</span> <span class='hs-num'>1</span>
-<a name="line-240"></a>    <span class='hs-varid'>times</span> <span class='hs-keyglyph'>=</span> <span class='hs-layout'>(</span><span class='hs-varop'>*</span><span class='hs-layout'>)</span>
-<a name="line-241"></a>
-<a name="line-242"></a><span class='hs-keyword'>instance</span> <span class='hs-conid'>Integral</span> <span class='hs-varid'>m</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>Multiplicative</span> <span class='hs-layout'>(</span><span class='hs-conid'>Ratio</span> <span class='hs-varid'>m</span><span class='hs-layout'>)</span> <span class='hs-keyword'>where</span>
-<a name="line-243"></a>    <span class='hs-varid'>one</span> <span class='hs-keyglyph'>=</span> <span class='hs-num'>1</span>
-<a name="line-244"></a>    <span class='hs-varid'>times</span> <span class='hs-keyglyph'>=</span> <span class='hs-layout'>(</span><span class='hs-varop'>*</span><span class='hs-layout'>)</span>
-<a name="line-245"></a>
+<a name="line-233"></a><span class='hs-cpp'>#ifdef X_OverloadedStrings </span>
+<a name="line-234"></a><span class='hs-keyword'>instance</span> <span class='hs-conid'>Multiplicative</span> <span class='hs-varid'>m</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>Multiplicative</span> <span class='hs-layout'>(</span><span class='hs-conid'>FromString</span> <span class='hs-varid'>m</span><span class='hs-layout'>)</span> <span class='hs-keyword'>where</span>
+<a name="line-235"></a>    <span class='hs-varid'>one</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>FromString</span> <span class='hs-varid'>one</span>
+<a name="line-236"></a>    <span class='hs-conid'>FromString</span> <span class='hs-varid'>a</span> <span class='hs-varop'>`times`</span> <span class='hs-conid'>FromString</span> <span class='hs-varid'>b</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>FromString</span> <span class='hs-layout'>(</span><span class='hs-varid'>a</span> <span class='hs-varop'>`times`</span> <span class='hs-varid'>b</span><span class='hs-layout'>)</span>
+<a name="line-237"></a><span class='hs-cpp'>#endif</span>
hunk ./doc/html/monoids/src/Data-Monoid-Ord.html 39
-<a name="line-31"></a><span class='hs-keyword'>import</span> <span class='hs-conid'>Data</span><span class='hs-varop'>.</span><span class='hs-conid'>Ring</span><span class='hs-varop'>.</span><span class='hs-conid'>Semi</span>
+<a name="line-31"></a><span class='hs-keyword'>import</span> <span class='hs-conid'>Data</span><span class='hs-varop'>.</span><span class='hs-conid'>Ring</span>
hunk ./doc/html/monoids/src/Data-Monoid-Reducer.html 9
-<pre><a name="line-1"></a><span class='hs-comment'>{-# LANGUAGE UndecidableInstances , FlexibleContexts , MultiParamTypeClasses , FlexibleInstances , GeneralizedNewtypeDeriving, TypeOperators, ScopedTypeVariables #-}</span>
+<pre><a name="line-1"></a><span class='hs-comment'>{-# LANGUAGE UndecidableInstances , FlexibleContexts , MultiParamTypeClasses , FlexibleInstances , GeneralizedNewtypeDeriving, TypeOperators, ScopedTypeVariables, CPP #-}</span>
hunk ./doc/html/monoids/src/Data-Monoid-Reducer.html 15
-<a name="line-7"></a><span class='hs-comment'>-- License     :  BSD-style</span>
+<a name="line-7"></a><span class='hs-comment'>-- License     :  BSD3</span>
hunk ./doc/html/monoids/src/Data-Monoid-Reducer.html 44
-<a name="line-36"></a><span class='hs-keyword'>import</span> <span class='hs-conid'>Data</span><span class='hs-varop'>.</span><span class='hs-conid'>FingerTree</span>
-<a name="line-37"></a>
-<a name="line-38"></a><span class='hs-keyword'>import</span> <span class='hs-keyword'>qualified</span> <span class='hs-conid'>Data</span><span class='hs-varop'>.</span><span class='hs-conid'>Sequence</span> <span class='hs-keyword'>as</span> <span class='hs-conid'>Seq</span>
-<a name="line-39"></a><span class='hs-keyword'>import</span> <span class='hs-conid'>Data</span><span class='hs-varop'>.</span><span class='hs-conid'>Sequence</span> <span class='hs-layout'>(</span><span class='hs-conid'>Seq</span><span class='hs-layout'>)</span>
+<a name="line-36"></a>
+<a name="line-37"></a><span class='hs-cpp'>#ifdef M_FINGERTREE</span>
+<a name="line-38"></a><span class='hs-keyword'>import</span> <span class='hs-conid'>Data</span><span class='hs-varop'>.</span><span class='hs-conid'>FingerTree</span>
+<a name="line-39"></a><span class='hs-cpp'>#endif</span>
hunk ./doc/html/monoids/src/Data-Monoid-Reducer.html 49
-<a name="line-41"></a><span class='hs-keyword'>import</span> <span class='hs-keyword'>qualified</span> <span class='hs-conid'>Data</span><span class='hs-varop'>.</span><span class='hs-conid'>Set</span> <span class='hs-keyword'>as</span> <span class='hs-conid'>Set</span>
-<a name="line-42"></a><span class='hs-keyword'>import</span> <span class='hs-conid'>Data</span><span class='hs-varop'>.</span><span class='hs-conid'>Set</span> <span class='hs-layout'>(</span><span class='hs-conid'>Set</span><span class='hs-layout'>)</span>
-<a name="line-43"></a>
-<a name="line-44"></a><span class='hs-keyword'>import</span> <span class='hs-keyword'>qualified</span> <span class='hs-conid'>Data</span><span class='hs-varop'>.</span><span class='hs-conid'>IntSet</span> <span class='hs-keyword'>as</span> <span class='hs-conid'>IntSet</span>
-<a name="line-45"></a><span class='hs-keyword'>import</span> <span class='hs-conid'>Data</span><span class='hs-varop'>.</span><span class='hs-conid'>IntSet</span> <span class='hs-layout'>(</span><span class='hs-conid'>IntSet</span><span class='hs-layout'>)</span>
-<a name="line-46"></a>
-<a name="line-47"></a><span class='hs-keyword'>import</span> <span class='hs-keyword'>qualified</span> <span class='hs-conid'>Data</span><span class='hs-varop'>.</span><span class='hs-conid'>IntMap</span> <span class='hs-keyword'>as</span> <span class='hs-conid'>IntMap</span>
-<a name="line-48"></a><span class='hs-keyword'>import</span> <span class='hs-conid'>Data</span><span class='hs-varop'>.</span><span class='hs-conid'>IntMap</span> <span class='hs-layout'>(</span><span class='hs-conid'>IntMap</span><span class='hs-layout'>)</span>
-<a name="line-49"></a>
-<a name="line-50"></a><span class='hs-keyword'>import</span> <span class='hs-conid'>Data</span><span class='hs-varop'>.</span><span class='hs-conid'>Reflection</span>
-<a name="line-51"></a>
-<a name="line-52"></a><span class='hs-keyword'>import</span> <span class='hs-keyword'>qualified</span> <span class='hs-conid'>Data</span><span class='hs-varop'>.</span><span class='hs-conid'>Map</span> <span class='hs-keyword'>as</span> <span class='hs-conid'>Map</span>
+<a name="line-41"></a><span class='hs-cpp'>#ifdef M_CONTAINERS</span>
+<a name="line-42"></a><span class='hs-keyword'>import</span> <span class='hs-keyword'>qualified</span> <span class='hs-conid'>Data</span><span class='hs-varop'>.</span><span class='hs-conid'>Sequence</span> <span class='hs-keyword'>as</span> <span class='hs-conid'>Seq</span>
+<a name="line-43"></a><span class='hs-keyword'>import</span> <span class='hs-conid'>Data</span><span class='hs-varop'>.</span><span class='hs-conid'>Sequence</span> <span class='hs-layout'>(</span><span class='hs-conid'>Seq</span><span class='hs-layout'>)</span>
+<a name="line-44"></a><span class='hs-keyword'>import</span> <span class='hs-keyword'>qualified</span> <span class='hs-conid'>Data</span><span class='hs-varop'>.</span><span class='hs-conid'>Set</span> <span class='hs-keyword'>as</span> <span class='hs-conid'>Set</span>
+<a name="line-45"></a><span class='hs-keyword'>import</span> <span class='hs-conid'>Data</span><span class='hs-varop'>.</span><span class='hs-conid'>Set</span> <span class='hs-layout'>(</span><span class='hs-conid'>Set</span><span class='hs-layout'>)</span>
+<a name="line-46"></a><span class='hs-keyword'>import</span> <span class='hs-keyword'>qualified</span> <span class='hs-conid'>Data</span><span class='hs-varop'>.</span><span class='hs-conid'>IntSet</span> <span class='hs-keyword'>as</span> <span class='hs-conid'>IntSet</span>
+<a name="line-47"></a><span class='hs-keyword'>import</span> <span class='hs-conid'>Data</span><span class='hs-varop'>.</span><span class='hs-conid'>IntSet</span> <span class='hs-layout'>(</span><span class='hs-conid'>IntSet</span><span class='hs-layout'>)</span>
+<a name="line-48"></a><span class='hs-keyword'>import</span> <span class='hs-keyword'>qualified</span> <span class='hs-conid'>Data</span><span class='hs-varop'>.</span><span class='hs-conid'>IntMap</span> <span class='hs-keyword'>as</span> <span class='hs-conid'>IntMap</span>
+<a name="line-49"></a><span class='hs-keyword'>import</span> <span class='hs-conid'>Data</span><span class='hs-varop'>.</span><span class='hs-conid'>IntMap</span> <span class='hs-layout'>(</span><span class='hs-conid'>IntMap</span><span class='hs-layout'>)</span>
+<a name="line-50"></a><span class='hs-keyword'>import</span> <span class='hs-keyword'>qualified</span> <span class='hs-conid'>Data</span><span class='hs-varop'>.</span><span class='hs-conid'>Map</span> <span class='hs-keyword'>as</span> <span class='hs-conid'>Map</span>
+<a name="line-51"></a><span class='hs-keyword'>import</span> <span class='hs-conid'>Data</span><span class='hs-varop'>.</span><span class='hs-conid'>Map</span> <span class='hs-layout'>(</span><span class='hs-conid'>Map</span><span class='hs-layout'>)</span>
+<a name="line-52"></a><span class='hs-cpp'>#endif</span>
hunk ./doc/html/monoids/src/Data-Monoid-Reducer.html 62
-<a name="line-54"></a><span class='hs-keyword'>import</span> <span class='hs-conid'>Data</span><span class='hs-varop'>.</span><span class='hs-conid'>Map</span> <span class='hs-layout'>(</span><span class='hs-conid'>Map</span><span class='hs-layout'>)</span>
-<a name="line-55"></a>
-<a name="line-56"></a><span class='hs-keyword'>import</span> <span class='hs-conid'>Text</span><span class='hs-varop'>.</span><span class='hs-conid'>Parsec</span><span class='hs-varop'>.</span><span class='hs-conid'>Prim</span>
+<a name="line-54"></a><span class='hs-cpp'>#ifdef M_REFLECTION</span>
+<a name="line-55"></a><span class='hs-keyword'>import</span> <span class='hs-conid'>Data</span><span class='hs-varop'>.</span><span class='hs-conid'>Reflection</span>
+<a name="line-56"></a><span class='hs-cpp'>#endif</span>
hunk ./doc/html/monoids/src/Data-Monoid-Reducer.html 66
-<a name="line-58"></a><span class='hs-comment'>--import qualified Data.BitSet as BitSet</span>
-<a name="line-59"></a><span class='hs-comment'>--import Data.BitSet (BitSet)</span>
-<a name="line-60"></a>
-<a name="line-61"></a><a name="Reducer"></a><span class='hs-comment'>-- | This type may be best read infix. A @c `Reducer` m@ is a 'Monoid' @m@ that maps</span>
-<a name="line-62"></a><a name="Reducer"></a><span class='hs-comment'>-- values of type @c@ through @unit@ to values of type @m@. A @c@-'Reducer' may also</span>
-<a name="line-63"></a><a name="Reducer"></a><span class='hs-comment'>-- supply operations which tack-on another @c@ to an existing 'Monoid' @m@ on the left</span>
-<a name="line-64"></a><a name="Reducer"></a><span class='hs-comment'>-- or right. These specialized reductions may be more efficient in some scenarios</span>
-<a name="line-65"></a><a name="Reducer"></a><span class='hs-comment'>-- and are used when appropriate by a 'Generator'. The names 'cons' and 'snoc' work</span>
-<a name="line-66"></a><a name="Reducer"></a><span class='hs-comment'>-- by analogy to the synonymous operations in the list monoid.</span>
-<a name="line-67"></a><a name="Reducer"></a><span class='hs-comment'>--</span>
-<a name="line-68"></a><a name="Reducer"></a><span class='hs-comment'>-- This class deliberately avoids functional-dependencies, so that () can be a @c@-Reducer</span>
-<a name="line-69"></a><a name="Reducer"></a><span class='hs-comment'>-- for all @c@, and so many common reducers can work over multiple types, for instance,</span>
-<a name="line-70"></a><a name="Reducer"></a><span class='hs-comment'>-- First and Last may reduce both @a@ and 'Maybe' @a@. Since a 'Generator' has a fixed element</span>
-<a name="line-71"></a><a name="Reducer"></a><span class='hs-comment'>-- type, the input to the reducer is generally known and extracting from the monoid usually</span>
-<a name="line-72"></a><a name="Reducer"></a><span class='hs-comment'>-- is sufficient to fix the result type. Combinators are available for most scenarios where</span>
-<a name="line-73"></a><a name="Reducer"></a><span class='hs-comment'>-- this is not the case, and the few remaining cases can be handled by using an explicit </span>
-<a name="line-74"></a><a name="Reducer"></a><span class='hs-comment'>-- type annotation.</span>
-<a name="line-75"></a><a name="Reducer"></a><span class='hs-comment'>--</span>
-<a name="line-76"></a><a name="Reducer"></a><span class='hs-comment'>-- Minimal definition: 'unit' or 'snoc'</span>
-<a name="line-77"></a><a name="Reducer"></a><span class='hs-keyword'>class</span> <span class='hs-conid'>Monoid</span> <span class='hs-varid'>m</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>Reducer</span> <span class='hs-varid'>c</span> <span class='hs-varid'>m</span> <span class='hs-keyword'>where</span>
-<a name="line-78"></a>    <span class='hs-comment'>-- | Convert a value into a 'Monoid'</span>
-<a name="line-79"></a>    <span class='hs-varid'>unit</span> <span class='hs-keyglyph'>::</span> <span class='hs-varid'>c</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-varid'>m</span> 
-<a name="line-80"></a>    <span class='hs-comment'>-- | Append a value to a 'Monoid' for use in left-to-right reduction</span>
-<a name="line-81"></a>    <span class='hs-varid'>snoc</span> <span class='hs-keyglyph'>::</span> <span class='hs-varid'>m</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-varid'>c</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-varid'>m</span>
-<a name="line-82"></a>    <span class='hs-comment'>-- | Prepend a value onto a 'Monoid' for use during right-to-left reduction</span>
-<a name="line-83"></a>    <span class='hs-varid'>cons</span> <span class='hs-keyglyph'>::</span> <span class='hs-varid'>c</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-varid'>m</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-varid'>m</span> 
-<a name="line-84"></a>
-<a name="line-85"></a>    <span class='hs-varid'>unit</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>snoc</span> <span class='hs-varid'>mempty</span> 
-<a name="line-86"></a>    <span class='hs-varid'>snoc</span> <span class='hs-varid'>m</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>mappend</span> <span class='hs-varid'>m</span> <span class='hs-varop'>.</span> <span class='hs-varid'>unit</span>
-<a name="line-87"></a>    <span class='hs-varid'>cons</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>mappend</span> <span class='hs-varop'>.</span> <span class='hs-varid'>unit</span>
-<a name="line-88"></a>
-<a name="line-89"></a><a name="foldMapReduce"></a><span class='hs-comment'>-- | Apply a 'Reducer' to a 'Foldable' container, after mapping the contents into a suitable form for reduction.</span>
-<a name="line-90"></a><span class='hs-definition'>foldMapReduce</span> <span class='hs-keyglyph'>::</span> <span class='hs-layout'>(</span><span class='hs-conid'>Foldable</span> <span class='hs-varid'>f</span><span class='hs-layout'>,</span> <span class='hs-varid'>e</span> <span class='hs-varop'>`Reducer`</span> <span class='hs-varid'>m</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-layout'>(</span><span class='hs-varid'>a</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-varid'>e</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-varid'>f</span> <span class='hs-varid'>a</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-varid'>m</span>
-<a name="line-91"></a><span class='hs-definition'>foldMapReduce</span> <span class='hs-varid'>f</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>foldMap</span> <span class='hs-layout'>(</span><span class='hs-varid'>unit</span> <span class='hs-varop'>.</span> <span class='hs-varid'>f</span><span class='hs-layout'>)</span>
-<a name="line-92"></a>
-<a name="line-93"></a><a name="foldReduce"></a><span class='hs-comment'>-- | Apply a 'Reducer' to a 'Foldable' mapping each element through 'unit'</span>
-<a name="line-94"></a><span class='hs-definition'>foldReduce</span> <span class='hs-keyglyph'>::</span> <span class='hs-layout'>(</span><span class='hs-conid'>Foldable</span> <span class='hs-varid'>f</span><span class='hs-layout'>,</span> <span class='hs-varid'>e</span> <span class='hs-varop'>`Reducer`</span> <span class='hs-varid'>m</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-varid'>f</span> <span class='hs-varid'>e</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-varid'>m</span>
-<a name="line-95"></a><span class='hs-definition'>foldReduce</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>foldMap</span> <span class='hs-varid'>unit</span>
-<a name="line-96"></a>
-<a name="line-97"></a><a name="returnUnit"></a><span class='hs-definition'>returnUnit</span> <span class='hs-keyglyph'>::</span> <span class='hs-layout'>(</span><span class='hs-conid'>Monad</span> <span class='hs-varid'>m</span><span class='hs-layout'>,</span> <span class='hs-varid'>c</span> <span class='hs-varop'>`Reducer`</span> <span class='hs-varid'>n</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-varid'>c</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-varid'>m</span> <span class='hs-varid'>n</span> 
-<a name="line-98"></a><span class='hs-definition'>returnUnit</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>return</span> <span class='hs-varop'>.</span> <span class='hs-varid'>unit</span>
-<a name="line-99"></a>
-<a name="line-100"></a><a name="pureUnit"></a><span class='hs-definition'>pureUnit</span> <span class='hs-keyglyph'>::</span> <span class='hs-layout'>(</span><span class='hs-conid'>Applicative</span> <span class='hs-varid'>f</span><span class='hs-layout'>,</span> <span class='hs-varid'>c</span> <span class='hs-varop'>`Reducer`</span> <span class='hs-varid'>n</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-varid'>c</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-varid'>f</span> <span class='hs-varid'>n</span>
-<a name="line-101"></a><span class='hs-definition'>pureUnit</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>pure</span> <span class='hs-varop'>.</span> <span class='hs-varid'>unit</span>
-<a name="line-102"></a>
-<a name="line-103"></a><span class='hs-keyword'>instance</span> <span class='hs-layout'>(</span><span class='hs-conid'>Reducer</span> <span class='hs-varid'>c</span> <span class='hs-varid'>m</span><span class='hs-layout'>,</span> <span class='hs-conid'>Reducer</span> <span class='hs-varid'>c</span> <span class='hs-varid'>n</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>Reducer</span> <span class='hs-varid'>c</span> <span class='hs-layout'>(</span><span class='hs-varid'>m</span><span class='hs-layout'>,</span><span class='hs-varid'>n</span><span class='hs-layout'>)</span> <span class='hs-keyword'>where</span>
-<a name="line-104"></a>    <span class='hs-varid'>unit</span> <span class='hs-varid'>x</span> <span class='hs-keyglyph'>=</span> <span class='hs-layout'>(</span><span class='hs-varid'>unit</span> <span class='hs-varid'>x</span><span class='hs-layout'>,</span><span class='hs-varid'>unit</span> <span class='hs-varid'>x</span><span class='hs-layout'>)</span>
-<a name="line-105"></a>    <span class='hs-layout'>(</span><span class='hs-varid'>m</span><span class='hs-layout'>,</span><span class='hs-varid'>n</span><span class='hs-layout'>)</span> <span class='hs-varop'>`snoc`</span> <span class='hs-varid'>x</span> <span class='hs-keyglyph'>=</span> <span class='hs-layout'>(</span><span class='hs-varid'>m</span> <span class='hs-varop'>`snoc`</span> <span class='hs-varid'>x</span><span class='hs-layout'>,</span> <span class='hs-varid'>n</span> <span class='hs-varop'>`snoc`</span> <span class='hs-varid'>x</span><span class='hs-layout'>)</span>
-<a name="line-106"></a>    <span class='hs-varid'>x</span> <span class='hs-varop'>`cons`</span> <span class='hs-layout'>(</span><span class='hs-varid'>m</span><span class='hs-layout'>,</span><span class='hs-varid'>n</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=</span> <span class='hs-layout'>(</span><span class='hs-varid'>x</span> <span class='hs-varop'>`cons`</span> <span class='hs-varid'>m</span><span class='hs-layout'>,</span> <span class='hs-varid'>x</span> <span class='hs-varop'>`cons`</span> <span class='hs-varid'>n</span><span class='hs-layout'>)</span>
-<a name="line-107"></a>
-<a name="line-108"></a><span class='hs-keyword'>instance</span> <span class='hs-layout'>(</span><span class='hs-conid'>Reducer</span> <span class='hs-varid'>c</span> <span class='hs-varid'>m</span><span class='hs-layout'>,</span> <span class='hs-conid'>Reducer</span> <span class='hs-varid'>c</span> <span class='hs-varid'>n</span><span class='hs-layout'>,</span> <span class='hs-conid'>Reducer</span> <span class='hs-varid'>c</span> <span class='hs-varid'>o</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>Reducer</span> <span class='hs-varid'>c</span> <span class='hs-layout'>(</span><span class='hs-varid'>m</span><span class='hs-layout'>,</span><span class='hs-varid'>n</span><span class='hs-layout'>,</span><span class='hs-varid'>o</span><span class='hs-layout'>)</span> <span class='hs-keyword'>where</span>
-<a name="line-109"></a>    <span class='hs-varid'>unit</span> <span class='hs-varid'>x</span> <span class='hs-keyglyph'>=</span> <span class='hs-layout'>(</span><span class='hs-varid'>unit</span> <span class='hs-varid'>x</span><span class='hs-layout'>,</span><span class='hs-varid'>unit</span> <span class='hs-varid'>x</span><span class='hs-layout'>,</span> <span class='hs-varid'>unit</span> <span class='hs-varid'>x</span><span class='hs-layout'>)</span>
-<a name="line-110"></a>    <span class='hs-layout'>(</span><span class='hs-varid'>m</span><span class='hs-layout'>,</span><span class='hs-varid'>n</span><span class='hs-layout'>,</span><span class='hs-varid'>o</span><span class='hs-layout'>)</span> <span class='hs-varop'>`snoc`</span> <span class='hs-varid'>x</span> <span class='hs-keyglyph'>=</span> <span class='hs-layout'>(</span><span class='hs-varid'>m</span> <span class='hs-varop'>`snoc`</span> <span class='hs-varid'>x</span><span class='hs-layout'>,</span> <span class='hs-varid'>n</span> <span class='hs-varop'>`snoc`</span> <span class='hs-varid'>x</span><span class='hs-layout'>,</span> <span class='hs-varid'>o</span> <span class='hs-varop'>`snoc`</span> <span class='hs-varid'>x</span><span class='hs-layout'>)</span>
-<a name="line-111"></a>    <span class='hs-varid'>x</span> <span class='hs-varop'>`cons`</span> <span class='hs-layout'>(</span><span class='hs-varid'>m</span><span class='hs-layout'>,</span><span class='hs-varid'>n</span><span class='hs-layout'>,</span><span class='hs-varid'>o</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=</span> <span class='hs-layout'>(</span><span class='hs-varid'>x</span> <span class='hs-varop'>`cons`</span> <span class='hs-varid'>m</span><span class='hs-layout'>,</span> <span class='hs-varid'>x</span> <span class='hs-varop'>`cons`</span> <span class='hs-varid'>n</span><span class='hs-layout'>,</span> <span class='hs-varid'>x</span> <span class='hs-varop'>`cons`</span> <span class='hs-varid'>o</span><span class='hs-layout'>)</span>
-<a name="line-112"></a>
-<a name="line-113"></a><span class='hs-keyword'>instance</span> <span class='hs-layout'>(</span><span class='hs-conid'>Reducer</span> <span class='hs-varid'>c</span> <span class='hs-varid'>m</span><span class='hs-layout'>,</span> <span class='hs-conid'>Reducer</span> <span class='hs-varid'>c</span> <span class='hs-varid'>n</span><span class='hs-layout'>,</span> <span class='hs-conid'>Reducer</span> <span class='hs-varid'>c</span> <span class='hs-varid'>o</span><span class='hs-layout'>,</span> <span class='hs-conid'>Reducer</span> <span class='hs-varid'>c</span> <span class='hs-varid'>p</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>Reducer</span> <span class='hs-varid'>c</span> <span class='hs-layout'>(</span><span class='hs-varid'>m</span><span class='hs-layout'>,</span><span class='hs-varid'>n</span><span class='hs-layout'>,</span><span class='hs-varid'>o</span><span class='hs-layout'>,</span><span class='hs-varid'>p</span><span class='hs-layout'>)</span> <span class='hs-keyword'>where</span>
-<a name="line-114"></a>    <span class='hs-varid'>unit</span> <span class='hs-varid'>x</span> <span class='hs-keyglyph'>=</span> <span class='hs-layout'>(</span><span class='hs-varid'>unit</span> <span class='hs-varid'>x</span><span class='hs-layout'>,</span><span class='hs-varid'>unit</span> <span class='hs-varid'>x</span><span class='hs-layout'>,</span> <span class='hs-varid'>unit</span> <span class='hs-varid'>x</span><span class='hs-layout'>,</span> <span class='hs-varid'>unit</span> <span class='hs-varid'>x</span><span class='hs-layout'>)</span>
-<a name="line-115"></a>    <span class='hs-layout'>(</span><span class='hs-varid'>m</span><span class='hs-layout'>,</span><span class='hs-varid'>n</span><span class='hs-layout'>,</span><span class='hs-varid'>o</span><span class='hs-layout'>,</span><span class='hs-varid'>p</span><span class='hs-layout'>)</span> <span class='hs-varop'>`snoc`</span> <span class='hs-varid'>x</span> <span class='hs-keyglyph'>=</span> <span class='hs-layout'>(</span><span class='hs-varid'>m</span> <span class='hs-varop'>`snoc`</span> <span class='hs-varid'>x</span><span class='hs-layout'>,</span> <span class='hs-varid'>n</span> <span class='hs-varop'>`snoc`</span> <span class='hs-varid'>x</span><span class='hs-layout'>,</span> <span class='hs-varid'>o</span> <span class='hs-varop'>`snoc`</span> <span class='hs-varid'>x</span><span class='hs-layout'>,</span> <span class='hs-varid'>p</span> <span class='hs-varop'>`snoc`</span> <span class='hs-varid'>x</span><span class='hs-layout'>)</span>
-<a name="line-116"></a>    <span class='hs-varid'>x</span> <span class='hs-varop'>`cons`</span> <span class='hs-layout'>(</span><span class='hs-varid'>m</span><span class='hs-layout'>,</span><span class='hs-varid'>n</span><span class='hs-layout'>,</span><span class='hs-varid'>o</span><span class='hs-layout'>,</span><span class='hs-varid'>p</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=</span> <span class='hs-layout'>(</span><span class='hs-varid'>x</span> <span class='hs-varop'>`cons`</span> <span class='hs-varid'>m</span><span class='hs-layout'>,</span> <span class='hs-varid'>x</span> <span class='hs-varop'>`cons`</span> <span class='hs-varid'>n</span><span class='hs-layout'>,</span> <span class='hs-varid'>x</span> <span class='hs-varop'>`cons`</span> <span class='hs-varid'>o</span><span class='hs-layout'>,</span> <span class='hs-varid'>x</span> <span class='hs-varop'>`cons`</span> <span class='hs-varid'>p</span><span class='hs-layout'>)</span>
-<a name="line-117"></a>
-<a name="line-118"></a><span class='hs-keyword'>instance</span> <span class='hs-conid'>Reducer</span> <span class='hs-varid'>c</span> <span class='hs-keyglyph'>[</span><span class='hs-varid'>c</span><span class='hs-keyglyph'>]</span> <span class='hs-keyword'>where</span>
-<a name="line-119"></a>    <span class='hs-varid'>unit</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>return</span>
-<a name="line-120"></a>    <span class='hs-varid'>cons</span> <span class='hs-keyglyph'>=</span> <span class='hs-layout'>(</span><span class='hs-conop'>:</span><span class='hs-layout'>)</span>
-<a name="line-121"></a>    <span class='hs-varid'>xs</span> <span class='hs-varop'>`snoc`</span> <span class='hs-varid'>x</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>xs</span> <span class='hs-varop'>++</span> <span class='hs-keyglyph'>[</span><span class='hs-varid'>x</span><span class='hs-keyglyph'>]</span>
-<a name="line-122"></a>
-<a name="line-123"></a><span class='hs-keyword'>instance</span> <span class='hs-conid'>Reducer</span> <span class='hs-varid'>c</span> <span class='hs-conid'>()</span> <span class='hs-keyword'>where</span>
-<a name="line-124"></a>    <span class='hs-varid'>unit</span> <span class='hs-keyword'>_</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>()</span>
-<a name="line-125"></a>    <span class='hs-keyword'>_</span> <span class='hs-varop'>`snoc`</span> <span class='hs-keyword'>_</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>()</span>
-<a name="line-126"></a>    <span class='hs-keyword'>_</span> <span class='hs-varop'>`cons`</span> <span class='hs-keyword'>_</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>()</span>
-<a name="line-127"></a>
-<a name="line-128"></a><span class='hs-keyword'>instance</span> <span class='hs-conid'>Reducer</span> <span class='hs-conid'>Bool</span> <span class='hs-conid'>Any</span> <span class='hs-keyword'>where</span>
-<a name="line-129"></a>    <span class='hs-varid'>unit</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>Any</span>
-<a name="line-130"></a>
-<a name="line-131"></a><span class='hs-keyword'>instance</span> <span class='hs-conid'>Reducer</span> <span class='hs-conid'>Bool</span> <span class='hs-conid'>All</span> <span class='hs-keyword'>where</span>
-<a name="line-132"></a>    <span class='hs-varid'>unit</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>All</span>
-<a name="line-133"></a>
-<a name="line-134"></a><span class='hs-keyword'>instance</span> <span class='hs-conid'>Reducer</span> <span class='hs-layout'>(</span><span class='hs-varid'>a</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-varid'>a</span><span class='hs-layout'>)</span> <span class='hs-layout'>(</span><span class='hs-conid'>Endo</span> <span class='hs-varid'>a</span><span class='hs-layout'>)</span> <span class='hs-keyword'>where</span>
-<a name="line-135"></a>    <span class='hs-varid'>unit</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>Endo</span>
-<a name="line-136"></a>
-<a name="line-137"></a><span class='hs-keyword'>instance</span> <span class='hs-conid'>Monoid</span> <span class='hs-varid'>a</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>Reducer</span> <span class='hs-varid'>a</span> <span class='hs-layout'>(</span><span class='hs-conid'>Dual</span> <span class='hs-varid'>a</span><span class='hs-layout'>)</span> <span class='hs-keyword'>where</span>
-<a name="line-138"></a>    <span class='hs-varid'>unit</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>Dual</span>
-<a name="line-139"></a>    
-<a name="line-140"></a><span class='hs-keyword'>instance</span> <span class='hs-conid'>Num</span> <span class='hs-varid'>a</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>Reducer</span> <span class='hs-varid'>a</span> <span class='hs-layout'>(</span><span class='hs-conid'>Sum</span> <span class='hs-varid'>a</span><span class='hs-layout'>)</span> <span class='hs-keyword'>where</span>
-<a name="line-141"></a>    <span class='hs-varid'>unit</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>Sum</span>
-<a name="line-142"></a>
-<a name="line-143"></a><span class='hs-keyword'>instance</span> <span class='hs-conid'>Num</span> <span class='hs-varid'>a</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>Reducer</span> <span class='hs-varid'>a</span> <span class='hs-layout'>(</span><span class='hs-conid'>Product</span> <span class='hs-varid'>a</span><span class='hs-layout'>)</span> <span class='hs-keyword'>where</span>
-<a name="line-144"></a>    <span class='hs-varid'>unit</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>Product</span>
-<a name="line-145"></a>
-<a name="line-146"></a><span class='hs-keyword'>instance</span> <span class='hs-conid'>Reducer</span> <span class='hs-layout'>(</span><span class='hs-conid'>Maybe</span> <span class='hs-varid'>a</span><span class='hs-layout'>)</span> <span class='hs-layout'>(</span><span class='hs-conid'>First</span> <span class='hs-varid'>a</span><span class='hs-layout'>)</span> <span class='hs-keyword'>where</span>
-<a name="line-147"></a>    <span class='hs-varid'>unit</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>First</span>
-<a name="line-148"></a>
-<a name="line-149"></a><span class='hs-keyword'>instance</span> <span class='hs-conid'>Reducer</span> <span class='hs-varid'>a</span> <span class='hs-layout'>(</span><span class='hs-conid'>First</span> <span class='hs-varid'>a</span><span class='hs-layout'>)</span> <span class='hs-keyword'>where</span>
-<a name="line-150"></a>    <span class='hs-varid'>unit</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>First</span> <span class='hs-varop'>.</span> <span class='hs-conid'>Just</span>
-<a name="line-151"></a>
-<a name="line-152"></a><span class='hs-keyword'>instance</span> <span class='hs-conid'>Reducer</span> <span class='hs-layout'>(</span><span class='hs-conid'>Maybe</span> <span class='hs-varid'>a</span><span class='hs-layout'>)</span> <span class='hs-layout'>(</span><span class='hs-conid'>Last</span> <span class='hs-varid'>a</span><span class='hs-layout'>)</span> <span class='hs-keyword'>where</span>
-<a name="line-153"></a>    <span class='hs-varid'>unit</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>Last</span>
-<a name="line-154"></a>
-<a name="line-155"></a><span class='hs-keyword'>instance</span> <span class='hs-conid'>Reducer</span> <span class='hs-varid'>a</span> <span class='hs-layout'>(</span><span class='hs-conid'>Last</span> <span class='hs-varid'>a</span><span class='hs-layout'>)</span> <span class='hs-keyword'>where</span>
-<a name="line-156"></a>    <span class='hs-varid'>unit</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>Last</span> <span class='hs-varop'>.</span> <span class='hs-conid'>Just</span>
-<a name="line-157"></a>
-<a name="line-158"></a><span class='hs-keyword'>instance</span> <span class='hs-conid'>Measured</span> <span class='hs-varid'>v</span> <span class='hs-varid'>a</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>Reducer</span> <span class='hs-varid'>a</span> <span class='hs-layout'>(</span><span class='hs-conid'>FingerTree</span> <span class='hs-varid'>v</span> <span class='hs-varid'>a</span><span class='hs-layout'>)</span> <span class='hs-keyword'>where</span>
-<a name="line-159"></a>    <span class='hs-varid'>unit</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>singleton</span>
-<a name="line-160"></a>    <span class='hs-varid'>cons</span> <span class='hs-keyglyph'>=</span> <span class='hs-layout'>(</span><span class='hs-varop'>&lt;|</span><span class='hs-layout'>)</span>
-<a name="line-161"></a>    <span class='hs-varid'>snoc</span> <span class='hs-keyglyph'>=</span> <span class='hs-layout'>(</span><span class='hs-varop'>|&gt;</span><span class='hs-layout'>)</span> 
-<a name="line-162"></a>
-<a name="line-163"></a><span class='hs-keyword'>instance</span> <span class='hs-layout'>(</span><span class='hs-conid'>Stream</span> <span class='hs-varid'>s</span> <span class='hs-varid'>m</span> <span class='hs-varid'>t</span><span class='hs-layout'>,</span> <span class='hs-varid'>c</span> <span class='hs-varop'>`Reducer`</span> <span class='hs-varid'>a</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>Reducer</span> <span class='hs-varid'>c</span> <span class='hs-layout'>(</span><span class='hs-conid'>ParsecT</span> <span class='hs-varid'>s</span> <span class='hs-varid'>u</span> <span class='hs-varid'>m</span> <span class='hs-varid'>a</span><span class='hs-layout'>)</span> <span class='hs-keyword'>where</span>
-<a name="line-164"></a>    <span class='hs-varid'>unit</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>return</span> <span class='hs-varop'>.</span> <span class='hs-varid'>unit</span>
+<a name="line-58"></a><span class='hs-cpp'>#ifdef M_PARSEC</span>
+<a name="line-59"></a><span class='hs-keyword'>import</span> <span class='hs-conid'>Text</span><span class='hs-varop'>.</span><span class='hs-conid'>Parsec</span><span class='hs-varop'>.</span><span class='hs-conid'>Prim</span>
+<a name="line-60"></a><span class='hs-cpp'>#endif</span>
+<a name="line-61"></a>
+<a name="line-62"></a><a name="Reducer"></a><span class='hs-comment'>-- | This type may be best read infix. A @c `Reducer` m@ is a 'Monoid' @m@ that maps</span>
+<a name="line-63"></a><a name="Reducer"></a><span class='hs-comment'>-- values of type @c@ through @unit@ to values of type @m@. A @c@-'Reducer' may also</span>
+<a name="line-64"></a><a name="Reducer"></a><span class='hs-comment'>-- supply operations which tack-on another @c@ to an existing 'Monoid' @m@ on the left</span>
+<a name="line-65"></a><a name="Reducer"></a><span class='hs-comment'>-- or right. These specialized reductions may be more efficient in some scenarios</span>
+<a name="line-66"></a><a name="Reducer"></a><span class='hs-comment'>-- and are used when appropriate by a 'Generator'. The names 'cons' and 'snoc' work</span>
+<a name="line-67"></a><a name="Reducer"></a><span class='hs-comment'>-- by analogy to the synonymous operations in the list monoid.</span>
+<a name="line-68"></a><a name="Reducer"></a><span class='hs-comment'>--</span>
+<a name="line-69"></a><a name="Reducer"></a><span class='hs-comment'>-- This class deliberately avoids functional-dependencies, so that () can be a @c@-Reducer</span>
+<a name="line-70"></a><a name="Reducer"></a><span class='hs-comment'>-- for all @c@, and so many common reducers can work over multiple types, for instance,</span>
+<a name="line-71"></a><a name="Reducer"></a><span class='hs-comment'>-- First and Last may reduce both @a@ and 'Maybe' @a@. Since a 'Generator' has a fixed element</span>
+<a name="line-72"></a><a name="Reducer"></a><span class='hs-comment'>-- type, the input to the reducer is generally known and extracting from the monoid usually</span>
+<a name="line-73"></a><a name="Reducer"></a><span class='hs-comment'>-- is sufficient to fix the result type. Combinators are available for most scenarios where</span>
+<a name="line-74"></a><a name="Reducer"></a><span class='hs-comment'>-- this is not the case, and the few remaining cases can be handled by using an explicit </span>
+<a name="line-75"></a><a name="Reducer"></a><span class='hs-comment'>-- type annotation.</span>
+<a name="line-76"></a><a name="Reducer"></a><span class='hs-comment'>--</span>
+<a name="line-77"></a><a name="Reducer"></a><span class='hs-comment'>-- Minimal definition: 'unit' or 'snoc'</span>
+<a name="line-78"></a><a name="Reducer"></a><span class='hs-keyword'>class</span> <span class='hs-conid'>Monoid</span> <span class='hs-varid'>m</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>Reducer</span> <span class='hs-varid'>c</span> <span class='hs-varid'>m</span> <span class='hs-keyword'>where</span>
+<a name="line-79"></a>    <span class='hs-comment'>-- | Convert a value into a 'Monoid'</span>
+<a name="line-80"></a>    <span class='hs-varid'>unit</span> <span class='hs-keyglyph'>::</span> <span class='hs-varid'>c</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-varid'>m</span> 
+<a name="line-81"></a>    <span class='hs-comment'>-- | Append a value to a 'Monoid' for use in left-to-right reduction</span>
+<a name="line-82"></a>    <span class='hs-varid'>snoc</span> <span class='hs-keyglyph'>::</span> <span class='hs-varid'>m</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-varid'>c</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-varid'>m</span>
+<a name="line-83"></a>    <span class='hs-comment'>-- | Prepend a value onto a 'Monoid' for use during right-to-left reduction</span>
+<a name="line-84"></a>    <span class='hs-varid'>cons</span> <span class='hs-keyglyph'>::</span> <span class='hs-varid'>c</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-varid'>m</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-varid'>m</span> 
+<a name="line-85"></a>
+<a name="line-86"></a>    <span class='hs-varid'>unit</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>snoc</span> <span class='hs-varid'>mempty</span> 
+<a name="line-87"></a>    <span class='hs-varid'>snoc</span> <span class='hs-varid'>m</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>mappend</span> <span class='hs-varid'>m</span> <span class='hs-varop'>.</span> <span class='hs-varid'>unit</span>
+<a name="line-88"></a>    <span class='hs-varid'>cons</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>mappend</span> <span class='hs-varop'>.</span> <span class='hs-varid'>unit</span>
+<a name="line-89"></a>
+<a name="line-90"></a><a name="foldMapReduce"></a><span class='hs-comment'>-- | Apply a 'Reducer' to a 'Foldable' container, after mapping the contents into a suitable form for reduction.</span>
+<a name="line-91"></a><span class='hs-definition'>foldMapReduce</span> <span class='hs-keyglyph'>::</span> <span class='hs-layout'>(</span><span class='hs-conid'>Foldable</span> <span class='hs-varid'>f</span><span class='hs-layout'>,</span> <span class='hs-varid'>e</span> <span class='hs-varop'>`Reducer`</span> <span class='hs-varid'>m</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-layout'>(</span><span class='hs-varid'>a</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-varid'>e</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-varid'>f</span> <span class='hs-varid'>a</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-varid'>m</span>
+<a name="line-92"></a><span class='hs-definition'>foldMapReduce</span> <span class='hs-varid'>f</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>foldMap</span> <span class='hs-layout'>(</span><span class='hs-varid'>unit</span> <span class='hs-varop'>.</span> <span class='hs-varid'>f</span><span class='hs-layout'>)</span>
+<a name="line-93"></a>
+<a name="line-94"></a><a name="foldReduce"></a><span class='hs-comment'>-- | Apply a 'Reducer' to a 'Foldable' mapping each element through 'unit'</span>
+<a name="line-95"></a><span class='hs-definition'>foldReduce</span> <span class='hs-keyglyph'>::</span> <span class='hs-layout'>(</span><span class='hs-conid'>Foldable</span> <span class='hs-varid'>f</span><span class='hs-layout'>,</span> <span class='hs-varid'>e</span> <span class='hs-varop'>`Reducer`</span> <span class='hs-varid'>m</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-varid'>f</span> <span class='hs-varid'>e</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-varid'>m</span>
+<a name="line-96"></a><span class='hs-definition'>foldReduce</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>foldMap</span> <span class='hs-varid'>unit</span>
+<a name="line-97"></a>
+<a name="line-98"></a><a name="returnUnit"></a><span class='hs-definition'>returnUnit</span> <span class='hs-keyglyph'>::</span> <span class='hs-layout'>(</span><span class='hs-conid'>Monad</span> <span class='hs-varid'>m</span><span class='hs-layout'>,</span> <span class='hs-varid'>c</span> <span class='hs-varop'>`Reducer`</span> <span class='hs-varid'>n</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-varid'>c</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-varid'>m</span> <span class='hs-varid'>n</span> 
+<a name="line-99"></a><span class='hs-definition'>returnUnit</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>return</span> <span class='hs-varop'>.</span> <span class='hs-varid'>unit</span>
+<a name="line-100"></a>
+<a name="line-101"></a><a name="pureUnit"></a><span class='hs-definition'>pureUnit</span> <span class='hs-keyglyph'>::</span> <span class='hs-layout'>(</span><span class='hs-conid'>Applicative</span> <span class='hs-varid'>f</span><span class='hs-layout'>,</span> <span class='hs-varid'>c</span> <span class='hs-varop'>`Reducer`</span> <span class='hs-varid'>n</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-varid'>c</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-varid'>f</span> <span class='hs-varid'>n</span>
+<a name="line-102"></a><span class='hs-definition'>pureUnit</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>pure</span> <span class='hs-varop'>.</span> <span class='hs-varid'>unit</span>
+<a name="line-103"></a>
+<a name="line-104"></a><span class='hs-keyword'>instance</span> <span class='hs-layout'>(</span><span class='hs-conid'>Reducer</span> <span class='hs-varid'>c</span> <span class='hs-varid'>m</span><span class='hs-layout'>,</span> <span class='hs-conid'>Reducer</span> <span class='hs-varid'>c</span> <span class='hs-varid'>n</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>Reducer</span> <span class='hs-varid'>c</span> <span class='hs-layout'>(</span><span class='hs-varid'>m</span><span class='hs-layout'>,</span><span class='hs-varid'>n</span><span class='hs-layout'>)</span> <span class='hs-keyword'>where</span>
+<a name="line-105"></a>    <span class='hs-varid'>unit</span> <span class='hs-varid'>x</span> <span class='hs-keyglyph'>=</span> <span class='hs-layout'>(</span><span class='hs-varid'>unit</span> <span class='hs-varid'>x</span><span class='hs-layout'>,</span><span class='hs-varid'>unit</span> <span class='hs-varid'>x</span><span class='hs-layout'>)</span>
+<a name="line-106"></a>    <span class='hs-layout'>(</span><span class='hs-varid'>m</span><span class='hs-layout'>,</span><span class='hs-varid'>n</span><span class='hs-layout'>)</span> <span class='hs-varop'>`snoc`</span> <span class='hs-varid'>x</span> <span class='hs-keyglyph'>=</span> <span class='hs-layout'>(</span><span class='hs-varid'>m</span> <span class='hs-varop'>`snoc`</span> <span class='hs-varid'>x</span><span class='hs-layout'>,</span> <span class='hs-varid'>n</span> <span class='hs-varop'>`snoc`</span> <span class='hs-varid'>x</span><span class='hs-layout'>)</span>
+<a name="line-107"></a>    <span class='hs-varid'>x</span> <span class='hs-varop'>`cons`</span> <span class='hs-layout'>(</span><span class='hs-varid'>m</span><span class='hs-layout'>,</span><span class='hs-varid'>n</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=</span> <span class='hs-layout'>(</span><span class='hs-varid'>x</span> <span class='hs-varop'>`cons`</span> <span class='hs-varid'>m</span><span class='hs-layout'>,</span> <span class='hs-varid'>x</span> <span class='hs-varop'>`cons`</span> <span class='hs-varid'>n</span><span class='hs-layout'>)</span>
+<a name="line-108"></a>
+<a name="line-109"></a><span class='hs-keyword'>instance</span> <span class='hs-layout'>(</span><span class='hs-conid'>Reducer</span> <span class='hs-varid'>c</span> <span class='hs-varid'>m</span><span class='hs-layout'>,</span> <span class='hs-conid'>Reducer</span> <span class='hs-varid'>c</span> <span class='hs-varid'>n</span><span class='hs-layout'>,</span> <span class='hs-conid'>Reducer</span> <span class='hs-varid'>c</span> <span class='hs-varid'>o</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>Reducer</span> <span class='hs-varid'>c</span> <span class='hs-layout'>(</span><span class='hs-varid'>m</span><span class='hs-layout'>,</span><span class='hs-varid'>n</span><span class='hs-layout'>,</span><span class='hs-varid'>o</span><span class='hs-layout'>)</span> <span class='hs-keyword'>where</span>
+<a name="line-110"></a>    <span class='hs-varid'>unit</span> <span class='hs-varid'>x</span> <span class='hs-keyglyph'>=</span> <span class='hs-layout'>(</span><span class='hs-varid'>unit</span> <span class='hs-varid'>x</span><span class='hs-layout'>,</span><span class='hs-varid'>unit</span> <span class='hs-varid'>x</span><span class='hs-layout'>,</span> <span class='hs-varid'>unit</span> <span class='hs-varid'>x</span><span class='hs-layout'>)</span>
+<a name="line-111"></a>    <span class='hs-layout'>(</span><span class='hs-varid'>m</span><span class='hs-layout'>,</span><span class='hs-varid'>n</span><span class='hs-layout'>,</span><span class='hs-varid'>o</span><span class='hs-layout'>)</span> <span class='hs-varop'>`snoc`</span> <span class='hs-varid'>x</span> <span class='hs-keyglyph'>=</span> <span class='hs-layout'>(</span><span class='hs-varid'>m</span> <span class='hs-varop'>`snoc`</span> <span class='hs-varid'>x</span><span class='hs-layout'>,</span> <span class='hs-varid'>n</span> <span class='hs-varop'>`snoc`</span> <span class='hs-varid'>x</span><span class='hs-layout'>,</span> <span class='hs-varid'>o</span> <span class='hs-varop'>`snoc`</span> <span class='hs-varid'>x</span><span class='hs-layout'>)</span>
+<a name="line-112"></a>    <span class='hs-varid'>x</span> <span class='hs-varop'>`cons`</span> <span class='hs-layout'>(</span><span class='hs-varid'>m</span><span class='hs-layout'>,</span><span class='hs-varid'>n</span><span class='hs-layout'>,</span><span class='hs-varid'>o</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=</span> <span class='hs-layout'>(</span><span class='hs-varid'>x</span> <span class='hs-varop'>`cons`</span> <span class='hs-varid'>m</span><span class='hs-layout'>,</span> <span class='hs-varid'>x</span> <span class='hs-varop'>`cons`</span> <span class='hs-varid'>n</span><span class='hs-layout'>,</span> <span class='hs-varid'>x</span> <span class='hs-varop'>`cons`</span> <span class='hs-varid'>o</span><span class='hs-layout'>)</span>
+<a name="line-113"></a>
+<a name="line-114"></a><span class='hs-keyword'>instance</span> <span class='hs-layout'>(</span><span class='hs-conid'>Reducer</span> <span class='hs-varid'>c</span> <span class='hs-varid'>m</span><span class='hs-layout'>,</span> <span class='hs-conid'>Reducer</span> <span class='hs-varid'>c</span> <span class='hs-varid'>n</span><span class='hs-layout'>,</span> <span class='hs-conid'>Reducer</span> <span class='hs-varid'>c</span> <span class='hs-varid'>o</span><span class='hs-layout'>,</span> <span class='hs-conid'>Reducer</span> <span class='hs-varid'>c</span> <span class='hs-varid'>p</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>Reducer</span> <span class='hs-varid'>c</span> <span class='hs-layout'>(</span><span class='hs-varid'>m</span><span class='hs-layout'>,</span><span class='hs-varid'>n</span><span class='hs-layout'>,</span><span class='hs-varid'>o</span><span class='hs-layout'>,</span><span class='hs-varid'>p</span><span class='hs-layout'>)</span> <span class='hs-keyword'>where</span>
+<a name="line-115"></a>    <span class='hs-varid'>unit</span> <span class='hs-varid'>x</span> <span class='hs-keyglyph'>=</span> <span class='hs-layout'>(</span><span class='hs-varid'>unit</span> <span class='hs-varid'>x</span><span class='hs-layout'>,</span><span class='hs-varid'>unit</span> <span class='hs-varid'>x</span><span class='hs-layout'>,</span> <span class='hs-varid'>unit</span> <span class='hs-varid'>x</span><span class='hs-layout'>,</span> <span class='hs-varid'>unit</span> <span class='hs-varid'>x</span><span class='hs-layout'>)</span>
+<a name="line-116"></a>    <span class='hs-layout'>(</span><span class='hs-varid'>m</span><span class='hs-layout'>,</span><span class='hs-varid'>n</span><span class='hs-layout'>,</span><span class='hs-varid'>o</span><span class='hs-layout'>,</span><span class='hs-varid'>p</span><span class='hs-layout'>)</span> <span class='hs-varop'>`snoc`</span> <span class='hs-varid'>x</span> <span class='hs-keyglyph'>=</span> <span class='hs-layout'>(</span><span class='hs-varid'>m</span> <span class='hs-varop'>`snoc`</span> <span class='hs-varid'>x</span><span class='hs-layout'>,</span> <span class='hs-varid'>n</span> <span class='hs-varop'>`snoc`</span> <span class='hs-varid'>x</span><span class='hs-layout'>,</span> <span class='hs-varid'>o</span> <span class='hs-varop'>`snoc`</span> <span class='hs-varid'>x</span><span class='hs-layout'>,</span> <span class='hs-varid'>p</span> <span class='hs-varop'>`snoc`</span> <span class='hs-varid'>x</span><span class='hs-layout'>)</span>
+<a name="line-117"></a>    <span class='hs-varid'>x</span> <span class='hs-varop'>`cons`</span> <span class='hs-layout'>(</span><span class='hs-varid'>m</span><span class='hs-layout'>,</span><span class='hs-varid'>n</span><span class='hs-layout'>,</span><span class='hs-varid'>o</span><span class='hs-layout'>,</span><span class='hs-varid'>p</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=</span> <span class='hs-layout'>(</span><span class='hs-varid'>x</span> <span class='hs-varop'>`cons`</span> <span class='hs-varid'>m</span><span class='hs-layout'>,</span> <span class='hs-varid'>x</span> <span class='hs-varop'>`cons`</span> <span class='hs-varid'>n</span><span class='hs-layout'>,</span> <span class='hs-varid'>x</span> <span class='hs-varop'>`cons`</span> <span class='hs-varid'>o</span><span class='hs-layout'>,</span> <span class='hs-varid'>x</span> <span class='hs-varop'>`cons`</span> <span class='hs-varid'>p</span><span class='hs-layout'>)</span>
+<a name="line-118"></a>
+<a name="line-119"></a><span class='hs-keyword'>instance</span> <span class='hs-conid'>Reducer</span> <span class='hs-varid'>c</span> <span class='hs-keyglyph'>[</span><span class='hs-varid'>c</span><span class='hs-keyglyph'>]</span> <span class='hs-keyword'>where</span>
+<a name="line-120"></a>    <span class='hs-varid'>unit</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>return</span>
+<a name="line-121"></a>    <span class='hs-varid'>cons</span> <span class='hs-keyglyph'>=</span> <span class='hs-layout'>(</span><span class='hs-conop'>:</span><span class='hs-layout'>)</span>
+<a name="line-122"></a>    <span class='hs-varid'>xs</span> <span class='hs-varop'>`snoc`</span> <span class='hs-varid'>x</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>xs</span> <span class='hs-varop'>++</span> <span class='hs-keyglyph'>[</span><span class='hs-varid'>x</span><span class='hs-keyglyph'>]</span>
+<a name="line-123"></a>
+<a name="line-124"></a><span class='hs-keyword'>instance</span> <span class='hs-conid'>Reducer</span> <span class='hs-varid'>c</span> <span class='hs-conid'>()</span> <span class='hs-keyword'>where</span>
+<a name="line-125"></a>    <span class='hs-varid'>unit</span> <span class='hs-keyword'>_</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>()</span>
+<a name="line-126"></a>    <span class='hs-keyword'>_</span> <span class='hs-varop'>`snoc`</span> <span class='hs-keyword'>_</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>()</span>
+<a name="line-127"></a>    <span class='hs-keyword'>_</span> <span class='hs-varop'>`cons`</span> <span class='hs-keyword'>_</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>()</span>
+<a name="line-128"></a>
+<a name="line-129"></a><span class='hs-keyword'>instance</span> <span class='hs-conid'>Reducer</span> <span class='hs-conid'>Bool</span> <span class='hs-conid'>Any</span> <span class='hs-keyword'>where</span>
+<a name="line-130"></a>    <span class='hs-varid'>unit</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>Any</span>
+<a name="line-131"></a>
+<a name="line-132"></a><span class='hs-keyword'>instance</span> <span class='hs-conid'>Reducer</span> <span class='hs-conid'>Bool</span> <span class='hs-conid'>All</span> <span class='hs-keyword'>where</span>
+<a name="line-133"></a>    <span class='hs-varid'>unit</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>All</span>
+<a name="line-134"></a>
+<a name="line-135"></a><span class='hs-keyword'>instance</span> <span class='hs-conid'>Reducer</span> <span class='hs-layout'>(</span><span class='hs-varid'>a</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-varid'>a</span><span class='hs-layout'>)</span> <span class='hs-layout'>(</span><span class='hs-conid'>Endo</span> <span class='hs-varid'>a</span><span class='hs-layout'>)</span> <span class='hs-keyword'>where</span>
+<a name="line-136"></a>    <span class='hs-varid'>unit</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>Endo</span>
+<a name="line-137"></a>
+<a name="line-138"></a><span class='hs-keyword'>instance</span> <span class='hs-conid'>Monoid</span> <span class='hs-varid'>a</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>Reducer</span> <span class='hs-varid'>a</span> <span class='hs-layout'>(</span><span class='hs-conid'>Dual</span> <span class='hs-varid'>a</span><span class='hs-layout'>)</span> <span class='hs-keyword'>where</span>
+<a name="line-139"></a>    <span class='hs-varid'>unit</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>Dual</span>
+<a name="line-140"></a>    
+<a name="line-141"></a><span class='hs-keyword'>instance</span> <span class='hs-conid'>Num</span> <span class='hs-varid'>a</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>Reducer</span> <span class='hs-varid'>a</span> <span class='hs-layout'>(</span><span class='hs-conid'>Sum</span> <span class='hs-varid'>a</span><span class='hs-layout'>)</span> <span class='hs-keyword'>where</span>
+<a name="line-142"></a>    <span class='hs-varid'>unit</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>Sum</span>
+<a name="line-143"></a>
+<a name="line-144"></a><span class='hs-keyword'>instance</span> <span class='hs-conid'>Num</span> <span class='hs-varid'>a</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>Reducer</span> <span class='hs-varid'>a</span> <span class='hs-layout'>(</span><span class='hs-conid'>Product</span> <span class='hs-varid'>a</span><span class='hs-layout'>)</span> <span class='hs-keyword'>where</span>
+<a name="line-145"></a>    <span class='hs-varid'>unit</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>Product</span>
+<a name="line-146"></a>
+<a name="line-147"></a><span class='hs-keyword'>instance</span> <span class='hs-conid'>Reducer</span> <span class='hs-layout'>(</span><span class='hs-conid'>Maybe</span> <span class='hs-varid'>a</span><span class='hs-layout'>)</span> <span class='hs-layout'>(</span><span class='hs-conid'>First</span> <span class='hs-varid'>a</span><span class='hs-layout'>)</span> <span class='hs-keyword'>where</span>
+<a name="line-148"></a>    <span class='hs-varid'>unit</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>First</span>
+<a name="line-149"></a>
+<a name="line-150"></a><span class='hs-keyword'>instance</span> <span class='hs-conid'>Reducer</span> <span class='hs-varid'>a</span> <span class='hs-layout'>(</span><span class='hs-conid'>First</span> <span class='hs-varid'>a</span><span class='hs-layout'>)</span> <span class='hs-keyword'>where</span>
+<a name="line-151"></a>    <span class='hs-varid'>unit</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>First</span> <span class='hs-varop'>.</span> <span class='hs-conid'>Just</span>
+<a name="line-152"></a>
+<a name="line-153"></a><span class='hs-keyword'>instance</span> <span class='hs-conid'>Reducer</span> <span class='hs-layout'>(</span><span class='hs-conid'>Maybe</span> <span class='hs-varid'>a</span><span class='hs-layout'>)</span> <span class='hs-layout'>(</span><span class='hs-conid'>Last</span> <span class='hs-varid'>a</span><span class='hs-layout'>)</span> <span class='hs-keyword'>where</span>
+<a name="line-154"></a>    <span class='hs-varid'>unit</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>Last</span>
+<a name="line-155"></a>
+<a name="line-156"></a><span class='hs-keyword'>instance</span> <span class='hs-conid'>Reducer</span> <span class='hs-varid'>a</span> <span class='hs-layout'>(</span><span class='hs-conid'>Last</span> <span class='hs-varid'>a</span><span class='hs-layout'>)</span> <span class='hs-keyword'>where</span>
+<a name="line-157"></a>    <span class='hs-varid'>unit</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>Last</span> <span class='hs-varop'>.</span> <span class='hs-conid'>Just</span>
+<a name="line-158"></a>
+<a name="line-159"></a><span class='hs-cpp'>#ifdef M_FINGERTREE</span>
+<a name="line-160"></a><span class='hs-keyword'>instance</span> <span class='hs-conid'>Measured</span> <span class='hs-varid'>v</span> <span class='hs-varid'>a</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>Reducer</span> <span class='hs-varid'>a</span> <span class='hs-layout'>(</span><span class='hs-conid'>FingerTree</span> <span class='hs-varid'>v</span> <span class='hs-varid'>a</span><span class='hs-layout'>)</span> <span class='hs-keyword'>where</span>
+<a name="line-161"></a>    <span class='hs-varid'>unit</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>singleton</span>
+<a name="line-162"></a>    <span class='hs-varid'>cons</span> <span class='hs-keyglyph'>=</span> <span class='hs-layout'>(</span><span class='hs-varop'>&lt;|</span><span class='hs-layout'>)</span>
+<a name="line-163"></a>    <span class='hs-varid'>snoc</span> <span class='hs-keyglyph'>=</span> <span class='hs-layout'>(</span><span class='hs-varop'>|&gt;</span><span class='hs-layout'>)</span> 
+<a name="line-164"></a><span class='hs-cpp'>#endif</span>
hunk ./doc/html/monoids/src/Data-Monoid-Reducer.html 174
-<a name="line-166"></a><span class='hs-keyword'>instance</span> <span class='hs-conid'>Reducer</span> <span class='hs-varid'>a</span> <span class='hs-layout'>(</span><span class='hs-conid'>Seq</span> <span class='hs-varid'>a</span><span class='hs-layout'>)</span> <span class='hs-keyword'>where</span>
-<a name="line-167"></a>    <span class='hs-varid'>unit</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>Seq</span><span class='hs-varop'>.</span><span class='hs-varid'>singleton</span>
-<a name="line-168"></a>    <span class='hs-varid'>cons</span> <span class='hs-keyglyph'>=</span> <span class='hs-layout'>(</span><span class='hs-conid'>Seq</span><span class='hs-varop'>.&lt;|</span><span class='hs-layout'>)</span>
-<a name="line-169"></a>    <span class='hs-varid'>snoc</span> <span class='hs-keyglyph'>=</span> <span class='hs-layout'>(</span><span class='hs-conid'>Seq</span><span class='hs-varop'>.|&gt;</span><span class='hs-layout'>)</span>
+<a name="line-166"></a><span class='hs-cpp'>#ifdef M_PARSEC</span>
+<a name="line-167"></a><span class='hs-keyword'>instance</span> <span class='hs-layout'>(</span><span class='hs-conid'>Stream</span> <span class='hs-varid'>s</span> <span class='hs-varid'>m</span> <span class='hs-varid'>t</span><span class='hs-layout'>,</span> <span class='hs-varid'>c</span> <span class='hs-varop'>`Reducer`</span> <span class='hs-varid'>a</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>Reducer</span> <span class='hs-varid'>c</span> <span class='hs-layout'>(</span><span class='hs-conid'>ParsecT</span> <span class='hs-varid'>s</span> <span class='hs-varid'>u</span> <span class='hs-varid'>m</span> <span class='hs-varid'>a</span><span class='hs-layout'>)</span> <span class='hs-keyword'>where</span>
+<a name="line-168"></a>    <span class='hs-varid'>unit</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>return</span> <span class='hs-varop'>.</span> <span class='hs-varid'>unit</span>
+<a name="line-169"></a><span class='hs-cpp'>#endif</span>
hunk ./doc/html/monoids/src/Data-Monoid-Reducer.html 179
-<a name="line-171"></a><span class='hs-keyword'>instance</span> <span class='hs-conid'>Reducer</span> <span class='hs-conid'>Int</span> <span class='hs-conid'>IntSet</span> <span class='hs-keyword'>where</span>
-<a name="line-172"></a>    <span class='hs-varid'>unit</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>IntSet</span><span class='hs-varop'>.</span><span class='hs-varid'>singleton</span>
-<a name="line-173"></a>    <span class='hs-varid'>cons</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>IntSet</span><span class='hs-varop'>.</span><span class='hs-varid'>insert</span>
-<a name="line-174"></a>    <span class='hs-varid'>snoc</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>flip</span> <span class='hs-conid'>IntSet</span><span class='hs-varop'>.</span><span class='hs-varid'>insert</span> <span class='hs-comment'>-- left bias irrelevant</span>
-<a name="line-175"></a>
-<a name="line-176"></a><span class='hs-keyword'>instance</span> <span class='hs-conid'>Ord</span> <span class='hs-varid'>a</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>Reducer</span> <span class='hs-varid'>a</span> <span class='hs-layout'>(</span><span class='hs-conid'>Set</span> <span class='hs-varid'>a</span><span class='hs-layout'>)</span> <span class='hs-keyword'>where</span>
-<a name="line-177"></a>    <span class='hs-varid'>unit</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>Set</span><span class='hs-varop'>.</span><span class='hs-varid'>singleton</span>
-<a name="line-178"></a>    <span class='hs-varid'>cons</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>Set</span><span class='hs-varop'>.</span><span class='hs-varid'>insert</span>
-<a name="line-179"></a>    <span class='hs-comment'>-- pedantic about order in case 'Eq' doesn't implement structural equality</span>
-<a name="line-180"></a>    <span class='hs-varid'>snoc</span> <span class='hs-varid'>s</span> <span class='hs-varid'>m</span> <span class='hs-keyglyph'>|</span> <span class='hs-conid'>Set</span><span class='hs-varop'>.</span><span class='hs-varid'>member</span> <span class='hs-varid'>m</span> <span class='hs-varid'>s</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>s</span> 
-<a name="line-181"></a>             <span class='hs-keyglyph'>|</span> <span class='hs-varid'>otherwise</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>Set</span><span class='hs-varop'>.</span><span class='hs-varid'>insert</span> <span class='hs-varid'>m</span> <span class='hs-varid'>s</span>
-<a name="line-182"></a>
-<a name="line-183"></a><span class='hs-keyword'>instance</span> <span class='hs-conid'>Reducer</span> <span class='hs-layout'>(</span><span class='hs-conid'>Int</span><span class='hs-layout'>,</span><span class='hs-varid'>v</span><span class='hs-layout'>)</span> <span class='hs-layout'>(</span><span class='hs-conid'>IntMap</span> <span class='hs-varid'>v</span><span class='hs-layout'>)</span> <span class='hs-keyword'>where</span>
-<a name="line-184"></a>    <span class='hs-varid'>unit</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>uncurry</span> <span class='hs-conid'>IntMap</span><span class='hs-varop'>.</span><span class='hs-varid'>singleton</span>
-<a name="line-185"></a>    <span class='hs-varid'>cons</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>uncurry</span> <span class='hs-conid'>IntMap</span><span class='hs-varop'>.</span><span class='hs-varid'>insert</span>
-<a name="line-186"></a>    <span class='hs-varid'>snoc</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>flip</span> <span class='hs-varop'>.</span> <span class='hs-varid'>uncurry</span> <span class='hs-varop'>.</span> <span class='hs-conid'>IntMap</span><span class='hs-varop'>.</span><span class='hs-varid'>insertWith</span> <span class='hs-varop'>$</span> <span class='hs-varid'>const</span> <span class='hs-varid'>id</span>
-<a name="line-187"></a>
-<a name="line-188"></a><span class='hs-keyword'>instance</span> <span class='hs-conid'>Ord</span> <span class='hs-varid'>k</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>Reducer</span> <span class='hs-layout'>(</span><span class='hs-varid'>k</span><span class='hs-layout'>,</span><span class='hs-varid'>v</span><span class='hs-layout'>)</span> <span class='hs-layout'>(</span><span class='hs-conid'>Map</span> <span class='hs-varid'>k</span> <span class='hs-varid'>v</span><span class='hs-layout'>)</span> <span class='hs-keyword'>where</span>
-<a name="line-189"></a>    <span class='hs-varid'>unit</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>uncurry</span> <span class='hs-conid'>Map</span><span class='hs-varop'>.</span><span class='hs-varid'>singleton</span>
-<a name="line-190"></a>    <span class='hs-varid'>cons</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>uncurry</span> <span class='hs-conid'>Map</span><span class='hs-varop'>.</span><span class='hs-varid'>insert</span>
-<a name="line-191"></a>    <span class='hs-varid'>snoc</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>flip</span> <span class='hs-varop'>.</span> <span class='hs-varid'>uncurry</span> <span class='hs-varop'>.</span> <span class='hs-conid'>Map</span><span class='hs-varop'>.</span><span class='hs-varid'>insertWith</span> <span class='hs-varop'>$</span> <span class='hs-varid'>const</span> <span class='hs-varid'>id</span>
-<a name="line-192"></a>
-<a name="line-193"></a><span class='hs-comment'>{-
-<a name="line-194"></a>instance Enum a =&gt; Reducer a (BitSet a) where
-<a name="line-195"></a>    unit m = BitSet.insert m BitSet.empty
-<a name="line-196"></a>-}</span>
-<a name="line-197"></a>
-<a name="line-198"></a><span class='hs-keyword'>data</span> <span class='hs-layout'>(</span><span class='hs-varid'>m</span> <span class='hs-varop'>`ReducedBy`</span> <span class='hs-varid'>s</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>Reduction</span> <span class='hs-layout'>{</span> <span class='hs-varid'>getReduction</span> <span class='hs-keyglyph'>::</span> <span class='hs-varid'>m</span> <span class='hs-layout'>}</span> 
+<a name="line-171"></a><span class='hs-cpp'>#ifdef M_CONTAINERS</span>
+<a name="line-172"></a><span class='hs-keyword'>instance</span> <span class='hs-conid'>Reducer</span> <span class='hs-varid'>a</span> <span class='hs-layout'>(</span><span class='hs-conid'>Seq</span> <span class='hs-varid'>a</span><span class='hs-layout'>)</span> <span class='hs-keyword'>where</span>
+<a name="line-173"></a>    <span class='hs-varid'>unit</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>Seq</span><span class='hs-varop'>.</span><span class='hs-varid'>singleton</span>
+<a name="line-174"></a>    <span class='hs-varid'>cons</span> <span class='hs-keyglyph'>=</span> <span class='hs-layout'>(</span><span class='hs-conid'>Seq</span><span class='hs-varop'>.&lt;|</span><span class='hs-layout'>)</span>
+<a name="line-175"></a>    <span class='hs-varid'>snoc</span> <span class='hs-keyglyph'>=</span> <span class='hs-layout'>(</span><span class='hs-conid'>Seq</span><span class='hs-varop'>.|&gt;</span><span class='hs-layout'>)</span>
+<a name="line-176"></a>
+<a name="line-177"></a><span class='hs-keyword'>instance</span> <span class='hs-conid'>Reducer</span> <span class='hs-conid'>Int</span> <span class='hs-conid'>IntSet</span> <span class='hs-keyword'>where</span>
+<a name="line-178"></a>    <span class='hs-varid'>unit</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>IntSet</span><span class='hs-varop'>.</span><span class='hs-varid'>singleton</span>
+<a name="line-179"></a>    <span class='hs-varid'>cons</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>IntSet</span><span class='hs-varop'>.</span><span class='hs-varid'>insert</span>
+<a name="line-180"></a>    <span class='hs-varid'>snoc</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>flip</span> <span class='hs-conid'>IntSet</span><span class='hs-varop'>.</span><span class='hs-varid'>insert</span> <span class='hs-comment'>-- left bias irrelevant</span>
+<a name="line-181"></a>
+<a name="line-182"></a><span class='hs-keyword'>instance</span> <span class='hs-conid'>Ord</span> <span class='hs-varid'>a</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>Reducer</span> <span class='hs-varid'>a</span> <span class='hs-layout'>(</span><span class='hs-conid'>Set</span> <span class='hs-varid'>a</span><span class='hs-layout'>)</span> <span class='hs-keyword'>where</span>
+<a name="line-183"></a>    <span class='hs-varid'>unit</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>Set</span><span class='hs-varop'>.</span><span class='hs-varid'>singleton</span>
+<a name="line-184"></a>    <span class='hs-varid'>cons</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>Set</span><span class='hs-varop'>.</span><span class='hs-varid'>insert</span>
+<a name="line-185"></a>    <span class='hs-comment'>-- pedantic about order in case 'Eq' doesn't implement structural equality</span>
+<a name="line-186"></a>    <span class='hs-varid'>snoc</span> <span class='hs-varid'>s</span> <span class='hs-varid'>m</span> <span class='hs-keyglyph'>|</span> <span class='hs-conid'>Set</span><span class='hs-varop'>.</span><span class='hs-varid'>member</span> <span class='hs-varid'>m</span> <span class='hs-varid'>s</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>s</span> 
+<a name="line-187"></a>             <span class='hs-keyglyph'>|</span> <span class='hs-varid'>otherwise</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>Set</span><span class='hs-varop'>.</span><span class='hs-varid'>insert</span> <span class='hs-varid'>m</span> <span class='hs-varid'>s</span>
+<a name="line-188"></a>
+<a name="line-189"></a><span class='hs-keyword'>instance</span> <span class='hs-conid'>Reducer</span> <span class='hs-layout'>(</span><span class='hs-conid'>Int</span><span class='hs-layout'>,</span><span class='hs-varid'>v</span><span class='hs-layout'>)</span> <span class='hs-layout'>(</span><span class='hs-conid'>IntMap</span> <span class='hs-varid'>v</span><span class='hs-layout'>)</span> <span class='hs-keyword'>where</span>
+<a name="line-190"></a>    <span class='hs-varid'>unit</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>uncurry</span> <span class='hs-conid'>IntMap</span><span class='hs-varop'>.</span><span class='hs-varid'>singleton</span>
+<a name="line-191"></a>    <span class='hs-varid'>cons</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>uncurry</span> <span class='hs-conid'>IntMap</span><span class='hs-varop'>.</span><span class='hs-varid'>insert</span>
+<a name="line-192"></a>    <span class='hs-varid'>snoc</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>flip</span> <span class='hs-varop'>.</span> <span class='hs-varid'>uncurry</span> <span class='hs-varop'>.</span> <span class='hs-conid'>IntMap</span><span class='hs-varop'>.</span><span class='hs-varid'>insertWith</span> <span class='hs-varop'>$</span> <span class='hs-varid'>const</span> <span class='hs-varid'>id</span>
+<a name="line-193"></a>
+<a name="line-194"></a><span class='hs-keyword'>instance</span> <span class='hs-conid'>Ord</span> <span class='hs-varid'>k</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>Reducer</span> <span class='hs-layout'>(</span><span class='hs-varid'>k</span><span class='hs-layout'>,</span><span class='hs-varid'>v</span><span class='hs-layout'>)</span> <span class='hs-layout'>(</span><span class='hs-conid'>Map</span> <span class='hs-varid'>k</span> <span class='hs-varid'>v</span><span class='hs-layout'>)</span> <span class='hs-keyword'>where</span>
+<a name="line-195"></a>    <span class='hs-varid'>unit</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>uncurry</span> <span class='hs-conid'>Map</span><span class='hs-varop'>.</span><span class='hs-varid'>singleton</span>
+<a name="line-196"></a>    <span class='hs-varid'>cons</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>uncurry</span> <span class='hs-conid'>Map</span><span class='hs-varop'>.</span><span class='hs-varid'>insert</span>
+<a name="line-197"></a>    <span class='hs-varid'>snoc</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>flip</span> <span class='hs-varop'>.</span> <span class='hs-varid'>uncurry</span> <span class='hs-varop'>.</span> <span class='hs-conid'>Map</span><span class='hs-varop'>.</span><span class='hs-varid'>insertWith</span> <span class='hs-varop'>$</span> <span class='hs-varid'>const</span> <span class='hs-varid'>id</span>
+<a name="line-198"></a><span class='hs-cpp'>#endif</span>
hunk ./doc/html/monoids/src/Data-Monoid-Reducer.html 208
-<a name="line-200"></a><span class='hs-keyword'>instance</span> <span class='hs-conid'>Monoid</span> <span class='hs-varid'>m</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>Monoid</span> <span class='hs-layout'>(</span><span class='hs-varid'>m</span> <span class='hs-varop'>`ReducedBy`</span> <span class='hs-varid'>s</span><span class='hs-layout'>)</span> <span class='hs-keyword'>where</span>
-<a name="line-201"></a>    <span class='hs-varid'>mempty</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>Reduction</span> <span class='hs-varid'>mempty</span>
-<a name="line-202"></a>    <span class='hs-conid'>Reduction</span> <span class='hs-varid'>a</span> <span class='hs-varop'>`mappend`</span> <span class='hs-conid'>Reduction</span> <span class='hs-varid'>b</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>Reduction</span> <span class='hs-layout'>(</span><span class='hs-varid'>a</span> <span class='hs-varop'>`mappend`</span> <span class='hs-varid'>b</span><span class='hs-layout'>)</span>
-<a name="line-203"></a>
-<a name="line-204"></a><span class='hs-keyword'>instance</span> <span class='hs-layout'>(</span><span class='hs-varid'>s</span> <span class='hs-varop'>`Reflects`</span> <span class='hs-layout'>(</span><span class='hs-varid'>a</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-varid'>m</span><span class='hs-layout'>)</span><span class='hs-layout'>,</span> <span class='hs-conid'>Monoid</span> <span class='hs-varid'>m</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>Reducer</span> <span class='hs-varid'>a</span> <span class='hs-layout'>(</span><span class='hs-varid'>m</span> <span class='hs-varop'>`ReducedBy`</span> <span class='hs-varid'>s</span><span class='hs-layout'>)</span> <span class='hs-keyword'>where</span>
-<a name="line-205"></a>    <span class='hs-varid'>unit</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>Reduction</span> <span class='hs-varop'>.</span> <span class='hs-varid'>reflect</span> <span class='hs-layout'>(</span><span class='hs-varid'>undefined</span> <span class='hs-keyglyph'>::</span> <span class='hs-varid'>s</span><span class='hs-layout'>)</span>
+<a name="line-200"></a><span class='hs-cpp'>#ifdef M_REFLECTION</span>
+<a name="line-201"></a><span class='hs-keyword'>data</span> <span class='hs-layout'>(</span><span class='hs-varid'>m</span> <span class='hs-varop'>`ReducedBy`</span> <span class='hs-varid'>s</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>Reduction</span> <span class='hs-layout'>{</span> <span class='hs-varid'>getReduction</span> <span class='hs-keyglyph'>::</span> <span class='hs-varid'>m</span> <span class='hs-layout'>}</span> 
+<a name="line-202"></a>
+<a name="line-203"></a><span class='hs-keyword'>instance</span> <span class='hs-conid'>Monoid</span> <span class='hs-varid'>m</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>Monoid</span> <span class='hs-layout'>(</span><span class='hs-varid'>m</span> <span class='hs-varop'>`ReducedBy`</span> <span class='hs-varid'>s</span><span class='hs-layout'>)</span> <span class='hs-keyword'>where</span>
+<a name="line-204"></a>    <span class='hs-varid'>mempty</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>Reduction</span> <span class='hs-varid'>mempty</span>
+<a name="line-205"></a>    <span class='hs-conid'>Reduction</span> <span class='hs-varid'>a</span> <span class='hs-varop'>`mappend`</span> <span class='hs-conid'>Reduction</span> <span class='hs-varid'>b</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>Reduction</span> <span class='hs-layout'>(</span><span class='hs-varid'>a</span> <span class='hs-varop'>`mappend`</span> <span class='hs-varid'>b</span><span class='hs-layout'>)</span>
+<a name="line-206"></a>
+<a name="line-207"></a><span class='hs-keyword'>instance</span> <span class='hs-layout'>(</span><span class='hs-varid'>s</span> <span class='hs-varop'>`Reflects`</span> <span class='hs-layout'>(</span><span class='hs-varid'>a</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-varid'>m</span><span class='hs-layout'>)</span><span class='hs-layout'>,</span> <span class='hs-conid'>Monoid</span> <span class='hs-varid'>m</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>Reducer</span> <span class='hs-varid'>a</span> <span class='hs-layout'>(</span><span class='hs-varid'>m</span> <span class='hs-varop'>`ReducedBy`</span> <span class='hs-varid'>s</span><span class='hs-layout'>)</span> <span class='hs-keyword'>where</span>
+<a name="line-208"></a>    <span class='hs-varid'>unit</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>Reduction</span> <span class='hs-varop'>.</span> <span class='hs-varid'>reflect</span> <span class='hs-layout'>(</span><span class='hs-varid'>undefined</span> <span class='hs-keyglyph'>::</span> <span class='hs-varid'>s</span><span class='hs-layout'>)</span>
+<a name="line-209"></a><span class='hs-cpp'>#endif</span>
hunk ./doc/html/monoids/src/Data-Monoid-Sugar.html 1
+<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
+<html>
+<head>
+<!-- Generated by HsColour, http://www.cs.york.ac.uk/fp/darcs/hscolour/ -->
+<title>Data/Monoid/Sugar.hs</title>
+<link type='text/css' rel='stylesheet' href='hscolour.css' />
+</head>
+<body>
+<pre><a name="line-1"></a><span class='hs-comment'>-----------------------------------------------------------------------------</span>
+<a name="line-2"></a><span class='hs-comment'>-- |</span>
+<a name="line-3"></a><span class='hs-comment'>-- Module      :  Data.Monoid.Additive.Sugar</span>
+<a name="line-4"></a><span class='hs-comment'>-- Copyright   :  (c) Edward Kmett 2009</span>
+<a name="line-5"></a><span class='hs-comment'>-- License     :  BSD-style</span>
+<a name="line-6"></a><span class='hs-comment'>-- Maintainer  :  ekmett@gmail.com</span>
+<a name="line-7"></a><span class='hs-comment'>-- Stability   :  experimental</span>
+<a name="line-8"></a><span class='hs-comment'>-- Portability :  portable</span>
+<a name="line-9"></a><span class='hs-comment'>--</span>
+<a name="line-10"></a><span class='hs-comment'>-- Syntactic sugar for working with a 'Monoid' and 'Multiplicative' instances </span>
+<a name="line-11"></a><span class='hs-comment'>-- that conflicts with names from the "Prelude".</span>
+<a name="line-12"></a><span class='hs-comment'>--</span>
+<a name="line-13"></a><span class='hs-comment'>-- &gt; import Prelude hiding ((+),(*),(^))</span>
+<a name="line-14"></a><span class='hs-comment'>-- &gt; import Data.Monoid.Sugar</span>
+<a name="line-15"></a><span class='hs-comment'>--</span>
+<a name="line-16"></a><span class='hs-comment'>-----------------------------------------------------------------------------</span>
+<a name="line-17"></a><span class='hs-comment'>--</span>
+<a name="line-18"></a><span class='hs-keyword'>module</span> <span class='hs-conid'>Data</span><span class='hs-varop'>.</span><span class='hs-conid'>Monoid</span><span class='hs-varop'>.</span><span class='hs-conid'>Sugar</span>
+<a name="line-19"></a>    <span class='hs-layout'>(</span> <span class='hs-keyword'>module</span> <span class='hs-conid'>Data</span><span class='hs-varop'>.</span><span class='hs-conid'>Monoid</span><span class='hs-varop'>.</span><span class='hs-conid'>Multiplicative</span>
+<a name="line-20"></a>    <span class='hs-layout'>,</span> <span class='hs-keyword'>module</span> <span class='hs-conid'>Data</span><span class='hs-varop'>.</span><span class='hs-conid'>Ring</span><span class='hs-varop'>.</span><span class='hs-conid'>Semi</span><span class='hs-varop'>.</span><span class='hs-conid'>Natural</span>
+<a name="line-21"></a>    <span class='hs-layout'>,</span> <span class='hs-layout'>(</span><span class='hs-varop'>+</span><span class='hs-layout'>)</span>
+<a name="line-22"></a>    <span class='hs-layout'>,</span> <span class='hs-layout'>(</span><span class='hs-varop'>*</span><span class='hs-layout'>)</span>
+<a name="line-23"></a>    <span class='hs-layout'>,</span> <span class='hs-layout'>(</span><span class='hs-varop'>^</span><span class='hs-layout'>)</span>
+<a name="line-24"></a>    <span class='hs-layout'>)</span> <span class='hs-keyword'>where</span>
+<a name="line-25"></a>
+<a name="line-26"></a><span class='hs-keyword'>import</span> <span class='hs-conid'>Prelude</span> <span class='hs-varid'>hiding</span> <span class='hs-layout'>(</span><span class='hs-layout'>(</span><span class='hs-varop'>*</span><span class='hs-layout'>)</span><span class='hs-layout'>,</span><span class='hs-layout'>(</span><span class='hs-varop'>^</span><span class='hs-layout'>)</span><span class='hs-layout'>,</span><span class='hs-layout'>(</span><span class='hs-varop'>+</span><span class='hs-layout'>)</span><span class='hs-layout'>)</span>
+<a name="line-27"></a><span class='hs-keyword'>import</span> <span class='hs-conid'>Data</span><span class='hs-varop'>.</span><span class='hs-conid'>Monoid</span><span class='hs-varop'>.</span><span class='hs-conid'>Multiplicative</span>
+<a name="line-28"></a><span class='hs-keyword'>import</span> <span class='hs-conid'>Data</span><span class='hs-varop'>.</span><span class='hs-conid'>Ring</span><span class='hs-varop'>.</span><span class='hs-conid'>Semi</span><span class='hs-varop'>.</span><span class='hs-conid'>Natural</span>
+<a name="line-29"></a><span class='hs-keyword'>import</span> <span class='hs-keyword'>qualified</span> <span class='hs-conid'>Data</span><span class='hs-varop'>.</span><span class='hs-conid'>Monoid</span><span class='hs-varop'>.</span><span class='hs-conid'>Combinators</span> <span class='hs-keyword'>as</span> <span class='hs-conid'>Monoid</span>
+<a name="line-30"></a>
+<a name="line-31"></a><span class='hs-keyword'>infixl</span> <span class='hs-num'>6</span> <span class='hs-varop'>+</span> 
+<a name="line-32"></a><span class='hs-keyword'>infixl</span> <span class='hs-num'>7</span> <span class='hs-varop'>*</span>
+<a name="line-33"></a>
+<a name="line-34"></a><a name="+"></a><span class='hs-layout'>(</span><span class='hs-varop'>+</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>::</span> <span class='hs-conid'>Monoid</span> <span class='hs-varid'>m</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-varid'>m</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-varid'>m</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-varid'>m</span> 
+<a name="line-35"></a><span class='hs-layout'>(</span><span class='hs-varop'>+</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>mappend</span>
+<a name="line-36"></a>
+<a name="line-37"></a><a name="*"></a><span class='hs-layout'>(</span><span class='hs-varop'>*</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>::</span> <span class='hs-conid'>Multiplicative</span> <span class='hs-varid'>r</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-varid'>r</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-varid'>r</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-varid'>r</span>
+<a name="line-38"></a><span class='hs-layout'>(</span><span class='hs-varop'>*</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>times</span>
+<a name="line-39"></a>
+<a name="line-40"></a><a name="^"></a><span class='hs-layout'>(</span><span class='hs-varop'>^</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>::</span> <span class='hs-conid'>Multiplicative</span> <span class='hs-varid'>r</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-varid'>r</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-conid'>Natural</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-varid'>r</span>
+<a name="line-41"></a><a name="r"></a><span class='hs-definition'>r</span> <span class='hs-varop'>^</span> <span class='hs-varid'>n</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>getLog</span> <span class='hs-layout'>(</span><span class='hs-conid'>Monoid</span><span class='hs-varop'>.</span><span class='hs-varid'>replicate</span> <span class='hs-layout'>(</span><span class='hs-conid'>Log</span> <span class='hs-varid'>r</span><span class='hs-layout'>)</span> <span class='hs-varid'>n</span><span class='hs-layout'>)</span>
+</pre></body>
+</html>
hunk ./doc/html/monoids/src/Data-Ring-Boolean.html 20
-<a name="line-12"></a><span class='hs-comment'>-- A Boolean 'Ring' over 'Bool'. Note well that the 'mappend' of this ring is</span>
-<a name="line-13"></a><span class='hs-comment'>-- symmetric difference and not disjunction like you might expect. To get that </span>
-<a name="line-14"></a><span class='hs-comment'>-- you should use use 'Ord' from "Data.Ring.Semi.Ord.Order" on 'Bool' to get the '&amp;&amp;'/'||'-based </span>
-<a name="line-15"></a><span class='hs-comment'>-- distributive-lattice 'SemiRing'</span>
-<a name="line-16"></a><span class='hs-comment'>-----------------------------------------------------------------------------</span>
-<a name="line-17"></a>
-<a name="line-18"></a><span class='hs-keyword'>module</span> <span class='hs-conid'>Data</span><span class='hs-varop'>.</span><span class='hs-conid'>Ring</span><span class='hs-varop'>.</span><span class='hs-conid'>Boolean</span>
-<a name="line-19"></a>    <span class='hs-layout'>(</span> <span class='hs-keyword'>module</span> <span class='hs-conid'>Data</span><span class='hs-varop'>.</span><span class='hs-conid'>Ring</span>
-<a name="line-20"></a>    <span class='hs-layout'>,</span> <span class='hs-conid'>BoolRing</span><span class='hs-layout'>(</span><span class='hs-conid'>BoolRing</span><span class='hs-layout'>,</span> <span class='hs-varid'>getBoolRing</span><span class='hs-layout'>)</span>
-<a name="line-21"></a>    <span class='hs-layout'>)</span> <span class='hs-keyword'>where</span>
-<a name="line-22"></a>
-<a name="line-23"></a><span class='hs-keyword'>import</span> <span class='hs-conid'>Data</span><span class='hs-varop'>.</span><span class='hs-conid'>Ring</span>
-<a name="line-24"></a><span class='hs-keyword'>import</span> <span class='hs-conid'>Data</span><span class='hs-varop'>.</span><span class='hs-conid'>Monoid</span><span class='hs-varop'>.</span><span class='hs-conid'>Reducer</span>
-<a name="line-25"></a><span class='hs-keyword'>import</span> <span class='hs-conid'>Test</span><span class='hs-varop'>.</span><span class='hs-conid'>QuickCheck</span>
-<a name="line-26"></a>
-<a name="line-27"></a><a name="BoolRing"></a><span class='hs-keyword'>newtype</span> <span class='hs-conid'>BoolRing</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>BoolRing</span> <span class='hs-layout'>{</span> <span class='hs-varid'>getBoolRing</span> <span class='hs-keyglyph'>::</span> <span class='hs-conid'>Bool</span> <span class='hs-layout'>}</span> <span class='hs-keyword'>deriving</span> <span class='hs-layout'>(</span><span class='hs-conid'>Eq</span><span class='hs-layout'>,</span><span class='hs-conid'>Ord</span><span class='hs-layout'>,</span><span class='hs-conid'>Show</span><span class='hs-layout'>,</span><span class='hs-conid'>Read</span><span class='hs-layout'>,</span><span class='hs-conid'>Arbitrary</span><span class='hs-layout'>,</span><span class='hs-conid'>CoArbitrary</span><span class='hs-layout'>)</span>
-<a name="line-28"></a>
-<a name="line-29"></a><span class='hs-keyword'>instance</span> <span class='hs-conid'>Monoid</span> <span class='hs-conid'>BoolRing</span> <span class='hs-keyword'>where</span>
-<a name="line-30"></a>    <span class='hs-varid'>mempty</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>BoolRing</span> <span class='hs-conid'>False</span>
-<a name="line-31"></a>    <span class='hs-conid'>BoolRing</span> <span class='hs-varid'>a</span> <span class='hs-varop'>`mappend`</span> <span class='hs-conid'>BoolRing</span> <span class='hs-varid'>b</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>BoolRing</span> <span class='hs-layout'>(</span><span class='hs-layout'>(</span><span class='hs-varid'>a</span> <span class='hs-varop'>||</span> <span class='hs-varid'>b</span><span class='hs-layout'>)</span> <span class='hs-varop'>&amp;&amp;</span> <span class='hs-varid'>not</span> <span class='hs-layout'>(</span><span class='hs-varid'>a</span> <span class='hs-varop'>&amp;&amp;</span> <span class='hs-varid'>b</span><span class='hs-layout'>)</span><span class='hs-layout'>)</span>
+<a name="line-12"></a><span class='hs-comment'>-- A Boolean 'Ring' over any Bits instance. Note well that the 'mappend' of this ring is xor.</span>
+<a name="line-13"></a><span class='hs-comment'>-- You should use use 'Ord' from "Data.Ring.Semi.Ord.Order" on 'Bool' to get the '&amp;&amp;'/'||'-based </span>
+<a name="line-14"></a><span class='hs-comment'>-- distributive-lattice 'SemiRing'.</span>
+<a name="line-15"></a><span class='hs-comment'>--</span>
+<a name="line-16"></a><span class='hs-comment'>-- Also note that @gnegate = id@ in a Boolean Ring!</span>
+<a name="line-17"></a><span class='hs-comment'>-----------------------------------------------------------------------------</span>
+<a name="line-18"></a>
+<a name="line-19"></a><span class='hs-keyword'>module</span> <span class='hs-conid'>Data</span><span class='hs-varop'>.</span><span class='hs-conid'>Ring</span><span class='hs-varop'>.</span><span class='hs-conid'>Boolean</span>
+<a name="line-20"></a>    <span class='hs-layout'>(</span> <span class='hs-keyword'>module</span> <span class='hs-conid'>Data</span><span class='hs-varop'>.</span><span class='hs-conid'>Ring</span>
+<a name="line-21"></a>    <span class='hs-layout'>,</span> <span class='hs-conid'>Boolean</span><span class='hs-layout'>(</span><span class='hs-conid'>Boolean</span><span class='hs-layout'>,</span> <span class='hs-varid'>getBoolean</span><span class='hs-layout'>)</span>
+<a name="line-22"></a>    <span class='hs-layout'>)</span> <span class='hs-keyword'>where</span>
+<a name="line-23"></a>
+<a name="line-24"></a><span class='hs-keyword'>import</span> <span class='hs-conid'>Data</span><span class='hs-varop'>.</span><span class='hs-conid'>Bits</span>
+<a name="line-25"></a><span class='hs-keyword'>import</span> <span class='hs-conid'>Data</span><span class='hs-varop'>.</span><span class='hs-conid'>Ring</span>
+<a name="line-26"></a><span class='hs-keyword'>import</span> <span class='hs-conid'>Data</span><span class='hs-varop'>.</span><span class='hs-conid'>Ring</span><span class='hs-varop'>.</span><span class='hs-conid'>Module</span>
+<a name="line-27"></a><span class='hs-keyword'>import</span> <span class='hs-conid'>Data</span><span class='hs-varop'>.</span><span class='hs-conid'>Ring</span><span class='hs-varop'>.</span><span class='hs-conid'>Semi</span><span class='hs-varop'>.</span><span class='hs-conid'>Natural</span>
+<a name="line-28"></a><span class='hs-keyword'>import</span> <span class='hs-conid'>Data</span><span class='hs-varop'>.</span><span class='hs-conid'>Monoid</span><span class='hs-varop'>.</span><span class='hs-conid'>Reducer</span>
+<a name="line-29"></a><span class='hs-keyword'>import</span> <span class='hs-conid'>Test</span><span class='hs-varop'>.</span><span class='hs-conid'>QuickCheck</span> <span class='hs-varid'>hiding</span> <span class='hs-layout'>(</span><span class='hs-layout'>(</span><span class='hs-varop'>.&amp;.</span><span class='hs-layout'>)</span><span class='hs-layout'>)</span>
+<a name="line-30"></a>
+<a name="line-31"></a><a name="Boolean"></a><span class='hs-keyword'>newtype</span> <span class='hs-conid'>Boolean</span> <span class='hs-varid'>a</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>Boolean</span> <span class='hs-layout'>{</span> <span class='hs-varid'>getBoolean</span> <span class='hs-keyglyph'>::</span> <span class='hs-varid'>a</span> <span class='hs-layout'>}</span> <span class='hs-keyword'>deriving</span> <span class='hs-layout'>(</span><span class='hs-conid'>Eq</span><span class='hs-layout'>,</span><span class='hs-conid'>Ord</span><span class='hs-layout'>,</span><span class='hs-conid'>Show</span><span class='hs-layout'>,</span><span class='hs-conid'>Read</span><span class='hs-layout'>,</span><span class='hs-conid'>Arbitrary</span><span class='hs-layout'>,</span><span class='hs-conid'>CoArbitrary</span><span class='hs-layout'>)</span>
hunk ./doc/html/monoids/src/Data-Ring-Boolean.html 41
-<a name="line-33"></a><span class='hs-keyword'>instance</span> <span class='hs-conid'>Group</span> <span class='hs-conid'>BoolRing</span> <span class='hs-keyword'>where</span>
-<a name="line-34"></a>    <span class='hs-varid'>gnegate</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>BoolRing</span> <span class='hs-varop'>.</span> <span class='hs-varid'>not</span> <span class='hs-varop'>.</span> <span class='hs-varid'>getBoolRing</span>
-<a name="line-35"></a>
-<a name="line-36"></a><span class='hs-keyword'>instance</span> <span class='hs-conid'>Multiplicative</span> <span class='hs-conid'>BoolRing</span> <span class='hs-keyword'>where</span>
-<a name="line-37"></a>    <span class='hs-varid'>one</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>BoolRing</span> <span class='hs-conid'>True</span>
-<a name="line-38"></a>    <span class='hs-conid'>BoolRing</span> <span class='hs-varid'>a</span> <span class='hs-varop'>`times`</span> <span class='hs-conid'>BoolRing</span> <span class='hs-varid'>b</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>BoolRing</span> <span class='hs-layout'>(</span><span class='hs-varid'>a</span> <span class='hs-varop'>&amp;&amp;</span> <span class='hs-varid'>b</span><span class='hs-layout'>)</span>
-<a name="line-39"></a>
-<a name="line-40"></a><span class='hs-keyword'>instance</span> <span class='hs-conid'>Ringoid</span> <span class='hs-conid'>BoolRing</span>
-<a name="line-41"></a><span class='hs-keyword'>instance</span> <span class='hs-conid'>LeftSemiNearRing</span> <span class='hs-conid'>BoolRing</span>
-<a name="line-42"></a><span class='hs-keyword'>instance</span> <span class='hs-conid'>RightSemiNearRing</span> <span class='hs-conid'>BoolRing</span>
-<a name="line-43"></a><span class='hs-keyword'>instance</span> <span class='hs-conid'>SemiRing</span> <span class='hs-conid'>BoolRing</span>
-<a name="line-44"></a><span class='hs-keyword'>instance</span> <span class='hs-conid'>Ring</span> <span class='hs-conid'>BoolRing</span>
-<a name="line-45"></a>
-<a name="line-46"></a><span class='hs-keyword'>instance</span> <span class='hs-conid'>Reducer</span> <span class='hs-conid'>Bool</span> <span class='hs-conid'>BoolRing</span> <span class='hs-keyword'>where</span>
-<a name="line-47"></a>    <span class='hs-varid'>unit</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>BoolRing</span>
+<a name="line-33"></a><span class='hs-comment'>-- | @xor@</span>
+<a name="line-34"></a><span class='hs-keyword'>instance</span> <span class='hs-conid'>Bits</span> <span class='hs-varid'>a</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>Monoid</span> <span class='hs-layout'>(</span><span class='hs-conid'>Boolean</span> <span class='hs-varid'>a</span><span class='hs-layout'>)</span> <span class='hs-keyword'>where</span>
+<a name="line-35"></a>    <span class='hs-varid'>mempty</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>Boolean</span> <span class='hs-num'>0</span>  
+<a name="line-36"></a>    <span class='hs-conid'>Boolean</span> <span class='hs-varid'>a</span> <span class='hs-varop'>`mappend`</span> <span class='hs-conid'>Boolean</span> <span class='hs-varid'>b</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>Boolean</span> <span class='hs-layout'>(</span><span class='hs-layout'>(</span><span class='hs-varid'>a</span> <span class='hs-varop'>.|.</span> <span class='hs-varid'>b</span><span class='hs-layout'>)</span> <span class='hs-varop'>.&amp;.</span> <span class='hs-varid'>complement</span> <span class='hs-layout'>(</span><span class='hs-varid'>a</span> <span class='hs-varop'>.&amp;.</span> <span class='hs-varid'>b</span><span class='hs-layout'>)</span><span class='hs-layout'>)</span>
+<a name="line-37"></a>
+<a name="line-38"></a><span class='hs-comment'>-- | @id@, since @x `xor` x = zero@</span>
+<a name="line-39"></a><span class='hs-keyword'>instance</span> <span class='hs-conid'>Bits</span> <span class='hs-varid'>a</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>Group</span> <span class='hs-layout'>(</span><span class='hs-conid'>Boolean</span> <span class='hs-varid'>a</span><span class='hs-layout'>)</span> <span class='hs-keyword'>where</span>
+<a name="line-40"></a>    <span class='hs-varid'>gnegate</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>Boolean</span> <span class='hs-varop'>.</span> <span class='hs-varid'>id</span> <span class='hs-varop'>.</span> <span class='hs-varid'>getBoolean</span>
+<a name="line-41"></a>
+<a name="line-42"></a><span class='hs-comment'>-- | @and@</span>
+<a name="line-43"></a><span class='hs-keyword'>instance</span> <span class='hs-conid'>Bits</span> <span class='hs-varid'>a</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>Multiplicative</span> <span class='hs-layout'>(</span><span class='hs-conid'>Boolean</span> <span class='hs-varid'>a</span><span class='hs-layout'>)</span> <span class='hs-keyword'>where</span>
+<a name="line-44"></a>    <span class='hs-varid'>one</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>Boolean</span> <span class='hs-layout'>(</span><span class='hs-varid'>complement</span> <span class='hs-num'>0</span><span class='hs-layout'>)</span>
+<a name="line-45"></a>    <span class='hs-conid'>Boolean</span> <span class='hs-varid'>a</span> <span class='hs-varop'>`times`</span> <span class='hs-conid'>Boolean</span> <span class='hs-varid'>b</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>Boolean</span> <span class='hs-layout'>(</span><span class='hs-varid'>a</span> <span class='hs-varop'>.&amp;.</span> <span class='hs-varid'>b</span><span class='hs-layout'>)</span>
+<a name="line-46"></a>
+<a name="line-47"></a><span class='hs-comment'>-- | the boolean ring (using symmetric difference as addition) is a ring</span>
+<a name="line-48"></a><span class='hs-keyword'>instance</span> <span class='hs-conid'>Bits</span> <span class='hs-varid'>a</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>Ringoid</span> <span class='hs-layout'>(</span><span class='hs-conid'>Boolean</span> <span class='hs-varid'>a</span><span class='hs-layout'>)</span>
+<a name="line-49"></a><span class='hs-keyword'>instance</span> <span class='hs-conid'>Bits</span> <span class='hs-varid'>a</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>LeftSemiNearRing</span> <span class='hs-layout'>(</span><span class='hs-conid'>Boolean</span> <span class='hs-varid'>a</span><span class='hs-layout'>)</span>
+<a name="line-50"></a><span class='hs-keyword'>instance</span> <span class='hs-conid'>Bits</span> <span class='hs-varid'>a</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>RightSemiNearRing</span> <span class='hs-layout'>(</span><span class='hs-conid'>Boolean</span> <span class='hs-varid'>a</span><span class='hs-layout'>)</span>
+<a name="line-51"></a><span class='hs-keyword'>instance</span> <span class='hs-conid'>Bits</span> <span class='hs-varid'>a</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>SemiRing</span> <span class='hs-layout'>(</span><span class='hs-conid'>Boolean</span> <span class='hs-varid'>a</span><span class='hs-layout'>)</span>
+<a name="line-52"></a><span class='hs-keyword'>instance</span> <span class='hs-conid'>Bits</span> <span class='hs-varid'>a</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>Ring</span> <span class='hs-layout'>(</span><span class='hs-conid'>Boolean</span> <span class='hs-varid'>a</span><span class='hs-layout'>)</span>
+<a name="line-53"></a>
+<a name="line-54"></a><span class='hs-comment'>-- | it reduces boolean values</span>
+<a name="line-55"></a><span class='hs-keyword'>instance</span> <span class='hs-conid'>Bits</span> <span class='hs-varid'>a</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>Reducer</span> <span class='hs-varid'>a</span> <span class='hs-layout'>(</span><span class='hs-conid'>Boolean</span> <span class='hs-varid'>a</span><span class='hs-layout'>)</span> <span class='hs-keyword'>where</span>
+<a name="line-56"></a>    <span class='hs-varid'>unit</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>Boolean</span>
+<a name="line-57"></a>
+<a name="line-58"></a><span class='hs-comment'>-- | every monoid is a module over the naturals, boolring is idempotent</span>
+<a name="line-59"></a><span class='hs-keyword'>instance</span> <span class='hs-conid'>Bits</span> <span class='hs-varid'>a</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>Module</span> <span class='hs-conid'>Natural</span> <span class='hs-layout'>(</span><span class='hs-conid'>Boolean</span> <span class='hs-varid'>a</span><span class='hs-layout'>)</span>
+<a name="line-60"></a><span class='hs-keyword'>instance</span> <span class='hs-conid'>Bits</span> <span class='hs-varid'>a</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>LeftModule</span> <span class='hs-conid'>Natural</span> <span class='hs-layout'>(</span><span class='hs-conid'>Boolean</span> <span class='hs-varid'>a</span><span class='hs-layout'>)</span> <span class='hs-keyword'>where</span>
+<a name="line-61"></a>    <span class='hs-num'>0</span> <span class='hs-varop'>*.</span> <span class='hs-keyword'>_</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>mempty</span>
+<a name="line-62"></a>    <span class='hs-keyword'>_</span> <span class='hs-varop'>*.</span> <span class='hs-varid'>m</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>m</span>
+<a name="line-63"></a><span class='hs-keyword'>instance</span> <span class='hs-conid'>Bits</span> <span class='hs-varid'>a</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>RightModule</span> <span class='hs-conid'>Natural</span> <span class='hs-layout'>(</span><span class='hs-conid'>Boolean</span> <span class='hs-varid'>a</span><span class='hs-layout'>)</span> <span class='hs-keyword'>where</span>
+<a name="line-64"></a>    <span class='hs-keyword'>_</span> <span class='hs-varop'>.*</span> <span class='hs-num'>0</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>mempty</span>
+<a name="line-65"></a>    <span class='hs-varid'>m</span> <span class='hs-varop'>.*</span> <span class='hs-keyword'>_</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>m</span>
+<a name="line-66"></a><span class='hs-keyword'>instance</span> <span class='hs-conid'>Bits</span> <span class='hs-varid'>a</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>Bimodule</span> <span class='hs-conid'>Natural</span> <span class='hs-layout'>(</span><span class='hs-conid'>Boolean</span> <span class='hs-varid'>a</span><span class='hs-layout'>)</span>
+<a name="line-67"></a>
+<a name="line-68"></a><span class='hs-comment'>-- | every group is a module over the integers, boolring is idempotent</span>
+<a name="line-69"></a><span class='hs-keyword'>instance</span> <span class='hs-conid'>Bits</span> <span class='hs-varid'>a</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>Module</span> <span class='hs-conid'>Integer</span> <span class='hs-layout'>(</span><span class='hs-conid'>Boolean</span> <span class='hs-varid'>a</span><span class='hs-layout'>)</span>
+<a name="line-70"></a><span class='hs-keyword'>instance</span> <span class='hs-conid'>Bits</span> <span class='hs-varid'>a</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>LeftModule</span> <span class='hs-conid'>Integer</span> <span class='hs-layout'>(</span><span class='hs-conid'>Boolean</span> <span class='hs-varid'>a</span><span class='hs-layout'>)</span> <span class='hs-keyword'>where</span>
+<a name="line-71"></a>    <span class='hs-num'>0</span> <span class='hs-varop'>*.</span> <span class='hs-keyword'>_</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>mempty</span>
+<a name="line-72"></a>    <span class='hs-keyword'>_</span> <span class='hs-varop'>*.</span> <span class='hs-varid'>m</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>m</span>
+<a name="line-73"></a><span class='hs-keyword'>instance</span> <span class='hs-conid'>Bits</span> <span class='hs-varid'>a</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>RightModule</span> <span class='hs-conid'>Integer</span> <span class='hs-layout'>(</span><span class='hs-conid'>Boolean</span> <span class='hs-varid'>a</span><span class='hs-layout'>)</span> <span class='hs-keyword'>where</span>
+<a name="line-74"></a>    <span class='hs-keyword'>_</span> <span class='hs-varop'>.*</span> <span class='hs-num'>0</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>mempty</span>
+<a name="line-75"></a>    <span class='hs-varid'>m</span> <span class='hs-varop'>.*</span> <span class='hs-keyword'>_</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>m</span>
+<a name="line-76"></a><span class='hs-keyword'>instance</span> <span class='hs-conid'>Bits</span> <span class='hs-varid'>a</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>Bimodule</span> <span class='hs-conid'>Integer</span> <span class='hs-layout'>(</span><span class='hs-conid'>Boolean</span> <span class='hs-varid'>a</span><span class='hs-layout'>)</span>
+<a name="line-77"></a>
+<a name="line-78"></a><span class='hs-comment'>-- | every ring is a module over itself</span>
+<a name="line-79"></a><span class='hs-keyword'>instance</span> <span class='hs-conid'>Bits</span> <span class='hs-varid'>a</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>Module</span> <span class='hs-layout'>(</span><span class='hs-conid'>Boolean</span> <span class='hs-varid'>a</span><span class='hs-layout'>)</span> <span class='hs-layout'>(</span><span class='hs-conid'>Boolean</span> <span class='hs-varid'>a</span><span class='hs-layout'>)</span>
+<a name="line-80"></a><span class='hs-keyword'>instance</span> <span class='hs-conid'>Bits</span> <span class='hs-varid'>a</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>LeftModule</span> <span class='hs-layout'>(</span><span class='hs-conid'>Boolean</span> <span class='hs-varid'>a</span><span class='hs-layout'>)</span> <span class='hs-layout'>(</span><span class='hs-conid'>Boolean</span> <span class='hs-varid'>a</span><span class='hs-layout'>)</span> <span class='hs-keyword'>where</span> 
+<a name="line-81"></a>    <span class='hs-layout'>(</span><span class='hs-varop'>*.</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>times</span>
+<a name="line-82"></a><span class='hs-keyword'>instance</span> <span class='hs-conid'>Bits</span> <span class='hs-varid'>a</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>RightModule</span> <span class='hs-layout'>(</span><span class='hs-conid'>Boolean</span> <span class='hs-varid'>a</span><span class='hs-layout'>)</span> <span class='hs-layout'>(</span><span class='hs-conid'>Boolean</span> <span class='hs-varid'>a</span><span class='hs-layout'>)</span> <span class='hs-keyword'>where</span> 
+<a name="line-83"></a>    <span class='hs-layout'>(</span><span class='hs-varop'>.*</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>times</span>
+<a name="line-84"></a><span class='hs-keyword'>instance</span> <span class='hs-conid'>Bits</span> <span class='hs-varid'>a</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>Bimodule</span> <span class='hs-layout'>(</span><span class='hs-conid'>Boolean</span> <span class='hs-varid'>a</span><span class='hs-layout'>)</span> <span class='hs-layout'>(</span><span class='hs-conid'>Boolean</span> <span class='hs-varid'>a</span><span class='hs-layout'>)</span>
+<a name="line-85"></a><span class='hs-keyword'>instance</span> <span class='hs-conid'>Bits</span> <span class='hs-varid'>a</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>Normed</span> <span class='hs-layout'>(</span><span class='hs-conid'>Boolean</span> <span class='hs-varid'>a</span><span class='hs-layout'>)</span> <span class='hs-layout'>(</span><span class='hs-conid'>Boolean</span> <span class='hs-varid'>a</span><span class='hs-layout'>)</span> <span class='hs-keyword'>where</span> <span class='hs-varid'>mabs</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>id</span>
hunk ./doc/html/monoids/src/Data-Ring-Module-AutomaticDifferentiation.html 37
-<a name="line-29"></a><a name="lift"></a><span class='hs-definition'>lift</span> <span class='hs-keyglyph'>::</span> <span class='hs-layout'>(</span><span class='hs-varid'>r</span> <span class='hs-varop'>`Module`</span> <span class='hs-varid'>m</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-varid'>r</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-conid'>D</span> <span class='hs-varid'>s</span> <span class='hs-varid'>r</span> <span class='hs-varid'>m</span>
+<a name="line-29"></a><a name="lift"></a><span class='hs-definition'>lift</span> <span class='hs-keyglyph'>::</span> <span class='hs-layout'>(</span><span class='hs-varid'>r</span> <span class='hs-varop'>`Bimodule`</span> <span class='hs-varid'>m</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-varid'>r</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-conid'>D</span> <span class='hs-varid'>s</span> <span class='hs-varid'>r</span> <span class='hs-varid'>m</span>
hunk ./doc/html/monoids/src/Data-Ring-Module-AutomaticDifferentiation.html 40
-<a name="line-32"></a><a name="infinitesimal"></a><span class='hs-definition'>infinitesimal</span> <span class='hs-keyglyph'>::</span> <span class='hs-layout'>(</span><span class='hs-varid'>r</span> <span class='hs-varop'>`Module`</span> <span class='hs-varid'>m</span><span class='hs-layout'>,</span> <span class='hs-conid'>Ringoid</span> <span class='hs-varid'>m</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>D</span> <span class='hs-varid'>s</span> <span class='hs-varid'>r</span> <span class='hs-varid'>m</span>
+<a name="line-32"></a><a name="infinitesimal"></a><span class='hs-definition'>infinitesimal</span> <span class='hs-keyglyph'>::</span> <span class='hs-layout'>(</span><span class='hs-varid'>r</span> <span class='hs-varop'>`Bimodule`</span> <span class='hs-varid'>m</span><span class='hs-layout'>,</span> <span class='hs-conid'>Ringoid</span> <span class='hs-varid'>m</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>D</span> <span class='hs-varid'>s</span> <span class='hs-varid'>r</span> <span class='hs-varid'>m</span>
hunk ./doc/html/monoids/src/Data-Ring-Module-AutomaticDifferentiation.html 49
-<a name="line-41"></a><span class='hs-keyword'>instance</span> <span class='hs-layout'>(</span><span class='hs-varid'>r</span> <span class='hs-varop'>`Module`</span> <span class='hs-varid'>m</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>Monoid</span> <span class='hs-layout'>(</span><span class='hs-conid'>D</span> <span class='hs-varid'>s</span> <span class='hs-varid'>r</span> <span class='hs-varid'>m</span><span class='hs-layout'>)</span> <span class='hs-keyword'>where</span>
+<a name="line-41"></a><span class='hs-keyword'>instance</span> <span class='hs-layout'>(</span><span class='hs-varid'>r</span> <span class='hs-varop'>`Bimodule`</span> <span class='hs-varid'>m</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>Monoid</span> <span class='hs-layout'>(</span><span class='hs-conid'>D</span> <span class='hs-varid'>s</span> <span class='hs-varid'>r</span> <span class='hs-varid'>m</span><span class='hs-layout'>)</span> <span class='hs-keyword'>where</span>
hunk ./doc/html/monoids/src/Data-Ring-Module-AutomaticDifferentiation.html 53
-<a name="line-45"></a><span class='hs-keyword'>instance</span> <span class='hs-layout'>(</span><span class='hs-varid'>r</span> <span class='hs-varop'>`Module`</span> <span class='hs-varid'>m</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>Multiplicative</span> <span class='hs-layout'>(</span><span class='hs-conid'>D</span> <span class='hs-varid'>s</span> <span class='hs-varid'>r</span> <span class='hs-varid'>m</span><span class='hs-layout'>)</span> <span class='hs-keyword'>where</span>
+<a name="line-45"></a><span class='hs-keyword'>instance</span> <span class='hs-layout'>(</span><span class='hs-varid'>r</span> <span class='hs-varop'>`Bimodule`</span> <span class='hs-varid'>m</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>Multiplicative</span> <span class='hs-layout'>(</span><span class='hs-conid'>D</span> <span class='hs-varid'>s</span> <span class='hs-varid'>r</span> <span class='hs-varid'>m</span><span class='hs-layout'>)</span> <span class='hs-keyword'>where</span>
hunk ./doc/html/monoids/src/Data-Ring-Module-AutomaticDifferentiation.html 57
-<a name="line-49"></a><span class='hs-keyword'>instance</span> <span class='hs-layout'>(</span><span class='hs-conid'>Group</span> <span class='hs-varid'>r</span><span class='hs-layout'>,</span> <span class='hs-varid'>r</span> <span class='hs-varop'>`Module`</span> <span class='hs-varid'>m</span><span class='hs-layout'>,</span> <span class='hs-conid'>Group</span> <span class='hs-varid'>m</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>Group</span> <span class='hs-layout'>(</span><span class='hs-conid'>D</span> <span class='hs-varid'>s</span> <span class='hs-varid'>r</span> <span class='hs-varid'>m</span><span class='hs-layout'>)</span> <span class='hs-keyword'>where</span>
+<a name="line-49"></a><span class='hs-keyword'>instance</span> <span class='hs-layout'>(</span><span class='hs-conid'>Group</span> <span class='hs-varid'>r</span><span class='hs-layout'>,</span> <span class='hs-varid'>r</span> <span class='hs-varop'>`Bimodule`</span> <span class='hs-varid'>m</span><span class='hs-layout'>,</span> <span class='hs-conid'>Group</span> <span class='hs-varid'>m</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>Group</span> <span class='hs-layout'>(</span><span class='hs-conid'>D</span> <span class='hs-varid'>s</span> <span class='hs-varid'>r</span> <span class='hs-varid'>m</span><span class='hs-layout'>)</span> <span class='hs-keyword'>where</span>
hunk ./doc/html/monoids/src/Data-Ring-Module-AutomaticDifferentiation.html 75
-<a name="line-67"></a><span class='hs-keyword'>instance</span> <span class='hs-layout'>(</span><span class='hs-conid'>Ringoid</span> <span class='hs-varid'>r</span><span class='hs-layout'>,</span> <span class='hs-varid'>r</span> <span class='hs-varop'>`Module`</span> <span class='hs-varid'>m</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>Ringoid</span> <span class='hs-layout'>(</span><span class='hs-conid'>D</span> <span class='hs-varid'>s</span> <span class='hs-varid'>r</span> <span class='hs-varid'>m</span><span class='hs-layout'>)</span>
-<a name="line-68"></a><span class='hs-keyword'>instance</span> <span class='hs-layout'>(</span><span class='hs-conid'>LeftSemiNearRing</span> <span class='hs-varid'>r</span><span class='hs-layout'>,</span> <span class='hs-conid'>Module</span> <span class='hs-varid'>r</span> <span class='hs-varid'>m</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>LeftSemiNearRing</span> <span class='hs-layout'>(</span><span class='hs-conid'>D</span> <span class='hs-varid'>s</span> <span class='hs-varid'>r</span> <span class='hs-varid'>m</span><span class='hs-layout'>)</span>
-<a name="line-69"></a><span class='hs-keyword'>instance</span> <span class='hs-layout'>(</span><span class='hs-conid'>RightSemiNearRing</span> <span class='hs-varid'>r</span><span class='hs-layout'>,</span> <span class='hs-conid'>Module</span> <span class='hs-varid'>r</span> <span class='hs-varid'>m</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>RightSemiNearRing</span> <span class='hs-layout'>(</span><span class='hs-conid'>D</span> <span class='hs-varid'>s</span> <span class='hs-varid'>r</span> <span class='hs-varid'>m</span><span class='hs-layout'>)</span>
-<a name="line-70"></a><span class='hs-keyword'>instance</span> <span class='hs-layout'>(</span><span class='hs-conid'>SemiRing</span> <span class='hs-varid'>r</span><span class='hs-layout'>,</span> <span class='hs-varid'>r</span> <span class='hs-varop'>`Module`</span> <span class='hs-varid'>m</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>SemiRing</span> <span class='hs-layout'>(</span><span class='hs-conid'>D</span> <span class='hs-varid'>s</span> <span class='hs-varid'>r</span> <span class='hs-varid'>m</span><span class='hs-layout'>)</span>
-<a name="line-71"></a><span class='hs-keyword'>instance</span> <span class='hs-layout'>(</span><span class='hs-conid'>Ring</span> <span class='hs-varid'>r</span><span class='hs-layout'>,</span> <span class='hs-varid'>r</span> <span class='hs-varop'>`Module`</span> <span class='hs-varid'>m</span><span class='hs-layout'>,</span> <span class='hs-conid'>Group</span> <span class='hs-varid'>m</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>Ring</span> <span class='hs-layout'>(</span><span class='hs-conid'>D</span> <span class='hs-varid'>s</span> <span class='hs-varid'>r</span> <span class='hs-varid'>m</span><span class='hs-layout'>)</span>
+<a name="line-67"></a><span class='hs-keyword'>instance</span> <span class='hs-layout'>(</span><span class='hs-conid'>Ringoid</span> <span class='hs-varid'>r</span><span class='hs-layout'>,</span> <span class='hs-varid'>r</span> <span class='hs-varop'>`Bimodule`</span> <span class='hs-varid'>m</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>Ringoid</span> <span class='hs-layout'>(</span><span class='hs-conid'>D</span> <span class='hs-varid'>s</span> <span class='hs-varid'>r</span> <span class='hs-varid'>m</span><span class='hs-layout'>)</span>
+<a name="line-68"></a><span class='hs-keyword'>instance</span> <span class='hs-layout'>(</span><span class='hs-conid'>LeftSemiNearRing</span> <span class='hs-varid'>r</span><span class='hs-layout'>,</span> <span class='hs-conid'>Bimodule</span> <span class='hs-varid'>r</span> <span class='hs-varid'>m</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>LeftSemiNearRing</span> <span class='hs-layout'>(</span><span class='hs-conid'>D</span> <span class='hs-varid'>s</span> <span class='hs-varid'>r</span> <span class='hs-varid'>m</span><span class='hs-layout'>)</span>
+<a name="line-69"></a><span class='hs-keyword'>instance</span> <span class='hs-layout'>(</span><span class='hs-conid'>RightSemiNearRing</span> <span class='hs-varid'>r</span><span class='hs-layout'>,</span> <span class='hs-conid'>Bimodule</span> <span class='hs-varid'>r</span> <span class='hs-varid'>m</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>RightSemiNearRing</span> <span class='hs-layout'>(</span><span class='hs-conid'>D</span> <span class='hs-varid'>s</span> <span class='hs-varid'>r</span> <span class='hs-varid'>m</span><span class='hs-layout'>)</span>
+<a name="line-70"></a><span class='hs-keyword'>instance</span> <span class='hs-layout'>(</span><span class='hs-conid'>SemiRing</span> <span class='hs-varid'>r</span><span class='hs-layout'>,</span> <span class='hs-varid'>r</span> <span class='hs-varop'>`Bimodule`</span> <span class='hs-varid'>m</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>SemiRing</span> <span class='hs-layout'>(</span><span class='hs-conid'>D</span> <span class='hs-varid'>s</span> <span class='hs-varid'>r</span> <span class='hs-varid'>m</span><span class='hs-layout'>)</span>
+<a name="line-71"></a><span class='hs-keyword'>instance</span> <span class='hs-layout'>(</span><span class='hs-conid'>Ring</span> <span class='hs-varid'>r</span><span class='hs-layout'>,</span> <span class='hs-varid'>r</span> <span class='hs-varop'>`Bimodule`</span> <span class='hs-varid'>m</span><span class='hs-layout'>,</span> <span class='hs-conid'>Group</span> <span class='hs-varid'>m</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>Ring</span> <span class='hs-layout'>(</span><span class='hs-conid'>D</span> <span class='hs-varid'>s</span> <span class='hs-varid'>r</span> <span class='hs-varid'>m</span><span class='hs-layout'>)</span>
hunk ./doc/html/monoids/src/Data-Ring-Module-AutomaticDifferentiation.html 81
-<a name="line-73"></a><span class='hs-keyword'>instance</span> <span class='hs-layout'>(</span><span class='hs-varid'>r</span> <span class='hs-varop'>`Module`</span> <span class='hs-varid'>m</span><span class='hs-layout'>,</span> <span class='hs-varid'>c</span> <span class='hs-varop'>`Reducer`</span> <span class='hs-varid'>r</span><span class='hs-layout'>,</span> <span class='hs-varid'>c</span> <span class='hs-varop'>`Reducer`</span> <span class='hs-varid'>m</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>Reducer</span> <span class='hs-varid'>c</span> <span class='hs-layout'>(</span><span class='hs-conid'>D</span> <span class='hs-varid'>s</span> <span class='hs-varid'>r</span> <span class='hs-varid'>m</span><span class='hs-layout'>)</span> <span class='hs-keyword'>where</span>
+<a name="line-73"></a><span class='hs-keyword'>instance</span> <span class='hs-layout'>(</span><span class='hs-varid'>r</span> <span class='hs-varop'>`Bimodule`</span> <span class='hs-varid'>m</span><span class='hs-layout'>,</span> <span class='hs-varid'>c</span> <span class='hs-varop'>`Reducer`</span> <span class='hs-varid'>r</span><span class='hs-layout'>,</span> <span class='hs-varid'>c</span> <span class='hs-varop'>`Reducer`</span> <span class='hs-varid'>m</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>Reducer</span> <span class='hs-varid'>c</span> <span class='hs-layout'>(</span><span class='hs-conid'>D</span> <span class='hs-varid'>s</span> <span class='hs-varid'>r</span> <span class='hs-varid'>m</span><span class='hs-layout'>)</span> <span class='hs-keyword'>where</span>
hunk ./doc/html/monoids/src/Data-Ring-Module-AutomaticDifferentiation.html 93
-<a name="line-85"></a><a name="d"></a><span class='hs-definition'>d</span> <span class='hs-keyglyph'>::</span> <span class='hs-layout'>(</span><span class='hs-varid'>r</span> <span class='hs-varop'>`Module`</span> <span class='hs-varid'>m</span><span class='hs-layout'>,</span> <span class='hs-conid'>Ringoid</span> <span class='hs-varid'>m</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-layout'>(</span><span class='hs-keyword'>forall</span> <span class='hs-varid'>s</span><span class='hs-varop'>.</span> <span class='hs-conid'>D</span> <span class='hs-varid'>s</span> <span class='hs-varid'>r</span> <span class='hs-varid'>m</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-conid'>D</span> <span class='hs-varid'>s</span> <span class='hs-varid'>r</span> <span class='hs-varid'>m</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-layout'>(</span><span class='hs-varid'>r</span><span class='hs-layout'>,</span><span class='hs-varid'>m</span><span class='hs-layout'>)</span>
+<a name="line-85"></a><a name="d"></a><span class='hs-definition'>d</span> <span class='hs-keyglyph'>::</span> <span class='hs-layout'>(</span><span class='hs-varid'>r</span> <span class='hs-varop'>`Bimodule`</span> <span class='hs-varid'>m</span><span class='hs-layout'>,</span> <span class='hs-conid'>Ringoid</span> <span class='hs-varid'>m</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-layout'>(</span><span class='hs-keyword'>forall</span> <span class='hs-varid'>s</span><span class='hs-varop'>.</span> <span class='hs-conid'>D</span> <span class='hs-varid'>s</span> <span class='hs-varid'>r</span> <span class='hs-varid'>m</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-conid'>D</span> <span class='hs-varid'>s</span> <span class='hs-varid'>r</span> <span class='hs-varid'>m</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-layout'>(</span><span class='hs-varid'>r</span><span class='hs-layout'>,</span><span class='hs-varid'>m</span><span class='hs-layout'>)</span>
hunk ./doc/html/monoids/src/Data-Ring-Module.html 27
-<a name="line-19"></a>    <span class='hs-layout'>,</span> <span class='hs-conid'>LeftModule</span>
-<a name="line-20"></a>    <span class='hs-layout'>,</span> <span class='hs-layout'>(</span><span class='hs-varop'>*.</span><span class='hs-layout'>)</span>
-<a name="line-21"></a>    <span class='hs-layout'>,</span> <span class='hs-conid'>RightModule</span>
-<a name="line-22"></a>    <span class='hs-layout'>,</span> <span class='hs-layout'>(</span><span class='hs-varop'>.*</span><span class='hs-layout'>)</span>
-<a name="line-23"></a>    <span class='hs-layout'>,</span> <span class='hs-conid'>Module</span>
-<a name="line-24"></a>    <span class='hs-layout'>)</span> <span class='hs-keyword'>where</span>
-<a name="line-25"></a>
-<a name="line-26"></a><span class='hs-keyword'>import</span> <span class='hs-conid'>Data</span><span class='hs-varop'>.</span><span class='hs-conid'>Ring</span>
-<a name="line-27"></a><span class='hs-keyword'>import</span> <span class='hs-conid'>Data</span><span class='hs-varop'>.</span><span class='hs-conid'>Monoid</span><span class='hs-varop'>.</span><span class='hs-conid'>Union</span>
-<a name="line-28"></a>
-<a name="line-29"></a><span class='hs-comment'>-- import qualified Data.Monoid.Combinators as Monoid</span>
-<a name="line-30"></a>
-<a name="line-31"></a><a name="LeftModule"></a><span class='hs-comment'>-- | @ (x * y) *. m = x * (y *. m) @</span>
-<a name="line-32"></a><a name="LeftModule"></a><span class='hs-keyword'>class</span> <span class='hs-layout'>(</span><span class='hs-conid'>Monoid</span> <span class='hs-varid'>r</span><span class='hs-layout'>,</span> <span class='hs-conid'>Multiplicative</span> <span class='hs-varid'>r</span><span class='hs-layout'>,</span> <span class='hs-conid'>Monoid</span> <span class='hs-varid'>m</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>LeftModule</span> <span class='hs-varid'>r</span> <span class='hs-varid'>m</span> <span class='hs-keyword'>where</span>
-<a name="line-33"></a>    <span class='hs-layout'>(</span><span class='hs-varop'>*.</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>::</span> <span class='hs-varid'>r</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-varid'>m</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-varid'>m</span>
-<a name="line-34"></a>    
-<a name="line-35"></a><a name="RightModule"></a><span class='hs-comment'>-- | @ (m .* x) * y = m .* (x * y) @</span>
-<a name="line-36"></a><a name="RightModule"></a><span class='hs-keyword'>class</span> <span class='hs-layout'>(</span><span class='hs-conid'>Monoid</span> <span class='hs-varid'>r</span><span class='hs-layout'>,</span> <span class='hs-conid'>Multiplicative</span> <span class='hs-varid'>r</span><span class='hs-layout'>,</span> <span class='hs-conid'>Monoid</span> <span class='hs-varid'>m</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>RightModule</span> <span class='hs-varid'>r</span> <span class='hs-varid'>m</span> <span class='hs-keyword'>where</span>
-<a name="line-37"></a>    <span class='hs-layout'>(</span><span class='hs-varop'>.*</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>::</span> <span class='hs-varid'>m</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-varid'>r</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-varid'>m</span>
-<a name="line-38"></a>
-<a name="line-39"></a><a name="Module"></a><span class='hs-comment'>-- | @ (x *. m) .* y = x *. (m .* y) @</span>
-<a name="line-40"></a><a name="Module"></a><span class='hs-keyword'>class</span> <span class='hs-layout'>(</span><span class='hs-conid'>LeftModule</span> <span class='hs-varid'>r</span> <span class='hs-varid'>m</span><span class='hs-layout'>,</span> <span class='hs-conid'>RightModule</span> <span class='hs-varid'>r</span> <span class='hs-varid'>m</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>Module</span> <span class='hs-varid'>r</span> <span class='hs-varid'>m</span> 
-<a name="line-41"></a>
-<a name="line-42"></a><span class='hs-keyword'>instance</span> <span class='hs-layout'>(</span><span class='hs-conid'>LeftModule</span> <span class='hs-varid'>r</span> <span class='hs-varid'>m</span><span class='hs-layout'>,</span> <span class='hs-conid'>LeftModule</span> <span class='hs-varid'>r</span> <span class='hs-varid'>n</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>LeftModule</span> <span class='hs-varid'>r</span> <span class='hs-layout'>(</span><span class='hs-varid'>m</span><span class='hs-layout'>,</span><span class='hs-varid'>n</span><span class='hs-layout'>)</span> <span class='hs-keyword'>where</span>
-<a name="line-43"></a>    <span class='hs-varid'>r</span> <span class='hs-varop'>*.</span> <span class='hs-layout'>(</span><span class='hs-varid'>m</span><span class='hs-layout'>,</span><span class='hs-varid'>n</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=</span> <span class='hs-layout'>(</span><span class='hs-varid'>r</span> <span class='hs-varop'>*.</span> <span class='hs-varid'>m</span><span class='hs-layout'>,</span> <span class='hs-varid'>r</span> <span class='hs-varop'>*.</span> <span class='hs-varid'>n</span><span class='hs-layout'>)</span>
-<a name="line-44"></a><span class='hs-keyword'>instance</span> <span class='hs-layout'>(</span><span class='hs-conid'>LeftModule</span> <span class='hs-varid'>r</span> <span class='hs-varid'>m</span><span class='hs-layout'>,</span> <span class='hs-conid'>LeftModule</span> <span class='hs-varid'>r</span> <span class='hs-varid'>n</span><span class='hs-layout'>,</span> <span class='hs-conid'>LeftModule</span> <span class='hs-varid'>r</span> <span class='hs-varid'>o</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>LeftModule</span> <span class='hs-varid'>r</span> <span class='hs-layout'>(</span><span class='hs-varid'>m</span><span class='hs-layout'>,</span><span class='hs-varid'>n</span><span class='hs-layout'>,</span><span class='hs-varid'>o</span><span class='hs-layout'>)</span> <span class='hs-keyword'>where</span>
-<a name="line-45"></a>    <span class='hs-varid'>r</span> <span class='hs-varop'>*.</span> <span class='hs-layout'>(</span><span class='hs-varid'>m</span><span class='hs-layout'>,</span><span class='hs-varid'>n</span><span class='hs-layout'>,</span><span class='hs-varid'>o</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=</span> <span class='hs-layout'>(</span><span class='hs-varid'>r</span> <span class='hs-varop'>*.</span> <span class='hs-varid'>m</span><span class='hs-layout'>,</span> <span class='hs-varid'>r</span> <span class='hs-varop'>*.</span> <span class='hs-varid'>n</span><span class='hs-layout'>,</span> <span class='hs-varid'>r</span> <span class='hs-varop'>*.</span> <span class='hs-varid'>o</span><span class='hs-layout'>)</span>
-<a name="line-46"></a><span class='hs-keyword'>instance</span> <span class='hs-layout'>(</span><span class='hs-conid'>LeftModule</span> <span class='hs-varid'>r</span> <span class='hs-varid'>m</span><span class='hs-layout'>,</span> <span class='hs-conid'>LeftModule</span> <span class='hs-varid'>r</span> <span class='hs-varid'>n</span><span class='hs-layout'>,</span> <span class='hs-conid'>LeftModule</span> <span class='hs-varid'>r</span> <span class='hs-varid'>o</span><span class='hs-layout'>,</span> <span class='hs-conid'>LeftModule</span> <span class='hs-varid'>r</span> <span class='hs-varid'>p</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>LeftModule</span> <span class='hs-varid'>r</span> <span class='hs-layout'>(</span><span class='hs-varid'>m</span><span class='hs-layout'>,</span><span class='hs-varid'>n</span><span class='hs-layout'>,</span><span class='hs-varid'>o</span><span class='hs-layout'>,</span><span class='hs-varid'>p</span><span class='hs-layout'>)</span> <span class='hs-keyword'>where</span>
-<a name="line-47"></a>    <span class='hs-varid'>r</span> <span class='hs-varop'>*.</span> <span class='hs-layout'>(</span><span class='hs-varid'>m</span><span class='hs-layout'>,</span><span class='hs-varid'>n</span><span class='hs-layout'>,</span><span class='hs-varid'>o</span><span class='hs-layout'>,</span><span class='hs-varid'>p</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=</span> <span class='hs-layout'>(</span><span class='hs-varid'>r</span> <span class='hs-varop'>*.</span> <span class='hs-varid'>m</span><span class='hs-layout'>,</span> <span class='hs-varid'>r</span> <span class='hs-varop'>*.</span> <span class='hs-varid'>n</span><span class='hs-layout'>,</span> <span class='hs-varid'>r</span> <span class='hs-varop'>*.</span> <span class='hs-varid'>o</span><span class='hs-layout'>,</span> <span class='hs-varid'>r</span> <span class='hs-varop'>*.</span> <span class='hs-varid'>p</span><span class='hs-layout'>)</span>
-<a name="line-48"></a><span class='hs-keyword'>instance</span> <span class='hs-layout'>(</span><span class='hs-conid'>LeftModule</span> <span class='hs-varid'>r</span> <span class='hs-varid'>m</span><span class='hs-layout'>,</span> <span class='hs-conid'>LeftModule</span> <span class='hs-varid'>r</span> <span class='hs-varid'>n</span><span class='hs-layout'>,</span> <span class='hs-conid'>LeftModule</span> <span class='hs-varid'>r</span> <span class='hs-varid'>o</span><span class='hs-layout'>,</span> <span class='hs-conid'>LeftModule</span> <span class='hs-varid'>r</span> <span class='hs-varid'>p</span><span class='hs-layout'>,</span> <span class='hs-conid'>LeftModule</span> <span class='hs-varid'>r</span> <span class='hs-varid'>q</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>LeftModule</span> <span class='hs-varid'>r</span> <span class='hs-layout'>(</span><span class='hs-varid'>m</span><span class='hs-layout'>,</span><span class='hs-varid'>n</span><span class='hs-layout'>,</span><span class='hs-varid'>o</span><span class='hs-layout'>,</span><span class='hs-varid'>p</span><span class='hs-layout'>,</span><span class='hs-varid'>q</span><span class='hs-layout'>)</span> <span class='hs-keyword'>where</span>
-<a name="line-49"></a>    <span class='hs-varid'>r</span> <span class='hs-varop'>*.</span> <span class='hs-layout'>(</span><span class='hs-varid'>m</span><span class='hs-layout'>,</span><span class='hs-varid'>n</span><span class='hs-layout'>,</span><span class='hs-varid'>o</span><span class='hs-layout'>,</span><span class='hs-varid'>p</span><span class='hs-layout'>,</span><span class='hs-varid'>q</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=</span> <span class='hs-layout'>(</span><span class='hs-varid'>r</span> <span class='hs-varop'>*.</span> <span class='hs-varid'>m</span><span class='hs-layout'>,</span> <span class='hs-varid'>r</span> <span class='hs-varop'>*.</span> <span class='hs-varid'>n</span><span class='hs-layout'>,</span> <span class='hs-varid'>r</span> <span class='hs-varop'>*.</span> <span class='hs-varid'>o</span><span class='hs-layout'>,</span> <span class='hs-varid'>r</span> <span class='hs-varop'>*.</span> <span class='hs-varid'>p</span><span class='hs-layout'>,</span> <span class='hs-varid'>r</span> <span class='hs-varop'>*.</span> <span class='hs-varid'>q</span><span class='hs-layout'>)</span>
+<a name="line-19"></a>    <span class='hs-comment'>-- * R-Modules</span>
+<a name="line-20"></a>    <span class='hs-layout'>,</span> <span class='hs-conid'>Module</span>
+<a name="line-21"></a>    <span class='hs-layout'>,</span> <span class='hs-conid'>LeftModule</span><span class='hs-layout'>,</span> <span class='hs-layout'>(</span><span class='hs-varop'>*.</span><span class='hs-layout'>)</span>
+<a name="line-22"></a>    <span class='hs-layout'>,</span> <span class='hs-conid'>RightModule</span><span class='hs-layout'>,</span> <span class='hs-layout'>(</span><span class='hs-varop'>.*</span><span class='hs-layout'>)</span>
+<a name="line-23"></a>    <span class='hs-layout'>,</span> <span class='hs-conid'>Bimodule</span>
+<a name="line-24"></a>    <span class='hs-comment'>-- * R-Normed Modules</span>
+<a name="line-25"></a>    <span class='hs-layout'>,</span> <span class='hs-conid'>Normed</span><span class='hs-layout'>,</span> <span class='hs-varid'>mabs</span>
+<a name="line-26"></a>    <span class='hs-comment'>-- * Vector Spaces</span>
+<a name="line-27"></a>    <span class='hs-layout'>,</span> <span class='hs-conid'>VectorSpace</span>
+<a name="line-28"></a>    <span class='hs-comment'>-- * R-Algebras</span>
+<a name="line-29"></a>    <span class='hs-layout'>,</span> <span class='hs-conid'>Algebra</span>
+<a name="line-30"></a>    <span class='hs-layout'>)</span> <span class='hs-keyword'>where</span>
+<a name="line-31"></a>
+<a name="line-32"></a><span class='hs-keyword'>import</span> <span class='hs-conid'>Data</span><span class='hs-varop'>.</span><span class='hs-conid'>Ring</span>
+<a name="line-33"></a><span class='hs-keyword'>import</span> <span class='hs-conid'>Data</span><span class='hs-varop'>.</span><span class='hs-conid'>Monoid</span><span class='hs-varop'>.</span><span class='hs-conid'>Union</span>
+<a name="line-34"></a>
+<a name="line-35"></a><span class='hs-comment'>-- import qualified Data.Monoid.Combinators as Monoid</span>
+<a name="line-36"></a>
+<a name="line-37"></a>
+<a name="line-38"></a><a name="Module"></a><span class='hs-keyword'>class</span> <span class='hs-layout'>(</span><span class='hs-conid'>Ringoid</span> <span class='hs-varid'>r</span><span class='hs-layout'>,</span> <span class='hs-conid'>Monoid</span> <span class='hs-varid'>m</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>Module</span> <span class='hs-varid'>r</span> <span class='hs-varid'>m</span> <span class='hs-keyword'>where</span>
+<a name="line-39"></a>
+<a name="line-40"></a><a name="LeftModule"></a><span class='hs-comment'>-- | @ (x * y) *. m = x * (y *. m) @</span>
+<a name="line-41"></a><a name="LeftModule"></a><span class='hs-keyword'>class</span> <span class='hs-layout'>(</span><span class='hs-conid'>Module</span> <span class='hs-varid'>r</span> <span class='hs-varid'>m</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>LeftModule</span> <span class='hs-varid'>r</span> <span class='hs-varid'>m</span> <span class='hs-keyword'>where</span>
+<a name="line-42"></a>    <span class='hs-layout'>(</span><span class='hs-varop'>*.</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>::</span> <span class='hs-varid'>r</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-varid'>m</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-varid'>m</span>
+<a name="line-43"></a>    
+<a name="line-44"></a><a name="RightModule"></a><span class='hs-comment'>-- | @ (m .* x) * y = m .* (x * y) @</span>
+<a name="line-45"></a><a name="RightModule"></a><span class='hs-keyword'>class</span> <span class='hs-layout'>(</span><span class='hs-conid'>Module</span> <span class='hs-varid'>r</span> <span class='hs-varid'>m</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>RightModule</span> <span class='hs-varid'>r</span> <span class='hs-varid'>m</span> <span class='hs-keyword'>where</span>
+<a name="line-46"></a>    <span class='hs-layout'>(</span><span class='hs-varop'>.*</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>::</span> <span class='hs-varid'>m</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-varid'>r</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-varid'>m</span>
+<a name="line-47"></a>
+<a name="line-48"></a><a name="Bimodule"></a><span class='hs-comment'>-- | @ (x *. m) .* y = x *. (m .* y) @</span>
+<a name="line-49"></a><a name="Bimodule"></a><span class='hs-keyword'>class</span> <span class='hs-layout'>(</span><span class='hs-conid'>LeftModule</span> <span class='hs-varid'>r</span> <span class='hs-varid'>m</span><span class='hs-layout'>,</span> <span class='hs-conid'>RightModule</span> <span class='hs-varid'>r</span> <span class='hs-varid'>m</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>Bimodule</span> <span class='hs-varid'>r</span> <span class='hs-varid'>m</span> 
hunk ./doc/html/monoids/src/Data-Ring-Module.html 59
-<a name="line-51"></a><span class='hs-keyword'>instance</span> <span class='hs-layout'>(</span><span class='hs-conid'>RightModule</span> <span class='hs-varid'>r</span> <span class='hs-varid'>m</span><span class='hs-layout'>,</span> <span class='hs-conid'>RightModule</span> <span class='hs-varid'>r</span> <span class='hs-varid'>n</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>RightModule</span> <span class='hs-varid'>r</span> <span class='hs-layout'>(</span><span class='hs-varid'>m</span><span class='hs-layout'>,</span><span class='hs-varid'>n</span><span class='hs-layout'>)</span> <span class='hs-keyword'>where</span>
-<a name="line-52"></a>    <span class='hs-layout'>(</span><span class='hs-varid'>m</span><span class='hs-layout'>,</span><span class='hs-varid'>n</span><span class='hs-layout'>)</span> <span class='hs-varop'>.*</span> <span class='hs-varid'>r</span> <span class='hs-keyglyph'>=</span> <span class='hs-layout'>(</span><span class='hs-varid'>m</span> <span class='hs-varop'>.*</span> <span class='hs-varid'>r</span><span class='hs-layout'>,</span> <span class='hs-varid'>n</span> <span class='hs-varop'>.*</span> <span class='hs-varid'>r</span><span class='hs-layout'>)</span>
-<a name="line-53"></a><span class='hs-keyword'>instance</span> <span class='hs-layout'>(</span><span class='hs-conid'>RightModule</span> <span class='hs-varid'>r</span> <span class='hs-varid'>m</span><span class='hs-layout'>,</span> <span class='hs-conid'>RightModule</span> <span class='hs-varid'>r</span> <span class='hs-varid'>n</span><span class='hs-layout'>,</span> <span class='hs-conid'>RightModule</span> <span class='hs-varid'>r</span> <span class='hs-varid'>o</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>RightModule</span> <span class='hs-varid'>r</span> <span class='hs-layout'>(</span><span class='hs-varid'>m</span><span class='hs-layout'>,</span><span class='hs-varid'>n</span><span class='hs-layout'>,</span><span class='hs-varid'>o</span><span class='hs-layout'>)</span> <span class='hs-keyword'>where</span>
-<a name="line-54"></a>    <span class='hs-layout'>(</span><span class='hs-varid'>m</span><span class='hs-layout'>,</span><span class='hs-varid'>n</span><span class='hs-layout'>,</span><span class='hs-varid'>o</span><span class='hs-layout'>)</span> <span class='hs-varop'>.*</span> <span class='hs-varid'>r</span> <span class='hs-keyglyph'>=</span> <span class='hs-layout'>(</span><span class='hs-varid'>m</span> <span class='hs-varop'>.*</span> <span class='hs-varid'>r</span><span class='hs-layout'>,</span> <span class='hs-varid'>n</span> <span class='hs-varop'>.*</span> <span class='hs-varid'>r</span><span class='hs-layout'>,</span> <span class='hs-varid'>o</span> <span class='hs-varop'>.*</span> <span class='hs-varid'>r</span><span class='hs-layout'>)</span>
-<a name="line-55"></a><span class='hs-keyword'>instance</span> <span class='hs-layout'>(</span><span class='hs-conid'>RightModule</span> <span class='hs-varid'>r</span> <span class='hs-varid'>m</span><span class='hs-layout'>,</span> <span class='hs-conid'>RightModule</span> <span class='hs-varid'>r</span> <span class='hs-varid'>n</span><span class='hs-layout'>,</span> <span class='hs-conid'>RightModule</span> <span class='hs-varid'>r</span> <span class='hs-varid'>o</span><span class='hs-layout'>,</span> <span class='hs-conid'>RightModule</span> <span class='hs-varid'>r</span> <span class='hs-varid'>p</span> <span class='hs-layout'>)</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>RightModule</span> <span class='hs-varid'>r</span> <span class='hs-layout'>(</span><span class='hs-varid'>m</span><span class='hs-layout'>,</span><span class='hs-varid'>n</span><span class='hs-layout'>,</span><span class='hs-varid'>o</span><span class='hs-layout'>,</span><span class='hs-varid'>p</span><span class='hs-layout'>)</span> <span class='hs-keyword'>where</span>
-<a name="line-56"></a>    <span class='hs-layout'>(</span><span class='hs-varid'>m</span><span class='hs-layout'>,</span><span class='hs-varid'>n</span><span class='hs-layout'>,</span><span class='hs-varid'>o</span><span class='hs-layout'>,</span><span class='hs-varid'>p</span><span class='hs-layout'>)</span> <span class='hs-varop'>.*</span> <span class='hs-varid'>r</span> <span class='hs-keyglyph'>=</span> <span class='hs-layout'>(</span><span class='hs-varid'>m</span> <span class='hs-varop'>.*</span> <span class='hs-varid'>r</span><span class='hs-layout'>,</span> <span class='hs-varid'>n</span> <span class='hs-varop'>.*</span> <span class='hs-varid'>r</span><span class='hs-layout'>,</span> <span class='hs-varid'>o</span> <span class='hs-varop'>.*</span> <span class='hs-varid'>r</span><span class='hs-layout'>,</span> <span class='hs-varid'>p</span> <span class='hs-varop'>.*</span> <span class='hs-varid'>r</span><span class='hs-layout'>)</span>
-<a name="line-57"></a><span class='hs-keyword'>instance</span> <span class='hs-layout'>(</span><span class='hs-conid'>RightModule</span> <span class='hs-varid'>r</span> <span class='hs-varid'>m</span><span class='hs-layout'>,</span> <span class='hs-conid'>RightModule</span> <span class='hs-varid'>r</span> <span class='hs-varid'>n</span><span class='hs-layout'>,</span> <span class='hs-conid'>RightModule</span> <span class='hs-varid'>r</span> <span class='hs-varid'>o</span><span class='hs-layout'>,</span> <span class='hs-conid'>RightModule</span> <span class='hs-varid'>r</span> <span class='hs-varid'>p</span><span class='hs-layout'>,</span> <span class='hs-conid'>RightModule</span> <span class='hs-varid'>r</span> <span class='hs-varid'>q</span> <span class='hs-layout'>)</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>RightModule</span> <span class='hs-varid'>r</span> <span class='hs-layout'>(</span><span class='hs-varid'>m</span><span class='hs-layout'>,</span><span class='hs-varid'>n</span><span class='hs-layout'>,</span><span class='hs-varid'>o</span><span class='hs-layout'>,</span><span class='hs-varid'>p</span><span class='hs-layout'>,</span><span class='hs-varid'>q</span><span class='hs-layout'>)</span> <span class='hs-keyword'>where</span>
-<a name="line-58"></a>    <span class='hs-layout'>(</span><span class='hs-varid'>m</span><span class='hs-layout'>,</span><span class='hs-varid'>n</span><span class='hs-layout'>,</span><span class='hs-varid'>o</span><span class='hs-layout'>,</span><span class='hs-varid'>p</span><span class='hs-layout'>,</span><span class='hs-varid'>q</span><span class='hs-layout'>)</span> <span class='hs-varop'>.*</span> <span class='hs-varid'>r</span> <span class='hs-keyglyph'>=</span> <span class='hs-layout'>(</span><span class='hs-varid'>m</span> <span class='hs-varop'>.*</span> <span class='hs-varid'>r</span><span class='hs-layout'>,</span> <span class='hs-varid'>n</span> <span class='hs-varop'>.*</span> <span class='hs-varid'>r</span><span class='hs-layout'>,</span> <span class='hs-varid'>o</span> <span class='hs-varop'>.*</span> <span class='hs-varid'>r</span><span class='hs-layout'>,</span> <span class='hs-varid'>p</span> <span class='hs-varop'>.*</span> <span class='hs-varid'>r</span><span class='hs-layout'>,</span> <span class='hs-varid'>q</span> <span class='hs-varop'>.*</span> <span class='hs-varid'>r</span><span class='hs-layout'>)</span>
-<a name="line-59"></a>
-<a name="line-60"></a><span class='hs-keyword'>instance</span> <span class='hs-layout'>(</span><span class='hs-conid'>Module</span> <span class='hs-varid'>r</span> <span class='hs-varid'>m</span><span class='hs-layout'>,</span> <span class='hs-conid'>Module</span> <span class='hs-varid'>r</span> <span class='hs-varid'>n</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>Module</span> <span class='hs-varid'>r</span> <span class='hs-layout'>(</span><span class='hs-varid'>m</span><span class='hs-layout'>,</span><span class='hs-varid'>n</span><span class='hs-layout'>)</span>
-<a name="line-61"></a><span class='hs-keyword'>instance</span> <span class='hs-layout'>(</span><span class='hs-conid'>Module</span> <span class='hs-varid'>r</span> <span class='hs-varid'>m</span><span class='hs-layout'>,</span> <span class='hs-conid'>Module</span> <span class='hs-varid'>r</span> <span class='hs-varid'>n</span><span class='hs-layout'>,</span> <span class='hs-conid'>Module</span> <span class='hs-varid'>r</span> <span class='hs-varid'>o</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>Module</span> <span class='hs-varid'>r</span> <span class='hs-layout'>(</span><span class='hs-varid'>m</span><span class='hs-layout'>,</span><span class='hs-varid'>n</span><span class='hs-layout'>,</span><span class='hs-varid'>o</span><span class='hs-layout'>)</span>
-<a name="line-62"></a><span class='hs-keyword'>instance</span> <span class='hs-layout'>(</span><span class='hs-conid'>Module</span> <span class='hs-varid'>r</span> <span class='hs-varid'>m</span><span class='hs-layout'>,</span> <span class='hs-conid'>Module</span> <span class='hs-varid'>r</span> <span class='hs-varid'>n</span><span class='hs-layout'>,</span> <span class='hs-conid'>Module</span> <span class='hs-varid'>r</span> <span class='hs-varid'>o</span><span class='hs-layout'>,</span> <span class='hs-conid'>Module</span> <span class='hs-varid'>r</span> <span class='hs-varid'>p</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>Module</span> <span class='hs-varid'>r</span> <span class='hs-layout'>(</span><span class='hs-varid'>m</span><span class='hs-layout'>,</span><span class='hs-varid'>n</span><span class='hs-layout'>,</span><span class='hs-varid'>o</span><span class='hs-layout'>,</span><span class='hs-varid'>p</span><span class='hs-layout'>)</span>
-<a name="line-63"></a><span class='hs-keyword'>instance</span> <span class='hs-layout'>(</span><span class='hs-conid'>Module</span> <span class='hs-varid'>r</span> <span class='hs-varid'>m</span><span class='hs-layout'>,</span> <span class='hs-conid'>Module</span> <span class='hs-varid'>r</span> <span class='hs-varid'>n</span><span class='hs-layout'>,</span> <span class='hs-conid'>Module</span> <span class='hs-varid'>r</span> <span class='hs-varid'>o</span><span class='hs-layout'>,</span> <span class='hs-conid'>Module</span> <span class='hs-varid'>r</span> <span class='hs-varid'>p</span><span class='hs-layout'>,</span> <span class='hs-conid'>Module</span> <span class='hs-varid'>r</span> <span class='hs-varid'>q</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>Module</span> <span class='hs-varid'>r</span> <span class='hs-layout'>(</span><span class='hs-varid'>m</span><span class='hs-layout'>,</span><span class='hs-varid'>n</span><span class='hs-layout'>,</span><span class='hs-varid'>o</span><span class='hs-layout'>,</span><span class='hs-varid'>p</span><span class='hs-layout'>,</span><span class='hs-varid'>q</span><span class='hs-layout'>)</span>
-<a name="line-64"></a>
-<a name="line-65"></a>
-<a name="line-66"></a><span class='hs-comment'>-- we want an absorbing 0, for that we need a seminearring and a notion of equality</span>
-<a name="line-67"></a><span class='hs-keyword'>instance</span> <span class='hs-layout'>(</span><span class='hs-conid'>HasUnionWith</span> <span class='hs-varid'>f</span><span class='hs-layout'>,</span> <span class='hs-conid'>Ord</span> <span class='hs-varid'>r</span><span class='hs-layout'>,</span> <span class='hs-conid'>Eq</span> <span class='hs-varid'>r</span><span class='hs-layout'>,</span> <span class='hs-conid'>RightSemiNearRing</span> <span class='hs-varid'>r</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>LeftModule</span> <span class='hs-varid'>r</span> <span class='hs-layout'>(</span><span class='hs-conid'>UnionWith</span> <span class='hs-varid'>f</span> <span class='hs-varid'>r</span><span class='hs-layout'>)</span> <span class='hs-keyword'>where</span>
-<a name="line-68"></a>    <span class='hs-varid'>r</span> <span class='hs-varop'>*.</span> <span class='hs-varid'>m</span> <span class='hs-keyglyph'>|</span> <span class='hs-varid'>r</span> <span class='hs-varop'>==</span> <span class='hs-varid'>zero</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>zero</span>
-<a name="line-69"></a>           <span class='hs-keyglyph'>|</span> <span class='hs-varid'>otherwise</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>fmap</span> <span class='hs-layout'>(</span><span class='hs-varid'>r</span> <span class='hs-varop'>`times`</span><span class='hs-layout'>)</span> <span class='hs-varid'>m</span>
-<a name="line-70"></a><span class='hs-keyword'>instance</span> <span class='hs-layout'>(</span><span class='hs-conid'>HasUnionWith</span> <span class='hs-varid'>f</span><span class='hs-layout'>,</span> <span class='hs-conid'>Ord</span> <span class='hs-varid'>r</span><span class='hs-layout'>,</span> <span class='hs-conid'>Eq</span> <span class='hs-varid'>r</span><span class='hs-layout'>,</span> <span class='hs-conid'>RightSemiNearRing</span> <span class='hs-varid'>r</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>RightModule</span> <span class='hs-varid'>r</span> <span class='hs-layout'>(</span><span class='hs-conid'>UnionWith</span> <span class='hs-varid'>f</span> <span class='hs-varid'>r</span><span class='hs-layout'>)</span> <span class='hs-keyword'>where</span>
-<a name="line-71"></a>    <span class='hs-varid'>m</span> <span class='hs-varop'>.*</span> <span class='hs-varid'>r</span> <span class='hs-keyglyph'>|</span> <span class='hs-varid'>r</span> <span class='hs-varop'>==</span> <span class='hs-varid'>zero</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>zero</span>
-<a name="line-72"></a>           <span class='hs-keyglyph'>|</span> <span class='hs-varid'>otherwise</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>fmap</span> <span class='hs-layout'>(</span><span class='hs-varop'>`times`</span> <span class='hs-varid'>r</span><span class='hs-layout'>)</span> <span class='hs-varid'>m</span>
-<a name="line-73"></a><span class='hs-keyword'>instance</span> <span class='hs-layout'>(</span><span class='hs-conid'>HasUnionWith</span> <span class='hs-varid'>f</span><span class='hs-layout'>,</span> <span class='hs-conid'>Ord</span> <span class='hs-varid'>r</span><span class='hs-layout'>,</span> <span class='hs-conid'>Eq</span> <span class='hs-varid'>r</span><span class='hs-layout'>,</span> <span class='hs-conid'>RightSemiNearRing</span> <span class='hs-varid'>r</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>Module</span> <span class='hs-varid'>r</span> <span class='hs-layout'>(</span><span class='hs-conid'>UnionWith</span> <span class='hs-varid'>f</span> <span class='hs-varid'>r</span><span class='hs-layout'>)</span> <span class='hs-keyword'>where</span>
+<a name="line-51"></a><a name="VectorSpace"></a><span class='hs-keyword'>class</span> <span class='hs-layout'>(</span><span class='hs-conid'>Field</span> <span class='hs-varid'>f</span><span class='hs-layout'>,</span> <span class='hs-conid'>Module</span> <span class='hs-varid'>f</span> <span class='hs-varid'>g</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>VectorSpace</span> <span class='hs-varid'>f</span> <span class='hs-varid'>g</span>
+<a name="line-52"></a>
+<a name="line-53"></a><a name="Normed"></a><span class='hs-comment'>-- | An r-normed module m satisfies:</span>
+<a name="line-54"></a><a name="Normed"></a><span class='hs-comment'>--</span>
+<a name="line-55"></a><a name="Normed"></a><span class='hs-comment'>-- (1) @mabs m &gt;= 0@</span>
+<a name="line-56"></a><a name="Normed"></a><span class='hs-comment'>--</span>
+<a name="line-57"></a><a name="Normed"></a><span class='hs-comment'>-- 2 @mabs m == zero{-_r-} =&gt; m == zero{-_m-}@</span>
+<a name="line-58"></a><a name="Normed"></a><span class='hs-comment'>--</span>
+<a name="line-59"></a><a name="Normed"></a><span class='hs-comment'>-- 3 @mabs (m + n) &lt;= mabs m + mabs n@</span>
+<a name="line-60"></a><a name="Normed"></a><span class='hs-comment'>--</span>
+<a name="line-61"></a><a name="Normed"></a><span class='hs-comment'>-- 4 @r * mabs m = mabs (r *. m) -- if m is an r-LeftModule@</span>
+<a name="line-62"></a><a name="Normed"></a><span class='hs-comment'>--</span>
+<a name="line-63"></a><a name="Normed"></a><span class='hs-comment'>-- 5 @mabs m * r = mabs (m .* r) -- if m is an r-RightModule@</span>
+<a name="line-64"></a><a name="Normed"></a><span class='hs-keyword'>class</span> <span class='hs-conid'>Module</span> <span class='hs-varid'>r</span> <span class='hs-varid'>m</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>Normed</span> <span class='hs-varid'>r</span> <span class='hs-varid'>m</span> <span class='hs-keyword'>where</span>
+<a name="line-65"></a>    <span class='hs-varid'>mabs</span> <span class='hs-keyglyph'>::</span> <span class='hs-varid'>m</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-varid'>r</span>
+<a name="line-66"></a>
+<a name="line-67"></a><a name="Algebra"></a><span class='hs-comment'>-- | Algebra over a (near) (semi) ring.</span>
+<a name="line-68"></a><a name="Algebra"></a><span class='hs-comment'>-- @r *. (x * y) = (r *. x) * y = x * (r *. y)@</span>
+<a name="line-69"></a><a name="Algebra"></a><span class='hs-comment'>-- @(x * y) .* r = y * (x .* r) = (y .* r) * x@</span>
+<a name="line-70"></a><a name="Algebra"></a><span class='hs-keyword'>class</span> <span class='hs-layout'>(</span><span class='hs-varid'>r</span> <span class='hs-varop'>`Bimodule`</span> <span class='hs-varid'>m</span><span class='hs-layout'>,</span> <span class='hs-conid'>Multiplicative</span> <span class='hs-varid'>m</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>Algebra</span> <span class='hs-varid'>r</span> <span class='hs-varid'>m</span> 
+<a name="line-71"></a>
+<a name="line-72"></a><span class='hs-keyword'>instance</span> <span class='hs-layout'>(</span><span class='hs-conid'>Module</span> <span class='hs-varid'>r</span> <span class='hs-varid'>m</span><span class='hs-layout'>,</span> <span class='hs-conid'>Module</span> <span class='hs-varid'>r</span> <span class='hs-varid'>n</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>Module</span> <span class='hs-varid'>r</span> <span class='hs-layout'>(</span><span class='hs-varid'>m</span><span class='hs-layout'>,</span><span class='hs-varid'>n</span><span class='hs-layout'>)</span>
+<a name="line-73"></a><span class='hs-keyword'>instance</span> <span class='hs-layout'>(</span><span class='hs-conid'>Module</span> <span class='hs-varid'>r</span> <span class='hs-varid'>m</span><span class='hs-layout'>,</span> <span class='hs-conid'>Module</span> <span class='hs-varid'>r</span> <span class='hs-varid'>n</span><span class='hs-layout'>,</span> <span class='hs-conid'>Module</span> <span class='hs-varid'>r</span> <span class='hs-varid'>o</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>Module</span> <span class='hs-varid'>r</span> <span class='hs-layout'>(</span><span class='hs-varid'>m</span><span class='hs-layout'>,</span><span class='hs-varid'>n</span><span class='hs-layout'>,</span><span class='hs-varid'>o</span><span class='hs-layout'>)</span>
+<a name="line-74"></a><span class='hs-keyword'>instance</span> <span class='hs-layout'>(</span><span class='hs-conid'>Module</span> <span class='hs-varid'>r</span> <span class='hs-varid'>m</span><span class='hs-layout'>,</span> <span class='hs-conid'>Module</span> <span class='hs-varid'>r</span> <span class='hs-varid'>n</span><span class='hs-layout'>,</span> <span class='hs-conid'>Module</span> <span class='hs-varid'>r</span> <span class='hs-varid'>o</span><span class='hs-layout'>,</span> <span class='hs-conid'>Module</span> <span class='hs-varid'>r</span> <span class='hs-varid'>p</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>Module</span> <span class='hs-varid'>r</span> <span class='hs-layout'>(</span><span class='hs-varid'>m</span><span class='hs-layout'>,</span><span class='hs-varid'>n</span><span class='hs-layout'>,</span><span class='hs-varid'>o</span><span class='hs-layout'>,</span><span class='hs-varid'>p</span><span class='hs-layout'>)</span>
+<a name="line-75"></a><span class='hs-keyword'>instance</span> <span class='hs-layout'>(</span><span class='hs-conid'>Module</span> <span class='hs-varid'>r</span> <span class='hs-varid'>m</span><span class='hs-layout'>,</span> <span class='hs-conid'>Module</span> <span class='hs-varid'>r</span> <span class='hs-varid'>n</span><span class='hs-layout'>,</span> <span class='hs-conid'>Module</span> <span class='hs-varid'>r</span> <span class='hs-varid'>o</span><span class='hs-layout'>,</span> <span class='hs-conid'>Module</span> <span class='hs-varid'>r</span> <span class='hs-varid'>p</span><span class='hs-layout'>,</span> <span class='hs-conid'>Module</span> <span class='hs-varid'>r</span> <span class='hs-varid'>q</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>Module</span> <span class='hs-varid'>r</span> <span class='hs-layout'>(</span><span class='hs-varid'>m</span><span class='hs-layout'>,</span><span class='hs-varid'>n</span><span class='hs-layout'>,</span><span class='hs-varid'>o</span><span class='hs-layout'>,</span><span class='hs-varid'>p</span><span class='hs-layout'>,</span><span class='hs-varid'>q</span><span class='hs-layout'>)</span>
+<a name="line-76"></a>
+<a name="line-77"></a><span class='hs-keyword'>instance</span> <span class='hs-layout'>(</span><span class='hs-conid'>LeftModule</span> <span class='hs-varid'>r</span> <span class='hs-varid'>m</span><span class='hs-layout'>,</span> <span class='hs-conid'>LeftModule</span> <span class='hs-varid'>r</span> <span class='hs-varid'>n</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>LeftModule</span> <span class='hs-varid'>r</span> <span class='hs-layout'>(</span><span class='hs-varid'>m</span><span class='hs-layout'>,</span><span class='hs-varid'>n</span><span class='hs-layout'>)</span> <span class='hs-keyword'>where</span>
+<a name="line-78"></a>    <span class='hs-varid'>r</span> <span class='hs-varop'>*.</span> <span class='hs-layout'>(</span><span class='hs-varid'>m</span><span class='hs-layout'>,</span><span class='hs-varid'>n</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=</span> <span class='hs-layout'>(</span><span class='hs-varid'>r</span> <span class='hs-varop'>*.</span> <span class='hs-varid'>m</span><span class='hs-layout'>,</span> <span class='hs-varid'>r</span> <span class='hs-varop'>*.</span> <span class='hs-varid'>n</span><span class='hs-layout'>)</span>
+<a name="line-79"></a><span class='hs-keyword'>instance</span> <span class='hs-layout'>(</span><span class='hs-conid'>LeftModule</span> <span class='hs-varid'>r</span> <span class='hs-varid'>m</span><span class='hs-layout'>,</span> <span class='hs-conid'>LeftModule</span> <span class='hs-varid'>r</span> <span class='hs-varid'>n</span><span class='hs-layout'>,</span> <span class='hs-conid'>LeftModule</span> <span class='hs-varid'>r</span> <span class='hs-varid'>o</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>LeftModule</span> <span class='hs-varid'>r</span> <span class='hs-layout'>(</span><span class='hs-varid'>m</span><span class='hs-layout'>,</span><span class='hs-varid'>n</span><span class='hs-layout'>,</span><span class='hs-varid'>o</span><span class='hs-layout'>)</span> <span class='hs-keyword'>where</span>
+<a name="line-80"></a>    <span class='hs-varid'>r</span> <span class='hs-varop'>*.</span> <span class='hs-layout'>(</span><span class='hs-varid'>m</span><span class='hs-layout'>,</span><span class='hs-varid'>n</span><span class='hs-layout'>,</span><span class='hs-varid'>o</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=</span> <span class='hs-layout'>(</span><span class='hs-varid'>r</span> <span class='hs-varop'>*.</span> <span class='hs-varid'>m</span><span class='hs-layout'>,</span> <span class='hs-varid'>r</span> <span class='hs-varop'>*.</span> <span class='hs-varid'>n</span><span class='hs-layout'>,</span> <span class='hs-varid'>r</span> <span class='hs-varop'>*.</span> <span class='hs-varid'>o</span><span class='hs-layout'>)</span>
+<a name="line-81"></a><span class='hs-keyword'>instance</span> <span class='hs-layout'>(</span><span class='hs-conid'>LeftModule</span> <span class='hs-varid'>r</span> <span class='hs-varid'>m</span><span class='hs-layout'>,</span> <span class='hs-conid'>LeftModule</span> <span class='hs-varid'>r</span> <span class='hs-varid'>n</span><span class='hs-layout'>,</span> <span class='hs-conid'>LeftModule</span> <span class='hs-varid'>r</span> <span class='hs-varid'>o</span><span class='hs-layout'>,</span> <span class='hs-conid'>LeftModule</span> <span class='hs-varid'>r</span> <span class='hs-varid'>p</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>LeftModule</span> <span class='hs-varid'>r</span> <span class='hs-layout'>(</span><span class='hs-varid'>m</span><span class='hs-layout'>,</span><span class='hs-varid'>n</span><span class='hs-layout'>,</span><span class='hs-varid'>o</span><span class='hs-layout'>,</span><span class='hs-varid'>p</span><span class='hs-layout'>)</span> <span class='hs-keyword'>where</span>
+<a name="line-82"></a>    <span class='hs-varid'>r</span> <span class='hs-varop'>*.</span> <span class='hs-layout'>(</span><span class='hs-varid'>m</span><span class='hs-layout'>,</span><span class='hs-varid'>n</span><span class='hs-layout'>,</span><span class='hs-varid'>o</span><span class='hs-layout'>,</span><span class='hs-varid'>p</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=</span> <span class='hs-layout'>(</span><span class='hs-varid'>r</span> <span class='hs-varop'>*.</span> <span class='hs-varid'>m</span><span class='hs-layout'>,</span> <span class='hs-varid'>r</span> <span class='hs-varop'>*.</span> <span class='hs-varid'>n</span><span class='hs-layout'>,</span> <span class='hs-varid'>r</span> <span class='hs-varop'>*.</span> <span class='hs-varid'>o</span><span class='hs-layout'>,</span> <span class='hs-varid'>r</span> <span class='hs-varop'>*.</span> <span class='hs-varid'>p</span><span class='hs-layout'>)</span>
+<a name="line-83"></a><span class='hs-keyword'>instance</span> <span class='hs-layout'>(</span><span class='hs-conid'>LeftModule</span> <span class='hs-varid'>r</span> <span class='hs-varid'>m</span><span class='hs-layout'>,</span> <span class='hs-conid'>LeftModule</span> <span class='hs-varid'>r</span> <span class='hs-varid'>n</span><span class='hs-layout'>,</span> <span class='hs-conid'>LeftModule</span> <span class='hs-varid'>r</span> <span class='hs-varid'>o</span><span class='hs-layout'>,</span> <span class='hs-conid'>LeftModule</span> <span class='hs-varid'>r</span> <span class='hs-varid'>p</span><span class='hs-layout'>,</span> <span class='hs-conid'>LeftModule</span> <span class='hs-varid'>r</span> <span class='hs-varid'>q</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>LeftModule</span> <span class='hs-varid'>r</span> <span class='hs-layout'>(</span><span class='hs-varid'>m</span><span class='hs-layout'>,</span><span class='hs-varid'>n</span><span class='hs-layout'>,</span><span class='hs-varid'>o</span><span class='hs-layout'>,</span><span class='hs-varid'>p</span><span class='hs-layout'>,</span><span class='hs-varid'>q</span><span class='hs-layout'>)</span> <span class='hs-keyword'>where</span>
+<a name="line-84"></a>    <span class='hs-varid'>r</span> <span class='hs-varop'>*.</span> <span class='hs-layout'>(</span><span class='hs-varid'>m</span><span class='hs-layout'>,</span><span class='hs-varid'>n</span><span class='hs-layout'>,</span><span class='hs-varid'>o</span><span class='hs-layout'>,</span><span class='hs-varid'>p</span><span class='hs-layout'>,</span><span class='hs-varid'>q</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=</span> <span class='hs-layout'>(</span><span class='hs-varid'>r</span> <span class='hs-varop'>*.</span> <span class='hs-varid'>m</span><span class='hs-layout'>,</span> <span class='hs-varid'>r</span> <span class='hs-varop'>*.</span> <span class='hs-varid'>n</span><span class='hs-layout'>,</span> <span class='hs-varid'>r</span> <span class='hs-varop'>*.</span> <span class='hs-varid'>o</span><span class='hs-layout'>,</span> <span class='hs-varid'>r</span> <span class='hs-varop'>*.</span> <span class='hs-varid'>p</span><span class='hs-layout'>,</span> <span class='hs-varid'>r</span> <span class='hs-varop'>*.</span> <span class='hs-varid'>q</span><span class='hs-layout'>)</span>
+<a name="line-85"></a>
+<a name="line-86"></a><span class='hs-keyword'>instance</span> <span class='hs-layout'>(</span><span class='hs-conid'>RightModule</span> <span class='hs-varid'>r</span> <span class='hs-varid'>m</span><span class='hs-layout'>,</span> <span class='hs-conid'>RightModule</span> <span class='hs-varid'>r</span> <span class='hs-varid'>n</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>RightModule</span> <span class='hs-varid'>r</span> <span class='hs-layout'>(</span><span class='hs-varid'>m</span><span class='hs-layout'>,</span><span class='hs-varid'>n</span><span class='hs-layout'>)</span> <span class='hs-keyword'>where</span>
+<a name="line-87"></a>    <span class='hs-layout'>(</span><span class='hs-varid'>m</span><span class='hs-layout'>,</span><span class='hs-varid'>n</span><span class='hs-layout'>)</span> <span class='hs-varop'>.*</span> <span class='hs-varid'>r</span> <span class='hs-keyglyph'>=</span> <span class='hs-layout'>(</span><span class='hs-varid'>m</span> <span class='hs-varop'>.*</span> <span class='hs-varid'>r</span><span class='hs-layout'>,</span> <span class='hs-varid'>n</span> <span class='hs-varop'>.*</span> <span class='hs-varid'>r</span><span class='hs-layout'>)</span>
+<a name="line-88"></a><span class='hs-keyword'>instance</span> <span class='hs-layout'>(</span><span class='hs-conid'>RightModule</span> <span class='hs-varid'>r</span> <span class='hs-varid'>m</span><span class='hs-layout'>,</span> <span class='hs-conid'>RightModule</span> <span class='hs-varid'>r</span> <span class='hs-varid'>n</span><span class='hs-layout'>,</span> <span class='hs-conid'>RightModule</span> <span class='hs-varid'>r</span> <span class='hs-varid'>o</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>RightModule</span> <span class='hs-varid'>r</span> <span class='hs-layout'>(</span><span class='hs-varid'>m</span><span class='hs-layout'>,</span><span class='hs-varid'>n</span><span class='hs-layout'>,</span><span class='hs-varid'>o</span><span class='hs-layout'>)</span> <span class='hs-keyword'>where</span>
+<a name="line-89"></a>    <span class='hs-layout'>(</span><span class='hs-varid'>m</span><span class='hs-layout'>,</span><span class='hs-varid'>n</span><span class='hs-layout'>,</span><span class='hs-varid'>o</span><span class='hs-layout'>)</span> <span class='hs-varop'>.*</span> <span class='hs-varid'>r</span> <span class='hs-keyglyph'>=</span> <span class='hs-layout'>(</span><span class='hs-varid'>m</span> <span class='hs-varop'>.*</span> <span class='hs-varid'>r</span><span class='hs-layout'>,</span> <span class='hs-varid'>n</span> <span class='hs-varop'>.*</span> <span class='hs-varid'>r</span><span class='hs-layout'>,</span> <span class='hs-varid'>o</span> <span class='hs-varop'>.*</span> <span class='hs-varid'>r</span><span class='hs-layout'>)</span>
+<a name="line-90"></a><span class='hs-keyword'>instance</span> <span class='hs-layout'>(</span><span class='hs-conid'>RightModule</span> <span class='hs-varid'>r</span> <span class='hs-varid'>m</span><span class='hs-layout'>,</span> <span class='hs-conid'>RightModule</span> <span class='hs-varid'>r</span> <span class='hs-varid'>n</span><span class='hs-layout'>,</span> <span class='hs-conid'>RightModule</span> <span class='hs-varid'>r</span> <span class='hs-varid'>o</span><span class='hs-layout'>,</span> <span class='hs-conid'>RightModule</span> <span class='hs-varid'>r</span> <span class='hs-varid'>p</span> <span class='hs-layout'>)</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>RightModule</span> <span class='hs-varid'>r</span> <span class='hs-layout'>(</span><span class='hs-varid'>m</span><span class='hs-layout'>,</span><span class='hs-varid'>n</span><span class='hs-layout'>,</span><span class='hs-varid'>o</span><span class='hs-layout'>,</span><span class='hs-varid'>p</span><span class='hs-layout'>)</span> <span class='hs-keyword'>where</span>
+<a name="line-91"></a>    <span class='hs-layout'>(</span><span class='hs-varid'>m</span><span class='hs-layout'>,</span><span class='hs-varid'>n</span><span class='hs-layout'>,</span><span class='hs-varid'>o</span><span class='hs-layout'>,</span><span class='hs-varid'>p</span><span class='hs-layout'>)</span> <span class='hs-varop'>.*</span> <span class='hs-varid'>r</span> <span class='hs-keyglyph'>=</span> <span class='hs-layout'>(</span><span class='hs-varid'>m</span> <span class='hs-varop'>.*</span> <span class='hs-varid'>r</span><span class='hs-layout'>,</span> <span class='hs-varid'>n</span> <span class='hs-varop'>.*</span> <span class='hs-varid'>r</span><span class='hs-layout'>,</span> <span class='hs-varid'>o</span> <span class='hs-varop'>.*</span> <span class='hs-varid'>r</span><span class='hs-layout'>,</span> <span class='hs-varid'>p</span> <span class='hs-varop'>.*</span> <span class='hs-varid'>r</span><span class='hs-layout'>)</span>
+<a name="line-92"></a><span class='hs-keyword'>instance</span> <span class='hs-layout'>(</span><span class='hs-conid'>RightModule</span> <span class='hs-varid'>r</span> <span class='hs-varid'>m</span><span class='hs-layout'>,</span> <span class='hs-conid'>RightModule</span> <span class='hs-varid'>r</span> <span class='hs-varid'>n</span><span class='hs-layout'>,</span> <span class='hs-conid'>RightModule</span> <span class='hs-varid'>r</span> <span class='hs-varid'>o</span><span class='hs-layout'>,</span> <span class='hs-conid'>RightModule</span> <span class='hs-varid'>r</span> <span class='hs-varid'>p</span><span class='hs-layout'>,</span> <span class='hs-conid'>RightModule</span> <span class='hs-varid'>r</span> <span class='hs-varid'>q</span> <span class='hs-layout'>)</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>RightModule</span> <span class='hs-varid'>r</span> <span class='hs-layout'>(</span><span class='hs-varid'>m</span><span class='hs-layout'>,</span><span class='hs-varid'>n</span><span class='hs-layout'>,</span><span class='hs-varid'>o</span><span class='hs-layout'>,</span><span class='hs-varid'>p</span><span class='hs-layout'>,</span><span class='hs-varid'>q</span><span class='hs-layout'>)</span> <span class='hs-keyword'>where</span>
+<a name="line-93"></a>    <span class='hs-layout'>(</span><span class='hs-varid'>m</span><span class='hs-layout'>,</span><span class='hs-varid'>n</span><span class='hs-layout'>,</span><span class='hs-varid'>o</span><span class='hs-layout'>,</span><span class='hs-varid'>p</span><span class='hs-layout'>,</span><span class='hs-varid'>q</span><span class='hs-layout'>)</span> <span class='hs-varop'>.*</span> <span class='hs-varid'>r</span> <span class='hs-keyglyph'>=</span> <span class='hs-layout'>(</span><span class='hs-varid'>m</span> <span class='hs-varop'>.*</span> <span class='hs-varid'>r</span><span class='hs-layout'>,</span> <span class='hs-varid'>n</span> <span class='hs-varop'>.*</span> <span class='hs-varid'>r</span><span class='hs-layout'>,</span> <span class='hs-varid'>o</span> <span class='hs-varop'>.*</span> <span class='hs-varid'>r</span><span class='hs-layout'>,</span> <span class='hs-varid'>p</span> <span class='hs-varop'>.*</span> <span class='hs-varid'>r</span><span class='hs-layout'>,</span> <span class='hs-varid'>q</span> <span class='hs-varop'>.*</span> <span class='hs-varid'>r</span><span class='hs-layout'>)</span>
+<a name="line-94"></a>
+<a name="line-95"></a><span class='hs-keyword'>instance</span> <span class='hs-layout'>(</span><span class='hs-conid'>Bimodule</span> <span class='hs-varid'>r</span> <span class='hs-varid'>m</span><span class='hs-layout'>,</span> <span class='hs-conid'>Bimodule</span> <span class='hs-varid'>r</span> <span class='hs-varid'>n</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>Bimodule</span> <span class='hs-varid'>r</span> <span class='hs-layout'>(</span><span class='hs-varid'>m</span><span class='hs-layout'>,</span><span class='hs-varid'>n</span><span class='hs-layout'>)</span>
+<a name="line-96"></a><span class='hs-keyword'>instance</span> <span class='hs-layout'>(</span><span class='hs-conid'>Bimodule</span> <span class='hs-varid'>r</span> <span class='hs-varid'>m</span><span class='hs-layout'>,</span> <span class='hs-conid'>Bimodule</span> <span class='hs-varid'>r</span> <span class='hs-varid'>n</span><span class='hs-layout'>,</span> <span class='hs-conid'>Bimodule</span> <span class='hs-varid'>r</span> <span class='hs-varid'>o</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>Bimodule</span> <span class='hs-varid'>r</span> <span class='hs-layout'>(</span><span class='hs-varid'>m</span><span class='hs-layout'>,</span><span class='hs-varid'>n</span><span class='hs-layout'>,</span><span class='hs-varid'>o</span><span class='hs-layout'>)</span>
+<a name="line-97"></a><span class='hs-keyword'>instance</span> <span class='hs-layout'>(</span><span class='hs-conid'>Bimodule</span> <span class='hs-varid'>r</span> <span class='hs-varid'>m</span><span class='hs-layout'>,</span> <span class='hs-conid'>Bimodule</span> <span class='hs-varid'>r</span> <span class='hs-varid'>n</span><span class='hs-layout'>,</span> <span class='hs-conid'>Bimodule</span> <span class='hs-varid'>r</span> <span class='hs-varid'>o</span><span class='hs-layout'>,</span> <span class='hs-conid'>Bimodule</span> <span class='hs-varid'>r</span> <span class='hs-varid'>p</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>Bimodule</span> <span class='hs-varid'>r</span> <span class='hs-layout'>(</span><span class='hs-varid'>m</span><span class='hs-layout'>,</span><span class='hs-varid'>n</span><span class='hs-layout'>,</span><span class='hs-varid'>o</span><span class='hs-layout'>,</span><span class='hs-varid'>p</span><span class='hs-layout'>)</span>
+<a name="line-98"></a><span class='hs-keyword'>instance</span> <span class='hs-layout'>(</span><span class='hs-conid'>Bimodule</span> <span class='hs-varid'>r</span> <span class='hs-varid'>m</span><span class='hs-layout'>,</span> <span class='hs-conid'>Bimodule</span> <span class='hs-varid'>r</span> <span class='hs-varid'>n</span><span class='hs-layout'>,</span> <span class='hs-conid'>Bimodule</span> <span class='hs-varid'>r</span> <span class='hs-varid'>o</span><span class='hs-layout'>,</span> <span class='hs-conid'>Bimodule</span> <span class='hs-varid'>r</span> <span class='hs-varid'>p</span><span class='hs-layout'>,</span> <span class='hs-conid'>Bimodule</span> <span class='hs-varid'>r</span> <span class='hs-varid'>q</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>Bimodule</span> <span class='hs-varid'>r</span> <span class='hs-layout'>(</span><span class='hs-varid'>m</span><span class='hs-layout'>,</span><span class='hs-varid'>n</span><span class='hs-layout'>,</span><span class='hs-varid'>o</span><span class='hs-layout'>,</span><span class='hs-varid'>p</span><span class='hs-layout'>,</span><span class='hs-varid'>q</span><span class='hs-layout'>)</span>
+<a name="line-99"></a>
+<a name="line-100"></a><span class='hs-comment'>-- we want an absorbing 0, for that we need a seminearring and a notion of equality</span>
+<a name="line-101"></a><span class='hs-keyword'>instance</span> <span class='hs-layout'>(</span><span class='hs-conid'>HasUnionWith</span> <span class='hs-varid'>f</span><span class='hs-layout'>,</span> <span class='hs-conid'>Ord</span> <span class='hs-varid'>r</span><span class='hs-layout'>,</span> <span class='hs-conid'>Eq</span> <span class='hs-varid'>r</span><span class='hs-layout'>,</span> <span class='hs-conid'>RightSemiNearRing</span> <span class='hs-varid'>r</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>LeftModule</span> <span class='hs-varid'>r</span> <span class='hs-layout'>(</span><span class='hs-conid'>UnionWith</span> <span class='hs-varid'>f</span> <span class='hs-varid'>r</span><span class='hs-layout'>)</span> <span class='hs-keyword'>where</span>
+<a name="line-102"></a>    <span class='hs-varid'>r</span> <span class='hs-varop'>*.</span> <span class='hs-varid'>m</span> <span class='hs-keyglyph'>|</span> <span class='hs-varid'>r</span> <span class='hs-varop'>==</span> <span class='hs-varid'>zero</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>zero</span>
+<a name="line-103"></a>           <span class='hs-keyglyph'>|</span> <span class='hs-varid'>otherwise</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>fmap</span> <span class='hs-layout'>(</span><span class='hs-varid'>r</span> <span class='hs-varop'>`times`</span><span class='hs-layout'>)</span> <span class='hs-varid'>m</span>
+<a name="line-104"></a><span class='hs-keyword'>instance</span> <span class='hs-layout'>(</span><span class='hs-conid'>HasUnionWith</span> <span class='hs-varid'>f</span><span class='hs-layout'>,</span> <span class='hs-conid'>Ord</span> <span class='hs-varid'>r</span><span class='hs-layout'>,</span> <span class='hs-conid'>Eq</span> <span class='hs-varid'>r</span><span class='hs-layout'>,</span> <span class='hs-conid'>RightSemiNearRing</span> <span class='hs-varid'>r</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>RightModule</span> <span class='hs-varid'>r</span> <span class='hs-layout'>(</span><span class='hs-conid'>UnionWith</span> <span class='hs-varid'>f</span> <span class='hs-varid'>r</span><span class='hs-layout'>)</span> <span class='hs-keyword'>where</span>
+<a name="line-105"></a>    <span class='hs-varid'>m</span> <span class='hs-varop'>.*</span> <span class='hs-varid'>r</span> <span class='hs-keyglyph'>|</span> <span class='hs-varid'>r</span> <span class='hs-varop'>==</span> <span class='hs-varid'>zero</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>zero</span>
+<a name="line-106"></a>           <span class='hs-keyglyph'>|</span> <span class='hs-varid'>otherwise</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>fmap</span> <span class='hs-layout'>(</span><span class='hs-varop'>`times`</span> <span class='hs-varid'>r</span><span class='hs-layout'>)</span> <span class='hs-varid'>m</span>
+<a name="line-107"></a><span class='hs-keyword'>instance</span> <span class='hs-layout'>(</span><span class='hs-conid'>HasUnionWith</span> <span class='hs-varid'>f</span><span class='hs-layout'>,</span> <span class='hs-conid'>Ord</span> <span class='hs-varid'>r</span><span class='hs-layout'>,</span> <span class='hs-conid'>Eq</span> <span class='hs-varid'>r</span><span class='hs-layout'>,</span> <span class='hs-conid'>RightSemiNearRing</span> <span class='hs-varid'>r</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>Module</span> <span class='hs-varid'>r</span> <span class='hs-layout'>(</span><span class='hs-conid'>UnionWith</span> <span class='hs-varid'>f</span> <span class='hs-varid'>r</span><span class='hs-layout'>)</span> <span class='hs-keyword'>where</span>
hunk ./doc/html/monoids/src/Data-Ring-Semi-BitSet.html 24
-<a name="line-16"></a><span class='hs-comment'>-- enumeration</span>
-<a name="line-17"></a><span class='hs-comment'>--</span>
-<a name="line-18"></a><span class='hs-comment'>-------------------------------------------------------------------------------</span>
-<a name="line-19"></a>
-<a name="line-20"></a><span class='hs-keyword'>module</span> <span class='hs-conid'>Data</span><span class='hs-varop'>.</span><span class='hs-conid'>Ring</span><span class='hs-varop'>.</span><span class='hs-conid'>Semi</span><span class='hs-varop'>.</span><span class='hs-conid'>BitSet</span>
-<a name="line-21"></a>    <span class='hs-layout'>(</span> <span class='hs-keyword'>module</span> <span class='hs-conid'>Data</span><span class='hs-varop'>.</span><span class='hs-conid'>Monoid</span><span class='hs-varop'>.</span><span class='hs-conid'>Reducer</span>
-<a name="line-22"></a>    <span class='hs-layout'>,</span> <span class='hs-keyword'>module</span> <span class='hs-conid'>Data</span><span class='hs-varop'>.</span><span class='hs-conid'>Ring</span><span class='hs-varop'>.</span><span class='hs-conid'>Semi</span>
-<a name="line-23"></a>    <span class='hs-comment'>-- * BitSet</span>
-<a name="line-24"></a>    <span class='hs-layout'>,</span> <span class='hs-conid'>BitSet</span>
-<a name="line-25"></a>    <span class='hs-comment'>-- * Manipulation</span>
-<a name="line-26"></a>    <span class='hs-layout'>,</span> <span class='hs-varid'>empty</span>
-<a name="line-27"></a>    <span class='hs-layout'>,</span> <span class='hs-varid'>singleton</span>
-<a name="line-28"></a>    <span class='hs-layout'>,</span> <span class='hs-varid'>full</span>
-<a name="line-29"></a>    <span class='hs-layout'>,</span> <span class='hs-varid'>union</span>
-<a name="line-30"></a>    <span class='hs-layout'>,</span> <span class='hs-varid'>intersection</span>
-<a name="line-31"></a>    <span class='hs-layout'>,</span> <span class='hs-varid'>complement</span>
-<a name="line-32"></a>    <span class='hs-layout'>,</span> <span class='hs-varid'>insert</span>
-<a name="line-33"></a>    <span class='hs-layout'>,</span> <span class='hs-varid'>delete</span>
-<a name="line-34"></a>    <span class='hs-layout'>,</span> <span class='hs-layout'>(</span><span class='hs-varop'>\\</span><span class='hs-layout'>)</span>
-<a name="line-35"></a>    <span class='hs-layout'>,</span> <span class='hs-varid'>fromList</span>
-<a name="line-36"></a>    <span class='hs-layout'>,</span> <span class='hs-varid'>fromDistinctAscList</span>
-<a name="line-37"></a>    <span class='hs-comment'>-- * Acessors</span>
-<a name="line-38"></a>    <span class='hs-layout'>,</span> <span class='hs-varid'>member</span>
-<a name="line-39"></a>    <span class='hs-layout'>,</span> <span class='hs-varid'>null</span>
-<a name="line-40"></a>    <span class='hs-layout'>,</span> <span class='hs-varid'>size</span>
-<a name="line-41"></a>    <span class='hs-layout'>,</span> <span class='hs-varid'>isComplemented</span>
-<a name="line-42"></a>    <span class='hs-layout'>,</span> <span class='hs-varid'>toInteger</span>
-<a name="line-43"></a>    <span class='hs-layout'>)</span> <span class='hs-keyword'>where</span>
-<a name="line-44"></a>
-<a name="line-45"></a><span class='hs-keyword'>import</span> <span class='hs-conid'>Prelude</span> <span class='hs-varid'>hiding</span> <span class='hs-layout'>(</span> <span class='hs-varid'>null</span><span class='hs-layout'>,</span> <span class='hs-varid'>exponent</span><span class='hs-layout'>,</span> <span class='hs-varid'>toInteger</span><span class='hs-layout'>,</span> <span class='hs-varid'>foldl</span><span class='hs-layout'>,</span> <span class='hs-varid'>foldr</span><span class='hs-layout'>,</span> <span class='hs-varid'>foldl1</span><span class='hs-layout'>,</span> <span class='hs-varid'>foldr1</span> <span class='hs-layout'>)</span>
-<a name="line-46"></a><span class='hs-keyword'>import</span> <span class='hs-conid'>Data</span><span class='hs-varop'>.</span><span class='hs-conid'>Bits</span> <span class='hs-varid'>hiding</span> <span class='hs-layout'>(</span> <span class='hs-varid'>complement</span> <span class='hs-layout'>)</span>
-<a name="line-47"></a><span class='hs-keyword'>import</span> <span class='hs-keyword'>qualified</span> <span class='hs-conid'>Data</span><span class='hs-varop'>.</span><span class='hs-conid'>Bits</span> <span class='hs-keyword'>as</span> <span class='hs-conid'>Bits</span>
+<a name="line-16"></a><span class='hs-comment'>-- enumeration. Treated as a Boolean semiring over `.&amp;.`/`.|.`. To get a</span>
+<a name="line-17"></a><span class='hs-comment'>-- 'Boolean' 'Ring', use @'Boolean' ('BitSet' a)@.</span>
+<a name="line-18"></a><span class='hs-comment'>--</span>
+<a name="line-19"></a><span class='hs-comment'>-------------------------------------------------------------------------------</span>
+<a name="line-20"></a>
+<a name="line-21"></a><span class='hs-keyword'>module</span> <span class='hs-conid'>Data</span><span class='hs-varop'>.</span><span class='hs-conid'>Ring</span><span class='hs-varop'>.</span><span class='hs-conid'>Semi</span><span class='hs-varop'>.</span><span class='hs-conid'>BitSet</span>
+<a name="line-22"></a>    <span class='hs-layout'>(</span> <span class='hs-keyword'>module</span> <span class='hs-conid'>Data</span><span class='hs-varop'>.</span><span class='hs-conid'>Monoid</span><span class='hs-varop'>.</span><span class='hs-conid'>Reducer</span>
+<a name="line-23"></a>    <span class='hs-layout'>,</span> <span class='hs-keyword'>module</span> <span class='hs-conid'>Data</span><span class='hs-varop'>.</span><span class='hs-conid'>Ring</span>
+<a name="line-24"></a>    <span class='hs-comment'>-- * BitSet</span>
+<a name="line-25"></a>    <span class='hs-layout'>,</span> <span class='hs-conid'>BitSet</span>
+<a name="line-26"></a>    <span class='hs-comment'>-- * Manipulation</span>
+<a name="line-27"></a>    <span class='hs-layout'>,</span> <span class='hs-varid'>empty</span>
+<a name="line-28"></a>    <span class='hs-layout'>,</span> <span class='hs-varid'>singleton</span>
+<a name="line-29"></a>    <span class='hs-layout'>,</span> <span class='hs-varid'>full</span>
+<a name="line-30"></a>    <span class='hs-layout'>,</span> <span class='hs-varid'>union</span>
+<a name="line-31"></a>    <span class='hs-layout'>,</span> <span class='hs-varid'>intersection</span>
+<a name="line-32"></a>    <span class='hs-layout'>,</span> <span class='hs-varid'>complement</span>
+<a name="line-33"></a>    <span class='hs-layout'>,</span> <span class='hs-varid'>insert</span>
+<a name="line-34"></a>    <span class='hs-layout'>,</span> <span class='hs-varid'>delete</span>
+<a name="line-35"></a>    <span class='hs-layout'>,</span> <span class='hs-layout'>(</span><span class='hs-varop'>\\</span><span class='hs-layout'>)</span>
+<a name="line-36"></a>    <span class='hs-layout'>,</span> <span class='hs-varid'>fromList</span>
+<a name="line-37"></a>    <span class='hs-layout'>,</span> <span class='hs-varid'>fromDistinctAscList</span>
+<a name="line-38"></a>    <span class='hs-comment'>-- * Acessors</span>
+<a name="line-39"></a>    <span class='hs-layout'>,</span> <span class='hs-varid'>member</span>
+<a name="line-40"></a>    <span class='hs-layout'>,</span> <span class='hs-varid'>null</span>
+<a name="line-41"></a>    <span class='hs-layout'>,</span> <span class='hs-varid'>size</span>
+<a name="line-42"></a>    <span class='hs-layout'>,</span> <span class='hs-varid'>isComplemented</span>
+<a name="line-43"></a>    <span class='hs-layout'>,</span> <span class='hs-varid'>toInteger</span>
+<a name="line-44"></a>    <span class='hs-layout'>)</span> <span class='hs-keyword'>where</span>
+<a name="line-45"></a>
+<a name="line-46"></a><span class='hs-keyword'>import</span> <span class='hs-conid'>Prelude</span> <span class='hs-varid'>hiding</span> <span class='hs-layout'>(</span> <span class='hs-varid'>null</span><span class='hs-layout'>,</span> <span class='hs-varid'>exponent</span><span class='hs-layout'>,</span> <span class='hs-varid'>toInteger</span><span class='hs-layout'>,</span> <span class='hs-varid'>foldl</span><span class='hs-layout'>,</span> <span class='hs-varid'>foldr</span><span class='hs-layout'>,</span> <span class='hs-varid'>foldl1</span><span class='hs-layout'>,</span> <span class='hs-varid'>foldr1</span> <span class='hs-layout'>)</span>
+<a name="line-47"></a><span class='hs-keyword'>import</span> <span class='hs-conid'>Data</span><span class='hs-varop'>.</span><span class='hs-conid'>Bits</span>
hunk ./doc/html/monoids/src/Data-Ring-Semi-BitSet.html 59
-<a name="line-51"></a><span class='hs-keyword'>import</span> <span class='hs-conid'>Data</span><span class='hs-varop'>.</span><span class='hs-conid'>Ring</span><span class='hs-varop'>.</span><span class='hs-conid'>Semi</span>
+<a name="line-51"></a><span class='hs-keyword'>import</span> <span class='hs-conid'>Data</span><span class='hs-varop'>.</span><span class='hs-conid'>Ring</span>
hunk ./doc/html/monoids/src/Data-Ring-Semi-BitSet.html 62
-<a name="line-54"></a><span class='hs-keyword'>import</span> <span class='hs-conid'>Data</span><span class='hs-varop'>.</span><span class='hs-conid'>Ring</span><span class='hs-varop'>.</span><span class='hs-conid'>Algebra</span>
+<a name="line-54"></a><span class='hs-keyword'>import</span> <span class='hs-conid'>Data</span><span class='hs-varop'>.</span><span class='hs-conid'>Ring</span><span class='hs-varop'>.</span><span class='hs-conid'>Module</span>
hunk ./doc/html/monoids/src/Data-Ring-Semi-BitSet.html 139
-<a name="line-131"></a><span class='hs-definition'>full</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>complement</span> <span class='hs-varid'>empty</span> 
+<a name="line-131"></a><span class='hs-definition'>full</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>complement'</span> <span class='hs-varid'>empty</span> 
hunk ./doc/html/monoids/src/Data-Ring-Semi-BitSet.html 142
-<a name="line-134"></a><a name="complement"></a><span class='hs-comment'>-- | /O(d)/ Complements a 'BitSet' with respect to the bounds of @a@. Preserves order of 'null' and 'size'</span>
-<a name="line-135"></a><span class='hs-definition'>complement</span> <span class='hs-keyglyph'>::</span> <span class='hs-layout'>(</span><span class='hs-conid'>Enum</span> <span class='hs-varid'>a</span><span class='hs-layout'>,</span> <span class='hs-conid'>Bounded</span> <span class='hs-varid'>a</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>BitSet</span> <span class='hs-varid'>a</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-conid'>BitSet</span> <span class='hs-varid'>a</span> 
-<a name="line-136"></a><span class='hs-definition'>complement</span> <span class='hs-varid'>r</span><span class='hs-keyglyph'>@</span><span class='hs-layout'>(</span><span class='hs-conid'>BS</span> <span class='hs-varid'>a</span> <span class='hs-varid'>b</span> <span class='hs-varid'>c</span> <span class='hs-varid'>l</span> <span class='hs-varid'>h</span> <span class='hs-varid'>m</span> <span class='hs-keyword'>_</span> <span class='hs-varid'>f</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>BS</span> <span class='hs-layout'>(</span><span class='hs-conid'>Bits</span><span class='hs-varop'>.</span><span class='hs-varid'>complement</span> <span class='hs-varid'>b</span><span class='hs-layout'>)</span> <span class='hs-layout'>(</span><span class='hs-conid'>Bits</span><span class='hs-varop'>.</span><span class='hs-varid'>complement</span> <span class='hs-varid'>a</span><span class='hs-layout'>)</span> <span class='hs-layout'>(</span><span class='hs-conid'>Bits</span><span class='hs-varop'>.</span><span class='hs-varid'>complement</span> <span class='hs-varid'>c</span><span class='hs-layout'>)</span> <span class='hs-varid'>l</span> <span class='hs-varid'>h</span> <span class='hs-layout'>(</span><span class='hs-conid'>Bits</span><span class='hs-varop'>.</span><span class='hs-varid'>complement</span> <span class='hs-varid'>m</span><span class='hs-layout'>)</span> <span class='hs-varid'>u</span> <span class='hs-varid'>f</span> <span class='hs-keyword'>where</span>
-<a name="line-137"></a>    <span class='hs-varid'>u</span> <span class='hs-keyglyph'>=</span> <span class='hs-layout'>(</span><span class='hs-varid'>fromEnum</span> <span class='hs-layout'>(</span><span class='hs-varid'>minBound</span> <span class='hs-varop'>`asArgTypeOf`</span> <span class='hs-varid'>r</span><span class='hs-layout'>)</span><span class='hs-layout'>,</span> <span class='hs-varid'>fromEnum</span> <span class='hs-layout'>(</span><span class='hs-varid'>maxBound</span> <span class='hs-varop'>`asArgTypeOf`</span> <span class='hs-varid'>r</span><span class='hs-layout'>)</span><span class='hs-layout'>)</span>
-<a name="line-138"></a><span class='hs-comment'>{-# INLINE complement #-}</span>
+<a name="line-134"></a>
+<a name="line-135"></a><a name="recomplement"></a><span class='hs-comment'>-- | /O(d)/ unsafe internal method: complement a set that has already been complemented at least once.</span>
+<a name="line-136"></a><span class='hs-definition'>recomplement</span> <span class='hs-keyglyph'>::</span> <span class='hs-conid'>BitSet</span> <span class='hs-varid'>a</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-conid'>BitSet</span> <span class='hs-varid'>a</span> 
+<a name="line-137"></a><span class='hs-definition'>recomplement</span> <span class='hs-layout'>(</span><span class='hs-conid'>BS</span> <span class='hs-varid'>a</span> <span class='hs-varid'>b</span> <span class='hs-varid'>c</span> <span class='hs-varid'>l</span> <span class='hs-varid'>h</span> <span class='hs-varid'>m</span> <span class='hs-varid'>u</span> <span class='hs-varid'>f</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>BS</span> <span class='hs-layout'>(</span><span class='hs-varid'>complement</span> <span class='hs-varid'>b</span><span class='hs-layout'>)</span> <span class='hs-layout'>(</span><span class='hs-varid'>complement</span> <span class='hs-varid'>a</span><span class='hs-layout'>)</span> <span class='hs-layout'>(</span><span class='hs-varid'>complement</span> <span class='hs-varid'>c</span><span class='hs-layout'>)</span> <span class='hs-varid'>l</span> <span class='hs-varid'>h</span> <span class='hs-layout'>(</span><span class='hs-varid'>complement</span> <span class='hs-varid'>m</span><span class='hs-layout'>)</span> <span class='hs-varid'>u</span> <span class='hs-varid'>f</span>
+<a name="line-138"></a><span class='hs-comment'>{-# INLINE recomplement #-}</span>
hunk ./doc/html/monoids/src/Data-Ring-Semi-BitSet.html 148
-<a name="line-140"></a><a name="recomplement"></a><span class='hs-comment'>-- | /O(d)/ unsafe internal method: complement a set that has already been complemented at least once.</span>
-<a name="line-141"></a><span class='hs-definition'>recomplement</span> <span class='hs-keyglyph'>::</span> <span class='hs-conid'>BitSet</span> <span class='hs-varid'>a</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-conid'>BitSet</span> <span class='hs-varid'>a</span> 
-<a name="line-142"></a><span class='hs-definition'>recomplement</span> <span class='hs-layout'>(</span><span class='hs-conid'>BS</span> <span class='hs-varid'>a</span> <span class='hs-varid'>b</span> <span class='hs-varid'>c</span> <span class='hs-varid'>l</span> <span class='hs-varid'>h</span> <span class='hs-varid'>m</span> <span class='hs-varid'>u</span> <span class='hs-varid'>f</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>BS</span> <span class='hs-layout'>(</span><span class='hs-conid'>Bits</span><span class='hs-varop'>.</span><span class='hs-varid'>complement</span> <span class='hs-varid'>b</span><span class='hs-layout'>)</span> <span class='hs-layout'>(</span><span class='hs-conid'>Bits</span><span class='hs-varop'>.</span><span class='hs-varid'>complement</span> <span class='hs-varid'>a</span><span class='hs-layout'>)</span> <span class='hs-layout'>(</span><span class='hs-conid'>Bits</span><span class='hs-varop'>.</span><span class='hs-varid'>complement</span> <span class='hs-varid'>c</span><span class='hs-layout'>)</span> <span class='hs-varid'>l</span> <span class='hs-varid'>h</span> <span class='hs-layout'>(</span><span class='hs-conid'>Bits</span><span class='hs-varop'>.</span><span class='hs-varid'>complement</span> <span class='hs-varid'>m</span><span class='hs-layout'>)</span> <span class='hs-varid'>u</span> <span class='hs-varid'>f</span>
-<a name="line-143"></a><span class='hs-comment'>{-# INLINE recomplement #-}</span>
+<a name="line-140"></a><a name="pseudoComplement"></a><span class='hs-comment'>-- | /O(d)/ unsafe internal method: complement a set that has already been complemented at least once.</span>
+<a name="line-141"></a><span class='hs-definition'>pseudoComplement</span> <span class='hs-keyglyph'>::</span> <span class='hs-conid'>BitSet</span> <span class='hs-varid'>a</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-layout'>(</span><span class='hs-conid'>Int</span><span class='hs-layout'>,</span><span class='hs-conid'>Int</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-conid'>BitSet</span> <span class='hs-varid'>a</span> 
+<a name="line-142"></a><span class='hs-definition'>pseudoComplement</span> <span class='hs-layout'>(</span><span class='hs-conid'>BS</span> <span class='hs-varid'>a</span> <span class='hs-varid'>b</span> <span class='hs-varid'>c</span> <span class='hs-varid'>l</span> <span class='hs-varid'>h</span> <span class='hs-varid'>m</span> <span class='hs-keyword'>_</span> <span class='hs-varid'>f</span><span class='hs-layout'>)</span> <span class='hs-varid'>u</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>BS</span> <span class='hs-layout'>(</span><span class='hs-varid'>complement</span> <span class='hs-varid'>b</span><span class='hs-layout'>)</span> <span class='hs-layout'>(</span><span class='hs-varid'>complement</span> <span class='hs-varid'>a</span><span class='hs-layout'>)</span> <span class='hs-layout'>(</span><span class='hs-varid'>complement</span> <span class='hs-varid'>c</span><span class='hs-layout'>)</span> <span class='hs-varid'>l</span> <span class='hs-varid'>h</span> <span class='hs-layout'>(</span><span class='hs-varid'>complement</span> <span class='hs-varid'>m</span><span class='hs-layout'>)</span> <span class='hs-varid'>u</span> <span class='hs-varid'>f</span>
+<a name="line-143"></a><span class='hs-comment'>{-# INLINE pseudoComplement #-}</span>
hunk ./doc/html/monoids/src/Data-Ring-Semi-BitSet.html 153
-<a name="line-145"></a><a name="pseudoComplement"></a><span class='hs-comment'>-- | /O(d)/ unsafe internal method: complement a set that has already been complemented at least once.</span>
-<a name="line-146"></a><span class='hs-definition'>pseudoComplement</span> <span class='hs-keyglyph'>::</span> <span class='hs-conid'>BitSet</span> <span class='hs-varid'>a</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-layout'>(</span><span class='hs-conid'>Int</span><span class='hs-layout'>,</span><span class='hs-conid'>Int</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-conid'>BitSet</span> <span class='hs-varid'>a</span> 
-<a name="line-147"></a><span class='hs-definition'>pseudoComplement</span> <span class='hs-layout'>(</span><span class='hs-conid'>BS</span> <span class='hs-varid'>a</span> <span class='hs-varid'>b</span> <span class='hs-varid'>c</span> <span class='hs-varid'>l</span> <span class='hs-varid'>h</span> <span class='hs-varid'>m</span> <span class='hs-keyword'>_</span> <span class='hs-varid'>f</span><span class='hs-layout'>)</span> <span class='hs-varid'>u</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>BS</span> <span class='hs-layout'>(</span><span class='hs-conid'>Bits</span><span class='hs-varop'>.</span><span class='hs-varid'>complement</span> <span class='hs-varid'>b</span><span class='hs-layout'>)</span> <span class='hs-layout'>(</span><span class='hs-conid'>Bits</span><span class='hs-varop'>.</span><span class='hs-varid'>complement</span> <span class='hs-varid'>a</span><span class='hs-layout'>)</span> <span class='hs-layout'>(</span><span class='hs-conid'>Bits</span><span class='hs-varop'>.</span><span class='hs-varid'>complement</span> <span class='hs-varid'>c</span><span class='hs-layout'>)</span> <span class='hs-varid'>l</span> <span class='hs-varid'>h</span> <span class='hs-layout'>(</span><span class='hs-conid'>Bits</span><span class='hs-varop'>.</span><span class='hs-varid'>complement</span> <span class='hs-varid'>m</span><span class='hs-layout'>)</span> <span class='hs-varid'>u</span> <span class='hs-varid'>f</span>
-<a name="line-148"></a><span class='hs-comment'>{-# INLINE pseudoComplement #-}</span>
+<a name="line-145"></a><a name="fromList"></a><span class='hs-comment'>-- | /O(d * n)/ Make a 'BitSet' from a list of items.</span>
+<a name="line-146"></a><span class='hs-definition'>fromList</span> <span class='hs-keyglyph'>::</span> <span class='hs-conid'>Enum</span> <span class='hs-varid'>a</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-keyglyph'>[</span><span class='hs-varid'>a</span><span class='hs-keyglyph'>]</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-conid'>BitSet</span> <span class='hs-varid'>a</span>
+<a name="line-147"></a><span class='hs-definition'>fromList</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>foldr</span> <span class='hs-varid'>insert</span> <span class='hs-varid'>empty</span> 
+<a name="line-148"></a><span class='hs-comment'>{-# INLINE fromList #-}</span>
hunk ./doc/html/monoids/src/Data-Ring-Semi-BitSet.html 158
-<a name="line-150"></a><a name="fromList"></a><span class='hs-comment'>-- | /O(d * n)/ Make a 'BitSet' from a list of items.</span>
-<a name="line-151"></a><span class='hs-definition'>fromList</span> <span class='hs-keyglyph'>::</span> <span class='hs-conid'>Enum</span> <span class='hs-varid'>a</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-keyglyph'>[</span><span class='hs-varid'>a</span><span class='hs-keyglyph'>]</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-conid'>BitSet</span> <span class='hs-varid'>a</span>
-<a name="line-152"></a><span class='hs-definition'>fromList</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>foldr</span> <span class='hs-varid'>insert</span> <span class='hs-varid'>empty</span> 
-<a name="line-153"></a><span class='hs-comment'>{-# INLINE fromList #-}</span>
-<a name="line-154"></a>
-<a name="line-155"></a><a name="fromDistinctAscList"></a><span class='hs-comment'>-- | /O(d * n)/ Make a 'BitSet' from a distinct ascending list of items</span>
-<a name="line-156"></a><span class='hs-definition'>fromDistinctAscList</span> <span class='hs-keyglyph'>::</span> <span class='hs-conid'>Enum</span> <span class='hs-varid'>a</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-keyglyph'>[</span><span class='hs-varid'>a</span><span class='hs-keyglyph'>]</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-conid'>BitSet</span> <span class='hs-varid'>a</span> 
-<a name="line-157"></a><span class='hs-definition'>fromDistinctAscList</span> <span class='hs-conid'>[]</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>empty</span>
-<a name="line-158"></a><span class='hs-definition'>fromDistinctAscList</span> <span class='hs-layout'>(</span><span class='hs-varid'>c</span><span class='hs-conop'>:</span><span class='hs-varid'>cs</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>fromDistinctAscList'</span> <span class='hs-varid'>cs</span> <span class='hs-num'>1</span> <span class='hs-num'>0</span> <span class='hs-num'>1</span> 
-<a name="line-159"></a>    <span class='hs-keyword'>where</span>
-<a name="line-160"></a>        <span class='hs-varid'>l</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>fromEnum</span> <span class='hs-varid'>c</span>
-<a name="line-161"></a>        <span class='hs-varid'>fromDistinctAscList'</span> <span class='hs-keyglyph'>::</span> <span class='hs-conid'>Enum</span> <span class='hs-varid'>a</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-keyglyph'>[</span><span class='hs-varid'>a</span><span class='hs-keyglyph'>]</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-conid'>Int</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-conid'>Int</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-conid'>Integer</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-conid'>BitSet</span> <span class='hs-varid'>a</span>
-<a name="line-162"></a>        <span class='hs-varid'>fromDistinctAscList'</span> <span class='hs-conid'>[]</span> <span class='hs-varop'>!</span><span class='hs-varid'>n</span> <span class='hs-varop'>!</span><span class='hs-varid'>h</span> <span class='hs-varop'>!</span><span class='hs-varid'>m</span>  <span class='hs-keyglyph'>=</span> <span class='hs-conid'>BS</span> <span class='hs-varid'>n</span> <span class='hs-varid'>n</span> <span class='hs-varid'>n</span> <span class='hs-varid'>l</span> <span class='hs-varid'>h</span> <span class='hs-varid'>m</span> <span class='hs-varid'>undefined</span> <span class='hs-varid'>toEnum</span>
-<a name="line-163"></a>        <span class='hs-varid'>fromDistinctAscList'</span> <span class='hs-layout'>(</span><span class='hs-varid'>c'</span><span class='hs-conop'>:</span><span class='hs-varid'>cs'</span><span class='hs-layout'>)</span> <span class='hs-varop'>!</span><span class='hs-varid'>n</span> <span class='hs-keyword'>_</span> <span class='hs-varop'>!</span><span class='hs-varid'>m</span> <span class='hs-keyglyph'>=</span> 
-<a name="line-164"></a>            <span class='hs-keyword'>let</span> <span class='hs-varid'>h'</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>fromEnum</span> <span class='hs-varid'>c'</span> <span class='hs-keyword'>in</span> 
-<a name="line-165"></a>            <span class='hs-varid'>fromDistinctAscList'</span> <span class='hs-varid'>cs'</span> <span class='hs-layout'>(</span><span class='hs-varid'>n</span><span class='hs-varop'>+</span><span class='hs-num'>1</span><span class='hs-layout'>)</span> <span class='hs-varid'>h'</span> <span class='hs-layout'>(</span><span class='hs-varid'>setBit</span> <span class='hs-varid'>m</span> <span class='hs-layout'>(</span><span class='hs-varid'>h'</span> <span class='hs-comment'>-</span> <span class='hs-varid'>l</span><span class='hs-layout'>)</span><span class='hs-layout'>)</span>
-<a name="line-166"></a><span class='hs-comment'>{-# INLINE fromDistinctAscList #-}</span>
-<a name="line-167"></a>
-<a name="line-168"></a><a name="insert"></a><span class='hs-comment'>-- | /O(d)/ Insert a single element of type @a@ into the 'BitSet'. Preserves order of 'null' and 'size'</span>
-<a name="line-169"></a><span class='hs-definition'>insert</span> <span class='hs-keyglyph'>::</span> <span class='hs-conid'>Enum</span> <span class='hs-varid'>a</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-varid'>a</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-conid'>BitSet</span> <span class='hs-varid'>a</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-conid'>BitSet</span> <span class='hs-varid'>a</span>
-<a name="line-170"></a><span class='hs-definition'>insert</span> <span class='hs-varid'>x</span> <span class='hs-varid'>r</span><span class='hs-keyglyph'>@</span><span class='hs-layout'>(</span><span class='hs-conid'>BS</span> <span class='hs-varid'>a</span> <span class='hs-varid'>b</span> <span class='hs-varid'>c</span> <span class='hs-varid'>l</span> <span class='hs-varid'>h</span> <span class='hs-varid'>m</span> <span class='hs-varid'>u</span> <span class='hs-keyword'>_</span><span class='hs-layout'>)</span>  
-<a name="line-171"></a>    <span class='hs-keyglyph'>|</span> <span class='hs-varid'>m</span> <span class='hs-varop'>&lt;</span> <span class='hs-num'>0</span><span class='hs-layout'>,</span> <span class='hs-varid'>e</span> <span class='hs-varop'>&lt;</span> <span class='hs-varid'>l</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>r</span> 
-<a name="line-172"></a>    <span class='hs-keyglyph'>|</span> <span class='hs-varid'>m</span> <span class='hs-varop'>&lt;</span> <span class='hs-num'>0</span><span class='hs-layout'>,</span> <span class='hs-varid'>e</span> <span class='hs-varop'>&gt;</span> <span class='hs-varid'>h</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>r</span>
-<a name="line-173"></a>    <span class='hs-keyglyph'>|</span> <span class='hs-varid'>b</span> <span class='hs-varop'>==</span> <span class='hs-num'>0</span>       <span class='hs-keyglyph'>=</span> <span class='hs-varid'>singleton</span> <span class='hs-varid'>x</span>
-<a name="line-174"></a>    <span class='hs-keyglyph'>|</span> <span class='hs-varid'>a</span> <span class='hs-varop'>==</span> <span class='hs-comment'>-</span><span class='hs-num'>1</span>      <span class='hs-keyglyph'>=</span> <span class='hs-varid'>r</span>
-<a name="line-175"></a>    <span class='hs-keyglyph'>|</span> <span class='hs-varid'>e</span> <span class='hs-varop'>&lt;</span> <span class='hs-varid'>l</span>        <span class='hs-keyglyph'>=</span> <span class='hs-varid'>bs</span> <span class='hs-layout'>(</span><span class='hs-varid'>a</span><span class='hs-varop'>+</span><span class='hs-num'>1</span><span class='hs-layout'>)</span> <span class='hs-layout'>(</span><span class='hs-varid'>b</span><span class='hs-varop'>+</span><span class='hs-num'>1</span><span class='hs-layout'>)</span> <span class='hs-layout'>(</span><span class='hs-varid'>c</span><span class='hs-varop'>+</span><span class='hs-num'>1</span><span class='hs-layout'>)</span> <span class='hs-varid'>e</span> <span class='hs-varid'>h</span> <span class='hs-layout'>(</span><span class='hs-varid'>shiftL</span> <span class='hs-varid'>m</span> <span class='hs-layout'>(</span><span class='hs-varid'>l</span> <span class='hs-comment'>-</span> <span class='hs-varid'>e</span><span class='hs-layout'>)</span> <span class='hs-varop'>.|.</span> <span class='hs-num'>1</span><span class='hs-layout'>)</span> <span class='hs-varid'>u</span>
-<a name="line-176"></a>    <span class='hs-keyglyph'>|</span> <span class='hs-varid'>e</span> <span class='hs-varop'>&gt;</span> <span class='hs-varid'>h</span>        <span class='hs-keyglyph'>=</span> <span class='hs-varid'>bs</span> <span class='hs-layout'>(</span><span class='hs-varid'>a</span><span class='hs-varop'>+</span><span class='hs-num'>1</span><span class='hs-layout'>)</span> <span class='hs-layout'>(</span><span class='hs-varid'>b</span><span class='hs-varop'>+</span><span class='hs-num'>1</span><span class='hs-layout'>)</span> <span class='hs-layout'>(</span><span class='hs-varid'>c</span><span class='hs-varop'>+</span><span class='hs-num'>1</span><span class='hs-layout'>)</span> <span class='hs-varid'>l</span> <span class='hs-varid'>p</span> <span class='hs-layout'>(</span><span class='hs-varid'>setBit</span> <span class='hs-varid'>m</span> <span class='hs-varid'>p</span><span class='hs-layout'>)</span> <span class='hs-varid'>u</span>
-<a name="line-177"></a>    <span class='hs-keyglyph'>|</span> <span class='hs-varid'>testBit</span> <span class='hs-varid'>m</span> <span class='hs-varid'>p</span>  <span class='hs-keyglyph'>=</span> <span class='hs-varid'>r</span> 
-<a name="line-178"></a>    <span class='hs-keyglyph'>|</span> <span class='hs-varid'>otherwise</span>    <span class='hs-keyglyph'>=</span> <span class='hs-varid'>bs</span> <span class='hs-layout'>(</span><span class='hs-varid'>a</span><span class='hs-varop'>+</span><span class='hs-num'>1</span><span class='hs-layout'>)</span> <span class='hs-layout'>(</span><span class='hs-varid'>b</span><span class='hs-varop'>+</span><span class='hs-num'>1</span><span class='hs-layout'>)</span> <span class='hs-layout'>(</span><span class='hs-varid'>c</span><span class='hs-varop'>+</span><span class='hs-num'>1</span><span class='hs-layout'>)</span> <span class='hs-varid'>l</span> <span class='hs-varid'>h</span> <span class='hs-layout'>(</span><span class='hs-varid'>setBit</span> <span class='hs-varid'>m</span> <span class='hs-varid'>p</span><span class='hs-layout'>)</span> <span class='hs-varid'>u</span>
-<a name="line-179"></a>    <span class='hs-keyword'>where</span> 
-<a name="line-180"></a>        <span class='hs-varid'>e</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>fromEnum</span> <span class='hs-varid'>x</span>
-<a name="line-181"></a>        <span class='hs-varid'>p</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>e</span> <span class='hs-comment'>-</span> <span class='hs-varid'>l</span> 
-<a name="line-182"></a><span class='hs-comment'>{-# INLINE insert #-}</span>
-<a name="line-183"></a>
-<a name="line-184"></a><a name="delete"></a><span class='hs-comment'>-- | /O(d)/ Delete a single item from the 'BitSet'. Preserves order of 'null' and 'size'</span>
-<a name="line-185"></a><span class='hs-definition'>delete</span> <span class='hs-keyglyph'>::</span> <span class='hs-conid'>Enum</span> <span class='hs-varid'>a</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-varid'>a</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-conid'>BitSet</span> <span class='hs-varid'>a</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-conid'>BitSet</span> <span class='hs-varid'>a</span>
-<a name="line-186"></a><span class='hs-definition'>delete</span> <span class='hs-varid'>x</span> <span class='hs-varid'>r</span><span class='hs-keyglyph'>@</span><span class='hs-layout'>(</span><span class='hs-conid'>BS</span> <span class='hs-varid'>a</span> <span class='hs-varid'>b</span> <span class='hs-varid'>c</span> <span class='hs-varid'>l</span> <span class='hs-varid'>h</span> <span class='hs-varid'>m</span> <span class='hs-varid'>u</span> <span class='hs-keyword'>_</span><span class='hs-layout'>)</span> 
-<a name="line-187"></a>    <span class='hs-keyglyph'>|</span> <span class='hs-varid'>m</span> <span class='hs-varop'>&lt;</span> <span class='hs-num'>0</span><span class='hs-layout'>,</span> <span class='hs-varid'>e</span> <span class='hs-varop'>&lt;</span> <span class='hs-varid'>l</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>bs</span> <span class='hs-layout'>(</span><span class='hs-varid'>a</span><span class='hs-varop'>+</span><span class='hs-num'>1</span><span class='hs-layout'>)</span> <span class='hs-layout'>(</span><span class='hs-varid'>b</span><span class='hs-varop'>+</span><span class='hs-num'>1</span><span class='hs-layout'>)</span> <span class='hs-layout'>(</span><span class='hs-varid'>c</span><span class='hs-varop'>+</span><span class='hs-num'>1</span><span class='hs-layout'>)</span> <span class='hs-varid'>e</span> <span class='hs-varid'>h</span> <span class='hs-layout'>(</span><span class='hs-varid'>shiftL</span> <span class='hs-varid'>m</span> <span class='hs-layout'>(</span><span class='hs-varid'>l</span> <span class='hs-comment'>-</span> <span class='hs-varid'>e</span><span class='hs-layout'>)</span> <span class='hs-varop'>.&amp;.</span> <span class='hs-conid'>Bits</span><span class='hs-varop'>.</span><span class='hs-varid'>complement</span> <span class='hs-num'>1</span><span class='hs-layout'>)</span> <span class='hs-varid'>u</span>
-<a name="line-188"></a>    <span class='hs-keyglyph'>|</span> <span class='hs-varid'>m</span> <span class='hs-varop'>&lt;</span> <span class='hs-num'>0</span><span class='hs-layout'>,</span> <span class='hs-varid'>e</span> <span class='hs-varop'>&gt;</span> <span class='hs-varid'>h</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>bs</span> <span class='hs-layout'>(</span><span class='hs-varid'>a</span><span class='hs-varop'>+</span><span class='hs-num'>1</span><span class='hs-layout'>)</span> <span class='hs-layout'>(</span><span class='hs-varid'>b</span><span class='hs-varop'>+</span><span class='hs-num'>1</span><span class='hs-layout'>)</span> <span class='hs-layout'>(</span><span class='hs-varid'>c</span><span class='hs-varop'>+</span><span class='hs-num'>1</span><span class='hs-layout'>)</span> <span class='hs-varid'>l</span> <span class='hs-varid'>p</span> <span class='hs-layout'>(</span><span class='hs-varid'>clearBit</span> <span class='hs-varid'>m</span> <span class='hs-varid'>p</span><span class='hs-layout'>)</span> <span class='hs-varid'>u</span>
-<a name="line-189"></a>    <span class='hs-keyglyph'>|</span> <span class='hs-varid'>b</span> <span class='hs-varop'>==</span> <span class='hs-num'>0</span>       <span class='hs-keyglyph'>=</span> <span class='hs-varid'>r</span>
-<a name="line-190"></a>    <span class='hs-keyglyph'>|</span> <span class='hs-varid'>a</span> <span class='hs-varop'>==</span> <span class='hs-comment'>-</span><span class='hs-num'>1</span>      <span class='hs-keyglyph'>=</span> <span class='hs-varid'>pseudoComplement</span> <span class='hs-layout'>(</span><span class='hs-varid'>singleton</span> <span class='hs-varid'>x</span><span class='hs-layout'>)</span> <span class='hs-varid'>u</span>
-<a name="line-191"></a>    <span class='hs-keyglyph'>|</span> <span class='hs-varid'>e</span> <span class='hs-varop'>&lt;</span> <span class='hs-varid'>l</span>        <span class='hs-keyglyph'>=</span> <span class='hs-varid'>r</span>
-<a name="line-192"></a>    <span class='hs-keyglyph'>|</span> <span class='hs-varid'>e</span> <span class='hs-varop'>&gt;</span> <span class='hs-varid'>h</span>        <span class='hs-keyglyph'>=</span> <span class='hs-varid'>r</span>
-<a name="line-193"></a>    <span class='hs-keyglyph'>|</span> <span class='hs-varid'>testBit</span> <span class='hs-varid'>m</span> <span class='hs-varid'>p</span>  <span class='hs-keyglyph'>=</span> <span class='hs-varid'>bs</span> <span class='hs-layout'>(</span><span class='hs-varid'>a</span><span class='hs-comment'>-</span><span class='hs-num'>1</span><span class='hs-layout'>)</span> <span class='hs-layout'>(</span><span class='hs-varid'>b</span><span class='hs-comment'>-</span><span class='hs-num'>1</span><span class='hs-layout'>)</span> <span class='hs-layout'>(</span><span class='hs-varid'>c</span><span class='hs-comment'>-</span><span class='hs-num'>1</span><span class='hs-layout'>)</span> <span class='hs-varid'>l</span> <span class='hs-varid'>h</span> <span class='hs-layout'>(</span><span class='hs-varid'>clearBit</span> <span class='hs-varid'>m</span> <span class='hs-varid'>p</span><span class='hs-layout'>)</span> <span class='hs-varid'>u</span>
-<a name="line-194"></a>    <span class='hs-keyglyph'>|</span> <span class='hs-varid'>otherwise</span>    <span class='hs-keyglyph'>=</span> <span class='hs-varid'>r</span>
-<a name="line-195"></a>    <span class='hs-keyword'>where</span> 
-<a name="line-196"></a>        <span class='hs-varid'>e</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>fromEnum</span> <span class='hs-varid'>x</span>
-<a name="line-197"></a>        <span class='hs-varid'>p</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>e</span> <span class='hs-comment'>-</span> <span class='hs-varid'>l</span>
-<a name="line-198"></a><span class='hs-comment'>{-# INLINE delete #-}</span>
-<a name="line-199"></a>
-<a name="line-200"></a><a name="member"></a><span class='hs-comment'>-- | /O(1)/ Test for membership in a 'BitSet'</span>
-<a name="line-201"></a><span class='hs-definition'>member</span> <span class='hs-keyglyph'>::</span> <span class='hs-conid'>Enum</span> <span class='hs-varid'>a</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-varid'>a</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-conid'>BitSet</span> <span class='hs-varid'>a</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-conid'>Bool</span>
-<a name="line-202"></a><span class='hs-definition'>member</span> <span class='hs-varid'>x</span> <span class='hs-layout'>(</span><span class='hs-conid'>BS</span> <span class='hs-keyword'>_</span> <span class='hs-keyword'>_</span> <span class='hs-keyword'>_</span> <span class='hs-varid'>l</span> <span class='hs-varid'>h</span> <span class='hs-varid'>m</span> <span class='hs-keyword'>_</span> <span class='hs-keyword'>_</span><span class='hs-layout'>)</span> 
-<a name="line-203"></a>    <span class='hs-keyglyph'>|</span> <span class='hs-varid'>e</span> <span class='hs-varop'>&lt;</span> <span class='hs-varid'>l</span>     <span class='hs-keyglyph'>=</span> <span class='hs-varid'>m</span> <span class='hs-varop'>&lt;</span> <span class='hs-num'>0</span> 
-<a name="line-204"></a>    <span class='hs-keyglyph'>|</span> <span class='hs-varid'>e</span> <span class='hs-varop'>&gt;</span> <span class='hs-varid'>h</span>     <span class='hs-keyglyph'>=</span> <span class='hs-varid'>m</span> <span class='hs-varop'>&gt;</span> <span class='hs-num'>0</span>
-<a name="line-205"></a>    <span class='hs-keyglyph'>|</span> <span class='hs-varid'>otherwise</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>testBit</span> <span class='hs-varid'>m</span> <span class='hs-layout'>(</span><span class='hs-varid'>e</span> <span class='hs-comment'>-</span> <span class='hs-varid'>l</span><span class='hs-layout'>)</span>
-<a name="line-206"></a>    <span class='hs-keyword'>where</span> 
-<a name="line-207"></a>        <span class='hs-varid'>e</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>fromEnum</span> <span class='hs-varid'>x</span>
-<a name="line-208"></a><span class='hs-comment'>{-# INLINE member #-}</span>
+<a name="line-150"></a><a name="fromDistinctAscList"></a><span class='hs-comment'>-- | /O(d * n)/ Make a 'BitSet' from a distinct ascending list of items</span>
+<a name="line-151"></a><span class='hs-definition'>fromDistinctAscList</span> <span class='hs-keyglyph'>::</span> <span class='hs-conid'>Enum</span> <span class='hs-varid'>a</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-keyglyph'>[</span><span class='hs-varid'>a</span><span class='hs-keyglyph'>]</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-conid'>BitSet</span> <span class='hs-varid'>a</span> 
+<a name="line-152"></a><span class='hs-definition'>fromDistinctAscList</span> <span class='hs-conid'>[]</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>empty</span>
+<a name="line-153"></a><span class='hs-definition'>fromDistinctAscList</span> <span class='hs-layout'>(</span><span class='hs-varid'>c</span><span class='hs-conop'>:</span><span class='hs-varid'>cs</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>fromDistinctAscList'</span> <span class='hs-varid'>cs</span> <span class='hs-num'>1</span> <span class='hs-num'>0</span> <span class='hs-num'>1</span> 
+<a name="line-154"></a>    <span class='hs-keyword'>where</span>
+<a name="line-155"></a>        <span class='hs-varid'>l</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>fromEnum</span> <span class='hs-varid'>c</span>
+<a name="line-156"></a>        <span class='hs-varid'>fromDistinctAscList'</span> <span class='hs-keyglyph'>::</span> <span class='hs-conid'>Enum</span> <span class='hs-varid'>a</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-keyglyph'>[</span><span class='hs-varid'>a</span><span class='hs-keyglyph'>]</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-conid'>Int</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-conid'>Int</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-conid'>Integer</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-conid'>BitSet</span> <span class='hs-varid'>a</span>
+<a name="line-157"></a>        <span class='hs-varid'>fromDistinctAscList'</span> <span class='hs-conid'>[]</span> <span class='hs-varop'>!</span><span class='hs-varid'>n</span> <span class='hs-varop'>!</span><span class='hs-varid'>h</span> <span class='hs-varop'>!</span><span class='hs-varid'>m</span>  <span class='hs-keyglyph'>=</span> <span class='hs-conid'>BS</span> <span class='hs-varid'>n</span> <span class='hs-varid'>n</span> <span class='hs-varid'>n</span> <span class='hs-varid'>l</span> <span class='hs-varid'>h</span> <span class='hs-varid'>m</span> <span class='hs-varid'>undefined</span> <span class='hs-varid'>toEnum</span>
+<a name="line-158"></a>        <span class='hs-varid'>fromDistinctAscList'</span> <span class='hs-layout'>(</span><span class='hs-varid'>c'</span><span class='hs-conop'>:</span><span class='hs-varid'>cs'</span><span class='hs-layout'>)</span> <span class='hs-varop'>!</span><span class='hs-varid'>n</span> <span class='hs-keyword'>_</span> <span class='hs-varop'>!</span><span class='hs-varid'>m</span> <span class='hs-keyglyph'>=</span> 
+<a name="line-159"></a>            <span class='hs-keyword'>let</span> <span class='hs-varid'>h'</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>fromEnum</span> <span class='hs-varid'>c'</span> <span class='hs-keyword'>in</span> 
+<a name="line-160"></a>            <span class='hs-varid'>fromDistinctAscList'</span> <span class='hs-varid'>cs'</span> <span class='hs-layout'>(</span><span class='hs-varid'>n</span><span class='hs-varop'>+</span><span class='hs-num'>1</span><span class='hs-layout'>)</span> <span class='hs-varid'>h'</span> <span class='hs-layout'>(</span><span class='hs-varid'>setBit</span> <span class='hs-varid'>m</span> <span class='hs-layout'>(</span><span class='hs-varid'>h'</span> <span class='hs-comment'>-</span> <span class='hs-varid'>l</span><span class='hs-layout'>)</span><span class='hs-layout'>)</span>
+<a name="line-161"></a><span class='hs-comment'>{-# INLINE fromDistinctAscList #-}</span>
+<a name="line-162"></a>
+<a name="line-163"></a><a name="insert"></a><span class='hs-comment'>-- | /O(d)/ Insert a single element of type @a@ into the 'BitSet'. Preserves order of 'null' and 'size'</span>
+<a name="line-164"></a><span class='hs-definition'>insert</span> <span class='hs-keyglyph'>::</span> <span class='hs-conid'>Enum</span> <span class='hs-varid'>a</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-varid'>a</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-conid'>BitSet</span> <span class='hs-varid'>a</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-conid'>BitSet</span> <span class='hs-varid'>a</span>
+<a name="line-165"></a><span class='hs-definition'>insert</span> <span class='hs-varid'>x</span> <span class='hs-varid'>r</span><span class='hs-keyglyph'>@</span><span class='hs-layout'>(</span><span class='hs-conid'>BS</span> <span class='hs-varid'>a</span> <span class='hs-varid'>b</span> <span class='hs-varid'>c</span> <span class='hs-varid'>l</span> <span class='hs-varid'>h</span> <span class='hs-varid'>m</span> <span class='hs-varid'>u</span> <span class='hs-keyword'>_</span><span class='hs-layout'>)</span>  
+<a name="line-166"></a>    <span class='hs-keyglyph'>|</span> <span class='hs-varid'>m</span> <span class='hs-varop'>&lt;</span> <span class='hs-num'>0</span><span class='hs-layout'>,</span> <span class='hs-varid'>e</span> <span class='hs-varop'>&lt;</span> <span class='hs-varid'>l</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>r</span> 
+<a name="line-167"></a>    <span class='hs-keyglyph'>|</span> <span class='hs-varid'>m</span> <span class='hs-varop'>&lt;</span> <span class='hs-num'>0</span><span class='hs-layout'>,</span> <span class='hs-varid'>e</span> <span class='hs-varop'>&gt;</span> <span class='hs-varid'>h</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>r</span>
+<a name="line-168"></a>    <span class='hs-keyglyph'>|</span> <span class='hs-varid'>b</span> <span class='hs-varop'>==</span> <span class='hs-num'>0</span>       <span class='hs-keyglyph'>=</span> <span class='hs-varid'>singleton</span> <span class='hs-varid'>x</span>
+<a name="line-169"></a>    <span class='hs-keyglyph'>|</span> <span class='hs-varid'>a</span> <span class='hs-varop'>==</span> <span class='hs-comment'>-</span><span class='hs-num'>1</span>      <span class='hs-keyglyph'>=</span> <span class='hs-varid'>r</span>
+<a name="line-170"></a>    <span class='hs-keyglyph'>|</span> <span class='hs-varid'>e</span> <span class='hs-varop'>&lt;</span> <span class='hs-varid'>l</span>        <span class='hs-keyglyph'>=</span> <span class='hs-varid'>bs</span> <span class='hs-layout'>(</span><span class='hs-varid'>a</span><span class='hs-varop'>+</span><span class='hs-num'>1</span><span class='hs-layout'>)</span> <span class='hs-layout'>(</span><span class='hs-varid'>b</span><span class='hs-varop'>+</span><span class='hs-num'>1</span><span class='hs-layout'>)</span> <span class='hs-layout'>(</span><span class='hs-varid'>c</span><span class='hs-varop'>+</span><span class='hs-num'>1</span><span class='hs-layout'>)</span> <span class='hs-varid'>e</span> <span class='hs-varid'>h</span> <span class='hs-layout'>(</span><span class='hs-varid'>shiftL</span> <span class='hs-varid'>m</span> <span class='hs-layout'>(</span><span class='hs-varid'>l</span> <span class='hs-comment'>-</span> <span class='hs-varid'>e</span><span class='hs-layout'>)</span> <span class='hs-varop'>.|.</span> <span class='hs-num'>1</span><span class='hs-layout'>)</span> <span class='hs-varid'>u</span>
+<a name="line-171"></a>    <span class='hs-keyglyph'>|</span> <span class='hs-varid'>e</span> <span class='hs-varop'>&gt;</span> <span class='hs-varid'>h</span>        <span class='hs-keyglyph'>=</span> <span class='hs-varid'>bs</span> <span class='hs-layout'>(</span><span class='hs-varid'>a</span><span class='hs-varop'>+</span><span class='hs-num'>1</span><span class='hs-layout'>)</span> <span class='hs-layout'>(</span><span class='hs-varid'>b</span><span class='hs-varop'>+</span><span class='hs-num'>1</span><span class='hs-layout'>)</span> <span class='hs-layout'>(</span><span class='hs-varid'>c</span><span class='hs-varop'>+</span><span class='hs-num'>1</span><span class='hs-layout'>)</span> <span class='hs-varid'>l</span> <span class='hs-varid'>p</span> <span class='hs-layout'>(</span><span class='hs-varid'>setBit</span> <span class='hs-varid'>m</span> <span class='hs-varid'>p</span><span class='hs-layout'>)</span> <span class='hs-varid'>u</span>
+<a name="line-172"></a>    <span class='hs-keyglyph'>|</span> <span class='hs-varid'>testBit</span> <span class='hs-varid'>m</span> <span class='hs-varid'>p</span>  <span class='hs-keyglyph'>=</span> <span class='hs-varid'>r</span> 
+<a name="line-173"></a>    <span class='hs-keyglyph'>|</span> <span class='hs-varid'>otherwise</span>    <span class='hs-keyglyph'>=</span> <span class='hs-varid'>bs</span> <span class='hs-layout'>(</span><span class='hs-varid'>a</span><span class='hs-varop'>+</span><span class='hs-num'>1</span><span class='hs-layout'>)</span> <span class='hs-layout'>(</span><span class='hs-varid'>b</span><span class='hs-varop'>+</span><span class='hs-num'>1</span><span class='hs-layout'>)</span> <span class='hs-layout'>(</span><span class='hs-varid'>c</span><span class='hs-varop'>+</span><span class='hs-num'>1</span><span class='hs-layout'>)</span> <span class='hs-varid'>l</span> <span class='hs-varid'>h</span> <span class='hs-layout'>(</span><span class='hs-varid'>setBit</span> <span class='hs-varid'>m</span> <span class='hs-varid'>p</span><span class='hs-layout'>)</span> <span class='hs-varid'>u</span>
+<a name="line-174"></a>    <span class='hs-keyword'>where</span> 
+<a name="line-175"></a>        <span class='hs-varid'>e</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>fromEnum</span> <span class='hs-varid'>x</span>
+<a name="line-176"></a>        <span class='hs-varid'>p</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>e</span> <span class='hs-comment'>-</span> <span class='hs-varid'>l</span> 
+<a name="line-177"></a><span class='hs-comment'>{-# INLINE insert #-}</span>
+<a name="line-178"></a>
+<a name="line-179"></a><a name="delete"></a><span class='hs-comment'>-- | /O(d)/ Delete a single item from the 'BitSet'. Preserves order of 'null' and 'size'</span>
+<a name="line-180"></a><span class='hs-definition'>delete</span> <span class='hs-keyglyph'>::</span> <span class='hs-conid'>Enum</span> <span class='hs-varid'>a</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-varid'>a</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-conid'>BitSet</span> <span class='hs-varid'>a</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-conid'>BitSet</span> <span class='hs-varid'>a</span>
+<a name="line-181"></a><span class='hs-definition'>delete</span> <span class='hs-varid'>x</span> <span class='hs-varid'>r</span><span class='hs-keyglyph'>@</span><span class='hs-layout'>(</span><span class='hs-conid'>BS</span> <span class='hs-varid'>a</span> <span class='hs-varid'>b</span> <span class='hs-varid'>c</span> <span class='hs-varid'>l</span> <span class='hs-varid'>h</span> <span class='hs-varid'>m</span> <span class='hs-varid'>u</span> <span class='hs-keyword'>_</span><span class='hs-layout'>)</span> 
+<a name="line-182"></a>    <span class='hs-keyglyph'>|</span> <span class='hs-varid'>m</span> <span class='hs-varop'>&lt;</span> <span class='hs-num'>0</span><span class='hs-layout'>,</span> <span class='hs-varid'>e</span> <span class='hs-varop'>&lt;</span> <span class='hs-varid'>l</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>bs</span> <span class='hs-layout'>(</span><span class='hs-varid'>a</span><span class='hs-varop'>+</span><span class='hs-num'>1</span><span class='hs-layout'>)</span> <span class='hs-layout'>(</span><span class='hs-varid'>b</span><span class='hs-varop'>+</span><span class='hs-num'>1</span><span class='hs-layout'>)</span> <span class='hs-layout'>(</span><span class='hs-varid'>c</span><span class='hs-varop'>+</span><span class='hs-num'>1</span><span class='hs-layout'>)</span> <span class='hs-varid'>e</span> <span class='hs-varid'>h</span> <span class='hs-layout'>(</span><span class='hs-varid'>shiftL</span> <span class='hs-varid'>m</span> <span class='hs-layout'>(</span><span class='hs-varid'>l</span> <span class='hs-comment'>-</span> <span class='hs-varid'>e</span><span class='hs-layout'>)</span> <span class='hs-varop'>.&amp;.</span> <span class='hs-varid'>complement</span> <span class='hs-num'>1</span><span class='hs-layout'>)</span> <span class='hs-varid'>u</span>
+<a name="line-183"></a>    <span class='hs-keyglyph'>|</span> <span class='hs-varid'>m</span> <span class='hs-varop'>&lt;</span> <span class='hs-num'>0</span><span class='hs-layout'>,</span> <span class='hs-varid'>e</span> <span class='hs-varop'>&gt;</span> <span class='hs-varid'>h</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>bs</span> <span class='hs-layout'>(</span><span class='hs-varid'>a</span><span class='hs-varop'>+</span><span class='hs-num'>1</span><span class='hs-layout'>)</span> <span class='hs-layout'>(</span><span class='hs-varid'>b</span><span class='hs-varop'>+</span><span class='hs-num'>1</span><span class='hs-layout'>)</span> <span class='hs-layout'>(</span><span class='hs-varid'>c</span><span class='hs-varop'>+</span><span class='hs-num'>1</span><span class='hs-layout'>)</span> <span class='hs-varid'>l</span> <span class='hs-varid'>p</span> <span class='hs-layout'>(</span><span class='hs-varid'>clearBit</span> <span class='hs-varid'>m</span> <span class='hs-varid'>p</span><span class='hs-layout'>)</span> <span class='hs-varid'>u</span>
+<a name="line-184"></a>    <span class='hs-keyglyph'>|</span> <span class='hs-varid'>b</span> <span class='hs-varop'>==</span> <span class='hs-num'>0</span>       <span class='hs-keyglyph'>=</span> <span class='hs-varid'>r</span>
+<a name="line-185"></a>    <span class='hs-keyglyph'>|</span> <span class='hs-varid'>a</span> <span class='hs-varop'>==</span> <span class='hs-comment'>-</span><span class='hs-num'>1</span>      <span class='hs-keyglyph'>=</span> <span class='hs-varid'>pseudoComplement</span> <span class='hs-layout'>(</span><span class='hs-varid'>singleton</span> <span class='hs-varid'>x</span><span class='hs-layout'>)</span> <span class='hs-varid'>u</span>
+<a name="line-186"></a>    <span class='hs-keyglyph'>|</span> <span class='hs-varid'>e</span> <span class='hs-varop'>&lt;</span> <span class='hs-varid'>l</span>        <span class='hs-keyglyph'>=</span> <span class='hs-varid'>r</span>
+<a name="line-187"></a>    <span class='hs-keyglyph'>|</span> <span class='hs-varid'>e</span> <span class='hs-varop'>&gt;</span> <span class='hs-varid'>h</span>        <span class='hs-keyglyph'>=</span> <span class='hs-varid'>r</span>
+<a name="line-188"></a>    <span class='hs-keyglyph'>|</span> <span class='hs-varid'>testBit</span> <span class='hs-varid'>m</span> <span class='hs-varid'>p</span>  <span class='hs-keyglyph'>=</span> <span class='hs-varid'>bs</span> <span class='hs-layout'>(</span><span class='hs-varid'>a</span><span class='hs-comment'>-</span><span class='hs-num'>1</span><span class='hs-layout'>)</span> <span class='hs-layout'>(</span><span class='hs-varid'>b</span><span class='hs-comment'>-</span><span class='hs-num'>1</span><span class='hs-layout'>)</span> <span class='hs-layout'>(</span><span class='hs-varid'>c</span><span class='hs-comment'>-</span><span class='hs-num'>1</span><span class='hs-layout'>)</span> <span class='hs-varid'>l</span> <span class='hs-varid'>h</span> <span class='hs-layout'>(</span><span class='hs-varid'>clearBit</span> <span class='hs-varid'>m</span> <span class='hs-varid'>p</span><span class='hs-layout'>)</span> <span class='hs-varid'>u</span>
+<a name="line-189"></a>    <span class='hs-keyglyph'>|</span> <span class='hs-varid'>otherwise</span>    <span class='hs-keyglyph'>=</span> <span class='hs-varid'>r</span>
+<a name="line-190"></a>    <span class='hs-keyword'>where</span> 
+<a name="line-191"></a>        <span class='hs-varid'>e</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>fromEnum</span> <span class='hs-varid'>x</span>
+<a name="line-192"></a>        <span class='hs-varid'>p</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>e</span> <span class='hs-comment'>-</span> <span class='hs-varid'>l</span>
+<a name="line-193"></a><span class='hs-comment'>{-# INLINE delete #-}</span>
+<a name="line-194"></a>
+<a name="line-195"></a><a name="member"></a><span class='hs-comment'>-- | /O(1)/ Test for membership in a 'BitSet'</span>
+<a name="line-196"></a><span class='hs-definition'>member</span> <span class='hs-keyglyph'>::</span> <span class='hs-conid'>Enum</span> <span class='hs-varid'>a</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-varid'>a</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-conid'>BitSet</span> <span class='hs-varid'>a</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-conid'>Bool</span>
+<a name="line-197"></a><span class='hs-definition'>member</span> <span class='hs-varid'>x</span> <span class='hs-layout'>(</span><span class='hs-conid'>BS</span> <span class='hs-keyword'>_</span> <span class='hs-keyword'>_</span> <span class='hs-keyword'>_</span> <span class='hs-varid'>l</span> <span class='hs-varid'>h</span> <span class='hs-varid'>m</span> <span class='hs-keyword'>_</span> <span class='hs-keyword'>_</span><span class='hs-layout'>)</span> 
+<a name="line-198"></a>    <span class='hs-keyglyph'>|</span> <span class='hs-varid'>e</span> <span class='hs-varop'>&lt;</span> <span class='hs-varid'>l</span>     <span class='hs-keyglyph'>=</span> <span class='hs-varid'>m</span> <span class='hs-varop'>&lt;</span> <span class='hs-num'>0</span> 
+<a name="line-199"></a>    <span class='hs-keyglyph'>|</span> <span class='hs-varid'>e</span> <span class='hs-varop'>&gt;</span> <span class='hs-varid'>h</span>     <span class='hs-keyglyph'>=</span> <span class='hs-varid'>m</span> <span class='hs-varop'>&gt;</span> <span class='hs-num'>0</span>
+<a name="line-200"></a>    <span class='hs-keyglyph'>|</span> <span class='hs-varid'>otherwise</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>testBit</span> <span class='hs-varid'>m</span> <span class='hs-layout'>(</span><span class='hs-varid'>e</span> <span class='hs-comment'>-</span> <span class='hs-varid'>l</span><span class='hs-layout'>)</span>
+<a name="line-201"></a>    <span class='hs-keyword'>where</span> 
+<a name="line-202"></a>        <span class='hs-varid'>e</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>fromEnum</span> <span class='hs-varid'>x</span>
+<a name="line-203"></a><span class='hs-comment'>{-# INLINE member #-}</span>
+<a name="line-204"></a>
+<a name="line-205"></a><a name="toInteger"></a><span class='hs-comment'>-- | /O(d)/ convert to an Integer representation. Discards negative elements</span>
+<a name="line-206"></a><span class='hs-definition'>toInteger</span> <span class='hs-keyglyph'>::</span> <span class='hs-conid'>BitSet</span> <span class='hs-varid'>a</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-conid'>Integer</span>
+<a name="line-207"></a><span class='hs-definition'>toInteger</span> <span class='hs-varid'>x</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>mantissa</span> <span class='hs-varid'>x</span> <span class='hs-varop'>`shift`</span> <span class='hs-varid'>exponent</span> <span class='hs-varid'>x</span>
+<a name="line-208"></a><span class='hs-comment'>{-# INLINE toInteger #-}</span>
hunk ./doc/html/monoids/src/Data-Ring-Semi-BitSet.html 218
-<a name="line-210"></a><a name="toInteger"></a><span class='hs-comment'>-- | /O(d)/ convert to an Integer representation. Discards negative elements</span>
-<a name="line-211"></a><span class='hs-definition'>toInteger</span> <span class='hs-keyglyph'>::</span> <span class='hs-conid'>BitSet</span> <span class='hs-varid'>a</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-conid'>Integer</span>
-<a name="line-212"></a><span class='hs-definition'>toInteger</span> <span class='hs-varid'>x</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>mantissa</span> <span class='hs-varid'>x</span> <span class='hs-varop'>`shift`</span> <span class='hs-varid'>exponent</span> <span class='hs-varid'>x</span>
-<a name="line-213"></a><span class='hs-comment'>{-# INLINE toInteger #-}</span>
-<a name="line-214"></a>
-<a name="line-215"></a><a name="union"></a><span class='hs-comment'>-- | /O(d)/.</span>
-<a name="line-216"></a><span class='hs-definition'>union</span> <span class='hs-keyglyph'>::</span> <span class='hs-conid'>Enum</span> <span class='hs-varid'>a</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>BitSet</span> <span class='hs-varid'>a</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-conid'>BitSet</span> <span class='hs-varid'>a</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-conid'>BitSet</span> <span class='hs-varid'>a</span> 
-<a name="line-217"></a><span class='hs-definition'>union</span> <span class='hs-varid'>x</span><span class='hs-keyglyph'>@</span><span class='hs-layout'>(</span><span class='hs-conid'>BS</span> <span class='hs-varid'>a</span> <span class='hs-varid'>b</span> <span class='hs-varid'>c</span> <span class='hs-varid'>l</span> <span class='hs-varid'>h</span> <span class='hs-varid'>m</span> <span class='hs-varid'>u</span> <span class='hs-varid'>f</span><span class='hs-layout'>)</span> <span class='hs-varid'>y</span><span class='hs-keyglyph'>@</span><span class='hs-layout'>(</span><span class='hs-conid'>BS</span> <span class='hs-varid'>a'</span> <span class='hs-varid'>b'</span> <span class='hs-varid'>c'</span> <span class='hs-varid'>l'</span> <span class='hs-varid'>h'</span> <span class='hs-varid'>m'</span> <span class='hs-varid'>u'</span> <span class='hs-keyword'>_</span><span class='hs-layout'>)</span>
-<a name="line-218"></a>    <span class='hs-keyglyph'>|</span> <span class='hs-varid'>l'</span> <span class='hs-varop'>&lt;</span> <span class='hs-varid'>l</span>        <span class='hs-keyglyph'>=</span> <span class='hs-varid'>union</span> <span class='hs-varid'>y</span> <span class='hs-varid'>x</span>                                                         <span class='hs-comment'>-- ensure left side has lower exponent</span>
-<a name="line-219"></a>    <span class='hs-keyglyph'>|</span> <span class='hs-varid'>b</span> <span class='hs-varop'>==</span> <span class='hs-num'>0</span>        <span class='hs-keyglyph'>=</span> <span class='hs-varid'>y</span>                                                                 <span class='hs-comment'>-- fast empty union</span>
-<a name="line-220"></a>    <span class='hs-keyglyph'>|</span> <span class='hs-varid'>b'</span> <span class='hs-varop'>==</span> <span class='hs-num'>0</span>       <span class='hs-keyglyph'>=</span> <span class='hs-varid'>x</span>                                                                 <span class='hs-comment'>-- fast empty union</span>
-<a name="line-221"></a>    <span class='hs-keyglyph'>|</span> <span class='hs-varid'>a</span> <span class='hs-varop'>==</span> <span class='hs-comment'>-</span><span class='hs-num'>1</span>       <span class='hs-keyglyph'>=</span> <span class='hs-varid'>entire</span> <span class='hs-varid'>u</span>                                                          <span class='hs-comment'>-- fast full union, recomplement obligation met by negative size</span>
-<a name="line-222"></a>    <span class='hs-keyglyph'>|</span> <span class='hs-varid'>a'</span> <span class='hs-varop'>==</span> <span class='hs-comment'>-</span><span class='hs-num'>1</span>      <span class='hs-keyglyph'>=</span> <span class='hs-varid'>entire</span> <span class='hs-varid'>u'</span>                                                         <span class='hs-comment'>-- fast full union, recomplement obligation met by negative size</span>
-<a name="line-223"></a>    <span class='hs-keyglyph'>|</span> <span class='hs-varid'>m</span> <span class='hs-varop'>&lt;</span> <span class='hs-num'>0</span><span class='hs-layout'>,</span> <span class='hs-varid'>m'</span> <span class='hs-varop'>&lt;</span> <span class='hs-num'>0</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>recomplement</span> <span class='hs-layout'>(</span><span class='hs-varid'>intersection</span> <span class='hs-layout'>(</span><span class='hs-varid'>recomplement</span> <span class='hs-varid'>x</span><span class='hs-layout'>)</span> <span class='hs-layout'>(</span><span class='hs-varid'>recomplement</span> <span class='hs-varid'>y</span><span class='hs-layout'>)</span><span class='hs-layout'>)</span>     <span class='hs-comment'>-- appeal to intersection, recomplement obligation met by 2s complement</span>
-<a name="line-224"></a>    <span class='hs-keyglyph'>|</span> <span class='hs-varid'>m'</span> <span class='hs-varop'>&lt;</span> <span class='hs-num'>0</span>        <span class='hs-keyglyph'>=</span> <span class='hs-varid'>recomplement</span> <span class='hs-layout'>(</span><span class='hs-varid'>diff</span> <span class='hs-layout'>(</span><span class='hs-varid'>recomplement</span> <span class='hs-varid'>y</span><span class='hs-layout'>)</span> <span class='hs-varid'>x</span> <span class='hs-varid'>u'</span><span class='hs-layout'>)</span>                         <span class='hs-comment'>-- union with complement, recomplement obligation met by 2s complement</span>
-<a name="line-225"></a>    <span class='hs-keyglyph'>|</span> <span class='hs-varid'>m</span> <span class='hs-varop'>&lt;</span> <span class='hs-num'>0</span>         <span class='hs-keyglyph'>=</span> <span class='hs-varid'>recomplement</span> <span class='hs-layout'>(</span><span class='hs-varid'>diff</span> <span class='hs-layout'>(</span><span class='hs-varid'>recomplement</span> <span class='hs-varid'>x</span><span class='hs-layout'>)</span> <span class='hs-varid'>y</span> <span class='hs-varid'>u</span><span class='hs-layout'>)</span>                          <span class='hs-comment'>-- union with complement, recomplement obligation met by 2s complement</span>
-<a name="line-226"></a>    <span class='hs-keyglyph'>|</span> <span class='hs-varid'>h</span> <span class='hs-varop'>&lt;</span> <span class='hs-varid'>l'</span>        <span class='hs-keyglyph'>=</span> <span class='hs-varid'>bs</span> <span class='hs-layout'>(</span><span class='hs-varid'>a</span> <span class='hs-varop'>+</span> <span class='hs-varid'>a'</span><span class='hs-layout'>)</span> <span class='hs-layout'>(</span><span class='hs-varid'>b</span> <span class='hs-varop'>+</span> <span class='hs-varid'>b'</span><span class='hs-layout'>)</span> <span class='hs-layout'>(</span><span class='hs-varid'>c</span> <span class='hs-varop'>+</span> <span class='hs-varid'>c'</span><span class='hs-layout'>)</span> <span class='hs-varid'>l</span> <span class='hs-varid'>h'</span> <span class='hs-varid'>m''</span> <span class='hs-varid'>u</span>                          <span class='hs-comment'>-- disjoint positive ranges</span>
-<a name="line-227"></a>    <span class='hs-keyglyph'>|</span> <span class='hs-varid'>otherwise</span>     <span class='hs-keyglyph'>=</span> <span class='hs-varid'>bs</span> <span class='hs-layout'>(</span><span class='hs-varid'>a</span> <span class='hs-varop'>`max`</span> <span class='hs-varid'>a'</span><span class='hs-layout'>)</span> <span class='hs-layout'>(</span><span class='hs-varid'>b</span> <span class='hs-varop'>+</span> <span class='hs-varid'>b'</span><span class='hs-layout'>)</span> <span class='hs-layout'>(</span><span class='hs-varid'>recount</span> <span class='hs-varid'>m''</span><span class='hs-layout'>)</span> <span class='hs-varid'>l</span> <span class='hs-layout'>(</span><span class='hs-varid'>h</span> <span class='hs-varop'>`max`</span> <span class='hs-varid'>h'</span><span class='hs-layout'>)</span> <span class='hs-varid'>m''</span> <span class='hs-varid'>u</span>       <span class='hs-comment'>-- overlapped positives</span>
-<a name="line-228"></a>    <span class='hs-keyword'>where</span> 
-<a name="line-229"></a>        <span class='hs-varid'>m''</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>m</span> <span class='hs-varop'>.|.</span> <span class='hs-varid'>shiftL</span> <span class='hs-varid'>m'</span> <span class='hs-layout'>(</span><span class='hs-varid'>l'</span> <span class='hs-comment'>-</span> <span class='hs-varid'>l</span><span class='hs-layout'>)</span>
-<a name="line-230"></a>        <span class='hs-varid'>entire</span> <span class='hs-varid'>u''</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>BS</span> <span class='hs-layout'>(</span><span class='hs-comment'>-</span><span class='hs-num'>1</span><span class='hs-layout'>)</span> <span class='hs-layout'>(</span><span class='hs-comment'>-</span><span class='hs-num'>1</span><span class='hs-layout'>)</span> <span class='hs-layout'>(</span><span class='hs-comment'>-</span><span class='hs-num'>1</span><span class='hs-layout'>)</span> <span class='hs-num'>0</span> <span class='hs-num'>0</span> <span class='hs-layout'>(</span><span class='hs-comment'>-</span><span class='hs-num'>1</span><span class='hs-layout'>)</span> <span class='hs-varid'>u''</span> <span class='hs-varid'>f</span>
+<a name="line-210"></a><a name="union"></a><span class='hs-comment'>-- | /O(d)/.</span>
+<a name="line-211"></a><span class='hs-definition'>union</span> <span class='hs-keyglyph'>::</span> <span class='hs-conid'>Enum</span> <span class='hs-varid'>a</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>BitSet</span> <span class='hs-varid'>a</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-conid'>BitSet</span> <span class='hs-varid'>a</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-conid'>BitSet</span> <span class='hs-varid'>a</span> 
+<a name="line-212"></a><span class='hs-definition'>union</span> <span class='hs-varid'>x</span><span class='hs-keyglyph'>@</span><span class='hs-layout'>(</span><span class='hs-conid'>BS</span> <span class='hs-varid'>a</span> <span class='hs-varid'>b</span> <span class='hs-varid'>c</span> <span class='hs-varid'>l</span> <span class='hs-varid'>h</span> <span class='hs-varid'>m</span> <span class='hs-varid'>u</span> <span class='hs-varid'>f</span><span class='hs-layout'>)</span> <span class='hs-varid'>y</span><span class='hs-keyglyph'>@</span><span class='hs-layout'>(</span><span class='hs-conid'>BS</span> <span class='hs-varid'>a'</span> <span class='hs-varid'>b'</span> <span class='hs-varid'>c'</span> <span class='hs-varid'>l'</span> <span class='hs-varid'>h'</span> <span class='hs-varid'>m'</span> <span class='hs-varid'>u'</span> <span class='hs-keyword'>_</span><span class='hs-layout'>)</span>
+<a name="line-213"></a>    <span class='hs-keyglyph'>|</span> <span class='hs-varid'>l'</span> <span class='hs-varop'>&lt;</span> <span class='hs-varid'>l</span>        <span class='hs-keyglyph'>=</span> <span class='hs-varid'>union</span> <span class='hs-varid'>y</span> <span class='hs-varid'>x</span>                                                         <span class='hs-comment'>-- ensure left side has lower exponent</span>
+<a name="line-214"></a>    <span class='hs-keyglyph'>|</span> <span class='hs-varid'>b</span> <span class='hs-varop'>==</span> <span class='hs-num'>0</span>        <span class='hs-keyglyph'>=</span> <span class='hs-varid'>y</span>                                                                 <span class='hs-comment'>-- fast empty union</span>
+<a name="line-215"></a>    <span class='hs-keyglyph'>|</span> <span class='hs-varid'>b'</span> <span class='hs-varop'>==</span> <span class='hs-num'>0</span>       <span class='hs-keyglyph'>=</span> <span class='hs-varid'>x</span>                                                                 <span class='hs-comment'>-- fast empty union</span>
+<a name="line-216"></a>    <span class='hs-keyglyph'>|</span> <span class='hs-varid'>a</span> <span class='hs-varop'>==</span> <span class='hs-comment'>-</span><span class='hs-num'>1</span>       <span class='hs-keyglyph'>=</span> <span class='hs-varid'>entire</span> <span class='hs-varid'>u</span>                                                          <span class='hs-comment'>-- fast full union, recomplement obligation met by negative size</span>
+<a name="line-217"></a>    <span class='hs-keyglyph'>|</span> <span class='hs-varid'>a'</span> <span class='hs-varop'>==</span> <span class='hs-comment'>-</span><span class='hs-num'>1</span>      <span class='hs-keyglyph'>=</span> <span class='hs-varid'>entire</span> <span class='hs-varid'>u'</span>                                                         <span class='hs-comment'>-- fast full union, recomplement obligation met by negative size</span>
+<a name="line-218"></a>    <span class='hs-keyglyph'>|</span> <span class='hs-varid'>m</span> <span class='hs-varop'>&lt;</span> <span class='hs-num'>0</span><span class='hs-layout'>,</span> <span class='hs-varid'>m'</span> <span class='hs-varop'>&lt;</span> <span class='hs-num'>0</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>recomplement</span> <span class='hs-layout'>(</span><span class='hs-varid'>intersection</span> <span class='hs-layout'>(</span><span class='hs-varid'>recomplement</span> <span class='hs-varid'>x</span><span class='hs-layout'>)</span> <span class='hs-layout'>(</span><span class='hs-varid'>recomplement</span> <span class='hs-varid'>y</span><span class='hs-layout'>)</span><span class='hs-layout'>)</span>     <span class='hs-comment'>-- appeal to intersection, recomplement obligation met by 2s complement</span>
+<a name="line-219"></a>    <span class='hs-keyglyph'>|</span> <span class='hs-varid'>m'</span> <span class='hs-varop'>&lt;</span> <span class='hs-num'>0</span>        <span class='hs-keyglyph'>=</span> <span class='hs-varid'>recomplement</span> <span class='hs-layout'>(</span><span class='hs-varid'>diff</span> <span class='hs-layout'>(</span><span class='hs-varid'>recomplement</span> <span class='hs-varid'>y</span><span class='hs-layout'>)</span> <span class='hs-varid'>x</span> <span class='hs-varid'>u'</span><span class='hs-layout'>)</span>                         <span class='hs-comment'>-- union with complement, recomplement obligation met by 2s complement</span>
+<a name="line-220"></a>    <span class='hs-keyglyph'>|</span> <span class='hs-varid'>m</span> <span class='hs-varop'>&lt;</span> <span class='hs-num'>0</span>         <span class='hs-keyglyph'>=</span> <span class='hs-varid'>recomplement</span> <span class='hs-layout'>(</span><span class='hs-varid'>diff</span> <span class='hs-layout'>(</span><span class='hs-varid'>recomplement</span> <span class='hs-varid'>x</span><span class='hs-layout'>)</span> <span class='hs-varid'>y</span> <span class='hs-varid'>u</span><span class='hs-layout'>)</span>                          <span class='hs-comment'>-- union with complement, recomplement obligation met by 2s complement</span>
+<a name="line-221"></a>    <span class='hs-keyglyph'>|</span> <span class='hs-varid'>h</span> <span class='hs-varop'>&lt;</span> <span class='hs-varid'>l'</span>        <span class='hs-keyglyph'>=</span> <span class='hs-varid'>bs</span> <span class='hs-layout'>(</span><span class='hs-varid'>a</span> <span class='hs-varop'>+</span> <span class='hs-varid'>a'</span><span class='hs-layout'>)</span> <span class='hs-layout'>(</span><span class='hs-varid'>b</span> <span class='hs-varop'>+</span> <span class='hs-varid'>b'</span><span class='hs-layout'>)</span> <span class='hs-layout'>(</span><span class='hs-varid'>c</span> <span class='hs-varop'>+</span> <span class='hs-varid'>c'</span><span class='hs-layout'>)</span> <span class='hs-varid'>l</span> <span class='hs-varid'>h'</span> <span class='hs-varid'>m''</span> <span class='hs-varid'>u</span>                          <span class='hs-comment'>-- disjoint positive ranges</span>
+<a name="line-222"></a>    <span class='hs-keyglyph'>|</span> <span class='hs-varid'>otherwise</span>     <span class='hs-keyglyph'>=</span> <span class='hs-varid'>bs</span> <span class='hs-layout'>(</span><span class='hs-varid'>a</span> <span class='hs-varop'>`max`</span> <span class='hs-varid'>a'</span><span class='hs-layout'>)</span> <span class='hs-layout'>(</span><span class='hs-varid'>b</span> <span class='hs-varop'>+</span> <span class='hs-varid'>b'</span><span class='hs-layout'>)</span> <span class='hs-layout'>(</span><span class='hs-varid'>recount</span> <span class='hs-varid'>m''</span><span class='hs-layout'>)</span> <span class='hs-varid'>l</span> <span class='hs-layout'>(</span><span class='hs-varid'>h</span> <span class='hs-varop'>`max`</span> <span class='hs-varid'>h'</span><span class='hs-layout'>)</span> <span class='hs-varid'>m''</span> <span class='hs-varid'>u</span>       <span class='hs-comment'>-- overlapped positives</span>
+<a name="line-223"></a>    <span class='hs-keyword'>where</span> 
+<a name="line-224"></a>        <span class='hs-varid'>m''</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>m</span> <span class='hs-varop'>.|.</span> <span class='hs-varid'>shiftL</span> <span class='hs-varid'>m'</span> <span class='hs-layout'>(</span><span class='hs-varid'>l'</span> <span class='hs-comment'>-</span> <span class='hs-varid'>l</span><span class='hs-layout'>)</span>
+<a name="line-225"></a>        <span class='hs-varid'>entire</span> <span class='hs-varid'>u''</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>BS</span> <span class='hs-layout'>(</span><span class='hs-comment'>-</span><span class='hs-num'>1</span><span class='hs-layout'>)</span> <span class='hs-layout'>(</span><span class='hs-comment'>-</span><span class='hs-num'>1</span><span class='hs-layout'>)</span> <span class='hs-layout'>(</span><span class='hs-comment'>-</span><span class='hs-num'>1</span><span class='hs-layout'>)</span> <span class='hs-num'>0</span> <span class='hs-num'>0</span> <span class='hs-layout'>(</span><span class='hs-comment'>-</span><span class='hs-num'>1</span><span class='hs-layout'>)</span> <span class='hs-varid'>u''</span> <span class='hs-varid'>f</span>
+<a name="line-226"></a>
+<a name="line-227"></a><a name="isComplemented"></a><span class='hs-comment'>-- | /O(1)/ Check to see if we are represented as a complemented 'BitSet'. </span>
+<a name="line-228"></a><span class='hs-definition'>isComplemented</span> <span class='hs-keyglyph'>::</span> <span class='hs-conid'>Enum</span> <span class='hs-varid'>a</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>BitSet</span> <span class='hs-varid'>a</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-conid'>Bool</span>
+<a name="line-229"></a><span class='hs-definition'>isComplemented</span> <span class='hs-keyglyph'>=</span> <span class='hs-layout'>(</span><span class='hs-varop'>&lt;</span><span class='hs-num'>0</span><span class='hs-layout'>)</span> <span class='hs-varop'>.</span> <span class='hs-varid'>mantissa</span> 
+<a name="line-230"></a><span class='hs-comment'>{-# INLINE isComplemented #-}</span>
hunk ./doc/html/monoids/src/Data-Ring-Semi-BitSet.html 240
-<a name="line-232"></a><a name="isComplemented"></a><span class='hs-comment'>-- | /O(1)/ Check to see if we are represented as a complemented 'BitSet'. </span>
-<a name="line-233"></a><span class='hs-definition'>isComplemented</span> <span class='hs-keyglyph'>::</span> <span class='hs-conid'>Enum</span> <span class='hs-varid'>a</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>BitSet</span> <span class='hs-varid'>a</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-conid'>Bool</span>
-<a name="line-234"></a><span class='hs-definition'>isComplemented</span> <span class='hs-keyglyph'>=</span> <span class='hs-layout'>(</span><span class='hs-varop'>&lt;</span><span class='hs-num'>0</span><span class='hs-layout'>)</span> <span class='hs-varop'>.</span> <span class='hs-varid'>mantissa</span> 
-<a name="line-235"></a><span class='hs-comment'>{-# INLINE isComplemented #-}</span>
-<a name="line-236"></a>
-<a name="line-237"></a><a name="intersection"></a><span class='hs-comment'>-- | /O(d)/ </span>
-<a name="line-238"></a><span class='hs-definition'>intersection</span> <span class='hs-keyglyph'>::</span> <span class='hs-conid'>Enum</span> <span class='hs-varid'>a</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>BitSet</span> <span class='hs-varid'>a</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-conid'>BitSet</span> <span class='hs-varid'>a</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-conid'>BitSet</span> <span class='hs-varid'>a</span> 
-<a name="line-239"></a><span class='hs-definition'>intersection</span> <span class='hs-varid'>x</span><span class='hs-keyglyph'>@</span><span class='hs-layout'>(</span><span class='hs-conid'>BS</span> <span class='hs-varid'>a</span> <span class='hs-varid'>b</span> <span class='hs-keyword'>_</span> <span class='hs-varid'>l</span> <span class='hs-varid'>h</span> <span class='hs-varid'>m</span> <span class='hs-varid'>u</span> <span class='hs-keyword'>_</span><span class='hs-layout'>)</span> <span class='hs-varid'>y</span><span class='hs-keyglyph'>@</span><span class='hs-layout'>(</span><span class='hs-conid'>BS</span> <span class='hs-varid'>a'</span> <span class='hs-varid'>b'</span> <span class='hs-keyword'>_</span> <span class='hs-varid'>l'</span> <span class='hs-varid'>h'</span> <span class='hs-varid'>m'</span> <span class='hs-varid'>u'</span> <span class='hs-keyword'>_</span><span class='hs-layout'>)</span>
-<a name="line-240"></a>    <span class='hs-keyglyph'>|</span> <span class='hs-varid'>l'</span> <span class='hs-varop'>&lt;</span> <span class='hs-varid'>l</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>intersection</span> <span class='hs-varid'>y</span> <span class='hs-varid'>x</span>                                 
-<a name="line-241"></a>    <span class='hs-keyglyph'>|</span> <span class='hs-varid'>b</span> <span class='hs-varop'>==</span> <span class='hs-num'>0</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>empty</span>
-<a name="line-242"></a>    <span class='hs-keyglyph'>|</span> <span class='hs-varid'>b'</span> <span class='hs-varop'>==</span> <span class='hs-num'>0</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>empty</span>
-<a name="line-243"></a>    <span class='hs-keyglyph'>|</span> <span class='hs-varid'>a</span> <span class='hs-varop'>==</span> <span class='hs-comment'>-</span><span class='hs-num'>1</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>y</span>
-<a name="line-244"></a>    <span class='hs-keyglyph'>|</span> <span class='hs-varid'>a'</span> <span class='hs-varop'>==</span> <span class='hs-comment'>-</span><span class='hs-num'>1</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>x</span>
-<a name="line-245"></a>    <span class='hs-keyglyph'>|</span> <span class='hs-varid'>m</span> <span class='hs-varop'>&lt;</span> <span class='hs-num'>0</span><span class='hs-layout'>,</span> <span class='hs-varid'>m'</span> <span class='hs-varop'>&lt;</span> <span class='hs-num'>0</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>recomplement</span> <span class='hs-layout'>(</span><span class='hs-varid'>union</span> <span class='hs-layout'>(</span><span class='hs-varid'>recomplement</span> <span class='hs-varid'>x</span><span class='hs-layout'>)</span> <span class='hs-layout'>(</span><span class='hs-varid'>recomplement</span> <span class='hs-varid'>y</span><span class='hs-layout'>)</span><span class='hs-layout'>)</span>
-<a name="line-246"></a>    <span class='hs-keyglyph'>|</span> <span class='hs-varid'>m'</span> <span class='hs-varop'>&lt;</span> <span class='hs-num'>0</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>diff</span> <span class='hs-varid'>x</span> <span class='hs-layout'>(</span><span class='hs-varid'>recomplement</span> <span class='hs-varid'>y</span><span class='hs-layout'>)</span> <span class='hs-varid'>u'</span>
-<a name="line-247"></a>    <span class='hs-keyglyph'>|</span> <span class='hs-varid'>m</span> <span class='hs-varop'>&lt;</span> <span class='hs-num'>0</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>diff</span> <span class='hs-varid'>y</span> <span class='hs-layout'>(</span><span class='hs-varid'>recomplement</span> <span class='hs-varid'>x</span><span class='hs-layout'>)</span> <span class='hs-varid'>u</span>
-<a name="line-248"></a>    <span class='hs-keyglyph'>|</span> <span class='hs-varid'>h</span> <span class='hs-varop'>&lt;</span> <span class='hs-varid'>l'</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>empty</span> 
-<a name="line-249"></a>    <span class='hs-keyglyph'>|</span> <span class='hs-varid'>otherwise</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>bs</span> <span class='hs-num'>0</span> <span class='hs-layout'>(</span><span class='hs-varid'>b</span> <span class='hs-varop'>`min`</span> <span class='hs-varid'>b'</span><span class='hs-layout'>)</span> <span class='hs-layout'>(</span><span class='hs-varid'>recount</span> <span class='hs-varid'>m''</span><span class='hs-layout'>)</span> <span class='hs-varid'>l''</span> <span class='hs-layout'>(</span><span class='hs-varid'>h</span> <span class='hs-varop'>`min`</span> <span class='hs-varid'>h'</span><span class='hs-layout'>)</span> <span class='hs-varid'>m''</span> <span class='hs-varid'>u</span>
-<a name="line-250"></a>    <span class='hs-keyword'>where</span>
-<a name="line-251"></a>        <span class='hs-varid'>l''</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>max</span> <span class='hs-varid'>l</span> <span class='hs-varid'>l'</span>
-<a name="line-252"></a>        <span class='hs-varid'>m''</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>shift</span> <span class='hs-varid'>m</span> <span class='hs-layout'>(</span><span class='hs-varid'>l''</span> <span class='hs-comment'>-</span> <span class='hs-varid'>l</span><span class='hs-layout'>)</span> <span class='hs-varop'>.&amp;.</span> <span class='hs-varid'>shift</span> <span class='hs-varid'>m'</span> <span class='hs-layout'>(</span><span class='hs-varid'>l''</span> <span class='hs-comment'>-</span> <span class='hs-varid'>l'</span><span class='hs-layout'>)</span>
-<a name="line-253"></a>
-<a name="line-254"></a><a name="diff"></a><span class='hs-comment'>-- | Unsafe internal method for computing differences in a known universe of discourse.</span>
-<a name="line-255"></a><span class='hs-comment'>--</span>
-<a name="line-256"></a><span class='hs-comment'>-- Preconditions:</span>
-<a name="line-257"></a><span class='hs-comment'>--</span>
-<a name="line-258"></a><span class='hs-comment'>-- (1) @m &gt;= 0@</span>
-<a name="line-259"></a><span class='hs-comment'>-- 2   @m' &gt;= 0@</span>
-<a name="line-260"></a><span class='hs-comment'>-- 3   @a /= -1@</span>
-<a name="line-261"></a><span class='hs-comment'>-- 4   @a' /= -1@</span>
-<a name="line-262"></a><span class='hs-comment'>-- 5   @b /= 0@</span>
-<a name="line-263"></a><span class='hs-comment'>-- 6   @b' /= 0@</span>
-<a name="line-264"></a><span class='hs-comment'>-- 7   @u''@ is a previously obtained copy of @(fromEnum minBound, fromEnum maxBound)@</span>
-<a name="line-265"></a><span class='hs-comment'>--</span>
-<a name="line-266"></a><span class='hs-definition'>diff</span> <span class='hs-keyglyph'>::</span> <span class='hs-conid'>Enum</span> <span class='hs-varid'>a</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>BitSet</span> <span class='hs-varid'>a</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-conid'>BitSet</span> <span class='hs-varid'>a</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-layout'>(</span><span class='hs-conid'>Int</span><span class='hs-layout'>,</span><span class='hs-conid'>Int</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-conid'>BitSet</span> <span class='hs-varid'>a</span> 
-<a name="line-267"></a><span class='hs-definition'>diff</span> <span class='hs-varid'>x</span><span class='hs-keyglyph'>@</span><span class='hs-layout'>(</span><span class='hs-conid'>BS</span> <span class='hs-varid'>a</span> <span class='hs-keyword'>_</span> <span class='hs-keyword'>_</span> <span class='hs-varid'>l</span> <span class='hs-varid'>h</span> <span class='hs-varid'>m</span> <span class='hs-keyword'>_</span> <span class='hs-keyword'>_</span><span class='hs-layout'>)</span> <span class='hs-layout'>(</span><span class='hs-conid'>BS</span> <span class='hs-keyword'>_</span> <span class='hs-varid'>b'</span> <span class='hs-keyword'>_</span> <span class='hs-varid'>l'</span> <span class='hs-varid'>h'</span> <span class='hs-varid'>m'</span> <span class='hs-keyword'>_</span> <span class='hs-keyword'>_</span><span class='hs-layout'>)</span> <span class='hs-varid'>u''</span>
-<a name="line-268"></a>    <span class='hs-keyglyph'>|</span> <span class='hs-varid'>h</span> <span class='hs-varop'>&lt;</span> <span class='hs-varid'>l'</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>x</span>
-<a name="line-269"></a>    <span class='hs-keyglyph'>|</span> <span class='hs-varid'>h'</span> <span class='hs-varop'>&lt;</span> <span class='hs-varid'>l</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>x</span>
-<a name="line-270"></a>    <span class='hs-keyglyph'>|</span> <span class='hs-varid'>otherwise</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>bs</span> <span class='hs-layout'>(</span><span class='hs-varid'>max</span> <span class='hs-layout'>(</span><span class='hs-varid'>a</span> <span class='hs-comment'>-</span> <span class='hs-varid'>b'</span><span class='hs-layout'>)</span> <span class='hs-num'>0</span><span class='hs-layout'>)</span> <span class='hs-varid'>a</span> <span class='hs-layout'>(</span><span class='hs-varid'>recount</span> <span class='hs-varid'>m''</span><span class='hs-layout'>)</span> <span class='hs-varid'>l</span> <span class='hs-varid'>h</span> <span class='hs-varid'>m''</span> <span class='hs-varid'>u''</span>
-<a name="line-271"></a>    <span class='hs-keyword'>where</span> 
-<a name="line-272"></a>        <span class='hs-varid'>m''</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>m</span> <span class='hs-varop'>.&amp;.</span> <span class='hs-varid'>shift</span> <span class='hs-layout'>(</span><span class='hs-conid'>Bits</span><span class='hs-varop'>.</span><span class='hs-varid'>complement</span> <span class='hs-varid'>m'</span><span class='hs-layout'>)</span> <span class='hs-layout'>(</span><span class='hs-varid'>l'</span> <span class='hs-comment'>-</span> <span class='hs-varid'>l</span><span class='hs-layout'>)</span>
-<a name="line-273"></a><span class='hs-comment'>{-# INLINE diff #-}</span>
-<a name="line-274"></a>
-<a name="line-275"></a><a name="difference"></a><span class='hs-comment'>-- | /O(d)/ Remove all elements present in the second bitset from the first</span>
-<a name="line-276"></a><span class='hs-definition'>difference</span> <span class='hs-keyglyph'>::</span> <span class='hs-conid'>Enum</span> <span class='hs-varid'>a</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>BitSet</span> <span class='hs-varid'>a</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-conid'>BitSet</span> <span class='hs-varid'>a</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-conid'>BitSet</span> <span class='hs-varid'>a</span> 
-<a name="line-277"></a><span class='hs-definition'>difference</span> <span class='hs-varid'>x</span><span class='hs-keyglyph'>@</span><span class='hs-layout'>(</span><span class='hs-conid'>BS</span> <span class='hs-varid'>a</span> <span class='hs-varid'>b</span> <span class='hs-keyword'>_</span> <span class='hs-keyword'>_</span> <span class='hs-keyword'>_</span> <span class='hs-varid'>m</span> <span class='hs-varid'>u</span> <span class='hs-keyword'>_</span><span class='hs-layout'>)</span>  <span class='hs-varid'>y</span><span class='hs-keyglyph'>@</span><span class='hs-layout'>(</span><span class='hs-conid'>BS</span> <span class='hs-varid'>a'</span> <span class='hs-varid'>b'</span> <span class='hs-keyword'>_</span> <span class='hs-keyword'>_</span> <span class='hs-keyword'>_</span> <span class='hs-varid'>m'</span> <span class='hs-keyword'>_</span> <span class='hs-keyword'>_</span><span class='hs-layout'>)</span> 
-<a name="line-278"></a>   <span class='hs-keyglyph'>|</span> <span class='hs-varid'>a</span> <span class='hs-varop'>==</span> <span class='hs-comment'>-</span><span class='hs-num'>1</span>       <span class='hs-keyglyph'>=</span> <span class='hs-varid'>pseudoComplement</span> <span class='hs-varid'>y</span> <span class='hs-varid'>u</span>
-<a name="line-279"></a>   <span class='hs-keyglyph'>|</span> <span class='hs-varid'>a'</span> <span class='hs-varop'>==</span> <span class='hs-comment'>-</span><span class='hs-num'>1</span>      <span class='hs-keyglyph'>=</span> <span class='hs-varid'>empty</span>
-<a name="line-280"></a>   <span class='hs-keyglyph'>|</span> <span class='hs-varid'>b</span> <span class='hs-varop'>==</span> <span class='hs-num'>0</span>        <span class='hs-keyglyph'>=</span> <span class='hs-varid'>empty</span>
-<a name="line-281"></a>   <span class='hs-keyglyph'>|</span> <span class='hs-varid'>b'</span> <span class='hs-varop'>==</span> <span class='hs-num'>0</span>       <span class='hs-keyglyph'>=</span> <span class='hs-varid'>x</span>
-<a name="line-282"></a>   <span class='hs-keyglyph'>|</span> <span class='hs-varid'>m</span> <span class='hs-varop'>&lt;</span> <span class='hs-num'>0</span><span class='hs-layout'>,</span> <span class='hs-varid'>m'</span> <span class='hs-varop'>&lt;</span> <span class='hs-num'>0</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>diff</span> <span class='hs-layout'>(</span><span class='hs-varid'>recomplement</span> <span class='hs-varid'>y</span><span class='hs-layout'>)</span> <span class='hs-layout'>(</span><span class='hs-varid'>recomplement</span> <span class='hs-varid'>x</span><span class='hs-layout'>)</span> <span class='hs-varid'>u</span>
-<a name="line-283"></a>   <span class='hs-keyglyph'>|</span> <span class='hs-varid'>m</span> <span class='hs-varop'>&lt;</span> <span class='hs-num'>0</span>         <span class='hs-keyglyph'>=</span> <span class='hs-varid'>pseudoComplement</span> <span class='hs-layout'>(</span><span class='hs-varid'>recomplement</span> <span class='hs-varid'>x</span> <span class='hs-varop'>`union`</span> <span class='hs-varid'>y</span><span class='hs-layout'>)</span> <span class='hs-varid'>u</span>
-<a name="line-284"></a>   <span class='hs-keyglyph'>|</span> <span class='hs-varid'>m'</span> <span class='hs-varop'>&lt;</span> <span class='hs-num'>0</span>        <span class='hs-keyglyph'>=</span> <span class='hs-varid'>x</span> <span class='hs-varop'>`union`</span> <span class='hs-varid'>recomplement</span> <span class='hs-varid'>y</span> 
-<a name="line-285"></a>   <span class='hs-keyglyph'>|</span> <span class='hs-varid'>otherwise</span>     <span class='hs-keyglyph'>=</span> <span class='hs-varid'>diff</span> <span class='hs-varid'>x</span> <span class='hs-varid'>y</span> <span class='hs-varid'>u</span>
-<a name="line-286"></a>    
-<a name="line-287"></a><a name="\\"></a><span class='hs-comment'>-- | /O(d)/ Infix 'difference'</span>
-<a name="line-288"></a><span class='hs-layout'>(</span><span class='hs-varop'>\\</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>::</span> <span class='hs-conid'>Enum</span> <span class='hs-varid'>a</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>BitSet</span> <span class='hs-varid'>a</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-conid'>BitSet</span> <span class='hs-varid'>a</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-conid'>BitSet</span> <span class='hs-varid'>a</span> 
-<a name="line-289"></a><span class='hs-layout'>(</span><span class='hs-varop'>\\</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>difference</span>
-<a name="line-290"></a><span class='hs-comment'>{-# INLINE (\\) #-}</span>
-<a name="line-291"></a>
-<a name="line-292"></a><span class='hs-keyword'>instance</span> <span class='hs-conid'>Eq</span> <span class='hs-layout'>(</span><span class='hs-conid'>BitSet</span> <span class='hs-varid'>a</span><span class='hs-layout'>)</span> <span class='hs-keyword'>where</span>
-<a name="line-293"></a>    <span class='hs-varid'>x</span><span class='hs-keyglyph'>@</span><span class='hs-layout'>(</span><span class='hs-conid'>BS</span> <span class='hs-keyword'>_</span> <span class='hs-keyword'>_</span> <span class='hs-keyword'>_</span> <span class='hs-varid'>l</span> <span class='hs-keyword'>_</span> <span class='hs-varid'>m</span> <span class='hs-varid'>u</span> <span class='hs-keyword'>_</span><span class='hs-layout'>)</span> <span class='hs-varop'>==</span> <span class='hs-varid'>y</span><span class='hs-keyglyph'>@</span><span class='hs-layout'>(</span><span class='hs-conid'>BS</span> <span class='hs-keyword'>_</span> <span class='hs-keyword'>_</span> <span class='hs-keyword'>_</span> <span class='hs-varid'>l'</span> <span class='hs-keyword'>_</span> <span class='hs-varid'>m'</span> <span class='hs-keyword'>_</span> <span class='hs-keyword'>_</span><span class='hs-layout'>)</span>
-<a name="line-294"></a>        <span class='hs-keyglyph'>|</span> <span class='hs-varid'>signum</span> <span class='hs-varid'>m</span> <span class='hs-varop'>==</span> <span class='hs-varid'>signum</span> <span class='hs-varid'>m'</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>shift</span> <span class='hs-varid'>m</span> <span class='hs-layout'>(</span><span class='hs-varid'>l</span> <span class='hs-comment'>-</span> <span class='hs-varid'>l''</span><span class='hs-layout'>)</span> <span class='hs-varop'>==</span> <span class='hs-varid'>shift</span> <span class='hs-varid'>m'</span> <span class='hs-layout'>(</span><span class='hs-varid'>l'</span> <span class='hs-comment'>-</span> <span class='hs-varid'>l''</span><span class='hs-layout'>)</span> 
-<a name="line-295"></a>        <span class='hs-keyglyph'>|</span> <span class='hs-varid'>m'</span> <span class='hs-varop'>&lt;</span> <span class='hs-num'>0</span>                <span class='hs-keyglyph'>=</span> <span class='hs-varid'>y</span> <span class='hs-varop'>==</span> <span class='hs-varid'>x</span>
-<a name="line-296"></a>        <span class='hs-keyglyph'>|</span> <span class='hs-varid'>otherwise</span>             <span class='hs-keyglyph'>=</span> <span class='hs-varid'>mask</span> <span class='hs-varop'>.&amp;.</span> <span class='hs-varid'>shift</span> <span class='hs-varid'>m</span> <span class='hs-layout'>(</span><span class='hs-varid'>l</span> <span class='hs-comment'>-</span> <span class='hs-varid'>ul</span><span class='hs-layout'>)</span> <span class='hs-varop'>==</span> <span class='hs-varid'>shift</span> <span class='hs-varid'>m'</span> <span class='hs-layout'>(</span><span class='hs-varid'>l</span> <span class='hs-comment'>-</span> <span class='hs-varid'>ul</span><span class='hs-layout'>)</span>
-<a name="line-297"></a>        <span class='hs-keyword'>where</span> 
-<a name="line-298"></a>            <span class='hs-varid'>l''</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>min</span> <span class='hs-varid'>l</span> <span class='hs-varid'>l'</span>
-<a name="line-299"></a>            <span class='hs-varid'>mask</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>setBit</span> <span class='hs-num'>0</span> <span class='hs-layout'>(</span><span class='hs-varid'>uh</span> <span class='hs-comment'>-</span> <span class='hs-varid'>ul</span> <span class='hs-varop'>+</span> <span class='hs-num'>1</span><span class='hs-layout'>)</span> <span class='hs-comment'>-</span> <span class='hs-num'>1</span>
-<a name="line-300"></a>            <span class='hs-varid'>ul</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>fst</span> <span class='hs-varid'>u</span>
-<a name="line-301"></a>            <span class='hs-varid'>uh</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>snd</span> <span class='hs-varid'>u</span>
-<a name="line-302"></a>
-<a name="line-303"></a><span class='hs-keyword'>instance</span> <span class='hs-layout'>(</span><span class='hs-conid'>Enum</span> <span class='hs-varid'>a</span><span class='hs-layout'>,</span> <span class='hs-conid'>Bounded</span> <span class='hs-varid'>a</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>Bounded</span> <span class='hs-layout'>(</span><span class='hs-conid'>BitSet</span> <span class='hs-varid'>a</span><span class='hs-layout'>)</span> <span class='hs-keyword'>where</span>
-<a name="line-304"></a>    <span class='hs-varid'>minBound</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>empty</span>
-<a name="line-305"></a>    <span class='hs-varid'>maxBound</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>result</span> <span class='hs-keyword'>where</span>
-<a name="line-306"></a>        <span class='hs-varid'>result</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>BS</span> <span class='hs-varid'>n</span> <span class='hs-varid'>n</span> <span class='hs-varid'>n</span> <span class='hs-varid'>l</span> <span class='hs-varid'>h</span> <span class='hs-varid'>m</span> <span class='hs-layout'>(</span><span class='hs-varid'>l</span><span class='hs-layout'>,</span><span class='hs-varid'>h</span><span class='hs-layout'>)</span> <span class='hs-varid'>toEnum</span>
-<a name="line-307"></a>        <span class='hs-varid'>n</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>h</span> <span class='hs-comment'>-</span> <span class='hs-varid'>l</span> <span class='hs-varop'>+</span> <span class='hs-num'>1</span>
-<a name="line-308"></a>        <span class='hs-varid'>l</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>fromEnum</span> <span class='hs-layout'>(</span><span class='hs-varid'>minBound</span> <span class='hs-varop'>`asArgTypeOf`</span> <span class='hs-varid'>result</span><span class='hs-layout'>)</span>
-<a name="line-309"></a>        <span class='hs-varid'>h</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>fromEnum</span> <span class='hs-layout'>(</span><span class='hs-varid'>maxBound</span> <span class='hs-varop'>`asArgTypeOf`</span> <span class='hs-varid'>result</span><span class='hs-layout'>)</span>
-<a name="line-310"></a>        <span class='hs-varid'>m</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>setBit</span> <span class='hs-num'>0</span> <span class='hs-varid'>n</span> <span class='hs-comment'>-</span> <span class='hs-num'>1</span>
+<a name="line-232"></a><a name="intersection"></a><span class='hs-comment'>-- | /O(d)/ </span>
+<a name="line-233"></a><span class='hs-definition'>intersection</span> <span class='hs-keyglyph'>::</span> <span class='hs-conid'>Enum</span> <span class='hs-varid'>a</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>BitSet</span> <span class='hs-varid'>a</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-conid'>BitSet</span> <span class='hs-varid'>a</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-conid'>BitSet</span> <span class='hs-varid'>a</span> 
+<a name="line-234"></a><span class='hs-definition'>intersection</span> <span class='hs-varid'>x</span><span class='hs-keyglyph'>@</span><span class='hs-layout'>(</span><span class='hs-conid'>BS</span> <span class='hs-varid'>a</span> <span class='hs-varid'>b</span> <span class='hs-keyword'>_</span> <span class='hs-varid'>l</span> <span class='hs-varid'>h</span> <span class='hs-varid'>m</span> <span class='hs-varid'>u</span> <span class='hs-keyword'>_</span><span class='hs-layout'>)</span> <span class='hs-varid'>y</span><span class='hs-keyglyph'>@</span><span class='hs-layout'>(</span><span class='hs-conid'>BS</span> <span class='hs-varid'>a'</span> <span class='hs-varid'>b'</span> <span class='hs-keyword'>_</span> <span class='hs-varid'>l'</span> <span class='hs-varid'>h'</span> <span class='hs-varid'>m'</span> <span class='hs-varid'>u'</span> <span class='hs-keyword'>_</span><span class='hs-layout'>)</span>
+<a name="line-235"></a>    <span class='hs-keyglyph'>|</span> <span class='hs-varid'>l'</span> <span class='hs-varop'>&lt;</span> <span class='hs-varid'>l</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>intersection</span> <span class='hs-varid'>y</span> <span class='hs-varid'>x</span>                                 
+<a name="line-236"></a>    <span class='hs-keyglyph'>|</span> <span class='hs-varid'>b</span> <span class='hs-varop'>==</span> <span class='hs-num'>0</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>empty</span>
+<a name="line-237"></a>    <span class='hs-keyglyph'>|</span> <span class='hs-varid'>b'</span> <span class='hs-varop'>==</span> <span class='hs-num'>0</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>empty</span>
+<a name="line-238"></a>    <span class='hs-keyglyph'>|</span> <span class='hs-varid'>a</span> <span class='hs-varop'>==</span> <span class='hs-comment'>-</span><span class='hs-num'>1</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>y</span>
+<a name="line-239"></a>    <span class='hs-keyglyph'>|</span> <span class='hs-varid'>a'</span> <span class='hs-varop'>==</span> <span class='hs-comment'>-</span><span class='hs-num'>1</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>x</span>
+<a name="line-240"></a>    <span class='hs-keyglyph'>|</span> <span class='hs-varid'>m</span> <span class='hs-varop'>&lt;</span> <span class='hs-num'>0</span><span class='hs-layout'>,</span> <span class='hs-varid'>m'</span> <span class='hs-varop'>&lt;</span> <span class='hs-num'>0</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>recomplement</span> <span class='hs-layout'>(</span><span class='hs-varid'>union</span> <span class='hs-layout'>(</span><span class='hs-varid'>recomplement</span> <span class='hs-varid'>x</span><span class='hs-layout'>)</span> <span class='hs-layout'>(</span><span class='hs-varid'>recomplement</span> <span class='hs-varid'>y</span><span class='hs-layout'>)</span><span class='hs-layout'>)</span>
+<a name="line-241"></a>    <span class='hs-keyglyph'>|</span> <span class='hs-varid'>m'</span> <span class='hs-varop'>&lt;</span> <span class='hs-num'>0</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>diff</span> <span class='hs-varid'>x</span> <span class='hs-layout'>(</span><span class='hs-varid'>recomplement</span> <span class='hs-varid'>y</span><span class='hs-layout'>)</span> <span class='hs-varid'>u'</span>
+<a name="line-242"></a>    <span class='hs-keyglyph'>|</span> <span class='hs-varid'>m</span> <span class='hs-varop'>&lt;</span> <span class='hs-num'>0</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>diff</span> <span class='hs-varid'>y</span> <span class='hs-layout'>(</span><span class='hs-varid'>recomplement</span> <span class='hs-varid'>x</span><span class='hs-layout'>)</span> <span class='hs-varid'>u</span>
+<a name="line-243"></a>    <span class='hs-keyglyph'>|</span> <span class='hs-varid'>h</span> <span class='hs-varop'>&lt;</span> <span class='hs-varid'>l'</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>empty</span> 
+<a name="line-244"></a>    <span class='hs-keyglyph'>|</span> <span class='hs-varid'>otherwise</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>bs</span> <span class='hs-num'>0</span> <span class='hs-layout'>(</span><span class='hs-varid'>b</span> <span class='hs-varop'>`min`</span> <span class='hs-varid'>b'</span><span class='hs-layout'>)</span> <span class='hs-layout'>(</span><span class='hs-varid'>recount</span> <span class='hs-varid'>m''</span><span class='hs-layout'>)</span> <span class='hs-varid'>l''</span> <span class='hs-layout'>(</span><span class='hs-varid'>h</span> <span class='hs-varop'>`min`</span> <span class='hs-varid'>h'</span><span class='hs-layout'>)</span> <span class='hs-varid'>m''</span> <span class='hs-varid'>u</span>
+<a name="line-245"></a>    <span class='hs-keyword'>where</span>
+<a name="line-246"></a>        <span class='hs-varid'>l''</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>max</span> <span class='hs-varid'>l</span> <span class='hs-varid'>l'</span>
+<a name="line-247"></a>        <span class='hs-varid'>m''</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>shift</span> <span class='hs-varid'>m</span> <span class='hs-layout'>(</span><span class='hs-varid'>l''</span> <span class='hs-comment'>-</span> <span class='hs-varid'>l</span><span class='hs-layout'>)</span> <span class='hs-varop'>.&amp;.</span> <span class='hs-varid'>shift</span> <span class='hs-varid'>m'</span> <span class='hs-layout'>(</span><span class='hs-varid'>l''</span> <span class='hs-comment'>-</span> <span class='hs-varid'>l'</span><span class='hs-layout'>)</span>
+<a name="line-248"></a>
+<a name="line-249"></a><a name="diff"></a><span class='hs-comment'>-- | Unsafe internal method for computing differences in a known universe of discourse.</span>
+<a name="line-250"></a><span class='hs-comment'>--</span>
+<a name="line-251"></a><span class='hs-comment'>-- Preconditions:</span>
+<a name="line-252"></a><span class='hs-comment'>--</span>
+<a name="line-253"></a><span class='hs-comment'>-- (1) @m &gt;= 0@</span>
+<a name="line-254"></a><span class='hs-comment'>-- 2   @m' &gt;= 0@</span>
+<a name="line-255"></a><span class='hs-comment'>-- 3   @a /= -1@</span>
+<a name="line-256"></a><span class='hs-comment'>-- 4   @a' /= -1@</span>
+<a name="line-257"></a><span class='hs-comment'>-- 5   @b /= 0@</span>
+<a name="line-258"></a><span class='hs-comment'>-- 6   @b' /= 0@</span>
+<a name="line-259"></a><span class='hs-comment'>-- 7   @u''@ is a previously obtained copy of @(fromEnum minBound, fromEnum maxBound)@</span>
+<a name="line-260"></a><span class='hs-comment'>--</span>
+<a name="line-261"></a><span class='hs-definition'>diff</span> <span class='hs-keyglyph'>::</span> <span class='hs-conid'>Enum</span> <span class='hs-varid'>a</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>BitSet</span> <span class='hs-varid'>a</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-conid'>BitSet</span> <span class='hs-varid'>a</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-layout'>(</span><span class='hs-conid'>Int</span><span class='hs-layout'>,</span><span class='hs-conid'>Int</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-conid'>BitSet</span> <span class='hs-varid'>a</span> 
+<a name="line-262"></a><span class='hs-definition'>diff</span> <span class='hs-varid'>x</span><span class='hs-keyglyph'>@</span><span class='hs-layout'>(</span><span class='hs-conid'>BS</span> <span class='hs-varid'>a</span> <span class='hs-keyword'>_</span> <span class='hs-keyword'>_</span> <span class='hs-varid'>l</span> <span class='hs-varid'>h</span> <span class='hs-varid'>m</span> <span class='hs-keyword'>_</span> <span class='hs-keyword'>_</span><span class='hs-layout'>)</span> <span class='hs-layout'>(</span><span class='hs-conid'>BS</span> <span class='hs-keyword'>_</span> <span class='hs-varid'>b'</span> <span class='hs-keyword'>_</span> <span class='hs-varid'>l'</span> <span class='hs-varid'>h'</span> <span class='hs-varid'>m'</span> <span class='hs-keyword'>_</span> <span class='hs-keyword'>_</span><span class='hs-layout'>)</span> <span class='hs-varid'>u''</span>
+<a name="line-263"></a>    <span class='hs-keyglyph'>|</span> <span class='hs-varid'>h</span> <span class='hs-varop'>&lt;</span> <span class='hs-varid'>l'</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>x</span>
+<a name="line-264"></a>    <span class='hs-keyglyph'>|</span> <span class='hs-varid'>h'</span> <span class='hs-varop'>&lt;</span> <span class='hs-varid'>l</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>x</span>
+<a name="line-265"></a>    <span class='hs-keyglyph'>|</span> <span class='hs-varid'>otherwise</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>bs</span> <span class='hs-layout'>(</span><span class='hs-varid'>max</span> <span class='hs-layout'>(</span><span class='hs-varid'>a</span> <span class='hs-comment'>-</span> <span class='hs-varid'>b'</span><span class='hs-layout'>)</span> <span class='hs-num'>0</span><span class='hs-layout'>)</span> <span class='hs-varid'>a</span> <span class='hs-layout'>(</span><span class='hs-varid'>recount</span> <span class='hs-varid'>m''</span><span class='hs-layout'>)</span> <span class='hs-varid'>l</span> <span class='hs-varid'>h</span> <span class='hs-varid'>m''</span> <span class='hs-varid'>u''</span>
+<a name="line-266"></a>    <span class='hs-keyword'>where</span> 
+<a name="line-267"></a>        <span class='hs-varid'>m''</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>m</span> <span class='hs-varop'>.&amp;.</span> <span class='hs-varid'>shift</span> <span class='hs-layout'>(</span><span class='hs-varid'>complement</span> <span class='hs-varid'>m'</span><span class='hs-layout'>)</span> <span class='hs-layout'>(</span><span class='hs-varid'>l'</span> <span class='hs-comment'>-</span> <span class='hs-varid'>l</span><span class='hs-layout'>)</span>
+<a name="line-268"></a><span class='hs-comment'>{-# INLINE diff #-}</span>
+<a name="line-269"></a>
+<a name="line-270"></a><a name="difference"></a><span class='hs-comment'>-- | /O(d)/ Remove all elements present in the second bitset from the first</span>
+<a name="line-271"></a><span class='hs-definition'>difference</span> <span class='hs-keyglyph'>::</span> <span class='hs-conid'>Enum</span> <span class='hs-varid'>a</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>BitSet</span> <span class='hs-varid'>a</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-conid'>BitSet</span> <span class='hs-varid'>a</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-conid'>BitSet</span> <span class='hs-varid'>a</span> 
+<a name="line-272"></a><span class='hs-definition'>difference</span> <span class='hs-varid'>x</span><span class='hs-keyglyph'>@</span><span class='hs-layout'>(</span><span class='hs-conid'>BS</span> <span class='hs-varid'>a</span> <span class='hs-varid'>b</span> <span class='hs-keyword'>_</span> <span class='hs-keyword'>_</span> <span class='hs-keyword'>_</span> <span class='hs-varid'>m</span> <span class='hs-varid'>u</span> <span class='hs-keyword'>_</span><span class='hs-layout'>)</span>  <span class='hs-varid'>y</span><span class='hs-keyglyph'>@</span><span class='hs-layout'>(</span><span class='hs-conid'>BS</span> <span class='hs-varid'>a'</span> <span class='hs-varid'>b'</span> <span class='hs-keyword'>_</span> <span class='hs-keyword'>_</span> <span class='hs-keyword'>_</span> <span class='hs-varid'>m'</span> <span class='hs-keyword'>_</span> <span class='hs-keyword'>_</span><span class='hs-layout'>)</span> 
+<a name="line-273"></a>   <span class='hs-keyglyph'>|</span> <span class='hs-varid'>a</span> <span class='hs-varop'>==</span> <span class='hs-comment'>-</span><span class='hs-num'>1</span>       <span class='hs-keyglyph'>=</span> <span class='hs-varid'>pseudoComplement</span> <span class='hs-varid'>y</span> <span class='hs-varid'>u</span>
+<a name="line-274"></a>   <span class='hs-keyglyph'>|</span> <span class='hs-varid'>a'</span> <span class='hs-varop'>==</span> <span class='hs-comment'>-</span><span class='hs-num'>1</span>      <span class='hs-keyglyph'>=</span> <span class='hs-varid'>empty</span>
+<a name="line-275"></a>   <span class='hs-keyglyph'>|</span> <span class='hs-varid'>b</span> <span class='hs-varop'>==</span> <span class='hs-num'>0</span>        <span class='hs-keyglyph'>=</span> <span class='hs-varid'>empty</span>
+<a name="line-276"></a>   <span class='hs-keyglyph'>|</span> <span class='hs-varid'>b'</span> <span class='hs-varop'>==</span> <span class='hs-num'>0</span>       <span class='hs-keyglyph'>=</span> <span class='hs-varid'>x</span>
+<a name="line-277"></a>   <span class='hs-keyglyph'>|</span> <span class='hs-varid'>m</span> <span class='hs-varop'>&lt;</span> <span class='hs-num'>0</span><span class='hs-layout'>,</span> <span class='hs-varid'>m'</span> <span class='hs-varop'>&lt;</span> <span class='hs-num'>0</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>diff</span> <span class='hs-layout'>(</span><span class='hs-varid'>recomplement</span> <span class='hs-varid'>y</span><span class='hs-layout'>)</span> <span class='hs-layout'>(</span><span class='hs-varid'>recomplement</span> <span class='hs-varid'>x</span><span class='hs-layout'>)</span> <span class='hs-varid'>u</span>
+<a name="line-278"></a>   <span class='hs-keyglyph'>|</span> <span class='hs-varid'>m</span> <span class='hs-varop'>&lt;</span> <span class='hs-num'>0</span>         <span class='hs-keyglyph'>=</span> <span class='hs-varid'>pseudoComplement</span> <span class='hs-layout'>(</span><span class='hs-varid'>recomplement</span> <span class='hs-varid'>x</span> <span class='hs-varop'>`union`</span> <span class='hs-varid'>y</span><span class='hs-layout'>)</span> <span class='hs-varid'>u</span>
+<a name="line-279"></a>   <span class='hs-keyglyph'>|</span> <span class='hs-varid'>m'</span> <span class='hs-varop'>&lt;</span> <span class='hs-num'>0</span>        <span class='hs-keyglyph'>=</span> <span class='hs-varid'>x</span> <span class='hs-varop'>`union`</span> <span class='hs-varid'>recomplement</span> <span class='hs-varid'>y</span> 
+<a name="line-280"></a>   <span class='hs-keyglyph'>|</span> <span class='hs-varid'>otherwise</span>     <span class='hs-keyglyph'>=</span> <span class='hs-varid'>diff</span> <span class='hs-varid'>x</span> <span class='hs-varid'>y</span> <span class='hs-varid'>u</span>
+<a name="line-281"></a>    
+<a name="line-282"></a><a name="\\"></a><span class='hs-comment'>-- | /O(d)/ Infix 'difference'</span>
+<a name="line-283"></a><span class='hs-layout'>(</span><span class='hs-varop'>\\</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>::</span> <span class='hs-conid'>Enum</span> <span class='hs-varid'>a</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>BitSet</span> <span class='hs-varid'>a</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-conid'>BitSet</span> <span class='hs-varid'>a</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-conid'>BitSet</span> <span class='hs-varid'>a</span> 
+<a name="line-284"></a><span class='hs-layout'>(</span><span class='hs-varop'>\\</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>difference</span>
+<a name="line-285"></a><span class='hs-comment'>{-# INLINE (\\) #-}</span>
+<a name="line-286"></a>
+<a name="line-287"></a><span class='hs-keyword'>instance</span> <span class='hs-conid'>Eq</span> <span class='hs-layout'>(</span><span class='hs-conid'>BitSet</span> <span class='hs-varid'>a</span><span class='hs-layout'>)</span> <span class='hs-keyword'>where</span>
+<a name="line-288"></a>    <span class='hs-varid'>x</span><span class='hs-keyglyph'>@</span><span class='hs-layout'>(</span><span class='hs-conid'>BS</span> <span class='hs-keyword'>_</span> <span class='hs-keyword'>_</span> <span class='hs-keyword'>_</span> <span class='hs-varid'>l</span> <span class='hs-keyword'>_</span> <span class='hs-varid'>m</span> <span class='hs-varid'>u</span> <span class='hs-keyword'>_</span><span class='hs-layout'>)</span> <span class='hs-varop'>==</span> <span class='hs-varid'>y</span><span class='hs-keyglyph'>@</span><span class='hs-layout'>(</span><span class='hs-conid'>BS</span> <span class='hs-keyword'>_</span> <span class='hs-keyword'>_</span> <span class='hs-keyword'>_</span> <span class='hs-varid'>l'</span> <span class='hs-keyword'>_</span> <span class='hs-varid'>m'</span> <span class='hs-keyword'>_</span> <span class='hs-keyword'>_</span><span class='hs-layout'>)</span>
+<a name="line-289"></a>        <span class='hs-keyglyph'>|</span> <span class='hs-varid'>signum</span> <span class='hs-varid'>m</span> <span class='hs-varop'>==</span> <span class='hs-varid'>signum</span> <span class='hs-varid'>m'</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>shift</span> <span class='hs-varid'>m</span> <span class='hs-layout'>(</span><span class='hs-varid'>l</span> <span class='hs-comment'>-</span> <span class='hs-varid'>l''</span><span class='hs-layout'>)</span> <span class='hs-varop'>==</span> <span class='hs-varid'>shift</span> <span class='hs-varid'>m'</span> <span class='hs-layout'>(</span><span class='hs-varid'>l'</span> <span class='hs-comment'>-</span> <span class='hs-varid'>l''</span><span class='hs-layout'>)</span> 
+<a name="line-290"></a>        <span class='hs-keyglyph'>|</span> <span class='hs-varid'>m'</span> <span class='hs-varop'>&lt;</span> <span class='hs-num'>0</span>                <span class='hs-keyglyph'>=</span> <span class='hs-varid'>y</span> <span class='hs-varop'>==</span> <span class='hs-varid'>x</span>
+<a name="line-291"></a>        <span class='hs-keyglyph'>|</span> <span class='hs-varid'>otherwise</span>             <span class='hs-keyglyph'>=</span> <span class='hs-varid'>mask</span> <span class='hs-varop'>.&amp;.</span> <span class='hs-varid'>shift</span> <span class='hs-varid'>m</span> <span class='hs-layout'>(</span><span class='hs-varid'>l</span> <span class='hs-comment'>-</span> <span class='hs-varid'>ul</span><span class='hs-layout'>)</span> <span class='hs-varop'>==</span> <span class='hs-varid'>shift</span> <span class='hs-varid'>m'</span> <span class='hs-layout'>(</span><span class='hs-varid'>l</span> <span class='hs-comment'>-</span> <span class='hs-varid'>ul</span><span class='hs-layout'>)</span>
+<a name="line-292"></a>        <span class='hs-keyword'>where</span> 
+<a name="line-293"></a>            <span class='hs-varid'>l''</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>min</span> <span class='hs-varid'>l</span> <span class='hs-varid'>l'</span>
+<a name="line-294"></a>            <span class='hs-varid'>mask</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>setBit</span> <span class='hs-num'>0</span> <span class='hs-layout'>(</span><span class='hs-varid'>uh</span> <span class='hs-comment'>-</span> <span class='hs-varid'>ul</span> <span class='hs-varop'>+</span> <span class='hs-num'>1</span><span class='hs-layout'>)</span> <span class='hs-comment'>-</span> <span class='hs-num'>1</span>
+<a name="line-295"></a>            <span class='hs-varid'>ul</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>fst</span> <span class='hs-varid'>u</span>
+<a name="line-296"></a>            <span class='hs-varid'>uh</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>snd</span> <span class='hs-varid'>u</span>
+<a name="line-297"></a>
+<a name="line-298"></a><span class='hs-keyword'>instance</span> <span class='hs-layout'>(</span><span class='hs-conid'>Enum</span> <span class='hs-varid'>a</span><span class='hs-layout'>,</span> <span class='hs-conid'>Bounded</span> <span class='hs-varid'>a</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>Bounded</span> <span class='hs-layout'>(</span><span class='hs-conid'>BitSet</span> <span class='hs-varid'>a</span><span class='hs-layout'>)</span> <span class='hs-keyword'>where</span>
+<a name="line-299"></a>    <span class='hs-varid'>minBound</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>empty</span>
+<a name="line-300"></a>    <span class='hs-varid'>maxBound</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>result</span> <span class='hs-keyword'>where</span>
+<a name="line-301"></a>        <span class='hs-varid'>result</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>BS</span> <span class='hs-varid'>n</span> <span class='hs-varid'>n</span> <span class='hs-varid'>n</span> <span class='hs-varid'>l</span> <span class='hs-varid'>h</span> <span class='hs-varid'>m</span> <span class='hs-layout'>(</span><span class='hs-varid'>l</span><span class='hs-layout'>,</span><span class='hs-varid'>h</span><span class='hs-layout'>)</span> <span class='hs-varid'>toEnum</span>
+<a name="line-302"></a>        <span class='hs-varid'>n</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>h</span> <span class='hs-comment'>-</span> <span class='hs-varid'>l</span> <span class='hs-varop'>+</span> <span class='hs-num'>1</span>
+<a name="line-303"></a>        <span class='hs-varid'>l</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>fromEnum</span> <span class='hs-layout'>(</span><span class='hs-varid'>minBound</span> <span class='hs-varop'>`asArgTypeOf`</span> <span class='hs-varid'>result</span><span class='hs-layout'>)</span>
+<a name="line-304"></a>        <span class='hs-varid'>h</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>fromEnum</span> <span class='hs-layout'>(</span><span class='hs-varid'>maxBound</span> <span class='hs-varop'>`asArgTypeOf`</span> <span class='hs-varid'>result</span><span class='hs-layout'>)</span>
+<a name="line-305"></a>        <span class='hs-varid'>m</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>setBit</span> <span class='hs-num'>0</span> <span class='hs-varid'>n</span> <span class='hs-comment'>-</span> <span class='hs-num'>1</span>
+<a name="line-306"></a>
+<a name="line-307"></a><a name="asArgTypeOf"></a><span class='hs-comment'>-- | Utility function to avoid requiring ScopedTypeVariables</span>
+<a name="line-308"></a><span class='hs-definition'>asArgTypeOf</span> <span class='hs-keyglyph'>::</span> <span class='hs-varid'>a</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-varid'>f</span> <span class='hs-varid'>a</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-varid'>a</span>
+<a name="line-309"></a><span class='hs-definition'>asArgTypeOf</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>const</span>
+<a name="line-310"></a><span class='hs-comment'>{-# INLINE asArgTypeOf #-}</span>
hunk ./doc/html/monoids/src/Data-Ring-Semi-BitSet.html 320
-<a name="line-312"></a><a name="asArgTypeOf"></a><span class='hs-comment'>-- | Utility function to avoid requiring ScopedTypeVariables</span>
-<a name="line-313"></a><span class='hs-definition'>asArgTypeOf</span> <span class='hs-keyglyph'>::</span> <span class='hs-varid'>a</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-varid'>f</span> <span class='hs-varid'>a</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-varid'>a</span>
-<a name="line-314"></a><span class='hs-definition'>asArgTypeOf</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>const</span>
-<a name="line-315"></a><span class='hs-comment'>{-# INLINE asArgTypeOf #-}</span>
-<a name="line-316"></a>
-<a name="line-317"></a><a name="recount"></a><span class='hs-comment'>-- | /O(d)/</span>
-<a name="line-318"></a><span class='hs-definition'>recount</span> <span class='hs-keyglyph'>::</span> <span class='hs-conid'>Integer</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-conid'>Int</span>
-<a name="line-319"></a><span class='hs-definition'>recount</span> <span class='hs-varop'>!</span><span class='hs-varid'>n</span> 
-<a name="line-320"></a>    <span class='hs-keyglyph'>|</span> <span class='hs-varid'>n</span> <span class='hs-varop'>&lt;</span> <span class='hs-num'>0</span>     <span class='hs-keyglyph'>=</span> <span class='hs-conid'>Bits</span><span class='hs-varop'>.</span><span class='hs-varid'>complement</span> <span class='hs-layout'>(</span><span class='hs-varid'>recount</span> <span class='hs-layout'>(</span><span class='hs-conid'>Bits</span><span class='hs-varop'>.</span><span class='hs-varid'>complement</span> <span class='hs-varid'>n</span><span class='hs-layout'>)</span><span class='hs-layout'>)</span>
-<a name="line-321"></a>    <span class='hs-keyglyph'>|</span> <span class='hs-varid'>otherwise</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>recount'</span> <span class='hs-num'>0</span> <span class='hs-num'>0</span> 
-<a name="line-322"></a>    <span class='hs-keyword'>where</span>
-<a name="line-323"></a>        <span class='hs-varid'>h</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>hwm</span> <span class='hs-varid'>n</span>
-<a name="line-324"></a>        <span class='hs-varid'>recount'</span> <span class='hs-varop'>!</span><span class='hs-varid'>i</span> <span class='hs-varop'>!</span><span class='hs-varid'>c</span>
-<a name="line-325"></a>            <span class='hs-keyglyph'>|</span> <span class='hs-varid'>i</span> <span class='hs-varop'>&gt;</span> <span class='hs-varid'>h</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>c</span>
-<a name="line-326"></a>            <span class='hs-keyglyph'>|</span> <span class='hs-varid'>otherwise</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>recount'</span> <span class='hs-layout'>(</span><span class='hs-varid'>i</span><span class='hs-varop'>+</span><span class='hs-num'>1</span><span class='hs-layout'>)</span> <span class='hs-layout'>(</span><span class='hs-keyword'>if</span> <span class='hs-varid'>testBit</span> <span class='hs-varid'>n</span> <span class='hs-varid'>i</span> <span class='hs-keyword'>then</span> <span class='hs-varid'>c</span><span class='hs-varop'>+</span><span class='hs-num'>1</span> <span class='hs-keyword'>else</span> <span class='hs-varid'>c</span><span class='hs-layout'>)</span>
-<a name="line-327"></a>
-<a name="line-328"></a><a name="hwm"></a><span class='hs-comment'>-- | /O(d)/. Computes the equivalent of (truncate . logBase 2 . abs) extended with 0 at 0</span>
-<a name="line-329"></a><span class='hs-definition'>hwm</span> <span class='hs-keyglyph'>::</span> <span class='hs-conid'>Integer</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-conid'>Int</span>
-<a name="line-330"></a><span class='hs-definition'>hwm</span> <span class='hs-varop'>!</span><span class='hs-varid'>n</span> 
-<a name="line-331"></a>    <span class='hs-keyglyph'>|</span> <span class='hs-varid'>n</span> <span class='hs-varop'>&lt;</span> <span class='hs-num'>0</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>hwm</span> <span class='hs-layout'>(</span><span class='hs-comment'>-</span><span class='hs-varid'>n</span><span class='hs-layout'>)</span>
-<a name="line-332"></a>    <span class='hs-keyglyph'>|</span> <span class='hs-varid'>n</span> <span class='hs-varop'>&gt;</span> <span class='hs-num'>1</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>scan</span> <span class='hs-varid'>p</span> <span class='hs-layout'>(</span><span class='hs-num'>2</span><span class='hs-varop'>*</span><span class='hs-varid'>p</span><span class='hs-layout'>)</span> 
-<a name="line-333"></a>    <span class='hs-keyglyph'>|</span> <span class='hs-varid'>otherwise</span> <span class='hs-keyglyph'>=</span> <span class='hs-num'>0</span>
-<a name="line-334"></a>    <span class='hs-keyword'>where</span>
-<a name="line-335"></a>        <span class='hs-varid'>p</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>probe</span> <span class='hs-num'>1</span>
-<a name="line-336"></a>        <span class='hs-comment'>-- incrementally compute 2^(2^(i+1)) until it exceeds n</span>
-<a name="line-337"></a>        <span class='hs-varid'>probe</span> <span class='hs-keyglyph'>::</span> <span class='hs-conid'>Int</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-conid'>Int</span>
-<a name="line-338"></a>        <span class='hs-varid'>probe</span> <span class='hs-varop'>!</span><span class='hs-varid'>i</span>
-<a name="line-339"></a>            <span class='hs-keyglyph'>|</span> <span class='hs-varid'>bit</span> <span class='hs-layout'>(</span><span class='hs-num'>2</span><span class='hs-varop'>*</span><span class='hs-varid'>i</span><span class='hs-layout'>)</span> <span class='hs-varop'>&gt;</span> <span class='hs-varid'>n</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>i</span>
-<a name="line-340"></a>            <span class='hs-keyglyph'>|</span> <span class='hs-varid'>otherwise</span>     <span class='hs-keyglyph'>=</span> <span class='hs-varid'>probe</span> <span class='hs-layout'>(</span><span class='hs-num'>2</span><span class='hs-varop'>*</span><span class='hs-varid'>i</span><span class='hs-layout'>)</span>
-<a name="line-341"></a>
-<a name="line-342"></a>        <span class='hs-comment'>-- then scan the powers for the highest set bit</span>
-<a name="line-343"></a>        <span class='hs-varid'>scan</span> <span class='hs-keyglyph'>::</span> <span class='hs-conid'>Int</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-conid'>Int</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-conid'>Int</span>
-<a name="line-344"></a>        <span class='hs-varid'>scan</span> <span class='hs-varop'>!</span><span class='hs-varid'>l</span> <span class='hs-varop'>!</span><span class='hs-varid'>h</span>
-<a name="line-345"></a>            <span class='hs-keyglyph'>|</span> <span class='hs-varid'>l</span> <span class='hs-varop'>==</span> <span class='hs-varid'>h</span>        <span class='hs-keyglyph'>=</span> <span class='hs-varid'>l</span>
-<a name="line-346"></a>            <span class='hs-keyglyph'>|</span> <span class='hs-varid'>bit</span> <span class='hs-layout'>(</span><span class='hs-varid'>m</span><span class='hs-varop'>+</span><span class='hs-num'>1</span><span class='hs-layout'>)</span> <span class='hs-varop'>&gt;</span> <span class='hs-varid'>n</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>scan</span> <span class='hs-varid'>l</span> <span class='hs-varid'>m</span>
-<a name="line-347"></a>            <span class='hs-keyglyph'>|</span> <span class='hs-varid'>otherwise</span>     <span class='hs-keyglyph'>=</span> <span class='hs-varid'>scan</span> <span class='hs-layout'>(</span><span class='hs-varid'>m</span><span class='hs-varop'>+</span><span class='hs-num'>1</span><span class='hs-layout'>)</span> <span class='hs-varid'>h</span>
-<a name="line-348"></a>            <span class='hs-keyword'>where</span> 
-<a name="line-349"></a>                <span class='hs-varid'>m</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>l</span> <span class='hs-varop'>+</span> <span class='hs-layout'>(</span><span class='hs-varid'>h</span> <span class='hs-comment'>-</span> <span class='hs-varid'>l</span><span class='hs-layout'>)</span> <span class='hs-varop'>`div`</span> <span class='hs-num'>2</span>
-<a name="line-350"></a> 
-<a name="line-351"></a><span class='hs-keyword'>instance</span> <span class='hs-conid'>Show</span> <span class='hs-varid'>a</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>Show</span> <span class='hs-layout'>(</span><span class='hs-conid'>BitSet</span> <span class='hs-varid'>a</span><span class='hs-layout'>)</span> <span class='hs-keyword'>where</span>
-<a name="line-352"></a>   <span class='hs-varid'>showsPrec</span> <span class='hs-varid'>d</span> <span class='hs-varid'>x</span><span class='hs-keyglyph'>@</span><span class='hs-layout'>(</span><span class='hs-conid'>BS</span> <span class='hs-keyword'>_</span> <span class='hs-keyword'>_</span> <span class='hs-keyword'>_</span> <span class='hs-keyword'>_</span> <span class='hs-keyword'>_</span> <span class='hs-varid'>m</span> <span class='hs-varid'>u</span> <span class='hs-keyword'>_</span><span class='hs-layout'>)</span>
-<a name="line-353"></a>        <span class='hs-keyglyph'>|</span> <span class='hs-varid'>m</span> <span class='hs-varop'>&lt;</span> <span class='hs-num'>0</span>     <span class='hs-keyglyph'>=</span> <span class='hs-varid'>showParen</span> <span class='hs-layout'>(</span><span class='hs-varid'>d</span> <span class='hs-varop'>&gt;</span> <span class='hs-num'>10</span><span class='hs-layout'>)</span> <span class='hs-varop'>$</span> <span class='hs-varid'>showString</span> <span class='hs-str'>"pseudoComplement "</span> <span class='hs-varop'>.</span> <span class='hs-varid'>showsPrec</span> <span class='hs-num'>11</span> <span class='hs-layout'>(</span><span class='hs-varid'>recomplement</span> <span class='hs-varid'>x</span><span class='hs-layout'>)</span> <span class='hs-varop'>.</span> <span class='hs-varid'>showString</span> <span class='hs-str'>" "</span> <span class='hs-varop'>.</span> <span class='hs-varid'>showsPrec</span> <span class='hs-num'>11</span> <span class='hs-varid'>u</span>
-<a name="line-354"></a>        <span class='hs-keyglyph'>|</span> <span class='hs-varid'>otherwise</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>showParen</span> <span class='hs-layout'>(</span><span class='hs-varid'>d</span> <span class='hs-varop'>&gt;</span> <span class='hs-num'>10</span><span class='hs-layout'>)</span> <span class='hs-varop'>$</span> <span class='hs-varid'>showString</span> <span class='hs-str'>"fromDistinctAscList "</span> <span class='hs-varop'>.</span> <span class='hs-varid'>showsPrec</span> <span class='hs-num'>11</span> <span class='hs-layout'>(</span><span class='hs-varid'>toList</span> <span class='hs-varid'>x</span><span class='hs-layout'>)</span>
-<a name="line-355"></a>
-<a name="line-356"></a><span class='hs-keyword'>instance</span> <span class='hs-layout'>(</span><span class='hs-conid'>Enum</span> <span class='hs-varid'>a</span><span class='hs-layout'>,</span> <span class='hs-conid'>Read</span> <span class='hs-varid'>a</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>Read</span> <span class='hs-layout'>(</span><span class='hs-conid'>BitSet</span> <span class='hs-varid'>a</span><span class='hs-layout'>)</span> <span class='hs-keyword'>where</span>
-<a name="line-357"></a>    <span class='hs-varid'>readPrec</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>parens</span> <span class='hs-varop'>$</span> <span class='hs-varid'>complemented</span> <span class='hs-varop'>+++</span> <span class='hs-varid'>normal</span> <span class='hs-keyword'>where</span>
-<a name="line-358"></a>        <span class='hs-varid'>complemented</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>prec</span> <span class='hs-num'>10</span> <span class='hs-varop'>$</span> <span class='hs-keyword'>do</span> 
-<a name="line-359"></a>                <span class='hs-conid'>Ident</span> <span class='hs-str'>"pseudoComplement"</span> <span class='hs-keyglyph'>&lt;-</span> <span class='hs-varid'>lexP</span>
-<a name="line-360"></a>                <span class='hs-varid'>x</span> <span class='hs-keyglyph'>&lt;-</span> <span class='hs-varid'>step</span> <span class='hs-varid'>readPrec</span>
-<a name="line-361"></a>                <span class='hs-varid'>pseudoComplement</span> <span class='hs-varid'>x</span> <span class='hs-varop'>`fmap`</span> <span class='hs-varid'>step</span> <span class='hs-varid'>readPrec</span>
-<a name="line-362"></a>        <span class='hs-varid'>normal</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>prec</span> <span class='hs-num'>10</span> <span class='hs-varop'>$</span> <span class='hs-keyword'>do</span>
-<a name="line-363"></a>                <span class='hs-conid'>Ident</span> <span class='hs-str'>"fromDistinctAscList"</span> <span class='hs-keyglyph'>&lt;-</span> <span class='hs-varid'>lexP</span>
-<a name="line-364"></a>                <span class='hs-varid'>fromDistinctAscList</span> <span class='hs-varop'>`fmap`</span> <span class='hs-varid'>step</span> <span class='hs-varid'>readPrec</span>
-<a name="line-365"></a>
-<a name="line-366"></a><span class='hs-comment'>-- note that operations on values generated by toEnum are pretty slow because the bounds are suboptimal</span>
-<a name="line-367"></a><span class='hs-keyword'>instance</span> <span class='hs-layout'>(</span><span class='hs-conid'>Enum</span> <span class='hs-varid'>a</span><span class='hs-layout'>,</span> <span class='hs-conid'>Bounded</span> <span class='hs-varid'>a</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>Enum</span> <span class='hs-layout'>(</span><span class='hs-conid'>BitSet</span> <span class='hs-varid'>a</span><span class='hs-layout'>)</span> <span class='hs-keyword'>where</span>
-<a name="line-368"></a>    <span class='hs-varid'>fromEnum</span> <span class='hs-varid'>b</span><span class='hs-keyglyph'>@</span><span class='hs-layout'>(</span><span class='hs-conid'>BS</span> <span class='hs-keyword'>_</span> <span class='hs-keyword'>_</span> <span class='hs-keyword'>_</span> <span class='hs-varid'>l</span> <span class='hs-keyword'>_</span> <span class='hs-varid'>m</span> <span class='hs-keyword'>_</span> <span class='hs-keyword'>_</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>fromInteger</span> <span class='hs-layout'>(</span><span class='hs-varid'>shiftL</span> <span class='hs-varid'>m</span> <span class='hs-layout'>(</span><span class='hs-varid'>l</span> <span class='hs-comment'>-</span> <span class='hs-varid'>l'</span><span class='hs-layout'>)</span><span class='hs-layout'>)</span>
-<a name="line-369"></a>        <span class='hs-keyword'>where</span> 
-<a name="line-370"></a>            <span class='hs-varid'>l'</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>fromEnum</span> <span class='hs-layout'>(</span><span class='hs-varid'>minBound</span> <span class='hs-varop'>`asArgTypeOf`</span> <span class='hs-varid'>b</span><span class='hs-layout'>)</span>
-<a name="line-371"></a>    <span class='hs-varid'>toEnum</span> <span class='hs-varid'>i</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>result</span> 
-<a name="line-372"></a>        <span class='hs-keyword'>where</span>
-<a name="line-373"></a>            <span class='hs-varid'>result</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>BS</span> <span class='hs-varid'>a</span> <span class='hs-varid'>i</span> <span class='hs-layout'>(</span><span class='hs-varid'>recount</span> <span class='hs-varid'>m</span><span class='hs-layout'>)</span> <span class='hs-varid'>l</span> <span class='hs-varid'>h</span> <span class='hs-varid'>m</span> <span class='hs-varid'>undefined</span> <span class='hs-varid'>toEnum</span> <span class='hs-comment'>-- n &lt;= 2^n, so i serves as a valid upper bound</span>
-<a name="line-374"></a>            <span class='hs-varid'>l</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>fromEnum</span> <span class='hs-layout'>(</span><span class='hs-varid'>minBound</span> <span class='hs-varop'>`asArgTypeOf`</span> <span class='hs-varid'>result</span><span class='hs-layout'>)</span>
-<a name="line-375"></a>            <span class='hs-varid'>h</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>fromEnum</span> <span class='hs-layout'>(</span><span class='hs-varid'>maxBound</span> <span class='hs-varop'>`asArgTypeOf`</span> <span class='hs-varid'>result</span><span class='hs-layout'>)</span>
-<a name="line-376"></a>            <span class='hs-varid'>m</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>fromIntegral</span> <span class='hs-varid'>i</span>
-<a name="line-377"></a>            <span class='hs-varid'>a</span> <span class='hs-keyglyph'>|</span> <span class='hs-varid'>m</span> <span class='hs-varop'>/=</span> <span class='hs-num'>0</span> <span class='hs-keyglyph'>=</span> <span class='hs-num'>1</span> <span class='hs-comment'>-- allow a fast null check, but not much else</span>
-<a name="line-378"></a>              <span class='hs-keyglyph'>|</span> <span class='hs-varid'>otherwise</span> <span class='hs-keyglyph'>=</span> <span class='hs-num'>0</span>
-<a name="line-379"></a>
-<a name="line-380"></a><span class='hs-keyword'>instance</span> <span class='hs-conid'>Foldable</span> <span class='hs-conid'>BitSet</span> <span class='hs-keyword'>where</span>
-<a name="line-381"></a>    <span class='hs-varid'>fold</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>fold</span> <span class='hs-varop'>.</span> <span class='hs-varid'>toList</span>
-<a name="line-382"></a>    <span class='hs-varid'>foldMap</span> <span class='hs-varid'>f</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>foldMap</span> <span class='hs-varid'>f</span> <span class='hs-varop'>.</span> <span class='hs-varid'>toList</span>
-<a name="line-383"></a>    <span class='hs-varid'>foldr</span> <span class='hs-varid'>f</span> <span class='hs-varid'>z</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>foldr</span> <span class='hs-varid'>f</span> <span class='hs-varid'>z</span> <span class='hs-varop'>.</span> <span class='hs-varid'>toList</span>
-<a name="line-384"></a>    <span class='hs-varid'>foldl</span> <span class='hs-varid'>f</span> <span class='hs-varid'>z</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>foldl</span> <span class='hs-varid'>f</span> <span class='hs-varid'>z</span> <span class='hs-varop'>.</span> <span class='hs-varid'>toList</span>
-<a name="line-385"></a>    <span class='hs-varid'>foldr1</span> <span class='hs-varid'>f</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>foldr1</span> <span class='hs-varid'>f</span> <span class='hs-varop'>.</span> <span class='hs-varid'>toList</span>
-<a name="line-386"></a>    <span class='hs-varid'>foldl1</span> <span class='hs-varid'>f</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>foldl1</span> <span class='hs-varid'>f</span> <span class='hs-varop'>.</span> <span class='hs-varid'>toList</span>
-<a name="line-387"></a>        
-<a name="line-388"></a><span class='hs-keyword'>instance</span> <span class='hs-conid'>Enum</span> <span class='hs-varid'>a</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>Monoid</span> <span class='hs-layout'>(</span><span class='hs-conid'>BitSet</span> <span class='hs-varid'>a</span><span class='hs-layout'>)</span> <span class='hs-keyword'>where</span>
-<a name="line-389"></a>    <span class='hs-varid'>mempty</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>empty</span>
-<a name="line-390"></a>    <span class='hs-varid'>mappend</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>union</span>
+<a name="line-312"></a><a name="recount"></a><span class='hs-comment'>-- | /O(d)/</span>
+<a name="line-313"></a><span class='hs-definition'>recount</span> <span class='hs-keyglyph'>::</span> <span class='hs-conid'>Integer</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-conid'>Int</span>
+<a name="line-314"></a><span class='hs-definition'>recount</span> <span class='hs-varop'>!</span><span class='hs-varid'>n</span> 
+<a name="line-315"></a>    <span class='hs-keyglyph'>|</span> <span class='hs-varid'>n</span> <span class='hs-varop'>&lt;</span> <span class='hs-num'>0</span>     <span class='hs-keyglyph'>=</span> <span class='hs-varid'>complement</span> <span class='hs-layout'>(</span><span class='hs-varid'>recount</span> <span class='hs-layout'>(</span><span class='hs-varid'>complement</span> <span class='hs-varid'>n</span><span class='hs-layout'>)</span><span class='hs-layout'>)</span>
+<a name="line-316"></a>    <span class='hs-keyglyph'>|</span> <span class='hs-varid'>otherwise</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>recount'</span> <span class='hs-num'>0</span> <span class='hs-num'>0</span> 
+<a name="line-317"></a>    <span class='hs-keyword'>where</span>
+<a name="line-318"></a>        <span class='hs-varid'>h</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>hwm</span> <span class='hs-varid'>n</span>
+<a name="line-319"></a>        <span class='hs-varid'>recount'</span> <span class='hs-varop'>!</span><span class='hs-varid'>i</span> <span class='hs-varop'>!</span><span class='hs-varid'>c</span>
+<a name="line-320"></a>            <span class='hs-keyglyph'>|</span> <span class='hs-varid'>i</span> <span class='hs-varop'>&gt;</span> <span class='hs-varid'>h</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>c</span>
+<a name="line-321"></a>            <span class='hs-keyglyph'>|</span> <span class='hs-varid'>otherwise</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>recount'</span> <span class='hs-layout'>(</span><span class='hs-varid'>i</span><span class='hs-varop'>+</span><span class='hs-num'>1</span><span class='hs-layout'>)</span> <span class='hs-layout'>(</span><span class='hs-keyword'>if</span> <span class='hs-varid'>testBit</span> <span class='hs-varid'>n</span> <span class='hs-varid'>i</span> <span class='hs-keyword'>then</span> <span class='hs-varid'>c</span><span class='hs-varop'>+</span><span class='hs-num'>1</span> <span class='hs-keyword'>else</span> <span class='hs-varid'>c</span><span class='hs-layout'>)</span>
+<a name="line-322"></a>
+<a name="line-323"></a><a name="hwm"></a><span class='hs-comment'>-- | /O(d)/. Computes the equivalent of (truncate . logBase 2 . abs) extended with 0 at 0</span>
+<a name="line-324"></a><span class='hs-definition'>hwm</span> <span class='hs-keyglyph'>::</span> <span class='hs-conid'>Integer</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-conid'>Int</span>
+<a name="line-325"></a><span class='hs-definition'>hwm</span> <span class='hs-varop'>!</span><span class='hs-varid'>n</span> 
+<a name="line-326"></a>    <span class='hs-keyglyph'>|</span> <span class='hs-varid'>n</span> <span class='hs-varop'>&lt;</span> <span class='hs-num'>0</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>hwm</span> <span class='hs-layout'>(</span><span class='hs-comment'>-</span><span class='hs-varid'>n</span><span class='hs-layout'>)</span>
+<a name="line-327"></a>    <span class='hs-keyglyph'>|</span> <span class='hs-varid'>n</span> <span class='hs-varop'>&gt;</span> <span class='hs-num'>1</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>scan</span> <span class='hs-varid'>p</span> <span class='hs-layout'>(</span><span class='hs-num'>2</span><span class='hs-varop'>*</span><span class='hs-varid'>p</span><span class='hs-layout'>)</span> 
+<a name="line-328"></a>    <span class='hs-keyglyph'>|</span> <span class='hs-varid'>otherwise</span> <span class='hs-keyglyph'>=</span> <span class='hs-num'>0</span>
+<a name="line-329"></a>    <span class='hs-keyword'>where</span>
+<a name="line-330"></a>        <span class='hs-varid'>p</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>probe</span> <span class='hs-num'>1</span>
+<a name="line-331"></a>        <span class='hs-comment'>-- incrementally compute 2^(2^(i+1)) until it exceeds n</span>
+<a name="line-332"></a>        <span class='hs-varid'>probe</span> <span class='hs-keyglyph'>::</span> <span class='hs-conid'>Int</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-conid'>Int</span>
+<a name="line-333"></a>        <span class='hs-varid'>probe</span> <span class='hs-varop'>!</span><span class='hs-varid'>i</span>
+<a name="line-334"></a>            <span class='hs-keyglyph'>|</span> <span class='hs-varid'>bit</span> <span class='hs-layout'>(</span><span class='hs-num'>2</span><span class='hs-varop'>*</span><span class='hs-varid'>i</span><span class='hs-layout'>)</span> <span class='hs-varop'>&gt;</span> <span class='hs-varid'>n</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>i</span>
+<a name="line-335"></a>            <span class='hs-keyglyph'>|</span> <span class='hs-varid'>otherwise</span>     <span class='hs-keyglyph'>=</span> <span class='hs-varid'>probe</span> <span class='hs-layout'>(</span><span class='hs-num'>2</span><span class='hs-varop'>*</span><span class='hs-varid'>i</span><span class='hs-layout'>)</span>
+<a name="line-336"></a>
+<a name="line-337"></a>        <span class='hs-comment'>-- then scan the powers for the highest set bit</span>
+<a name="line-338"></a>        <span class='hs-varid'>scan</span> <span class='hs-keyglyph'>::</span> <span class='hs-conid'>Int</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-conid'>Int</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-conid'>Int</span>
+<a name="line-339"></a>        <span class='hs-varid'>scan</span> <span class='hs-varop'>!</span><span class='hs-varid'>l</span> <span class='hs-varop'>!</span><span class='hs-varid'>h</span>
+<a name="line-340"></a>            <span class='hs-keyglyph'>|</span> <span class='hs-varid'>l</span> <span class='hs-varop'>==</span> <span class='hs-varid'>h</span>        <span class='hs-keyglyph'>=</span> <span class='hs-varid'>l</span>
+<a name="line-341"></a>            <span class='hs-keyglyph'>|</span> <span class='hs-varid'>bit</span> <span class='hs-layout'>(</span><span class='hs-varid'>m</span><span class='hs-varop'>+</span><span class='hs-num'>1</span><span class='hs-layout'>)</span> <span class='hs-varop'>&gt;</span> <span class='hs-varid'>n</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>scan</span> <span class='hs-varid'>l</span> <span class='hs-varid'>m</span>
+<a name="line-342"></a>            <span class='hs-keyglyph'>|</span> <span class='hs-varid'>otherwise</span>     <span class='hs-keyglyph'>=</span> <span class='hs-varid'>scan</span> <span class='hs-layout'>(</span><span class='hs-varid'>m</span><span class='hs-varop'>+</span><span class='hs-num'>1</span><span class='hs-layout'>)</span> <span class='hs-varid'>h</span>
+<a name="line-343"></a>            <span class='hs-keyword'>where</span> 
+<a name="line-344"></a>                <span class='hs-varid'>m</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>l</span> <span class='hs-varop'>+</span> <span class='hs-layout'>(</span><span class='hs-varid'>h</span> <span class='hs-comment'>-</span> <span class='hs-varid'>l</span><span class='hs-layout'>)</span> <span class='hs-varop'>`div`</span> <span class='hs-num'>2</span>
+<a name="line-345"></a> 
+<a name="line-346"></a><span class='hs-keyword'>instance</span> <span class='hs-conid'>Show</span> <span class='hs-varid'>a</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>Show</span> <span class='hs-layout'>(</span><span class='hs-conid'>BitSet</span> <span class='hs-varid'>a</span><span class='hs-layout'>)</span> <span class='hs-keyword'>where</span>
+<a name="line-347"></a>   <span class='hs-varid'>showsPrec</span> <span class='hs-varid'>d</span> <span class='hs-varid'>x</span><span class='hs-keyglyph'>@</span><span class='hs-layout'>(</span><span class='hs-conid'>BS</span> <span class='hs-keyword'>_</span> <span class='hs-keyword'>_</span> <span class='hs-keyword'>_</span> <span class='hs-keyword'>_</span> <span class='hs-keyword'>_</span> <span class='hs-varid'>m</span> <span class='hs-varid'>u</span> <span class='hs-keyword'>_</span><span class='hs-layout'>)</span>
+<a name="line-348"></a>        <span class='hs-keyglyph'>|</span> <span class='hs-varid'>m</span> <span class='hs-varop'>&lt;</span> <span class='hs-num'>0</span>     <span class='hs-keyglyph'>=</span> <span class='hs-varid'>showParen</span> <span class='hs-layout'>(</span><span class='hs-varid'>d</span> <span class='hs-varop'>&gt;</span> <span class='hs-num'>10</span><span class='hs-layout'>)</span> <span class='hs-varop'>$</span> <span class='hs-varid'>showString</span> <span class='hs-str'>"pseudoComplement "</span> <span class='hs-varop'>.</span> <span class='hs-varid'>showsPrec</span> <span class='hs-num'>11</span> <span class='hs-layout'>(</span><span class='hs-varid'>recomplement</span> <span class='hs-varid'>x</span><span class='hs-layout'>)</span> <span class='hs-varop'>.</span> <span class='hs-varid'>showString</span> <span class='hs-str'>" "</span> <span class='hs-varop'>.</span> <span class='hs-varid'>showsPrec</span> <span class='hs-num'>11</span> <span class='hs-varid'>u</span>
+<a name="line-349"></a>        <span class='hs-keyglyph'>|</span> <span class='hs-varid'>otherwise</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>showParen</span> <span class='hs-layout'>(</span><span class='hs-varid'>d</span> <span class='hs-varop'>&gt;</span> <span class='hs-num'>10</span><span class='hs-layout'>)</span> <span class='hs-varop'>$</span> <span class='hs-varid'>showString</span> <span class='hs-str'>"fromDistinctAscList "</span> <span class='hs-varop'>.</span> <span class='hs-varid'>showsPrec</span> <span class='hs-num'>11</span> <span class='hs-layout'>(</span><span class='hs-varid'>toList</span> <span class='hs-varid'>x</span><span class='hs-layout'>)</span>
+<a name="line-350"></a>
+<a name="line-351"></a><span class='hs-keyword'>instance</span> <span class='hs-layout'>(</span><span class='hs-conid'>Enum</span> <span class='hs-varid'>a</span><span class='hs-layout'>,</span> <span class='hs-conid'>Read</span> <span class='hs-varid'>a</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>Read</span> <span class='hs-layout'>(</span><span class='hs-conid'>BitSet</span> <span class='hs-varid'>a</span><span class='hs-layout'>)</span> <span class='hs-keyword'>where</span>
+<a name="line-352"></a>    <span class='hs-varid'>readPrec</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>parens</span> <span class='hs-varop'>$</span> <span class='hs-varid'>complemented</span> <span class='hs-varop'>+++</span> <span class='hs-varid'>normal</span> <span class='hs-keyword'>where</span>
+<a name="line-353"></a>        <span class='hs-varid'>complemented</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>prec</span> <span class='hs-num'>10</span> <span class='hs-varop'>$</span> <span class='hs-keyword'>do</span> 
+<a name="line-354"></a>                <span class='hs-conid'>Ident</span> <span class='hs-str'>"pseudoComplement"</span> <span class='hs-keyglyph'>&lt;-</span> <span class='hs-varid'>lexP</span>
+<a name="line-355"></a>                <span class='hs-varid'>x</span> <span class='hs-keyglyph'>&lt;-</span> <span class='hs-varid'>step</span> <span class='hs-varid'>readPrec</span>
+<a name="line-356"></a>                <span class='hs-varid'>pseudoComplement</span> <span class='hs-varid'>x</span> <span class='hs-varop'>`fmap`</span> <span class='hs-varid'>step</span> <span class='hs-varid'>readPrec</span>
+<a name="line-357"></a>        <span class='hs-varid'>normal</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>prec</span> <span class='hs-num'>10</span> <span class='hs-varop'>$</span> <span class='hs-keyword'>do</span>
+<a name="line-358"></a>                <span class='hs-conid'>Ident</span> <span class='hs-str'>"fromDistinctAscList"</span> <span class='hs-keyglyph'>&lt;-</span> <span class='hs-varid'>lexP</span>
+<a name="line-359"></a>                <span class='hs-varid'>fromDistinctAscList</span> <span class='hs-varop'>`fmap`</span> <span class='hs-varid'>step</span> <span class='hs-varid'>readPrec</span>
+<a name="line-360"></a>
+<a name="line-361"></a><span class='hs-comment'>-- note that operations on values generated by toEnum are pretty slow because the bounds are suboptimal</span>
+<a name="line-362"></a><span class='hs-keyword'>instance</span> <span class='hs-layout'>(</span><span class='hs-conid'>Enum</span> <span class='hs-varid'>a</span><span class='hs-layout'>,</span> <span class='hs-conid'>Bounded</span> <span class='hs-varid'>a</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>Enum</span> <span class='hs-layout'>(</span><span class='hs-conid'>BitSet</span> <span class='hs-varid'>a</span><span class='hs-layout'>)</span> <span class='hs-keyword'>where</span>
+<a name="line-363"></a>    <span class='hs-varid'>fromEnum</span> <span class='hs-varid'>b</span><span class='hs-keyglyph'>@</span><span class='hs-layout'>(</span><span class='hs-conid'>BS</span> <span class='hs-keyword'>_</span> <span class='hs-keyword'>_</span> <span class='hs-keyword'>_</span> <span class='hs-varid'>l</span> <span class='hs-keyword'>_</span> <span class='hs-varid'>m</span> <span class='hs-keyword'>_</span> <span class='hs-keyword'>_</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>fromInteger</span> <span class='hs-layout'>(</span><span class='hs-varid'>shiftL</span> <span class='hs-varid'>m</span> <span class='hs-layout'>(</span><span class='hs-varid'>l</span> <span class='hs-comment'>-</span> <span class='hs-varid'>l'</span><span class='hs-layout'>)</span><span class='hs-layout'>)</span>
+<a name="line-364"></a>        <span class='hs-keyword'>where</span> 
+<a name="line-365"></a>            <span class='hs-varid'>l'</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>fromEnum</span> <span class='hs-layout'>(</span><span class='hs-varid'>minBound</span> <span class='hs-varop'>`asArgTypeOf`</span> <span class='hs-varid'>b</span><span class='hs-layout'>)</span>
+<a name="line-366"></a>    <span class='hs-varid'>toEnum</span> <span class='hs-varid'>i</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>result</span> 
+<a name="line-367"></a>        <span class='hs-keyword'>where</span>
+<a name="line-368"></a>            <span class='hs-varid'>result</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>BS</span> <span class='hs-varid'>a</span> <span class='hs-varid'>i</span> <span class='hs-layout'>(</span><span class='hs-varid'>recount</span> <span class='hs-varid'>m</span><span class='hs-layout'>)</span> <span class='hs-varid'>l</span> <span class='hs-varid'>h</span> <span class='hs-varid'>m</span> <span class='hs-varid'>undefined</span> <span class='hs-varid'>toEnum</span> <span class='hs-comment'>-- n &lt;= 2^n, so i serves as a valid upper bound</span>
+<a name="line-369"></a>            <span class='hs-varid'>l</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>fromEnum</span> <span class='hs-layout'>(</span><span class='hs-varid'>minBound</span> <span class='hs-varop'>`asArgTypeOf`</span> <span class='hs-varid'>result</span><span class='hs-layout'>)</span>
+<a name="line-370"></a>            <span class='hs-varid'>h</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>fromEnum</span> <span class='hs-layout'>(</span><span class='hs-varid'>maxBound</span> <span class='hs-varop'>`asArgTypeOf`</span> <span class='hs-varid'>result</span><span class='hs-layout'>)</span>
+<a name="line-371"></a>            <span class='hs-varid'>m</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>fromIntegral</span> <span class='hs-varid'>i</span>
+<a name="line-372"></a>            <span class='hs-varid'>a</span> <span class='hs-keyglyph'>|</span> <span class='hs-varid'>m</span> <span class='hs-varop'>/=</span> <span class='hs-num'>0</span> <span class='hs-keyglyph'>=</span> <span class='hs-num'>1</span> <span class='hs-comment'>-- allow a fast null check, but not much else</span>
+<a name="line-373"></a>              <span class='hs-keyglyph'>|</span> <span class='hs-varid'>otherwise</span> <span class='hs-keyglyph'>=</span> <span class='hs-num'>0</span>
+<a name="line-374"></a>
+<a name="line-375"></a><span class='hs-keyword'>instance</span> <span class='hs-conid'>Foldable</span> <span class='hs-conid'>BitSet</span> <span class='hs-keyword'>where</span>
+<a name="line-376"></a>    <span class='hs-varid'>fold</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>fold</span> <span class='hs-varop'>.</span> <span class='hs-varid'>toList</span>
+<a name="line-377"></a>    <span class='hs-varid'>foldMap</span> <span class='hs-varid'>f</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>foldMap</span> <span class='hs-varid'>f</span> <span class='hs-varop'>.</span> <span class='hs-varid'>toList</span>
+<a name="line-378"></a>    <span class='hs-varid'>foldr</span> <span class='hs-varid'>f</span> <span class='hs-varid'>z</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>foldr</span> <span class='hs-varid'>f</span> <span class='hs-varid'>z</span> <span class='hs-varop'>.</span> <span class='hs-varid'>toList</span>
+<a name="line-379"></a>    <span class='hs-varid'>foldl</span> <span class='hs-varid'>f</span> <span class='hs-varid'>z</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>foldl</span> <span class='hs-varid'>f</span> <span class='hs-varid'>z</span> <span class='hs-varop'>.</span> <span class='hs-varid'>toList</span>
+<a name="line-380"></a>    <span class='hs-varid'>foldr1</span> <span class='hs-varid'>f</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>foldr1</span> <span class='hs-varid'>f</span> <span class='hs-varop'>.</span> <span class='hs-varid'>toList</span>
+<a name="line-381"></a>    <span class='hs-varid'>foldl1</span> <span class='hs-varid'>f</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>foldl1</span> <span class='hs-varid'>f</span> <span class='hs-varop'>.</span> <span class='hs-varid'>toList</span>
+<a name="line-382"></a>        
+<a name="line-383"></a><span class='hs-keyword'>instance</span> <span class='hs-conid'>Enum</span> <span class='hs-varid'>a</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>Monoid</span> <span class='hs-layout'>(</span><span class='hs-conid'>BitSet</span> <span class='hs-varid'>a</span><span class='hs-layout'>)</span> <span class='hs-keyword'>where</span>
+<a name="line-384"></a>    <span class='hs-varid'>mempty</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>empty</span>
+<a name="line-385"></a>    <span class='hs-varid'>mappend</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>union</span>
+<a name="line-386"></a>
+<a name="line-387"></a><span class='hs-keyword'>instance</span> <span class='hs-conid'>Enum</span> <span class='hs-varid'>a</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>Reducer</span> <span class='hs-varid'>a</span> <span class='hs-layout'>(</span><span class='hs-conid'>BitSet</span> <span class='hs-varid'>a</span><span class='hs-layout'>)</span> <span class='hs-keyword'>where</span>
+<a name="line-388"></a>    <span class='hs-varid'>unit</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>singleton</span>
+<a name="line-389"></a>    <span class='hs-varid'>snoc</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>flip</span> <span class='hs-varid'>insert</span>
+<a name="line-390"></a>    <span class='hs-varid'>cons</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>insert</span>
hunk ./doc/html/monoids/src/Data-Ring-Semi-BitSet.html 400
-<a name="line-392"></a><span class='hs-keyword'>instance</span> <span class='hs-conid'>Enum</span> <span class='hs-varid'>a</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>Reducer</span> <span class='hs-varid'>a</span> <span class='hs-layout'>(</span><span class='hs-conid'>BitSet</span> <span class='hs-varid'>a</span><span class='hs-layout'>)</span> <span class='hs-keyword'>where</span>
-<a name="line-393"></a>    <span class='hs-varid'>unit</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>singleton</span>
-<a name="line-394"></a>    <span class='hs-varid'>snoc</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>flip</span> <span class='hs-varid'>insert</span>
-<a name="line-395"></a>    <span class='hs-varid'>cons</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>insert</span>
-<a name="line-396"></a>
-<a name="line-397"></a><span class='hs-keyword'>instance</span> <span class='hs-layout'>(</span><span class='hs-conid'>Bounded</span> <span class='hs-varid'>a</span><span class='hs-layout'>,</span> <span class='hs-conid'>Enum</span> <span class='hs-varid'>a</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>Multiplicative</span> <span class='hs-layout'>(</span><span class='hs-conid'>BitSet</span> <span class='hs-varid'>a</span><span class='hs-layout'>)</span> <span class='hs-keyword'>where</span>
-<a name="line-398"></a>    <span class='hs-varid'>one</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>full</span>
-<a name="line-399"></a>    <span class='hs-varid'>times</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>intersection</span>
+<a name="line-392"></a><span class='hs-keyword'>instance</span> <span class='hs-layout'>(</span><span class='hs-conid'>Bounded</span> <span class='hs-varid'>a</span><span class='hs-layout'>,</span> <span class='hs-conid'>Enum</span> <span class='hs-varid'>a</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>Multiplicative</span> <span class='hs-layout'>(</span><span class='hs-conid'>BitSet</span> <span class='hs-varid'>a</span><span class='hs-layout'>)</span> <span class='hs-keyword'>where</span>
+<a name="line-393"></a>    <span class='hs-varid'>one</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>full</span>
+<a name="line-394"></a>    <span class='hs-varid'>times</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>intersection</span>
+<a name="line-395"></a>
+<a name="line-396"></a><span class='hs-keyword'>instance</span> <span class='hs-layout'>(</span><span class='hs-conid'>Bounded</span> <span class='hs-varid'>a</span><span class='hs-layout'>,</span> <span class='hs-conid'>Enum</span> <span class='hs-varid'>a</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>Ringoid</span> <span class='hs-layout'>(</span><span class='hs-conid'>BitSet</span> <span class='hs-varid'>a</span><span class='hs-layout'>)</span>
+<a name="line-397"></a><span class='hs-keyword'>instance</span> <span class='hs-layout'>(</span><span class='hs-conid'>Bounded</span> <span class='hs-varid'>a</span><span class='hs-layout'>,</span> <span class='hs-conid'>Enum</span> <span class='hs-varid'>a</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>LeftSemiNearRing</span> <span class='hs-layout'>(</span><span class='hs-conid'>BitSet</span> <span class='hs-varid'>a</span><span class='hs-layout'>)</span>
+<a name="line-398"></a><span class='hs-keyword'>instance</span> <span class='hs-layout'>(</span><span class='hs-conid'>Bounded</span> <span class='hs-varid'>a</span><span class='hs-layout'>,</span> <span class='hs-conid'>Enum</span> <span class='hs-varid'>a</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>RightSemiNearRing</span> <span class='hs-layout'>(</span><span class='hs-conid'>BitSet</span> <span class='hs-varid'>a</span><span class='hs-layout'>)</span>
+<a name="line-399"></a><span class='hs-keyword'>instance</span> <span class='hs-layout'>(</span><span class='hs-conid'>Bounded</span> <span class='hs-varid'>a</span><span class='hs-layout'>,</span> <span class='hs-conid'>Enum</span> <span class='hs-varid'>a</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>SemiRing</span> <span class='hs-layout'>(</span><span class='hs-conid'>BitSet</span> <span class='hs-varid'>a</span><span class='hs-layout'>)</span>
hunk ./doc/html/monoids/src/Data-Ring-Semi-BitSet.html 409
-<a name="line-401"></a><span class='hs-keyword'>instance</span> <span class='hs-layout'>(</span><span class='hs-conid'>Bounded</span> <span class='hs-varid'>a</span><span class='hs-layout'>,</span> <span class='hs-conid'>Enum</span> <span class='hs-varid'>a</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>Ringoid</span> <span class='hs-layout'>(</span><span class='hs-conid'>BitSet</span> <span class='hs-varid'>a</span><span class='hs-layout'>)</span>
-<a name="line-402"></a><span class='hs-keyword'>instance</span> <span class='hs-layout'>(</span><span class='hs-conid'>Bounded</span> <span class='hs-varid'>a</span><span class='hs-layout'>,</span> <span class='hs-conid'>Enum</span> <span class='hs-varid'>a</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>LeftSemiNearRing</span> <span class='hs-layout'>(</span><span class='hs-conid'>BitSet</span> <span class='hs-varid'>a</span><span class='hs-layout'>)</span>
-<a name="line-403"></a><span class='hs-keyword'>instance</span> <span class='hs-layout'>(</span><span class='hs-conid'>Bounded</span> <span class='hs-varid'>a</span><span class='hs-layout'>,</span> <span class='hs-conid'>Enum</span> <span class='hs-varid'>a</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>RightSemiNearRing</span> <span class='hs-layout'>(</span><span class='hs-conid'>BitSet</span> <span class='hs-varid'>a</span><span class='hs-layout'>)</span>
-<a name="line-404"></a><span class='hs-keyword'>instance</span> <span class='hs-layout'>(</span><span class='hs-conid'>Bounded</span> <span class='hs-varid'>a</span><span class='hs-layout'>,</span> <span class='hs-conid'>Enum</span> <span class='hs-varid'>a</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>SemiRing</span> <span class='hs-layout'>(</span><span class='hs-conid'>BitSet</span> <span class='hs-varid'>a</span><span class='hs-layout'>)</span>
-<a name="line-405"></a>
-<a name="line-406"></a><span class='hs-comment'>-- idempotent monoid</span>
-<a name="line-407"></a><span class='hs-keyword'>instance</span> <span class='hs-conid'>Enum</span> <span class='hs-varid'>a</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>LeftModule</span> <span class='hs-conid'>Natural</span> <span class='hs-layout'>(</span><span class='hs-conid'>BitSet</span> <span class='hs-varid'>a</span><span class='hs-layout'>)</span> <span class='hs-keyword'>where</span>
-<a name="line-408"></a>    <span class='hs-num'>0</span> <span class='hs-varop'>*.</span> <span class='hs-keyword'>_</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>empty</span>
-<a name="line-409"></a>    <span class='hs-keyword'>_</span> <span class='hs-varop'>*.</span> <span class='hs-varid'>m</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>m</span>
-<a name="line-410"></a><span class='hs-keyword'>instance</span> <span class='hs-conid'>Enum</span> <span class='hs-varid'>a</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>RightModule</span> <span class='hs-conid'>Natural</span> <span class='hs-layout'>(</span><span class='hs-conid'>BitSet</span> <span class='hs-varid'>a</span><span class='hs-layout'>)</span> <span class='hs-keyword'>where</span>
-<a name="line-411"></a>    <span class='hs-keyword'>_</span> <span class='hs-varop'>.*</span> <span class='hs-num'>0</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>empty</span>
-<a name="line-412"></a>    <span class='hs-varid'>m</span> <span class='hs-varop'>.*</span> <span class='hs-keyword'>_</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>m</span>
-<a name="line-413"></a><span class='hs-keyword'>instance</span> <span class='hs-conid'>Enum</span> <span class='hs-varid'>a</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>Module</span> <span class='hs-conid'>Natural</span> <span class='hs-layout'>(</span><span class='hs-conid'>BitSet</span> <span class='hs-varid'>a</span><span class='hs-layout'>)</span>
-<a name="line-414"></a>
-<a name="line-415"></a><span class='hs-keyword'>instance</span> <span class='hs-layout'>(</span><span class='hs-conid'>Bounded</span> <span class='hs-varid'>a</span><span class='hs-layout'>,</span> <span class='hs-conid'>Enum</span> <span class='hs-varid'>a</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>LeftModule</span> <span class='hs-layout'>(</span><span class='hs-conid'>BitSet</span> <span class='hs-varid'>a</span><span class='hs-layout'>)</span> <span class='hs-layout'>(</span><span class='hs-conid'>BitSet</span> <span class='hs-varid'>a</span><span class='hs-layout'>)</span> <span class='hs-keyword'>where</span> <span class='hs-layout'>(</span><span class='hs-varop'>*.</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>times</span>
-<a name="line-416"></a><span class='hs-keyword'>instance</span> <span class='hs-layout'>(</span><span class='hs-conid'>Bounded</span> <span class='hs-varid'>a</span><span class='hs-layout'>,</span> <span class='hs-conid'>Enum</span> <span class='hs-varid'>a</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>RightModule</span> <span class='hs-layout'>(</span><span class='hs-conid'>BitSet</span> <span class='hs-varid'>a</span><span class='hs-layout'>)</span> <span class='hs-layout'>(</span><span class='hs-conid'>BitSet</span> <span class='hs-varid'>a</span><span class='hs-layout'>)</span> <span class='hs-keyword'>where</span> <span class='hs-layout'>(</span><span class='hs-varop'>.*</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>times</span>
-<a name="line-417"></a><span class='hs-keyword'>instance</span> <span class='hs-layout'>(</span><span class='hs-conid'>Bounded</span> <span class='hs-varid'>a</span><span class='hs-layout'>,</span> <span class='hs-conid'>Enum</span> <span class='hs-varid'>a</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>Module</span> <span class='hs-layout'>(</span><span class='hs-conid'>BitSet</span> <span class='hs-varid'>a</span><span class='hs-layout'>)</span> <span class='hs-layout'>(</span><span class='hs-conid'>BitSet</span> <span class='hs-varid'>a</span><span class='hs-layout'>)</span>
-<a name="line-418"></a>
-<a name="line-419"></a><span class='hs-keyword'>instance</span> <span class='hs-layout'>(</span><span class='hs-conid'>Bounded</span> <span class='hs-varid'>a</span><span class='hs-layout'>,</span> <span class='hs-conid'>Enum</span> <span class='hs-varid'>a</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>RAlgebra</span> <span class='hs-conid'>Natural</span> <span class='hs-layout'>(</span><span class='hs-conid'>BitSet</span> <span class='hs-varid'>a</span><span class='hs-layout'>)</span>
-<a name="line-420"></a>    
-<a name="line-421"></a><span class='hs-keyword'>instance</span> <span class='hs-conid'>Generator</span> <span class='hs-layout'>(</span><span class='hs-conid'>BitSet</span> <span class='hs-varid'>a</span><span class='hs-layout'>)</span> <span class='hs-keyword'>where</span>
-<a name="line-422"></a>    <span class='hs-keyword'>type</span> <span class='hs-conid'>Elem</span> <span class='hs-layout'>(</span><span class='hs-conid'>BitSet</span> <span class='hs-varid'>a</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>a</span>
-<a name="line-423"></a>    <span class='hs-varid'>mapReduce</span> <span class='hs-varid'>f</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>mapReduce</span> <span class='hs-varid'>f</span> <span class='hs-varop'>.</span> <span class='hs-varid'>toList</span>
+<a name="line-401"></a><span class='hs-comment'>-- idempotent monoid</span>
+<a name="line-402"></a><span class='hs-keyword'>instance</span> <span class='hs-conid'>Enum</span> <span class='hs-varid'>a</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>Module</span> <span class='hs-conid'>Natural</span> <span class='hs-layout'>(</span><span class='hs-conid'>BitSet</span> <span class='hs-varid'>a</span><span class='hs-layout'>)</span>
+<a name="line-403"></a><span class='hs-keyword'>instance</span> <span class='hs-conid'>Enum</span> <span class='hs-varid'>a</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>LeftModule</span> <span class='hs-conid'>Natural</span> <span class='hs-layout'>(</span><span class='hs-conid'>BitSet</span> <span class='hs-varid'>a</span><span class='hs-layout'>)</span> <span class='hs-keyword'>where</span>
+<a name="line-404"></a>    <span class='hs-num'>0</span> <span class='hs-varop'>*.</span> <span class='hs-keyword'>_</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>empty</span>
+<a name="line-405"></a>    <span class='hs-keyword'>_</span> <span class='hs-varop'>*.</span> <span class='hs-varid'>m</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>m</span>
+<a name="line-406"></a><span class='hs-keyword'>instance</span> <span class='hs-conid'>Enum</span> <span class='hs-varid'>a</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>RightModule</span> <span class='hs-conid'>Natural</span> <span class='hs-layout'>(</span><span class='hs-conid'>BitSet</span> <span class='hs-varid'>a</span><span class='hs-layout'>)</span> <span class='hs-keyword'>where</span>
+<a name="line-407"></a>    <span class='hs-keyword'>_</span> <span class='hs-varop'>.*</span> <span class='hs-num'>0</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>empty</span>
+<a name="line-408"></a>    <span class='hs-varid'>m</span> <span class='hs-varop'>.*</span> <span class='hs-keyword'>_</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>m</span>
+<a name="line-409"></a><span class='hs-keyword'>instance</span> <span class='hs-conid'>Enum</span> <span class='hs-varid'>a</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>Bimodule</span> <span class='hs-conid'>Natural</span> <span class='hs-layout'>(</span><span class='hs-conid'>BitSet</span> <span class='hs-varid'>a</span><span class='hs-layout'>)</span>
+<a name="line-410"></a><span class='hs-keyword'>instance</span> <span class='hs-layout'>(</span><span class='hs-conid'>Bounded</span> <span class='hs-varid'>a</span><span class='hs-layout'>,</span> <span class='hs-conid'>Enum</span> <span class='hs-varid'>a</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>Algebra</span> <span class='hs-conid'>Natural</span> <span class='hs-layout'>(</span><span class='hs-conid'>BitSet</span> <span class='hs-varid'>a</span><span class='hs-layout'>)</span>
+<a name="line-411"></a>
+<a name="line-412"></a><span class='hs-keyword'>instance</span> <span class='hs-layout'>(</span><span class='hs-conid'>Bounded</span> <span class='hs-varid'>a</span><span class='hs-layout'>,</span> <span class='hs-conid'>Enum</span> <span class='hs-varid'>a</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>Module</span> <span class='hs-layout'>(</span><span class='hs-conid'>BitSet</span> <span class='hs-varid'>a</span><span class='hs-layout'>)</span> <span class='hs-layout'>(</span><span class='hs-conid'>BitSet</span> <span class='hs-varid'>a</span><span class='hs-layout'>)</span>
+<a name="line-413"></a><span class='hs-keyword'>instance</span> <span class='hs-layout'>(</span><span class='hs-conid'>Bounded</span> <span class='hs-varid'>a</span><span class='hs-layout'>,</span> <span class='hs-conid'>Enum</span> <span class='hs-varid'>a</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>LeftModule</span> <span class='hs-layout'>(</span><span class='hs-conid'>BitSet</span> <span class='hs-varid'>a</span><span class='hs-layout'>)</span> <span class='hs-layout'>(</span><span class='hs-conid'>BitSet</span> <span class='hs-varid'>a</span><span class='hs-layout'>)</span> <span class='hs-keyword'>where</span> <span class='hs-layout'>(</span><span class='hs-varop'>*.</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>times</span>
+<a name="line-414"></a><span class='hs-keyword'>instance</span> <span class='hs-layout'>(</span><span class='hs-conid'>Bounded</span> <span class='hs-varid'>a</span><span class='hs-layout'>,</span> <span class='hs-conid'>Enum</span> <span class='hs-varid'>a</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>RightModule</span> <span class='hs-layout'>(</span><span class='hs-conid'>BitSet</span> <span class='hs-varid'>a</span><span class='hs-layout'>)</span> <span class='hs-layout'>(</span><span class='hs-conid'>BitSet</span> <span class='hs-varid'>a</span><span class='hs-layout'>)</span> <span class='hs-keyword'>where</span> <span class='hs-layout'>(</span><span class='hs-varop'>.*</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>times</span>
+<a name="line-415"></a><span class='hs-keyword'>instance</span> <span class='hs-layout'>(</span><span class='hs-conid'>Bounded</span> <span class='hs-varid'>a</span><span class='hs-layout'>,</span> <span class='hs-conid'>Enum</span> <span class='hs-varid'>a</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>Bimodule</span> <span class='hs-layout'>(</span><span class='hs-conid'>BitSet</span> <span class='hs-varid'>a</span><span class='hs-layout'>)</span> <span class='hs-layout'>(</span><span class='hs-conid'>BitSet</span> <span class='hs-varid'>a</span><span class='hs-layout'>)</span>
+<a name="line-416"></a><span class='hs-keyword'>instance</span> <span class='hs-layout'>(</span><span class='hs-conid'>Bounded</span> <span class='hs-varid'>a</span><span class='hs-layout'>,</span> <span class='hs-conid'>Enum</span> <span class='hs-varid'>a</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>Algebra</span> <span class='hs-layout'>(</span><span class='hs-conid'>BitSet</span> <span class='hs-varid'>a</span><span class='hs-layout'>)</span> <span class='hs-layout'>(</span><span class='hs-conid'>BitSet</span> <span class='hs-varid'>a</span><span class='hs-layout'>)</span>
+<a name="line-417"></a>    
+<a name="line-418"></a><span class='hs-keyword'>instance</span> <span class='hs-conid'>Generator</span> <span class='hs-layout'>(</span><span class='hs-conid'>BitSet</span> <span class='hs-varid'>a</span><span class='hs-layout'>)</span> <span class='hs-keyword'>where</span>
+<a name="line-419"></a>    <span class='hs-keyword'>type</span> <span class='hs-conid'>Elem</span> <span class='hs-layout'>(</span><span class='hs-conid'>BitSet</span> <span class='hs-varid'>a</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>a</span>
+<a name="line-420"></a>    <span class='hs-varid'>mapReduce</span> <span class='hs-varid'>f</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>mapReduce</span> <span class='hs-varid'>f</span> <span class='hs-varop'>.</span> <span class='hs-varid'>toList</span>
+<a name="line-421"></a>
+<a name="line-422"></a><span class='hs-keyword'>instance</span> <span class='hs-layout'>(</span><span class='hs-conid'>Show</span> <span class='hs-varid'>a</span><span class='hs-layout'>,</span> <span class='hs-conid'>Bounded</span> <span class='hs-varid'>a</span><span class='hs-layout'>,</span> <span class='hs-conid'>Enum</span> <span class='hs-varid'>a</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>Num</span> <span class='hs-layout'>(</span><span class='hs-conid'>BitSet</span> <span class='hs-varid'>a</span><span class='hs-layout'>)</span> <span class='hs-keyword'>where</span>
+<a name="line-423"></a>    <span class='hs-layout'>(</span><span class='hs-varop'>+</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>union</span>
+<a name="line-424"></a>    <span class='hs-layout'>(</span><span class='hs-comment'>-</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>difference</span>
+<a name="line-425"></a>    <span class='hs-layout'>(</span><span class='hs-varop'>*</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>intersection</span>
+<a name="line-426"></a>    <span class='hs-varid'>fromInteger</span> <span class='hs-varid'>m</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>r</span> <span class='hs-keyword'>where</span>
+<a name="line-427"></a>        <span class='hs-varid'>r</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>BS</span> <span class='hs-varid'>c</span> <span class='hs-varid'>c</span> <span class='hs-varid'>c</span> <span class='hs-num'>0</span> <span class='hs-layout'>(</span><span class='hs-varid'>hwm</span> <span class='hs-varid'>m</span><span class='hs-layout'>)</span> <span class='hs-varid'>m</span> <span class='hs-varid'>u</span> <span class='hs-varid'>toEnum</span> <span class='hs-keyword'>where</span>
+<a name="line-428"></a>        <span class='hs-varid'>c</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>recount</span> <span class='hs-varid'>m</span>
+<a name="line-429"></a>        <span class='hs-varid'>u</span> <span class='hs-keyglyph'>=</span> <span class='hs-layout'>(</span><span class='hs-varid'>fromEnum</span> <span class='hs-layout'>(</span><span class='hs-varid'>minBound</span> <span class='hs-varop'>`asArgTypeOf`</span> <span class='hs-varid'>r</span><span class='hs-layout'>)</span><span class='hs-layout'>,</span> <span class='hs-varid'>fromEnum</span> <span class='hs-layout'>(</span><span class='hs-varid'>maxBound</span> <span class='hs-varop'>`asArgTypeOf`</span> <span class='hs-varid'>r</span><span class='hs-layout'>)</span><span class='hs-layout'>)</span>
+<a name="line-430"></a>    <span class='hs-varid'>abs</span> <span class='hs-varid'>b</span> <span class='hs-keyglyph'>|</span> <span class='hs-varid'>mantissa</span> <span class='hs-varid'>b</span> <span class='hs-varop'>&lt;</span> <span class='hs-num'>0</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>recomplement</span> <span class='hs-varid'>b</span>
+<a name="line-431"></a>          <span class='hs-keyglyph'>|</span> <span class='hs-varid'>otherwise</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>b</span>
+<a name="line-432"></a>    <span class='hs-varid'>signum</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>error</span> <span class='hs-str'>"BitSet.signum undefined"</span>
+<a name="line-433"></a>
+<a name="line-434"></a><span class='hs-keyword'>instance</span> <span class='hs-layout'>(</span><span class='hs-conid'>Show</span> <span class='hs-varid'>a</span><span class='hs-layout'>,</span> <span class='hs-conid'>Bounded</span> <span class='hs-varid'>a</span><span class='hs-layout'>,</span> <span class='hs-conid'>Enum</span> <span class='hs-varid'>a</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>Bits</span> <span class='hs-layout'>(</span><span class='hs-conid'>BitSet</span> <span class='hs-varid'>a</span><span class='hs-layout'>)</span> <span class='hs-keyword'>where</span>
+<a name="line-435"></a>    <span class='hs-layout'>(</span><span class='hs-varop'>.&amp;.</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>intersection</span>
+<a name="line-436"></a>    <span class='hs-layout'>(</span><span class='hs-varop'>.|.</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>union</span>
+<a name="line-437"></a>    <span class='hs-varid'>a</span> <span class='hs-varop'>`xor`</span> <span class='hs-varid'>b</span> <span class='hs-keyglyph'>=</span> <span class='hs-layout'>(</span><span class='hs-varid'>a</span> <span class='hs-varop'>.|.</span> <span class='hs-varid'>b</span><span class='hs-layout'>)</span> <span class='hs-varop'>.&amp;.</span> <span class='hs-varid'>complement</span> <span class='hs-layout'>(</span><span class='hs-varid'>a</span> <span class='hs-varop'>.&amp;.</span> <span class='hs-varid'>b</span><span class='hs-layout'>)</span>
+<a name="line-438"></a>
+<a name="line-439"></a>    <span class='hs-comment'>-- | /O(d)/ Complements a 'BitSet' with respect to the bounds of @a@. Preserves order of 'null' and 'size'</span>
+<a name="line-440"></a>    <span class='hs-varid'>complement</span> <span class='hs-varid'>r</span><span class='hs-keyglyph'>@</span><span class='hs-layout'>(</span><span class='hs-conid'>BS</span> <span class='hs-varid'>a</span> <span class='hs-varid'>b</span> <span class='hs-varid'>c</span> <span class='hs-varid'>l</span> <span class='hs-varid'>h</span> <span class='hs-varid'>m</span> <span class='hs-keyword'>_</span> <span class='hs-keyword'>_</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>BS</span> <span class='hs-layout'>(</span><span class='hs-varid'>complement</span> <span class='hs-varid'>b</span><span class='hs-layout'>)</span> <span class='hs-layout'>(</span><span class='hs-varid'>complement</span> <span class='hs-varid'>a</span><span class='hs-layout'>)</span> <span class='hs-layout'>(</span><span class='hs-varid'>complement</span> <span class='hs-varid'>c</span><span class='hs-layout'>)</span> <span class='hs-varid'>l</span> <span class='hs-varid'>h</span> <span class='hs-layout'>(</span><span class='hs-varid'>complement</span> <span class='hs-varid'>m</span><span class='hs-layout'>)</span> <span class='hs-varid'>u</span> <span class='hs-varid'>toEnum</span> <span class='hs-keyword'>where</span>
+<a name="line-441"></a>        <span class='hs-varid'>u</span> <span class='hs-keyglyph'>=</span> <span class='hs-layout'>(</span><span class='hs-varid'>fromEnum</span> <span class='hs-layout'>(</span><span class='hs-varid'>minBound</span> <span class='hs-varop'>`asArgTypeOf`</span> <span class='hs-varid'>r</span><span class='hs-layout'>)</span><span class='hs-layout'>,</span> <span class='hs-varid'>fromEnum</span> <span class='hs-layout'>(</span><span class='hs-varid'>maxBound</span> <span class='hs-varop'>`asArgTypeOf`</span> <span class='hs-varid'>r</span><span class='hs-layout'>)</span><span class='hs-layout'>)</span>
+<a name="line-442"></a>    <span class='hs-comment'>{-# INLINE complement #-}</span>
+<a name="line-443"></a>    <span class='hs-comment'>{-
+<a name="line-444"></a>    shift (BS a b c l h m _ f) n = BS a b c ((l + r) `max` uh) ((h + r) `max` uh) m (ul,uh) toEnum) where
+<a name="line-445"></a>        ul = fromEnum (minBound `asArgTypeOf` r)
+<a name="line-446"></a>        uh = fromEnum (maxBound `asArgTypeOf` r)
+<a name="line-447"></a>    -}</span>
+<a name="line-448"></a>    <span class='hs-varid'>shift</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>error</span> <span class='hs-str'>"BitSet.shift undefined"</span>
+<a name="line-449"></a>    <span class='hs-varid'>rotate</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>error</span> <span class='hs-str'>"BitSet.rotate undefined"</span>
+<a name="line-450"></a>    <span class='hs-varid'>bit</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>singleton</span> <span class='hs-varop'>.</span> <span class='hs-varid'>toEnum</span>
+<a name="line-451"></a>    <span class='hs-varid'>setBit</span> <span class='hs-varid'>s</span> <span class='hs-varid'>b</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>s</span> <span class='hs-varop'>`union`</span> <span class='hs-varid'>singleton</span> <span class='hs-layout'>(</span><span class='hs-varid'>toEnum</span> <span class='hs-varid'>b</span><span class='hs-layout'>)</span>
+<a name="line-452"></a>    <span class='hs-varid'>clearBit</span> <span class='hs-varid'>s</span> <span class='hs-varid'>b</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>s</span> <span class='hs-varop'>`difference`</span> <span class='hs-varid'>singleton</span> <span class='hs-layout'>(</span><span class='hs-varid'>toEnum</span> <span class='hs-varid'>b</span><span class='hs-layout'>)</span>
+<a name="line-453"></a>    <span class='hs-varid'>complementBit</span> <span class='hs-varid'>s</span> <span class='hs-varid'>b</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>s</span> <span class='hs-varop'>`xor`</span> <span class='hs-varid'>singleton</span> <span class='hs-layout'>(</span><span class='hs-varid'>toEnum</span> <span class='hs-varid'>b</span><span class='hs-layout'>)</span>
+<a name="line-454"></a>    <span class='hs-varid'>testBit</span> <span class='hs-varid'>s</span> <span class='hs-varid'>b</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>member</span> <span class='hs-layout'>(</span><span class='hs-varid'>toEnum</span> <span class='hs-varid'>b</span><span class='hs-layout'>)</span> <span class='hs-varid'>s</span> 
+<a name="line-455"></a>    <span class='hs-varid'>bitSize</span> <span class='hs-varid'>r</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>fromEnum</span> <span class='hs-layout'>(</span><span class='hs-varid'>maxBound</span> <span class='hs-varop'>`asArgTypeOf`</span> <span class='hs-varid'>r</span><span class='hs-layout'>)</span> <span class='hs-comment'>-</span> <span class='hs-varid'>fromEnum</span> <span class='hs-layout'>(</span><span class='hs-varid'>minBound</span> <span class='hs-varop'>`asArgTypeOf`</span> <span class='hs-varid'>r</span><span class='hs-layout'>)</span>
+<a name="line-456"></a>    <span class='hs-varid'>isSigned</span> <span class='hs-keyword'>_</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>True</span>
+<a name="line-457"></a>
+<a name="line-458"></a><a name="complement'"></a><span class='hs-definition'>complement'</span> <span class='hs-keyglyph'>::</span> <span class='hs-layout'>(</span><span class='hs-conid'>Bounded</span> <span class='hs-varid'>a</span><span class='hs-layout'>,</span> <span class='hs-conid'>Enum</span> <span class='hs-varid'>a</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>BitSet</span> <span class='hs-varid'>a</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-conid'>BitSet</span> <span class='hs-varid'>a</span>
+<a name="line-459"></a><span class='hs-definition'>complement'</span> <span class='hs-varid'>r</span><span class='hs-keyglyph'>@</span><span class='hs-layout'>(</span><span class='hs-conid'>BS</span> <span class='hs-varid'>a</span> <span class='hs-varid'>b</span> <span class='hs-varid'>c</span> <span class='hs-varid'>l</span> <span class='hs-varid'>h</span> <span class='hs-varid'>m</span> <span class='hs-keyword'>_</span> <span class='hs-keyword'>_</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>BS</span> <span class='hs-layout'>(</span><span class='hs-varid'>complement</span> <span class='hs-varid'>b</span><span class='hs-layout'>)</span> <span class='hs-layout'>(</span><span class='hs-varid'>complement</span> <span class='hs-varid'>a</span><span class='hs-layout'>)</span> <span class='hs-layout'>(</span><span class='hs-varid'>complement</span> <span class='hs-varid'>c</span><span class='hs-layout'>)</span> <span class='hs-varid'>l</span> <span class='hs-varid'>h</span> <span class='hs-layout'>(</span><span class='hs-varid'>complement</span> <span class='hs-varid'>m</span><span class='hs-layout'>)</span> <span class='hs-varid'>u</span> <span class='hs-varid'>toEnum</span> <span class='hs-keyword'>where</span>
+<a name="line-460"></a>    <span class='hs-varid'>u</span> <span class='hs-keyglyph'>=</span> <span class='hs-layout'>(</span><span class='hs-varid'>fromEnum</span> <span class='hs-layout'>(</span><span class='hs-varid'>minBound</span> <span class='hs-varop'>`asArgTypeOf`</span> <span class='hs-varid'>r</span><span class='hs-layout'>)</span><span class='hs-layout'>,</span> <span class='hs-varid'>fromEnum</span> <span class='hs-layout'>(</span><span class='hs-varid'>maxBound</span> <span class='hs-varop'>`asArgTypeOf`</span> <span class='hs-varid'>r</span><span class='hs-layout'>)</span><span class='hs-layout'>)</span>
hunk ./doc/html/monoids/src/Data-Ring-Semi-Kleene.html 10
-<a name="line-2"></a>    <span class='hs-layout'>(</span> <span class='hs-keyword'>module</span> <span class='hs-conid'>Data</span><span class='hs-varop'>.</span><span class='hs-conid'>Ring</span><span class='hs-varop'>.</span><span class='hs-conid'>Semi</span>
+<a name="line-2"></a>    <span class='hs-layout'>(</span> <span class='hs-keyword'>module</span> <span class='hs-conid'>Data</span><span class='hs-varop'>.</span><span class='hs-conid'>Ring</span>
hunk ./doc/html/monoids/src/Data-Ring-Semi-Kleene.html 15
-<a name="line-7"></a><span class='hs-keyword'>import</span> <span class='hs-conid'>Data</span><span class='hs-varop'>.</span><span class='hs-conid'>Ring</span><span class='hs-varop'>.</span><span class='hs-conid'>Semi</span>
+<a name="line-7"></a><span class='hs-keyword'>import</span> <span class='hs-conid'>Data</span><span class='hs-varop'>.</span><span class='hs-conid'>Ring</span>
hunk ./doc/html/monoids/src/Data-Ring-Semi-Natural.html 26
-<a name="line-18"></a>    <span class='hs-layout'>(</span> <span class='hs-keyword'>module</span> <span class='hs-conid'>Data</span><span class='hs-varop'>.</span><span class='hs-conid'>Ring</span><span class='hs-varop'>.</span><span class='hs-conid'>Semi</span>
+<a name="line-18"></a>    <span class='hs-layout'>(</span> <span class='hs-keyword'>module</span> <span class='hs-conid'>Data</span><span class='hs-varop'>.</span><span class='hs-conid'>Ring</span>
hunk ./doc/html/monoids/src/Data-Ring-Semi-Natural.html 28
-<a name="line-20"></a>    <span class='hs-layout'>,</span> <span class='hs-varid'>natural</span>
-<a name="line-21"></a>    <span class='hs-layout'>)</span> <span class='hs-keyword'>where</span>
-<a name="line-22"></a>
-<a name="line-23"></a><span class='hs-keyword'>import</span> <span class='hs-conid'>Prelude</span> <span class='hs-varid'>hiding</span> <span class='hs-layout'>(</span><span class='hs-varid'>id</span><span class='hs-layout'>,</span><span class='hs-layout'>(</span><span class='hs-varop'>.</span><span class='hs-layout'>)</span><span class='hs-layout'>)</span>
-<a name="line-24"></a><span class='hs-keyword'>import</span> <span class='hs-conid'>Numeric</span> <span class='hs-layout'>(</span><span class='hs-varid'>readDec</span><span class='hs-layout'>,</span> <span class='hs-varid'>showInt</span><span class='hs-layout'>)</span>
-<a name="line-25"></a><span class='hs-keyword'>import</span> <span class='hs-conid'>Control</span><span class='hs-varop'>.</span><span class='hs-conid'>Applicative</span>
-<a name="line-26"></a><span class='hs-keyword'>import</span> <span class='hs-conid'>Control</span><span class='hs-varop'>.</span><span class='hs-conid'>Monad</span>
-<a name="line-27"></a><span class='hs-keyword'>import</span> <span class='hs-conid'>Data</span><span class='hs-varop'>.</span><span class='hs-conid'>Ring</span><span class='hs-varop'>.</span><span class='hs-conid'>Semi</span>
-<a name="line-28"></a><span class='hs-keyword'>import</span> <span class='hs-keyword'>qualified</span> <span class='hs-conid'>Data</span><span class='hs-varop'>.</span><span class='hs-conid'>Monoid</span><span class='hs-varop'>.</span><span class='hs-conid'>Combinators</span> <span class='hs-keyword'>as</span> <span class='hs-conid'>Monoid</span>
-<a name="line-29"></a><span class='hs-comment'>-- import Data.Word</span>
-<a name="line-30"></a><span class='hs-keyword'>import</span> <span class='hs-conid'>Data</span><span class='hs-varop'>.</span><span class='hs-conid'>Monoid</span><span class='hs-varop'>.</span><span class='hs-conid'>Monad</span>
-<a name="line-31"></a><span class='hs-keyword'>import</span> <span class='hs-conid'>Data</span><span class='hs-varop'>.</span><span class='hs-conid'>Monoid</span><span class='hs-varop'>.</span><span class='hs-conid'>Applicative</span>
-<a name="line-32"></a><span class='hs-keyword'>import</span> <span class='hs-conid'>Data</span><span class='hs-varop'>.</span><span class='hs-conid'>Monoid</span><span class='hs-varop'>.</span><span class='hs-conid'>Multiplicative</span>
-<a name="line-33"></a><span class='hs-keyword'>import</span> <span class='hs-conid'>Data</span><span class='hs-varop'>.</span><span class='hs-conid'>Monoid</span><span class='hs-varop'>.</span><span class='hs-conid'>Categorical</span>
-<a name="line-34"></a><span class='hs-keyword'>import</span> <span class='hs-conid'>Data</span><span class='hs-varop'>.</span><span class='hs-conid'>Monoid</span><span class='hs-varop'>.</span><span class='hs-conid'>Self</span>
-<a name="line-35"></a><span class='hs-keyword'>import</span> <span class='hs-conid'>Data</span><span class='hs-varop'>.</span><span class='hs-conid'>Monoid</span><span class='hs-varop'>.</span><span class='hs-conid'>FromString</span>
+<a name="line-20"></a>    <span class='hs-layout'>,</span> <span class='hs-varid'>toNatural</span>
+<a name="line-21"></a>    <span class='hs-layout'>,</span> <span class='hs-varid'>fromNatural</span>
+<a name="line-22"></a>    <span class='hs-layout'>)</span> <span class='hs-keyword'>where</span>
+<a name="line-23"></a>
+<a name="line-24"></a><span class='hs-keyword'>import</span> <span class='hs-conid'>Prelude</span> <span class='hs-varid'>hiding</span> <span class='hs-layout'>(</span><span class='hs-varid'>id</span><span class='hs-layout'>,</span><span class='hs-layout'>(</span><span class='hs-varop'>.</span><span class='hs-layout'>)</span><span class='hs-layout'>)</span>
+<a name="line-25"></a><span class='hs-keyword'>import</span> <span class='hs-conid'>Numeric</span> <span class='hs-layout'>(</span><span class='hs-varid'>readDec</span><span class='hs-layout'>,</span> <span class='hs-varid'>showInt</span><span class='hs-layout'>)</span>
+<a name="line-26"></a><span class='hs-keyword'>import</span> <span class='hs-conid'>Control</span><span class='hs-varop'>.</span><span class='hs-conid'>Applicative</span>
+<a name="line-27"></a><span class='hs-keyword'>import</span> <span class='hs-conid'>Control</span><span class='hs-varop'>.</span><span class='hs-conid'>Monad</span>
+<a name="line-28"></a><span class='hs-keyword'>import</span> <span class='hs-conid'>Data</span><span class='hs-varop'>.</span><span class='hs-conid'>Ring</span>
+<a name="line-29"></a><span class='hs-keyword'>import</span> <span class='hs-keyword'>qualified</span> <span class='hs-conid'>Data</span><span class='hs-varop'>.</span><span class='hs-conid'>Monoid</span><span class='hs-varop'>.</span><span class='hs-conid'>Combinators</span> <span class='hs-keyword'>as</span> <span class='hs-conid'>Monoid</span>
+<a name="line-30"></a><span class='hs-comment'>-- import Data.Word</span>
+<a name="line-31"></a><span class='hs-keyword'>import</span> <span class='hs-conid'>Data</span><span class='hs-varop'>.</span><span class='hs-conid'>Monoid</span><span class='hs-varop'>.</span><span class='hs-conid'>Monad</span>
+<a name="line-32"></a><span class='hs-keyword'>import</span> <span class='hs-conid'>Data</span><span class='hs-varop'>.</span><span class='hs-conid'>Monoid</span><span class='hs-varop'>.</span><span class='hs-conid'>Applicative</span>
+<a name="line-33"></a><span class='hs-keyword'>import</span> <span class='hs-conid'>Data</span><span class='hs-varop'>.</span><span class='hs-conid'>Monoid</span><span class='hs-varop'>.</span><span class='hs-conid'>Multiplicative</span>
+<a name="line-34"></a><span class='hs-keyword'>import</span> <span class='hs-conid'>Data</span><span class='hs-varop'>.</span><span class='hs-conid'>Monoid</span><span class='hs-varop'>.</span><span class='hs-conid'>Categorical</span>
+<a name="line-35"></a><span class='hs-keyword'>import</span> <span class='hs-conid'>Data</span><span class='hs-varop'>.</span><span class='hs-conid'>Monoid</span><span class='hs-varop'>.</span><span class='hs-conid'>Self</span>
hunk ./doc/html/monoids/src/Data-Ring-Semi-Natural.html 47
-<a name="line-39"></a><span class='hs-keyword'>import</span> <span class='hs-conid'>Data</span><span class='hs-varop'>.</span><span class='hs-conid'>Generator</span><span class='hs-varop'>.</span><span class='hs-conid'>Compressive</span><span class='hs-varop'>.</span><span class='hs-conid'>RLE</span>
-<a name="line-40"></a><span class='hs-keyword'>import</span> <span class='hs-conid'>Data</span><span class='hs-varop'>.</span><span class='hs-conid'>Sequence</span> <span class='hs-layout'>(</span><span class='hs-conid'>Seq</span><span class='hs-layout'>)</span>
-<a name="line-41"></a>
-<a name="line-42"></a><a name="natural"></a><span class='hs-definition'>natural</span> <span class='hs-keyglyph'>::</span> <span class='hs-conid'>Integer</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-conid'>Natural</span>
-<a name="line-43"></a><span class='hs-definition'>natural</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>fromInteger</span>
-<a name="line-44"></a>
-<a name="line-45"></a><a name="Natural"></a><span class='hs-keyword'>newtype</span> <span class='hs-conid'>Natural</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>Natural</span> <span class='hs-layout'>{</span> <span class='hs-varid'>getNatural</span> <span class='hs-keyglyph'>::</span> <span class='hs-conid'>Integer</span> <span class='hs-layout'>}</span> 
-<a name="line-46"></a>    <span class='hs-keyword'>deriving</span> <span class='hs-layout'>(</span><span class='hs-conid'>Eq</span><span class='hs-layout'>,</span><span class='hs-conid'>Ord</span><span class='hs-layout'>)</span>
-<a name="line-47"></a>
-<a name="line-48"></a><span class='hs-keyword'>instance</span> <span class='hs-conid'>Read</span> <span class='hs-conid'>Natural</span> <span class='hs-keyword'>where</span>
-<a name="line-49"></a>    <span class='hs-varid'>readsPrec</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>const</span> <span class='hs-varid'>readDec</span>
-<a name="line-50"></a>
-<a name="line-51"></a><span class='hs-keyword'>instance</span> <span class='hs-conid'>Show</span> <span class='hs-conid'>Natural</span> <span class='hs-keyword'>where</span>
-<a name="line-52"></a>    <span class='hs-varid'>showsPrec</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>const</span> <span class='hs-varid'>showInt</span>
-<a name="line-53"></a>
-<a name="line-54"></a><span class='hs-keyword'>instance</span> <span class='hs-conid'>Num</span> <span class='hs-conid'>Natural</span> <span class='hs-keyword'>where</span>
-<a name="line-55"></a>    <span class='hs-conid'>Natural</span> <span class='hs-varid'>a</span> <span class='hs-varop'>+</span> <span class='hs-conid'>Natural</span> <span class='hs-varid'>b</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>Natural</span> <span class='hs-layout'>(</span><span class='hs-varid'>a</span> <span class='hs-varop'>+</span> <span class='hs-varid'>b</span><span class='hs-layout'>)</span>
-<a name="line-56"></a>    <span class='hs-conid'>Natural</span> <span class='hs-varid'>a</span> <span class='hs-comment'>-</span> <span class='hs-conid'>Natural</span> <span class='hs-varid'>b</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>fromInteger</span> <span class='hs-layout'>(</span><span class='hs-varid'>a</span> <span class='hs-comment'>-</span> <span class='hs-varid'>b</span><span class='hs-layout'>)</span> 
-<a name="line-57"></a>    <span class='hs-conid'>Natural</span> <span class='hs-varid'>a</span> <span class='hs-varop'>*</span> <span class='hs-conid'>Natural</span> <span class='hs-varid'>b</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>Natural</span> <span class='hs-layout'>(</span><span class='hs-varid'>a</span> <span class='hs-varop'>*</span> <span class='hs-varid'>b</span><span class='hs-layout'>)</span>
-<a name="line-58"></a>    <span class='hs-varid'>abs</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>id</span>
-<a name="line-59"></a>    <span class='hs-varid'>signum</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>Natural</span> <span class='hs-varop'>.</span> <span class='hs-varid'>signum</span> <span class='hs-varop'>.</span> <span class='hs-varid'>getNatural</span>
-<a name="line-60"></a>    <span class='hs-varid'>fromInteger</span> <span class='hs-varid'>x</span> <span class='hs-keyglyph'>|</span> <span class='hs-varid'>x</span> <span class='hs-varop'>&lt;</span> <span class='hs-num'>0</span>     <span class='hs-keyglyph'>=</span> <span class='hs-varid'>error</span> <span class='hs-str'>"Natural &lt; 0"</span>
-<a name="line-61"></a>                  <span class='hs-keyglyph'>|</span> <span class='hs-varid'>otherwise</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>Natural</span> <span class='hs-varid'>x</span>
-<a name="line-62"></a>    <span class='hs-varid'>negate</span> <span class='hs-num'>0</span> <span class='hs-keyglyph'>=</span> <span class='hs-num'>0</span> 
-<a name="line-63"></a>    <span class='hs-varid'>negate</span> <span class='hs-keyword'>_</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>error</span> <span class='hs-str'>"Natural &lt; 0"</span>
+<a name="line-39"></a>
+<a name="line-40"></a><span class='hs-cpp'>#ifdef M_CONTAINERS</span>
+<a name="line-41"></a><span class='hs-comment'>-- used with Seq</span>
+<a name="line-42"></a><span class='hs-keyword'>import</span> <span class='hs-conid'>Data</span><span class='hs-varop'>.</span><span class='hs-conid'>Generator</span><span class='hs-varop'>.</span><span class='hs-conid'>Compressive</span><span class='hs-varop'>.</span><span class='hs-conid'>RLE</span>
+<a name="line-43"></a><span class='hs-keyword'>import</span> <span class='hs-conid'>Data</span><span class='hs-varop'>.</span><span class='hs-conid'>Sequence</span> <span class='hs-layout'>(</span><span class='hs-conid'>Seq</span><span class='hs-layout'>)</span>
+<a name="line-44"></a><span class='hs-cpp'>#endif</span>
+<a name="line-45"></a>
+<a name="line-46"></a><span class='hs-cpp'>#ifdef X_OverloadedStrings</span>
+<a name="line-47"></a><span class='hs-keyword'>import</span> <span class='hs-conid'>Data</span><span class='hs-varop'>.</span><span class='hs-conid'>Monoid</span><span class='hs-varop'>.</span><span class='hs-conid'>FromString</span>
+<a name="line-48"></a><span class='hs-cpp'>#endif</span>
+<a name="line-49"></a>
+<a name="line-50"></a><a name="toNatural"></a><span class='hs-definition'>toNatural</span> <span class='hs-keyglyph'>::</span> <span class='hs-conid'>Integer</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-conid'>Natural</span>
+<a name="line-51"></a><span class='hs-definition'>toNatural</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>fromInteger</span>
+<a name="line-52"></a>
+<a name="line-53"></a><a name="fromNatural"></a><span class='hs-definition'>fromNatural</span> <span class='hs-keyglyph'>::</span> <span class='hs-conid'>Ringoid</span> <span class='hs-varid'>r</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>Natural</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-varid'>r</span>
+<a name="line-54"></a><span class='hs-definition'>fromNatural</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>Monoid</span><span class='hs-varop'>.</span><span class='hs-varid'>replicate</span> <span class='hs-varid'>one</span> <span class='hs-varop'>.</span> <span class='hs-varid'>getNatural</span>
+<a name="line-55"></a>
+<a name="line-56"></a><a name="Natural"></a><span class='hs-keyword'>newtype</span> <span class='hs-conid'>Natural</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>Natural</span> <span class='hs-layout'>{</span> <span class='hs-varid'>getNatural</span> <span class='hs-keyglyph'>::</span> <span class='hs-conid'>Integer</span> <span class='hs-layout'>}</span> 
+<a name="line-57"></a>    <span class='hs-keyword'>deriving</span> <span class='hs-layout'>(</span><span class='hs-conid'>Eq</span><span class='hs-layout'>,</span><span class='hs-conid'>Ord</span><span class='hs-layout'>)</span>
+<a name="line-58"></a>
+<a name="line-59"></a><span class='hs-keyword'>instance</span> <span class='hs-conid'>Read</span> <span class='hs-conid'>Natural</span> <span class='hs-keyword'>where</span>
+<a name="line-60"></a>    <span class='hs-varid'>readsPrec</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>const</span> <span class='hs-varid'>readDec</span>
+<a name="line-61"></a>
+<a name="line-62"></a><span class='hs-keyword'>instance</span> <span class='hs-conid'>Show</span> <span class='hs-conid'>Natural</span> <span class='hs-keyword'>where</span>
+<a name="line-63"></a>    <span class='hs-varid'>showsPrec</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>const</span> <span class='hs-varid'>showInt</span>
hunk ./doc/html/monoids/src/Data-Ring-Semi-Natural.html 73
-<a name="line-65"></a><span class='hs-keyword'>instance</span> <span class='hs-conid'>Enum</span> <span class='hs-conid'>Natural</span> <span class='hs-keyword'>where</span>
-<a name="line-66"></a>    <span class='hs-varid'>succ</span> <span class='hs-layout'>(</span><span class='hs-conid'>Natural</span> <span class='hs-varid'>n</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>Natural</span> <span class='hs-layout'>(</span><span class='hs-varid'>n</span> <span class='hs-varop'>+</span> <span class='hs-num'>1</span><span class='hs-layout'>)</span>
-<a name="line-67"></a>    <span class='hs-varid'>pred</span> <span class='hs-layout'>(</span><span class='hs-conid'>Natural</span> <span class='hs-num'>0</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>error</span> <span class='hs-str'>"Natural &lt; 0"</span>
-<a name="line-68"></a>    <span class='hs-varid'>pred</span> <span class='hs-layout'>(</span><span class='hs-conid'>Natural</span> <span class='hs-varid'>n</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>Natural</span> <span class='hs-layout'>(</span><span class='hs-varid'>n</span> <span class='hs-comment'>-</span> <span class='hs-num'>1</span><span class='hs-layout'>)</span>
-<a name="line-69"></a>    <span class='hs-varid'>toEnum</span> <span class='hs-varid'>n</span> <span class='hs-keyglyph'>|</span> <span class='hs-varid'>n</span> <span class='hs-varop'>&lt;</span> <span class='hs-num'>0</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>error</span> <span class='hs-str'>"Natural &lt; 0"</span>
-<a name="line-70"></a>    <span class='hs-varid'>toEnum</span> <span class='hs-varid'>n</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>Natural</span> <span class='hs-layout'>(</span><span class='hs-varid'>fromIntegral</span> <span class='hs-varid'>n</span><span class='hs-layout'>)</span>
-<a name="line-71"></a>    <span class='hs-varid'>fromEnum</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>fromIntegral</span>
-<a name="line-72"></a>    <span class='hs-varid'>enumFrom</span> <span class='hs-layout'>(</span><span class='hs-conid'>Natural</span> <span class='hs-varid'>n</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>Natural</span> <span class='hs-varop'>`map`</span> <span class='hs-varid'>enumFrom</span> <span class='hs-varid'>n</span>
-<a name="line-73"></a>    <span class='hs-varid'>enumFromThen</span> <span class='hs-layout'>(</span><span class='hs-conid'>Natural</span> <span class='hs-varid'>n</span><span class='hs-layout'>)</span> <span class='hs-layout'>(</span><span class='hs-conid'>Natural</span> <span class='hs-varid'>np</span><span class='hs-layout'>)</span> 
-<a name="line-74"></a>        <span class='hs-keyglyph'>|</span> <span class='hs-varid'>np</span> <span class='hs-varop'>&lt;</span> <span class='hs-varid'>n</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>Natural</span> <span class='hs-varop'>`map`</span> <span class='hs-varid'>enumFromThenTo</span> <span class='hs-varid'>n</span> <span class='hs-varid'>np</span> <span class='hs-num'>0</span>
-<a name="line-75"></a>        <span class='hs-keyglyph'>|</span> <span class='hs-varid'>otherwise</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>Natural</span> <span class='hs-varop'>`map`</span> <span class='hs-varid'>enumFromThen</span> <span class='hs-varid'>n</span> <span class='hs-varid'>np</span>
-<a name="line-76"></a>    <span class='hs-varid'>enumFromTo</span> <span class='hs-layout'>(</span><span class='hs-conid'>Natural</span> <span class='hs-varid'>n</span><span class='hs-layout'>)</span> <span class='hs-layout'>(</span><span class='hs-conid'>Natural</span> <span class='hs-varid'>m</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>Natural</span> <span class='hs-varop'>`map`</span> <span class='hs-varid'>enumFromTo</span> <span class='hs-varid'>n</span> <span class='hs-varid'>m</span>
-<a name="line-77"></a>    <span class='hs-varid'>enumFromThenTo</span> <span class='hs-layout'>(</span><span class='hs-conid'>Natural</span> <span class='hs-varid'>n</span><span class='hs-layout'>)</span> <span class='hs-layout'>(</span><span class='hs-conid'>Natural</span> <span class='hs-varid'>m</span><span class='hs-layout'>)</span> <span class='hs-layout'>(</span><span class='hs-conid'>Natural</span> <span class='hs-varid'>o</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>Natural</span> <span class='hs-varop'>`map`</span> <span class='hs-varid'>enumFromThenTo</span> <span class='hs-varid'>n</span> <span class='hs-varid'>m</span> <span class='hs-varid'>o</span>
-<a name="line-78"></a>
-<a name="line-79"></a><span class='hs-keyword'>instance</span> <span class='hs-conid'>Real</span> <span class='hs-conid'>Natural</span> <span class='hs-keyword'>where</span>
-<a name="line-80"></a>    <span class='hs-varid'>toRational</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>toRational</span> <span class='hs-varop'>.</span> <span class='hs-varid'>getNatural</span>
-<a name="line-81"></a>
-<a name="line-82"></a><span class='hs-keyword'>instance</span> <span class='hs-conid'>Integral</span> <span class='hs-conid'>Natural</span> <span class='hs-keyword'>where</span>
-<a name="line-83"></a>    <span class='hs-varid'>toInteger</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>getNatural</span>
-<a name="line-84"></a>    <span class='hs-conid'>Natural</span> <span class='hs-varid'>a</span> <span class='hs-varop'>`quot`</span> <span class='hs-conid'>Natural</span> <span class='hs-varid'>b</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>Natural</span> <span class='hs-layout'>(</span><span class='hs-varid'>a</span> <span class='hs-varop'>`quot`</span> <span class='hs-varid'>b</span><span class='hs-layout'>)</span>
-<a name="line-85"></a>    <span class='hs-conid'>Natural</span> <span class='hs-varid'>a</span> <span class='hs-varop'>`rem`</span> <span class='hs-conid'>Natural</span> <span class='hs-varid'>b</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>Natural</span> <span class='hs-layout'>(</span><span class='hs-varid'>a</span> <span class='hs-varop'>`rem`</span> <span class='hs-varid'>b</span><span class='hs-layout'>)</span>
-<a name="line-86"></a>    <span class='hs-conid'>Natural</span> <span class='hs-varid'>a</span> <span class='hs-varop'>`div`</span> <span class='hs-conid'>Natural</span> <span class='hs-varid'>b</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>Natural</span> <span class='hs-layout'>(</span><span class='hs-varid'>a</span> <span class='hs-varop'>`div`</span> <span class='hs-varid'>b</span><span class='hs-layout'>)</span>
-<a name="line-87"></a>    <span class='hs-conid'>Natural</span> <span class='hs-varid'>a</span> <span class='hs-varop'>`mod`</span> <span class='hs-conid'>Natural</span> <span class='hs-varid'>b</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>Natural</span> <span class='hs-layout'>(</span><span class='hs-varid'>a</span> <span class='hs-varop'>`mod`</span> <span class='hs-varid'>b</span><span class='hs-layout'>)</span>
-<a name="line-88"></a>    <span class='hs-conid'>Natural</span> <span class='hs-varid'>a</span> <span class='hs-varop'>`quotRem`</span> <span class='hs-conid'>Natural</span> <span class='hs-varid'>b</span> <span class='hs-keyglyph'>=</span> <span class='hs-layout'>(</span><span class='hs-conid'>Natural</span> <span class='hs-varid'>q</span><span class='hs-layout'>,</span><span class='hs-conid'>Natural</span> <span class='hs-varid'>r</span><span class='hs-layout'>)</span> <span class='hs-keyword'>where</span> <span class='hs-keyglyph'>~</span><span class='hs-layout'>(</span><span class='hs-varid'>q</span><span class='hs-layout'>,</span><span class='hs-varid'>r</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>a</span> <span class='hs-varop'>`quotRem`</span> <span class='hs-varid'>b</span>
-<a name="line-89"></a>    <span class='hs-conid'>Natural</span> <span class='hs-varid'>a</span> <span class='hs-varop'>`divMod`</span> <span class='hs-conid'>Natural</span> <span class='hs-varid'>b</span> <span class='hs-keyglyph'>=</span> <span class='hs-layout'>(</span><span class='hs-conid'>Natural</span> <span class='hs-varid'>q</span><span class='hs-layout'>,</span><span class='hs-conid'>Natural</span> <span class='hs-varid'>r</span><span class='hs-layout'>)</span> <span class='hs-keyword'>where</span> <span class='hs-keyglyph'>~</span><span class='hs-layout'>(</span><span class='hs-varid'>q</span><span class='hs-layout'>,</span><span class='hs-varid'>r</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>a</span> <span class='hs-varop'>`divMod`</span> <span class='hs-varid'>b</span>
-<a name="line-90"></a>
-<a name="line-91"></a><span class='hs-keyword'>instance</span> <span class='hs-conid'>Monoid</span> <span class='hs-conid'>Natural</span> <span class='hs-keyword'>where</span>
-<a name="line-92"></a>    <span class='hs-varid'>mempty</span> <span class='hs-keyglyph'>=</span> <span class='hs-num'>0</span>
-<a name="line-93"></a>    <span class='hs-varid'>mappend</span> <span class='hs-keyglyph'>=</span> <span class='hs-layout'>(</span><span class='hs-varop'>+</span><span class='hs-layout'>)</span>
-<a name="line-94"></a>
-<a name="line-95"></a><span class='hs-keyword'>instance</span> <span class='hs-conid'>Multiplicative</span> <span class='hs-conid'>Natural</span> <span class='hs-keyword'>where</span>
-<a name="line-96"></a>    <span class='hs-varid'>one</span> <span class='hs-keyglyph'>=</span> <span class='hs-num'>1</span>
-<a name="line-97"></a>    <span class='hs-varid'>times</span> <span class='hs-keyglyph'>=</span> <span class='hs-layout'>(</span><span class='hs-varop'>*</span><span class='hs-layout'>)</span>
-<a name="line-98"></a>
-<a name="line-99"></a><span class='hs-keyword'>instance</span> <span class='hs-conid'>Ringoid</span> <span class='hs-conid'>Natural</span>
-<a name="line-100"></a><span class='hs-keyword'>instance</span> <span class='hs-conid'>LeftSemiNearRing</span> <span class='hs-conid'>Natural</span>
-<a name="line-101"></a><span class='hs-keyword'>instance</span> <span class='hs-conid'>RightSemiNearRing</span> <span class='hs-conid'>Natural</span>
-<a name="line-102"></a><span class='hs-keyword'>instance</span> <span class='hs-conid'>SemiRing</span> <span class='hs-conid'>Natural</span>
-<a name="line-103"></a>
-<a name="line-104"></a><span class='hs-keyword'>instance</span> <span class='hs-conid'>LeftModule</span> <span class='hs-conid'>Natural</span> <span class='hs-conid'>()</span> <span class='hs-keyword'>where</span> <span class='hs-keyword'>_</span> <span class='hs-varop'>*.</span> <span class='hs-keyword'>_</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>()</span>
-<a name="line-105"></a><span class='hs-keyword'>instance</span> <span class='hs-conid'>RightModule</span> <span class='hs-conid'>Natural</span> <span class='hs-conid'>()</span> <span class='hs-keyword'>where</span> <span class='hs-keyword'>_</span> <span class='hs-varop'>.*</span> <span class='hs-keyword'>_</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>()</span>
-<a name="line-106"></a><span class='hs-keyword'>instance</span> <span class='hs-conid'>Module</span> <span class='hs-conid'>Natural</span> <span class='hs-conid'>()</span>
-<a name="line-107"></a>
-<a name="line-108"></a><span class='hs-comment'>-- idempotent monoids</span>
-<a name="line-109"></a><span class='hs-keyword'>instance</span> <span class='hs-conid'>LeftModule</span> <span class='hs-conid'>Natural</span> <span class='hs-conid'>Any</span> <span class='hs-keyword'>where</span> 
-<a name="line-110"></a>    <span class='hs-num'>0</span> <span class='hs-varop'>*.</span> <span class='hs-keyword'>_</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>mempty</span>
-<a name="line-111"></a>    <span class='hs-keyword'>_</span> <span class='hs-varop'>*.</span> <span class='hs-varid'>m</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>m</span>
-<a name="line-112"></a><span class='hs-keyword'>instance</span> <span class='hs-conid'>RightModule</span> <span class='hs-conid'>Natural</span> <span class='hs-conid'>Any</span> <span class='hs-keyword'>where</span> 
-<a name="line-113"></a>    <span class='hs-keyword'>_</span> <span class='hs-varop'>.*</span> <span class='hs-num'>0</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>mempty</span>
-<a name="line-114"></a>    <span class='hs-varid'>m</span> <span class='hs-varop'>.*</span> <span class='hs-keyword'>_</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>m</span> 
-<a name="line-115"></a><span class='hs-keyword'>instance</span> <span class='hs-conid'>Module</span> <span class='hs-conid'>Natural</span> <span class='hs-conid'>Any</span> 
-<a name="line-116"></a>
-<a name="line-117"></a><span class='hs-keyword'>instance</span> <span class='hs-conid'>LeftModule</span> <span class='hs-conid'>Natural</span> <span class='hs-conid'>All</span> <span class='hs-keyword'>where</span> 
-<a name="line-118"></a>    <span class='hs-num'>0</span> <span class='hs-varop'>*.</span> <span class='hs-keyword'>_</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>mempty</span>
-<a name="line-119"></a>    <span class='hs-keyword'>_</span> <span class='hs-varop'>*.</span> <span class='hs-varid'>m</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>m</span>
-<a name="line-120"></a><span class='hs-keyword'>instance</span> <span class='hs-conid'>RightModule</span> <span class='hs-conid'>Natural</span> <span class='hs-conid'>All</span> <span class='hs-keyword'>where</span> 
-<a name="line-121"></a>    <span class='hs-keyword'>_</span> <span class='hs-varop'>.*</span> <span class='hs-num'>0</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>mempty</span>
-<a name="line-122"></a>    <span class='hs-varid'>m</span> <span class='hs-varop'>.*</span> <span class='hs-keyword'>_</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>m</span>
-<a name="line-123"></a><span class='hs-keyword'>instance</span> <span class='hs-conid'>Module</span> <span class='hs-conid'>Natural</span> <span class='hs-conid'>All</span>
-<a name="line-124"></a>
-<a name="line-125"></a><span class='hs-keyword'>instance</span> <span class='hs-conid'>LeftModule</span> <span class='hs-conid'>Natural</span> <span class='hs-layout'>(</span><span class='hs-conid'>First</span> <span class='hs-varid'>a</span><span class='hs-layout'>)</span> <span class='hs-keyword'>where</span> 
-<a name="line-126"></a>    <span class='hs-num'>0</span> <span class='hs-varop'>*.</span> <span class='hs-keyword'>_</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>mempty</span>
-<a name="line-127"></a>    <span class='hs-keyword'>_</span> <span class='hs-varop'>*.</span> <span class='hs-varid'>m</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>m</span>
-<a name="line-128"></a><span class='hs-keyword'>instance</span> <span class='hs-conid'>RightModule</span> <span class='hs-conid'>Natural</span> <span class='hs-layout'>(</span><span class='hs-conid'>First</span> <span class='hs-varid'>a</span><span class='hs-layout'>)</span> <span class='hs-keyword'>where</span> 
-<a name="line-129"></a>    <span class='hs-keyword'>_</span> <span class='hs-varop'>.*</span> <span class='hs-num'>0</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>mempty</span>
-<a name="line-130"></a>    <span class='hs-varid'>m</span> <span class='hs-varop'>.*</span> <span class='hs-keyword'>_</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>m</span>
-<a name="line-131"></a><span class='hs-keyword'>instance</span> <span class='hs-conid'>Module</span> <span class='hs-conid'>Natural</span> <span class='hs-layout'>(</span><span class='hs-conid'>First</span> <span class='hs-varid'>a</span><span class='hs-layout'>)</span> 
-<a name="line-132"></a>
-<a name="line-133"></a><span class='hs-keyword'>instance</span> <span class='hs-conid'>LeftModule</span> <span class='hs-conid'>Natural</span> <span class='hs-layout'>(</span><span class='hs-conid'>Last</span> <span class='hs-varid'>a</span><span class='hs-layout'>)</span> <span class='hs-keyword'>where</span> 
-<a name="line-134"></a>    <span class='hs-num'>0</span> <span class='hs-varop'>*.</span> <span class='hs-keyword'>_</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>mempty</span>
-<a name="line-135"></a>    <span class='hs-keyword'>_</span> <span class='hs-varop'>*.</span> <span class='hs-varid'>m</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>m</span>
-<a name="line-136"></a><span class='hs-keyword'>instance</span> <span class='hs-conid'>RightModule</span> <span class='hs-conid'>Natural</span> <span class='hs-layout'>(</span><span class='hs-conid'>Last</span> <span class='hs-varid'>a</span><span class='hs-layout'>)</span> <span class='hs-keyword'>where</span> 
-<a name="line-137"></a>    <span class='hs-keyword'>_</span> <span class='hs-varop'>.*</span> <span class='hs-num'>0</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>mempty</span>
-<a name="line-138"></a>    <span class='hs-varid'>m</span> <span class='hs-varop'>.*</span> <span class='hs-keyword'>_</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>m</span>
-<a name="line-139"></a><span class='hs-keyword'>instance</span> <span class='hs-conid'>Module</span> <span class='hs-conid'>Natural</span> <span class='hs-layout'>(</span><span class='hs-conid'>Last</span> <span class='hs-varid'>a</span><span class='hs-layout'>)</span>
-<a name="line-140"></a>
-<a name="line-141"></a><span class='hs-keyword'>instance</span> <span class='hs-conid'>LeftModule</span> <span class='hs-conid'>Natural</span> <span class='hs-conid'>Ordering</span> <span class='hs-keyword'>where</span> 
-<a name="line-142"></a>    <span class='hs-num'>0</span> <span class='hs-varop'>*.</span> <span class='hs-keyword'>_</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>mempty</span>
-<a name="line-143"></a>    <span class='hs-keyword'>_</span> <span class='hs-varop'>*.</span> <span class='hs-varid'>m</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>m</span>
-<a name="line-144"></a><span class='hs-keyword'>instance</span> <span class='hs-conid'>RightModule</span> <span class='hs-conid'>Natural</span> <span class='hs-conid'>Ordering</span> <span class='hs-keyword'>where</span> 
-<a name="line-145"></a>    <span class='hs-keyword'>_</span> <span class='hs-varop'>.*</span> <span class='hs-num'>0</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>mempty</span>
-<a name="line-146"></a>    <span class='hs-varid'>m</span> <span class='hs-varop'>.*</span> <span class='hs-keyword'>_</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>m</span> 
-<a name="line-147"></a><span class='hs-keyword'>instance</span> <span class='hs-conid'>Module</span> <span class='hs-conid'>Natural</span> <span class='hs-conid'>Ordering</span>
-<a name="line-148"></a>
-<a name="line-149"></a><span class='hs-comment'>-- other monoids</span>
-<a name="line-150"></a>
-<a name="line-151"></a><span class='hs-keyword'>instance</span> <span class='hs-conid'>LeftModule</span> <span class='hs-conid'>Natural</span> <span class='hs-keyglyph'>[</span><span class='hs-varid'>a</span><span class='hs-keyglyph'>]</span> <span class='hs-keyword'>where</span> <span class='hs-layout'>(</span><span class='hs-varop'>*.</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>flip</span> <span class='hs-conid'>Monoid</span><span class='hs-varop'>.</span><span class='hs-varid'>replicate</span>
-<a name="line-152"></a><span class='hs-keyword'>instance</span> <span class='hs-conid'>RightModule</span> <span class='hs-conid'>Natural</span> <span class='hs-keyglyph'>[</span><span class='hs-varid'>a</span><span class='hs-keyglyph'>]</span> <span class='hs-keyword'>where</span> <span class='hs-layout'>(</span><span class='hs-varop'>.*</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>Monoid</span><span class='hs-varop'>.</span><span class='hs-varid'>replicate</span>
-<a name="line-153"></a><span class='hs-keyword'>instance</span> <span class='hs-conid'>Module</span> <span class='hs-conid'>Natural</span> <span class='hs-keyglyph'>[</span><span class='hs-varid'>a</span><span class='hs-keyglyph'>]</span>
-<a name="line-154"></a>
-<a name="line-155"></a><span class='hs-keyword'>instance</span> <span class='hs-conid'>Monoid</span> <span class='hs-varid'>m</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>LeftModule</span> <span class='hs-conid'>Natural</span> <span class='hs-layout'>(</span><span class='hs-varid'>a</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-varid'>m</span><span class='hs-layout'>)</span> <span class='hs-keyword'>where</span> <span class='hs-layout'>(</span><span class='hs-varop'>*.</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>flip</span> <span class='hs-conid'>Monoid</span><span class='hs-varop'>.</span><span class='hs-varid'>replicate</span>
-<a name="line-156"></a><span class='hs-keyword'>instance</span> <span class='hs-conid'>Monoid</span> <span class='hs-varid'>m</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>RightModule</span> <span class='hs-conid'>Natural</span> <span class='hs-layout'>(</span><span class='hs-varid'>a</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-varid'>m</span><span class='hs-layout'>)</span> <span class='hs-keyword'>where</span> <span class='hs-layout'>(</span><span class='hs-varop'>.*</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>Monoid</span><span class='hs-varop'>.</span><span class='hs-varid'>replicate</span>
-<a name="line-157"></a><span class='hs-keyword'>instance</span> <span class='hs-conid'>Monoid</span> <span class='hs-varid'>m</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>Module</span> <span class='hs-conid'>Natural</span> <span class='hs-layout'>(</span><span class='hs-varid'>a</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-varid'>m</span><span class='hs-layout'>)</span>
-<a name="line-158"></a>
-<a name="line-159"></a><span class='hs-keyword'>instance</span> <span class='hs-conid'>Num</span> <span class='hs-varid'>a</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>LeftModule</span> <span class='hs-conid'>Natural</span>  <span class='hs-layout'>(</span><span class='hs-conid'>Sum</span> <span class='hs-varid'>a</span><span class='hs-layout'>)</span> <span class='hs-keyword'>where</span> <span class='hs-layout'>(</span><span class='hs-varop'>*.</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>flip</span> <span class='hs-conid'>Monoid</span><span class='hs-varop'>.</span><span class='hs-varid'>replicate</span>
-<a name="line-160"></a><span class='hs-keyword'>instance</span> <span class='hs-conid'>Num</span> <span class='hs-varid'>a</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>RightModule</span> <span class='hs-conid'>Natural</span> <span class='hs-layout'>(</span><span class='hs-conid'>Sum</span> <span class='hs-varid'>a</span><span class='hs-layout'>)</span> <span class='hs-keyword'>where</span> <span class='hs-layout'>(</span><span class='hs-varop'>.*</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>Monoid</span><span class='hs-varop'>.</span><span class='hs-varid'>replicate</span>
-<a name="line-161"></a><span class='hs-keyword'>instance</span> <span class='hs-conid'>Num</span> <span class='hs-varid'>a</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>Module</span> <span class='hs-conid'>Natural</span> <span class='hs-layout'>(</span><span class='hs-conid'>Sum</span> <span class='hs-varid'>a</span><span class='hs-layout'>)</span>
-<a name="line-162"></a>
-<a name="line-163"></a><span class='hs-keyword'>instance</span> <span class='hs-conid'>Num</span> <span class='hs-varid'>a</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>LeftModule</span> <span class='hs-conid'>Natural</span>  <span class='hs-layout'>(</span><span class='hs-conid'>Product</span> <span class='hs-varid'>a</span><span class='hs-layout'>)</span> <span class='hs-keyword'>where</span> <span class='hs-layout'>(</span><span class='hs-varop'>*.</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>flip</span> <span class='hs-layout'>(</span><span class='hs-varop'>.*</span><span class='hs-layout'>)</span>
-<a name="line-164"></a><span class='hs-keyword'>instance</span> <span class='hs-conid'>Num</span> <span class='hs-varid'>a</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>RightModule</span> <span class='hs-conid'>Natural</span> <span class='hs-layout'>(</span><span class='hs-conid'>Product</span> <span class='hs-varid'>a</span><span class='hs-layout'>)</span> <span class='hs-keyword'>where</span> <span class='hs-conid'>Product</span> <span class='hs-varid'>m</span> <span class='hs-varop'>.*</span> <span class='hs-conid'>Natural</span> <span class='hs-varid'>n</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>Product</span> <span class='hs-layout'>(</span><span class='hs-varid'>m</span> <span class='hs-varop'>^</span> <span class='hs-varid'>n</span><span class='hs-layout'>)</span>
-<a name="line-165"></a><span class='hs-keyword'>instance</span> <span class='hs-conid'>Num</span> <span class='hs-varid'>a</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>Module</span> <span class='hs-conid'>Natural</span> <span class='hs-layout'>(</span><span class='hs-conid'>Product</span> <span class='hs-varid'>a</span><span class='hs-layout'>)</span>
-<a name="line-166"></a>
-<a name="line-167"></a><span class='hs-keyword'>instance</span> <span class='hs-conid'>LeftModule</span> <span class='hs-conid'>Natural</span>  <span class='hs-layout'>(</span><span class='hs-conid'>Endo</span> <span class='hs-varid'>a</span><span class='hs-layout'>)</span> <span class='hs-keyword'>where</span> <span class='hs-layout'>(</span><span class='hs-varop'>*.</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>flip</span> <span class='hs-conid'>Monoid</span><span class='hs-varop'>.</span><span class='hs-varid'>replicate</span>
-<a name="line-168"></a><span class='hs-keyword'>instance</span> <span class='hs-conid'>RightModule</span> <span class='hs-conid'>Natural</span> <span class='hs-layout'>(</span><span class='hs-conid'>Endo</span> <span class='hs-varid'>a</span><span class='hs-layout'>)</span> <span class='hs-keyword'>where</span> <span class='hs-layout'>(</span><span class='hs-varop'>.*</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>Monoid</span><span class='hs-varop'>.</span><span class='hs-varid'>replicate</span>
-<a name="line-169"></a><span class='hs-keyword'>instance</span> <span class='hs-conid'>Module</span> <span class='hs-conid'>Natural</span> <span class='hs-layout'>(</span><span class='hs-conid'>Endo</span> <span class='hs-varid'>a</span><span class='hs-layout'>)</span>
-<a name="line-170"></a>
-<a name="line-171"></a><span class='hs-keyword'>instance</span> <span class='hs-conid'>Monoid</span> <span class='hs-varid'>m</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>LeftModule</span>  <span class='hs-conid'>Natural</span> <span class='hs-layout'>(</span><span class='hs-conid'>Dual</span> <span class='hs-varid'>m</span><span class='hs-layout'>)</span> <span class='hs-keyword'>where</span> <span class='hs-layout'>(</span><span class='hs-varop'>*.</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>flip</span> <span class='hs-conid'>Monoid</span><span class='hs-varop'>.</span><span class='hs-varid'>replicate</span>
-<a name="line-172"></a><span class='hs-keyword'>instance</span> <span class='hs-conid'>Monoid</span> <span class='hs-varid'>m</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>RightModule</span> <span class='hs-conid'>Natural</span> <span class='hs-layout'>(</span><span class='hs-conid'>Dual</span> <span class='hs-varid'>m</span><span class='hs-layout'>)</span> <span class='hs-keyword'>where</span> <span class='hs-layout'>(</span><span class='hs-varop'>.*</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>Monoid</span><span class='hs-varop'>.</span><span class='hs-varid'>replicate</span>
-<a name="line-173"></a><span class='hs-keyword'>instance</span> <span class='hs-conid'>Monoid</span> <span class='hs-varid'>m</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>Module</span> <span class='hs-conid'>Natural</span> <span class='hs-layout'>(</span><span class='hs-conid'>Dual</span> <span class='hs-varid'>m</span><span class='hs-layout'>)</span>
-<a name="line-174"></a>
-<a name="line-175"></a><span class='hs-comment'>-- FromString</span>
-<a name="line-176"></a><span class='hs-keyword'>instance</span> <span class='hs-conid'>Monoid</span> <span class='hs-varid'>m</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>LeftModule</span>  <span class='hs-conid'>Natural</span> <span class='hs-layout'>(</span><span class='hs-conid'>FromString</span> <span class='hs-varid'>m</span><span class='hs-layout'>)</span> <span class='hs-keyword'>where</span> <span class='hs-layout'>(</span><span class='hs-varop'>*.</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>flip</span> <span class='hs-conid'>Monoid</span><span class='hs-varop'>.</span><span class='hs-varid'>replicate</span>
-<a name="line-177"></a><span class='hs-keyword'>instance</span> <span class='hs-conid'>Monoid</span> <span class='hs-varid'>m</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>RightModule</span> <span class='hs-conid'>Natural</span> <span class='hs-layout'>(</span><span class='hs-conid'>FromString</span> <span class='hs-varid'>m</span><span class='hs-layout'>)</span> <span class='hs-keyword'>where</span> <span class='hs-layout'>(</span><span class='hs-varop'>.*</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>Monoid</span><span class='hs-varop'>.</span><span class='hs-varid'>replicate</span>
-<a name="line-178"></a><span class='hs-keyword'>instance</span> <span class='hs-conid'>Monoid</span> <span class='hs-varid'>m</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>Module</span> <span class='hs-conid'>Natural</span> <span class='hs-layout'>(</span><span class='hs-conid'>FromString</span> <span class='hs-varid'>m</span><span class='hs-layout'>)</span>
-<a name="line-179"></a>
-<a name="line-180"></a><span class='hs-comment'>-- Self</span>
-<a name="line-181"></a><span class='hs-keyword'>instance</span> <span class='hs-conid'>Monoid</span> <span class='hs-varid'>m</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>LeftModule</span>  <span class='hs-conid'>Natural</span> <span class='hs-layout'>(</span><span class='hs-conid'>Self</span> <span class='hs-varid'>m</span><span class='hs-layout'>)</span> <span class='hs-keyword'>where</span> <span class='hs-layout'>(</span><span class='hs-varop'>*.</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>flip</span> <span class='hs-conid'>Monoid</span><span class='hs-varop'>.</span><span class='hs-varid'>replicate</span>
-<a name="line-182"></a><span class='hs-keyword'>instance</span> <span class='hs-conid'>Monoid</span> <span class='hs-varid'>m</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>RightModule</span> <span class='hs-conid'>Natural</span> <span class='hs-layout'>(</span><span class='hs-conid'>Self</span> <span class='hs-varid'>m</span><span class='hs-layout'>)</span> <span class='hs-keyword'>where</span> <span class='hs-layout'>(</span><span class='hs-varop'>.*</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>Monoid</span><span class='hs-varop'>.</span><span class='hs-varid'>replicate</span>
-<a name="line-183"></a><span class='hs-keyword'>instance</span> <span class='hs-conid'>Monoid</span> <span class='hs-varid'>m</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>Module</span> <span class='hs-conid'>Natural</span> <span class='hs-layout'>(</span><span class='hs-conid'>Self</span> <span class='hs-varid'>m</span><span class='hs-layout'>)</span>
-<a name="line-184"></a>
-<a name="line-185"></a><span class='hs-comment'>-- Free Generator</span>
-<a name="line-186"></a><span class='hs-keyword'>instance</span> <span class='hs-conid'>LeftModule</span>  <span class='hs-conid'>Natural</span> <span class='hs-layout'>(</span><span class='hs-conid'>Free</span> <span class='hs-varid'>a</span><span class='hs-layout'>)</span> <span class='hs-keyword'>where</span> <span class='hs-layout'>(</span><span class='hs-varop'>*.</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>flip</span> <span class='hs-conid'>Monoid</span><span class='hs-varop'>.</span><span class='hs-varid'>replicate</span>
-<a name="line-187"></a><span class='hs-keyword'>instance</span> <span class='hs-conid'>RightModule</span> <span class='hs-conid'>Natural</span> <span class='hs-layout'>(</span><span class='hs-conid'>Free</span> <span class='hs-varid'>a</span><span class='hs-layout'>)</span> <span class='hs-keyword'>where</span> <span class='hs-layout'>(</span><span class='hs-varop'>.*</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>Monoid</span><span class='hs-varop'>.</span><span class='hs-varid'>replicate</span>
-<a name="line-188"></a><span class='hs-keyword'>instance</span> <span class='hs-conid'>Module</span> <span class='hs-conid'>Natural</span> <span class='hs-layout'>(</span><span class='hs-conid'>Free</span> <span class='hs-varid'>a</span><span class='hs-layout'>)</span>
-<a name="line-189"></a>
-<a name="line-190"></a><span class='hs-comment'>-- RLE Seq</span>
-<a name="line-191"></a><span class='hs-keyword'>instance</span> <span class='hs-conid'>Eq</span> <span class='hs-varid'>a</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>LeftModule</span>  <span class='hs-conid'>Natural</span> <span class='hs-layout'>(</span><span class='hs-conid'>RLE</span> <span class='hs-conid'>Seq</span> <span class='hs-varid'>a</span><span class='hs-layout'>)</span> <span class='hs-keyword'>where</span> <span class='hs-layout'>(</span><span class='hs-varop'>*.</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>flip</span> <span class='hs-conid'>Monoid</span><span class='hs-varop'>.</span><span class='hs-varid'>replicate</span>
-<a name="line-192"></a><span class='hs-keyword'>instance</span> <span class='hs-conid'>Eq</span> <span class='hs-varid'>a</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>RightModule</span> <span class='hs-conid'>Natural</span> <span class='hs-layout'>(</span><span class='hs-conid'>RLE</span> <span class='hs-conid'>Seq</span> <span class='hs-varid'>a</span><span class='hs-layout'>)</span> <span class='hs-keyword'>where</span> <span class='hs-layout'>(</span><span class='hs-varop'>.*</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>Monoid</span><span class='hs-varop'>.</span><span class='hs-varid'>replicate</span>
-<a name="line-193"></a><span class='hs-keyword'>instance</span> <span class='hs-conid'>Eq</span> <span class='hs-varid'>a</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>Module</span> <span class='hs-conid'>Natural</span> <span class='hs-layout'>(</span><span class='hs-conid'>RLE</span> <span class='hs-conid'>Seq</span> <span class='hs-varid'>a</span><span class='hs-layout'>)</span>
-<a name="line-194"></a>
-<a name="line-195"></a><span class='hs-comment'>-- Categorical</span>
-<a name="line-196"></a><span class='hs-keyword'>instance</span> <span class='hs-conid'>Category</span> <span class='hs-varid'>k</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>LeftModule</span> <span class='hs-conid'>Natural</span>  <span class='hs-layout'>(</span><span class='hs-conid'>GEndo</span> <span class='hs-varid'>k</span> <span class='hs-varid'>a</span><span class='hs-layout'>)</span> <span class='hs-keyword'>where</span> <span class='hs-layout'>(</span><span class='hs-varop'>*.</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>flip</span> <span class='hs-conid'>Monoid</span><span class='hs-varop'>.</span><span class='hs-varid'>replicate</span>
-<a name="line-197"></a><span class='hs-keyword'>instance</span> <span class='hs-conid'>Category</span> <span class='hs-varid'>k</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>RightModule</span> <span class='hs-conid'>Natural</span> <span class='hs-layout'>(</span><span class='hs-conid'>GEndo</span> <span class='hs-varid'>k</span> <span class='hs-varid'>a</span><span class='hs-layout'>)</span> <span class='hs-keyword'>where</span> <span class='hs-layout'>(</span><span class='hs-varop'>.*</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>Monoid</span><span class='hs-varop'>.</span><span class='hs-varid'>replicate</span>
-<a name="line-198"></a><span class='hs-keyword'>instance</span> <span class='hs-conid'>Category</span> <span class='hs-varid'>k</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>Module</span> <span class='hs-conid'>Natural</span> <span class='hs-layout'>(</span><span class='hs-conid'>GEndo</span> <span class='hs-varid'>k</span> <span class='hs-varid'>a</span><span class='hs-layout'>)</span>
-<a name="line-199"></a>
-<a name="line-200"></a><span class='hs-keyword'>instance</span> <span class='hs-conid'>Monoid</span> <span class='hs-varid'>m</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>LeftModule</span> <span class='hs-conid'>Natural</span>  <span class='hs-layout'>(</span><span class='hs-conid'>CMonoid</span> <span class='hs-varid'>m</span> <span class='hs-varid'>m</span> <span class='hs-varid'>m</span><span class='hs-layout'>)</span> <span class='hs-keyword'>where</span> <span class='hs-layout'>(</span><span class='hs-varop'>*.</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>flip</span> <span class='hs-conid'>Monoid</span><span class='hs-varop'>.</span><span class='hs-varid'>replicate</span>
-<a name="line-201"></a><span class='hs-keyword'>instance</span> <span class='hs-conid'>Monoid</span> <span class='hs-varid'>m</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>RightModule</span> <span class='hs-conid'>Natural</span> <span class='hs-layout'>(</span><span class='hs-conid'>CMonoid</span> <span class='hs-varid'>m</span> <span class='hs-varid'>m</span> <span class='hs-varid'>m</span><span class='hs-layout'>)</span> <span class='hs-keyword'>where</span> <span class='hs-layout'>(</span><span class='hs-varop'>.*</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>Monoid</span><span class='hs-varop'>.</span><span class='hs-varid'>replicate</span>
-<a name="line-202"></a><span class='hs-keyword'>instance</span> <span class='hs-conid'>Monoid</span> <span class='hs-varid'>m</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>Module</span> <span class='hs-conid'>Natural</span> <span class='hs-layout'>(</span><span class='hs-conid'>CMonoid</span> <span class='hs-varid'>m</span> <span class='hs-varid'>m</span> <span class='hs-varid'>m</span><span class='hs-layout'>)</span>
-<a name="line-203"></a>
-<a name="line-204"></a><span class='hs-comment'>-- Alternative</span>
-<a name="line-205"></a><span class='hs-keyword'>instance</span> <span class='hs-conid'>Applicative</span> <span class='hs-varid'>f</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>LeftModule</span> <span class='hs-conid'>Natural</span>  <span class='hs-layout'>(</span><span class='hs-conid'>Traversal</span> <span class='hs-varid'>f</span><span class='hs-layout'>)</span> <span class='hs-keyword'>where</span> <span class='hs-layout'>(</span><span class='hs-varop'>*.</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>flip</span> <span class='hs-conid'>Monoid</span><span class='hs-varop'>.</span><span class='hs-varid'>replicate</span>
-<a name="line-206"></a><span class='hs-keyword'>instance</span> <span class='hs-conid'>Applicative</span> <span class='hs-varid'>f</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>RightModule</span> <span class='hs-conid'>Natural</span> <span class='hs-layout'>(</span><span class='hs-conid'>Traversal</span> <span class='hs-varid'>f</span><span class='hs-layout'>)</span> <span class='hs-keyword'>where</span> <span class='hs-layout'>(</span><span class='hs-varop'>.*</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>Monoid</span><span class='hs-varop'>.</span><span class='hs-varid'>replicate</span>
-<a name="line-207"></a><span class='hs-keyword'>instance</span> <span class='hs-conid'>Applicative</span> <span class='hs-varid'>f</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>Module</span> <span class='hs-conid'>Natural</span> <span class='hs-layout'>(</span><span class='hs-conid'>Traversal</span> <span class='hs-varid'>f</span><span class='hs-layout'>)</span> 
-<a name="line-208"></a>
-<a name="line-209"></a><span class='hs-keyword'>instance</span> <span class='hs-conid'>Alternative</span> <span class='hs-varid'>f</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>LeftModule</span> <span class='hs-conid'>Natural</span>  <span class='hs-layout'>(</span><span class='hs-conid'>Alt</span> <span class='hs-varid'>f</span> <span class='hs-varid'>a</span><span class='hs-layout'>)</span> <span class='hs-keyword'>where</span> <span class='hs-layout'>(</span><span class='hs-varop'>*.</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>flip</span> <span class='hs-conid'>Monoid</span><span class='hs-varop'>.</span><span class='hs-varid'>replicate</span>
-<a name="line-210"></a><span class='hs-keyword'>instance</span> <span class='hs-conid'>Alternative</span> <span class='hs-varid'>f</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>RightModule</span> <span class='hs-conid'>Natural</span> <span class='hs-layout'>(</span><span class='hs-conid'>Alt</span> <span class='hs-varid'>f</span> <span class='hs-varid'>a</span><span class='hs-layout'>)</span> <span class='hs-keyword'>where</span> <span class='hs-layout'>(</span><span class='hs-varop'>.*</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>Monoid</span><span class='hs-varop'>.</span><span class='hs-varid'>replicate</span>
-<a name="line-211"></a><span class='hs-keyword'>instance</span> <span class='hs-conid'>Alternative</span> <span class='hs-varid'>f</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>Module</span> <span class='hs-conid'>Natural</span> <span class='hs-layout'>(</span><span class='hs-conid'>Alt</span> <span class='hs-varid'>f</span> <span class='hs-varid'>a</span><span class='hs-layout'>)</span> 
-<a name="line-212"></a>
-<a name="line-213"></a><span class='hs-comment'>--instance (Alternative f, Monoid m) =&gt; LeftModule Natural  (App f m) where (*.) = flip Monoid.replicate</span>
-<a name="line-214"></a><span class='hs-comment'>--instance (Alternative f, Monoid m) =&gt; RightModule Natural (App f m) where (.*) = Monoid.replicate</span>
-<a name="line-215"></a><span class='hs-comment'>--instance (Alternative f, Monoid m) =&gt; Module Natural (App f m)  </span>
-<a name="line-216"></a>
-<a name="line-217"></a><span class='hs-comment'>-- Monad</span>
-<a name="line-218"></a><span class='hs-keyword'>instance</span> <span class='hs-conid'>Monad</span> <span class='hs-varid'>f</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>LeftModule</span> <span class='hs-conid'>Natural</span>  <span class='hs-layout'>(</span><span class='hs-conid'>Action</span> <span class='hs-varid'>f</span><span class='hs-layout'>)</span> <span class='hs-keyword'>where</span> <span class='hs-layout'>(</span><span class='hs-varop'>*.</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>flip</span> <span class='hs-conid'>Monoid</span><span class='hs-varop'>.</span><span class='hs-varid'>replicate</span>
-<a name="line-219"></a><span class='hs-keyword'>instance</span> <span class='hs-conid'>Monad</span> <span class='hs-varid'>f</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>RightModule</span> <span class='hs-conid'>Natural</span> <span class='hs-layout'>(</span><span class='hs-conid'>Action</span> <span class='hs-varid'>f</span><span class='hs-layout'>)</span> <span class='hs-keyword'>where</span> <span class='hs-layout'>(</span><span class='hs-varop'>.*</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>Monoid</span><span class='hs-varop'>.</span><span class='hs-varid'>replicate</span>
-<a name="line-220"></a><span class='hs-keyword'>instance</span> <span class='hs-conid'>Monad</span> <span class='hs-varid'>f</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>Module</span> <span class='hs-conid'>Natural</span> <span class='hs-layout'>(</span><span class='hs-conid'>Action</span> <span class='hs-varid'>f</span><span class='hs-layout'>)</span> 
-<a name="line-221"></a>
-<a name="line-222"></a><span class='hs-keyword'>instance</span> <span class='hs-conid'>MonadPlus</span> <span class='hs-varid'>f</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>LeftModule</span> <span class='hs-conid'>Natural</span>  <span class='hs-layout'>(</span><span class='hs-conid'>MonadSum</span> <span class='hs-varid'>f</span> <span class='hs-varid'>a</span><span class='hs-layout'>)</span> <span class='hs-keyword'>where</span> <span class='hs-layout'>(</span><span class='hs-varop'>*.</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>flip</span> <span class='hs-conid'>Monoid</span><span class='hs-varop'>.</span><span class='hs-varid'>replicate</span>
-<a name="line-223"></a><span class='hs-keyword'>instance</span> <span class='hs-conid'>MonadPlus</span> <span class='hs-varid'>f</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>RightModule</span> <span class='hs-conid'>Natural</span> <span class='hs-layout'>(</span><span class='hs-conid'>MonadSum</span> <span class='hs-varid'>f</span> <span class='hs-varid'>a</span><span class='hs-layout'>)</span> <span class='hs-keyword'>where</span> <span class='hs-layout'>(</span><span class='hs-varop'>.*</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>Monoid</span><span class='hs-varop'>.</span><span class='hs-varid'>replicate</span>
-<a name="line-224"></a><span class='hs-keyword'>instance</span> <span class='hs-conid'>MonadPlus</span> <span class='hs-varid'>f</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>Module</span> <span class='hs-conid'>Natural</span> <span class='hs-layout'>(</span><span class='hs-conid'>MonadSum</span> <span class='hs-varid'>f</span> <span class='hs-varid'>a</span><span class='hs-layout'>)</span> 
-<a name="line-225"></a>
-<a name="line-226"></a><span class='hs-comment'>--instance (MonadPlus f, Monoid m) =&gt; LeftModule Natural  (Mon f m) where (*.) = flip Monoid.replicate</span>
-<a name="line-227"></a><span class='hs-comment'>--instance (MonadPlus f, Monoid m)  =&gt; RightModule Natural (Mon f m) where (.*) = Monoid.replicate</span>
-<a name="line-228"></a><span class='hs-comment'>--instance (MonadPlus f, Monoid m) =&gt; Module Natural (Mon f m)  </span>
-<a name="line-229"></a>
-<a name="line-230"></a><span class='hs-comment'>-- Lexical </span>
-<a name="line-231"></a><span class='hs-keyword'>instance</span> <span class='hs-conid'>LeftModule</span> <span class='hs-conid'>Natural</span>  <span class='hs-layout'>(</span><span class='hs-conid'>SourcePosition</span> <span class='hs-varid'>f</span><span class='hs-layout'>)</span> <span class='hs-keyword'>where</span> 
-<a name="line-232"></a>    <span class='hs-num'>0</span> <span class='hs-varop'>*.</span> <span class='hs-keyword'>_</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>mempty</span>
-<a name="line-233"></a>    <span class='hs-varid'>n</span> <span class='hs-varop'>*.</span> <span class='hs-conid'>Columns</span> <span class='hs-varid'>x</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>Columns</span> <span class='hs-layout'>(</span><span class='hs-varid'>fromIntegral</span> <span class='hs-varid'>n</span> <span class='hs-varop'>*</span> <span class='hs-varid'>x</span><span class='hs-layout'>)</span> 
-<a name="line-234"></a>    <span class='hs-varid'>n</span> <span class='hs-varop'>*.</span> <span class='hs-conid'>Lines</span> <span class='hs-varid'>l</span> <span class='hs-varid'>c</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>Lines</span> <span class='hs-layout'>(</span><span class='hs-varid'>fromIntegral</span> <span class='hs-varid'>n</span> <span class='hs-varop'>*</span> <span class='hs-varid'>l</span><span class='hs-layout'>)</span> <span class='hs-varid'>c</span>
-<a name="line-235"></a>    <span class='hs-keyword'>_</span> <span class='hs-varop'>*.</span> <span class='hs-conid'>Pos</span> <span class='hs-varid'>f</span> <span class='hs-varid'>l</span> <span class='hs-varid'>c</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>Pos</span> <span class='hs-varid'>f</span> <span class='hs-varid'>l</span> <span class='hs-varid'>c</span> 
-<a name="line-236"></a>    <span class='hs-varid'>n</span> <span class='hs-varop'>*.</span> <span class='hs-varid'>t</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>Monoid</span><span class='hs-varop'>.</span><span class='hs-varid'>replicate</span> <span class='hs-varid'>t</span> <span class='hs-varid'>n</span> 
-<a name="line-237"></a>
-<a name="line-238"></a><span class='hs-keyword'>instance</span> <span class='hs-conid'>RightModule</span> <span class='hs-conid'>Natural</span> <span class='hs-layout'>(</span><span class='hs-conid'>SourcePosition</span> <span class='hs-varid'>f</span><span class='hs-layout'>)</span> <span class='hs-keyword'>where</span> <span class='hs-layout'>(</span><span class='hs-varop'>.*</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>flip</span> <span class='hs-layout'>(</span><span class='hs-varop'>*.</span><span class='hs-layout'>)</span>
-<a name="line-239"></a><span class='hs-keyword'>instance</span> <span class='hs-conid'>Module</span> <span class='hs-conid'>Natural</span> <span class='hs-layout'>(</span><span class='hs-conid'>SourcePosition</span> <span class='hs-varid'>f</span><span class='hs-layout'>)</span> 
-<a name="line-240"></a>
-<a name="line-241"></a><span class='hs-keyword'>instance</span> <span class='hs-conid'>CharReducer</span> <span class='hs-varid'>m</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>LeftModule</span> <span class='hs-conid'>Natural</span>  <span class='hs-layout'>(</span><span class='hs-conid'>UTF8</span> <span class='hs-varid'>m</span><span class='hs-layout'>)</span> <span class='hs-keyword'>where</span> <span class='hs-layout'>(</span><span class='hs-varop'>*.</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>flip</span> <span class='hs-conid'>Monoid</span><span class='hs-varop'>.</span><span class='hs-varid'>replicate</span>
-<a name="line-242"></a><span class='hs-keyword'>instance</span> <span class='hs-conid'>CharReducer</span> <span class='hs-varid'>m</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>RightModule</span> <span class='hs-conid'>Natural</span> <span class='hs-layout'>(</span><span class='hs-conid'>UTF8</span> <span class='hs-varid'>m</span><span class='hs-layout'>)</span> <span class='hs-keyword'>where</span> <span class='hs-layout'>(</span><span class='hs-varop'>.*</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>Monoid</span><span class='hs-varop'>.</span><span class='hs-varid'>replicate</span>
-<a name="line-243"></a><span class='hs-keyword'>instance</span> <span class='hs-conid'>CharReducer</span> <span class='hs-varid'>m</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>Module</span> <span class='hs-conid'>Natural</span> <span class='hs-layout'>(</span><span class='hs-conid'>UTF8</span> <span class='hs-varid'>m</span><span class='hs-layout'>)</span> 
-<a name="line-244"></a>
-<a name="line-245"></a><span class='hs-keyword'>instance</span> <span class='hs-conid'>Multiplicative</span> <span class='hs-varid'>m</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>LeftModule</span> <span class='hs-conid'>Natural</span> <span class='hs-layout'>(</span><span class='hs-conid'>Log</span> <span class='hs-varid'>m</span><span class='hs-layout'>)</span> <span class='hs-keyword'>where</span> <span class='hs-layout'>(</span><span class='hs-varop'>*.</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>flip</span> <span class='hs-conid'>Monoid</span><span class='hs-varop'>.</span><span class='hs-varid'>replicate</span>
-<a name="line-246"></a><span class='hs-keyword'>instance</span> <span class='hs-conid'>Multiplicative</span> <span class='hs-varid'>m</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>RightModule</span> <span class='hs-conid'>Natural</span> <span class='hs-layout'>(</span><span class='hs-conid'>Log</span> <span class='hs-varid'>m</span><span class='hs-layout'>)</span> <span class='hs-keyword'>where</span> <span class='hs-layout'>(</span><span class='hs-varop'>.*</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>Monoid</span><span class='hs-varop'>.</span><span class='hs-varid'>replicate</span>
-<a name="line-247"></a><span class='hs-keyword'>instance</span> <span class='hs-conid'>Multiplicative</span> <span class='hs-varid'>m</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>Module</span> <span class='hs-conid'>Natural</span> <span class='hs-layout'>(</span><span class='hs-conid'>Log</span> <span class='hs-varid'>m</span><span class='hs-layout'>)</span> 
-<a name="line-248"></a>
+<a name="line-65"></a><span class='hs-keyword'>instance</span> <span class='hs-conid'>Num</span> <span class='hs-conid'>Natural</span> <span class='hs-keyword'>where</span>
+<a name="line-66"></a>    <span class='hs-conid'>Natural</span> <span class='hs-varid'>a</span> <span class='hs-varop'>+</span> <span class='hs-conid'>Natural</span> <span class='hs-varid'>b</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>Natural</span> <span class='hs-layout'>(</span><span class='hs-varid'>a</span> <span class='hs-varop'>+</span> <span class='hs-varid'>b</span><span class='hs-layout'>)</span>
+<a name="line-67"></a>    <span class='hs-conid'>Natural</span> <span class='hs-varid'>a</span> <span class='hs-comment'>-</span> <span class='hs-conid'>Natural</span> <span class='hs-varid'>b</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>fromInteger</span> <span class='hs-layout'>(</span><span class='hs-varid'>a</span> <span class='hs-comment'>-</span> <span class='hs-varid'>b</span><span class='hs-layout'>)</span> 
+<a name="line-68"></a>    <span class='hs-conid'>Natural</span> <span class='hs-varid'>a</span> <span class='hs-varop'>*</span> <span class='hs-conid'>Natural</span> <span class='hs-varid'>b</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>Natural</span> <span class='hs-layout'>(</span><span class='hs-varid'>a</span> <span class='hs-varop'>*</span> <span class='hs-varid'>b</span><span class='hs-layout'>)</span>
+<a name="line-69"></a>    <span class='hs-varid'>abs</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>id</span>
+<a name="line-70"></a>    <span class='hs-varid'>signum</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>Natural</span> <span class='hs-varop'>.</span> <span class='hs-varid'>signum</span> <span class='hs-varop'>.</span> <span class='hs-varid'>getNatural</span>
+<a name="line-71"></a>    <span class='hs-varid'>fromInteger</span> <span class='hs-varid'>x</span> <span class='hs-keyglyph'>|</span> <span class='hs-varid'>x</span> <span class='hs-varop'>&lt;</span> <span class='hs-num'>0</span>     <span class='hs-keyglyph'>=</span> <span class='hs-varid'>error</span> <span class='hs-str'>"Natural &lt; 0"</span>
+<a name="line-72"></a>                  <span class='hs-keyglyph'>|</span> <span class='hs-varid'>otherwise</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>Natural</span> <span class='hs-varid'>x</span>
+<a name="line-73"></a>    <span class='hs-varid'>negate</span> <span class='hs-num'>0</span> <span class='hs-keyglyph'>=</span> <span class='hs-num'>0</span> 
+<a name="line-74"></a>    <span class='hs-varid'>negate</span> <span class='hs-keyword'>_</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>error</span> <span class='hs-str'>"Natural &lt; 0"</span>
+<a name="line-75"></a>
+<a name="line-76"></a><span class='hs-keyword'>instance</span> <span class='hs-conid'>Enum</span> <span class='hs-conid'>Natural</span> <span class='hs-keyword'>where</span>
+<a name="line-77"></a>    <span class='hs-varid'>succ</span> <span class='hs-layout'>(</span><span class='hs-conid'>Natural</span> <span class='hs-varid'>n</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>Natural</span> <span class='hs-layout'>(</span><span class='hs-varid'>n</span> <span class='hs-varop'>+</span> <span class='hs-num'>1</span><span class='hs-layout'>)</span>
+<a name="line-78"></a>    <span class='hs-varid'>pred</span> <span class='hs-layout'>(</span><span class='hs-conid'>Natural</span> <span class='hs-num'>0</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>error</span> <span class='hs-str'>"Natural &lt; 0"</span>
+<a name="line-79"></a>    <span class='hs-varid'>pred</span> <span class='hs-layout'>(</span><span class='hs-conid'>Natural</span> <span class='hs-varid'>n</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>Natural</span> <span class='hs-layout'>(</span><span class='hs-varid'>n</span> <span class='hs-comment'>-</span> <span class='hs-num'>1</span><span class='hs-layout'>)</span>
+<a name="line-80"></a>    <span class='hs-varid'>toEnum</span> <span class='hs-varid'>n</span> <span class='hs-keyglyph'>|</span> <span class='hs-varid'>n</span> <span class='hs-varop'>&lt;</span> <span class='hs-num'>0</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>error</span> <span class='hs-str'>"Natural &lt; 0"</span>
+<a name="line-81"></a>    <span class='hs-varid'>toEnum</span> <span class='hs-varid'>n</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>Natural</span> <span class='hs-layout'>(</span><span class='hs-varid'>fromIntegral</span> <span class='hs-varid'>n</span><span class='hs-layout'>)</span>
+<a name="line-82"></a>    <span class='hs-varid'>fromEnum</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>fromIntegral</span>
+<a name="line-83"></a>    <span class='hs-varid'>enumFrom</span> <span class='hs-layout'>(</span><span class='hs-conid'>Natural</span> <span class='hs-varid'>n</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>Natural</span> <span class='hs-varop'>`map`</span> <span class='hs-varid'>enumFrom</span> <span class='hs-varid'>n</span>
+<a name="line-84"></a>    <span class='hs-varid'>enumFromThen</span> <span class='hs-layout'>(</span><span class='hs-conid'>Natural</span> <span class='hs-varid'>n</span><span class='hs-layout'>)</span> <span class='hs-layout'>(</span><span class='hs-conid'>Natural</span> <span class='hs-varid'>np</span><span class='hs-layout'>)</span> 
+<a name="line-85"></a>        <span class='hs-keyglyph'>|</span> <span class='hs-varid'>np</span> <span class='hs-varop'>&lt;</span> <span class='hs-varid'>n</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>Natural</span> <span class='hs-varop'>`map`</span> <span class='hs-varid'>enumFromThenTo</span> <span class='hs-varid'>n</span> <span class='hs-varid'>np</span> <span class='hs-num'>0</span>
+<a name="line-86"></a>        <span class='hs-keyglyph'>|</span> <span class='hs-varid'>otherwise</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>Natural</span> <span class='hs-varop'>`map`</span> <span class='hs-varid'>enumFromThen</span> <span class='hs-varid'>n</span> <span class='hs-varid'>np</span>
+<a name="line-87"></a>    <span class='hs-varid'>enumFromTo</span> <span class='hs-layout'>(</span><span class='hs-conid'>Natural</span> <span class='hs-varid'>n</span><span class='hs-layout'>)</span> <span class='hs-layout'>(</span><span class='hs-conid'>Natural</span> <span class='hs-varid'>m</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>Natural</span> <span class='hs-varop'>`map`</span> <span class='hs-varid'>enumFromTo</span> <span class='hs-varid'>n</span> <span class='hs-varid'>m</span>
+<a name="line-88"></a>    <span class='hs-varid'>enumFromThenTo</span> <span class='hs-layout'>(</span><span class='hs-conid'>Natural</span> <span class='hs-varid'>n</span><span class='hs-layout'>)</span> <span class='hs-layout'>(</span><span class='hs-conid'>Natural</span> <span class='hs-varid'>m</span><span class='hs-layout'>)</span> <span class='hs-layout'>(</span><span class='hs-conid'>Natural</span> <span class='hs-varid'>o</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>Natural</span> <span class='hs-varop'>`map`</span> <span class='hs-varid'>enumFromThenTo</span> <span class='hs-varid'>n</span> <span class='hs-varid'>m</span> <span class='hs-varid'>o</span>
+<a name="line-89"></a>
+<a name="line-90"></a><span class='hs-keyword'>instance</span> <span class='hs-conid'>Real</span> <span class='hs-conid'>Natural</span> <span class='hs-keyword'>where</span>
+<a name="line-91"></a>    <span class='hs-varid'>toRational</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>toRational</span> <span class='hs-varop'>.</span> <span class='hs-varid'>getNatural</span>
+<a name="line-92"></a>
+<a name="line-93"></a><span class='hs-keyword'>instance</span> <span class='hs-conid'>Integral</span> <span class='hs-conid'>Natural</span> <span class='hs-keyword'>where</span>
+<a name="line-94"></a>    <span class='hs-varid'>toInteger</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>getNatural</span>
+<a name="line-95"></a>    <span class='hs-conid'>Natural</span> <span class='hs-varid'>a</span> <span class='hs-varop'>`quot`</span> <span class='hs-conid'>Natural</span> <span class='hs-varid'>b</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>Natural</span> <span class='hs-layout'>(</span><span class='hs-varid'>a</span> <span class='hs-varop'>`quot`</span> <span class='hs-varid'>b</span><span class='hs-layout'>)</span>
+<a name="line-96"></a>    <span class='hs-conid'>Natural</span> <span class='hs-varid'>a</span> <span class='hs-varop'>`rem`</span> <span class='hs-conid'>Natural</span> <span class='hs-varid'>b</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>Natural</span> <span class='hs-layout'>(</span><span class='hs-varid'>a</span> <span class='hs-varop'>`rem`</span> <span class='hs-varid'>b</span><span class='hs-layout'>)</span>
+<a name="line-97"></a>    <span class='hs-conid'>Natural</span> <span class='hs-varid'>a</span> <span class='hs-varop'>`div`</span> <span class='hs-conid'>Natural</span> <span class='hs-varid'>b</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>Natural</span> <span class='hs-layout'>(</span><span class='hs-varid'>a</span> <span class='hs-varop'>`div`</span> <span class='hs-varid'>b</span><span class='hs-layout'>)</span>
+<a name="line-98"></a>    <span class='hs-conid'>Natural</span> <span class='hs-varid'>a</span> <span class='hs-varop'>`mod`</span> <span class='hs-conid'>Natural</span> <span class='hs-varid'>b</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>Natural</span> <span class='hs-layout'>(</span><span class='hs-varid'>a</span> <span class='hs-varop'>`mod`</span> <span class='hs-varid'>b</span><span class='hs-layout'>)</span>
+<a name="line-99"></a>    <span class='hs-conid'>Natural</span> <span class='hs-varid'>a</span> <span class='hs-varop'>`quotRem`</span> <span class='hs-conid'>Natural</span> <span class='hs-varid'>b</span> <span class='hs-keyglyph'>=</span> <span class='hs-layout'>(</span><span class='hs-conid'>Natural</span> <span class='hs-varid'>q</span><span class='hs-layout'>,</span><span class='hs-conid'>Natural</span> <span class='hs-varid'>r</span><span class='hs-layout'>)</span> <span class='hs-keyword'>where</span> <span class='hs-keyglyph'>~</span><span class='hs-layout'>(</span><span class='hs-varid'>q</span><span class='hs-layout'>,</span><span class='hs-varid'>r</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>a</span> <span class='hs-varop'>`quotRem`</span> <span class='hs-varid'>b</span>
+<a name="line-100"></a>    <span class='hs-conid'>Natural</span> <span class='hs-varid'>a</span> <span class='hs-varop'>`divMod`</span> <span class='hs-conid'>Natural</span> <span class='hs-varid'>b</span> <span class='hs-keyglyph'>=</span> <span class='hs-layout'>(</span><span class='hs-conid'>Natural</span> <span class='hs-varid'>q</span><span class='hs-layout'>,</span><span class='hs-conid'>Natural</span> <span class='hs-varid'>r</span><span class='hs-layout'>)</span> <span class='hs-keyword'>where</span> <span class='hs-keyglyph'>~</span><span class='hs-layout'>(</span><span class='hs-varid'>q</span><span class='hs-layout'>,</span><span class='hs-varid'>r</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>a</span> <span class='hs-varop'>`divMod`</span> <span class='hs-varid'>b</span>
+<a name="line-101"></a>
+<a name="line-102"></a><span class='hs-keyword'>instance</span> <span class='hs-conid'>Monoid</span> <span class='hs-conid'>Natural</span> <span class='hs-keyword'>where</span>
+<a name="line-103"></a>    <span class='hs-varid'>mempty</span> <span class='hs-keyglyph'>=</span> <span class='hs-num'>0</span>
+<a name="line-104"></a>    <span class='hs-varid'>mappend</span> <span class='hs-keyglyph'>=</span> <span class='hs-layout'>(</span><span class='hs-varop'>+</span><span class='hs-layout'>)</span>
+<a name="line-105"></a>
+<a name="line-106"></a><span class='hs-keyword'>instance</span> <span class='hs-conid'>Multiplicative</span> <span class='hs-conid'>Natural</span> <span class='hs-keyword'>where</span>
+<a name="line-107"></a>    <span class='hs-varid'>one</span> <span class='hs-keyglyph'>=</span> <span class='hs-num'>1</span>
+<a name="line-108"></a>    <span class='hs-varid'>times</span> <span class='hs-keyglyph'>=</span> <span class='hs-layout'>(</span><span class='hs-varop'>*</span><span class='hs-layout'>)</span>
+<a name="line-109"></a>
+<a name="line-110"></a><span class='hs-keyword'>instance</span> <span class='hs-conid'>Ringoid</span> <span class='hs-conid'>Natural</span>
+<a name="line-111"></a><span class='hs-keyword'>instance</span> <span class='hs-conid'>LeftSemiNearRing</span> <span class='hs-conid'>Natural</span>
+<a name="line-112"></a><span class='hs-keyword'>instance</span> <span class='hs-conid'>RightSemiNearRing</span> <span class='hs-conid'>Natural</span>
+<a name="line-113"></a><span class='hs-keyword'>instance</span> <span class='hs-conid'>SemiRing</span> <span class='hs-conid'>Natural</span>
+<a name="line-114"></a>
+<a name="line-115"></a><span class='hs-keyword'>instance</span> <span class='hs-conid'>LeftModule</span> <span class='hs-conid'>Natural</span> <span class='hs-conid'>()</span> <span class='hs-keyword'>where</span> <span class='hs-keyword'>_</span> <span class='hs-varop'>*.</span> <span class='hs-keyword'>_</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>()</span>
+<a name="line-116"></a><span class='hs-keyword'>instance</span> <span class='hs-conid'>RightModule</span> <span class='hs-conid'>Natural</span> <span class='hs-conid'>()</span> <span class='hs-keyword'>where</span> <span class='hs-keyword'>_</span> <span class='hs-varop'>.*</span> <span class='hs-keyword'>_</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>()</span>
+<a name="line-117"></a><span class='hs-keyword'>instance</span> <span class='hs-conid'>Module</span> <span class='hs-conid'>Natural</span> <span class='hs-conid'>()</span>
+<a name="line-118"></a>
+<a name="line-119"></a><span class='hs-comment'>-- idempotent monoids</span>
+<a name="line-120"></a><span class='hs-keyword'>instance</span> <span class='hs-conid'>LeftModule</span> <span class='hs-conid'>Natural</span> <span class='hs-conid'>Any</span> <span class='hs-keyword'>where</span> 
+<a name="line-121"></a>    <span class='hs-num'>0</span> <span class='hs-varop'>*.</span> <span class='hs-keyword'>_</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>mempty</span>
+<a name="line-122"></a>    <span class='hs-keyword'>_</span> <span class='hs-varop'>*.</span> <span class='hs-varid'>m</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>m</span>
+<a name="line-123"></a><span class='hs-keyword'>instance</span> <span class='hs-conid'>RightModule</span> <span class='hs-conid'>Natural</span> <span class='hs-conid'>Any</span> <span class='hs-keyword'>where</span> 
+<a name="line-124"></a>    <span class='hs-keyword'>_</span> <span class='hs-varop'>.*</span> <span class='hs-num'>0</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>mempty</span>
+<a name="line-125"></a>    <span class='hs-varid'>m</span> <span class='hs-varop'>.*</span> <span class='hs-keyword'>_</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>m</span> 
+<a name="line-126"></a><span class='hs-keyword'>instance</span> <span class='hs-conid'>Module</span> <span class='hs-conid'>Natural</span> <span class='hs-conid'>Any</span> 
+<a name="line-127"></a>
+<a name="line-128"></a><span class='hs-keyword'>instance</span> <span class='hs-conid'>LeftModule</span> <span class='hs-conid'>Natural</span> <span class='hs-conid'>All</span> <span class='hs-keyword'>where</span> 
+<a name="line-129"></a>    <span class='hs-num'>0</span> <span class='hs-varop'>*.</span> <span class='hs-keyword'>_</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>mempty</span>
+<a name="line-130"></a>    <span class='hs-keyword'>_</span> <span class='hs-varop'>*.</span> <span class='hs-varid'>m</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>m</span>
+<a name="line-131"></a><span class='hs-keyword'>instance</span> <span class='hs-conid'>RightModule</span> <span class='hs-conid'>Natural</span> <span class='hs-conid'>All</span> <span class='hs-keyword'>where</span> 
+<a name="line-132"></a>    <span class='hs-keyword'>_</span> <span class='hs-varop'>.*</span> <span class='hs-num'>0</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>mempty</span>
+<a name="line-133"></a>    <span class='hs-varid'>m</span> <span class='hs-varop'>.*</span> <span class='hs-keyword'>_</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>m</span>
+<a name="line-134"></a><span class='hs-keyword'>instance</span> <span class='hs-conid'>Module</span> <span class='hs-conid'>Natural</span> <span class='hs-conid'>All</span>
+<a name="line-135"></a>
+<a name="line-136"></a><span class='hs-keyword'>instance</span> <span class='hs-conid'>LeftModule</span> <span class='hs-conid'>Natural</span> <span class='hs-layout'>(</span><span class='hs-conid'>First</span> <span class='hs-varid'>a</span><span class='hs-layout'>)</span> <span class='hs-keyword'>where</span> 
+<a name="line-137"></a>    <span class='hs-num'>0</span> <span class='hs-varop'>*.</span> <span class='hs-keyword'>_</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>mempty</span>
+<a name="line-138"></a>    <span class='hs-keyword'>_</span> <span class='hs-varop'>*.</span> <span class='hs-varid'>m</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>m</span>
+<a name="line-139"></a><span class='hs-keyword'>instance</span> <span class='hs-conid'>RightModule</span> <span class='hs-conid'>Natural</span> <span class='hs-layout'>(</span><span class='hs-conid'>First</span> <span class='hs-varid'>a</span><span class='hs-layout'>)</span> <span class='hs-keyword'>where</span> 
+<a name="line-140"></a>    <span class='hs-keyword'>_</span> <span class='hs-varop'>.*</span> <span class='hs-num'>0</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>mempty</span>
+<a name="line-141"></a>    <span class='hs-varid'>m</span> <span class='hs-varop'>.*</span> <span class='hs-keyword'>_</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>m</span>
+<a name="line-142"></a><span class='hs-keyword'>instance</span> <span class='hs-conid'>Module</span> <span class='hs-conid'>Natural</span> <span class='hs-layout'>(</span><span class='hs-conid'>First</span> <span class='hs-varid'>a</span><span class='hs-layout'>)</span> 
+<a name="line-143"></a>
+<a name="line-144"></a><span class='hs-keyword'>instance</span> <span class='hs-conid'>LeftModule</span> <span class='hs-conid'>Natural</span> <span class='hs-layout'>(</span><span class='hs-conid'>Last</span> <span class='hs-varid'>a</span><span class='hs-layout'>)</span> <span class='hs-keyword'>where</span> 
+<a name="line-145"></a>    <span class='hs-num'>0</span> <span class='hs-varop'>*.</span> <span class='hs-keyword'>_</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>mempty</span>
+<a name="line-146"></a>    <span class='hs-keyword'>_</span> <span class='hs-varop'>*.</span> <span class='hs-varid'>m</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>m</span>
+<a name="line-147"></a><span class='hs-keyword'>instance</span> <span class='hs-conid'>RightModule</span> <span class='hs-conid'>Natural</span> <span class='hs-layout'>(</span><span class='hs-conid'>Last</span> <span class='hs-varid'>a</span><span class='hs-layout'>)</span> <span class='hs-keyword'>where</span> 
+<a name="line-148"></a>    <span class='hs-keyword'>_</span> <span class='hs-varop'>.*</span> <span class='hs-num'>0</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>mempty</span>
+<a name="line-149"></a>    <span class='hs-varid'>m</span> <span class='hs-varop'>.*</span> <span class='hs-keyword'>_</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>m</span>
+<a name="line-150"></a><span class='hs-keyword'>instance</span> <span class='hs-conid'>Module</span> <span class='hs-conid'>Natural</span> <span class='hs-layout'>(</span><span class='hs-conid'>Last</span> <span class='hs-varid'>a</span><span class='hs-layout'>)</span>
+<a name="line-151"></a>
+<a name="line-152"></a><span class='hs-keyword'>instance</span> <span class='hs-conid'>LeftModule</span> <span class='hs-conid'>Natural</span> <span class='hs-conid'>Ordering</span> <span class='hs-keyword'>where</span> 
+<a name="line-153"></a>    <span class='hs-num'>0</span> <span class='hs-varop'>*.</span> <span class='hs-keyword'>_</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>mempty</span>
+<a name="line-154"></a>    <span class='hs-keyword'>_</span> <span class='hs-varop'>*.</span> <span class='hs-varid'>m</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>m</span>
+<a name="line-155"></a><span class='hs-keyword'>instance</span> <span class='hs-conid'>RightModule</span> <span class='hs-conid'>Natural</span> <span class='hs-conid'>Ordering</span> <span class='hs-keyword'>where</span> 
+<a name="line-156"></a>    <span class='hs-keyword'>_</span> <span class='hs-varop'>.*</span> <span class='hs-num'>0</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>mempty</span>
+<a name="line-157"></a>    <span class='hs-varid'>m</span> <span class='hs-varop'>.*</span> <span class='hs-keyword'>_</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>m</span> 
+<a name="line-158"></a><span class='hs-keyword'>instance</span> <span class='hs-conid'>Module</span> <span class='hs-conid'>Natural</span> <span class='hs-conid'>Ordering</span>
+<a name="line-159"></a>
+<a name="line-160"></a><span class='hs-comment'>-- other monoids</span>
+<a name="line-161"></a>
+<a name="line-162"></a><span class='hs-keyword'>instance</span> <span class='hs-conid'>LeftModule</span> <span class='hs-conid'>Natural</span> <span class='hs-keyglyph'>[</span><span class='hs-varid'>a</span><span class='hs-keyglyph'>]</span> <span class='hs-keyword'>where</span> <span class='hs-layout'>(</span><span class='hs-varop'>*.</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>flip</span> <span class='hs-conid'>Monoid</span><span class='hs-varop'>.</span><span class='hs-varid'>replicate</span>
+<a name="line-163"></a><span class='hs-keyword'>instance</span> <span class='hs-conid'>RightModule</span> <span class='hs-conid'>Natural</span> <span class='hs-keyglyph'>[</span><span class='hs-varid'>a</span><span class='hs-keyglyph'>]</span> <span class='hs-keyword'>where</span> <span class='hs-layout'>(</span><span class='hs-varop'>.*</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>Monoid</span><span class='hs-varop'>.</span><span class='hs-varid'>replicate</span>
+<a name="line-164"></a><span class='hs-keyword'>instance</span> <span class='hs-conid'>Module</span> <span class='hs-conid'>Natural</span> <span class='hs-keyglyph'>[</span><span class='hs-varid'>a</span><span class='hs-keyglyph'>]</span>
+<a name="line-165"></a>
+<a name="line-166"></a><span class='hs-keyword'>instance</span> <span class='hs-conid'>Monoid</span> <span class='hs-varid'>m</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>LeftModule</span> <span class='hs-conid'>Natural</span> <span class='hs-layout'>(</span><span class='hs-varid'>a</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-varid'>m</span><span class='hs-layout'>)</span> <span class='hs-keyword'>where</span> <span class='hs-layout'>(</span><span class='hs-varop'>*.</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>flip</span> <span class='hs-conid'>Monoid</span><span class='hs-varop'>.</span><span class='hs-varid'>replicate</span>
+<a name="line-167"></a><span class='hs-keyword'>instance</span> <span class='hs-conid'>Monoid</span> <span class='hs-varid'>m</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>RightModule</span> <span class='hs-conid'>Natural</span> <span class='hs-layout'>(</span><span class='hs-varid'>a</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-varid'>m</span><span class='hs-layout'>)</span> <span class='hs-keyword'>where</span> <span class='hs-layout'>(</span><span class='hs-varop'>.*</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>Monoid</span><span class='hs-varop'>.</span><span class='hs-varid'>replicate</span>
+<a name="line-168"></a><span class='hs-keyword'>instance</span> <span class='hs-conid'>Monoid</span> <span class='hs-varid'>m</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>Module</span> <span class='hs-conid'>Natural</span> <span class='hs-layout'>(</span><span class='hs-varid'>a</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-varid'>m</span><span class='hs-layout'>)</span>
+<a name="line-169"></a>
+<a name="line-170"></a><span class='hs-keyword'>instance</span> <span class='hs-conid'>Num</span> <span class='hs-varid'>a</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>LeftModule</span> <span class='hs-conid'>Natural</span>  <span class='hs-layout'>(</span><span class='hs-conid'>Sum</span> <span class='hs-varid'>a</span><span class='hs-layout'>)</span> <span class='hs-keyword'>where</span> <span class='hs-layout'>(</span><span class='hs-varop'>*.</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>flip</span> <span class='hs-conid'>Monoid</span><span class='hs-varop'>.</span><span class='hs-varid'>replicate</span>
+<a name="line-171"></a><span class='hs-keyword'>instance</span> <span class='hs-conid'>Num</span> <span class='hs-varid'>a</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>RightModule</span> <span class='hs-conid'>Natural</span> <span class='hs-layout'>(</span><span class='hs-conid'>Sum</span> <span class='hs-varid'>a</span><span class='hs-layout'>)</span> <span class='hs-keyword'>where</span> <span class='hs-layout'>(</span><span class='hs-varop'>.*</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>Monoid</span><span class='hs-varop'>.</span><span class='hs-varid'>replicate</span>
+<a name="line-172"></a><span class='hs-keyword'>instance</span> <span class='hs-conid'>Num</span> <span class='hs-varid'>a</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>Module</span> <span class='hs-conid'>Natural</span> <span class='hs-layout'>(</span><span class='hs-conid'>Sum</span> <span class='hs-varid'>a</span><span class='hs-layout'>)</span>
+<a name="line-173"></a>
+<a name="line-174"></a><span class='hs-keyword'>instance</span> <span class='hs-conid'>Num</span> <span class='hs-varid'>a</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>LeftModule</span> <span class='hs-conid'>Natural</span>  <span class='hs-layout'>(</span><span class='hs-conid'>Product</span> <span class='hs-varid'>a</span><span class='hs-layout'>)</span> <span class='hs-keyword'>where</span> <span class='hs-layout'>(</span><span class='hs-varop'>*.</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>flip</span> <span class='hs-layout'>(</span><span class='hs-varop'>.*</span><span class='hs-layout'>)</span>
+<a name="line-175"></a><span class='hs-keyword'>instance</span> <span class='hs-conid'>Num</span> <span class='hs-varid'>a</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>RightModule</span> <span class='hs-conid'>Natural</span> <span class='hs-layout'>(</span><span class='hs-conid'>Product</span> <span class='hs-varid'>a</span><span class='hs-layout'>)</span> <span class='hs-keyword'>where</span> <span class='hs-conid'>Product</span> <span class='hs-varid'>m</span> <span class='hs-varop'>.*</span> <span class='hs-conid'>Natural</span> <span class='hs-varid'>n</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>Product</span> <span class='hs-layout'>(</span><span class='hs-varid'>m</span> <span class='hs-varop'>^</span> <span class='hs-varid'>n</span><span class='hs-layout'>)</span>
+<a name="line-176"></a><span class='hs-keyword'>instance</span> <span class='hs-conid'>Num</span> <span class='hs-varid'>a</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>Module</span> <span class='hs-conid'>Natural</span> <span class='hs-layout'>(</span><span class='hs-conid'>Product</span> <span class='hs-varid'>a</span><span class='hs-layout'>)</span>
+<a name="line-177"></a>
+<a name="line-178"></a><span class='hs-keyword'>instance</span> <span class='hs-conid'>LeftModule</span> <span class='hs-conid'>Natural</span>  <span class='hs-layout'>(</span><span class='hs-conid'>Endo</span> <span class='hs-varid'>a</span><span class='hs-layout'>)</span> <span class='hs-keyword'>where</span> <span class='hs-layout'>(</span><span class='hs-varop'>*.</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>flip</span> <span class='hs-conid'>Monoid</span><span class='hs-varop'>.</span><span class='hs-varid'>replicate</span>
+<a name="line-179"></a><span class='hs-keyword'>instance</span> <span class='hs-conid'>RightModule</span> <span class='hs-conid'>Natural</span> <span class='hs-layout'>(</span><span class='hs-conid'>Endo</span> <span class='hs-varid'>a</span><span class='hs-layout'>)</span> <span class='hs-keyword'>where</span> <span class='hs-layout'>(</span><span class='hs-varop'>.*</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>Monoid</span><span class='hs-varop'>.</span><span class='hs-varid'>replicate</span>
+<a name="line-180"></a><span class='hs-keyword'>instance</span> <span class='hs-conid'>Module</span> <span class='hs-conid'>Natural</span> <span class='hs-layout'>(</span><span class='hs-conid'>Endo</span> <span class='hs-varid'>a</span><span class='hs-layout'>)</span>
+<a name="line-181"></a>
+<a name="line-182"></a><span class='hs-keyword'>instance</span> <span class='hs-conid'>Monoid</span> <span class='hs-varid'>m</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>LeftModule</span>  <span class='hs-conid'>Natural</span> <span class='hs-layout'>(</span><span class='hs-conid'>Dual</span> <span class='hs-varid'>m</span><span class='hs-layout'>)</span> <span class='hs-keyword'>where</span> <span class='hs-layout'>(</span><span class='hs-varop'>*.</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>flip</span> <span class='hs-conid'>Monoid</span><span class='hs-varop'>.</span><span class='hs-varid'>replicate</span>
+<a name="line-183"></a><span class='hs-keyword'>instance</span> <span class='hs-conid'>Monoid</span> <span class='hs-varid'>m</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>RightModule</span> <span class='hs-conid'>Natural</span> <span class='hs-layout'>(</span><span class='hs-conid'>Dual</span> <span class='hs-varid'>m</span><span class='hs-layout'>)</span> <span class='hs-keyword'>where</span> <span class='hs-layout'>(</span><span class='hs-varop'>.*</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>Monoid</span><span class='hs-varop'>.</span><span class='hs-varid'>replicate</span>
+<a name="line-184"></a><span class='hs-keyword'>instance</span> <span class='hs-conid'>Monoid</span> <span class='hs-varid'>m</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>Module</span> <span class='hs-conid'>Natural</span> <span class='hs-layout'>(</span><span class='hs-conid'>Dual</span> <span class='hs-varid'>m</span><span class='hs-layout'>)</span>
+<a name="line-185"></a>
+<a name="line-186"></a><span class='hs-comment'>-- Self</span>
+<a name="line-187"></a><span class='hs-keyword'>instance</span> <span class='hs-conid'>Monoid</span> <span class='hs-varid'>m</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>LeftModule</span>  <span class='hs-conid'>Natural</span> <span class='hs-layout'>(</span><span class='hs-conid'>Self</span> <span class='hs-varid'>m</span><span class='hs-layout'>)</span> <span class='hs-keyword'>where</span> <span class='hs-layout'>(</span><span class='hs-varop'>*.</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>flip</span> <span class='hs-conid'>Monoid</span><span class='hs-varop'>.</span><span class='hs-varid'>replicate</span>
+<a name="line-188"></a><span class='hs-keyword'>instance</span> <span class='hs-conid'>Monoid</span> <span class='hs-varid'>m</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>RightModule</span> <span class='hs-conid'>Natural</span> <span class='hs-layout'>(</span><span class='hs-conid'>Self</span> <span class='hs-varid'>m</span><span class='hs-layout'>)</span> <span class='hs-keyword'>where</span> <span class='hs-layout'>(</span><span class='hs-varop'>.*</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>Monoid</span><span class='hs-varop'>.</span><span class='hs-varid'>replicate</span>
+<a name="line-189"></a><span class='hs-keyword'>instance</span> <span class='hs-conid'>Monoid</span> <span class='hs-varid'>m</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>Module</span> <span class='hs-conid'>Natural</span> <span class='hs-layout'>(</span><span class='hs-conid'>Self</span> <span class='hs-varid'>m</span><span class='hs-layout'>)</span>
+<a name="line-190"></a>
+<a name="line-191"></a><span class='hs-comment'>-- Free Generator</span>
+<a name="line-192"></a><span class='hs-keyword'>instance</span> <span class='hs-conid'>LeftModule</span>  <span class='hs-conid'>Natural</span> <span class='hs-layout'>(</span><span class='hs-conid'>Free</span> <span class='hs-varid'>a</span><span class='hs-layout'>)</span> <span class='hs-keyword'>where</span> <span class='hs-layout'>(</span><span class='hs-varop'>*.</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>flip</span> <span class='hs-conid'>Monoid</span><span class='hs-varop'>.</span><span class='hs-varid'>replicate</span>
+<a name="line-193"></a><span class='hs-keyword'>instance</span> <span class='hs-conid'>RightModule</span> <span class='hs-conid'>Natural</span> <span class='hs-layout'>(</span><span class='hs-conid'>Free</span> <span class='hs-varid'>a</span><span class='hs-layout'>)</span> <span class='hs-keyword'>where</span> <span class='hs-layout'>(</span><span class='hs-varop'>.*</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>Monoid</span><span class='hs-varop'>.</span><span class='hs-varid'>replicate</span>
+<a name="line-194"></a><span class='hs-keyword'>instance</span> <span class='hs-conid'>Module</span> <span class='hs-conid'>Natural</span> <span class='hs-layout'>(</span><span class='hs-conid'>Free</span> <span class='hs-varid'>a</span><span class='hs-layout'>)</span>
+<a name="line-195"></a>
+<a name="line-196"></a><span class='hs-comment'>-- Categorical</span>
+<a name="line-197"></a><span class='hs-keyword'>instance</span> <span class='hs-conid'>Category</span> <span class='hs-varid'>k</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>LeftModule</span> <span class='hs-conid'>Natural</span>  <span class='hs-layout'>(</span><span class='hs-conid'>GEndo</span> <span class='hs-varid'>k</span> <span class='hs-varid'>a</span><span class='hs-layout'>)</span> <span class='hs-keyword'>where</span> <span class='hs-layout'>(</span><span class='hs-varop'>*.</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>flip</span> <span class='hs-conid'>Monoid</span><span class='hs-varop'>.</span><span class='hs-varid'>replicate</span>
+<a name="line-198"></a><span class='hs-keyword'>instance</span> <span class='hs-conid'>Category</span> <span class='hs-varid'>k</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>RightModule</span> <span class='hs-conid'>Natural</span> <span class='hs-layout'>(</span><span class='hs-conid'>GEndo</span> <span class='hs-varid'>k</span> <span class='hs-varid'>a</span><span class='hs-layout'>)</span> <span class='hs-keyword'>where</span> <span class='hs-layout'>(</span><span class='hs-varop'>.*</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>Monoid</span><span class='hs-varop'>.</span><span class='hs-varid'>replicate</span>
+<a name="line-199"></a><span class='hs-keyword'>instance</span> <span class='hs-conid'>Category</span> <span class='hs-varid'>k</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>Module</span> <span class='hs-conid'>Natural</span> <span class='hs-layout'>(</span><span class='hs-conid'>GEndo</span> <span class='hs-varid'>k</span> <span class='hs-varid'>a</span><span class='hs-layout'>)</span>
+<a name="line-200"></a>
+<a name="line-201"></a><span class='hs-keyword'>instance</span> <span class='hs-conid'>Monoid</span> <span class='hs-varid'>m</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>LeftModule</span> <span class='hs-conid'>Natural</span>  <span class='hs-layout'>(</span><span class='hs-conid'>CMonoid</span> <span class='hs-varid'>m</span> <span class='hs-varid'>m</span> <span class='hs-varid'>m</span><span class='hs-layout'>)</span> <span class='hs-keyword'>where</span> <span class='hs-layout'>(</span><span class='hs-varop'>*.</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>flip</span> <span class='hs-conid'>Monoid</span><span class='hs-varop'>.</span><span class='hs-varid'>replicate</span>
+<a name="line-202"></a><span class='hs-keyword'>instance</span> <span class='hs-conid'>Monoid</span> <span class='hs-varid'>m</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>RightModule</span> <span class='hs-conid'>Natural</span> <span class='hs-layout'>(</span><span class='hs-conid'>CMonoid</span> <span class='hs-varid'>m</span> <span class='hs-varid'>m</span> <span class='hs-varid'>m</span><span class='hs-layout'>)</span> <span class='hs-keyword'>where</span> <span class='hs-layout'>(</span><span class='hs-varop'>.*</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>Monoid</span><span class='hs-varop'>.</span><span class='hs-varid'>replicate</span>
+<a name="line-203"></a><span class='hs-keyword'>instance</span> <span class='hs-conid'>Monoid</span> <span class='hs-varid'>m</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>Module</span> <span class='hs-conid'>Natural</span> <span class='hs-layout'>(</span><span class='hs-conid'>CMonoid</span> <span class='hs-varid'>m</span> <span class='hs-varid'>m</span> <span class='hs-varid'>m</span><span class='hs-layout'>)</span>
+<a name="line-204"></a>
+<a name="line-205"></a><span class='hs-comment'>-- Alternative</span>
+<a name="line-206"></a><span class='hs-keyword'>instance</span> <span class='hs-conid'>Applicative</span> <span class='hs-varid'>f</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>LeftModule</span> <span class='hs-conid'>Natural</span>  <span class='hs-layout'>(</span><span class='hs-conid'>Traversal</span> <span class='hs-varid'>f</span><span class='hs-layout'>)</span> <span class='hs-keyword'>where</span> <span class='hs-layout'>(</span><span class='hs-varop'>*.</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>flip</span> <span class='hs-conid'>Monoid</span><span class='hs-varop'>.</span><span class='hs-varid'>replicate</span>
+<a name="line-207"></a><span class='hs-keyword'>instance</span> <span class='hs-conid'>Applicative</span> <span class='hs-varid'>f</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>RightModule</span> <span class='hs-conid'>Natural</span> <span class='hs-layout'>(</span><span class='hs-conid'>Traversal</span> <span class='hs-varid'>f</span><span class='hs-layout'>)</span> <span class='hs-keyword'>where</span> <span class='hs-layout'>(</span><span class='hs-varop'>.*</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>Monoid</span><span class='hs-varop'>.</span><span class='hs-varid'>replicate</span>
+<a name="line-208"></a><span class='hs-keyword'>instance</span> <span class='hs-conid'>Applicative</span> <span class='hs-varid'>f</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>Module</span> <span class='hs-conid'>Natural</span> <span class='hs-layout'>(</span><span class='hs-conid'>Traversal</span> <span class='hs-varid'>f</span><span class='hs-layout'>)</span> 
+<a name="line-209"></a>
+<a name="line-210"></a><span class='hs-keyword'>instance</span> <span class='hs-conid'>Alternative</span> <span class='hs-varid'>f</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>LeftModule</span> <span class='hs-conid'>Natural</span>  <span class='hs-layout'>(</span><span class='hs-conid'>Alt</span> <span class='hs-varid'>f</span> <span class='hs-varid'>a</span><span class='hs-layout'>)</span> <span class='hs-keyword'>where</span> <span class='hs-layout'>(</span><span class='hs-varop'>*.</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>flip</span> <span class='hs-conid'>Monoid</span><span class='hs-varop'>.</span><span class='hs-varid'>replicate</span>
+<a name="line-211"></a><span class='hs-keyword'>instance</span> <span class='hs-conid'>Alternative</span> <span class='hs-varid'>f</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>RightModule</span> <span class='hs-conid'>Natural</span> <span class='hs-layout'>(</span><span class='hs-conid'>Alt</span> <span class='hs-varid'>f</span> <span class='hs-varid'>a</span><span class='hs-layout'>)</span> <span class='hs-keyword'>where</span> <span class='hs-layout'>(</span><span class='hs-varop'>.*</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>Monoid</span><span class='hs-varop'>.</span><span class='hs-varid'>replicate</span>
+<a name="line-212"></a><span class='hs-keyword'>instance</span> <span class='hs-conid'>Alternative</span> <span class='hs-varid'>f</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>Module</span> <span class='hs-conid'>Natural</span> <span class='hs-layout'>(</span><span class='hs-conid'>Alt</span> <span class='hs-varid'>f</span> <span class='hs-varid'>a</span><span class='hs-layout'>)</span> 
+<a name="line-213"></a>
+<a name="line-214"></a><span class='hs-comment'>--instance (Alternative f, Monoid m) =&gt; LeftModule Natural  (App f m) where (*.) = flip Monoid.replicate</span>
+<a name="line-215"></a><span class='hs-comment'>--instance (Alternative f, Monoid m) =&gt; RightModule Natural (App f m) where (.*) = Monoid.replicate</span>
+<a name="line-216"></a><span class='hs-comment'>--instance (Alternative f, Monoid m) =&gt; Module Natural (App f m)  </span>
+<a name="line-217"></a>
+<a name="line-218"></a><span class='hs-comment'>-- Monad</span>
+<a name="line-219"></a><span class='hs-keyword'>instance</span> <span class='hs-conid'>Monad</span> <span class='hs-varid'>f</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>LeftModule</span> <span class='hs-conid'>Natural</span>  <span class='hs-layout'>(</span><span class='hs-conid'>Action</span> <span class='hs-varid'>f</span><span class='hs-layout'>)</span> <span class='hs-keyword'>where</span> <span class='hs-layout'>(</span><span class='hs-varop'>*.</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>flip</span> <span class='hs-conid'>Monoid</span><span class='hs-varop'>.</span><span class='hs-varid'>replicate</span>
+<a name="line-220"></a><span class='hs-keyword'>instance</span> <span class='hs-conid'>Monad</span> <span class='hs-varid'>f</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>RightModule</span> <span class='hs-conid'>Natural</span> <span class='hs-layout'>(</span><span class='hs-conid'>Action</span> <span class='hs-varid'>f</span><span class='hs-layout'>)</span> <span class='hs-keyword'>where</span> <span class='hs-layout'>(</span><span class='hs-varop'>.*</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>Monoid</span><span class='hs-varop'>.</span><span class='hs-varid'>replicate</span>
+<a name="line-221"></a><span class='hs-keyword'>instance</span> <span class='hs-conid'>Monad</span> <span class='hs-varid'>f</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>Module</span> <span class='hs-conid'>Natural</span> <span class='hs-layout'>(</span><span class='hs-conid'>Action</span> <span class='hs-varid'>f</span><span class='hs-layout'>)</span> 
+<a name="line-222"></a>
+<a name="line-223"></a><span class='hs-keyword'>instance</span> <span class='hs-conid'>MonadPlus</span> <span class='hs-varid'>f</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>LeftModule</span> <span class='hs-conid'>Natural</span>  <span class='hs-layout'>(</span><span class='hs-conid'>MonadSum</span> <span class='hs-varid'>f</span> <span class='hs-varid'>a</span><span class='hs-layout'>)</span> <span class='hs-keyword'>where</span> <span class='hs-layout'>(</span><span class='hs-varop'>*.</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>flip</span> <span class='hs-conid'>Monoid</span><span class='hs-varop'>.</span><span class='hs-varid'>replicate</span>
+<a name="line-224"></a><span class='hs-keyword'>instance</span> <span class='hs-conid'>MonadPlus</span> <span class='hs-varid'>f</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>RightModule</span> <span class='hs-conid'>Natural</span> <span class='hs-layout'>(</span><span class='hs-conid'>MonadSum</span> <span class='hs-varid'>f</span> <span class='hs-varid'>a</span><span class='hs-layout'>)</span> <span class='hs-keyword'>where</span> <span class='hs-layout'>(</span><span class='hs-varop'>.*</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>Monoid</span><span class='hs-varop'>.</span><span class='hs-varid'>replicate</span>
+<a name="line-225"></a><span class='hs-keyword'>instance</span> <span class='hs-conid'>MonadPlus</span> <span class='hs-varid'>f</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>Module</span> <span class='hs-conid'>Natural</span> <span class='hs-layout'>(</span><span class='hs-conid'>MonadSum</span> <span class='hs-varid'>f</span> <span class='hs-varid'>a</span><span class='hs-layout'>)</span> 
+<a name="line-226"></a>
+<a name="line-227"></a><span class='hs-comment'>--instance (MonadPlus f, Monoid m) =&gt; LeftModule Natural  (Mon f m) where (*.) = flip Monoid.replicate</span>
+<a name="line-228"></a><span class='hs-comment'>--instance (MonadPlus f, Monoid m)  =&gt; RightModule Natural (Mon f m) where (.*) = Monoid.replicate</span>
+<a name="line-229"></a><span class='hs-comment'>--instance (MonadPlus f, Monoid m) =&gt; Module Natural (Mon f m)  </span>
+<a name="line-230"></a>
+<a name="line-231"></a><span class='hs-comment'>-- Lexical </span>
+<a name="line-232"></a><span class='hs-keyword'>instance</span> <span class='hs-conid'>LeftModule</span> <span class='hs-conid'>Natural</span>  <span class='hs-layout'>(</span><span class='hs-conid'>SourcePosition</span> <span class='hs-varid'>f</span><span class='hs-layout'>)</span> <span class='hs-keyword'>where</span> 
+<a name="line-233"></a>    <span class='hs-num'>0</span> <span class='hs-varop'>*.</span> <span class='hs-keyword'>_</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>mempty</span>
+<a name="line-234"></a>    <span class='hs-varid'>n</span> <span class='hs-varop'>*.</span> <span class='hs-conid'>Columns</span> <span class='hs-varid'>x</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>Columns</span> <span class='hs-layout'>(</span><span class='hs-varid'>fromIntegral</span> <span class='hs-varid'>n</span> <span class='hs-varop'>*</span> <span class='hs-varid'>x</span><span class='hs-layout'>)</span> 
+<a name="line-235"></a>    <span class='hs-varid'>n</span> <span class='hs-varop'>*.</span> <span class='hs-conid'>Lines</span> <span class='hs-varid'>l</span> <span class='hs-varid'>c</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>Lines</span> <span class='hs-layout'>(</span><span class='hs-varid'>fromIntegral</span> <span class='hs-varid'>n</span> <span class='hs-varop'>*</span> <span class='hs-varid'>l</span><span class='hs-layout'>)</span> <span class='hs-varid'>c</span>
+<a name="line-236"></a>    <span class='hs-keyword'>_</span> <span class='hs-varop'>*.</span> <span class='hs-conid'>Pos</span> <span class='hs-varid'>f</span> <span class='hs-varid'>l</span> <span class='hs-varid'>c</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>Pos</span> <span class='hs-varid'>f</span> <span class='hs-varid'>l</span> <span class='hs-varid'>c</span> 
+<a name="line-237"></a>    <span class='hs-varid'>n</span> <span class='hs-varop'>*.</span> <span class='hs-varid'>t</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>Monoid</span><span class='hs-varop'>.</span><span class='hs-varid'>replicate</span> <span class='hs-varid'>t</span> <span class='hs-varid'>n</span> 
+<a name="line-238"></a>
+<a name="line-239"></a><span class='hs-keyword'>instance</span> <span class='hs-conid'>RightModule</span> <span class='hs-conid'>Natural</span> <span class='hs-layout'>(</span><span class='hs-conid'>SourcePosition</span> <span class='hs-varid'>f</span><span class='hs-layout'>)</span> <span class='hs-keyword'>where</span> <span class='hs-layout'>(</span><span class='hs-varop'>.*</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>flip</span> <span class='hs-layout'>(</span><span class='hs-varop'>*.</span><span class='hs-layout'>)</span>
+<a name="line-240"></a><span class='hs-keyword'>instance</span> <span class='hs-conid'>Module</span> <span class='hs-conid'>Natural</span> <span class='hs-layout'>(</span><span class='hs-conid'>SourcePosition</span> <span class='hs-varid'>f</span><span class='hs-layout'>)</span> 
+<a name="line-241"></a>
+<a name="line-242"></a><span class='hs-keyword'>instance</span> <span class='hs-conid'>CharReducer</span> <span class='hs-varid'>m</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>LeftModule</span> <span class='hs-conid'>Natural</span>  <span class='hs-layout'>(</span><span class='hs-conid'>UTF8</span> <span class='hs-varid'>m</span><span class='hs-layout'>)</span> <span class='hs-keyword'>where</span> <span class='hs-layout'>(</span><span class='hs-varop'>*.</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>flip</span> <span class='hs-conid'>Monoid</span><span class='hs-varop'>.</span><span class='hs-varid'>replicate</span>
+<a name="line-243"></a><span class='hs-keyword'>instance</span> <span class='hs-conid'>CharReducer</span> <span class='hs-varid'>m</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>RightModule</span> <span class='hs-conid'>Natural</span> <span class='hs-layout'>(</span><span class='hs-conid'>UTF8</span> <span class='hs-varid'>m</span><span class='hs-layout'>)</span> <span class='hs-keyword'>where</span> <span class='hs-layout'>(</span><span class='hs-varop'>.*</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>Monoid</span><span class='hs-varop'>.</span><span class='hs-varid'>replicate</span>
+<a name="line-244"></a><span class='hs-keyword'>instance</span> <span class='hs-conid'>CharReducer</span> <span class='hs-varid'>m</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>Module</span> <span class='hs-conid'>Natural</span> <span class='hs-layout'>(</span><span class='hs-conid'>UTF8</span> <span class='hs-varid'>m</span><span class='hs-layout'>)</span> 
+<a name="line-245"></a>
+<a name="line-246"></a><span class='hs-keyword'>instance</span> <span class='hs-conid'>Multiplicative</span> <span class='hs-varid'>m</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>LeftModule</span> <span class='hs-conid'>Natural</span> <span class='hs-layout'>(</span><span class='hs-conid'>Log</span> <span class='hs-varid'>m</span><span class='hs-layout'>)</span> <span class='hs-keyword'>where</span> <span class='hs-layout'>(</span><span class='hs-varop'>*.</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>flip</span> <span class='hs-conid'>Monoid</span><span class='hs-varop'>.</span><span class='hs-varid'>replicate</span>
+<a name="line-247"></a><span class='hs-keyword'>instance</span> <span class='hs-conid'>Multiplicative</span> <span class='hs-varid'>m</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>RightModule</span> <span class='hs-conid'>Natural</span> <span class='hs-layout'>(</span><span class='hs-conid'>Log</span> <span class='hs-varid'>m</span><span class='hs-layout'>)</span> <span class='hs-keyword'>where</span> <span class='hs-layout'>(</span><span class='hs-varop'>.*</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>Monoid</span><span class='hs-varop'>.</span><span class='hs-varid'>replicate</span>
+<a name="line-248"></a><span class='hs-keyword'>instance</span> <span class='hs-conid'>Multiplicative</span> <span class='hs-varid'>m</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>Module</span> <span class='hs-conid'>Natural</span> <span class='hs-layout'>(</span><span class='hs-conid'>Log</span> <span class='hs-varid'>m</span><span class='hs-layout'>)</span> 
hunk ./doc/html/monoids/src/Data-Ring-Semi-Natural.html 258
-<a name="line-250"></a><span class='hs-comment'>-- TODO</span>
-<a name="line-251"></a><span class='hs-comment'>--</span>
-<a name="line-252"></a><span class='hs-comment'>-- Control.Monad.*</span>
-<a name="line-253"></a><span class='hs-comment'>-- ParsecT</span>
-<a name="line-254"></a><span class='hs-comment'>-- FingerTree</span>
-<a name="line-255"></a><span class='hs-comment'>-- Int, Integer, Ratio</span>
-<a name="line-256"></a><span class='hs-comment'>-- SourcePosition</span>
-<a name="line-257"></a><span class='hs-comment'>-- Replace Natural here with some other notion of NonNegative a </span>
-<a name="line-258"></a><span class='hs-comment'>-- Words, Lines, Unspaced, Unlined</span>
-<a name="line-259"></a><span class='hs-comment'>-- Union/UnionWith, Map, Set, etc.</span>
-<a name="line-260"></a><span class='hs-comment'>-- Max, Min, MaxPriority, MinPriority idempotent</span>
-<a name="line-261"></a><span class='hs-comment'>-- BoolRing</span>
-<a name="line-262"></a><span class='hs-comment'>-- Seq</span>
+<a name="line-250"></a><span class='hs-cpp'>#ifdef M_CONTAINERS</span>
+<a name="line-251"></a><span class='hs-comment'>-- RLE Seq</span>
+<a name="line-252"></a><span class='hs-keyword'>instance</span> <span class='hs-conid'>Eq</span> <span class='hs-varid'>a</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>LeftModule</span>  <span class='hs-conid'>Natural</span> <span class='hs-layout'>(</span><span class='hs-conid'>RLE</span> <span class='hs-conid'>Seq</span> <span class='hs-varid'>a</span><span class='hs-layout'>)</span> <span class='hs-keyword'>where</span> <span class='hs-layout'>(</span><span class='hs-varop'>*.</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>flip</span> <span class='hs-conid'>Monoid</span><span class='hs-varop'>.</span><span class='hs-varid'>replicate</span>
+<a name="line-253"></a><span class='hs-keyword'>instance</span> <span class='hs-conid'>Eq</span> <span class='hs-varid'>a</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>RightModule</span> <span class='hs-conid'>Natural</span> <span class='hs-layout'>(</span><span class='hs-conid'>RLE</span> <span class='hs-conid'>Seq</span> <span class='hs-varid'>a</span><span class='hs-layout'>)</span> <span class='hs-keyword'>where</span> <span class='hs-layout'>(</span><span class='hs-varop'>.*</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>Monoid</span><span class='hs-varop'>.</span><span class='hs-varid'>replicate</span>
+<a name="line-254"></a><span class='hs-keyword'>instance</span> <span class='hs-conid'>Eq</span> <span class='hs-varid'>a</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>Module</span> <span class='hs-conid'>Natural</span> <span class='hs-layout'>(</span><span class='hs-conid'>RLE</span> <span class='hs-conid'>Seq</span> <span class='hs-varid'>a</span><span class='hs-layout'>)</span>
+<a name="line-255"></a><span class='hs-cpp'>#endif</span>
+<a name="line-256"></a>
+<a name="line-257"></a><span class='hs-cpp'>#ifdef X_OverloadedStrings</span>
+<a name="line-258"></a><span class='hs-comment'>-- FromString</span>
+<a name="line-259"></a><span class='hs-keyword'>instance</span> <span class='hs-conid'>Monoid</span> <span class='hs-varid'>m</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>LeftModule</span>  <span class='hs-conid'>Natural</span> <span class='hs-layout'>(</span><span class='hs-conid'>FromString</span> <span class='hs-varid'>m</span><span class='hs-layout'>)</span> <span class='hs-keyword'>where</span> <span class='hs-layout'>(</span><span class='hs-varop'>*.</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>flip</span> <span class='hs-conid'>Monoid</span><span class='hs-varop'>.</span><span class='hs-varid'>replicate</span>
+<a name="line-260"></a><span class='hs-keyword'>instance</span> <span class='hs-conid'>Monoid</span> <span class='hs-varid'>m</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>RightModule</span> <span class='hs-conid'>Natural</span> <span class='hs-layout'>(</span><span class='hs-conid'>FromString</span> <span class='hs-varid'>m</span><span class='hs-layout'>)</span> <span class='hs-keyword'>where</span> <span class='hs-layout'>(</span><span class='hs-varop'>.*</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>Monoid</span><span class='hs-varop'>.</span><span class='hs-varid'>replicate</span>
+<a name="line-261"></a><span class='hs-keyword'>instance</span> <span class='hs-conid'>Monoid</span> <span class='hs-varid'>m</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>Module</span> <span class='hs-conid'>Natural</span> <span class='hs-layout'>(</span><span class='hs-conid'>FromString</span> <span class='hs-varid'>m</span><span class='hs-layout'>)</span>
+<a name="line-262"></a><span class='hs-cpp'>#endif</span>
+<a name="line-263"></a>
+<a name="line-264"></a><span class='hs-comment'>-- TODO</span>
+<a name="line-265"></a><span class='hs-comment'>--</span>
+<a name="line-266"></a><span class='hs-comment'>-- Control.Monad.*</span>
+<a name="line-267"></a><span class='hs-comment'>-- ParsecT</span>
+<a name="line-268"></a><span class='hs-comment'>-- FingerTree</span>
+<a name="line-269"></a><span class='hs-comment'>-- Int, Integer, Ratio</span>
+<a name="line-270"></a><span class='hs-comment'>-- SourcePosition</span>
+<a name="line-271"></a><span class='hs-comment'>-- Replace Natural here with some other notion of NonNegative a </span>
+<a name="line-272"></a><span class='hs-comment'>-- Words, Lines, Unspaced, Unlined</span>
+<a name="line-273"></a><span class='hs-comment'>-- Union/UnionWith, Map, Set, etc.</span>
+<a name="line-274"></a><span class='hs-comment'>-- Max, Min, MaxPriority, MinPriority idempotent</span>
+<a name="line-275"></a><span class='hs-comment'>-- BoolRing</span>
+<a name="line-276"></a><span class='hs-comment'>-- Seq</span>
hunk ./doc/html/monoids/src/Data-Ring-Semi-Near-Trie.html 11
-<a name="line-3"></a>    <span class='hs-layout'>(</span> <span class='hs-keyword'>module</span> <span class='hs-conid'>Data</span><span class='hs-varop'>.</span><span class='hs-conid'>Ring</span><span class='hs-varop'>.</span><span class='hs-conid'>Semi</span><span class='hs-varop'>.</span><span class='hs-conid'>Near</span>
+<a name="line-3"></a>    <span class='hs-layout'>(</span> <span class='hs-keyword'>module</span> <span class='hs-conid'>Data</span><span class='hs-varop'>.</span><span class='hs-conid'>Ring</span>
hunk ./doc/html/monoids/src/Data-Ring-Semi-Near-Trie.html 18
-<a name="line-10"></a>
-<a name="line-11"></a><span class='hs-keyword'>import</span> <span class='hs-conid'>Data</span><span class='hs-varop'>.</span><span class='hs-conid'>Map</span> <span class='hs-layout'>(</span><span class='hs-conid'>Map</span><span class='hs-layout'>)</span>
-<a name="line-12"></a><span class='hs-keyword'>import</span> <span class='hs-keyword'>qualified</span> <span class='hs-conid'>Data</span><span class='hs-varop'>.</span><span class='hs-conid'>Map</span> <span class='hs-keyword'>as</span> <span class='hs-conid'>Map</span>
-<a name="line-13"></a><span class='hs-comment'>--import Data.Monoid.Multiplicative</span>
-<a name="line-14"></a><span class='hs-comment'>--import Data.Monoid.Reducer</span>
-<a name="line-15"></a><span class='hs-keyword'>import</span> <span class='hs-conid'>Data</span><span class='hs-varop'>.</span><span class='hs-conid'>Monoid</span><span class='hs-varop'>.</span><span class='hs-conid'>Union</span> <span class='hs-varid'>hiding</span> <span class='hs-layout'>(</span><span class='hs-varid'>empty</span><span class='hs-layout'>)</span>
-<a name="line-16"></a><span class='hs-comment'>--import Data.Ring.Module</span>
-<a name="line-17"></a><span class='hs-keyword'>import</span> <span class='hs-conid'>Data</span><span class='hs-varop'>.</span><span class='hs-conid'>Ring</span><span class='hs-varop'>.</span><span class='hs-conid'>Semi</span><span class='hs-varop'>.</span><span class='hs-conid'>Near</span>
-<a name="line-18"></a><span class='hs-keyword'>import</span> <span class='hs-conid'>Prelude</span> <span class='hs-varid'>hiding</span> <span class='hs-layout'>(</span><span class='hs-varid'>null</span><span class='hs-layout'>)</span>
-<a name="line-19"></a>
-<a name="line-20"></a><a name="singleton"></a><span class='hs-definition'>singleton</span> <span class='hs-keyglyph'>::</span> <span class='hs-layout'>(</span><span class='hs-conid'>Ord</span> <span class='hs-varid'>c</span><span class='hs-layout'>,</span> <span class='hs-varid'>c</span> <span class='hs-varop'>`Reducer`</span> <span class='hs-varid'>m</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-varid'>c</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-conid'>Trie</span> <span class='hs-varid'>c</span> <span class='hs-varid'>m</span> 
-<a name="line-21"></a><span class='hs-definition'>singleton</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>unit</span>
-<a name="line-22"></a>
-<a name="line-23"></a><a name="empty"></a><span class='hs-definition'>empty</span> <span class='hs-keyglyph'>::</span> <span class='hs-layout'>(</span><span class='hs-conid'>Ord</span> <span class='hs-varid'>c</span><span class='hs-layout'>,</span> <span class='hs-conid'>Monoid</span> <span class='hs-varid'>m</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>Trie</span> <span class='hs-varid'>c</span> <span class='hs-varid'>m</span>
-<a name="line-24"></a><span class='hs-definition'>empty</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>zero</span>
-<a name="line-25"></a>
-<a name="line-26"></a><a name="null"></a><span class='hs-definition'>null</span> <span class='hs-keyglyph'>::</span> <span class='hs-conid'>Ord</span> <span class='hs-varid'>c</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>Trie</span> <span class='hs-varid'>c</span> <span class='hs-varid'>m</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-conid'>Bool</span>
-<a name="line-27"></a><span class='hs-definition'>null</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>Map</span><span class='hs-varop'>.</span><span class='hs-varid'>null</span> <span class='hs-varop'>.</span> <span class='hs-varid'>getUnionWith</span> <span class='hs-varop'>.</span> <span class='hs-varid'>children</span>
-<a name="line-28"></a>
-<a name="line-29"></a><a name="Trie"></a><span class='hs-keyword'>data</span> <span class='hs-conid'>Trie</span> <span class='hs-varid'>c</span> <span class='hs-varid'>m</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>Trie</span> <span class='hs-layout'>{</span> <span class='hs-varid'>total</span> <span class='hs-keyglyph'>::</span> <span class='hs-varid'>m</span><span class='hs-layout'>,</span> <span class='hs-varid'>label</span> <span class='hs-keyglyph'>::</span> <span class='hs-varid'>m</span><span class='hs-layout'>,</span> <span class='hs-varid'>children</span> <span class='hs-keyglyph'>::</span> <span class='hs-conid'>UnionWith</span> <span class='hs-layout'>(</span><span class='hs-conid'>Map</span> <span class='hs-varid'>c</span><span class='hs-layout'>)</span> <span class='hs-layout'>(</span><span class='hs-conid'>Trie</span> <span class='hs-varid'>c</span> <span class='hs-varid'>m</span><span class='hs-layout'>)</span> <span class='hs-layout'>}</span>
-<a name="line-30"></a>    <span class='hs-keyword'>deriving</span> <span class='hs-layout'>(</span><span class='hs-conid'>Eq</span><span class='hs-layout'>,</span><span class='hs-conid'>Show</span><span class='hs-layout'>)</span>
-<a name="line-31"></a>
-<a name="line-32"></a><span class='hs-keyword'>instance</span> <span class='hs-conid'>Functor</span> <span class='hs-layout'>(</span><span class='hs-conid'>Trie</span> <span class='hs-varid'>c</span><span class='hs-layout'>)</span> <span class='hs-keyword'>where</span>
-<a name="line-33"></a>    <span class='hs-varid'>fmap</span> <span class='hs-varid'>f</span> <span class='hs-layout'>(</span><span class='hs-conid'>Trie</span> <span class='hs-varid'>t</span> <span class='hs-varid'>e</span> <span class='hs-varid'>r</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>Trie</span> <span class='hs-layout'>(</span><span class='hs-varid'>f</span> <span class='hs-varid'>t</span><span class='hs-layout'>)</span> <span class='hs-layout'>(</span><span class='hs-varid'>f</span> <span class='hs-varid'>e</span><span class='hs-layout'>)</span> <span class='hs-layout'>(</span><span class='hs-varid'>fmap</span> <span class='hs-layout'>(</span><span class='hs-varid'>fmap</span> <span class='hs-varid'>f</span><span class='hs-layout'>)</span> <span class='hs-varid'>r</span><span class='hs-layout'>)</span>
+<a name="line-10"></a><span class='hs-keyword'>import</span> <span class='hs-conid'>Data</span><span class='hs-varop'>.</span><span class='hs-conid'>Map</span> <span class='hs-layout'>(</span><span class='hs-conid'>Map</span><span class='hs-layout'>)</span>
+<a name="line-11"></a><span class='hs-keyword'>import</span> <span class='hs-keyword'>qualified</span> <span class='hs-conid'>Data</span><span class='hs-varop'>.</span><span class='hs-conid'>Map</span> <span class='hs-keyword'>as</span> <span class='hs-conid'>Map</span>
+<a name="line-12"></a><span class='hs-keyword'>import</span> <span class='hs-conid'>Data</span><span class='hs-varop'>.</span><span class='hs-conid'>Monoid</span><span class='hs-varop'>.</span><span class='hs-conid'>Union</span> <span class='hs-varid'>hiding</span> <span class='hs-layout'>(</span><span class='hs-varid'>empty</span><span class='hs-layout'>)</span>
+<a name="line-13"></a><span class='hs-keyword'>import</span> <span class='hs-conid'>Data</span><span class='hs-varop'>.</span><span class='hs-conid'>Ring</span>
+<a name="line-14"></a><span class='hs-keyword'>import</span> <span class='hs-conid'>Prelude</span> <span class='hs-varid'>hiding</span> <span class='hs-layout'>(</span><span class='hs-varid'>null</span><span class='hs-layout'>)</span>
+<a name="line-15"></a>
+<a name="line-16"></a><a name="singleton"></a><span class='hs-definition'>singleton</span> <span class='hs-keyglyph'>::</span> <span class='hs-layout'>(</span><span class='hs-conid'>Ord</span> <span class='hs-varid'>c</span><span class='hs-layout'>,</span> <span class='hs-varid'>c</span> <span class='hs-varop'>`Reducer`</span> <span class='hs-varid'>m</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-varid'>c</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-conid'>Trie</span> <span class='hs-varid'>c</span> <span class='hs-varid'>m</span> 
+<a name="line-17"></a><span class='hs-definition'>singleton</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>unit</span>
+<a name="line-18"></a>
+<a name="line-19"></a><a name="empty"></a><span class='hs-definition'>empty</span> <span class='hs-keyglyph'>::</span> <span class='hs-layout'>(</span><span class='hs-conid'>Ord</span> <span class='hs-varid'>c</span><span class='hs-layout'>,</span> <span class='hs-conid'>Monoid</span> <span class='hs-varid'>m</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>Trie</span> <span class='hs-varid'>c</span> <span class='hs-varid'>m</span>
+<a name="line-20"></a><span class='hs-definition'>empty</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>zero</span>
+<a name="line-21"></a>
+<a name="line-22"></a><a name="null"></a><span class='hs-definition'>null</span> <span class='hs-keyglyph'>::</span> <span class='hs-conid'>Ord</span> <span class='hs-varid'>c</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>Trie</span> <span class='hs-varid'>c</span> <span class='hs-varid'>m</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-conid'>Bool</span>
+<a name="line-23"></a><span class='hs-definition'>null</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>Map</span><span class='hs-varop'>.</span><span class='hs-varid'>null</span> <span class='hs-varop'>.</span> <span class='hs-varid'>getUnionWith</span> <span class='hs-varop'>.</span> <span class='hs-varid'>children</span>
+<a name="line-24"></a>
+<a name="line-25"></a><a name="Trie"></a><span class='hs-keyword'>data</span> <span class='hs-conid'>Trie</span> <span class='hs-varid'>c</span> <span class='hs-varid'>m</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>Trie</span> <span class='hs-layout'>{</span> <span class='hs-varid'>total</span> <span class='hs-keyglyph'>::</span> <span class='hs-varid'>m</span><span class='hs-layout'>,</span> <span class='hs-varid'>label</span> <span class='hs-keyglyph'>::</span> <span class='hs-varid'>m</span><span class='hs-layout'>,</span> <span class='hs-varid'>children</span> <span class='hs-keyglyph'>::</span> <span class='hs-conid'>UnionWith</span> <span class='hs-layout'>(</span><span class='hs-conid'>Map</span> <span class='hs-varid'>c</span><span class='hs-layout'>)</span> <span class='hs-layout'>(</span><span class='hs-conid'>Trie</span> <span class='hs-varid'>c</span> <span class='hs-varid'>m</span><span class='hs-layout'>)</span> <span class='hs-layout'>}</span>
+<a name="line-26"></a>    <span class='hs-keyword'>deriving</span> <span class='hs-layout'>(</span><span class='hs-conid'>Eq</span><span class='hs-layout'>,</span><span class='hs-conid'>Show</span><span class='hs-layout'>)</span>
+<a name="line-27"></a>
+<a name="line-28"></a><span class='hs-keyword'>instance</span> <span class='hs-conid'>Functor</span> <span class='hs-layout'>(</span><span class='hs-conid'>Trie</span> <span class='hs-varid'>c</span><span class='hs-layout'>)</span> <span class='hs-keyword'>where</span>
+<a name="line-29"></a>    <span class='hs-varid'>fmap</span> <span class='hs-varid'>f</span> <span class='hs-layout'>(</span><span class='hs-conid'>Trie</span> <span class='hs-varid'>t</span> <span class='hs-varid'>e</span> <span class='hs-varid'>r</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>Trie</span> <span class='hs-layout'>(</span><span class='hs-varid'>f</span> <span class='hs-varid'>t</span><span class='hs-layout'>)</span> <span class='hs-layout'>(</span><span class='hs-varid'>f</span> <span class='hs-varid'>e</span><span class='hs-layout'>)</span> <span class='hs-layout'>(</span><span class='hs-varid'>fmap</span> <span class='hs-layout'>(</span><span class='hs-varid'>fmap</span> <span class='hs-varid'>f</span><span class='hs-layout'>)</span> <span class='hs-varid'>r</span><span class='hs-layout'>)</span>
+<a name="line-30"></a>
+<a name="line-31"></a><span class='hs-keyword'>instance</span> <span class='hs-layout'>(</span><span class='hs-conid'>Ord</span> <span class='hs-varid'>c</span><span class='hs-layout'>,</span> <span class='hs-conid'>Monoid</span> <span class='hs-varid'>m</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>Monoid</span> <span class='hs-layout'>(</span><span class='hs-conid'>Trie</span> <span class='hs-varid'>c</span> <span class='hs-varid'>m</span><span class='hs-layout'>)</span> <span class='hs-keyword'>where</span>
+<a name="line-32"></a>    <span class='hs-varid'>mempty</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>Trie</span> <span class='hs-varid'>mempty</span> <span class='hs-varid'>mempty</span> <span class='hs-varid'>mempty</span>
+<a name="line-33"></a>    <span class='hs-conid'>Trie</span> <span class='hs-varid'>x</span> <span class='hs-varid'>y</span> <span class='hs-varid'>z</span> <span class='hs-varop'>`mappend`</span> <span class='hs-conid'>Trie</span> <span class='hs-varid'>x'</span> <span class='hs-varid'>y'</span> <span class='hs-varid'>z'</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>Trie</span> <span class='hs-layout'>(</span><span class='hs-varid'>x</span> <span class='hs-varop'>`mappend`</span> <span class='hs-varid'>x'</span><span class='hs-layout'>)</span> <span class='hs-layout'>(</span><span class='hs-varid'>y</span> <span class='hs-varop'>`mappend`</span> <span class='hs-varid'>y'</span><span class='hs-layout'>)</span> <span class='hs-layout'>(</span><span class='hs-varid'>z</span> <span class='hs-varop'>`mappend`</span> <span class='hs-varid'>z'</span><span class='hs-layout'>)</span>
hunk ./doc/html/monoids/src/Data-Ring-Semi-Near-Trie.html 43
-<a name="line-35"></a><span class='hs-keyword'>instance</span> <span class='hs-layout'>(</span><span class='hs-conid'>Ord</span> <span class='hs-varid'>c</span><span class='hs-layout'>,</span> <span class='hs-conid'>Monoid</span> <span class='hs-varid'>m</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>Monoid</span> <span class='hs-layout'>(</span><span class='hs-conid'>Trie</span> <span class='hs-varid'>c</span> <span class='hs-varid'>m</span><span class='hs-layout'>)</span> <span class='hs-keyword'>where</span>
-<a name="line-36"></a>    <span class='hs-varid'>mempty</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>Trie</span> <span class='hs-varid'>mempty</span> <span class='hs-varid'>mempty</span> <span class='hs-varid'>mempty</span>
-<a name="line-37"></a>    <span class='hs-conid'>Trie</span> <span class='hs-varid'>x</span> <span class='hs-varid'>y</span> <span class='hs-varid'>z</span> <span class='hs-varop'>`mappend`</span> <span class='hs-conid'>Trie</span> <span class='hs-varid'>x'</span> <span class='hs-varid'>y'</span> <span class='hs-varid'>z'</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>Trie</span> <span class='hs-layout'>(</span><span class='hs-varid'>x</span> <span class='hs-varop'>`mappend`</span> <span class='hs-varid'>x'</span><span class='hs-layout'>)</span> <span class='hs-layout'>(</span><span class='hs-varid'>y</span> <span class='hs-varop'>`mappend`</span> <span class='hs-varid'>y'</span><span class='hs-layout'>)</span> <span class='hs-layout'>(</span><span class='hs-varid'>z</span> <span class='hs-varop'>`mappend`</span> <span class='hs-varid'>z'</span><span class='hs-layout'>)</span>
-<a name="line-38"></a>
-<a name="line-39"></a><span class='hs-keyword'>instance</span> <span class='hs-layout'>(</span><span class='hs-conid'>Ord</span> <span class='hs-varid'>c</span><span class='hs-layout'>,</span> <span class='hs-varid'>c</span> <span class='hs-varop'>`Reducer`</span> <span class='hs-varid'>m</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>Reducer</span> <span class='hs-varid'>c</span> <span class='hs-layout'>(</span><span class='hs-conid'>Trie</span> <span class='hs-varid'>c</span> <span class='hs-varid'>m</span><span class='hs-layout'>)</span> <span class='hs-keyword'>where</span>
-<a name="line-40"></a>    <span class='hs-varid'>unit</span> <span class='hs-varid'>c</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>Trie</span> <span class='hs-varid'>r</span> <span class='hs-varid'>zero</span> <span class='hs-varop'>.</span> <span class='hs-conid'>UnionWith</span> <span class='hs-varop'>$</span> <span class='hs-varid'>flip</span> <span class='hs-conid'>Map</span><span class='hs-varop'>.</span><span class='hs-varid'>singleton</span> <span class='hs-layout'>(</span><span class='hs-conid'>Trie</span> <span class='hs-varid'>r</span> <span class='hs-varid'>r</span> <span class='hs-varid'>zero</span><span class='hs-layout'>)</span> <span class='hs-varid'>c</span> <span class='hs-keyword'>where</span> <span class='hs-varid'>r</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>unit</span> <span class='hs-varid'>c</span>
-<a name="line-41"></a>
-<a name="line-42"></a><span class='hs-comment'>{-
-<a name="line-43"></a>instance (Ord c, Eq r, RightSemiNearRing r) =&gt; Multiplicative (Trie c r) where
-<a name="line-44"></a>    one = Trie one one zero
-<a name="line-45"></a>    Trie t e r `times` rhs@(Trie t' e' r') = 
-<a name="line-46"></a>        Trie (t `times` t') (e `times` e') (r .* rhs `plus` lhs *. r') where
-<a name="line-47"></a>            lhs = Trie e e zero `asTypeOf` rhs
-<a name="line-48"></a>
-<a name="line-49"></a>instance (Ord c, Eq r, RightSemiNearRing r) =&gt; RightSemiNearRing (Trie c r)
-<a name="line-50"></a>
-<a name="line-51"></a>toList :: (Ord c, c `Reducer` [c]) =&gt; Trie c m -&gt; [[c]]
-<a name="line-52"></a>toList = fmap merge . Map.assocs . getUnionWith . children where
-<a name="line-53"></a>    merge (k,t) = k `times` toList t
-<a name="line-54"></a>-}</span>
+<a name="line-35"></a><span class='hs-keyword'>instance</span> <span class='hs-layout'>(</span><span class='hs-conid'>Ord</span> <span class='hs-varid'>c</span><span class='hs-layout'>,</span> <span class='hs-varid'>c</span> <span class='hs-varop'>`Reducer`</span> <span class='hs-varid'>m</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>Reducer</span> <span class='hs-varid'>c</span> <span class='hs-layout'>(</span><span class='hs-conid'>Trie</span> <span class='hs-varid'>c</span> <span class='hs-varid'>m</span><span class='hs-layout'>)</span> <span class='hs-keyword'>where</span>
+<a name="line-36"></a>    <span class='hs-varid'>unit</span> <span class='hs-varid'>c</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>Trie</span> <span class='hs-varid'>r</span> <span class='hs-varid'>zero</span> <span class='hs-varop'>.</span> <span class='hs-conid'>UnionWith</span> <span class='hs-varop'>$</span> <span class='hs-varid'>flip</span> <span class='hs-conid'>Map</span><span class='hs-varop'>.</span><span class='hs-varid'>singleton</span> <span class='hs-layout'>(</span><span class='hs-conid'>Trie</span> <span class='hs-varid'>r</span> <span class='hs-varid'>r</span> <span class='hs-varid'>zero</span><span class='hs-layout'>)</span> <span class='hs-varid'>c</span> <span class='hs-keyword'>where</span> <span class='hs-varid'>r</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>unit</span> <span class='hs-varid'>c</span>
+<a name="line-37"></a>
+<a name="line-38"></a><span class='hs-comment'>{-
+<a name="line-39"></a>instance (Ord c, Eq r, RightSemiNearRing r) =&gt; Multiplicative (Trie c r) where
+<a name="line-40"></a>    one = Trie one one zero
+<a name="line-41"></a>    Trie t e r `times` rhs@(Trie t' e' r') = 
+<a name="line-42"></a>        Trie (t `times` t') (e `times` e') (r .* rhs `plus` lhs *. r') where
+<a name="line-43"></a>            lhs = Trie e e zero `asTypeOf` rhs
+<a name="line-44"></a>
+<a name="line-45"></a>instance (Ord c, Eq r, RightSemiNearRing r) =&gt; RightSemiNearRing (Trie c r)
+<a name="line-46"></a>
+<a name="line-47"></a>toList :: (Ord c, c `Reducer` [c]) =&gt; Trie c m -&gt; [[c]]
+<a name="line-48"></a>toList = fmap merge . Map.assocs . getUnionWith . children where
+<a name="line-49"></a>    merge (k,t) = k `times` toList t
+<a name="line-50"></a>-}</span>
hunk ./doc/html/monoids/src/Data-Ring-Semi-Ord.html 23
-<a name="line-15"></a>    <span class='hs-layout'>(</span> <span class='hs-keyword'>module</span> <span class='hs-conid'>Data</span><span class='hs-varop'>.</span><span class='hs-conid'>Ring</span><span class='hs-varop'>.</span><span class='hs-conid'>Semi</span>
+<a name="line-15"></a>    <span class='hs-layout'>(</span> <span class='hs-keyword'>module</span> <span class='hs-conid'>Data</span><span class='hs-varop'>.</span><span class='hs-conid'>Ring</span>
hunk ./doc/html/monoids/src/Data-Ring-Semi-Ord.html 28
-<a name="line-20"></a><span class='hs-keyword'>import</span> <span class='hs-conid'>Test</span><span class='hs-varop'>.</span><span class='hs-conid'>QuickCheck</span>
-<a name="line-21"></a><span class='hs-comment'>-- import Control.Applicative</span>
-<a name="line-22"></a><span class='hs-keyword'>import</span> <span class='hs-conid'>Control</span><span class='hs-varop'>.</span><span class='hs-conid'>Functor</span><span class='hs-varop'>.</span><span class='hs-conid'>Pointed</span>
-<a name="line-23"></a><span class='hs-keyword'>import</span> <span class='hs-conid'>Data</span><span class='hs-varop'>.</span><span class='hs-conid'>Ring</span><span class='hs-varop'>.</span><span class='hs-conid'>Semi</span>
-<a name="line-24"></a><span class='hs-keyword'>import</span> <span class='hs-conid'>Data</span><span class='hs-varop'>.</span><span class='hs-conid'>Monoid</span><span class='hs-varop'>.</span><span class='hs-conid'>Ord</span>
-<a name="line-25"></a><span class='hs-keyword'>import</span> <span class='hs-conid'>Data</span><span class='hs-varop'>.</span><span class='hs-conid'>Monoid</span><span class='hs-varop'>.</span><span class='hs-conid'>Reducer</span>
-<a name="line-26"></a>
-<a name="line-27"></a><a name="Order"></a><span class='hs-comment'>-- | A 'SemiRing' using a type's built-in Bounded instance.</span>
-<a name="line-28"></a><a name="Order"></a><span class='hs-keyword'>newtype</span> <span class='hs-conid'>Order</span> <span class='hs-varid'>a</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>Order</span> <span class='hs-layout'>{</span> <span class='hs-varid'>getOrder</span> <span class='hs-keyglyph'>::</span> <span class='hs-varid'>a</span> <span class='hs-layout'>}</span> <span class='hs-keyword'>deriving</span> <span class='hs-layout'>(</span><span class='hs-conid'>Eq</span><span class='hs-layout'>,</span><span class='hs-conid'>Ord</span><span class='hs-layout'>,</span><span class='hs-conid'>Read</span><span class='hs-layout'>,</span><span class='hs-conid'>Show</span><span class='hs-layout'>,</span><span class='hs-conid'>Bounded</span><span class='hs-layout'>,</span><span class='hs-conid'>Arbitrary</span><span class='hs-layout'>,</span><span class='hs-conid'>CoArbitrary</span><span class='hs-layout'>)</span>
+<a name="line-20"></a><span class='hs-comment'>-- import Control.Applicative</span>
+<a name="line-21"></a><span class='hs-keyword'>import</span> <span class='hs-conid'>Control</span><span class='hs-varop'>.</span><span class='hs-conid'>Functor</span><span class='hs-varop'>.</span><span class='hs-conid'>Pointed</span>
+<a name="line-22"></a><span class='hs-keyword'>import</span> <span class='hs-conid'>Data</span><span class='hs-varop'>.</span><span class='hs-conid'>Ring</span>
+<a name="line-23"></a><span class='hs-keyword'>import</span> <span class='hs-conid'>Data</span><span class='hs-varop'>.</span><span class='hs-conid'>Monoid</span><span class='hs-varop'>.</span><span class='hs-conid'>Ord</span>
+<a name="line-24"></a><span class='hs-keyword'>import</span> <span class='hs-conid'>Data</span><span class='hs-varop'>.</span><span class='hs-conid'>Monoid</span><span class='hs-varop'>.</span><span class='hs-conid'>Reducer</span>
+<a name="line-25"></a>
+<a name="line-26"></a><span class='hs-cpp'>#ifdef M_QUICKCHECK</span>
+<a name="line-27"></a><span class='hs-keyword'>import</span> <span class='hs-conid'>Test</span><span class='hs-varop'>.</span><span class='hs-conid'>QuickCheck</span>
+<a name="line-28"></a><span class='hs-cpp'>#endif</span>
hunk ./doc/html/monoids/src/Data-Ring-Semi-Ord.html 38
-<a name="line-30"></a><span class='hs-keyword'>instance</span> <span class='hs-layout'>(</span><span class='hs-conid'>Bounded</span> <span class='hs-varid'>a</span><span class='hs-layout'>,</span> <span class='hs-conid'>Ord</span> <span class='hs-varid'>a</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>Monoid</span> <span class='hs-layout'>(</span><span class='hs-conid'>Order</span> <span class='hs-varid'>a</span><span class='hs-layout'>)</span> <span class='hs-keyword'>where</span>
-<a name="line-31"></a>    <span class='hs-varid'>mappend</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>max</span>
-<a name="line-32"></a>    <span class='hs-varid'>mempty</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>minBound</span>
-<a name="line-33"></a>
-<a name="line-34"></a><span class='hs-keyword'>instance</span> <span class='hs-layout'>(</span><span class='hs-conid'>Bounded</span> <span class='hs-varid'>a</span><span class='hs-layout'>,</span> <span class='hs-conid'>Ord</span> <span class='hs-varid'>a</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>Multiplicative</span> <span class='hs-layout'>(</span><span class='hs-conid'>Order</span> <span class='hs-varid'>a</span><span class='hs-layout'>)</span> <span class='hs-keyword'>where</span>
-<a name="line-35"></a>    <span class='hs-varid'>times</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>min</span>
-<a name="line-36"></a>    <span class='hs-varid'>one</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>maxBound</span>
-<a name="line-37"></a>    
-<a name="line-38"></a><span class='hs-keyword'>instance</span> <span class='hs-layout'>(</span><span class='hs-conid'>Bounded</span> <span class='hs-varid'>a</span><span class='hs-layout'>,</span> <span class='hs-conid'>Ord</span> <span class='hs-varid'>a</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>Ringoid</span> <span class='hs-layout'>(</span><span class='hs-conid'>Order</span> <span class='hs-varid'>a</span><span class='hs-layout'>)</span>
-<a name="line-39"></a><span class='hs-keyword'>instance</span> <span class='hs-layout'>(</span><span class='hs-conid'>Bounded</span> <span class='hs-varid'>a</span><span class='hs-layout'>,</span> <span class='hs-conid'>Ord</span> <span class='hs-varid'>a</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>RightSemiNearRing</span> <span class='hs-layout'>(</span><span class='hs-conid'>Order</span> <span class='hs-varid'>a</span><span class='hs-layout'>)</span>
-<a name="line-40"></a><span class='hs-keyword'>instance</span> <span class='hs-layout'>(</span><span class='hs-conid'>Bounded</span> <span class='hs-varid'>a</span><span class='hs-layout'>,</span> <span class='hs-conid'>Ord</span> <span class='hs-varid'>a</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>LeftSemiNearRing</span> <span class='hs-layout'>(</span><span class='hs-conid'>Order</span> <span class='hs-varid'>a</span><span class='hs-layout'>)</span>
-<a name="line-41"></a><span class='hs-keyword'>instance</span> <span class='hs-layout'>(</span><span class='hs-conid'>Bounded</span> <span class='hs-varid'>a</span><span class='hs-layout'>,</span> <span class='hs-conid'>Ord</span> <span class='hs-varid'>a</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>SemiRing</span> <span class='hs-layout'>(</span><span class='hs-conid'>Order</span> <span class='hs-varid'>a</span><span class='hs-layout'>)</span>
-<a name="line-42"></a><span class='hs-keyword'>instance</span> <span class='hs-layout'>(</span><span class='hs-conid'>Bounded</span> <span class='hs-varid'>a</span><span class='hs-layout'>,</span> <span class='hs-conid'>Ord</span> <span class='hs-varid'>a</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>Reducer</span> <span class='hs-varid'>a</span> <span class='hs-layout'>(</span><span class='hs-conid'>Order</span> <span class='hs-varid'>a</span><span class='hs-layout'>)</span> <span class='hs-keyword'>where</span>
-<a name="line-43"></a>    <span class='hs-varid'>unit</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>Order</span>
-<a name="line-44"></a>
-<a name="line-45"></a><span class='hs-keyword'>instance</span> <span class='hs-conid'>Functor</span> <span class='hs-conid'>Order</span> <span class='hs-keyword'>where</span>
-<a name="line-46"></a>    <span class='hs-varid'>fmap</span> <span class='hs-varid'>f</span> <span class='hs-layout'>(</span><span class='hs-conid'>Order</span> <span class='hs-varid'>a</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>Order</span> <span class='hs-layout'>(</span><span class='hs-varid'>f</span> <span class='hs-varid'>a</span><span class='hs-layout'>)</span>
-<a name="line-47"></a>
-<a name="line-48"></a><span class='hs-keyword'>instance</span> <span class='hs-conid'>Pointed</span> <span class='hs-conid'>Order</span> <span class='hs-keyword'>where</span>
-<a name="line-49"></a>    <span class='hs-varid'>point</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>Order</span>
-<a name="line-50"></a>
-<a name="line-51"></a><span class='hs-keyword'>instance</span> <span class='hs-conid'>Copointed</span> <span class='hs-conid'>Order</span> <span class='hs-keyword'>where</span>
-<a name="line-52"></a>    <span class='hs-varid'>extract</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>getOrder</span>
-<a name="line-53"></a>
-<a name="line-54"></a><a name="Priority"></a><span class='hs-comment'>-- | A 'SemiRing' which adds 'minBound' and 'maxBound' to a pre-existing type.</span>
-<a name="line-55"></a><a name="Priority"></a><span class='hs-keyword'>data</span> <span class='hs-conid'>Priority</span> <span class='hs-varid'>a</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>MinBound</span> <span class='hs-keyglyph'>|</span> <span class='hs-conid'>Priority</span> <span class='hs-varid'>a</span> <span class='hs-keyglyph'>|</span> <span class='hs-conid'>MaxBound</span> <span class='hs-keyword'>deriving</span> <span class='hs-layout'>(</span><span class='hs-conid'>Eq</span><span class='hs-layout'>,</span><span class='hs-conid'>Read</span><span class='hs-layout'>,</span><span class='hs-conid'>Show</span><span class='hs-layout'>)</span>
-<a name="line-56"></a>
-<a name="line-57"></a><span class='hs-keyword'>instance</span> <span class='hs-conid'>Bounded</span> <span class='hs-layout'>(</span><span class='hs-conid'>Priority</span> <span class='hs-varid'>a</span><span class='hs-layout'>)</span> <span class='hs-keyword'>where</span>
-<a name="line-58"></a>    <span class='hs-varid'>minBound</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>MinBound</span>
-<a name="line-59"></a>    <span class='hs-varid'>maxBound</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>MaxBound</span>
+<a name="line-30"></a><a name="Order"></a><span class='hs-comment'>-- | A 'SemiRing' using a type's built-in Bounded instance.</span>
+<a name="line-31"></a><a name="Order"></a><span class='hs-keyword'>newtype</span> <span class='hs-conid'>Order</span> <span class='hs-varid'>a</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>Order</span> <span class='hs-layout'>{</span> <span class='hs-varid'>getOrder</span> <span class='hs-keyglyph'>::</span> <span class='hs-varid'>a</span> <span class='hs-layout'>}</span> <span class='hs-keyword'>deriving</span> 
+<a name="line-32"></a>    <span class='hs-layout'>(</span> <span class='hs-conid'>Eq</span>
+<a name="line-33"></a>    <span class='hs-layout'>,</span> <span class='hs-conid'>Ord</span>
+<a name="line-34"></a>    <span class='hs-layout'>,</span> <span class='hs-conid'>Read</span>
+<a name="line-35"></a>    <span class='hs-layout'>,</span> <span class='hs-conid'>Show</span>
+<a name="line-36"></a>    <span class='hs-layout'>,</span> <span class='hs-conid'>Bounded</span>
+<a name="line-37"></a><span class='hs-cpp'>#ifdef M_QUICKCHECK</span>
+<a name="line-38"></a>    <span class='hs-layout'>,</span> <span class='hs-conid'>Arbitrary</span>
+<a name="line-39"></a>    <span class='hs-layout'>,</span> <span class='hs-conid'>CoArbitrary</span>
+<a name="line-40"></a><span class='hs-cpp'>#endif</span>
+<a name="line-41"></a>    <span class='hs-layout'>)</span>
+<a name="line-42"></a>
+<a name="line-43"></a><span class='hs-keyword'>instance</span> <span class='hs-layout'>(</span><span class='hs-conid'>Bounded</span> <span class='hs-varid'>a</span><span class='hs-layout'>,</span> <span class='hs-conid'>Ord</span> <span class='hs-varid'>a</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>Monoid</span> <span class='hs-layout'>(</span><span class='hs-conid'>Order</span> <span class='hs-varid'>a</span><span class='hs-layout'>)</span> <span class='hs-keyword'>where</span>
+<a name="line-44"></a>    <span class='hs-varid'>mappend</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>max</span>
+<a name="line-45"></a>    <span class='hs-varid'>mempty</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>minBound</span>
+<a name="line-46"></a>
+<a name="line-47"></a><span class='hs-keyword'>instance</span> <span class='hs-layout'>(</span><span class='hs-conid'>Bounded</span> <span class='hs-varid'>a</span><span class='hs-layout'>,</span> <span class='hs-conid'>Ord</span> <span class='hs-varid'>a</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>Multiplicative</span> <span class='hs-layout'>(</span><span class='hs-conid'>Order</span> <span class='hs-varid'>a</span><span class='hs-layout'>)</span> <span class='hs-keyword'>where</span>
+<a name="line-48"></a>    <span class='hs-varid'>times</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>min</span>
+<a name="line-49"></a>    <span class='hs-varid'>one</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>maxBound</span>
+<a name="line-50"></a>    
+<a name="line-51"></a><span class='hs-keyword'>instance</span> <span class='hs-layout'>(</span><span class='hs-conid'>Bounded</span> <span class='hs-varid'>a</span><span class='hs-layout'>,</span> <span class='hs-conid'>Ord</span> <span class='hs-varid'>a</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>Ringoid</span> <span class='hs-layout'>(</span><span class='hs-conid'>Order</span> <span class='hs-varid'>a</span><span class='hs-layout'>)</span>
+<a name="line-52"></a><span class='hs-keyword'>instance</span> <span class='hs-layout'>(</span><span class='hs-conid'>Bounded</span> <span class='hs-varid'>a</span><span class='hs-layout'>,</span> <span class='hs-conid'>Ord</span> <span class='hs-varid'>a</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>RightSemiNearRing</span> <span class='hs-layout'>(</span><span class='hs-conid'>Order</span> <span class='hs-varid'>a</span><span class='hs-layout'>)</span>
+<a name="line-53"></a><span class='hs-keyword'>instance</span> <span class='hs-layout'>(</span><span class='hs-conid'>Bounded</span> <span class='hs-varid'>a</span><span class='hs-layout'>,</span> <span class='hs-conid'>Ord</span> <span class='hs-varid'>a</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>LeftSemiNearRing</span> <span class='hs-layout'>(</span><span class='hs-conid'>Order</span> <span class='hs-varid'>a</span><span class='hs-layout'>)</span>
+<a name="line-54"></a><span class='hs-keyword'>instance</span> <span class='hs-layout'>(</span><span class='hs-conid'>Bounded</span> <span class='hs-varid'>a</span><span class='hs-layout'>,</span> <span class='hs-conid'>Ord</span> <span class='hs-varid'>a</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>SemiRing</span> <span class='hs-layout'>(</span><span class='hs-conid'>Order</span> <span class='hs-varid'>a</span><span class='hs-layout'>)</span>
+<a name="line-55"></a><span class='hs-keyword'>instance</span> <span class='hs-layout'>(</span><span class='hs-conid'>Bounded</span> <span class='hs-varid'>a</span><span class='hs-layout'>,</span> <span class='hs-conid'>Ord</span> <span class='hs-varid'>a</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>Reducer</span> <span class='hs-varid'>a</span> <span class='hs-layout'>(</span><span class='hs-conid'>Order</span> <span class='hs-varid'>a</span><span class='hs-layout'>)</span> <span class='hs-keyword'>where</span>
+<a name="line-56"></a>    <span class='hs-varid'>unit</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>Order</span>
+<a name="line-57"></a>
+<a name="line-58"></a><span class='hs-keyword'>instance</span> <span class='hs-conid'>Functor</span> <span class='hs-conid'>Order</span> <span class='hs-keyword'>where</span>
+<a name="line-59"></a>    <span class='hs-varid'>fmap</span> <span class='hs-varid'>f</span> <span class='hs-layout'>(</span><span class='hs-conid'>Order</span> <span class='hs-varid'>a</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>Order</span> <span class='hs-layout'>(</span><span class='hs-varid'>f</span> <span class='hs-varid'>a</span><span class='hs-layout'>)</span>
hunk ./doc/html/monoids/src/Data-Ring-Semi-Ord.html 69
-<a name="line-61"></a><span class='hs-keyword'>instance</span> <span class='hs-conid'>Ord</span> <span class='hs-varid'>a</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>Ord</span> <span class='hs-layout'>(</span><span class='hs-conid'>Priority</span> <span class='hs-varid'>a</span><span class='hs-layout'>)</span> <span class='hs-keyword'>where</span>
-<a name="line-62"></a>  <span class='hs-conid'>MinBound</span>   <span class='hs-varop'>&lt;=</span> <span class='hs-keyword'>_</span>         <span class='hs-keyglyph'>=</span> <span class='hs-conid'>True</span>
-<a name="line-63"></a>  <span class='hs-conid'>Priority</span> <span class='hs-keyword'>_</span> <span class='hs-varop'>&lt;=</span> <span class='hs-conid'>MinBound</span>  <span class='hs-keyglyph'>=</span> <span class='hs-conid'>False</span>
-<a name="line-64"></a>  <span class='hs-conid'>Priority</span> <span class='hs-varid'>a</span> <span class='hs-varop'>&lt;=</span> <span class='hs-conid'>Priority</span> <span class='hs-varid'>b</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>a</span> <span class='hs-varop'>&lt;=</span> <span class='hs-varid'>b</span>
-<a name="line-65"></a>  <span class='hs-conid'>Priority</span> <span class='hs-keyword'>_</span> <span class='hs-varop'>&lt;=</span> <span class='hs-conid'>MaxBound</span>  <span class='hs-keyglyph'>=</span> <span class='hs-conid'>True</span>
-<a name="line-66"></a>  <span class='hs-conid'>MaxBound</span>   <span class='hs-varop'>&lt;=</span> <span class='hs-conid'>MaxBound</span>  <span class='hs-keyglyph'>=</span> <span class='hs-conid'>True</span>
-<a name="line-67"></a>  <span class='hs-conid'>MaxBound</span>   <span class='hs-varop'>&lt;=</span> <span class='hs-keyword'>_</span>         <span class='hs-keyglyph'>=</span> <span class='hs-conid'>False</span>
-<a name="line-68"></a>
-<a name="line-69"></a>  <span class='hs-conid'>MinBound</span>   <span class='hs-varop'>`min`</span> <span class='hs-keyword'>_</span>          <span class='hs-keyglyph'>=</span> <span class='hs-conid'>MinBound</span>
-<a name="line-70"></a>  <span class='hs-keyword'>_</span>          <span class='hs-varop'>`min`</span> <span class='hs-conid'>MinBound</span>   <span class='hs-keyglyph'>=</span> <span class='hs-conid'>MinBound</span>
-<a name="line-71"></a>  <span class='hs-conid'>Priority</span> <span class='hs-varid'>a</span> <span class='hs-varop'>`min`</span> <span class='hs-conid'>Priority</span> <span class='hs-varid'>b</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>Priority</span> <span class='hs-layout'>(</span><span class='hs-varid'>a</span> <span class='hs-varop'>`min`</span> <span class='hs-varid'>b</span><span class='hs-layout'>)</span>
-<a name="line-72"></a>  <span class='hs-varid'>u</span>          <span class='hs-varop'>`min`</span> <span class='hs-conid'>MaxBound</span>   <span class='hs-keyglyph'>=</span> <span class='hs-varid'>u</span>
-<a name="line-73"></a>  <span class='hs-conid'>MaxBound</span>   <span class='hs-varop'>`min`</span> <span class='hs-varid'>v</span>          <span class='hs-keyglyph'>=</span> <span class='hs-varid'>v</span>
-<a name="line-74"></a>  
-<a name="line-75"></a>  <span class='hs-conid'>MinBound</span>   <span class='hs-varop'>`max`</span> <span class='hs-varid'>v</span>          <span class='hs-keyglyph'>=</span> <span class='hs-varid'>v</span>
-<a name="line-76"></a>  <span class='hs-varid'>u</span>          <span class='hs-varop'>`max`</span> <span class='hs-conid'>MinBound</span>   <span class='hs-keyglyph'>=</span> <span class='hs-varid'>u</span>
-<a name="line-77"></a>  <span class='hs-conid'>Priority</span> <span class='hs-varid'>a</span> <span class='hs-varop'>`max`</span> <span class='hs-conid'>Priority</span> <span class='hs-varid'>b</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>Priority</span> <span class='hs-layout'>(</span><span class='hs-varid'>a</span> <span class='hs-varop'>`max`</span> <span class='hs-varid'>b</span><span class='hs-layout'>)</span>
-<a name="line-78"></a>  <span class='hs-keyword'>_</span>          <span class='hs-varop'>`max`</span> <span class='hs-conid'>MaxBound</span>   <span class='hs-keyglyph'>=</span> <span class='hs-conid'>MaxBound</span>
-<a name="line-79"></a>  <span class='hs-conid'>MaxBound</span>   <span class='hs-varop'>`max`</span> <span class='hs-keyword'>_</span>          <span class='hs-keyglyph'>=</span> <span class='hs-conid'>MaxBound</span>
-<a name="line-80"></a>
-<a name="line-81"></a><span class='hs-keyword'>instance</span> <span class='hs-conid'>Arbitrary</span> <span class='hs-varid'>a</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>Arbitrary</span> <span class='hs-layout'>(</span><span class='hs-conid'>Priority</span> <span class='hs-varid'>a</span><span class='hs-layout'>)</span> <span class='hs-keyword'>where</span>
-<a name="line-82"></a>  <span class='hs-varid'>arbitrary</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>frequency</span> <span class='hs-keyglyph'>[</span> <span class='hs-layout'>(</span><span class='hs-num'>1</span> <span class='hs-layout'>,</span><span class='hs-varid'>return</span> <span class='hs-conid'>MinBound</span><span class='hs-layout'>)</span>
-<a name="line-83"></a>                        <span class='hs-layout'>,</span> <span class='hs-layout'>(</span><span class='hs-num'>10</span><span class='hs-layout'>,</span> <span class='hs-varid'>fmap</span> <span class='hs-conid'>Priority</span> <span class='hs-varid'>arbitrary</span><span class='hs-layout'>)</span>
-<a name="line-84"></a>                        <span class='hs-layout'>,</span> <span class='hs-layout'>(</span><span class='hs-num'>1</span> <span class='hs-layout'>,</span><span class='hs-varid'>return</span> <span class='hs-conid'>MaxBound</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>]</span>
-<a name="line-85"></a>  <span class='hs-varid'>shrink</span> <span class='hs-layout'>(</span><span class='hs-conid'>Priority</span> <span class='hs-varid'>x</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>MinBound</span> <span class='hs-conop'>:</span> <span class='hs-conid'>MaxBound</span> <span class='hs-conop'>:</span> <span class='hs-varid'>fmap</span> <span class='hs-conid'>Priority</span> <span class='hs-layout'>(</span><span class='hs-varid'>shrink</span> <span class='hs-varid'>x</span><span class='hs-layout'>)</span>
-<a name="line-86"></a>  <span class='hs-varid'>shrink</span> <span class='hs-conid'>MinBound</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>[]</span>
-<a name="line-87"></a>  <span class='hs-varid'>shrink</span> <span class='hs-conid'>MaxBound</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>[]</span>
-<a name="line-88"></a>
-<a name="line-89"></a><span class='hs-keyword'>instance</span> <span class='hs-conid'>CoArbitrary</span> <span class='hs-varid'>a</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>CoArbitrary</span> <span class='hs-layout'>(</span><span class='hs-conid'>Priority</span> <span class='hs-varid'>a</span><span class='hs-layout'>)</span> <span class='hs-keyword'>where</span>
-<a name="line-90"></a>  <span class='hs-varid'>coarbitrary</span> <span class='hs-conid'>MinBound</span>     <span class='hs-keyglyph'>=</span> <span class='hs-varid'>variant</span> <span class='hs-layout'>(</span><span class='hs-num'>0</span> <span class='hs-keyglyph'>::</span> <span class='hs-conid'>Int</span><span class='hs-layout'>)</span>
-<a name="line-91"></a>  <span class='hs-varid'>coarbitrary</span> <span class='hs-layout'>(</span><span class='hs-conid'>Priority</span> <span class='hs-varid'>a</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>variant</span> <span class='hs-layout'>(</span><span class='hs-num'>1</span> <span class='hs-keyglyph'>::</span> <span class='hs-conid'>Int</span><span class='hs-layout'>)</span> <span class='hs-varop'>.</span> <span class='hs-varid'>coarbitrary</span> <span class='hs-varid'>a</span>
-<a name="line-92"></a>  <span class='hs-varid'>coarbitrary</span> <span class='hs-conid'>MaxBound</span>     <span class='hs-keyglyph'>=</span> <span class='hs-varid'>variant</span> <span class='hs-layout'>(</span><span class='hs-num'>2</span> <span class='hs-keyglyph'>::</span> <span class='hs-conid'>Int</span><span class='hs-layout'>)</span>
+<a name="line-61"></a><span class='hs-keyword'>instance</span> <span class='hs-conid'>Pointed</span> <span class='hs-conid'>Order</span> <span class='hs-keyword'>where</span>
+<a name="line-62"></a>    <span class='hs-varid'>point</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>Order</span>
+<a name="line-63"></a>
+<a name="line-64"></a><span class='hs-keyword'>instance</span> <span class='hs-conid'>Copointed</span> <span class='hs-conid'>Order</span> <span class='hs-keyword'>where</span>
+<a name="line-65"></a>    <span class='hs-varid'>extract</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>getOrder</span>
+<a name="line-66"></a>
+<a name="line-67"></a><a name="Priority"></a><span class='hs-comment'>-- | A 'SemiRing' which adds 'minBound' and 'maxBound' to a pre-existing type.</span>
+<a name="line-68"></a><a name="Priority"></a><span class='hs-keyword'>data</span> <span class='hs-conid'>Priority</span> <span class='hs-varid'>a</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>MinBound</span> <span class='hs-keyglyph'>|</span> <span class='hs-conid'>Priority</span> <span class='hs-varid'>a</span> <span class='hs-keyglyph'>|</span> <span class='hs-conid'>MaxBound</span> <span class='hs-keyword'>deriving</span> <span class='hs-layout'>(</span><span class='hs-conid'>Eq</span><span class='hs-layout'>,</span><span class='hs-conid'>Read</span><span class='hs-layout'>,</span><span class='hs-conid'>Show</span><span class='hs-layout'>)</span>
+<a name="line-69"></a>
+<a name="line-70"></a><span class='hs-keyword'>instance</span> <span class='hs-conid'>Bounded</span> <span class='hs-layout'>(</span><span class='hs-conid'>Priority</span> <span class='hs-varid'>a</span><span class='hs-layout'>)</span> <span class='hs-keyword'>where</span>
+<a name="line-71"></a>    <span class='hs-varid'>minBound</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>MinBound</span>
+<a name="line-72"></a>    <span class='hs-varid'>maxBound</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>MaxBound</span>
+<a name="line-73"></a>
+<a name="line-74"></a><span class='hs-keyword'>instance</span> <span class='hs-conid'>Ord</span> <span class='hs-varid'>a</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>Ord</span> <span class='hs-layout'>(</span><span class='hs-conid'>Priority</span> <span class='hs-varid'>a</span><span class='hs-layout'>)</span> <span class='hs-keyword'>where</span>
+<a name="line-75"></a>  <span class='hs-conid'>MinBound</span>   <span class='hs-varop'>&lt;=</span> <span class='hs-keyword'>_</span>         <span class='hs-keyglyph'>=</span> <span class='hs-conid'>True</span>
+<a name="line-76"></a>  <span class='hs-conid'>Priority</span> <span class='hs-keyword'>_</span> <span class='hs-varop'>&lt;=</span> <span class='hs-conid'>MinBound</span>  <span class='hs-keyglyph'>=</span> <span class='hs-conid'>False</span>
+<a name="line-77"></a>  <span class='hs-conid'>Priority</span> <span class='hs-varid'>a</span> <span class='hs-varop'>&lt;=</span> <span class='hs-conid'>Priority</span> <span class='hs-varid'>b</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>a</span> <span class='hs-varop'>&lt;=</span> <span class='hs-varid'>b</span>
+<a name="line-78"></a>  <span class='hs-conid'>Priority</span> <span class='hs-keyword'>_</span> <span class='hs-varop'>&lt;=</span> <span class='hs-conid'>MaxBound</span>  <span class='hs-keyglyph'>=</span> <span class='hs-conid'>True</span>
+<a name="line-79"></a>  <span class='hs-conid'>MaxBound</span>   <span class='hs-varop'>&lt;=</span> <span class='hs-conid'>MaxBound</span>  <span class='hs-keyglyph'>=</span> <span class='hs-conid'>True</span>
+<a name="line-80"></a>  <span class='hs-conid'>MaxBound</span>   <span class='hs-varop'>&lt;=</span> <span class='hs-keyword'>_</span>         <span class='hs-keyglyph'>=</span> <span class='hs-conid'>False</span>
+<a name="line-81"></a>
+<a name="line-82"></a>  <span class='hs-conid'>MinBound</span>   <span class='hs-varop'>`min`</span> <span class='hs-keyword'>_</span>          <span class='hs-keyglyph'>=</span> <span class='hs-conid'>MinBound</span>
+<a name="line-83"></a>  <span class='hs-keyword'>_</span>          <span class='hs-varop'>`min`</span> <span class='hs-conid'>MinBound</span>   <span class='hs-keyglyph'>=</span> <span class='hs-conid'>MinBound</span>
+<a name="line-84"></a>  <span class='hs-conid'>Priority</span> <span class='hs-varid'>a</span> <span class='hs-varop'>`min`</span> <span class='hs-conid'>Priority</span> <span class='hs-varid'>b</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>Priority</span> <span class='hs-layout'>(</span><span class='hs-varid'>a</span> <span class='hs-varop'>`min`</span> <span class='hs-varid'>b</span><span class='hs-layout'>)</span>
+<a name="line-85"></a>  <span class='hs-varid'>u</span>          <span class='hs-varop'>`min`</span> <span class='hs-conid'>MaxBound</span>   <span class='hs-keyglyph'>=</span> <span class='hs-varid'>u</span>
+<a name="line-86"></a>  <span class='hs-conid'>MaxBound</span>   <span class='hs-varop'>`min`</span> <span class='hs-varid'>v</span>          <span class='hs-keyglyph'>=</span> <span class='hs-varid'>v</span>
+<a name="line-87"></a>  
+<a name="line-88"></a>  <span class='hs-conid'>MinBound</span>   <span class='hs-varop'>`max`</span> <span class='hs-varid'>v</span>          <span class='hs-keyglyph'>=</span> <span class='hs-varid'>v</span>
+<a name="line-89"></a>  <span class='hs-varid'>u</span>          <span class='hs-varop'>`max`</span> <span class='hs-conid'>MinBound</span>   <span class='hs-keyglyph'>=</span> <span class='hs-varid'>u</span>
+<a name="line-90"></a>  <span class='hs-conid'>Priority</span> <span class='hs-varid'>a</span> <span class='hs-varop'>`max`</span> <span class='hs-conid'>Priority</span> <span class='hs-varid'>b</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>Priority</span> <span class='hs-layout'>(</span><span class='hs-varid'>a</span> <span class='hs-varop'>`max`</span> <span class='hs-varid'>b</span><span class='hs-layout'>)</span>
+<a name="line-91"></a>  <span class='hs-keyword'>_</span>          <span class='hs-varop'>`max`</span> <span class='hs-conid'>MaxBound</span>   <span class='hs-keyglyph'>=</span> <span class='hs-conid'>MaxBound</span>
+<a name="line-92"></a>  <span class='hs-conid'>MaxBound</span>   <span class='hs-varop'>`max`</span> <span class='hs-keyword'>_</span>          <span class='hs-keyglyph'>=</span> <span class='hs-conid'>MaxBound</span>
hunk ./doc/html/monoids/src/Data-Ring-Semi-Ord.html 102
-<a name="line-94"></a><span class='hs-keyword'>instance</span> <span class='hs-conid'>Ord</span> <span class='hs-varid'>a</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>Monoid</span> <span class='hs-layout'>(</span><span class='hs-conid'>Priority</span> <span class='hs-varid'>a</span><span class='hs-layout'>)</span> <span class='hs-keyword'>where</span>
-<a name="line-95"></a>    <span class='hs-varid'>mappend</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>max</span>
-<a name="line-96"></a>    <span class='hs-varid'>mempty</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>minBound</span>
-<a name="line-97"></a>
-<a name="line-98"></a><span class='hs-keyword'>instance</span> <span class='hs-conid'>Ord</span> <span class='hs-varid'>a</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>Multiplicative</span> <span class='hs-layout'>(</span><span class='hs-conid'>Priority</span> <span class='hs-varid'>a</span><span class='hs-layout'>)</span> <span class='hs-keyword'>where</span>
-<a name="line-99"></a>    <span class='hs-varid'>times</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>min</span>
-<a name="line-100"></a>    <span class='hs-varid'>one</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>maxBound</span>
-<a name="line-101"></a>
-<a name="line-102"></a><span class='hs-keyword'>instance</span> <span class='hs-conid'>Ord</span> <span class='hs-varid'>a</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>Ringoid</span> <span class='hs-layout'>(</span><span class='hs-conid'>Priority</span> <span class='hs-varid'>a</span><span class='hs-layout'>)</span>
-<a name="line-103"></a><span class='hs-keyword'>instance</span> <span class='hs-conid'>Ord</span> <span class='hs-varid'>a</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>LeftSemiNearRing</span> <span class='hs-layout'>(</span><span class='hs-conid'>Priority</span> <span class='hs-varid'>a</span><span class='hs-layout'>)</span>
-<a name="line-104"></a><span class='hs-keyword'>instance</span> <span class='hs-conid'>Ord</span> <span class='hs-varid'>a</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>RightSemiNearRing</span> <span class='hs-layout'>(</span><span class='hs-conid'>Priority</span> <span class='hs-varid'>a</span><span class='hs-layout'>)</span>
-<a name="line-105"></a><span class='hs-keyword'>instance</span> <span class='hs-conid'>Ord</span> <span class='hs-varid'>a</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>SemiRing</span> <span class='hs-layout'>(</span><span class='hs-conid'>Priority</span> <span class='hs-varid'>a</span><span class='hs-layout'>)</span>
-<a name="line-106"></a>
-<a name="line-107"></a><span class='hs-keyword'>instance</span> <span class='hs-conid'>Ord</span> <span class='hs-varid'>a</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>Reducer</span> <span class='hs-varid'>a</span> <span class='hs-layout'>(</span><span class='hs-conid'>Priority</span> <span class='hs-varid'>a</span><span class='hs-layout'>)</span> <span class='hs-keyword'>where</span>
-<a name="line-108"></a>    <span class='hs-varid'>unit</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>Priority</span>
-<a name="line-109"></a>
-<a name="line-110"></a><span class='hs-keyword'>instance</span> <span class='hs-conid'>Ord</span> <span class='hs-varid'>a</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>Reducer</span> <span class='hs-layout'>(</span><span class='hs-conid'>MinPriority</span> <span class='hs-varid'>a</span><span class='hs-layout'>)</span> <span class='hs-layout'>(</span><span class='hs-conid'>Priority</span> <span class='hs-varid'>a</span><span class='hs-layout'>)</span> <span class='hs-keyword'>where</span>
-<a name="line-111"></a>    <span class='hs-varid'>unit</span> <span class='hs-layout'>(</span><span class='hs-conid'>MinPriority</span> <span class='hs-conid'>Nothing</span><span class='hs-layout'>)</span>  <span class='hs-keyglyph'>=</span> <span class='hs-conid'>MaxBound</span>
-<a name="line-112"></a>    <span class='hs-varid'>unit</span> <span class='hs-layout'>(</span><span class='hs-conid'>MinPriority</span> <span class='hs-layout'>(</span><span class='hs-conid'>Just</span> <span class='hs-varid'>x</span><span class='hs-layout'>)</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>Priority</span> <span class='hs-varid'>x</span>
-<a name="line-113"></a>
-<a name="line-114"></a><span class='hs-keyword'>instance</span> <span class='hs-conid'>Ord</span> <span class='hs-varid'>a</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>Reducer</span> <span class='hs-layout'>(</span><span class='hs-conid'>MaxPriority</span> <span class='hs-varid'>a</span><span class='hs-layout'>)</span> <span class='hs-layout'>(</span><span class='hs-conid'>Priority</span> <span class='hs-varid'>a</span><span class='hs-layout'>)</span> <span class='hs-keyword'>where</span>
-<a name="line-115"></a>    <span class='hs-varid'>unit</span> <span class='hs-layout'>(</span><span class='hs-conid'>MaxPriority</span> <span class='hs-conid'>Nothing</span><span class='hs-layout'>)</span>  <span class='hs-keyglyph'>=</span> <span class='hs-conid'>MinBound</span>
-<a name="line-116"></a>    <span class='hs-varid'>unit</span> <span class='hs-layout'>(</span><span class='hs-conid'>MaxPriority</span> <span class='hs-layout'>(</span><span class='hs-conid'>Just</span> <span class='hs-varid'>x</span><span class='hs-layout'>)</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>Priority</span> <span class='hs-varid'>x</span>
-<a name="line-117"></a>
-<a name="line-118"></a><span class='hs-keyword'>instance</span> <span class='hs-conid'>Functor</span> <span class='hs-conid'>Priority</span> <span class='hs-keyword'>where</span>
-<a name="line-119"></a>    <span class='hs-varid'>fmap</span> <span class='hs-keyword'>_</span> <span class='hs-conid'>MaxBound</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>MaxBound</span>
-<a name="line-120"></a>    <span class='hs-varid'>fmap</span> <span class='hs-varid'>f</span> <span class='hs-layout'>(</span><span class='hs-conid'>Priority</span> <span class='hs-varid'>a</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>Priority</span> <span class='hs-layout'>(</span><span class='hs-varid'>f</span> <span class='hs-varid'>a</span><span class='hs-layout'>)</span>
-<a name="line-121"></a>    <span class='hs-varid'>fmap</span> <span class='hs-keyword'>_</span> <span class='hs-conid'>MinBound</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>MinBound</span>
-<a name="line-122"></a>
-<a name="line-123"></a><span class='hs-keyword'>instance</span> <span class='hs-conid'>Pointed</span> <span class='hs-conid'>Priority</span> <span class='hs-keyword'>where</span>
-<a name="line-124"></a>    <span class='hs-varid'>point</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>Priority</span>
+<a name="line-94"></a><span class='hs-cpp'>#ifdef M_QUICKCHECK</span>
+<a name="line-95"></a><span class='hs-keyword'>instance</span> <span class='hs-conid'>Arbitrary</span> <span class='hs-varid'>a</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>Arbitrary</span> <span class='hs-layout'>(</span><span class='hs-conid'>Priority</span> <span class='hs-varid'>a</span><span class='hs-layout'>)</span> <span class='hs-keyword'>where</span>
+<a name="line-96"></a>  <span class='hs-varid'>arbitrary</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>frequency</span> <span class='hs-keyglyph'>[</span> <span class='hs-layout'>(</span><span class='hs-num'>1</span> <span class='hs-layout'>,</span><span class='hs-varid'>return</span> <span class='hs-conid'>MinBound</span><span class='hs-layout'>)</span>
+<a name="line-97"></a>                        <span class='hs-layout'>,</span> <span class='hs-layout'>(</span><span class='hs-num'>10</span><span class='hs-layout'>,</span> <span class='hs-varid'>fmap</span> <span class='hs-conid'>Priority</span> <span class='hs-varid'>arbitrary</span><span class='hs-layout'>)</span>
+<a name="line-98"></a>                        <span class='hs-layout'>,</span> <span class='hs-layout'>(</span><span class='hs-num'>1</span> <span class='hs-layout'>,</span><span class='hs-varid'>return</span> <span class='hs-conid'>MaxBound</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>]</span>
+<a name="line-99"></a>  <span class='hs-varid'>shrink</span> <span class='hs-layout'>(</span><span class='hs-conid'>Priority</span> <span class='hs-varid'>x</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>MinBound</span> <span class='hs-conop'>:</span> <span class='hs-conid'>MaxBound</span> <span class='hs-conop'>:</span> <span class='hs-varid'>fmap</span> <span class='hs-conid'>Priority</span> <span class='hs-layout'>(</span><span class='hs-varid'>shrink</span> <span class='hs-varid'>x</span><span class='hs-layout'>)</span>
+<a name="line-100"></a>  <span class='hs-varid'>shrink</span> <span class='hs-conid'>MinBound</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>[]</span>
+<a name="line-101"></a>  <span class='hs-varid'>shrink</span> <span class='hs-conid'>MaxBound</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>[]</span>
+<a name="line-102"></a>
+<a name="line-103"></a><span class='hs-keyword'>instance</span> <span class='hs-conid'>CoArbitrary</span> <span class='hs-varid'>a</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>CoArbitrary</span> <span class='hs-layout'>(</span><span class='hs-conid'>Priority</span> <span class='hs-varid'>a</span><span class='hs-layout'>)</span> <span class='hs-keyword'>where</span>
+<a name="line-104"></a>  <span class='hs-varid'>coarbitrary</span> <span class='hs-conid'>MinBound</span>     <span class='hs-keyglyph'>=</span> <span class='hs-varid'>variant</span> <span class='hs-layout'>(</span><span class='hs-num'>0</span> <span class='hs-keyglyph'>::</span> <span class='hs-conid'>Int</span><span class='hs-layout'>)</span>
+<a name="line-105"></a>  <span class='hs-varid'>coarbitrary</span> <span class='hs-layout'>(</span><span class='hs-conid'>Priority</span> <span class='hs-varid'>a</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>variant</span> <span class='hs-layout'>(</span><span class='hs-num'>1</span> <span class='hs-keyglyph'>::</span> <span class='hs-conid'>Int</span><span class='hs-layout'>)</span> <span class='hs-varop'>.</span> <span class='hs-varid'>coarbitrary</span> <span class='hs-varid'>a</span>
+<a name="line-106"></a>  <span class='hs-varid'>coarbitrary</span> <span class='hs-conid'>MaxBound</span>     <span class='hs-keyglyph'>=</span> <span class='hs-varid'>variant</span> <span class='hs-layout'>(</span><span class='hs-num'>2</span> <span class='hs-keyglyph'>::</span> <span class='hs-conid'>Int</span><span class='hs-layout'>)</span>
+<a name="line-107"></a><span class='hs-cpp'>#endif</span>
+<a name="line-108"></a>
+<a name="line-109"></a><span class='hs-keyword'>instance</span> <span class='hs-conid'>Ord</span> <span class='hs-varid'>a</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>Monoid</span> <span class='hs-layout'>(</span><span class='hs-conid'>Priority</span> <span class='hs-varid'>a</span><span class='hs-layout'>)</span> <span class='hs-keyword'>where</span>
+<a name="line-110"></a>    <span class='hs-varid'>mappend</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>max</span>
+<a name="line-111"></a>    <span class='hs-varid'>mempty</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>minBound</span>
+<a name="line-112"></a>
+<a name="line-113"></a><span class='hs-keyword'>instance</span> <span class='hs-conid'>Ord</span> <span class='hs-varid'>a</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>Multiplicative</span> <span class='hs-layout'>(</span><span class='hs-conid'>Priority</span> <span class='hs-varid'>a</span><span class='hs-layout'>)</span> <span class='hs-keyword'>where</span>
+<a name="line-114"></a>    <span class='hs-varid'>times</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>min</span>
+<a name="line-115"></a>    <span class='hs-varid'>one</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>maxBound</span>
+<a name="line-116"></a>
+<a name="line-117"></a><span class='hs-keyword'>instance</span> <span class='hs-conid'>Ord</span> <span class='hs-varid'>a</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>Ringoid</span> <span class='hs-layout'>(</span><span class='hs-conid'>Priority</span> <span class='hs-varid'>a</span><span class='hs-layout'>)</span>
+<a name="line-118"></a><span class='hs-keyword'>instance</span> <span class='hs-conid'>Ord</span> <span class='hs-varid'>a</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>LeftSemiNearRing</span> <span class='hs-layout'>(</span><span class='hs-conid'>Priority</span> <span class='hs-varid'>a</span><span class='hs-layout'>)</span>
+<a name="line-119"></a><span class='hs-keyword'>instance</span> <span class='hs-conid'>Ord</span> <span class='hs-varid'>a</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>RightSemiNearRing</span> <span class='hs-layout'>(</span><span class='hs-conid'>Priority</span> <span class='hs-varid'>a</span><span class='hs-layout'>)</span>
+<a name="line-120"></a><span class='hs-keyword'>instance</span> <span class='hs-conid'>Ord</span> <span class='hs-varid'>a</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>SemiRing</span> <span class='hs-layout'>(</span><span class='hs-conid'>Priority</span> <span class='hs-varid'>a</span><span class='hs-layout'>)</span>
+<a name="line-121"></a>
+<a name="line-122"></a><span class='hs-keyword'>instance</span> <span class='hs-conid'>Ord</span> <span class='hs-varid'>a</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>Reducer</span> <span class='hs-varid'>a</span> <span class='hs-layout'>(</span><span class='hs-conid'>Priority</span> <span class='hs-varid'>a</span><span class='hs-layout'>)</span> <span class='hs-keyword'>where</span>
+<a name="line-123"></a>    <span class='hs-varid'>unit</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>Priority</span>
+<a name="line-124"></a>
+<a name="line-125"></a><span class='hs-keyword'>instance</span> <span class='hs-conid'>Ord</span> <span class='hs-varid'>a</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>Reducer</span> <span class='hs-layout'>(</span><span class='hs-conid'>MinPriority</span> <span class='hs-varid'>a</span><span class='hs-layout'>)</span> <span class='hs-layout'>(</span><span class='hs-conid'>Priority</span> <span class='hs-varid'>a</span><span class='hs-layout'>)</span> <span class='hs-keyword'>where</span>
+<a name="line-126"></a>    <span class='hs-varid'>unit</span> <span class='hs-layout'>(</span><span class='hs-conid'>MinPriority</span> <span class='hs-conid'>Nothing</span><span class='hs-layout'>)</span>  <span class='hs-keyglyph'>=</span> <span class='hs-conid'>MaxBound</span>
+<a name="line-127"></a>    <span class='hs-varid'>unit</span> <span class='hs-layout'>(</span><span class='hs-conid'>MinPriority</span> <span class='hs-layout'>(</span><span class='hs-conid'>Just</span> <span class='hs-varid'>x</span><span class='hs-layout'>)</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>Priority</span> <span class='hs-varid'>x</span>
+<a name="line-128"></a>
+<a name="line-129"></a><span class='hs-keyword'>instance</span> <span class='hs-conid'>Ord</span> <span class='hs-varid'>a</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>Reducer</span> <span class='hs-layout'>(</span><span class='hs-conid'>MaxPriority</span> <span class='hs-varid'>a</span><span class='hs-layout'>)</span> <span class='hs-layout'>(</span><span class='hs-conid'>Priority</span> <span class='hs-varid'>a</span><span class='hs-layout'>)</span> <span class='hs-keyword'>where</span>
+<a name="line-130"></a>    <span class='hs-varid'>unit</span> <span class='hs-layout'>(</span><span class='hs-conid'>MaxPriority</span> <span class='hs-conid'>Nothing</span><span class='hs-layout'>)</span>  <span class='hs-keyglyph'>=</span> <span class='hs-conid'>MinBound</span>
+<a name="line-131"></a>    <span class='hs-varid'>unit</span> <span class='hs-layout'>(</span><span class='hs-conid'>MaxPriority</span> <span class='hs-layout'>(</span><span class='hs-conid'>Just</span> <span class='hs-varid'>x</span><span class='hs-layout'>)</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>Priority</span> <span class='hs-varid'>x</span>
+<a name="line-132"></a>
+<a name="line-133"></a><span class='hs-keyword'>instance</span> <span class='hs-conid'>Functor</span> <span class='hs-conid'>Priority</span> <span class='hs-keyword'>where</span>
+<a name="line-134"></a>    <span class='hs-varid'>fmap</span> <span class='hs-keyword'>_</span> <span class='hs-conid'>MaxBound</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>MaxBound</span>
+<a name="line-135"></a>    <span class='hs-varid'>fmap</span> <span class='hs-varid'>f</span> <span class='hs-layout'>(</span><span class='hs-conid'>Priority</span> <span class='hs-varid'>a</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>Priority</span> <span class='hs-layout'>(</span><span class='hs-varid'>f</span> <span class='hs-varid'>a</span><span class='hs-layout'>)</span>
+<a name="line-136"></a>    <span class='hs-varid'>fmap</span> <span class='hs-keyword'>_</span> <span class='hs-conid'>MinBound</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>MinBound</span>
+<a name="line-137"></a>
+<a name="line-138"></a><span class='hs-keyword'>instance</span> <span class='hs-conid'>Pointed</span> <span class='hs-conid'>Priority</span> <span class='hs-keyword'>where</span>
+<a name="line-139"></a>    <span class='hs-varid'>point</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>Priority</span>
hunk ./doc/html/monoids/src/Data-Ring-Semi-Tropical.html 23
-<a name="line-15"></a>    <span class='hs-layout'>,</span> <span class='hs-keyword'>module</span> <span class='hs-conid'>Data</span><span class='hs-varop'>.</span><span class='hs-conid'>Ring</span><span class='hs-varop'>.</span><span class='hs-conid'>Semi</span>
+<a name="line-15"></a>    <span class='hs-layout'>,</span> <span class='hs-keyword'>module</span> <span class='hs-conid'>Data</span><span class='hs-varop'>.</span><span class='hs-conid'>Ring</span>
hunk ./doc/html/monoids/src/Data-Ring-Semi-Tropical.html 29
-<a name="line-21"></a><span class='hs-keyword'>import</span> <span class='hs-conid'>Test</span><span class='hs-varop'>.</span><span class='hs-conid'>QuickCheck</span>
-<a name="line-22"></a><span class='hs-keyword'>import</span> <span class='hs-conid'>Control</span><span class='hs-varop'>.</span><span class='hs-conid'>Functor</span><span class='hs-varop'>.</span><span class='hs-conid'>Pointed</span>
-<a name="line-23"></a><span class='hs-keyword'>import</span> <span class='hs-conid'>Data</span><span class='hs-varop'>.</span><span class='hs-conid'>Monoid</span><span class='hs-varop'>.</span><span class='hs-conid'>Reducer</span> <span class='hs-layout'>(</span><span class='hs-conid'>Reducer</span><span class='hs-layout'>,</span> <span class='hs-varid'>unit</span><span class='hs-layout'>,</span> <span class='hs-conid'>Monoid</span><span class='hs-layout'>,</span> <span class='hs-varid'>mappend</span><span class='hs-layout'>,</span> <span class='hs-varid'>mempty</span><span class='hs-layout'>)</span>
-<a name="line-24"></a><span class='hs-keyword'>import</span> <span class='hs-conid'>Data</span><span class='hs-varop'>.</span><span class='hs-conid'>Ring</span><span class='hs-varop'>.</span><span class='hs-conid'>Semi</span>
-<a name="line-25"></a><span class='hs-keyword'>import</span> <span class='hs-conid'>Data</span><span class='hs-varop'>.</span><span class='hs-conid'>Monoid</span><span class='hs-varop'>.</span><span class='hs-conid'>Ord</span> <span class='hs-varid'>hiding</span> <span class='hs-layout'>(</span><span class='hs-varid'>infinity</span><span class='hs-layout'>)</span>
-<a name="line-26"></a>
-<a name="line-27"></a><a name="infinity"></a><span class='hs-definition'>infinity</span> <span class='hs-keyglyph'>::</span> <span class='hs-conid'>Tropical</span> <span class='hs-varid'>a</span>
-<a name="line-28"></a><span class='hs-definition'>infinity</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>Tropical</span> <span class='hs-conid'>Nothing</span>
-<a name="line-29"></a>
-<a name="line-30"></a><span class='hs-comment'>-- | The 'SemiRing' @('min','+')@ over @'a' extended with 'infinity'@.</span>
-<a name="line-31"></a><span class='hs-comment'>--   When @a@ has a Num instance with an addition that respects order, then this is </span>
-<a name="line-32"></a><span class='hs-comment'>--   transformed into a tropical semiring. It is assumed that 0 is the least element</span>
-<a name="line-33"></a><span class='hs-comment'>--   of a.</span>
-<a name="line-34"></a><span class='hs-comment'>--</span>
-<a name="line-35"></a><span class='hs-comment'>--   &lt;<a href="http://hal.archives-ouvertes.fr/docs/00/11/37/79/PDF/Tropical.pdf">http://hal.archives-ouvertes.fr/docs/00/11/37/79/PDF/Tropical.pdf</a>&gt;</span>
-<a name="line-36"></a>
-<a name="line-37"></a><a name="Tropical"></a><span class='hs-keyword'>newtype</span> <span class='hs-conid'>Tropical</span> <span class='hs-varid'>a</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>Tropical</span> <span class='hs-layout'>{</span> <span class='hs-varid'>getTropical</span> <span class='hs-keyglyph'>::</span> <span class='hs-conid'>Maybe</span> <span class='hs-varid'>a</span> <span class='hs-layout'>}</span> 
-<a name="line-38"></a>    <span class='hs-keyword'>deriving</span> <span class='hs-layout'>(</span><span class='hs-conid'>Eq</span><span class='hs-layout'>,</span><span class='hs-conid'>Show</span><span class='hs-layout'>,</span><span class='hs-conid'>Read</span><span class='hs-layout'>,</span><span class='hs-conid'>Arbitrary</span><span class='hs-layout'>,</span><span class='hs-conid'>CoArbitrary</span><span class='hs-layout'>)</span>
-<a name="line-39"></a>
-<a name="line-40"></a><span class='hs-keyword'>instance</span> <span class='hs-conid'>Ord</span> <span class='hs-varid'>a</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>Ord</span> <span class='hs-layout'>(</span><span class='hs-conid'>Tropical</span> <span class='hs-varid'>a</span><span class='hs-layout'>)</span> <span class='hs-keyword'>where</span>
-<a name="line-41"></a>    <span class='hs-conid'>Tropical</span> <span class='hs-conid'>Nothing</span>  <span class='hs-varop'>`compare`</span> <span class='hs-conid'>Tropical</span> <span class='hs-conid'>Nothing</span>  <span class='hs-keyglyph'>=</span> <span class='hs-conid'>EQ</span>
-<a name="line-42"></a>    <span class='hs-conid'>Tropical</span> <span class='hs-conid'>Nothing</span>  <span class='hs-varop'>`compare`</span> <span class='hs-keyword'>_</span>                    <span class='hs-keyglyph'>=</span> <span class='hs-conid'>GT</span>
-<a name="line-43"></a>    <span class='hs-keyword'>_</span>                 <span class='hs-varop'>`compare`</span> <span class='hs-conid'>Tropical</span> <span class='hs-conid'>Nothing</span>  <span class='hs-keyglyph'>=</span> <span class='hs-conid'>LT</span>
-<a name="line-44"></a>    <span class='hs-conid'>Tropical</span> <span class='hs-layout'>(</span><span class='hs-conid'>Just</span> <span class='hs-varid'>a</span><span class='hs-layout'>)</span> <span class='hs-varop'>`compare`</span> <span class='hs-conid'>Tropical</span> <span class='hs-layout'>(</span><span class='hs-conid'>Just</span> <span class='hs-varid'>b</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>a</span> <span class='hs-varop'>`compare`</span> <span class='hs-varid'>b</span>
-<a name="line-45"></a>
-<a name="line-46"></a><span class='hs-keyword'>instance</span> <span class='hs-conid'>Ord</span> <span class='hs-varid'>a</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>Monoid</span> <span class='hs-layout'>(</span><span class='hs-conid'>Tropical</span> <span class='hs-varid'>a</span><span class='hs-layout'>)</span> <span class='hs-keyword'>where</span>
-<a name="line-47"></a>    <span class='hs-varid'>mempty</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>infinity</span>
-<a name="line-48"></a>    <span class='hs-varid'>mappend</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>min</span>
-<a name="line-49"></a>
-<a name="line-50"></a><span class='hs-keyword'>instance</span> <span class='hs-conid'>Ord</span> <span class='hs-varid'>a</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>Reducer</span> <span class='hs-varid'>a</span> <span class='hs-layout'>(</span><span class='hs-conid'>Tropical</span> <span class='hs-varid'>a</span><span class='hs-layout'>)</span> <span class='hs-keyword'>where</span>
-<a name="line-51"></a>    <span class='hs-varid'>unit</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>Tropical</span> <span class='hs-varop'>.</span> <span class='hs-conid'>Just</span>
+<a name="line-21"></a><span class='hs-keyword'>import</span> <span class='hs-conid'>Control</span><span class='hs-varop'>.</span><span class='hs-conid'>Functor</span><span class='hs-varop'>.</span><span class='hs-conid'>Pointed</span>
+<a name="line-22"></a><span class='hs-keyword'>import</span> <span class='hs-conid'>Data</span><span class='hs-varop'>.</span><span class='hs-conid'>Monoid</span><span class='hs-varop'>.</span><span class='hs-conid'>Reducer</span>
+<a name="line-23"></a><span class='hs-keyword'>import</span> <span class='hs-conid'>Data</span><span class='hs-varop'>.</span><span class='hs-conid'>Monoid</span><span class='hs-varop'>.</span><span class='hs-conid'>Combinators</span> <span class='hs-keyword'>as</span> <span class='hs-conid'>Monoid</span>
+<a name="line-24"></a><span class='hs-keyword'>import</span> <span class='hs-conid'>Data</span><span class='hs-varop'>.</span><span class='hs-conid'>Ring</span><span class='hs-varop'>.</span><span class='hs-conid'>Semi</span><span class='hs-varop'>.</span><span class='hs-conid'>Natural</span>
+<a name="line-25"></a><span class='hs-keyword'>import</span> <span class='hs-conid'>Data</span><span class='hs-varop'>.</span><span class='hs-conid'>Ring</span>
+<a name="line-26"></a><span class='hs-keyword'>import</span> <span class='hs-conid'>Data</span><span class='hs-varop'>.</span><span class='hs-conid'>Ring</span><span class='hs-varop'>.</span><span class='hs-conid'>Module</span>
+<a name="line-27"></a><span class='hs-keyword'>import</span> <span class='hs-conid'>Data</span><span class='hs-varop'>.</span><span class='hs-conid'>Monoid</span><span class='hs-varop'>.</span><span class='hs-conid'>Ord</span> <span class='hs-varid'>hiding</span> <span class='hs-layout'>(</span><span class='hs-varid'>infinity</span><span class='hs-layout'>)</span>
+<a name="line-28"></a>
+<a name="line-29"></a><span class='hs-cpp'>#ifdef M_QUICKCHECK</span>
+<a name="line-30"></a><span class='hs-keyword'>import</span> <span class='hs-conid'>Test</span><span class='hs-varop'>.</span><span class='hs-conid'>QuickCheck</span>
+<a name="line-31"></a><span class='hs-cpp'>#endif</span>
+<a name="line-32"></a>
+<a name="line-33"></a><a name="infinity"></a><span class='hs-definition'>infinity</span> <span class='hs-keyglyph'>::</span> <span class='hs-conid'>Tropical</span> <span class='hs-varid'>a</span>
+<a name="line-34"></a><span class='hs-definition'>infinity</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>Tropical</span> <span class='hs-conid'>Nothing</span>
+<a name="line-35"></a>
+<a name="line-36"></a><span class='hs-comment'>-- | The 'SemiRing' @('min','+')@ over @'a' extended with 'infinity'@.</span>
+<a name="line-37"></a><span class='hs-comment'>--   When @a@ has a Num instance with an addition that respects order, then this is </span>
+<a name="line-38"></a><span class='hs-comment'>--   transformed into a tropical semiring. It is assumed that 0 is the least element</span>
+<a name="line-39"></a><span class='hs-comment'>--   of a.</span>
+<a name="line-40"></a><span class='hs-comment'>--</span>
+<a name="line-41"></a><span class='hs-comment'>--   &lt;<a href="http://hal.archives-ouvertes.fr/docs/00/11/37/79/PDF/Tropical.pdf">http://hal.archives-ouvertes.fr/docs/00/11/37/79/PDF/Tropical.pdf</a>&gt;</span>
+<a name="line-42"></a>
+<a name="line-43"></a><a name="Tropical"></a><span class='hs-keyword'>newtype</span> <span class='hs-conid'>Tropical</span> <span class='hs-varid'>a</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>Tropical</span> <span class='hs-layout'>{</span> <span class='hs-varid'>getTropical</span> <span class='hs-keyglyph'>::</span> <span class='hs-conid'>Maybe</span> <span class='hs-varid'>a</span> <span class='hs-layout'>}</span> <span class='hs-keyword'>deriving</span> 
+<a name="line-44"></a>    <span class='hs-layout'>(</span> <span class='hs-conid'>Eq</span>
+<a name="line-45"></a>    <span class='hs-layout'>,</span> <span class='hs-conid'>Show</span>
+<a name="line-46"></a>    <span class='hs-layout'>,</span> <span class='hs-conid'>Read</span>
+<a name="line-47"></a><span class='hs-cpp'>#ifdef M_QUICKCHECK</span>
+<a name="line-48"></a>    <span class='hs-layout'>,</span> <span class='hs-conid'>Arbitrary</span>
+<a name="line-49"></a>    <span class='hs-layout'>,</span> <span class='hs-conid'>CoArbitrary</span>
+<a name="line-50"></a><span class='hs-cpp'>#endif</span>
+<a name="line-51"></a>    <span class='hs-layout'>)</span>
hunk ./doc/html/monoids/src/Data-Ring-Semi-Tropical.html 61
-<a name="line-53"></a><span class='hs-keyword'>instance</span> <span class='hs-conid'>Ord</span> <span class='hs-varid'>a</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>Reducer</span> <span class='hs-layout'>(</span><span class='hs-conid'>Maybe</span> <span class='hs-varid'>a</span><span class='hs-layout'>)</span> <span class='hs-layout'>(</span><span class='hs-conid'>Tropical</span> <span class='hs-varid'>a</span><span class='hs-layout'>)</span> <span class='hs-keyword'>where</span>
-<a name="line-54"></a>    <span class='hs-varid'>unit</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>Tropical</span>
-<a name="line-55"></a>
-<a name="line-56"></a><span class='hs-keyword'>instance</span> <span class='hs-conid'>Ord</span> <span class='hs-varid'>a</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>Reducer</span> <span class='hs-layout'>(</span><span class='hs-conid'>MinPriority</span> <span class='hs-varid'>a</span><span class='hs-layout'>)</span> <span class='hs-layout'>(</span><span class='hs-conid'>Tropical</span> <span class='hs-varid'>a</span><span class='hs-layout'>)</span> <span class='hs-keyword'>where</span>
-<a name="line-57"></a>    <span class='hs-varid'>unit</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>Tropical</span> <span class='hs-varop'>.</span> <span class='hs-varid'>getMinPriority</span>
+<a name="line-53"></a><span class='hs-keyword'>instance</span> <span class='hs-conid'>Ord</span> <span class='hs-varid'>a</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>Ord</span> <span class='hs-layout'>(</span><span class='hs-conid'>Tropical</span> <span class='hs-varid'>a</span><span class='hs-layout'>)</span> <span class='hs-keyword'>where</span>
+<a name="line-54"></a>    <span class='hs-conid'>Tropical</span> <span class='hs-conid'>Nothing</span>  <span class='hs-varop'>`compare`</span> <span class='hs-conid'>Tropical</span> <span class='hs-conid'>Nothing</span>  <span class='hs-keyglyph'>=</span> <span class='hs-conid'>EQ</span>
+<a name="line-55"></a>    <span class='hs-conid'>Tropical</span> <span class='hs-conid'>Nothing</span>  <span class='hs-varop'>`compare`</span> <span class='hs-keyword'>_</span>                 <span class='hs-keyglyph'>=</span> <span class='hs-conid'>GT</span>
+<a name="line-56"></a>    <span class='hs-keyword'>_</span>                 <span class='hs-varop'>`compare`</span> <span class='hs-conid'>Tropical</span> <span class='hs-conid'>Nothing</span>  <span class='hs-keyglyph'>=</span> <span class='hs-conid'>LT</span>
+<a name="line-57"></a>    <span class='hs-conid'>Tropical</span> <span class='hs-layout'>(</span><span class='hs-conid'>Just</span> <span class='hs-varid'>a</span><span class='hs-layout'>)</span> <span class='hs-varop'>`compare`</span> <span class='hs-conid'>Tropical</span> <span class='hs-layout'>(</span><span class='hs-conid'>Just</span> <span class='hs-varid'>b</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>a</span> <span class='hs-varop'>`compare`</span> <span class='hs-varid'>b</span>
hunk ./doc/html/monoids/src/Data-Ring-Semi-Tropical.html 67
-<a name="line-59"></a><span class='hs-keyword'>instance</span> <span class='hs-conid'>Functor</span> <span class='hs-conid'>Tropical</span> <span class='hs-keyword'>where</span>
-<a name="line-60"></a>    <span class='hs-varid'>fmap</span> <span class='hs-varid'>f</span> <span class='hs-layout'>(</span><span class='hs-conid'>Tropical</span> <span class='hs-varid'>a</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>Tropical</span> <span class='hs-layout'>(</span><span class='hs-varid'>fmap</span> <span class='hs-varid'>f</span> <span class='hs-varid'>a</span><span class='hs-layout'>)</span>
-<a name="line-61"></a>
-<a name="line-62"></a><span class='hs-keyword'>instance</span> <span class='hs-conid'>Pointed</span> <span class='hs-conid'>Tropical</span> <span class='hs-keyword'>where</span>
-<a name="line-63"></a>    <span class='hs-varid'>point</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>Tropical</span> <span class='hs-varop'>.</span> <span class='hs-conid'>Just</span>
-<a name="line-64"></a>
-<a name="line-65"></a><span class='hs-keyword'>instance</span> <span class='hs-conid'>Num</span> <span class='hs-varid'>a</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>Multiplicative</span> <span class='hs-layout'>(</span><span class='hs-conid'>Tropical</span> <span class='hs-varid'>a</span><span class='hs-layout'>)</span> <span class='hs-keyword'>where</span>
-<a name="line-66"></a>    <span class='hs-varid'>one</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>point</span> <span class='hs-varop'>$</span> <span class='hs-varid'>fromInteger</span> <span class='hs-num'>0</span>
-<a name="line-67"></a>    <span class='hs-conid'>Tropical</span> <span class='hs-conid'>Nothing</span> <span class='hs-varop'>`times`</span> <span class='hs-keyword'>_</span>       <span class='hs-keyglyph'>=</span> <span class='hs-varid'>infinity</span>
-<a name="line-68"></a>    <span class='hs-conid'>Tropical</span> <span class='hs-layout'>(</span><span class='hs-conid'>Just</span> <span class='hs-varid'>a</span><span class='hs-layout'>)</span> <span class='hs-varop'>`times`</span> <span class='hs-conid'>Tropical</span> <span class='hs-layout'>(</span><span class='hs-conid'>Just</span> <span class='hs-varid'>b</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>point</span> <span class='hs-layout'>(</span><span class='hs-varid'>a</span> <span class='hs-varop'>+</span> <span class='hs-varid'>b</span><span class='hs-layout'>)</span>
-<a name="line-69"></a>    <span class='hs-keyword'>_</span>  <span class='hs-varop'>`times`</span> <span class='hs-conid'>Tropical</span> <span class='hs-conid'>Nothing</span>      <span class='hs-keyglyph'>=</span> <span class='hs-varid'>infinity</span>
-<a name="line-70"></a>
-<a name="line-71"></a><span class='hs-keyword'>instance</span> <span class='hs-layout'>(</span><span class='hs-conid'>Ord</span> <span class='hs-varid'>a</span><span class='hs-layout'>,</span> <span class='hs-conid'>Num</span> <span class='hs-varid'>a</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>Ringoid</span> <span class='hs-layout'>(</span><span class='hs-conid'>Tropical</span> <span class='hs-varid'>a</span><span class='hs-layout'>)</span>
-<a name="line-72"></a><span class='hs-keyword'>instance</span> <span class='hs-layout'>(</span><span class='hs-conid'>Ord</span> <span class='hs-varid'>a</span><span class='hs-layout'>,</span> <span class='hs-conid'>Num</span> <span class='hs-varid'>a</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>LeftSemiNearRing</span> <span class='hs-layout'>(</span><span class='hs-conid'>Tropical</span> <span class='hs-varid'>a</span><span class='hs-layout'>)</span>
-<a name="line-73"></a><span class='hs-keyword'>instance</span> <span class='hs-layout'>(</span><span class='hs-conid'>Ord</span> <span class='hs-varid'>a</span><span class='hs-layout'>,</span> <span class='hs-conid'>Num</span> <span class='hs-varid'>a</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>RightSemiNearRing</span> <span class='hs-layout'>(</span><span class='hs-conid'>Tropical</span> <span class='hs-varid'>a</span><span class='hs-layout'>)</span>
-<a name="line-74"></a><span class='hs-keyword'>instance</span> <span class='hs-layout'>(</span><span class='hs-conid'>Ord</span> <span class='hs-varid'>a</span><span class='hs-layout'>,</span> <span class='hs-conid'>Num</span> <span class='hs-varid'>a</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>SemiRing</span> <span class='hs-layout'>(</span><span class='hs-conid'>Tropical</span> <span class='hs-varid'>a</span><span class='hs-layout'>)</span>
+<a name="line-59"></a><span class='hs-keyword'>instance</span> <span class='hs-conid'>Ord</span> <span class='hs-varid'>a</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>Monoid</span> <span class='hs-layout'>(</span><span class='hs-conid'>Tropical</span> <span class='hs-varid'>a</span><span class='hs-layout'>)</span> <span class='hs-keyword'>where</span>
+<a name="line-60"></a>    <span class='hs-varid'>mempty</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>infinity</span>
+<a name="line-61"></a>    <span class='hs-varid'>mappend</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>min</span>
+<a name="line-62"></a>
+<a name="line-63"></a><span class='hs-keyword'>instance</span> <span class='hs-conid'>Ord</span> <span class='hs-varid'>a</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>Reducer</span> <span class='hs-varid'>a</span> <span class='hs-layout'>(</span><span class='hs-conid'>Tropical</span> <span class='hs-varid'>a</span><span class='hs-layout'>)</span> <span class='hs-keyword'>where</span>
+<a name="line-64"></a>    <span class='hs-varid'>unit</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>Tropical</span> <span class='hs-varop'>.</span> <span class='hs-conid'>Just</span>
+<a name="line-65"></a>
+<a name="line-66"></a><span class='hs-keyword'>instance</span> <span class='hs-conid'>Ord</span> <span class='hs-varid'>a</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>Reducer</span> <span class='hs-layout'>(</span><span class='hs-conid'>Maybe</span> <span class='hs-varid'>a</span><span class='hs-layout'>)</span> <span class='hs-layout'>(</span><span class='hs-conid'>Tropical</span> <span class='hs-varid'>a</span><span class='hs-layout'>)</span> <span class='hs-keyword'>where</span>
+<a name="line-67"></a>    <span class='hs-varid'>unit</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>Tropical</span>
+<a name="line-68"></a>
+<a name="line-69"></a><span class='hs-keyword'>instance</span> <span class='hs-conid'>Ord</span> <span class='hs-varid'>a</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>Reducer</span> <span class='hs-layout'>(</span><span class='hs-conid'>MinPriority</span> <span class='hs-varid'>a</span><span class='hs-layout'>)</span> <span class='hs-layout'>(</span><span class='hs-conid'>Tropical</span> <span class='hs-varid'>a</span><span class='hs-layout'>)</span> <span class='hs-keyword'>where</span>
+<a name="line-70"></a>    <span class='hs-varid'>unit</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>Tropical</span> <span class='hs-varop'>.</span> <span class='hs-varid'>getMinPriority</span>
+<a name="line-71"></a>
+<a name="line-72"></a><span class='hs-keyword'>instance</span> <span class='hs-conid'>Functor</span> <span class='hs-conid'>Tropical</span> <span class='hs-keyword'>where</span>
+<a name="line-73"></a>    <span class='hs-varid'>fmap</span> <span class='hs-varid'>f</span> <span class='hs-layout'>(</span><span class='hs-conid'>Tropical</span> <span class='hs-varid'>a</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>Tropical</span> <span class='hs-layout'>(</span><span class='hs-varid'>fmap</span> <span class='hs-varid'>f</span> <span class='hs-varid'>a</span><span class='hs-layout'>)</span>
+<a name="line-74"></a>
+<a name="line-75"></a><span class='hs-keyword'>instance</span> <span class='hs-conid'>Pointed</span> <span class='hs-conid'>Tropical</span> <span class='hs-keyword'>where</span>
+<a name="line-76"></a>    <span class='hs-varid'>point</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>Tropical</span> <span class='hs-varop'>.</span> <span class='hs-conid'>Just</span>
+<a name="line-77"></a>
+<a name="line-78"></a><span class='hs-keyword'>instance</span> <span class='hs-conid'>Num</span> <span class='hs-varid'>a</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>Multiplicative</span> <span class='hs-layout'>(</span><span class='hs-conid'>Tropical</span> <span class='hs-varid'>a</span><span class='hs-layout'>)</span> <span class='hs-keyword'>where</span>
+<a name="line-79"></a>    <span class='hs-varid'>one</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>point</span> <span class='hs-varop'>$</span> <span class='hs-varid'>fromInteger</span> <span class='hs-num'>0</span>
+<a name="line-80"></a>    <span class='hs-conid'>Tropical</span> <span class='hs-conid'>Nothing</span> <span class='hs-varop'>`times`</span> <span class='hs-keyword'>_</span>       <span class='hs-keyglyph'>=</span> <span class='hs-varid'>infinity</span>
+<a name="line-81"></a>    <span class='hs-conid'>Tropical</span> <span class='hs-layout'>(</span><span class='hs-conid'>Just</span> <span class='hs-varid'>a</span><span class='hs-layout'>)</span> <span class='hs-varop'>`times`</span> <span class='hs-conid'>Tropical</span> <span class='hs-layout'>(</span><span class='hs-conid'>Just</span> <span class='hs-varid'>b</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>point</span> <span class='hs-layout'>(</span><span class='hs-varid'>a</span> <span class='hs-varop'>+</span> <span class='hs-varid'>b</span><span class='hs-layout'>)</span>
+<a name="line-82"></a>    <span class='hs-keyword'>_</span>  <span class='hs-varop'>`times`</span> <span class='hs-conid'>Tropical</span> <span class='hs-conid'>Nothing</span>      <span class='hs-keyglyph'>=</span> <span class='hs-varid'>infinity</span>
+<a name="line-83"></a>
+<a name="line-84"></a><span class='hs-keyword'>instance</span> <span class='hs-layout'>(</span><span class='hs-conid'>Ord</span> <span class='hs-varid'>a</span><span class='hs-layout'>,</span> <span class='hs-conid'>Num</span> <span class='hs-varid'>a</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>Ringoid</span> <span class='hs-layout'>(</span><span class='hs-conid'>Tropical</span> <span class='hs-varid'>a</span><span class='hs-layout'>)</span>
+<a name="line-85"></a><span class='hs-keyword'>instance</span> <span class='hs-layout'>(</span><span class='hs-conid'>Ord</span> <span class='hs-varid'>a</span><span class='hs-layout'>,</span> <span class='hs-conid'>Num</span> <span class='hs-varid'>a</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>LeftSemiNearRing</span> <span class='hs-layout'>(</span><span class='hs-conid'>Tropical</span> <span class='hs-varid'>a</span><span class='hs-layout'>)</span>
+<a name="line-86"></a><span class='hs-keyword'>instance</span> <span class='hs-layout'>(</span><span class='hs-conid'>Ord</span> <span class='hs-varid'>a</span><span class='hs-layout'>,</span> <span class='hs-conid'>Num</span> <span class='hs-varid'>a</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>RightSemiNearRing</span> <span class='hs-layout'>(</span><span class='hs-conid'>Tropical</span> <span class='hs-varid'>a</span><span class='hs-layout'>)</span>
+<a name="line-87"></a><span class='hs-keyword'>instance</span> <span class='hs-layout'>(</span><span class='hs-conid'>Ord</span> <span class='hs-varid'>a</span><span class='hs-layout'>,</span> <span class='hs-conid'>Num</span> <span class='hs-varid'>a</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>SemiRing</span> <span class='hs-layout'>(</span><span class='hs-conid'>Tropical</span> <span class='hs-varid'>a</span><span class='hs-layout'>)</span>
+<a name="line-88"></a>
+<a name="line-89"></a><span class='hs-keyword'>instance</span> <span class='hs-layout'>(</span><span class='hs-conid'>Ord</span> <span class='hs-varid'>a</span><span class='hs-layout'>,</span> <span class='hs-conid'>Num</span> <span class='hs-varid'>a</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>Module</span> <span class='hs-layout'>(</span><span class='hs-conid'>Tropical</span> <span class='hs-varid'>a</span><span class='hs-layout'>)</span> <span class='hs-layout'>(</span><span class='hs-conid'>Tropical</span> <span class='hs-varid'>a</span><span class='hs-layout'>)</span>
+<a name="line-90"></a><span class='hs-keyword'>instance</span> <span class='hs-layout'>(</span><span class='hs-conid'>Ord</span> <span class='hs-varid'>a</span><span class='hs-layout'>,</span> <span class='hs-conid'>Num</span> <span class='hs-varid'>a</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>LeftModule</span> <span class='hs-layout'>(</span><span class='hs-conid'>Tropical</span> <span class='hs-varid'>a</span><span class='hs-layout'>)</span> <span class='hs-layout'>(</span><span class='hs-conid'>Tropical</span> <span class='hs-varid'>a</span><span class='hs-layout'>)</span> <span class='hs-keyword'>where</span> <span class='hs-layout'>(</span><span class='hs-varop'>*.</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>times</span>
+<a name="line-91"></a><span class='hs-keyword'>instance</span> <span class='hs-layout'>(</span><span class='hs-conid'>Ord</span> <span class='hs-varid'>a</span><span class='hs-layout'>,</span> <span class='hs-conid'>Num</span> <span class='hs-varid'>a</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>RightModule</span> <span class='hs-layout'>(</span><span class='hs-conid'>Tropical</span> <span class='hs-varid'>a</span><span class='hs-layout'>)</span> <span class='hs-layout'>(</span><span class='hs-conid'>Tropical</span> <span class='hs-varid'>a</span><span class='hs-layout'>)</span> <span class='hs-keyword'>where</span> <span class='hs-layout'>(</span><span class='hs-varop'>.*</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>times</span>
+<a name="line-92"></a><span class='hs-keyword'>instance</span> <span class='hs-layout'>(</span><span class='hs-conid'>Ord</span> <span class='hs-varid'>a</span><span class='hs-layout'>,</span> <span class='hs-conid'>Num</span> <span class='hs-varid'>a</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>Bimodule</span> <span class='hs-layout'>(</span><span class='hs-conid'>Tropical</span> <span class='hs-varid'>a</span><span class='hs-layout'>)</span> <span class='hs-layout'>(</span><span class='hs-conid'>Tropical</span> <span class='hs-varid'>a</span><span class='hs-layout'>)</span>
+<a name="line-93"></a>
+<a name="line-94"></a><span class='hs-keyword'>instance</span> <span class='hs-layout'>(</span><span class='hs-conid'>Ord</span> <span class='hs-varid'>a</span><span class='hs-layout'>,</span> <span class='hs-conid'>Num</span> <span class='hs-varid'>a</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>Module</span> <span class='hs-conid'>Natural</span> <span class='hs-layout'>(</span><span class='hs-conid'>Tropical</span> <span class='hs-varid'>a</span><span class='hs-layout'>)</span>
+<a name="line-95"></a><span class='hs-keyword'>instance</span> <span class='hs-layout'>(</span><span class='hs-conid'>Ord</span> <span class='hs-varid'>a</span><span class='hs-layout'>,</span> <span class='hs-conid'>Num</span> <span class='hs-varid'>a</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>LeftModule</span> <span class='hs-conid'>Natural</span> <span class='hs-layout'>(</span><span class='hs-conid'>Tropical</span> <span class='hs-varid'>a</span><span class='hs-layout'>)</span> <span class='hs-keyword'>where</span> <span class='hs-layout'>(</span><span class='hs-varop'>*.</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>flip</span> <span class='hs-conid'>Monoid</span><span class='hs-varop'>.</span><span class='hs-varid'>replicate</span>
+<a name="line-96"></a><span class='hs-keyword'>instance</span> <span class='hs-layout'>(</span><span class='hs-conid'>Ord</span> <span class='hs-varid'>a</span><span class='hs-layout'>,</span> <span class='hs-conid'>Num</span> <span class='hs-varid'>a</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>RightModule</span> <span class='hs-conid'>Natural</span> <span class='hs-layout'>(</span><span class='hs-conid'>Tropical</span> <span class='hs-varid'>a</span><span class='hs-layout'>)</span> <span class='hs-keyword'>where</span> <span class='hs-layout'>(</span><span class='hs-varop'>.*</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>Monoid</span><span class='hs-varop'>.</span><span class='hs-varid'>replicate</span>
+<a name="line-97"></a><span class='hs-keyword'>instance</span> <span class='hs-layout'>(</span><span class='hs-conid'>Ord</span> <span class='hs-varid'>a</span><span class='hs-layout'>,</span> <span class='hs-conid'>Num</span> <span class='hs-varid'>a</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>Bimodule</span> <span class='hs-conid'>Natural</span> <span class='hs-layout'>(</span><span class='hs-conid'>Tropical</span> <span class='hs-varid'>a</span><span class='hs-layout'>)</span>
hunk ./doc/html/monoids/src/Data-Ring-Sugar.html 27
-<a name="line-19"></a>    <span class='hs-layout'>,</span> <span class='hs-keyword'>module</span> <span class='hs-conid'>Data</span><span class='hs-varop'>.</span><span class='hs-conid'>Ring</span><span class='hs-varop'>.</span><span class='hs-conid'>Semi</span><span class='hs-varop'>.</span><span class='hs-conid'>Near</span>
-<a name="line-20"></a>    <span class='hs-layout'>)</span> <span class='hs-keyword'>where</span>
-<a name="line-21"></a>
-<a name="line-22"></a><span class='hs-keyword'>import</span> <span class='hs-conid'>Data</span><span class='hs-varop'>.</span><span class='hs-conid'>Monoid</span><span class='hs-varop'>.</span><span class='hs-conid'>Multiplicative</span><span class='hs-varop'>.</span><span class='hs-conid'>Sugar</span>
-<a name="line-23"></a><span class='hs-keyword'>import</span> <span class='hs-conid'>Data</span><span class='hs-varop'>.</span><span class='hs-conid'>Ring</span><span class='hs-varop'>.</span><span class='hs-conid'>Semi</span><span class='hs-varop'>.</span><span class='hs-conid'>Near</span>
+<a name="line-19"></a>    <span class='hs-layout'>,</span> <span class='hs-keyword'>module</span> <span class='hs-conid'>Data</span><span class='hs-varop'>.</span><span class='hs-conid'>Ring</span>
+<a name="line-20"></a>    <span class='hs-layout'>,</span> <span class='hs-keyword'>module</span> <span class='hs-conid'>Data</span><span class='hs-varop'>.</span><span class='hs-conid'>Ring</span><span class='hs-varop'>.</span><span class='hs-conid'>Semi</span><span class='hs-varop'>.</span><span class='hs-conid'>Natural</span>
+<a name="line-21"></a>    <span class='hs-layout'>,</span> <span class='hs-layout'>(</span><span class='hs-varop'>^^</span><span class='hs-layout'>)</span>
+<a name="line-22"></a>    <span class='hs-layout'>)</span> <span class='hs-keyword'>where</span>
+<a name="line-23"></a>
+<a name="line-24"></a><span class='hs-keyword'>import</span> <span class='hs-conid'>Prelude</span> <span class='hs-varid'>hiding</span> <span class='hs-layout'>(</span><span class='hs-layout'>(</span><span class='hs-varop'>^^</span><span class='hs-layout'>)</span><span class='hs-layout'>)</span>
+<a name="line-25"></a><span class='hs-keyword'>import</span> <span class='hs-conid'>Data</span><span class='hs-varop'>.</span><span class='hs-conid'>Monoid</span><span class='hs-varop'>.</span><span class='hs-conid'>Multiplicative</span><span class='hs-varop'>.</span><span class='hs-conid'>Sugar</span>
+<a name="line-26"></a><span class='hs-keyword'>import</span> <span class='hs-conid'>Data</span><span class='hs-varop'>.</span><span class='hs-conid'>Group</span><span class='hs-varop'>.</span><span class='hs-conid'>Combinators</span> <span class='hs-keyword'>as</span> <span class='hs-conid'>Group</span>
+<a name="line-27"></a><span class='hs-keyword'>import</span> <span class='hs-conid'>Data</span><span class='hs-varop'>.</span><span class='hs-conid'>Ring</span>
+<a name="line-28"></a><span class='hs-keyword'>import</span> <span class='hs-conid'>Data</span><span class='hs-varop'>.</span><span class='hs-conid'>Ring</span><span class='hs-varop'>.</span><span class='hs-conid'>Semi</span><span class='hs-varop'>.</span><span class='hs-conid'>Natural</span>
+<a name="line-29"></a>
+<a name="line-30"></a><a name="^^"></a><span class='hs-layout'>(</span><span class='hs-varop'>^^</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>::</span> <span class='hs-conid'>MultiplicativeGroup</span> <span class='hs-varid'>r</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-varid'>r</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-conid'>Integer</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-varid'>r</span>
+<a name="line-31"></a><a name="r"></a><span class='hs-definition'>r</span> <span class='hs-varop'>^^</span> <span class='hs-varid'>n</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>getLog</span> <span class='hs-layout'>(</span><span class='hs-conid'>Group</span><span class='hs-varop'>.</span><span class='hs-varid'>replicate</span> <span class='hs-layout'>(</span><span class='hs-conid'>Log</span> <span class='hs-varid'>r</span><span class='hs-layout'>)</span> <span class='hs-varid'>n</span><span class='hs-layout'>)</span>
+<a name="line-32"></a>
hunk ./doc/html/monoids/src/Data-Ring.html 9
-<pre><a name="line-1"></a><span class='hs-comment'>-----------------------------------------------------------------------------</span>
-<a name="line-2"></a><span class='hs-comment'>-- |</span>
-<a name="line-3"></a><span class='hs-comment'>-- Module      :  Data.Ring</span>
-<a name="line-4"></a><span class='hs-comment'>-- Copyright   :  (c) Edward Kmett 2009</span>
-<a name="line-5"></a><span class='hs-comment'>-- License     :  BSD-style</span>
-<a name="line-6"></a><span class='hs-comment'>-- Maintainer  :  ekmett@gmail.com</span>
-<a name="line-7"></a><span class='hs-comment'>-- Stability   :  experimental</span>
-<a name="line-8"></a><span class='hs-comment'>-- Portability :  portable (instances use MPTCs)</span>
-<a name="line-9"></a><span class='hs-comment'>--</span>
-<a name="line-10"></a><span class='hs-comment'>-----------------------------------------------------------------------------</span>
-<a name="line-11"></a>
-<a name="line-12"></a><span class='hs-keyword'>module</span> <span class='hs-conid'>Data</span><span class='hs-varop'>.</span><span class='hs-conid'>Ring</span>
-<a name="line-13"></a>    <span class='hs-layout'>(</span> <span class='hs-keyword'>module</span> <span class='hs-conid'>Data</span><span class='hs-varop'>.</span><span class='hs-conid'>Group</span>
-<a name="line-14"></a>    <span class='hs-layout'>,</span> <span class='hs-keyword'>module</span> <span class='hs-conid'>Data</span><span class='hs-varop'>.</span><span class='hs-conid'>Ring</span><span class='hs-varop'>.</span><span class='hs-conid'>Semi</span>
-<a name="line-15"></a>    <span class='hs-layout'>,</span> <span class='hs-conid'>Ring</span>
-<a name="line-16"></a>    <span class='hs-layout'>)</span> <span class='hs-keyword'>where</span>
-<a name="line-17"></a>
-<a name="line-18"></a><span class='hs-keyword'>import</span> <span class='hs-conid'>Data</span><span class='hs-varop'>.</span><span class='hs-conid'>Group</span>
-<a name="line-19"></a><span class='hs-keyword'>import</span> <span class='hs-conid'>Data</span><span class='hs-varop'>.</span><span class='hs-conid'>Ring</span><span class='hs-varop'>.</span><span class='hs-conid'>Semi</span>
-<a name="line-20"></a><span class='hs-keyword'>import</span> <span class='hs-conid'>Data</span><span class='hs-varop'>.</span><span class='hs-conid'>Monoid</span><span class='hs-varop'>.</span><span class='hs-conid'>Self</span>
-<a name="line-21"></a><span class='hs-keyword'>import</span> <span class='hs-conid'>Data</span><span class='hs-varop'>.</span><span class='hs-conid'>Monoid</span><span class='hs-varop'>.</span><span class='hs-conid'>FromString</span>
-<a name="line-22"></a>
-<a name="line-23"></a><a name="Ring"></a><span class='hs-keyword'>class</span> <span class='hs-layout'>(</span><span class='hs-conid'>Group</span> <span class='hs-varid'>a</span><span class='hs-layout'>,</span> <span class='hs-conid'>SemiRing</span> <span class='hs-varid'>a</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>Ring</span> <span class='hs-varid'>a</span>
-<a name="line-24"></a>
-<a name="line-25"></a><span class='hs-keyword'>instance</span> <span class='hs-conid'>Ring</span> <span class='hs-varid'>r</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>Ring</span> <span class='hs-layout'>(</span><span class='hs-conid'>Self</span> <span class='hs-varid'>r</span><span class='hs-layout'>)</span>
-<a name="line-26"></a><span class='hs-keyword'>instance</span> <span class='hs-conid'>Ring</span> <span class='hs-varid'>r</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>Ring</span> <span class='hs-layout'>(</span><span class='hs-conid'>FromString</span> <span class='hs-varid'>r</span><span class='hs-layout'>)</span>
-<a name="line-27"></a><span class='hs-keyword'>instance</span> <span class='hs-conid'>Ring</span> <span class='hs-varid'>r</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>Ring</span> <span class='hs-layout'>(</span><span class='hs-conid'>ReducedBy</span> <span class='hs-varid'>r</span> <span class='hs-varid'>s</span><span class='hs-layout'>)</span>
-<a name="line-28"></a><span class='hs-keyword'>instance</span> <span class='hs-conid'>Ring</span> <span class='hs-varid'>r</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>Ring</span> <span class='hs-layout'>(</span><span class='hs-conid'>Dual</span> <span class='hs-varid'>r</span><span class='hs-layout'>)</span>
+<pre><a name="line-1"></a><span class='hs-comment'>{-# OPTIONS_GHC -fno-warn-orphans #-}</span>
+<a name="line-2"></a><span class='hs-comment'>{-# LANGUAGE FlexibleInstances, MultiParamTypeClasses, UndecidableInstances #-}</span>
+<a name="line-3"></a><span class='hs-comment'>-----------------------------------------------------------------------------</span>
+<a name="line-4"></a><span class='hs-comment'>-- |</span>
+<a name="line-5"></a><span class='hs-comment'>-- Module      :  Data.Ring</span>
+<a name="line-6"></a><span class='hs-comment'>-- Copyright   :  (c) Edward Kmett 2009</span>
+<a name="line-7"></a><span class='hs-comment'>-- License     :  BSD-style</span>
+<a name="line-8"></a><span class='hs-comment'>-- Maintainer  :  ekmett@gmail.com</span>
+<a name="line-9"></a><span class='hs-comment'>-- Stability   :  experimental</span>
+<a name="line-10"></a><span class='hs-comment'>-- Portability :  portable (instances use MPTCs)</span>
+<a name="line-11"></a><span class='hs-comment'>--</span>
+<a name="line-12"></a><span class='hs-comment'>--</span>
+<a name="line-13"></a><span class='hs-comment'>-- Defines left- and right- seminearrings. Every 'MonadPlus' wrapped around</span>
+<a name="line-14"></a><span class='hs-comment'>-- a 'Monoid' qualifies due to the distributivity of (&gt;&gt;=) over 'mplus'.</span>
+<a name="line-15"></a><span class='hs-comment'>--</span>
+<a name="line-16"></a><span class='hs-comment'>-- See &lt;<a href="http://conway.rutgers.edu/~ccshan/wiki/blog/posts/WordNumbers1/">http://conway.rutgers.edu/~ccshan/wiki/blog/posts/WordNumbers1/</a>&gt;</span>
+<a name="line-17"></a><span class='hs-comment'>--</span>
+<a name="line-18"></a><span class='hs-comment'>-----------------------------------------------------------------------------</span>
+<a name="line-19"></a>
+<a name="line-20"></a><span class='hs-keyword'>module</span> <span class='hs-conid'>Data</span><span class='hs-varop'>.</span><span class='hs-conid'>Ring</span>
+<a name="line-21"></a>    <span class='hs-layout'>(</span> <span class='hs-keyword'>module</span> <span class='hs-conid'>Data</span><span class='hs-varop'>.</span><span class='hs-conid'>Group</span>
+<a name="line-22"></a>    <span class='hs-layout'>,</span> <span class='hs-conid'>Ringoid</span>
+<a name="line-23"></a>    <span class='hs-layout'>,</span> <span class='hs-conid'>LeftSemiNearRing</span>
+<a name="line-24"></a>    <span class='hs-layout'>,</span> <span class='hs-conid'>RightSemiNearRing</span>
+<a name="line-25"></a>    <span class='hs-layout'>,</span> <span class='hs-conid'>SemiRing</span>
+<a name="line-26"></a>    <span class='hs-layout'>,</span> <span class='hs-conid'>Ring</span>
+<a name="line-27"></a>    <span class='hs-layout'>,</span> <span class='hs-conid'>DivisionRing</span>
+<a name="line-28"></a>    <span class='hs-layout'>,</span> <span class='hs-conid'>Field</span>
+<a name="line-29"></a>    <span class='hs-layout'>)</span> <span class='hs-keyword'>where</span>
+<a name="line-30"></a>
+<a name="line-31"></a><span class='hs-keyword'>import</span> <span class='hs-conid'>Data</span><span class='hs-varop'>.</span><span class='hs-conid'>Group</span>
+<a name="line-32"></a><span class='hs-keyword'>import</span> <span class='hs-conid'>Data</span><span class='hs-varop'>.</span><span class='hs-conid'>Monoid</span><span class='hs-varop'>.</span><span class='hs-conid'>Self</span>
+<a name="line-33"></a>
+<a name="line-34"></a><span class='hs-cpp'>#ifdef X_OverloadedStrings</span>
+<a name="line-35"></a><span class='hs-keyword'>import</span> <span class='hs-conid'>Data</span><span class='hs-varop'>.</span><span class='hs-conid'>Monoid</span><span class='hs-varop'>.</span><span class='hs-conid'>FromString</span>
+<a name="line-36"></a><span class='hs-cpp'>#endif</span>
+<a name="line-37"></a>
+<a name="line-38"></a><span class='hs-cpp'>#ifdef M_MTL</span>
+<a name="line-39"></a><span class='hs-keyword'>import</span> <span class='hs-conid'>Control</span><span class='hs-varop'>.</span><span class='hs-conid'>Monad</span><span class='hs-varop'>.</span><span class='hs-conid'>Reader</span>
+<a name="line-40"></a><span class='hs-keyword'>import</span> <span class='hs-keyword'>qualified</span> <span class='hs-conid'>Control</span><span class='hs-varop'>.</span><span class='hs-conid'>Monad</span><span class='hs-varop'>.</span><span class='hs-conid'>RWS</span><span class='hs-varop'>.</span><span class='hs-conid'>Lazy</span> <span class='hs-keyword'>as</span> <span class='hs-conid'>LRWS</span>
+<a name="line-41"></a><span class='hs-keyword'>import</span> <span class='hs-keyword'>qualified</span> <span class='hs-conid'>Control</span><span class='hs-varop'>.</span><span class='hs-conid'>Monad</span><span class='hs-varop'>.</span><span class='hs-conid'>RWS</span><span class='hs-varop'>.</span><span class='hs-conid'>Strict</span> <span class='hs-keyword'>as</span> <span class='hs-conid'>SRWS</span>
+<a name="line-42"></a><span class='hs-keyword'>import</span> <span class='hs-keyword'>qualified</span> <span class='hs-conid'>Control</span><span class='hs-varop'>.</span><span class='hs-conid'>Monad</span><span class='hs-varop'>.</span><span class='hs-conid'>State</span><span class='hs-varop'>.</span><span class='hs-conid'>Lazy</span> <span class='hs-keyword'>as</span> <span class='hs-conid'>LState</span>
+<a name="line-43"></a><span class='hs-keyword'>import</span> <span class='hs-keyword'>qualified</span> <span class='hs-conid'>Control</span><span class='hs-varop'>.</span><span class='hs-conid'>Monad</span><span class='hs-varop'>.</span><span class='hs-conid'>State</span><span class='hs-varop'>.</span><span class='hs-conid'>Strict</span> <span class='hs-keyword'>as</span> <span class='hs-conid'>SState</span>
+<a name="line-44"></a><span class='hs-keyword'>import</span> <span class='hs-keyword'>qualified</span> <span class='hs-conid'>Control</span><span class='hs-varop'>.</span><span class='hs-conid'>Monad</span><span class='hs-varop'>.</span><span class='hs-conid'>Writer</span><span class='hs-varop'>.</span><span class='hs-conid'>Lazy</span> <span class='hs-keyword'>as</span> <span class='hs-conid'>LWriter</span>
+<a name="line-45"></a><span class='hs-keyword'>import</span> <span class='hs-keyword'>qualified</span> <span class='hs-conid'>Control</span><span class='hs-varop'>.</span><span class='hs-conid'>Monad</span><span class='hs-varop'>.</span><span class='hs-conid'>Writer</span><span class='hs-varop'>.</span><span class='hs-conid'>Strict</span> <span class='hs-keyword'>as</span> <span class='hs-conid'>SWriter</span>
+<a name="line-46"></a><span class='hs-cpp'>#endif</span>
+<a name="line-47"></a>
+<a name="line-48"></a><span class='hs-cpp'>#ifdef M_FINGERTREE</span>
+<a name="line-49"></a><span class='hs-keyword'>import</span> <span class='hs-conid'>Data</span><span class='hs-varop'>.</span><span class='hs-conid'>FingerTree</span>
+<a name="line-50"></a><span class='hs-cpp'>#endif</span>
+<a name="line-51"></a>
+<a name="line-52"></a><span class='hs-cpp'>#ifdef M_CONTAINERS</span>
+<a name="line-53"></a><span class='hs-keyword'>import</span> <span class='hs-keyword'>qualified</span> <span class='hs-conid'>Data</span><span class='hs-varop'>.</span><span class='hs-conid'>Sequence</span> <span class='hs-keyword'>as</span> <span class='hs-conid'>Seq</span>
+<a name="line-54"></a><span class='hs-keyword'>import</span> <span class='hs-conid'>Data</span><span class='hs-varop'>.</span><span class='hs-conid'>Sequence</span> <span class='hs-layout'>(</span><span class='hs-conid'>Seq</span><span class='hs-layout'>)</span>
+<a name="line-55"></a><span class='hs-cpp'>#endif</span>
+<a name="line-56"></a>
+<a name="line-57"></a><span class='hs-cpp'>#ifdef M_PARSEC</span>
+<a name="line-58"></a><span class='hs-keyword'>import</span> <span class='hs-conid'>Text</span><span class='hs-varop'>.</span><span class='hs-conid'>Parsec</span><span class='hs-varop'>.</span><span class='hs-conid'>Prim</span>
+<a name="line-59"></a><span class='hs-cpp'>#endif</span>
+<a name="line-60"></a>
+<a name="line-61"></a><span class='hs-cpp'>#ifdef X_OverloadedStrings</span>
+<a name="line-62"></a><span class='hs-keyword'>import</span> <span class='hs-conid'>Data</span><span class='hs-varop'>.</span><span class='hs-conid'>Monoid</span><span class='hs-varop'>.</span><span class='hs-conid'>FromString</span>
+<a name="line-63"></a><span class='hs-cpp'>#endif</span>
+<a name="line-64"></a>
+<a name="line-65"></a><a name="Ringoid"></a><span class='hs-comment'>-- | @0@ annihilates `times`</span>
+<a name="line-66"></a><a name="Ringoid"></a><span class='hs-keyword'>class</span> <span class='hs-layout'>(</span><span class='hs-conid'>Multiplicative</span> <span class='hs-varid'>m</span><span class='hs-layout'>,</span> <span class='hs-conid'>Monoid</span> <span class='hs-varid'>m</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>Ringoid</span> <span class='hs-varid'>m</span>
+<a name="line-67"></a><span class='hs-keyword'>instance</span> <span class='hs-conid'>Ringoid</span> <span class='hs-conid'>Integer</span>
+<a name="line-68"></a><span class='hs-keyword'>instance</span> <span class='hs-conid'>Ringoid</span> <span class='hs-conid'>Int</span>
+<a name="line-69"></a><span class='hs-keyword'>instance</span> <span class='hs-conid'>Ringoid</span> <span class='hs-varid'>m</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>Ringoid</span> <span class='hs-layout'>(</span><span class='hs-conid'>Self</span> <span class='hs-varid'>m</span><span class='hs-layout'>)</span>
+<a name="line-70"></a><span class='hs-keyword'>instance</span> <span class='hs-conid'>Ringoid</span> <span class='hs-varid'>m</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>Ringoid</span> <span class='hs-layout'>(</span><span class='hs-conid'>Dual</span> <span class='hs-varid'>m</span><span class='hs-layout'>)</span>
+<a name="line-71"></a><span class='hs-keyword'>instance</span> <span class='hs-conid'>Monoid</span> <span class='hs-varid'>m</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>Ringoid</span> <span class='hs-keyglyph'>[</span><span class='hs-varid'>m</span><span class='hs-keyglyph'>]</span>
+<a name="line-72"></a><span class='hs-keyword'>instance</span> <span class='hs-conid'>Monoid</span> <span class='hs-varid'>m</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>Ringoid</span> <span class='hs-layout'>(</span><span class='hs-conid'>Maybe</span> <span class='hs-varid'>m</span><span class='hs-layout'>)</span>
+<a name="line-73"></a>
+<a name="line-74"></a><a name="LeftSemiNearRing"></a><span class='hs-comment'>-- | @a * (b + c) = (a * b) + (a * c)@</span>
+<a name="line-75"></a><a name="LeftSemiNearRing"></a><span class='hs-keyword'>class</span> <span class='hs-conid'>Ringoid</span> <span class='hs-varid'>m</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>LeftSemiNearRing</span> <span class='hs-varid'>m</span> 
+<a name="line-76"></a><span class='hs-keyword'>instance</span> <span class='hs-conid'>LeftSemiNearRing</span> <span class='hs-varid'>m</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>LeftSemiNearRing</span> <span class='hs-layout'>(</span><span class='hs-conid'>Self</span> <span class='hs-varid'>m</span><span class='hs-layout'>)</span>
+<a name="line-77"></a><span class='hs-keyword'>instance</span> <span class='hs-conid'>RightSemiNearRing</span> <span class='hs-varid'>m</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>LeftSemiNearRing</span> <span class='hs-layout'>(</span><span class='hs-conid'>Dual</span> <span class='hs-varid'>m</span><span class='hs-layout'>)</span>
+<a name="line-78"></a>
+<a name="line-79"></a><a name="RightSemiNearRing"></a><span class='hs-comment'>-- | @(a + b) * c = (a * c) + (b * c)@</span>
+<a name="line-80"></a><a name="RightSemiNearRing"></a><span class='hs-keyword'>class</span> <span class='hs-conid'>Ringoid</span> <span class='hs-varid'>m</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>RightSemiNearRing</span> <span class='hs-varid'>m</span> 
+<a name="line-81"></a><span class='hs-keyword'>instance</span> <span class='hs-conid'>RightSemiNearRing</span> <span class='hs-varid'>m</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>RightSemiNearRing</span> <span class='hs-layout'>(</span><span class='hs-conid'>Self</span> <span class='hs-varid'>m</span><span class='hs-layout'>)</span>
+<a name="line-82"></a><span class='hs-keyword'>instance</span> <span class='hs-conid'>LeftSemiNearRing</span> <span class='hs-varid'>m</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>RightSemiNearRing</span> <span class='hs-layout'>(</span><span class='hs-conid'>Dual</span> <span class='hs-varid'>m</span><span class='hs-layout'>)</span>
+<a name="line-83"></a><span class='hs-keyword'>instance</span> <span class='hs-conid'>Monoid</span> <span class='hs-varid'>m</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>RightSemiNearRing</span> <span class='hs-keyglyph'>[</span><span class='hs-varid'>m</span><span class='hs-keyglyph'>]</span>
+<a name="line-84"></a><span class='hs-keyword'>instance</span> <span class='hs-conid'>Monoid</span> <span class='hs-varid'>m</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>RightSemiNearRing</span> <span class='hs-layout'>(</span><span class='hs-conid'>Maybe</span> <span class='hs-varid'>m</span><span class='hs-layout'>)</span>
+<a name="line-85"></a>
+<a name="line-86"></a><a name="SemiRing"></a><span class='hs-comment'>-- | A 'SemiRing' is an instance of both 'Multiplicative' and 'Monoid' where </span>
+<a name="line-87"></a><a name="SemiRing"></a><span class='hs-comment'>--   'times' distributes over 'plus'.</span>
+<a name="line-88"></a><a name="SemiRing"></a><span class='hs-keyword'>class</span> <span class='hs-layout'>(</span><span class='hs-conid'>RightSemiNearRing</span> <span class='hs-varid'>a</span><span class='hs-layout'>,</span> <span class='hs-conid'>LeftSemiNearRing</span> <span class='hs-varid'>a</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>SemiRing</span> <span class='hs-varid'>a</span>
+<a name="line-89"></a><span class='hs-keyword'>instance</span> <span class='hs-conid'>SemiRing</span> <span class='hs-varid'>r</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>SemiRing</span> <span class='hs-layout'>(</span><span class='hs-conid'>Self</span> <span class='hs-varid'>r</span><span class='hs-layout'>)</span>
+<a name="line-90"></a><span class='hs-keyword'>instance</span> <span class='hs-conid'>SemiRing</span> <span class='hs-varid'>r</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>SemiRing</span> <span class='hs-layout'>(</span><span class='hs-conid'>Dual</span> <span class='hs-varid'>r</span><span class='hs-layout'>)</span>
+<a name="line-91"></a>
+<a name="line-92"></a><a name="Ring"></a><span class='hs-keyword'>class</span> <span class='hs-layout'>(</span><span class='hs-conid'>Group</span> <span class='hs-varid'>a</span><span class='hs-layout'>,</span> <span class='hs-conid'>SemiRing</span> <span class='hs-varid'>a</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>Ring</span> <span class='hs-varid'>a</span>
+<a name="line-93"></a><span class='hs-keyword'>instance</span> <span class='hs-conid'>Ring</span> <span class='hs-varid'>r</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>Ring</span> <span class='hs-layout'>(</span><span class='hs-conid'>Self</span> <span class='hs-varid'>r</span><span class='hs-layout'>)</span>
+<a name="line-94"></a><span class='hs-keyword'>instance</span> <span class='hs-conid'>Ring</span> <span class='hs-varid'>r</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>Ring</span> <span class='hs-layout'>(</span><span class='hs-conid'>Dual</span> <span class='hs-varid'>r</span><span class='hs-layout'>)</span>
+<a name="line-95"></a>
+<a name="line-96"></a><a name="DivisionRing"></a><span class='hs-keyword'>class</span> <span class='hs-layout'>(</span><span class='hs-conid'>Ring</span> <span class='hs-varid'>a</span><span class='hs-layout'>,</span> <span class='hs-conid'>MultiplicativeGroup</span> <span class='hs-varid'>a</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>DivisionRing</span> <span class='hs-varid'>a</span>
+<a name="line-97"></a><span class='hs-keyword'>instance</span> <span class='hs-conid'>DivisionRing</span> <span class='hs-varid'>r</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>DivisionRing</span> <span class='hs-layout'>(</span><span class='hs-conid'>Self</span> <span class='hs-varid'>r</span><span class='hs-layout'>)</span>
+<a name="line-98"></a><span class='hs-keyword'>instance</span> <span class='hs-conid'>DivisionRing</span> <span class='hs-varid'>r</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>DivisionRing</span> <span class='hs-layout'>(</span><span class='hs-conid'>Dual</span> <span class='hs-varid'>r</span><span class='hs-layout'>)</span>
+<a name="line-99"></a>
+<a name="line-100"></a><a name="Field"></a><span class='hs-keyword'>class</span> <span class='hs-layout'>(</span><span class='hs-conid'>Ring</span> <span class='hs-varid'>a</span><span class='hs-layout'>,</span> <span class='hs-conid'>MultiplicativeGroup</span> <span class='hs-varid'>a</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>Field</span> <span class='hs-varid'>a</span>
+<a name="line-101"></a><span class='hs-keyword'>instance</span> <span class='hs-conid'>Field</span> <span class='hs-varid'>f</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>Field</span> <span class='hs-layout'>(</span><span class='hs-conid'>Dual</span> <span class='hs-varid'>f</span><span class='hs-layout'>)</span>
+<a name="line-102"></a><span class='hs-keyword'>instance</span> <span class='hs-conid'>Field</span> <span class='hs-varid'>f</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>Field</span> <span class='hs-layout'>(</span><span class='hs-conid'>Self</span> <span class='hs-varid'>f</span><span class='hs-layout'>)</span>
+<a name="line-103"></a>
+<a name="line-104"></a><span class='hs-cpp'>#ifdef M_REFLECTION</span>
+<a name="line-105"></a><span class='hs-keyword'>instance</span> <span class='hs-conid'>Ringoid</span> <span class='hs-varid'>m</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>Ringoid</span> <span class='hs-layout'>(</span><span class='hs-conid'>ReducedBy</span> <span class='hs-varid'>m</span> <span class='hs-varid'>s</span><span class='hs-layout'>)</span>
+<a name="line-106"></a><span class='hs-keyword'>instance</span> <span class='hs-conid'>LeftSemiNearRing</span> <span class='hs-varid'>m</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>LeftSemiNearRing</span> <span class='hs-layout'>(</span><span class='hs-conid'>ReducedBy</span> <span class='hs-varid'>m</span> <span class='hs-varid'>s</span><span class='hs-layout'>)</span>
+<a name="line-107"></a><span class='hs-keyword'>instance</span> <span class='hs-conid'>RightSemiNearRing</span> <span class='hs-varid'>m</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>RightSemiNearRing</span> <span class='hs-layout'>(</span><span class='hs-conid'>ReducedBy</span> <span class='hs-varid'>m</span> <span class='hs-varid'>s</span><span class='hs-layout'>)</span>
+<a name="line-108"></a><span class='hs-keyword'>instance</span> <span class='hs-conid'>SemiRing</span> <span class='hs-varid'>r</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>SemiRing</span> <span class='hs-layout'>(</span><span class='hs-conid'>ReducedBy</span> <span class='hs-varid'>r</span> <span class='hs-varid'>s</span><span class='hs-layout'>)</span>
+<a name="line-109"></a><span class='hs-keyword'>instance</span> <span class='hs-conid'>Ring</span> <span class='hs-varid'>r</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>Ring</span> <span class='hs-layout'>(</span><span class='hs-conid'>ReducedBy</span> <span class='hs-varid'>r</span> <span class='hs-varid'>s</span><span class='hs-layout'>)</span>
+<a name="line-110"></a><span class='hs-keyword'>instance</span> <span class='hs-conid'>DivisionRing</span> <span class='hs-varid'>r</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>DivisionRing</span> <span class='hs-layout'>(</span><span class='hs-conid'>ReducedBy</span> <span class='hs-varid'>r</span> <span class='hs-varid'>s</span><span class='hs-layout'>)</span>
+<a name="line-111"></a><span class='hs-keyword'>instance</span> <span class='hs-conid'>Field</span> <span class='hs-varid'>f</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>Field</span> <span class='hs-layout'>(</span><span class='hs-conid'>ReducedBy</span> <span class='hs-varid'>f</span> <span class='hs-varid'>s</span><span class='hs-layout'>)</span>
+<a name="line-112"></a><span class='hs-cpp'>#endif</span>
+<a name="line-113"></a>
+<a name="line-114"></a><span class='hs-cpp'>#ifdef M_PARSEC</span>
+<a name="line-115"></a><span class='hs-keyword'>instance</span> <span class='hs-layout'>(</span><span class='hs-conid'>Stream</span> <span class='hs-varid'>s</span> <span class='hs-varid'>m</span> <span class='hs-varid'>t</span><span class='hs-layout'>,</span> <span class='hs-conid'>Monoid</span> <span class='hs-varid'>a</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>Ringoid</span> <span class='hs-layout'>(</span><span class='hs-conid'>ParsecT</span> <span class='hs-varid'>s</span> <span class='hs-varid'>u</span> <span class='hs-varid'>m</span> <span class='hs-varid'>a</span><span class='hs-layout'>)</span>
+<a name="line-116"></a><span class='hs-keyword'>instance</span> <span class='hs-layout'>(</span><span class='hs-conid'>Stream</span> <span class='hs-varid'>s</span> <span class='hs-varid'>m</span> <span class='hs-varid'>t</span><span class='hs-layout'>,</span> <span class='hs-conid'>Monoid</span> <span class='hs-varid'>a</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>RightSemiNearRing</span> <span class='hs-layout'>(</span><span class='hs-conid'>ParsecT</span> <span class='hs-varid'>s</span> <span class='hs-varid'>u</span> <span class='hs-varid'>m</span> <span class='hs-varid'>a</span><span class='hs-layout'>)</span>
+<a name="line-117"></a><span class='hs-cpp'>#endif</span>
+<a name="line-118"></a>
+<a name="line-119"></a><span class='hs-cpp'>#ifdef M_MTL</span>
+<a name="line-120"></a><span class='hs-keyword'>instance</span> <span class='hs-layout'>(</span><span class='hs-conid'>MonadPlus</span> <span class='hs-varid'>m</span><span class='hs-layout'>,</span> <span class='hs-conid'>Monoid</span> <span class='hs-varid'>n</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>Ringoid</span> <span class='hs-layout'>(</span><span class='hs-conid'>SState</span><span class='hs-varop'>.</span><span class='hs-conid'>StateT</span> <span class='hs-varid'>s</span> <span class='hs-varid'>m</span> <span class='hs-varid'>n</span><span class='hs-layout'>)</span>
+<a name="line-121"></a><span class='hs-keyword'>instance</span> <span class='hs-layout'>(</span><span class='hs-conid'>MonadPlus</span> <span class='hs-varid'>m</span><span class='hs-layout'>,</span> <span class='hs-conid'>Monoid</span> <span class='hs-varid'>n</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>Ringoid</span> <span class='hs-layout'>(</span><span class='hs-conid'>LState</span><span class='hs-varop'>.</span><span class='hs-conid'>StateT</span> <span class='hs-varid'>s</span> <span class='hs-varid'>m</span> <span class='hs-varid'>n</span><span class='hs-layout'>)</span>
+<a name="line-122"></a><span class='hs-keyword'>instance</span> <span class='hs-layout'>(</span><span class='hs-conid'>MonadPlus</span> <span class='hs-varid'>m</span><span class='hs-layout'>,</span> <span class='hs-conid'>Monoid</span> <span class='hs-varid'>n</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>Ringoid</span> <span class='hs-layout'>(</span><span class='hs-conid'>ReaderT</span> <span class='hs-varid'>e</span> <span class='hs-varid'>m</span> <span class='hs-varid'>n</span><span class='hs-layout'>)</span>
+<a name="line-123"></a><span class='hs-keyword'>instance</span> <span class='hs-layout'>(</span><span class='hs-conid'>MonadPlus</span> <span class='hs-varid'>m</span><span class='hs-layout'>,</span> <span class='hs-conid'>Monoid</span> <span class='hs-varid'>w</span><span class='hs-layout'>,</span> <span class='hs-conid'>Monoid</span> <span class='hs-varid'>n</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>Ringoid</span> <span class='hs-layout'>(</span><span class='hs-conid'>SRWS</span><span class='hs-varop'>.</span><span class='hs-conid'>RWST</span> <span class='hs-varid'>r</span> <span class='hs-varid'>w</span> <span class='hs-varid'>s</span> <span class='hs-varid'>m</span> <span class='hs-varid'>n</span><span class='hs-layout'>)</span>
+<a name="line-124"></a><span class='hs-keyword'>instance</span> <span class='hs-layout'>(</span><span class='hs-conid'>MonadPlus</span> <span class='hs-varid'>m</span><span class='hs-layout'>,</span> <span class='hs-conid'>Monoid</span> <span class='hs-varid'>w</span><span class='hs-layout'>,</span> <span class='hs-conid'>Monoid</span> <span class='hs-varid'>n</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>Ringoid</span> <span class='hs-layout'>(</span><span class='hs-conid'>LRWS</span><span class='hs-varop'>.</span><span class='hs-conid'>RWST</span> <span class='hs-varid'>r</span> <span class='hs-varid'>w</span> <span class='hs-varid'>s</span> <span class='hs-varid'>m</span> <span class='hs-varid'>n</span><span class='hs-layout'>)</span>
+<a name="line-125"></a><span class='hs-keyword'>instance</span> <span class='hs-layout'>(</span><span class='hs-conid'>MonadPlus</span> <span class='hs-varid'>m</span><span class='hs-layout'>,</span> <span class='hs-conid'>Monoid</span> <span class='hs-varid'>w</span><span class='hs-layout'>,</span> <span class='hs-conid'>Monoid</span> <span class='hs-varid'>n</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>Ringoid</span> <span class='hs-layout'>(</span><span class='hs-conid'>SWriter</span><span class='hs-varop'>.</span><span class='hs-conid'>WriterT</span> <span class='hs-varid'>w</span> <span class='hs-varid'>m</span> <span class='hs-varid'>n</span><span class='hs-layout'>)</span>
+<a name="line-126"></a><span class='hs-keyword'>instance</span> <span class='hs-layout'>(</span><span class='hs-conid'>MonadPlus</span> <span class='hs-varid'>m</span><span class='hs-layout'>,</span> <span class='hs-conid'>Monoid</span> <span class='hs-varid'>w</span><span class='hs-layout'>,</span> <span class='hs-conid'>Monoid</span> <span class='hs-varid'>n</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>Ringoid</span> <span class='hs-layout'>(</span><span class='hs-conid'>LWriter</span><span class='hs-varop'>.</span><span class='hs-conid'>WriterT</span> <span class='hs-varid'>w</span> <span class='hs-varid'>m</span> <span class='hs-varid'>n</span><span class='hs-layout'>)</span>
+<a name="line-127"></a><span class='hs-keyword'>instance</span> <span class='hs-layout'>(</span><span class='hs-conid'>MonadPlus</span> <span class='hs-varid'>m</span><span class='hs-layout'>,</span> <span class='hs-conid'>Monoid</span> <span class='hs-varid'>n</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>RightSemiNearRing</span> <span class='hs-layout'>(</span><span class='hs-conid'>SState</span><span class='hs-varop'>.</span><span class='hs-conid'>StateT</span> <span class='hs-varid'>s</span> <span class='hs-varid'>m</span> <span class='hs-varid'>n</span><span class='hs-layout'>)</span>
+<a name="line-128"></a><span class='hs-keyword'>instance</span> <span class='hs-layout'>(</span><span class='hs-conid'>MonadPlus</span> <span class='hs-varid'>m</span><span class='hs-layout'>,</span> <span class='hs-conid'>Monoid</span> <span class='hs-varid'>n</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>RightSemiNearRing</span> <span class='hs-layout'>(</span><span class='hs-conid'>LState</span><span class='hs-varop'>.</span><span class='hs-conid'>StateT</span> <span class='hs-varid'>s</span> <span class='hs-varid'>m</span> <span class='hs-varid'>n</span><span class='hs-layout'>)</span>
+<a name="line-129"></a><span class='hs-keyword'>instance</span> <span class='hs-layout'>(</span><span class='hs-conid'>MonadPlus</span> <span class='hs-varid'>m</span><span class='hs-layout'>,</span> <span class='hs-conid'>Monoid</span> <span class='hs-varid'>n</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>RightSemiNearRing</span> <span class='hs-layout'>(</span><span class='hs-conid'>ReaderT</span> <span class='hs-varid'>e</span> <span class='hs-varid'>m</span> <span class='hs-varid'>n</span><span class='hs-layout'>)</span>
+<a name="line-130"></a><span class='hs-keyword'>instance</span> <span class='hs-layout'>(</span><span class='hs-conid'>MonadPlus</span> <span class='hs-varid'>m</span><span class='hs-layout'>,</span> <span class='hs-conid'>Monoid</span> <span class='hs-varid'>w</span><span class='hs-layout'>,</span> <span class='hs-conid'>Monoid</span> <span class='hs-varid'>n</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>RightSemiNearRing</span> <span class='hs-layout'>(</span><span class='hs-conid'>SRWS</span><span class='hs-varop'>.</span><span class='hs-conid'>RWST</span> <span class='hs-varid'>r</span> <span class='hs-varid'>w</span> <span class='hs-varid'>s</span> <span class='hs-varid'>m</span> <span class='hs-varid'>n</span><span class='hs-layout'>)</span>
+<a name="line-131"></a><span class='hs-keyword'>instance</span> <span class='hs-layout'>(</span><span class='hs-conid'>MonadPlus</span> <span class='hs-varid'>m</span><span class='hs-layout'>,</span> <span class='hs-conid'>Monoid</span> <span class='hs-varid'>w</span><span class='hs-layout'>,</span> <span class='hs-conid'>Monoid</span> <span class='hs-varid'>n</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>RightSemiNearRing</span> <span class='hs-layout'>(</span><span class='hs-conid'>LRWS</span><span class='hs-varop'>.</span><span class='hs-conid'>RWST</span> <span class='hs-varid'>r</span> <span class='hs-varid'>w</span> <span class='hs-varid'>s</span> <span class='hs-varid'>m</span> <span class='hs-varid'>n</span><span class='hs-layout'>)</span>
+<a name="line-132"></a><span class='hs-keyword'>instance</span> <span class='hs-layout'>(</span><span class='hs-conid'>MonadPlus</span> <span class='hs-varid'>m</span><span class='hs-layout'>,</span> <span class='hs-conid'>Monoid</span> <span class='hs-varid'>w</span><span class='hs-layout'>,</span> <span class='hs-conid'>Monoid</span> <span class='hs-varid'>n</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>RightSemiNearRing</span> <span class='hs-layout'>(</span><span class='hs-conid'>SWriter</span><span class='hs-varop'>.</span><span class='hs-conid'>WriterT</span> <span class='hs-varid'>w</span> <span class='hs-varid'>m</span> <span class='hs-varid'>n</span><span class='hs-layout'>)</span>
+<a name="line-133"></a><span class='hs-keyword'>instance</span> <span class='hs-layout'>(</span><span class='hs-conid'>MonadPlus</span> <span class='hs-varid'>m</span><span class='hs-layout'>,</span> <span class='hs-conid'>Monoid</span> <span class='hs-varid'>w</span><span class='hs-layout'>,</span> <span class='hs-conid'>Monoid</span> <span class='hs-varid'>n</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>RightSemiNearRing</span> <span class='hs-layout'>(</span><span class='hs-conid'>LWriter</span><span class='hs-varop'>.</span><span class='hs-conid'>WriterT</span> <span class='hs-varid'>w</span> <span class='hs-varid'>m</span> <span class='hs-varid'>n</span><span class='hs-layout'>)</span>
+<a name="line-134"></a><span class='hs-cpp'>#endif</span>
+<a name="line-135"></a>
+<a name="line-136"></a><span class='hs-cpp'>#ifdef M_FINGERTREE</span>
+<a name="line-137"></a><span class='hs-keyword'>instance</span> <span class='hs-layout'>(</span><span class='hs-conid'>Measured</span> <span class='hs-varid'>v</span> <span class='hs-varid'>m</span><span class='hs-layout'>,</span> <span class='hs-conid'>Monoid</span> <span class='hs-varid'>m</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>Ringoid</span> <span class='hs-layout'>(</span><span class='hs-conid'>FingerTree</span> <span class='hs-varid'>v</span> <span class='hs-varid'>m</span><span class='hs-layout'>)</span>
+<a name="line-138"></a><span class='hs-keyword'>instance</span> <span class='hs-layout'>(</span><span class='hs-conid'>Measured</span> <span class='hs-varid'>v</span> <span class='hs-varid'>m</span><span class='hs-layout'>,</span> <span class='hs-conid'>Monoid</span> <span class='hs-varid'>m</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>RightSemiNearRing</span> <span class='hs-layout'>(</span><span class='hs-conid'>FingerTree</span> <span class='hs-varid'>v</span> <span class='hs-varid'>m</span><span class='hs-layout'>)</span>
+<a name="line-139"></a><span class='hs-cpp'>#endif</span>
+<a name="line-140"></a>
+<a name="line-141"></a><span class='hs-cpp'>#ifdef M_CONTAINERS</span>
+<a name="line-142"></a><span class='hs-keyword'>instance</span> <span class='hs-conid'>Monoid</span> <span class='hs-varid'>m</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>Ringoid</span> <span class='hs-layout'>(</span><span class='hs-conid'>Seq</span> <span class='hs-varid'>m</span><span class='hs-layout'>)</span>
+<a name="line-143"></a><span class='hs-keyword'>instance</span> <span class='hs-conid'>Monoid</span> <span class='hs-varid'>m</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>RightSemiNearRing</span> <span class='hs-layout'>(</span><span class='hs-conid'>Seq</span> <span class='hs-varid'>m</span><span class='hs-layout'>)</span>
+<a name="line-144"></a><span class='hs-cpp'>#endif</span>
+<a name="line-145"></a>
+<a name="line-146"></a><span class='hs-cpp'>#ifdef X_OverloadedStrings</span>
+<a name="line-147"></a><span class='hs-keyword'>instance</span> <span class='hs-conid'>Ringoid</span> <span class='hs-varid'>m</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>Ringoid</span> <span class='hs-layout'>(</span><span class='hs-conid'>FromString</span> <span class='hs-varid'>m</span><span class='hs-layout'>)</span>
+<a name="line-148"></a><span class='hs-keyword'>instance</span> <span class='hs-conid'>RightSemiNearRing</span> <span class='hs-varid'>m</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>RightSemiNearRing</span> <span class='hs-layout'>(</span><span class='hs-conid'>FromString</span> <span class='hs-varid'>m</span><span class='hs-layout'>)</span>
+<a name="line-149"></a><span class='hs-keyword'>instance</span> <span class='hs-conid'>LeftSemiNearRing</span> <span class='hs-varid'>m</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>LeftSemiNearRing</span> <span class='hs-layout'>(</span><span class='hs-conid'>FromString</span> <span class='hs-varid'>m</span><span class='hs-layout'>)</span>
+<a name="line-150"></a><span class='hs-keyword'>instance</span> <span class='hs-conid'>SemiRing</span> <span class='hs-varid'>r</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>SemiRing</span> <span class='hs-layout'>(</span><span class='hs-conid'>FromString</span> <span class='hs-varid'>r</span><span class='hs-layout'>)</span>
+<a name="line-151"></a><span class='hs-keyword'>instance</span> <span class='hs-conid'>Ring</span> <span class='hs-varid'>r</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>Ring</span> <span class='hs-layout'>(</span><span class='hs-conid'>FromString</span> <span class='hs-varid'>r</span><span class='hs-layout'>)</span>
+<a name="line-152"></a><span class='hs-keyword'>instance</span> <span class='hs-conid'>DivisionRing</span> <span class='hs-varid'>r</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>DivisionRing</span> <span class='hs-layout'>(</span><span class='hs-conid'>FromString</span> <span class='hs-varid'>r</span><span class='hs-layout'>)</span>
+<a name="line-153"></a><span class='hs-keyword'>instance</span> <span class='hs-conid'>Field</span> <span class='hs-varid'>f</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>Field</span> <span class='hs-layout'>(</span><span class='hs-conid'>FromString</span> <span class='hs-varid'>f</span><span class='hs-layout'>)</span>
+<a name="line-154"></a><span class='hs-cpp'>#endif</span>
hunk ./doc/html/monoids/src/Data-Set-Unboxed.html 121
-<a name="line-113"></a><span class='hs-keyword'>import</span> <span class='hs-conid'>Data</span><span class='hs-varop'>.</span><span class='hs-conid'>Generator</span><span class='hs-varop'>.</span><span class='hs-conid'>Combinators</span> <span class='hs-layout'>(</span><span class='hs-conid'>Generator</span><span class='hs-layout'>,</span><span class='hs-conid'>Elem</span><span class='hs-layout'>,</span><span class='hs-varid'>foldMap</span><span class='hs-layout'>,</span> <span class='hs-varid'>mapReduce</span><span class='hs-layout'>)</span>
-<a name="line-114"></a><span class='hs-cpp'>#ifndef __GLASGOW_HASKELL__</span>
-<a name="line-115"></a><span class='hs-keyword'>import</span> <span class='hs-conid'>Data</span><span class='hs-varop'>.</span><span class='hs-conid'>Typeable</span> <span class='hs-layout'>(</span><span class='hs-conid'>Typeable</span><span class='hs-layout'>,</span> <span class='hs-varid'>typeOf</span><span class='hs-layout'>,</span> <span class='hs-varid'>typeOfDefault</span><span class='hs-layout'>)</span>
-<a name="line-116"></a><span class='hs-cpp'>#endif</span>
-<a name="line-117"></a><span class='hs-keyword'>import</span> <span class='hs-conid'>Data</span><span class='hs-varop'>.</span><span class='hs-conid'>Typeable</span> <span class='hs-layout'>(</span><span class='hs-conid'>Typeable1</span><span class='hs-layout'>(</span><span class='hs-keyglyph'>..</span><span class='hs-layout'>)</span><span class='hs-layout'>,</span> <span class='hs-conid'>TyCon</span><span class='hs-layout'>,</span> <span class='hs-varid'>mkTyCon</span><span class='hs-layout'>,</span> <span class='hs-varid'>mkTyConApp</span><span class='hs-layout'>)</span>
-<a name="line-118"></a><span class='hs-keyword'>import</span> <span class='hs-conid'>Data</span><span class='hs-varop'>.</span><span class='hs-conid'>Word</span>
-<a name="line-119"></a><span class='hs-keyword'>import</span> <span class='hs-conid'>Data</span><span class='hs-varop'>.</span><span class='hs-conid'>Int</span>
-<a name="line-120"></a>
-<a name="line-121"></a><span class='hs-comment'>{-
-<a name="line-122"></a>-- just for testing
-<a name="line-123"></a>import Test.QuickCheck 
-<a name="line-124"></a>import Data.List (nub,sort)
-<a name="line-125"></a>import qualified Data.List as List
-<a name="line-126"></a>-}</span>
-<a name="line-127"></a>
-<a name="line-128"></a><span class='hs-cpp'>#if __GLASGOW_HASKELL__</span>
-<a name="line-129"></a><span class='hs-keyword'>import</span> <span class='hs-conid'>Text</span><span class='hs-varop'>.</span><span class='hs-conid'>Read</span>
-<a name="line-130"></a><span class='hs-keyword'>import</span> <span class='hs-conid'>Data</span><span class='hs-varop'>.</span><span class='hs-conid'>Data</span> <span class='hs-layout'>(</span><span class='hs-conid'>Data</span><span class='hs-layout'>(</span><span class='hs-keyglyph'>..</span><span class='hs-layout'>)</span><span class='hs-layout'>,</span> <span class='hs-varid'>mkNorepType</span><span class='hs-layout'>,</span> <span class='hs-varid'>gcast1</span><span class='hs-layout'>)</span>
-<a name="line-131"></a><span class='hs-cpp'>#endif</span>
-<a name="line-132"></a>
-<a name="line-133"></a><span class='hs-comment'>{--------------------------------------------------------------------
-<a name="line-134"></a>  Operators
-<a name="line-135"></a>--------------------------------------------------------------------}</span>
-<a name="line-136"></a><span class='hs-keyword'>infixl</span> <span class='hs-num'>9</span> <span class='hs-varop'>\\</span> <span class='hs-comment'>--</span>
-<a name="line-137"></a>
-<a name="line-138"></a><a name="\\"></a><span class='hs-comment'>-- | /O(n+m)/. See 'difference'.</span>
-<a name="line-139"></a><span class='hs-layout'>(</span><span class='hs-varop'>\\</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>::</span> <span class='hs-layout'>(</span><span class='hs-conid'>US</span> <span class='hs-varid'>a</span><span class='hs-layout'>,</span> <span class='hs-conid'>Ord</span> <span class='hs-varid'>a</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>USet</span> <span class='hs-varid'>a</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-conid'>USet</span> <span class='hs-varid'>a</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-conid'>USet</span> <span class='hs-varid'>a</span>
-<a name="line-140"></a><a name="m1"></a><span class='hs-definition'>m1</span> <span class='hs-varop'>\\</span> <span class='hs-varid'>m2</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>difference</span> <span class='hs-varid'>m1</span> <span class='hs-varid'>m2</span>
-<a name="line-141"></a>
-<a name="line-142"></a><a name="Size"></a><span class='hs-comment'>{--------------------------------------------------------------------
-<a name="line-143"></a>  Sets are size balanced trees
-<a name="line-144"></a>--------------------------------------------------------------------}</span>
-<a name="line-145"></a><a name="Size"></a><span class='hs-keyword'>type</span> <span class='hs-conid'>Size</span>     <span class='hs-keyglyph'>=</span> <span class='hs-conid'>Int</span>
-<a name="line-146"></a>
-<a name="line-147"></a><a name="Set"></a><span class='hs-comment'>-- | A set of values @a@.</span>
-<a name="line-148"></a><a name="Set"></a><span class='hs-keyword'>data</span> <span class='hs-conid'>Set</span> <span class='hs-varid'>a</span>    <span class='hs-keyglyph'>=</span> <span class='hs-conid'>Tip</span> 
-<a name="line-149"></a>              <span class='hs-keyglyph'>|</span> <span class='hs-conid'>Bin</span> <span class='hs-comment'>{-# UNPACK #-}</span> <span class='hs-varop'>!</span><span class='hs-conid'>Size</span> <span class='hs-varid'>a</span> <span class='hs-varop'>!</span><span class='hs-layout'>(</span><span class='hs-conid'>USet</span> <span class='hs-varid'>a</span><span class='hs-layout'>)</span> <span class='hs-varop'>!</span><span class='hs-layout'>(</span><span class='hs-conid'>USet</span> <span class='hs-varid'>a</span><span class='hs-layout'>)</span> 
-<a name="line-150"></a>
-<a name="line-151"></a><a name="Monoid"></a><span class='hs-comment'>-- smart unboxed types</span>
-<a name="line-152"></a><a name="Monoid"></a><span class='hs-keyword'>class</span> <span class='hs-conid'>US</span> <span class='hs-varid'>a</span> <span class='hs-keyword'>where</span>
-<a name="line-153"></a>    <span class='hs-keyword'>data</span> <span class='hs-conid'>USet</span> <span class='hs-varid'>a</span>
-<a name="line-154"></a>    <span class='hs-varid'>view</span> <span class='hs-keyglyph'>::</span> <span class='hs-conid'>USet</span> <span class='hs-varid'>a</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-conid'>Set</span> <span class='hs-varid'>a</span>
-<a name="line-155"></a>    <span class='hs-comment'>{-# INLINE view #-}</span>
-<a name="line-156"></a>    <span class='hs-varid'>tip</span> <span class='hs-keyglyph'>::</span> <span class='hs-conid'>USet</span> <span class='hs-varid'>a</span>
-<a name="line-157"></a>    <span class='hs-comment'>{-# INLINE tip #-}</span>
-<a name="line-158"></a>    <span class='hs-varid'>bin</span> <span class='hs-keyglyph'>::</span> <span class='hs-conid'>Size</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-varid'>a</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-conid'>USet</span> <span class='hs-varid'>a</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-conid'>USet</span> <span class='hs-varid'>a</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-conid'>USet</span> <span class='hs-varid'>a</span>
-<a name="line-159"></a>    <span class='hs-comment'>{-# INLINE bin #-}</span>
-<a name="line-160"></a>
+<a name="line-113"></a><span class='hs-cpp'>#ifndef __GLASGOW_HASKELL__</span>
+<a name="line-114"></a><span class='hs-keyword'>import</span> <span class='hs-conid'>Data</span><span class='hs-varop'>.</span><span class='hs-conid'>Typeable</span> <span class='hs-layout'>(</span><span class='hs-conid'>Typeable</span><span class='hs-layout'>,</span> <span class='hs-varid'>typeOf</span><span class='hs-layout'>,</span> <span class='hs-varid'>typeOfDefault</span><span class='hs-layout'>)</span>
+<a name="line-115"></a><span class='hs-cpp'>#endif</span>
+<a name="line-116"></a><span class='hs-keyword'>import</span> <span class='hs-conid'>Data</span><span class='hs-varop'>.</span><span class='hs-conid'>Typeable</span> <span class='hs-layout'>(</span><span class='hs-conid'>Typeable1</span><span class='hs-layout'>(</span><span class='hs-keyglyph'>..</span><span class='hs-layout'>)</span><span class='hs-layout'>,</span> <span class='hs-conid'>TyCon</span><span class='hs-layout'>,</span> <span class='hs-varid'>mkTyCon</span><span class='hs-layout'>,</span> <span class='hs-varid'>mkTyConApp</span><span class='hs-layout'>)</span>
+<a name="line-117"></a><span class='hs-keyword'>import</span> <span class='hs-conid'>Data</span><span class='hs-varop'>.</span><span class='hs-conid'>Word</span>
+<a name="line-118"></a><span class='hs-keyword'>import</span> <span class='hs-conid'>Data</span><span class='hs-varop'>.</span><span class='hs-conid'>Int</span>
+<a name="line-119"></a>
+<a name="line-120"></a><span class='hs-comment'>{-
+<a name="line-121"></a>-- just for testing
+<a name="line-122"></a>import Test.QuickCheck 
+<a name="line-123"></a>import Data.List (nub,sort)
+<a name="line-124"></a>import qualified Data.List as List
+<a name="line-125"></a>-}</span>
+<a name="line-126"></a>
+<a name="line-127"></a><span class='hs-cpp'>#if __GLASGOW_HASKELL__</span>
+<a name="line-128"></a><span class='hs-keyword'>import</span> <span class='hs-conid'>Text</span><span class='hs-varop'>.</span><span class='hs-conid'>Read</span>
+<a name="line-129"></a><span class='hs-keyword'>import</span> <span class='hs-conid'>Data</span><span class='hs-varop'>.</span><span class='hs-conid'>Data</span> <span class='hs-layout'>(</span><span class='hs-conid'>Data</span><span class='hs-layout'>(</span><span class='hs-keyglyph'>..</span><span class='hs-layout'>)</span><span class='hs-layout'>,</span> <span class='hs-varid'>mkNorepType</span><span class='hs-layout'>,</span> <span class='hs-varid'>gcast1</span><span class='hs-layout'>)</span>
+<a name="line-130"></a><span class='hs-cpp'>#endif</span>
+<a name="line-131"></a>
+<a name="line-132"></a><span class='hs-comment'>{--------------------------------------------------------------------
+<a name="line-133"></a>  Operators
+<a name="line-134"></a>--------------------------------------------------------------------}</span>
+<a name="line-135"></a><span class='hs-keyword'>infixl</span> <span class='hs-num'>9</span> <span class='hs-varop'>\\</span> <span class='hs-comment'>--</span>
+<a name="line-136"></a>
+<a name="line-137"></a><a name="\\"></a><span class='hs-comment'>-- | /O(n+m)/. See 'difference'.</span>
+<a name="line-138"></a><span class='hs-layout'>(</span><span class='hs-varop'>\\</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>::</span> <span class='hs-layout'>(</span><span class='hs-conid'>US</span> <span class='hs-varid'>a</span><span class='hs-layout'>,</span> <span class='hs-conid'>Ord</span> <span class='hs-varid'>a</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>USet</span> <span class='hs-varid'>a</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-conid'>USet</span> <span class='hs-varid'>a</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-conid'>USet</span> <span class='hs-varid'>a</span>
+<a name="line-139"></a><a name="m1"></a><span class='hs-definition'>m1</span> <span class='hs-varop'>\\</span> <span class='hs-varid'>m2</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>difference</span> <span class='hs-varid'>m1</span> <span class='hs-varid'>m2</span>
+<a name="line-140"></a>
+<a name="line-141"></a><a name="Size"></a><span class='hs-comment'>{--------------------------------------------------------------------
+<a name="line-142"></a>  Sets are size balanced trees
+<a name="line-143"></a>--------------------------------------------------------------------}</span>
+<a name="line-144"></a><a name="Size"></a><span class='hs-keyword'>type</span> <span class='hs-conid'>Size</span>     <span class='hs-keyglyph'>=</span> <span class='hs-conid'>Int</span>
+<a name="line-145"></a>
+<a name="line-146"></a><a name="Set"></a><span class='hs-comment'>-- | A set of values @a@.</span>
+<a name="line-147"></a><a name="Set"></a><span class='hs-keyword'>data</span> <span class='hs-conid'>Set</span> <span class='hs-varid'>a</span>    <span class='hs-keyglyph'>=</span> <span class='hs-conid'>Tip</span> 
+<a name="line-148"></a>              <span class='hs-keyglyph'>|</span> <span class='hs-conid'>Bin</span> <span class='hs-comment'>{-# UNPACK #-}</span> <span class='hs-varop'>!</span><span class='hs-conid'>Size</span> <span class='hs-varid'>a</span> <span class='hs-varop'>!</span><span class='hs-layout'>(</span><span class='hs-conid'>USet</span> <span class='hs-varid'>a</span><span class='hs-layout'>)</span> <span class='hs-varop'>!</span><span class='hs-layout'>(</span><span class='hs-conid'>USet</span> <span class='hs-varid'>a</span><span class='hs-layout'>)</span> 
+<a name="line-149"></a>
+<a name="line-150"></a><a name="Monoid"></a><span class='hs-comment'>-- smart unboxed types</span>
+<a name="line-151"></a><a name="Monoid"></a><span class='hs-keyword'>class</span> <span class='hs-conid'>US</span> <span class='hs-varid'>a</span> <span class='hs-keyword'>where</span>
+<a name="line-152"></a>    <span class='hs-keyword'>data</span> <span class='hs-conid'>USet</span> <span class='hs-varid'>a</span>
+<a name="line-153"></a>    <span class='hs-varid'>view</span> <span class='hs-keyglyph'>::</span> <span class='hs-conid'>USet</span> <span class='hs-varid'>a</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-conid'>Set</span> <span class='hs-varid'>a</span>
+<a name="line-154"></a>    <span class='hs-comment'>{-# INLINE view #-}</span>
+<a name="line-155"></a>    <span class='hs-varid'>tip</span> <span class='hs-keyglyph'>::</span> <span class='hs-conid'>USet</span> <span class='hs-varid'>a</span>
+<a name="line-156"></a>    <span class='hs-comment'>{-# INLINE tip #-}</span>
+<a name="line-157"></a>    <span class='hs-varid'>bin</span> <span class='hs-keyglyph'>::</span> <span class='hs-conid'>Size</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-varid'>a</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-conid'>USet</span> <span class='hs-varid'>a</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-conid'>USet</span> <span class='hs-varid'>a</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-conid'>USet</span> <span class='hs-varid'>a</span>
+<a name="line-158"></a>    <span class='hs-comment'>{-# INLINE bin #-}</span>
+<a name="line-159"></a>    <span class='hs-varid'>isTip</span> <span class='hs-keyglyph'>::</span> <span class='hs-conid'>USet</span> <span class='hs-varid'>a</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-conid'>Bool</span>
+<a name="line-160"></a>    <span class='hs-comment'>{-# INLINE isTip #-}</span>
hunk ./doc/html/monoids/src/Data-Set-Unboxed.html 178
-<a name="line-170"></a>    mapReduce _ (view -&gt; Tip) = mempty
+<a name="line-170"></a>    mapReduce _ (isTip -&gt; True) = mempty
hunk ./doc/html/monoids/src/Data-Set-Unboxed.html 207
-<a name="line-199"></a><span class='hs-definition'>null</span> <span class='hs-layout'>(</span><span class='hs-varid'>view</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-conid'>Tip</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>True</span>
-<a name="line-200"></a><span class='hs-definition'>null</span> <span class='hs-layout'>(</span><span class='hs-varid'>view</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-conid'>Bin</span> <span class='hs-layout'>{</span><span class='hs-layout'>}</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>False</span>
+<a name="line-199"></a><span class='hs-definition'>null</span> <span class='hs-layout'>(</span><span class='hs-varid'>view</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-conid'>Bin</span> <span class='hs-layout'>{</span><span class='hs-layout'>}</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>False</span>
+<a name="line-200"></a><span class='hs-definition'>null</span> <span class='hs-keyword'>_</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>True</span>
hunk ./doc/html/monoids/src/Data-Set-Unboxed.html 212
-<a name="line-204"></a><span class='hs-definition'>size</span> <span class='hs-layout'>(</span><span class='hs-varid'>view</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-conid'>Tip</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=</span> <span class='hs-num'>0</span>
-<a name="line-205"></a><span class='hs-definition'>size</span> <span class='hs-layout'>(</span><span class='hs-varid'>view</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-conid'>Bin</span> <span class='hs-varid'>sz</span> <span class='hs-keyword'>_</span> <span class='hs-keyword'>_</span> <span class='hs-keyword'>_</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>sz</span>
+<a name="line-204"></a><span class='hs-definition'>size</span> <span class='hs-layout'>(</span><span class='hs-varid'>view</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-conid'>Bin</span> <span class='hs-varid'>sz</span> <span class='hs-keyword'>_</span> <span class='hs-keyword'>_</span> <span class='hs-keyword'>_</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>sz</span>
+<a name="line-205"></a><span class='hs-definition'>size</span> <span class='hs-keyword'>_</span> <span class='hs-keyglyph'>=</span> <span class='hs-num'>0</span>
hunk ./doc/html/monoids/src/Data-Set-Unboxed.html 217
-<a name="line-209"></a><span class='hs-definition'>member</span> <span class='hs-varid'>x</span> <span class='hs-layout'>(</span><span class='hs-varid'>view</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-conid'>Tip</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>False</span>
-<a name="line-210"></a><span class='hs-definition'>member</span> <span class='hs-varid'>x</span> <span class='hs-layout'>(</span><span class='hs-varid'>view</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-conid'>Bin</span> <span class='hs-keyword'>_</span> <span class='hs-varid'>y</span> <span class='hs-varid'>l</span> <span class='hs-varid'>r</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=</span> 
-<a name="line-211"></a>    <span class='hs-keyword'>case</span> <span class='hs-varid'>compare</span> <span class='hs-varid'>x</span> <span class='hs-varid'>y</span> <span class='hs-keyword'>of</span>
-<a name="line-212"></a>        <span class='hs-conid'>LT</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-varid'>member</span> <span class='hs-varid'>x</span> <span class='hs-varid'>l</span>
-<a name="line-213"></a>        <span class='hs-conid'>GT</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-varid'>member</span> <span class='hs-varid'>x</span> <span class='hs-varid'>r</span>
-<a name="line-214"></a>        <span class='hs-conid'>EQ</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-conid'>True</span>       
-<a name="line-215"></a>
-<a name="line-216"></a><a name="notMember"></a><span class='hs-comment'>-- | /O(log n)/. Is the element not in the set?</span>
-<a name="line-217"></a><span class='hs-definition'>notMember</span> <span class='hs-keyglyph'>::</span> <span class='hs-layout'>(</span><span class='hs-conid'>US</span> <span class='hs-varid'>a</span><span class='hs-layout'>,</span> <span class='hs-conid'>Ord</span> <span class='hs-varid'>a</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-varid'>a</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-conid'>USet</span> <span class='hs-varid'>a</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-conid'>Bool</span>
-<a name="line-218"></a><span class='hs-definition'>notMember</span> <span class='hs-varid'>x</span> <span class='hs-varid'>t</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>not</span> <span class='hs-varop'>$</span> <span class='hs-varid'>member</span> <span class='hs-varid'>x</span> <span class='hs-varid'>t</span>
-<a name="line-219"></a>
-<a name="line-220"></a><a name="empty"></a><span class='hs-comment'>{--------------------------------------------------------------------
-<a name="line-221"></a>  Construction
-<a name="line-222"></a>--------------------------------------------------------------------}</span>
-<a name="line-223"></a><span class='hs-comment'>-- | /O(1)/. The empty set.</span>
-<a name="line-224"></a><span class='hs-definition'>empty</span> <span class='hs-keyglyph'>::</span> <span class='hs-conid'>US</span> <span class='hs-varid'>a</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>USet</span> <span class='hs-varid'>a</span>
-<a name="line-225"></a><span class='hs-definition'>empty</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>tip</span>
-<a name="line-226"></a>
-<a name="line-227"></a><a name="singleton"></a><span class='hs-comment'>-- | /O(1)/. Create a singleton set.</span>
-<a name="line-228"></a><span class='hs-definition'>singleton</span> <span class='hs-keyglyph'>::</span> <span class='hs-conid'>US</span> <span class='hs-varid'>a</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-varid'>a</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-conid'>USet</span> <span class='hs-varid'>a</span>
-<a name="line-229"></a><span class='hs-definition'>singleton</span> <span class='hs-varid'>x</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>bin</span> <span class='hs-num'>1</span> <span class='hs-varid'>x</span> <span class='hs-varid'>tip</span> <span class='hs-varid'>tip</span>
-<a name="line-230"></a>
-<a name="line-231"></a><a name="insert"></a><span class='hs-comment'>{--------------------------------------------------------------------
-<a name="line-232"></a>  Insertion, Deletion
-<a name="line-233"></a>--------------------------------------------------------------------}</span>
-<a name="line-234"></a><span class='hs-comment'>-- | /O(log n)/. Insert an element in a set.</span>
-<a name="line-235"></a><span class='hs-comment'>-- If the set already contains an element equal to the given value,</span>
-<a name="line-236"></a><span class='hs-comment'>-- it is replaced with the new value.</span>
-<a name="line-237"></a><span class='hs-definition'>insert</span> <span class='hs-keyglyph'>::</span> <span class='hs-layout'>(</span><span class='hs-conid'>US</span> <span class='hs-varid'>a</span><span class='hs-layout'>,</span> <span class='hs-conid'>Ord</span> <span class='hs-varid'>a</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-varid'>a</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-conid'>USet</span> <span class='hs-varid'>a</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-conid'>USet</span> <span class='hs-varid'>a</span>
-<a name="line-238"></a><span class='hs-definition'>insert</span> <span class='hs-varid'>x</span> <span class='hs-layout'>(</span><span class='hs-varid'>view</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-conid'>Tip</span><span class='hs-layout'>)</span>          <span class='hs-keyglyph'>=</span> <span class='hs-varid'>singleton</span> <span class='hs-varid'>x</span>
+<a name="line-209"></a><span class='hs-definition'>member</span> <span class='hs-varid'>x</span> <span class='hs-varid'>y</span> <span class='hs-keyglyph'>=</span> 
+<a name="line-210"></a>    <span class='hs-keyword'>case</span> <span class='hs-varid'>view</span> <span class='hs-varid'>y</span> <span class='hs-keyword'>of</span> 
+<a name="line-211"></a>        <span class='hs-conid'>Bin</span> <span class='hs-keyword'>_</span> <span class='hs-varid'>y</span> <span class='hs-varid'>l</span> <span class='hs-varid'>r</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-keyword'>case</span> <span class='hs-varid'>compare</span> <span class='hs-varid'>x</span> <span class='hs-varid'>y</span> <span class='hs-keyword'>of</span>
+<a name="line-212"></a>            <span class='hs-conid'>LT</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-varid'>member</span> <span class='hs-varid'>x</span> <span class='hs-varid'>l</span>
+<a name="line-213"></a>            <span class='hs-conid'>GT</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-varid'>member</span> <span class='hs-varid'>x</span> <span class='hs-varid'>r</span>
+<a name="line-214"></a>            <span class='hs-conid'>EQ</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-conid'>True</span>       
+<a name="line-215"></a>        <span class='hs-keyword'>_</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-conid'>False</span>
+<a name="line-216"></a>
+<a name="line-217"></a><a name="notMember"></a><span class='hs-comment'>-- | /O(log n)/. Is the element not in the set?</span>
+<a name="line-218"></a><span class='hs-definition'>notMember</span> <span class='hs-keyglyph'>::</span> <span class='hs-layout'>(</span><span class='hs-conid'>US</span> <span class='hs-varid'>a</span><span class='hs-layout'>,</span> <span class='hs-conid'>Ord</span> <span class='hs-varid'>a</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-varid'>a</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-conid'>USet</span> <span class='hs-varid'>a</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-conid'>Bool</span>
+<a name="line-219"></a><span class='hs-definition'>notMember</span> <span class='hs-varid'>x</span> <span class='hs-varid'>t</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>not</span> <span class='hs-varop'>$</span> <span class='hs-varid'>member</span> <span class='hs-varid'>x</span> <span class='hs-varid'>t</span>
+<a name="line-220"></a>
+<a name="line-221"></a><a name="empty"></a><span class='hs-comment'>{--------------------------------------------------------------------
+<a name="line-222"></a>  Construction
+<a name="line-223"></a>--------------------------------------------------------------------}</span>
+<a name="line-224"></a><span class='hs-comment'>-- | /O(1)/. The empty set.</span>
+<a name="line-225"></a><span class='hs-definition'>empty</span> <span class='hs-keyglyph'>::</span> <span class='hs-conid'>US</span> <span class='hs-varid'>a</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>USet</span> <span class='hs-varid'>a</span>
+<a name="line-226"></a><span class='hs-definition'>empty</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>tip</span>
+<a name="line-227"></a>
+<a name="line-228"></a><a name="singleton"></a><span class='hs-comment'>-- | /O(1)/. Create a singleton set.</span>
+<a name="line-229"></a><span class='hs-definition'>singleton</span> <span class='hs-keyglyph'>::</span> <span class='hs-conid'>US</span> <span class='hs-varid'>a</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-varid'>a</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-conid'>USet</span> <span class='hs-varid'>a</span>
+<a name="line-230"></a><span class='hs-definition'>singleton</span> <span class='hs-varid'>x</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>bin</span> <span class='hs-num'>1</span> <span class='hs-varid'>x</span> <span class='hs-varid'>tip</span> <span class='hs-varid'>tip</span>
+<a name="line-231"></a>
+<a name="line-232"></a><a name="insert"></a><span class='hs-comment'>{--------------------------------------------------------------------
+<a name="line-233"></a>  Insertion, Deletion
+<a name="line-234"></a>--------------------------------------------------------------------}</span>
+<a name="line-235"></a><span class='hs-comment'>-- | /O(log n)/. Insert an element in a set.</span>
+<a name="line-236"></a><span class='hs-comment'>-- If the set already contains an element equal to the given value,</span>
+<a name="line-237"></a><span class='hs-comment'>-- it is replaced with the new value.</span>
+<a name="line-238"></a><span class='hs-definition'>insert</span> <span class='hs-keyglyph'>::</span> <span class='hs-layout'>(</span><span class='hs-conid'>US</span> <span class='hs-varid'>a</span><span class='hs-layout'>,</span> <span class='hs-conid'>Ord</span> <span class='hs-varid'>a</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-varid'>a</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-conid'>USet</span> <span class='hs-varid'>a</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-conid'>USet</span> <span class='hs-varid'>a</span>
hunk ./doc/html/monoids/src/Data-Set-Unboxed.html 251
-<a name="line-243"></a>
-<a name="line-244"></a><a name="delete"></a><span class='hs-comment'>-- | /O(log n)/. Delete an element from a set.</span>
-<a name="line-245"></a><span class='hs-definition'>delete</span> <span class='hs-keyglyph'>::</span> <span class='hs-layout'>(</span><span class='hs-conid'>US</span> <span class='hs-varid'>a</span><span class='hs-layout'>,</span> <span class='hs-conid'>Ord</span> <span class='hs-varid'>a</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-varid'>a</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-conid'>USet</span> <span class='hs-varid'>a</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-conid'>USet</span> <span class='hs-varid'>a</span>
-<a name="line-246"></a><span class='hs-definition'>delete</span> <span class='hs-varid'>x</span> <span class='hs-layout'>(</span><span class='hs-varid'>view</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-conid'>Tip</span><span class='hs-layout'>)</span>         <span class='hs-keyglyph'>=</span> <span class='hs-varid'>tip</span>
+<a name="line-243"></a><span class='hs-definition'>insert</span> <span class='hs-varid'>x</span> <span class='hs-keyword'>_</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>singleton</span> <span class='hs-varid'>x</span>
+<a name="line-244"></a>
+<a name="line-245"></a><a name="delete"></a><span class='hs-comment'>-- | /O(log n)/. Delete an element from a set.</span>
+<a name="line-246"></a><span class='hs-definition'>delete</span> <span class='hs-keyglyph'>::</span> <span class='hs-layout'>(</span><span class='hs-conid'>US</span> <span class='hs-varid'>a</span><span class='hs-layout'>,</span> <span class='hs-conid'>Ord</span> <span class='hs-varid'>a</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-varid'>a</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-conid'>USet</span> <span class='hs-varid'>a</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-conid'>USet</span> <span class='hs-varid'>a</span>
hunk ./doc/html/monoids/src/Data-Set-Unboxed.html 259
-<a name="line-251"></a>
-<a name="line-252"></a><a name="isProperSubsetOf"></a><span class='hs-comment'>{--------------------------------------------------------------------
-<a name="line-253"></a>  Subset
-<a name="line-254"></a>--------------------------------------------------------------------}</span>
-<a name="line-255"></a><span class='hs-comment'>-- | /O(n+m)/. Is this a proper subset? (ie. a subset but not equal).</span>
-<a name="line-256"></a><span class='hs-definition'>isProperSubsetOf</span> <span class='hs-keyglyph'>::</span> <span class='hs-layout'>(</span><span class='hs-conid'>US</span> <span class='hs-varid'>a</span><span class='hs-layout'>,</span> <span class='hs-conid'>Ord</span> <span class='hs-varid'>a</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>USet</span> <span class='hs-varid'>a</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-conid'>USet</span> <span class='hs-varid'>a</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-conid'>Bool</span>
-<a name="line-257"></a><span class='hs-definition'>isProperSubsetOf</span> <span class='hs-varid'>s1</span> <span class='hs-varid'>s2</span>
-<a name="line-258"></a>    <span class='hs-keyglyph'>=</span> <span class='hs-layout'>(</span><span class='hs-varid'>size</span> <span class='hs-varid'>s1</span> <span class='hs-varop'>&lt;</span> <span class='hs-varid'>size</span> <span class='hs-varid'>s2</span><span class='hs-layout'>)</span> <span class='hs-varop'>&amp;&amp;</span> <span class='hs-layout'>(</span><span class='hs-varid'>isSubsetOf</span> <span class='hs-varid'>s1</span> <span class='hs-varid'>s2</span><span class='hs-layout'>)</span>
+<a name="line-251"></a><span class='hs-definition'>delete</span> <span class='hs-varid'>x</span> <span class='hs-keyword'>_</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>tip</span>
+<a name="line-252"></a>
+<a name="line-253"></a><a name="isProperSubsetOf"></a><span class='hs-comment'>{--------------------------------------------------------------------
+<a name="line-254"></a>  Subset
+<a name="line-255"></a>--------------------------------------------------------------------}</span>
+<a name="line-256"></a><span class='hs-comment'>-- | /O(n+m)/. Is this a proper subset? (ie. a subset but not equal).</span>
+<a name="line-257"></a><span class='hs-definition'>isProperSubsetOf</span> <span class='hs-keyglyph'>::</span> <span class='hs-layout'>(</span><span class='hs-conid'>US</span> <span class='hs-varid'>a</span><span class='hs-layout'>,</span> <span class='hs-conid'>Ord</span> <span class='hs-varid'>a</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>USet</span> <span class='hs-varid'>a</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-conid'>USet</span> <span class='hs-varid'>a</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-conid'>Bool</span>
+<a name="line-258"></a><span class='hs-definition'>isProperSubsetOf</span> <span class='hs-varid'>s1</span> <span class='hs-varid'>s2</span> <span class='hs-keyglyph'>=</span> <span class='hs-layout'>(</span><span class='hs-varid'>size</span> <span class='hs-varid'>s1</span> <span class='hs-varop'>&lt;</span> <span class='hs-varid'>size</span> <span class='hs-varid'>s2</span><span class='hs-layout'>)</span> <span class='hs-varop'>&amp;&amp;</span> <span class='hs-layout'>(</span><span class='hs-varid'>isSubsetOf</span> <span class='hs-varid'>s1</span> <span class='hs-varid'>s2</span><span class='hs-layout'>)</span>
hunk ./doc/html/monoids/src/Data-Set-Unboxed.html 274
-<a name="line-266"></a><span class='hs-definition'>isSubsetOfX</span> <span class='hs-layout'>(</span><span class='hs-varid'>view</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-conid'>Tip</span><span class='hs-layout'>)</span> <span class='hs-keyword'>_</span>         <span class='hs-keyglyph'>=</span> <span class='hs-conid'>True</span>
-<a name="line-267"></a><span class='hs-definition'>isSubsetOfX</span> <span class='hs-keyword'>_</span> <span class='hs-layout'>(</span><span class='hs-varid'>view</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-conid'>Tip</span><span class='hs-layout'>)</span>         <span class='hs-keyglyph'>=</span> <span class='hs-conid'>False</span>
-<a name="line-268"></a><span class='hs-definition'>isSubsetOfX</span> <span class='hs-layout'>(</span><span class='hs-varid'>view</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-conid'>Bin</span> <span class='hs-keyword'>_</span> <span class='hs-varid'>x</span> <span class='hs-varid'>l</span> <span class='hs-varid'>r</span><span class='hs-layout'>)</span> <span class='hs-varid'>t</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>found</span> <span class='hs-varop'>&amp;&amp;</span> <span class='hs-varid'>isSubsetOfX</span> <span class='hs-varid'>l</span> <span class='hs-varid'>lt</span> <span class='hs-varop'>&amp;&amp;</span> <span class='hs-varid'>isSubsetOfX</span> <span class='hs-varid'>r</span> <span class='hs-varid'>gt</span>
-<a name="line-269"></a>  <span class='hs-keyword'>where</span>
-<a name="line-270"></a>    <span class='hs-layout'>(</span><span class='hs-varid'>lt</span><span class='hs-layout'>,</span><span class='hs-varid'>found</span><span class='hs-layout'>,</span><span class='hs-varid'>gt</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>splitMember</span> <span class='hs-varid'>x</span> <span class='hs-varid'>t</span>
+<a name="line-266"></a><span class='hs-definition'>isSubsetOfX</span> <span class='hs-keyword'>_</span> <span class='hs-layout'>(</span><span class='hs-varid'>isTip</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-conid'>True</span><span class='hs-layout'>)</span>         <span class='hs-keyglyph'>=</span> <span class='hs-conid'>False</span>
+<a name="line-267"></a><span class='hs-definition'>isSubsetOfX</span> <span class='hs-layout'>(</span><span class='hs-varid'>view</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-conid'>Bin</span> <span class='hs-keyword'>_</span> <span class='hs-varid'>x</span> <span class='hs-varid'>l</span> <span class='hs-varid'>r</span><span class='hs-layout'>)</span> <span class='hs-varid'>t</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>found</span> <span class='hs-varop'>&amp;&amp;</span> <span class='hs-varid'>isSubsetOfX</span> <span class='hs-varid'>l</span> <span class='hs-varid'>lt</span> <span class='hs-varop'>&amp;&amp;</span> <span class='hs-varid'>isSubsetOfX</span> <span class='hs-varid'>r</span> <span class='hs-varid'>gt</span>
+<a name="line-268"></a>  <span class='hs-keyword'>where</span>
+<a name="line-269"></a>    <span class='hs-layout'>(</span><span class='hs-varid'>lt</span><span class='hs-layout'>,</span><span class='hs-varid'>found</span><span class='hs-layout'>,</span><span class='hs-varid'>gt</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>splitMember</span> <span class='hs-varid'>x</span> <span class='hs-varid'>t</span>
+<a name="line-270"></a><span class='hs-definition'>isSubsetOfX</span> <span class='hs-keyword'>_</span> <span class='hs-keyword'>_</span>                     <span class='hs-keyglyph'>=</span> <span class='hs-conid'>True</span>
hunk ./doc/html/monoids/src/Data-Set-Unboxed.html 286
-<a name="line-278"></a><span class='hs-definition'>findMin</span> <span class='hs-layout'>(</span><span class='hs-varid'>view</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-conid'>Bin</span> <span class='hs-keyword'>_</span> <span class='hs-varid'>x</span> <span class='hs-layout'>(</span><span class='hs-varid'>view</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-conid'>Tip</span><span class='hs-layout'>)</span> <span class='hs-keyword'>_</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>x</span>
+<a name="line-278"></a><span class='hs-definition'>findMin</span> <span class='hs-layout'>(</span><span class='hs-varid'>view</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-conid'>Bin</span> <span class='hs-keyword'>_</span> <span class='hs-varid'>x</span> <span class='hs-layout'>(</span><span class='hs-varid'>isTip</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-conid'>True</span><span class='hs-layout'>)</span> <span class='hs-keyword'>_</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>x</span>
hunk ./doc/html/monoids/src/Data-Set-Unboxed.html 288
-<a name="line-280"></a><span class='hs-definition'>findMin</span> <span class='hs-layout'>(</span><span class='hs-varid'>view</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-conid'>Tip</span><span class='hs-layout'>)</span>           <span class='hs-keyglyph'>=</span> <span class='hs-varid'>error</span> <span class='hs-str'>"Set.findMin: empty set has no minimal element"</span>
+<a name="line-280"></a><span class='hs-definition'>findMin</span> <span class='hs-keyword'>_</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>error</span> <span class='hs-str'>"Set.findMin: empty set has no minimal element"</span>
hunk ./doc/html/monoids/src/Data-Set-Unboxed.html 292
-<a name="line-284"></a><span class='hs-definition'>findMax</span> <span class='hs-layout'>(</span><span class='hs-varid'>view</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-conid'>Bin</span> <span class='hs-keyword'>_</span> <span class='hs-varid'>x</span> <span class='hs-keyword'>_</span> <span class='hs-layout'>(</span><span class='hs-varid'>view</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-conid'>Tip</span><span class='hs-layout'>)</span><span class='hs-layout'>)</span>  <span class='hs-keyglyph'>=</span> <span class='hs-varid'>x</span>
+<a name="line-284"></a><span class='hs-definition'>findMax</span> <span class='hs-layout'>(</span><span class='hs-varid'>view</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-conid'>Bin</span> <span class='hs-keyword'>_</span> <span class='hs-varid'>x</span> <span class='hs-keyword'>_</span> <span class='hs-layout'>(</span><span class='hs-varid'>isTip</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-conid'>True</span><span class='hs-layout'>)</span><span class='hs-layout'>)</span>  <span class='hs-keyglyph'>=</span> <span class='hs-varid'>x</span>
hunk ./doc/html/monoids/src/Data-Set-Unboxed.html 294
-<a name="line-286"></a><span class='hs-definition'>findMax</span> <span class='hs-layout'>(</span><span class='hs-varid'>view</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-conid'>Tip</span><span class='hs-layout'>)</span>            <span class='hs-keyglyph'>=</span> <span class='hs-varid'>error</span> <span class='hs-str'>"Set.findMax: empty set has no maximal element"</span>
+<a name="line-286"></a><span class='hs-definition'>findMax</span> <span class='hs-keyword'>_</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>error</span> <span class='hs-str'>"Set.findMax: empty set has no maximal element"</span>
hunk ./doc/html/monoids/src/Data-Set-Unboxed.html 298
-<a name="line-290"></a><span class='hs-definition'>deleteMin</span> <span class='hs-layout'>(</span><span class='hs-varid'>view</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-conid'>Bin</span> <span class='hs-keyword'>_</span> <span class='hs-keyword'>_</span> <span class='hs-layout'>(</span><span class='hs-varid'>view</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-conid'>Tip</span><span class='hs-layout'>)</span> <span class='hs-varid'>r</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>r</span>
+<a name="line-290"></a><span class='hs-definition'>deleteMin</span> <span class='hs-layout'>(</span><span class='hs-varid'>view</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-conid'>Bin</span> <span class='hs-keyword'>_</span> <span class='hs-keyword'>_</span> <span class='hs-layout'>(</span><span class='hs-varid'>isTip</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-conid'>True</span><span class='hs-layout'>)</span> <span class='hs-varid'>r</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>r</span>
hunk ./doc/html/monoids/src/Data-Set-Unboxed.html 300
-<a name="line-292"></a><span class='hs-definition'>deleteMin</span> <span class='hs-layout'>(</span><span class='hs-varid'>view</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-conid'>Tip</span><span class='hs-layout'>)</span>           <span class='hs-keyglyph'>=</span> <span class='hs-varid'>tip</span>
+<a name="line-292"></a><span class='hs-definition'>deleteMin</span> <span class='hs-keyword'>_</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>tip</span>
hunk ./doc/html/monoids/src/Data-Set-Unboxed.html 304
-<a name="line-296"></a><span class='hs-definition'>deleteMax</span> <span class='hs-layout'>(</span><span class='hs-varid'>view</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-conid'>Bin</span> <span class='hs-keyword'>_</span> <span class='hs-keyword'>_</span> <span class='hs-varid'>l</span> <span class='hs-layout'>(</span><span class='hs-varid'>view</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-conid'>Tip</span><span class='hs-layout'>)</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>l</span>
+<a name="line-296"></a><span class='hs-definition'>deleteMax</span> <span class='hs-layout'>(</span><span class='hs-varid'>view</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-conid'>Bin</span> <span class='hs-keyword'>_</span> <span class='hs-keyword'>_</span> <span class='hs-varid'>l</span> <span class='hs-layout'>(</span><span class='hs-varid'>isTip</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-conid'>True</span><span class='hs-layout'>)</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>l</span>
hunk ./doc/html/monoids/src/Data-Set-Unboxed.html 306
-<a name="line-298"></a><span class='hs-definition'>deleteMax</span> <span class='hs-layout'>(</span><span class='hs-varid'>view</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-conid'>Tip</span><span class='hs-layout'>)</span>           <span class='hs-keyglyph'>=</span> <span class='hs-varid'>tip</span>
+<a name="line-298"></a><span class='hs-definition'>deleteMax</span> <span class='hs-keyword'>_</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>tip</span>
hunk ./doc/html/monoids/src/Data-Set-Unboxed.html 322
-<a name="line-314"></a><span class='hs-definition'>union</span> <span class='hs-layout'>(</span><span class='hs-varid'>view</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-conid'>Tip</span><span class='hs-layout'>)</span> <span class='hs-varid'>t2</span>  <span class='hs-keyglyph'>=</span> <span class='hs-varid'>t2</span>
-<a name="line-315"></a><span class='hs-definition'>union</span> <span class='hs-varid'>t1</span> <span class='hs-layout'>(</span><span class='hs-varid'>view</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-conid'>Tip</span><span class='hs-layout'>)</span>  <span class='hs-keyglyph'>=</span> <span class='hs-varid'>t1</span>
+<a name="line-314"></a><span class='hs-definition'>union</span> <span class='hs-layout'>(</span><span class='hs-varid'>isTip</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-conid'>True</span><span class='hs-layout'>)</span> <span class='hs-varid'>t2</span>  <span class='hs-keyglyph'>=</span> <span class='hs-varid'>t2</span>
+<a name="line-315"></a><span class='hs-definition'>union</span> <span class='hs-varid'>t1</span> <span class='hs-layout'>(</span><span class='hs-varid'>isTip</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-conid'>True</span><span class='hs-layout'>)</span>  <span class='hs-keyglyph'>=</span> <span class='hs-varid'>t1</span>
hunk ./doc/html/monoids/src/Data-Set-Unboxed.html 327
-<a name="line-319"></a><span class='hs-definition'>hedgeUnion</span> <span class='hs-keyword'>_</span>     <span class='hs-keyword'>_</span>     <span class='hs-varid'>t1</span> <span class='hs-layout'>(</span><span class='hs-varid'>view</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-conid'>Tip</span><span class='hs-layout'>)</span>                    <span class='hs-keyglyph'>=</span> <span class='hs-varid'>t1</span>
-<a name="line-320"></a><span class='hs-definition'>hedgeUnion</span> <span class='hs-varid'>cmplo</span> <span class='hs-varid'>cmphi</span> <span class='hs-layout'>(</span><span class='hs-varid'>view</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-conid'>Tip</span><span class='hs-layout'>)</span> <span class='hs-layout'>(</span><span class='hs-varid'>view</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-conid'>Bin</span> <span class='hs-keyword'>_</span> <span class='hs-varid'>x</span> <span class='hs-varid'>l</span> <span class='hs-varid'>r</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>join</span> <span class='hs-varid'>x</span> <span class='hs-layout'>(</span><span class='hs-varid'>filterGt</span> <span class='hs-varid'>cmplo</span> <span class='hs-varid'>l</span><span class='hs-layout'>)</span> <span class='hs-layout'>(</span><span class='hs-varid'>filterLt</span> <span class='hs-varid'>cmphi</span> <span class='hs-varid'>r</span><span class='hs-layout'>)</span>
+<a name="line-319"></a><span class='hs-definition'>hedgeUnion</span> <span class='hs-keyword'>_</span>     <span class='hs-keyword'>_</span>     <span class='hs-varid'>t1</span> <span class='hs-layout'>(</span><span class='hs-varid'>isTip</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-conid'>True</span><span class='hs-layout'>)</span>                    <span class='hs-keyglyph'>=</span> <span class='hs-varid'>t1</span>
+<a name="line-320"></a><span class='hs-definition'>hedgeUnion</span> <span class='hs-varid'>cmplo</span> <span class='hs-varid'>cmphi</span> <span class='hs-layout'>(</span><span class='hs-varid'>isTip</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-conid'>True</span><span class='hs-layout'>)</span> <span class='hs-layout'>(</span><span class='hs-varid'>view</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-conid'>Bin</span> <span class='hs-keyword'>_</span> <span class='hs-varid'>x</span> <span class='hs-varid'>l</span> <span class='hs-varid'>r</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>join</span> <span class='hs-varid'>x</span> <span class='hs-layout'>(</span><span class='hs-varid'>filterGt</span> <span class='hs-varid'>cmplo</span> <span class='hs-varid'>l</span><span class='hs-layout'>)</span> <span class='hs-layout'>(</span><span class='hs-varid'>filterLt</span> <span class='hs-varid'>cmphi</span> <span class='hs-varid'>r</span><span class='hs-layout'>)</span>
hunk ./doc/html/monoids/src/Data-Set-Unboxed.html 339
-<a name="line-331"></a><span class='hs-definition'>difference</span> <span class='hs-layout'>(</span><span class='hs-varid'>view</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-conid'>Tip</span><span class='hs-layout'>)</span> <span class='hs-keyword'>_</span>   <span class='hs-keyglyph'>=</span> <span class='hs-varid'>tip</span>
-<a name="line-332"></a><span class='hs-definition'>difference</span> <span class='hs-varid'>t1</span> <span class='hs-layout'>(</span><span class='hs-varid'>view</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-conid'>Tip</span><span class='hs-layout'>)</span>  <span class='hs-keyglyph'>=</span> <span class='hs-varid'>t1</span>
+<a name="line-331"></a><span class='hs-definition'>difference</span> <span class='hs-layout'>(</span><span class='hs-varid'>isTip</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-conid'>True</span><span class='hs-layout'>)</span> <span class='hs-keyword'>_</span>   <span class='hs-keyglyph'>=</span> <span class='hs-varid'>tip</span>
+<a name="line-332"></a><span class='hs-definition'>difference</span> <span class='hs-varid'>t1</span> <span class='hs-layout'>(</span><span class='hs-varid'>isTip</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-conid'>True</span><span class='hs-layout'>)</span>  <span class='hs-keyglyph'>=</span> <span class='hs-varid'>t1</span>
hunk ./doc/html/monoids/src/Data-Set-Unboxed.html 344
-<a name="line-336"></a><span class='hs-definition'>hedgeDiff</span> <span class='hs-keyword'>_</span> <span class='hs-keyword'>_</span> <span class='hs-layout'>(</span><span class='hs-varid'>view</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-conid'>Tip</span><span class='hs-layout'>)</span> <span class='hs-keyword'>_</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>tip</span>
-<a name="line-337"></a><span class='hs-definition'>hedgeDiff</span> <span class='hs-varid'>cmplo</span> <span class='hs-varid'>cmphi</span> <span class='hs-layout'>(</span><span class='hs-varid'>view</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-conid'>Bin</span> <span class='hs-keyword'>_</span> <span class='hs-varid'>x</span> <span class='hs-varid'>l</span> <span class='hs-varid'>r</span><span class='hs-layout'>)</span> <span class='hs-layout'>(</span><span class='hs-varid'>view</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-conid'>Tip</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>join</span> <span class='hs-varid'>x</span> <span class='hs-layout'>(</span><span class='hs-varid'>filterGt</span> <span class='hs-varid'>cmplo</span> <span class='hs-varid'>l</span><span class='hs-layout'>)</span> <span class='hs-layout'>(</span><span class='hs-varid'>filterLt</span> <span class='hs-varid'>cmphi</span> <span class='hs-varid'>r</span><span class='hs-layout'>)</span>
+<a name="line-336"></a><span class='hs-definition'>hedgeDiff</span> <span class='hs-keyword'>_</span> <span class='hs-keyword'>_</span> <span class='hs-layout'>(</span><span class='hs-varid'>isTip</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-conid'>True</span><span class='hs-layout'>)</span> <span class='hs-keyword'>_</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>tip</span>
+<a name="line-337"></a><span class='hs-definition'>hedgeDiff</span> <span class='hs-varid'>cmplo</span> <span class='hs-varid'>cmphi</span> <span class='hs-layout'>(</span><span class='hs-varid'>view</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-conid'>Bin</span> <span class='hs-keyword'>_</span> <span class='hs-varid'>x</span> <span class='hs-varid'>l</span> <span class='hs-varid'>r</span><span class='hs-layout'>)</span> <span class='hs-layout'>(</span><span class='hs-varid'>isTip</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-conid'>True</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>join</span> <span class='hs-varid'>x</span> <span class='hs-layout'>(</span><span class='hs-varid'>filterGt</span> <span class='hs-varid'>cmplo</span> <span class='hs-varid'>l</span><span class='hs-layout'>)</span> <span class='hs-layout'>(</span><span class='hs-varid'>filterLt</span> <span class='hs-varid'>cmphi</span> <span class='hs-varid'>r</span><span class='hs-layout'>)</span>
hunk ./doc/html/monoids/src/Data-Set-Unboxed.html 365
-<a name="line-357"></a><span class='hs-definition'>intersection</span> <span class='hs-layout'>(</span><span class='hs-varid'>view</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-conid'>Tip</span><span class='hs-layout'>)</span> <span class='hs-keyword'>_</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>tip</span>
-<a name="line-358"></a><span class='hs-definition'>intersection</span> <span class='hs-keyword'>_</span> <span class='hs-layout'>(</span><span class='hs-varid'>view</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-conid'>Tip</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>tip</span>
+<a name="line-357"></a><span class='hs-definition'>intersection</span> <span class='hs-layout'>(</span><span class='hs-varid'>isTip</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-conid'>True</span><span class='hs-layout'>)</span> <span class='hs-keyword'>_</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>tip</span>
+<a name="line-358"></a><span class='hs-definition'>intersection</span> <span class='hs-keyword'>_</span> <span class='hs-layout'>(</span><span class='hs-varid'>isTip</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-conid'>True</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>tip</span>
hunk ./doc/html/monoids/src/Data-Set-Unboxed.html 386
-<a name="line-378"></a><span class='hs-definition'>filter</span> <span class='hs-keyword'>_</span> <span class='hs-layout'>(</span><span class='hs-varid'>view</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-conid'>Tip</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>tip</span>
-<a name="line-379"></a><span class='hs-definition'>filter</span> <span class='hs-varid'>p</span> <span class='hs-layout'>(</span><span class='hs-varid'>view</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-conid'>Bin</span> <span class='hs-keyword'>_</span> <span class='hs-varid'>x</span> <span class='hs-varid'>l</span> <span class='hs-varid'>r</span><span class='hs-layout'>)</span>
-<a name="line-380"></a>  <span class='hs-keyglyph'>|</span> <span class='hs-varid'>p</span> <span class='hs-varid'>x</span>       <span class='hs-keyglyph'>=</span> <span class='hs-varid'>join</span> <span class='hs-varid'>x</span> <span class='hs-layout'>(</span><span class='hs-varid'>filter</span> <span class='hs-varid'>p</span> <span class='hs-varid'>l</span><span class='hs-layout'>)</span> <span class='hs-layout'>(</span><span class='hs-varid'>filter</span> <span class='hs-varid'>p</span> <span class='hs-varid'>r</span><span class='hs-layout'>)</span>
-<a name="line-381"></a>  <span class='hs-keyglyph'>|</span> <span class='hs-varid'>otherwise</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>merge</span> <span class='hs-layout'>(</span><span class='hs-varid'>filter</span> <span class='hs-varid'>p</span> <span class='hs-varid'>l</span><span class='hs-layout'>)</span> <span class='hs-layout'>(</span><span class='hs-varid'>filter</span> <span class='hs-varid'>p</span> <span class='hs-varid'>r</span><span class='hs-layout'>)</span>
+<a name="line-378"></a><span class='hs-definition'>filter</span> <span class='hs-varid'>p</span> <span class='hs-layout'>(</span><span class='hs-varid'>view</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-conid'>Bin</span> <span class='hs-keyword'>_</span> <span class='hs-varid'>x</span> <span class='hs-varid'>l</span> <span class='hs-varid'>r</span><span class='hs-layout'>)</span>
+<a name="line-379"></a>  <span class='hs-keyglyph'>|</span> <span class='hs-varid'>p</span> <span class='hs-varid'>x</span>       <span class='hs-keyglyph'>=</span> <span class='hs-varid'>join</span> <span class='hs-varid'>x</span> <span class='hs-layout'>(</span><span class='hs-varid'>filter</span> <span class='hs-varid'>p</span> <span class='hs-varid'>l</span><span class='hs-layout'>)</span> <span class='hs-layout'>(</span><span class='hs-varid'>filter</span> <span class='hs-varid'>p</span> <span class='hs-varid'>r</span><span class='hs-layout'>)</span>
+<a name="line-380"></a>  <span class='hs-keyglyph'>|</span> <span class='hs-varid'>otherwise</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>merge</span> <span class='hs-layout'>(</span><span class='hs-varid'>filter</span> <span class='hs-varid'>p</span> <span class='hs-varid'>l</span><span class='hs-layout'>)</span> <span class='hs-layout'>(</span><span class='hs-varid'>filter</span> <span class='hs-varid'>p</span> <span class='hs-varid'>r</span><span class='hs-layout'>)</span>
+<a name="line-381"></a><span class='hs-definition'>filter</span> <span class='hs-keyword'>_</span> <span class='hs-keyword'>_</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>tip</span>
hunk ./doc/html/monoids/src/Data-Set-Unboxed.html 395
-<a name="line-387"></a><span class='hs-definition'>partition</span> <span class='hs-keyword'>_</span> <span class='hs-layout'>(</span><span class='hs-varid'>view</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-conid'>Tip</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=</span> <span class='hs-layout'>(</span><span class='hs-varid'>tip</span><span class='hs-layout'>,</span><span class='hs-varid'>tip</span><span class='hs-layout'>)</span>
-<a name="line-388"></a><span class='hs-definition'>partition</span> <span class='hs-varid'>p</span> <span class='hs-layout'>(</span><span class='hs-varid'>view</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-conid'>Bin</span> <span class='hs-keyword'>_</span> <span class='hs-varid'>x</span> <span class='hs-varid'>l</span> <span class='hs-varid'>r</span><span class='hs-layout'>)</span>
-<a name="line-389"></a>  <span class='hs-keyglyph'>|</span> <span class='hs-varid'>p</span> <span class='hs-varid'>x</span>       <span class='hs-keyglyph'>=</span> <span class='hs-layout'>(</span><span class='hs-varid'>join</span> <span class='hs-varid'>x</span> <span class='hs-varid'>l1</span> <span class='hs-varid'>r1</span><span class='hs-layout'>,</span><span class='hs-varid'>merge</span> <span class='hs-varid'>l2</span> <span class='hs-varid'>r2</span><span class='hs-layout'>)</span>
-<a name="line-390"></a>  <span class='hs-keyglyph'>|</span> <span class='hs-varid'>otherwise</span> <span class='hs-keyglyph'>=</span> <span class='hs-layout'>(</span><span class='hs-varid'>merge</span> <span class='hs-varid'>l1</span> <span class='hs-varid'>r1</span><span class='hs-layout'>,</span><span class='hs-varid'>join</span> <span class='hs-varid'>x</span> <span class='hs-varid'>l2</span> <span class='hs-varid'>r2</span><span class='hs-layout'>)</span>
-<a name="line-391"></a>  <span class='hs-keyword'>where</span>
-<a name="line-392"></a>    <span class='hs-layout'>(</span><span class='hs-varid'>l1</span><span class='hs-layout'>,</span><span class='hs-varid'>l2</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>partition</span> <span class='hs-varid'>p</span> <span class='hs-varid'>l</span>
-<a name="line-393"></a>    <span class='hs-layout'>(</span><span class='hs-varid'>r1</span><span class='hs-layout'>,</span><span class='hs-varid'>r2</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>partition</span> <span class='hs-varid'>p</span> <span class='hs-varid'>r</span>
+<a name="line-387"></a><span class='hs-definition'>partition</span> <span class='hs-varid'>p</span> <span class='hs-layout'>(</span><span class='hs-varid'>view</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-conid'>Bin</span> <span class='hs-keyword'>_</span> <span class='hs-varid'>x</span> <span class='hs-varid'>l</span> <span class='hs-varid'>r</span><span class='hs-layout'>)</span>
+<a name="line-388"></a>  <span class='hs-keyglyph'>|</span> <span class='hs-varid'>p</span> <span class='hs-varid'>x</span>       <span class='hs-keyglyph'>=</span> <span class='hs-layout'>(</span><span class='hs-varid'>join</span> <span class='hs-varid'>x</span> <span class='hs-varid'>l1</span> <span class='hs-varid'>r1</span><span class='hs-layout'>,</span><span class='hs-varid'>merge</span> <span class='hs-varid'>l2</span> <span class='hs-varid'>r2</span><span class='hs-layout'>)</span>
+<a name="line-389"></a>  <span class='hs-keyglyph'>|</span> <span class='hs-varid'>otherwise</span> <span class='hs-keyglyph'>=</span> <span class='hs-layout'>(</span><span class='hs-varid'>merge</span> <span class='hs-varid'>l1</span> <span class='hs-varid'>r1</span><span class='hs-layout'>,</span><span class='hs-varid'>join</span> <span class='hs-varid'>x</span> <span class='hs-varid'>l2</span> <span class='hs-varid'>r2</span><span class='hs-layout'>)</span>
+<a name="line-390"></a>  <span class='hs-keyword'>where</span>
+<a name="line-391"></a>    <span class='hs-layout'>(</span><span class='hs-varid'>l1</span><span class='hs-layout'>,</span><span class='hs-varid'>l2</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>partition</span> <span class='hs-varid'>p</span> <span class='hs-varid'>l</span>
+<a name="line-392"></a>    <span class='hs-layout'>(</span><span class='hs-varid'>r1</span><span class='hs-layout'>,</span><span class='hs-varid'>r2</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>partition</span> <span class='hs-varid'>p</span> <span class='hs-varid'>r</span>
+<a name="line-393"></a><span class='hs-definition'>partition</span> <span class='hs-keyword'>_</span> <span class='hs-keyword'>_</span> <span class='hs-keyglyph'>=</span> <span class='hs-layout'>(</span><span class='hs-varid'>tip</span><span class='hs-layout'>,</span><span class='hs-varid'>tip</span><span class='hs-layout'>)</span>
hunk ./doc/html/monoids/src/Data-Set-Unboxed.html 427
-<a name="line-419"></a><span class='hs-definition'>mapMonotonic</span> <span class='hs-keyword'>_</span> <span class='hs-layout'>(</span><span class='hs-varid'>view</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-conid'>Tip</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>tip</span>
-<a name="line-420"></a><span class='hs-definition'>mapMonotonic</span> <span class='hs-varid'>f</span> <span class='hs-layout'>(</span><span class='hs-varid'>view</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-conid'>Bin</span> <span class='hs-varid'>sz</span> <span class='hs-varid'>x</span> <span class='hs-varid'>l</span> <span class='hs-varid'>r</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>bin</span> <span class='hs-varid'>sz</span> <span class='hs-layout'>(</span><span class='hs-varid'>f</span> <span class='hs-varid'>x</span><span class='hs-layout'>)</span> <span class='hs-layout'>(</span><span class='hs-varid'>mapMonotonic</span> <span class='hs-varid'>f</span> <span class='hs-varid'>l</span><span class='hs-layout'>)</span> <span class='hs-layout'>(</span><span class='hs-varid'>mapMonotonic</span> <span class='hs-varid'>f</span> <span class='hs-varid'>r</span><span class='hs-layout'>)</span>
+<a name="line-419"></a><span class='hs-definition'>mapMonotonic</span> <span class='hs-varid'>f</span> <span class='hs-layout'>(</span><span class='hs-varid'>view</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-conid'>Bin</span> <span class='hs-varid'>sz</span> <span class='hs-varid'>x</span> <span class='hs-varid'>l</span> <span class='hs-varid'>r</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>bin</span> <span class='hs-varid'>sz</span> <span class='hs-layout'>(</span><span class='hs-varid'>f</span> <span class='hs-varid'>x</span><span class='hs-layout'>)</span> <span class='hs-layout'>(</span><span class='hs-varid'>mapMonotonic</span> <span class='hs-varid'>f</span> <span class='hs-varid'>l</span><span class='hs-layout'>)</span> <span class='hs-layout'>(</span><span class='hs-varid'>mapMonotonic</span> <span class='hs-varid'>f</span> <span class='hs-varid'>r</span><span class='hs-layout'>)</span>
+<a name="line-420"></a><span class='hs-definition'>mapMonotonic</span> <span class='hs-keyword'>_</span> <span class='hs-keyword'>_</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>tip</span>
hunk ./doc/html/monoids/src/Data-Set-Unboxed.html 440
-<a name="line-432"></a><span class='hs-definition'>foldr</span> <span class='hs-keyword'>_</span> <span class='hs-varid'>z</span> <span class='hs-layout'>(</span><span class='hs-varid'>view</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-conid'>Tip</span><span class='hs-layout'>)</span>         <span class='hs-keyglyph'>=</span> <span class='hs-varid'>z</span>
-<a name="line-433"></a><span class='hs-definition'>foldr</span> <span class='hs-varid'>f</span> <span class='hs-varid'>z</span> <span class='hs-layout'>(</span><span class='hs-varid'>view</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-conid'>Bin</span> <span class='hs-keyword'>_</span> <span class='hs-varid'>x</span> <span class='hs-varid'>l</span> <span class='hs-varid'>r</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>foldr</span> <span class='hs-varid'>f</span> <span class='hs-layout'>(</span><span class='hs-varid'>f</span> <span class='hs-varid'>x</span> <span class='hs-layout'>(</span><span class='hs-varid'>foldr</span> <span class='hs-varid'>f</span> <span class='hs-varid'>z</span> <span class='hs-varid'>r</span><span class='hs-layout'>)</span><span class='hs-layout'>)</span> <span class='hs-varid'>l</span>
+<a name="line-432"></a><span class='hs-definition'>foldr</span> <span class='hs-varid'>f</span> <span class='hs-varid'>z</span> <span class='hs-layout'>(</span><span class='hs-varid'>view</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-conid'>Bin</span> <span class='hs-keyword'>_</span> <span class='hs-varid'>x</span> <span class='hs-varid'>l</span> <span class='hs-varid'>r</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>foldr</span> <span class='hs-varid'>f</span> <span class='hs-layout'>(</span><span class='hs-varid'>f</span> <span class='hs-varid'>x</span> <span class='hs-layout'>(</span><span class='hs-varid'>foldr</span> <span class='hs-varid'>f</span> <span class='hs-varid'>z</span> <span class='hs-varid'>r</span><span class='hs-layout'>)</span><span class='hs-layout'>)</span> <span class='hs-varid'>l</span>
+<a name="line-433"></a><span class='hs-definition'>foldr</span> <span class='hs-keyword'>_</span> <span class='hs-varid'>z</span> <span class='hs-keyword'>_</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>z</span>
hunk ./doc/html/monoids/src/Data-Set-Unboxed.html 537
-<a name="line-529"></a><span class='hs-comment'>{-
-<a name="line-530"></a>XXX unused code
-<a name="line-531"></a>
-<a name="line-532"></a>showSet :: (Show a) =&gt; [a] -&gt; ShowS
-<a name="line-533"></a>showSet []     
-<a name="line-534"></a>  = showString "{}" 
-<a name="line-535"></a>showSet (x:xs) 
-<a name="line-536"></a>  = showChar '{' . shows x . showTail xs
-<a name="line-537"></a>  where
-<a name="line-538"></a>    showTail []       = showChar '}'
-<a name="line-539"></a>    showTail (x':xs') = showChar ',' . shows x' . showTail xs'
-<a name="line-540"></a>-}</span>
-<a name="line-541"></a>
-<a name="line-542"></a><span class='hs-comment'>{--------------------------------------------------------------------
-<a name="line-543"></a>  Read
-<a name="line-544"></a>--------------------------------------------------------------------}</span>
-<a name="line-545"></a><span class='hs-keyword'>instance</span> <span class='hs-layout'>(</span><span class='hs-conid'>US</span> <span class='hs-varid'>a</span><span class='hs-layout'>,</span> <span class='hs-conid'>Read</span> <span class='hs-varid'>a</span><span class='hs-layout'>,</span> <span class='hs-conid'>Ord</span> <span class='hs-varid'>a</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>Read</span> <span class='hs-layout'>(</span><span class='hs-conid'>USet</span> <span class='hs-varid'>a</span><span class='hs-layout'>)</span> <span class='hs-keyword'>where</span>
-<a name="line-546"></a><span class='hs-cpp'>#ifdef __GLASGOW_HASKELL__</span>
-<a name="line-547"></a>  <span class='hs-varid'>readPrec</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>parens</span> <span class='hs-varop'>$</span> <span class='hs-varid'>prec</span> <span class='hs-num'>10</span> <span class='hs-varop'>$</span> <span class='hs-keyword'>do</span>
-<a name="line-548"></a>    <span class='hs-conid'>Ident</span> <span class='hs-str'>"fromList"</span> <span class='hs-keyglyph'>&lt;-</span> <span class='hs-varid'>lexP</span>
-<a name="line-549"></a>    <span class='hs-varid'>xs</span> <span class='hs-keyglyph'>&lt;-</span> <span class='hs-varid'>readPrec</span>
-<a name="line-550"></a>    <span class='hs-varid'>return</span> <span class='hs-layout'>(</span><span class='hs-varid'>fromList</span> <span class='hs-varid'>xs</span><span class='hs-layout'>)</span>
-<a name="line-551"></a>
-<a name="line-552"></a>  <span class='hs-varid'>readListPrec</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>readListPrecDefault</span>
-<a name="line-553"></a><span class='hs-cpp'>#else</span>
-<a name="line-554"></a>  <span class='hs-varid'>readsPrec</span> <span class='hs-varid'>p</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>readParen</span> <span class='hs-layout'>(</span><span class='hs-varid'>p</span> <span class='hs-varop'>&gt;</span> <span class='hs-num'>10</span><span class='hs-layout'>)</span> <span class='hs-varop'>$</span> <span class='hs-keyglyph'>\</span> <span class='hs-varid'>r</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-keyword'>do</span>
-<a name="line-555"></a>    <span class='hs-layout'>(</span><span class='hs-str'>"fromList"</span><span class='hs-layout'>,</span><span class='hs-varid'>s</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>&lt;-</span> <span class='hs-varid'>lex</span> <span class='hs-varid'>r</span>
-<a name="line-556"></a>    <span class='hs-layout'>(</span><span class='hs-varid'>xs</span><span class='hs-layout'>,</span><span class='hs-varid'>t</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>&lt;-</span> <span class='hs-varid'>reads</span> <span class='hs-varid'>s</span>
-<a name="line-557"></a>    <span class='hs-varid'>return</span> <span class='hs-layout'>(</span><span class='hs-varid'>fromList</span> <span class='hs-varid'>xs</span><span class='hs-layout'>,</span><span class='hs-varid'>t</span><span class='hs-layout'>)</span>
-<a name="line-558"></a><span class='hs-cpp'>#endif</span>
+<a name="line-529"></a><span class='hs-comment'>{--------------------------------------------------------------------
+<a name="line-530"></a>  Read
+<a name="line-531"></a>--------------------------------------------------------------------}</span>
+<a name="line-532"></a><span class='hs-keyword'>instance</span> <span class='hs-layout'>(</span><span class='hs-conid'>US</span> <span class='hs-varid'>a</span><span class='hs-layout'>,</span> <span class='hs-conid'>Read</span> <span class='hs-varid'>a</span><span class='hs-layout'>,</span> <span class='hs-conid'>Ord</span> <span class='hs-varid'>a</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>Read</span> <span class='hs-layout'>(</span><span class='hs-conid'>USet</span> <span class='hs-varid'>a</span><span class='hs-layout'>)</span> <span class='hs-keyword'>where</span>
+<a name="line-533"></a><span class='hs-cpp'>#ifdef __GLASGOW_HASKELL__</span>
+<a name="line-534"></a>  <span class='hs-varid'>readPrec</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>parens</span> <span class='hs-varop'>$</span> <span class='hs-varid'>prec</span> <span class='hs-num'>10</span> <span class='hs-varop'>$</span> <span class='hs-keyword'>do</span>
+<a name="line-535"></a>    <span class='hs-conid'>Ident</span> <span class='hs-str'>"fromList"</span> <span class='hs-keyglyph'>&lt;-</span> <span class='hs-varid'>lexP</span>
+<a name="line-536"></a>    <span class='hs-varid'>xs</span> <span class='hs-keyglyph'>&lt;-</span> <span class='hs-varid'>readPrec</span>
+<a name="line-537"></a>    <span class='hs-varid'>return</span> <span class='hs-layout'>(</span><span class='hs-varid'>fromList</span> <span class='hs-varid'>xs</span><span class='hs-layout'>)</span>
+<a name="line-538"></a>
+<a name="line-539"></a>  <span class='hs-varid'>readListPrec</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>readListPrecDefault</span>
+<a name="line-540"></a><span class='hs-cpp'>#else</span>
+<a name="line-541"></a>  <span class='hs-varid'>readsPrec</span> <span class='hs-varid'>p</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>readParen</span> <span class='hs-layout'>(</span><span class='hs-varid'>p</span> <span class='hs-varop'>&gt;</span> <span class='hs-num'>10</span><span class='hs-layout'>)</span> <span class='hs-varop'>$</span> <span class='hs-keyglyph'>\</span> <span class='hs-varid'>r</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-keyword'>do</span>
+<a name="line-542"></a>    <span class='hs-layout'>(</span><span class='hs-str'>"fromList"</span><span class='hs-layout'>,</span><span class='hs-varid'>s</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>&lt;-</span> <span class='hs-varid'>lex</span> <span class='hs-varid'>r</span>
+<a name="line-543"></a>    <span class='hs-layout'>(</span><span class='hs-varid'>xs</span><span class='hs-layout'>,</span><span class='hs-varid'>t</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>&lt;-</span> <span class='hs-varid'>reads</span> <span class='hs-varid'>s</span>
+<a name="line-544"></a>    <span class='hs-varid'>return</span> <span class='hs-layout'>(</span><span class='hs-varid'>fromList</span> <span class='hs-varid'>xs</span><span class='hs-layout'>,</span><span class='hs-varid'>t</span><span class='hs-layout'>)</span>
+<a name="line-545"></a><span class='hs-cpp'>#endif</span>
+<a name="line-546"></a>
+<a name="line-547"></a><span class='hs-comment'>{--------------------------------------------------------------------
+<a name="line-548"></a>  Typeable/Data
+<a name="line-549"></a>--------------------------------------------------------------------}</span>
+<a name="line-550"></a>
+<a name="line-551"></a><span class='hs-comment'>-- #include "Typeable.h"</span>
+<a name="line-552"></a><span class='hs-comment'>-- INSTANCE_TYPEABLE1(Set,setTc,"Set")</span>
+<a name="line-553"></a>
+<a name="line-554"></a><span class='hs-comment'>{--------------------------------------------------------------------
+<a name="line-555"></a>  Utility functions that return sub-ranges of the original
+<a name="line-556"></a>  tree. Some functions take a comparison function as argument to
+<a name="line-557"></a>  allow comparisons against infinite values. A function [cmplo x]
+<a name="line-558"></a>  should be read as [compare lo x].
hunk ./doc/html/monoids/src/Data-Set-Unboxed.html 568
-<a name="line-560"></a><span class='hs-comment'>{--------------------------------------------------------------------
-<a name="line-561"></a>  Typeable/Data
-<a name="line-562"></a>--------------------------------------------------------------------}</span>
-<a name="line-563"></a>
-<a name="line-564"></a><span class='hs-comment'>-- #include "Typeable.h"</span>
-<a name="line-565"></a><span class='hs-comment'>-- INSTANCE_TYPEABLE1(Set,setTc,"Set")</span>
-<a name="line-566"></a>
-<a name="line-567"></a><span class='hs-comment'>{--------------------------------------------------------------------
-<a name="line-568"></a>  Utility functions that return sub-ranges of the original
-<a name="line-569"></a>  tree. Some functions take a comparison function as argument to
-<a name="line-570"></a>  allow comparisons against infinite values. A function [cmplo x]
-<a name="line-571"></a>  should be read as [compare lo x].
-<a name="line-572"></a>
-<a name="line-573"></a>  [trim cmplo cmphi t]  A tree that is either empty or where [cmplo x == LT]
-<a name="line-574"></a>                        and [cmphi x == GT] for the value [x] of the root.
-<a name="line-575"></a>  [filterGt cmp t]      A tree where for all values [k]. [cmp k == LT]
-<a name="line-576"></a>  [filterLt cmp t]      A tree where for all values [k]. [cmp k == GT]
-<a name="line-577"></a>
-<a name="line-578"></a>  [split k t]           Returns two trees [l] and [r] where all values
-<a name="line-579"></a>                        in [l] are &lt;[k] and all keys in [r] are &gt;[k].
-<a name="line-580"></a>  [splitMember k t]     Just like [split] but also returns whether [k]
-<a name="line-581"></a>                        was found in the tree.
-<a name="line-582"></a>--------------------------------------------------------------------}</span>
-<a name="line-583"></a>
-<a name="line-584"></a><a name="trim"></a><span class='hs-comment'>{--------------------------------------------------------------------
-<a name="line-585"></a>  [trim lo hi t] trims away all subtrees that surely contain no
-<a name="line-586"></a>  values between the range [lo] to [hi]. The returned tree is either
-<a name="line-587"></a>  empty or the key of the root is between @lo@ and @hi@.
+<a name="line-560"></a>  [trim cmplo cmphi t]  A tree that is either empty or where [cmplo x == LT]
+<a name="line-561"></a>                        and [cmphi x == GT] for the value [x] of the root.
+<a name="line-562"></a>  [filterGt cmp t]      A tree where for all values [k]. [cmp k == LT]
+<a name="line-563"></a>  [filterLt cmp t]      A tree where for all values [k]. [cmp k == GT]
+<a name="line-564"></a>
+<a name="line-565"></a>  [split k t]           Returns two trees [l] and [r] where all values
+<a name="line-566"></a>                        in [l] are &lt;[k] and all keys in [r] are &gt;[k].
+<a name="line-567"></a>  [splitMember k t]     Just like [split] but also returns whether [k]
+<a name="line-568"></a>                        was found in the tree.
+<a name="line-569"></a>--------------------------------------------------------------------}</span>
+<a name="line-570"></a>
+<a name="line-571"></a><a name="trim"></a><span class='hs-comment'>{--------------------------------------------------------------------
+<a name="line-572"></a>  [trim lo hi t] trims away all subtrees that surely contain no
+<a name="line-573"></a>  values between the range [lo] to [hi]. The returned tree is either
+<a name="line-574"></a>  empty or the key of the root is between @lo@ and @hi@.
+<a name="line-575"></a>--------------------------------------------------------------------}</span>
+<a name="line-576"></a><span class='hs-definition'>trim</span> <span class='hs-keyglyph'>::</span> <span class='hs-conid'>US</span> <span class='hs-varid'>a</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-layout'>(</span><span class='hs-varid'>a</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-conid'>Ordering</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-layout'>(</span><span class='hs-varid'>a</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-conid'>Ordering</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-conid'>USet</span> <span class='hs-varid'>a</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-conid'>USet</span> <span class='hs-varid'>a</span>
+<a name="line-577"></a><span class='hs-definition'>trim</span> <span class='hs-varid'>cmplo</span> <span class='hs-varid'>cmphi</span> <span class='hs-varid'>t</span><span class='hs-keyglyph'>@</span><span class='hs-layout'>(</span><span class='hs-varid'>view</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-conid'>Bin</span> <span class='hs-keyword'>_</span> <span class='hs-varid'>x</span> <span class='hs-varid'>l</span> <span class='hs-varid'>r</span><span class='hs-layout'>)</span>
+<a name="line-578"></a>  <span class='hs-keyglyph'>=</span> <span class='hs-keyword'>case</span> <span class='hs-varid'>cmplo</span> <span class='hs-varid'>x</span> <span class='hs-keyword'>of</span>
+<a name="line-579"></a>      <span class='hs-conid'>LT</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-keyword'>case</span> <span class='hs-varid'>cmphi</span> <span class='hs-varid'>x</span> <span class='hs-keyword'>of</span>
+<a name="line-580"></a>              <span class='hs-conid'>GT</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-varid'>t</span>
+<a name="line-581"></a>              <span class='hs-keyword'>_</span>  <span class='hs-keyglyph'>-&gt;</span> <span class='hs-varid'>trim</span> <span class='hs-varid'>cmplo</span> <span class='hs-varid'>cmphi</span> <span class='hs-varid'>l</span>
+<a name="line-582"></a>      <span class='hs-keyword'>_</span>  <span class='hs-keyglyph'>-&gt;</span> <span class='hs-varid'>trim</span> <span class='hs-varid'>cmplo</span> <span class='hs-varid'>cmphi</span> <span class='hs-varid'>r</span>
+<a name="line-583"></a><span class='hs-definition'>trim</span> <span class='hs-keyword'>_</span>     <span class='hs-keyword'>_</span>     <span class='hs-keyword'>_</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>tip</span>
+<a name="line-584"></a>
+<a name="line-585"></a><a name="filterGt"></a><span class='hs-comment'>{--------------------------------------------------------------------
+<a name="line-586"></a>  [filterGt x t] filter all values &gt;[x] from tree [t]
+<a name="line-587"></a>  [filterLt x t] filter all values &lt;[x] from tree [t]
hunk ./doc/html/monoids/src/Data-Set-Unboxed.html 597
-<a name="line-589"></a><span class='hs-definition'>trim</span> <span class='hs-keyglyph'>::</span> <span class='hs-conid'>US</span> <span class='hs-varid'>a</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-layout'>(</span><span class='hs-varid'>a</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-conid'>Ordering</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-layout'>(</span><span class='hs-varid'>a</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-conid'>Ordering</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-conid'>USet</span> <span class='hs-varid'>a</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-conid'>USet</span> <span class='hs-varid'>a</span>
-<a name="line-590"></a><span class='hs-definition'>trim</span> <span class='hs-keyword'>_</span>     <span class='hs-keyword'>_</span>     <span class='hs-layout'>(</span><span class='hs-varid'>view</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-conid'>Tip</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>tip</span>
-<a name="line-591"></a><span class='hs-definition'>trim</span> <span class='hs-varid'>cmplo</span> <span class='hs-varid'>cmphi</span> <span class='hs-varid'>t</span><span class='hs-keyglyph'>@</span><span class='hs-layout'>(</span><span class='hs-varid'>view</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-conid'>Bin</span> <span class='hs-keyword'>_</span> <span class='hs-varid'>x</span> <span class='hs-varid'>l</span> <span class='hs-varid'>r</span><span class='hs-layout'>)</span>
-<a name="line-592"></a>  <span class='hs-keyglyph'>=</span> <span class='hs-keyword'>case</span> <span class='hs-varid'>cmplo</span> <span class='hs-varid'>x</span> <span class='hs-keyword'>of</span>
-<a name="line-593"></a>      <span class='hs-conid'>LT</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-keyword'>case</span> <span class='hs-varid'>cmphi</span> <span class='hs-varid'>x</span> <span class='hs-keyword'>of</span>
-<a name="line-594"></a>              <span class='hs-conid'>GT</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-varid'>t</span>
-<a name="line-595"></a>              <span class='hs-keyword'>_</span>  <span class='hs-keyglyph'>-&gt;</span> <span class='hs-varid'>trim</span> <span class='hs-varid'>cmplo</span> <span class='hs-varid'>cmphi</span> <span class='hs-varid'>l</span>
-<a name="line-596"></a>      <span class='hs-keyword'>_</span>  <span class='hs-keyglyph'>-&gt;</span> <span class='hs-varid'>trim</span> <span class='hs-varid'>cmplo</span> <span class='hs-varid'>cmphi</span> <span class='hs-varid'>r</span>
-<a name="line-597"></a>
-<a name="line-598"></a><a name="filterGt"></a><span class='hs-comment'>{--------------------------------------------------------------------
-<a name="line-599"></a>  [filterGt x t] filter all values &gt;[x] from tree [t]
-<a name="line-600"></a>  [filterLt x t] filter all values &lt;[x] from tree [t]
-<a name="line-601"></a>--------------------------------------------------------------------}</span>
-<a name="line-602"></a><span class='hs-definition'>filterGt</span> <span class='hs-keyglyph'>::</span> <span class='hs-conid'>US</span> <span class='hs-varid'>a</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-layout'>(</span><span class='hs-varid'>a</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-conid'>Ordering</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-conid'>USet</span> <span class='hs-varid'>a</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-conid'>USet</span> <span class='hs-varid'>a</span>
-<a name="line-603"></a><span class='hs-definition'>filterGt</span> <span class='hs-keyword'>_</span> <span class='hs-layout'>(</span><span class='hs-varid'>view</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-conid'>Tip</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>tip</span>
-<a name="line-604"></a><span class='hs-definition'>filterGt</span> <span class='hs-varid'>cmp</span> <span class='hs-layout'>(</span><span class='hs-varid'>view</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-conid'>Bin</span> <span class='hs-keyword'>_</span> <span class='hs-varid'>x</span> <span class='hs-varid'>l</span> <span class='hs-varid'>r</span><span class='hs-layout'>)</span>
-<a name="line-605"></a>  <span class='hs-keyglyph'>=</span> <span class='hs-keyword'>case</span> <span class='hs-varid'>cmp</span> <span class='hs-varid'>x</span> <span class='hs-keyword'>of</span>
-<a name="line-606"></a>      <span class='hs-conid'>LT</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-varid'>join</span> <span class='hs-varid'>x</span> <span class='hs-layout'>(</span><span class='hs-varid'>filterGt</span> <span class='hs-varid'>cmp</span> <span class='hs-varid'>l</span><span class='hs-layout'>)</span> <span class='hs-varid'>r</span>
-<a name="line-607"></a>      <span class='hs-conid'>GT</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-varid'>filterGt</span> <span class='hs-varid'>cmp</span> <span class='hs-varid'>r</span>
-<a name="line-608"></a>      <span class='hs-conid'>EQ</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-varid'>r</span>
-<a name="line-609"></a>      
-<a name="line-610"></a><a name="filterLt"></a><span class='hs-definition'>filterLt</span> <span class='hs-keyglyph'>::</span> <span class='hs-conid'>US</span> <span class='hs-varid'>a</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-layout'>(</span><span class='hs-varid'>a</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-conid'>Ordering</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-conid'>USet</span> <span class='hs-varid'>a</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-conid'>USet</span> <span class='hs-varid'>a</span>
-<a name="line-611"></a><span class='hs-definition'>filterLt</span> <span class='hs-keyword'>_</span> <span class='hs-layout'>(</span><span class='hs-varid'>view</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-conid'>Tip</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>tip</span>
-<a name="line-612"></a><span class='hs-definition'>filterLt</span> <span class='hs-varid'>cmp</span> <span class='hs-layout'>(</span><span class='hs-varid'>view</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-conid'>Bin</span> <span class='hs-keyword'>_</span> <span class='hs-varid'>x</span> <span class='hs-varid'>l</span> <span class='hs-varid'>r</span><span class='hs-layout'>)</span>
-<a name="line-613"></a>  <span class='hs-keyglyph'>=</span> <span class='hs-keyword'>case</span> <span class='hs-varid'>cmp</span> <span class='hs-varid'>x</span> <span class='hs-keyword'>of</span>
-<a name="line-614"></a>      <span class='hs-conid'>LT</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-varid'>filterLt</span> <span class='hs-varid'>cmp</span> <span class='hs-varid'>l</span>
-<a name="line-615"></a>      <span class='hs-conid'>GT</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-varid'>join</span> <span class='hs-varid'>x</span> <span class='hs-varid'>l</span> <span class='hs-layout'>(</span><span class='hs-varid'>filterLt</span> <span class='hs-varid'>cmp</span> <span class='hs-varid'>r</span><span class='hs-layout'>)</span>
-<a name="line-616"></a>      <span class='hs-conid'>EQ</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-varid'>l</span>
-<a name="line-617"></a>
-<a name="line-618"></a>
-<a name="line-619"></a><a name="split"></a><span class='hs-comment'>{--------------------------------------------------------------------
-<a name="line-620"></a>  Split
-<a name="line-621"></a>--------------------------------------------------------------------}</span>
-<a name="line-622"></a><span class='hs-comment'>-- | /O(log n)/. The expression (@'split' x set@) is a pair @(set1,set2)@</span>
-<a name="line-623"></a><span class='hs-comment'>-- where @set1@ comprises the elements of @set@ less than @x@ and @set2@</span>
-<a name="line-624"></a><span class='hs-comment'>-- comprises the elements of @set@ greater than @x@.</span>
-<a name="line-625"></a><span class='hs-definition'>split</span> <span class='hs-keyglyph'>::</span> <span class='hs-layout'>(</span><span class='hs-conid'>US</span> <span class='hs-varid'>a</span><span class='hs-layout'>,</span> <span class='hs-conid'>Ord</span> <span class='hs-varid'>a</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-varid'>a</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-conid'>USet</span> <span class='hs-varid'>a</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-layout'>(</span><span class='hs-conid'>USet</span> <span class='hs-varid'>a</span><span class='hs-layout'>,</span><span class='hs-conid'>USet</span> <span class='hs-varid'>a</span><span class='hs-layout'>)</span>
-<a name="line-626"></a><span class='hs-definition'>split</span> <span class='hs-keyword'>_</span> <span class='hs-layout'>(</span><span class='hs-varid'>view</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-conid'>Tip</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=</span> <span class='hs-layout'>(</span><span class='hs-varid'>tip</span><span class='hs-layout'>,</span><span class='hs-varid'>tip</span><span class='hs-layout'>)</span>
-<a name="line-627"></a><span class='hs-definition'>split</span> <span class='hs-varid'>x</span> <span class='hs-layout'>(</span><span class='hs-varid'>view</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-conid'>Bin</span> <span class='hs-keyword'>_</span> <span class='hs-varid'>y</span> <span class='hs-varid'>l</span> <span class='hs-varid'>r</span><span class='hs-layout'>)</span>
-<a name="line-628"></a>  <span class='hs-keyglyph'>=</span> <span class='hs-keyword'>case</span> <span class='hs-varid'>compare</span> <span class='hs-varid'>x</span> <span class='hs-varid'>y</span> <span class='hs-keyword'>of</span>
-<a name="line-629"></a>      <span class='hs-conid'>LT</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-keyword'>let</span> <span class='hs-layout'>(</span><span class='hs-varid'>lt</span><span class='hs-layout'>,</span><span class='hs-varid'>gt</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>split</span> <span class='hs-varid'>x</span> <span class='hs-varid'>l</span> <span class='hs-keyword'>in</span> <span class='hs-layout'>(</span><span class='hs-varid'>lt</span><span class='hs-layout'>,</span><span class='hs-varid'>join</span> <span class='hs-varid'>y</span> <span class='hs-varid'>gt</span> <span class='hs-varid'>r</span><span class='hs-layout'>)</span>
-<a name="line-630"></a>      <span class='hs-conid'>GT</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-keyword'>let</span> <span class='hs-layout'>(</span><span class='hs-varid'>lt</span><span class='hs-layout'>,</span><span class='hs-varid'>gt</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>split</span> <span class='hs-varid'>x</span> <span class='hs-varid'>r</span> <span class='hs-keyword'>in</span> <span class='hs-layout'>(</span><span class='hs-varid'>join</span> <span class='hs-varid'>y</span> <span class='hs-varid'>l</span> <span class='hs-varid'>lt</span><span class='hs-layout'>,</span><span class='hs-varid'>gt</span><span class='hs-layout'>)</span>
-<a name="line-631"></a>      <span class='hs-conid'>EQ</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-layout'>(</span><span class='hs-varid'>l</span><span class='hs-layout'>,</span><span class='hs-varid'>r</span><span class='hs-layout'>)</span>
-<a name="line-632"></a>
-<a name="line-633"></a><a name="splitMember"></a><span class='hs-comment'>-- | /O(log n)/. Performs a 'split' but also returns whether the pivot</span>
-<a name="line-634"></a><span class='hs-comment'>-- element was found in the original set.</span>
-<a name="line-635"></a><span class='hs-definition'>splitMember</span> <span class='hs-keyglyph'>::</span> <span class='hs-layout'>(</span><span class='hs-conid'>US</span> <span class='hs-varid'>a</span><span class='hs-layout'>,</span> <span class='hs-conid'>Ord</span> <span class='hs-varid'>a</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-varid'>a</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-conid'>USet</span> <span class='hs-varid'>a</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-layout'>(</span><span class='hs-conid'>USet</span> <span class='hs-varid'>a</span><span class='hs-layout'>,</span><span class='hs-conid'>Bool</span><span class='hs-layout'>,</span><span class='hs-conid'>USet</span> <span class='hs-varid'>a</span><span class='hs-layout'>)</span>
-<a name="line-636"></a><span class='hs-definition'>splitMember</span> <span class='hs-varid'>x</span> <span class='hs-varid'>t</span> <span class='hs-keyglyph'>=</span> <span class='hs-keyword'>let</span> <span class='hs-layout'>(</span><span class='hs-varid'>l</span><span class='hs-layout'>,</span><span class='hs-varid'>m</span><span class='hs-layout'>,</span><span class='hs-varid'>r</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>splitLookup</span> <span class='hs-varid'>x</span> <span class='hs-varid'>t</span> <span class='hs-keyword'>in</span>
-<a name="line-637"></a>     <span class='hs-layout'>(</span><span class='hs-varid'>l</span><span class='hs-layout'>,</span><span class='hs-varid'>maybe</span> <span class='hs-conid'>False</span> <span class='hs-layout'>(</span><span class='hs-varid'>const</span> <span class='hs-conid'>True</span><span class='hs-layout'>)</span> <span class='hs-varid'>m</span><span class='hs-layout'>,</span><span class='hs-varid'>r</span><span class='hs-layout'>)</span>
-<a name="line-638"></a>
-<a name="line-639"></a><a name="splitLookup"></a><span class='hs-comment'>-- | /O(log n)/. Performs a 'split' but also returns the pivot</span>
-<a name="line-640"></a><span class='hs-comment'>-- element that was found in the original set.</span>
-<a name="line-641"></a><span class='hs-definition'>splitLookup</span> <span class='hs-keyglyph'>::</span> <span class='hs-layout'>(</span><span class='hs-conid'>US</span> <span class='hs-varid'>a</span><span class='hs-layout'>,</span> <span class='hs-conid'>Ord</span> <span class='hs-varid'>a</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-varid'>a</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-conid'>USet</span> <span class='hs-varid'>a</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-layout'>(</span><span class='hs-conid'>USet</span> <span class='hs-varid'>a</span><span class='hs-layout'>,</span><span class='hs-conid'>Maybe</span> <span class='hs-varid'>a</span><span class='hs-layout'>,</span><span class='hs-conid'>USet</span> <span class='hs-varid'>a</span><span class='hs-layout'>)</span>
-<a name="line-642"></a><span class='hs-definition'>splitLookup</span> <span class='hs-keyword'>_</span> <span class='hs-layout'>(</span><span class='hs-varid'>view</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-conid'>Tip</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=</span> <span class='hs-layout'>(</span><span class='hs-varid'>tip</span><span class='hs-layout'>,</span><span class='hs-conid'>Nothing</span><span class='hs-layout'>,</span><span class='hs-varid'>tip</span><span class='hs-layout'>)</span>
-<a name="line-643"></a><span class='hs-definition'>splitLookup</span> <span class='hs-varid'>x</span> <span class='hs-layout'>(</span><span class='hs-varid'>view</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-conid'>Bin</span> <span class='hs-keyword'>_</span> <span class='hs-varid'>y</span> <span class='hs-varid'>l</span> <span class='hs-varid'>r</span><span class='hs-layout'>)</span>
-<a name="line-644"></a>   <span class='hs-keyglyph'>=</span> <span class='hs-keyword'>case</span> <span class='hs-varid'>compare</span> <span class='hs-varid'>x</span> <span class='hs-varid'>y</span> <span class='hs-keyword'>of</span>
-<a name="line-645"></a>       <span class='hs-conid'>LT</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-keyword'>let</span> <span class='hs-layout'>(</span><span class='hs-varid'>lt</span><span class='hs-layout'>,</span><span class='hs-varid'>found</span><span class='hs-layout'>,</span><span class='hs-varid'>gt</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>splitLookup</span> <span class='hs-varid'>x</span> <span class='hs-varid'>l</span> <span class='hs-keyword'>in</span> <span class='hs-layout'>(</span><span class='hs-varid'>lt</span><span class='hs-layout'>,</span><span class='hs-varid'>found</span><span class='hs-layout'>,</span><span class='hs-varid'>join</span> <span class='hs-varid'>y</span> <span class='hs-varid'>gt</span> <span class='hs-varid'>r</span><span class='hs-layout'>)</span>
-<a name="line-646"></a>       <span class='hs-conid'>GT</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-keyword'>let</span> <span class='hs-layout'>(</span><span class='hs-varid'>lt</span><span class='hs-layout'>,</span><span class='hs-varid'>found</span><span class='hs-layout'>,</span><span class='hs-varid'>gt</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>splitLookup</span> <span class='hs-varid'>x</span> <span class='hs-varid'>r</span> <span class='hs-keyword'>in</span> <span class='hs-layout'>(</span><span class='hs-varid'>join</span> <span class='hs-varid'>y</span> <span class='hs-varid'>l</span> <span class='hs-varid'>lt</span><span class='hs-layout'>,</span><span class='hs-varid'>found</span><span class='hs-layout'>,</span><span class='hs-varid'>gt</span><span class='hs-layout'>)</span>
-<a name="line-647"></a>       <span class='hs-conid'>EQ</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-layout'>(</span><span class='hs-varid'>l</span><span class='hs-layout'>,</span><span class='hs-conid'>Just</span> <span class='hs-varid'>y</span><span class='hs-layout'>,</span><span class='hs-varid'>r</span><span class='hs-layout'>)</span>
-<a name="line-648"></a>
-<a name="line-649"></a><span class='hs-comment'>{--------------------------------------------------------------------
-<a name="line-650"></a>  Utility functions that maintain the balance properties of the tree.
-<a name="line-651"></a>  All constructors assume that all values in [l] &lt; [x] and all values
-<a name="line-652"></a>  in [r] &gt; [x], and that [l] and [r] are valid trees.
-<a name="line-653"></a>  
-<a name="line-654"></a>  In order of sophistication:
-<a name="line-655"></a>    [Bin sz x l r]    The type constructor.
-<a name="line-656"></a>    [bin_ x l r]      Maintains the correct size, assumes that both [l]
-<a name="line-657"></a>                      and [r] are balanced with respect to each other.
-<a name="line-658"></a>    [balance x l r]   Restores the balance and size.
-<a name="line-659"></a>                      Assumes that the original tree was balanced and
-<a name="line-660"></a>                      that [l] or [r] has changed by at most one element.
-<a name="line-661"></a>    [join x l r]      Restores balance and size. 
-<a name="line-662"></a>
-<a name="line-663"></a>  Furthermore, we can construct a new tree from two trees. Both operations
-<a name="line-664"></a>  assume that all values in [l] &lt; all values in [r] and that [l] and [r]
-<a name="line-665"></a>  are valid:
-<a name="line-666"></a>    [glue l r]        Glues [l] and [r] together. Assumes that [l] and
-<a name="line-667"></a>                      [r] are already balanced with respect to each other.
-<a name="line-668"></a>    [merge l r]       Merges two trees and restores balance.
-<a name="line-669"></a>
-<a name="line-670"></a>  Note: in contrast to Adam's paper, we use (&lt;=) comparisons instead
-<a name="line-671"></a>  of (&lt;) comparisons in [join], [merge] and [balance]. 
-<a name="line-672"></a>  Quickcheck (on [difference]) showed that this was necessary in order 
-<a name="line-673"></a>  to maintain the invariants. It is quite unsatisfactory that I haven't 
-<a name="line-674"></a>  been able to find out why this is actually the case! Fortunately, it 
-<a name="line-675"></a>  doesn't hurt to be a bit more conservative.
-<a name="line-676"></a>--------------------------------------------------------------------}</span>
-<a name="line-677"></a>
-<a name="line-678"></a><a name="join"></a><span class='hs-comment'>{--------------------------------------------------------------------
-<a name="line-679"></a>  Join 
-<a name="line-680"></a>--------------------------------------------------------------------}</span>
-<a name="line-681"></a><span class='hs-definition'>join</span> <span class='hs-keyglyph'>::</span> <span class='hs-conid'>US</span> <span class='hs-varid'>a</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-varid'>a</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-conid'>USet</span> <span class='hs-varid'>a</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-conid'>USet</span> <span class='hs-varid'>a</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-conid'>USet</span> <span class='hs-varid'>a</span>
-<a name="line-682"></a><span class='hs-definition'>join</span> <span class='hs-varid'>x</span> <span class='hs-layout'>(</span><span class='hs-varid'>view</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-conid'>Tip</span><span class='hs-layout'>)</span> <span class='hs-varid'>r</span>  <span class='hs-keyglyph'>=</span> <span class='hs-varid'>insertMin</span> <span class='hs-varid'>x</span> <span class='hs-varid'>r</span>
-<a name="line-683"></a><span class='hs-definition'>join</span> <span class='hs-varid'>x</span> <span class='hs-varid'>l</span> <span class='hs-layout'>(</span><span class='hs-varid'>view</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-conid'>Tip</span><span class='hs-layout'>)</span>  <span class='hs-keyglyph'>=</span> <span class='hs-varid'>insertMax</span> <span class='hs-varid'>x</span> <span class='hs-varid'>l</span>
-<a name="line-684"></a><span class='hs-definition'>join</span> <span class='hs-varid'>x</span> <span class='hs-varid'>l</span><span class='hs-keyglyph'>@</span><span class='hs-layout'>(</span><span class='hs-varid'>view</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-conid'>Bin</span> <span class='hs-varid'>sizeL</span> <span class='hs-varid'>y</span> <span class='hs-varid'>ly</span> <span class='hs-varid'>ry</span><span class='hs-layout'>)</span> <span class='hs-varid'>r</span><span class='hs-keyglyph'>@</span><span class='hs-layout'>(</span><span class='hs-varid'>view</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-conid'>Bin</span> <span class='hs-varid'>sizeR</span> <span class='hs-varid'>z</span> <span class='hs-varid'>lz</span> <span class='hs-varid'>rz</span><span class='hs-layout'>)</span>
-<a name="line-685"></a>  <span class='hs-keyglyph'>|</span> <span class='hs-varid'>delta</span><span class='hs-varop'>*</span><span class='hs-varid'>sizeL</span> <span class='hs-varop'>&lt;=</span> <span class='hs-varid'>sizeR</span>  <span class='hs-keyglyph'>=</span> <span class='hs-varid'>balance</span> <span class='hs-varid'>z</span> <span class='hs-layout'>(</span><span class='hs-varid'>join</span> <span class='hs-varid'>x</span> <span class='hs-varid'>l</span> <span class='hs-varid'>lz</span><span class='hs-layout'>)</span> <span class='hs-varid'>rz</span>
-<a name="line-686"></a>  <span class='hs-keyglyph'>|</span> <span class='hs-varid'>delta</span><span class='hs-varop'>*</span><span class='hs-varid'>sizeR</span> <span class='hs-varop'>&lt;=</span> <span class='hs-varid'>sizeL</span>  <span class='hs-keyglyph'>=</span> <span class='hs-varid'>balance</span> <span class='hs-varid'>y</span> <span class='hs-varid'>ly</span> <span class='hs-layout'>(</span><span class='hs-varid'>join</span> <span class='hs-varid'>x</span> <span class='hs-varid'>ry</span> <span class='hs-varid'>r</span><span class='hs-layout'>)</span>
-<a name="line-687"></a>  <span class='hs-keyglyph'>|</span> <span class='hs-varid'>otherwise</span>             <span class='hs-keyglyph'>=</span> <span class='hs-varid'>bin_</span> <span class='hs-varid'>x</span> <span class='hs-varid'>l</span> <span class='hs-varid'>r</span>
-<a name="line-688"></a>
-<a name="line-689"></a>
-<a name="line-690"></a><a name="insertMax"></a><span class='hs-comment'>-- insertMin and insertMax don't perform potentially expensive comparisons.</span>
-<a name="line-691"></a><span class='hs-definition'>insertMax</span><span class='hs-layout'>,</span><span class='hs-varid'>insertMin</span> <span class='hs-keyglyph'>::</span> <span class='hs-conid'>US</span> <span class='hs-varid'>a</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-varid'>a</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-conid'>USet</span> <span class='hs-varid'>a</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-conid'>USet</span> <span class='hs-varid'>a</span> 
-<a name="line-692"></a><span class='hs-definition'>insertMax</span> <span class='hs-varid'>x</span> <span class='hs-varid'>t</span>
-<a name="line-693"></a>  <span class='hs-keyglyph'>=</span> <span class='hs-keyword'>case</span> <span class='hs-varid'>view</span> <span class='hs-varid'>t</span> <span class='hs-keyword'>of</span>
-<a name="line-694"></a>      <span class='hs-conid'>Tip</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-varid'>singleton</span> <span class='hs-varid'>x</span>
-<a name="line-695"></a>      <span class='hs-conid'>Bin</span> <span class='hs-keyword'>_</span> <span class='hs-varid'>y</span> <span class='hs-varid'>l</span> <span class='hs-varid'>r</span>
-<a name="line-696"></a>          <span class='hs-keyglyph'>-&gt;</span> <span class='hs-varid'>balance</span> <span class='hs-varid'>y</span> <span class='hs-varid'>l</span> <span class='hs-layout'>(</span><span class='hs-varid'>insertMax</span> <span class='hs-varid'>x</span> <span class='hs-varid'>r</span><span class='hs-layout'>)</span>
-<a name="line-697"></a>             
-<a name="line-698"></a><a name="insertMin"></a><span class='hs-definition'>insertMin</span> <span class='hs-varid'>x</span> <span class='hs-varid'>t</span>
-<a name="line-699"></a>  <span class='hs-keyglyph'>=</span> <span class='hs-keyword'>case</span> <span class='hs-varid'>view</span> <span class='hs-varid'>t</span> <span class='hs-keyword'>of</span>
-<a name="line-700"></a>      <span class='hs-conid'>Tip</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-varid'>singleton</span> <span class='hs-varid'>x</span>
-<a name="line-701"></a>      <span class='hs-conid'>Bin</span> <span class='hs-keyword'>_</span> <span class='hs-varid'>y</span> <span class='hs-varid'>l</span> <span class='hs-varid'>r</span>
-<a name="line-702"></a>          <span class='hs-keyglyph'>-&gt;</span> <span class='hs-varid'>balance</span> <span class='hs-varid'>y</span> <span class='hs-layout'>(</span><span class='hs-varid'>insertMin</span> <span class='hs-varid'>x</span> <span class='hs-varid'>l</span><span class='hs-layout'>)</span> <span class='hs-varid'>r</span>
-<a name="line-703"></a>             
-<a name="line-704"></a><a name="merge"></a><span class='hs-comment'>{--------------------------------------------------------------------
-<a name="line-705"></a>  [merge l r]: merges two trees.
-<a name="line-706"></a>--------------------------------------------------------------------}</span>
-<a name="line-707"></a><span class='hs-definition'>merge</span> <span class='hs-keyglyph'>::</span> <span class='hs-conid'>US</span> <span class='hs-varid'>a</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>USet</span> <span class='hs-varid'>a</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-conid'>USet</span> <span class='hs-varid'>a</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-conid'>USet</span> <span class='hs-varid'>a</span>
-<a name="line-708"></a><span class='hs-definition'>merge</span> <span class='hs-layout'>(</span><span class='hs-varid'>view</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-conid'>Tip</span><span class='hs-layout'>)</span> <span class='hs-varid'>r</span>   <span class='hs-keyglyph'>=</span> <span class='hs-varid'>r</span>
-<a name="line-709"></a><span class='hs-definition'>merge</span> <span class='hs-varid'>l</span> <span class='hs-layout'>(</span><span class='hs-varid'>view</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-conid'>Tip</span><span class='hs-layout'>)</span>   <span class='hs-keyglyph'>=</span> <span class='hs-varid'>l</span>
-<a name="line-710"></a><span class='hs-definition'>merge</span> <span class='hs-varid'>l</span><span class='hs-keyglyph'>@</span><span class='hs-layout'>(</span><span class='hs-varid'>view</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-conid'>Bin</span> <span class='hs-varid'>sizeL</span> <span class='hs-varid'>x</span> <span class='hs-varid'>lx</span> <span class='hs-varid'>rx</span><span class='hs-layout'>)</span> <span class='hs-varid'>r</span><span class='hs-keyglyph'>@</span><span class='hs-layout'>(</span><span class='hs-varid'>view</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-conid'>Bin</span> <span class='hs-varid'>sizeR</span> <span class='hs-varid'>y</span> <span class='hs-varid'>ly</span> <span class='hs-varid'>ry</span><span class='hs-layout'>)</span>
-<a name="line-711"></a>  <span class='hs-keyglyph'>|</span> <span class='hs-varid'>delta</span><span class='hs-varop'>*</span><span class='hs-varid'>sizeL</span> <span class='hs-varop'>&lt;=</span> <span class='hs-varid'>sizeR</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>balance</span> <span class='hs-varid'>y</span> <span class='hs-layout'>(</span><span class='hs-varid'>merge</span> <span class='hs-varid'>l</span> <span class='hs-varid'>ly</span><span class='hs-layout'>)</span> <span class='hs-varid'>ry</span>
-<a name="line-712"></a>  <span class='hs-keyglyph'>|</span> <span class='hs-varid'>delta</span><span class='hs-varop'>*</span><span class='hs-varid'>sizeR</span> <span class='hs-varop'>&lt;=</span> <span class='hs-varid'>sizeL</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>balance</span> <span class='hs-varid'>x</span> <span class='hs-varid'>lx</span> <span class='hs-layout'>(</span><span class='hs-varid'>merge</span> <span class='hs-varid'>rx</span> <span class='hs-varid'>r</span><span class='hs-layout'>)</span>
-<a name="line-713"></a>  <span class='hs-keyglyph'>|</span> <span class='hs-varid'>otherwise</span>            <span class='hs-keyglyph'>=</span> <span class='hs-varid'>glue</span> <span class='hs-varid'>l</span> <span class='hs-varid'>r</span>
-<a name="line-714"></a>
-<a name="line-715"></a><a name="glue"></a><span class='hs-comment'>{--------------------------------------------------------------------
-<a name="line-716"></a>  [glue l r]: glues two trees together.
-<a name="line-717"></a>  Assumes that [l] and [r] are already balanced with respect to each other.
-<a name="line-718"></a>--------------------------------------------------------------------}</span>
-<a name="line-719"></a><span class='hs-definition'>glue</span> <span class='hs-keyglyph'>::</span> <span class='hs-conid'>US</span> <span class='hs-varid'>a</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>USet</span> <span class='hs-varid'>a</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-conid'>USet</span> <span class='hs-varid'>a</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-conid'>USet</span> <span class='hs-varid'>a</span>
-<a name="line-720"></a><span class='hs-definition'>glue</span> <span class='hs-layout'>(</span><span class='hs-varid'>view</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-conid'>Tip</span><span class='hs-layout'>)</span> <span class='hs-varid'>r</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>r</span>
-<a name="line-721"></a><span class='hs-definition'>glue</span> <span class='hs-varid'>l</span> <span class='hs-layout'>(</span><span class='hs-varid'>view</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-conid'>Tip</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>l</span>
-<a name="line-722"></a><span class='hs-definition'>glue</span> <span class='hs-varid'>l</span> <span class='hs-varid'>r</span>   
-<a name="line-723"></a>  <span class='hs-keyglyph'>|</span> <span class='hs-varid'>size</span> <span class='hs-varid'>l</span> <span class='hs-varop'>&gt;</span> <span class='hs-varid'>size</span> <span class='hs-varid'>r</span> <span class='hs-keyglyph'>=</span> <span class='hs-keyword'>let</span> <span class='hs-layout'>(</span><span class='hs-varid'>m</span><span class='hs-layout'>,</span><span class='hs-varid'>l'</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>deleteFindMax</span> <span class='hs-varid'>l</span> <span class='hs-keyword'>in</span> <span class='hs-varid'>balance</span> <span class='hs-varid'>m</span> <span class='hs-varid'>l'</span> <span class='hs-varid'>r</span>
-<a name="line-724"></a>  <span class='hs-keyglyph'>|</span> <span class='hs-varid'>otherwise</span>       <span class='hs-keyglyph'>=</span> <span class='hs-keyword'>let</span> <span class='hs-layout'>(</span><span class='hs-varid'>m</span><span class='hs-layout'>,</span><span class='hs-varid'>r'</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>deleteFindMin</span> <span class='hs-varid'>r</span> <span class='hs-keyword'>in</span> <span class='hs-varid'>balance</span> <span class='hs-varid'>m</span> <span class='hs-varid'>l</span> <span class='hs-varid'>r'</span>
-<a name="line-725"></a>
-<a name="line-726"></a>
-<a name="line-727"></a><span class='hs-comment'>-- | /O(log n)/. Delete and find the minimal element.</span>
-<a name="line-728"></a><span class='hs-comment'>-- </span>
-<a name="line-729"></a><span class='hs-comment'>-- &gt; deleteFindMin set = (findMin set, deleteMin set)</span>
-<a name="line-730"></a>
-<a name="line-731"></a><a name="deleteFindMin"></a><span class='hs-definition'>deleteFindMin</span> <span class='hs-keyglyph'>::</span> <span class='hs-conid'>US</span> <span class='hs-varid'>a</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>USet</span> <span class='hs-varid'>a</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-layout'>(</span><span class='hs-varid'>a</span><span class='hs-layout'>,</span><span class='hs-conid'>USet</span> <span class='hs-varid'>a</span><span class='hs-layout'>)</span>
-<a name="line-732"></a><span class='hs-definition'>deleteFindMin</span> <span class='hs-varid'>t</span> 
-<a name="line-733"></a>  <span class='hs-keyglyph'>=</span> <span class='hs-keyword'>case</span> <span class='hs-varid'>view</span> <span class='hs-varid'>t</span> <span class='hs-keyword'>of</span>
-<a name="line-734"></a>      <span class='hs-conid'>Bin</span> <span class='hs-keyword'>_</span> <span class='hs-varid'>x</span> <span class='hs-layout'>(</span><span class='hs-varid'>view</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-conid'>Tip</span><span class='hs-layout'>)</span> <span class='hs-varid'>r</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-layout'>(</span><span class='hs-varid'>x</span><span class='hs-layout'>,</span><span class='hs-varid'>r</span><span class='hs-layout'>)</span>
-<a name="line-735"></a>      <span class='hs-conid'>Bin</span> <span class='hs-keyword'>_</span> <span class='hs-varid'>x</span> <span class='hs-varid'>l</span> <span class='hs-varid'>r</span>   <span class='hs-keyglyph'>-&gt;</span> <span class='hs-keyword'>let</span> <span class='hs-layout'>(</span><span class='hs-varid'>xm</span><span class='hs-layout'>,</span><span class='hs-varid'>l'</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>deleteFindMin</span> <span class='hs-varid'>l</span> <span class='hs-keyword'>in</span> <span class='hs-layout'>(</span><span class='hs-varid'>xm</span><span class='hs-layout'>,</span><span class='hs-varid'>balance</span> <span class='hs-varid'>x</span> <span class='hs-varid'>l'</span> <span class='hs-varid'>r</span><span class='hs-layout'>)</span>
-<a name="line-736"></a>      <span class='hs-conid'>Tip</span>           <span class='hs-keyglyph'>-&gt;</span> <span class='hs-layout'>(</span><span class='hs-varid'>error</span> <span class='hs-str'>"Set.deleteFindMin: can not return the minimal element of an empty set"</span><span class='hs-layout'>,</span> <span class='hs-varid'>tip</span><span class='hs-layout'>)</span>
-<a name="line-737"></a>
-<a name="line-738"></a><a name="deleteFindMax"></a><span class='hs-comment'>-- | /O(log n)/. Delete and find the maximal element.</span>
-<a name="line-739"></a><span class='hs-comment'>-- </span>
-<a name="line-740"></a><span class='hs-comment'>-- &gt; deleteFindMax set = (findMax set, deleteMax set)</span>
-<a name="line-741"></a><span class='hs-definition'>deleteFindMax</span> <span class='hs-keyglyph'>::</span> <span class='hs-conid'>US</span> <span class='hs-varid'>a</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>USet</span> <span class='hs-varid'>a</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-layout'>(</span><span class='hs-varid'>a</span><span class='hs-layout'>,</span><span class='hs-conid'>USet</span> <span class='hs-varid'>a</span><span class='hs-layout'>)</span>
-<a name="line-742"></a><span class='hs-definition'>deleteFindMax</span> <span class='hs-varid'>t</span>
-<a name="line-743"></a>  <span class='hs-keyglyph'>=</span> <span class='hs-keyword'>case</span> <span class='hs-varid'>view</span> <span class='hs-varid'>t</span> <span class='hs-keyword'>of</span>
-<a name="line-744"></a>      <span class='hs-conid'>Bin</span> <span class='hs-keyword'>_</span> <span class='hs-varid'>x</span> <span class='hs-varid'>l</span> <span class='hs-layout'>(</span><span class='hs-varid'>view</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-conid'>Tip</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-layout'>(</span><span class='hs-varid'>x</span><span class='hs-layout'>,</span><span class='hs-varid'>l</span><span class='hs-layout'>)</span>
-<a name="line-745"></a>      <span class='hs-conid'>Bin</span> <span class='hs-keyword'>_</span> <span class='hs-varid'>x</span> <span class='hs-varid'>l</span> <span class='hs-varid'>r</span>   <span class='hs-keyglyph'>-&gt;</span> <span class='hs-keyword'>let</span> <span class='hs-layout'>(</span><span class='hs-varid'>xm</span><span class='hs-layout'>,</span><span class='hs-varid'>r'</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>deleteFindMax</span> <span class='hs-varid'>r</span> <span class='hs-keyword'>in</span> <span class='hs-layout'>(</span><span class='hs-varid'>xm</span><span class='hs-layout'>,</span><span class='hs-varid'>balance</span> <span class='hs-varid'>x</span> <span class='hs-varid'>l</span> <span class='hs-varid'>r'</span><span class='hs-layout'>)</span>
-<a name="line-746"></a>      <span class='hs-conid'>Tip</span>           <span class='hs-keyglyph'>-&gt;</span> <span class='hs-layout'>(</span><span class='hs-varid'>error</span> <span class='hs-str'>"Set.deleteFindMax: can not return the maximal element of an empty set"</span><span class='hs-layout'>,</span> <span class='hs-varid'>tip</span><span class='hs-layout'>)</span>
-<a name="line-747"></a>
-<a name="line-748"></a><a name="minView"></a><span class='hs-comment'>-- | /O(log n)/. Retrieves the minimal key of the set, and the set</span>
-<a name="line-749"></a><span class='hs-comment'>-- stripped of that element, or 'Nothing' if passed an empty set.</span>
-<a name="line-750"></a><span class='hs-definition'>minView</span> <span class='hs-keyglyph'>::</span> <span class='hs-conid'>US</span> <span class='hs-varid'>a</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>USet</span> <span class='hs-varid'>a</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-conid'>Maybe</span> <span class='hs-layout'>(</span><span class='hs-varid'>a</span><span class='hs-layout'>,</span> <span class='hs-conid'>USet</span> <span class='hs-varid'>a</span><span class='hs-layout'>)</span>
-<a name="line-751"></a><span class='hs-definition'>minView</span> <span class='hs-layout'>(</span><span class='hs-varid'>view</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-conid'>Tip</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>Nothing</span>
-<a name="line-752"></a><span class='hs-definition'>minView</span> <span class='hs-varid'>x</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>Just</span> <span class='hs-layout'>(</span><span class='hs-varid'>deleteFindMin</span> <span class='hs-varid'>x</span><span class='hs-layout'>)</span>
-<a name="line-753"></a>
-<a name="line-754"></a><a name="maxView"></a><span class='hs-comment'>-- | /O(log n)/. Retrieves the maximal key of the set, and the set</span>
-<a name="line-755"></a><span class='hs-comment'>-- stripped of that element, or 'Nothing' if passed an empty set.</span>
-<a name="line-756"></a><span class='hs-definition'>maxView</span> <span class='hs-keyglyph'>::</span> <span class='hs-conid'>US</span> <span class='hs-varid'>a</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>USet</span> <span class='hs-varid'>a</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-conid'>Maybe</span> <span class='hs-layout'>(</span><span class='hs-varid'>a</span><span class='hs-layout'>,</span> <span class='hs-conid'>USet</span> <span class='hs-varid'>a</span><span class='hs-layout'>)</span>
-<a name="line-757"></a><span class='hs-definition'>maxView</span> <span class='hs-layout'>(</span><span class='hs-varid'>view</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-conid'>Tip</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>Nothing</span>
-<a name="line-758"></a><span class='hs-definition'>maxView</span> <span class='hs-varid'>x</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>Just</span> <span class='hs-layout'>(</span><span class='hs-varid'>deleteFindMax</span> <span class='hs-varid'>x</span><span class='hs-layout'>)</span>
-<a name="line-759"></a>
-<a name="line-760"></a><a name="delta"></a><span class='hs-comment'>{--------------------------------------------------------------------
-<a name="line-761"></a>  [balance x l r] balances two trees with value x.
-<a name="line-762"></a>  The sizes of the trees should balance after decreasing the
-<a name="line-763"></a>  size of one of them. (a rotation).
-<a name="line-764"></a>
-<a name="line-765"></a>  [delta] is the maximal relative difference between the sizes of
-<a name="line-766"></a>          two trees, it corresponds with the [w] in Adams' paper,
-<a name="line-767"></a>          or equivalently, [1/delta] corresponds with the $\alpha$
-<a name="line-768"></a>          in Nievergelt's paper. Adams shows that [delta] should
-<a name="line-769"></a>          be larger than 3.745 in order to garantee that the
-<a name="line-770"></a>          rotations can always restore balance.         
-<a name="line-771"></a>
-<a name="line-772"></a>  [ratio] is the ratio between an outer and inner sibling of the
-<a name="line-773"></a>          heavier subtree in an unbalanced setting. It determines
-<a name="line-774"></a>          whether a double or single rotation should be performed
-<a name="line-775"></a>          to restore balance. It is correspondes with the inverse
-<a name="line-776"></a>          of $\alpha$ in Adam's article.
-<a name="line-777"></a>
-<a name="line-778"></a>  Note that:
-<a name="line-779"></a>  - [delta] should be larger than 4.646 with a [ratio] of 2.
-<a name="line-780"></a>  - [delta] should be larger than 3.745 with a [ratio] of 1.534.
-<a name="line-781"></a>  
-<a name="line-782"></a>  - A lower [delta] leads to a more 'perfectly' balanced tree.
-<a name="line-783"></a>  - A higher [delta] performs less rebalancing.
-<a name="line-784"></a>
-<a name="line-785"></a>  - Balancing is automatic for random data and a balancing
-<a name="line-786"></a>    scheme is only necessary to avoid pathological worst cases.
-<a name="line-787"></a>    Almost any choice will do in practice
-<a name="line-788"></a>    
-<a name="line-789"></a>  - Allthough it seems that a rather large [delta] may perform better 
-<a name="line-790"></a>    than smaller one, measurements have shown that the smallest [delta]
-<a name="line-791"></a>    of 4 is actually the fastest on a wide range of operations. It
-<a name="line-792"></a>    especially improves performance on worst-case scenarios like
-<a name="line-793"></a>    a sequence of ordered insertions.
-<a name="line-794"></a>
-<a name="line-795"></a>  Note: in contrast to Adams' paper, we use a ratio of (at least) 2
-<a name="line-796"></a>  to decide whether a single or double rotation is needed. Allthough
-<a name="line-797"></a>  he actually proves that this ratio is needed to maintain the
-<a name="line-798"></a>  invariants, his implementation uses a (invalid) ratio of 1. 
-<a name="line-799"></a>  He is aware of the problem though since he has put a comment in his 
-<a name="line-800"></a>  original source code that he doesn't care about generating a 
-<a name="line-801"></a>  slightly inbalanced tree since it doesn't seem to matter in practice. 
-<a name="line-802"></a>  However (since we use quickcheck :-) we will stick to strictly balanced 
-<a name="line-803"></a>  trees.
-<a name="line-804"></a>--------------------------------------------------------------------}</span>
-<a name="line-805"></a><span class='hs-definition'>delta</span><span class='hs-layout'>,</span><span class='hs-varid'>ratio</span> <span class='hs-keyglyph'>::</span> <span class='hs-conid'>Int</span>
-<a name="line-806"></a><span class='hs-definition'>delta</span> <span class='hs-keyglyph'>=</span> <span class='hs-num'>4</span>
-<a name="line-807"></a><a name="ratio"></a><span class='hs-definition'>ratio</span> <span class='hs-keyglyph'>=</span> <span class='hs-num'>2</span>
-<a name="line-808"></a>
-<a name="line-809"></a><a name="balance"></a><span class='hs-definition'>balance</span> <span class='hs-keyglyph'>::</span> <span class='hs-conid'>US</span> <span class='hs-varid'>a</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-varid'>a</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-conid'>USet</span> <span class='hs-varid'>a</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-conid'>USet</span> <span class='hs-varid'>a</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-conid'>USet</span> <span class='hs-varid'>a</span>
-<a name="line-810"></a><span class='hs-definition'>balance</span> <span class='hs-varid'>x</span> <span class='hs-varid'>l</span> <span class='hs-varid'>r</span>
-<a name="line-811"></a>  <span class='hs-keyglyph'>|</span> <span class='hs-varid'>sizeL</span> <span class='hs-varop'>+</span> <span class='hs-varid'>sizeR</span> <span class='hs-varop'>&lt;=</span> <span class='hs-num'>1</span>    <span class='hs-keyglyph'>=</span> <span class='hs-varid'>bin</span> <span class='hs-varid'>sizeX</span> <span class='hs-varid'>x</span> <span class='hs-varid'>l</span> <span class='hs-varid'>r</span>
-<a name="line-812"></a>  <span class='hs-keyglyph'>|</span> <span class='hs-varid'>sizeR</span> <span class='hs-varop'>&gt;=</span> <span class='hs-varid'>delta</span><span class='hs-varop'>*</span><span class='hs-varid'>sizeL</span>  <span class='hs-keyglyph'>=</span> <span class='hs-varid'>rotateL</span> <span class='hs-varid'>x</span> <span class='hs-varid'>l</span> <span class='hs-varid'>r</span>
-<a name="line-813"></a>  <span class='hs-keyglyph'>|</span> <span class='hs-varid'>sizeL</span> <span class='hs-varop'>&gt;=</span> <span class='hs-varid'>delta</span><span class='hs-varop'>*</span><span class='hs-varid'>sizeR</span>  <span class='hs-keyglyph'>=</span> <span class='hs-varid'>rotateR</span> <span class='hs-varid'>x</span> <span class='hs-varid'>l</span> <span class='hs-varid'>r</span>
-<a name="line-814"></a>  <span class='hs-keyglyph'>|</span> <span class='hs-varid'>otherwise</span>             <span class='hs-keyglyph'>=</span> <span class='hs-varid'>bin</span> <span class='hs-varid'>sizeX</span> <span class='hs-varid'>x</span> <span class='hs-varid'>l</span> <span class='hs-varid'>r</span>
-<a name="line-815"></a>  <span class='hs-keyword'>where</span>
-<a name="line-816"></a>    <span class='hs-varid'>sizeL</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>size</span> <span class='hs-varid'>l</span>
-<a name="line-817"></a>    <span class='hs-varid'>sizeR</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>size</span> <span class='hs-varid'>r</span>
-<a name="line-818"></a>    <span class='hs-varid'>sizeX</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>sizeL</span> <span class='hs-varop'>+</span> <span class='hs-varid'>sizeR</span> <span class='hs-varop'>+</span> <span class='hs-num'>1</span>
-<a name="line-819"></a>
-<a name="line-820"></a><a name="rotateL"></a><span class='hs-comment'>-- rotate</span>
-<a name="line-821"></a><span class='hs-definition'>rotateL</span> <span class='hs-keyglyph'>::</span> <span class='hs-conid'>US</span> <span class='hs-varid'>a</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-varid'>a</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-conid'>USet</span> <span class='hs-varid'>a</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-conid'>USet</span> <span class='hs-varid'>a</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-conid'>USet</span> <span class='hs-varid'>a</span>
-<a name="line-822"></a><span class='hs-definition'>rotateL</span> <span class='hs-varid'>x</span> <span class='hs-varid'>l</span> <span class='hs-varid'>r</span><span class='hs-keyglyph'>@</span><span class='hs-layout'>(</span><span class='hs-varid'>view</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-conid'>Bin</span> <span class='hs-keyword'>_</span> <span class='hs-keyword'>_</span> <span class='hs-varid'>ly</span> <span class='hs-varid'>ry</span><span class='hs-layout'>)</span>
-<a name="line-823"></a>  <span class='hs-keyglyph'>|</span> <span class='hs-varid'>size</span> <span class='hs-varid'>ly</span> <span class='hs-varop'>&lt;</span> <span class='hs-varid'>ratio</span><span class='hs-varop'>*</span><span class='hs-varid'>size</span> <span class='hs-varid'>ry</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>singleL</span> <span class='hs-varid'>x</span> <span class='hs-varid'>l</span> <span class='hs-varid'>r</span>
-<a name="line-824"></a>  <span class='hs-keyglyph'>|</span> <span class='hs-varid'>otherwise</span>               <span class='hs-keyglyph'>=</span> <span class='hs-varid'>doubleL</span> <span class='hs-varid'>x</span> <span class='hs-varid'>l</span> <span class='hs-varid'>r</span>
-<a name="line-825"></a><span class='hs-definition'>rotateL</span> <span class='hs-keyword'>_</span> <span class='hs-keyword'>_</span> <span class='hs-layout'>(</span><span class='hs-varid'>view</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-conid'>Tip</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>error</span> <span class='hs-str'>"rotateL Tip"</span>
-<a name="line-826"></a>
-<a name="line-827"></a><a name="rotateR"></a><span class='hs-definition'>rotateR</span> <span class='hs-keyglyph'>::</span> <span class='hs-conid'>US</span> <span class='hs-varid'>a</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-varid'>a</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-conid'>USet</span> <span class='hs-varid'>a</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-conid'>USet</span> <span class='hs-varid'>a</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-conid'>USet</span> <span class='hs-varid'>a</span>
-<a name="line-828"></a><span class='hs-definition'>rotateR</span> <span class='hs-varid'>x</span> <span class='hs-varid'>l</span><span class='hs-keyglyph'>@</span><span class='hs-layout'>(</span><span class='hs-varid'>view</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-conid'>Bin</span> <span class='hs-keyword'>_</span> <span class='hs-keyword'>_</span> <span class='hs-varid'>ly</span> <span class='hs-varid'>ry</span><span class='hs-layout'>)</span> <span class='hs-varid'>r</span>
-<a name="line-829"></a>  <span class='hs-keyglyph'>|</span> <span class='hs-varid'>size</span> <span class='hs-varid'>ry</span> <span class='hs-varop'>&lt;</span> <span class='hs-varid'>ratio</span><span class='hs-varop'>*</span><span class='hs-varid'>size</span> <span class='hs-varid'>ly</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>singleR</span> <span class='hs-varid'>x</span> <span class='hs-varid'>l</span> <span class='hs-varid'>r</span>
-<a name="line-830"></a>  <span class='hs-keyglyph'>|</span> <span class='hs-varid'>otherwise</span>               <span class='hs-keyglyph'>=</span> <span class='hs-varid'>doubleR</span> <span class='hs-varid'>x</span> <span class='hs-varid'>l</span> <span class='hs-varid'>r</span>
-<a name="line-831"></a><span class='hs-definition'>rotateR</span> <span class='hs-keyword'>_</span> <span class='hs-layout'>(</span><span class='hs-varid'>view</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-conid'>Tip</span><span class='hs-layout'>)</span> <span class='hs-keyword'>_</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>error</span> <span class='hs-str'>"rotateL Tip"</span>
-<a name="line-832"></a>
-<a name="line-833"></a><a name="singleL"></a><span class='hs-comment'>-- basic rotations</span>
-<a name="line-834"></a><span class='hs-definition'>singleL</span><span class='hs-layout'>,</span> <span class='hs-varid'>singleR</span> <span class='hs-keyglyph'>::</span> <span class='hs-conid'>US</span> <span class='hs-varid'>a</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-varid'>a</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-conid'>USet</span> <span class='hs-varid'>a</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-conid'>USet</span> <span class='hs-varid'>a</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-conid'>USet</span> <span class='hs-varid'>a</span>
-<a name="line-835"></a><span class='hs-definition'>singleL</span> <span class='hs-varid'>x1</span> <span class='hs-varid'>t1</span> <span class='hs-layout'>(</span><span class='hs-varid'>view</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-conid'>Bin</span> <span class='hs-keyword'>_</span> <span class='hs-varid'>x2</span> <span class='hs-varid'>t2</span> <span class='hs-varid'>t3</span><span class='hs-layout'>)</span>  <span class='hs-keyglyph'>=</span> <span class='hs-varid'>bin_</span> <span class='hs-varid'>x2</span> <span class='hs-layout'>(</span><span class='hs-varid'>bin_</span> <span class='hs-varid'>x1</span> <span class='hs-varid'>t1</span> <span class='hs-varid'>t2</span><span class='hs-layout'>)</span> <span class='hs-varid'>t3</span>
-<a name="line-836"></a><span class='hs-definition'>singleL</span> <span class='hs-keyword'>_</span>  <span class='hs-keyword'>_</span>  <span class='hs-layout'>(</span><span class='hs-varid'>view</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-conid'>Tip</span><span class='hs-layout'>)</span>             <span class='hs-keyglyph'>=</span> <span class='hs-varid'>error</span> <span class='hs-str'>"singleL"</span>
-<a name="line-837"></a><a name="singleR"></a><span class='hs-definition'>singleR</span> <span class='hs-varid'>x1</span> <span class='hs-layout'>(</span><span class='hs-varid'>view</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-conid'>Bin</span> <span class='hs-keyword'>_</span> <span class='hs-varid'>x2</span> <span class='hs-varid'>t1</span> <span class='hs-varid'>t2</span><span class='hs-layout'>)</span> <span class='hs-varid'>t3</span>  <span class='hs-keyglyph'>=</span> <span class='hs-varid'>bin_</span> <span class='hs-varid'>x2</span> <span class='hs-varid'>t1</span> <span class='hs-layout'>(</span><span class='hs-varid'>bin_</span> <span class='hs-varid'>x1</span> <span class='hs-varid'>t2</span> <span class='hs-varid'>t3</span><span class='hs-layout'>)</span>
-<a name="line-838"></a><span class='hs-definition'>singleR</span> <span class='hs-keyword'>_</span> <span class='hs-layout'>(</span><span class='hs-varid'>view</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-conid'>Tip</span><span class='hs-layout'>)</span>             <span class='hs-keyword'>_</span>   <span class='hs-keyglyph'>=</span> <span class='hs-varid'>error</span> <span class='hs-str'>"singleR"</span>
+<a name="line-589"></a><span class='hs-definition'>filterGt</span> <span class='hs-keyglyph'>::</span> <span class='hs-conid'>US</span> <span class='hs-varid'>a</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-layout'>(</span><span class='hs-varid'>a</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-conid'>Ordering</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-conid'>USet</span> <span class='hs-varid'>a</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-conid'>USet</span> <span class='hs-varid'>a</span>
+<a name="line-590"></a><span class='hs-definition'>filterGt</span> <span class='hs-varid'>cmp</span> <span class='hs-layout'>(</span><span class='hs-varid'>view</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-conid'>Bin</span> <span class='hs-keyword'>_</span> <span class='hs-varid'>x</span> <span class='hs-varid'>l</span> <span class='hs-varid'>r</span><span class='hs-layout'>)</span>
+<a name="line-591"></a>  <span class='hs-keyglyph'>=</span> <span class='hs-keyword'>case</span> <span class='hs-varid'>cmp</span> <span class='hs-varid'>x</span> <span class='hs-keyword'>of</span>
+<a name="line-592"></a>      <span class='hs-conid'>LT</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-varid'>join</span> <span class='hs-varid'>x</span> <span class='hs-layout'>(</span><span class='hs-varid'>filterGt</span> <span class='hs-varid'>cmp</span> <span class='hs-varid'>l</span><span class='hs-layout'>)</span> <span class='hs-varid'>r</span>
+<a name="line-593"></a>      <span class='hs-conid'>GT</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-varid'>filterGt</span> <span class='hs-varid'>cmp</span> <span class='hs-varid'>r</span>
+<a name="line-594"></a>      <span class='hs-conid'>EQ</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-varid'>r</span>
+<a name="line-595"></a><span class='hs-definition'>filterGt</span> <span class='hs-keyword'>_</span> <span class='hs-keyword'>_</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>tip</span>
+<a name="line-596"></a>      
+<a name="line-597"></a><a name="filterLt"></a><span class='hs-definition'>filterLt</span> <span class='hs-keyglyph'>::</span> <span class='hs-conid'>US</span> <span class='hs-varid'>a</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-layout'>(</span><span class='hs-varid'>a</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-conid'>Ordering</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-conid'>USet</span> <span class='hs-varid'>a</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-conid'>USet</span> <span class='hs-varid'>a</span>
+<a name="line-598"></a><span class='hs-definition'>filterLt</span> <span class='hs-varid'>cmp</span> <span class='hs-layout'>(</span><span class='hs-varid'>view</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-conid'>Bin</span> <span class='hs-keyword'>_</span> <span class='hs-varid'>x</span> <span class='hs-varid'>l</span> <span class='hs-varid'>r</span><span class='hs-layout'>)</span>
+<a name="line-599"></a>  <span class='hs-keyglyph'>=</span> <span class='hs-keyword'>case</span> <span class='hs-varid'>cmp</span> <span class='hs-varid'>x</span> <span class='hs-keyword'>of</span>
+<a name="line-600"></a>      <span class='hs-conid'>LT</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-varid'>filterLt</span> <span class='hs-varid'>cmp</span> <span class='hs-varid'>l</span>
+<a name="line-601"></a>      <span class='hs-conid'>GT</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-varid'>join</span> <span class='hs-varid'>x</span> <span class='hs-varid'>l</span> <span class='hs-layout'>(</span><span class='hs-varid'>filterLt</span> <span class='hs-varid'>cmp</span> <span class='hs-varid'>r</span><span class='hs-layout'>)</span>
+<a name="line-602"></a>      <span class='hs-conid'>EQ</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-varid'>l</span>
+<a name="line-603"></a><span class='hs-definition'>filterLt</span> <span class='hs-keyword'>_</span> <span class='hs-keyword'>_</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>tip</span>
+<a name="line-604"></a>
+<a name="line-605"></a>
+<a name="line-606"></a><a name="split"></a><span class='hs-comment'>{--------------------------------------------------------------------
+<a name="line-607"></a>  Split
+<a name="line-608"></a>--------------------------------------------------------------------}</span>
+<a name="line-609"></a><span class='hs-comment'>-- | /O(log n)/. The expression (@'split' x set@) is a pair @(set1,set2)@</span>
+<a name="line-610"></a><span class='hs-comment'>-- where @set1@ comprises the elements of @set@ less than @x@ and @set2@</span>
+<a name="line-611"></a><span class='hs-comment'>-- comprises the elements of @set@ greater than @x@.</span>
+<a name="line-612"></a><span class='hs-definition'>split</span> <span class='hs-keyglyph'>::</span> <span class='hs-layout'>(</span><span class='hs-conid'>US</span> <span class='hs-varid'>a</span><span class='hs-layout'>,</span> <span class='hs-conid'>Ord</span> <span class='hs-varid'>a</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-varid'>a</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-conid'>USet</span> <span class='hs-varid'>a</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-layout'>(</span><span class='hs-conid'>USet</span> <span class='hs-varid'>a</span><span class='hs-layout'>,</span><span class='hs-conid'>USet</span> <span class='hs-varid'>a</span><span class='hs-layout'>)</span>
+<a name="line-613"></a><span class='hs-definition'>split</span> <span class='hs-varid'>x</span> <span class='hs-layout'>(</span><span class='hs-varid'>view</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-conid'>Bin</span> <span class='hs-keyword'>_</span> <span class='hs-varid'>y</span> <span class='hs-varid'>l</span> <span class='hs-varid'>r</span><span class='hs-layout'>)</span>
+<a name="line-614"></a>  <span class='hs-keyglyph'>=</span> <span class='hs-keyword'>case</span> <span class='hs-varid'>compare</span> <span class='hs-varid'>x</span> <span class='hs-varid'>y</span> <span class='hs-keyword'>of</span>
+<a name="line-615"></a>      <span class='hs-conid'>LT</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-keyword'>let</span> <span class='hs-layout'>(</span><span class='hs-varid'>lt</span><span class='hs-layout'>,</span><span class='hs-varid'>gt</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>split</span> <span class='hs-varid'>x</span> <span class='hs-varid'>l</span> <span class='hs-keyword'>in</span> <span class='hs-layout'>(</span><span class='hs-varid'>lt</span><span class='hs-layout'>,</span><span class='hs-varid'>join</span> <span class='hs-varid'>y</span> <span class='hs-varid'>gt</span> <span class='hs-varid'>r</span><span class='hs-layout'>)</span>
+<a name="line-616"></a>      <span class='hs-conid'>GT</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-keyword'>let</span> <span class='hs-layout'>(</span><span class='hs-varid'>lt</span><span class='hs-layout'>,</span><span class='hs-varid'>gt</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>split</span> <span class='hs-varid'>x</span> <span class='hs-varid'>r</span> <span class='hs-keyword'>in</span> <span class='hs-layout'>(</span><span class='hs-varid'>join</span> <span class='hs-varid'>y</span> <span class='hs-varid'>l</span> <span class='hs-varid'>lt</span><span class='hs-layout'>,</span><span class='hs-varid'>gt</span><span class='hs-layout'>)</span>
+<a name="line-617"></a>      <span class='hs-conid'>EQ</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-layout'>(</span><span class='hs-varid'>l</span><span class='hs-layout'>,</span><span class='hs-varid'>r</span><span class='hs-layout'>)</span>
+<a name="line-618"></a><span class='hs-definition'>split</span> <span class='hs-keyword'>_</span> <span class='hs-keyword'>_</span> <span class='hs-keyglyph'>=</span> <span class='hs-layout'>(</span><span class='hs-varid'>tip</span><span class='hs-layout'>,</span><span class='hs-varid'>tip</span><span class='hs-layout'>)</span>
+<a name="line-619"></a>
+<a name="line-620"></a><a name="splitMember"></a><span class='hs-comment'>-- | /O(log n)/. Performs a 'split' but also returns whether the pivot</span>
+<a name="line-621"></a><span class='hs-comment'>-- element was found in the original set.</span>
+<a name="line-622"></a><span class='hs-definition'>splitMember</span> <span class='hs-keyglyph'>::</span> <span class='hs-layout'>(</span><span class='hs-conid'>US</span> <span class='hs-varid'>a</span><span class='hs-layout'>,</span> <span class='hs-conid'>Ord</span> <span class='hs-varid'>a</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-varid'>a</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-conid'>USet</span> <span class='hs-varid'>a</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-layout'>(</span><span class='hs-conid'>USet</span> <span class='hs-varid'>a</span><span class='hs-layout'>,</span><span class='hs-conid'>Bool</span><span class='hs-layout'>,</span><span class='hs-conid'>USet</span> <span class='hs-varid'>a</span><span class='hs-layout'>)</span>
+<a name="line-623"></a><span class='hs-definition'>splitMember</span> <span class='hs-varid'>x</span> <span class='hs-varid'>t</span> <span class='hs-keyglyph'>=</span> <span class='hs-keyword'>let</span> <span class='hs-layout'>(</span><span class='hs-varid'>l</span><span class='hs-layout'>,</span><span class='hs-varid'>m</span><span class='hs-layout'>,</span><span class='hs-varid'>r</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>splitLookup</span> <span class='hs-varid'>x</span> <span class='hs-varid'>t</span> <span class='hs-keyword'>in</span>
+<a name="line-624"></a>     <span class='hs-layout'>(</span><span class='hs-varid'>l</span><span class='hs-layout'>,</span><span class='hs-varid'>maybe</span> <span class='hs-conid'>False</span> <span class='hs-layout'>(</span><span class='hs-varid'>const</span> <span class='hs-conid'>True</span><span class='hs-layout'>)</span> <span class='hs-varid'>m</span><span class='hs-layout'>,</span><span class='hs-varid'>r</span><span class='hs-layout'>)</span>
+<a name="line-625"></a>
+<a name="line-626"></a><a name="splitLookup"></a><span class='hs-comment'>-- | /O(log n)/. Performs a 'split' but also returns the pivot</span>
+<a name="line-627"></a><span class='hs-comment'>-- element that was found in the original set.</span>
+<a name="line-628"></a><span class='hs-definition'>splitLookup</span> <span class='hs-keyglyph'>::</span> <span class='hs-layout'>(</span><span class='hs-conid'>US</span> <span class='hs-varid'>a</span><span class='hs-layout'>,</span> <span class='hs-conid'>Ord</span> <span class='hs-varid'>a</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-varid'>a</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-conid'>USet</span> <span class='hs-varid'>a</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-layout'>(</span><span class='hs-conid'>USet</span> <span class='hs-varid'>a</span><span class='hs-layout'>,</span><span class='hs-conid'>Maybe</span> <span class='hs-varid'>a</span><span class='hs-layout'>,</span><span class='hs-conid'>USet</span> <span class='hs-varid'>a</span><span class='hs-layout'>)</span>
+<a name="line-629"></a><span class='hs-definition'>splitLookup</span> <span class='hs-varid'>x</span> <span class='hs-layout'>(</span><span class='hs-varid'>view</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-conid'>Bin</span> <span class='hs-keyword'>_</span> <span class='hs-varid'>y</span> <span class='hs-varid'>l</span> <span class='hs-varid'>r</span><span class='hs-layout'>)</span>
+<a name="line-630"></a>   <span class='hs-keyglyph'>=</span> <span class='hs-keyword'>case</span> <span class='hs-varid'>compare</span> <span class='hs-varid'>x</span> <span class='hs-varid'>y</span> <span class='hs-keyword'>of</span>
+<a name="line-631"></a>       <span class='hs-conid'>LT</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-keyword'>let</span> <span class='hs-layout'>(</span><span class='hs-varid'>lt</span><span class='hs-layout'>,</span><span class='hs-varid'>found</span><span class='hs-layout'>,</span><span class='hs-varid'>gt</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>splitLookup</span> <span class='hs-varid'>x</span> <span class='hs-varid'>l</span> <span class='hs-keyword'>in</span> <span class='hs-layout'>(</span><span class='hs-varid'>lt</span><span class='hs-layout'>,</span><span class='hs-varid'>found</span><span class='hs-layout'>,</span><span class='hs-varid'>join</span> <span class='hs-varid'>y</span> <span class='hs-varid'>gt</span> <span class='hs-varid'>r</span><span class='hs-layout'>)</span>
+<a name="line-632"></a>       <span class='hs-conid'>GT</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-keyword'>let</span> <span class='hs-layout'>(</span><span class='hs-varid'>lt</span><span class='hs-layout'>,</span><span class='hs-varid'>found</span><span class='hs-layout'>,</span><span class='hs-varid'>gt</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>splitLookup</span> <span class='hs-varid'>x</span> <span class='hs-varid'>r</span> <span class='hs-keyword'>in</span> <span class='hs-layout'>(</span><span class='hs-varid'>join</span> <span class='hs-varid'>y</span> <span class='hs-varid'>l</span> <span class='hs-varid'>lt</span><span class='hs-layout'>,</span><span class='hs-varid'>found</span><span class='hs-layout'>,</span><span class='hs-varid'>gt</span><span class='hs-layout'>)</span>
+<a name="line-633"></a>       <span class='hs-conid'>EQ</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-layout'>(</span><span class='hs-varid'>l</span><span class='hs-layout'>,</span><span class='hs-conid'>Just</span> <span class='hs-varid'>y</span><span class='hs-layout'>,</span><span class='hs-varid'>r</span><span class='hs-layout'>)</span>
+<a name="line-634"></a><span class='hs-definition'>splitLookup</span> <span class='hs-keyword'>_</span> <span class='hs-keyword'>_</span> <span class='hs-keyglyph'>=</span> <span class='hs-layout'>(</span><span class='hs-varid'>tip</span><span class='hs-layout'>,</span><span class='hs-conid'>Nothing</span><span class='hs-layout'>,</span><span class='hs-varid'>tip</span><span class='hs-layout'>)</span>
+<a name="line-635"></a>
+<a name="line-636"></a><span class='hs-comment'>{--------------------------------------------------------------------
+<a name="line-637"></a>  Utility functions that maintain the balance properties of the tree.
+<a name="line-638"></a>  All constructors assume that all values in [l] &lt; [x] and all values
+<a name="line-639"></a>  in [r] &gt; [x], and that [l] and [r] are valid trees.
+<a name="line-640"></a>  
+<a name="line-641"></a>  In order of sophistication:
+<a name="line-642"></a>    [Bin sz x l r]    The type constructor.
+<a name="line-643"></a>    [bin_ x l r]      Maintains the correct size, assumes that both [l]
+<a name="line-644"></a>                      and [r] are balanced with respect to each other.
+<a name="line-645"></a>    [balance x l r]   Restores the balance and size.
+<a name="line-646"></a>                      Assumes that the original tree was balanced and
+<a name="line-647"></a>                      that [l] or [r] has changed by at most one element.
+<a name="line-648"></a>    [join x l r]      Restores balance and size. 
+<a name="line-649"></a>
+<a name="line-650"></a>  Furthermore, we can construct a new tree from two trees. Both operations
+<a name="line-651"></a>  assume that all values in [l] &lt; all values in [r] and that [l] and [r]
+<a name="line-652"></a>  are valid:
+<a name="line-653"></a>    [glue l r]        Glues [l] and [r] together. Assumes that [l] and
+<a name="line-654"></a>                      [r] are already balanced with respect to each other.
+<a name="line-655"></a>    [merge l r]       Merges two trees and restores balance.
+<a name="line-656"></a>
+<a name="line-657"></a>  Note: in contrast to Adam's paper, we use (&lt;=) comparisons instead
+<a name="line-658"></a>  of (&lt;) comparisons in [join], [merge] and [balance]. 
+<a name="line-659"></a>  Quickcheck (on [difference]) showed that this was necessary in order 
+<a name="line-660"></a>  to maintain the invariants. It is quite unsatisfactory that I haven't 
+<a name="line-661"></a>  been able to find out why this is actually the case! Fortunately, it 
+<a name="line-662"></a>  doesn't hurt to be a bit more conservative.
+<a name="line-663"></a>--------------------------------------------------------------------}</span>
+<a name="line-664"></a>
+<a name="line-665"></a><a name="join"></a><span class='hs-comment'>{--------------------------------------------------------------------
+<a name="line-666"></a>  Join 
+<a name="line-667"></a>--------------------------------------------------------------------}</span>
+<a name="line-668"></a><span class='hs-definition'>join</span> <span class='hs-keyglyph'>::</span> <span class='hs-conid'>US</span> <span class='hs-varid'>a</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-varid'>a</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-conid'>USet</span> <span class='hs-varid'>a</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-conid'>USet</span> <span class='hs-varid'>a</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-conid'>USet</span> <span class='hs-varid'>a</span>
+<a name="line-669"></a><span class='hs-definition'>join</span> <span class='hs-varid'>x</span> <span class='hs-layout'>(</span><span class='hs-varid'>isTip</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-conid'>True</span><span class='hs-layout'>)</span> <span class='hs-varid'>r</span>  <span class='hs-keyglyph'>=</span> <span class='hs-varid'>insertMin</span> <span class='hs-varid'>x</span> <span class='hs-varid'>r</span>
+<a name="line-670"></a><span class='hs-definition'>join</span> <span class='hs-varid'>x</span> <span class='hs-varid'>l</span> <span class='hs-layout'>(</span><span class='hs-varid'>isTip</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-conid'>True</span><span class='hs-layout'>)</span>  <span class='hs-keyglyph'>=</span> <span class='hs-varid'>insertMax</span> <span class='hs-varid'>x</span> <span class='hs-varid'>l</span>
+<a name="line-671"></a><span class='hs-definition'>join</span> <span class='hs-varid'>x</span> <span class='hs-varid'>l</span><span class='hs-keyglyph'>@</span><span class='hs-layout'>(</span><span class='hs-varid'>view</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-conid'>Bin</span> <span class='hs-varid'>sizeL</span> <span class='hs-varid'>y</span> <span class='hs-varid'>ly</span> <span class='hs-varid'>ry</span><span class='hs-layout'>)</span> <span class='hs-varid'>r</span><span class='hs-keyglyph'>@</span><span class='hs-layout'>(</span><span class='hs-varid'>view</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-conid'>Bin</span> <span class='hs-varid'>sizeR</span> <span class='hs-varid'>z</span> <span class='hs-varid'>lz</span> <span class='hs-varid'>rz</span><span class='hs-layout'>)</span>
+<a name="line-672"></a>  <span class='hs-keyglyph'>|</span> <span class='hs-varid'>delta</span><span class='hs-varop'>*</span><span class='hs-varid'>sizeL</span> <span class='hs-varop'>&lt;=</span> <span class='hs-varid'>sizeR</span>  <span class='hs-keyglyph'>=</span> <span class='hs-varid'>balance</span> <span class='hs-varid'>z</span> <span class='hs-layout'>(</span><span class='hs-varid'>join</span> <span class='hs-varid'>x</span> <span class='hs-varid'>l</span> <span class='hs-varid'>lz</span><span class='hs-layout'>)</span> <span class='hs-varid'>rz</span>
+<a name="line-673"></a>  <span class='hs-keyglyph'>|</span> <span class='hs-varid'>delta</span><span class='hs-varop'>*</span><span class='hs-varid'>sizeR</span> <span class='hs-varop'>&lt;=</span> <span class='hs-varid'>sizeL</span>  <span class='hs-keyglyph'>=</span> <span class='hs-varid'>balance</span> <span class='hs-varid'>y</span> <span class='hs-varid'>ly</span> <span class='hs-layout'>(</span><span class='hs-varid'>join</span> <span class='hs-varid'>x</span> <span class='hs-varid'>ry</span> <span class='hs-varid'>r</span><span class='hs-layout'>)</span>
+<a name="line-674"></a>  <span class='hs-keyglyph'>|</span> <span class='hs-varid'>otherwise</span>             <span class='hs-keyglyph'>=</span> <span class='hs-varid'>bin_</span> <span class='hs-varid'>x</span> <span class='hs-varid'>l</span> <span class='hs-varid'>r</span>
+<a name="line-675"></a>
+<a name="line-676"></a>
+<a name="line-677"></a><a name="insertMax"></a><span class='hs-comment'>-- insertMin and insertMax don't perform potentially expensive comparisons.</span>
+<a name="line-678"></a><span class='hs-definition'>insertMax</span><span class='hs-layout'>,</span><span class='hs-varid'>insertMin</span> <span class='hs-keyglyph'>::</span> <span class='hs-conid'>US</span> <span class='hs-varid'>a</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-varid'>a</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-conid'>USet</span> <span class='hs-varid'>a</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-conid'>USet</span> <span class='hs-varid'>a</span> 
+<a name="line-679"></a><span class='hs-definition'>insertMax</span> <span class='hs-varid'>x</span> <span class='hs-varid'>t</span>
+<a name="line-680"></a>  <span class='hs-keyglyph'>=</span> <span class='hs-keyword'>case</span> <span class='hs-varid'>view</span> <span class='hs-varid'>t</span> <span class='hs-keyword'>of</span>
+<a name="line-681"></a>      <span class='hs-conid'>Bin</span> <span class='hs-keyword'>_</span> <span class='hs-varid'>y</span> <span class='hs-varid'>l</span> <span class='hs-varid'>r</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-varid'>balance</span> <span class='hs-varid'>y</span> <span class='hs-varid'>l</span> <span class='hs-layout'>(</span><span class='hs-varid'>insertMax</span> <span class='hs-varid'>x</span> <span class='hs-varid'>r</span><span class='hs-layout'>)</span>
+<a name="line-682"></a>      <span class='hs-keyword'>_</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-varid'>singleton</span> <span class='hs-varid'>x</span>
+<a name="line-683"></a>             
+<a name="line-684"></a><a name="insertMin"></a><span class='hs-definition'>insertMin</span> <span class='hs-varid'>x</span> <span class='hs-varid'>t</span>
+<a name="line-685"></a>  <span class='hs-keyglyph'>=</span> <span class='hs-keyword'>case</span> <span class='hs-varid'>view</span> <span class='hs-varid'>t</span> <span class='hs-keyword'>of</span>
+<a name="line-686"></a>      <span class='hs-conid'>Bin</span> <span class='hs-keyword'>_</span> <span class='hs-varid'>y</span> <span class='hs-varid'>l</span> <span class='hs-varid'>r</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-varid'>balance</span> <span class='hs-varid'>y</span> <span class='hs-layout'>(</span><span class='hs-varid'>insertMin</span> <span class='hs-varid'>x</span> <span class='hs-varid'>l</span><span class='hs-layout'>)</span> <span class='hs-varid'>r</span>
+<a name="line-687"></a>      <span class='hs-keyword'>_</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-varid'>singleton</span> <span class='hs-varid'>x</span>
+<a name="line-688"></a>             
+<a name="line-689"></a><a name="merge"></a><span class='hs-comment'>{--------------------------------------------------------------------
+<a name="line-690"></a>  [merge l r]: merges two trees.
+<a name="line-691"></a>--------------------------------------------------------------------}</span>
+<a name="line-692"></a><span class='hs-definition'>merge</span> <span class='hs-keyglyph'>::</span> <span class='hs-conid'>US</span> <span class='hs-varid'>a</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>USet</span> <span class='hs-varid'>a</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-conid'>USet</span> <span class='hs-varid'>a</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-conid'>USet</span> <span class='hs-varid'>a</span>
+<a name="line-693"></a><span class='hs-definition'>merge</span> <span class='hs-layout'>(</span><span class='hs-varid'>isTip</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-conid'>True</span><span class='hs-layout'>)</span> <span class='hs-varid'>r</span>   <span class='hs-keyglyph'>=</span> <span class='hs-varid'>r</span>
+<a name="line-694"></a><span class='hs-definition'>merge</span> <span class='hs-varid'>l</span> <span class='hs-layout'>(</span><span class='hs-varid'>isTip</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-conid'>True</span><span class='hs-layout'>)</span>   <span class='hs-keyglyph'>=</span> <span class='hs-varid'>l</span>
+<a name="line-695"></a><span class='hs-definition'>merge</span> <span class='hs-varid'>l</span><span class='hs-keyglyph'>@</span><span class='hs-layout'>(</span><span class='hs-varid'>view</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-conid'>Bin</span> <span class='hs-varid'>sizeL</span> <span class='hs-varid'>x</span> <span class='hs-varid'>lx</span> <span class='hs-varid'>rx</span><span class='hs-layout'>)</span> <span class='hs-varid'>r</span><span class='hs-keyglyph'>@</span><span class='hs-layout'>(</span><span class='hs-varid'>view</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-conid'>Bin</span> <span class='hs-varid'>sizeR</span> <span class='hs-varid'>y</span> <span class='hs-varid'>ly</span> <span class='hs-varid'>ry</span><span class='hs-layout'>)</span>
+<a name="line-696"></a>  <span class='hs-keyglyph'>|</span> <span class='hs-varid'>delta</span><span class='hs-varop'>*</span><span class='hs-varid'>sizeL</span> <span class='hs-varop'>&lt;=</span> <span class='hs-varid'>sizeR</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>balance</span> <span class='hs-varid'>y</span> <span class='hs-layout'>(</span><span class='hs-varid'>merge</span> <span class='hs-varid'>l</span> <span class='hs-varid'>ly</span><span class='hs-layout'>)</span> <span class='hs-varid'>ry</span>
+<a name="line-697"></a>  <span class='hs-keyglyph'>|</span> <span class='hs-varid'>delta</span><span class='hs-varop'>*</span><span class='hs-varid'>sizeR</span> <span class='hs-varop'>&lt;=</span> <span class='hs-varid'>sizeL</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>balance</span> <span class='hs-varid'>x</span> <span class='hs-varid'>lx</span> <span class='hs-layout'>(</span><span class='hs-varid'>merge</span> <span class='hs-varid'>rx</span> <span class='hs-varid'>r</span><span class='hs-layout'>)</span>
+<a name="line-698"></a>  <span class='hs-keyglyph'>|</span> <span class='hs-varid'>otherwise</span>            <span class='hs-keyglyph'>=</span> <span class='hs-varid'>glue</span> <span class='hs-varid'>l</span> <span class='hs-varid'>r</span>
+<a name="line-699"></a>
+<a name="line-700"></a><a name="glue"></a><span class='hs-comment'>{--------------------------------------------------------------------
+<a name="line-701"></a>  [glue l r]: glues two trees together.
+<a name="line-702"></a>  Assumes that [l] and [r] are already balanced with respect to each other.
+<a name="line-703"></a>--------------------------------------------------------------------}</span>
+<a name="line-704"></a><span class='hs-definition'>glue</span> <span class='hs-keyglyph'>::</span> <span class='hs-conid'>US</span> <span class='hs-varid'>a</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>USet</span> <span class='hs-varid'>a</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-conid'>USet</span> <span class='hs-varid'>a</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-conid'>USet</span> <span class='hs-varid'>a</span>
+<a name="line-705"></a><span class='hs-definition'>glue</span> <span class='hs-layout'>(</span><span class='hs-varid'>isTip</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-conid'>True</span><span class='hs-layout'>)</span> <span class='hs-varid'>r</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>r</span>
+<a name="line-706"></a><span class='hs-definition'>glue</span> <span class='hs-varid'>l</span> <span class='hs-layout'>(</span><span class='hs-varid'>isTip</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-conid'>True</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>l</span>
+<a name="line-707"></a><span class='hs-definition'>glue</span> <span class='hs-varid'>l</span> <span class='hs-varid'>r</span>   
+<a name="line-708"></a>  <span class='hs-keyglyph'>|</span> <span class='hs-varid'>size</span> <span class='hs-varid'>l</span> <span class='hs-varop'>&gt;</span> <span class='hs-varid'>size</span> <span class='hs-varid'>r</span> <span class='hs-keyglyph'>=</span> <span class='hs-keyword'>let</span> <span class='hs-layout'>(</span><span class='hs-varid'>m</span><span class='hs-layout'>,</span><span class='hs-varid'>l'</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>deleteFindMax</span> <span class='hs-varid'>l</span> <span class='hs-keyword'>in</span> <span class='hs-varid'>balance</span> <span class='hs-varid'>m</span> <span class='hs-varid'>l'</span> <span class='hs-varid'>r</span>
+<a name="line-709"></a>  <span class='hs-keyglyph'>|</span> <span class='hs-varid'>otherwise</span>       <span class='hs-keyglyph'>=</span> <span class='hs-keyword'>let</span> <span class='hs-layout'>(</span><span class='hs-varid'>m</span><span class='hs-layout'>,</span><span class='hs-varid'>r'</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>deleteFindMin</span> <span class='hs-varid'>r</span> <span class='hs-keyword'>in</span> <span class='hs-varid'>balance</span> <span class='hs-varid'>m</span> <span class='hs-varid'>l</span> <span class='hs-varid'>r'</span>
+<a name="line-710"></a>
+<a name="line-711"></a>
+<a name="line-712"></a><span class='hs-comment'>-- | /O(log n)/. Delete and find the minimal element.</span>
+<a name="line-713"></a><span class='hs-comment'>-- </span>
+<a name="line-714"></a><span class='hs-comment'>-- &gt; deleteFindMin set = (findMin set, deleteMin set)</span>
+<a name="line-715"></a>
+<a name="line-716"></a><a name="deleteFindMin"></a><span class='hs-definition'>deleteFindMin</span> <span class='hs-keyglyph'>::</span> <span class='hs-conid'>US</span> <span class='hs-varid'>a</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>USet</span> <span class='hs-varid'>a</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-layout'>(</span><span class='hs-varid'>a</span><span class='hs-layout'>,</span><span class='hs-conid'>USet</span> <span class='hs-varid'>a</span><span class='hs-layout'>)</span>
+<a name="line-717"></a><span class='hs-definition'>deleteFindMin</span> <span class='hs-varid'>t</span> 
+<a name="line-718"></a>  <span class='hs-keyglyph'>=</span> <span class='hs-keyword'>case</span> <span class='hs-varid'>view</span> <span class='hs-varid'>t</span> <span class='hs-keyword'>of</span>
+<a name="line-719"></a>      <span class='hs-conid'>Bin</span> <span class='hs-keyword'>_</span> <span class='hs-varid'>x</span> <span class='hs-layout'>(</span><span class='hs-varid'>isTip</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-conid'>True</span><span class='hs-layout'>)</span> <span class='hs-varid'>r</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-layout'>(</span><span class='hs-varid'>x</span><span class='hs-layout'>,</span><span class='hs-varid'>r</span><span class='hs-layout'>)</span>
+<a name="line-720"></a>      <span class='hs-conid'>Bin</span> <span class='hs-keyword'>_</span> <span class='hs-varid'>x</span> <span class='hs-varid'>l</span> <span class='hs-varid'>r</span>   <span class='hs-keyglyph'>-&gt;</span> <span class='hs-keyword'>let</span> <span class='hs-layout'>(</span><span class='hs-varid'>xm</span><span class='hs-layout'>,</span><span class='hs-varid'>l'</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>deleteFindMin</span> <span class='hs-varid'>l</span> <span class='hs-keyword'>in</span> <span class='hs-layout'>(</span><span class='hs-varid'>xm</span><span class='hs-layout'>,</span><span class='hs-varid'>balance</span> <span class='hs-varid'>x</span> <span class='hs-varid'>l'</span> <span class='hs-varid'>r</span><span class='hs-layout'>)</span>
+<a name="line-721"></a>      <span class='hs-conid'>Tip</span>           <span class='hs-keyglyph'>-&gt;</span> <span class='hs-layout'>(</span><span class='hs-varid'>error</span> <span class='hs-str'>"Set.deleteFindMin: can not return the minimal element of an empty set"</span><span class='hs-layout'>,</span> <span class='hs-varid'>tip</span><span class='hs-layout'>)</span>
+<a name="line-722"></a>
+<a name="line-723"></a><a name="deleteFindMax"></a><span class='hs-comment'>-- | /O(log n)/. Delete and find the maximal element.</span>
+<a name="line-724"></a><span class='hs-comment'>-- </span>
+<a name="line-725"></a><span class='hs-comment'>-- &gt; deleteFindMax set = (findMax set, deleteMax set)</span>
+<a name="line-726"></a><span class='hs-definition'>deleteFindMax</span> <span class='hs-keyglyph'>::</span> <span class='hs-conid'>US</span> <span class='hs-varid'>a</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>USet</span> <span class='hs-varid'>a</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-layout'>(</span><span class='hs-varid'>a</span><span class='hs-layout'>,</span><span class='hs-conid'>USet</span> <span class='hs-varid'>a</span><span class='hs-layout'>)</span>
+<a name="line-727"></a><span class='hs-definition'>deleteFindMax</span> <span class='hs-varid'>t</span>
+<a name="line-728"></a>  <span class='hs-keyglyph'>=</span> <span class='hs-keyword'>case</span> <span class='hs-varid'>view</span> <span class='hs-varid'>t</span> <span class='hs-keyword'>of</span>
+<a name="line-729"></a>      <span class='hs-conid'>Bin</span> <span class='hs-keyword'>_</span> <span class='hs-varid'>x</span> <span class='hs-varid'>l</span> <span class='hs-layout'>(</span><span class='hs-varid'>isTip</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-conid'>True</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-layout'>(</span><span class='hs-varid'>x</span><span class='hs-layout'>,</span><span class='hs-varid'>l</span><span class='hs-layout'>)</span>
+<a name="line-730"></a>      <span class='hs-conid'>Bin</span> <span class='hs-keyword'>_</span> <span class='hs-varid'>x</span> <span class='hs-varid'>l</span> <span class='hs-varid'>r</span>   <span class='hs-keyglyph'>-&gt;</span> <span class='hs-keyword'>let</span> <span class='hs-layout'>(</span><span class='hs-varid'>xm</span><span class='hs-layout'>,</span><span class='hs-varid'>r'</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>deleteFindMax</span> <span class='hs-varid'>r</span> <span class='hs-keyword'>in</span> <span class='hs-layout'>(</span><span class='hs-varid'>xm</span><span class='hs-layout'>,</span><span class='hs-varid'>balance</span> <span class='hs-varid'>x</span> <span class='hs-varid'>l</span> <span class='hs-varid'>r'</span><span class='hs-layout'>)</span>
+<a name="line-731"></a>      <span class='hs-keyword'>_</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-layout'>(</span><span class='hs-varid'>error</span> <span class='hs-str'>"Set.deleteFindMax: can not return the maximal element of an empty set"</span><span class='hs-layout'>,</span> <span class='hs-varid'>tip</span><span class='hs-layout'>)</span>
+<a name="line-732"></a>
+<a name="line-733"></a><a name="minView"></a><span class='hs-comment'>-- | /O(log n)/. Retrieves the minimal key of the set, and the set</span>
+<a name="line-734"></a><span class='hs-comment'>-- stripped of that element, or 'Nothing' if passed an empty set.</span>
+<a name="line-735"></a><span class='hs-definition'>minView</span> <span class='hs-keyglyph'>::</span> <span class='hs-conid'>US</span> <span class='hs-varid'>a</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>USet</span> <span class='hs-varid'>a</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-conid'>Maybe</span> <span class='hs-layout'>(</span><span class='hs-varid'>a</span><span class='hs-layout'>,</span> <span class='hs-conid'>USet</span> <span class='hs-varid'>a</span><span class='hs-layout'>)</span>
+<a name="line-736"></a><span class='hs-definition'>minView</span> <span class='hs-layout'>(</span><span class='hs-varid'>isTip</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-conid'>True</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>Nothing</span>
+<a name="line-737"></a><span class='hs-definition'>minView</span> <span class='hs-varid'>x</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>Just</span> <span class='hs-layout'>(</span><span class='hs-varid'>deleteFindMin</span> <span class='hs-varid'>x</span><span class='hs-layout'>)</span>
+<a name="line-738"></a>
+<a name="line-739"></a><a name="maxView"></a><span class='hs-comment'>-- | /O(log n)/. Retrieves the maximal key of the set, and the set</span>
+<a name="line-740"></a><span class='hs-comment'>-- stripped of that element, or 'Nothing' if passed an empty set.</span>
+<a name="line-741"></a><span class='hs-definition'>maxView</span> <span class='hs-keyglyph'>::</span> <span class='hs-conid'>US</span> <span class='hs-varid'>a</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>USet</span> <span class='hs-varid'>a</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-conid'>Maybe</span> <span class='hs-layout'>(</span><span class='hs-varid'>a</span><span class='hs-layout'>,</span> <span class='hs-conid'>USet</span> <span class='hs-varid'>a</span><span class='hs-layout'>)</span>
+<a name="line-742"></a><span class='hs-definition'>maxView</span> <span class='hs-layout'>(</span><span class='hs-varid'>isTip</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-conid'>True</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>Nothing</span>
+<a name="line-743"></a><span class='hs-definition'>maxView</span> <span class='hs-varid'>x</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>Just</span> <span class='hs-layout'>(</span><span class='hs-varid'>deleteFindMax</span> <span class='hs-varid'>x</span><span class='hs-layout'>)</span>
+<a name="line-744"></a>
+<a name="line-745"></a><a name="delta"></a><span class='hs-comment'>{--------------------------------------------------------------------
+<a name="line-746"></a>  [balance x l r] balances two trees with value x.
+<a name="line-747"></a>  The sizes of the trees should balance after decreasing the
+<a name="line-748"></a>  size of one of them. (a rotation).
+<a name="line-749"></a>
+<a name="line-750"></a>  [delta] is the maximal relative difference between the sizes of
+<a name="line-751"></a>          two trees, it corresponds with the [w] in Adams' paper,
+<a name="line-752"></a>          or equivalently, [1/delta] corresponds with the $\alpha$
+<a name="line-753"></a>          in Nievergelt's paper. Adams shows that [delta] should
+<a name="line-754"></a>          be larger than 3.745 in order to garantee that the
+<a name="line-755"></a>          rotations can always restore balance.         
+<a name="line-756"></a>
+<a name="line-757"></a>  [ratio] is the ratio between an outer and inner sibling of the
+<a name="line-758"></a>          heavier subtree in an unbalanced setting. It determines
+<a name="line-759"></a>          whether a double or single rotation should be performed
+<a name="line-760"></a>          to restore balance. It is correspondes with the inverse
+<a name="line-761"></a>          of $\alpha$ in Adam's article.
+<a name="line-762"></a>
+<a name="line-763"></a>  Note that:
+<a name="line-764"></a>  - [delta] should be larger than 4.646 with a [ratio] of 2.
+<a name="line-765"></a>  - [delta] should be larger than 3.745 with a [ratio] of 1.534.
+<a name="line-766"></a>  
+<a name="line-767"></a>  - A lower [delta] leads to a more 'perfectly' balanced tree.
+<a name="line-768"></a>  - A higher [delta] performs less rebalancing.
+<a name="line-769"></a>
+<a name="line-770"></a>  - Balancing is automatic for random data and a balancing
+<a name="line-771"></a>    scheme is only necessary to avoid pathological worst cases.
+<a name="line-772"></a>    Almost any choice will do in practice
+<a name="line-773"></a>    
+<a name="line-774"></a>  - Allthough it seems that a rather large [delta] may perform better 
+<a name="line-775"></a>    than smaller one, measurements have shown that the smallest [delta]
+<a name="line-776"></a>    of 4 is actually the fastest on a wide range of operations. It
+<a name="line-777"></a>    especially improves performance on worst-case scenarios like
+<a name="line-778"></a>    a sequence of ordered insertions.
+<a name="line-779"></a>
+<a name="line-780"></a>  Note: in contrast to Adams' paper, we use a ratio of (at least) 2
+<a name="line-781"></a>  to decide whether a single or double rotation is needed. Allthough
+<a name="line-782"></a>  he actually proves that this ratio is needed to maintain the
+<a name="line-783"></a>  invariants, his implementation uses a (invalid) ratio of 1. 
+<a name="line-784"></a>  He is aware of the problem though since he has put a comment in his 
+<a name="line-785"></a>  original source code that he doesn't care about generating a 
+<a name="line-786"></a>  slightly inbalanced tree since it doesn't seem to matter in practice. 
+<a name="line-787"></a>  However (since we use quickcheck :-) we will stick to strictly balanced 
+<a name="line-788"></a>  trees.
+<a name="line-789"></a>--------------------------------------------------------------------}</span>
+<a name="line-790"></a><span class='hs-definition'>delta</span><span class='hs-layout'>,</span><span class='hs-varid'>ratio</span> <span class='hs-keyglyph'>::</span> <span class='hs-conid'>Int</span>
+<a name="line-791"></a><span class='hs-definition'>delta</span> <span class='hs-keyglyph'>=</span> <span class='hs-num'>4</span>
+<a name="line-792"></a><a name="ratio"></a><span class='hs-definition'>ratio</span> <span class='hs-keyglyph'>=</span> <span class='hs-num'>2</span>
+<a name="line-793"></a>
+<a name="line-794"></a><a name="balance"></a><span class='hs-definition'>balance</span> <span class='hs-keyglyph'>::</span> <span class='hs-conid'>US</span> <span class='hs-varid'>a</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-varid'>a</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-conid'>USet</span> <span class='hs-varid'>a</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-conid'>USet</span> <span class='hs-varid'>a</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-conid'>USet</span> <span class='hs-varid'>a</span>
+<a name="line-795"></a><span class='hs-definition'>balance</span> <span class='hs-varid'>x</span> <span class='hs-varid'>l</span> <span class='hs-varid'>r</span>
+<a name="line-796"></a>  <span class='hs-keyglyph'>|</span> <span class='hs-varid'>sizeL</span> <span class='hs-varop'>+</span> <span class='hs-varid'>sizeR</span> <span class='hs-varop'>&lt;=</span> <span class='hs-num'>1</span>    <span class='hs-keyglyph'>=</span> <span class='hs-varid'>bin</span> <span class='hs-varid'>sizeX</span> <span class='hs-varid'>x</span> <span class='hs-varid'>l</span> <span class='hs-varid'>r</span>
+<a name="line-797"></a>  <span class='hs-keyglyph'>|</span> <span class='hs-varid'>sizeR</span> <span class='hs-varop'>&gt;=</span> <span class='hs-varid'>delta</span><span class='hs-varop'>*</span><span class='hs-varid'>sizeL</span>  <span class='hs-keyglyph'>=</span> <span class='hs-varid'>rotateL</span> <span class='hs-varid'>x</span> <span class='hs-varid'>l</span> <span class='hs-varid'>r</span>
+<a name="line-798"></a>  <span class='hs-keyglyph'>|</span> <span class='hs-varid'>sizeL</span> <span class='hs-varop'>&gt;=</span> <span class='hs-varid'>delta</span><span class='hs-varop'>*</span><span class='hs-varid'>sizeR</span>  <span class='hs-keyglyph'>=</span> <span class='hs-varid'>rotateR</span> <span class='hs-varid'>x</span> <span class='hs-varid'>l</span> <span class='hs-varid'>r</span>
+<a name="line-799"></a>  <span class='hs-keyglyph'>|</span> <span class='hs-varid'>otherwise</span>             <span class='hs-keyglyph'>=</span> <span class='hs-varid'>bin</span> <span class='hs-varid'>sizeX</span> <span class='hs-varid'>x</span> <span class='hs-varid'>l</span> <span class='hs-varid'>r</span>
+<a name="line-800"></a>  <span class='hs-keyword'>where</span>
+<a name="line-801"></a>    <span class='hs-varid'>sizeL</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>size</span> <span class='hs-varid'>l</span>
+<a name="line-802"></a>    <span class='hs-varid'>sizeR</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>size</span> <span class='hs-varid'>r</span>
+<a name="line-803"></a>    <span class='hs-varid'>sizeX</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>sizeL</span> <span class='hs-varop'>+</span> <span class='hs-varid'>sizeR</span> <span class='hs-varop'>+</span> <span class='hs-num'>1</span>
+<a name="line-804"></a>
+<a name="line-805"></a><a name="rotateL"></a><span class='hs-comment'>-- rotate</span>
+<a name="line-806"></a><span class='hs-definition'>rotateL</span> <span class='hs-keyglyph'>::</span> <span class='hs-conid'>US</span> <span class='hs-varid'>a</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-varid'>a</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-conid'>USet</span> <span class='hs-varid'>a</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-conid'>USet</span> <span class='hs-varid'>a</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-conid'>USet</span> <span class='hs-varid'>a</span>
+<a name="line-807"></a><span class='hs-definition'>rotateL</span> <span class='hs-varid'>x</span> <span class='hs-varid'>l</span> <span class='hs-varid'>r</span><span class='hs-keyglyph'>@</span><span class='hs-layout'>(</span><span class='hs-varid'>view</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-conid'>Bin</span> <span class='hs-keyword'>_</span> <span class='hs-keyword'>_</span> <span class='hs-varid'>ly</span> <span class='hs-varid'>ry</span><span class='hs-layout'>)</span>
+<a name="line-808"></a>  <span class='hs-keyglyph'>|</span> <span class='hs-varid'>size</span> <span class='hs-varid'>ly</span> <span class='hs-varop'>&lt;</span> <span class='hs-varid'>ratio</span><span class='hs-varop'>*</span><span class='hs-varid'>size</span> <span class='hs-varid'>ry</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>singleL</span> <span class='hs-varid'>x</span> <span class='hs-varid'>l</span> <span class='hs-varid'>r</span>
+<a name="line-809"></a>  <span class='hs-keyglyph'>|</span> <span class='hs-varid'>otherwise</span>               <span class='hs-keyglyph'>=</span> <span class='hs-varid'>doubleL</span> <span class='hs-varid'>x</span> <span class='hs-varid'>l</span> <span class='hs-varid'>r</span>
+<a name="line-810"></a><span class='hs-definition'>rotateL</span> <span class='hs-keyword'>_</span> <span class='hs-keyword'>_</span> <span class='hs-keyword'>_</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>error</span> <span class='hs-str'>"rotateL Tip"</span>
+<a name="line-811"></a>
+<a name="line-812"></a><a name="rotateR"></a><span class='hs-definition'>rotateR</span> <span class='hs-keyglyph'>::</span> <span class='hs-conid'>US</span> <span class='hs-varid'>a</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-varid'>a</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-conid'>USet</span> <span class='hs-varid'>a</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-conid'>USet</span> <span class='hs-varid'>a</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-conid'>USet</span> <span class='hs-varid'>a</span>
+<a name="line-813"></a><span class='hs-definition'>rotateR</span> <span class='hs-varid'>x</span> <span class='hs-varid'>l</span><span class='hs-keyglyph'>@</span><span class='hs-layout'>(</span><span class='hs-varid'>view</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-conid'>Bin</span> <span class='hs-keyword'>_</span> <span class='hs-keyword'>_</span> <span class='hs-varid'>ly</span> <span class='hs-varid'>ry</span><span class='hs-layout'>)</span> <span class='hs-varid'>r</span>
+<a name="line-814"></a>  <span class='hs-keyglyph'>|</span> <span class='hs-varid'>size</span> <span class='hs-varid'>ry</span> <span class='hs-varop'>&lt;</span> <span class='hs-varid'>ratio</span><span class='hs-varop'>*</span><span class='hs-varid'>size</span> <span class='hs-varid'>ly</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>singleR</span> <span class='hs-varid'>x</span> <span class='hs-varid'>l</span> <span class='hs-varid'>r</span>
+<a name="line-815"></a>  <span class='hs-keyglyph'>|</span> <span class='hs-varid'>otherwise</span>               <span class='hs-keyglyph'>=</span> <span class='hs-varid'>doubleR</span> <span class='hs-varid'>x</span> <span class='hs-varid'>l</span> <span class='hs-varid'>r</span>
+<a name="line-816"></a><span class='hs-definition'>rotateR</span> <span class='hs-keyword'>_</span> <span class='hs-keyword'>_</span> <span class='hs-keyword'>_</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>error</span> <span class='hs-str'>"rotateL Tip"</span>
+<a name="line-817"></a>
+<a name="line-818"></a><a name="singleL"></a><span class='hs-comment'>-- basic rotations</span>
+<a name="line-819"></a><span class='hs-definition'>singleL</span><span class='hs-layout'>,</span> <span class='hs-varid'>singleR</span> <span class='hs-keyglyph'>::</span> <span class='hs-conid'>US</span> <span class='hs-varid'>a</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-varid'>a</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-conid'>USet</span> <span class='hs-varid'>a</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-conid'>USet</span> <span class='hs-varid'>a</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-conid'>USet</span> <span class='hs-varid'>a</span>
+<a name="line-820"></a><span class='hs-definition'>singleL</span> <span class='hs-varid'>x1</span> <span class='hs-varid'>t1</span> <span class='hs-layout'>(</span><span class='hs-varid'>view</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-conid'>Bin</span> <span class='hs-keyword'>_</span> <span class='hs-varid'>x2</span> <span class='hs-varid'>t2</span> <span class='hs-varid'>t3</span><span class='hs-layout'>)</span>  <span class='hs-keyglyph'>=</span> <span class='hs-varid'>bin_</span> <span class='hs-varid'>x2</span> <span class='hs-layout'>(</span><span class='hs-varid'>bin_</span> <span class='hs-varid'>x1</span> <span class='hs-varid'>t1</span> <span class='hs-varid'>t2</span><span class='hs-layout'>)</span> <span class='hs-varid'>t3</span>
+<a name="line-821"></a><span class='hs-definition'>singleL</span> <span class='hs-keyword'>_</span> <span class='hs-keyword'>_</span> <span class='hs-keyword'>_</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>error</span> <span class='hs-str'>"singleL"</span>
+<a name="line-822"></a><a name="singleR"></a><span class='hs-definition'>singleR</span> <span class='hs-varid'>x1</span> <span class='hs-layout'>(</span><span class='hs-varid'>view</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-conid'>Bin</span> <span class='hs-keyword'>_</span> <span class='hs-varid'>x2</span> <span class='hs-varid'>t1</span> <span class='hs-varid'>t2</span><span class='hs-layout'>)</span> <span class='hs-varid'>t3</span>  <span class='hs-keyglyph'>=</span> <span class='hs-varid'>bin_</span> <span class='hs-varid'>x2</span> <span class='hs-varid'>t1</span> <span class='hs-layout'>(</span><span class='hs-varid'>bin_</span> <span class='hs-varid'>x1</span> <span class='hs-varid'>t2</span> <span class='hs-varid'>t3</span><span class='hs-layout'>)</span>
+<a name="line-823"></a><span class='hs-definition'>singleR</span> <span class='hs-keyword'>_</span> <span class='hs-keyword'>_</span> <span class='hs-keyword'>_</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>error</span> <span class='hs-str'>"singleR"</span>
+<a name="line-824"></a>
+<a name="line-825"></a><a name="doubleL"></a><span class='hs-definition'>doubleL</span><span class='hs-layout'>,</span> <span class='hs-varid'>doubleR</span> <span class='hs-keyglyph'>::</span> <span class='hs-conid'>US</span> <span class='hs-varid'>a</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-varid'>a</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-conid'>USet</span> <span class='hs-varid'>a</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-conid'>USet</span> <span class='hs-varid'>a</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-conid'>USet</span> <span class='hs-varid'>a</span>
+<a name="line-826"></a><span class='hs-definition'>doubleL</span> <span class='hs-varid'>x1</span> <span class='hs-varid'>t1</span> <span class='hs-layout'>(</span><span class='hs-varid'>view</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-conid'>Bin</span> <span class='hs-keyword'>_</span> <span class='hs-varid'>x2</span> <span class='hs-layout'>(</span><span class='hs-varid'>view</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-conid'>Bin</span> <span class='hs-keyword'>_</span> <span class='hs-varid'>x3</span> <span class='hs-varid'>t2</span> <span class='hs-varid'>t3</span><span class='hs-layout'>)</span> <span class='hs-varid'>t4</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>bin_</span> <span class='hs-varid'>x3</span> <span class='hs-layout'>(</span><span class='hs-varid'>bin_</span> <span class='hs-varid'>x1</span> <span class='hs-varid'>t1</span> <span class='hs-varid'>t2</span><span class='hs-layout'>)</span> <span class='hs-layout'>(</span><span class='hs-varid'>bin_</span> <span class='hs-varid'>x2</span> <span class='hs-varid'>t3</span> <span class='hs-varid'>t4</span><span class='hs-layout'>)</span>
+<a name="line-827"></a><span class='hs-definition'>doubleL</span> <span class='hs-keyword'>_</span> <span class='hs-keyword'>_</span> <span class='hs-keyword'>_</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>error</span> <span class='hs-str'>"doubleL"</span>
+<a name="line-828"></a><a name="doubleR"></a><span class='hs-definition'>doubleR</span> <span class='hs-varid'>x1</span> <span class='hs-layout'>(</span><span class='hs-varid'>view</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-conid'>Bin</span> <span class='hs-keyword'>_</span> <span class='hs-varid'>x2</span> <span class='hs-varid'>t1</span> <span class='hs-layout'>(</span><span class='hs-varid'>view</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-conid'>Bin</span> <span class='hs-keyword'>_</span> <span class='hs-varid'>x3</span> <span class='hs-varid'>t2</span> <span class='hs-varid'>t3</span><span class='hs-layout'>)</span><span class='hs-layout'>)</span> <span class='hs-varid'>t4</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>bin_</span> <span class='hs-varid'>x3</span> <span class='hs-layout'>(</span><span class='hs-varid'>bin_</span> <span class='hs-varid'>x2</span> <span class='hs-varid'>t1</span> <span class='hs-varid'>t2</span><span class='hs-layout'>)</span> <span class='hs-layout'>(</span><span class='hs-varid'>bin_</span> <span class='hs-varid'>x1</span> <span class='hs-varid'>t3</span> <span class='hs-varid'>t4</span><span class='hs-layout'>)</span>
+<a name="line-829"></a><span class='hs-definition'>doubleR</span> <span class='hs-keyword'>_</span> <span class='hs-keyword'>_</span> <span class='hs-keyword'>_</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>error</span> <span class='hs-str'>"doubleR"</span>
+<a name="line-830"></a>
+<a name="line-831"></a>
+<a name="line-832"></a><a name="bin_"></a><span class='hs-comment'>{--------------------------------------------------------------------
+<a name="line-833"></a>  The bin constructor maintains the size of the tree
+<a name="line-834"></a>--------------------------------------------------------------------}</span>
+<a name="line-835"></a><span class='hs-definition'>bin_</span> <span class='hs-keyglyph'>::</span> <span class='hs-conid'>US</span> <span class='hs-varid'>a</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-varid'>a</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-conid'>USet</span> <span class='hs-varid'>a</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-conid'>USet</span> <span class='hs-varid'>a</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-conid'>USet</span> <span class='hs-varid'>a</span>
+<a name="line-836"></a><span class='hs-definition'>bin_</span> <span class='hs-varid'>x</span> <span class='hs-varid'>l</span> <span class='hs-varid'>r</span>
+<a name="line-837"></a>  <span class='hs-keyglyph'>=</span> <span class='hs-varid'>bin</span> <span class='hs-layout'>(</span><span class='hs-varid'>size</span> <span class='hs-varid'>l</span> <span class='hs-varop'>+</span> <span class='hs-varid'>size</span> <span class='hs-varid'>r</span> <span class='hs-varop'>+</span> <span class='hs-num'>1</span><span class='hs-layout'>)</span> <span class='hs-varid'>x</span> <span class='hs-varid'>l</span> <span class='hs-varid'>r</span>
+<a name="line-838"></a>
hunk ./doc/html/monoids/src/Data-Set-Unboxed.html 848
-<a name="line-840"></a><a name="doubleL"></a><span class='hs-definition'>doubleL</span><span class='hs-layout'>,</span> <span class='hs-varid'>doubleR</span> <span class='hs-keyglyph'>::</span> <span class='hs-conid'>US</span> <span class='hs-varid'>a</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-varid'>a</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-conid'>USet</span> <span class='hs-varid'>a</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-conid'>USet</span> <span class='hs-varid'>a</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-conid'>USet</span> <span class='hs-varid'>a</span>
-<a name="line-841"></a><span class='hs-definition'>doubleL</span> <span class='hs-varid'>x1</span> <span class='hs-varid'>t1</span> <span class='hs-layout'>(</span><span class='hs-varid'>view</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-conid'>Bin</span> <span class='hs-keyword'>_</span> <span class='hs-varid'>x2</span> <span class='hs-layout'>(</span><span class='hs-varid'>view</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-conid'>Bin</span> <span class='hs-keyword'>_</span> <span class='hs-varid'>x3</span> <span class='hs-varid'>t2</span> <span class='hs-varid'>t3</span><span class='hs-layout'>)</span> <span class='hs-varid'>t4</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>bin_</span> <span class='hs-varid'>x3</span> <span class='hs-layout'>(</span><span class='hs-varid'>bin_</span> <span class='hs-varid'>x1</span> <span class='hs-varid'>t1</span> <span class='hs-varid'>t2</span><span class='hs-layout'>)</span> <span class='hs-layout'>(</span><span class='hs-varid'>bin_</span> <span class='hs-varid'>x2</span> <span class='hs-varid'>t3</span> <span class='hs-varid'>t4</span><span class='hs-layout'>)</span>
-<a name="line-842"></a><span class='hs-definition'>doubleL</span> <span class='hs-keyword'>_</span> <span class='hs-keyword'>_</span> <span class='hs-keyword'>_</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>error</span> <span class='hs-str'>"doubleL"</span>
-<a name="line-843"></a><a name="doubleR"></a><span class='hs-definition'>doubleR</span> <span class='hs-varid'>x1</span> <span class='hs-layout'>(</span><span class='hs-varid'>view</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-conid'>Bin</span> <span class='hs-keyword'>_</span> <span class='hs-varid'>x2</span> <span class='hs-varid'>t1</span> <span class='hs-layout'>(</span><span class='hs-varid'>view</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-conid'>Bin</span> <span class='hs-keyword'>_</span> <span class='hs-varid'>x3</span> <span class='hs-varid'>t2</span> <span class='hs-varid'>t3</span><span class='hs-layout'>)</span><span class='hs-layout'>)</span> <span class='hs-varid'>t4</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>bin_</span> <span class='hs-varid'>x3</span> <span class='hs-layout'>(</span><span class='hs-varid'>bin_</span> <span class='hs-varid'>x2</span> <span class='hs-varid'>t1</span> <span class='hs-varid'>t2</span><span class='hs-layout'>)</span> <span class='hs-layout'>(</span><span class='hs-varid'>bin_</span> <span class='hs-varid'>x1</span> <span class='hs-varid'>t3</span> <span class='hs-varid'>t4</span><span class='hs-layout'>)</span>
-<a name="line-844"></a><span class='hs-definition'>doubleR</span> <span class='hs-keyword'>_</span> <span class='hs-keyword'>_</span> <span class='hs-keyword'>_</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>error</span> <span class='hs-str'>"doubleR"</span>
-<a name="line-845"></a>
-<a name="line-846"></a>
-<a name="line-847"></a><a name="bin_"></a><span class='hs-comment'>{--------------------------------------------------------------------
-<a name="line-848"></a>  The bin constructor maintains the size of the tree
-<a name="line-849"></a>--------------------------------------------------------------------}</span>
-<a name="line-850"></a><span class='hs-definition'>bin_</span> <span class='hs-keyglyph'>::</span> <span class='hs-conid'>US</span> <span class='hs-varid'>a</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-varid'>a</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-conid'>USet</span> <span class='hs-varid'>a</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-conid'>USet</span> <span class='hs-varid'>a</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-conid'>USet</span> <span class='hs-varid'>a</span>
-<a name="line-851"></a><span class='hs-definition'>bin_</span> <span class='hs-varid'>x</span> <span class='hs-varid'>l</span> <span class='hs-varid'>r</span>
-<a name="line-852"></a>  <span class='hs-keyglyph'>=</span> <span class='hs-varid'>bin</span> <span class='hs-layout'>(</span><span class='hs-varid'>size</span> <span class='hs-varid'>l</span> <span class='hs-varop'>+</span> <span class='hs-varid'>size</span> <span class='hs-varid'>r</span> <span class='hs-varop'>+</span> <span class='hs-num'>1</span><span class='hs-layout'>)</span> <span class='hs-varid'>x</span> <span class='hs-varid'>l</span> <span class='hs-varid'>r</span>
-<a name="line-853"></a>
-<a name="line-854"></a>
-<a name="line-855"></a><a name="foldlStrict"></a><span class='hs-comment'>{--------------------------------------------------------------------
-<a name="line-856"></a>  Utilities
-<a name="line-857"></a>--------------------------------------------------------------------}</span>
-<a name="line-858"></a><span class='hs-definition'>foldlStrict</span> <span class='hs-keyglyph'>::</span> <span class='hs-layout'>(</span><span class='hs-varid'>a</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-varid'>b</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-varid'>a</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-varid'>a</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-keyglyph'>[</span><span class='hs-varid'>b</span><span class='hs-keyglyph'>]</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-varid'>a</span>
-<a name="line-859"></a><span class='hs-definition'>foldlStrict</span> <span class='hs-varid'>f</span> <span class='hs-varid'>z</span> <span class='hs-varid'>xs</span>
-<a name="line-860"></a>  <span class='hs-keyglyph'>=</span> <span class='hs-keyword'>case</span> <span class='hs-varid'>xs</span> <span class='hs-keyword'>of</span>
-<a name="line-861"></a>      <span class='hs-conid'>[]</span>     <span class='hs-keyglyph'>-&gt;</span> <span class='hs-varid'>z</span>
-<a name="line-862"></a>      <span class='hs-layout'>(</span><span class='hs-varid'>x</span><span class='hs-conop'>:</span><span class='hs-varid'>xx</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-keyword'>let</span> <span class='hs-varid'>z'</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>f</span> <span class='hs-varid'>z</span> <span class='hs-varid'>x</span> <span class='hs-keyword'>in</span> <span class='hs-varid'>seq</span> <span class='hs-varid'>z'</span> <span class='hs-layout'>(</span><span class='hs-varid'>foldlStrict</span> <span class='hs-varid'>f</span> <span class='hs-varid'>z'</span> <span class='hs-varid'>xx</span><span class='hs-layout'>)</span>
-<a name="line-863"></a>
+<a name="line-840"></a><a name="foldlStrict"></a><span class='hs-comment'>{--------------------------------------------------------------------
+<a name="line-841"></a>  Utilities
+<a name="line-842"></a>--------------------------------------------------------------------}</span>
+<a name="line-843"></a><span class='hs-definition'>foldlStrict</span> <span class='hs-keyglyph'>::</span> <span class='hs-layout'>(</span><span class='hs-varid'>a</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-varid'>b</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-varid'>a</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-varid'>a</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-keyglyph'>[</span><span class='hs-varid'>b</span><span class='hs-keyglyph'>]</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-varid'>a</span>
+<a name="line-844"></a><span class='hs-definition'>foldlStrict</span> <span class='hs-varid'>f</span> <span class='hs-varid'>z</span> <span class='hs-varid'>xs</span>
+<a name="line-845"></a>  <span class='hs-keyglyph'>=</span> <span class='hs-keyword'>case</span> <span class='hs-varid'>xs</span> <span class='hs-keyword'>of</span>
+<a name="line-846"></a>      <span class='hs-conid'>[]</span>     <span class='hs-keyglyph'>-&gt;</span> <span class='hs-varid'>z</span>
+<a name="line-847"></a>      <span class='hs-layout'>(</span><span class='hs-varid'>x</span><span class='hs-conop'>:</span><span class='hs-varid'>xx</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-keyword'>let</span> <span class='hs-varid'>z'</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>f</span> <span class='hs-varid'>z</span> <span class='hs-varid'>x</span> <span class='hs-keyword'>in</span> <span class='hs-varid'>seq</span> <span class='hs-varid'>z'</span> <span class='hs-layout'>(</span><span class='hs-varid'>foldlStrict</span> <span class='hs-varid'>f</span> <span class='hs-varid'>z'</span> <span class='hs-varid'>xx</span><span class='hs-layout'>)</span>
+<a name="line-848"></a>
+<a name="line-849"></a>
+<a name="line-850"></a><a name="showTree"></a><span class='hs-comment'>{--------------------------------------------------------------------
+<a name="line-851"></a>  Debugging
+<a name="line-852"></a>--------------------------------------------------------------------}</span>
+<a name="line-853"></a><span class='hs-comment'>-- | /O(n)/. Show the tree that implements the set. The tree is shown</span>
+<a name="line-854"></a><span class='hs-comment'>-- in a compressed, hanging format.</span>
+<a name="line-855"></a><span class='hs-definition'>showTree</span> <span class='hs-keyglyph'>::</span> <span class='hs-layout'>(</span><span class='hs-conid'>US</span> <span class='hs-varid'>a</span><span class='hs-layout'>,</span> <span class='hs-conid'>Show</span> <span class='hs-varid'>a</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>USet</span> <span class='hs-varid'>a</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-conid'>String</span>
+<a name="line-856"></a><span class='hs-definition'>showTree</span> <span class='hs-varid'>s</span>
+<a name="line-857"></a>  <span class='hs-keyglyph'>=</span> <span class='hs-varid'>showTreeWith</span> <span class='hs-conid'>True</span> <span class='hs-conid'>False</span> <span class='hs-varid'>s</span>
+<a name="line-858"></a>
+<a name="line-859"></a>
+<a name="line-860"></a><a name="showTreeWith"></a><span class='hs-comment'>{- | /O(n)/. The expression (@showTreeWith hang wide map@) shows
+<a name="line-861"></a> the tree that implements the set. If @hang@ is
+<a name="line-862"></a> @True@, a /hanging/ tree is shown otherwise a rotated tree is shown. If
+<a name="line-863"></a> @wide@ is 'True', an extra wide version is shown.
hunk ./doc/html/monoids/src/Data-Set-Unboxed.html 873
-<a name="line-865"></a><a name="showTree"></a><span class='hs-comment'>{--------------------------------------------------------------------
-<a name="line-866"></a>  Debugging
-<a name="line-867"></a>--------------------------------------------------------------------}</span>
-<a name="line-868"></a><span class='hs-comment'>-- | /O(n)/. Show the tree that implements the set. The tree is shown</span>
-<a name="line-869"></a><span class='hs-comment'>-- in a compressed, hanging format.</span>
-<a name="line-870"></a><span class='hs-definition'>showTree</span> <span class='hs-keyglyph'>::</span> <span class='hs-layout'>(</span><span class='hs-conid'>US</span> <span class='hs-varid'>a</span><span class='hs-layout'>,</span> <span class='hs-conid'>Show</span> <span class='hs-varid'>a</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>USet</span> <span class='hs-varid'>a</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-conid'>String</span>
-<a name="line-871"></a><span class='hs-definition'>showTree</span> <span class='hs-varid'>s</span>
-<a name="line-872"></a>  <span class='hs-keyglyph'>=</span> <span class='hs-varid'>showTreeWith</span> <span class='hs-conid'>True</span> <span class='hs-conid'>False</span> <span class='hs-varid'>s</span>
-<a name="line-873"></a>
-<a name="line-874"></a>
-<a name="line-875"></a><a name="showTreeWith"></a><span class='hs-comment'>{- | /O(n)/. The expression (@showTreeWith hang wide map@) shows
-<a name="line-876"></a> the tree that implements the set. If @hang@ is
-<a name="line-877"></a> @True@, a /hanging/ tree is shown otherwise a rotated tree is shown. If
-<a name="line-878"></a> @wide@ is 'True', an extra wide version is shown.
-<a name="line-879"></a>
-<a name="line-880"></a>&gt; Set&gt; putStrLn $ showTreeWith True False $ fromDistinctAscList [1..5]
-<a name="line-881"></a>&gt; 4
-<a name="line-882"></a>&gt; +--2
-<a name="line-883"></a>&gt; |  +--1
-<a name="line-884"></a>&gt; |  +--3
-<a name="line-885"></a>&gt; +--5
-<a name="line-886"></a>&gt; 
-<a name="line-887"></a>&gt; Set&gt; putStrLn $ showTreeWith True True $ fromDistinctAscList [1..5]
-<a name="line-888"></a>&gt; 4
-<a name="line-889"></a>&gt; |
+<a name="line-865"></a>&gt; Set&gt; putStrLn $ showTreeWith True False $ fromDistinctAscList [1..5]
+<a name="line-866"></a>&gt; 4
+<a name="line-867"></a>&gt; +--2
+<a name="line-868"></a>&gt; |  +--1
+<a name="line-869"></a>&gt; |  +--3
+<a name="line-870"></a>&gt; +--5
+<a name="line-871"></a>&gt; 
+<a name="line-872"></a>&gt; Set&gt; putStrLn $ showTreeWith True True $ fromDistinctAscList [1..5]
+<a name="line-873"></a>&gt; 4
+<a name="line-874"></a>&gt; |
+<a name="line-875"></a>&gt; +--2
+<a name="line-876"></a>&gt; |  |
+<a name="line-877"></a>&gt; |  +--1
+<a name="line-878"></a>&gt; |  |
+<a name="line-879"></a>&gt; |  +--3
+<a name="line-880"></a>&gt; |
+<a name="line-881"></a>&gt; +--5
+<a name="line-882"></a>&gt; 
+<a name="line-883"></a>&gt; Set&gt; putStrLn $ showTreeWith False True $ fromDistinctAscList [1..5]
+<a name="line-884"></a>&gt; +--5
+<a name="line-885"></a>&gt; |
+<a name="line-886"></a>&gt; 4
+<a name="line-887"></a>&gt; |
+<a name="line-888"></a>&gt; |  +--3
+<a name="line-889"></a>&gt; |  |
hunk ./doc/html/monoids/src/Data-Set-Unboxed.html 899
-<a name="line-891"></a>&gt; |  |
-<a name="line-892"></a>&gt; |  +--1
-<a name="line-893"></a>&gt; |  |
-<a name="line-894"></a>&gt; |  +--3
-<a name="line-895"></a>&gt; |
-<a name="line-896"></a>&gt; +--5
-<a name="line-897"></a>&gt; 
-<a name="line-898"></a>&gt; Set&gt; putStrLn $ showTreeWith False True $ fromDistinctAscList [1..5]
-<a name="line-899"></a>&gt; +--5
-<a name="line-900"></a>&gt; |
-<a name="line-901"></a>&gt; 4
-<a name="line-902"></a>&gt; |
-<a name="line-903"></a>&gt; |  +--3
-<a name="line-904"></a>&gt; |  |
-<a name="line-905"></a>&gt; +--2
-<a name="line-906"></a>&gt;    |
-<a name="line-907"></a>&gt;    +--1
-<a name="line-908"></a>
-<a name="line-909"></a>-}</span>
-<a name="line-910"></a><span class='hs-definition'>showTreeWith</span> <span class='hs-keyglyph'>::</span> <span class='hs-layout'>(</span><span class='hs-conid'>US</span> <span class='hs-varid'>a</span><span class='hs-layout'>,</span> <span class='hs-conid'>Show</span> <span class='hs-varid'>a</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>Bool</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-conid'>Bool</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-conid'>USet</span> <span class='hs-varid'>a</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-conid'>String</span>
-<a name="line-911"></a><span class='hs-definition'>showTreeWith</span> <span class='hs-varid'>hang</span> <span class='hs-varid'>wide</span> <span class='hs-varid'>t</span>
-<a name="line-912"></a>  <span class='hs-keyglyph'>|</span> <span class='hs-varid'>hang</span>      <span class='hs-keyglyph'>=</span> <span class='hs-layout'>(</span><span class='hs-varid'>showsTreeHang</span> <span class='hs-varid'>wide</span> <span class='hs-conid'>[]</span> <span class='hs-varid'>t</span><span class='hs-layout'>)</span> <span class='hs-str'>""</span>
-<a name="line-913"></a>  <span class='hs-keyglyph'>|</span> <span class='hs-varid'>otherwise</span> <span class='hs-keyglyph'>=</span> <span class='hs-layout'>(</span><span class='hs-varid'>showsTree</span> <span class='hs-varid'>wide</span> <span class='hs-conid'>[]</span> <span class='hs-conid'>[]</span> <span class='hs-varid'>t</span><span class='hs-layout'>)</span> <span class='hs-str'>""</span>
-<a name="line-914"></a>
-<a name="line-915"></a><a name="showsTree"></a><span class='hs-definition'>showsTree</span> <span class='hs-keyglyph'>::</span> <span class='hs-layout'>(</span><span class='hs-conid'>US</span> <span class='hs-varid'>a</span><span class='hs-layout'>,</span> <span class='hs-conid'>Show</span> <span class='hs-varid'>a</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>Bool</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-keyglyph'>[</span><span class='hs-conid'>String</span><span class='hs-keyglyph'>]</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-keyglyph'>[</span><span class='hs-conid'>String</span><span class='hs-keyglyph'>]</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-conid'>USet</span> <span class='hs-varid'>a</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-conid'>ShowS</span>
-<a name="line-916"></a><span class='hs-definition'>showsTree</span> <span class='hs-varid'>wide</span> <span class='hs-varid'>lbars</span> <span class='hs-varid'>rbars</span> <span class='hs-varid'>t</span>
-<a name="line-917"></a>  <span class='hs-keyglyph'>=</span> <span class='hs-keyword'>case</span> <span class='hs-varid'>view</span> <span class='hs-varid'>t</span> <span class='hs-keyword'>of</span>
-<a name="line-918"></a>      <span class='hs-conid'>Tip</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-varid'>showsBars</span> <span class='hs-varid'>lbars</span> <span class='hs-varop'>.</span> <span class='hs-varid'>showString</span> <span class='hs-str'>"|\n"</span>
-<a name="line-919"></a>      <span class='hs-conid'>Bin</span> <span class='hs-keyword'>_</span> <span class='hs-varid'>x</span> <span class='hs-layout'>(</span><span class='hs-varid'>view</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-conid'>Tip</span><span class='hs-layout'>)</span> <span class='hs-layout'>(</span><span class='hs-varid'>view</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-conid'>Tip</span><span class='hs-layout'>)</span>
-<a name="line-920"></a>          <span class='hs-keyglyph'>-&gt;</span> <span class='hs-varid'>showsBars</span> <span class='hs-varid'>lbars</span> <span class='hs-varop'>.</span> <span class='hs-varid'>shows</span> <span class='hs-varid'>x</span> <span class='hs-varop'>.</span> <span class='hs-varid'>showString</span> <span class='hs-str'>"\n"</span> 
-<a name="line-921"></a>      <span class='hs-conid'>Bin</span> <span class='hs-keyword'>_</span> <span class='hs-varid'>x</span> <span class='hs-varid'>l</span> <span class='hs-varid'>r</span>
-<a name="line-922"></a>          <span class='hs-keyglyph'>-&gt;</span> <span class='hs-varid'>showsTree</span> <span class='hs-varid'>wide</span> <span class='hs-layout'>(</span><span class='hs-varid'>withBar</span> <span class='hs-varid'>rbars</span><span class='hs-layout'>)</span> <span class='hs-layout'>(</span><span class='hs-varid'>withEmpty</span> <span class='hs-varid'>rbars</span><span class='hs-layout'>)</span> <span class='hs-varid'>r</span> <span class='hs-varop'>.</span>
-<a name="line-923"></a>             <span class='hs-varid'>showWide</span> <span class='hs-varid'>wide</span> <span class='hs-varid'>rbars</span> <span class='hs-varop'>.</span>
-<a name="line-924"></a>             <span class='hs-varid'>showsBars</span> <span class='hs-varid'>lbars</span> <span class='hs-varop'>.</span> <span class='hs-varid'>shows</span> <span class='hs-varid'>x</span> <span class='hs-varop'>.</span> <span class='hs-varid'>showString</span> <span class='hs-str'>"\n"</span> <span class='hs-varop'>.</span>
-<a name="line-925"></a>             <span class='hs-varid'>showWide</span> <span class='hs-varid'>wide</span> <span class='hs-varid'>lbars</span> <span class='hs-varop'>.</span>
-<a name="line-926"></a>             <span class='hs-varid'>showsTree</span> <span class='hs-varid'>wide</span> <span class='hs-layout'>(</span><span class='hs-varid'>withEmpty</span> <span class='hs-varid'>lbars</span><span class='hs-layout'>)</span> <span class='hs-layout'>(</span><span class='hs-varid'>withBar</span> <span class='hs-varid'>lbars</span><span class='hs-layout'>)</span> <span class='hs-varid'>l</span>
-<a name="line-927"></a>
-<a name="line-928"></a><a name="showsTreeHang"></a><span class='hs-definition'>showsTreeHang</span> <span class='hs-keyglyph'>::</span> <span class='hs-layout'>(</span><span class='hs-conid'>US</span> <span class='hs-varid'>a</span><span class='hs-layout'>,</span> <span class='hs-conid'>Show</span> <span class='hs-varid'>a</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>Bool</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-keyglyph'>[</span><span class='hs-conid'>String</span><span class='hs-keyglyph'>]</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-conid'>USet</span> <span class='hs-varid'>a</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-conid'>ShowS</span>
-<a name="line-929"></a><span class='hs-definition'>showsTreeHang</span> <span class='hs-varid'>wide</span> <span class='hs-varid'>bars</span> <span class='hs-varid'>t</span>
-<a name="line-930"></a>  <span class='hs-keyglyph'>=</span> <span class='hs-keyword'>case</span> <span class='hs-varid'>view</span> <span class='hs-varid'>t</span> <span class='hs-keyword'>of</span>
-<a name="line-931"></a>      <span class='hs-conid'>Tip</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-varid'>showsBars</span> <span class='hs-varid'>bars</span> <span class='hs-varop'>.</span> <span class='hs-varid'>showString</span> <span class='hs-str'>"|\n"</span> 
-<a name="line-932"></a>      <span class='hs-conid'>Bin</span> <span class='hs-keyword'>_</span> <span class='hs-varid'>x</span> <span class='hs-layout'>(</span><span class='hs-varid'>view</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-conid'>Tip</span><span class='hs-layout'>)</span> <span class='hs-layout'>(</span><span class='hs-varid'>view</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-conid'>Tip</span><span class='hs-layout'>)</span> 
-<a name="line-933"></a>          <span class='hs-keyglyph'>-&gt;</span> <span class='hs-varid'>showsBars</span> <span class='hs-varid'>bars</span> <span class='hs-varop'>.</span> <span class='hs-varid'>shows</span> <span class='hs-varid'>x</span> <span class='hs-varop'>.</span> <span class='hs-varid'>showString</span> <span class='hs-str'>"\n"</span> 
-<a name="line-934"></a>      <span class='hs-conid'>Bin</span> <span class='hs-keyword'>_</span> <span class='hs-varid'>x</span> <span class='hs-varid'>l</span> <span class='hs-varid'>r</span>
-<a name="line-935"></a>          <span class='hs-keyglyph'>-&gt;</span> <span class='hs-varid'>showsBars</span> <span class='hs-varid'>bars</span> <span class='hs-varop'>.</span> <span class='hs-varid'>shows</span> <span class='hs-varid'>x</span> <span class='hs-varop'>.</span> <span class='hs-varid'>showString</span> <span class='hs-str'>"\n"</span> <span class='hs-varop'>.</span> 
-<a name="line-936"></a>             <span class='hs-varid'>showWide</span> <span class='hs-varid'>wide</span> <span class='hs-varid'>bars</span> <span class='hs-varop'>.</span>
-<a name="line-937"></a>             <span class='hs-varid'>showsTreeHang</span> <span class='hs-varid'>wide</span> <span class='hs-layout'>(</span><span class='hs-varid'>withBar</span> <span class='hs-varid'>bars</span><span class='hs-layout'>)</span> <span class='hs-varid'>l</span> <span class='hs-varop'>.</span>
-<a name="line-938"></a>             <span class='hs-varid'>showWide</span> <span class='hs-varid'>wide</span> <span class='hs-varid'>bars</span> <span class='hs-varop'>.</span>
-<a name="line-939"></a>             <span class='hs-varid'>showsTreeHang</span> <span class='hs-varid'>wide</span> <span class='hs-layout'>(</span><span class='hs-varid'>withEmpty</span> <span class='hs-varid'>bars</span><span class='hs-layout'>)</span> <span class='hs-varid'>r</span>
-<a name="line-940"></a>
-<a name="line-941"></a><a name="showWide"></a><span class='hs-definition'>showWide</span> <span class='hs-keyglyph'>::</span> <span class='hs-conid'>Bool</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-keyglyph'>[</span><span class='hs-conid'>String</span><span class='hs-keyglyph'>]</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-conid'>String</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-conid'>String</span>
-<a name="line-942"></a><span class='hs-definition'>showWide</span> <span class='hs-varid'>wide</span> <span class='hs-varid'>bars</span> 
-<a name="line-943"></a>  <span class='hs-keyglyph'>|</span> <span class='hs-varid'>wide</span>      <span class='hs-keyglyph'>=</span> <span class='hs-varid'>showString</span> <span class='hs-layout'>(</span><span class='hs-varid'>concat</span> <span class='hs-layout'>(</span><span class='hs-varid'>reverse</span> <span class='hs-varid'>bars</span><span class='hs-layout'>)</span><span class='hs-layout'>)</span> <span class='hs-varop'>.</span> <span class='hs-varid'>showString</span> <span class='hs-str'>"|\n"</span> 
-<a name="line-944"></a>  <span class='hs-keyglyph'>|</span> <span class='hs-varid'>otherwise</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>id</span>
-<a name="line-945"></a>
-<a name="line-946"></a><a name="showsBars"></a><span class='hs-definition'>showsBars</span> <span class='hs-keyglyph'>::</span> <span class='hs-keyglyph'>[</span><span class='hs-conid'>String</span><span class='hs-keyglyph'>]</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-conid'>ShowS</span>
-<a name="line-947"></a><span class='hs-definition'>showsBars</span> <span class='hs-varid'>bars</span>
-<a name="line-948"></a>  <span class='hs-keyglyph'>=</span> <span class='hs-keyword'>case</span> <span class='hs-varid'>bars</span> <span class='hs-keyword'>of</span>
-<a name="line-949"></a>      <span class='hs-conid'>[]</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-varid'>id</span>
-<a name="line-950"></a>      <span class='hs-keyword'>_</span>  <span class='hs-keyglyph'>-&gt;</span> <span class='hs-varid'>showString</span> <span class='hs-layout'>(</span><span class='hs-varid'>concat</span> <span class='hs-layout'>(</span><span class='hs-varid'>reverse</span> <span class='hs-layout'>(</span><span class='hs-varid'>tail</span> <span class='hs-varid'>bars</span><span class='hs-layout'>)</span><span class='hs-layout'>)</span><span class='hs-layout'>)</span> <span class='hs-varop'>.</span> <span class='hs-varid'>showString</span> <span class='hs-varid'>node</span>
+<a name="line-891"></a>&gt;    |
+<a name="line-892"></a>&gt;    +--1
+<a name="line-893"></a>
+<a name="line-894"></a>-}</span>
+<a name="line-895"></a><span class='hs-definition'>showTreeWith</span> <span class='hs-keyglyph'>::</span> <span class='hs-layout'>(</span><span class='hs-conid'>US</span> <span class='hs-varid'>a</span><span class='hs-layout'>,</span> <span class='hs-conid'>Show</span> <span class='hs-varid'>a</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>Bool</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-conid'>Bool</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-conid'>USet</span> <span class='hs-varid'>a</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-conid'>String</span>
+<a name="line-896"></a><span class='hs-definition'>showTreeWith</span> <span class='hs-varid'>hang</span> <span class='hs-varid'>wide</span> <span class='hs-varid'>t</span>
+<a name="line-897"></a>  <span class='hs-keyglyph'>|</span> <span class='hs-varid'>hang</span>      <span class='hs-keyglyph'>=</span> <span class='hs-layout'>(</span><span class='hs-varid'>showsTreeHang</span> <span class='hs-varid'>wide</span> <span class='hs-conid'>[]</span> <span class='hs-varid'>t</span><span class='hs-layout'>)</span> <span class='hs-str'>""</span>
+<a name="line-898"></a>  <span class='hs-keyglyph'>|</span> <span class='hs-varid'>otherwise</span> <span class='hs-keyglyph'>=</span> <span class='hs-layout'>(</span><span class='hs-varid'>showsTree</span> <span class='hs-varid'>wide</span> <span class='hs-conid'>[]</span> <span class='hs-conid'>[]</span> <span class='hs-varid'>t</span><span class='hs-layout'>)</span> <span class='hs-str'>""</span>
+<a name="line-899"></a>
+<a name="line-900"></a><a name="showsTree"></a><span class='hs-definition'>showsTree</span> <span class='hs-keyglyph'>::</span> <span class='hs-layout'>(</span><span class='hs-conid'>US</span> <span class='hs-varid'>a</span><span class='hs-layout'>,</span> <span class='hs-conid'>Show</span> <span class='hs-varid'>a</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>Bool</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-keyglyph'>[</span><span class='hs-conid'>String</span><span class='hs-keyglyph'>]</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-keyglyph'>[</span><span class='hs-conid'>String</span><span class='hs-keyglyph'>]</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-conid'>USet</span> <span class='hs-varid'>a</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-conid'>ShowS</span>
+<a name="line-901"></a><span class='hs-definition'>showsTree</span> <span class='hs-varid'>wide</span> <span class='hs-varid'>lbars</span> <span class='hs-varid'>rbars</span> <span class='hs-varid'>t</span>
+<a name="line-902"></a>  <span class='hs-keyglyph'>=</span> <span class='hs-keyword'>case</span> <span class='hs-varid'>view</span> <span class='hs-varid'>t</span> <span class='hs-keyword'>of</span>
+<a name="line-903"></a>      <span class='hs-conid'>Tip</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-varid'>showsBars</span> <span class='hs-varid'>lbars</span> <span class='hs-varop'>.</span> <span class='hs-varid'>showString</span> <span class='hs-str'>"|\n"</span>
+<a name="line-904"></a>      <span class='hs-conid'>Bin</span> <span class='hs-keyword'>_</span> <span class='hs-varid'>x</span> <span class='hs-layout'>(</span><span class='hs-varid'>isTip</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-conid'>True</span><span class='hs-layout'>)</span> <span class='hs-layout'>(</span><span class='hs-varid'>isTip</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-conid'>True</span><span class='hs-layout'>)</span>
+<a name="line-905"></a>          <span class='hs-keyglyph'>-&gt;</span> <span class='hs-varid'>showsBars</span> <span class='hs-varid'>lbars</span> <span class='hs-varop'>.</span> <span class='hs-varid'>shows</span> <span class='hs-varid'>x</span> <span class='hs-varop'>.</span> <span class='hs-varid'>showString</span> <span class='hs-str'>"\n"</span> 
+<a name="line-906"></a>      <span class='hs-conid'>Bin</span> <span class='hs-keyword'>_</span> <span class='hs-varid'>x</span> <span class='hs-varid'>l</span> <span class='hs-varid'>r</span>
+<a name="line-907"></a>          <span class='hs-keyglyph'>-&gt;</span> <span class='hs-varid'>showsTree</span> <span class='hs-varid'>wide</span> <span class='hs-layout'>(</span><span class='hs-varid'>withBar</span> <span class='hs-varid'>rbars</span><span class='hs-layout'>)</span> <span class='hs-layout'>(</span><span class='hs-varid'>withEmpty</span> <span class='hs-varid'>rbars</span><span class='hs-layout'>)</span> <span class='hs-varid'>r</span> <span class='hs-varop'>.</span>
+<a name="line-908"></a>             <span class='hs-varid'>showWide</span> <span class='hs-varid'>wide</span> <span class='hs-varid'>rbars</span> <span class='hs-varop'>.</span>
+<a name="line-909"></a>             <span class='hs-varid'>showsBars</span> <span class='hs-varid'>lbars</span> <span class='hs-varop'>.</span> <span class='hs-varid'>shows</span> <span class='hs-varid'>x</span> <span class='hs-varop'>.</span> <span class='hs-varid'>showString</span> <span class='hs-str'>"\n"</span> <span class='hs-varop'>.</span>
+<a name="line-910"></a>             <span class='hs-varid'>showWide</span> <span class='hs-varid'>wide</span> <span class='hs-varid'>lbars</span> <span class='hs-varop'>.</span>
+<a name="line-911"></a>             <span class='hs-varid'>showsTree</span> <span class='hs-varid'>wide</span> <span class='hs-layout'>(</span><span class='hs-varid'>withEmpty</span> <span class='hs-varid'>lbars</span><span class='hs-layout'>)</span> <span class='hs-layout'>(</span><span class='hs-varid'>withBar</span> <span class='hs-varid'>lbars</span><span class='hs-layout'>)</span> <span class='hs-varid'>l</span>
+<a name="line-912"></a>
+<a name="line-913"></a><a name="showsTreeHang"></a><span class='hs-definition'>showsTreeHang</span> <span class='hs-keyglyph'>::</span> <span class='hs-layout'>(</span><span class='hs-conid'>US</span> <span class='hs-varid'>a</span><span class='hs-layout'>,</span> <span class='hs-conid'>Show</span> <span class='hs-varid'>a</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>Bool</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-keyglyph'>[</span><span class='hs-conid'>String</span><span class='hs-keyglyph'>]</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-conid'>USet</span> <span class='hs-varid'>a</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-conid'>ShowS</span>
+<a name="line-914"></a><span class='hs-definition'>showsTreeHang</span> <span class='hs-varid'>wide</span> <span class='hs-varid'>bars</span> <span class='hs-varid'>t</span>
+<a name="line-915"></a>  <span class='hs-keyglyph'>=</span> <span class='hs-keyword'>case</span> <span class='hs-varid'>view</span> <span class='hs-varid'>t</span> <span class='hs-keyword'>of</span>
+<a name="line-916"></a>      <span class='hs-conid'>Tip</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-varid'>showsBars</span> <span class='hs-varid'>bars</span> <span class='hs-varop'>.</span> <span class='hs-varid'>showString</span> <span class='hs-str'>"|\n"</span> 
+<a name="line-917"></a>      <span class='hs-conid'>Bin</span> <span class='hs-keyword'>_</span> <span class='hs-varid'>x</span> <span class='hs-layout'>(</span><span class='hs-varid'>isTip</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-conid'>True</span><span class='hs-layout'>)</span> <span class='hs-layout'>(</span><span class='hs-varid'>isTip</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-conid'>True</span><span class='hs-layout'>)</span> 
+<a name="line-918"></a>          <span class='hs-keyglyph'>-&gt;</span> <span class='hs-varid'>showsBars</span> <span class='hs-varid'>bars</span> <span class='hs-varop'>.</span> <span class='hs-varid'>shows</span> <span class='hs-varid'>x</span> <span class='hs-varop'>.</span> <span class='hs-varid'>showString</span> <span class='hs-str'>"\n"</span> 
+<a name="line-919"></a>      <span class='hs-conid'>Bin</span> <span class='hs-keyword'>_</span> <span class='hs-varid'>x</span> <span class='hs-varid'>l</span> <span class='hs-varid'>r</span>
+<a name="line-920"></a>          <span class='hs-keyglyph'>-&gt;</span> <span class='hs-varid'>showsBars</span> <span class='hs-varid'>bars</span> <span class='hs-varop'>.</span> <span class='hs-varid'>shows</span> <span class='hs-varid'>x</span> <span class='hs-varop'>.</span> <span class='hs-varid'>showString</span> <span class='hs-str'>"\n"</span> <span class='hs-varop'>.</span> 
+<a name="line-921"></a>             <span class='hs-varid'>showWide</span> <span class='hs-varid'>wide</span> <span class='hs-varid'>bars</span> <span class='hs-varop'>.</span>
+<a name="line-922"></a>             <span class='hs-varid'>showsTreeHang</span> <span class='hs-varid'>wide</span> <span class='hs-layout'>(</span><span class='hs-varid'>withBar</span> <span class='hs-varid'>bars</span><span class='hs-layout'>)</span> <span class='hs-varid'>l</span> <span class='hs-varop'>.</span>
+<a name="line-923"></a>             <span class='hs-varid'>showWide</span> <span class='hs-varid'>wide</span> <span class='hs-varid'>bars</span> <span class='hs-varop'>.</span>
+<a name="line-924"></a>             <span class='hs-varid'>showsTreeHang</span> <span class='hs-varid'>wide</span> <span class='hs-layout'>(</span><span class='hs-varid'>withEmpty</span> <span class='hs-varid'>bars</span><span class='hs-layout'>)</span> <span class='hs-varid'>r</span>
+<a name="line-925"></a>
+<a name="line-926"></a><a name="showWide"></a><span class='hs-definition'>showWide</span> <span class='hs-keyglyph'>::</span> <span class='hs-conid'>Bool</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-keyglyph'>[</span><span class='hs-conid'>String</span><span class='hs-keyglyph'>]</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-conid'>String</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-conid'>String</span>
+<a name="line-927"></a><span class='hs-definition'>showWide</span> <span class='hs-varid'>wide</span> <span class='hs-varid'>bars</span> 
+<a name="line-928"></a>  <span class='hs-keyglyph'>|</span> <span class='hs-varid'>wide</span>      <span class='hs-keyglyph'>=</span> <span class='hs-varid'>showString</span> <span class='hs-layout'>(</span><span class='hs-varid'>concat</span> <span class='hs-layout'>(</span><span class='hs-varid'>reverse</span> <span class='hs-varid'>bars</span><span class='hs-layout'>)</span><span class='hs-layout'>)</span> <span class='hs-varop'>.</span> <span class='hs-varid'>showString</span> <span class='hs-str'>"|\n"</span> 
+<a name="line-929"></a>  <span class='hs-keyglyph'>|</span> <span class='hs-varid'>otherwise</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>id</span>
+<a name="line-930"></a>
+<a name="line-931"></a><a name="showsBars"></a><span class='hs-definition'>showsBars</span> <span class='hs-keyglyph'>::</span> <span class='hs-keyglyph'>[</span><span class='hs-conid'>String</span><span class='hs-keyglyph'>]</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-conid'>ShowS</span>
+<a name="line-932"></a><span class='hs-definition'>showsBars</span> <span class='hs-varid'>bars</span>
+<a name="line-933"></a>  <span class='hs-keyglyph'>=</span> <span class='hs-keyword'>case</span> <span class='hs-varid'>bars</span> <span class='hs-keyword'>of</span>
+<a name="line-934"></a>      <span class='hs-conid'>[]</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-varid'>id</span>
+<a name="line-935"></a>      <span class='hs-keyword'>_</span>  <span class='hs-keyglyph'>-&gt;</span> <span class='hs-varid'>showString</span> <span class='hs-layout'>(</span><span class='hs-varid'>concat</span> <span class='hs-layout'>(</span><span class='hs-varid'>reverse</span> <span class='hs-layout'>(</span><span class='hs-varid'>tail</span> <span class='hs-varid'>bars</span><span class='hs-layout'>)</span><span class='hs-layout'>)</span><span class='hs-layout'>)</span> <span class='hs-varop'>.</span> <span class='hs-varid'>showString</span> <span class='hs-varid'>node</span>
+<a name="line-936"></a>
+<a name="line-937"></a><a name="node"></a><span class='hs-definition'>node</span> <span class='hs-keyglyph'>::</span> <span class='hs-conid'>String</span>
+<a name="line-938"></a><span class='hs-definition'>node</span>           <span class='hs-keyglyph'>=</span> <span class='hs-str'>"+--"</span>
+<a name="line-939"></a>
+<a name="line-940"></a><a name="withBar"></a><span class='hs-definition'>withBar</span><span class='hs-layout'>,</span> <span class='hs-varid'>withEmpty</span> <span class='hs-keyglyph'>::</span> <span class='hs-keyglyph'>[</span><span class='hs-conid'>String</span><span class='hs-keyglyph'>]</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-keyglyph'>[</span><span class='hs-conid'>String</span><span class='hs-keyglyph'>]</span>
+<a name="line-941"></a><span class='hs-definition'>withBar</span> <span class='hs-varid'>bars</span>   <span class='hs-keyglyph'>=</span> <span class='hs-str'>"|  "</span><span class='hs-conop'>:</span><span class='hs-varid'>bars</span>
+<a name="line-942"></a><a name="withEmpty"></a><span class='hs-definition'>withEmpty</span> <span class='hs-varid'>bars</span> <span class='hs-keyglyph'>=</span> <span class='hs-str'>"   "</span><span class='hs-conop'>:</span><span class='hs-varid'>bars</span>
+<a name="line-943"></a>
+<a name="line-944"></a><a name="valid"></a><span class='hs-comment'>{--------------------------------------------------------------------
+<a name="line-945"></a>  Assertions
+<a name="line-946"></a>--------------------------------------------------------------------}</span>
+<a name="line-947"></a><span class='hs-comment'>-- | /O(n)/. Test if the internal set structure is valid.</span>
+<a name="line-948"></a><span class='hs-definition'>valid</span> <span class='hs-keyglyph'>::</span> <span class='hs-layout'>(</span><span class='hs-conid'>US</span> <span class='hs-varid'>a</span><span class='hs-layout'>,</span> <span class='hs-conid'>Ord</span> <span class='hs-varid'>a</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>USet</span> <span class='hs-varid'>a</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-conid'>Bool</span>
+<a name="line-949"></a><span class='hs-definition'>valid</span> <span class='hs-varid'>t</span>
+<a name="line-950"></a>  <span class='hs-keyglyph'>=</span> <span class='hs-varid'>balanced</span> <span class='hs-varid'>t</span> <span class='hs-varop'>&amp;&amp;</span> <span class='hs-varid'>ordered</span> <span class='hs-varid'>t</span> <span class='hs-varop'>&amp;&amp;</span> <span class='hs-varid'>validsize</span> <span class='hs-varid'>t</span>
hunk ./doc/html/monoids/src/Data-Set-Unboxed.html 960
-<a name="line-952"></a><a name="node"></a><span class='hs-definition'>node</span> <span class='hs-keyglyph'>::</span> <span class='hs-conid'>String</span>
-<a name="line-953"></a><span class='hs-definition'>node</span>           <span class='hs-keyglyph'>=</span> <span class='hs-str'>"+--"</span>
-<a name="line-954"></a>
-<a name="line-955"></a><a name="withBar"></a><span class='hs-definition'>withBar</span><span class='hs-layout'>,</span> <span class='hs-varid'>withEmpty</span> <span class='hs-keyglyph'>::</span> <span class='hs-keyglyph'>[</span><span class='hs-conid'>String</span><span class='hs-keyglyph'>]</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-keyglyph'>[</span><span class='hs-conid'>String</span><span class='hs-keyglyph'>]</span>
-<a name="line-956"></a><span class='hs-definition'>withBar</span> <span class='hs-varid'>bars</span>   <span class='hs-keyglyph'>=</span> <span class='hs-str'>"|  "</span><span class='hs-conop'>:</span><span class='hs-varid'>bars</span>
-<a name="line-957"></a><a name="withEmpty"></a><span class='hs-definition'>withEmpty</span> <span class='hs-varid'>bars</span> <span class='hs-keyglyph'>=</span> <span class='hs-str'>"   "</span><span class='hs-conop'>:</span><span class='hs-varid'>bars</span>
-<a name="line-958"></a>
-<a name="line-959"></a><a name="valid"></a><span class='hs-comment'>{--------------------------------------------------------------------
-<a name="line-960"></a>  Assertions
-<a name="line-961"></a>--------------------------------------------------------------------}</span>
-<a name="line-962"></a><span class='hs-comment'>-- | /O(n)/. Test if the internal set structure is valid.</span>
-<a name="line-963"></a><span class='hs-definition'>valid</span> <span class='hs-keyglyph'>::</span> <span class='hs-layout'>(</span><span class='hs-conid'>US</span> <span class='hs-varid'>a</span><span class='hs-layout'>,</span> <span class='hs-conid'>Ord</span> <span class='hs-varid'>a</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>USet</span> <span class='hs-varid'>a</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-conid'>Bool</span>
-<a name="line-964"></a><span class='hs-definition'>valid</span> <span class='hs-varid'>t</span>
-<a name="line-965"></a>  <span class='hs-keyglyph'>=</span> <span class='hs-varid'>balanced</span> <span class='hs-varid'>t</span> <span class='hs-varop'>&amp;&amp;</span> <span class='hs-varid'>ordered</span> <span class='hs-varid'>t</span> <span class='hs-varop'>&amp;&amp;</span> <span class='hs-varid'>validsize</span> <span class='hs-varid'>t</span>
-<a name="line-966"></a>
-<a name="line-967"></a><a name="ordered"></a><span class='hs-definition'>ordered</span> <span class='hs-keyglyph'>::</span> <span class='hs-layout'>(</span><span class='hs-conid'>US</span> <span class='hs-varid'>a</span><span class='hs-layout'>,</span> <span class='hs-conid'>Ord</span> <span class='hs-varid'>a</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>USet</span> <span class='hs-varid'>a</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-conid'>Bool</span>
-<a name="line-968"></a><span class='hs-definition'>ordered</span> <span class='hs-varid'>t</span>
-<a name="line-969"></a>  <span class='hs-keyglyph'>=</span> <span class='hs-varid'>bounded</span> <span class='hs-layout'>(</span><span class='hs-varid'>const</span> <span class='hs-conid'>True</span><span class='hs-layout'>)</span> <span class='hs-layout'>(</span><span class='hs-varid'>const</span> <span class='hs-conid'>True</span><span class='hs-layout'>)</span> <span class='hs-varid'>t</span>
-<a name="line-970"></a>  <span class='hs-keyword'>where</span>
-<a name="line-971"></a>    <span class='hs-varid'>bounded</span> <span class='hs-varid'>lo</span> <span class='hs-varid'>hi</span> <span class='hs-varid'>t'</span>
-<a name="line-972"></a>      <span class='hs-keyglyph'>=</span> <span class='hs-keyword'>case</span> <span class='hs-varid'>view</span> <span class='hs-varid'>t'</span> <span class='hs-keyword'>of</span>
-<a name="line-973"></a>          <span class='hs-conid'>Tip</span>         <span class='hs-keyglyph'>-&gt;</span> <span class='hs-conid'>True</span>
-<a name="line-974"></a>          <span class='hs-conid'>Bin</span> <span class='hs-keyword'>_</span> <span class='hs-varid'>x</span> <span class='hs-varid'>l</span> <span class='hs-varid'>r</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-layout'>(</span><span class='hs-varid'>lo</span> <span class='hs-varid'>x</span><span class='hs-layout'>)</span> <span class='hs-varop'>&amp;&amp;</span> <span class='hs-layout'>(</span><span class='hs-varid'>hi</span> <span class='hs-varid'>x</span><span class='hs-layout'>)</span> <span class='hs-varop'>&amp;&amp;</span> <span class='hs-varid'>bounded</span> <span class='hs-varid'>lo</span> <span class='hs-layout'>(</span><span class='hs-varop'>&lt;</span><span class='hs-varid'>x</span><span class='hs-layout'>)</span> <span class='hs-varid'>l</span> <span class='hs-varop'>&amp;&amp;</span> <span class='hs-varid'>bounded</span> <span class='hs-layout'>(</span><span class='hs-varop'>&gt;</span><span class='hs-varid'>x</span><span class='hs-layout'>)</span> <span class='hs-varid'>hi</span> <span class='hs-varid'>r</span>
-<a name="line-975"></a>
-<a name="line-976"></a><a name="balanced"></a><span class='hs-definition'>balanced</span> <span class='hs-keyglyph'>::</span> <span class='hs-conid'>US</span> <span class='hs-varid'>a</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>USet</span> <span class='hs-varid'>a</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-conid'>Bool</span>
-<a name="line-977"></a><span class='hs-definition'>balanced</span> <span class='hs-varid'>t</span>
-<a name="line-978"></a>  <span class='hs-keyglyph'>=</span> <span class='hs-keyword'>case</span> <span class='hs-varid'>view</span> <span class='hs-varid'>t</span> <span class='hs-keyword'>of</span>
-<a name="line-979"></a>      <span class='hs-conid'>Tip</span>         <span class='hs-keyglyph'>-&gt;</span> <span class='hs-conid'>True</span>
-<a name="line-980"></a>      <span class='hs-conid'>Bin</span> <span class='hs-keyword'>_</span> <span class='hs-keyword'>_</span> <span class='hs-varid'>l</span> <span class='hs-varid'>r</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-layout'>(</span><span class='hs-varid'>size</span> <span class='hs-varid'>l</span> <span class='hs-varop'>+</span> <span class='hs-varid'>size</span> <span class='hs-varid'>r</span> <span class='hs-varop'>&lt;=</span> <span class='hs-num'>1</span> <span class='hs-varop'>||</span> <span class='hs-layout'>(</span><span class='hs-varid'>size</span> <span class='hs-varid'>l</span> <span class='hs-varop'>&lt;=</span> <span class='hs-varid'>delta</span><span class='hs-varop'>*</span><span class='hs-varid'>size</span> <span class='hs-varid'>r</span> <span class='hs-varop'>&amp;&amp;</span> <span class='hs-varid'>size</span> <span class='hs-varid'>r</span> <span class='hs-varop'>&lt;=</span> <span class='hs-varid'>delta</span><span class='hs-varop'>*</span><span class='hs-varid'>size</span> <span class='hs-varid'>l</span><span class='hs-layout'>)</span><span class='hs-layout'>)</span> <span class='hs-varop'>&amp;&amp;</span>
-<a name="line-981"></a>                     <span class='hs-varid'>balanced</span> <span class='hs-varid'>l</span> <span class='hs-varop'>&amp;&amp;</span> <span class='hs-varid'>balanced</span> <span class='hs-varid'>r</span>
-<a name="line-982"></a>
-<a name="line-983"></a><a name="validsize"></a><span class='hs-definition'>validsize</span> <span class='hs-keyglyph'>::</span> <span class='hs-conid'>US</span> <span class='hs-varid'>a</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>USet</span> <span class='hs-varid'>a</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-conid'>Bool</span>
-<a name="line-984"></a><span class='hs-definition'>validsize</span> <span class='hs-varid'>t</span>
-<a name="line-985"></a>  <span class='hs-keyglyph'>=</span> <span class='hs-layout'>(</span><span class='hs-varid'>realsize</span> <span class='hs-varid'>t</span> <span class='hs-varop'>==</span> <span class='hs-conid'>Just</span> <span class='hs-layout'>(</span><span class='hs-varid'>size</span> <span class='hs-varid'>t</span><span class='hs-layout'>)</span><span class='hs-layout'>)</span>
-<a name="line-986"></a>  <span class='hs-keyword'>where</span>
-<a name="line-987"></a>    <span class='hs-varid'>realsize</span> <span class='hs-varid'>t'</span>
-<a name="line-988"></a>      <span class='hs-keyglyph'>=</span> <span class='hs-keyword'>case</span> <span class='hs-varid'>view</span> <span class='hs-varid'>t'</span> <span class='hs-keyword'>of</span>
-<a name="line-989"></a>          <span class='hs-conid'>Tip</span>          <span class='hs-keyglyph'>-&gt;</span> <span class='hs-conid'>Just</span> <span class='hs-num'>0</span>
-<a name="line-990"></a>          <span class='hs-conid'>Bin</span> <span class='hs-varid'>sz</span> <span class='hs-keyword'>_</span> <span class='hs-varid'>l</span> <span class='hs-varid'>r</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-keyword'>case</span> <span class='hs-layout'>(</span><span class='hs-varid'>realsize</span> <span class='hs-varid'>l</span><span class='hs-layout'>,</span><span class='hs-varid'>realsize</span> <span class='hs-varid'>r</span><span class='hs-layout'>)</span> <span class='hs-keyword'>of</span>
-<a name="line-991"></a>                            <span class='hs-layout'>(</span><span class='hs-conid'>Just</span> <span class='hs-varid'>n</span><span class='hs-layout'>,</span><span class='hs-conid'>Just</span> <span class='hs-varid'>m</span><span class='hs-layout'>)</span>  <span class='hs-keyglyph'>|</span> <span class='hs-varid'>n</span><span class='hs-varop'>+</span><span class='hs-varid'>m</span><span class='hs-varop'>+</span><span class='hs-num'>1</span> <span class='hs-varop'>==</span> <span class='hs-varid'>sz</span>  <span class='hs-keyglyph'>-&gt;</span> <span class='hs-conid'>Just</span> <span class='hs-varid'>sz</span>
-<a name="line-992"></a>                            <span class='hs-keyword'>_</span>                <span class='hs-keyglyph'>-&gt;</span> <span class='hs-conid'>Nothing</span>
-<a name="line-993"></a>
-<a name="line-994"></a><span class='hs-comment'>{-
-<a name="line-995"></a>{--------------------------------------------------------------------
-<a name="line-996"></a>  Testing
-<a name="line-997"></a>--------------------------------------------------------------------}
-<a name="line-998"></a>testTree :: [Int] -&gt; USet Int
-<a name="line-999"></a>testTree xs   = fromList xs
-<a name="line-1000"></a>test1 = testTree [1..20]
-<a name="line-1001"></a>test2 = testTree [30,29..10]
-<a name="line-1002"></a>test3 = testTree [1,4,6,89,2323,53,43,234,5,79,12,9,24,9,8,423,8,42,4,8,9,3]
-<a name="line-1003"></a>
-<a name="line-1004"></a>{--------------------------------------------------------------------
-<a name="line-1005"></a>  QuickCheck
-<a name="line-1006"></a>--------------------------------------------------------------------}
-<a name="line-1007"></a>
-<a name="line-1008"></a>{-
-<a name="line-1009"></a>qcheck prop
-<a name="line-1010"></a>  = check config prop
-<a name="line-1011"></a>  where
-<a name="line-1012"></a>    config = Config
-<a name="line-1013"></a>      { configMaxTest = 500
-<a name="line-1014"></a>      , configMaxFail = 5000
-<a name="line-1015"></a>      , configSize    = \n -&gt; (div n 2 + 3)
-<a name="line-1016"></a>      , configEvery   = \n args -&gt; let s = show n in s ++ [ '\b' | _ &lt;- s ]
-<a name="line-1017"></a>      }
-<a name="line-1018"></a>-}
-<a name="line-1019"></a>
-<a name="line-1020"></a>
-<a name="line-1021"></a>{--------------------------------------------------------------------
-<a name="line-1022"></a>  Arbitrary, reasonably balanced trees
-<a name="line-1023"></a>--------------------------------------------------------------------}
-<a name="line-1024"></a>instance (US a, Enum a) =&gt; Arbitrary (USet a) where
-<a name="line-1025"></a>  arbitrary = sized (arbtree 0 maxkey)
-<a name="line-1026"></a>            where maxkey  = 10000
+<a name="line-952"></a><a name="ordered"></a><span class='hs-definition'>ordered</span> <span class='hs-keyglyph'>::</span> <span class='hs-layout'>(</span><span class='hs-conid'>US</span> <span class='hs-varid'>a</span><span class='hs-layout'>,</span> <span class='hs-conid'>Ord</span> <span class='hs-varid'>a</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>USet</span> <span class='hs-varid'>a</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-conid'>Bool</span>
+<a name="line-953"></a><span class='hs-definition'>ordered</span> <span class='hs-varid'>t</span>
+<a name="line-954"></a>  <span class='hs-keyglyph'>=</span> <span class='hs-varid'>bounded</span> <span class='hs-layout'>(</span><span class='hs-varid'>const</span> <span class='hs-conid'>True</span><span class='hs-layout'>)</span> <span class='hs-layout'>(</span><span class='hs-varid'>const</span> <span class='hs-conid'>True</span><span class='hs-layout'>)</span> <span class='hs-varid'>t</span>
+<a name="line-955"></a>  <span class='hs-keyword'>where</span>
+<a name="line-956"></a>    <span class='hs-varid'>bounded</span> <span class='hs-varid'>lo</span> <span class='hs-varid'>hi</span> <span class='hs-varid'>t'</span>
+<a name="line-957"></a>      <span class='hs-keyglyph'>=</span> <span class='hs-keyword'>case</span> <span class='hs-varid'>view</span> <span class='hs-varid'>t'</span> <span class='hs-keyword'>of</span>
+<a name="line-958"></a>          <span class='hs-conid'>Bin</span> <span class='hs-keyword'>_</span> <span class='hs-varid'>x</span> <span class='hs-varid'>l</span> <span class='hs-varid'>r</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-layout'>(</span><span class='hs-varid'>lo</span> <span class='hs-varid'>x</span><span class='hs-layout'>)</span> <span class='hs-varop'>&amp;&amp;</span> <span class='hs-layout'>(</span><span class='hs-varid'>hi</span> <span class='hs-varid'>x</span><span class='hs-layout'>)</span> <span class='hs-varop'>&amp;&amp;</span> <span class='hs-varid'>bounded</span> <span class='hs-varid'>lo</span> <span class='hs-layout'>(</span><span class='hs-varop'>&lt;</span><span class='hs-varid'>x</span><span class='hs-layout'>)</span> <span class='hs-varid'>l</span> <span class='hs-varop'>&amp;&amp;</span> <span class='hs-varid'>bounded</span> <span class='hs-layout'>(</span><span class='hs-varop'>&gt;</span><span class='hs-varid'>x</span><span class='hs-layout'>)</span> <span class='hs-varid'>hi</span> <span class='hs-varid'>r</span>
+<a name="line-959"></a>          <span class='hs-keyword'>_</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-conid'>True</span>
+<a name="line-960"></a>
+<a name="line-961"></a><a name="balanced"></a><span class='hs-definition'>balanced</span> <span class='hs-keyglyph'>::</span> <span class='hs-conid'>US</span> <span class='hs-varid'>a</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>USet</span> <span class='hs-varid'>a</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-conid'>Bool</span>
+<a name="line-962"></a><span class='hs-definition'>balanced</span> <span class='hs-varid'>t</span>
+<a name="line-963"></a>  <span class='hs-keyglyph'>=</span> <span class='hs-keyword'>case</span> <span class='hs-varid'>view</span> <span class='hs-varid'>t</span> <span class='hs-keyword'>of</span>
+<a name="line-964"></a>      <span class='hs-conid'>Bin</span> <span class='hs-keyword'>_</span> <span class='hs-keyword'>_</span> <span class='hs-varid'>l</span> <span class='hs-varid'>r</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-layout'>(</span><span class='hs-varid'>size</span> <span class='hs-varid'>l</span> <span class='hs-varop'>+</span> <span class='hs-varid'>size</span> <span class='hs-varid'>r</span> <span class='hs-varop'>&lt;=</span> <span class='hs-num'>1</span> <span class='hs-varop'>||</span> <span class='hs-layout'>(</span><span class='hs-varid'>size</span> <span class='hs-varid'>l</span> <span class='hs-varop'>&lt;=</span> <span class='hs-varid'>delta</span><span class='hs-varop'>*</span><span class='hs-varid'>size</span> <span class='hs-varid'>r</span> <span class='hs-varop'>&amp;&amp;</span> <span class='hs-varid'>size</span> <span class='hs-varid'>r</span> <span class='hs-varop'>&lt;=</span> <span class='hs-varid'>delta</span><span class='hs-varop'>*</span><span class='hs-varid'>size</span> <span class='hs-varid'>l</span><span class='hs-layout'>)</span><span class='hs-layout'>)</span> <span class='hs-varop'>&amp;&amp;</span>
+<a name="line-965"></a>                     <span class='hs-varid'>balanced</span> <span class='hs-varid'>l</span> <span class='hs-varop'>&amp;&amp;</span> <span class='hs-varid'>balanced</span> <span class='hs-varid'>r</span>
+<a name="line-966"></a>      <span class='hs-keyword'>_</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-conid'>True</span>
+<a name="line-967"></a>
+<a name="line-968"></a><a name="validsize"></a><span class='hs-definition'>validsize</span> <span class='hs-keyglyph'>::</span> <span class='hs-conid'>US</span> <span class='hs-varid'>a</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>USet</span> <span class='hs-varid'>a</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-conid'>Bool</span>
+<a name="line-969"></a><span class='hs-definition'>validsize</span> <span class='hs-varid'>t</span>
+<a name="line-970"></a>  <span class='hs-keyglyph'>=</span> <span class='hs-layout'>(</span><span class='hs-varid'>realsize</span> <span class='hs-varid'>t</span> <span class='hs-varop'>==</span> <span class='hs-conid'>Just</span> <span class='hs-layout'>(</span><span class='hs-varid'>size</span> <span class='hs-varid'>t</span><span class='hs-layout'>)</span><span class='hs-layout'>)</span>
+<a name="line-971"></a>  <span class='hs-keyword'>where</span>
+<a name="line-972"></a>    <span class='hs-varid'>realsize</span> <span class='hs-varid'>t'</span>
+<a name="line-973"></a>      <span class='hs-keyglyph'>=</span> <span class='hs-keyword'>case</span> <span class='hs-varid'>view</span> <span class='hs-varid'>t'</span> <span class='hs-keyword'>of</span>
+<a name="line-974"></a>          <span class='hs-conid'>Bin</span> <span class='hs-varid'>sz</span> <span class='hs-keyword'>_</span> <span class='hs-varid'>l</span> <span class='hs-varid'>r</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-keyword'>case</span> <span class='hs-layout'>(</span><span class='hs-varid'>realsize</span> <span class='hs-varid'>l</span><span class='hs-layout'>,</span><span class='hs-varid'>realsize</span> <span class='hs-varid'>r</span><span class='hs-layout'>)</span> <span class='hs-keyword'>of</span>
+<a name="line-975"></a>                            <span class='hs-layout'>(</span><span class='hs-conid'>Just</span> <span class='hs-varid'>n</span><span class='hs-layout'>,</span><span class='hs-conid'>Just</span> <span class='hs-varid'>m</span><span class='hs-layout'>)</span>  <span class='hs-keyglyph'>|</span> <span class='hs-varid'>n</span><span class='hs-varop'>+</span><span class='hs-varid'>m</span><span class='hs-varop'>+</span><span class='hs-num'>1</span> <span class='hs-varop'>==</span> <span class='hs-varid'>sz</span>  <span class='hs-keyglyph'>-&gt;</span> <span class='hs-conid'>Just</span> <span class='hs-varid'>sz</span>
+<a name="line-976"></a>                            <span class='hs-keyword'>_</span>                <span class='hs-keyglyph'>-&gt;</span> <span class='hs-conid'>Nothing</span>
+<a name="line-977"></a>          <span class='hs-keyword'>_</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-conid'>Just</span> <span class='hs-num'>0</span>
+<a name="line-978"></a>
+<a name="line-979"></a><span class='hs-comment'>{-
+<a name="line-980"></a>{--------------------------------------------------------------------
+<a name="line-981"></a>  Testing
+<a name="line-982"></a>--------------------------------------------------------------------}
+<a name="line-983"></a>testTree :: [Int] -&gt; USet Int
+<a name="line-984"></a>testTree xs   = fromList xs
+<a name="line-985"></a>test1 = testTree [1..20]
+<a name="line-986"></a>test2 = testTree [30,29..10]
+<a name="line-987"></a>test3 = testTree [1,4,6,89,2323,53,43,234,5,79,12,9,24,9,8,423,8,42,4,8,9,3]
+<a name="line-988"></a>
+<a name="line-989"></a>{--------------------------------------------------------------------
+<a name="line-990"></a>  QuickCheck
+<a name="line-991"></a>--------------------------------------------------------------------}
+<a name="line-992"></a>
+<a name="line-993"></a>{-
+<a name="line-994"></a>qcheck prop
+<a name="line-995"></a>  = check config prop
+<a name="line-996"></a>  where
+<a name="line-997"></a>    config = Config
+<a name="line-998"></a>      { configMaxTest = 500
+<a name="line-999"></a>      , configMaxFail = 5000
+<a name="line-1000"></a>      , configSize    = \n -&gt; (div n 2 + 3)
+<a name="line-1001"></a>      , configEvery   = \n args -&gt; let s = show n in s ++ [ '\b' | _ &lt;- s ]
+<a name="line-1002"></a>      }
+<a name="line-1003"></a>-}
+<a name="line-1004"></a>
+<a name="line-1005"></a>
+<a name="line-1006"></a>{--------------------------------------------------------------------
+<a name="line-1007"></a>  Arbitrary, reasonably balanced trees
+<a name="line-1008"></a>--------------------------------------------------------------------}
+<a name="line-1009"></a>instance (US a, Enum a) =&gt; Arbitrary (USet a) where
+<a name="line-1010"></a>  arbitrary = sized (arbtree 0 maxkey)
+<a name="line-1011"></a>            where maxkey  = 10000
+<a name="line-1012"></a>
+<a name="line-1013"></a>arbtree :: (US a, Enum a) =&gt; Int -&gt; Int -&gt; Int -&gt; Gen (USet a)
+<a name="line-1014"></a>arbtree lo hi n
+<a name="line-1015"></a>  | n &lt;= 0        = return tip
+<a name="line-1016"></a>  | lo &gt;= hi      = return tip
+<a name="line-1017"></a>  | otherwise     = do{ i  &lt;- choose (lo,hi)
+<a name="line-1018"></a>                      ; m  &lt;- choose (1,30)
+<a name="line-1019"></a>                      ; let (ml,mr)  | m==(1::Int)= (1,2)
+<a name="line-1020"></a>                                     | m==2       = (2,1)
+<a name="line-1021"></a>                                     | m==3       = (1,1)
+<a name="line-1022"></a>                                     | otherwise  = (2,2)
+<a name="line-1023"></a>                      ; l  &lt;- arbtree lo (i-1) (n `div` ml)
+<a name="line-1024"></a>                      ; r  &lt;- arbtree (i+1) hi (n `div` mr)
+<a name="line-1025"></a>                      ; return (bin_ (toEnum i) l r)
+<a name="line-1026"></a>                      }  
hunk ./doc/html/monoids/src/Data-Set-Unboxed.html 1036
-<a name="line-1028"></a>arbtree :: (US a, Enum a) =&gt; Int -&gt; Int -&gt; Int -&gt; Gen (USet a)
-<a name="line-1029"></a>arbtree lo hi n
-<a name="line-1030"></a>  | n &lt;= 0        = return tip
-<a name="line-1031"></a>  | lo &gt;= hi      = return tip
-<a name="line-1032"></a>  | otherwise     = do{ i  &lt;- choose (lo,hi)
-<a name="line-1033"></a>                      ; m  &lt;- choose (1,30)
-<a name="line-1034"></a>                      ; let (ml,mr)  | m==(1::Int)= (1,2)
-<a name="line-1035"></a>                                     | m==2       = (2,1)
-<a name="line-1036"></a>                                     | m==3       = (1,1)
-<a name="line-1037"></a>                                     | otherwise  = (2,2)
-<a name="line-1038"></a>                      ; l  &lt;- arbtree lo (i-1) (n `div` ml)
-<a name="line-1039"></a>                      ; r  &lt;- arbtree (i+1) hi (n `div` mr)
-<a name="line-1040"></a>                      ; return (bin_ (toEnum i) l r)
-<a name="line-1041"></a>                      }  
-<a name="line-1042"></a>
-<a name="line-1043"></a>
-<a name="line-1044"></a>{--------------------------------------------------------------------
-<a name="line-1045"></a>  Valid tree's
-<a name="line-1046"></a>--------------------------------------------------------------------}
-<a name="line-1047"></a>forValid :: (US a, Enum a,Show a,Testable b) =&gt; (USet a -&gt; b) -&gt; Property
-<a name="line-1048"></a>forValid f
-<a name="line-1049"></a>  = forAll arbitrary $ \t -&gt; 
-<a name="line-1050"></a>--    classify (balanced t) "balanced" $
-<a name="line-1051"></a>    classify (size t == 0) "empty" $
-<a name="line-1052"></a>    classify (size t &gt; 0  &amp;&amp; size t &lt;= 10) "small" $
-<a name="line-1053"></a>    classify (size t &gt; 10 &amp;&amp; size t &lt;= 64) "medium" $
-<a name="line-1054"></a>    classify (size t &gt; 64) "large" $
-<a name="line-1055"></a>    balanced t ==&gt; f t
-<a name="line-1056"></a>
-<a name="line-1057"></a>forValidIntTree :: Testable a =&gt; (USet Int -&gt; a) -&gt; Property
-<a name="line-1058"></a>forValidIntTree f
-<a name="line-1059"></a>  = forValid f
+<a name="line-1028"></a>
+<a name="line-1029"></a>{--------------------------------------------------------------------
+<a name="line-1030"></a>  Valid tree's
+<a name="line-1031"></a>--------------------------------------------------------------------}
+<a name="line-1032"></a>forValid :: (US a, Enum a,Show a,Testable b) =&gt; (USet a -&gt; b) -&gt; Property
+<a name="line-1033"></a>forValid f
+<a name="line-1034"></a>  = forAll arbitrary $ \t -&gt; 
+<a name="line-1035"></a>--    classify (balanced t) "balanced" $
+<a name="line-1036"></a>    classify (size t == 0) "empty" $
+<a name="line-1037"></a>    classify (size t &gt; 0  &amp;&amp; size t &lt;= 10) "small" $
+<a name="line-1038"></a>    classify (size t &gt; 10 &amp;&amp; size t &lt;= 64) "medium" $
+<a name="line-1039"></a>    classify (size t &gt; 64) "large" $
+<a name="line-1040"></a>    balanced t ==&gt; f t
+<a name="line-1041"></a>
+<a name="line-1042"></a>forValidIntTree :: Testable a =&gt; (USet Int -&gt; a) -&gt; Property
+<a name="line-1043"></a>forValidIntTree f
+<a name="line-1044"></a>  = forValid f
+<a name="line-1045"></a>
+<a name="line-1046"></a>forValidUnitTree :: Testable a =&gt; (USet Int -&gt; a) -&gt; Property
+<a name="line-1047"></a>forValidUnitTree f
+<a name="line-1048"></a>  = forValid f
+<a name="line-1049"></a>
+<a name="line-1050"></a>
+<a name="line-1051"></a>prop_Valid 
+<a name="line-1052"></a>  = forValidUnitTree $ \t -&gt; valid t
+<a name="line-1053"></a>
+<a name="line-1054"></a>{--------------------------------------------------------------------
+<a name="line-1055"></a>  Single, Insert, Delete
+<a name="line-1056"></a>--------------------------------------------------------------------}
+<a name="line-1057"></a>prop_Single :: Int -&gt; Bool
+<a name="line-1058"></a>prop_Single x
+<a name="line-1059"></a>  = (insert x empty == singleton x)
hunk ./doc/html/monoids/src/Data-Set-Unboxed.html 1069
-<a name="line-1061"></a>forValidUnitTree :: Testable a =&gt; (USet Int -&gt; a) -&gt; Property
-<a name="line-1062"></a>forValidUnitTree f
-<a name="line-1063"></a>  = forValid f
+<a name="line-1061"></a>prop_InsertValid :: Int -&gt; Property
+<a name="line-1062"></a>prop_InsertValid k
+<a name="line-1063"></a>  = forValidUnitTree $ \t -&gt; valid (insert k t)
hunk ./doc/html/monoids/src/Data-Set-Unboxed.html 1073
-<a name="line-1065"></a>
-<a name="line-1066"></a>prop_Valid 
-<a name="line-1067"></a>  = forValidUnitTree $ \t -&gt; valid t
+<a name="line-1065"></a>prop_InsertDelete :: Int -&gt; USet Int -&gt; Property
+<a name="line-1066"></a>prop_InsertDelete k t
+<a name="line-1067"></a>  = not (member k t) ==&gt; delete k (insert k t) == t
hunk ./doc/html/monoids/src/Data-Set-Unboxed.html 1077
-<a name="line-1069"></a>{--------------------------------------------------------------------
-<a name="line-1070"></a>  Single, Insert, Delete
-<a name="line-1071"></a>--------------------------------------------------------------------}
-<a name="line-1072"></a>prop_Single :: Int -&gt; Bool
-<a name="line-1073"></a>prop_Single x
-<a name="line-1074"></a>  = (insert x empty == singleton x)
-<a name="line-1075"></a>
-<a name="line-1076"></a>prop_InsertValid :: Int -&gt; Property
-<a name="line-1077"></a>prop_InsertValid k
-<a name="line-1078"></a>  = forValidUnitTree $ \t -&gt; valid (insert k t)
-<a name="line-1079"></a>
-<a name="line-1080"></a>prop_InsertDelete :: Int -&gt; USet Int -&gt; Property
-<a name="line-1081"></a>prop_InsertDelete k t
-<a name="line-1082"></a>  = not (member k t) ==&gt; delete k (insert k t) == t
-<a name="line-1083"></a>
-<a name="line-1084"></a>prop_DeleteValid :: Int -&gt; Property
-<a name="line-1085"></a>prop_DeleteValid k
-<a name="line-1086"></a>  = forValidUnitTree $ \t -&gt; 
-<a name="line-1087"></a>    valid (delete k (insert k t))
+<a name="line-1069"></a>prop_DeleteValid :: Int -&gt; Property
+<a name="line-1070"></a>prop_DeleteValid k
+<a name="line-1071"></a>  = forValidUnitTree $ \t -&gt; 
+<a name="line-1072"></a>    valid (delete k (insert k t))
+<a name="line-1073"></a>
+<a name="line-1074"></a>{--------------------------------------------------------------------
+<a name="line-1075"></a>  Balance
+<a name="line-1076"></a>--------------------------------------------------------------------}
+<a name="line-1077"></a>prop_Join :: Int -&gt; Property 
+<a name="line-1078"></a>prop_Join x
+<a name="line-1079"></a>  = forValidUnitTree $ \t -&gt;
+<a name="line-1080"></a>    let (l,r) = split x t
+<a name="line-1081"></a>    in valid (join x l r)
+<a name="line-1082"></a>
+<a name="line-1083"></a>prop_Merge :: Int -&gt; Property 
+<a name="line-1084"></a>prop_Merge x
+<a name="line-1085"></a>  = forValidUnitTree $ \t -&gt;
+<a name="line-1086"></a>    let (l,r) = split x t
+<a name="line-1087"></a>    in valid (merge l r)
hunk ./doc/html/monoids/src/Data-Set-Unboxed.html 1097
-<a name="line-1089"></a>{--------------------------------------------------------------------
-<a name="line-1090"></a>  Balance
-<a name="line-1091"></a>--------------------------------------------------------------------}
-<a name="line-1092"></a>prop_Join :: Int -&gt; Property 
-<a name="line-1093"></a>prop_Join x
-<a name="line-1094"></a>  = forValidUnitTree $ \t -&gt;
-<a name="line-1095"></a>    let (l,r) = split x t
-<a name="line-1096"></a>    in valid (join x l r)
-<a name="line-1097"></a>
-<a name="line-1098"></a>prop_Merge :: Int -&gt; Property 
-<a name="line-1099"></a>prop_Merge x
-<a name="line-1100"></a>  = forValidUnitTree $ \t -&gt;
-<a name="line-1101"></a>    let (l,r) = split x t
-<a name="line-1102"></a>    in valid (merge l r)
-<a name="line-1103"></a>
-<a name="line-1104"></a>
-<a name="line-1105"></a>{--------------------------------------------------------------------
-<a name="line-1106"></a>  Union
-<a name="line-1107"></a>--------------------------------------------------------------------}
-<a name="line-1108"></a>prop_UnionValid :: Property
-<a name="line-1109"></a>prop_UnionValid
-<a name="line-1110"></a>  = forValidUnitTree $ \t1 -&gt;
-<a name="line-1111"></a>    forValidUnitTree $ \t2 -&gt;
-<a name="line-1112"></a>    valid (union t1 t2)
-<a name="line-1113"></a>
-<a name="line-1114"></a>prop_UnionInsert :: Int -&gt; USet Int -&gt; Bool
-<a name="line-1115"></a>prop_UnionInsert x t
-<a name="line-1116"></a>  = union t (singleton x) == insert x t
-<a name="line-1117"></a>
-<a name="line-1118"></a>prop_UnionAssoc :: USet Int -&gt; USet Int -&gt; USet Int -&gt; Bool
-<a name="line-1119"></a>prop_UnionAssoc t1 t2 t3
-<a name="line-1120"></a>  = union t1 (union t2 t3) == union (union t1 t2) t3
+<a name="line-1089"></a>
+<a name="line-1090"></a>{--------------------------------------------------------------------
+<a name="line-1091"></a>  Union
+<a name="line-1092"></a>--------------------------------------------------------------------}
+<a name="line-1093"></a>prop_UnionValid :: Property
+<a name="line-1094"></a>prop_UnionValid
+<a name="line-1095"></a>  = forValidUnitTree $ \t1 -&gt;
+<a name="line-1096"></a>    forValidUnitTree $ \t2 -&gt;
+<a name="line-1097"></a>    valid (union t1 t2)
+<a name="line-1098"></a>
+<a name="line-1099"></a>prop_UnionInsert :: Int -&gt; USet Int -&gt; Bool
+<a name="line-1100"></a>prop_UnionInsert x t
+<a name="line-1101"></a>  = union t (singleton x) == insert x t
+<a name="line-1102"></a>
+<a name="line-1103"></a>prop_UnionAssoc :: USet Int -&gt; USet Int -&gt; USet Int -&gt; Bool
+<a name="line-1104"></a>prop_UnionAssoc t1 t2 t3
+<a name="line-1105"></a>  = union t1 (union t2 t3) == union (union t1 t2) t3
+<a name="line-1106"></a>
+<a name="line-1107"></a>prop_UnionComm :: USet Int -&gt; USet Int -&gt; Bool
+<a name="line-1108"></a>prop_UnionComm t1 t2
+<a name="line-1109"></a>  = (union t1 t2 == union t2 t1)
+<a name="line-1110"></a>
+<a name="line-1111"></a>
+<a name="line-1112"></a>prop_DiffValid
+<a name="line-1113"></a>  = forValidUnitTree $ \t1 -&gt;
+<a name="line-1114"></a>    forValidUnitTree $ \t2 -&gt;
+<a name="line-1115"></a>    valid (difference t1 t2)
+<a name="line-1116"></a>
+<a name="line-1117"></a>prop_Diff :: [Int] -&gt; [Int] -&gt; Bool
+<a name="line-1118"></a>prop_Diff xs ys
+<a name="line-1119"></a>  =  toAscList (difference (fromList xs) (fromList ys))
+<a name="line-1120"></a>    == List.sort ((List.\\) (nub xs)  (nub ys))
hunk ./doc/html/monoids/src/Data-Set-Unboxed.html 1130
-<a name="line-1122"></a>prop_UnionComm :: USet Int -&gt; USet Int -&gt; Bool
-<a name="line-1123"></a>prop_UnionComm t1 t2
-<a name="line-1124"></a>  = (union t1 t2 == union t2 t1)
-<a name="line-1125"></a>
+<a name="line-1122"></a>prop_IntValid
+<a name="line-1123"></a>  = forValidUnitTree $ \t1 -&gt;
+<a name="line-1124"></a>    forValidUnitTree $ \t2 -&gt;
+<a name="line-1125"></a>    valid (intersection t1 t2)
hunk ./doc/html/monoids/src/Data-Set-Unboxed.html 1135
-<a name="line-1127"></a>prop_DiffValid
-<a name="line-1128"></a>  = forValidUnitTree $ \t1 -&gt;
-<a name="line-1129"></a>    forValidUnitTree $ \t2 -&gt;
-<a name="line-1130"></a>    valid (difference t1 t2)
+<a name="line-1127"></a>prop_Int :: [Int] -&gt; [Int] -&gt; Bool
+<a name="line-1128"></a>prop_Int xs ys
+<a name="line-1129"></a>  =  toAscList (intersection (fromList xs) (fromList ys))
+<a name="line-1130"></a>    == List.sort (nub ((List.intersect) (xs)  (ys)))
hunk ./doc/html/monoids/src/Data-Set-Unboxed.html 1140
-<a name="line-1132"></a>prop_Diff :: [Int] -&gt; [Int] -&gt; Bool
-<a name="line-1133"></a>prop_Diff xs ys
-<a name="line-1134"></a>  =  toAscList (difference (fromList xs) (fromList ys))
-<a name="line-1135"></a>    == List.sort ((List.\\) (nub xs)  (nub ys))
-<a name="line-1136"></a>
-<a name="line-1137"></a>prop_IntValid
-<a name="line-1138"></a>  = forValidUnitTree $ \t1 -&gt;
-<a name="line-1139"></a>    forValidUnitTree $ \t2 -&gt;
-<a name="line-1140"></a>    valid (intersection t1 t2)
-<a name="line-1141"></a>
-<a name="line-1142"></a>prop_Int :: [Int] -&gt; [Int] -&gt; Bool
-<a name="line-1143"></a>prop_Int xs ys
-<a name="line-1144"></a>  =  toAscList (intersection (fromList xs) (fromList ys))
-<a name="line-1145"></a>    == List.sort (nub ((List.intersect) (xs)  (ys)))
-<a name="line-1146"></a>
-<a name="line-1147"></a>{--------------------------------------------------------------------
-<a name="line-1148"></a>  Lists
-<a name="line-1149"></a>--------------------------------------------------------------------}
-<a name="line-1150"></a>prop_Ordered
-<a name="line-1151"></a>  = forAll (choose (5,100)) $ \n -&gt;
-<a name="line-1152"></a>    let xs = [0..n::Int]
-<a name="line-1153"></a>    in fromAscList xs == fromList xs
-<a name="line-1154"></a>
-<a name="line-1155"></a>prop_List :: [Int] -&gt; Bool
-<a name="line-1156"></a>prop_List xs
-<a name="line-1157"></a>  = (sort (nub xs) == toList (fromList xs))
-<a name="line-1158"></a>-}</span>
-<a name="line-1159"></a>
-<a name="line-1160"></a>
-<a name="line-1161"></a><a name="Boxed"></a><span class='hs-keyword'>newtype</span> <span class='hs-conid'>Boxed</span> <span class='hs-varid'>a</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>Boxed</span> <span class='hs-varid'>a</span>
-<a name="line-1162"></a><span class='hs-keyword'>instance</span> <span class='hs-conid'>US</span> <span class='hs-layout'>(</span><span class='hs-conid'>Boxed</span> <span class='hs-varid'>a</span><span class='hs-layout'>)</span> <span class='hs-keyword'>where</span>
-<a name="line-1163"></a>    <span class='hs-keyword'>data</span> <span class='hs-conid'>USet</span> <span class='hs-layout'>(</span><span class='hs-conid'>Boxed</span> <span class='hs-varid'>a</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>BoxedTip</span> <span class='hs-keyglyph'>|</span> <span class='hs-conid'>BoxedBin</span> <span class='hs-comment'>{-# UNPACK #-}</span> <span class='hs-varop'>!</span><span class='hs-conid'>Size</span> <span class='hs-layout'>(</span><span class='hs-conid'>Boxed</span> <span class='hs-varid'>a</span><span class='hs-layout'>)</span> <span class='hs-varop'>!</span><span class='hs-layout'>(</span><span class='hs-conid'>USet</span> <span class='hs-layout'>(</span><span class='hs-conid'>Boxed</span> <span class='hs-varid'>a</span><span class='hs-layout'>)</span><span class='hs-layout'>)</span> <span class='hs-varop'>!</span><span class='hs-layout'>(</span><span class='hs-conid'>USet</span> <span class='hs-layout'>(</span><span class='hs-conid'>Boxed</span> <span class='hs-varid'>a</span><span class='hs-layout'>)</span><span class='hs-layout'>)</span>
-<a name="line-1164"></a>    <span class='hs-varid'>view</span> <span class='hs-conid'>BoxedTip</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>Tip</span>
-<a name="line-1165"></a>    <span class='hs-varid'>view</span> <span class='hs-layout'>(</span><span class='hs-conid'>BoxedBin</span> <span class='hs-varid'>s</span> <span class='hs-varid'>i</span> <span class='hs-varid'>l</span> <span class='hs-varid'>r</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>Bin</span> <span class='hs-varid'>s</span> <span class='hs-varid'>i</span> <span class='hs-varid'>l</span> <span class='hs-varid'>r</span>
-<a name="line-1166"></a>    <span class='hs-varid'>tip</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>BoxedTip</span>
-<a name="line-1167"></a>    <span class='hs-varid'>bin</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>BoxedBin</span>
-<a name="line-1168"></a>
-<a name="line-1169"></a><span class='hs-keyword'>instance</span> <span class='hs-conid'>US</span> <span class='hs-conid'>Char</span> <span class='hs-keyword'>where</span>
-<a name="line-1170"></a>    <span class='hs-keyword'>data</span> <span class='hs-conid'>USet</span> <span class='hs-conid'>Char</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>CharTip</span> <span class='hs-keyglyph'>|</span> <span class='hs-conid'>CharBin</span> <span class='hs-comment'>{-# UNPACK #-}</span> <span class='hs-varop'>!</span><span class='hs-conid'>Size</span> <span class='hs-comment'>{-# UNPACK #-}</span> <span class='hs-varop'>!</span><span class='hs-conid'>Char</span> <span class='hs-varop'>!</span><span class='hs-layout'>(</span><span class='hs-conid'>USet</span> <span class='hs-conid'>Char</span><span class='hs-layout'>)</span> <span class='hs-varop'>!</span><span class='hs-layout'>(</span><span class='hs-conid'>USet</span> <span class='hs-conid'>Char</span><span class='hs-layout'>)</span>
-<a name="line-1171"></a>    <span class='hs-varid'>view</span> <span class='hs-conid'>CharTip</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>Tip</span>
-<a name="line-1172"></a>    <span class='hs-varid'>view</span> <span class='hs-layout'>(</span><span class='hs-conid'>CharBin</span> <span class='hs-varid'>s</span> <span class='hs-varid'>i</span> <span class='hs-varid'>l</span> <span class='hs-varid'>r</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>Bin</span> <span class='hs-varid'>s</span> <span class='hs-varid'>i</span> <span class='hs-varid'>l</span> <span class='hs-varid'>r</span>
-<a name="line-1173"></a>    <span class='hs-varid'>tip</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>CharTip</span>
-<a name="line-1174"></a>    <span class='hs-varid'>bin</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>CharBin</span>
-<a name="line-1175"></a><span class='hs-keyword'>instance</span> <span class='hs-conid'>US</span> <span class='hs-conid'>Int</span> <span class='hs-keyword'>where</span>
-<a name="line-1176"></a>    <span class='hs-keyword'>data</span> <span class='hs-conid'>USet</span> <span class='hs-conid'>Int</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>IntTip</span> <span class='hs-keyglyph'>|</span> <span class='hs-conid'>IntBin</span> <span class='hs-comment'>{-# UNPACK #-}</span> <span class='hs-varop'>!</span><span class='hs-conid'>Size</span> <span class='hs-comment'>{-# UNPACK #-}</span> <span class='hs-varop'>!</span><span class='hs-conid'>Int</span> <span class='hs-varop'>!</span><span class='hs-layout'>(</span><span class='hs-conid'>USet</span> <span class='hs-conid'>Int</span><span class='hs-layout'>)</span> <span class='hs-varop'>!</span><span class='hs-layout'>(</span><span class='hs-conid'>USet</span> <span class='hs-conid'>Int</span><span class='hs-layout'>)</span>
-<a name="line-1177"></a>    <span class='hs-varid'>view</span> <span class='hs-conid'>IntTip</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>Tip</span>
-<a name="line-1178"></a>    <span class='hs-varid'>view</span> <span class='hs-layout'>(</span><span class='hs-conid'>IntBin</span> <span class='hs-varid'>s</span> <span class='hs-varid'>i</span> <span class='hs-varid'>l</span> <span class='hs-varid'>r</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>Bin</span> <span class='hs-varid'>s</span> <span class='hs-varid'>i</span> <span class='hs-varid'>l</span> <span class='hs-varid'>r</span>
-<a name="line-1179"></a>    <span class='hs-varid'>tip</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>IntTip</span>
-<a name="line-1180"></a>    <span class='hs-varid'>bin</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>IntBin</span>
-<a name="line-1181"></a>
-<a name="line-1182"></a><span class='hs-keyword'>instance</span> <span class='hs-conid'>US</span> <span class='hs-conid'>Integer</span> <span class='hs-keyword'>where</span>
-<a name="line-1183"></a>    <span class='hs-keyword'>data</span> <span class='hs-conid'>USet</span> <span class='hs-conid'>Integer</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>IntegerTip</span> <span class='hs-keyglyph'>|</span> <span class='hs-conid'>IntegerBin</span> <span class='hs-comment'>{-# UNPACK #-}</span> <span class='hs-varop'>!</span><span class='hs-conid'>Size</span> <span class='hs-comment'>{-# UNPACK #-}</span> <span class='hs-varop'>!</span><span class='hs-conid'>Integer</span> <span class='hs-varop'>!</span><span class='hs-layout'>(</span><span class='hs-conid'>USet</span> <span class='hs-conid'>Integer</span><span class='hs-layout'>)</span> <span class='hs-varop'>!</span><span class='hs-layout'>(</span><span class='hs-conid'>USet</span> <span class='hs-conid'>Integer</span><span class='hs-layout'>)</span>
-<a name="line-1184"></a>    <span class='hs-varid'>view</span> <span class='hs-conid'>IntegerTip</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>Tip</span>
-<a name="line-1185"></a>    <span class='hs-varid'>view</span> <span class='hs-layout'>(</span><span class='hs-conid'>IntegerBin</span> <span class='hs-varid'>s</span> <span class='hs-varid'>i</span> <span class='hs-varid'>l</span> <span class='hs-varid'>r</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>Bin</span> <span class='hs-varid'>s</span> <span class='hs-varid'>i</span> <span class='hs-varid'>l</span> <span class='hs-varid'>r</span>
-<a name="line-1186"></a>    <span class='hs-varid'>tip</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>IntegerTip</span>
-<a name="line-1187"></a>    <span class='hs-varid'>bin</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>IntegerBin</span>
-<a name="line-1188"></a>
-<a name="line-1189"></a><span class='hs-keyword'>instance</span> <span class='hs-conid'>US</span> <span class='hs-conid'>Int8</span> <span class='hs-keyword'>where</span>
-<a name="line-1190"></a>    <span class='hs-keyword'>data</span> <span class='hs-conid'>USet</span> <span class='hs-conid'>Int8</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>Int8Tip</span> <span class='hs-keyglyph'>|</span> <span class='hs-conid'>Int8Bin</span> <span class='hs-comment'>{-# UNPACK #-}</span> <span class='hs-varop'>!</span><span class='hs-conid'>Size</span> <span class='hs-comment'>{-# UNPACK #-}</span> <span class='hs-varop'>!</span><span class='hs-conid'>Int8</span> <span class='hs-varop'>!</span><span class='hs-layout'>(</span><span class='hs-conid'>USet</span> <span class='hs-conid'>Int8</span><span class='hs-layout'>)</span> <span class='hs-varop'>!</span><span class='hs-layout'>(</span><span class='hs-conid'>USet</span> <span class='hs-conid'>Int8</span><span class='hs-layout'>)</span>
-<a name="line-1191"></a>    <span class='hs-varid'>view</span> <span class='hs-conid'>Int8Tip</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>Tip</span>
-<a name="line-1192"></a>    <span class='hs-varid'>view</span> <span class='hs-layout'>(</span><span class='hs-conid'>Int8Bin</span> <span class='hs-varid'>s</span> <span class='hs-varid'>i</span> <span class='hs-varid'>l</span> <span class='hs-varid'>r</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>Bin</span> <span class='hs-varid'>s</span> <span class='hs-varid'>i</span> <span class='hs-varid'>l</span> <span class='hs-varid'>r</span>
-<a name="line-1193"></a>    <span class='hs-varid'>tip</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>Int8Tip</span>
-<a name="line-1194"></a>    <span class='hs-varid'>bin</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>Int8Bin</span>
-<a name="line-1195"></a>
-<a name="line-1196"></a><span class='hs-keyword'>instance</span> <span class='hs-conid'>US</span> <span class='hs-conid'>Int16</span> <span class='hs-keyword'>where</span>
-<a name="line-1197"></a>    <span class='hs-keyword'>data</span> <span class='hs-conid'>USet</span> <span class='hs-conid'>Int16</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>Int16Tip</span> <span class='hs-keyglyph'>|</span> <span class='hs-conid'>Int16Bin</span> <span class='hs-comment'>{-# UNPACK #-}</span> <span class='hs-varop'>!</span><span class='hs-conid'>Size</span> <span class='hs-comment'>{-# UNPACK #-}</span> <span class='hs-varop'>!</span><span class='hs-conid'>Int16</span> <span class='hs-varop'>!</span><span class='hs-layout'>(</span><span class='hs-conid'>USet</span> <span class='hs-conid'>Int16</span><span class='hs-layout'>)</span> <span class='hs-varop'>!</span><span class='hs-layout'>(</span><span class='hs-conid'>USet</span> <span class='hs-conid'>Int16</span><span class='hs-layout'>)</span>
-<a name="line-1198"></a>    <span class='hs-varid'>view</span> <span class='hs-conid'>Int16Tip</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>Tip</span>
-<a name="line-1199"></a>    <span class='hs-varid'>view</span> <span class='hs-layout'>(</span><span class='hs-conid'>Int16Bin</span> <span class='hs-varid'>s</span> <span class='hs-varid'>i</span> <span class='hs-varid'>l</span> <span class='hs-varid'>r</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>Bin</span> <span class='hs-varid'>s</span> <span class='hs-varid'>i</span> <span class='hs-varid'>l</span> <span class='hs-varid'>r</span>
-<a name="line-1200"></a>    <span class='hs-varid'>tip</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>Int16Tip</span>
-<a name="line-1201"></a>    <span class='hs-varid'>bin</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>Int16Bin</span>
-<a name="line-1202"></a>
-<a name="line-1203"></a><span class='hs-keyword'>instance</span> <span class='hs-conid'>US</span> <span class='hs-conid'>Int32</span> <span class='hs-keyword'>where</span>
-<a name="line-1204"></a>    <span class='hs-keyword'>data</span> <span class='hs-conid'>USet</span> <span class='hs-conid'>Int32</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>Int32Tip</span> <span class='hs-keyglyph'>|</span> <span class='hs-conid'>Int32Bin</span> <span class='hs-comment'>{-# UNPACK #-}</span> <span class='hs-varop'>!</span><span class='hs-conid'>Size</span> <span class='hs-comment'>{-# UNPACK #-}</span> <span class='hs-varop'>!</span><span class='hs-conid'>Int32</span> <span class='hs-varop'>!</span><span class='hs-layout'>(</span><span class='hs-conid'>USet</span> <span class='hs-conid'>Int32</span><span class='hs-layout'>)</span> <span class='hs-varop'>!</span><span class='hs-layout'>(</span><span class='hs-conid'>USet</span> <span class='hs-conid'>Int32</span><span class='hs-layout'>)</span>
-<a name="line-1205"></a>    <span class='hs-varid'>view</span> <span class='hs-conid'>Int32Tip</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>Tip</span>
-<a name="line-1206"></a>    <span class='hs-varid'>view</span> <span class='hs-layout'>(</span><span class='hs-conid'>Int32Bin</span> <span class='hs-varid'>s</span> <span class='hs-varid'>i</span> <span class='hs-varid'>l</span> <span class='hs-varid'>r</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>Bin</span> <span class='hs-varid'>s</span> <span class='hs-varid'>i</span> <span class='hs-varid'>l</span> <span class='hs-varid'>r</span>
-<a name="line-1207"></a>    <span class='hs-varid'>tip</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>Int32Tip</span>
-<a name="line-1208"></a>    <span class='hs-varid'>bin</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>Int32Bin</span>
+<a name="line-1132"></a>{--------------------------------------------------------------------
+<a name="line-1133"></a>  Lists
+<a name="line-1134"></a>--------------------------------------------------------------------}
+<a name="line-1135"></a>prop_Ordered
+<a name="line-1136"></a>  = forAll (choose (5,100)) $ \n -&gt;
+<a name="line-1137"></a>    let xs = [0..n::Int]
+<a name="line-1138"></a>    in fromAscList xs == fromList xs
+<a name="line-1139"></a>
+<a name="line-1140"></a>prop_List :: [Int] -&gt; Bool
+<a name="line-1141"></a>prop_List xs
+<a name="line-1142"></a>  = (sort (nub xs) == toList (fromList xs))
+<a name="line-1143"></a>-}</span>
+<a name="line-1144"></a>
+<a name="line-1145"></a>
+<a name="line-1146"></a><a name="Boxed"></a><span class='hs-keyword'>newtype</span> <span class='hs-conid'>Boxed</span> <span class='hs-varid'>a</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>Boxed</span> <span class='hs-varid'>a</span>
+<a name="line-1147"></a><span class='hs-keyword'>instance</span> <span class='hs-conid'>US</span> <span class='hs-layout'>(</span><span class='hs-conid'>Boxed</span> <span class='hs-varid'>a</span><span class='hs-layout'>)</span> <span class='hs-keyword'>where</span>
+<a name="line-1148"></a>    <span class='hs-keyword'>data</span> <span class='hs-conid'>USet</span> <span class='hs-layout'>(</span><span class='hs-conid'>Boxed</span> <span class='hs-varid'>a</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>BoxedTip</span> <span class='hs-keyglyph'>|</span> <span class='hs-conid'>BoxedBin</span> <span class='hs-comment'>{-# UNPACK #-}</span> <span class='hs-varop'>!</span><span class='hs-conid'>Size</span> <span class='hs-layout'>(</span><span class='hs-conid'>Boxed</span> <span class='hs-varid'>a</span><span class='hs-layout'>)</span> <span class='hs-varop'>!</span><span class='hs-layout'>(</span><span class='hs-conid'>USet</span> <span class='hs-layout'>(</span><span class='hs-conid'>Boxed</span> <span class='hs-varid'>a</span><span class='hs-layout'>)</span><span class='hs-layout'>)</span> <span class='hs-varop'>!</span><span class='hs-layout'>(</span><span class='hs-conid'>USet</span> <span class='hs-layout'>(</span><span class='hs-conid'>Boxed</span> <span class='hs-varid'>a</span><span class='hs-layout'>)</span><span class='hs-layout'>)</span>
+<a name="line-1149"></a>    <span class='hs-varid'>view</span> <span class='hs-conid'>BoxedTip</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>Tip</span>
+<a name="line-1150"></a>    <span class='hs-varid'>view</span> <span class='hs-layout'>(</span><span class='hs-conid'>BoxedBin</span> <span class='hs-varid'>s</span> <span class='hs-varid'>i</span> <span class='hs-varid'>l</span> <span class='hs-varid'>r</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>Bin</span> <span class='hs-varid'>s</span> <span class='hs-varid'>i</span> <span class='hs-varid'>l</span> <span class='hs-varid'>r</span>
+<a name="line-1151"></a>    <span class='hs-varid'>tip</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>BoxedTip</span>
+<a name="line-1152"></a>    <span class='hs-varid'>bin</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>BoxedBin</span>
+<a name="line-1153"></a>    <span class='hs-varid'>isTip</span> <span class='hs-conid'>BoxedTip</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>True</span>
+<a name="line-1154"></a>    <span class='hs-varid'>isTip</span> <span class='hs-keyword'>_</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>False</span>
+<a name="line-1155"></a>
+<a name="line-1156"></a><span class='hs-keyword'>instance</span> <span class='hs-conid'>US</span> <span class='hs-conid'>Char</span> <span class='hs-keyword'>where</span>
+<a name="line-1157"></a>    <span class='hs-keyword'>data</span> <span class='hs-conid'>USet</span> <span class='hs-conid'>Char</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>CharTip</span> <span class='hs-keyglyph'>|</span> <span class='hs-conid'>CharBin</span> <span class='hs-comment'>{-# UNPACK #-}</span> <span class='hs-varop'>!</span><span class='hs-conid'>Size</span> <span class='hs-comment'>{-# UNPACK #-}</span> <span class='hs-varop'>!</span><span class='hs-conid'>Char</span> <span class='hs-varop'>!</span><span class='hs-layout'>(</span><span class='hs-conid'>USet</span> <span class='hs-conid'>Char</span><span class='hs-layout'>)</span> <span class='hs-varop'>!</span><span class='hs-layout'>(</span><span class='hs-conid'>USet</span> <span class='hs-conid'>Char</span><span class='hs-layout'>)</span>
+<a name="line-1158"></a>    <span class='hs-varid'>view</span> <span class='hs-conid'>CharTip</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>Tip</span>
+<a name="line-1159"></a>    <span class='hs-varid'>view</span> <span class='hs-layout'>(</span><span class='hs-conid'>CharBin</span> <span class='hs-varid'>s</span> <span class='hs-varid'>i</span> <span class='hs-varid'>l</span> <span class='hs-varid'>r</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>Bin</span> <span class='hs-varid'>s</span> <span class='hs-varid'>i</span> <span class='hs-varid'>l</span> <span class='hs-varid'>r</span>
+<a name="line-1160"></a>    <span class='hs-varid'>tip</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>CharTip</span>
+<a name="line-1161"></a>    <span class='hs-varid'>bin</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>CharBin</span>
+<a name="line-1162"></a>    <span class='hs-varid'>isTip</span> <span class='hs-conid'>CharTip</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>True</span>
+<a name="line-1163"></a>    <span class='hs-varid'>isTip</span> <span class='hs-keyword'>_</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>False</span>
+<a name="line-1164"></a>
+<a name="line-1165"></a><span class='hs-keyword'>instance</span> <span class='hs-conid'>US</span> <span class='hs-conid'>Int</span> <span class='hs-keyword'>where</span>
+<a name="line-1166"></a>    <span class='hs-keyword'>data</span> <span class='hs-conid'>USet</span> <span class='hs-conid'>Int</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>IntTip</span> <span class='hs-keyglyph'>|</span> <span class='hs-conid'>IntBin</span> <span class='hs-comment'>{-# UNPACK #-}</span> <span class='hs-varop'>!</span><span class='hs-conid'>Size</span> <span class='hs-comment'>{-# UNPACK #-}</span> <span class='hs-varop'>!</span><span class='hs-conid'>Int</span> <span class='hs-varop'>!</span><span class='hs-layout'>(</span><span class='hs-conid'>USet</span> <span class='hs-conid'>Int</span><span class='hs-layout'>)</span> <span class='hs-varop'>!</span><span class='hs-layout'>(</span><span class='hs-conid'>USet</span> <span class='hs-conid'>Int</span><span class='hs-layout'>)</span>
+<a name="line-1167"></a>    <span class='hs-varid'>view</span> <span class='hs-conid'>IntTip</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>Tip</span>
+<a name="line-1168"></a>    <span class='hs-varid'>view</span> <span class='hs-layout'>(</span><span class='hs-conid'>IntBin</span> <span class='hs-varid'>s</span> <span class='hs-varid'>i</span> <span class='hs-varid'>l</span> <span class='hs-varid'>r</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>Bin</span> <span class='hs-varid'>s</span> <span class='hs-varid'>i</span> <span class='hs-varid'>l</span> <span class='hs-varid'>r</span>
+<a name="line-1169"></a>    <span class='hs-varid'>tip</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>IntTip</span>
+<a name="line-1170"></a>    <span class='hs-varid'>bin</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>IntBin</span>
+<a name="line-1171"></a>    <span class='hs-varid'>isTip</span> <span class='hs-conid'>IntTip</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>True</span>
+<a name="line-1172"></a>    <span class='hs-varid'>isTip</span> <span class='hs-keyword'>_</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>False</span>
+<a name="line-1173"></a>
+<a name="line-1174"></a><span class='hs-keyword'>instance</span> <span class='hs-conid'>US</span> <span class='hs-conid'>Integer</span> <span class='hs-keyword'>where</span>
+<a name="line-1175"></a>    <span class='hs-keyword'>data</span> <span class='hs-conid'>USet</span> <span class='hs-conid'>Integer</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>IntegerTip</span> <span class='hs-keyglyph'>|</span> <span class='hs-conid'>IntegerBin</span> <span class='hs-comment'>{-# UNPACK #-}</span> <span class='hs-varop'>!</span><span class='hs-conid'>Size</span> <span class='hs-comment'>{-# UNPACK #-}</span> <span class='hs-varop'>!</span><span class='hs-conid'>Integer</span> <span class='hs-varop'>!</span><span class='hs-layout'>(</span><span class='hs-conid'>USet</span> <span class='hs-conid'>Integer</span><span class='hs-layout'>)</span> <span class='hs-varop'>!</span><span class='hs-layout'>(</span><span class='hs-conid'>USet</span> <span class='hs-conid'>Integer</span><span class='hs-layout'>)</span>
+<a name="line-1176"></a>    <span class='hs-varid'>view</span> <span class='hs-conid'>IntegerTip</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>Tip</span>
+<a name="line-1177"></a>    <span class='hs-varid'>view</span> <span class='hs-layout'>(</span><span class='hs-conid'>IntegerBin</span> <span class='hs-varid'>s</span> <span class='hs-varid'>i</span> <span class='hs-varid'>l</span> <span class='hs-varid'>r</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>Bin</span> <span class='hs-varid'>s</span> <span class='hs-varid'>i</span> <span class='hs-varid'>l</span> <span class='hs-varid'>r</span>
+<a name="line-1178"></a>    <span class='hs-varid'>tip</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>IntegerTip</span>
+<a name="line-1179"></a>    <span class='hs-varid'>bin</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>IntegerBin</span>
+<a name="line-1180"></a>    <span class='hs-varid'>isTip</span> <span class='hs-conid'>IntegerTip</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>True</span>
+<a name="line-1181"></a>    <span class='hs-varid'>isTip</span> <span class='hs-keyword'>_</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>False</span>
+<a name="line-1182"></a>
+<a name="line-1183"></a><span class='hs-keyword'>instance</span> <span class='hs-conid'>US</span> <span class='hs-conid'>Int8</span> <span class='hs-keyword'>where</span>
+<a name="line-1184"></a>    <span class='hs-keyword'>data</span> <span class='hs-conid'>USet</span> <span class='hs-conid'>Int8</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>Int8Tip</span> <span class='hs-keyglyph'>|</span> <span class='hs-conid'>Int8Bin</span> <span class='hs-comment'>{-# UNPACK #-}</span> <span class='hs-varop'>!</span><span class='hs-conid'>Size</span> <span class='hs-comment'>{-# UNPACK #-}</span> <span class='hs-varop'>!</span><span class='hs-conid'>Int8</span> <span class='hs-varop'>!</span><span class='hs-layout'>(</span><span class='hs-conid'>USet</span> <span class='hs-conid'>Int8</span><span class='hs-layout'>)</span> <span class='hs-varop'>!</span><span class='hs-layout'>(</span><span class='hs-conid'>USet</span> <span class='hs-conid'>Int8</span><span class='hs-layout'>)</span>
+<a name="line-1185"></a>    <span class='hs-varid'>view</span> <span class='hs-conid'>Int8Tip</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>Tip</span>
+<a name="line-1186"></a>    <span class='hs-varid'>view</span> <span class='hs-layout'>(</span><span class='hs-conid'>Int8Bin</span> <span class='hs-varid'>s</span> <span class='hs-varid'>i</span> <span class='hs-varid'>l</span> <span class='hs-varid'>r</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>Bin</span> <span class='hs-varid'>s</span> <span class='hs-varid'>i</span> <span class='hs-varid'>l</span> <span class='hs-varid'>r</span>
+<a name="line-1187"></a>    <span class='hs-varid'>tip</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>Int8Tip</span>
+<a name="line-1188"></a>    <span class='hs-varid'>bin</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>Int8Bin</span>
+<a name="line-1189"></a>    <span class='hs-varid'>isTip</span> <span class='hs-conid'>Int8Tip</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>True</span>
+<a name="line-1190"></a>    <span class='hs-varid'>isTip</span> <span class='hs-keyword'>_</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>False</span>
+<a name="line-1191"></a>
+<a name="line-1192"></a><span class='hs-keyword'>instance</span> <span class='hs-conid'>US</span> <span class='hs-conid'>Int16</span> <span class='hs-keyword'>where</span>
+<a name="line-1193"></a>    <span class='hs-keyword'>data</span> <span class='hs-conid'>USet</span> <span class='hs-conid'>Int16</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>Int16Tip</span> <span class='hs-keyglyph'>|</span> <span class='hs-conid'>Int16Bin</span> <span class='hs-comment'>{-# UNPACK #-}</span> <span class='hs-varop'>!</span><span class='hs-conid'>Size</span> <span class='hs-comment'>{-# UNPACK #-}</span> <span class='hs-varop'>!</span><span class='hs-conid'>Int16</span> <span class='hs-varop'>!</span><span class='hs-layout'>(</span><span class='hs-conid'>USet</span> <span class='hs-conid'>Int16</span><span class='hs-layout'>)</span> <span class='hs-varop'>!</span><span class='hs-layout'>(</span><span class='hs-conid'>USet</span> <span class='hs-conid'>Int16</span><span class='hs-layout'>)</span>
+<a name="line-1194"></a>    <span class='hs-varid'>view</span> <span class='hs-conid'>Int16Tip</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>Tip</span>
+<a name="line-1195"></a>    <span class='hs-varid'>view</span> <span class='hs-layout'>(</span><span class='hs-conid'>Int16Bin</span> <span class='hs-varid'>s</span> <span class='hs-varid'>i</span> <span class='hs-varid'>l</span> <span class='hs-varid'>r</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>Bin</span> <span class='hs-varid'>s</span> <span class='hs-varid'>i</span> <span class='hs-varid'>l</span> <span class='hs-varid'>r</span>
+<a name="line-1196"></a>    <span class='hs-varid'>tip</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>Int16Tip</span>
+<a name="line-1197"></a>    <span class='hs-varid'>bin</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>Int16Bin</span>
+<a name="line-1198"></a>    <span class='hs-varid'>isTip</span> <span class='hs-conid'>Int16Tip</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>True</span>
+<a name="line-1199"></a>    <span class='hs-varid'>isTip</span> <span class='hs-keyword'>_</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>False</span>
+<a name="line-1200"></a>
+<a name="line-1201"></a><span class='hs-keyword'>instance</span> <span class='hs-conid'>US</span> <span class='hs-conid'>Int32</span> <span class='hs-keyword'>where</span>
+<a name="line-1202"></a>    <span class='hs-keyword'>data</span> <span class='hs-conid'>USet</span> <span class='hs-conid'>Int32</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>Int32Tip</span> <span class='hs-keyglyph'>|</span> <span class='hs-conid'>Int32Bin</span> <span class='hs-comment'>{-# UNPACK #-}</span> <span class='hs-varop'>!</span><span class='hs-conid'>Size</span> <span class='hs-comment'>{-# UNPACK #-}</span> <span class='hs-varop'>!</span><span class='hs-conid'>Int32</span> <span class='hs-varop'>!</span><span class='hs-layout'>(</span><span class='hs-conid'>USet</span> <span class='hs-conid'>Int32</span><span class='hs-layout'>)</span> <span class='hs-varop'>!</span><span class='hs-layout'>(</span><span class='hs-conid'>USet</span> <span class='hs-conid'>Int32</span><span class='hs-layout'>)</span>
+<a name="line-1203"></a>    <span class='hs-varid'>view</span> <span class='hs-conid'>Int32Tip</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>Tip</span>
+<a name="line-1204"></a>    <span class='hs-varid'>view</span> <span class='hs-layout'>(</span><span class='hs-conid'>Int32Bin</span> <span class='hs-varid'>s</span> <span class='hs-varid'>i</span> <span class='hs-varid'>l</span> <span class='hs-varid'>r</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>Bin</span> <span class='hs-varid'>s</span> <span class='hs-varid'>i</span> <span class='hs-varid'>l</span> <span class='hs-varid'>r</span>
+<a name="line-1205"></a>    <span class='hs-varid'>tip</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>Int32Tip</span>
+<a name="line-1206"></a>    <span class='hs-varid'>bin</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>Int32Bin</span>
+<a name="line-1207"></a>    <span class='hs-varid'>isTip</span> <span class='hs-conid'>Int32Tip</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>True</span>
+<a name="line-1208"></a>    <span class='hs-varid'>isTip</span> <span class='hs-keyword'>_</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>False</span>
hunk ./doc/html/monoids/src/Data-Set-Unboxed.html 1224
-<a name="line-1216"></a>
-<a name="line-1217"></a><span class='hs-keyword'>instance</span> <span class='hs-conid'>US</span> <span class='hs-conid'>Word8</span> <span class='hs-keyword'>where</span>
-<a name="line-1218"></a>    <span class='hs-keyword'>data</span> <span class='hs-conid'>USet</span> <span class='hs-conid'>Word8</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>Word8Tip</span> <span class='hs-keyglyph'>|</span> <span class='hs-conid'>Word8Bin</span> <span class='hs-comment'>{-# UNPACK #-}</span> <span class='hs-varop'>!</span><span class='hs-conid'>Size</span> <span class='hs-comment'>{-# UNPACK #-}</span> <span class='hs-varop'>!</span><span class='hs-conid'>Word8</span> <span class='hs-varop'>!</span><span class='hs-layout'>(</span><span class='hs-conid'>USet</span> <span class='hs-conid'>Word8</span><span class='hs-layout'>)</span> <span class='hs-varop'>!</span><span class='hs-layout'>(</span><span class='hs-conid'>USet</span> <span class='hs-conid'>Word8</span><span class='hs-layout'>)</span>
-<a name="line-1219"></a>    <span class='hs-varid'>view</span> <span class='hs-conid'>Word8Tip</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>Tip</span>
-<a name="line-1220"></a>    <span class='hs-varid'>view</span> <span class='hs-layout'>(</span><span class='hs-conid'>Word8Bin</span> <span class='hs-varid'>s</span> <span class='hs-varid'>i</span> <span class='hs-varid'>l</span> <span class='hs-varid'>r</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>Bin</span> <span class='hs-varid'>s</span> <span class='hs-varid'>i</span> <span class='hs-varid'>l</span> <span class='hs-varid'>r</span>
-<a name="line-1221"></a>    <span class='hs-varid'>tip</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>Word8Tip</span>
-<a name="line-1222"></a>    <span class='hs-varid'>bin</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>Word8Bin</span>
-<a name="line-1223"></a>
-<a name="line-1224"></a><span class='hs-keyword'>instance</span> <span class='hs-conid'>US</span> <span class='hs-conid'>Word16</span> <span class='hs-keyword'>where</span>
-<a name="line-1225"></a>    <span class='hs-keyword'>data</span> <span class='hs-conid'>USet</span> <span class='hs-conid'>Word16</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>Word16Tip</span> <span class='hs-keyglyph'>|</span> <span class='hs-conid'>Word16Bin</span> <span class='hs-comment'>{-# UNPACK #-}</span> <span class='hs-varop'>!</span><span class='hs-conid'>Size</span> <span class='hs-comment'>{-# UNPACK #-}</span> <span class='hs-varop'>!</span><span class='hs-conid'>Word16</span> <span class='hs-varop'>!</span><span class='hs-layout'>(</span><span class='hs-conid'>USet</span> <span class='hs-conid'>Word16</span><span class='hs-layout'>)</span> <span class='hs-varop'>!</span><span class='hs-layout'>(</span><span class='hs-conid'>USet</span> <span class='hs-conid'>Word16</span><span class='hs-layout'>)</span>
-<a name="line-1226"></a>    <span class='hs-varid'>view</span> <span class='hs-conid'>Word16Tip</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>Tip</span>
-<a name="line-1227"></a>    <span class='hs-varid'>view</span> <span class='hs-layout'>(</span><span class='hs-conid'>Word16Bin</span> <span class='hs-varid'>s</span> <span class='hs-varid'>i</span> <span class='hs-varid'>l</span> <span class='hs-varid'>r</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>Bin</span> <span class='hs-varid'>s</span> <span class='hs-varid'>i</span> <span class='hs-varid'>l</span> <span class='hs-varid'>r</span>
-<a name="line-1228"></a>    <span class='hs-varid'>tip</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>Word16Tip</span>
-<a name="line-1229"></a>    <span class='hs-varid'>bin</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>Word16Bin</span>
-<a name="line-1230"></a>
-<a name="line-1231"></a><span class='hs-keyword'>instance</span> <span class='hs-conid'>US</span> <span class='hs-conid'>Word32</span> <span class='hs-keyword'>where</span>
-<a name="line-1232"></a>    <span class='hs-keyword'>data</span> <span class='hs-conid'>USet</span> <span class='hs-conid'>Word32</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>Word32Tip</span> <span class='hs-keyglyph'>|</span> <span class='hs-conid'>Word32Bin</span> <span class='hs-comment'>{-# UNPACK #-}</span> <span class='hs-varop'>!</span><span class='hs-conid'>Size</span> <span class='hs-comment'>{-# UNPACK #-}</span> <span class='hs-varop'>!</span><span class='hs-conid'>Word32</span> <span class='hs-varop'>!</span><span class='hs-layout'>(</span><span class='hs-conid'>USet</span> <span class='hs-conid'>Word32</span><span class='hs-layout'>)</span> <span class='hs-varop'>!</span><span class='hs-layout'>(</span><span class='hs-conid'>USet</span> <span class='hs-conid'>Word32</span><span class='hs-layout'>)</span>
-<a name="line-1233"></a>    <span class='hs-varid'>view</span> <span class='hs-conid'>Word32Tip</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>Tip</span>
-<a name="line-1234"></a>    <span class='hs-varid'>view</span> <span class='hs-layout'>(</span><span class='hs-conid'>Word32Bin</span> <span class='hs-varid'>s</span> <span class='hs-varid'>i</span> <span class='hs-varid'>l</span> <span class='hs-varid'>r</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>Bin</span> <span class='hs-varid'>s</span> <span class='hs-varid'>i</span> <span class='hs-varid'>l</span> <span class='hs-varid'>r</span>
-<a name="line-1235"></a>    <span class='hs-varid'>tip</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>Word32Tip</span>
-<a name="line-1236"></a>    <span class='hs-varid'>bin</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>Word32Bin</span>
-<a name="line-1237"></a>
-<a name="line-1238"></a><span class='hs-keyword'>instance</span> <span class='hs-conid'>US</span> <span class='hs-conid'>Word64</span> <span class='hs-keyword'>where</span>
-<a name="line-1239"></a>    <span class='hs-keyword'>data</span> <span class='hs-conid'>USet</span> <span class='hs-conid'>Word64</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>Word64Tip</span> <span class='hs-keyglyph'>|</span> <span class='hs-conid'>Word64Bin</span> <span class='hs-comment'>{-# UNPACK #-}</span> <span class='hs-varop'>!</span><span class='hs-conid'>Size</span> <span class='hs-comment'>{-# UNPACK #-}</span> <span class='hs-varop'>!</span><span class='hs-conid'>Word64</span> <span class='hs-varop'>!</span><span class='hs-layout'>(</span><span class='hs-conid'>USet</span> <span class='hs-conid'>Word64</span><span class='hs-layout'>)</span> <span class='hs-varop'>!</span><span class='hs-layout'>(</span><span class='hs-conid'>USet</span> <span class='hs-conid'>Word64</span><span class='hs-layout'>)</span>
-<a name="line-1240"></a>    <span class='hs-varid'>view</span> <span class='hs-conid'>Word64Tip</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>Tip</span>
-<a name="line-1241"></a>    <span class='hs-varid'>view</span> <span class='hs-layout'>(</span><span class='hs-conid'>Word64Bin</span> <span class='hs-varid'>s</span> <span class='hs-varid'>i</span> <span class='hs-varid'>l</span> <span class='hs-varid'>r</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>Bin</span> <span class='hs-varid'>s</span> <span class='hs-varid'>i</span> <span class='hs-varid'>l</span> <span class='hs-varid'>r</span>
-<a name="line-1242"></a>    <span class='hs-varid'>tip</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>Word64Tip</span>
-<a name="line-1243"></a>    <span class='hs-varid'>bin</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>Word64Bin</span>
-<a name="line-1244"></a>
-<a name="line-1245"></a><span class='hs-keyword'>instance</span> <span class='hs-conid'>US</span> <span class='hs-conid'>Double</span> <span class='hs-keyword'>where</span>
-<a name="line-1246"></a>    <span class='hs-keyword'>data</span> <span class='hs-conid'>USet</span> <span class='hs-conid'>Double</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>DoubleTip</span> <span class='hs-keyglyph'>|</span> <span class='hs-conid'>DoubleBin</span> <span class='hs-comment'>{-# UNPACK #-}</span> <span class='hs-varop'>!</span><span class='hs-conid'>Size</span> <span class='hs-comment'>{-# UNPACK #-}</span> <span class='hs-varop'>!</span><span class='hs-conid'>Double</span> <span class='hs-varop'>!</span><span class='hs-layout'>(</span><span class='hs-conid'>USet</span> <span class='hs-conid'>Double</span><span class='hs-layout'>)</span> <span class='hs-varop'>!</span><span class='hs-layout'>(</span><span class='hs-conid'>USet</span> <span class='hs-conid'>Double</span><span class='hs-layout'>)</span>
-<a name="line-1247"></a>    <span class='hs-varid'>view</span> <span class='hs-conid'>DoubleTip</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>Tip</span>
-<a name="line-1248"></a>    <span class='hs-varid'>view</span> <span class='hs-layout'>(</span><span class='hs-conid'>DoubleBin</span> <span class='hs-varid'>s</span> <span class='hs-varid'>i</span> <span class='hs-varid'>l</span> <span class='hs-varid'>r</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>Bin</span> <span class='hs-varid'>s</span> <span class='hs-varid'>i</span> <span class='hs-varid'>l</span> <span class='hs-varid'>r</span>
-<a name="line-1249"></a>    <span class='hs-varid'>tip</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>DoubleTip</span>
-<a name="line-1250"></a>    <span class='hs-varid'>bin</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>DoubleBin</span>
-<a name="line-1251"></a>
-<a name="line-1252"></a><span class='hs-keyword'>instance</span> <span class='hs-conid'>US</span> <span class='hs-conid'>Float</span> <span class='hs-keyword'>where</span>
-<a name="line-1253"></a>    <span class='hs-keyword'>data</span> <span class='hs-conid'>USet</span> <span class='hs-conid'>Float</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>FloatTip</span> <span class='hs-keyglyph'>|</span> <span class='hs-conid'>FloatBin</span> <span class='hs-comment'>{-# UNPACK #-}</span> <span class='hs-varop'>!</span><span class='hs-conid'>Size</span> <span class='hs-comment'>{-# UNPACK #-}</span> <span class='hs-varop'>!</span><span class='hs-conid'>Float</span> <span class='hs-varop'>!</span><span class='hs-layout'>(</span><span class='hs-conid'>USet</span> <span class='hs-conid'>Float</span><span class='hs-layout'>)</span> <span class='hs-varop'>!</span><span class='hs-layout'>(</span><span class='hs-conid'>USet</span> <span class='hs-conid'>Float</span><span class='hs-layout'>)</span>
-<a name="line-1254"></a>    <span class='hs-varid'>view</span> <span class='hs-conid'>FloatTip</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>Tip</span>
-<a name="line-1255"></a>    <span class='hs-varid'>view</span> <span class='hs-layout'>(</span><span class='hs-conid'>FloatBin</span> <span class='hs-varid'>s</span> <span class='hs-varid'>i</span> <span class='hs-varid'>l</span> <span class='hs-varid'>r</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>Bin</span> <span class='hs-varid'>s</span> <span class='hs-varid'>i</span> <span class='hs-varid'>l</span> <span class='hs-varid'>r</span>
-<a name="line-1256"></a>    <span class='hs-varid'>tip</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>FloatTip</span>
-<a name="line-1257"></a>    <span class='hs-varid'>bin</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>FloatBin</span>
-<a name="line-1258"></a>
+<a name="line-1216"></a>    <span class='hs-varid'>isTip</span> <span class='hs-conid'>Int64Tip</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>True</span>
+<a name="line-1217"></a>    <span class='hs-varid'>isTip</span> <span class='hs-keyword'>_</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>False</span>
+<a name="line-1218"></a>
+<a name="line-1219"></a><span class='hs-keyword'>instance</span> <span class='hs-conid'>US</span> <span class='hs-conid'>Word8</span> <span class='hs-keyword'>where</span>
+<a name="line-1220"></a>    <span class='hs-keyword'>data</span> <span class='hs-conid'>USet</span> <span class='hs-conid'>Word8</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>Word8Tip</span> <span class='hs-keyglyph'>|</span> <span class='hs-conid'>Word8Bin</span> <span class='hs-comment'>{-# UNPACK #-}</span> <span class='hs-varop'>!</span><span class='hs-conid'>Size</span> <span class='hs-comment'>{-# UNPACK #-}</span> <span class='hs-varop'>!</span><span class='hs-conid'>Word8</span> <span class='hs-varop'>!</span><span class='hs-layout'>(</span><span class='hs-conid'>USet</span> <span class='hs-conid'>Word8</span><span class='hs-layout'>)</span> <span class='hs-varop'>!</span><span class='hs-layout'>(</span><span class='hs-conid'>USet</span> <span class='hs-conid'>Word8</span><span class='hs-layout'>)</span>
+<a name="line-1221"></a>    <span class='hs-varid'>view</span> <span class='hs-conid'>Word8Tip</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>Tip</span>
+<a name="line-1222"></a>    <span class='hs-varid'>view</span> <span class='hs-layout'>(</span><span class='hs-conid'>Word8Bin</span> <span class='hs-varid'>s</span> <span class='hs-varid'>i</span> <span class='hs-varid'>l</span> <span class='hs-varid'>r</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>Bin</span> <span class='hs-varid'>s</span> <span class='hs-varid'>i</span> <span class='hs-varid'>l</span> <span class='hs-varid'>r</span>
+<a name="line-1223"></a>    <span class='hs-varid'>tip</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>Word8Tip</span>
+<a name="line-1224"></a>    <span class='hs-varid'>bin</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>Word8Bin</span>
+<a name="line-1225"></a>    <span class='hs-varid'>isTip</span> <span class='hs-conid'>Word8Tip</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>True</span>
+<a name="line-1226"></a>    <span class='hs-varid'>isTip</span> <span class='hs-keyword'>_</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>False</span>
+<a name="line-1227"></a>
+<a name="line-1228"></a><span class='hs-keyword'>instance</span> <span class='hs-conid'>US</span> <span class='hs-conid'>Word16</span> <span class='hs-keyword'>where</span>
+<a name="line-1229"></a>    <span class='hs-keyword'>data</span> <span class='hs-conid'>USet</span> <span class='hs-conid'>Word16</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>Word16Tip</span> <span class='hs-keyglyph'>|</span> <span class='hs-conid'>Word16Bin</span> <span class='hs-comment'>{-# UNPACK #-}</span> <span class='hs-varop'>!</span><span class='hs-conid'>Size</span> <span class='hs-comment'>{-# UNPACK #-}</span> <span class='hs-varop'>!</span><span class='hs-conid'>Word16</span> <span class='hs-varop'>!</span><span class='hs-layout'>(</span><span class='hs-conid'>USet</span> <span class='hs-conid'>Word16</span><span class='hs-layout'>)</span> <span class='hs-varop'>!</span><span class='hs-layout'>(</span><span class='hs-conid'>USet</span> <span class='hs-conid'>Word16</span><span class='hs-layout'>)</span>
+<a name="line-1230"></a>    <span class='hs-varid'>view</span> <span class='hs-conid'>Word16Tip</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>Tip</span>
+<a name="line-1231"></a>    <span class='hs-varid'>view</span> <span class='hs-layout'>(</span><span class='hs-conid'>Word16Bin</span> <span class='hs-varid'>s</span> <span class='hs-varid'>i</span> <span class='hs-varid'>l</span> <span class='hs-varid'>r</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>Bin</span> <span class='hs-varid'>s</span> <span class='hs-varid'>i</span> <span class='hs-varid'>l</span> <span class='hs-varid'>r</span>
+<a name="line-1232"></a>    <span class='hs-varid'>bin</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>Word16Bin</span>
+<a name="line-1233"></a>    <span class='hs-varid'>tip</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>Word16Tip</span>
+<a name="line-1234"></a>    <span class='hs-varid'>isTip</span> <span class='hs-conid'>Word16Tip</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>True</span>
+<a name="line-1235"></a>    <span class='hs-varid'>isTip</span> <span class='hs-keyword'>_</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>False</span>
+<a name="line-1236"></a>
+<a name="line-1237"></a><span class='hs-keyword'>instance</span> <span class='hs-conid'>US</span> <span class='hs-conid'>Word32</span> <span class='hs-keyword'>where</span>
+<a name="line-1238"></a>    <span class='hs-keyword'>data</span> <span class='hs-conid'>USet</span> <span class='hs-conid'>Word32</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>Word32Tip</span> <span class='hs-keyglyph'>|</span> <span class='hs-conid'>Word32Bin</span> <span class='hs-comment'>{-# UNPACK #-}</span> <span class='hs-varop'>!</span><span class='hs-conid'>Size</span> <span class='hs-comment'>{-# UNPACK #-}</span> <span class='hs-varop'>!</span><span class='hs-conid'>Word32</span> <span class='hs-varop'>!</span><span class='hs-layout'>(</span><span class='hs-conid'>USet</span> <span class='hs-conid'>Word32</span><span class='hs-layout'>)</span> <span class='hs-varop'>!</span><span class='hs-layout'>(</span><span class='hs-conid'>USet</span> <span class='hs-conid'>Word32</span><span class='hs-layout'>)</span>
+<a name="line-1239"></a>    <span class='hs-varid'>view</span> <span class='hs-conid'>Word32Tip</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>Tip</span>
+<a name="line-1240"></a>    <span class='hs-varid'>view</span> <span class='hs-layout'>(</span><span class='hs-conid'>Word32Bin</span> <span class='hs-varid'>s</span> <span class='hs-varid'>i</span> <span class='hs-varid'>l</span> <span class='hs-varid'>r</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>Bin</span> <span class='hs-varid'>s</span> <span class='hs-varid'>i</span> <span class='hs-varid'>l</span> <span class='hs-varid'>r</span>
+<a name="line-1241"></a>    <span class='hs-varid'>tip</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>Word32Tip</span>
+<a name="line-1242"></a>    <span class='hs-varid'>bin</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>Word32Bin</span>
+<a name="line-1243"></a>    <span class='hs-varid'>isTip</span> <span class='hs-conid'>Word32Tip</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>True</span>
+<a name="line-1244"></a>    <span class='hs-varid'>isTip</span> <span class='hs-keyword'>_</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>False</span>
+<a name="line-1245"></a>
+<a name="line-1246"></a><span class='hs-keyword'>instance</span> <span class='hs-conid'>US</span> <span class='hs-conid'>Word64</span> <span class='hs-keyword'>where</span>
+<a name="line-1247"></a>    <span class='hs-keyword'>data</span> <span class='hs-conid'>USet</span> <span class='hs-conid'>Word64</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>Word64Tip</span> <span class='hs-keyglyph'>|</span> <span class='hs-conid'>Word64Bin</span> <span class='hs-comment'>{-# UNPACK #-}</span> <span class='hs-varop'>!</span><span class='hs-conid'>Size</span> <span class='hs-comment'>{-# UNPACK #-}</span> <span class='hs-varop'>!</span><span class='hs-conid'>Word64</span> <span class='hs-varop'>!</span><span class='hs-layout'>(</span><span class='hs-conid'>USet</span> <span class='hs-conid'>Word64</span><span class='hs-layout'>)</span> <span class='hs-varop'>!</span><span class='hs-layout'>(</span><span class='hs-conid'>USet</span> <span class='hs-conid'>Word64</span><span class='hs-layout'>)</span>
+<a name="line-1248"></a>    <span class='hs-varid'>view</span> <span class='hs-conid'>Word64Tip</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>Tip</span>
+<a name="line-1249"></a>    <span class='hs-varid'>view</span> <span class='hs-layout'>(</span><span class='hs-conid'>Word64Bin</span> <span class='hs-varid'>s</span> <span class='hs-varid'>i</span> <span class='hs-varid'>l</span> <span class='hs-varid'>r</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>Bin</span> <span class='hs-varid'>s</span> <span class='hs-varid'>i</span> <span class='hs-varid'>l</span> <span class='hs-varid'>r</span>
+<a name="line-1250"></a>    <span class='hs-varid'>tip</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>Word64Tip</span>
+<a name="line-1251"></a>    <span class='hs-varid'>bin</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>Word64Bin</span>
+<a name="line-1252"></a>    <span class='hs-varid'>isTip</span> <span class='hs-conid'>Word64Tip</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>True</span>
+<a name="line-1253"></a>    <span class='hs-varid'>isTip</span> <span class='hs-keyword'>_</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>False</span>
+<a name="line-1254"></a>
+<a name="line-1255"></a><span class='hs-keyword'>instance</span> <span class='hs-conid'>US</span> <span class='hs-conid'>Double</span> <span class='hs-keyword'>where</span>
+<a name="line-1256"></a>    <span class='hs-keyword'>data</span> <span class='hs-conid'>USet</span> <span class='hs-conid'>Double</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>DoubleTip</span> <span class='hs-keyglyph'>|</span> <span class='hs-conid'>DoubleBin</span> <span class='hs-comment'>{-# UNPACK #-}</span> <span class='hs-varop'>!</span><span class='hs-conid'>Size</span> <span class='hs-comment'>{-# UNPACK #-}</span> <span class='hs-varop'>!</span><span class='hs-conid'>Double</span> <span class='hs-varop'>!</span><span class='hs-layout'>(</span><span class='hs-conid'>USet</span> <span class='hs-conid'>Double</span><span class='hs-layout'>)</span> <span class='hs-varop'>!</span><span class='hs-layout'>(</span><span class='hs-conid'>USet</span> <span class='hs-conid'>Double</span><span class='hs-layout'>)</span>
+<a name="line-1257"></a>    <span class='hs-varid'>view</span> <span class='hs-conid'>DoubleTip</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>Tip</span>
+<a name="line-1258"></a>    <span class='hs-varid'>view</span> <span class='hs-layout'>(</span><span class='hs-conid'>DoubleBin</span> <span class='hs-varid'>s</span> <span class='hs-varid'>i</span> <span class='hs-varid'>l</span> <span class='hs-varid'>r</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>Bin</span> <span class='hs-varid'>s</span> <span class='hs-varid'>i</span> <span class='hs-varid'>l</span> <span class='hs-varid'>r</span>
+<a name="line-1259"></a>    <span class='hs-varid'>tip</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>DoubleTip</span>
+<a name="line-1260"></a>    <span class='hs-varid'>bin</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>DoubleBin</span>
+<a name="line-1261"></a>    <span class='hs-varid'>isTip</span> <span class='hs-conid'>DoubleTip</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>True</span>
+<a name="line-1262"></a>    <span class='hs-varid'>isTip</span> <span class='hs-keyword'>_</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>False</span>
+<a name="line-1263"></a>
+<a name="line-1264"></a><span class='hs-keyword'>instance</span> <span class='hs-conid'>US</span> <span class='hs-conid'>Float</span> <span class='hs-keyword'>where</span>
+<a name="line-1265"></a>    <span class='hs-keyword'>data</span> <span class='hs-conid'>USet</span> <span class='hs-conid'>Float</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>FloatTip</span> <span class='hs-keyglyph'>|</span> <span class='hs-conid'>FloatBin</span> <span class='hs-comment'>{-# UNPACK #-}</span> <span class='hs-varop'>!</span><span class='hs-conid'>Size</span> <span class='hs-comment'>{-# UNPACK #-}</span> <span class='hs-varop'>!</span><span class='hs-conid'>Float</span> <span class='hs-varop'>!</span><span class='hs-layout'>(</span><span class='hs-conid'>USet</span> <span class='hs-conid'>Float</span><span class='hs-layout'>)</span> <span class='hs-varop'>!</span><span class='hs-layout'>(</span><span class='hs-conid'>USet</span> <span class='hs-conid'>Float</span><span class='hs-layout'>)</span>
+<a name="line-1266"></a>    <span class='hs-varid'>view</span> <span class='hs-conid'>FloatTip</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>Tip</span>
+<a name="line-1267"></a>    <span class='hs-varid'>view</span> <span class='hs-layout'>(</span><span class='hs-conid'>FloatBin</span> <span class='hs-varid'>s</span> <span class='hs-varid'>i</span> <span class='hs-varid'>l</span> <span class='hs-varid'>r</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>Bin</span> <span class='hs-varid'>s</span> <span class='hs-varid'>i</span> <span class='hs-varid'>l</span> <span class='hs-varid'>r</span>
+<a name="line-1268"></a>    <span class='hs-varid'>tip</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>FloatTip</span>
+<a name="line-1269"></a>    <span class='hs-varid'>bin</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>FloatBin</span>
+<a name="line-1270"></a>    <span class='hs-varid'>isTip</span> <span class='hs-conid'>FloatTip</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>True</span>
+<a name="line-1271"></a>    <span class='hs-varid'>isTip</span> <span class='hs-keyword'>_</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>False</span>
+<a name="line-1272"></a>
binary ./monoids-0.1.35.tar.gz
oldhex
*
newhex
*1f8b0800000000000003ecbd697bdb38b2287cbe5efd0a9ccc3c2d292d29deb29cbced3c761ca7
*e33bce32b6337d67faf4249444d93ca64885a462bb3b737ffb5b0b5612a4e4254ef75c6ba66392
*000a05a000140ab54cd3248dc6797f65b03a587ff8e03fbec66f057e8f1f3ea4bff02bffa5e7d5
*d5d5478fd7d7371eafacffc7caeaeac6c6fa7f88875f059bd26f9e174106a85c174eb9717f90df
*d41dfffdbd9ddd3787bb375b07f6c7a38d8dbaf15f7bfcf07169fcd7361ec1f8df4a27fe3f3efe
*3be9ec228b8e4f0ad11975c5dacaca7f89ddf159908dc55fa66151b4b6e358507a2eb2300fb3cf
*e178d06a1d84e3282fb268382fa23411413216f33c145122f2749e8d42fa328c9220bb1093349b
*e63d7116152722cde86f3a2f5ad3741c4da25180007a22c842310bb3695414e158ccb2f4733486
*87e22428e09f1080c4717a1625c7629426e3080be558a805483e6db504fcee0b17ab5ca41385ce
*281d87620a430d8d280240136106c3f43326c90e2020422469118dc21ee4887211033c0463579a
*8c4b1841a5a33888a66136a8c3046ab47a436102cd1ccf013b8d8c4441a374796424048392908d
*1da7a3f9344c8a400dd803188b145232310d8a308b8238d7fd2ea1d0905161ab31ba8d6fc2888a
*638624988688da5e1e0423f1bfd324cc017793466341b5e926260c31cd7240e0420c43a420684d
*2ac2640c5f43241640689a16a1e09e021a1c03a69f35821348e6bec9d34971864424c94be4b370
*84f4054523a4ba0c292b611acb736ec7d1abbd4371f8f6e5d14fdb07bb029edf1dbcfddbde8bdd
*17e2f9dfc5d1ab5db1f3f6dddf0ff67e7c75245ebddd7fb17b7028b6dfbc80af6f8e0ef69ebf3f
*7a7b70d8bab77d0825ef51c2f69bbf8bddfff3ee60f7f050bc3d107bafdfedef0130807eb0fde6
*686ff7b027f6deececbf7fb1f7e6c79e0000e2cddba3d6fedeebbd23c876f4b64795568b89b72f
*c5ebdd839d57f0bafd7c6f7fefe8ef54dfcbbda33758d7cbb707ad6df16efbe0686fe7fdfef681
*78f7fee0dddbc35d81cd7ab177b8b3bfbdf77af7c5006a871ac5eedf76df1c89c357dbfbfb6e2b
*5b6f7f7ab37b80a8db4d14cf77c5fedef6f3fd5dac881af962ef6077e7085b639e76a0e300bdfd
*5eebf0ddeece1e3c405fec425bb60ffede93300f77fffa1e3241a278b1fd7afb47685a67418fc0
*90ecbc3fd87d8d2843371cbe7f7e78b477f4fe6857fcf8f6ed0beae7c3dd83bfc1b675f8ff89fd
*b787d459ef0f777bad17db47db543180809e8264787efefe708ffa6cefcdd1eec1c1fb77477b6f
*df7461787f825e011cb7a1e80beadcb76fb0a94023bb6f0ffe8e40b10fa8ef7be2a757bbf0fd00
*fb937a6a1bbbe0107a6ce7c8ce06f541071eb54c1bc59bdd1ff7f77edc7db3b38ba96f11ca4f7b
*87bb5d18aabd43ccb047d5c2e0439defa9c9384480558b1e2d82edd1408abd9762fbc5dff6106d
*991986fe704f920975d9ce2bd9dd835665fd2fedff8761319f0de293fc26f79845fcdfeaa387a5
*fd7f7dedd1caddfe7f1bbf3ffde783799e3d80dde941364f4e82fc348ce3d63301dbf33c0ec56b
*dc2c3b53f8b72bce60f90e5b90164d6769568817f6ae70081f634ac5cce2e953b1f75674baea7d
*1356ee49308f0b0458a5c2bbdfb7fa95e6bf7c1d8c826110df541d0bf8ffc7eb0fd74bf37f6375
*e5f1ddfcbf8d1f72674fffd7ff426e4a8e7deb73982183f4943e325db4626043933ce46fcf0f5f
*acab2ffd4914874fe1a33c39b6823930609904298f12db03799ac0b500f9ef307bea4b173f84a7
*f877eb1832c683513a7dd682e1194671545c7089f01c58b88838d9b875924ec359702cd13a298a
*d9d3070fa0549a04632cfd200b03e0185b70ca088fd34c82781114410f56b6e2a427de00539cc1
*292486c7a09867412cf683e4780e40c5bb2c1d85c02b26c7c08604193eb4f28b249de551ce905e
*738ff598db0ce2e857e06091b5a526327b1e88e3105e00f034980142c4f14f32e8f6b3343b6d8d
*c37c9445335c439fde10487d7c78ca5c72f960a74763388fe271bfb898859c53aee134f7fb8a0a
*8478b6b93a586bb5fa7d310b46a7d033b93883735390c060004f3de67342129ec15903462b814e
*6b4de2e0580c2f8a10b7083a96380dc521183c87e4434a16c0c1079f61c88321ec391d53aedb62
*4813780eb3220b432fa4973ab904c99453906601f45b1cc665383b782049e3c13b993e00cc906a
*2268ad0b5341e80208869917d33a70f07734cf3220d7c1e1d1eb122428a7d0faeb3c1a9dee9c84
*a3d332a423e88a81492e813009800e832a6054bcbd740409a5e29857a1908593381c617e6fe903
*9d5c8261ca597d9c87a36a43ce0bec5e48aaf6287e7cb629d6158869513b42af6976df2fc18002
*5da2d194b2c3dc20e2441296d408e7eb2c4e613d18f799b8f2720d6f750e26cbdcc028d5a6bf73
*9db0d4cc20893a87eb5775c2cb14a670b9a6dd84e0c8e4800ff3948998a4a7e2251cc7819b8aa3
*6116641790c273751cce60c2e54f051d8087019c92a1d736c477df891fc4c660adc7096abdeb03
*9e5990639e95c1c375ceb63278b4d2a36c4196c1c99b12d754da3a27592b4e291d8fffa66b9f52
*ee9d77eff8f32c85337c9f79479946c4f323ad5770d8f77c82393245e1088a026a926719aec39f
*c3c1fe3f1e3f5994e7607fd797e5252f1eea7b96ce67a5d71a4428e9707e1c58c8f32a3dd81ea3
*20e673584d98cd62926d79d276787070d3a9a6f93090697b7a712da7ec87e7086d7048c2ae7769
*1ec959eccff6fee8e593c18b106562d526a94c3fa5d9b85a13cdbdea5720d9a8bec16fb36a9103
*dab4aad5cbef839d134f77abc49f60bfa9241e86f1a4fad13b6cef13a77b0e94dc4cbf0d9ea769
*1c06a53c4042e9141886d2d7d744edde8f83ed79914ea157462fa2c924c46d200a8a4ae580fb34
*1a3c8f0a387dfb52fe128740c6be943761900d8eb2c89fc80c8d2fc91912f3f9284b6744979018
*4d042d61ce6e4cab8ebb1299645e29fe8b578ad5c18a5c8b66b3be5c139f8afe8bd71f9efffd68
*1765256f7edc5c752ab2376b4f4526992b5a514bd2aabf9e9750c3eec1d1c1ee6ea91e7b03afd4
*a212b18ed5c1aa6acc9abf8e77db07dbfbfbbbfba51a785bf540c704c67e55615f03f968f7ff1c
*95a012bbe0010adf11e69a82b956071338901248877da842b6d88ea52af8ebfbbd9dbfecbcdadd
*f94ba91e9b47f0d4639297eb9c83dd97fbbb3b28badbe4c12fef3ce5991864db192c1ac0f546a3
*322d00eb5147098a2b51b4b65e476b400787bb3b9beb0eec2ac3d195c8eaddb3ca72f8e0ff9f0f
*956c8ded96cb1c2e579cdd410b3925e16b302430d5af68aaaf99c2af8ff62502f0cff1c9c84afd
*09668fe84f92b40f678da43f9ef3be10f611d5acc0f659e0081acab9ffbeb94acf284eddde7bb3
*7b7058a220c5497117ba754ee6c9303da74e1e1570200de331407ebb062963f892f747276130bb
*933af97e25f90fd2cf8d2b015cfefe7f6d7d75e3eefeff367ebef16796f7e6ee0016c8ff1e3d7a
*b45196ff3fbe93ffdfceaf7f833f3c0a7fc17f98fbc5855a3cb5cf5b9064f40d20690dd6857e55
*e700b2edb37491213c3f7cd162e8afb5fc10bfdb857ca2432870a8a48704c8111e42ea3bd89154
*3a6cf8f406ac3cd7b54bc2ad5cb4793b6de3d5743e9fd1d5479bdad386033c9e2ee9bc7f931dd9
*6fb5e4fd8be93cde8a3bc24ea83f7ff58439e1f6c471121ec31eacdef2f9b0c8825121dfa75132
*cfe5b30bca8681dc8c7c9c2763fd7c9c85a388f3e81b22753f548fa227079ddf5a7f8a26e37022
*3c1c8faf8cc5e1fc09c62a0200513289ce63f1487ca4667d24f9cc17f13a4aa2691093a4260e8b
*10252df089a5316dd93f6d54396853b9766b1407792ec5b122109bcfb847e1915b892d06d08114
*0188284189297f97f0f0162c10fd6722a0af04d87c33097a404a89a2e540db94107e0db394e537
*aa91620889f0368bf145e51f0a954b57c03955065d6288fdc6d2059488dbcded1ce27bd76ab441
*07930642be0ec471581ccad33115d2d8e1db50e6ef40d3c490b93853e94b448ec57676ddef58ed
*a3ae7e95ece220bf525e0d40e3a2be0cadf280d3832a4e6ab80d3a2fe6889f1f174a1be80f8409
*7e6b3501449aafed5c4c2b01d4320e2e683a185f87aa50c7a28b6e89fe0dd9d3844682973358d2
*bb334fc53122eb591320c199055fc4d639f4e1c5167d20c840cac748c5fc8f93f1bf55465a487c
*39192793c213e15c7ca4121fc5055231e7818f703208a1b1172a13d6cf794ca2cc7d61833f871c
*6912aa02e7d658f9db6c466e3f3d16c7f6c0e18773ddeff886f5e3df8ec1a86b67b5266539bb6a
*65d7a109aaf4bcabf2a946742b24563b6a9dddf3998b367ed0f8e10ba2817f3ba631120d9955e2
*56ce6bb546a1cdf8519d843565558d71d0aeed6d6f2388c89d56d017dd0c7abbd0b3a1dcfd2ab3
*6c483577a9f76533b8585767b4ba5f6e5ab65ce2aa6d6311e7f8f905e4c9ed265202cd5bdd1ef3
*09d1376f95163b6565eb9a0afb3bc082d2758bd453a2bdd899a6056ed3cc9a676096163e9d506a
*8f59e9ccb7a18b9cb318564a5b64db04c1de40bb16afd130c641ed187bb611ee40b38bf0bbb589
*34f14557a334c33bb973c9faaee9c8fa86d462bd5668cd2d2e29a9b9bc9fdc6c40dd52a1e508ce
*2a51b3c75a394a04677196a556197ab23e0e4b085688ce0560915333103fdddde4f9cf7bfed797
*66372303683effaf3eda585b2debff3c5a59bb3bffdfc6efb7fe9fc4fef69b1fdf6fffb82bdec3
*4c1c45633c04ebdbc69e38ba98856f674c11f0fa320ecf23c881f7f1e17991cb43232a4e4c31eb
*0e3292a195b104ea6530851337beedbc7b27fed4ff57eb86cfce1e29049ceecb17d1ae2c0233a0
*9e8c235240c944491881f99e1fbee8e7c505090a4a12095116425465100b84106529c4b6686b9c
*db626bb4459a08902bcfa16f2ffa5e35a11eac76d1e8447dc8c5e7209eb3123ec2448d1fd1de8d
*c32941ec91521197384dd2b35c9ca467a4883f9944a308108d61cf9ecdf05fd19697b0240e21f5
*8211096c02342ac8cfd00682113f8c70550e1cf423b40a2800f9f8629a6633a811cd13a222274c
*a122208a8874542039b455a008ed13a8e41e2bfca43151a97eb8d7939a51063fb42a40790da0ad
*1b22e27052f48bb4cf161f84f798ed5bf02ba68a4ceffcb95101224314b731089f5442b001c812
*a693c1579502393a145e41907dab0e6dbb2f741925df7181f4041281120305332e6fde8f52f38c
*3b9307b038ca60dcd1aa25d495fc25bcc83bf84f0fb7527ce8ca94bf111d76f80fa5f2a34ac76b
*ff271dfa9752e9a96baa2deb47f478b4c27213b48680caa03f68219566dae9fac9912e6d935e8c
*de6e4d56bc947572924a55e788ae7be5f74fc0af459308a6a3c911e4a4fde481682ec36bca5b4a
*7200e590aeb844c77ceda1edcf386ed7d56f72924ec51303e589e82c5d743ff8f5024bd25fa7f6
*22dd399927a7f992400c12f8062854ca5329d43e111dfcf789617b74a7999b7da7106b011ea182
*40e77518e473187ad885f4570f2473dd5883fe61f8691ed24206dd167e72ead3697036fc54d7fe
*c3b0e0b245a96c81c56ac9662f2964497e720acbc40eff6d00f13a984910f0540681891dfe5b07
*42962f17a69254acd2a14a2142e56f50ab34c7287b0ce57aceb4d9c37f6cfc7c8b1d0bb8a65501
*575b2f0752b08b0b9a12ec9a056c641d0d6867c43511be3e7d0a0b0e0b6e151cfcd609c54759f5
*4731ede279a3234bf49f89b08bffd2e354953d4a997358aeecd400d0b5e3dabb3c849106336d95
*f09fa01099309a8869389d15171692f08993511f40a068d72ae8a032b1f2b9b9fc2b9b3ea3e94e
*e725c85edd7c8350cdb529685170b0de54f97839139dff26f1799ea423d8b20762e21c13350ab4
*1c2d40a09ca754bdd5ab5837d4350b329c1dd9d9493241bb199da50b89044d2d78d5b9c3bb4b15
*51da427cd851c2a6d0ba72a64348d7b6be3b2a020c53d9cfa35fbc75e1f74d31aa697906cc33aa
*7320744558fef55a0b2be4022d3e8b90ceec1a838eb58e7f4692f6a153c9b429c21adc68b59ac3
*9ae0b6ddbb0754fb03d77631aa4142a6d5f74ba96e5f057231f7c197499bf8e09fc8fa6d203303
*79ed4779e1ada9433b4a6d53286d53dd5535d4b4a81ab9b77caea9c9246fd24bef737799c64199
*c65a11e6696da53a15ea3c851acb0b7bb54aabbe0ac948965161b1772ea2120d330b19d592af95
*0e1845bd70711fc0ae958eccb241bb9e7b22290c2b2e0f2cf9291cfa9298cccec918fb1498713c
*06c2492a82c3feb97d6a6c25e119a1881c3bec229bfcf09b62e271ff19897f89e5e70e9532035e
*d317955c4b133c8e11b568a070f4d306d7a068a0110d9369539c2e45242504ae402c5cb3218946
*04ed6c9b225a8822d0c4310a3587e91cb519aa885e8d90a4444111cf180ff28d44f53759001094
*8fbf99f3dfe5494b965b485c9e7c9be2f3b2c415020cd9670cc84f5faa92051456cdb60c2a7e3c
*ae4066aafa8584e6cbe8df5f5d4cebb15c86c68a2c0c8a5cb489c36ae3b9a38d9c4d1b0b1f91ff
*8b10922fd239b91a0160862fa3dc81ccaf7c7e284f10c729726ec54996ce8f4f3097d6e7b13088
*a3d350b4d132a2ad29968faa23c9613d617ae5c72ab936b3bb2cd2a8f2b33503509bdbc3ec4d35
*fffba49ee3236e5e61efa761aeb3c4f036e257c9eb627709e618d258d22399e4279a4bb6d17688
*69bb228f1c47593842516591d20a85d4882245daee6cd26b65e630671d037beae0573e60c9d39c
*2c65137d34f61200cad4a5138cbd7fec0aab3aa2ed4a05d5630e1de050347e5950e503cb1280b0
*732b706a28f09af06ab193435b0fb43a2a782031e53d478d7a60f5678d9ea89eafdd2c159cdde3
*db25bb854e70b510ad2db01e6e15613c9584cb8c146c7295c2f2ccb144e9c05371c19a6b8b8a4a
*b6df57396dd24bc138f541905beb555b5f62459701735a03449f389680f1b902a3c2b65c0f4c15
*19b5983a22f3ea92e8113791642921507ed15352023a412d045ae4cdca794ccdd87bb30fe4ed8a
*edf946306bc0a96699b61193786436128c82bc2fb06acfdcaabff585ec2dff7cf7ff643775832e
*8016dcffafadaf96fdffad3f7c78e7ffef567e3811de9217acc30f3fbedab14cb7f082161864bd
*e6682d01cfbd7e8d06804f9f80e0ddec3569d3853f19f7fedeeffa45477bcea0c3cdeb77473b79
*972fd2b1d80bbcd40873bebdb6aeac451e4e2121c848136c20763f87d9051d7082f1bb789eb7c5
*598662fab108323cfed385b73900a9db9e5c8ce7a1629b8dafbfcf882530cf9d67cf36bbacd4db
*9ea2c2785bdff1034ff48376bb929c0517836c5e00b7940f60517df07f47a31c48e8c159741a3d
*18c6e9f183599a17f903645ddfcca743c8b7fae019c3ba497a70aecdb575b77b636e9b366016e8
*10f9b60f9d8cd6d0685bad0b6326e871cf77fce464d38f2fa007d1ccd3faf4126d13eb8d2518a9
*af671ca139cbd747951b3a76ab71c00e732ad781a55c3f1d9a2b61785926bfbcbac6bbd0254ac0
*3c2a425307bd2e57c6aa67a9523f65511166a62a7e5fb29455992c77f9cbeaaf7b2bedbba13ddc
*dd51452ca72c8377b05295f35f9dd658d97f650b96ab243a41ef28b0ce486d7c7907db29591b4c
*7bcade86393a392fe1ecad0516ea13f0c5e1310e9327a1fa716a43634dee69775136d2c5b5b329
*dcec5c3f4f7f69ce00acf7c5304438b24702715f7486e27bbe38eae0ebb00baff434ea6ec9be71
*702a2f497835ac6bf524fa8af89a5d5ad1ea4aaa9e902d004cbf479cef936c4ce28d2d18d6b7c0
*57d7424caa9fab8df0b7de5372c17096f3370c6c05746988b7455b6d0aa4f24662710909b6d361
*0a278db64bfa6ddad4f5c64c5b03a9ea09d1a629d336fb32eaf1d15e2cb7623997aa7805d5bd8c
*aef89ee93d4b04a68dfa5be6e4e01ecfba8b3352074346859054c8ee59b5e9596d576c60d55458
*ce50ae4835d6ab854f55da3bb15db5f33dabe4aca2b2a8c0e551238ec0c6893f4c4c1a039d749b
*b210a29345a628fe75ced8654c45be7066555787baf2cb4fea3a08759466f267a51a5d42a9cbb7
*6814ebca55fbdde49c60cedacd5641e81ce22d07b4125a5ae8dd2e7076bb0e6fc74790692ed0f6
*72d9e2957ead00f2f3811aba3e37583b71e2e276a8982cf8f788f048ba9783b07f6d08cca31e89
*7099b267b52d41a614fe3b82413e5b0e8f5a58fb37084b329292c33c0278d7c2ec2ad0923a82ba
*c6e857605d830e3c0bc8b528a2dace9b18cf6a8bbf0ad41ba2972ab67eb88de71b53a7d1eeaa63
*eaddab976977d9d21544cb709652f0f2b2ea7871b23c87a8b22f73626ade812da3af25f8735f17
*f8012cbb83d714afdb7eadec4d6c5a4db6459b6f4db1eade6b65346a7ddf5a9cfa87fbf9e4ff4c
*f737e706eaf2fe9fd61f6eacdef97fba8d5fc3f82b779bd7be095a70ffb3f170a31cffe1e1c6e3
*3bffefb7f25b68ff29aa169fa2e6c247786c3eb5cd1999f1bd61d5aa1718c52742f3a1926de9e1
*289d8563fcf8b7208b108f6f63265a3231b9d6fdd1fa57b93a4ad2a46fae8fec0b23b18d469d7d
*a3184506a346b68417dd01ba6f4f13f4f54a861cb489a265071a98ca8b20d9075afdae8d7aec6d
*116018a6288162c985380b2e72a93b9785c53c4bdaa4201ac83ba8b618cec99c338ea6c045b215
*678afe1fa042c01b6961f095ef7f3ca6913edb49757d6365434757111cb3518fae871aadcae650
*6af63bd692f8cdf930030ef63d94d76688d83dd6072d3a308e357ab6a78baef79a48dd42d80ea6
*7d1739c2e785cb27b93713b5d3f59b62fd7eee32ee2cec4a823dab8471cf7fe52b1f125ed35427
*554f19956d1852acba0035bc27d1f98096175bf966abb4c06cc11752e8858505dde259c6e70497
*9618a98dbb85338c569c72a6e9d6a0b29091c5759ca708545a761b077cd280bd0846a77d8a70c7
*c1ede48246c12aa2bcc085cec134e5f07878b34ed10332be5a1f404784b963826e0cc375c43ab2
*5237c6e514fe700a85600b80ed2bcd95813906a6a3e87630991334a5cfd2196c6fe8a3edc2d54d
*a57a65c8bc362e39f26600d72058bb31bc07c0c4524910a7c75ad915e3922417d3144ef95697c8
*d87f143870aa9773bda2b3907a1cc6d1108b84a850fb19b941319927d21f9b740f0cb3905c36e4
*298f6da74b014086a8888d8364ed94b401c4b1f12c006568b3807d0e9090fa56594e00b0457c9d
*316511396f0a798fc0a8d35f0fe1be8c32680602dc0fb03d300452f78d6e54b6822d798982b731
*6d7c1f789d109c90ae3890328c87d411564e117ad45d5132835d4b76acc416695c065d815e422f
*091cf5527a40d0fb2716e19e86019f6366848d010ae79a4c0032d42ea1e7d06cde076de376a218
*136f02fb629a42a33565c96d81bc2244b972ac802047411ef64c60c8f00c2ac1b03b8822a6e56a
*e04e204f0c7d00c434cfe99e02e7086e2b5161dc440409000e38f0a3f4c159b1b47daa7803b4b2
*254a75bd27b2d84276e4085e4bbee360e7020a40dd515a056000884950f354ba8a8b0a56bb3796
*b14a113c24cf0f5cd629491d2703933a9e1fcc5c2640a4290fc02ddb5b53c1bb2c746a48137f1d
*e3390b2dfcce24081ed9489a46704b4cf3361911b69f1406b3b259ee5c711104cf36c5a5943a05
*79465b6deb6ddb5d48302928102873824446d221871a8c7c1e158a16a7d466ddb441cb61884861
*53db714fbc3aa48151199d4895e112903a0bca25dba69a1206b027c859ae771da6d69661d99640
*792255aaed520643ee77c3e3114066c4a63d475735b14c0a4422ec329b9249d4e3a85848826671
*7c88610dcc89484cb14d624235382360b5e662cf9a985216acdf3bd35e625b80d030a0d3441e90
*f31eff614e95337f4482fdc899a6faad072d55cf5de5a51189f7a32cb6498ec0f80ba0a49f93ee
*3268db2fa9a70dbd748956f444b935586c717b7a226d6a1b02a96d9df59c5ebea5f6cbccdbecde
*ec120df7750002b85c17c0c1a7b93b10e4521d623dcfecce318d746dd5e7f61cb297c7ce538948
*6eb705debeff5efc7cfe8b1774a7d2711f101203faa0e0b8df1857f9ad0a1463ca886d3c349751
*868fb5f98191aae68f634f7e5e5483aee8ec26e3d435f4960531a155b9df086cd2097cfe096571
*724588ef1e6fc156f98ac760591c9d033797f4fafb95a5955b5f4fc359ff065b2e79444f714af1
*140e161682f5f37fcfbd65ad8a8925f581c0047fb58d4574a5cb3a512877a5732be6ab85453045
*ea4e951fbe740ddf01ef5f9e75c5a5d51aecbd29282f4c65a584ba19acb6ada5aef36cea0b3ff9
*a92ffc34f0b71953caedc66fd076cfc8a1d950c56783ac43fa60f05623d3001eb0ba765d93389a
*b9a9c87712f7388ce0ac12651930309f83c4a6a3b75975de56dc3be896d7a054c207033c8663a8
*271a61387a3803a5d99823c8e3c141b4773fb5c5380df3a45d080a15495c555e64302f29746648
*d20de954869a8714f1852a02ae76883ca6c09a73e66ef5ef0b07873f8bf2d0c10bb3fb269eb41f
*f3ba9a90ad9e53e0c50b65c9eded80529e9ab119e87c033727d90cfd998015680bea0ecfa93d3c
*6cade6735251427721ae4b225a8f659344691c1401edf25a3af9117df5daee707f73fcf1f2a909
*2da1bdb7e6f2b90ad1b45f9e76ec2a2ccf44e623ba54e573ce0267bf2ad3d0e1a872c4804464c8
*89f091a35b562e3073a901613960a6d6818a5f858c159d8a6145867ec9ff08b7d20df77faed2e2
*35ae0117f97f7db45a8efffc78e5eefeef767e3768d955bacdfb467776a54823bf7fd32fba22ab
*35ff123fa1c8781cc2be8a3ecaf8f2aecdbae569c6dba6de82c31ef9c7482705944942b4fb12b3
*20ca94e3572db332f5b17b972c14a338cd51020ccc46508463dc414e492a28b6a4438c2d12fba4
*4928459af324873ece27172c3c1c8b0b8ebc16249094c868dab32c3d06e299621eeacd81309e6d
*cb4af0ee4502a11691040a25d0635b9a176851a8f40c5b28b126c7a486dc452a4e82cfa1be09d0
*70f33825593d09aa297c4b9a0c48228eb0420acd9b5360080081f549c17559108a67b94a132416
*c8c192531c5756c8825694afb5f7d363659e97b91065de1a48a5fa2c88bbe7b30a4473bd87634c
*972691ec49d92a9252d1c5cb6b157a9cfa7712e427b8bb2114e94db8d4c1d184eb9557bd7af094
*ed21207cc1daed48b025a5b5b61741bcddf1626949bfaab8d2ad8344b719550b0c21dcde8e8b30
*4be4878288a919e79b5ccd7cf7d42593a8dafb6a37f63039c72d15955d24af9bbd31a280c67b82
*ec4b6aa1c0203a17e440b6188784bcf3c25fcb37af64a5b080af2ea04e0c054205e1efa5afb7bd
*6d778c27b56be345d7dc750696ce7d2a4e758b493e3c7a5d46d28ded7e09234b7cf3a7ec8d3144
*30f0be77c6995fc33873118e4756a38e96c86d37e7e8cef45301f08692b26ffd706fc58323fb95
*c2f547dfbe29bfb535514de4b1d2fda66cfb4a35c8702aa90a9d8d2f262014bd5ea84c9d0b9dd0
*1099c85f7bc35991d1304745858bf9621032dfaa117954842b7501666e4cab3c94cb72001f9784
*5354f57a2ab6306e141a6fe25f3c39531c29b640dde2b33f7e99ca94dfe41a2fcff88b7a451ef5
*0982f7808f29aa03181373582f61a41a3cf43558f3b05e8ec86930869cc2f6e15f044f21a8d87c
*553618bf4c65ca6f726ff234d8966994869f2054079d3e1b410663a2da55c2a74668b10cf14983
*d84af5f41d1f99855001e364fdd580716e87f3d5a53e252cd5113f4f7fa9602145b9563ff06cdf
*14b0a615afd7d4d5f5723dadec6c6fae9ac457cdde5b917ced3a0e71f74021f857af69ff266aa2
*c38975015d4f195e1cfe11cdd091ae0f05baa1ae4160db42602902d9211967e956c1aa478be77c
*5599446ced9bf9148eef236f4bdd5af142a05cdbaa5341e77ec3ac969e0c2e0582cae0e9dadb0b
*c4bafaa68907e4d24652d575e7d3b5666213b324b5e68a13e439f4e1be8dbc50843a73a8d1a556
*28f12ac84fc3385ece7cacdc8a92ed58a5395a126fb7e83ccfcd8e9c63db64684ef167cbc35987
*44f213f8d0a65c03d5f42e0258608adbd4f3ea8c70330b61a7b17f90e315d9cdd674b6604c94f1
*a5b292bccdbaf7bf42dd8db3c83282bd8dfaf66fb93e3eb18a1bdab497a620c774152d576f9586
*be5aedac4de618eefa262cda174f176ef7e26ad5962d87eb66af6de4acfc99dc2e263e73ebaf83
*494d4f780cdc6f8f107ce6f5b757bb6b90ff35ea5d48875ef3f56f3225fc96f4d740a5c23b9070
*72a963c7d1eb6b8dc7151d9cf8fbc5d504ba41b43c922b71b953b563115fc1cb4a55f20c37beab
*640e9b63bb9a13f7b7d41268b8ff4796f646dcc036dfffafac3d5a2ddbff6e3c7e7c17fff5567e
*57bcffafb7e9fd46d7fe7481f37bbfecd737df39a9cff9435170308ce034742ec3a774249e9112
*2ca524e1191ab029cb2bb2191ba3e7b97842966d5891b6f48a48b160328fd9020d9504f86e5c1a
*3515a90af412a3a9df85891ccbeb43106b03bd8c6cdc702194f7b439dfc0a3c1e04c594d491328
*697f462623148541d99509a8f284db9a70ec8e7bb21df7b4c46520fe0e68e24deeffa0262c54b2
*d59607ed369ca63fb265d6c72d44c949b1e3fe4db6188934b7ccf29471df30844e8894b955988c
*82593e27ed07ea391230d3b5319a7948433c69f181d633c65a2b52716925315a965cf7d0c66b86
*96999fc3f8e2968c9d693220652f8c12db23093049917b4a8ca1ae666bee665fe218a6d9e05d8a
*8a195ea3625583ff7a56075861d9b59242ffa6c52852a770ac561479f2ead64801d50c98faa4e1
*5a0736b6e3ddc93670c526334a6bc44482a1a8f32c1f9fb89742b2e5e5d233fc5cad0b56247f7e
*693b68e447df820368d8ffdf27a8ec72030cc082fdffd1eaa38db2ff8fd5c71b77fbff6dfc9cfd
*7ff940ee0bf67fcfaa43d4b4dca244ea24949f747d76949da2d2657915e4065a4f98e3019930e9
*ef94a743ffa267057ae8365760a91695eab2224a537dd6fbbc94aef377f493ae1f5ffcaa2fd7f1
*2d70132e0eaeeaa0e0aa5e196acad13d112a6070a0c7e6ad677158e06d33b88e092befeb34246d
*6368cc8a0b6ac885b358d3a91c7626de584b4158880430550d1b6a31789f71763401d096036c2a
*40853d8f8bc0ec7e62f3909f038a9264fd590681c089e6537a5804c04410aa3ca9a23aef846d56
*f11f6bc7d403a0ec3b9cfb3ca54ea042f4e9d9cf5075022f051e9b0c035ef6a60fba1fb40faeea
*6a0d167bb90af0e75f1c4848df5e145d5855a31e050f8d64aa08e2d732540dac62b66475a51f9c
*4c9010a58310ebdcb2d569535abbd7a6c2edee96e6eed41cda944fc4dfbd3723ff2f9671192e6f
*f7530f3aa07778929ef55080e8d86f9849d9b5b54df4378fbe09a79946f1bbad6dc15f863a2f8a
*65a83d65eb9152ed8ae39c7811902ce7fbd230289e934b54994e895ed76033419fbd55b6d30220
*1cc6b35ca3e13ccb753aace77b6b74dfa5f1c51423bf4423e31f40dec19e85741a939e57e0497b
*1a615d6b7427c1949393a2ba5c4e55bb273661cb984c0623df6aa2c33fb165ab346fad5b59975d
*651554bd1e54c02fb7f436a328dd1a983f66c2a93298e699a6942c5b620db2295ab7f4b989862b
*695802a9082f83ddbacaea6b2a5553bf3c507e39ebaca5422a786b2a9bcce3183930792619b84b
*892499a922747a378b8ae9d5e9e2a5a52789b227e7548f64fade29cfd596effcece5472156bf08
*510e976d34df2b0b127d1d3a653b956e8462fe25ca8baf36432434ebd1b6972e3da830efcf8204
*5def886098a7d910bb74a527d9285e18a4b1891d8f883d1fa1d504693e4e8c75e8b73ef3dcfdcc
*afe1fc0f33e666a2c02d3affaf3f2ec77fdb78b4fee8eefc7f1bbf2bc9ffbf4a0c3729e46f16f3
*034d729e25e5fccd92fea564fd0ba5fd8df27ed5b443740c57677f979fa4f398a4fb432846aee5
*4a22e57b0303ebe63add27a7411ee112629ad7c1b9147bc0137012e728ea803fb66150a42432f0
*d481ff284b64cb62a0c0bb2c4a33e8bfa7f8421bc9318549397b80467ae8a72c2d8a746a2a5305
*3ad6b3ac5cbd7665ee29ba2e4c946302859455237aeeabd658a43383b8a9ce3ccb8694ab736aab
*33715a5e8caedd012987a49cdc53ac404f721bae6113459df3f364d3e01cb830e894e71814d03e
*b361d707c4d99d336b850fc054058e38bec24d119cd0e59fe82cdb133249fa01517c13d5e3e597
*304561c62992df413767e70b2bb04cf82b7548e6e6b503469d4e30b7c500ab439904c278d51dc8
*7459e734e6d663ce626e6ee7244645aa43761c7d0e13f4d3876317e1611bbaa23a7664b6b9497f
*79eca2e4ab8c5d94d48d1db9053ef78e5d945c6aecca75a8b18b7c276acc5d3d4f4b188c56edd0
*3945f5d045fe63b49bdb1d3a2ca2d719ec776b1d82d39f49da7452dea4a4e6dc3853651e3c3191
*abcc2de5e332d89234abb3e04d2f8a3679b1d4fe2dadf96d702a61a2e6bbfe406d2007478d14d4
*f509b0ac896e2aac9bf095ce689af715cf379617a6dadaccd457e9fe254097f690930bdb45bc23
*73d52d0f1eb8d632a1538da7298b8cccfe4261c20c1559090ba888d68c2b50116c805512b2f129
*a1a1969d2548a8997cf0a1e3d4648fa6a7e502ddaf4d6741167ef4276f8addbf2e53f883f0fc36
*c58f4754d89bbab0e6fda34acd1d1c686c95bf30270f91cc022bcbb071aad57597bd3e2f9a6a91
*571ced9b6a75b59995ba69aa59a5bd2b7769aad95dd338d5bc70ad65bd3cd5bef5f1eb9bff1ace
*ffcacafeda428005e7ffd5b58d47e5fbff47ebab77e7ffdbf8ddec817209453dedbbe10fa2acf7
*9a7cbc077904e772e456b3bc48535817e3889c69a310f49e5c40ef91c8f31eafb7f7949f9b67a2
*c983c5ad9ce91d5f21be73bd9027570c292b1f7f0db3d47b80b5034a103f721e8b47e22316fdd8
*6ae11fdaf62d052dcbb05f7006edb3bad5c27aaa05f8f3a6d2fdfed6b3e4dff7d7a4ff3d3f0e6e
*20fad362fdef95c795f57ff5d1faddfa7f1bbf9b5d7c2eb1fe0f88bcfe28bbc0e105e41ba167d4
*1cd1a6651f6357d84ed9d4898ba35054dc722889af7158962613c850f06db90cfaa1a348dc7b97
*85f17c1cde1b94f71199204ea2319da63adf777b9dfbf0df3fbbddda0d47f5f68d8bedbdfac754
*59dd665376d12765b4563e945d0ed0f3d6e00dbb919379a0a5eae9be7efaa75f9faed24bdc433d
*80e1f5005542aa2c4a75d1a9d195ab687f93ea5c79abfc5ea8e7c7e27eab0508356e98986eed97
*d00ecaee5a2c5120cd0c4bf03f946d53faf66a41bb1bcbc86671c94cfc138dc794f317a97c3dc8
*422e19b28b97ac8bcef9bff5ea75f7bbeeaf61ff37f66ad7640216edff8f57cbf13f1fc1cbddfe
*7f1b3feffdaf0af4e855fdbe8447d86f640b66b924fbbdb2176ef8c6549baba22b57b457edb94e
*608f947d98c0405aed9d93206b5bd16fd8155622da7b39b7dbf01b187d2b52ce511114c5211b47
*59382ae0444b9c47a57a11a3a57210e7b764af6459c62e6bb6648a58c6ba781f6bde9a5d4c36dd
*bf36ba92f41937bd5ee065525223bb1cb38d8b5db360929f5befcb3957af3356d6725f3b83d1e4
*734d96b50a5ab3d1728d777524c84ac8242535a6c45a2c55a80d935c8d57e405af68bd1ef4c47c
*2f55c0b6831e01b295ab2a3fb6d615dfeda0b7ac7349e805a064e2dee24a246e25925d9a3d2c64
*9d76d5f5bf61ffdf0166ef38cd3048ecf5188005fbfffac6a3f2f9ffd1fadaddf9ff567ecefeff
*e3f68ba34b6cfadf687bb7e8f277bbbfbbe2839bec20dffe69f7c892fba7cca07d1933044b41ca
*b2f0e3b8515cee477ceed0bf64304c4f152fd074f05558854aa4bcf3daf6243d92551ea5ce675e
*908e5207a38587fb41b78706c28bb7eb4a833d57e6297b0b877d2e655b887c9af39d3985774d87
*ff83c13e50bd04fe9f0d2358e133e4ca24c8f680f779ea1a3219d894cfbfe91ec3ad1d5302777b
*5720584b5feff01a92777be754d981fc32b1766afe72ac33c27e3110c73a94a2a5949893a53d8a
*b27453248398a856b39f7c3121f704acfccdd22f5c3ab8d93b9a4749446adfda7ba51c26377486
*c46957ee99853d2824188b8a1cf6ee5916e638f1382e4cee20dc2a9315d66a2a996ab14a255fe7
*35311662dac23571efcdfede9bdd0a91aa25cf1bb5b4ea9d16e9234bcf649a4520652a5fd037f8
*bf6a994de8531bd94a0642d6cb3bea2c1d5d894d5bd198805bdce26b68c000fe1d524283cf5a0f
*83eab4c34bc251595f0c26b4cd008e6a99cb510378a58a50e5287dee03ca70a665489a40c4bf91
*dcab81ff239b985bb8ff79bcba5e96ff3c5c5dbfb3ffbf95df8dfbffe979a448bf87b840764889
*df2bd7e84a851c0990c774a0e60e2a18b76f87eb643f78976438cd850a8f95e11cb7c93390e215
*f9adc37f50aec34fead607c3de6d9bc0da8af5e4d0336ec412fa7c389f76d403f1adeac5625df7
*a309057267c472531c4bf6b8cca5c3965cd36b8edd53be98208a8b4b449bbb032302016d1c93b3
*a62205ac55ec238cd113701f33b9749e3da3fb42a1fc344d83046919d85f74a1f4fa8364bad80e
*4585c7be37a03045d21d14bbe8e328f20c8b452b635d15ba561a47f908a6563836269ddb32d41f
*eca7db5660c16d2baa60a75b917d0525ce4241f1321532b123dd0876ba3c78dbd57882db2698e0
*b68e24f8ec5985b309ca2c03b91af762411c4350065842255041831b107051e6b8c3d57c25e0c4
*151ebcdfdf3d14f71013ce7c4f0710e6b2b8105b19cd9cbaa7c24a9a4f985928fe7c328946112c
*626806fe991c3c86e118a64c4ef1c38651329652ac44c6a76a23203858f19189013afec6187792
*9b12156dc39733f49729325c358279914e615ec10117eb64bf63e8203ce75a66699ee396d3b210
*061ab2c6097ac51e2818444d81741ee890d5b6fa66c309cced2bf1c072d9b18f4fb492b4053721
*9041bc54182c4d40e5c81cdcd2bd82a35ecdb2f47334964edf6a94073864999ecd1ceb0bb0cad0
*8ec202cd90c9fe36c710a02acc5b09b340c6d9726394e13543ee8f7f25a738a9c1e18a01fba2f6
*01900f8c632fd52574aadb34afbfd92b2f4ff26009636d2ad1d388572625adf9ceba6023e05d1b
*a65abdcd527e26edb70647af81d78d695d5d970db1e05b68946cd8aaa45b960e4b487e0076d086
*1a201419c1899bdef9e1fe33523d9ff9812a61791d40292e97106b07abb48ad6f5a33ac5c9e4ca
*0031c0d22021b9562961d9b225baaf40a1a91f4dd0cda20e7b875b745b5a56645b34f9b6265b76
*543c8c68086bd5d6447c7c8d2e462a850358cd3094813d8fa4c783d76a837caddca75cc5cb8168
*98493a1080cc5572b4a291f64ea72a959b69554be79d1fc9dcb254217ff4d7779c84c7a8812281
*aa77ae304ae6f6b4c2572e94cf87ea0e4626ea4fb5320617274bd8e0c5cb1bb8dc02bd1f42b5cc
*ff6665d84e9a1ffcb9b83f202ae05677f0bdeb04c9ea10cdd655e126d60ca518dca7c053b20e7c
*2bd55107de07f9df4842f2effd6b90ff6829c0756540cdf29fd595c72b65ffcf8f56d6eef47f6e
*e577a3f19f2b6ed77b62e7dd3b7dce78fb0e83cc1f7ef8f1d58ee84f92b47f1664491f6f5882e4
*5b898534f6bf5ba150c579f4288d31dabcf4aac3dd678e08302e712059723a2fa81b39cbd304c2
*093f4385733a4f0d436002f3133cc507a353314ecf12e5c8394fe719009dc1f7e03854fa406217
*06fa427d65c82476e03381115145c908efe9e4514de54766244bb06a13a698f33d95eff7ebe45d
*76c061cb69b6a5373d2d62559106b65d0567a0c930046d0d9740cde86b7f7d6030aa2a57499ce6
*b398a3125b5928547645af0a7da7c1700e96c3cc44a76a6b57daf4a9c08055aa371775597b2f29
*da3dfa8381c6e09114d4294a988a1fbdd5f9beb7d2dd32a0dee07996f23d8f8abc02f2799ac66d
*79f586cf6190b4c5c7efbefbf8e0e3972f1fd10bf934b2a33cd3a5a1940022cfeb1ce725918c91
*24b30b3645267a51dec2c96b1496cbc24ff3280b897e5184459d62088b3d864b672a6902a0c9c9
*3990b2149d15161a1740d9393a64063e1efda1134c747355a6616c306616382de0b0344b739e08
*37b952f9e4abb6369912382e0e2efcef1b24d817e4f7caa1802f19ecb614e1d64ec209d2183afa
*0a61802f17a9b7143cce7bb43d734e730ba3e35c4150d258e1ad55b428fed44dd7b728cad4a5ea
*ab9166d54653ba09e00bc254dd44150b62512d514563686d5dbb89fbe8384670823cfac5813eb9
*45e7d90f0d31b455a576bc23bb5237b8d12221a4a34e81763b193ad7f8e1cb33315c6aa5d204ab
*9562839e51901d96f46583deb0464d16a5b51dfbbde7a43af2227f55d6f3a85a6d6f74b58aaf85
*86f53cf6a1d41bdf04523786a2f51cfad1ed85378f70197dbdd3955466dc68b79a9457ca93e77b
*8f525035d4ed92e54bf16ed5b2588d737b397c90735daaf0972f2cf41d32ab4bbee2881fd01081
*5f2e8363bb3d2a4baf6490d7f9eebbae94e9f549dc762ebefb0e7da40a5e7eb480133ef1ca30cc
*8d7e541e1d27f3a979c721539dba825ae1419c8795940f907294cd6d7577e4592af80ebe1b7485
*f959c876065fca49aa59e7c01d2370fe473848601abdc97fcb691f2c7f3a12457c447737ec7448
*25a9cec84fa249b18fae6f554a80ddd781251346ad6bf21c2c914734e7c9520a921a281c37a50b
*e7615408fb077db1b9a9e086c573baf6b5e07ef9e2c22dc2dcc9e4ab1bea388c7e0d75f7a8d0cd
*517e0814003b9cc6893bf41af29f06f99f65c7fa55f5ff371e3d2cfb7f7db4fef8ceffcbadfc1c
*f99f5faae7686ff9d4bb960f1b83e92f836984d7f74636f80d4c080c69ff6ee57eae3218dd074e
*74d739ba61ef0b2c14f954c21ce19f7238d0ec6fa087204b3a3f3d71cf3957dfc3a06b212c3db4
*7d0c68834ed8652a39afa5732bbcea6379c589c1428379714ba6131625d056276c85b0bce8ef47
*a79a617847e1f7b4d6192a3bcdc2a0909a62da425e19385c8c8034f4c9e1afeff776feb2f36a77
*e72fa686bfcea3d1e9ce49383a45d8400e85b19698c1870f1ae607a2cf0fe3082589c339a99849
*1e0db32f3290d070245a3d897aa3c9840f77618412793130f86b8651aac51c2b05d14009aadb3a
*becf8050680ba521af2d2894660c3a0d04628f62124387d914478805a364812195cfd06b2fbeca
*3d6cd022b87e670a32ed1cb9a9f3bc2d8fe8f884efd6f10b3e2dd708eec0afd00a064c5125c28a
*de7b28cd1764a673465fb506de50a10c3ec3f3d2cd60ca686ac9f63898e17ca6d502c1fe705214
*b3a70f1e04f363d840f37c308cd3e37c9616b8d63d80f5f2c98395c70fe2142650908cfb135450
*ea47937ed427adaefeeaca937e940c4e8a69fcac655c4b609b8d1e8266fb397e300d64c2a3698a
*9caf888b159eb45ff0e907e284c32c43c75c3533dd34fa2973dca81e1387c9717172cf40427ecc
*b8a0e2cf29aa539e45c4cc4eb86e4a316c34fe2045c810ceeaf7852e5c88e59fe00dbe45705dd1
*b9101f3fcdd3e2a358eb964a5d201aab38caa5041b93e32a4400d917ab5d03d702704ce8fd5a8b
*a0079c85a0f8b51645ab5039d3a5d175b2fcdab5ed5ccce013f7e05b61172e9e446abb9f2cb91e
*3c6d6bd26fa23efa070f4f4bd432c5ae6e31af6ed09e62ebbe47058b4df7b3dd66fbfbc5578b11
*ddc0ff5bba635f95ff0796bf6affbb7167ff712bbf3bfb8fdf2dcbeff0f88a91af1a7da0eaffcc
*52166e4badbff62d39efb0554c6fc218a487de4e3e87591ec41dfd84e617fa4519816cc74507fe
*23eb90b8d05f67b30efc475f6733db604403b8ac11c735ac342a212b95dab846465a6cc038968d
*369c61754d37eed79b6e140c38fcaae61b1a7b0af067de4847d5bc92a66ad98ec32698892dd0b5
*807a85ba26bd434acbca8cc27cb7ef51ccd7a15b3610f74ba61d158cac7859a89a5c8398b6f128
*0377b0d3461e0b11aab4c5587b54723bd5fc31ec321cb2b07a984c339c2e8611b0098c02e8b181
*86f5b904b36ca661267bc916462768731803c463116365b78c62dc227a52c332e49881c03b6a3a
*95ac386eca10a4bcf24fa4b5c095ec421c54bf9a6508d442710f37e9894dbee24245435c5ea3dd
*6a77cfc2bca7bdf138d3db6470171c894dfd9530e383d91c7331781fca2674e4356dd75ee13ace
*82b2c07ec483049b8ed0f4ae311cd9f629d45796316da84175f86c34b08ea69e2a2d841e5c9549
*19a4383d6043aa33ce50e0962f58b1cc30202e6d94e1cc1d6d9a015f3da6190644d94603f24b1b
*0d7c628a86874bdb68d451b4b2ddf052b6252c7106bf6cbac18df2d27999ca5cc30d2f9d19c38d
*6aa5c67ca35aa731df20c3a53aeb8ded26eb8dede5ac37aa88b9361c55e4241d53772cb6e0a8c2
*afd8713855181b0e69bdf1c39f518cd560c0e16941c58cc3ad429b7048e38d7215cdd07d80efac
*38feed7f0df21f39631e5cbb0e12f23c7c5827ffa1e78aff8fb5ff100f6fa07d0b7fff8fcb7f96
*187f0c047c2d01e002f9dfdaea6ae5fe7f6365ed4efe771bbfdbbcffff46923f49c7030a68fdc7
*13fddd646ff9e4774ef72c29bfc3bcf24bc77aeea1702a9d17f2d5ef2c659130cdd28b679e7ecf
*e2e9b7465bfd7bb2d4bd1e73ed534cda420ed04205d9172b2b1f4fc90c855d21b31f6438df7ec2
*2becf842e4211a554115ba0c1db2219bb473b1ac71185a7bca0ac76deb7c6b61009c26f27bf697
*df84db41784a18b9c2b10657679e16569d946df29f41b9a6e62ab4eaf4d45b8b7d6ca08c75d5dc
*318c7fb4df12fb3f7a5ffeaafbffa3f58dcafddfc395bbfdff367e4becff7fd80d1f09f76ec3af
*ddf0a97b96dcf031affb254a3e077134d640d88040bf5e76d7ff29c590aff8ef1325cb7b6704e1
*d370741224513ed5c6b1ef8f5e3e319269d8c7b3908049b404e44711119a06432239b0cda09999
*a567d51a21e1ba6eead939aa69acb3c1aa06924b59fccbaa584ed2a6141d09ba9bd35d84457ea6
*d6fdc20a4ce57456dc2a9424aee4fc5e63d373916bd3eeed7ceb4c7bf8d9f2e56ad542c6041df7
*4baf94a3e2d8bfb6f2f27b1d363d4aba3a46378861e54313ce3d4ebf39c49b1a6263f033befc72
*2bcc54c3febf0fabf92888bf8dfc67ed4efe732bbf25c61f97ad6b598034f37fab6b9058e6ff1e
*3ebcf3ff722bbf2bea7f5579c2268d302c1fc7618c0ac73be974563604f1f88df91d859392f380
*58943f8ab908f1939e8e55ea64db228fd0ca4e8cc329f21d99560d2fd2d330897e6573d2b68e84
*243ddaa3726b94a009097606ddfa07c9f801f05631b425976a250125f7d1870a699968368db40d
*46a3f9741e0745888e3bb2220a62821325a85f209dfa0fd3b9aa032f6d49ce339c4731bccf6700
*9fb044af2a6130bd253d37870c166bba19f69a2c3d9878a4f4cc7acee689fdfa3ec967c1281c77
*e0bb7a562a6cd41d18f8c7b65049b4bd88fd0ca5edd7f7098e8e044a8f0a268d9a86e965daa5eb
*0bfb1347748af243c4af6442125c0c81fea6f8e728c509df6462c29dd4187a6ba1229dc538393e
*8198da864021a71c228283a63553349c62c2702c89bf1c662d0c4627d463a47587be2d29e00513
*04cafa764ee6c9294c3eea83a9abca0fc81e86c764d5aa33889fa7bf94b21b4d01ad22d0f584c5
*80793242874d3c45b411579b70691b851f455e78fe5078c2f903ea35491d469b631b9871432b0b
*9d45a18e26d85939632cbeff1ebee33fd6d76c415408898e5729416264b412f8436c29e1f097cc
*f4ba9d2845cfd552ba1d6d6c0814d66362e78adb2859e5d9ebb4bc5a7fdb8281593a769eacdd6d
*846163d32ec3ea547ad4818d38623afcc9da5657578fb36e1c364fb793287784da333ca3c5c8ee
*98ff8d31613a9ca70b24fb8b3d2e9ab66dfb0e39206e414fc43346a51aeccca247094aa6c839a2
*f22914a7629af359d860ad4b98c7dc7a6ed79f21bb651180afcbec731c995d95bacb4d77baad69
*a88cab074f9d4e383b15c1eea65741da102eb70a1aad60da736825e427d30acfb2d6e385402940
*752f41c3b29e0a0db7ff3b69ebcaffec2561cc52a16239014cc94514bc88623c085628a606cb6b
*538ea7ee7acaf1ed29ccc9993d8500ba7b0ad7017b8a1a71b3a7c891e73f14ab50ef22e7cb922b
*1a50cd72813c20eaa66a599e467178213ecac5eaa3a63ec52f1101ea97df84c54aa9889a0bbc8d
*a7d1f832e4682a5eb8aa2e5a3a352845753512a28a9cb2060957c4a8f30c1cf16d7565d619ab8b
*b34ea2b135f85214ca6a404d0f24a57baa92bcc1343de54c284d6b44979c14fedeb9c68a6a9128
*d01f4d198b1089c79674c8cf920cf9e52b51a1acb56e59f42d78aad015c8cd535b99da38cb6262
*e37c3e5ae314496a12d55a4a2b83318446293574562e5522b372d1662af3744a3d91b1df860bed
*e7126f2a54edccd8cbe3b43a31a7194a90f3681cf6319d3d79ce1300d34fa0207d54f71b2d7d5c
*245357bde1a3b3a9dd389cc2f0ff5f6a048bc45df5d9d297a4f2253536b1235afc3bd35ed24bbb
*bf58d5e644613f77ce7b16e95ff47eed42d3cfc50f7d918f8224d60ac7b9887348e9500e48cd72
*f18bed9e28ce7b59dea50b965fa399e898c3094060c4306e1d6dd40bbbd7915678ba17d32bdd4b
*4c8fea5e7d72beddee35d57efdee955b79a57bbfb5ccf2ee7773bf25e4ff87e403fa5d9a47388b
*ae7011b040febff278bde4ff7d6d65e3e19dffa75bf95d51feef91d83f0f92e3774181962bdf5a
*52ef52ecbf89c87e2f196521c38a2f8075648f32a188d391f4f64e5166a5c7f64914a317ed2c9d
*1f9f5096d816b06b9fdc002b3d63abf250598f0293822ef8e685be13a08def4f52144f92775d29
*b9cd3ee1ca64ad007618e2c64a7eded1aaf4730818cf67e3a0e0b35b0e1b2566204351d2ae44c7
*e871687a4ae91952fc2d5bf5523992c280cdd2af0d6c4b6180b5c2fe8eea9a0a2a5e2e20f68186
*1695a1416f91f36fd8291128963612b6026d31436950dac665a2783b7919a1391819619b069b8e
*bd0dbfe03554befc85444f203b73140ce59b0ba8030f3ddafa7b3b693c9f26790fb2769dbc98ec
*7ce09ccad6be9c27f7e431dda9bec0d9c7d3a43a337d751f40128c7cd16dc1b5ae20ec6b10f8d1
*19cff403b04c7b49617fe586caeffa3ca92ec18022d5b557f5caab7e320f2c156674799fc6171c
*9c7ca47c009c4640a900dd868ac4cd5eed53e00479fd9255911ccfa9806e33dc216002d7f28a4d
*58c272fe861bc7fb37efb677fe42a101ffd3ea107f92ec1568c53f315e6530cce14311a28d3857
*452d562bc869929e015fcc66ce687d99b127b33fd15a348eb290d6157112e06a837781f08fc6f3
*8b144c5d15492118cf9fc236d491137cf4d1350a000f0cba20ede207568d72b22c045cfbb36aa4
*e00554ad59c4b0e1767d30299beb5ab2851c24017a799e9cc0021fa35a3c8046a17008348a4bdd
*a0743545120a9255ec7eeaea70e8b865f036a0a898ee93e11d971b9cf1c91877dc27fd11e310c4
*eccd14aa6bc915090f53e86218ce3c3879d4d7ff243f67e27bd17922faa273de475751b0d47d14
*4f7c170b251a2e0916a00144c5222617d544d29d633483840f26db0725c494d9f48b93458d3a65
*d12f4e166cc039397b12f2d123bda8459985181335f5c4aa58adb6f81f619636b41afd8c1b0150
*a534796caf2f8d1ed88d7305db2db3167c78168d6544204615c0b72456ae0f175563ae0fe538ac
*b01ea61aed0fd6e6ae04d763ddb19d18e80baf2a9c3223fbca4f823565623497f85ec8eb745f19
*39e266edc4328aaca9f079975c81110445637598ca13b983a9a6cb1a4c55ba8da9af8c8da92e53
*8ba926756fadd618d8d5fa0a996ae5fc5055b1a412bfb09f685f8f6854a7b2330cb41ab43843e7
*c220e52b42dfdae2a26d15d15d8165cfdbd417f27ed7b8b13620605b33bb26bcd48910171175f5
*626b557a839629455be2b822a41f444af8c035abc6afb6f80c3166977224c33e839df638498931
*f6694d6b3d6b0a8694f945c35efc090dde17d068dfc3e8b80715e911859842d2187281b6a5da37
*e08cd95b16f3c88e1660bb28a3e164dae465546e554a0858cf8661cb47f32cc3d3106f563d768f
*28592d605e42ec08d8df9051813df338549b9dd5ae96cdf822a66524117156ff70d868a7186d56
*3805688ba14bc2512907d345430e7401ff26c58049c757ea0362ba92f97408031e4d2cb73e869f
*5aa2757422b08ac896c172a7f18eedf47aaca99f153fc1882b97389aaf54a1cbd461a27abef0e0
*2c7729a427e6f73da570666f7a8e2b6dd1e1cdfa5eff9ebb10d8f3d95bcee14726a8d771efe93d
*fc83b959bfc6fe30aa85f48104b8e37042b7164bc87f9690ffe112702d25f02be87f3f42fbaf3b
*fdefafff5b76fc5f84a3140e005752036f96ffaeadad3f5a2f8dffe33bfdef5bfa5d49fefb8dc5
*bb48900349907f24e1aef6d78f3c15f00f297acc07660d1f6cd64b5aa813d7351643d8017173c3
*06b10816a374d21bb9eacf23e444e48ec8c20212ed48c52db4788fc3208b2fe004979d86e301cb
*90b43ccad2c7f6ab61132360b0cbc2591602fb83a756c486cf73d2955c49c6acd4c11d658a1e0a
*8c014140e27f70cf0f2ce53257551c792b5410844742ad205916f1a6e354319289685bfa056d14
*6b044205dc4487986476d7562e2f0b056d0cfb25710d53c8cfec2f0d8c6eaa12356fe72a70249d
*42695872ca96234ad406d497a3f0a753319fb15abae2a0c9275e7c81cc04d2aae9888171d828e2
*7052f48bb4cf644cdd8a4ff8099344a1fc0db2474e1af7b974d297a752b15ec4186db1fdfca208
*551852979442cb41a4f4f839424d3712d617cc85e71c2a91bee73d496fc5e884e5f5a18d093945
*435a4340c370822789bc88acccc8171b8fa6aa439f87a3400bea13ee398a1b61f91ac47a65244f
*19569de09d23f797075394c0e5b03421b82c3c86c9806e2e71b8e54c41c9a19e27425a22f4b095
*a39334a558b529770b0bdba82f0298b4b8c23021cc9318633f4c5318df57417e1ac6b17d1cca15
*1d9f4590308ca33c9fcc63090a265538831e8d63402e1681e5d42e4e31b217ce7ebcdd61d99ea1
*3915ce956f67463242ef243a273bd8595ac0e821bfceb6ab50380f8149e7f8a8b91d4e2087b52e
*c8a254c7d4552efb67597a160ec7709c89d3192e5fe8ba9fdcf68fd09827291e0ca3e33e8eed49
*308ffbff137c0efaf362d27fd227920f8b6712e09be74fc58b39c5574d026c198ea91455e62471
*4666fd94a906c320601a8a1981398d28dcb051ec43783cc9820b18e59308c32c6dbded24ff5ceb
*6e01699c049f2318516551624636a0eea400c83c87f3f0d39cce660892b109b2637d7a812fc38b
*42ad03d0b9d893d154052e495c6c2b8bc14dee788d973bf61e771963931e91a83103d16ff619a4
*12bf547438b4568f8280f528de57b7c13e7ba171c6a2fb96ea85266f23d61c3c78b9b3fe68edbf
*b03dfd27b46ef206446581209fd89b122e8a309e345737ec04240fbc804261072e353cdb6149c1
*8b90bc500139d6e5e99d367a3413a7b50d3e44990c0c41fe67702f674ad1f7af78393883799645
*544d1c426fe2fd66a836445c89731dea98775332b99a6397f1a5cb2b38b6bd5a51c2fd2fe2d5da
*87d58afc9e3a5f5899d6eb323979d66a0055b26e2c016ee332e0d61bb3aa1274834c8a5cc051c1
*aa9eeb9da63a0b7bccda0cc3e20c2f4756ce9facd04eb1723e9ce82504074a07729083871b1b1a
*bc451364834e5515bc92c33a3547f688e89499390e2b9da54318f20bbc3f46cfdbf2aa845725c4
*19052d012c7ac00812dbc3ce7df9623860f110054aa7350a26232dd8cc381071c4697a2a689359
*5d39a71f5f231ea162177b0ba0ee3964e747b9d41457c19c9086795760718cbfc7101bde2c3189
*a6198522c74d02372c6bb6f494b19d6125613a9233729d893627bb765aecf5b2da303e44e9b481
*a262ec2140998aff7ce518497d818f47d4e4493ccf4f48fb9b643ef694a67bc213bc826227d3fa
*86c96c27518ebc9d1f0d82fc4af97070345c5fb16f0699a3f36aa56b6e4df4479c9aa4906a6bbb
*fe7cfe8bc9b1be448e357525e4e6e95d58b93616c2d95812ce3a477cf1e5ebfdfa8bdde1562712
*353194236f77390e2d643ea78216f9e86ee86b5e08e0a143ba8ef48d29a4cbce35f4bb84f46a45
*8cc4a9f2baf1055e7ee0e1dd84af00c40aa3bb8ad234b9a8aa8c234f46a74346bf54ca845c662a
*877ed47552272675dd93fa50a76ed8a9b6caff12e870db55fd628c2025a4b178b6c93df0dd77f0
*52d7c8e11a6034b6da76450cd62d0cc44214a692d447eaaee51af5ca0684cbd5ec367e1dcb6234
*ddcb37bf377611d9b874076c5cb103aa355fae0ba672e673d32f5f7b2f2cd7afbb71729541d8e0
*d278cf7e9561e885bd0923d49ac2614c19b43e719611d419a054f6bd87f7cebb1831b73312c0d8
*e2aad26a8d280e5868691a38c5557240e6a13ae2ec23013cb1053023802be7eb13608761adf12d
*711aee14738cdce54a7b0c1a00734230ff6cc0b380bfd441a5f901d5ae35576bd74fb4030009c4
*07f96a61d191487454fb3bb21f57ce5761c4c6ddae61edea91029a05b4d69744cbc64fd296c150
*7d68c4b18aec0a210b446a595f37630c740e071a20cf4b226d63af69dbe06f3e2dd7024f531ecb
*a6c094716cc917b507264aaba507da3b51287c5989166092d04c1eade14c0652c597f184a7b53b
*c7378995eaea5ad6fdb578ab33030b15628c3ddc614d1d815b07be8476eda1ae1d432bbb26f674
*4c96ad0857ad56840dad68a841b76f6341fbbc0db5294035756237f5bf9645045f2676cac4ee84
*96dbf089ddf0c9fa551abe547de55ee7f66dd4d5f7e46af5e17a9de47efe53f7fa11b19065eeb1
*332d7f382a7d90ac25d73012a35c9c00e4a2ecb7c15ab57195a6b5dcbb51e500c25f9876c402ba
*e9e928aff885b0f84c3a4e8ef09ce8eb65fafd4c0cf70920c2fc606dc6cef8e938977cf49f2507
*5887f7b806efc9e5915a6f44eae7b19d93706a6a40f834b49aa0968e9a4684758d7878e9466c2c
*dd08c9967956229d1976182bbb6a4473b3274f2756c3cd5252d3f449a5e9f6166114ffac220b4f
*744e6ed8c4d2789c913518a9c43b569df0c652faaeae6b1aa2d4b5f6e477646668d035d3979f03
*591a4f7b3930861f4a3d84cce29f2b138fcbe853128ce60731b3cacccc94296595334555c4e017
*4e180564bda9be75a73e9575ece4d559793a9432eb59c0e849e4164f0503469e1b1c046beb9499
*3bd7aa73a3a94b369c2ed968ea928d127a3a334e299d5d67960896b35b13ea9434644e979d5306
*50431fea15a09a7b492c4d9f5f134b7d42b3f06ca85767ef5ca9de065b71a5b1ab365b5f343f40
*9215305d7d50e2458f480dd4e8683a590ea5231d142272b6d8f2d743896ef611fbd7a102b17bcc
*e4ce186116c0578accac6474afc3da565b9d4352c3fbd075b0859e8663624dd5470877d3ae044e
*b994cdee12fc9d22863efcda7ce6adef6af5c2dc90a7c7b5238a91cd62597cc9111d276b770f4b
*f206b8fffc4bd7f6247028d0ffce898a55383213988b9d70a9a22b255647a2a0f472fe26ec3a05
*8e318a846af7cc4558176663c2acaa5a159911b719c6dae205a9b1b2184e9118cda2b90350327c
*e483748805b13f1c48a7abe2744d9cae97c77c559cf0a0433d1d497bf0c51afdae3831d9d7148d
*60f6697dbe755170be02bd5c9dc82bbf8adb052494aacf051cd07371d26500ec6d41c2d0060dd8
*9d383085cf0d830bd6982f10da132266792fe9e50ee405818c722f33aa2aa590b9300992feec44
*bb5fac67d5bf77e6ebf6cfa7ffa70de0aeeffa977e97d7ffdc58dbb8f3ff7b2bbfe6f17f9985d7
*8cfd8ebf66fdcf95c71b95f80f0f371edde97fdeca6f61fc075175f62bead4427d21209a3d03ef
*9e47b95469faeb3c80bf93884d075d17c1b7ad70aa67c00067c01f50c7f4263bca51532af50c36
*d3554c32d6d398d65b1c5a02e188ce7672a14bfae3462d30ed56c95047305ec29e5b05445f3640
*858a763f1e477668f84f73a0ec09aa6196ba6787e4f914330d9d11f89190400fc378d262fd08ea
*8d8085439b18757887f84afe2c6fcd649e8f87c44297bfa23567a9c07b0a542e5f7635effe0555
*9f48056e50e7c188e3eeda83034777c3f4ed7ec258cecff06f876bb40f1e01ca843150b2e99582
*3d99524ae5eb50967a70c952069fb7d99811c2072f463fd4c2fea101a367b5a59e3594fa010ad5
*d4251aeaaa2df5aca1d44774d91164e1c73a444d86c61e5407f76adfe983fbae275630129dc7c2
*31f0019271cadeeb382914579da05264708b5a2925a0261dca47798043170943594816199a142e
*b2a31e3d26e28456f5f4a327dc902db1f4bbcc302ce7e639c8b9f9abfee8c9cd73b3949b3f7a2b
*e0aee8aa1652146efb28b65b191255d29db2ecb159b9f19a3873581ddc4a3d629ce73991906979
*2de7951ada32b32448d98fe2d9331429f17a766adadb91295d955ff6a4931ffa8c33a952a786e0
*655f36e7776be1eeb44a68ac28997b13532d81b3ddb96ea74a389b18f21b5770db53daa9eb4b91
*7a8dccec4b3d3795a6f9d69c92e6f6a519a5b6ab0ae1c2f7d755da65cc274ed87a9375e829aa09
*5916d5890e086f514dd58d45eb6b57546eba7ca2b640954b91baf5731c5a5ad0aa946f163c93cd
*9e0126bb67b522854cda0f75e2a6a4177b46d5f53e8b85ec9c436fd952f7dbc9811296d5952df5
*7fa9ec8c521760501d82b9bbe098dc8b86c281bb6819c202aad4518a9eb9ab3d49f0553b3a75bd
*daf580713a55768d4cf675aa55d2e9d24ac9862e5530ca1d2a1ba1ea0cacfc1f20a1d2a59cbf0c
*b5dc9d2e666e779293480f614e2ba429730ead0aadc24e274eb942991ce0700c35a4aea7b4d391
*d306ea344894a194bbb2dc0027bf873aa74e572aa8e5ae745b86fa63ff4f080a9be53fd621e61a
*62a066f9cfeac6fa4ac5fe77e5cefef7767eb719fffbf722d3b1a8fa0f22da212664a2e365b9d6
*c4e4e6183b140d99ced28cac5bc843211fe6726d303289d1b4939292606a3bf9bff72e0be3f938
*bc4726c5f71c09c9bd9eb8e74857eea1716518e721714903549b05168fc369a3111d0938e055cb
*4694e1e733e195cbd4cb4a6e4b966553040e6f93488b022f513f44233ee86a5f853ddc415e7f90
*cf301cfa799acfadb04ddb68b93b6273d03204695f1b5a50d463e000d94f8fd94eae042048c6f2
*49cbe082e4423dc5b1d3083278aa80906cb2f5a6906381818504bcf6f7d182a90c03c80d5a68a0
*84c0422b80119ac33a2f3af83c7ed00d50ededa1291682976f495aec2a706531a1246471c2fe02
*3b3422d4058c83aad1c290fa0cbb8bfa87aad535eaca7a68f84ea31642d18b511cd297303001ae
*d424b186d72b9d141d7d1eec2e21a95492c72ad48a0cd1f39de5a132da8765ffddd68c58bb14e8
*6dae2df0da47cad8bb2dade30618396e069b04cbf3d1bc2d978efed08c94569500a8811696d232
*2217812d7664291c0cda7086369571363d13aa1ed6ed0934211165478a2cfbcfe830a03da703a7
*d7b52059fc27929cb0ab6de15eb8f7667fefcdae9985b44b115b2dbd1c269fc324220363ed573e
*c0a5779e8cd1326d519b518b009aabe1cbb6e22c5fa699d4264f5ba9990404efc1a399b58c58ad
*a20c72db455b3b34f49b4fa5c5601ac7e148796d0ce809b69a637579436eb978cab44bad6a67ba
*437924b7e382db255ab866791a66d9c34f7ac4cdff5f297436cdc4531215573e03d5884169bb55
*94c7b4ead244be3d62df49d7a77032322ced958894d3590e01cafe620c6497d18a55ed335e3aa6
*656a9fdad43e4532e0f21e4ae76aecaee3aca6ef2e4bde350df6923cd565c87d5113cb94aeda39
*9594fe5a933aefb92e99bffe1a745e257442f8703e95cd9a7a89dd08ff6013997a497d8a2aaf3e
*5257153883764d7ac79de2ebaee7a683a82e35e62c7bc3fe51f1007bc2950eb9236ed1b52eed21
*6bdaf99ce1e7ac160120fbac9ba95dd3de9339efa12b19d85535438038da825e17af9f87bf18cc
*e0c52aa7859f363e26b966d0b26f3662657a2e0d57fd58595784d674e561aa10b16f80ca8b4ec6
*a1beec0e209790caba1cdb26fd93e4037158194bd5892dc9a2564790878bd1fe4565d3ee68edbd
*9f932e3558ae49be7435842e2590f2da6815b47831d98e15e783ab6a7d54198466fa9c2c8e82a4
*daeb00ced92593f137685272219b046db8548bd2acda2038c5580d821c4b2c82259a1a9d8423f6
*fe90a27f6d746689592481c9465294397683a07c2ccd0015e2fd9759f44cab1176e35ac22defbb
*6379e1ddbcddd663ae9b697e1cdf74f30d1d03ec4b371fcaf89a5fa266c8e56f3e6df4d2790b5e
*4b0cd165443a2977c5e2a550efeade4dfd0d5a71ca6ddc902e7f68f976f2d2265ebf8717b87a93
*73123e819243377223c2ad6136e6324d79c780647314d8cb3549952a374bc2b69ba6b25a2b3c92
*9d45736d188cb6d51cdae42c32e5308fb94b83449d2d3cc27b56924f2ee686c20c6151c94da283
*81e86c6e766d9c29d183f01407836287d0725845083db324694141466a9ad3921284aba1ad0aa3
*077cac68c0b89edbd8ab3ccb3085f97c9887854233e4a02bd2a98a8d344b496a176d2b9e59996f
*7327f55441b2b82338da5937d8d0b42f907aae2e1dcfb526bbd78acd662418b269f63687b389c6
*518a4e08471ea64f96195e209d7e66f78426421cb9c5267f6ee4ce6c2cbd9871ec47eab1745ecc
*e645cb88ad96ef22d26a4fbaa5838ddb5d89b0414fb8d760d05527569b4f19ad2ef0b4b9cd391d
*9ef26594e58571b88832b0204e8fd33979c66b13e3887cd000e571d535c6d4cd6b0c8393ac63c4
*fccbb2ebbe8c192f670217dfb45ba7e0bb8d570ccdb7be42f943ff16deffb14baecfe1356c012e
*afffffe8e1c6ea9dfeff6dfc961ffffd7f3c7e72b54be045faffeb1b6be5fbdf472b77f7bfb7f2
*73ee7fedebd9df89eb67e78e4ed1e20069f1777b75abae6de59ea9f146516a7c9c66b0a34da5c7
*4a60346430aef3599c4614fb02f9eb641c24a38b81f809fddb05c06f2af7c14142b527d80b96db
*641295a882850c7d40de6ed19f2a6caec3b020976e29c9a2dd300ae888728e71f44ccdd27725ba
*402457cf03d1c62e6fb31fc2916911e1a41ac5a5c62950499ef6e89e19db96859fe651a6180f38
*47225b82be19f9ba7896cec8fbf4981c41e2762f8fa4740652ae0d8dfc2110a4284f6208e9a217
*0faf0882fdc86614fd803c25eeffe327f669c89e7a3158d8243c437786a40c1de53026805e9449
*2e783c273c95775ef60489ce650bf46c98c1bcc0a2738c6b4881b9a0531e0fc42179e03e0b714c
*d1efa0096f089dc7f10d11d210a048cfd0d0b2fd7f1c1edaa842cbc835a9aa9b1570e9f08ad029
*4a6106bdc138c18802a4d33e052561555d1a9a2444af92794e7e846f728e36dc9c3bb3d2e7abd6
*737fbe0fbc7c18f7ff117d16aa4c4fd0acd659c8f92d0e02278ec917ae49de4d9c6476a7eebcec
*7e32b9ff3a8f46a77caa83132b4c5f54983077cbb30f0cfe8303a69a204196ef9c4b462087ca05
*310c3d3cbb6104555a079e7a9d2fcf8c9fdd12143c27010014263bd7baf0b903ffd4156375ff9c
*6ee6af6906c366297caa486874ccd4c75b12735a54aeb0f16c0c50722b98a87dfa4c498b88c286
*b2b5cb11051345a57ff554f6188b2edaa8cf4df4b9dd4fbdb7998c3f8791e838025d30c1f96f0e
*384ad15f6bf9d271574d2e5c1693941cb3e2613014d32889a6b09c570c0518b1aaa5804238e96a
*ec495b5624ad56c2666edc65d83a7af80dcf31f40467a39f65f95fc4bf1ada074da343ef8b8805
*364a168fc729a01f385c9be44dfc32c0f6c76101eb5a25da9ba5e6cc88d5a839abc44d474b95f4
*4f29e93cef2ab5d3367d36389ce71e530b2a54e940d929037eeff0d72ebccb4ef2e9be97216969
*82d1c11fd80aa63a9793414afce9525fb6028ff061f5c01ee0e93434ae48a9cbe91a418f1e4938
*241454e4fdc00e21f437ec9f5c51cb489c3d3de3deb38dd455cecfa2938b2fcfc46718989ca982
*1a6b5c057d96a30c67dff01ce09e596094c2f6484564e43db2cfcea6037255ad45fd7a267237f0
*2287dd204916db18fca2be3b41fbbed0a500320dc88d60febe5a15b086ca0d163af50f666d8e06
*9ca01bec9e6409d0a57d622628ec8040f70320f94461a3edb97ee6ae66ec54064d42fcdec6b572
*c0564aab18fb4f7db601d1f22947af6b859ab4fec8baf4186b381fc8a7cacf231ce09fd588ce4c
*fa98e435ece30bb2c03414855e1c20270ad9c80d15e289be9fe733c830562ea92800167414d29c
*0db1adbc8ac95858980156039d097703a0881cefd0d0d5027a92c9e7a3114e2774a0e4e02fe9f3
*e75fae3896741fb7cc50ee7ed223b9fb098740d90afa8612d24a83b9fba98d985ae3885f6c306a
*147b306cdd5f961e4604d33c909863e9a12411d91263a981368f2666eb748adea4fbb4661815fe
*e581b4389c197338174f25d3a43b15f247e35695adf14d35123e7bb29ea3719284dbd1dfba689a
*799e5f02171a722f365e72a94107727910a2af0aa56f7dc2fe7dff9697ff1cecef5ed1066091fc
*677575b512ff6bf54efe732bbfcbca7f6acd012c2dff8abf88df85cc08e8f74e64749b22a38379
*a2c26fd802150c49354e31560ada2b38a131a231ba02195138d2d9bcc807b7a6fdef50c9220946
*4f40ae0efc876a8305fcedaacff3a403ff75ab220baf80828ee8979641e852372a85e8757ef8d2
*edfd2d0acff63b83013f1dd053e7d90fddde67788de9dfacbb587e50113594451b2c5f28997dc8
*c3edc2d842ea9a934eba483b526aa8429731cd0d58c28044882770feeb912e780eac98b77ae067
*0874dcc7477dd8af18d2bbc55938675058d50db0d9eb4b8a4f58c3059adeb72718d48d6d1e68f9
*039026e9566fd2d36f925a396432b7a78be2876a0f4c90f3522f1d02d3f51de131c57b82c769e4
*39c0135c4b0e2111ac1144e8549fc1b55126400a5095963cec61923d70c6a8597c9444a8ad3a3e
*e2609a83b08bb3eac9c673314741e3787d2907f09303932901192e7e274132a698d71807ad0869
*ccd42147e92e96b85fac1ed8fdc0ce45ec3f27d89f3bc1d380ce2c98d451d4f791c3f37d847986
*f10a38569f550ff791756aa20fbfb432617e1a06d45cfec1412483dc5ba6b375eecef0e91010fa
*a2dcc1506eced649be5fb5720e4b4e8c4b3f571b24837d935b3774205cff34543306352710cabd
*f850f416036847a350a3c3fb65790ae36e8eb714918aa759a8108e782e9fe3f2a2c254c517ac99
*4f2a2f58c5abf40cf5c47a4eb44a288d5a43963a4b99fc78e787bdb6ead6473983415242d997df
*1f8c4c1d181700f825b64453f88efa9cb47f500a3a44fd48efc04394266d278683be22c96957e7
*26da1a8a443cfd41646dd717a84d5d8af611ce1705a733fd3ee976c5335f514356aa684c194d3e
*b2293fd0987c90f9329de1834ea3acfb3243ece954cb378eb75fa57b1c5e5a5d91ee4086b1c76c
*d2cf0dc1c870be933842f568c9cbb9d3734e67c9c5a5634fc81fbe543aa97e26ba0056291d0108
*1780ec16cf4f01904e64d49225435e9007206a64dca59d4c371309a9d44c4338d8585f330d490c
*b9b1976d662c0c4d51633dcd3cb85c332d7967b37ae04801419ad1ea527a31537b915fbeb304e8
*2b887c64d4c63b31cb1ff5e795ff64e97c7643be5ff17779fdaff58dd5953bfdafdbf8d58fffe1
*fc38c8aeeffcf53f16caffd61e56e47f0f57d636eee47fb7f1bb59014ba3540ea96a4054f54791
*c31d5e40be11e99123da55071bc7d8a6927f8dbcd9c146c51746d96141a7dfed89cef7f8cf7dfc
*e701fef34ffa07ff4dc263724190cf872491c31bb85134eb3a303d1dfe554569a6a68658d58c09
*26bb5e61a9b4fc0e8d573e1ea89dda11043756e57aa0727506ff3dd0cfd03ff291bac42b24ab22
*54edb2b23b12c2af92adcee1847ffc1a87ae8587b1f3583c110ff83183476899fafe584087035c
*52aac7bac531326d7477c8ff50ea266ab1a0d740aec89b5ba56d8a63d9c32d854e03749d058ae9
*b16841d3482905ef09b4a3823afc1e207e28b682723868cb97a4dc28bb196361eab2250acb8c80
*3013430bc7607139f465832a4104e258fcf39f2261e591fd14c696e9438b8c4407bf1e7745d2fd
*a3f2bff5fbffcdf8fec2df82fd7f7ded7179ff7fb4b67677ff772bbf9bdd1516efff7f04df5b25
*2ea0c1c1d68f9efd7fb9edffaa3eb36a3728942cc865e9abfb80af8c6475cf379b3ae9df96335b
*de942ea1a4abcb7c209af9308ef0ca6738279f48beddbebc375b5d54bb9f1f85793130a890f436
*3f81e18cc33c4703e3228dc38487763f4c12d403df9e1fc33a92e769d2ce5167bd784a97a62745
*317bfae041205307c3383dce67698164f90048fbc98395c70f62c8de0f92719f9cacf4a3493fea
*9f655111f657579ef4a36470524c894a8371302b986298efb42f15a0b7a651c12c06de420089a7
*09eab4b7cc6e455220a295698f373abcc24d4800c47a8d09eb339a22e72be26245457a86a71f04
*c52e161dc93d4086aee8c8e78b95aec989e1405dc7b0aefc7ec2b08d96a396a34d28587d49464b
*8aee175cf7b9255a3e87ea2fc4c74ff3b4f828d6ca92dd0b4463154a9d97126c4c8eab1001645f
*e0d584826b013826f47ead45d003ce4250fc5a8ba255a89ce9d2e83a597eed4aa160d3fc21ead8
*fd248e7b8a09ec89ed6c1801af975de04b89608e35bd24aeecb0b1926333b69b6609e0367d2f2e
*a44cd17cb69b617fbff8a3f25bbfb79f8fff3b80b5f206c57f5791ffadadaedfc9ff6ee3573bfe
*ccc2dd82fc6f7565edf1e38afc0ffedcf1ffb7f073f4ff3cba7cf546a037cb60369d1c901e079c
*f0bb3d33d4876202267152f4c90a91b0ee4b3e5929f140e3a09ff3701ac947cc7908af491864f4
*098f02e22815c167bc8d0f9017863382d40542bdb9110fcb003ddd4183c98e50eae56bbf2519b5
*1b8e1ac02c0614c408950ba1aaa9250f41704ac9884e3be42a02fbbffd95cf14d618fb448807ca
*d28f0e0a077dcea90e079236f805bb9b3fa0044e4b070fb0eff5f7c17df5fd793435a525f43769
*360546dbad843fa28b5fa9a74299ff16928ed4e12c18e99cfc8d3ed950b7e3e37098052a977cad
*9752529b3d62cbf709daede0685e5ebbaed56a11b1880e424772ca7adaaaaccb3a1fd4eb188d53
*e2440a355bc8a1dd470eedfe807ce5e31bf09df8d6155b0aaa294dc0cc5858006974efb30430d3
*b65553cbcbea16fa4a19dc47def63ef1d4f4a610a8abcc1ae1726d30dc581b55c4553acda2360c
*b82a7ae5eaedbadc96f4ca9511028a94a876ddd12fa3301ea39753997b820243c86d51097e3386
*96593f61fa93d0a622870999c300e74fe592d201667f0b091112316aee96fcbea6bf021f8da165
*7eeb7fc8faffc2eaec4fd3febf54897559025afc3d72f63f6c0a09e17b7e4854ce0db195c10028
*f8fcd0c964ef2135a2ad5b44864059dff4972aff50e3769f948154b5d0d159b5bcd5bf6a0caca1
*85f6c839ea0e34c1d403ad9d02d144e3e516755c605d45db1a5862bbb4fcd2faba452d5134b629
*5ba62990c89d3e5d74c90bce96ca3ae0e65c08a2506ecd264e0d7e042ad64494898f8a463e2211
*b9a26849450a5d2622ad3ed4b1a94f3f27ee9ced4c7b49776119eb39ad96efa59783603dcf7cd0
*7ab3abc3b39e3ff961f73ed971962ad3d4794faa6b1275981dc98a677f2f3124809ebff1afd3b1
*cdf594de537fbdd0d1be9af173a56ef937bd3a0ea5f7591d4e305c7eac30a1162ff9777673f895
*de3fd5e30b24508731262dc459fe7509a9b4be9717fcc4b3e3946989dfe5f22017ba9e48785db8
*4455e50f694ddd2e3da92ffefa7b22bd3e1ee50f33518b994b55e65b33763d0079f358963f7c6a
*42db252efbeb72a8f7003c37c16a83cd28f46cb62129f311e505bdbea4f396fae0b80bfbb2909c
*b7991faebbc45f0db2f3f6a9ae1e5aeed14f4c28ced06c090f33c33ccd8628de5fe9c9330b3af1
*0b451286785acaada3141d7802f497284f4e21f1cec58585feab20270e9b1df0f5c83036238dc9
*4c520e1ecede00c403b2bdf22c4c56794c2f2d4e5381eab1921b13fcc796f796e4e4645c019c43
*0187cffc631758d76be25a22f45a6499b0af80ac4415a15d1bd905787e6bf1c91ffe572bff4381
*7e18243721005c70fffff05135fefbeafaa33bf9df6dfcae24ff6b8ae97edbc6be243892c4fa47
*940e6e0b89bc94b3c9636a7201db1ff9e5e5a118a0bf08743216c7c615715bde8db5d95d1a9c9d
*699383bfe76946a7dabfa773919fa4f3788cf63ff45f1bd6ddb61d1e807a1097de01ba5f81ffc2
*ec9e80ed917dbcd3757328ebfbeebbf683f6972fedfe30406b22acc1bedeebc74151a091531bc1
*5173941ac3769ca7b8ef4a81e4d6b1d6438bc65bec7d58f50396fbcfaf2e6b5424d3206bec2994
*3af22fd9fbca677f907a028003d72cc9b325da95ef34146f0232b05e223a7d495fc1e8210ebe1b
*a07589320655dd8b4634eaf937ab41283709c4bf1a1c6df5f47d706f27d5cfcaddd016d0dc96d9
*ee897a1d2b328d80d78a4ca5aec808a6065d7303acbe0dadfc9d4e20065f06181d061a4c6672ec
*d31add37e19761576308a4d643bb61406feb5c7c04843f92db69646abca84bcd1a2fe6868255f2
*0068992d511571c97a81ebf4f78c2bfff1d79326761d1dab8152ddc2ea29c97879fb49f586448a
*7c08ca345a353aece227bf98c26a97452398d9930920214dc8d59d41971d0d6644d2d52629b1b2
*d5165f36e4971d6e6f41fe2a7bb8a0805a8016032ee5e1de890a69da94eb4e620f945e18c6a2cf
*3b82d2a2cf250ae9d29fe70675a95c8374f082849700d86d1105b5b24763983129c641f1cf3582
*21578f6546a1be84d582153cb77c70d5793ea89b8069ed802d05fb031e334aaa4274f4f850075b
*9f0b7dcdb47b97d4a4fc9d1bb19eef553a57a9082fdfb99e1237d6b9cdb0afd1b9be66da9dabfa
*cced5b804381086b7bcfc673f91eac2965fbc7a32ba54d414be0a24e5b061cde193580d3fd7489
*06c93b8be6dae90e834cd36f83ffaf3dff6120ec37f3e92d9cffd61eaf97fd7fdf9dff6eebb7e8
*fcb774b4e7dfd9895092ef1ff344789621c72b2599b1d23c4717d028bf1cc54184dea0e088683b
*5c6c4373a583eeb63e7a899f4e52719aa467794fc1c8d8c50a3a7a620f25a8b83a8473191c2d95
*f3dc229b1727ff791b2a1f729c1a753e800a395747fea573987c6e3887d52950341fa0cc8949e1
*862726f5fc9b55b5f7c444a725c4b1eeb0a4c74c823607245d9ff780842776b527af287738782e
*c24b88efbd80e5f1c50f174dc5b0a8b4b833c719cbf2ce876ce9cce205ce67161be35576ee83bb
*29567a9f7909f26a8e9b5f9ecfa7213b4c078e6c5e604a3b236f294398221782dc99a12c0229d8
*6531346afaec6170f2e4aa1e3d1ab37b4e1e8df9cdc16301d852969aee56670bcd8d79fb5b9e30
*ac0e5f362c4eb3fe67906d93efb9b0884657e70416c97f5757d7cbfe1f571fddd97fdfcacfd9ff
*0f82e4f40deeea7ebf8e353bffe1289d8563fcf4b7208b7043838fe40805a9e94538c223ec4b19
*622b885f84b86885c928aa7893fc667aa5369d7b58860abbd0136fe3f058fc258295e822fd4cdb
*f2cec93c39ee8f4ea2f0441c62d008c8b881c02abf4b321b4eed3f94598f6737c27bf4444ea348
*bc01bcf1a633e6b1a3cd305583f4b5adcb6a46a5913f80ec1d8a963cee4a95a1209346e673a56f
*896679ca86e5b595b21ceb70104e64d868c31f7402f42237fe28c8dfda6be60de083e20b087c85
*39e8b66c7db62013c8b17d817ffbcfe0c1daa0194704c66950319c1f89c59681797579cb3a27a0
*6b53f2e566e16715c53082f2b94d46d513720d6f2ab692175523912ed5550242875fe81ecc32c5
*2caa65e88a8e9c34cae1c06d2dc7765ada1edced70a6c0348e5119988b6140abe316ee7afbf003
*591b11288a72699a8dbd0b68788803934c734da7021b8d4e58f3813380907c66a801f29d79616e
*fac8d03f0cde8c159ccecc082c8d582df40ec5643feb8a4e4434dc15a780b1f1a61846930b5d7d
*243affcd050a826b0ce47812744e0998acdb1a25e9f5aaa413584361345cd63c33fdf31a1af73d
*fc3bb4291af37e8f426e95a3efcbd1b773dcf7e5b8af7248aeb8f31af17173c924c9bbd9cc6ee4
*667492a45bb3e838a120b16196c1b1ecde3023cff2f00d960b74804b0b4c919e85d93d2a804221
*21962cb064dfaa7387b77bf5b9a3f9acd15c41e9ace0ad88cf0a9ef3c17275c8338e17b4f74c53
*39f858ce2d8c6f8be52ad7270e6bf55bae64f5147269109e93c9a56198d3ca15aa2f15fbd6acec
*ddef0abf05f67f3762068ae7a1cbd97f6e6c6cdcf97fbb95dfa2f1df9e171c4af985bc0d2e22b2
*0ebb8c3460c1f9ffd1caca4377fcd7561f3fbc93ffdfcaef8afa5f8ea4a0e668ff1e1e471139d1
*fe1d0587b0546f0675c4fdbbbd3530a776b547e7a4d365df1fdc6447d69968d6f65c9d1c5f293b
*f151fc85fc3b967fe368e20f6920fdb72ca53bb59c70bf145c000a0563790a7d016c0e1997c113
*fe3527773bd420e24ae762d7988b5822322d946038e339413b67b5e996f2b99d63a8410f909e66
*28199e02e5964388a48d0d9cb3eb5f3ac342e8da5716b47961c4e2032a72bf1017741e3ec7173b
*3e20e96323047ca807f19163a702be0a92fc80ae3d6cc6d9d341eac4e101aecf1b2fd4a3a5b280
*35db21f3b0e6ffbfbd27ed6edb48723ff357b43df30220a628c989e3d9bc282b47b6339ef84aec
*ecee7b9e8c0482a0883508d00061538edffcf6adaabe0f8094ad3873989e51804677f555dd5d55
*5d4745792d472717099a63e8f72ad9d61e874109b48bb32777e9bf4af95db447a85bd9ad118917
*89302dadd8d90a38df33266c4acd2671e6a5410b241b0f849b1e93c309b44df23731b527e14d50
*9e7912fd2c6ec9e4302207e40d224f9443c8df2aab9ce294dcb2c60751de48a9825753c4d7df25
*0945eae2d826021e1e6bb888641537f878e2878b2831737eeee4fc5c8e3ca6dde0392eac127b4e
*893d097b4fc136c77513898135c6553e8aec64c96ae5c514cc28f87c6c8ecc2c9228ffa9c82eb3
*2582db3625067c0bb1840894cf08af81034d07301f5be33d34c4dc31a2dd5e9e862ddedb44fb9b
*fd8d166afc940a584643749add12d3aa3cb0dc14bb2c71d9b116b4ed3f2c8ba0650fd71c801430
*2509800a70cf01588a3f0e7748b3cfc17684cad96bdb29dcbb5b8d596684276dec57014adc1466
*c1ad826e08333e83fc39510f9421c38dbda26d61230ec158a52162a8177b334107fd6712f246bd
*f36d40be981dd34ea51ad3c394307e56efa14ea4eaeb11d10c8f6e42a53a513df175b6688aea25
*c2e153ae4bc4e2135981f3477bec8d0b7b6ca4f9ca9b69a6841a9ad5a9f95d34c04c6d30c28499
*b0042a640792c090f24a7a45d31c24878d9b31f466462172e28b316c6942b14ced7a73661114bb
*5e157ffafd0bfe7af97fdcdaaec809d87bc87f0e3ff9ffff38bfe1f97fded42bbc5df8302dd06d
*f29f9b5fb9f67f5fddfce2f093fce763fc7e1bfbbfab9542e01f12e80c8974c86a4ae22bcfbba3
*08675888b3931867ab2067d0c9f04710dbd8a3e3cb681ce10917cb04952dc8999584440430f928
*1345046171215e65be583e8ccff3b57c0e6b6ef6857ddc2eead9eefc6a7753bb9d2df6447d2832
*918677720c80a4fc43319fe573f6e8f4c79f1f9cfc70f2e77b273ff409a6fe9057b362ae644417
*480baa614e75f2914e1511c48555c6f3856977c98ee30898f8681cdd8892636e9b711ca5110672
*e58ea7c94d7524e146c713aeab44f1638fd3630a4397129fae08631e67d3f01fc763d8e5ed2ac7
*b8177533e3e1e7f28a5ba3c2ff38502071ab76cead1f603a31f4ec5af6427abe9bb007143f96eb
*82ce38ec031e090fa32aa6ed9ae5dcf28d03ade72c95e6a58c7d239c2d2fe0b44a9b6c51bccedb
*bdba837e03993b9937fbb33a6bf70f0ef60f0ff7bfb8bd7ffb3ff79fdebdaf0fb8d56cfeadd6ec
*d1036f8e37e9f7a8370c25905ea0433d530558acad7bafc40a40d1a1f44097a7b32046f0cf772c
*eec5e23a2472d07a712476a992d8e9469bac888b2dcc10e0f9df8ed8bd1fb7163b65eeef887dff
*5cd81bb9bfe1da1e3eb76b8bff02e73185e7f48bf16f530a076a7c9f8606440a1ac363a2648dd6
*76a5551c60e184801a767e61b8420d577d9c306cf210a858a050b223c8615845f5b429305af4c5
*ee10b9c1aa5134100e56e5f5a3e29a751840453458b219f302e406c0f168784343d7ab801eee25
*17db72b07f0ce8ce7bc828e5b612831de40860a82810c24f5eafa98b0460bd026a1d38f5199208
*9a6453ed4d89d08c6e0fe5f725663b160cc8c7762ca985626681a112d22acf9ccacb74705b7921
*00095b08f6747d57984133411fa63617ecede40e23a40c5e2f3f38a1a2f6b8cccb62c5dca8c8bb
*8ed310783e449781ec5bf89a1dfebd79a67fa5df30ff2f86ff378dff03acfe81ebfffbab835bb7
*3ef1ff1fe367f1ff618d0dcb44e31216a10169027ebf9f2e0bb269fc3d143f2c86ef1f55cbc3b6
*cf2086642e066d6ca97a883d959b87622915fe45ba376071247a1b2564a5021f446224813c377c
*4d20a4a563d28f86a6c06ba1e5a8d82d261f475e21e7c9175718a61f6626e03d6bfb1d093f3365
*5b80a062368ed16b8ef8fc98ab57e3fd683abb9b676374a6f40628c9c41557dc59299234ac63d2
*275db88cf36eedf29bf2fe0f30dc2161845fa1f81068a455cea2ac83621538b7cf6b52380f0654
*24bb4c3ffd216c04c8643fa350f34feb96a40743397f7e7eff4f93bb1472da89d028a3584fee37
*796e48584e9e3c7e7ee7c1e37b3f3dc361a260f724ae7896bfea010063bc6af2b685be4e7e7a78
*cfca05a5ba5cdc00bf4a947046d4f6bfa74f606194753acb67cfd65cfe15e80c9a6af2cf0a80c2
*4f65c9c1630d4a1cd5df1d6b4e0391b1a8ba67275d0a914e3eafcd8c3ed1457c11717cb24625f3
*d085e4d3af463eb3bd21cb2620e14c0a16651d0a8ea97a90ce5a587319dd864266261696511425
*2681a2b8f0eca262293a3ca25f52a62037269fa746374d364de7ddb3f29a0ca43020614e81cffb
*802b5b12e5d883fa232d4064ce894cb2a687786d4b1be41dfc1fc37071a65198834820f0e1ba32
*c4d13fdb4ba7ccbc31755dd0498c88f425524e7bc01b2a675570c0db2e832d53a6932b6d351c15
*8cf5211f0e587c339ded2019e88d9dd585b82721ae6b6a5105fdad44a8b23e882aab01498d33af
*448dfd3d3e51e667fa96433aaef19e96a11eda99ce5459659ea390d42ca79f5789b6a5828eaca0
*d1552f5884f3bc860c90ef60343cdf7e492a67b7ab0eb76ad9df33aa7ee9f56e00927aae07a0ca
*8e2d596d6f2c6500e5d6b552493a325fecad4e4151b31c822497da91bb0ef55a1781d67a16bcf8
*ea6d29674dbeec2f441ffd32b3e2757f19fae897212bcbbe32f4d12f836dfec96d9f9aa85763f9
*245defb2bfc7afc68d10c6aac2d340f31fb9add915aa2c6b4a788560d79fb71dedd51ce9a10f67
*bb399a3c7bd5bd91fce0c9dabc1cbe50cdcba2a4673ed686a43972dc4ea513b13871aaeb2f21dc
*809925bccc3cce8c728b263980c146dd0186c1f0a4b5ab7fb3506b1d50c3eecc586f3f10ccf040
*de29cb2b6bb30d6a57176c3e942d537fbf68b824fa8ada1d04f89eadd7b0b674e2617ab57d08c0
*7bdf2e0850c31d2077b9b85cafa8032178ef8bf51216ad612208d4f21decd38bf4974b498643fd
*30606c13fffa25fdfd7ed927cd26d3f7e5e524d926cc20123940b77740c3eb0115bac80a7407d8
*4dc3b5cf8eddb15d15b90db0016eeb8ae1932a0466e76e3c6d20255b87bb42d1d7766cbe074826
*d00250f42580961fe225fb9b15aca7b74f1af6f07a0006b79ad5979d9660771c40975c1ab2f8f6
*f5a18bdced38cd7da50bc401fa210b4480a23dea99e5d76b6bd730fb9577cd01fa215d13a0a86b
*28ad624af6144437e3f0c4cc57816e0ea0cba29b284e1db0447fb28048bc403f213d3bc1f784b3
*2f2fdb1d1b72b0733ee46dfdb381f6c3dbfdfc61f189cab1bc725c0cc3fe1094b4218eb867fe75
*de5442e42b611892623424e8e9fbf3267d9d372d3ccf2fd7730f7ccf55b20f7e5be73dc883408d
*89368661a0c7908bb45a2ed75b1774b0b72ee8ad3d75a1f602c46936ec6fcc724ef0cf709f57a8
*c9b31b6eef5a5178049c8a7a4660d73a7ac1d38030714b62ac9a743634f3190f8a7be9252ea186
*bbec42dd61714b80fdb0464efea7e87aaabf6b940709bc4b63b6033dd8c520f49dbaa9010fc3b4
*f1db28ba0b763fc2217b0feceea96668182e8bdcfd3de905ce515bdca2b12d54ad7d1da791b097
*89ad30eda42ebb65d59239a87c7644e78c42f7ea220f8b2a6f59495682fcd92f50262cd39c3234
*0a3ac44be8670d711dbadb5ac3b7d1168aa8afcf623e387f8251a37b89221f8251e7c9226da43e
*663fcd80b79b9725163cc8c1ee3990b712442ed03e78fd12d45ecefc617d7e698228003a2ce5b1
*606fdd4c02607b20f65e28fff4f01ebf4a36dc2db8ecaf8626725f763b9530837df6616eebb704
*d70f69978b6d625ed445f6eedc992e74e5747110f48790c516403528a81bf3e4ee13a12663a973
*4c3e27bd9db469f3ec390d1194cd9be7a893006fb0b38de575393acb819d82f85b5bff01d10ada
*8901c0654ba82ba4b7d0d6cb5c08ed74b8cac775f558aaf8a4645b813a20ed98efaae872a7c578
*e2337c2ad19f2466a1c089fb2a7c221c25e96a0c08004dccd7d984ab306d20b9c038cce9462a82
*538a52283742a340018c5a415a2cc4b5bffaa492f9cffa1bd6fffcae58039e7c680c9061fd4ff4
*f5e6ea7fdefaeacbdb9ff43f3fc6efcae27f90fd678ef883c9a8ba3866dfa5d5f9d3748d2c1ae4
*104fdf77296d59ff18baa01cc37755059db08043efef2816226cd032f81f00a4e277f3aa68d977
*5d5ed558fa4f7bfddaa45ffc6eeec2e4114411e5508ff4bad18debda5c705db3455acd00584e4e
*6749c3a21587afd492417818cfa1c9e138ab985247e5b1d3c6aced56a42597cfe74556608da8a8
*8a87289d70a8a0da55e268a450cd6559bf3162fae1014da12e73d6c220d34129cc0fb1813ca65d
*57cd5a910be118cd9d3038a053344122db46197a495a207275d7b3c96793b3fdb3c9bbc919e4e7
*c12f53041489fc9188af32a6b13cd6c971c4472d02caea7872e5ded8fa15650512233a7d9059af
*01676cbed0c7476955acba923bc8e3593467486115cfcb7cadbecdbb522ae1f229e5cfe67c8b24
*3dbd2a4f9b37f265960354e9382efeeb5f1343b3f761d1ae8dd7bbf05a54d9fa4e9ba92fd4f43b
*80f86ddd482365e068a76a342addceb6782b2b2ada13d5aa5cbaa953aa413ba91213e4312ed1ba
*ca911e54c531144f392bf97fe4dba1783d6489a54bea0513bd0fb96851ab8ad63576d729877f3e
*c4e079c0c6dab8c618b6907e0ebbc784cc5ecd043289e536cbb853f2c002b499d4ab75b1449f02
*3c8e3b6ec6a588e20769b0e2d1c6986130774806ac12825cfac06d935956d6b028a732f61f8678
*e7b3d8b265d122920a3be767d07ed80e79bc3a56162f73b26c56fe7856e812ab250e1ff821da79
*b8551f6c275332736ed2eca50c98c4cd93699b9b09fc32372adacb2a5eb1542f43b46f0a3a3a78
*465eac853386dc118a8384c2b53ed31a81bfb2d30cb6b8f59df543aa131573f110fff9f1d33b27
*3fe041caae41152237d4f83776871466f3e635df8c3b8a2d45fb24231bee5c8e1123c8938002e9
*2e3fdebbb9daf5c7ec0d8c299c0e99b194827bb698ca5c553c569d7c54b774205fb693257a42ff
*e7e8a4820d9d747f4e271fa66f2fec7e084d776e720f2d99c219c6d66f6a8ccb9c9e033b3a614f
*e2c3044ec1d74553575450ed73bc157287d2add832d40fe14c7e03c768c39669f37202fbf52cdf
*482cb60cf519e7180b38c73158995c0f13730c166f964687b7d7fe67d816faab3fa703fe522d58
*a6f0bd6dd3c116d092152d90ab1aaa9c626c47e4206883a0a0da846a62483f08cb0a13cbc8a982
*896ad0b930ae85f04ca6a91ebabf18251668d7c27b5854af31944fb5fe9a500b037eea61fa861d
*8c552da83fa874a49745f51daeb8b14e4937949298ad515ffb5a83334e612d786b7087de83d54d
*b4f10c4952e1e0904df345fabaa86137ce2b0a3cc4e4e9a8ea33c3b349ce440632ad9714e75746
*76c1d1438b10d8447025b5b21ac352959a9d8ee9c413b6aaf418cbddda72cf49073b9bb3b7ac40
*d5afb78a686167f333796c174ba1777c82560d8da9762fd3b8cafa79572140c8606411893cc74c
*705f4fe65c72fff2319c712b4cf142bd0bce5e90f9aaf4092cde43721d779e89473156b8061a54
*a96e61d5adb90946d3918b1618f406590bbe21298429c89dc7aa38cfeb6a0124f26c329a525415
*3e88387662a2b7fc471ac91848faad3a1e11e6b5945d9bb28c5d2bd9b505bbb6641d343845ffb6
*53ec181da029fd2bd982e167aefedfb33a6ded792a8bd09db2b8493c78fcf0c1e37b6caa185828
*bbff249e25fb8231da9fed934f93695b97dd3a075c7c2d1c258bbda8eed6ab8eb612b52a548c62
*d86346024960d4143d009d471d39f12586f69dd23fd9beb9b87a79076fdc0882fb6278d1959309
*2c481693394599b0aefc85ddb82110310200b1c8090b99c564c6b1805c8bc9a45bfc928cfcb191
*250fd88b5fe8b3467efcfd3deeca71b740b96ca71265996b30006c648f7bc5be854e005c271d77
*f4ef30622537f72849880cb9bf56d0e2ea069c726e39dd56f93bf24a18f32886d49acb43984bb4
*90e4eae57874b0a779b3c47d5f7c453a9f283c3c5727239ed1427385ab2ad8fd331832fd4f87ff
*f1718b17f19a7422d71fd470cce11f4b1a98b362f2041c6eef48f16d769353738d3123d78637ff
*90fe4125f0d76dbec07d1902929236669f3434af5fe912f804620132a0fc26ec0177ffa3386b1a
*8eff42cf3b18b3740e7b148f935ab10cdd28514cea3930e52d859e821de0003871eab1b384906b
*e71f62b5c24fe53fb582524048696a753f2dc5a9fa0ecd188ef807f459d2e581b591f12c66bfa9
*baad5d267bdc4eb2108a7d111b06501c9c8069451c30b353680e47e9769f30e2155f8866cf707b
*04ea877d7b449b446a7d30164cb78025d795f027d51bcbb7a2fb224fe60d80573863360a402bbd
*4df38e9e6871dee384f278e3365765487530e93885699e8b6956a734911e28ed49ac5548f98e0c
*8a5da095d5c0b99a2bab855dd5a6736e5f4da7e1325f2fead9d706305c80500db9af221f5a25da
*3822ba020567710918dc97a8e51a688bc908184e0dc4c556b512ad5cb17738cd13be3e6323d734
*b15e53fb354ba8b099b44c1092391a56addeb4fd8683b26af36e569ff40e4c9026607e3177a44e
*71a4badf64acbcbaedf1629fb30ac6ec518a12078defc43b00818207102074b1ce97ed64a40846
*6b7346e57a930452b98eb80c4948d042582d735ea64d33215763699be1d5282c49ab99a380f06d
*b0c12c58e2c52f48d6924831f439cebece28d062e0236c172d1c4407f0ff0019529a0751a69283
*7042cdee2548d5040c82847e01adc309538e7064772997ac7bf60fc28ab30846214a10e229023c
*b249283855d922b2fa1be1c96165ea1940491241f91816aba0b71611115c898b45eef4789bc203
*8e832e39421b387224e863907c019ae7fb04c5a8c48009778214d91ccfcd8848167eae8f047e0f
*502ce6ec88dc1bd61cfb1be6292a4dc9538d58db1cfe8328d378e99c386d3c1a804e3a8344324f
*d2bd43994196e3f055398c1d90e2b8c753fa9be1df1c77997651ccd70f7112f0fccc1336793761
*f0b15380b041c3804ab6326673a50b6b927ac5ccce5a27782fd04508a8a13d863f87fe93c92b5c
*e58853d6c624e6c8c3a2bb24fed758841b8e96b35c126df85dc2ae682372f7a24d186b2e339d9f
*4dcc23d2985907e3fa673683b3b2f1e6d6c1cc268c8ffe1969a0b0896516ba3661e46bc268452d
*dfa396d3df6c4fa24fb8e50ef635ef8357265a8939f4393a1411e2258310ba2f8a156e93faec1b
*0972730bae201321726e3c56dc6424f4281e09b6dc1b47fcf0ad305f76d86ccdfe520f931d86c5
*1804d1406f6d01898dee5151ec05fc933cd79a9c6460407df32b53d8e833bcb1d7b7b992251969
*5b799f0fa17b329d614362082141c43011b818ceb4ec7963f3e1b298dbe6c9882e13c3ec75df4a
*66a2d026b08e810abce0c9119b46785ac2960167de32625d04f327660312ad55c0015e404fdef7
*4737d36dd7a0c47c8e3279bc3a04ca985f5cc871092d68a8fee2bdab35aa9f93a09e48447d43fb
*0e47c1da3ddebf8bdbebb276245cbf80203022dd87d745ec1b5535b699977a5a16e79c6f043605
*6f0a155eab7b9177880dd65e291b16fdde0d1327c33212a23d9b1db4b42962eb1b8670b1122e92
*44360c7d2500db06fb8009606bfb6eb6eeddfd3bd9302607ce6edfac98cfbd6600867551323470
*7cb591744b977cbfe699addba579306c80b2fdadbbdae62d70978974f3e8f86437001df1044537
*451145e2b9011b159da3b8514543eb059a07ecdbffd1cdf58a144f019f9ab43acfdba0c846d679
*b64c37674ebdd82194f043955879bc10b916f06a3603adcd518d18d16aa66a6d43871616c3730f
*295b491f01fb5146fa98c39f5a7e91e0d88998507f50864a0f9861ee084a512c88a8dde6398a06
*c51d9a3ae5a432902584d074e5c8d604193878901470321fb1f89b03a0f3f4c96791bc7666ef78
*1e59abf992279e55561f7ca726016b1e7ca783e7de91ada7b5cbb9679f5c4786ae903e62ec5479
*186054429112a9a4cd4efb1f5f89db373e7bb33a62b4f037feced445ce4d0a65bcf06be8ec057c
*24452fee12a3e575806b0a43ec9d85d615a030ad2cfcac565648aac1974eba81f929236745d15a
*225623e24b89980d911aa9e448de84fe1c94e011858c1dede87a7b26627de25d1f11cb2fabfa4d
*a5af8281e782bd06fa022fd2313f7a6cab2b1e2ea0fd5a24a242c23197211fe3fb4d68f731344b
*257c810929dbc7c9a7842f292132526e61ca14137891afe83dd209b73101368463ba80c38bddd7
*45ddb5e505ecc5e22639ab57e4daf2387085cdfc3b6c043b220cd86931f6882639ae8915e9300b
*9c83b097237d807eb8182657c4422ed14d18db62baf2239f75804db01da5de4ebee04826eae8db
*a2150259e24f4460b95d9b8c17f6d2dbd27eca97a89f8201ccd4bd86d887b57206e20b2956c078
*294e7f8efe64461a032fbb1f1a25cddd90df8e702990bd1dd29748f3703eb1eaf1cf177c9d06a8
*47b9cbf994bcf9c925bc47c11d2f4c438577249fe0f1997ebb203ba33d9402794a100e49a7f3d8
*8d10c3e4d213626f1583c31c19e1bcd8b0484f4e344215cfcb4e2e953932f6271313e92361a269
*181554d8e09821597885191827d7fc1269d450abe49df4deb8c4ecf2d9de8a69c78d089eb913cb
*6403963de47ae82fb0ecc6c8e85f70f38ccbb47d696ef9bcf6ae742be7890aa0b3f4f1278e99a2
*b28f19da19b0922326048170aac9cb3e74f1885e19addc1d89e18103eaec641470b5a8f83d0ae8
*d9383778e22d387972e7b6a80ab97713a5d076e5da394445a227958fcbf1227125f2e865664192
*cb1b46dfacdb8558b5e22c6def34e75c1be74cd4a3077a611792ad1c2eb434079bdc5ecad37bcd
*55fee722123b49745e937fd8fc55c775db9fc16197cf10f47fa36a172a4b8d8cda70c9d1aa9af3
*ffa4d647e172d55c56e667779f1fc9f3c576728bb7d3f2cbb54a124795e1cd3473f625cc699e36
*5512d242113923e2030294120e366a1956c6b48b12d70a762db3f0f11d2b84d4d54d0f56191724
*9105c6420ae92a0040da7ad98d4338e5207b96d8322c76422455ce551b70865ea7a5b81a89d70d
*4c225a334f58599fa36d09904713d4204a9cd84d0778577a30c29ef9e38ca9ee18f35188f7aa44
*257fcb90b86ed16663c5e29b9faf9210cd7a10185414b7ae9a7a9a1b4b015d05565993738314a0
*b438ed083df85b0cffc3a182530558a11295c3f24d96e72857d430091eef8cec88fded5ae14c0a
*aa4340bb8b04ba82ebd3fdee9e461c0c951899eda619a371c03959a1108ebb55c7d74571be4081
*31522450a12a47f9ade6baada61ca496e6b4abc48dd8909f97a17e2d11b778bf0850c9965bba47
*d97839bbc6c0ce8e3fdc52703b8b179c4be01e456f8e0cd701e48f990e627a0aedbdda37f3cc3a
*433575659e6dc67ac7824f811d8736cf1017813afd23250a63dceb1eb9721dfd24abea0e0f7dc2
*676201f00b74465b4c24dfda96d0ada7df1ca143b64942c719b9c516c153f0317890a166847074
*8d11aeaa16da6149276edcb8c1aaba595a7e4bf197d9c28715b5e9008acf6a7fea1fcc683cdd11
*becebe014cc8374fbd021bfcd2aef3956aa197c59b2ea015e7e4d6375c4ef4c26e6a5f4b03e3df
*dfd8d064059b823b7355a3f708d44d318d512a61b6c6ceb9bd0b8ce9f442aab8a10c091abd469d
*40b4519be6598ae66086091a6669bb2919b5984eb37a881b4e0a841042110a538f3e3de521e42d
*f7e4f63d23f0f85be8bb5de897a9e560bbd0e4940dda826cd2562994d15c67d2a3fb801b311c55
*47705e5463d6d650485cea92880ea603481ac37cc5eec8fbd061f87b2f5a0c7fae5370e7f04969
*b3dbe782ae4392b3933963ca2f024819909416c76cdaad1109d9b2cb16443338f8ec1ec7468836
*690d2610c7c01ad415e70a41b049f16d497d78447abe47c6b397a521c5f523e3d9cb521a59ca70
*96e650d5438f3e0c9da1f432e0cf71376f85f70bf20152c9d6e402a433687ef914026904f70b41
*1551f36c2b470c6fcf843b0bc3681169651299528ab1f0d5821f8b8a935040bb50f5dc2bb5b2a9
*948ea92d6bcaad15a9d871aa86ad45fcf071bb970d4490dbbdb00e22a7cb045d5187d1c376ef11
*a856670ef9ae094d81728834ecd4d7c0a890eb921064e5df77d83fb1291171c3a3ed3eb077caf3
*7cdaa4a1a2db315584b0d39db8242a0d01180ed2378062bb000d47e90b03d5a1fadeab9f7280c3
*a5ed1d4d59d2861183f4e4ee0129657e969adab0a9f13d8bf64ff34d6da1465b39156fd01c569b
*1ff7911ef18d44ed9af4bee708da289106d7b3ec36899225a99839b2174e1a64f4ef00589037e4
*e5529bd8b8d4ade6bb0d3e087578e3ede77e32dee18c4f749c96291edef2d66e1aba6c9a1a67b4
*2374e787830cf0222cb584c5954856a4cff5dd67094dc17ba669f2d9243807f1e4ddc49ec1949d
*6deae68c076248e9e275eaa9a2e187cff003e7914d91ad26ee5b535578d81503aae7efa6a2c7cf
*4fd5105ff54e50bc57a2b61d44b3df00a10cb199a346cfbf727ce1772b213df58a196668718c0c
*7b9388cb77b4ea88817d7792b4c907ef64e2f67237725913bcdd6e64322f207ac6bbe4ad004a35
*16006d06f51a855e6e5e91ec649edab4186d784a522b24a42d6178abee2a74ee584cbbe0699422
*a22aa1b7b7a1626a22adb2b4b67a0b491921cf2ef4f2741e4897fd7b86f631cd6e430e5cdeae33
*59b4cf60ffc967445b90e1d2c8348341e399debdc7d790358b7ee4957ac5abf4f776c3f4bbfd86
*fd7f3d69661feafceb3fb6f9ff3ab87dfbf64dd7ffd7cd834ff15f3fcaefcafc7f7152b6443bc6
*c73ca2e05d69778f07dd153940dacda917a0edae1ebdc668490b6cd0bdb22c6a9ef6a701175d57
*e3a68b3c4ba283ac14edc005f187e410343ce24631405a491638e216e1116c5f825482dd2eba32
*df527d4ea570108984ec8bbc4ae16562fa3b3ecfd7f420bd3349b791f123a94fa3bc4a3eb25c42
*282f4a3ab6e90e2155efe34567dd4c9ea25e63de1f5cd5f464f4241c2c553a38d28e5f7ffcf9c1
*c90f277fbe77f283765bd4ae273f7645f692b4094d07a1efd06655cf5487473f4c1ee27f04a77c
*5794ebbda25204bd9ced890abb49c3465e7ef81305dde48f74256bf8af10d371ef959e00f1443e
*96f8237957e28fa2d260cf788e3bd2dd91783fa9758ae8244d528f6880e2b627a6404ef4c692c7
*29e11b20b02da193a7f676f08e882c508d1489014c4362268f7c87ef0ed7a2e46312fcf6029e84
*6bd7a2be606dd7925a32b67333b56833307042b2495f4cc1325f62022b0db1327711a12149c48d
*e7b60c49ac4d0f00f7a2e55708bb754f09e1f0851da9a5115a7a6f1645b660e90c38ce482296dc
*2f051644a41881f7367b70aab5a4d4888b70c23d6e295fb7b81ae5c605d518e9ef98dcbeecf0b7
*b800c7b8f4cc1150ea2a1a408fc28aacccd55991951940695a7156f1210859b59ce155caa91252
*284f05aad02966d0d9b58b03a3c7df1ce937645a2865ea43918dd6d5e8a49d32980de5edb0fbc2
*3562752e7bd88c749ed128696534bac6335abd532fb1fc4c9c5be741d74de7be4d8c049ee3b5d9
*d0d7235288b67a839cba97c9aa087358dde8dcf6638e81f6e3676affa907d66cff23bd495addc0
*8cf6782b740c1e962a328972a24788aa5f83e8aa5dee21b3cbe36e5fb0172c3e6463e147540e82
*7dfd66fec690fd60cc37275d89843c5c4e5723291386ce6cda4553542f8d366f12735bf85a8fd5
*d74ebdb128ba493498477ab1bf30a03fd26bfdc52fd666e80ca299101cc6acd60369200d2116f7
*e5c5e203a1ac9238f92d8046fe43999f4dacfca95b9fc61aabbe9baa3e4931f9db98a41c7af6c8
*4b110f1aa8432f84816f21190270158560000c64f30ff7e1fc013a62b880a601cc7c21c8fae80f
*8f8138fde5c72118b1e90e1ee5360310adbc8febf5021a9b387b4d286bfc978e946712732fdb0c
*b74a7bacdfde2a23afd52af3fcf5b36e6d952496d447875e3a3517ba3504929cb257a0ae792e2f
*8d249c00d1e0d35c817648b24bcd34e7ff87e53f3f9439b0f5bfadfff783839b5f1df8fedf3fc9
*7f3eca2fccfbf379970c670fffcf3389eb4e91868369f3f51e6b3eca5064a4b7b00657b305cbba
*294488788c90666bf3ef2ba8fd8d7ec3eb1fcfa3fd0fae8384bcb76ef5ae7f7cb6d7ff97b76fc3
*fabf7505fddbfafbb75fff5be7ff79537cd811b065ffffe2f0961bffe3ab9b5fdefcb4ff7f8cdf
*36f97f8fb4dfbd1620197ff82c411c9a200e6d394e304b8c7fd053fe3a2dc7ac4ca739fc275b14
*e5acc92b295b76230d98510894377f93f6b3c5be40460171b752def25f756959cc0ba09ad4f7b4
*c518492169314551529ef7a9e6a457faec4604c0c601956e79dc44391acba093ec4c50b46722c6
*5f86071e8d5b8641de7529d2e6588fb4a35109c30a11284b2a9fa36ff3a61e29579854c4cc67fb
*c4442a7535a1c7094add54f428e404c57c8cb8d44c0138e28fbff2e9c34a96620ec5b32c88af1a
*204e06defbc61250c2b8f680256073656b92e216a592808492beac598e37e4a26d404e03330b7f
*73fc8bf9f8df798217e4861c3534a29253d5ed0c289dd247f166fd87b2d157b4857c8be215626d
*cf4462c42e22f636522ddd18393668647b61245c608209e36d146abe8f54926bcac2dd20d62793
*6d68086760c6f564fd51c46e03e430941c446e9e3f01005cebae11a8cab2d1e8d73dbf79f75e31
*8c8ee631bf4d50e62fdadbf86ab1f4051ff1ff84e66aac69fad91971fa67ac59b4c7022d229647
*ac41634cadc2ce077eadb2af719473f59a93ad3e2a66021c76b62a3b482ce1f1f30941f235e0f1
*a3681efea3d13c4b5ba578b0680393363c2a0151811a9891e12d3a84022fb25f1277c9bf8044e5
*4bfa88af9d65de9ca3fd19ce32ecf775d6f66f02d61ac062f1cbf11a47f5a51e460e7c3d8223e2
*f73eee3efd3efd3efd3efd3efdc4efff0167ea414c00020300
}
