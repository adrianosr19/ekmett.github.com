[auto
ekmett@gmail.com**20090405150102
 Ignore-this: 5dc29e79c41f8b686ff46c2aab17f48c
] {
hunk ./doc/html/monoids/src/Data-Ring-Semi-BitSet.html 10
-<a name="line-2"></a><span class='hs-keyword'>module</span> <span class='hs-conid'>Data</span><span class='hs-varop'>.</span><span class='hs-conid'>Ring</span><span class='hs-varop'>.</span><span class='hs-conid'>Semi</span><span class='hs-varop'>.</span><span class='hs-conid'>BitSet</span>
-<a name="line-3"></a>    <span class='hs-layout'>(</span> <span class='hs-keyword'>module</span> <span class='hs-conid'>Data</span><span class='hs-varop'>.</span><span class='hs-conid'>Monoid</span><span class='hs-varop'>.</span><span class='hs-conid'>Reducer</span>
-<a name="line-4"></a>    <span class='hs-layout'>,</span> <span class='hs-conid'>BitSet</span>
-<a name="line-5"></a>    <span class='hs-layout'>,</span> <span class='hs-varid'>empty</span>
-<a name="line-6"></a>    <span class='hs-layout'>,</span> <span class='hs-varid'>singleton</span>
-<a name="line-7"></a>    <span class='hs-layout'>,</span> <span class='hs-varid'>null</span>
-<a name="line-8"></a>    <span class='hs-layout'>,</span> <span class='hs-varid'>full</span>
-<a name="line-9"></a>    <span class='hs-layout'>,</span> <span class='hs-varid'>complement</span>
-<a name="line-10"></a>    <span class='hs-layout'>,</span> <span class='hs-varid'>insert</span>
-<a name="line-11"></a>    <span class='hs-layout'>,</span> <span class='hs-varid'>delete</span>
-<a name="line-12"></a>    <span class='hs-layout'>,</span> <span class='hs-varid'>fromList</span>
-<a name="line-13"></a>    <span class='hs-layout'>,</span> <span class='hs-varid'>fromDistinctAscList</span>
-<a name="line-14"></a>    <span class='hs-layout'>,</span> <span class='hs-varid'>toInteger</span>
-<a name="line-15"></a>    <span class='hs-layout'>,</span> <span class='hs-layout'>(</span><span class='hs-varop'>\\</span><span class='hs-layout'>)</span>
-<a name="line-16"></a>    <span class='hs-layout'>,</span> <span class='hs-varid'>member</span>
-<a name="line-17"></a>    <span class='hs-layout'>,</span> <span class='hs-varid'>size</span>
-<a name="line-18"></a>    <span class='hs-layout'>)</span> <span class='hs-keyword'>where</span>
-<a name="line-19"></a>
-<a name="line-20"></a><span class='hs-keyword'>import</span> <span class='hs-conid'>Prelude</span> <span class='hs-varid'>hiding</span> <span class='hs-layout'>(</span> <span class='hs-varid'>null</span><span class='hs-layout'>,</span> <span class='hs-varid'>exponent</span><span class='hs-layout'>,</span> <span class='hs-varid'>toInteger</span> <span class='hs-layout'>)</span>
-<a name="line-21"></a><span class='hs-keyword'>import</span> <span class='hs-conid'>Data</span><span class='hs-varop'>.</span><span class='hs-conid'>Bits</span> <span class='hs-varid'>hiding</span> <span class='hs-layout'>(</span> <span class='hs-varid'>complement</span> <span class='hs-layout'>)</span>
-<a name="line-22"></a><span class='hs-keyword'>import</span> <span class='hs-keyword'>qualified</span> <span class='hs-conid'>Data</span><span class='hs-varop'>.</span><span class='hs-conid'>Bits</span> <span class='hs-keyword'>as</span> <span class='hs-conid'>Bits</span>
-<a name="line-23"></a><span class='hs-keyword'>import</span> <span class='hs-conid'>Data</span><span class='hs-varop'>.</span><span class='hs-conid'>Data</span>
-<a name="line-24"></a><span class='hs-keyword'>import</span> <span class='hs-conid'>Data</span><span class='hs-varop'>.</span><span class='hs-conid'>Ring</span><span class='hs-varop'>.</span><span class='hs-conid'>Semi</span><span class='hs-varop'>.</span><span class='hs-conid'>Natural</span>
-<a name="line-25"></a><span class='hs-keyword'>import</span> <span class='hs-conid'>Data</span><span class='hs-varop'>.</span><span class='hs-conid'>Monoid</span><span class='hs-varop'>.</span><span class='hs-conid'>Reducer</span>
-<a name="line-26"></a><span class='hs-keyword'>import</span> <span class='hs-conid'>Data</span><span class='hs-varop'>.</span><span class='hs-conid'>Generator</span>
-<a name="line-27"></a><span class='hs-keyword'>import</span> <span class='hs-conid'>Data</span><span class='hs-varop'>.</span><span class='hs-conid'>Ring</span><span class='hs-varop'>.</span><span class='hs-conid'>Algebra</span>
-<a name="line-28"></a>
-<a name="line-29"></a><a name="BitSet"></a><span class='hs-keyword'>data</span> <span class='hs-conid'>BitSet</span> <span class='hs-varid'>a</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>BS</span> 
-<a name="line-30"></a>        <span class='hs-layout'>{</span> <span class='hs-sel'>_countAtLeast</span>  <span class='hs-keyglyph'>::</span> <span class='hs-comment'>{-# UNPACK #-}</span> <span class='hs-varop'>!</span><span class='hs-conid'>Int</span>       <span class='hs-comment'>-- ^ a conservative upper bound on the element count</span>
-<a name="line-31"></a>        <span class='hs-layout'>,</span> <span class='hs-sel'>_countAtMost</span>   <span class='hs-keyglyph'>::</span> <span class='hs-comment'>{-# UNPACK #-}</span> <span class='hs-varop'>!</span><span class='hs-conid'>Int</span>       <span class='hs-comment'>-- ^ a conservative lower bound on the element count</span>
-<a name="line-32"></a>        <span class='hs-layout'>,</span> <span class='hs-sel'>_count</span>         <span class='hs-keyglyph'>::</span> <span class='hs-conid'>Int</span>                       <span class='hs-comment'>-- ^ the actual element count (lazy) used when the above two disagree</span>
-<a name="line-33"></a>        <span class='hs-layout'>,</span> <span class='hs-varid'>exponent</span>       <span class='hs-keyglyph'>::</span> <span class='hs-comment'>{-# UNPACK #-}</span> <span class='hs-varop'>!</span><span class='hs-conid'>Int</span>       <span class='hs-comment'>-- ^ low water mark</span>
-<a name="line-34"></a>        <span class='hs-layout'>,</span> <span class='hs-sel'>_hwm</span>           <span class='hs-keyglyph'>::</span> <span class='hs-comment'>{-# UNPACK #-}</span> <span class='hs-varop'>!</span><span class='hs-conid'>Int</span>       <span class='hs-comment'>-- ^ high water mark</span>
-<a name="line-35"></a>        <span class='hs-layout'>,</span> <span class='hs-varid'>mantissa</span>       <span class='hs-keyglyph'>::</span> <span class='hs-comment'>{-# UNPACK #-}</span> <span class='hs-varop'>!</span><span class='hs-conid'>Integer</span>   <span class='hs-comment'>-- ^ the set of bits. TODO: negative mantissa = complement</span>
-<a name="line-36"></a>        <span class='hs-layout'>,</span> <span class='hs-sel'>_universe</span>      <span class='hs-keyglyph'>::</span> <span class='hs-layout'>(</span><span class='hs-conid'>Int</span><span class='hs-layout'>,</span><span class='hs-conid'>Int</span><span class='hs-layout'>)</span>                 <span class='hs-comment'>-- ^ invariant: mantissa &lt; 0 =&gt; universe = (fromEnum minBound,fromEnum maxBound)</span>
-<a name="line-37"></a>        <span class='hs-layout'>}</span> <span class='hs-keyword'>deriving</span> <span class='hs-layout'>(</span><span class='hs-conid'>Data</span><span class='hs-layout'>,</span> <span class='hs-conid'>Typeable</span><span class='hs-layout'>,</span><span class='hs-conid'>Show</span><span class='hs-layout'>)</span>
-<a name="line-38"></a>
-<a name="line-39"></a><a name="debug"></a><span class='hs-definition'>debug</span> <span class='hs-keyglyph'>::</span> <span class='hs-conid'>BitSet</span> <span class='hs-varid'>a</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-layout'>(</span><span class='hs-conid'>Int</span><span class='hs-layout'>,</span><span class='hs-conid'>Int</span><span class='hs-layout'>,</span><span class='hs-conid'>Int</span><span class='hs-layout'>,</span><span class='hs-conid'>Int</span><span class='hs-layout'>,</span><span class='hs-conid'>Int</span><span class='hs-layout'>,</span><span class='hs-conid'>Integer</span><span class='hs-layout'>)</span>
-<a name="line-40"></a><span class='hs-definition'>debug</span> <span class='hs-layout'>(</span><span class='hs-conid'>BS</span> <span class='hs-varid'>a</span> <span class='hs-varid'>b</span> <span class='hs-varid'>c</span> <span class='hs-varid'>d</span> <span class='hs-varid'>e</span> <span class='hs-varid'>f</span> <span class='hs-keyword'>_</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=</span> <span class='hs-layout'>(</span><span class='hs-varid'>a</span><span class='hs-layout'>,</span><span class='hs-varid'>b</span><span class='hs-layout'>,</span><span class='hs-varid'>c</span><span class='hs-layout'>,</span><span class='hs-varid'>d</span><span class='hs-layout'>,</span><span class='hs-varid'>e</span><span class='hs-layout'>,</span><span class='hs-varid'>f</span><span class='hs-layout'>)</span>
-<a name="line-41"></a>
-<a name="line-42"></a><a name="bs"></a><span class='hs-comment'>-- | internal smart constructor: makes sure the count is forced when known</span>
-<a name="line-43"></a><span class='hs-definition'>bs</span> <span class='hs-keyglyph'>::</span> <span class='hs-conid'>Int</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-conid'>Int</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-conid'>Int</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-conid'>Int</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-conid'>Int</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-conid'>Integer</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-layout'>(</span><span class='hs-conid'>Int</span><span class='hs-layout'>,</span><span class='hs-conid'>Int</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-conid'>BitSet</span> <span class='hs-varid'>a</span>
-<a name="line-44"></a><a name="!"></a><span class='hs-definition'>bs</span> <span class='hs-varop'>!</span><span class='hs-varid'>a</span> <span class='hs-varop'>!</span><span class='hs-varid'>b</span> <span class='hs-varid'>c</span> <span class='hs-varop'>!</span><span class='hs-varid'>l</span> <span class='hs-varop'>!</span><span class='hs-varid'>h</span> <span class='hs-varop'>!</span><span class='hs-varid'>m</span> <span class='hs-varid'>u</span> <span class='hs-keyglyph'>|</span> <span class='hs-varid'>a</span> <span class='hs-varop'>==</span> <span class='hs-varid'>b</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>BS</span> <span class='hs-varid'>a</span> <span class='hs-varid'>a</span> <span class='hs-varid'>a</span> <span class='hs-varid'>l</span> <span class='hs-varid'>h</span> <span class='hs-varid'>m</span> <span class='hs-varid'>u</span>
-<a name="line-45"></a>                      <span class='hs-keyglyph'>|</span> <span class='hs-varid'>otherwise</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>BS</span> <span class='hs-varid'>a</span> <span class='hs-varid'>b</span> <span class='hs-varid'>c</span> <span class='hs-varid'>l</span> <span class='hs-varid'>h</span> <span class='hs-varid'>m</span> <span class='hs-varid'>u</span>
-<a name="line-46"></a><span class='hs-comment'>{-# INLINE bs #-}</span>
-<a name="line-47"></a>
-<a name="line-48"></a><span class='hs-comment'>-- instance (Enum a, Show a) =&gt; Show (BitSet a) where</span>
-<a name="line-49"></a><span class='hs-comment'>--    show s = "fromDistinctAscList " ++ show (toList s) ++ </span>
-<a name="line-50"></a>
-<a name="line-51"></a><a name="toList"></a><span class='hs-comment'>-- | /O(d)/ where /d/ is absolute deviation in fromEnum from the least element in the set.</span>
-<a name="line-52"></a><span class='hs-definition'>toList</span> <span class='hs-keyglyph'>::</span> <span class='hs-conid'>Enum</span> <span class='hs-varid'>a</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>BitSet</span> <span class='hs-varid'>a</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-keyglyph'>[</span><span class='hs-varid'>a</span><span class='hs-keyglyph'>]</span>
-<a name="line-53"></a><span class='hs-definition'>toList</span> <span class='hs-layout'>(</span><span class='hs-conid'>BS</span> <span class='hs-keyword'>_</span> <span class='hs-keyword'>_</span> <span class='hs-keyword'>_</span> <span class='hs-varid'>l</span> <span class='hs-varid'>h</span> <span class='hs-varid'>m</span> <span class='hs-varid'>u</span><span class='hs-layout'>)</span> 
-<a name="line-54"></a>    <span class='hs-keyglyph'>|</span> <span class='hs-varid'>m</span> <span class='hs-varop'>&lt;</span> <span class='hs-num'>0</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>map</span> <span class='hs-varid'>toEnum</span> <span class='hs-keyglyph'>[</span><span class='hs-varid'>ul</span><span class='hs-keyglyph'>..</span><span class='hs-varid'>max</span> <span class='hs-layout'>(</span><span class='hs-varid'>pred</span> <span class='hs-varid'>l</span><span class='hs-layout'>)</span> <span class='hs-varid'>ul</span><span class='hs-keyglyph'>]</span> <span class='hs-varop'>++</span> <span class='hs-varid'>toList'</span> <span class='hs-varid'>l</span> <span class='hs-layout'>(</span><span class='hs-varid'>map</span> <span class='hs-varid'>toEnum</span> <span class='hs-keyglyph'>[</span><span class='hs-varid'>min</span> <span class='hs-layout'>(</span><span class='hs-varid'>succ</span> <span class='hs-varid'>h</span><span class='hs-layout'>)</span> <span class='hs-varid'>uh</span><span class='hs-keyglyph'>..</span><span class='hs-varid'>uh</span><span class='hs-keyglyph'>]</span><span class='hs-layout'>)</span>
-<a name="line-55"></a>    <span class='hs-keyglyph'>|</span> <span class='hs-varid'>otherwise</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>toList'</span> <span class='hs-num'>0</span> <span class='hs-conid'>[]</span>
-<a name="line-56"></a>    <span class='hs-keyword'>where</span>
-<a name="line-57"></a>        <span class='hs-keyglyph'>~</span><span class='hs-layout'>(</span><span class='hs-varid'>ul</span><span class='hs-layout'>,</span><span class='hs-varid'>uh</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>u</span>
-<a name="line-58"></a>        <span class='hs-varid'>toList'</span> <span class='hs-keyglyph'>::</span> <span class='hs-conid'>Enum</span> <span class='hs-varid'>a</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>Int</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-keyglyph'>[</span><span class='hs-varid'>a</span><span class='hs-keyglyph'>]</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-keyglyph'>[</span><span class='hs-varid'>a</span><span class='hs-keyglyph'>]</span>
-<a name="line-59"></a>        <span class='hs-varid'>toList'</span> <span class='hs-varop'>!</span><span class='hs-varid'>n</span> <span class='hs-varid'>t</span> <span class='hs-keyglyph'>|</span> <span class='hs-varid'>n</span> <span class='hs-varop'>&gt;</span> <span class='hs-varid'>h</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>t</span>
-<a name="line-60"></a>                     <span class='hs-keyglyph'>|</span> <span class='hs-varid'>testBit</span> <span class='hs-varid'>m</span> <span class='hs-layout'>(</span><span class='hs-varid'>n</span> <span class='hs-comment'>-</span> <span class='hs-varid'>l</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>toEnum</span> <span class='hs-varid'>n</span> <span class='hs-conop'>:</span> <span class='hs-varid'>toList'</span> <span class='hs-layout'>(</span><span class='hs-varid'>n</span><span class='hs-varop'>+</span><span class='hs-num'>1</span><span class='hs-layout'>)</span> <span class='hs-varid'>t</span>
-<a name="line-61"></a>                     <span class='hs-keyglyph'>|</span> <span class='hs-varid'>otherwise</span>         <span class='hs-keyglyph'>=</span> <span class='hs-varid'>toList'</span> <span class='hs-layout'>(</span><span class='hs-varid'>n</span><span class='hs-varop'>+</span><span class='hs-num'>1</span><span class='hs-layout'>)</span> <span class='hs-varid'>t</span>
-<a name="line-62"></a><span class='hs-comment'>{-# INLINE toList #-}</span>
-<a name="line-63"></a>
-<a name="line-64"></a><a name="empty"></a><span class='hs-comment'>-- | The empty bit set.</span>
-<a name="line-65"></a><span class='hs-definition'>empty</span> <span class='hs-keyglyph'>::</span> <span class='hs-conid'>BitSet</span> <span class='hs-varid'>a</span>
-<a name="line-66"></a><span class='hs-definition'>empty</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>BS</span> <span class='hs-num'>0</span> <span class='hs-num'>0</span> <span class='hs-num'>0</span> <span class='hs-num'>0</span> <span class='hs-num'>0</span> <span class='hs-num'>0</span> <span class='hs-varid'>undefined</span>
-<a name="line-67"></a><span class='hs-comment'>{-# INLINE empty #-}</span>
-<a name="line-68"></a>
-<a name="line-69"></a><a name="singleton"></a><span class='hs-definition'>singleton</span> <span class='hs-keyglyph'>::</span> <span class='hs-conid'>Enum</span> <span class='hs-varid'>a</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-varid'>a</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-conid'>BitSet</span> <span class='hs-varid'>a</span> 
-<a name="line-70"></a><span class='hs-definition'>singleton</span> <span class='hs-varid'>x</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>BS</span> <span class='hs-num'>1</span> <span class='hs-num'>1</span> <span class='hs-num'>1</span> <span class='hs-varid'>e</span> <span class='hs-varid'>e</span> <span class='hs-num'>1</span> <span class='hs-varid'>undefined</span> <span class='hs-keyword'>where</span> <span class='hs-varid'>e</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>fromEnum</span> <span class='hs-varid'>x</span>
-<a name="line-71"></a><span class='hs-comment'>{-# INLINE singleton #-}</span>
-<a name="line-72"></a>
-<a name="line-73"></a><a name="null"></a><span class='hs-comment'>-- | Is the bit set empty? Asymptotically faster than checking if size == 0 in some cases.</span>
-<a name="line-74"></a><span class='hs-definition'>null</span> <span class='hs-keyglyph'>::</span> <span class='hs-conid'>BitSet</span> <span class='hs-varid'>a</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-conid'>Bool</span>
-<a name="line-75"></a><span class='hs-definition'>null</span> <span class='hs-layout'>(</span><span class='hs-conid'>BS</span> <span class='hs-varid'>a</span> <span class='hs-varid'>b</span> <span class='hs-varid'>c</span> <span class='hs-keyword'>_</span> <span class='hs-keyword'>_</span> <span class='hs-keyword'>_</span> <span class='hs-keyword'>_</span><span class='hs-layout'>)</span> 
-<a name="line-76"></a>    <span class='hs-keyglyph'>|</span> <span class='hs-varid'>a</span> <span class='hs-varop'>&gt;</span> <span class='hs-num'>0</span>     <span class='hs-keyglyph'>=</span> <span class='hs-conid'>False</span>
-<a name="line-77"></a>    <span class='hs-keyglyph'>|</span> <span class='hs-varid'>b</span> <span class='hs-varop'>==</span> <span class='hs-num'>0</span>    <span class='hs-keyglyph'>=</span> <span class='hs-conid'>True</span>
-<a name="line-78"></a>    <span class='hs-keyglyph'>|</span> <span class='hs-varid'>otherwise</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>c</span> <span class='hs-varop'>==</span> <span class='hs-num'>0</span> 
-<a name="line-79"></a><span class='hs-comment'>{-# INLINE null #-}</span>
-<a name="line-80"></a>
-<a name="line-81"></a><a name="full"></a><span class='hs-definition'>full</span> <span class='hs-keyglyph'>::</span> <span class='hs-layout'>(</span><span class='hs-conid'>Enum</span> <span class='hs-varid'>a</span><span class='hs-layout'>,</span> <span class='hs-conid'>Bounded</span> <span class='hs-varid'>a</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>BitSet</span> <span class='hs-varid'>a</span>
-<a name="line-82"></a><span class='hs-definition'>full</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>complement</span> <span class='hs-varid'>empty</span> 
-<a name="line-83"></a>
-<a name="line-84"></a><a name="universeOf"></a><span class='hs-definition'>universeOf</span> <span class='hs-keyglyph'>::</span> <span class='hs-layout'>(</span><span class='hs-conid'>Bounded</span> <span class='hs-varid'>a</span><span class='hs-layout'>,</span> <span class='hs-conid'>Enum</span> <span class='hs-varid'>a</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>BitSet</span> <span class='hs-varid'>a</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-layout'>(</span><span class='hs-conid'>Int</span><span class='hs-layout'>,</span><span class='hs-conid'>Int</span><span class='hs-layout'>)</span>
-<a name="line-85"></a><span class='hs-definition'>universeOf</span> <span class='hs-varid'>x</span> <span class='hs-keyglyph'>=</span> <span class='hs-layout'>(</span><span class='hs-varid'>fromEnum</span> <span class='hs-layout'>(</span><span class='hs-varid'>minBound</span> <span class='hs-varop'>`asArgTypeOf`</span> <span class='hs-varid'>x</span><span class='hs-layout'>)</span><span class='hs-layout'>,</span> <span class='hs-varid'>fromEnum</span> <span class='hs-layout'>(</span><span class='hs-varid'>maxBound</span> <span class='hs-varop'>`asArgTypeOf`</span> <span class='hs-varid'>x</span><span class='hs-layout'>)</span><span class='hs-layout'>)</span>
-<a name="line-86"></a>
-<a name="line-87"></a><a name="complement"></a><span class='hs-comment'>-- ensures valid universe, may result in negative bitset, note recalculation of universe</span>
-<a name="line-88"></a><span class='hs-definition'>complement</span> <span class='hs-keyglyph'>::</span> <span class='hs-layout'>(</span><span class='hs-conid'>Enum</span> <span class='hs-varid'>a</span><span class='hs-layout'>,</span> <span class='hs-conid'>Bounded</span> <span class='hs-varid'>a</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>BitSet</span> <span class='hs-varid'>a</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-conid'>BitSet</span> <span class='hs-varid'>a</span> 
-<a name="line-89"></a><span class='hs-definition'>complement</span> <span class='hs-varid'>r</span><span class='hs-keyglyph'>@</span><span class='hs-layout'>(</span><span class='hs-conid'>BS</span> <span class='hs-varid'>a</span> <span class='hs-varid'>b</span> <span class='hs-varid'>c</span> <span class='hs-varid'>l</span> <span class='hs-varid'>h</span> <span class='hs-varid'>m</span> <span class='hs-keyword'>_</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>BS</span> <span class='hs-layout'>(</span><span class='hs-conid'>Bits</span><span class='hs-varop'>.</span><span class='hs-varid'>complement</span> <span class='hs-varid'>b</span><span class='hs-layout'>)</span> <span class='hs-layout'>(</span><span class='hs-conid'>Bits</span><span class='hs-varop'>.</span><span class='hs-varid'>complement</span> <span class='hs-varid'>a</span><span class='hs-layout'>)</span> <span class='hs-layout'>(</span><span class='hs-conid'>Bits</span><span class='hs-varop'>.</span><span class='hs-varid'>complement</span> <span class='hs-varid'>c</span><span class='hs-layout'>)</span> <span class='hs-varid'>l</span> <span class='hs-varid'>h</span> <span class='hs-layout'>(</span><span class='hs-conid'>Bits</span><span class='hs-varop'>.</span><span class='hs-varid'>complement</span> <span class='hs-varid'>m</span><span class='hs-layout'>)</span> <span class='hs-layout'>(</span><span class='hs-varid'>universeOf</span> <span class='hs-varid'>r</span><span class='hs-layout'>)</span>
-<a name="line-90"></a>
-<a name="line-91"></a><a name="recomplement"></a><span class='hs-comment'>-- proof obligation: either the value is already complemented or it is a complement-complement, note retention of u</span>
-<a name="line-92"></a><span class='hs-definition'>recomplement</span> <span class='hs-keyglyph'>::</span> <span class='hs-conid'>BitSet</span> <span class='hs-varid'>a</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-conid'>BitSet</span> <span class='hs-varid'>a</span> 
-<a name="line-93"></a><span class='hs-definition'>recomplement</span> <span class='hs-layout'>(</span><span class='hs-conid'>BS</span> <span class='hs-varid'>a</span> <span class='hs-varid'>b</span> <span class='hs-varid'>c</span> <span class='hs-varid'>l</span> <span class='hs-varid'>h</span> <span class='hs-varid'>m</span> <span class='hs-varid'>u</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>BS</span> <span class='hs-layout'>(</span><span class='hs-conid'>Bits</span><span class='hs-varop'>.</span><span class='hs-varid'>complement</span> <span class='hs-varid'>b</span><span class='hs-layout'>)</span> <span class='hs-layout'>(</span><span class='hs-conid'>Bits</span><span class='hs-varop'>.</span><span class='hs-varid'>complement</span> <span class='hs-varid'>a</span><span class='hs-layout'>)</span> <span class='hs-layout'>(</span><span class='hs-conid'>Bits</span><span class='hs-varop'>.</span><span class='hs-varid'>complement</span> <span class='hs-varid'>c</span><span class='hs-layout'>)</span> <span class='hs-varid'>l</span> <span class='hs-varid'>h</span> <span class='hs-layout'>(</span><span class='hs-conid'>Bits</span><span class='hs-varop'>.</span><span class='hs-varid'>complement</span> <span class='hs-varid'>m</span><span class='hs-layout'>)</span> <span class='hs-varid'>u</span>
+<a name="line-2"></a>
+<a name="line-3"></a><span class='hs-comment'>-----------------------------------------------------------------------------</span>
+<a name="line-4"></a><span class='hs-comment'>-- |</span>
+<a name="line-5"></a><span class='hs-comment'>-- Module      :  Data.Ring.Semi.BitSet</span>
+<a name="line-6"></a><span class='hs-comment'>-- Copyright   :  (c) Edward Kmett 2009.</span>
+<a name="line-7"></a><span class='hs-comment'>-- License     :  BSD3</span>
+<a name="line-8"></a><span class='hs-comment'>-- Maintainer  :  ekmett@gmail.com</span>
+<a name="line-9"></a><span class='hs-comment'>-- Stability   :  experimental</span>
+<a name="line-10"></a><span class='hs-comment'>-- Portability :  portable (instances use MPTCs)</span>
+<a name="line-11"></a><span class='hs-comment'>--</span>
+<a name="line-12"></a><span class='hs-comment'>-- Replacement for "Data.BitSet" extended to handle enumerations where fromEnum</span>
+<a name="line-13"></a><span class='hs-comment'>-- can return negative values, support efficient intersection and union</span>
+<a name="line-14"></a><span class='hs-comment'>-- and allow complementing of the set with respect to the bounds of the</span>
+<a name="line-15"></a><span class='hs-comment'>-- enumeration</span>
+<a name="line-16"></a><span class='hs-comment'>-------------------------------------------------------------------------------</span>
+<a name="line-17"></a>
+<a name="line-18"></a><span class='hs-keyword'>module</span> <span class='hs-conid'>Data</span><span class='hs-varop'>.</span><span class='hs-conid'>Ring</span><span class='hs-varop'>.</span><span class='hs-conid'>Semi</span><span class='hs-varop'>.</span><span class='hs-conid'>BitSet</span>
+<a name="line-19"></a>    <span class='hs-layout'>(</span> <span class='hs-keyword'>module</span> <span class='hs-conid'>Data</span><span class='hs-varop'>.</span><span class='hs-conid'>Monoid</span><span class='hs-varop'>.</span><span class='hs-conid'>Reducer</span>
+<a name="line-20"></a>    <span class='hs-layout'>,</span> <span class='hs-keyword'>module</span> <span class='hs-conid'>Data</span><span class='hs-varop'>.</span><span class='hs-conid'>Monoid</span><span class='hs-varop'>.</span><span class='hs-conid'>Semi</span>
+<a name="line-21"></a>    <span class='hs-comment'>-- * BitSet</span>
+<a name="line-22"></a>    <span class='hs-layout'>,</span> <span class='hs-conid'>BitSet</span>
+<a name="line-23"></a>    <span class='hs-comment'>-- * manipulation</span>
+<a name="line-24"></a>    <span class='hs-layout'>,</span> <span class='hs-varid'>empty</span>
+<a name="line-25"></a>    <span class='hs-layout'>,</span> <span class='hs-varid'>singleton</span>
+<a name="line-26"></a>    <span class='hs-layout'>,</span> <span class='hs-varid'>null</span>
+<a name="line-27"></a>    <span class='hs-layout'>,</span> <span class='hs-varid'>full</span>
+<a name="line-28"></a>    <span class='hs-layout'>,</span> <span class='hs-varid'>complement</span>
+<a name="line-29"></a>    <span class='hs-layout'>,</span> <span class='hs-varid'>insert</span>
+<a name="line-30"></a>    <span class='hs-layout'>,</span> <span class='hs-varid'>delete</span>
+<a name="line-31"></a>    <span class='hs-layout'>,</span> <span class='hs-layout'>(</span><span class='hs-varop'>\\</span><span class='hs-layout'>)</span>
+<a name="line-32"></a>    <span class='hs-comment'>-- * Construction</span>
+<a name="line-33"></a>    <span class='hs-layout'>,</span> <span class='hs-varid'>fromList</span>
+<a name="line-34"></a>    <span class='hs-layout'>,</span> <span class='hs-varid'>fromDistinctAscList</span>
+<a name="line-35"></a>    <span class='hs-comment'>-- * Destruction</span>
+<a name="line-36"></a>    <span class='hs-layout'>,</span> <span class='hs-varid'>toInteger</span>
+<a name="line-37"></a>    <span class='hs-comment'>-- * Membership</span>
+<a name="line-38"></a>    <span class='hs-layout'>,</span> <span class='hs-varid'>member</span>
+<a name="line-39"></a>    <span class='hs-comment'>-- * Size</span>
+<a name="line-40"></a>    <span class='hs-layout'>,</span> <span class='hs-varid'>size</span>
+<a name="line-41"></a>    <span class='hs-layout'>)</span> <span class='hs-keyword'>where</span>
+<a name="line-42"></a>
+<a name="line-43"></a><span class='hs-keyword'>import</span> <span class='hs-conid'>Prelude</span> <span class='hs-varid'>hiding</span> <span class='hs-layout'>(</span> <span class='hs-varid'>null</span><span class='hs-layout'>,</span> <span class='hs-varid'>exponent</span><span class='hs-layout'>,</span> <span class='hs-varid'>toInteger</span> <span class='hs-layout'>)</span>
+<a name="line-44"></a><span class='hs-keyword'>import</span> <span class='hs-conid'>Data</span><span class='hs-varop'>.</span><span class='hs-conid'>Bits</span> <span class='hs-varid'>hiding</span> <span class='hs-layout'>(</span> <span class='hs-varid'>complement</span> <span class='hs-layout'>)</span>
+<a name="line-45"></a><span class='hs-keyword'>import</span> <span class='hs-keyword'>qualified</span> <span class='hs-conid'>Data</span><span class='hs-varop'>.</span><span class='hs-conid'>Bits</span> <span class='hs-keyword'>as</span> <span class='hs-conid'>Bits</span>
+<a name="line-46"></a><span class='hs-keyword'>import</span> <span class='hs-conid'>Data</span><span class='hs-varop'>.</span><span class='hs-conid'>Data</span>
+<a name="line-47"></a><span class='hs-keyword'>import</span> <span class='hs-conid'>Data</span><span class='hs-varop'>.</span><span class='hs-conid'>Ring</span><span class='hs-varop'>.</span><span class='hs-conid'>Semi</span><span class='hs-varop'>.</span><span class='hs-conid'>Natural</span>
+<a name="line-48"></a><span class='hs-keyword'>import</span> <span class='hs-conid'>Data</span><span class='hs-varop'>.</span><span class='hs-conid'>Monoid</span><span class='hs-varop'>.</span><span class='hs-conid'>Reducer</span>
+<a name="line-49"></a><span class='hs-keyword'>import</span> <span class='hs-conid'>Data</span><span class='hs-varop'>.</span><span class='hs-conid'>Generator</span>
+<a name="line-50"></a><span class='hs-keyword'>import</span> <span class='hs-conid'>Data</span><span class='hs-varop'>.</span><span class='hs-conid'>Ring</span><span class='hs-varop'>.</span><span class='hs-conid'>Algebra</span>
+<a name="line-51"></a><span class='hs-keyword'>import</span> <span class='hs-conid'>GHC</span><span class='hs-varop'>.</span><span class='hs-conid'>Integer</span><span class='hs-varop'>.</span><span class='hs-conid'>Internals</span>
+<a name="line-52"></a>
+<a name="line-53"></a><a name="BitSet"></a><span class='hs-keyword'>data</span> <span class='hs-conid'>BitSet</span> <span class='hs-varid'>a</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>BS</span> 
+<a name="line-54"></a>        <span class='hs-layout'>{</span> <span class='hs-sel'>_countAtLeast</span>  <span class='hs-keyglyph'>::</span> <span class='hs-comment'>{-# UNPACK #-}</span> <span class='hs-varop'>!</span><span class='hs-conid'>Int</span>       <span class='hs-comment'>-- ^ A conservative upper bound on the element count.</span>
+<a name="line-55"></a>                                                      <span class='hs-comment'>--   If negative, we are complemented with respect to the universe</span>
+<a name="line-56"></a>        <span class='hs-layout'>,</span> <span class='hs-sel'>_countAtMost</span>   <span class='hs-keyglyph'>::</span> <span class='hs-comment'>{-# UNPACK #-}</span> <span class='hs-varop'>!</span><span class='hs-conid'>Int</span>       <span class='hs-comment'>-- ^ A conservative lower bound on the element count.</span>
+<a name="line-57"></a>                                                      <span class='hs-comment'>--   If negative, we are complemented with respect to the universe</span>
+<a name="line-58"></a>        <span class='hs-layout'>,</span> <span class='hs-sel'>_count</span>         <span class='hs-keyglyph'>::</span> <span class='hs-conid'>Int</span>                       <span class='hs-comment'>-- ^ Lazy element count used when the above two disagree. O(1) environment size</span>
+<a name="line-59"></a>        <span class='hs-layout'>,</span> <span class='hs-varid'>exponent</span>       <span class='hs-keyglyph'>::</span> <span class='hs-comment'>{-# UNPACK #-}</span> <span class='hs-varop'>!</span><span class='hs-conid'>Int</span>       <span class='hs-comment'>-- ^ Low water mark. index of the least element potentially in the set.</span>
+<a name="line-60"></a>        <span class='hs-layout'>,</span> <span class='hs-sel'>_hwm</span>           <span class='hs-keyglyph'>::</span> <span class='hs-comment'>{-# UNPACK #-}</span> <span class='hs-varop'>!</span><span class='hs-conid'>Int</span>       <span class='hs-comment'>-- ^ High water mark. index of the greatest element potentially in the set.</span>
+<a name="line-61"></a>        <span class='hs-layout'>,</span> <span class='hs-varid'>mantissa</span>       <span class='hs-keyglyph'>::</span> <span class='hs-comment'>{-# UNPACK #-}</span> <span class='hs-varop'>!</span><span class='hs-conid'>Integer</span>   <span class='hs-comment'>-- ^ the set of bits starting from the exponent.</span>
+<a name="line-62"></a>                                                      <span class='hs-comment'>--   if negative, then we are complmenented with respect to universe</span>
+<a name="line-63"></a>        <span class='hs-layout'>,</span> <span class='hs-sel'>_universe</span>      <span class='hs-keyglyph'>::</span> <span class='hs-layout'>(</span><span class='hs-conid'>Int</span><span class='hs-layout'>,</span><span class='hs-conid'>Int</span><span class='hs-layout'>)</span>                 <span class='hs-comment'>-- ^ invariant: whenever mantissa &lt; 0 =&gt; universe = (fromEnum minBound,fromEnum maxBound)</span>
+<a name="line-64"></a>        <span class='hs-layout'>}</span> <span class='hs-keyword'>deriving</span> <span class='hs-layout'>(</span><span class='hs-conid'>Data</span><span class='hs-layout'>,</span> <span class='hs-conid'>Typeable</span><span class='hs-layout'>)</span>
+<a name="line-65"></a>
+<a name="line-66"></a><a name="bs"></a><span class='hs-comment'>-- | Internal smart constructor. Forces count whenever it is pigeonholed.</span>
+<a name="line-67"></a><span class='hs-definition'>bs</span> <span class='hs-keyglyph'>::</span> <span class='hs-conid'>Int</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-conid'>Int</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-conid'>Int</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-conid'>Int</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-conid'>Int</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-conid'>Integer</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-layout'>(</span><span class='hs-conid'>Int</span><span class='hs-layout'>,</span><span class='hs-conid'>Int</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-conid'>BitSet</span> <span class='hs-varid'>a</span>
+<a name="line-68"></a><a name="!"></a><span class='hs-definition'>bs</span> <span class='hs-varop'>!</span><span class='hs-varid'>a</span> <span class='hs-varop'>!</span><span class='hs-varid'>b</span> <span class='hs-varid'>c</span> <span class='hs-varop'>!</span><span class='hs-varid'>l</span> <span class='hs-varop'>!</span><span class='hs-varid'>h</span> <span class='hs-varop'>!</span><span class='hs-varid'>m</span> <span class='hs-varid'>u</span> <span class='hs-keyglyph'>|</span> <span class='hs-varid'>a</span> <span class='hs-varop'>==</span> <span class='hs-varid'>b</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>BS</span> <span class='hs-varid'>a</span> <span class='hs-varid'>a</span> <span class='hs-varid'>a</span> <span class='hs-varid'>l</span> <span class='hs-varid'>h</span> <span class='hs-varid'>m</span> <span class='hs-varid'>u</span>
+<a name="line-69"></a>                      <span class='hs-keyglyph'>|</span> <span class='hs-varid'>otherwise</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>BS</span> <span class='hs-varid'>a</span> <span class='hs-varid'>b</span> <span class='hs-varid'>c</span> <span class='hs-varid'>l</span> <span class='hs-varid'>h</span> <span class='hs-varid'>m</span> <span class='hs-varid'>u</span>
+<a name="line-70"></a><span class='hs-comment'>{-# INLINE bs #-}</span>
+<a name="line-71"></a>
+<a name="line-72"></a><a name="toList"></a><span class='hs-comment'>-- | /O(d)/ where /d/ is absolute deviation in fromEnum over the set</span>
+<a name="line-73"></a><span class='hs-definition'>toList</span> <span class='hs-keyglyph'>::</span> <span class='hs-conid'>Enum</span> <span class='hs-varid'>a</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>BitSet</span> <span class='hs-varid'>a</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-keyglyph'>[</span><span class='hs-varid'>a</span><span class='hs-keyglyph'>]</span>
+<a name="line-74"></a><span class='hs-definition'>toList</span> <span class='hs-layout'>(</span><span class='hs-conid'>BS</span> <span class='hs-keyword'>_</span> <span class='hs-keyword'>_</span> <span class='hs-keyword'>_</span> <span class='hs-varid'>l</span> <span class='hs-varid'>h</span> <span class='hs-varid'>m</span> <span class='hs-varid'>u</span><span class='hs-layout'>)</span> 
+<a name="line-75"></a>    <span class='hs-keyglyph'>|</span> <span class='hs-varid'>m</span> <span class='hs-varop'>&lt;</span> <span class='hs-num'>0</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>map</span> <span class='hs-varid'>toEnum</span> <span class='hs-keyglyph'>[</span><span class='hs-varid'>ul</span><span class='hs-keyglyph'>..</span><span class='hs-varid'>max</span> <span class='hs-layout'>(</span><span class='hs-varid'>pred</span> <span class='hs-varid'>l</span><span class='hs-layout'>)</span> <span class='hs-varid'>ul</span><span class='hs-keyglyph'>]</span> <span class='hs-varop'>++</span> <span class='hs-varid'>toList'</span> <span class='hs-varid'>l</span> <span class='hs-layout'>(</span><span class='hs-varid'>map</span> <span class='hs-varid'>toEnum</span> <span class='hs-keyglyph'>[</span><span class='hs-varid'>min</span> <span class='hs-layout'>(</span><span class='hs-varid'>succ</span> <span class='hs-varid'>h</span><span class='hs-layout'>)</span> <span class='hs-varid'>uh</span><span class='hs-keyglyph'>..</span><span class='hs-varid'>uh</span><span class='hs-keyglyph'>]</span><span class='hs-layout'>)</span>
+<a name="line-76"></a>    <span class='hs-keyglyph'>|</span> <span class='hs-varid'>otherwise</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>toList'</span> <span class='hs-num'>0</span> <span class='hs-conid'>[]</span>
+<a name="line-77"></a>    <span class='hs-keyword'>where</span>
+<a name="line-78"></a>        <span class='hs-keyglyph'>~</span><span class='hs-layout'>(</span><span class='hs-varid'>ul</span><span class='hs-layout'>,</span><span class='hs-varid'>uh</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>u</span>
+<a name="line-79"></a>        <span class='hs-varid'>toList'</span> <span class='hs-keyglyph'>::</span> <span class='hs-conid'>Enum</span> <span class='hs-varid'>a</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>Int</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-keyglyph'>[</span><span class='hs-varid'>a</span><span class='hs-keyglyph'>]</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-keyglyph'>[</span><span class='hs-varid'>a</span><span class='hs-keyglyph'>]</span>
+<a name="line-80"></a>        <span class='hs-varid'>toList'</span> <span class='hs-varop'>!</span><span class='hs-varid'>n</span> <span class='hs-varid'>t</span> <span class='hs-keyglyph'>|</span> <span class='hs-varid'>n</span> <span class='hs-varop'>&gt;</span> <span class='hs-varid'>h</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>t</span>
+<a name="line-81"></a>                     <span class='hs-keyglyph'>|</span> <span class='hs-varid'>testBit</span> <span class='hs-varid'>m</span> <span class='hs-layout'>(</span><span class='hs-varid'>n</span> <span class='hs-comment'>-</span> <span class='hs-varid'>l</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>toEnum</span> <span class='hs-varid'>n</span> <span class='hs-conop'>:</span> <span class='hs-varid'>toList'</span> <span class='hs-layout'>(</span><span class='hs-varid'>n</span><span class='hs-varop'>+</span><span class='hs-num'>1</span><span class='hs-layout'>)</span> <span class='hs-varid'>t</span>
+<a name="line-82"></a>                     <span class='hs-keyglyph'>|</span> <span class='hs-varid'>otherwise</span>         <span class='hs-keyglyph'>=</span> <span class='hs-varid'>toList'</span> <span class='hs-layout'>(</span><span class='hs-varid'>n</span><span class='hs-varop'>+</span><span class='hs-num'>1</span><span class='hs-layout'>)</span> <span class='hs-varid'>t</span>
+<a name="line-83"></a><span class='hs-comment'>{-# INLINE toList #-}</span>
+<a name="line-84"></a>
+<a name="line-85"></a><a name="empty"></a><span class='hs-comment'>-- | /O(1)/ The empty set. Permits /O(1)/ null and size.</span>
+<a name="line-86"></a><span class='hs-definition'>empty</span> <span class='hs-keyglyph'>::</span> <span class='hs-conid'>BitSet</span> <span class='hs-varid'>a</span>
+<a name="line-87"></a><span class='hs-definition'>empty</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>BS</span> <span class='hs-num'>0</span> <span class='hs-num'>0</span> <span class='hs-num'>0</span> <span class='hs-num'>0</span> <span class='hs-num'>0</span> <span class='hs-num'>0</span> <span class='hs-varid'>undefined</span>
+<a name="line-88"></a><span class='hs-comment'>{-# INLINE empty #-}</span>
+<a name="line-89"></a>
+<a name="line-90"></a><a name="singleton"></a><span class='hs-comment'>-- | /O(1)/ Construct a @BitSet@ with a single element. Permits /O(1)/ null and size</span>
+<a name="line-91"></a><span class='hs-definition'>singleton</span> <span class='hs-keyglyph'>::</span> <span class='hs-conid'>Enum</span> <span class='hs-varid'>a</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-varid'>a</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-conid'>BitSet</span> <span class='hs-varid'>a</span> 
+<a name="line-92"></a><span class='hs-definition'>singleton</span> <span class='hs-varid'>x</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>BS</span> <span class='hs-num'>1</span> <span class='hs-num'>1</span> <span class='hs-num'>1</span> <span class='hs-varid'>e</span> <span class='hs-varid'>e</span> <span class='hs-num'>1</span> <span class='hs-varid'>undefined</span> <span class='hs-keyword'>where</span> <span class='hs-varid'>e</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>fromEnum</span> <span class='hs-varid'>x</span>
+<a name="line-93"></a><span class='hs-comment'>{-# INLINE singleton #-}</span>
hunk ./doc/html/monoids/src/Data-Ring-Semi-BitSet.html 103
-<a name="line-95"></a><a name="fromList"></a><span class='hs-comment'>-- | /O(d * n)/ Make a @BitSet@ from a list of items.</span>
-<a name="line-96"></a><span class='hs-definition'>fromList</span> <span class='hs-keyglyph'>::</span> <span class='hs-conid'>Enum</span> <span class='hs-varid'>a</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-keyglyph'>[</span><span class='hs-varid'>a</span><span class='hs-keyglyph'>]</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-conid'>BitSet</span> <span class='hs-varid'>a</span>
-<a name="line-97"></a><span class='hs-definition'>fromList</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>foldr</span> <span class='hs-varid'>insert</span> <span class='hs-varid'>empty</span> 
-<a name="line-98"></a><span class='hs-comment'>{-# INLINE fromList #-}</span>
-<a name="line-99"></a>
-<a name="line-100"></a><a name="fromDistinctAscList"></a><span class='hs-definition'>fromDistinctAscList</span> <span class='hs-keyglyph'>::</span> <span class='hs-conid'>Enum</span> <span class='hs-varid'>a</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-keyglyph'>[</span><span class='hs-varid'>a</span><span class='hs-keyglyph'>]</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-conid'>BitSet</span> <span class='hs-varid'>a</span> 
-<a name="line-101"></a><span class='hs-definition'>fromDistinctAscList</span> <span class='hs-conid'>[]</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>empty</span>
-<a name="line-102"></a><span class='hs-definition'>fromDistinctAscList</span> <span class='hs-layout'>(</span><span class='hs-varid'>c</span><span class='hs-conop'>:</span><span class='hs-varid'>cs</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>fromDistinctAscList'</span> <span class='hs-varid'>cs</span> <span class='hs-num'>1</span> <span class='hs-num'>0</span> <span class='hs-num'>1</span> 
-<a name="line-103"></a>    <span class='hs-keyword'>where</span>
-<a name="line-104"></a>        <span class='hs-varid'>l</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>fromEnum</span> <span class='hs-varid'>c</span>
-<a name="line-105"></a>        <span class='hs-varid'>fromDistinctAscList'</span> <span class='hs-keyglyph'>::</span> <span class='hs-conid'>Enum</span> <span class='hs-varid'>a</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-keyglyph'>[</span><span class='hs-varid'>a</span><span class='hs-keyglyph'>]</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-conid'>Int</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-conid'>Int</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-conid'>Integer</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-conid'>BitSet</span> <span class='hs-varid'>a</span>
-<a name="line-106"></a>        <span class='hs-varid'>fromDistinctAscList'</span> <span class='hs-conid'>[]</span> <span class='hs-varop'>!</span><span class='hs-varid'>n</span> <span class='hs-varop'>!</span><span class='hs-varid'>h</span> <span class='hs-varop'>!</span><span class='hs-varid'>m</span>  <span class='hs-keyglyph'>=</span> <span class='hs-conid'>BS</span> <span class='hs-varid'>n</span> <span class='hs-varid'>n</span> <span class='hs-varid'>n</span> <span class='hs-varid'>l</span> <span class='hs-varid'>h</span> <span class='hs-varid'>m</span> <span class='hs-varid'>undefined</span>
-<a name="line-107"></a>        <span class='hs-varid'>fromDistinctAscList'</span> <span class='hs-layout'>(</span><span class='hs-varid'>c'</span><span class='hs-conop'>:</span><span class='hs-varid'>cs'</span><span class='hs-layout'>)</span> <span class='hs-varop'>!</span><span class='hs-varid'>n</span> <span class='hs-keyword'>_</span> <span class='hs-varop'>!</span><span class='hs-varid'>m</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>fromDistinctAscList'</span> <span class='hs-varid'>cs'</span> <span class='hs-layout'>(</span><span class='hs-varid'>n</span><span class='hs-varop'>+</span><span class='hs-num'>1</span><span class='hs-layout'>)</span> <span class='hs-varid'>h'</span> <span class='hs-layout'>(</span><span class='hs-varid'>setBit</span> <span class='hs-varid'>m</span> <span class='hs-layout'>(</span><span class='hs-varid'>h'</span> <span class='hs-comment'>-</span> <span class='hs-varid'>l</span><span class='hs-layout'>)</span><span class='hs-layout'>)</span>
-<a name="line-108"></a>            <span class='hs-keyword'>where</span>
-<a name="line-109"></a>                <span class='hs-varid'>h'</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>fromEnum</span> <span class='hs-varid'>c'</span>
-<a name="line-110"></a><span class='hs-comment'>{-# INLINE fromDistinctAscList #-}</span>
-<a name="line-111"></a>
-<a name="line-112"></a><a name="insert"></a><span class='hs-comment'>-- | /O(d)/ Insert an item into the bit set.</span>
-<a name="line-113"></a><span class='hs-definition'>insert</span> <span class='hs-keyglyph'>::</span> <span class='hs-conid'>Enum</span> <span class='hs-varid'>a</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-varid'>a</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-conid'>BitSet</span> <span class='hs-varid'>a</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-conid'>BitSet</span> <span class='hs-varid'>a</span>
-<a name="line-114"></a><span class='hs-definition'>insert</span> <span class='hs-varid'>x</span> <span class='hs-varid'>r</span><span class='hs-keyglyph'>@</span><span class='hs-layout'>(</span><span class='hs-conid'>BS</span> <span class='hs-varid'>a</span> <span class='hs-varid'>b</span> <span class='hs-varid'>c</span> <span class='hs-varid'>l</span> <span class='hs-varid'>h</span> <span class='hs-varid'>m</span> <span class='hs-varid'>u</span><span class='hs-layout'>)</span> 
-<a name="line-115"></a>    <span class='hs-keyglyph'>|</span> <span class='hs-varid'>m</span> <span class='hs-varop'>&lt;</span> <span class='hs-num'>0</span><span class='hs-layout'>,</span> <span class='hs-varid'>e</span> <span class='hs-varop'>&lt;</span> <span class='hs-varid'>l</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>r</span> 
-<a name="line-116"></a>    <span class='hs-keyglyph'>|</span> <span class='hs-varid'>m</span> <span class='hs-varop'>&lt;</span> <span class='hs-num'>0</span><span class='hs-layout'>,</span> <span class='hs-varid'>e</span> <span class='hs-varop'>&gt;</span> <span class='hs-varid'>h</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>r</span>
-<a name="line-117"></a>    <span class='hs-keyglyph'>|</span> <span class='hs-varid'>e</span> <span class='hs-varop'>&lt;</span> <span class='hs-varid'>l</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>bs</span> <span class='hs-layout'>(</span><span class='hs-varid'>a</span><span class='hs-varop'>+</span><span class='hs-num'>1</span><span class='hs-layout'>)</span> <span class='hs-layout'>(</span><span class='hs-varid'>b</span><span class='hs-varop'>+</span><span class='hs-num'>1</span><span class='hs-layout'>)</span> <span class='hs-layout'>(</span><span class='hs-varid'>c</span><span class='hs-varop'>+</span><span class='hs-num'>1</span><span class='hs-layout'>)</span> <span class='hs-varid'>e</span> <span class='hs-layout'>(</span><span class='hs-varid'>h</span> <span class='hs-comment'>-</span> <span class='hs-varid'>e</span><span class='hs-layout'>)</span> <span class='hs-layout'>(</span><span class='hs-varid'>shiftL</span> <span class='hs-varid'>m</span> <span class='hs-layout'>(</span><span class='hs-varid'>l</span> <span class='hs-comment'>-</span> <span class='hs-varid'>e</span><span class='hs-layout'>)</span> <span class='hs-varop'>.|.</span> <span class='hs-num'>1</span><span class='hs-layout'>)</span> <span class='hs-varid'>u</span>
-<a name="line-118"></a>    <span class='hs-keyglyph'>|</span> <span class='hs-varid'>e</span> <span class='hs-varop'>&gt;</span> <span class='hs-varid'>h</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>bs</span> <span class='hs-layout'>(</span><span class='hs-varid'>a</span><span class='hs-varop'>+</span><span class='hs-num'>1</span><span class='hs-layout'>)</span> <span class='hs-layout'>(</span><span class='hs-varid'>b</span><span class='hs-varop'>+</span><span class='hs-num'>1</span><span class='hs-layout'>)</span> <span class='hs-layout'>(</span><span class='hs-varid'>c</span><span class='hs-varop'>+</span><span class='hs-num'>1</span><span class='hs-layout'>)</span> <span class='hs-varid'>l</span> <span class='hs-varid'>p</span> <span class='hs-layout'>(</span><span class='hs-varid'>setBit</span> <span class='hs-varid'>m</span> <span class='hs-varid'>p</span><span class='hs-layout'>)</span> <span class='hs-varid'>u</span>
-<a name="line-119"></a>    <span class='hs-keyglyph'>|</span> <span class='hs-varid'>testBit</span> <span class='hs-varid'>m</span> <span class='hs-layout'>(</span><span class='hs-varid'>e</span> <span class='hs-comment'>-</span> <span class='hs-varid'>l</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>r</span> 
-<a name="line-120"></a>    <span class='hs-keyglyph'>|</span> <span class='hs-varid'>otherwise</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>bs</span> <span class='hs-layout'>(</span><span class='hs-varid'>a</span><span class='hs-varop'>+</span><span class='hs-num'>1</span><span class='hs-layout'>)</span> <span class='hs-layout'>(</span><span class='hs-varid'>b</span><span class='hs-varop'>+</span><span class='hs-num'>1</span><span class='hs-layout'>)</span> <span class='hs-layout'>(</span><span class='hs-varid'>c</span><span class='hs-varop'>+</span><span class='hs-num'>1</span><span class='hs-layout'>)</span> <span class='hs-varid'>l</span> <span class='hs-varid'>h</span> <span class='hs-layout'>(</span><span class='hs-varid'>setBit</span> <span class='hs-varid'>m</span> <span class='hs-varid'>p</span><span class='hs-layout'>)</span> <span class='hs-varid'>u</span>
-<a name="line-121"></a>    <span class='hs-keyword'>where</span> 
-<a name="line-122"></a>        <span class='hs-varid'>e</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>fromEnum</span> <span class='hs-varid'>x</span>
-<a name="line-123"></a>        <span class='hs-varid'>p</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>e</span> <span class='hs-comment'>-</span> <span class='hs-varid'>l</span> 
-<a name="line-124"></a><span class='hs-comment'>{-# INLINE insert #-}</span>
-<a name="line-125"></a>
-<a name="line-126"></a><a name="delete"></a><span class='hs-comment'>-- | /O(d)/ Delete an item from the bit set.</span>
-<a name="line-127"></a><span class='hs-definition'>delete</span> <span class='hs-keyglyph'>::</span> <span class='hs-conid'>Enum</span> <span class='hs-varid'>a</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-varid'>a</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-conid'>BitSet</span> <span class='hs-varid'>a</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-conid'>BitSet</span> <span class='hs-varid'>a</span>
-<a name="line-128"></a><span class='hs-definition'>delete</span> <span class='hs-varid'>x</span> <span class='hs-varid'>r</span><span class='hs-keyglyph'>@</span><span class='hs-layout'>(</span><span class='hs-conid'>BS</span> <span class='hs-varid'>a</span> <span class='hs-varid'>b</span> <span class='hs-varid'>c</span> <span class='hs-varid'>l</span> <span class='hs-varid'>h</span> <span class='hs-varid'>m</span> <span class='hs-varid'>u</span><span class='hs-layout'>)</span> 
-<a name="line-129"></a>    <span class='hs-keyglyph'>|</span> <span class='hs-varid'>m</span> <span class='hs-varop'>&lt;</span> <span class='hs-num'>0</span><span class='hs-layout'>,</span> <span class='hs-varid'>e</span> <span class='hs-varop'>&lt;</span> <span class='hs-varid'>l</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>bs</span> <span class='hs-layout'>(</span><span class='hs-varid'>a</span><span class='hs-varop'>+</span><span class='hs-num'>1</span><span class='hs-layout'>)</span> <span class='hs-layout'>(</span><span class='hs-varid'>b</span><span class='hs-varop'>+</span><span class='hs-num'>1</span><span class='hs-layout'>)</span> <span class='hs-layout'>(</span><span class='hs-varid'>c</span><span class='hs-varop'>+</span><span class='hs-num'>1</span><span class='hs-layout'>)</span> <span class='hs-varid'>e</span> <span class='hs-layout'>(</span><span class='hs-varid'>h</span> <span class='hs-comment'>-</span> <span class='hs-varid'>e</span><span class='hs-layout'>)</span> <span class='hs-layout'>(</span><span class='hs-varid'>shiftL</span> <span class='hs-varid'>m</span> <span class='hs-layout'>(</span><span class='hs-varid'>l</span> <span class='hs-comment'>-</span> <span class='hs-varid'>e</span><span class='hs-layout'>)</span> <span class='hs-varop'>.&amp;.</span> <span class='hs-conid'>Bits</span><span class='hs-varop'>.</span><span class='hs-varid'>complement</span> <span class='hs-num'>1</span><span class='hs-layout'>)</span> <span class='hs-varid'>u</span>
-<a name="line-130"></a>    <span class='hs-keyglyph'>|</span> <span class='hs-varid'>m</span> <span class='hs-varop'>&lt;</span> <span class='hs-num'>0</span><span class='hs-layout'>,</span> <span class='hs-varid'>e</span> <span class='hs-varop'>&gt;</span> <span class='hs-varid'>h</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>bs</span> <span class='hs-layout'>(</span><span class='hs-varid'>a</span><span class='hs-varop'>+</span><span class='hs-num'>1</span><span class='hs-layout'>)</span> <span class='hs-layout'>(</span><span class='hs-varid'>b</span><span class='hs-varop'>+</span><span class='hs-num'>1</span><span class='hs-layout'>)</span> <span class='hs-layout'>(</span><span class='hs-varid'>c</span><span class='hs-varop'>+</span><span class='hs-num'>1</span><span class='hs-layout'>)</span> <span class='hs-varid'>l</span> <span class='hs-varid'>p</span> <span class='hs-layout'>(</span><span class='hs-varid'>clearBit</span> <span class='hs-varid'>m</span> <span class='hs-varid'>p</span><span class='hs-layout'>)</span> <span class='hs-varid'>u</span>
-<a name="line-131"></a>    <span class='hs-keyglyph'>|</span> <span class='hs-varid'>e</span> <span class='hs-varop'>&lt;</span> <span class='hs-varid'>l</span>       <span class='hs-keyglyph'>=</span> <span class='hs-varid'>r</span>
-<a name="line-132"></a>    <span class='hs-keyglyph'>|</span> <span class='hs-varid'>e</span> <span class='hs-varop'>&gt;</span> <span class='hs-varid'>h</span>       <span class='hs-keyglyph'>=</span> <span class='hs-varid'>r</span>
-<a name="line-133"></a>    <span class='hs-keyglyph'>|</span> <span class='hs-varid'>testBit</span> <span class='hs-varid'>m</span> <span class='hs-varid'>p</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>bs</span> <span class='hs-layout'>(</span><span class='hs-varid'>a</span><span class='hs-comment'>-</span><span class='hs-num'>1</span><span class='hs-layout'>)</span> <span class='hs-layout'>(</span><span class='hs-varid'>b</span><span class='hs-comment'>-</span><span class='hs-num'>1</span><span class='hs-layout'>)</span> <span class='hs-layout'>(</span><span class='hs-varid'>c</span><span class='hs-comment'>-</span><span class='hs-num'>1</span><span class='hs-layout'>)</span> <span class='hs-varid'>l</span> <span class='hs-varid'>h</span> <span class='hs-layout'>(</span><span class='hs-varid'>clearBit</span> <span class='hs-varid'>m</span> <span class='hs-varid'>p</span><span class='hs-layout'>)</span> <span class='hs-varid'>u</span>
-<a name="line-134"></a>    <span class='hs-keyglyph'>|</span> <span class='hs-varid'>otherwise</span>   <span class='hs-keyglyph'>=</span> <span class='hs-varid'>r</span>
-<a name="line-135"></a>    <span class='hs-keyword'>where</span> 
-<a name="line-136"></a>        <span class='hs-varid'>e</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>fromEnum</span> <span class='hs-varid'>x</span>
-<a name="line-137"></a>        <span class='hs-varid'>p</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>e</span> <span class='hs-comment'>-</span> <span class='hs-varid'>l</span>
-<a name="line-138"></a><span class='hs-comment'>{-# INLINE delete #-}</span>
-<a name="line-139"></a>
-<a name="line-140"></a><a name="member"></a><span class='hs-comment'>-- | /O(testBit on Integer)/ Ask whether the item is in the bit set.</span>
-<a name="line-141"></a><span class='hs-definition'>member</span> <span class='hs-keyglyph'>::</span> <span class='hs-conid'>Enum</span> <span class='hs-varid'>a</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-varid'>a</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-conid'>BitSet</span> <span class='hs-varid'>a</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-conid'>Bool</span>
-<a name="line-142"></a><span class='hs-definition'>member</span> <span class='hs-varid'>x</span> <span class='hs-layout'>(</span><span class='hs-conid'>BS</span> <span class='hs-keyword'>_</span> <span class='hs-keyword'>_</span> <span class='hs-keyword'>_</span> <span class='hs-varid'>l</span> <span class='hs-varid'>h</span> <span class='hs-varid'>m</span> <span class='hs-keyword'>_</span><span class='hs-layout'>)</span> 
-<a name="line-143"></a>    <span class='hs-keyglyph'>|</span> <span class='hs-varid'>e</span> <span class='hs-varop'>&lt;</span> <span class='hs-varid'>l</span>     <span class='hs-keyglyph'>=</span> <span class='hs-varid'>m</span> <span class='hs-varop'>&lt;</span> <span class='hs-num'>0</span> 
-<a name="line-144"></a>    <span class='hs-keyglyph'>|</span> <span class='hs-varid'>e</span> <span class='hs-varop'>&gt;</span> <span class='hs-varid'>h</span>     <span class='hs-keyglyph'>=</span> <span class='hs-varid'>m</span> <span class='hs-varop'>&gt;</span> <span class='hs-num'>0</span>
-<a name="line-145"></a>    <span class='hs-keyglyph'>|</span> <span class='hs-varid'>otherwise</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>testBit</span> <span class='hs-varid'>m</span> <span class='hs-layout'>(</span><span class='hs-varid'>e</span> <span class='hs-comment'>-</span> <span class='hs-varid'>l</span><span class='hs-layout'>)</span>
-<a name="line-146"></a>    <span class='hs-keyword'>where</span> 
-<a name="line-147"></a>        <span class='hs-varid'>e</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>fromEnum</span> <span class='hs-varid'>x</span>
-<a name="line-148"></a><span class='hs-comment'>{-# INLINE member #-}</span>
-<a name="line-149"></a>
-<a name="line-150"></a><a name="size"></a><span class='hs-comment'>-- | /O(1)/ or /O(d)/ The number of elements in the bit set.</span>
-<a name="line-151"></a><span class='hs-definition'>size</span> <span class='hs-keyglyph'>::</span> <span class='hs-conid'>BitSet</span> <span class='hs-varid'>a</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-conid'>Int</span>
-<a name="line-152"></a><span class='hs-definition'>size</span> <span class='hs-layout'>(</span><span class='hs-conid'>BS</span> <span class='hs-varid'>a</span> <span class='hs-varid'>b</span> <span class='hs-varid'>c</span> <span class='hs-keyword'>_</span> <span class='hs-keyword'>_</span> <span class='hs-varid'>m</span> <span class='hs-layout'>(</span><span class='hs-varid'>ul</span><span class='hs-layout'>,</span><span class='hs-varid'>uh</span><span class='hs-layout'>)</span><span class='hs-layout'>)</span> 
-<a name="line-153"></a>    <span class='hs-keyglyph'>|</span> <span class='hs-varid'>a</span> <span class='hs-varop'>==</span> <span class='hs-varid'>b</span><span class='hs-layout'>,</span> <span class='hs-varid'>m</span> <span class='hs-varop'>&gt;=</span> <span class='hs-num'>0</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>a</span>
-<a name="line-154"></a>    <span class='hs-keyglyph'>|</span> <span class='hs-varid'>a</span> <span class='hs-varop'>==</span> <span class='hs-varid'>b</span>         <span class='hs-keyglyph'>=</span> <span class='hs-varid'>uh</span> <span class='hs-comment'>-</span> <span class='hs-varid'>ul</span> <span class='hs-comment'>-</span> <span class='hs-varid'>a</span> 
-<a name="line-155"></a>    <span class='hs-keyglyph'>|</span> <span class='hs-varid'>m</span> <span class='hs-varop'>&gt;=</span> <span class='hs-num'>0</span>         <span class='hs-keyglyph'>=</span> <span class='hs-varid'>c</span>
-<a name="line-156"></a>    <span class='hs-keyglyph'>|</span> <span class='hs-varid'>otherwise</span>      <span class='hs-keyglyph'>=</span> <span class='hs-varid'>uh</span> <span class='hs-comment'>-</span> <span class='hs-varid'>ul</span> <span class='hs-comment'>-</span> <span class='hs-varid'>c</span> 
-<a name="line-157"></a>
-<a name="line-158"></a><a name="toInteger"></a><span class='hs-comment'>-- | /O(d)/ convert to an Integer representation. Discards negative elements</span>
-<a name="line-159"></a><span class='hs-definition'>toInteger</span> <span class='hs-keyglyph'>::</span> <span class='hs-conid'>BitSet</span> <span class='hs-varid'>a</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-conid'>Integer</span>
-<a name="line-160"></a><span class='hs-definition'>toInteger</span> <span class='hs-varid'>x</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>mantissa</span> <span class='hs-varid'>x</span> <span class='hs-varop'>`shift`</span> <span class='hs-varid'>exponent</span> <span class='hs-varid'>x</span>
-<a name="line-161"></a>
-<a name="line-162"></a><a name="union"></a><span class='hs-definition'>union</span> <span class='hs-keyglyph'>::</span> <span class='hs-conid'>BitSet</span> <span class='hs-varid'>a</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-conid'>BitSet</span> <span class='hs-varid'>a</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-conid'>BitSet</span> <span class='hs-varid'>a</span> 
-<a name="line-163"></a><span class='hs-definition'>union</span> <span class='hs-varid'>x</span><span class='hs-keyglyph'>@</span><span class='hs-layout'>(</span><span class='hs-conid'>BS</span> <span class='hs-varid'>a</span> <span class='hs-varid'>b</span> <span class='hs-varid'>c</span> <span class='hs-varid'>l</span> <span class='hs-varid'>h</span> <span class='hs-varid'>m</span> <span class='hs-varid'>u</span><span class='hs-layout'>)</span> <span class='hs-varid'>y</span><span class='hs-keyglyph'>@</span><span class='hs-layout'>(</span><span class='hs-conid'>BS</span> <span class='hs-varid'>a'</span> <span class='hs-varid'>b'</span> <span class='hs-varid'>c'</span> <span class='hs-varid'>l'</span> <span class='hs-varid'>h'</span> <span class='hs-varid'>m'</span> <span class='hs-varid'>u'</span><span class='hs-layout'>)</span>
-<a name="line-164"></a>    <span class='hs-keyglyph'>|</span> <span class='hs-varid'>l'</span> <span class='hs-varop'>&lt;</span> <span class='hs-varid'>l</span>    <span class='hs-keyglyph'>=</span> <span class='hs-varid'>union</span> <span class='hs-varid'>y</span> <span class='hs-varid'>x</span>                                                         <span class='hs-comment'>-- ensure left side has lower exponent</span>
-<a name="line-165"></a>    <span class='hs-keyglyph'>|</span> <span class='hs-varid'>b</span> <span class='hs-varop'>==</span> <span class='hs-num'>0</span>    <span class='hs-keyglyph'>=</span> <span class='hs-varid'>y</span>                                                                 <span class='hs-comment'>-- fast empty union</span>
-<a name="line-166"></a>    <span class='hs-keyglyph'>|</span> <span class='hs-varid'>b'</span> <span class='hs-varop'>==</span> <span class='hs-num'>0</span>   <span class='hs-keyglyph'>=</span> <span class='hs-varid'>x</span>                                                                 <span class='hs-comment'>-- fast empty union</span>
-<a name="line-167"></a>    <span class='hs-keyglyph'>|</span> <span class='hs-varid'>a</span> <span class='hs-varop'>==</span> <span class='hs-comment'>-</span><span class='hs-num'>1</span>   <span class='hs-keyglyph'>=</span> <span class='hs-conid'>BS</span> <span class='hs-layout'>(</span><span class='hs-comment'>-</span><span class='hs-num'>1</span><span class='hs-layout'>)</span> <span class='hs-layout'>(</span><span class='hs-comment'>-</span><span class='hs-num'>1</span><span class='hs-layout'>)</span> <span class='hs-layout'>(</span><span class='hs-comment'>-</span><span class='hs-num'>1</span><span class='hs-layout'>)</span> <span class='hs-num'>0</span> <span class='hs-num'>0</span> <span class='hs-layout'>(</span><span class='hs-comment'>-</span><span class='hs-num'>1</span><span class='hs-layout'>)</span> <span class='hs-varid'>u</span>                                      <span class='hs-comment'>-- fast full union, recomplement obligation met by negative size</span>
-<a name="line-168"></a>    <span class='hs-keyglyph'>|</span> <span class='hs-varid'>a'</span> <span class='hs-varop'>==</span> <span class='hs-comment'>-</span><span class='hs-num'>1</span>  <span class='hs-keyglyph'>=</span> <span class='hs-conid'>BS</span> <span class='hs-layout'>(</span><span class='hs-comment'>-</span><span class='hs-num'>1</span><span class='hs-layout'>)</span> <span class='hs-layout'>(</span><span class='hs-comment'>-</span><span class='hs-num'>1</span><span class='hs-layout'>)</span> <span class='hs-layout'>(</span><span class='hs-comment'>-</span><span class='hs-num'>1</span><span class='hs-layout'>)</span> <span class='hs-num'>0</span> <span class='hs-num'>0</span> <span class='hs-layout'>(</span><span class='hs-comment'>-</span><span class='hs-num'>1</span><span class='hs-layout'>)</span> <span class='hs-varid'>u'</span>                                     <span class='hs-comment'>-- fast full union, recomplement obligation met by negative size</span>
-<a name="line-169"></a>    <span class='hs-keyglyph'>|</span> <span class='hs-varid'>m</span> <span class='hs-varop'>&lt;</span> <span class='hs-num'>0</span><span class='hs-layout'>,</span> <span class='hs-varid'>m'</span> <span class='hs-varop'>&lt;</span> <span class='hs-num'>0</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>recomplement</span> <span class='hs-layout'>(</span><span class='hs-varid'>intersection</span> <span class='hs-layout'>(</span><span class='hs-varid'>recomplement</span> <span class='hs-varid'>x</span><span class='hs-layout'>)</span> <span class='hs-layout'>(</span><span class='hs-varid'>recomplement</span> <span class='hs-varid'>y</span><span class='hs-layout'>)</span><span class='hs-layout'>)</span> <span class='hs-comment'>-- appeal to intersection, recomplement obligation met by 2s complement</span>
-<a name="line-170"></a>    <span class='hs-keyglyph'>|</span> <span class='hs-varid'>m'</span> <span class='hs-varop'>&lt;</span> <span class='hs-num'>0</span>    <span class='hs-keyglyph'>=</span> <span class='hs-varid'>recomplement</span> <span class='hs-layout'>(</span><span class='hs-varid'>pseudoDiff</span> <span class='hs-layout'>(</span><span class='hs-varid'>recomplement</span> <span class='hs-varid'>y</span><span class='hs-layout'>)</span> <span class='hs-varid'>x</span> <span class='hs-varid'>u'</span><span class='hs-layout'>)</span>                      <span class='hs-comment'>-- union with complement, recomplement obligation met by 2s complement -- THESE ARE WRONG FIX!</span>
-<a name="line-171"></a>    <span class='hs-keyglyph'>|</span> <span class='hs-varid'>m</span> <span class='hs-varop'>&lt;</span> <span class='hs-num'>0</span>     <span class='hs-keyglyph'>=</span> <span class='hs-varid'>recomplement</span> <span class='hs-layout'>(</span><span class='hs-varid'>pseudoDiff</span> <span class='hs-layout'>(</span><span class='hs-varid'>recomplement</span> <span class='hs-varid'>x</span><span class='hs-layout'>)</span> <span class='hs-varid'>y</span> <span class='hs-varid'>u</span><span class='hs-layout'>)</span>                      <span class='hs-comment'>-- union with complement, recomplement obligation met by 2s complement -- THESE ARE WRONG FIX!</span>
-<a name="line-172"></a>    <span class='hs-keyglyph'>|</span> <span class='hs-varid'>h</span> <span class='hs-varop'>&lt;</span> <span class='hs-varid'>l'</span>    <span class='hs-keyglyph'>=</span> <span class='hs-varid'>bs</span> <span class='hs-layout'>(</span><span class='hs-varid'>a</span> <span class='hs-varop'>+</span> <span class='hs-varid'>a'</span><span class='hs-layout'>)</span> <span class='hs-layout'>(</span><span class='hs-varid'>b</span> <span class='hs-varop'>+</span> <span class='hs-varid'>b'</span><span class='hs-layout'>)</span> <span class='hs-layout'>(</span><span class='hs-varid'>c</span> <span class='hs-varop'>+</span> <span class='hs-varid'>c'</span><span class='hs-layout'>)</span> <span class='hs-varid'>l</span> <span class='hs-varid'>h'</span> <span class='hs-varid'>m''</span> <span class='hs-varid'>u</span>                          <span class='hs-comment'>-- disjoint positive ranges</span>
-<a name="line-173"></a>    <span class='hs-keyglyph'>|</span> <span class='hs-varid'>otherwise</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>bs</span> <span class='hs-layout'>(</span><span class='hs-varid'>a</span> <span class='hs-varop'>`max`</span> <span class='hs-varid'>a'</span><span class='hs-layout'>)</span> <span class='hs-layout'>(</span><span class='hs-varid'>b</span> <span class='hs-varop'>+</span> <span class='hs-varid'>b'</span><span class='hs-layout'>)</span> <span class='hs-layout'>(</span><span class='hs-varid'>recount</span> <span class='hs-varid'>m''</span><span class='hs-layout'>)</span> <span class='hs-varid'>l</span> <span class='hs-layout'>(</span><span class='hs-varid'>h</span> <span class='hs-varop'>`max`</span> <span class='hs-varid'>h'</span><span class='hs-layout'>)</span> <span class='hs-varid'>m''</span> <span class='hs-varid'>u</span>       <span class='hs-comment'>-- overlapped positives</span>
-<a name="line-174"></a>    <span class='hs-keyword'>where</span> 
-<a name="line-175"></a>        <span class='hs-varid'>m''</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>m</span> <span class='hs-varop'>.|.</span> <span class='hs-varid'>shiftL</span> <span class='hs-varid'>m'</span> <span class='hs-layout'>(</span><span class='hs-varid'>l'</span> <span class='hs-comment'>-</span> <span class='hs-varid'>l</span><span class='hs-layout'>)</span>
-<a name="line-176"></a>
-<a name="line-177"></a><a name="intersection"></a><span class='hs-definition'>intersection</span> <span class='hs-keyglyph'>::</span> <span class='hs-conid'>BitSet</span> <span class='hs-varid'>a</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-conid'>BitSet</span> <span class='hs-varid'>a</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-conid'>BitSet</span> <span class='hs-varid'>a</span> 
-<a name="line-178"></a><span class='hs-definition'>intersection</span> <span class='hs-varid'>x</span><span class='hs-keyglyph'>@</span><span class='hs-layout'>(</span><span class='hs-conid'>BS</span> <span class='hs-varid'>a</span> <span class='hs-varid'>b</span> <span class='hs-keyword'>_</span> <span class='hs-varid'>l</span> <span class='hs-varid'>h</span> <span class='hs-varid'>m</span> <span class='hs-varid'>u</span><span class='hs-layout'>)</span> <span class='hs-varid'>y</span><span class='hs-keyglyph'>@</span><span class='hs-layout'>(</span><span class='hs-conid'>BS</span> <span class='hs-varid'>a'</span> <span class='hs-varid'>b'</span> <span class='hs-keyword'>_</span> <span class='hs-varid'>l'</span> <span class='hs-varid'>h'</span> <span class='hs-varid'>m'</span> <span class='hs-varid'>u'</span><span class='hs-layout'>)</span>
-<a name="line-179"></a>    <span class='hs-keyglyph'>|</span> <span class='hs-varid'>l'</span> <span class='hs-varop'>&lt;</span> <span class='hs-varid'>l</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>intersection</span> <span class='hs-varid'>y</span> <span class='hs-varid'>x</span>                                 
-<a name="line-180"></a>    <span class='hs-keyglyph'>|</span> <span class='hs-varid'>b</span> <span class='hs-varop'>==</span> <span class='hs-num'>0</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>empty</span>
-<a name="line-181"></a>    <span class='hs-keyglyph'>|</span> <span class='hs-varid'>b'</span> <span class='hs-varop'>==</span> <span class='hs-num'>0</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>empty</span>
-<a name="line-182"></a>    <span class='hs-keyglyph'>|</span> <span class='hs-varid'>a</span> <span class='hs-varop'>==</span> <span class='hs-comment'>-</span><span class='hs-num'>1</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>y</span>
-<a name="line-183"></a>    <span class='hs-keyglyph'>|</span> <span class='hs-varid'>a'</span> <span class='hs-varop'>==</span> <span class='hs-comment'>-</span><span class='hs-num'>1</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>x</span>
-<a name="line-184"></a>    <span class='hs-keyglyph'>|</span> <span class='hs-varid'>m</span> <span class='hs-varop'>&lt;</span> <span class='hs-num'>0</span><span class='hs-layout'>,</span> <span class='hs-varid'>m'</span> <span class='hs-varop'>&lt;</span> <span class='hs-num'>0</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>recomplement</span> <span class='hs-layout'>(</span><span class='hs-varid'>union</span> <span class='hs-layout'>(</span><span class='hs-varid'>recomplement</span> <span class='hs-varid'>x</span><span class='hs-layout'>)</span> <span class='hs-layout'>(</span><span class='hs-varid'>recomplement</span> <span class='hs-varid'>y</span><span class='hs-layout'>)</span><span class='hs-layout'>)</span>
-<a name="line-185"></a>    <span class='hs-keyglyph'>|</span> <span class='hs-varid'>m'</span> <span class='hs-varop'>&lt;</span> <span class='hs-num'>0</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>pseudoDiff</span> <span class='hs-varid'>x</span> <span class='hs-layout'>(</span><span class='hs-varid'>recomplement</span> <span class='hs-varid'>y</span><span class='hs-layout'>)</span> <span class='hs-varid'>u'</span>
-<a name="line-186"></a>    <span class='hs-keyglyph'>|</span> <span class='hs-varid'>m</span> <span class='hs-varop'>&lt;</span> <span class='hs-num'>0</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>pseudoDiff</span> <span class='hs-varid'>y</span> <span class='hs-layout'>(</span><span class='hs-varid'>recomplement</span> <span class='hs-varid'>x</span><span class='hs-layout'>)</span> <span class='hs-varid'>u</span>
-<a name="line-187"></a>    <span class='hs-keyglyph'>|</span> <span class='hs-varid'>h</span> <span class='hs-varop'>&lt;</span> <span class='hs-varid'>l'</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>empty</span> 
-<a name="line-188"></a>    <span class='hs-keyglyph'>|</span> <span class='hs-varid'>otherwise</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>bs</span> <span class='hs-num'>0</span> <span class='hs-layout'>(</span><span class='hs-varid'>b</span> <span class='hs-varop'>`min`</span> <span class='hs-varid'>b'</span><span class='hs-layout'>)</span> <span class='hs-layout'>(</span><span class='hs-varid'>recount</span> <span class='hs-varid'>m''</span><span class='hs-layout'>)</span> <span class='hs-varid'>l''</span> <span class='hs-layout'>(</span><span class='hs-varid'>h</span> <span class='hs-varop'>`min`</span> <span class='hs-varid'>h'</span><span class='hs-layout'>)</span> <span class='hs-varid'>m''</span> <span class='hs-varid'>u</span>
-<a name="line-189"></a>    <span class='hs-keyword'>where</span>
-<a name="line-190"></a>        <span class='hs-varid'>l''</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>max</span> <span class='hs-varid'>l</span> <span class='hs-varid'>l'</span>
-<a name="line-191"></a>        <span class='hs-varid'>m''</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>shift</span> <span class='hs-varid'>m</span> <span class='hs-layout'>(</span><span class='hs-varid'>l''</span> <span class='hs-comment'>-</span> <span class='hs-varid'>l</span><span class='hs-layout'>)</span> <span class='hs-varop'>.&amp;.</span> <span class='hs-varid'>shift</span> <span class='hs-varid'>m'</span> <span class='hs-layout'>(</span><span class='hs-varid'>l''</span> <span class='hs-comment'>-</span> <span class='hs-varid'>l'</span><span class='hs-layout'>)</span>
-<a name="line-192"></a>
-<a name="line-193"></a><a name="pseudoDiff"></a><span class='hs-comment'>-- we know m &gt;= 0, m' &gt;= 0, a /= -1, a' /= -1, b /= 0, b' /= 0, u' is the universe of discourse</span>
-<a name="line-194"></a><span class='hs-definition'>pseudoDiff</span> <span class='hs-keyglyph'>::</span> <span class='hs-conid'>BitSet</span> <span class='hs-varid'>a</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-conid'>BitSet</span> <span class='hs-varid'>a</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-layout'>(</span><span class='hs-conid'>Int</span><span class='hs-layout'>,</span><span class='hs-conid'>Int</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-conid'>BitSet</span> <span class='hs-varid'>a</span> 
-<a name="line-195"></a><span class='hs-definition'>pseudoDiff</span> <span class='hs-varid'>x</span><span class='hs-keyglyph'>@</span><span class='hs-layout'>(</span><span class='hs-conid'>BS</span> <span class='hs-varid'>a</span> <span class='hs-keyword'>_</span> <span class='hs-keyword'>_</span> <span class='hs-varid'>l</span> <span class='hs-varid'>h</span> <span class='hs-varid'>m</span> <span class='hs-keyword'>_</span><span class='hs-layout'>)</span> <span class='hs-layout'>(</span><span class='hs-conid'>BS</span> <span class='hs-keyword'>_</span> <span class='hs-varid'>b'</span> <span class='hs-keyword'>_</span> <span class='hs-varid'>l'</span> <span class='hs-varid'>h'</span> <span class='hs-varid'>m'</span> <span class='hs-keyword'>_</span><span class='hs-layout'>)</span> <span class='hs-varid'>u''</span>
-<a name="line-196"></a>    <span class='hs-keyglyph'>|</span> <span class='hs-varid'>h</span> <span class='hs-varop'>&lt;</span> <span class='hs-varid'>l'</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>x</span>
-<a name="line-197"></a>    <span class='hs-keyglyph'>|</span> <span class='hs-varid'>h'</span> <span class='hs-varop'>&lt;</span> <span class='hs-varid'>l</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>x</span>
-<a name="line-198"></a>    <span class='hs-keyglyph'>|</span> <span class='hs-varid'>otherwise</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>bs</span> <span class='hs-layout'>(</span><span class='hs-varid'>max</span> <span class='hs-layout'>(</span><span class='hs-varid'>a</span> <span class='hs-comment'>-</span> <span class='hs-varid'>b'</span><span class='hs-layout'>)</span> <span class='hs-num'>0</span><span class='hs-layout'>)</span> <span class='hs-varid'>a</span> <span class='hs-layout'>(</span><span class='hs-varid'>recount</span> <span class='hs-varid'>m''</span><span class='hs-layout'>)</span> <span class='hs-varid'>l</span> <span class='hs-varid'>h</span> <span class='hs-varid'>m''</span> <span class='hs-varid'>u''</span>
-<a name="line-199"></a>    <span class='hs-keyword'>where</span> <span class='hs-varid'>m''</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>m</span> <span class='hs-varop'>.&amp;.</span> <span class='hs-varid'>shift</span> <span class='hs-layout'>(</span><span class='hs-conid'>Bits</span><span class='hs-varop'>.</span><span class='hs-varid'>complement</span> <span class='hs-varid'>m'</span><span class='hs-layout'>)</span> <span class='hs-layout'>(</span><span class='hs-varid'>l'</span> <span class='hs-comment'>-</span> <span class='hs-varid'>l</span><span class='hs-layout'>)</span>
-<a name="line-200"></a>
-<a name="line-201"></a><a name="\\"></a><span class='hs-layout'>(</span><span class='hs-varop'>\\</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>::</span> <span class='hs-layout'>(</span><span class='hs-conid'>Enum</span> <span class='hs-varid'>a</span><span class='hs-layout'>,</span> <span class='hs-conid'>Bounded</span> <span class='hs-varid'>a</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>BitSet</span> <span class='hs-varid'>a</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-conid'>BitSet</span> <span class='hs-varid'>a</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-conid'>BitSet</span> <span class='hs-varid'>a</span> 
-<a name="line-202"></a><a name="x"></a><span class='hs-definition'>x</span> <span class='hs-varop'>\\</span> <span class='hs-varid'>y</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>x</span> <span class='hs-varop'>`intersection`</span> <span class='hs-varid'>complement</span> <span class='hs-varid'>y</span>
-<a name="line-203"></a>
-<a name="line-204"></a><span class='hs-comment'>-- TODO: fix this so that it handles complements correctly</span>
-<a name="line-205"></a><span class='hs-keyword'>instance</span> <span class='hs-conid'>Eq</span> <span class='hs-layout'>(</span><span class='hs-conid'>BitSet</span> <span class='hs-varid'>a</span><span class='hs-layout'>)</span> <span class='hs-keyword'>where</span>
-<a name="line-206"></a>    <span class='hs-conid'>BS</span> <span class='hs-keyword'>_</span> <span class='hs-keyword'>_</span> <span class='hs-keyword'>_</span> <span class='hs-varid'>l</span> <span class='hs-keyword'>_</span> <span class='hs-varid'>m</span> <span class='hs-keyword'>_</span> <span class='hs-varop'>==</span> <span class='hs-conid'>BS</span> <span class='hs-keyword'>_</span> <span class='hs-keyword'>_</span> <span class='hs-keyword'>_</span> <span class='hs-varid'>l'</span> <span class='hs-keyword'>_</span> <span class='hs-varid'>m'</span> <span class='hs-keyword'>_</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>shift</span> <span class='hs-varid'>m</span> <span class='hs-layout'>(</span><span class='hs-varid'>l''</span> <span class='hs-comment'>-</span> <span class='hs-varid'>l</span><span class='hs-layout'>)</span> <span class='hs-varop'>==</span> <span class='hs-varid'>shift</span> <span class='hs-varid'>m'</span> <span class='hs-layout'>(</span><span class='hs-varid'>l''</span> <span class='hs-comment'>-</span> <span class='hs-varid'>l</span><span class='hs-layout'>)</span> <span class='hs-keyword'>where</span> <span class='hs-varid'>l''</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>min</span> <span class='hs-varid'>l</span> <span class='hs-varid'>l'</span>
-<a name="line-207"></a>    <span class='hs-conid'>BS</span> <span class='hs-keyword'>_</span> <span class='hs-keyword'>_</span> <span class='hs-keyword'>_</span> <span class='hs-varid'>l</span> <span class='hs-keyword'>_</span> <span class='hs-varid'>m</span> <span class='hs-keyword'>_</span> <span class='hs-varop'>/=</span> <span class='hs-conid'>BS</span> <span class='hs-keyword'>_</span> <span class='hs-keyword'>_</span> <span class='hs-keyword'>_</span> <span class='hs-varid'>l'</span> <span class='hs-keyword'>_</span> <span class='hs-varid'>m'</span> <span class='hs-keyword'>_</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>shift</span> <span class='hs-varid'>m</span> <span class='hs-layout'>(</span><span class='hs-varid'>l''</span> <span class='hs-comment'>-</span> <span class='hs-varid'>l</span><span class='hs-layout'>)</span> <span class='hs-varop'>/=</span> <span class='hs-varid'>shift</span> <span class='hs-varid'>m'</span> <span class='hs-layout'>(</span><span class='hs-varid'>l''</span> <span class='hs-comment'>-</span> <span class='hs-varid'>l</span><span class='hs-layout'>)</span> <span class='hs-keyword'>where</span> <span class='hs-varid'>l''</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>min</span> <span class='hs-varid'>l</span> <span class='hs-varid'>l'</span>
-<a name="line-208"></a>
-<a name="line-209"></a><span class='hs-keyword'>instance</span> <span class='hs-conid'>Ord</span> <span class='hs-layout'>(</span><span class='hs-conid'>BitSet</span> <span class='hs-varid'>a</span><span class='hs-layout'>)</span> <span class='hs-keyword'>where</span>
-<a name="line-210"></a>    <span class='hs-conid'>BS</span> <span class='hs-keyword'>_</span> <span class='hs-keyword'>_</span> <span class='hs-keyword'>_</span> <span class='hs-varid'>l</span> <span class='hs-keyword'>_</span> <span class='hs-varid'>m</span> <span class='hs-keyword'>_</span> <span class='hs-varop'>`compare`</span> <span class='hs-conid'>BS</span> <span class='hs-keyword'>_</span> <span class='hs-keyword'>_</span> <span class='hs-keyword'>_</span> <span class='hs-varid'>l'</span> <span class='hs-keyword'>_</span> <span class='hs-varid'>m'</span> <span class='hs-keyword'>_</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>shift</span> <span class='hs-varid'>m</span> <span class='hs-layout'>(</span><span class='hs-varid'>l''</span> <span class='hs-comment'>-</span> <span class='hs-varid'>l</span><span class='hs-layout'>)</span> <span class='hs-varop'>`compare`</span> <span class='hs-varid'>shift</span> <span class='hs-varid'>m'</span> <span class='hs-layout'>(</span><span class='hs-varid'>l''</span> <span class='hs-comment'>-</span> <span class='hs-varid'>l</span><span class='hs-layout'>)</span> <span class='hs-keyword'>where</span> <span class='hs-varid'>l''</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>min</span> <span class='hs-varid'>l</span> <span class='hs-varid'>l'</span>
-<a name="line-211"></a>
-<a name="line-212"></a><span class='hs-keyword'>instance</span> <span class='hs-layout'>(</span><span class='hs-conid'>Enum</span> <span class='hs-varid'>a</span><span class='hs-layout'>,</span> <span class='hs-conid'>Bounded</span> <span class='hs-varid'>a</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>Bounded</span> <span class='hs-layout'>(</span><span class='hs-conid'>BitSet</span> <span class='hs-varid'>a</span><span class='hs-layout'>)</span> <span class='hs-keyword'>where</span>
-<a name="line-213"></a>    <span class='hs-varid'>minBound</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>empty</span>
-<a name="line-214"></a>    <span class='hs-varid'>maxBound</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>result</span> <span class='hs-keyword'>where</span>
-<a name="line-215"></a>        <span class='hs-varid'>result</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>BS</span> <span class='hs-varid'>n</span> <span class='hs-varid'>n</span> <span class='hs-varid'>n</span> <span class='hs-varid'>l</span> <span class='hs-varid'>h</span> <span class='hs-varid'>m</span> <span class='hs-layout'>(</span><span class='hs-varid'>l</span><span class='hs-layout'>,</span><span class='hs-varid'>h</span><span class='hs-layout'>)</span>
-<a name="line-216"></a>        <span class='hs-varid'>n</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>h</span> <span class='hs-comment'>-</span> <span class='hs-varid'>l</span> <span class='hs-varop'>+</span> <span class='hs-num'>1</span>
-<a name="line-217"></a>        <span class='hs-varid'>l</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>fromEnum</span> <span class='hs-layout'>(</span><span class='hs-varid'>minBound</span> <span class='hs-varop'>`asArgTypeOf`</span> <span class='hs-varid'>result</span><span class='hs-layout'>)</span>
-<a name="line-218"></a>        <span class='hs-varid'>h</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>fromEnum</span> <span class='hs-layout'>(</span><span class='hs-varid'>maxBound</span> <span class='hs-varop'>`asArgTypeOf`</span> <span class='hs-varid'>result</span><span class='hs-layout'>)</span>
-<a name="line-219"></a>        <span class='hs-varid'>m</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>setBit</span> <span class='hs-num'>0</span> <span class='hs-varid'>n</span> <span class='hs-comment'>-</span> <span class='hs-num'>1</span>
-<a name="line-220"></a>
-<a name="line-221"></a><a name="asArgTypeOf"></a><span class='hs-definition'>asArgTypeOf</span> <span class='hs-keyglyph'>::</span> <span class='hs-varid'>a</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-varid'>f</span> <span class='hs-varid'>a</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-varid'>a</span>
-<a name="line-222"></a><span class='hs-definition'>asArgTypeOf</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>const</span>
-<a name="line-223"></a><span class='hs-comment'>{-# INLINE asArgTypeOf #-}</span>
-<a name="line-224"></a>
-<a name="line-225"></a><a name="recount"></a><span class='hs-definition'>recount</span> <span class='hs-keyglyph'>::</span> <span class='hs-conid'>Integer</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-conid'>Int</span>
-<a name="line-226"></a><span class='hs-definition'>recount</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>recount'</span> <span class='hs-num'>0</span> <span class='hs-keyword'>where</span>
-<a name="line-227"></a>    <span class='hs-varid'>recount'</span> <span class='hs-keyglyph'>::</span> <span class='hs-conid'>Int</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-conid'>Integer</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-conid'>Int</span>
-<a name="line-228"></a>    <span class='hs-varid'>recount'</span> <span class='hs-varop'>!</span><span class='hs-varid'>n</span> <span class='hs-num'>0</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>n</span>
-<a name="line-229"></a>    <span class='hs-varid'>recount'</span> <span class='hs-varop'>!</span><span class='hs-varid'>n</span> <span class='hs-varop'>!</span><span class='hs-varid'>m</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>recount'</span> <span class='hs-layout'>(</span><span class='hs-keyword'>if</span> <span class='hs-varid'>testBit</span> <span class='hs-varid'>m</span> <span class='hs-num'>0</span> <span class='hs-keyword'>then</span> <span class='hs-varid'>n</span><span class='hs-varop'>+</span><span class='hs-num'>1</span> <span class='hs-keyword'>else</span> <span class='hs-varid'>n</span><span class='hs-layout'>)</span> <span class='hs-layout'>(</span><span class='hs-varid'>shiftR</span> <span class='hs-varid'>m</span> <span class='hs-num'>1</span><span class='hs-layout'>)</span>
-<a name="line-230"></a>
-<a name="line-231"></a><span class='hs-comment'>-- note that operations on values generated by toEnum are pretty slow because the bounds are suboptimal</span>
-<a name="line-232"></a><span class='hs-keyword'>instance</span> <span class='hs-layout'>(</span><span class='hs-conid'>Enum</span> <span class='hs-varid'>a</span><span class='hs-layout'>,</span> <span class='hs-conid'>Bounded</span> <span class='hs-varid'>a</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>Enum</span> <span class='hs-layout'>(</span><span class='hs-conid'>BitSet</span> <span class='hs-varid'>a</span><span class='hs-layout'>)</span> <span class='hs-keyword'>where</span>
-<a name="line-233"></a>    <span class='hs-varid'>fromEnum</span> <span class='hs-varid'>b</span><span class='hs-keyglyph'>@</span><span class='hs-layout'>(</span><span class='hs-conid'>BS</span> <span class='hs-keyword'>_</span> <span class='hs-keyword'>_</span> <span class='hs-keyword'>_</span> <span class='hs-varid'>l</span> <span class='hs-keyword'>_</span> <span class='hs-varid'>m</span> <span class='hs-keyword'>_</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>fromInteger</span> <span class='hs-layout'>(</span><span class='hs-varid'>shiftL</span> <span class='hs-varid'>m</span> <span class='hs-layout'>(</span><span class='hs-varid'>l</span> <span class='hs-comment'>-</span> <span class='hs-varid'>l'</span><span class='hs-layout'>)</span><span class='hs-layout'>)</span>
-<a name="line-234"></a>        <span class='hs-keyword'>where</span> 
-<a name="line-235"></a>            <span class='hs-varid'>l'</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>fromEnum</span> <span class='hs-layout'>(</span><span class='hs-varid'>minBound</span> <span class='hs-varop'>`asArgTypeOf`</span> <span class='hs-varid'>b</span><span class='hs-layout'>)</span>
-<a name="line-236"></a>    <span class='hs-varid'>toEnum</span> <span class='hs-varid'>i</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>result</span> 
-<a name="line-237"></a>        <span class='hs-keyword'>where</span>
-<a name="line-238"></a>            <span class='hs-varid'>result</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>BS</span> <span class='hs-varid'>a</span> <span class='hs-varid'>i</span> <span class='hs-layout'>(</span><span class='hs-varid'>recount</span> <span class='hs-varid'>m</span><span class='hs-layout'>)</span> <span class='hs-varid'>l</span> <span class='hs-varid'>h</span> <span class='hs-varid'>m</span> <span class='hs-varid'>undefined</span> <span class='hs-comment'>-- n &lt;= 2^n, so i serves as a valid upper bound</span>
-<a name="line-239"></a>            <span class='hs-varid'>l</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>fromEnum</span> <span class='hs-layout'>(</span><span class='hs-varid'>minBound</span> <span class='hs-varop'>`asArgTypeOf`</span> <span class='hs-varid'>result</span><span class='hs-layout'>)</span>
-<a name="line-240"></a>            <span class='hs-varid'>h</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>fromEnum</span> <span class='hs-layout'>(</span><span class='hs-varid'>maxBound</span> <span class='hs-varop'>`asArgTypeOf`</span> <span class='hs-varid'>result</span><span class='hs-layout'>)</span>
-<a name="line-241"></a>            <span class='hs-varid'>m</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>fromIntegral</span> <span class='hs-varid'>i</span>
-<a name="line-242"></a>            <span class='hs-varid'>a</span> <span class='hs-keyglyph'>|</span> <span class='hs-varid'>m</span> <span class='hs-varop'>/=</span> <span class='hs-num'>0</span> <span class='hs-keyglyph'>=</span> <span class='hs-num'>1</span> <span class='hs-comment'>-- allow a fast null check, but not much else</span>
-<a name="line-243"></a>              <span class='hs-keyglyph'>|</span> <span class='hs-varid'>otherwise</span> <span class='hs-keyglyph'>=</span> <span class='hs-num'>0</span>
-<a name="line-244"></a>        
-<a name="line-245"></a><span class='hs-keyword'>instance</span> <span class='hs-conid'>Enum</span> <span class='hs-varid'>a</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>Monoid</span> <span class='hs-layout'>(</span><span class='hs-conid'>BitSet</span> <span class='hs-varid'>a</span><span class='hs-layout'>)</span> <span class='hs-keyword'>where</span>
-<a name="line-246"></a>    <span class='hs-varid'>mempty</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>empty</span>
-<a name="line-247"></a>    <span class='hs-varid'>mappend</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>union</span>
-<a name="line-248"></a>
-<a name="line-249"></a><span class='hs-keyword'>instance</span> <span class='hs-conid'>Enum</span> <span class='hs-varid'>a</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>Reducer</span> <span class='hs-varid'>a</span> <span class='hs-layout'>(</span><span class='hs-conid'>BitSet</span> <span class='hs-varid'>a</span><span class='hs-layout'>)</span> <span class='hs-keyword'>where</span>
-<a name="line-250"></a>    <span class='hs-varid'>unit</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>singleton</span>
-<a name="line-251"></a>    <span class='hs-varid'>snoc</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>flip</span> <span class='hs-varid'>insert</span>
-<a name="line-252"></a>    <span class='hs-varid'>cons</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>insert</span>
-<a name="line-253"></a>
-<a name="line-254"></a><span class='hs-keyword'>instance</span> <span class='hs-layout'>(</span><span class='hs-conid'>Bounded</span> <span class='hs-varid'>a</span><span class='hs-layout'>,</span> <span class='hs-conid'>Enum</span> <span class='hs-varid'>a</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>Multiplicative</span> <span class='hs-layout'>(</span><span class='hs-conid'>BitSet</span> <span class='hs-varid'>a</span><span class='hs-layout'>)</span> <span class='hs-keyword'>where</span>
-<a name="line-255"></a>    <span class='hs-varid'>one</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>full</span>
-<a name="line-256"></a>    <span class='hs-varid'>times</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>intersection</span>
-<a name="line-257"></a>
-<a name="line-258"></a><span class='hs-keyword'>instance</span> <span class='hs-layout'>(</span><span class='hs-conid'>Bounded</span> <span class='hs-varid'>a</span><span class='hs-layout'>,</span> <span class='hs-conid'>Enum</span> <span class='hs-varid'>a</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>LeftSemiNearRing</span> <span class='hs-layout'>(</span><span class='hs-conid'>BitSet</span> <span class='hs-varid'>a</span><span class='hs-layout'>)</span>
-<a name="line-259"></a><span class='hs-keyword'>instance</span> <span class='hs-layout'>(</span><span class='hs-conid'>Bounded</span> <span class='hs-varid'>a</span><span class='hs-layout'>,</span> <span class='hs-conid'>Enum</span> <span class='hs-varid'>a</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>RightSemiNearRing</span> <span class='hs-layout'>(</span><span class='hs-conid'>BitSet</span> <span class='hs-varid'>a</span><span class='hs-layout'>)</span>
-<a name="line-260"></a><span class='hs-keyword'>instance</span> <span class='hs-layout'>(</span><span class='hs-conid'>Bounded</span> <span class='hs-varid'>a</span><span class='hs-layout'>,</span> <span class='hs-conid'>Enum</span> <span class='hs-varid'>a</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>SemiRing</span> <span class='hs-layout'>(</span><span class='hs-conid'>BitSet</span> <span class='hs-varid'>a</span><span class='hs-layout'>)</span>
-<a name="line-261"></a>
-<a name="line-262"></a><span class='hs-comment'>-- idempotent monoid</span>
-<a name="line-263"></a><span class='hs-keyword'>instance</span> <span class='hs-conid'>Enum</span> <span class='hs-varid'>a</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>LeftModule</span> <span class='hs-conid'>Natural</span> <span class='hs-layout'>(</span><span class='hs-conid'>BitSet</span> <span class='hs-varid'>a</span><span class='hs-layout'>)</span> <span class='hs-keyword'>where</span>
-<a name="line-264"></a>    <span class='hs-num'>0</span> <span class='hs-varop'>*.</span> <span class='hs-keyword'>_</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>empty</span>
-<a name="line-265"></a>    <span class='hs-keyword'>_</span> <span class='hs-varop'>*.</span> <span class='hs-varid'>m</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>m</span>
-<a name="line-266"></a><span class='hs-keyword'>instance</span> <span class='hs-conid'>Enum</span> <span class='hs-varid'>a</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>RightModule</span> <span class='hs-conid'>Natural</span> <span class='hs-layout'>(</span><span class='hs-conid'>BitSet</span> <span class='hs-varid'>a</span><span class='hs-layout'>)</span> <span class='hs-keyword'>where</span>
-<a name="line-267"></a>    <span class='hs-keyword'>_</span> <span class='hs-varop'>.*</span> <span class='hs-num'>0</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>empty</span>
-<a name="line-268"></a>    <span class='hs-varid'>m</span> <span class='hs-varop'>.*</span> <span class='hs-keyword'>_</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>m</span>
-<a name="line-269"></a><span class='hs-keyword'>instance</span> <span class='hs-conid'>Enum</span> <span class='hs-varid'>a</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>Module</span> <span class='hs-conid'>Natural</span> <span class='hs-layout'>(</span><span class='hs-conid'>BitSet</span> <span class='hs-varid'>a</span><span class='hs-layout'>)</span>
-<a name="line-270"></a>
-<a name="line-271"></a><span class='hs-keyword'>instance</span> <span class='hs-layout'>(</span><span class='hs-conid'>Bounded</span> <span class='hs-varid'>a</span><span class='hs-layout'>,</span> <span class='hs-conid'>Enum</span> <span class='hs-varid'>a</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>LeftModule</span> <span class='hs-layout'>(</span><span class='hs-conid'>BitSet</span> <span class='hs-varid'>a</span><span class='hs-layout'>)</span> <span class='hs-layout'>(</span><span class='hs-conid'>BitSet</span> <span class='hs-varid'>a</span><span class='hs-layout'>)</span> <span class='hs-keyword'>where</span> <span class='hs-layout'>(</span><span class='hs-varop'>*.</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>times</span>
-<a name="line-272"></a><span class='hs-keyword'>instance</span> <span class='hs-layout'>(</span><span class='hs-conid'>Bounded</span> <span class='hs-varid'>a</span><span class='hs-layout'>,</span> <span class='hs-conid'>Enum</span> <span class='hs-varid'>a</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>RightModule</span> <span class='hs-layout'>(</span><span class='hs-conid'>BitSet</span> <span class='hs-varid'>a</span><span class='hs-layout'>)</span> <span class='hs-layout'>(</span><span class='hs-conid'>BitSet</span> <span class='hs-varid'>a</span><span class='hs-layout'>)</span> <span class='hs-keyword'>where</span> <span class='hs-layout'>(</span><span class='hs-varop'>.*</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>times</span>
-<a name="line-273"></a><span class='hs-keyword'>instance</span> <span class='hs-layout'>(</span><span class='hs-conid'>Bounded</span> <span class='hs-varid'>a</span><span class='hs-layout'>,</span> <span class='hs-conid'>Enum</span> <span class='hs-varid'>a</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>Module</span> <span class='hs-layout'>(</span><span class='hs-conid'>BitSet</span> <span class='hs-varid'>a</span><span class='hs-layout'>)</span> <span class='hs-layout'>(</span><span class='hs-conid'>BitSet</span> <span class='hs-varid'>a</span><span class='hs-layout'>)</span>
-<a name="line-274"></a>
-<a name="line-275"></a><span class='hs-keyword'>instance</span> <span class='hs-layout'>(</span><span class='hs-conid'>Bounded</span> <span class='hs-varid'>a</span><span class='hs-layout'>,</span> <span class='hs-conid'>Enum</span> <span class='hs-varid'>a</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>Algebra</span> <span class='hs-conid'>Natural</span> <span class='hs-layout'>(</span><span class='hs-conid'>BitSet</span> <span class='hs-varid'>a</span><span class='hs-layout'>)</span>
-<a name="line-276"></a>    
-<a name="line-277"></a><span class='hs-keyword'>instance</span> <span class='hs-conid'>Enum</span> <span class='hs-varid'>a</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>Generator</span> <span class='hs-layout'>(</span><span class='hs-conid'>BitSet</span> <span class='hs-varid'>a</span><span class='hs-layout'>)</span> <span class='hs-keyword'>where</span>
-<a name="line-278"></a>    <span class='hs-keyword'>type</span> <span class='hs-conid'>Elem</span> <span class='hs-layout'>(</span><span class='hs-conid'>BitSet</span> <span class='hs-varid'>a</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>a</span>
-<a name="line-279"></a>    <span class='hs-varid'>mapReduce</span> <span class='hs-varid'>f</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>mapReduce</span> <span class='hs-varid'>f</span> <span class='hs-varop'>.</span> <span class='hs-varid'>toList</span>
+<a name="line-95"></a><a name="null"></a><span class='hs-comment'>-- | /O(1|d)/ Is the 'BitSet' empty? May be faster than checking if @'size' == 0@ after union.</span>
+<a name="line-96"></a><span class='hs-comment'>--   Operations that require a recount are noted.</span>
+<a name="line-97"></a><span class='hs-definition'>null</span> <span class='hs-keyglyph'>::</span> <span class='hs-conid'>BitSet</span> <span class='hs-varid'>a</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-conid'>Bool</span>
+<a name="line-98"></a><span class='hs-definition'>null</span> <span class='hs-layout'>(</span><span class='hs-conid'>BS</span> <span class='hs-varid'>a</span> <span class='hs-varid'>b</span> <span class='hs-varid'>c</span> <span class='hs-keyword'>_</span> <span class='hs-keyword'>_</span> <span class='hs-keyword'>_</span> <span class='hs-keyword'>_</span><span class='hs-layout'>)</span> 
+<a name="line-99"></a>    <span class='hs-keyglyph'>|</span> <span class='hs-varid'>a</span> <span class='hs-varop'>&gt;</span> <span class='hs-num'>0</span>     <span class='hs-keyglyph'>=</span> <span class='hs-conid'>False</span>
+<a name="line-100"></a>    <span class='hs-keyglyph'>|</span> <span class='hs-varid'>b</span> <span class='hs-varop'>==</span> <span class='hs-num'>0</span>    <span class='hs-keyglyph'>=</span> <span class='hs-conid'>True</span>
+<a name="line-101"></a>    <span class='hs-keyglyph'>|</span> <span class='hs-varid'>otherwise</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>c</span> <span class='hs-varop'>==</span> <span class='hs-num'>0</span> 
+<a name="line-102"></a><span class='hs-comment'>{-# INLINE null #-}</span>
+<a name="line-103"></a>
+<a name="line-104"></a><a name="size"></a><span class='hs-comment'>-- | /O(1|d)/ The number of elements in the bit set.</span>
+<a name="line-105"></a><span class='hs-definition'>size</span> <span class='hs-keyglyph'>::</span> <span class='hs-conid'>BitSet</span> <span class='hs-varid'>a</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-conid'>Int</span>
+<a name="line-106"></a><span class='hs-definition'>size</span> <span class='hs-layout'>(</span><span class='hs-conid'>BS</span> <span class='hs-varid'>a</span> <span class='hs-varid'>b</span> <span class='hs-varid'>c</span> <span class='hs-keyword'>_</span> <span class='hs-keyword'>_</span> <span class='hs-varid'>m</span> <span class='hs-layout'>(</span><span class='hs-varid'>ul</span><span class='hs-layout'>,</span><span class='hs-varid'>uh</span><span class='hs-layout'>)</span><span class='hs-layout'>)</span> 
+<a name="line-107"></a>    <span class='hs-keyglyph'>|</span> <span class='hs-varid'>a</span> <span class='hs-varop'>==</span> <span class='hs-varid'>b</span><span class='hs-layout'>,</span> <span class='hs-varid'>m</span> <span class='hs-varop'>&gt;=</span> <span class='hs-num'>0</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>a</span>
+<a name="line-108"></a>    <span class='hs-keyglyph'>|</span> <span class='hs-varid'>a</span> <span class='hs-varop'>==</span> <span class='hs-varid'>b</span>         <span class='hs-keyglyph'>=</span> <span class='hs-varid'>uh</span> <span class='hs-comment'>-</span> <span class='hs-varid'>ul</span> <span class='hs-comment'>-</span> <span class='hs-varid'>a</span> 
+<a name="line-109"></a>    <span class='hs-keyglyph'>|</span> <span class='hs-varid'>m</span> <span class='hs-varop'>&gt;=</span> <span class='hs-num'>0</span>         <span class='hs-keyglyph'>=</span> <span class='hs-varid'>c</span>
+<a name="line-110"></a>    <span class='hs-keyglyph'>|</span> <span class='hs-varid'>otherwise</span>      <span class='hs-keyglyph'>=</span> <span class='hs-varid'>uh</span> <span class='hs-comment'>-</span> <span class='hs-varid'>ul</span> <span class='hs-comment'>-</span> <span class='hs-varid'>c</span> 
+<a name="line-111"></a><span class='hs-comment'>{-# INLINE size #-}</span>
+<a name="line-112"></a>
+<a name="line-113"></a><a name="full"></a><span class='hs-comment'>-- | /O(d)/ A 'BitSet' containing every member of the enumeration of @a@.</span>
+<a name="line-114"></a><span class='hs-definition'>full</span> <span class='hs-keyglyph'>::</span> <span class='hs-layout'>(</span><span class='hs-conid'>Enum</span> <span class='hs-varid'>a</span><span class='hs-layout'>,</span> <span class='hs-conid'>Bounded</span> <span class='hs-varid'>a</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>BitSet</span> <span class='hs-varid'>a</span>
+<a name="line-115"></a><span class='hs-definition'>full</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>complement</span> <span class='hs-varid'>empty</span> 
+<a name="line-116"></a><span class='hs-comment'>{-# INLINE full #-}</span>
+<a name="line-117"></a>
+<a name="line-118"></a><a name="complement"></a><span class='hs-comment'>-- | /O(d)/ Complements a 'BitSet' with respect to the bounds of @a@. Preserves order of 'null' and 'size'</span>
+<a name="line-119"></a><span class='hs-definition'>complement</span> <span class='hs-keyglyph'>::</span> <span class='hs-layout'>(</span><span class='hs-conid'>Enum</span> <span class='hs-varid'>a</span><span class='hs-layout'>,</span> <span class='hs-conid'>Bounded</span> <span class='hs-varid'>a</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>BitSet</span> <span class='hs-varid'>a</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-conid'>BitSet</span> <span class='hs-varid'>a</span> 
+<a name="line-120"></a><span class='hs-definition'>complement</span> <span class='hs-varid'>r</span><span class='hs-keyglyph'>@</span><span class='hs-layout'>(</span><span class='hs-conid'>BS</span> <span class='hs-varid'>a</span> <span class='hs-varid'>b</span> <span class='hs-varid'>c</span> <span class='hs-varid'>l</span> <span class='hs-varid'>h</span> <span class='hs-varid'>m</span> <span class='hs-keyword'>_</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>BS</span> <span class='hs-layout'>(</span><span class='hs-conid'>Bits</span><span class='hs-varop'>.</span><span class='hs-varid'>complement</span> <span class='hs-varid'>b</span><span class='hs-layout'>)</span> <span class='hs-layout'>(</span><span class='hs-conid'>Bits</span><span class='hs-varop'>.</span><span class='hs-varid'>complement</span> <span class='hs-varid'>a</span><span class='hs-layout'>)</span> <span class='hs-layout'>(</span><span class='hs-conid'>Bits</span><span class='hs-varop'>.</span><span class='hs-varid'>complement</span> <span class='hs-varid'>c</span><span class='hs-layout'>)</span> <span class='hs-varid'>l</span> <span class='hs-varid'>h</span> <span class='hs-layout'>(</span><span class='hs-conid'>Bits</span><span class='hs-varop'>.</span><span class='hs-varid'>complement</span> <span class='hs-varid'>m</span><span class='hs-layout'>)</span> <span class='hs-varid'>u</span> <span class='hs-keyword'>where</span>
+<a name="line-121"></a>    <span class='hs-varid'>u</span> <span class='hs-keyglyph'>=</span> <span class='hs-layout'>(</span><span class='hs-varid'>fromEnum</span> <span class='hs-layout'>(</span><span class='hs-varid'>minBound</span> <span class='hs-varop'>`asArgTypeOf`</span> <span class='hs-varid'>r</span><span class='hs-layout'>)</span><span class='hs-layout'>,</span> <span class='hs-varid'>fromEnum</span> <span class='hs-layout'>(</span><span class='hs-varid'>maxBound</span> <span class='hs-varop'>`asArgTypeOf`</span> <span class='hs-varid'>r</span><span class='hs-layout'>)</span><span class='hs-layout'>)</span>
+<a name="line-122"></a><span class='hs-comment'>{-# INLINE complement #-}</span>
+<a name="line-123"></a>
+<a name="line-124"></a><a name="recomplement"></a><span class='hs-comment'>-- | /O(d)/ unsafe internal method: complement a set that has already been complemented at least once.</span>
+<a name="line-125"></a><span class='hs-definition'>recomplement</span> <span class='hs-keyglyph'>::</span> <span class='hs-conid'>BitSet</span> <span class='hs-varid'>a</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-conid'>BitSet</span> <span class='hs-varid'>a</span> 
+<a name="line-126"></a><span class='hs-definition'>recomplement</span> <span class='hs-layout'>(</span><span class='hs-conid'>BS</span> <span class='hs-varid'>a</span> <span class='hs-varid'>b</span> <span class='hs-varid'>c</span> <span class='hs-varid'>l</span> <span class='hs-varid'>h</span> <span class='hs-varid'>m</span> <span class='hs-varid'>u</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>BS</span> <span class='hs-layout'>(</span><span class='hs-conid'>Bits</span><span class='hs-varop'>.</span><span class='hs-varid'>complement</span> <span class='hs-varid'>b</span><span class='hs-layout'>)</span> <span class='hs-layout'>(</span><span class='hs-conid'>Bits</span><span class='hs-varop'>.</span><span class='hs-varid'>complement</span> <span class='hs-varid'>a</span><span class='hs-layout'>)</span> <span class='hs-layout'>(</span><span class='hs-conid'>Bits</span><span class='hs-varop'>.</span><span class='hs-varid'>complement</span> <span class='hs-varid'>c</span><span class='hs-layout'>)</span> <span class='hs-varid'>l</span> <span class='hs-varid'>h</span> <span class='hs-layout'>(</span><span class='hs-conid'>Bits</span><span class='hs-varop'>.</span><span class='hs-varid'>complement</span> <span class='hs-varid'>m</span><span class='hs-layout'>)</span> <span class='hs-varid'>u</span>
+<a name="line-127"></a><span class='hs-comment'>{-# INLINE recomplement #-}</span>
+<a name="line-128"></a>
+<a name="line-129"></a><a name="pseudoComplement"></a><span class='hs-comment'>-- | /O(d)/ unsafe internal method: complement a set that has already been complemented at least once.</span>
+<a name="line-130"></a><span class='hs-definition'>pseudoComplement</span> <span class='hs-keyglyph'>::</span> <span class='hs-conid'>BitSet</span> <span class='hs-varid'>a</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-conid'>BitSet</span> <span class='hs-varid'>a</span> 
+<a name="line-131"></a><span class='hs-definition'>pseudoComplement</span> <span class='hs-layout'>(</span><span class='hs-conid'>BS</span> <span class='hs-varid'>a</span> <span class='hs-varid'>b</span> <span class='hs-varid'>c</span> <span class='hs-varid'>l</span> <span class='hs-varid'>h</span> <span class='hs-varid'>m</span> <span class='hs-keyword'>_</span><span class='hs-layout'>)</span> <span class='hs-varid'>u</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>BS</span> <span class='hs-layout'>(</span><span class='hs-conid'>Bits</span><span class='hs-varop'>.</span><span class='hs-varid'>complement</span> <span class='hs-varid'>b</span><span class='hs-layout'>)</span> <span class='hs-layout'>(</span><span class='hs-conid'>Bits</span><span class='hs-varop'>.</span><span class='hs-varid'>complement</span> <span class='hs-varid'>a</span><span class='hs-layout'>)</span> <span class='hs-layout'>(</span><span class='hs-conid'>Bits</span><span class='hs-varop'>.</span><span class='hs-varid'>complement</span> <span class='hs-varid'>c</span><span class='hs-layout'>)</span> <span class='hs-varid'>l</span> <span class='hs-varid'>h</span> <span class='hs-layout'>(</span><span class='hs-conid'>Bits</span><span class='hs-varop'>.</span><span class='hs-varid'>complement</span> <span class='hs-varid'>m</span><span class='hs-layout'>)</span> <span class='hs-varid'>u</span>
+<a name="line-132"></a><span class='hs-comment'>{-# INLINE pseudoComplement #-}</span>
+<a name="line-133"></a>
+<a name="line-134"></a><a name="fromList"></a><span class='hs-comment'>-- | /O(d * n)/ Make a 'BitSet' from a list of items.</span>
+<a name="line-135"></a><span class='hs-definition'>fromList</span> <span class='hs-keyglyph'>::</span> <span class='hs-conid'>Enum</span> <span class='hs-varid'>a</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-keyglyph'>[</span><span class='hs-varid'>a</span><span class='hs-keyglyph'>]</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-conid'>BitSet</span> <span class='hs-varid'>a</span>
+<a name="line-136"></a><span class='hs-definition'>fromList</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>foldr</span> <span class='hs-varid'>insert</span> <span class='hs-varid'>empty</span> 
+<a name="line-137"></a><span class='hs-comment'>{-# INLINE fromList #-}</span>
+<a name="line-138"></a>
+<a name="line-139"></a><a name="fromDistinctAscList"></a><span class='hs-comment'>-- | /O(d * n)/ Make a 'BitSet' from a distinct ascending list of items</span>
+<a name="line-140"></a><span class='hs-definition'>fromDistinctAscList</span> <span class='hs-keyglyph'>::</span> <span class='hs-conid'>Enum</span> <span class='hs-varid'>a</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-keyglyph'>[</span><span class='hs-varid'>a</span><span class='hs-keyglyph'>]</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-conid'>BitSet</span> <span class='hs-varid'>a</span> 
+<a name="line-141"></a><span class='hs-definition'>fromDistinctAscList</span> <span class='hs-conid'>[]</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>empty</span>
+<a name="line-142"></a><span class='hs-definition'>fromDistinctAscList</span> <span class='hs-layout'>(</span><span class='hs-varid'>c</span><span class='hs-conop'>:</span><span class='hs-varid'>cs</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>fromDistinctAscList'</span> <span class='hs-varid'>cs</span> <span class='hs-num'>1</span> <span class='hs-num'>0</span> <span class='hs-num'>1</span> 
+<a name="line-143"></a>    <span class='hs-keyword'>where</span>
+<a name="line-144"></a>        <span class='hs-varid'>l</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>fromEnum</span> <span class='hs-varid'>c</span>
+<a name="line-145"></a>        <span class='hs-varid'>fromDistinctAscList'</span> <span class='hs-keyglyph'>::</span> <span class='hs-conid'>Enum</span> <span class='hs-varid'>a</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-keyglyph'>[</span><span class='hs-varid'>a</span><span class='hs-keyglyph'>]</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-conid'>Int</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-conid'>Int</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-conid'>Integer</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-conid'>BitSet</span> <span class='hs-varid'>a</span>
+<a name="line-146"></a>        <span class='hs-varid'>fromDistinctAscList'</span> <span class='hs-conid'>[]</span> <span class='hs-varop'>!</span><span class='hs-varid'>n</span> <span class='hs-varop'>!</span><span class='hs-varid'>h</span> <span class='hs-varop'>!</span><span class='hs-varid'>m</span>  <span class='hs-keyglyph'>=</span> <span class='hs-conid'>BS</span> <span class='hs-varid'>n</span> <span class='hs-varid'>n</span> <span class='hs-varid'>n</span> <span class='hs-varid'>l</span> <span class='hs-varid'>h</span> <span class='hs-varid'>m</span> <span class='hs-varid'>undefined</span>
+<a name="line-147"></a>        <span class='hs-varid'>fromDistinctAscList'</span> <span class='hs-layout'>(</span><span class='hs-varid'>c'</span><span class='hs-conop'>:</span><span class='hs-varid'>cs'</span><span class='hs-layout'>)</span> <span class='hs-varop'>!</span><span class='hs-varid'>n</span> <span class='hs-keyword'>_</span> <span class='hs-varop'>!</span><span class='hs-varid'>m</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>fromDistinctAscList'</span> <span class='hs-varid'>cs'</span> <span class='hs-layout'>(</span><span class='hs-varid'>n</span><span class='hs-varop'>+</span><span class='hs-num'>1</span><span class='hs-layout'>)</span> <span class='hs-varid'>h'</span> <span class='hs-layout'>(</span><span class='hs-varid'>setBit</span> <span class='hs-varid'>m</span> <span class='hs-layout'>(</span><span class='hs-varid'>h'</span> <span class='hs-comment'>-</span> <span class='hs-varid'>l</span><span class='hs-layout'>)</span><span class='hs-layout'>)</span>
+<a name="line-148"></a>            <span class='hs-keyword'>where</span>
+<a name="line-149"></a>                <span class='hs-varid'>h'</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>fromEnum</span> <span class='hs-varid'>c'</span>
+<a name="line-150"></a><span class='hs-comment'>{-# INLINE fromDistinctAscList #-}</span>
+<a name="line-151"></a>
+<a name="line-152"></a><a name="insert"></a><span class='hs-comment'>-- | /O(d)/ Insert a single element of type @a@ into the 'BitSet'. Preserves order of 'null' and 'size'</span>
+<a name="line-153"></a><span class='hs-definition'>insert</span> <span class='hs-keyglyph'>::</span> <span class='hs-conid'>Enum</span> <span class='hs-varid'>a</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-varid'>a</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-conid'>BitSet</span> <span class='hs-varid'>a</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-conid'>BitSet</span> <span class='hs-varid'>a</span>
+<a name="line-154"></a><span class='hs-definition'>insert</span> <span class='hs-varid'>x</span> <span class='hs-varid'>r</span><span class='hs-keyglyph'>@</span><span class='hs-layout'>(</span><span class='hs-conid'>BS</span> <span class='hs-varid'>a</span> <span class='hs-varid'>b</span> <span class='hs-varid'>c</span> <span class='hs-varid'>l</span> <span class='hs-varid'>h</span> <span class='hs-varid'>m</span> <span class='hs-varid'>u</span><span class='hs-layout'>)</span> 
+<a name="line-155"></a>    <span class='hs-keyglyph'>|</span> <span class='hs-varid'>m</span> <span class='hs-varop'>&lt;</span> <span class='hs-num'>0</span><span class='hs-layout'>,</span> <span class='hs-varid'>e</span> <span class='hs-varop'>&lt;</span> <span class='hs-varid'>l</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>r</span> 
+<a name="line-156"></a>    <span class='hs-keyglyph'>|</span> <span class='hs-varid'>m</span> <span class='hs-varop'>&lt;</span> <span class='hs-num'>0</span><span class='hs-layout'>,</span> <span class='hs-varid'>e</span> <span class='hs-varop'>&gt;</span> <span class='hs-varid'>h</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>r</span>
+<a name="line-157"></a>    <span class='hs-keyglyph'>|</span> <span class='hs-varid'>e</span> <span class='hs-varop'>&lt;</span> <span class='hs-varid'>l</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>bs</span> <span class='hs-layout'>(</span><span class='hs-varid'>a</span><span class='hs-varop'>+</span><span class='hs-num'>1</span><span class='hs-layout'>)</span> <span class='hs-layout'>(</span><span class='hs-varid'>b</span><span class='hs-varop'>+</span><span class='hs-num'>1</span><span class='hs-layout'>)</span> <span class='hs-layout'>(</span><span class='hs-varid'>c</span><span class='hs-varop'>+</span><span class='hs-num'>1</span><span class='hs-layout'>)</span> <span class='hs-varid'>e</span> <span class='hs-varid'>h</span> <span class='hs-layout'>(</span><span class='hs-varid'>shiftL</span> <span class='hs-varid'>m</span> <span class='hs-layout'>(</span><span class='hs-varid'>l</span> <span class='hs-comment'>-</span> <span class='hs-varid'>e</span><span class='hs-layout'>)</span> <span class='hs-varop'>.|.</span> <span class='hs-num'>1</span><span class='hs-layout'>)</span> <span class='hs-varid'>u</span>
+<a name="line-158"></a>    <span class='hs-keyglyph'>|</span> <span class='hs-varid'>e</span> <span class='hs-varop'>&gt;</span> <span class='hs-varid'>h</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>bs</span> <span class='hs-layout'>(</span><span class='hs-varid'>a</span><span class='hs-varop'>+</span><span class='hs-num'>1</span><span class='hs-layout'>)</span> <span class='hs-layout'>(</span><span class='hs-varid'>b</span><span class='hs-varop'>+</span><span class='hs-num'>1</span><span class='hs-layout'>)</span> <span class='hs-layout'>(</span><span class='hs-varid'>c</span><span class='hs-varop'>+</span><span class='hs-num'>1</span><span class='hs-layout'>)</span> <span class='hs-varid'>l</span> <span class='hs-varid'>p</span> <span class='hs-layout'>(</span><span class='hs-varid'>setBit</span> <span class='hs-varid'>m</span> <span class='hs-varid'>p</span><span class='hs-layout'>)</span> <span class='hs-varid'>u</span>
+<a name="line-159"></a>    <span class='hs-keyglyph'>|</span> <span class='hs-varid'>testBit</span> <span class='hs-varid'>m</span> <span class='hs-varid'>p</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>r</span> 
+<a name="line-160"></a>    <span class='hs-keyglyph'>|</span> <span class='hs-varid'>otherwise</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>bs</span> <span class='hs-layout'>(</span><span class='hs-varid'>a</span><span class='hs-varop'>+</span><span class='hs-num'>1</span><span class='hs-layout'>)</span> <span class='hs-layout'>(</span><span class='hs-varid'>b</span><span class='hs-varop'>+</span><span class='hs-num'>1</span><span class='hs-layout'>)</span> <span class='hs-layout'>(</span><span class='hs-varid'>c</span><span class='hs-varop'>+</span><span class='hs-num'>1</span><span class='hs-layout'>)</span> <span class='hs-varid'>l</span> <span class='hs-varid'>h</span> <span class='hs-layout'>(</span><span class='hs-varid'>setBit</span> <span class='hs-varid'>m</span> <span class='hs-varid'>p</span><span class='hs-layout'>)</span> <span class='hs-varid'>u</span>
+<a name="line-161"></a>    <span class='hs-keyword'>where</span> 
+<a name="line-162"></a>        <span class='hs-varid'>e</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>fromEnum</span> <span class='hs-varid'>x</span>
+<a name="line-163"></a>        <span class='hs-varid'>p</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>e</span> <span class='hs-comment'>-</span> <span class='hs-varid'>l</span> 
+<a name="line-164"></a><span class='hs-comment'>{-# INLINE insert #-}</span>
+<a name="line-165"></a>
+<a name="line-166"></a><a name="delete"></a><span class='hs-comment'>-- | /O(d)/ Delete a single item from the 'BitSet'. Preserves order of 'null' and 'size'</span>
+<a name="line-167"></a><span class='hs-definition'>delete</span> <span class='hs-keyglyph'>::</span> <span class='hs-conid'>Enum</span> <span class='hs-varid'>a</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-varid'>a</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-conid'>BitSet</span> <span class='hs-varid'>a</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-conid'>BitSet</span> <span class='hs-varid'>a</span>
+<a name="line-168"></a><span class='hs-definition'>delete</span> <span class='hs-varid'>x</span> <span class='hs-varid'>r</span><span class='hs-keyglyph'>@</span><span class='hs-layout'>(</span><span class='hs-conid'>BS</span> <span class='hs-varid'>a</span> <span class='hs-varid'>b</span> <span class='hs-varid'>c</span> <span class='hs-varid'>l</span> <span class='hs-varid'>h</span> <span class='hs-varid'>m</span> <span class='hs-varid'>u</span><span class='hs-layout'>)</span> 
+<a name="line-169"></a>    <span class='hs-keyglyph'>|</span> <span class='hs-varid'>m</span> <span class='hs-varop'>&lt;</span> <span class='hs-num'>0</span><span class='hs-layout'>,</span> <span class='hs-varid'>e</span> <span class='hs-varop'>&lt;</span> <span class='hs-varid'>l</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>bs</span> <span class='hs-layout'>(</span><span class='hs-varid'>a</span><span class='hs-varop'>+</span><span class='hs-num'>1</span><span class='hs-layout'>)</span> <span class='hs-layout'>(</span><span class='hs-varid'>b</span><span class='hs-varop'>+</span><span class='hs-num'>1</span><span class='hs-layout'>)</span> <span class='hs-layout'>(</span><span class='hs-varid'>c</span><span class='hs-varop'>+</span><span class='hs-num'>1</span><span class='hs-layout'>)</span> <span class='hs-varid'>e</span> <span class='hs-varid'>h</span> <span class='hs-layout'>(</span><span class='hs-varid'>shiftL</span> <span class='hs-varid'>m</span> <span class='hs-layout'>(</span><span class='hs-varid'>l</span> <span class='hs-comment'>-</span> <span class='hs-varid'>e</span><span class='hs-layout'>)</span> <span class='hs-varop'>.&amp;.</span> <span class='hs-conid'>Bits</span><span class='hs-varop'>.</span><span class='hs-varid'>complement</span> <span class='hs-num'>1</span><span class='hs-layout'>)</span> <span class='hs-varid'>u</span>
+<a name="line-170"></a>    <span class='hs-keyglyph'>|</span> <span class='hs-varid'>m</span> <span class='hs-varop'>&lt;</span> <span class='hs-num'>0</span><span class='hs-layout'>,</span> <span class='hs-varid'>e</span> <span class='hs-varop'>&gt;</span> <span class='hs-varid'>h</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>bs</span> <span class='hs-layout'>(</span><span class='hs-varid'>a</span><span class='hs-varop'>+</span><span class='hs-num'>1</span><span class='hs-layout'>)</span> <span class='hs-layout'>(</span><span class='hs-varid'>b</span><span class='hs-varop'>+</span><span class='hs-num'>1</span><span class='hs-layout'>)</span> <span class='hs-layout'>(</span><span class='hs-varid'>c</span><span class='hs-varop'>+</span><span class='hs-num'>1</span><span class='hs-layout'>)</span> <span class='hs-varid'>l</span> <span class='hs-varid'>p</span> <span class='hs-layout'>(</span><span class='hs-varid'>clearBit</span> <span class='hs-varid'>m</span> <span class='hs-varid'>p</span><span class='hs-layout'>)</span> <span class='hs-varid'>u</span>
+<a name="line-171"></a>    <span class='hs-keyglyph'>|</span> <span class='hs-varid'>e</span> <span class='hs-varop'>&lt;</span> <span class='hs-varid'>l</span>       <span class='hs-keyglyph'>=</span> <span class='hs-varid'>r</span>
+<a name="line-172"></a>    <span class='hs-keyglyph'>|</span> <span class='hs-varid'>e</span> <span class='hs-varop'>&gt;</span> <span class='hs-varid'>h</span>       <span class='hs-keyglyph'>=</span> <span class='hs-varid'>r</span>
+<a name="line-173"></a>    <span class='hs-keyglyph'>|</span> <span class='hs-varid'>testBit</span> <span class='hs-varid'>m</span> <span class='hs-varid'>p</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>bs</span> <span class='hs-layout'>(</span><span class='hs-varid'>a</span><span class='hs-comment'>-</span><span class='hs-num'>1</span><span class='hs-layout'>)</span> <span class='hs-layout'>(</span><span class='hs-varid'>b</span><span class='hs-comment'>-</span><span class='hs-num'>1</span><span class='hs-layout'>)</span> <span class='hs-layout'>(</span><span class='hs-varid'>c</span><span class='hs-comment'>-</span><span class='hs-num'>1</span><span class='hs-layout'>)</span> <span class='hs-varid'>l</span> <span class='hs-varid'>h</span> <span class='hs-layout'>(</span><span class='hs-varid'>clearBit</span> <span class='hs-varid'>m</span> <span class='hs-varid'>p</span><span class='hs-layout'>)</span> <span class='hs-varid'>u</span>
+<a name="line-174"></a>    <span class='hs-keyglyph'>|</span> <span class='hs-varid'>otherwise</span>   <span class='hs-keyglyph'>=</span> <span class='hs-varid'>r</span>
+<a name="line-175"></a>    <span class='hs-keyword'>where</span> 
+<a name="line-176"></a>        <span class='hs-varid'>e</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>fromEnum</span> <span class='hs-varid'>x</span>
+<a name="line-177"></a>        <span class='hs-varid'>p</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>e</span> <span class='hs-comment'>-</span> <span class='hs-varid'>l</span>
+<a name="line-178"></a><span class='hs-comment'>{-# INLINE delete #-}</span>
+<a name="line-179"></a>
+<a name="line-180"></a><a name="member"></a><span class='hs-comment'>-- | /O(1)/ Test for membership in a 'BitSet'</span>
+<a name="line-181"></a><span class='hs-definition'>member</span> <span class='hs-keyglyph'>::</span> <span class='hs-conid'>Enum</span> <span class='hs-varid'>a</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-varid'>a</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-conid'>BitSet</span> <span class='hs-varid'>a</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-conid'>Bool</span>
+<a name="line-182"></a><span class='hs-definition'>member</span> <span class='hs-varid'>x</span> <span class='hs-layout'>(</span><span class='hs-conid'>BS</span> <span class='hs-keyword'>_</span> <span class='hs-keyword'>_</span> <span class='hs-keyword'>_</span> <span class='hs-varid'>l</span> <span class='hs-varid'>h</span> <span class='hs-varid'>m</span> <span class='hs-keyword'>_</span><span class='hs-layout'>)</span> 
+<a name="line-183"></a>    <span class='hs-keyglyph'>|</span> <span class='hs-varid'>e</span> <span class='hs-varop'>&lt;</span> <span class='hs-varid'>l</span>     <span class='hs-keyglyph'>=</span> <span class='hs-varid'>m</span> <span class='hs-varop'>&lt;</span> <span class='hs-num'>0</span> 
+<a name="line-184"></a>    <span class='hs-keyglyph'>|</span> <span class='hs-varid'>e</span> <span class='hs-varop'>&gt;</span> <span class='hs-varid'>h</span>     <span class='hs-keyglyph'>=</span> <span class='hs-varid'>m</span> <span class='hs-varop'>&gt;</span> <span class='hs-num'>0</span>
+<a name="line-185"></a>    <span class='hs-keyglyph'>|</span> <span class='hs-varid'>otherwise</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>testBit</span> <span class='hs-varid'>m</span> <span class='hs-layout'>(</span><span class='hs-varid'>e</span> <span class='hs-comment'>-</span> <span class='hs-varid'>l</span><span class='hs-layout'>)</span>
+<a name="line-186"></a>    <span class='hs-keyword'>where</span> 
+<a name="line-187"></a>        <span class='hs-varid'>e</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>fromEnum</span> <span class='hs-varid'>x</span>
+<a name="line-188"></a><span class='hs-comment'>{-# INLINE member #-}</span>
+<a name="line-189"></a>
+<a name="line-190"></a><a name="toInteger"></a><span class='hs-comment'>-- | /O(d)/ convert to an Integer representation. Discards negative elements</span>
+<a name="line-191"></a><span class='hs-definition'>toInteger</span> <span class='hs-keyglyph'>::</span> <span class='hs-conid'>BitSet</span> <span class='hs-varid'>a</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-conid'>Integer</span>
+<a name="line-192"></a><span class='hs-definition'>toInteger</span> <span class='hs-varid'>x</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>mantissa</span> <span class='hs-varid'>x</span> <span class='hs-varop'>`shift`</span> <span class='hs-varid'>exponent</span> <span class='hs-varid'>x</span>
+<a name="line-193"></a>
+<a name="line-194"></a><a name="union"></a><span class='hs-comment'>-- | /O(d)/. May force 'size' to take /O(d)/ if ranges overlap, preserves order of 'null'</span>
+<a name="line-195"></a><span class='hs-definition'>union</span> <span class='hs-keyglyph'>::</span> <span class='hs-conid'>BitSet</span> <span class='hs-varid'>a</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-conid'>BitSet</span> <span class='hs-varid'>a</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-conid'>BitSet</span> <span class='hs-varid'>a</span> 
+<a name="line-196"></a><span class='hs-definition'>union</span> <span class='hs-varid'>x</span><span class='hs-keyglyph'>@</span><span class='hs-layout'>(</span><span class='hs-conid'>BS</span> <span class='hs-varid'>a</span> <span class='hs-varid'>b</span> <span class='hs-varid'>c</span> <span class='hs-varid'>l</span> <span class='hs-varid'>h</span> <span class='hs-varid'>m</span> <span class='hs-varid'>u</span><span class='hs-layout'>)</span> <span class='hs-varid'>y</span><span class='hs-keyglyph'>@</span><span class='hs-layout'>(</span><span class='hs-conid'>BS</span> <span class='hs-varid'>a'</span> <span class='hs-varid'>b'</span> <span class='hs-varid'>c'</span> <span class='hs-varid'>l'</span> <span class='hs-varid'>h'</span> <span class='hs-varid'>m'</span> <span class='hs-varid'>u'</span><span class='hs-layout'>)</span>
+<a name="line-197"></a>    <span class='hs-keyglyph'>|</span> <span class='hs-varid'>l'</span> <span class='hs-varop'>&lt;</span> <span class='hs-varid'>l</span>        <span class='hs-keyglyph'>=</span> <span class='hs-varid'>union</span> <span class='hs-varid'>y</span> <span class='hs-varid'>x</span>                                                         <span class='hs-comment'>-- ensure left side has lower exponent</span>
+<a name="line-198"></a>    <span class='hs-keyglyph'>|</span> <span class='hs-varid'>b</span> <span class='hs-varop'>==</span> <span class='hs-num'>0</span>        <span class='hs-keyglyph'>=</span> <span class='hs-varid'>y</span>                                                                 <span class='hs-comment'>-- fast empty union</span>
+<a name="line-199"></a>    <span class='hs-keyglyph'>|</span> <span class='hs-varid'>b'</span> <span class='hs-varop'>==</span> <span class='hs-num'>0</span>       <span class='hs-keyglyph'>=</span> <span class='hs-varid'>x</span>                                                                 <span class='hs-comment'>-- fast empty union</span>
+<a name="line-200"></a>    <span class='hs-keyglyph'>|</span> <span class='hs-varid'>a</span> <span class='hs-varop'>==</span> <span class='hs-comment'>-</span><span class='hs-num'>1</span>       <span class='hs-keyglyph'>=</span> <span class='hs-varid'>entire</span> <span class='hs-varid'>u</span>                                                          <span class='hs-comment'>-- fast full union, recomplement obligation met by negative size</span>
+<a name="line-201"></a>    <span class='hs-keyglyph'>|</span> <span class='hs-varid'>a'</span> <span class='hs-varop'>==</span> <span class='hs-comment'>-</span><span class='hs-num'>1</span>      <span class='hs-keyglyph'>=</span> <span class='hs-varid'>entire</span> <span class='hs-varid'>u'</span>                                                         <span class='hs-comment'>-- fast full union, recomplement obligation met by negative size</span>
+<a name="line-202"></a>    <span class='hs-keyglyph'>|</span> <span class='hs-varid'>m</span> <span class='hs-varop'>&lt;</span> <span class='hs-num'>0</span><span class='hs-layout'>,</span> <span class='hs-varid'>m'</span> <span class='hs-varop'>&lt;</span> <span class='hs-num'>0</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>recomplement</span> <span class='hs-layout'>(</span><span class='hs-varid'>intersection</span> <span class='hs-layout'>(</span><span class='hs-varid'>recomplement</span> <span class='hs-varid'>x</span><span class='hs-layout'>)</span> <span class='hs-layout'>(</span><span class='hs-varid'>recomplement</span> <span class='hs-varid'>y</span><span class='hs-layout'>)</span><span class='hs-layout'>)</span>     <span class='hs-comment'>-- appeal to intersection, recomplement obligation met by 2s complement</span>
+<a name="line-203"></a>    <span class='hs-keyglyph'>|</span> <span class='hs-varid'>m'</span> <span class='hs-varop'>&lt;</span> <span class='hs-num'>0</span>        <span class='hs-keyglyph'>=</span> <span class='hs-varid'>recomplement</span> <span class='hs-layout'>(</span><span class='hs-varid'>pseudoDiff</span> <span class='hs-layout'>(</span><span class='hs-varid'>recomplement</span> <span class='hs-varid'>y</span><span class='hs-layout'>)</span> <span class='hs-varid'>x</span> <span class='hs-varid'>u'</span><span class='hs-layout'>)</span>                   <span class='hs-comment'>-- union with complement, recomplement obligation met by 2s complement</span>
+<a name="line-204"></a>    <span class='hs-keyglyph'>|</span> <span class='hs-varid'>m</span> <span class='hs-varop'>&lt;</span> <span class='hs-num'>0</span>         <span class='hs-keyglyph'>=</span> <span class='hs-varid'>recomplement</span> <span class='hs-layout'>(</span><span class='hs-varid'>pseudoDiff</span> <span class='hs-layout'>(</span><span class='hs-varid'>recomplement</span> <span class='hs-varid'>x</span><span class='hs-layout'>)</span> <span class='hs-varid'>y</span> <span class='hs-varid'>u</span><span class='hs-layout'>)</span>                    <span class='hs-comment'>-- union with complement, recomplement obligation met by 2s complement</span>
+<a name="line-205"></a>    <span class='hs-keyglyph'>|</span> <span class='hs-varid'>h</span> <span class='hs-varop'>&lt;</span> <span class='hs-varid'>l'</span>        <span class='hs-keyglyph'>=</span> <span class='hs-varid'>bs</span> <span class='hs-layout'>(</span><span class='hs-varid'>a</span> <span class='hs-varop'>+</span> <span class='hs-varid'>a'</span><span class='hs-layout'>)</span> <span class='hs-layout'>(</span><span class='hs-varid'>b</span> <span class='hs-varop'>+</span> <span class='hs-varid'>b'</span><span class='hs-layout'>)</span> <span class='hs-layout'>(</span><span class='hs-varid'>c</span> <span class='hs-varop'>+</span> <span class='hs-varid'>c'</span><span class='hs-layout'>)</span> <span class='hs-varid'>l</span> <span class='hs-varid'>h'</span> <span class='hs-varid'>m''</span> <span class='hs-varid'>u</span>                          <span class='hs-comment'>-- disjoint positive ranges</span>
+<a name="line-206"></a>    <span class='hs-keyglyph'>|</span> <span class='hs-varid'>otherwise</span>     <span class='hs-keyglyph'>=</span> <span class='hs-varid'>bs</span> <span class='hs-layout'>(</span><span class='hs-varid'>a</span> <span class='hs-varop'>`max`</span> <span class='hs-varid'>a'</span><span class='hs-layout'>)</span> <span class='hs-layout'>(</span><span class='hs-varid'>b</span> <span class='hs-varop'>+</span> <span class='hs-varid'>b'</span><span class='hs-layout'>)</span> <span class='hs-layout'>(</span><span class='hs-varid'>recount</span> <span class='hs-varid'>m''</span><span class='hs-layout'>)</span> <span class='hs-varid'>l</span> <span class='hs-layout'>(</span><span class='hs-varid'>h</span> <span class='hs-varop'>`max`</span> <span class='hs-varid'>h'</span><span class='hs-layout'>)</span> <span class='hs-varid'>m''</span> <span class='hs-varid'>u</span>       <span class='hs-comment'>-- overlapped positives</span>
+<a name="line-207"></a>    <span class='hs-keyword'>where</span> 
+<a name="line-208"></a>        <span class='hs-varid'>m''</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>m</span> <span class='hs-varop'>.|.</span> <span class='hs-varid'>shiftL</span> <span class='hs-varid'>m'</span> <span class='hs-layout'>(</span><span class='hs-varid'>l'</span> <span class='hs-comment'>-</span> <span class='hs-varid'>l</span><span class='hs-layout'>)</span>
+<a name="line-209"></a>        <span class='hs-varid'>entire</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>BS</span> <span class='hs-layout'>(</span><span class='hs-comment'>-</span><span class='hs-num'>1</span><span class='hs-layout'>)</span> <span class='hs-layout'>(</span><span class='hs-comment'>-</span><span class='hs-num'>1</span><span class='hs-layout'>)</span> <span class='hs-layout'>(</span><span class='hs-comment'>-</span><span class='hs-num'>1</span><span class='hs-layout'>)</span> <span class='hs-num'>0</span> <span class='hs-num'>0</span> <span class='hs-layout'>(</span><span class='hs-comment'>-</span><span class='hs-num'>1</span><span class='hs-layout'>)</span>
+<a name="line-210"></a>
+<a name="line-211"></a><a name="isComplemented"></a><span class='hs-comment'>-- | /O(1)/ check to see if we are represented as a complemented 'BitSet'. </span>
+<a name="line-212"></a><span class='hs-definition'>isComplemented</span> <span class='hs-keyglyph'>::</span> <span class='hs-conid'>BitSet</span> <span class='hs-varid'>a</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-conid'>Bool</span>
+<a name="line-213"></a><span class='hs-definition'>isComplemented</span> <span class='hs-keyglyph'>=</span> <span class='hs-layout'>(</span><span class='hs-varop'>&lt;</span><span class='hs-num'>0</span><span class='hs-layout'>)</span> <span class='hs-varop'>.</span> <span class='hs-varid'>mantissa</span> 
+<a name="line-214"></a>
+<a name="line-215"></a><a name="intersection"></a><span class='hs-comment'>-- | /O(d)/. May force 'size' and 'null' both to take /O(d)/.</span>
+<a name="line-216"></a><span class='hs-definition'>intersection</span> <span class='hs-keyglyph'>::</span> <span class='hs-conid'>BitSet</span> <span class='hs-varid'>a</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-conid'>BitSet</span> <span class='hs-varid'>a</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-conid'>BitSet</span> <span class='hs-varid'>a</span> 
+<a name="line-217"></a><span class='hs-definition'>intersection</span> <span class='hs-varid'>x</span><span class='hs-keyglyph'>@</span><span class='hs-layout'>(</span><span class='hs-conid'>BS</span> <span class='hs-varid'>a</span> <span class='hs-varid'>b</span> <span class='hs-keyword'>_</span> <span class='hs-varid'>l</span> <span class='hs-varid'>h</span> <span class='hs-varid'>m</span> <span class='hs-varid'>u</span><span class='hs-layout'>)</span> <span class='hs-varid'>y</span><span class='hs-keyglyph'>@</span><span class='hs-layout'>(</span><span class='hs-conid'>BS</span> <span class='hs-varid'>a'</span> <span class='hs-varid'>b'</span> <span class='hs-keyword'>_</span> <span class='hs-varid'>l'</span> <span class='hs-varid'>h'</span> <span class='hs-varid'>m'</span> <span class='hs-varid'>u'</span><span class='hs-layout'>)</span>
+<a name="line-218"></a>    <span class='hs-keyglyph'>|</span> <span class='hs-varid'>l'</span> <span class='hs-varop'>&lt;</span> <span class='hs-varid'>l</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>intersection</span> <span class='hs-varid'>y</span> <span class='hs-varid'>x</span>                                 
+<a name="line-219"></a>    <span class='hs-keyglyph'>|</span> <span class='hs-varid'>b</span> <span class='hs-varop'>==</span> <span class='hs-num'>0</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>empty</span>
+<a name="line-220"></a>    <span class='hs-keyglyph'>|</span> <span class='hs-varid'>b'</span> <span class='hs-varop'>==</span> <span class='hs-num'>0</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>empty</span>
+<a name="line-221"></a>    <span class='hs-keyglyph'>|</span> <span class='hs-varid'>a</span> <span class='hs-varop'>==</span> <span class='hs-comment'>-</span><span class='hs-num'>1</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>y</span>
+<a name="line-222"></a>    <span class='hs-keyglyph'>|</span> <span class='hs-varid'>a'</span> <span class='hs-varop'>==</span> <span class='hs-comment'>-</span><span class='hs-num'>1</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>x</span>
+<a name="line-223"></a>    <span class='hs-keyglyph'>|</span> <span class='hs-varid'>m</span> <span class='hs-varop'>&lt;</span> <span class='hs-num'>0</span><span class='hs-layout'>,</span> <span class='hs-varid'>m'</span> <span class='hs-varop'>&lt;</span> <span class='hs-num'>0</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>recomplement</span> <span class='hs-layout'>(</span><span class='hs-varid'>union</span> <span class='hs-layout'>(</span><span class='hs-varid'>recomplement</span> <span class='hs-varid'>x</span><span class='hs-layout'>)</span> <span class='hs-layout'>(</span><span class='hs-varid'>recomplement</span> <span class='hs-varid'>y</span><span class='hs-layout'>)</span><span class='hs-layout'>)</span>
+<a name="line-224"></a>    <span class='hs-keyglyph'>|</span> <span class='hs-varid'>m'</span> <span class='hs-varop'>&lt;</span> <span class='hs-num'>0</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>pseudoDiff</span> <span class='hs-varid'>x</span> <span class='hs-layout'>(</span><span class='hs-varid'>recomplement</span> <span class='hs-varid'>y</span><span class='hs-layout'>)</span> <span class='hs-varid'>u'</span>
+<a name="line-225"></a>    <span class='hs-keyglyph'>|</span> <span class='hs-varid'>m</span> <span class='hs-varop'>&lt;</span> <span class='hs-num'>0</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>pseudoDiff</span> <span class='hs-varid'>y</span> <span class='hs-layout'>(</span><span class='hs-varid'>recomplement</span> <span class='hs-varid'>x</span><span class='hs-layout'>)</span> <span class='hs-varid'>u</span>
+<a name="line-226"></a>    <span class='hs-keyglyph'>|</span> <span class='hs-varid'>h</span> <span class='hs-varop'>&lt;</span> <span class='hs-varid'>l'</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>empty</span> 
+<a name="line-227"></a>    <span class='hs-keyglyph'>|</span> <span class='hs-varid'>otherwise</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>bs</span> <span class='hs-num'>0</span> <span class='hs-layout'>(</span><span class='hs-varid'>b</span> <span class='hs-varop'>`min`</span> <span class='hs-varid'>b'</span><span class='hs-layout'>)</span> <span class='hs-layout'>(</span><span class='hs-varid'>recount</span> <span class='hs-varid'>m''</span><span class='hs-layout'>)</span> <span class='hs-varid'>l''</span> <span class='hs-layout'>(</span><span class='hs-varid'>h</span> <span class='hs-varop'>`min`</span> <span class='hs-varid'>h'</span><span class='hs-layout'>)</span> <span class='hs-varid'>m''</span> <span class='hs-varid'>u</span>
+<a name="line-228"></a>    <span class='hs-keyword'>where</span>
+<a name="line-229"></a>        <span class='hs-varid'>l''</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>max</span> <span class='hs-varid'>l</span> <span class='hs-varid'>l'</span>
+<a name="line-230"></a>        <span class='hs-varid'>m''</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>shift</span> <span class='hs-varid'>m</span> <span class='hs-layout'>(</span><span class='hs-varid'>l''</span> <span class='hs-comment'>-</span> <span class='hs-varid'>l</span><span class='hs-layout'>)</span> <span class='hs-varop'>.&amp;.</span> <span class='hs-varid'>shift</span> <span class='hs-varid'>m'</span> <span class='hs-layout'>(</span><span class='hs-varid'>l''</span> <span class='hs-comment'>-</span> <span class='hs-varid'>l'</span><span class='hs-layout'>)</span>
+<a name="line-231"></a>
+<a name="line-232"></a><a name="pseudoDiff"></a><span class='hs-comment'>-- | Unsafe internal method for computing differences in a particular universe of discourse</span>
+<a name="line-233"></a><span class='hs-comment'>-- preconditions:</span>
+<a name="line-234"></a><span class='hs-comment'>--  m &gt;= 0, m' &gt;= 0, a /= -1, a' /= -1, b /= 0, b' /= 0, u'' is the universe of discourse</span>
+<a name="line-235"></a><span class='hs-definition'>pseudoDiff</span> <span class='hs-keyglyph'>::</span> <span class='hs-conid'>BitSet</span> <span class='hs-varid'>a</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-conid'>BitSet</span> <span class='hs-varid'>a</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-layout'>(</span><span class='hs-conid'>Int</span><span class='hs-layout'>,</span><span class='hs-conid'>Int</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-conid'>BitSet</span> <span class='hs-varid'>a</span> 
+<a name="line-236"></a><span class='hs-definition'>pseudoDiff</span> <span class='hs-varid'>x</span><span class='hs-keyglyph'>@</span><span class='hs-layout'>(</span><span class='hs-conid'>BS</span> <span class='hs-varid'>a</span> <span class='hs-keyword'>_</span> <span class='hs-keyword'>_</span> <span class='hs-varid'>l</span> <span class='hs-varid'>h</span> <span class='hs-varid'>m</span> <span class='hs-keyword'>_</span><span class='hs-layout'>)</span> <span class='hs-layout'>(</span><span class='hs-conid'>BS</span> <span class='hs-keyword'>_</span> <span class='hs-varid'>b'</span> <span class='hs-keyword'>_</span> <span class='hs-varid'>l'</span> <span class='hs-varid'>h'</span> <span class='hs-varid'>m'</span> <span class='hs-keyword'>_</span><span class='hs-layout'>)</span> <span class='hs-varid'>u''</span>
+<a name="line-237"></a>    <span class='hs-keyglyph'>|</span> <span class='hs-varid'>h</span> <span class='hs-varop'>&lt;</span> <span class='hs-varid'>l'</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>x</span>
+<a name="line-238"></a>    <span class='hs-keyglyph'>|</span> <span class='hs-varid'>h'</span> <span class='hs-varop'>&lt;</span> <span class='hs-varid'>l</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>x</span>
+<a name="line-239"></a>    <span class='hs-keyglyph'>|</span> <span class='hs-varid'>otherwise</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>bs</span> <span class='hs-layout'>(</span><span class='hs-varid'>max</span> <span class='hs-layout'>(</span><span class='hs-varid'>a</span> <span class='hs-comment'>-</span> <span class='hs-varid'>b'</span><span class='hs-layout'>)</span> <span class='hs-num'>0</span><span class='hs-layout'>)</span> <span class='hs-varid'>a</span> <span class='hs-layout'>(</span><span class='hs-varid'>recount</span> <span class='hs-varid'>m''</span><span class='hs-layout'>)</span> <span class='hs-varid'>l</span> <span class='hs-varid'>h</span> <span class='hs-varid'>m''</span> <span class='hs-varid'>u''</span>
+<a name="line-240"></a>    <span class='hs-keyword'>where</span> 
+<a name="line-241"></a>        <span class='hs-varid'>m''</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>m</span> <span class='hs-varop'>.&amp;.</span> <span class='hs-varid'>shift</span> <span class='hs-layout'>(</span><span class='hs-conid'>Bits</span><span class='hs-varop'>.</span><span class='hs-varid'>complement</span> <span class='hs-varid'>m'</span><span class='hs-layout'>)</span> <span class='hs-layout'>(</span><span class='hs-varid'>l'</span> <span class='hs-comment'>-</span> <span class='hs-varid'>l</span><span class='hs-layout'>)</span>
+<a name="line-242"></a>
+<a name="line-243"></a><a name="difference"></a><span class='hs-comment'>-- | /O(d)/. Preserves order of 'null'. May force /O(d)/ 'size'.</span>
+<a name="line-244"></a><span class='hs-definition'>difference</span> <span class='hs-keyglyph'>::</span> <span class='hs-conid'>Enum</span> <span class='hs-varid'>a</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>BitSet</span> <span class='hs-varid'>a</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-conid'>BitSet</span> <span class='hs-varid'>a</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-conid'>BitSet</span> <span class='hs-varid'>a</span> 
+<a name="line-245"></a><span class='hs-definition'>difference</span> <span class='hs-varid'>x</span><span class='hs-keyglyph'>@</span><span class='hs-layout'>(</span><span class='hs-conid'>BS</span> <span class='hs-varid'>a</span> <span class='hs-varid'>b</span> <span class='hs-varid'>c</span> <span class='hs-varid'>l</span> <span class='hs-varid'>h</span> <span class='hs-varid'>m</span> <span class='hs-varid'>u</span><span class='hs-layout'>)</span>  <span class='hs-varid'>y</span><span class='hs-keyglyph'>@</span><span class='hs-layout'>(</span><span class='hs-conid'>BS</span> <span class='hs-varid'>a'</span> <span class='hs-varid'>b'</span> <span class='hs-varid'>c'</span> <span class='hs-varid'>l'</span> <span class='hs-varid'>h'</span> <span class='hs-varid'>u'</span><span class='hs-layout'>)</span> 
+<a name="line-246"></a>   <span class='hs-keyglyph'>|</span> <span class='hs-varid'>a</span> <span class='hs-varop'>==</span> <span class='hs-comment'>-</span><span class='hs-num'>1</span>       <span class='hs-keyglyph'>=</span> <span class='hs-varid'>pseudoComplement</span> <span class='hs-varid'>y</span> <span class='hs-varid'>u</span>
+<a name="line-247"></a>   <span class='hs-keyglyph'>|</span> <span class='hs-varid'>a'</span> <span class='hs-varop'>==</span> <span class='hs-comment'>-</span><span class='hs-num'>1</span>      <span class='hs-keyglyph'>=</span> <span class='hs-varid'>empty</span>
+<a name="line-248"></a>   <span class='hs-keyglyph'>|</span> <span class='hs-varid'>b</span> <span class='hs-varop'>==</span> <span class='hs-num'>0</span>        <span class='hs-keyglyph'>=</span> <span class='hs-varid'>empty</span>
+<a name="line-249"></a>   <span class='hs-keyglyph'>|</span> <span class='hs-varid'>b'</span> <span class='hs-varop'>==</span> <span class='hs-num'>0</span>       <span class='hs-keyglyph'>=</span> <span class='hs-varid'>x</span>
+<a name="line-250"></a>   <span class='hs-keyglyph'>|</span> <span class='hs-varid'>m</span> <span class='hs-varop'>&lt;</span> <span class='hs-num'>0</span><span class='hs-layout'>,</span> <span class='hs-varid'>m'</span> <span class='hs-varop'>&lt;</span> <span class='hs-num'>0</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>pseudoDiff</span> <span class='hs-layout'>(</span><span class='hs-varid'>recomplement</span> <span class='hs-varid'>y</span><span class='hs-layout'>)</span> <span class='hs-layout'>(</span><span class='hs-varid'>recomplement</span> <span class='hs-varid'>x</span><span class='hs-layout'>)</span> <span class='hs-varid'>u</span>
+<a name="line-251"></a>   <span class='hs-keyglyph'>|</span> <span class='hs-varid'>m</span> <span class='hs-varop'>&lt;</span> <span class='hs-num'>0</span>         <span class='hs-keyglyph'>=</span> <span class='hs-varid'>pseudoComplement</span> <span class='hs-layout'>(</span><span class='hs-varid'>recomplement</span> <span class='hs-varid'>x</span> <span class='hs-varop'>`union`</span> <span class='hs-varid'>y</span><span class='hs-layout'>)</span> <span class='hs-varid'>u</span>
+<a name="line-252"></a>   <span class='hs-keyglyph'>|</span> <span class='hs-varid'>m'</span> <span class='hs-varop'>&lt;</span> <span class='hs-num'>0</span>        <span class='hs-keyglyph'>=</span> <span class='hs-varid'>x</span> <span class='hs-varop'>`union`</span> <span class='hs-varid'>recomplement</span> <span class='hs-varid'>y</span> 
+<a name="line-253"></a>   <span class='hs-keyglyph'>|</span> <span class='hs-varid'>otherwise</span>     <span class='hs-keyglyph'>=</span> <span class='hs-varid'>pseudoDiff</span> <span class='hs-varid'>x</span> <span class='hs-varid'>y</span> <span class='hs-varid'>u</span>
+<a name="line-254"></a>    
+<a name="line-255"></a><a name="\\"></a><span class='hs-comment'>-- | /O(d)/. Preserves order of 'null'. May force /O(d)/ 'size'.</span>
+<a name="line-256"></a><span class='hs-layout'>(</span><span class='hs-varop'>\\</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>::</span> <span class='hs-conid'>Enum</span> <span class='hs-varid'>a</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>BitSet</span> <span class='hs-varid'>a</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-conid'>BitSet</span> <span class='hs-varid'>a</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-conid'>BitSet</span> <span class='hs-varid'>a</span> 
+<a name="line-257"></a><span class='hs-layout'>(</span><span class='hs-varop'>\\</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>difference</span>
+<a name="line-258"></a>
+<a name="line-259"></a><span class='hs-keyword'>instance</span> <span class='hs-conid'>Eq</span> <span class='hs-layout'>(</span><span class='hs-conid'>BitSet</span> <span class='hs-varid'>a</span><span class='hs-layout'>)</span> <span class='hs-keyword'>where</span>
+<a name="line-260"></a>    <span class='hs-varid'>x</span><span class='hs-keyglyph'>@</span><span class='hs-layout'>(</span><span class='hs-conid'>BS</span> <span class='hs-keyword'>_</span> <span class='hs-keyword'>_</span> <span class='hs-keyword'>_</span> <span class='hs-varid'>l</span> <span class='hs-keyword'>_</span> <span class='hs-varid'>m</span> <span class='hs-varid'>u</span><span class='hs-layout'>)</span> <span class='hs-varop'>==</span> <span class='hs-varid'>y</span><span class='hs-keyglyph'>@</span><span class='hs-layout'>(</span><span class='hs-conid'>BS</span> <span class='hs-keyword'>_</span> <span class='hs-keyword'>_</span> <span class='hs-keyword'>_</span> <span class='hs-varid'>l'</span> <span class='hs-keyword'>_</span> <span class='hs-varid'>m'</span> <span class='hs-keyword'>_</span><span class='hs-layout'>)</span>
+<a name="line-261"></a>        <span class='hs-keyglyph'>|</span> <span class='hs-varid'>signum</span> <span class='hs-varid'>m</span> <span class='hs-varop'>==</span> <span class='hs-varid'>signum</span> <span class='hs-varid'>m'</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>shift</span> <span class='hs-varid'>m</span> <span class='hs-layout'>(</span><span class='hs-varid'>l</span> <span class='hs-comment'>-</span> <span class='hs-varid'>l''</span><span class='hs-layout'>)</span> <span class='hs-varop'>==</span> <span class='hs-varid'>shift</span> <span class='hs-varid'>m'</span> <span class='hs-layout'>(</span><span class='hs-varid'>l</span> <span class='hs-comment'>-</span> <span class='hs-varid'>l''</span><span class='hs-layout'>)</span> <span class='hs-keyword'>where</span> <span class='hs-varid'>l''</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>min</span> <span class='hs-varid'>l</span> <span class='hs-varid'>l'</span>
+<a name="line-262"></a>        <span class='hs-keyglyph'>|</span> <span class='hs-varid'>m'</span> <span class='hs-varop'>&lt;</span> <span class='hs-num'>0</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>y</span> <span class='hs-varop'>==</span> <span class='hs-varid'>x</span>
+<a name="line-263"></a>        <span class='hs-keyglyph'>|</span> <span class='hs-varid'>otherwise</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>mask</span> <span class='hs-varop'>.&amp;.</span> <span class='hs-varid'>shift</span> <span class='hs-varid'>m</span> <span class='hs-layout'>(</span><span class='hs-varid'>l</span> <span class='hs-comment'>-</span> <span class='hs-varid'>ul</span><span class='hs-layout'>)</span> <span class='hs-varop'>==</span> <span class='hs-varid'>shift</span> <span class='hs-varid'>m'</span> <span class='hs-layout'>(</span><span class='hs-varid'>l</span> <span class='hs-comment'>-</span> <span class='hs-varid'>ul</span><span class='hs-layout'>)</span>
+<a name="line-264"></a>        <span class='hs-keyword'>where</span> 
+<a name="line-265"></a>            <span class='hs-varid'>mask</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>setBit</span> <span class='hs-num'>0</span> <span class='hs-layout'>(</span><span class='hs-varid'>uh</span> <span class='hs-comment'>-</span> <span class='hs-varid'>ul</span> <span class='hs-varop'>+</span> <span class='hs-num'>1</span><span class='hs-layout'>)</span> <span class='hs-comment'>-</span> <span class='hs-num'>1</span>
+<a name="line-266"></a>            <span class='hs-varid'>ul</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>fst</span> <span class='hs-varid'>u</span>
+<a name="line-267"></a>            <span class='hs-varid'>uh</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>snd</span> <span class='hs-varid'>u</span>
+<a name="line-268"></a>
+<a name="line-269"></a><span class='hs-keyword'>instance</span> <span class='hs-conid'>Ord</span> <span class='hs-layout'>(</span><span class='hs-conid'>BitSet</span> <span class='hs-varid'>a</span><span class='hs-layout'>)</span> <span class='hs-keyword'>where</span>
+<a name="line-270"></a>    <span class='hs-conid'>BS</span> <span class='hs-keyword'>_</span> <span class='hs-keyword'>_</span> <span class='hs-keyword'>_</span> <span class='hs-varid'>l</span> <span class='hs-keyword'>_</span> <span class='hs-varid'>m</span> <span class='hs-keyword'>_</span> <span class='hs-varop'>`compare`</span> <span class='hs-conid'>BS</span> <span class='hs-keyword'>_</span> <span class='hs-keyword'>_</span> <span class='hs-keyword'>_</span> <span class='hs-varid'>l'</span> <span class='hs-keyword'>_</span> <span class='hs-varid'>m'</span> <span class='hs-keyword'>_</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>shift</span> <span class='hs-varid'>m</span> <span class='hs-layout'>(</span><span class='hs-varid'>l''</span> <span class='hs-comment'>-</span> <span class='hs-varid'>l</span><span class='hs-layout'>)</span> <span class='hs-varop'>`compare`</span> <span class='hs-varid'>shift</span> <span class='hs-varid'>m'</span> <span class='hs-layout'>(</span><span class='hs-varid'>l''</span> <span class='hs-comment'>-</span> <span class='hs-varid'>l</span><span class='hs-layout'>)</span> <span class='hs-keyword'>where</span> <span class='hs-varid'>l''</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>min</span> <span class='hs-varid'>l</span> <span class='hs-varid'>l'</span>
+<a name="line-271"></a>
+<a name="line-272"></a><span class='hs-keyword'>instance</span> <span class='hs-layout'>(</span><span class='hs-conid'>Enum</span> <span class='hs-varid'>a</span><span class='hs-layout'>,</span> <span class='hs-conid'>Bounded</span> <span class='hs-varid'>a</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>Bounded</span> <span class='hs-layout'>(</span><span class='hs-conid'>BitSet</span> <span class='hs-varid'>a</span><span class='hs-layout'>)</span> <span class='hs-keyword'>where</span>
+<a name="line-273"></a>    <span class='hs-varid'>minBound</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>empty</span>
+<a name="line-274"></a>    <span class='hs-varid'>maxBound</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>result</span> <span class='hs-keyword'>where</span>
+<a name="line-275"></a>        <span class='hs-varid'>result</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>BS</span> <span class='hs-varid'>n</span> <span class='hs-varid'>n</span> <span class='hs-varid'>n</span> <span class='hs-varid'>l</span> <span class='hs-varid'>h</span> <span class='hs-varid'>m</span> <span class='hs-layout'>(</span><span class='hs-varid'>l</span><span class='hs-layout'>,</span><span class='hs-varid'>h</span><span class='hs-layout'>)</span>
+<a name="line-276"></a>        <span class='hs-varid'>n</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>h</span> <span class='hs-comment'>-</span> <span class='hs-varid'>l</span> <span class='hs-varop'>+</span> <span class='hs-num'>1</span>
+<a name="line-277"></a>        <span class='hs-varid'>l</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>fromEnum</span> <span class='hs-layout'>(</span><span class='hs-varid'>minBound</span> <span class='hs-varop'>`asArgTypeOf`</span> <span class='hs-varid'>result</span><span class='hs-layout'>)</span>
+<a name="line-278"></a>        <span class='hs-varid'>h</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>fromEnum</span> <span class='hs-layout'>(</span><span class='hs-varid'>maxBound</span> <span class='hs-varop'>`asArgTypeOf`</span> <span class='hs-varid'>result</span><span class='hs-layout'>)</span>
+<a name="line-279"></a>        <span class='hs-varid'>m</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>setBit</span> <span class='hs-num'>0</span> <span class='hs-varid'>n</span> <span class='hs-comment'>-</span> <span class='hs-num'>1</span>
+<a name="line-280"></a>
+<a name="line-281"></a><a name="asArgTypeOf"></a><span class='hs-comment'>-- | Utility function to avoid requiring ScopedTypeVariables</span>
+<a name="line-282"></a><span class='hs-definition'>asArgTypeOf</span> <span class='hs-keyglyph'>::</span> <span class='hs-varid'>a</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-varid'>f</span> <span class='hs-varid'>a</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-varid'>a</span>
+<a name="line-283"></a><span class='hs-definition'>asArgTypeOf</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>const</span>
+<a name="line-284"></a><span class='hs-comment'>{-# INLINE asArgTypeOf #-}</span>
+<a name="line-285"></a>
+<a name="line-286"></a><a name="recount"></a><span class='hs-comment'>-- | /O(d)/</span>
+<a name="line-287"></a><span class='hs-definition'>recount</span> <span class='hs-keyglyph'>::</span> <span class='hs-conid'>Integer</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-conid'>Int</span>
+<a name="line-288"></a><span class='hs-definition'>recount</span> <span class='hs-varop'>!</span><span class='hs-varid'>n</span> 
+<a name="line-289"></a><span class='hs-definition'>recount</span> <span class='hs-varop'>!</span><span class='hs-varid'>n</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>recount'</span> <span class='hs-num'>0</span> <span class='hs-num'>0</span> <span class='hs-keyword'>where</span>
+<a name="line-290"></a>    <span class='hs-varid'>h</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>hwm</span> <span class='hs-varid'>n</span>
+<a name="line-291"></a>    <span class='hs-varid'>recount'</span> <span class='hs-varop'>!</span><span class='hs-varid'>i</span> <span class='hs-varop'>!</span><span class='hs-varid'>c</span>
+<a name="line-292"></a>        <span class='hs-keyglyph'>|</span> <span class='hs-varid'>i</span> <span class='hs-varop'>&gt;</span> <span class='hs-varid'>h</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>c</span>
+<a name="line-293"></a>        <span class='hs-keyglyph'>|</span> <span class='hs-varid'>otherwise</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>recount'</span> <span class='hs-layout'>(</span><span class='hs-varid'>i</span><span class='hs-varop'>+</span><span class='hs-num'>1</span><span class='hs-layout'>)</span> <span class='hs-layout'>(</span><span class='hs-keyword'>if</span> <span class='hs-varid'>testBit</span> <span class='hs-varid'>n</span> <span class='hs-varid'>i</span> <span class='hs-keyword'>then</span> <span class='hs-varid'>c</span><span class='hs-varop'>+</span><span class='hs-num'>1</span> <span class='hs-keyword'>else</span> <span class='hs-varid'>c</span><span class='hs-layout'>)</span>
+<a name="line-294"></a>
+<a name="line-295"></a><a name="hwm"></a><span class='hs-comment'>-- | /O(d)/. Computes the equivalent of (truncate . logBase 2 . abs) extended with 0 at 0</span>
+<a name="line-296"></a><span class='hs-definition'>hwm</span> <span class='hs-keyglyph'>::</span> <span class='hs-conid'>Integer</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-conid'>Int</span>
+<a name="line-297"></a><span class='hs-definition'>hwm</span> <span class='hs-varop'>!</span><span class='hs-varid'>n</span> 
+<a name="line-298"></a>    <span class='hs-keyglyph'>|</span> <span class='hs-varid'>n</span> <span class='hs-varop'>&lt;</span> <span class='hs-num'>0</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>hwm</span> <span class='hs-layout'>(</span><span class='hs-comment'>-</span><span class='hs-varid'>n</span><span class='hs-layout'>)</span>
+<a name="line-299"></a>    <span class='hs-keyglyph'>|</span> <span class='hs-varid'>n</span> <span class='hs-varop'>&gt;</span> <span class='hs-num'>1</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>scan</span> <span class='hs-varid'>p</span> <span class='hs-layout'>(</span><span class='hs-num'>2</span><span class='hs-varop'>*</span><span class='hs-varid'>p</span><span class='hs-layout'>)</span> 
+<a name="line-300"></a>    <span class='hs-keyglyph'>|</span> <span class='hs-varid'>otherwise</span> <span class='hs-keyglyph'>=</span> <span class='hs-num'>0</span>
+<a name="line-301"></a>    <span class='hs-keyword'>where</span>
+<a name="line-302"></a>        <span class='hs-varid'>p</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>probe</span> <span class='hs-num'>1</span>
+<a name="line-303"></a>        <span class='hs-comment'>-- incrementally compute 2^(2^(i+1)) until it exceeds n</span>
+<a name="line-304"></a>        <span class='hs-varid'>probe</span> <span class='hs-keyglyph'>::</span> <span class='hs-conid'>Int</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-conid'>Int</span>
+<a name="line-305"></a>        <span class='hs-varid'>probe</span> <span class='hs-varop'>!</span><span class='hs-varid'>i</span>
+<a name="line-306"></a>            <span class='hs-keyglyph'>|</span> <span class='hs-varid'>bit</span> <span class='hs-varid'>i'</span> <span class='hs-varop'>&gt;</span> <span class='hs-varid'>n</span>        <span class='hs-keyglyph'>=</span> <span class='hs-varid'>i</span>
+<a name="line-307"></a>            <span class='hs-keyglyph'>|</span> <span class='hs-varid'>otherwise</span>         <span class='hs-keyglyph'>=</span> <span class='hs-varid'>probe</span> <span class='hs-varid'>i'</span>
+<a name="line-308"></a>            <span class='hs-keyword'>where</span> <span class='hs-varid'>i'</span> <span class='hs-keyglyph'>=</span> <span class='hs-num'>2</span><span class='hs-varop'>*</span><span class='hs-varid'>i</span>
+<a name="line-309"></a>
+<a name="line-310"></a>        <span class='hs-comment'>-- then scan the powers for the highest set bit</span>
+<a name="line-311"></a>        <span class='hs-varid'>scan</span> <span class='hs-keyglyph'>::</span> <span class='hs-conid'>Int</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-conid'>Int</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-conid'>Int</span>
+<a name="line-312"></a>        <span class='hs-varid'>scan</span> <span class='hs-varop'>!</span><span class='hs-varid'>l</span> <span class='hs-varop'>!</span><span class='hs-varid'>h</span>
+<a name="line-313"></a>            <span class='hs-keyglyph'>|</span> <span class='hs-varid'>l</span> <span class='hs-varop'>==</span> <span class='hs-varid'>h</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>l</span>
+<a name="line-314"></a>            <span class='hs-keyglyph'>|</span> <span class='hs-varid'>bit</span> <span class='hs-layout'>(</span><span class='hs-varid'>m</span><span class='hs-varop'>+</span><span class='hs-num'>1</span><span class='hs-layout'>)</span> <span class='hs-varop'>&gt;</span> <span class='hs-varid'>n</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>scan</span> <span class='hs-varid'>l</span> <span class='hs-varid'>m</span>
+<a name="line-315"></a>            <span class='hs-keyglyph'>|</span> <span class='hs-varid'>otherwise</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>scan</span> <span class='hs-layout'>(</span><span class='hs-varid'>m</span><span class='hs-varop'>+</span><span class='hs-num'>1</span><span class='hs-layout'>)</span> <span class='hs-varid'>h</span>
+<a name="line-316"></a>            <span class='hs-keyword'>where</span> <span class='hs-varid'>m</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>l</span> <span class='hs-varop'>+</span> <span class='hs-layout'>(</span><span class='hs-varid'>h</span> <span class='hs-comment'>-</span> <span class='hs-varid'>l</span><span class='hs-layout'>)</span> <span class='hs-varop'>`div`</span> <span class='hs-num'>2</span>
+<a name="line-317"></a> 
+<a name="line-318"></a><span class='hs-keyword'>instance</span> <span class='hs-layout'>(</span><span class='hs-conid'>Enum</span> <span class='hs-varid'>a</span><span class='hs-layout'>,</span> <span class='hs-conid'>Show</span> <span class='hs-varid'>a</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>Show</span> <span class='hs-layout'>(</span><span class='hs-conid'>BitSet</span> <span class='hs-varid'>a</span><span class='hs-layout'>)</span> <span class='hs-keyword'>where</span>
+<a name="line-319"></a>   <span class='hs-varid'>showsPrec</span> <span class='hs-varid'>d</span> <span class='hs-varid'>x</span><span class='hs-keyglyph'>@</span><span class='hs-layout'>(</span><span class='hs-conid'>BS</span> <span class='hs-keyword'>_</span> <span class='hs-keyword'>_</span> <span class='hs-keyword'>_</span> <span class='hs-keyword'>_</span> <span class='hs-keyword'>_</span> <span class='hs-varid'>m</span> <span class='hs-varid'>u</span><span class='hs-layout'>)</span>
+<a name="line-320"></a>        <span class='hs-keyglyph'>|</span> <span class='hs-varid'>m</span> <span class='hs-varop'>&lt;</span> <span class='hs-num'>0</span>     <span class='hs-keyglyph'>=</span> <span class='hs-varid'>showParen</span> <span class='hs-layout'>(</span><span class='hs-varid'>d</span> <span class='hs-varop'>&gt;</span> <span class='hs-num'>10</span><span class='hs-layout'>)</span> <span class='hs-varop'>$</span> <span class='hs-varid'>showString</span> <span class='hs-str'>"pseudoComplement "</span> <span class='hs-varop'>.</span> <span class='hs-varid'>showsPrec</span> <span class='hs-num'>11</span> <span class='hs-layout'>(</span><span class='hs-varid'>recomplement</span> <span class='hs-varid'>x</span><span class='hs-layout'>)</span><span class='hs-layout'>)</span> <span class='hs-varop'>.</span> <span class='hs-varid'>showString</span> <span class='hs-str'>" "</span> <span class='hs-varop'>.</span> <span class='hs-varid'>showsPrec</span> <span class='hs-num'>11</span> <span class='hs-varid'>u</span>
+<a name="line-321"></a>        <span class='hs-keyglyph'>|</span> <span class='hs-varid'>otherwise</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>showParen</span> <span class='hs-layout'>(</span><span class='hs-varid'>d</span> <span class='hs-varop'>&gt;</span> <span class='hs-num'>10</span><span class='hs-layout'>)</span> <span class='hs-varop'>$</span> <span class='hs-varid'>showString</span> <span class='hs-str'>"fromDistinctAscList "</span> <span class='hs-varop'>.</span> <span class='hs-varid'>showsPrec</span> <span class='hs-num'>11</span> <span class='hs-layout'>(</span><span class='hs-varid'>toList</span> <span class='hs-varid'>x</span><span class='hs-layout'>)</span>
+<a name="line-322"></a>
+<a name="line-323"></a><span class='hs-keyword'>instance</span> <span class='hs-layout'>(</span><span class='hs-conid'>Read</span> <span class='hs-varid'>a</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>Read</span> <span class='hs-layout'>(</span><span class='hs-conid'>BitSet</span> <span class='hs-varid'>a</span><span class='hs-layout'>)</span> <span class='hs-keyword'>where</span>
+<a name="line-324"></a>    <span class='hs-varid'>readPrec</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>parens</span> <span class='hs-varop'>$</span> <span class='hs-varid'>complemented</span> <span class='hs-varop'>+++</span> <span class='hs-varid'>normal</span> <span class='hs-keyword'>where</span>
+<a name="line-325"></a>        <span class='hs-varid'>complemented</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>prec</span> <span class='hs-num'>10</span> <span class='hs-varop'>$</span> <span class='hs-keyword'>do</span> 
+<a name="line-326"></a>                <span class='hs-conid'>Ident</span> <span class='hs-str'>"pseudoComplement"</span> <span class='hs-keyglyph'>&lt;-</span> <span class='hs-varid'>lexP</span>
+<a name="line-327"></a>                <span class='hs-varid'>x</span> <span class='hs-keyglyph'>&lt;-</span> <span class='hs-varid'>step</span> <span class='hs-varid'>readPrec</span>
+<a name="line-328"></a>                <span class='hs-varid'>pseudoComplement</span> <span class='hs-varid'>x</span> <span class='hs-varop'>`fmap`</span> <span class='hs-varid'>step</span> <span class='hs-varid'>readPrec</span>
+<a name="line-329"></a>        <span class='hs-varid'>normal</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>prec</span> <span class='hs-num'>10</span> <span class='hs-varop'>$</span> <span class='hs-keyword'>do</span>
+<a name="line-330"></a>                <span class='hs-conid'>Ident</span> <span class='hs-str'>"fromDistinctAscList"</span> <span class='hs-keyglyph'>&lt;-</span> <span class='hs-varid'>lexP</span>
+<a name="line-331"></a>                <span class='hs-varid'>fromDistinctAscList</span> <span class='hs-varop'>`fmap`</span> <span class='hs-varid'>step</span> <span class='hs-varid'>readPrec</span>
+<a name="line-332"></a>
+<a name="line-333"></a><span class='hs-comment'>-- note that operations on values generated by toEnum are pretty slow because the bounds are suboptimal</span>
+<a name="line-334"></a><span class='hs-keyword'>instance</span> <span class='hs-layout'>(</span><span class='hs-conid'>Enum</span> <span class='hs-varid'>a</span><span class='hs-layout'>,</span> <span class='hs-conid'>Bounded</span> <span class='hs-varid'>a</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>Enum</span> <span class='hs-layout'>(</span><span class='hs-conid'>BitSet</span> <span class='hs-varid'>a</span><span class='hs-layout'>)</span> <span class='hs-keyword'>where</span>
+<a name="line-335"></a>    <span class='hs-varid'>fromEnum</span> <span class='hs-varid'>b</span><span class='hs-keyglyph'>@</span><span class='hs-layout'>(</span><span class='hs-conid'>BS</span> <span class='hs-keyword'>_</span> <span class='hs-keyword'>_</span> <span class='hs-keyword'>_</span> <span class='hs-varid'>l</span> <span class='hs-keyword'>_</span> <span class='hs-varid'>m</span> <span class='hs-keyword'>_</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>fromInteger</span> <span class='hs-layout'>(</span><span class='hs-varid'>shiftL</span> <span class='hs-varid'>m</span> <span class='hs-layout'>(</span><span class='hs-varid'>l</span> <span class='hs-comment'>-</span> <span class='hs-varid'>l'</span><span class='hs-layout'>)</span><span class='hs-layout'>)</span>
+<a name="line-336"></a>        <span class='hs-keyword'>where</span> 
+<a name="line-337"></a>            <span class='hs-varid'>l'</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>fromEnum</span> <span class='hs-layout'>(</span><span class='hs-varid'>minBound</span> <span class='hs-varop'>`asArgTypeOf`</span> <span class='hs-varid'>b</span><span class='hs-layout'>)</span>
+<a name="line-338"></a>    <span class='hs-varid'>toEnum</span> <span class='hs-varid'>i</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>result</span> 
+<a name="line-339"></a>        <span class='hs-keyword'>where</span>
+<a name="line-340"></a>            <span class='hs-varid'>result</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>BS</span> <span class='hs-varid'>a</span> <span class='hs-varid'>i</span> <span class='hs-layout'>(</span><span class='hs-varid'>recount</span> <span class='hs-varid'>m</span><span class='hs-layout'>)</span> <span class='hs-varid'>l</span> <span class='hs-varid'>h</span> <span class='hs-varid'>m</span> <span class='hs-varid'>undefined</span> <span class='hs-comment'>-- n &lt;= 2^n, so i serves as a valid upper bound</span>
+<a name="line-341"></a>            <span class='hs-varid'>l</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>fromEnum</span> <span class='hs-layout'>(</span><span class='hs-varid'>minBound</span> <span class='hs-varop'>`asArgTypeOf`</span> <span class='hs-varid'>result</span><span class='hs-layout'>)</span>
+<a name="line-342"></a>            <span class='hs-varid'>h</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>fromEnum</span> <span class='hs-layout'>(</span><span class='hs-varid'>maxBound</span> <span class='hs-varop'>`asArgTypeOf`</span> <span class='hs-varid'>result</span><span class='hs-layout'>)</span>
+<a name="line-343"></a>            <span class='hs-varid'>m</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>fromIntegral</span> <span class='hs-varid'>i</span>
+<a name="line-344"></a>            <span class='hs-varid'>a</span> <span class='hs-keyglyph'>|</span> <span class='hs-varid'>m</span> <span class='hs-varop'>/=</span> <span class='hs-num'>0</span> <span class='hs-keyglyph'>=</span> <span class='hs-num'>1</span> <span class='hs-comment'>-- allow a fast null check, but not much else</span>
+<a name="line-345"></a>              <span class='hs-keyglyph'>|</span> <span class='hs-varid'>otherwise</span> <span class='hs-keyglyph'>=</span> <span class='hs-num'>0</span>
+<a name="line-346"></a>        
+<a name="line-347"></a><span class='hs-keyword'>instance</span> <span class='hs-conid'>Enum</span> <span class='hs-varid'>a</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>Monoid</span> <span class='hs-layout'>(</span><span class='hs-conid'>BitSet</span> <span class='hs-varid'>a</span><span class='hs-layout'>)</span> <span class='hs-keyword'>where</span>
+<a name="line-348"></a>    <span class='hs-varid'>mempty</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>empty</span>
+<a name="line-349"></a>    <span class='hs-varid'>mappend</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>union</span>
+<a name="line-350"></a>
+<a name="line-351"></a><span class='hs-keyword'>instance</span> <span class='hs-conid'>Enum</span> <span class='hs-varid'>a</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>Reducer</span> <span class='hs-varid'>a</span> <span class='hs-layout'>(</span><span class='hs-conid'>BitSet</span> <span class='hs-varid'>a</span><span class='hs-layout'>)</span> <span class='hs-keyword'>where</span>
+<a name="line-352"></a>    <span class='hs-varid'>unit</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>singleton</span>
+<a name="line-353"></a>    <span class='hs-varid'>snoc</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>flip</span> <span class='hs-varid'>insert</span>
+<a name="line-354"></a>    <span class='hs-varid'>cons</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>insert</span>
+<a name="line-355"></a>
+<a name="line-356"></a><span class='hs-keyword'>instance</span> <span class='hs-layout'>(</span><span class='hs-conid'>Bounded</span> <span class='hs-varid'>a</span><span class='hs-layout'>,</span> <span class='hs-conid'>Enum</span> <span class='hs-varid'>a</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>Multiplicative</span> <span class='hs-layout'>(</span><span class='hs-conid'>BitSet</span> <span class='hs-varid'>a</span><span class='hs-layout'>)</span> <span class='hs-keyword'>where</span>
+<a name="line-357"></a>    <span class='hs-varid'>one</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>full</span>
+<a name="line-358"></a>    <span class='hs-varid'>times</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>intersection</span>
+<a name="line-359"></a>
+<a name="line-360"></a><span class='hs-keyword'>instance</span> <span class='hs-layout'>(</span><span class='hs-conid'>Bounded</span> <span class='hs-varid'>a</span><span class='hs-layout'>,</span> <span class='hs-conid'>Enum</span> <span class='hs-varid'>a</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>LeftSemiNearRing</span> <span class='hs-layout'>(</span><span class='hs-conid'>BitSet</span> <span class='hs-varid'>a</span><span class='hs-layout'>)</span>
+<a name="line-361"></a><span class='hs-keyword'>instance</span> <span class='hs-layout'>(</span><span class='hs-conid'>Bounded</span> <span class='hs-varid'>a</span><span class='hs-layout'>,</span> <span class='hs-conid'>Enum</span> <span class='hs-varid'>a</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>RightSemiNearRing</span> <span class='hs-layout'>(</span><span class='hs-conid'>BitSet</span> <span class='hs-varid'>a</span><span class='hs-layout'>)</span>
+<a name="line-362"></a><span class='hs-keyword'>instance</span> <span class='hs-layout'>(</span><span class='hs-conid'>Bounded</span> <span class='hs-varid'>a</span><span class='hs-layout'>,</span> <span class='hs-conid'>Enum</span> <span class='hs-varid'>a</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>SemiRing</span> <span class='hs-layout'>(</span><span class='hs-conid'>BitSet</span> <span class='hs-varid'>a</span><span class='hs-layout'>)</span>
+<a name="line-363"></a>
+<a name="line-364"></a><span class='hs-comment'>-- idempotent monoid</span>
+<a name="line-365"></a><span class='hs-keyword'>instance</span> <span class='hs-conid'>Enum</span> <span class='hs-varid'>a</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>LeftModule</span> <span class='hs-conid'>Natural</span> <span class='hs-layout'>(</span><span class='hs-conid'>BitSet</span> <span class='hs-varid'>a</span><span class='hs-layout'>)</span> <span class='hs-keyword'>where</span>
+<a name="line-366"></a>    <span class='hs-num'>0</span> <span class='hs-varop'>*.</span> <span class='hs-keyword'>_</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>empty</span>
+<a name="line-367"></a>    <span class='hs-keyword'>_</span> <span class='hs-varop'>*.</span> <span class='hs-varid'>m</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>m</span>
+<a name="line-368"></a><span class='hs-keyword'>instance</span> <span class='hs-conid'>Enum</span> <span class='hs-varid'>a</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>RightModule</span> <span class='hs-conid'>Natural</span> <span class='hs-layout'>(</span><span class='hs-conid'>BitSet</span> <span class='hs-varid'>a</span><span class='hs-layout'>)</span> <span class='hs-keyword'>where</span>
+<a name="line-369"></a>    <span class='hs-keyword'>_</span> <span class='hs-varop'>.*</span> <span class='hs-num'>0</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>empty</span>
+<a name="line-370"></a>    <span class='hs-varid'>m</span> <span class='hs-varop'>.*</span> <span class='hs-keyword'>_</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>m</span>
+<a name="line-371"></a><span class='hs-keyword'>instance</span> <span class='hs-conid'>Enum</span> <span class='hs-varid'>a</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>Module</span> <span class='hs-conid'>Natural</span> <span class='hs-layout'>(</span><span class='hs-conid'>BitSet</span> <span class='hs-varid'>a</span><span class='hs-layout'>)</span>
+<a name="line-372"></a>
+<a name="line-373"></a><span class='hs-keyword'>instance</span> <span class='hs-layout'>(</span><span class='hs-conid'>Bounded</span> <span class='hs-varid'>a</span><span class='hs-layout'>,</span> <span class='hs-conid'>Enum</span> <span class='hs-varid'>a</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>LeftModule</span> <span class='hs-layout'>(</span><span class='hs-conid'>BitSet</span> <span class='hs-varid'>a</span><span class='hs-layout'>)</span> <span class='hs-layout'>(</span><span class='hs-conid'>BitSet</span> <span class='hs-varid'>a</span><span class='hs-layout'>)</span> <span class='hs-keyword'>where</span> <span class='hs-layout'>(</span><span class='hs-varop'>*.</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>times</span>
+<a name="line-374"></a><span class='hs-keyword'>instance</span> <span class='hs-layout'>(</span><span class='hs-conid'>Bounded</span> <span class='hs-varid'>a</span><span class='hs-layout'>,</span> <span class='hs-conid'>Enum</span> <span class='hs-varid'>a</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>RightModule</span> <span class='hs-layout'>(</span><span class='hs-conid'>BitSet</span> <span class='hs-varid'>a</span><span class='hs-layout'>)</span> <span class='hs-layout'>(</span><span class='hs-conid'>BitSet</span> <span class='hs-varid'>a</span><span class='hs-layout'>)</span> <span class='hs-keyword'>where</span> <span class='hs-layout'>(</span><span class='hs-varop'>.*</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>times</span>
+<a name="line-375"></a><span class='hs-keyword'>instance</span> <span class='hs-layout'>(</span><span class='hs-conid'>Bounded</span> <span class='hs-varid'>a</span><span class='hs-layout'>,</span> <span class='hs-conid'>Enum</span> <span class='hs-varid'>a</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>Module</span> <span class='hs-layout'>(</span><span class='hs-conid'>BitSet</span> <span class='hs-varid'>a</span><span class='hs-layout'>)</span> <span class='hs-layout'>(</span><span class='hs-conid'>BitSet</span> <span class='hs-varid'>a</span><span class='hs-layout'>)</span>
+<a name="line-376"></a>
+<a name="line-377"></a><span class='hs-keyword'>instance</span> <span class='hs-layout'>(</span><span class='hs-conid'>Bounded</span> <span class='hs-varid'>a</span><span class='hs-layout'>,</span> <span class='hs-conid'>Enum</span> <span class='hs-varid'>a</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>Algebra</span> <span class='hs-conid'>Natural</span> <span class='hs-layout'>(</span><span class='hs-conid'>BitSet</span> <span class='hs-varid'>a</span><span class='hs-layout'>)</span>
+<a name="line-378"></a>    
+<a name="line-379"></a><span class='hs-keyword'>instance</span> <span class='hs-conid'>Enum</span> <span class='hs-varid'>a</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>Generator</span> <span class='hs-layout'>(</span><span class='hs-conid'>BitSet</span> <span class='hs-varid'>a</span><span class='hs-layout'>)</span> <span class='hs-keyword'>where</span>
+<a name="line-380"></a>    <span class='hs-keyword'>type</span> <span class='hs-conid'>Elem</span> <span class='hs-layout'>(</span><span class='hs-conid'>BitSet</span> <span class='hs-varid'>a</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>a</span>
+<a name="line-381"></a>    <span class='hs-varid'>mapReduce</span> <span class='hs-varid'>f</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>mapReduce</span> <span class='hs-varid'>f</span> <span class='hs-varop'>.</span> <span class='hs-varid'>toList</span>
}
