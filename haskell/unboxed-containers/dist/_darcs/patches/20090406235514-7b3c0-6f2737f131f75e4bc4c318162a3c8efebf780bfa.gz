[docs
ekmett@gmail.com**20090406235514
 Ignore-this: 3559aa79767d97c3dd819e43d2f414ad
] {
adddir ./doc
adddir ./doc/html
adddir ./doc/html/unboxed-containers
addfile ./doc/html/unboxed-containers/Data-Set-Unboxed.html
hunk ./doc/html/unboxed-containers/Data-Set-Unboxed.html 1
+<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd">
+<!--Rendered using the Haskell Html Library v0.2-->
+<HTML
+><HEAD
+><META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=UTF-8"
+><TITLE
+>Data.Set.Unboxed</TITLE
+><LINK HREF="haddock.css" REL="stylesheet" TYPE="text/css"
+><SCRIPT SRC="haddock-util.js" TYPE="text/javascript"
+></SCRIPT
+></HEAD
+><BODY
+><TABLE CLASS="vanilla" CELLSPACING="0" CELLPADDING="0"
+><TR
+><TD CLASS="topbar"
+><TABLE CLASS="vanilla" CELLSPACING="0" CELLPADDING="0"
+><TR
+><TD
+><IMG SRC="haskell_icon.gif" WIDTH="16" HEIGHT="16" ALT=" "
+></TD
+><TD CLASS="title"
+>unboxed-containers-0.0.0: Self-optimizing unboxed sets using view patterns and data families</TD
+><TD CLASS="topbut"
+><A HREF="src/Data-Set-Unboxed.html"
+>Source code</A
+></TD
+><TD CLASS="topbut"
+><A HREF="index.html"
+>Contents</A
+></TD
+><TD CLASS="topbut"
+><A HREF="doc-index.html"
+>Index</A
+></TD
+></TR
+></TABLE
+></TD
+></TR
+><TR
+><TD CLASS="modulebar"
+><TABLE CLASS="vanilla" CELLSPACING="0" CELLPADDING="0"
+><TR
+><TD
+><FONT SIZE="6"
+>Data.Set.Unboxed</FONT
+></TD
+></TR
+></TABLE
+></TD
+></TR
+><TR
+><TD CLASS="s15"
+></TD
+></TR
+><TR
+><TD
+><TABLE CLASS="vanilla" CELLSPACING="0" CELLPADDING="0"
+><TR
+><TD CLASS="section4"
+><B
+>Contents</B
+></TD
+></TR
+><TR
+><TD
+><DL
+><DT
+><A HREF="#1"
+>Set type
+</A
+></DT
+><DT
+><A HREF="#2"
+>Operators
+</A
+></DT
+><DT
+><A HREF="#3"
+>Query
+</A
+></DT
+><DT
+><A HREF="#4"
+>Construction
+</A
+></DT
+><DT
+><A HREF="#5"
+>Combine
+</A
+></DT
+><DT
+><A HREF="#6"
+>Filter
+</A
+></DT
+><DT
+><A HREF="#7"
+>Map
+</A
+></DT
+><DT
+><A HREF="#8"
+>Fold
+</A
+></DT
+><DT
+><A HREF="#9"
+>Min/Max
+</A
+></DT
+><DT
+><A HREF="#10"
+>Conversion
+</A
+></DT
+><DD
+><DL
+><DT
+><A HREF="#11"
+>List
+</A
+></DT
+><DT
+><A HREF="#12"
+>Ordered list
+</A
+></DT
+></DL
+></DD
+><DT
+><A HREF="#13"
+>Debugging
+</A
+></DT
+></DL
+></TD
+></TR
+></TABLE
+></TD
+></TR
+><TR
+><TD CLASS="s15"
+></TD
+></TR
+><TR
+><TD CLASS="s15"
+></TD
+></TR
+><TR
+><TD CLASS="section1"
+>Synopsis</TD
+></TR
+><TR
+><TD CLASS="s15"
+></TD
+></TR
+><TR
+><TD CLASS="body"
+><TABLE CLASS="vanilla" CELLSPACING="0" CELLPADDING="0"
+><TR
+><TD CLASS="decl"
+><SPAN CLASS="keyword"
+>class</SPAN
+>  <A HREF="#t%3AUS"
+>US</A
+> a  <SPAN CLASS="keyword"
+>where</SPAN
+></TD
+></TR
+><TR
+><TD CLASS="body"
+><TABLE CLASS="vanilla" CELLSPACING="0" CELLPADDING="0"
+><TR
+><TD CLASS="decl"
+><SPAN CLASS="keyword"
+>data</SPAN
+> <A HREF="#t%3AUSet"
+>USet</A
+> a </TD
+></TR
+><TR
+><TD CLASS="decl"
+><A HREF="#v%3Asize"
+>size</A
+> :: <A HREF="Data-Set-Unboxed.html#t%3AUSet"
+>USet</A
+> a -&gt; Size</TD
+></TR
+><TR
+><TD CLASS="decl"
+><A HREF="#v%3Anull"
+>null</A
+> :: <A HREF="Data-Set-Unboxed.html#t%3AUSet"
+>USet</A
+> a -&gt; <A HREF="/usr/local/share/doc/ghc/libraries/ghc-prim/GHC-Bool.html#t%3ABool"
+>Bool</A
+></TD
+></TR
+></TABLE
+></TD
+></TR
+><TR
+><TD CLASS="s8"
+></TD
+></TR
+><TR
+><TD CLASS="decl"
+><SPAN CLASS="keyword"
+>newtype</SPAN
+>  <A HREF="#t%3ABoxed"
+>Boxed</A
+> a = <A HREF="#v%3ABoxed"
+>Boxed</A
+> a</TD
+></TR
+><TR
+><TD CLASS="s8"
+></TD
+></TR
+><TR
+><TD CLASS="decl"
+><A HREF="#v%3A%5C%5C"
+>(\\)</A
+> :: (<A HREF="Data-Set-Unboxed.html#t%3AUS"
+>US</A
+> a, <A HREF="/usr/local/share/doc/ghc/libraries/base/Data-Ord.html#t%3AOrd"
+>Ord</A
+> a) =&gt; <A HREF="Data-Set-Unboxed.html#t%3AUSet"
+>USet</A
+> a -&gt; <A HREF="Data-Set-Unboxed.html#t%3AUSet"
+>USet</A
+> a -&gt; <A HREF="Data-Set-Unboxed.html#t%3AUSet"
+>USet</A
+> a</TD
+></TR
+><TR
+><TD CLASS="s8"
+></TD
+></TR
+><TR
+><TD CLASS="decl"
+><A HREF="#v%3Anull"
+>null</A
+> :: <A HREF="Data-Set-Unboxed.html#t%3AUS"
+>US</A
+> a =&gt; <A HREF="Data-Set-Unboxed.html#t%3AUSet"
+>USet</A
+> a -&gt; <A HREF="/usr/local/share/doc/ghc/libraries/ghc-prim/GHC-Bool.html#t%3ABool"
+>Bool</A
+></TD
+></TR
+><TR
+><TD CLASS="s8"
+></TD
+></TR
+><TR
+><TD CLASS="decl"
+><A HREF="#v%3Asize"
+>size</A
+> :: <A HREF="Data-Set-Unboxed.html#t%3AUS"
+>US</A
+> a =&gt; <A HREF="Data-Set-Unboxed.html#t%3AUSet"
+>USet</A
+> a -&gt; Size</TD
+></TR
+><TR
+><TD CLASS="s8"
+></TD
+></TR
+><TR
+><TD CLASS="decl"
+><A HREF="#v%3Amember"
+>member</A
+> :: (<A HREF="Data-Set-Unboxed.html#t%3AUS"
+>US</A
+> a, <A HREF="/usr/local/share/doc/ghc/libraries/base/Data-Ord.html#t%3AOrd"
+>Ord</A
+> a) =&gt; a -&gt; <A HREF="Data-Set-Unboxed.html#t%3AUSet"
+>USet</A
+> a -&gt; <A HREF="/usr/local/share/doc/ghc/libraries/ghc-prim/GHC-Bool.html#t%3ABool"
+>Bool</A
+></TD
+></TR
+><TR
+><TD CLASS="s8"
+></TD
+></TR
+><TR
+><TD CLASS="decl"
+><A HREF="#v%3AnotMember"
+>notMember</A
+> :: (<A HREF="Data-Set-Unboxed.html#t%3AUS"
+>US</A
+> a, <A HREF="/usr/local/share/doc/ghc/libraries/base/Data-Ord.html#t%3AOrd"
+>Ord</A
+> a) =&gt; a -&gt; <A HREF="Data-Set-Unboxed.html#t%3AUSet"
+>USet</A
+> a -&gt; <A HREF="/usr/local/share/doc/ghc/libraries/ghc-prim/GHC-Bool.html#t%3ABool"
+>Bool</A
+></TD
+></TR
+><TR
+><TD CLASS="s8"
+></TD
+></TR
+><TR
+><TD CLASS="decl"
+><A HREF="#v%3AisSubsetOf"
+>isSubsetOf</A
+> :: (<A HREF="Data-Set-Unboxed.html#t%3AUS"
+>US</A
+> a, <A HREF="/usr/local/share/doc/ghc/libraries/base/Data-Ord.html#t%3AOrd"
+>Ord</A
+> a) =&gt; <A HREF="Data-Set-Unboxed.html#t%3AUSet"
+>USet</A
+> a -&gt; <A HREF="Data-Set-Unboxed.html#t%3AUSet"
+>USet</A
+> a -&gt; <A HREF="/usr/local/share/doc/ghc/libraries/ghc-prim/GHC-Bool.html#t%3ABool"
+>Bool</A
+></TD
+></TR
+><TR
+><TD CLASS="s8"
+></TD
+></TR
+><TR
+><TD CLASS="decl"
+><A HREF="#v%3AisProperSubsetOf"
+>isProperSubsetOf</A
+> :: (<A HREF="Data-Set-Unboxed.html#t%3AUS"
+>US</A
+> a, <A HREF="/usr/local/share/doc/ghc/libraries/base/Data-Ord.html#t%3AOrd"
+>Ord</A
+> a) =&gt; <A HREF="Data-Set-Unboxed.html#t%3AUSet"
+>USet</A
+> a -&gt; <A HREF="Data-Set-Unboxed.html#t%3AUSet"
+>USet</A
+> a -&gt; <A HREF="/usr/local/share/doc/ghc/libraries/ghc-prim/GHC-Bool.html#t%3ABool"
+>Bool</A
+></TD
+></TR
+><TR
+><TD CLASS="s8"
+></TD
+></TR
+><TR
+><TD CLASS="decl"
+><A HREF="#v%3Aempty"
+>empty</A
+> :: <A HREF="Data-Set-Unboxed.html#t%3AUS"
+>US</A
+> a =&gt; <A HREF="Data-Set-Unboxed.html#t%3AUSet"
+>USet</A
+> a</TD
+></TR
+><TR
+><TD CLASS="s8"
+></TD
+></TR
+><TR
+><TD CLASS="decl"
+><A HREF="#v%3Asingleton"
+>singleton</A
+> :: <A HREF="Data-Set-Unboxed.html#t%3AUS"
+>US</A
+> a =&gt; a -&gt; <A HREF="Data-Set-Unboxed.html#t%3AUSet"
+>USet</A
+> a</TD
+></TR
+><TR
+><TD CLASS="s8"
+></TD
+></TR
+><TR
+><TD CLASS="decl"
+><A HREF="#v%3Ainsert"
+>insert</A
+> :: (<A HREF="Data-Set-Unboxed.html#t%3AUS"
+>US</A
+> a, <A HREF="/usr/local/share/doc/ghc/libraries/base/Data-Ord.html#t%3AOrd"
+>Ord</A
+> a) =&gt; a -&gt; <A HREF="Data-Set-Unboxed.html#t%3AUSet"
+>USet</A
+> a -&gt; <A HREF="Data-Set-Unboxed.html#t%3AUSet"
+>USet</A
+> a</TD
+></TR
+><TR
+><TD CLASS="s8"
+></TD
+></TR
+><TR
+><TD CLASS="decl"
+><A HREF="#v%3Adelete"
+>delete</A
+> :: (<A HREF="Data-Set-Unboxed.html#t%3AUS"
+>US</A
+> a, <A HREF="/usr/local/share/doc/ghc/libraries/base/Data-Ord.html#t%3AOrd"
+>Ord</A
+> a) =&gt; a -&gt; <A HREF="Data-Set-Unboxed.html#t%3AUSet"
+>USet</A
+> a -&gt; <A HREF="Data-Set-Unboxed.html#t%3AUSet"
+>USet</A
+> a</TD
+></TR
+><TR
+><TD CLASS="s8"
+></TD
+></TR
+><TR
+><TD CLASS="decl"
+><A HREF="#v%3Aunion"
+>union</A
+> :: (<A HREF="Data-Set-Unboxed.html#t%3AUS"
+>US</A
+> a, <A HREF="/usr/local/share/doc/ghc/libraries/base/Data-Ord.html#t%3AOrd"
+>Ord</A
+> a) =&gt; <A HREF="Data-Set-Unboxed.html#t%3AUSet"
+>USet</A
+> a -&gt; <A HREF="Data-Set-Unboxed.html#t%3AUSet"
+>USet</A
+> a -&gt; <A HREF="Data-Set-Unboxed.html#t%3AUSet"
+>USet</A
+> a</TD
+></TR
+><TR
+><TD CLASS="s8"
+></TD
+></TR
+><TR
+><TD CLASS="decl"
+><A HREF="#v%3Aunions"
+>unions</A
+> :: (<A HREF="Data-Set-Unboxed.html#t%3AUS"
+>US</A
+> a, <A HREF="/usr/local/share/doc/ghc/libraries/base/Data-Ord.html#t%3AOrd"
+>Ord</A
+> a) =&gt; [<A HREF="Data-Set-Unboxed.html#t%3AUSet"
+>USet</A
+> a] -&gt; <A HREF="Data-Set-Unboxed.html#t%3AUSet"
+>USet</A
+> a</TD
+></TR
+><TR
+><TD CLASS="s8"
+></TD
+></TR
+><TR
+><TD CLASS="decl"
+><A HREF="#v%3Adifference"
+>difference</A
+> :: (<A HREF="Data-Set-Unboxed.html#t%3AUS"
+>US</A
+> a, <A HREF="/usr/local/share/doc/ghc/libraries/base/Data-Ord.html#t%3AOrd"
+>Ord</A
+> a) =&gt; <A HREF="Data-Set-Unboxed.html#t%3AUSet"
+>USet</A
+> a -&gt; <A HREF="Data-Set-Unboxed.html#t%3AUSet"
+>USet</A
+> a -&gt; <A HREF="Data-Set-Unboxed.html#t%3AUSet"
+>USet</A
+> a</TD
+></TR
+><TR
+><TD CLASS="s8"
+></TD
+></TR
+><TR
+><TD CLASS="decl"
+><A HREF="#v%3Aintersection"
+>intersection</A
+> :: (<A HREF="Data-Set-Unboxed.html#t%3AUS"
+>US</A
+> a, <A HREF="/usr/local/share/doc/ghc/libraries/base/Data-Ord.html#t%3AOrd"
+>Ord</A
+> a) =&gt; <A HREF="Data-Set-Unboxed.html#t%3AUSet"
+>USet</A
+> a -&gt; <A HREF="Data-Set-Unboxed.html#t%3AUSet"
+>USet</A
+> a -&gt; <A HREF="Data-Set-Unboxed.html#t%3AUSet"
+>USet</A
+> a</TD
+></TR
+><TR
+><TD CLASS="s8"
+></TD
+></TR
+><TR
+><TD CLASS="decl"
+><A HREF="#v%3Afilter"
+>filter</A
+> :: (<A HREF="Data-Set-Unboxed.html#t%3AUS"
+>US</A
+> a, <A HREF="/usr/local/share/doc/ghc/libraries/base/Data-Ord.html#t%3AOrd"
+>Ord</A
+> a) =&gt; (a -&gt; <A HREF="/usr/local/share/doc/ghc/libraries/ghc-prim/GHC-Bool.html#t%3ABool"
+>Bool</A
+>) -&gt; <A HREF="Data-Set-Unboxed.html#t%3AUSet"
+>USet</A
+> a -&gt; <A HREF="Data-Set-Unboxed.html#t%3AUSet"
+>USet</A
+> a</TD
+></TR
+><TR
+><TD CLASS="s8"
+></TD
+></TR
+><TR
+><TD CLASS="decl"
+><A HREF="#v%3Apartition"
+>partition</A
+> :: (<A HREF="Data-Set-Unboxed.html#t%3AUS"
+>US</A
+> a, <A HREF="/usr/local/share/doc/ghc/libraries/base/Data-Ord.html#t%3AOrd"
+>Ord</A
+> a) =&gt; (a -&gt; <A HREF="/usr/local/share/doc/ghc/libraries/ghc-prim/GHC-Bool.html#t%3ABool"
+>Bool</A
+>) -&gt; <A HREF="Data-Set-Unboxed.html#t%3AUSet"
+>USet</A
+> a -&gt; (<A HREF="Data-Set-Unboxed.html#t%3AUSet"
+>USet</A
+> a, <A HREF="Data-Set-Unboxed.html#t%3AUSet"
+>USet</A
+> a)</TD
+></TR
+><TR
+><TD CLASS="s8"
+></TD
+></TR
+><TR
+><TD CLASS="decl"
+><A HREF="#v%3Asplit"
+>split</A
+> :: (<A HREF="Data-Set-Unboxed.html#t%3AUS"
+>US</A
+> a, <A HREF="/usr/local/share/doc/ghc/libraries/base/Data-Ord.html#t%3AOrd"
+>Ord</A
+> a) =&gt; a -&gt; <A HREF="Data-Set-Unboxed.html#t%3AUSet"
+>USet</A
+> a -&gt; (<A HREF="Data-Set-Unboxed.html#t%3AUSet"
+>USet</A
+> a, <A HREF="Data-Set-Unboxed.html#t%3AUSet"
+>USet</A
+> a)</TD
+></TR
+><TR
+><TD CLASS="s8"
+></TD
+></TR
+><TR
+><TD CLASS="decl"
+><A HREF="#v%3AsplitMember"
+>splitMember</A
+> :: (<A HREF="Data-Set-Unboxed.html#t%3AUS"
+>US</A
+> a, <A HREF="/usr/local/share/doc/ghc/libraries/base/Data-Ord.html#t%3AOrd"
+>Ord</A
+> a) =&gt; a -&gt; <A HREF="Data-Set-Unboxed.html#t%3AUSet"
+>USet</A
+> a -&gt; (<A HREF="Data-Set-Unboxed.html#t%3AUSet"
+>USet</A
+> a, <A HREF="/usr/local/share/doc/ghc/libraries/ghc-prim/GHC-Bool.html#t%3ABool"
+>Bool</A
+>, <A HREF="Data-Set-Unboxed.html#t%3AUSet"
+>USet</A
+> a)</TD
+></TR
+><TR
+><TD CLASS="s8"
+></TD
+></TR
+><TR
+><TD CLASS="decl"
+><A HREF="#v%3Amap"
+>map</A
+> :: (<A HREF="Data-Set-Unboxed.html#t%3AUS"
+>US</A
+> a, <A HREF="Data-Set-Unboxed.html#t%3AUS"
+>US</A
+> b, <A HREF="/usr/local/share/doc/ghc/libraries/base/Data-Ord.html#t%3AOrd"
+>Ord</A
+> a, <A HREF="/usr/local/share/doc/ghc/libraries/base/Data-Ord.html#t%3AOrd"
+>Ord</A
+> b) =&gt; (a -&gt; b) -&gt; <A HREF="Data-Set-Unboxed.html#t%3AUSet"
+>USet</A
+> a -&gt; <A HREF="Data-Set-Unboxed.html#t%3AUSet"
+>USet</A
+> b</TD
+></TR
+><TR
+><TD CLASS="s8"
+></TD
+></TR
+><TR
+><TD CLASS="decl"
+><A HREF="#v%3AmapMonotonic"
+>mapMonotonic</A
+> :: (<A HREF="Data-Set-Unboxed.html#t%3AUS"
+>US</A
+> a, <A HREF="Data-Set-Unboxed.html#t%3AUS"
+>US</A
+> b) =&gt; (a -&gt; b) -&gt; <A HREF="Data-Set-Unboxed.html#t%3AUSet"
+>USet</A
+> a -&gt; <A HREF="Data-Set-Unboxed.html#t%3AUSet"
+>USet</A
+> b</TD
+></TR
+><TR
+><TD CLASS="s8"
+></TD
+></TR
+><TR
+><TD CLASS="decl"
+><A HREF="#v%3Afold"
+>fold</A
+> :: <A HREF="Data-Set-Unboxed.html#t%3AUS"
+>US</A
+> a =&gt; (a -&gt; b -&gt; b) -&gt; b -&gt; <A HREF="Data-Set-Unboxed.html#t%3AUSet"
+>USet</A
+> a -&gt; b</TD
+></TR
+><TR
+><TD CLASS="s8"
+></TD
+></TR
+><TR
+><TD CLASS="decl"
+><A HREF="#v%3AfindMin"
+>findMin</A
+> :: <A HREF="Data-Set-Unboxed.html#t%3AUS"
+>US</A
+> a =&gt; <A HREF="Data-Set-Unboxed.html#t%3AUSet"
+>USet</A
+> a -&gt; a</TD
+></TR
+><TR
+><TD CLASS="s8"
+></TD
+></TR
+><TR
+><TD CLASS="decl"
+><A HREF="#v%3AfindMax"
+>findMax</A
+> :: <A HREF="Data-Set-Unboxed.html#t%3AUS"
+>US</A
+> a =&gt; <A HREF="Data-Set-Unboxed.html#t%3AUSet"
+>USet</A
+> a -&gt; a</TD
+></TR
+><TR
+><TD CLASS="s8"
+></TD
+></TR
+><TR
+><TD CLASS="decl"
+><A HREF="#v%3AdeleteMin"
+>deleteMin</A
+> :: <A HREF="Data-Set-Unboxed.html#t%3AUS"
+>US</A
+> a =&gt; <A HREF="Data-Set-Unboxed.html#t%3AUSet"
+>USet</A
+> a -&gt; <A HREF="Data-Set-Unboxed.html#t%3AUSet"
+>USet</A
+> a</TD
+></TR
+><TR
+><TD CLASS="s8"
+></TD
+></TR
+><TR
+><TD CLASS="decl"
+><A HREF="#v%3AdeleteMax"
+>deleteMax</A
+> :: <A HREF="Data-Set-Unboxed.html#t%3AUS"
+>US</A
+> a =&gt; <A HREF="Data-Set-Unboxed.html#t%3AUSet"
+>USet</A
+> a -&gt; <A HREF="Data-Set-Unboxed.html#t%3AUSet"
+>USet</A
+> a</TD
+></TR
+><TR
+><TD CLASS="s8"
+></TD
+></TR
+><TR
+><TD CLASS="decl"
+><A HREF="#v%3AdeleteFindMin"
+>deleteFindMin</A
+> :: <A HREF="Data-Set-Unboxed.html#t%3AUS"
+>US</A
+> a =&gt; <A HREF="Data-Set-Unboxed.html#t%3AUSet"
+>USet</A
+> a -&gt; (a, <A HREF="Data-Set-Unboxed.html#t%3AUSet"
+>USet</A
+> a)</TD
+></TR
+><TR
+><TD CLASS="s8"
+></TD
+></TR
+><TR
+><TD CLASS="decl"
+><A HREF="#v%3AdeleteFindMax"
+>deleteFindMax</A
+> :: <A HREF="Data-Set-Unboxed.html#t%3AUS"
+>US</A
+> a =&gt; <A HREF="Data-Set-Unboxed.html#t%3AUSet"
+>USet</A
+> a -&gt; (a, <A HREF="Data-Set-Unboxed.html#t%3AUSet"
+>USet</A
+> a)</TD
+></TR
+><TR
+><TD CLASS="s8"
+></TD
+></TR
+><TR
+><TD CLASS="decl"
+><A HREF="#v%3AmaxView"
+>maxView</A
+> :: <A HREF="Data-Set-Unboxed.html#t%3AUS"
+>US</A
+> a =&gt; <A HREF="Data-Set-Unboxed.html#t%3AUSet"
+>USet</A
+> a -&gt; <A HREF="/usr/local/share/doc/ghc/libraries/base/Data-Maybe.html#t%3AMaybe"
+>Maybe</A
+> (a, <A HREF="Data-Set-Unboxed.html#t%3AUSet"
+>USet</A
+> a)</TD
+></TR
+><TR
+><TD CLASS="s8"
+></TD
+></TR
+><TR
+><TD CLASS="decl"
+><A HREF="#v%3AminView"
+>minView</A
+> :: <A HREF="Data-Set-Unboxed.html#t%3AUS"
+>US</A
+> a =&gt; <A HREF="Data-Set-Unboxed.html#t%3AUSet"
+>USet</A
+> a -&gt; <A HREF="/usr/local/share/doc/ghc/libraries/base/Data-Maybe.html#t%3AMaybe"
+>Maybe</A
+> (a, <A HREF="Data-Set-Unboxed.html#t%3AUSet"
+>USet</A
+> a)</TD
+></TR
+><TR
+><TD CLASS="s8"
+></TD
+></TR
+><TR
+><TD CLASS="decl"
+><A HREF="#v%3Aelems"
+>elems</A
+> :: <A HREF="Data-Set-Unboxed.html#t%3AUS"
+>US</A
+> a =&gt; <A HREF="Data-Set-Unboxed.html#t%3AUSet"
+>USet</A
+> a -&gt; [a]</TD
+></TR
+><TR
+><TD CLASS="s8"
+></TD
+></TR
+><TR
+><TD CLASS="decl"
+><A HREF="#v%3AtoList"
+>toList</A
+> :: <A HREF="Data-Set-Unboxed.html#t%3AUS"
+>US</A
+> a =&gt; <A HREF="Data-Set-Unboxed.html#t%3AUSet"
+>USet</A
+> a -&gt; [a]</TD
+></TR
+><TR
+><TD CLASS="s8"
+></TD
+></TR
+><TR
+><TD CLASS="decl"
+><A HREF="#v%3AfromList"
+>fromList</A
+> :: (<A HREF="Data-Set-Unboxed.html#t%3AUS"
+>US</A
+> a, <A HREF="/usr/local/share/doc/ghc/libraries/base/Data-Ord.html#t%3AOrd"
+>Ord</A
+> a) =&gt; [a] -&gt; <A HREF="Data-Set-Unboxed.html#t%3AUSet"
+>USet</A
+> a</TD
+></TR
+><TR
+><TD CLASS="s8"
+></TD
+></TR
+><TR
+><TD CLASS="decl"
+><A HREF="#v%3AtoAscList"
+>toAscList</A
+> :: <A HREF="Data-Set-Unboxed.html#t%3AUS"
+>US</A
+> a =&gt; <A HREF="Data-Set-Unboxed.html#t%3AUSet"
+>USet</A
+> a -&gt; [a]</TD
+></TR
+><TR
+><TD CLASS="s8"
+></TD
+></TR
+><TR
+><TD CLASS="decl"
+><A HREF="#v%3AfromAscList"
+>fromAscList</A
+> :: (<A HREF="Data-Set-Unboxed.html#t%3AUS"
+>US</A
+> a, <A HREF="/usr/local/share/doc/ghc/libraries/base/Data-Eq.html#t%3AEq"
+>Eq</A
+> a) =&gt; [a] -&gt; <A HREF="Data-Set-Unboxed.html#t%3AUSet"
+>USet</A
+> a</TD
+></TR
+><TR
+><TD CLASS="s8"
+></TD
+></TR
+><TR
+><TD CLASS="decl"
+><A HREF="#v%3AfromDistinctAscList"
+>fromDistinctAscList</A
+> :: <A HREF="Data-Set-Unboxed.html#t%3AUS"
+>US</A
+> a =&gt; [a] -&gt; <A HREF="Data-Set-Unboxed.html#t%3AUSet"
+>USet</A
+> a</TD
+></TR
+><TR
+><TD CLASS="s8"
+></TD
+></TR
+><TR
+><TD CLASS="decl"
+><A HREF="#v%3AshowTree"
+>showTree</A
+> :: (<A HREF="Data-Set-Unboxed.html#t%3AUS"
+>US</A
+> a, <A HREF="/usr/local/share/doc/ghc/libraries/base/Text-Show.html#t%3AShow"
+>Show</A
+> a) =&gt; <A HREF="Data-Set-Unboxed.html#t%3AUSet"
+>USet</A
+> a -&gt; <A HREF="/usr/local/share/doc/ghc/libraries/base/Data-Char.html#t%3AString"
+>String</A
+></TD
+></TR
+><TR
+><TD CLASS="s8"
+></TD
+></TR
+><TR
+><TD CLASS="decl"
+><A HREF="#v%3AshowTreeWith"
+>showTreeWith</A
+> :: (<A HREF="Data-Set-Unboxed.html#t%3AUS"
+>US</A
+> a, <A HREF="/usr/local/share/doc/ghc/libraries/base/Text-Show.html#t%3AShow"
+>Show</A
+> a) =&gt; <A HREF="/usr/local/share/doc/ghc/libraries/ghc-prim/GHC-Bool.html#t%3ABool"
+>Bool</A
+> -&gt; <A HREF="/usr/local/share/doc/ghc/libraries/ghc-prim/GHC-Bool.html#t%3ABool"
+>Bool</A
+> -&gt; <A HREF="Data-Set-Unboxed.html#t%3AUSet"
+>USet</A
+> a -&gt; <A HREF="/usr/local/share/doc/ghc/libraries/base/Data-Char.html#t%3AString"
+>String</A
+></TD
+></TR
+><TR
+><TD CLASS="s8"
+></TD
+></TR
+><TR
+><TD CLASS="decl"
+><A HREF="#v%3Avalid"
+>valid</A
+> :: (<A HREF="Data-Set-Unboxed.html#t%3AUS"
+>US</A
+> a, <A HREF="/usr/local/share/doc/ghc/libraries/base/Data-Ord.html#t%3AOrd"
+>Ord</A
+> a) =&gt; <A HREF="Data-Set-Unboxed.html#t%3AUSet"
+>USet</A
+> a -&gt; <A HREF="/usr/local/share/doc/ghc/libraries/ghc-prim/GHC-Bool.html#t%3ABool"
+>Bool</A
+></TD
+></TR
+></TABLE
+></TD
+></TR
+><TR
+><TD CLASS="s15"
+></TD
+></TR
+><TR
+><TD CLASS="s15"
+></TD
+></TR
+><TR
+><TD CLASS="section1"
+><A NAME="1"
+>Set type
+</A
+></TD
+></TR
+><TR
+><TD CLASS="s15"
+></TD
+></TR
+><TR
+><TD CLASS="topdecl"
+><TABLE CLASS="declbar"
+><TR
+><TD CLASS="declname"
+><SPAN CLASS="keyword"
+>class</SPAN
+>  <A NAME="t%3AUS"
+></A
+><B
+>US</B
+> a  <SPAN CLASS="keyword"
+>where</SPAN
+></TD
+><TD CLASS="declbut"
+><A HREF="src/Data-Set-Unboxed.html#US"
+>Source</A
+></TD
+></TR
+></TABLE
+></TD
+></TR
+><TR
+><TD CLASS="body"
+><TABLE CLASS="vanilla" CELLSPACING="0" CELLPADDING="0"
+><TR
+><TD CLASS="s8"
+></TD
+></TR
+><TR
+><TD CLASS="section4"
+>Associated Types</TD
+></TR
+><TR
+><TD CLASS="body"
+><TABLE CLASS="vanilla" CELLSPACING="0" CELLPADDING="0"
+><TR
+><TD CLASS="topdecl"
+><TABLE CLASS="declbar"
+><TR
+><TD CLASS="declname"
+><SPAN CLASS="keyword"
+>data</SPAN
+> <A NAME="t%3AUSet"
+></A
+><B
+>USet</B
+> a </TD
+><TD CLASS="declbut"
+><A HREF="src/Data-Set-Unboxed.html#USet"
+>Source</A
+></TD
+></TR
+></TABLE
+></TD
+></TR
+></TABLE
+></TD
+></TR
+><TR
+><TD CLASS="s8"
+></TD
+></TR
+><TR
+><TD CLASS="section4"
+>Methods</TD
+></TR
+><TR
+><TD CLASS="body"
+><TABLE CLASS="vanilla" CELLSPACING="0" CELLPADDING="0"
+><TR
+><TD CLASS="topdecl"
+><TABLE CLASS="declbar"
+><TR
+><TD CLASS="declname"
+><A NAME="v%3Asize"
+></A
+><B
+>size</B
+> :: <A HREF="Data-Set-Unboxed.html#t%3AUSet"
+>USet</A
+> a -&gt; Size</TD
+><TD CLASS="declbut"
+><A HREF="src/Data-Set-Unboxed.html#size"
+>Source</A
+></TD
+></TR
+></TABLE
+></TD
+></TR
+><TR
+><TD CLASS="doc"
+><EM
+>O(1)</EM
+>. The number of elements in the set.
+</TD
+></TR
+><TR
+><TD CLASS="s8"
+></TD
+></TR
+><TR
+><TD CLASS="topdecl"
+><TABLE CLASS="declbar"
+><TR
+><TD CLASS="declname"
+><A NAME="v%3Anull"
+></A
+><B
+>null</B
+> :: <A HREF="Data-Set-Unboxed.html#t%3AUSet"
+>USet</A
+> a -&gt; <A HREF="/usr/local/share/doc/ghc/libraries/ghc-prim/GHC-Bool.html#t%3ABool"
+>Bool</A
+></TD
+><TD CLASS="declbut"
+><A HREF="src/Data-Set-Unboxed.html#null"
+>Source</A
+></TD
+></TR
+></TABLE
+></TD
+></TR
+><TR
+><TD CLASS="doc"
+><EM
+>O(1)</EM
+>. Is this the empty set?
+</TD
+></TR
+></TABLE
+></TD
+></TR
+><TR
+><TD CLASS="s8"
+></TD
+></TR
+><TR
+><TD CLASS="section4"
+><IMG SRC="minus.gif" CLASS="coll" ONCLICK="toggle(this,'i:US')" ALT="show/hide"
+> Instances</TD
+></TR
+><TR
+><TD CLASS="body"
+><DIV ID="i:US" STYLE="display:block;"
+><TABLE CLASS="vanilla" CELLSPACING="1" CELLPADDING="0"
+><TR
+><TD CLASS="decl"
+><A HREF="Data-Set-Unboxed.html#t%3AUS"
+>US</A
+> <A HREF="/usr/local/share/doc/ghc/libraries/ghc-prim/GHC-Types.html#t%3AChar"
+>Char</A
+></TD
+></TR
+><TR
+><TD CLASS="decl"
+><A HREF="Data-Set-Unboxed.html#t%3AUS"
+>US</A
+> <A HREF="/usr/local/share/doc/ghc/libraries/ghc-prim/GHC-Types.html#t%3ADouble"
+>Double</A
+></TD
+></TR
+><TR
+><TD CLASS="decl"
+><A HREF="Data-Set-Unboxed.html#t%3AUS"
+>US</A
+> <A HREF="/usr/local/share/doc/ghc/libraries/ghc-prim/GHC-Types.html#t%3AFloat"
+>Float</A
+></TD
+></TR
+><TR
+><TD CLASS="decl"
+><A HREF="Data-Set-Unboxed.html#t%3AUS"
+>US</A
+> <A HREF="/usr/local/share/doc/ghc/libraries/ghc-prim/GHC-Types.html#t%3AInt"
+>Int</A
+></TD
+></TR
+><TR
+><TD CLASS="decl"
+><A HREF="Data-Set-Unboxed.html#t%3AUS"
+>US</A
+> <A HREF="/usr/local/share/doc/ghc/libraries/base/Data-Int.html#t%3AInt8"
+>Int8</A
+></TD
+></TR
+><TR
+><TD CLASS="decl"
+><A HREF="Data-Set-Unboxed.html#t%3AUS"
+>US</A
+> <A HREF="/usr/local/share/doc/ghc/libraries/base/Data-Int.html#t%3AInt16"
+>Int16</A
+></TD
+></TR
+><TR
+><TD CLASS="decl"
+><A HREF="Data-Set-Unboxed.html#t%3AUS"
+>US</A
+> <A HREF="/usr/local/share/doc/ghc/libraries/base/Data-Int.html#t%3AInt32"
+>Int32</A
+></TD
+></TR
+><TR
+><TD CLASS="decl"
+><A HREF="Data-Set-Unboxed.html#t%3AUS"
+>US</A
+> <A HREF="/usr/local/share/doc/ghc/libraries/base/Data-Int.html#t%3AInt64"
+>Int64</A
+></TD
+></TR
+><TR
+><TD CLASS="decl"
+><A HREF="Data-Set-Unboxed.html#t%3AUS"
+>US</A
+> Integer</TD
+></TR
+><TR
+><TD CLASS="decl"
+><A HREF="Data-Set-Unboxed.html#t%3AUS"
+>US</A
+> <A HREF="/usr/local/share/doc/ghc/libraries/base/Data-Word.html#t%3AWord8"
+>Word8</A
+></TD
+></TR
+><TR
+><TD CLASS="decl"
+><A HREF="Data-Set-Unboxed.html#t%3AUS"
+>US</A
+> <A HREF="/usr/local/share/doc/ghc/libraries/base/Data-Word.html#t%3AWord16"
+>Word16</A
+></TD
+></TR
+><TR
+><TD CLASS="decl"
+><A HREF="Data-Set-Unboxed.html#t%3AUS"
+>US</A
+> <A HREF="/usr/local/share/doc/ghc/libraries/base/Data-Word.html#t%3AWord32"
+>Word32</A
+></TD
+></TR
+><TR
+><TD CLASS="decl"
+><A HREF="Data-Set-Unboxed.html#t%3AUS"
+>US</A
+> <A HREF="/usr/local/share/doc/ghc/libraries/base/Data-Word.html#t%3AWord64"
+>Word64</A
+></TD
+></TR
+><TR
+><TD CLASS="decl"
+><A HREF="Data-Set-Unboxed.html#t%3AUS"
+>US</A
+> (<A HREF="Data-Set-Unboxed.html#t%3ABoxed"
+>Boxed</A
+> a)</TD
+></TR
+></TABLE
+></DIV
+></TD
+></TR
+></TABLE
+></TD
+></TR
+><TR
+><TD CLASS="s15"
+></TD
+></TR
+><TR
+><TD CLASS="topdecl"
+><TABLE CLASS="declbar"
+><TR
+><TD CLASS="declname"
+><SPAN CLASS="keyword"
+>newtype</SPAN
+>  <A NAME="t%3ABoxed"
+></A
+><B
+>Boxed</B
+> a </TD
+><TD CLASS="declbut"
+><A HREF="src/Data-Set-Unboxed.html#Boxed"
+>Source</A
+></TD
+></TR
+></TABLE
+></TD
+></TR
+><TR
+><TD CLASS="body"
+><TABLE CLASS="vanilla" CELLSPACING="0" CELLPADDING="0"
+><TR
+><TD CLASS="section4"
+>Constructors</TD
+></TR
+><TR
+><TD CLASS="body"
+><TABLE CLASS="vanilla" CELLSPACING="1" CELLPADDING="0"
+><TR
+><TD CLASS="arg"
+><A NAME="v%3ABoxed"
+></A
+><B
+>Boxed</B
+> a</TD
+><TD CLASS="rdoc"
+></TD
+></TR
+></TABLE
+></TD
+></TR
+><TR
+><TD CLASS="section4"
+><IMG SRC="minus.gif" CLASS="coll" ONCLICK="toggle(this,'i:Boxed')" ALT="show/hide"
+> Instances</TD
+></TR
+><TR
+><TD CLASS="body"
+><DIV ID="i:Boxed" STYLE="display:block;"
+><TABLE CLASS="vanilla" CELLSPACING="1" CELLPADDING="0"
+><TR
+><TD CLASS="decl"
+><A HREF="/usr/local/share/doc/ghc/libraries/base/Prelude.html#t%3ABounded"
+>Bounded</A
+> a =&gt; <A HREF="/usr/local/share/doc/ghc/libraries/base/Prelude.html#t%3ABounded"
+>Bounded</A
+> (<A HREF="Data-Set-Unboxed.html#t%3ABoxed"
+>Boxed</A
+> a)</TD
+></TR
+><TR
+><TD CLASS="decl"
+><A HREF="/usr/local/share/doc/ghc/libraries/base/Data-Eq.html#t%3AEq"
+>Eq</A
+> a =&gt; <A HREF="/usr/local/share/doc/ghc/libraries/base/Data-Eq.html#t%3AEq"
+>Eq</A
+> (<A HREF="Data-Set-Unboxed.html#t%3ABoxed"
+>Boxed</A
+> a)</TD
+></TR
+><TR
+><TD CLASS="decl"
+><A HREF="/usr/local/share/doc/ghc/libraries/base/Data-Ord.html#t%3AOrd"
+>Ord</A
+> a =&gt; <A HREF="/usr/local/share/doc/ghc/libraries/base/Data-Ord.html#t%3AOrd"
+>Ord</A
+> (<A HREF="Data-Set-Unboxed.html#t%3ABoxed"
+>Boxed</A
+> a)</TD
+></TR
+><TR
+><TD CLASS="decl"
+><A HREF="/usr/local/share/doc/ghc/libraries/base/Text-Read.html#t%3ARead"
+>Read</A
+> a =&gt; <A HREF="/usr/local/share/doc/ghc/libraries/base/Text-Read.html#t%3ARead"
+>Read</A
+> (<A HREF="Data-Set-Unboxed.html#t%3ABoxed"
+>Boxed</A
+> a)</TD
+></TR
+><TR
+><TD CLASS="decl"
+><A HREF="/usr/local/share/doc/ghc/libraries/base/Text-Show.html#t%3AShow"
+>Show</A
+> a =&gt; <A HREF="/usr/local/share/doc/ghc/libraries/base/Text-Show.html#t%3AShow"
+>Show</A
+> (<A HREF="Data-Set-Unboxed.html#t%3ABoxed"
+>Boxed</A
+> a)</TD
+></TR
+><TR
+><TD CLASS="decl"
+><A HREF="Data-Set-Unboxed.html#t%3AUS"
+>US</A
+> (<A HREF="Data-Set-Unboxed.html#t%3ABoxed"
+>Boxed</A
+> a)</TD
+></TR
+></TABLE
+></DIV
+></TD
+></TR
+></TABLE
+></TD
+></TR
+><TR
+><TD CLASS="s15"
+></TD
+></TR
+><TR
+><TD CLASS="section1"
+><A NAME="2"
+>Operators
+</A
+></TD
+></TR
+><TR
+><TD CLASS="s15"
+></TD
+></TR
+><TR
+><TD CLASS="topdecl"
+><TABLE CLASS="declbar"
+><TR
+><TD CLASS="declname"
+><A NAME="v%3A%5C%5C"
+></A
+><B
+>(\\)</B
+> :: (<A HREF="Data-Set-Unboxed.html#t%3AUS"
+>US</A
+> a, <A HREF="/usr/local/share/doc/ghc/libraries/base/Data-Ord.html#t%3AOrd"
+>Ord</A
+> a) =&gt; <A HREF="Data-Set-Unboxed.html#t%3AUSet"
+>USet</A
+> a -&gt; <A HREF="Data-Set-Unboxed.html#t%3AUSet"
+>USet</A
+> a -&gt; <A HREF="Data-Set-Unboxed.html#t%3AUSet"
+>USet</A
+> a</TD
+><TD CLASS="declbut"
+><A HREF="src/Data-Set-Unboxed.html#%5C%5C"
+>Source</A
+></TD
+></TR
+></TABLE
+></TD
+></TR
+><TR
+><TD CLASS="doc"
+><EM
+>O(n+m)</EM
+>. See <TT
+><A HREF="Data-Set-Unboxed.html#v%3Adifference"
+>difference</A
+></TT
+>.
+</TD
+></TR
+><TR
+><TD CLASS="s15"
+></TD
+></TR
+><TR
+><TD CLASS="section1"
+><A NAME="3"
+>Query
+</A
+></TD
+></TR
+><TR
+><TD CLASS="s15"
+></TD
+></TR
+><TR
+><TD CLASS="topdecl"
+><TABLE CLASS="declbar"
+><TR
+><TD CLASS="declname"
+><A NAME="v%3Anull"
+></A
+><B
+>null</B
+> :: <A HREF="Data-Set-Unboxed.html#t%3AUS"
+>US</A
+> a =&gt; <A HREF="Data-Set-Unboxed.html#t%3AUSet"
+>USet</A
+> a -&gt; <A HREF="/usr/local/share/doc/ghc/libraries/ghc-prim/GHC-Bool.html#t%3ABool"
+>Bool</A
+></TD
+><TD CLASS="declbut"
+><A HREF="src/Data-Set-Unboxed.html#null"
+>Source</A
+></TD
+></TR
+></TABLE
+></TD
+></TR
+><TR
+><TD CLASS="doc"
+><EM
+>O(1)</EM
+>. Is this the empty set?
+</TD
+></TR
+><TR
+><TD CLASS="s15"
+></TD
+></TR
+><TR
+><TD CLASS="topdecl"
+><TABLE CLASS="declbar"
+><TR
+><TD CLASS="declname"
+><A NAME="v%3Asize"
+></A
+><B
+>size</B
+> :: <A HREF="Data-Set-Unboxed.html#t%3AUS"
+>US</A
+> a =&gt; <A HREF="Data-Set-Unboxed.html#t%3AUSet"
+>USet</A
+> a -&gt; Size</TD
+><TD CLASS="declbut"
+><A HREF="src/Data-Set-Unboxed.html#size"
+>Source</A
+></TD
+></TR
+></TABLE
+></TD
+></TR
+><TR
+><TD CLASS="doc"
+><EM
+>O(1)</EM
+>. The number of elements in the set.
+</TD
+></TR
+><TR
+><TD CLASS="s15"
+></TD
+></TR
+><TR
+><TD CLASS="topdecl"
+><TABLE CLASS="declbar"
+><TR
+><TD CLASS="declname"
+><A NAME="v%3Amember"
+></A
+><B
+>member</B
+> :: (<A HREF="Data-Set-Unboxed.html#t%3AUS"
+>US</A
+> a, <A HREF="/usr/local/share/doc/ghc/libraries/base/Data-Ord.html#t%3AOrd"
+>Ord</A
+> a) =&gt; a -&gt; <A HREF="Data-Set-Unboxed.html#t%3AUSet"
+>USet</A
+> a -&gt; <A HREF="/usr/local/share/doc/ghc/libraries/ghc-prim/GHC-Bool.html#t%3ABool"
+>Bool</A
+></TD
+><TD CLASS="declbut"
+><A HREF="src/Data-Set-Unboxed.html#member"
+>Source</A
+></TD
+></TR
+></TABLE
+></TD
+></TR
+><TR
+><TD CLASS="doc"
+><EM
+>O(log n)</EM
+>. Is the element in the set?
+</TD
+></TR
+><TR
+><TD CLASS="s15"
+></TD
+></TR
+><TR
+><TD CLASS="topdecl"
+><TABLE CLASS="declbar"
+><TR
+><TD CLASS="declname"
+><A NAME="v%3AnotMember"
+></A
+><B
+>notMember</B
+> :: (<A HREF="Data-Set-Unboxed.html#t%3AUS"
+>US</A
+> a, <A HREF="/usr/local/share/doc/ghc/libraries/base/Data-Ord.html#t%3AOrd"
+>Ord</A
+> a) =&gt; a -&gt; <A HREF="Data-Set-Unboxed.html#t%3AUSet"
+>USet</A
+> a -&gt; <A HREF="/usr/local/share/doc/ghc/libraries/ghc-prim/GHC-Bool.html#t%3ABool"
+>Bool</A
+></TD
+><TD CLASS="declbut"
+><A HREF="src/Data-Set-Unboxed.html#notMember"
+>Source</A
+></TD
+></TR
+></TABLE
+></TD
+></TR
+><TR
+><TD CLASS="doc"
+><EM
+>O(log n)</EM
+>. Is the element not in the set?
+</TD
+></TR
+><TR
+><TD CLASS="s15"
+></TD
+></TR
+><TR
+><TD CLASS="topdecl"
+><TABLE CLASS="declbar"
+><TR
+><TD CLASS="declname"
+><A NAME="v%3AisSubsetOf"
+></A
+><B
+>isSubsetOf</B
+> :: (<A HREF="Data-Set-Unboxed.html#t%3AUS"
+>US</A
+> a, <A HREF="/usr/local/share/doc/ghc/libraries/base/Data-Ord.html#t%3AOrd"
+>Ord</A
+> a) =&gt; <A HREF="Data-Set-Unboxed.html#t%3AUSet"
+>USet</A
+> a -&gt; <A HREF="Data-Set-Unboxed.html#t%3AUSet"
+>USet</A
+> a -&gt; <A HREF="/usr/local/share/doc/ghc/libraries/ghc-prim/GHC-Bool.html#t%3ABool"
+>Bool</A
+></TD
+><TD CLASS="declbut"
+><A HREF="src/Data-Set-Unboxed.html#isSubsetOf"
+>Source</A
+></TD
+></TR
+></TABLE
+></TD
+></TR
+><TR
+><TD CLASS="doc"
+><EM
+>O(n+m)</EM
+>. Is this a subset?
+ <TT
+>(s1 <TT
+><A HREF="Data-Set-Unboxed.html#v%3AisSubsetOf"
+>isSubsetOf</A
+></TT
+> s2)</TT
+> tells whether <TT
+>s1</TT
+> is a subset of <TT
+>s2</TT
+>.
+</TD
+></TR
+><TR
+><TD CLASS="s15"
+></TD
+></TR
+><TR
+><TD CLASS="topdecl"
+><TABLE CLASS="declbar"
+><TR
+><TD CLASS="declname"
+><A NAME="v%3AisProperSubsetOf"
+></A
+><B
+>isProperSubsetOf</B
+> :: (<A HREF="Data-Set-Unboxed.html#t%3AUS"
+>US</A
+> a, <A HREF="/usr/local/share/doc/ghc/libraries/base/Data-Ord.html#t%3AOrd"
+>Ord</A
+> a) =&gt; <A HREF="Data-Set-Unboxed.html#t%3AUSet"
+>USet</A
+> a -&gt; <A HREF="Data-Set-Unboxed.html#t%3AUSet"
+>USet</A
+> a -&gt; <A HREF="/usr/local/share/doc/ghc/libraries/ghc-prim/GHC-Bool.html#t%3ABool"
+>Bool</A
+></TD
+><TD CLASS="declbut"
+><A HREF="src/Data-Set-Unboxed.html#isProperSubsetOf"
+>Source</A
+></TD
+></TR
+></TABLE
+></TD
+></TR
+><TR
+><TD CLASS="doc"
+><EM
+>O(n+m)</EM
+>. Is this a proper subset? (ie. a subset but not equal).
+</TD
+></TR
+><TR
+><TD CLASS="s15"
+></TD
+></TR
+><TR
+><TD CLASS="section1"
+><A NAME="4"
+>Construction
+</A
+></TD
+></TR
+><TR
+><TD CLASS="s15"
+></TD
+></TR
+><TR
+><TD CLASS="topdecl"
+><TABLE CLASS="declbar"
+><TR
+><TD CLASS="declname"
+><A NAME="v%3Aempty"
+></A
+><B
+>empty</B
+> :: <A HREF="Data-Set-Unboxed.html#t%3AUS"
+>US</A
+> a =&gt; <A HREF="Data-Set-Unboxed.html#t%3AUSet"
+>USet</A
+> a</TD
+><TD CLASS="declbut"
+><A HREF="src/Data-Set-Unboxed.html#empty"
+>Source</A
+></TD
+></TR
+></TABLE
+></TD
+></TR
+><TR
+><TD CLASS="doc"
+><EM
+>O(1)</EM
+>. The empty set.
+</TD
+></TR
+><TR
+><TD CLASS="s15"
+></TD
+></TR
+><TR
+><TD CLASS="topdecl"
+><TABLE CLASS="declbar"
+><TR
+><TD CLASS="declname"
+><A NAME="v%3Asingleton"
+></A
+><B
+>singleton</B
+> :: <A HREF="Data-Set-Unboxed.html#t%3AUS"
+>US</A
+> a =&gt; a -&gt; <A HREF="Data-Set-Unboxed.html#t%3AUSet"
+>USet</A
+> a</TD
+><TD CLASS="declbut"
+><A HREF="src/Data-Set-Unboxed.html#singleton"
+>Source</A
+></TD
+></TR
+></TABLE
+></TD
+></TR
+><TR
+><TD CLASS="doc"
+><EM
+>O(1)</EM
+>. Create a singleton set.
+</TD
+></TR
+><TR
+><TD CLASS="s15"
+></TD
+></TR
+><TR
+><TD CLASS="topdecl"
+><TABLE CLASS="declbar"
+><TR
+><TD CLASS="declname"
+><A NAME="v%3Ainsert"
+></A
+><B
+>insert</B
+> :: (<A HREF="Data-Set-Unboxed.html#t%3AUS"
+>US</A
+> a, <A HREF="/usr/local/share/doc/ghc/libraries/base/Data-Ord.html#t%3AOrd"
+>Ord</A
+> a) =&gt; a -&gt; <A HREF="Data-Set-Unboxed.html#t%3AUSet"
+>USet</A
+> a -&gt; <A HREF="Data-Set-Unboxed.html#t%3AUSet"
+>USet</A
+> a</TD
+><TD CLASS="declbut"
+><A HREF="src/Data-Set-Unboxed.html#insert"
+>Source</A
+></TD
+></TR
+></TABLE
+></TD
+></TR
+><TR
+><TD CLASS="doc"
+><EM
+>O(log n)</EM
+>. Insert an element in a set.
+ If the set already contains an element equal to the given value,
+ it is replaced with the new value.
+</TD
+></TR
+><TR
+><TD CLASS="s15"
+></TD
+></TR
+><TR
+><TD CLASS="topdecl"
+><TABLE CLASS="declbar"
+><TR
+><TD CLASS="declname"
+><A NAME="v%3Adelete"
+></A
+><B
+>delete</B
+> :: (<A HREF="Data-Set-Unboxed.html#t%3AUS"
+>US</A
+> a, <A HREF="/usr/local/share/doc/ghc/libraries/base/Data-Ord.html#t%3AOrd"
+>Ord</A
+> a) =&gt; a -&gt; <A HREF="Data-Set-Unboxed.html#t%3AUSet"
+>USet</A
+> a -&gt; <A HREF="Data-Set-Unboxed.html#t%3AUSet"
+>USet</A
+> a</TD
+><TD CLASS="declbut"
+><A HREF="src/Data-Set-Unboxed.html#delete"
+>Source</A
+></TD
+></TR
+></TABLE
+></TD
+></TR
+><TR
+><TD CLASS="doc"
+><EM
+>O(log n)</EM
+>. Delete an element from a set.
+</TD
+></TR
+><TR
+><TD CLASS="s15"
+></TD
+></TR
+><TR
+><TD CLASS="section1"
+><A NAME="5"
+>Combine
+</A
+></TD
+></TR
+><TR
+><TD CLASS="s15"
+></TD
+></TR
+><TR
+><TD CLASS="topdecl"
+><TABLE CLASS="declbar"
+><TR
+><TD CLASS="declname"
+><A NAME="v%3Aunion"
+></A
+><B
+>union</B
+> :: (<A HREF="Data-Set-Unboxed.html#t%3AUS"
+>US</A
+> a, <A HREF="/usr/local/share/doc/ghc/libraries/base/Data-Ord.html#t%3AOrd"
+>Ord</A
+> a) =&gt; <A HREF="Data-Set-Unboxed.html#t%3AUSet"
+>USet</A
+> a -&gt; <A HREF="Data-Set-Unboxed.html#t%3AUSet"
+>USet</A
+> a -&gt; <A HREF="Data-Set-Unboxed.html#t%3AUSet"
+>USet</A
+> a</TD
+><TD CLASS="declbut"
+><A HREF="src/Data-Set-Unboxed.html#union"
+>Source</A
+></TD
+></TR
+></TABLE
+></TD
+></TR
+><TR
+><TD CLASS="doc"
+><EM
+>O(n+m)</EM
+>. The union of two sets, preferring the first set when
+ equal elements are encountered.
+ The implementation uses the efficient <EM
+>hedge-union</EM
+> algorithm.
+ Hedge-union is more efficient on (bigset <TT
+><A HREF="Data-Set-Unboxed.html#v%3Aunion"
+>union</A
+></TT
+> smallset).
+</TD
+></TR
+><TR
+><TD CLASS="s15"
+></TD
+></TR
+><TR
+><TD CLASS="topdecl"
+><TABLE CLASS="declbar"
+><TR
+><TD CLASS="declname"
+><A NAME="v%3Aunions"
+></A
+><B
+>unions</B
+> :: (<A HREF="Data-Set-Unboxed.html#t%3AUS"
+>US</A
+> a, <A HREF="/usr/local/share/doc/ghc/libraries/base/Data-Ord.html#t%3AOrd"
+>Ord</A
+> a) =&gt; [<A HREF="Data-Set-Unboxed.html#t%3AUSet"
+>USet</A
+> a] -&gt; <A HREF="Data-Set-Unboxed.html#t%3AUSet"
+>USet</A
+> a</TD
+><TD CLASS="declbut"
+><A HREF="src/Data-Set-Unboxed.html#unions"
+>Source</A
+></TD
+></TR
+></TABLE
+></TD
+></TR
+><TR
+><TD CLASS="doc"
+>The union of a list of sets: (<TT
+><TT
+><A HREF="Data-Set-Unboxed.html#v%3Aunions"
+>unions</A
+></TT
+> == <TT
+><A HREF="/usr/local/share/doc/ghc/libraries/base/Data-List.html#v%3Afoldl"
+>foldl</A
+></TT
+> <TT
+><A HREF="Data-Set-Unboxed.html#v%3Aunion"
+>union</A
+></TT
+> <TT
+><A HREF="Data-Set-Unboxed.html#v%3Aempty"
+>empty</A
+></TT
+></TT
+>).
+</TD
+></TR
+><TR
+><TD CLASS="s15"
+></TD
+></TR
+><TR
+><TD CLASS="topdecl"
+><TABLE CLASS="declbar"
+><TR
+><TD CLASS="declname"
+><A NAME="v%3Adifference"
+></A
+><B
+>difference</B
+> :: (<A HREF="Data-Set-Unboxed.html#t%3AUS"
+>US</A
+> a, <A HREF="/usr/local/share/doc/ghc/libraries/base/Data-Ord.html#t%3AOrd"
+>Ord</A
+> a) =&gt; <A HREF="Data-Set-Unboxed.html#t%3AUSet"
+>USet</A
+> a -&gt; <A HREF="Data-Set-Unboxed.html#t%3AUSet"
+>USet</A
+> a -&gt; <A HREF="Data-Set-Unboxed.html#t%3AUSet"
+>USet</A
+> a</TD
+><TD CLASS="declbut"
+><A HREF="src/Data-Set-Unboxed.html#difference"
+>Source</A
+></TD
+></TR
+></TABLE
+></TD
+></TR
+><TR
+><TD CLASS="doc"
+><EM
+>O(n+m)</EM
+>. Difference of two sets. 
+ The implementation uses an efficient <EM
+>hedge</EM
+> algorithm comparable with <EM
+>hedge-union</EM
+>.
+</TD
+></TR
+><TR
+><TD CLASS="s15"
+></TD
+></TR
+><TR
+><TD CLASS="topdecl"
+><TABLE CLASS="declbar"
+><TR
+><TD CLASS="declname"
+><A NAME="v%3Aintersection"
+></A
+><B
+>intersection</B
+> :: (<A HREF="Data-Set-Unboxed.html#t%3AUS"
+>US</A
+> a, <A HREF="/usr/local/share/doc/ghc/libraries/base/Data-Ord.html#t%3AOrd"
+>Ord</A
+> a) =&gt; <A HREF="Data-Set-Unboxed.html#t%3AUSet"
+>USet</A
+> a -&gt; <A HREF="Data-Set-Unboxed.html#t%3AUSet"
+>USet</A
+> a -&gt; <A HREF="Data-Set-Unboxed.html#t%3AUSet"
+>USet</A
+> a</TD
+><TD CLASS="declbut"
+><A HREF="src/Data-Set-Unboxed.html#intersection"
+>Source</A
+></TD
+></TR
+></TABLE
+></TD
+></TR
+><TR
+><TD CLASS="doc"
+><P
+><EM
+>O(n+m)</EM
+>. The intersection of two sets.
+ Elements of the result come from the first set, so for example
+</P
+><PRE
+> import qualified Data.Set as S
+ data AB = A | B deriving Show
+ instance Ord AB where compare _ _ = EQ
+ instance Eq AB where _ == _ = True
+ main = print (S.singleton A `S.intersection` S.singleton B,
+               S.singleton B `S.intersection` S.singleton A)
+</PRE
+><P
+>prints <TT
+>(fromList [A],fromList [B])</TT
+>.
+</P
+></TD
+></TR
+><TR
+><TD CLASS="s15"
+></TD
+></TR
+><TR
+><TD CLASS="section1"
+><A NAME="6"
+>Filter
+</A
+></TD
+></TR
+><TR
+><TD CLASS="s15"
+></TD
+></TR
+><TR
+><TD CLASS="topdecl"
+><TABLE CLASS="declbar"
+><TR
+><TD CLASS="declname"
+><A NAME="v%3Afilter"
+></A
+><B
+>filter</B
+> :: (<A HREF="Data-Set-Unboxed.html#t%3AUS"
+>US</A
+> a, <A HREF="/usr/local/share/doc/ghc/libraries/base/Data-Ord.html#t%3AOrd"
+>Ord</A
+> a) =&gt; (a -&gt; <A HREF="/usr/local/share/doc/ghc/libraries/ghc-prim/GHC-Bool.html#t%3ABool"
+>Bool</A
+>) -&gt; <A HREF="Data-Set-Unboxed.html#t%3AUSet"
+>USet</A
+> a -&gt; <A HREF="Data-Set-Unboxed.html#t%3AUSet"
+>USet</A
+> a</TD
+><TD CLASS="declbut"
+><A HREF="src/Data-Set-Unboxed.html#filter"
+>Source</A
+></TD
+></TR
+></TABLE
+></TD
+></TR
+><TR
+><TD CLASS="doc"
+><EM
+>O(n)</EM
+>. Filter all elements that satisfy the predicate.
+</TD
+></TR
+><TR
+><TD CLASS="s15"
+></TD
+></TR
+><TR
+><TD CLASS="topdecl"
+><TABLE CLASS="declbar"
+><TR
+><TD CLASS="declname"
+><A NAME="v%3Apartition"
+></A
+><B
+>partition</B
+> :: (<A HREF="Data-Set-Unboxed.html#t%3AUS"
+>US</A
+> a, <A HREF="/usr/local/share/doc/ghc/libraries/base/Data-Ord.html#t%3AOrd"
+>Ord</A
+> a) =&gt; (a -&gt; <A HREF="/usr/local/share/doc/ghc/libraries/ghc-prim/GHC-Bool.html#t%3ABool"
+>Bool</A
+>) -&gt; <A HREF="Data-Set-Unboxed.html#t%3AUSet"
+>USet</A
+> a -&gt; (<A HREF="Data-Set-Unboxed.html#t%3AUSet"
+>USet</A
+> a, <A HREF="Data-Set-Unboxed.html#t%3AUSet"
+>USet</A
+> a)</TD
+><TD CLASS="declbut"
+><A HREF="src/Data-Set-Unboxed.html#partition"
+>Source</A
+></TD
+></TR
+></TABLE
+></TD
+></TR
+><TR
+><TD CLASS="doc"
+><EM
+>O(n)</EM
+>. Partition the set into two sets, one with all elements that satisfy
+ the predicate and one with all elements that don't satisfy the predicate.
+ See also <TT
+><A HREF="Data-Set-Unboxed.html#v%3Asplit"
+>split</A
+></TT
+>.
+</TD
+></TR
+><TR
+><TD CLASS="s15"
+></TD
+></TR
+><TR
+><TD CLASS="topdecl"
+><TABLE CLASS="declbar"
+><TR
+><TD CLASS="declname"
+><A NAME="v%3Asplit"
+></A
+><B
+>split</B
+> :: (<A HREF="Data-Set-Unboxed.html#t%3AUS"
+>US</A
+> a, <A HREF="/usr/local/share/doc/ghc/libraries/base/Data-Ord.html#t%3AOrd"
+>Ord</A
+> a) =&gt; a -&gt; <A HREF="Data-Set-Unboxed.html#t%3AUSet"
+>USet</A
+> a -&gt; (<A HREF="Data-Set-Unboxed.html#t%3AUSet"
+>USet</A
+> a, <A HREF="Data-Set-Unboxed.html#t%3AUSet"
+>USet</A
+> a)</TD
+><TD CLASS="declbut"
+><A HREF="src/Data-Set-Unboxed.html#split"
+>Source</A
+></TD
+></TR
+></TABLE
+></TD
+></TR
+><TR
+><TD CLASS="doc"
+><EM
+>O(log n)</EM
+>. The expression (<TT
+><TT
+><A HREF="Data-Set-Unboxed.html#v%3Asplit"
+>split</A
+></TT
+> x set</TT
+>) is a pair <TT
+>(set1,set2)</TT
+>
+ where <TT
+>set1</TT
+> comprises the elements of <TT
+>set</TT
+> less than <TT
+>x</TT
+> and <TT
+>set2</TT
+>
+ comprises the elements of <TT
+>set</TT
+> greater than <TT
+>x</TT
+>.
+</TD
+></TR
+><TR
+><TD CLASS="s15"
+></TD
+></TR
+><TR
+><TD CLASS="topdecl"
+><TABLE CLASS="declbar"
+><TR
+><TD CLASS="declname"
+><A NAME="v%3AsplitMember"
+></A
+><B
+>splitMember</B
+> :: (<A HREF="Data-Set-Unboxed.html#t%3AUS"
+>US</A
+> a, <A HREF="/usr/local/share/doc/ghc/libraries/base/Data-Ord.html#t%3AOrd"
+>Ord</A
+> a) =&gt; a -&gt; <A HREF="Data-Set-Unboxed.html#t%3AUSet"
+>USet</A
+> a -&gt; (<A HREF="Data-Set-Unboxed.html#t%3AUSet"
+>USet</A
+> a, <A HREF="/usr/local/share/doc/ghc/libraries/ghc-prim/GHC-Bool.html#t%3ABool"
+>Bool</A
+>, <A HREF="Data-Set-Unboxed.html#t%3AUSet"
+>USet</A
+> a)</TD
+><TD CLASS="declbut"
+><A HREF="src/Data-Set-Unboxed.html#splitMember"
+>Source</A
+></TD
+></TR
+></TABLE
+></TD
+></TR
+><TR
+><TD CLASS="doc"
+><EM
+>O(log n)</EM
+>. Performs a <TT
+><A HREF="Data-Set-Unboxed.html#v%3Asplit"
+>split</A
+></TT
+> but also returns whether the pivot
+ element was found in the original set.
+</TD
+></TR
+><TR
+><TD CLASS="s15"
+></TD
+></TR
+><TR
+><TD CLASS="section1"
+><A NAME="7"
+>Map
+</A
+></TD
+></TR
+><TR
+><TD CLASS="s15"
+></TD
+></TR
+><TR
+><TD CLASS="topdecl"
+><TABLE CLASS="declbar"
+><TR
+><TD CLASS="declname"
+><A NAME="v%3Amap"
+></A
+><B
+>map</B
+> :: (<A HREF="Data-Set-Unboxed.html#t%3AUS"
+>US</A
+> a, <A HREF="Data-Set-Unboxed.html#t%3AUS"
+>US</A
+> b, <A HREF="/usr/local/share/doc/ghc/libraries/base/Data-Ord.html#t%3AOrd"
+>Ord</A
+> a, <A HREF="/usr/local/share/doc/ghc/libraries/base/Data-Ord.html#t%3AOrd"
+>Ord</A
+> b) =&gt; (a -&gt; b) -&gt; <A HREF="Data-Set-Unboxed.html#t%3AUSet"
+>USet</A
+> a -&gt; <A HREF="Data-Set-Unboxed.html#t%3AUSet"
+>USet</A
+> b</TD
+><TD CLASS="declbut"
+><A HREF="src/Data-Set-Unboxed.html#map"
+>Source</A
+></TD
+></TR
+></TABLE
+></TD
+></TR
+><TR
+><TD CLASS="doc"
+><P
+><EM
+>O(n*log n)</EM
+>. 
+ <TT
+><TT
+><A HREF="Data-Set-Unboxed.html#v%3Amap"
+>map</A
+></TT
+> f s</TT
+> is the set obtained by applying <TT
+>f</TT
+> to each element of <TT
+>s</TT
+>.
+</P
+><P
+>It's worth noting that the size of the result may be smaller if,
+ for some <TT
+>(x,y)</TT
+>, <TT
+>x /= y &amp;&amp; f x == f y</TT
+>
+</P
+></TD
+></TR
+><TR
+><TD CLASS="s15"
+></TD
+></TR
+><TR
+><TD CLASS="topdecl"
+><TABLE CLASS="declbar"
+><TR
+><TD CLASS="declname"
+><A NAME="v%3AmapMonotonic"
+></A
+><B
+>mapMonotonic</B
+> :: (<A HREF="Data-Set-Unboxed.html#t%3AUS"
+>US</A
+> a, <A HREF="Data-Set-Unboxed.html#t%3AUS"
+>US</A
+> b) =&gt; (a -&gt; b) -&gt; <A HREF="Data-Set-Unboxed.html#t%3AUSet"
+>USet</A
+> a -&gt; <A HREF="Data-Set-Unboxed.html#t%3AUSet"
+>USet</A
+> b</TD
+><TD CLASS="declbut"
+><A HREF="src/Data-Set-Unboxed.html#mapMonotonic"
+>Source</A
+></TD
+></TR
+></TABLE
+></TD
+></TR
+><TR
+><TD CLASS="doc"
+><P
+><EM
+>O(n)</EM
+>. The 
+</P
+><P
+><TT
+><TT
+><A HREF="Data-Set-Unboxed.html#v%3AmapMonotonic"
+>mapMonotonic</A
+></TT
+> f s == <TT
+><A HREF="Data-Set-Unboxed.html#v%3Amap"
+>map</A
+></TT
+> f s</TT
+>, but works only when <TT
+>f</TT
+> is monotonic.
+ <EM
+>The precondition is not checked.</EM
+>
+ Semi-formally, we have:
+</P
+><PRE
+> and [x &lt; y ==&gt; f x &lt; f y | x &lt;- ls, y &lt;- ls] 
+                     ==&gt; mapMonotonic f s == map f s
+     where ls = toList s
+</PRE
+></TD
+></TR
+><TR
+><TD CLASS="s15"
+></TD
+></TR
+><TR
+><TD CLASS="section1"
+><A NAME="8"
+>Fold
+</A
+></TD
+></TR
+><TR
+><TD CLASS="s15"
+></TD
+></TR
+><TR
+><TD CLASS="topdecl"
+><TABLE CLASS="declbar"
+><TR
+><TD CLASS="declname"
+><A NAME="v%3Afold"
+></A
+><B
+>fold</B
+> :: <A HREF="Data-Set-Unboxed.html#t%3AUS"
+>US</A
+> a =&gt; (a -&gt; b -&gt; b) -&gt; b -&gt; <A HREF="Data-Set-Unboxed.html#t%3AUSet"
+>USet</A
+> a -&gt; b</TD
+><TD CLASS="declbut"
+><A HREF="src/Data-Set-Unboxed.html#fold"
+>Source</A
+></TD
+></TR
+></TABLE
+></TD
+></TR
+><TR
+><TD CLASS="doc"
+><EM
+>O(n)</EM
+>. Fold over the elements of a set in an unspecified order.
+</TD
+></TR
+><TR
+><TD CLASS="s15"
+></TD
+></TR
+><TR
+><TD CLASS="section1"
+><A NAME="9"
+>Min/Max
+</A
+></TD
+></TR
+><TR
+><TD CLASS="s15"
+></TD
+></TR
+><TR
+><TD CLASS="topdecl"
+><TABLE CLASS="declbar"
+><TR
+><TD CLASS="declname"
+><A NAME="v%3AfindMin"
+></A
+><B
+>findMin</B
+> :: <A HREF="Data-Set-Unboxed.html#t%3AUS"
+>US</A
+> a =&gt; <A HREF="Data-Set-Unboxed.html#t%3AUSet"
+>USet</A
+> a -&gt; a</TD
+><TD CLASS="declbut"
+><A HREF="src/Data-Set-Unboxed.html#findMin"
+>Source</A
+></TD
+></TR
+></TABLE
+></TD
+></TR
+><TR
+><TD CLASS="doc"
+><EM
+>O(log n)</EM
+>. The minimal element of a set.
+</TD
+></TR
+><TR
+><TD CLASS="s15"
+></TD
+></TR
+><TR
+><TD CLASS="topdecl"
+><TABLE CLASS="declbar"
+><TR
+><TD CLASS="declname"
+><A NAME="v%3AfindMax"
+></A
+><B
+>findMax</B
+> :: <A HREF="Data-Set-Unboxed.html#t%3AUS"
+>US</A
+> a =&gt; <A HREF="Data-Set-Unboxed.html#t%3AUSet"
+>USet</A
+> a -&gt; a</TD
+><TD CLASS="declbut"
+><A HREF="src/Data-Set-Unboxed.html#findMax"
+>Source</A
+></TD
+></TR
+></TABLE
+></TD
+></TR
+><TR
+><TD CLASS="doc"
+><EM
+>O(log n)</EM
+>. The maximal element of a set.
+</TD
+></TR
+><TR
+><TD CLASS="s15"
+></TD
+></TR
+><TR
+><TD CLASS="topdecl"
+><TABLE CLASS="declbar"
+><TR
+><TD CLASS="declname"
+><A NAME="v%3AdeleteMin"
+></A
+><B
+>deleteMin</B
+> :: <A HREF="Data-Set-Unboxed.html#t%3AUS"
+>US</A
+> a =&gt; <A HREF="Data-Set-Unboxed.html#t%3AUSet"
+>USet</A
+> a -&gt; <A HREF="Data-Set-Unboxed.html#t%3AUSet"
+>USet</A
+> a</TD
+><TD CLASS="declbut"
+><A HREF="src/Data-Set-Unboxed.html#deleteMin"
+>Source</A
+></TD
+></TR
+></TABLE
+></TD
+></TR
+><TR
+><TD CLASS="doc"
+><EM
+>O(log n)</EM
+>. Delete the minimal element.
+</TD
+></TR
+><TR
+><TD CLASS="s15"
+></TD
+></TR
+><TR
+><TD CLASS="topdecl"
+><TABLE CLASS="declbar"
+><TR
+><TD CLASS="declname"
+><A NAME="v%3AdeleteMax"
+></A
+><B
+>deleteMax</B
+> :: <A HREF="Data-Set-Unboxed.html#t%3AUS"
+>US</A
+> a =&gt; <A HREF="Data-Set-Unboxed.html#t%3AUSet"
+>USet</A
+> a -&gt; <A HREF="Data-Set-Unboxed.html#t%3AUSet"
+>USet</A
+> a</TD
+><TD CLASS="declbut"
+><A HREF="src/Data-Set-Unboxed.html#deleteMax"
+>Source</A
+></TD
+></TR
+></TABLE
+></TD
+></TR
+><TR
+><TD CLASS="doc"
+><EM
+>O(log n)</EM
+>. Delete the maximal element.
+</TD
+></TR
+><TR
+><TD CLASS="s15"
+></TD
+></TR
+><TR
+><TD CLASS="topdecl"
+><TABLE CLASS="declbar"
+><TR
+><TD CLASS="declname"
+><A NAME="v%3AdeleteFindMin"
+></A
+><B
+>deleteFindMin</B
+> :: <A HREF="Data-Set-Unboxed.html#t%3AUS"
+>US</A
+> a =&gt; <A HREF="Data-Set-Unboxed.html#t%3AUSet"
+>USet</A
+> a -&gt; (a, <A HREF="Data-Set-Unboxed.html#t%3AUSet"
+>USet</A
+> a)</TD
+><TD CLASS="declbut"
+><A HREF="src/Data-Set-Unboxed.html#deleteFindMin"
+>Source</A
+></TD
+></TR
+></TABLE
+></TD
+></TR
+><TR
+><TD CLASS="doc"
+><P
+><EM
+>O(log n)</EM
+>. Delete and find the minimal element.
+</P
+><PRE
+> deleteFindMin set = (findMin set, deleteMin set)
+</PRE
+></TD
+></TR
+><TR
+><TD CLASS="s15"
+></TD
+></TR
+><TR
+><TD CLASS="topdecl"
+><TABLE CLASS="declbar"
+><TR
+><TD CLASS="declname"
+><A NAME="v%3AdeleteFindMax"
+></A
+><B
+>deleteFindMax</B
+> :: <A HREF="Data-Set-Unboxed.html#t%3AUS"
+>US</A
+> a =&gt; <A HREF="Data-Set-Unboxed.html#t%3AUSet"
+>USet</A
+> a -&gt; (a, <A HREF="Data-Set-Unboxed.html#t%3AUSet"
+>USet</A
+> a)</TD
+><TD CLASS="declbut"
+><A HREF="src/Data-Set-Unboxed.html#deleteFindMax"
+>Source</A
+></TD
+></TR
+></TABLE
+></TD
+></TR
+><TR
+><TD CLASS="doc"
+><P
+><EM
+>O(log n)</EM
+>. Delete and find the maximal element.
+</P
+><PRE
+> deleteFindMax set = (findMax set, deleteMax set)
+</PRE
+></TD
+></TR
+><TR
+><TD CLASS="s15"
+></TD
+></TR
+><TR
+><TD CLASS="topdecl"
+><TABLE CLASS="declbar"
+><TR
+><TD CLASS="declname"
+><A NAME="v%3AmaxView"
+></A
+><B
+>maxView</B
+> :: <A HREF="Data-Set-Unboxed.html#t%3AUS"
+>US</A
+> a =&gt; <A HREF="Data-Set-Unboxed.html#t%3AUSet"
+>USet</A
+> a -&gt; <A HREF="/usr/local/share/doc/ghc/libraries/base/Data-Maybe.html#t%3AMaybe"
+>Maybe</A
+> (a, <A HREF="Data-Set-Unboxed.html#t%3AUSet"
+>USet</A
+> a)</TD
+><TD CLASS="declbut"
+><A HREF="src/Data-Set-Unboxed.html#maxView"
+>Source</A
+></TD
+></TR
+></TABLE
+></TD
+></TR
+><TR
+><TD CLASS="doc"
+><EM
+>O(log n)</EM
+>. Retrieves the maximal key of the set, and the set
+ stripped of that element, or <TT
+><A HREF="/usr/local/share/doc/ghc/libraries/base/Data-Maybe.html#v%3ANothing"
+>Nothing</A
+></TT
+> if passed an empty set.
+</TD
+></TR
+><TR
+><TD CLASS="s15"
+></TD
+></TR
+><TR
+><TD CLASS="topdecl"
+><TABLE CLASS="declbar"
+><TR
+><TD CLASS="declname"
+><A NAME="v%3AminView"
+></A
+><B
+>minView</B
+> :: <A HREF="Data-Set-Unboxed.html#t%3AUS"
+>US</A
+> a =&gt; <A HREF="Data-Set-Unboxed.html#t%3AUSet"
+>USet</A
+> a -&gt; <A HREF="/usr/local/share/doc/ghc/libraries/base/Data-Maybe.html#t%3AMaybe"
+>Maybe</A
+> (a, <A HREF="Data-Set-Unboxed.html#t%3AUSet"
+>USet</A
+> a)</TD
+><TD CLASS="declbut"
+><A HREF="src/Data-Set-Unboxed.html#minView"
+>Source</A
+></TD
+></TR
+></TABLE
+></TD
+></TR
+><TR
+><TD CLASS="doc"
+><EM
+>O(log n)</EM
+>. Retrieves the minimal key of the set, and the set
+ stripped of that element, or <TT
+><A HREF="/usr/local/share/doc/ghc/libraries/base/Data-Maybe.html#v%3ANothing"
+>Nothing</A
+></TT
+> if passed an empty set.
+</TD
+></TR
+><TR
+><TD CLASS="s15"
+></TD
+></TR
+><TR
+><TD CLASS="section1"
+><A NAME="10"
+>Conversion
+</A
+></TD
+></TR
+><TR
+><TD CLASS="s15"
+></TD
+></TR
+><TR
+><TD CLASS="section2"
+><A NAME="11"
+>List
+</A
+></TD
+></TR
+><TR
+><TD CLASS="s15"
+></TD
+></TR
+><TR
+><TD CLASS="topdecl"
+><TABLE CLASS="declbar"
+><TR
+><TD CLASS="declname"
+><A NAME="v%3Aelems"
+></A
+><B
+>elems</B
+> :: <A HREF="Data-Set-Unboxed.html#t%3AUS"
+>US</A
+> a =&gt; <A HREF="Data-Set-Unboxed.html#t%3AUSet"
+>USet</A
+> a -&gt; [a]</TD
+><TD CLASS="declbut"
+><A HREF="src/Data-Set-Unboxed.html#elems"
+>Source</A
+></TD
+></TR
+></TABLE
+></TD
+></TR
+><TR
+><TD CLASS="doc"
+><EM
+>O(n)</EM
+>. The elements of a set.
+</TD
+></TR
+><TR
+><TD CLASS="s15"
+></TD
+></TR
+><TR
+><TD CLASS="topdecl"
+><TABLE CLASS="declbar"
+><TR
+><TD CLASS="declname"
+><A NAME="v%3AtoList"
+></A
+><B
+>toList</B
+> :: <A HREF="Data-Set-Unboxed.html#t%3AUS"
+>US</A
+> a =&gt; <A HREF="Data-Set-Unboxed.html#t%3AUSet"
+>USet</A
+> a -&gt; [a]</TD
+><TD CLASS="declbut"
+><A HREF="src/Data-Set-Unboxed.html#toList"
+>Source</A
+></TD
+></TR
+></TABLE
+></TD
+></TR
+><TR
+><TD CLASS="doc"
+><EM
+>O(n)</EM
+>. Convert the set to a list of elements.
+</TD
+></TR
+><TR
+><TD CLASS="s15"
+></TD
+></TR
+><TR
+><TD CLASS="topdecl"
+><TABLE CLASS="declbar"
+><TR
+><TD CLASS="declname"
+><A NAME="v%3AfromList"
+></A
+><B
+>fromList</B
+> :: (<A HREF="Data-Set-Unboxed.html#t%3AUS"
+>US</A
+> a, <A HREF="/usr/local/share/doc/ghc/libraries/base/Data-Ord.html#t%3AOrd"
+>Ord</A
+> a) =&gt; [a] -&gt; <A HREF="Data-Set-Unboxed.html#t%3AUSet"
+>USet</A
+> a</TD
+><TD CLASS="declbut"
+><A HREF="src/Data-Set-Unboxed.html#fromList"
+>Source</A
+></TD
+></TR
+></TABLE
+></TD
+></TR
+><TR
+><TD CLASS="doc"
+><EM
+>O(n*log n)</EM
+>. Create a set from a list of elements.
+</TD
+></TR
+><TR
+><TD CLASS="s15"
+></TD
+></TR
+><TR
+><TD CLASS="section2"
+><A NAME="12"
+>Ordered list
+</A
+></TD
+></TR
+><TR
+><TD CLASS="s15"
+></TD
+></TR
+><TR
+><TD CLASS="topdecl"
+><TABLE CLASS="declbar"
+><TR
+><TD CLASS="declname"
+><A NAME="v%3AtoAscList"
+></A
+><B
+>toAscList</B
+> :: <A HREF="Data-Set-Unboxed.html#t%3AUS"
+>US</A
+> a =&gt; <A HREF="Data-Set-Unboxed.html#t%3AUSet"
+>USet</A
+> a -&gt; [a]</TD
+><TD CLASS="declbut"
+><A HREF="src/Data-Set-Unboxed.html#toAscList"
+>Source</A
+></TD
+></TR
+></TABLE
+></TD
+></TR
+><TR
+><TD CLASS="doc"
+><EM
+>O(n)</EM
+>. Convert the set to an ascending list of elements.
+</TD
+></TR
+><TR
+><TD CLASS="s15"
+></TD
+></TR
+><TR
+><TD CLASS="topdecl"
+><TABLE CLASS="declbar"
+><TR
+><TD CLASS="declname"
+><A NAME="v%3AfromAscList"
+></A
+><B
+>fromAscList</B
+> :: (<A HREF="Data-Set-Unboxed.html#t%3AUS"
+>US</A
+> a, <A HREF="/usr/local/share/doc/ghc/libraries/base/Data-Eq.html#t%3AEq"
+>Eq</A
+> a) =&gt; [a] -&gt; <A HREF="Data-Set-Unboxed.html#t%3AUSet"
+>USet</A
+> a</TD
+><TD CLASS="declbut"
+><A HREF="src/Data-Set-Unboxed.html#fromAscList"
+>Source</A
+></TD
+></TR
+></TABLE
+></TD
+></TR
+><TR
+><TD CLASS="doc"
+><EM
+>O(n)</EM
+>. Build a set from an ascending list in linear time.
+ <EM
+>The precondition (input list is ascending) is not checked.</EM
+>
+</TD
+></TR
+><TR
+><TD CLASS="s15"
+></TD
+></TR
+><TR
+><TD CLASS="topdecl"
+><TABLE CLASS="declbar"
+><TR
+><TD CLASS="declname"
+><A NAME="v%3AfromDistinctAscList"
+></A
+><B
+>fromDistinctAscList</B
+> :: <A HREF="Data-Set-Unboxed.html#t%3AUS"
+>US</A
+> a =&gt; [a] -&gt; <A HREF="Data-Set-Unboxed.html#t%3AUSet"
+>USet</A
+> a</TD
+><TD CLASS="declbut"
+><A HREF="src/Data-Set-Unboxed.html#fromDistinctAscList"
+>Source</A
+></TD
+></TR
+></TABLE
+></TD
+></TR
+><TR
+><TD CLASS="doc"
+><EM
+>O(n)</EM
+>. Build a set from an ascending list of distinct elements in linear time.
+ <EM
+>The precondition (input list is strictly ascending) is not checked.</EM
+>
+</TD
+></TR
+><TR
+><TD CLASS="s15"
+></TD
+></TR
+><TR
+><TD CLASS="section1"
+><A NAME="13"
+>Debugging
+</A
+></TD
+></TR
+><TR
+><TD CLASS="s15"
+></TD
+></TR
+><TR
+><TD CLASS="topdecl"
+><TABLE CLASS="declbar"
+><TR
+><TD CLASS="declname"
+><A NAME="v%3AshowTree"
+></A
+><B
+>showTree</B
+> :: (<A HREF="Data-Set-Unboxed.html#t%3AUS"
+>US</A
+> a, <A HREF="/usr/local/share/doc/ghc/libraries/base/Text-Show.html#t%3AShow"
+>Show</A
+> a) =&gt; <A HREF="Data-Set-Unboxed.html#t%3AUSet"
+>USet</A
+> a -&gt; <A HREF="/usr/local/share/doc/ghc/libraries/base/Data-Char.html#t%3AString"
+>String</A
+></TD
+><TD CLASS="declbut"
+><A HREF="src/Data-Set-Unboxed.html#showTree"
+>Source</A
+></TD
+></TR
+></TABLE
+></TD
+></TR
+><TR
+><TD CLASS="doc"
+><EM
+>O(n)</EM
+>. Show the tree that implements the set. The tree is shown
+ in a compressed, hanging format.
+</TD
+></TR
+><TR
+><TD CLASS="s15"
+></TD
+></TR
+><TR
+><TD CLASS="topdecl"
+><TABLE CLASS="declbar"
+><TR
+><TD CLASS="declname"
+><A NAME="v%3AshowTreeWith"
+></A
+><B
+>showTreeWith</B
+> :: (<A HREF="Data-Set-Unboxed.html#t%3AUS"
+>US</A
+> a, <A HREF="/usr/local/share/doc/ghc/libraries/base/Text-Show.html#t%3AShow"
+>Show</A
+> a) =&gt; <A HREF="/usr/local/share/doc/ghc/libraries/ghc-prim/GHC-Bool.html#t%3ABool"
+>Bool</A
+> -&gt; <A HREF="/usr/local/share/doc/ghc/libraries/ghc-prim/GHC-Bool.html#t%3ABool"
+>Bool</A
+> -&gt; <A HREF="Data-Set-Unboxed.html#t%3AUSet"
+>USet</A
+> a -&gt; <A HREF="/usr/local/share/doc/ghc/libraries/base/Data-Char.html#t%3AString"
+>String</A
+></TD
+><TD CLASS="declbut"
+><A HREF="src/Data-Set-Unboxed.html#showTreeWith"
+>Source</A
+></TD
+></TR
+></TABLE
+></TD
+></TR
+><TR
+><TD CLASS="doc"
+><P
+><EM
+>O(n)</EM
+>. The expression (<TT
+>showTreeWith hang wide map</TT
+>) shows
+ the tree that implements the set. If <TT
+>hang</TT
+> is
+ <TT
+>True</TT
+>, a <EM
+>hanging</EM
+> tree is shown otherwise a rotated tree is shown. If
+ <TT
+>wide</TT
+> is <TT
+><A HREF="/usr/local/share/doc/ghc/libraries/ghc-prim/GHC-Bool.html#v%3ATrue"
+>True</A
+></TT
+>, an extra wide version is shown.
+</P
+><PRE
+> Set&gt; putStrLn $ showTreeWith True False $ fromDistinctAscList [1..5]
+ 4
+ +--2
+ |  +--1
+ |  +--3
+ +--5
+ 
+ Set&gt; putStrLn $ showTreeWith True True $ fromDistinctAscList [1..5]
+ 4
+ |
+ +--2
+ |  |
+ |  +--1
+ |  |
+ |  +--3
+ |
+ +--5
+ 
+ Set&gt; putStrLn $ showTreeWith False True $ fromDistinctAscList [1..5]
+ +--5
+ |
+ 4
+ |
+ |  +--3
+ |  |
+ +--2
+    |
+    +--1
+</PRE
+></TD
+></TR
+><TR
+><TD CLASS="s15"
+></TD
+></TR
+><TR
+><TD CLASS="topdecl"
+><TABLE CLASS="declbar"
+><TR
+><TD CLASS="declname"
+><A NAME="v%3Avalid"
+></A
+><B
+>valid</B
+> :: (<A HREF="Data-Set-Unboxed.html#t%3AUS"
+>US</A
+> a, <A HREF="/usr/local/share/doc/ghc/libraries/base/Data-Ord.html#t%3AOrd"
+>Ord</A
+> a) =&gt; <A HREF="Data-Set-Unboxed.html#t%3AUSet"
+>USet</A
+> a -&gt; <A HREF="/usr/local/share/doc/ghc/libraries/ghc-prim/GHC-Bool.html#t%3ABool"
+>Bool</A
+></TD
+><TD CLASS="declbut"
+><A HREF="src/Data-Set-Unboxed.html#valid"
+>Source</A
+></TD
+></TR
+></TABLE
+></TD
+></TR
+><TR
+><TD CLASS="doc"
+><EM
+>O(n)</EM
+>. Test if the internal set structure is valid.
+</TD
+></TR
+><TR
+><TD CLASS="s15"
+></TD
+></TR
+><TR
+><TD CLASS="botbar"
+>Produced by <A HREF="http://www.haskell.org/haddock/"
+>Haddock</A
+> version 2.3.0</TD
+></TR
+></TABLE
+></BODY
+></HTML
+>
addfile ./doc/html/unboxed-containers/doc-index.html
hunk ./doc/html/unboxed-containers/doc-index.html 1
+<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd">
+<!--Rendered using the Haskell Html Library v0.2-->
+<HTML
+><HEAD
+><META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=UTF-8"
+><TITLE
+>unboxed-containers-0.0.0: Self-optimizing unboxed sets using view patterns and data families (Index)</TITLE
+><LINK HREF="haddock.css" REL="stylesheet" TYPE="text/css"
+><SCRIPT SRC="haddock-util.js" TYPE="text/javascript"
+></SCRIPT
+></HEAD
+><BODY
+><TABLE CLASS="vanilla" CELLSPACING="0" CELLPADDING="0"
+><TR
+><TD CLASS="topbar"
+><TABLE CLASS="vanilla" CELLSPACING="0" CELLPADDING="0"
+><TR
+><TD
+><IMG SRC="haskell_icon.gif" WIDTH="16" HEIGHT="16" ALT=" "
+></TD
+><TD CLASS="title"
+>unboxed-containers-0.0.0: Self-optimizing unboxed sets using view patterns and data families</TD
+><TD CLASS="topbut"
+><A HREF="index.html"
+>Contents</A
+></TD
+><TD CLASS="topbut"
+><A HREF="doc-index.html"
+>Index</A
+></TD
+></TR
+></TABLE
+></TD
+></TR
+><TR
+><TD COLSPAN="2" STYLE="padding-top:5px;"
+><FORM onsubmit="full_search(); return false;" ACTION=""
+>Search: <INPUT ID="searchbox" onkeyup="quick_search()"
+> <INPUT VALUE="Search" TYPE="submit"
+> <SPAN ID="searchmsg"
+> </SPAN
+></FORM
+></TD
+></TR
+><TR
+><TD
+><TABLE ID="indexlist" CELLPADDING="0" CELLSPACING="5"
+><TR CLASS="indexrow"
+><TD CLASS="indexentry" COLSPAN="2"
+>Boxed</TD
+></TR
+><TR CLASS="indexrow"
+><TD CLASS="indexannot"
+>1 (Type/Class)</TD
+><TD CLASS="indexlinks"
+><A HREF="Data-Set-Unboxed.html#t%3ABoxed"
+>Data.Set.Unboxed</A
+></TD
+></TR
+><TR CLASS="indexrow"
+><TD CLASS="indexannot"
+>2 (Data Constructor)</TD
+><TD CLASS="indexlinks"
+><A HREF="Data-Set-Unboxed.html#v%3ABoxed"
+>Data.Set.Unboxed</A
+></TD
+></TR
+><TR CLASS="indexrow"
+><TD CLASS="indexentry"
+>delete</TD
+><TD CLASS="indexlinks"
+><A HREF="Data-Set-Unboxed.html#v%3Adelete"
+>Data.Set.Unboxed</A
+></TD
+></TR
+><TR CLASS="indexrow"
+><TD CLASS="indexentry"
+>deleteFindMax</TD
+><TD CLASS="indexlinks"
+><A HREF="Data-Set-Unboxed.html#v%3AdeleteFindMax"
+>Data.Set.Unboxed</A
+></TD
+></TR
+><TR CLASS="indexrow"
+><TD CLASS="indexentry"
+>deleteFindMin</TD
+><TD CLASS="indexlinks"
+><A HREF="Data-Set-Unboxed.html#v%3AdeleteFindMin"
+>Data.Set.Unboxed</A
+></TD
+></TR
+><TR CLASS="indexrow"
+><TD CLASS="indexentry"
+>deleteMax</TD
+><TD CLASS="indexlinks"
+><A HREF="Data-Set-Unboxed.html#v%3AdeleteMax"
+>Data.Set.Unboxed</A
+></TD
+></TR
+><TR CLASS="indexrow"
+><TD CLASS="indexentry"
+>deleteMin</TD
+><TD CLASS="indexlinks"
+><A HREF="Data-Set-Unboxed.html#v%3AdeleteMin"
+>Data.Set.Unboxed</A
+></TD
+></TR
+><TR CLASS="indexrow"
+><TD CLASS="indexentry"
+>difference</TD
+><TD CLASS="indexlinks"
+><A HREF="Data-Set-Unboxed.html#v%3Adifference"
+>Data.Set.Unboxed</A
+></TD
+></TR
+><TR CLASS="indexrow"
+><TD CLASS="indexentry"
+>elems</TD
+><TD CLASS="indexlinks"
+><A HREF="Data-Set-Unboxed.html#v%3Aelems"
+>Data.Set.Unboxed</A
+></TD
+></TR
+><TR CLASS="indexrow"
+><TD CLASS="indexentry"
+>empty</TD
+><TD CLASS="indexlinks"
+><A HREF="Data-Set-Unboxed.html#v%3Aempty"
+>Data.Set.Unboxed</A
+></TD
+></TR
+><TR CLASS="indexrow"
+><TD CLASS="indexentry"
+>filter</TD
+><TD CLASS="indexlinks"
+><A HREF="Data-Set-Unboxed.html#v%3Afilter"
+>Data.Set.Unboxed</A
+></TD
+></TR
+><TR CLASS="indexrow"
+><TD CLASS="indexentry"
+>findMax</TD
+><TD CLASS="indexlinks"
+><A HREF="Data-Set-Unboxed.html#v%3AfindMax"
+>Data.Set.Unboxed</A
+></TD
+></TR
+><TR CLASS="indexrow"
+><TD CLASS="indexentry"
+>findMin</TD
+><TD CLASS="indexlinks"
+><A HREF="Data-Set-Unboxed.html#v%3AfindMin"
+>Data.Set.Unboxed</A
+></TD
+></TR
+><TR CLASS="indexrow"
+><TD CLASS="indexentry"
+>fold</TD
+><TD CLASS="indexlinks"
+><A HREF="Data-Set-Unboxed.html#v%3Afold"
+>Data.Set.Unboxed</A
+></TD
+></TR
+><TR CLASS="indexrow"
+><TD CLASS="indexentry"
+>fromAscList</TD
+><TD CLASS="indexlinks"
+><A HREF="Data-Set-Unboxed.html#v%3AfromAscList"
+>Data.Set.Unboxed</A
+></TD
+></TR
+><TR CLASS="indexrow"
+><TD CLASS="indexentry"
+>fromDistinctAscList</TD
+><TD CLASS="indexlinks"
+><A HREF="Data-Set-Unboxed.html#v%3AfromDistinctAscList"
+>Data.Set.Unboxed</A
+></TD
+></TR
+><TR CLASS="indexrow"
+><TD CLASS="indexentry"
+>fromList</TD
+><TD CLASS="indexlinks"
+><A HREF="Data-Set-Unboxed.html#v%3AfromList"
+>Data.Set.Unboxed</A
+></TD
+></TR
+><TR CLASS="indexrow"
+><TD CLASS="indexentry"
+>insert</TD
+><TD CLASS="indexlinks"
+><A HREF="Data-Set-Unboxed.html#v%3Ainsert"
+>Data.Set.Unboxed</A
+></TD
+></TR
+><TR CLASS="indexrow"
+><TD CLASS="indexentry"
+>intersection</TD
+><TD CLASS="indexlinks"
+><A HREF="Data-Set-Unboxed.html#v%3Aintersection"
+>Data.Set.Unboxed</A
+></TD
+></TR
+><TR CLASS="indexrow"
+><TD CLASS="indexentry"
+>isProperSubsetOf</TD
+><TD CLASS="indexlinks"
+><A HREF="Data-Set-Unboxed.html#v%3AisProperSubsetOf"
+>Data.Set.Unboxed</A
+></TD
+></TR
+><TR CLASS="indexrow"
+><TD CLASS="indexentry"
+>isSubsetOf</TD
+><TD CLASS="indexlinks"
+><A HREF="Data-Set-Unboxed.html#v%3AisSubsetOf"
+>Data.Set.Unboxed</A
+></TD
+></TR
+><TR CLASS="indexrow"
+><TD CLASS="indexentry"
+>map</TD
+><TD CLASS="indexlinks"
+><A HREF="Data-Set-Unboxed.html#v%3Amap"
+>Data.Set.Unboxed</A
+></TD
+></TR
+><TR CLASS="indexrow"
+><TD CLASS="indexentry"
+>mapMonotonic</TD
+><TD CLASS="indexlinks"
+><A HREF="Data-Set-Unboxed.html#v%3AmapMonotonic"
+>Data.Set.Unboxed</A
+></TD
+></TR
+><TR CLASS="indexrow"
+><TD CLASS="indexentry"
+>maxView</TD
+><TD CLASS="indexlinks"
+><A HREF="Data-Set-Unboxed.html#v%3AmaxView"
+>Data.Set.Unboxed</A
+></TD
+></TR
+><TR CLASS="indexrow"
+><TD CLASS="indexentry"
+>member</TD
+><TD CLASS="indexlinks"
+><A HREF="Data-Set-Unboxed.html#v%3Amember"
+>Data.Set.Unboxed</A
+></TD
+></TR
+><TR CLASS="indexrow"
+><TD CLASS="indexentry"
+>minView</TD
+><TD CLASS="indexlinks"
+><A HREF="Data-Set-Unboxed.html#v%3AminView"
+>Data.Set.Unboxed</A
+></TD
+></TR
+><TR CLASS="indexrow"
+><TD CLASS="indexentry"
+>notMember</TD
+><TD CLASS="indexlinks"
+><A HREF="Data-Set-Unboxed.html#v%3AnotMember"
+>Data.Set.Unboxed</A
+></TD
+></TR
+><TR CLASS="indexrow"
+><TD CLASS="indexentry"
+>null</TD
+><TD CLASS="indexlinks"
+><A HREF="Data-Set-Unboxed.html#v%3Anull"
+>Data.Set.Unboxed</A
+></TD
+></TR
+><TR CLASS="indexrow"
+><TD CLASS="indexentry"
+>partition</TD
+><TD CLASS="indexlinks"
+><A HREF="Data-Set-Unboxed.html#v%3Apartition"
+>Data.Set.Unboxed</A
+></TD
+></TR
+><TR CLASS="indexrow"
+><TD CLASS="indexentry"
+>showTree</TD
+><TD CLASS="indexlinks"
+><A HREF="Data-Set-Unboxed.html#v%3AshowTree"
+>Data.Set.Unboxed</A
+></TD
+></TR
+><TR CLASS="indexrow"
+><TD CLASS="indexentry"
+>showTreeWith</TD
+><TD CLASS="indexlinks"
+><A HREF="Data-Set-Unboxed.html#v%3AshowTreeWith"
+>Data.Set.Unboxed</A
+></TD
+></TR
+><TR CLASS="indexrow"
+><TD CLASS="indexentry"
+>singleton</TD
+><TD CLASS="indexlinks"
+><A HREF="Data-Set-Unboxed.html#v%3Asingleton"
+>Data.Set.Unboxed</A
+></TD
+></TR
+><TR CLASS="indexrow"
+><TD CLASS="indexentry"
+>size</TD
+><TD CLASS="indexlinks"
+><A HREF="Data-Set-Unboxed.html#v%3Asize"
+>Data.Set.Unboxed</A
+></TD
+></TR
+><TR CLASS="indexrow"
+><TD CLASS="indexentry"
+>split</TD
+><TD CLASS="indexlinks"
+><A HREF="Data-Set-Unboxed.html#v%3Asplit"
+>Data.Set.Unboxed</A
+></TD
+></TR
+><TR CLASS="indexrow"
+><TD CLASS="indexentry"
+>splitMember</TD
+><TD CLASS="indexlinks"
+><A HREF="Data-Set-Unboxed.html#v%3AsplitMember"
+>Data.Set.Unboxed</A
+></TD
+></TR
+><TR CLASS="indexrow"
+><TD CLASS="indexentry"
+>toAscList</TD
+><TD CLASS="indexlinks"
+><A HREF="Data-Set-Unboxed.html#v%3AtoAscList"
+>Data.Set.Unboxed</A
+></TD
+></TR
+><TR CLASS="indexrow"
+><TD CLASS="indexentry"
+>toList</TD
+><TD CLASS="indexlinks"
+><A HREF="Data-Set-Unboxed.html#v%3AtoList"
+>Data.Set.Unboxed</A
+></TD
+></TR
+><TR CLASS="indexrow"
+><TD CLASS="indexentry"
+>union</TD
+><TD CLASS="indexlinks"
+><A HREF="Data-Set-Unboxed.html#v%3Aunion"
+>Data.Set.Unboxed</A
+></TD
+></TR
+><TR CLASS="indexrow"
+><TD CLASS="indexentry"
+>unions</TD
+><TD CLASS="indexlinks"
+><A HREF="Data-Set-Unboxed.html#v%3Aunions"
+>Data.Set.Unboxed</A
+></TD
+></TR
+><TR CLASS="indexrow"
+><TD CLASS="indexentry"
+>US</TD
+><TD CLASS="indexlinks"
+><A HREF="Data-Set-Unboxed.html#t%3AUS"
+>Data.Set.Unboxed</A
+></TD
+></TR
+><TR CLASS="indexrow"
+><TD CLASS="indexentry"
+>USet</TD
+><TD CLASS="indexlinks"
+><A HREF="Data-Set-Unboxed.html#t%3AUSet"
+>Data.Set.Unboxed</A
+></TD
+></TR
+><TR CLASS="indexrow"
+><TD CLASS="indexentry"
+>valid</TD
+><TD CLASS="indexlinks"
+><A HREF="Data-Set-Unboxed.html#v%3Avalid"
+>Data.Set.Unboxed</A
+></TD
+></TR
+><TR CLASS="indexrow"
+><TD CLASS="indexentry"
+>\\</TD
+><TD CLASS="indexlinks"
+><A HREF="Data-Set-Unboxed.html#v%3A%5C%5C"
+>Data.Set.Unboxed</A
+></TD
+></TR
+></TABLE
+></TD
+></TR
+></TABLE
+></BODY
+></HTML
+>
addfile ./doc/html/unboxed-containers/haddock-util.js
hunk ./doc/html/unboxed-containers/haddock-util.js 1
+// Haddock JavaScript utilities
+function toggle(button,id)
+{
+   var n = document.getElementById(id).style;
+   if (n.display == "none")
+   {
+    button.src = "minus.gif";
+    n.display = "block";
+   }
+   else
+   {
+    button.src = "plus.gif";
+    n.display = "none";
+   }
+}
+
+
+var max_results = 75; // 50 is not enough to search for map in the base libraries
+var shown_range = null;
+var last_search = null;
+
+function quick_search()
+{
+    perform_search(false);
+}
+
+function full_search()
+{
+    perform_search(true);
+}
+
+
+function perform_search(full)
+{
+    var text = document.getElementById("searchbox").value.toLowerCase();
+    if (text == last_search && !full) return;
+    last_search = text;
+    
+    var table = document.getElementById("indexlist");
+    var status = document.getElementById("searchmsg");
+    var children = table.firstChild.childNodes;
+    
+    // first figure out the first node with the prefix
+    var first = bisect(-1);
+    var last = (first == -1 ? -1 : bisect(1));
+
+    if (first == -1)
+    {
+        table.className = "";
+        status.innerHTML = "No results found, displaying all";
+    }
+    else if (first == 0 && last == children.length - 1)
+    {
+        table.className = "";
+        status.innerHTML = "";
+    }
+    else if (last - first >= max_results && !full)
+    {
+        table.className = "";
+        status.innerHTML = "More than " + max_results + ", press Search to display";
+    }
+    else
+    {
+        // decide what you need to clear/show
+        if (shown_range)
+            setclass(shown_range[0], shown_range[1], "indexrow");
+        setclass(first, last, "indexshow");
+        shown_range = [first, last];
+        table.className = "indexsearch";
+        status.innerHTML = "";
+    }
+
+    
+    function setclass(first, last, status)
+    {
+        for (var i = first; i <= last; i++)
+        {
+            children[i].className = status;
+        }
+    }
+    
+    
+    // do a binary search, treating 0 as ...
+    // return either -1 (no 0's found) or location of most far match
+    function bisect(dir)
+    {
+        var first = 0, finish = children.length - 1;
+        var mid, success = false;
+
+        while (finish - first > 3)
+        {
+            mid = Math.floor((finish + first) / 2);
+
+            var i = checkitem(mid);
+            if (i == 0) i = dir;
+            if (i == -1)
+                finish = mid;
+            else
+                first = mid;
+        }
+        var a = (dir == 1 ? first : finish);
+        var b = (dir == 1 ? finish : first);
+        for (var i = b; i != a - dir; i -= dir)
+        {
+            if (checkitem(i) == 0) return i;
+        }
+        return -1;
+    }    
+    
+    
+    // from an index, decide what the result is
+    // 0 = match, -1 is lower, 1 is higher
+    function checkitem(i)
+    {
+        var s = getitem(i).toLowerCase().substr(0, text.length);
+        if (s == text) return 0;
+        else return (s > text ? -1 : 1);
+    }
+    
+    
+    // from an index, get its string
+    // this abstracts over alternates
+    function getitem(i)
+    {
+        for ( ; i >= 0; i--)
+        {
+            var s = children[i].firstChild.firstChild.data;
+            if (s.indexOf(' ') == -1)
+                return s;
+        }
+        return ""; // should never be reached
+    }
+}
addfile ./doc/html/unboxed-containers/haddock.css
hunk ./doc/html/unboxed-containers/haddock.css 1
+/* -------- Global things --------- */
+
+BODY { 
+  background-color: #ffffff;
+  color: #000000;
+  font-family: sans-serif;
+  } 
+
+A:link    { color: #0000e0; text-decoration: none }
+A:visited { color: #0000a0; text-decoration: none }
+A:hover   { background-color: #e0e0ff; text-decoration: none }
+
+TABLE.vanilla {
+  width: 100%;
+  border-width: 0px;
+  /* I can't seem to specify cellspacing or cellpadding properly using CSS... */
+}
+
+TABLE.vanilla2 {
+  border-width: 0px;
+}
+
+/* <TT> font is a little too small in MSIE */
+TT  { font-size: 100%; }
+PRE { font-size: 100%; }
+
+LI P { margin: 0pt } 
+
+TD {
+  border-width: 0px;
+}
+
+TABLE.narrow {
+  border-width: 0px;
+}
+
+TD.s8  {  height: 8px;  }
+TD.s15 {  height: 15px; }
+
+SPAN.keyword { text-decoration: underline; }
+
+/* Resize the buttom image to match the text size */
+IMG.coll { width : 0.75em; height: 0.75em; margin-bottom: 0; margin-right: 0.5em }
+
+/* --------- Contents page ---------- */
+
+DIV.node {
+  padding-left: 3em;
+}
+
+DIV.cnode {
+  padding-left: 1.75em;
+}
+
+SPAN.pkg {
+  position: absolute;
+  left: 50em;
+}
+
+/* --------- Documentation elements ---------- */
+
+TD.children {
+  padding-left: 25px;
+  }
+
+TD.synopsis {
+  padding: 2px;
+  background-color: #f0f0f0;
+  font-family: monospace
+ }
+
+TD.decl { 
+  padding: 2px;
+  background-color: #f0f0f0; 
+  font-family: monospace;
+  vertical-align: top;
+  }
+
+TD.topdecl {
+  padding: 2px;
+  background-color: #f0f0f0;
+  font-family: monospace;
+  vertical-align: top;
+}
+
+TABLE.declbar {
+  border-spacing: 0px;
+ }
+
+TD.declname {
+  width: 100%;
+ }
+
+TD.declbut {
+  padding-left: 5px;
+  padding-right: 5px;
+  border-left-width: 1px;
+  border-left-color: #000099;
+  border-left-style: solid;
+  white-space: nowrap;
+  font-size: small;
+ }
+
+/* 
+  arg is just like decl, except that wrapping is not allowed.  It is
+  used for function and constructor arguments which have a text box
+  to the right, where if wrapping is allowed the text box squashes up
+  the declaration by wrapping it.
+*/
+TD.arg { 
+  padding: 2px;
+  background-color: #f0f0f0; 
+  font-family: monospace;
+  vertical-align: top;
+  white-space: nowrap;
+  }
+
+TD.recfield { padding-left: 20px }
+
+TD.doc  { 
+  padding-top: 2px;
+  padding-left: 10px;
+  }
+
+TD.ndoc  { 
+  padding: 2px;
+  }
+
+TD.rdoc  { 
+  padding: 2px;
+  padding-left: 10px;
+  width: 100%;
+  }
+
+TD.body  { 
+  padding-left: 10px
+  }
+
+TD.pkg {
+  width: 100%;
+  padding-left: 10px
+}
+
+TABLE.indexsearch TR.indexrow {
+  display: none;
+}
+TABLE.indexsearch TR.indexshow {
+  display: table-row;
+}
+
+TD.indexentry {
+  vertical-align: top;
+  padding-right: 10px
+  }
+
+TD.indexannot {
+  vertical-align: top;
+  padding-left: 20px;
+  white-space: nowrap
+  }
+
+TD.indexlinks {
+  width: 100%
+  }
+
+/* ------- Section Headings ------- */
+
+TD.section1 {
+  padding-top: 15px;
+  font-weight: bold;
+  font-size: 150%
+  }
+
+TD.section2 {
+  padding-top: 10px;
+  font-weight: bold;
+  font-size: 130%
+  }
+
+TD.section3 {
+  padding-top: 5px;
+  font-weight: bold;
+  font-size: 110%
+  }
+
+TD.section4 {
+  font-weight: bold;
+  font-size: 100%
+  }
+
+/* -------------- The title bar at the top of the page */
+
+TD.infohead {
+  color: #ffffff;
+  font-weight: bold;
+  padding-right: 10px;
+  text-align: left;
+}
+
+TD.infoval {
+  color: #ffffff;
+  padding-right: 10px;
+  text-align: left;
+}
+
+TD.topbar {
+  background-color: #000099;
+  padding: 5px;
+}
+
+TD.title {
+  color: #ffffff;
+  padding-left: 10px;
+  width: 100%
+  }
+
+TD.topbut {
+  padding-left: 5px;
+  padding-right: 5px;
+  border-left-width: 1px;
+  border-left-color: #ffffff;
+  border-left-style: solid;
+  white-space: nowrap;
+  }
+
+TD.topbut A:link {
+  color: #ffffff
+  }
+
+TD.topbut A:visited {
+  color: #ffff00
+  }
+
+TD.topbut A:hover {
+  background-color: #6060ff;
+  }
+
+TD.topbut:hover {
+  background-color: #6060ff
+  }
+
+TD.modulebar { 
+  background-color: #0077dd;
+  padding: 5px;
+  border-top-width: 1px;
+  border-top-color: #ffffff;
+  border-top-style: solid;
+  }
+
+/* --------- The page footer --------- */
+
+TD.botbar {
+  background-color: #000099;
+  color: #ffffff;
+  padding: 5px
+  }
+TD.botbar A:link {
+  color: #ffffff;
+  text-decoration: underline
+  }
+TD.botbar A:visited {
+  color: #ffff00
+  }
+TD.botbar A:hover {
+  background-color: #6060ff
+  }
+
addfile ./doc/html/unboxed-containers/haskell_icon.gif
binary ./doc/html/unboxed-containers/haskell_icon.gif
oldhex
*
newhex
*47494638376110001000f70f00000000800000008000808000000080800080008080c0c0c08080
*80ff000000ff00ffff000000ffff00ff00ffffffffff0000000000000000000000000000000000
*000000000000000000000000000000000000000000000000000000000000000000000000000000
*000000000000000000000000000000000000000000000000000000000000000000000000000000
*000000000000000000000000000000000000000000000000000000000000000000000000000000
*000000000000000000000000000000000000000000000000000000000000000000000000000000
*000000000000000000000000000000000000000000000000000000000000000000000000000000
*000000000000000000000000000000000000000000000000000000000000000000000000000000
*000000000000000000000000000000000000000000000000000000000000000000000000000000
*000000000000000000000000000000000000000000000000000000000000000000000000000000
*000000000000000000000000000000000000000000000000000000000000000000000000000000
*000000000000000000000000000000000000000000000000000000000000000000000000000000
*000000000000000000000000000000000000000000000000000000000000000000000000000000
*000000000000000000000000000000000000000000000000000000000000000000000000000000
*000000000000000000000000000000000000000000000000000000000000000000000000000000
*000000000000000000000000000000000000000000000000000000000000000000000000000000
*000000000000000000000000000000000000000000000000000000000000000000000000000000
*000000000000000000000000000000000000000000000000000000000000000000000000000000
*000000000000000000000000000000000000000000000000000000000000000000000000000000
*000000000000000000000000000000000000000000000000000000000000000000000000000000
*0021f90401000000002c000000001000100007086c0001007840b0a0418202073e38b0b021c387
*07143e2440c0a143040e091cd0787021c686151f84347800e343901d4b12646870e44a930d0952
*3ca832a6cc990555b2bc2992e4c79d3847ea2c88b3a7c89a2c8b8aa43874e941a60810003840b5
*aa55aa511346ddca75abc080003b
addfile ./doc/html/unboxed-containers/index.html
hunk ./doc/html/unboxed-containers/index.html 1
+<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd">
+<!--Rendered using the Haskell Html Library v0.2-->
+<HTML
+><HEAD
+><META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=UTF-8"
+><TITLE
+>unboxed-containers-0.0.0: Self-optimizing unboxed sets using view patterns and data families</TITLE
+><LINK HREF="haddock.css" REL="stylesheet" TYPE="text/css"
+><SCRIPT SRC="haddock-util.js" TYPE="text/javascript"
+></SCRIPT
+></HEAD
+><BODY
+><TABLE CLASS="vanilla" CELLSPACING="0" CELLPADDING="0"
+><TR
+><TD CLASS="topbar"
+><TABLE CLASS="vanilla" CELLSPACING="0" CELLPADDING="0"
+><TR
+><TD
+><IMG SRC="haskell_icon.gif" WIDTH="16" HEIGHT="16" ALT=" "
+></TD
+><TD CLASS="title"
+>unboxed-containers-0.0.0: Self-optimizing unboxed sets using view patterns and data families</TD
+><TD CLASS="topbut"
+><A HREF="index.html"
+>Contents</A
+></TD
+><TD CLASS="topbut"
+><A HREF="doc-index.html"
+>Index</A
+></TD
+></TR
+></TABLE
+></TD
+></TR
+><TR
+><TD CLASS="section1"
+>unboxed-containers-0.0.0: Self-optimizing unboxed sets using view patterns and data families</TD
+></TR
+><TR
+><TD CLASS="doc"
+>Self-optimizing unboxed sets using view patterns and data families
+</TD
+></TR
+><TR
+><TD CLASS="section1"
+>Modules</TD
+></TR
+><TR
+><TD
+><TABLE CLASS="vanilla2" CELLSPACING="0" CELLPADDING="0"
+><TR
+><TD STYLE="width: 50em"
+><IMG SRC="minus.gif" CLASS="coll" ONCLICK="toggle(this,'n:0')" ALT="show/hide"
+>Data</TD
+><TD
+></TD
+><TD
+></TD
+></TR
+><TR
+><TD STYLE="padding: 0; padding-left: 2em" COLSPAN="3"
+><TABLE CLASS="vanilla2" CELLSPACING="0" CELLPADDING="0" ID="n:0" STYLE="display:block;"
+><TR
+><TD STYLE="width: 48em"
+><IMG SRC="minus.gif" CLASS="coll" ONCLICK="toggle(this,'n:1')" ALT="show/hide"
+>Set</TD
+><TD
+></TD
+><TD
+></TD
+></TR
+><TR
+><TD STYLE="padding: 0; padding-left: 2em" COLSPAN="3"
+><TABLE CLASS="vanilla2" CELLSPACING="0" CELLPADDING="0" ID="n:1" STYLE="display:block;"
+><TR
+><TD STYLE="padding-left: 1.25em;width: 46em"
+><A HREF="Data-Set-Unboxed.html"
+>Data.Set.Unboxed</A
+></TD
+><TD
+></TD
+><TD
+></TD
+></TR
+></TABLE
+></TD
+></TR
+></TABLE
+></TD
+></TR
+></TABLE
+></TD
+></TR
+><TR
+><TD CLASS="s15"
+></TD
+></TR
+><TR
+><TD CLASS="botbar"
+>Produced by <A HREF="http://www.haskell.org/haddock/"
+>Haddock</A
+> version 2.3.0</TD
+></TR
+></TABLE
+></BODY
+></HTML
+>
addfile ./doc/html/unboxed-containers/minus.gif
binary ./doc/html/unboxed-containers/minus.gif
oldhex
*
newhex
*47494638396109000900910000fefefe8282820202020000002c00000000090009000002118c8f
*a00bc6eb5e0b40583b6596f1a11f14003b
addfile ./doc/html/unboxed-containers/plus.gif
binary ./doc/html/unboxed-containers/plus.gif
oldhex
*
newhex
*47494638396109000900910000fefefe8282820202020000002c00000000090009000002148c8f
*a00bb6b29c82ca897b5b7871cfce74085200003b
adddir ./doc/html/unboxed-containers/src
addfile ./doc/html/unboxed-containers/src/Data-Set-Unboxed.html
hunk ./doc/html/unboxed-containers/src/Data-Set-Unboxed.html 1
+<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
+<html>
+<head>
+<!-- Generated by HsColour, http://www.cs.york.ac.uk/fp/darcs/hscolour/ -->
+<title>Data/Set/Unboxed.hs</title>
+<link type='text/css' rel='stylesheet' href='hscolour.css' />
+</head>
+<body>
+<pre><a name="line-1"></a><span class='hs-comment'>{-# LANGUAGE TypeFamilies, CPP, ViewPatterns, MagicHash, UnboxedTuples, PatternGuards #-}</span>
+<a name="line-2"></a><span class='hs-comment'>{-# OPTIONS_GHC -fno-warn-overlapping-patterns #-}</span>
+<a name="line-3"></a>
+<a name="line-4"></a><span class='hs-comment'>{------------------------------------------------------------------------------
+<a name="line-5"></a>-- |
+<a name="line-6"></a>-- Module      :  Data.Set.Unboxed
+<a name="line-7"></a>-- Copyright   :  (c) Edward Kmett 2009
+<a name="line-8"></a>--                (c) Daan Leijen 2002
+<a name="line-9"></a>-- License     :  BSD3
+<a name="line-10"></a>-- Maintainer  :  ekmett@gmail.com
+<a name="line-11"></a>-- Stability   :  experimental
+<a name="line-12"></a>-- Portability :  non-portable (type families, view patterns, unboxed tuples)
+<a name="line-13"></a>--
+<a name="line-14"></a>-- An efficient implementation of sets.
+<a name="line-15"></a>--
+<a name="line-16"></a>-- Since many function names (but not the type name) clash with
+<a name="line-17"></a>-- "Prelude" names, this module is usually imported @qualified@, e.g.
+<a name="line-18"></a>--
+<a name="line-19"></a>-- &gt;  import Data.Set.Unboxed (USet)
+<a name="line-20"></a>-- &gt;  import qualified Data.Set.Unboxed as USet
+<a name="line-21"></a>--
+<a name="line-22"></a>-- The implementation of 'USet' is based on /size balanced/ binary trees (or
+<a name="line-23"></a>-- trees of /bounded balance/) as described by:
+<a name="line-24"></a>--
+<a name="line-25"></a>--    * Stephen Adams, \"/Efficient sets: a balancing act/\",
+<a name="line-26"></a>--  Journal of Functional Programming 3(4):553-562, October 1993,
+<a name="line-27"></a>--  &lt;<a href="http://www.swiss.ai.mit.edu/~adams/BB/">http://www.swiss.ai.mit.edu/~adams/BB/</a>&gt;.
+<a name="line-28"></a>--
+<a name="line-29"></a>--    * J. Nievergelt and E.M. Reingold,
+<a name="line-30"></a>--  \"/Binary search trees of bounded balance/\",
+<a name="line-31"></a>--  SIAM journal of computing 2(1), March 1973.
+<a name="line-32"></a>--
+<a name="line-33"></a>-- Note that the implementation is /left-biased/ -- the elements of a
+<a name="line-34"></a>-- first argument are always preferred to the second, for example in
+<a name="line-35"></a>-- 'union' or 'insert'.  Of course, left-biasing can only be observed
+<a name="line-36"></a>-- when equality is an equivalence relation instead of structural
+<a name="line-37"></a>-- equality.
+<a name="line-38"></a>--
+<a name="line-39"></a>-- Modified from "Data.Set" to use type families for automatic unboxing
+<a name="line-40"></a>-----------------------------------------------------------------------------
+<a name="line-41"></a>-}</span>
+<a name="line-42"></a>
+<a name="line-43"></a><span class='hs-keyword'>module</span> <span class='hs-conid'>Data</span><span class='hs-varop'>.</span><span class='hs-conid'>Set</span><span class='hs-varop'>.</span><span class='hs-conid'>Unboxed</span> <span class='hs-layout'>(</span> 
+<a name="line-44"></a>            <span class='hs-comment'>-- * Set type</span>
+<a name="line-45"></a>              <span class='hs-conid'>USet</span>          <span class='hs-comment'>-- instance Eq,Ord,Show,Read,Data,Typeable</span>
+<a name="line-46"></a>            <span class='hs-layout'>,</span> <span class='hs-conid'>US</span>
+<a name="line-47"></a>            <span class='hs-layout'>,</span> <span class='hs-conid'>Boxed</span><span class='hs-layout'>(</span><span class='hs-conid'>Boxed</span><span class='hs-layout'>)</span>
+<a name="line-48"></a>
+<a name="line-49"></a>            <span class='hs-comment'>-- * Operators</span>
+<a name="line-50"></a>            <span class='hs-layout'>,</span> <span class='hs-layout'>(</span><span class='hs-varop'>\\</span><span class='hs-layout'>)</span>
+<a name="line-51"></a>
+<a name="line-52"></a>            <span class='hs-comment'>-- * Query</span>
+<a name="line-53"></a>            <span class='hs-layout'>,</span> <span class='hs-varid'>null</span>
+<a name="line-54"></a>            <span class='hs-layout'>,</span> <span class='hs-varid'>size</span>
+<a name="line-55"></a>            <span class='hs-layout'>,</span> <span class='hs-varid'>member</span>
+<a name="line-56"></a>            <span class='hs-layout'>,</span> <span class='hs-varid'>notMember</span>
+<a name="line-57"></a>            <span class='hs-layout'>,</span> <span class='hs-varid'>isSubsetOf</span>
+<a name="line-58"></a>            <span class='hs-layout'>,</span> <span class='hs-varid'>isProperSubsetOf</span>
+<a name="line-59"></a>            
+<a name="line-60"></a>            <span class='hs-comment'>-- * Construction</span>
+<a name="line-61"></a>            <span class='hs-layout'>,</span> <span class='hs-varid'>empty</span>
+<a name="line-62"></a>            <span class='hs-layout'>,</span> <span class='hs-varid'>singleton</span>
+<a name="line-63"></a>            <span class='hs-layout'>,</span> <span class='hs-varid'>insert</span>
+<a name="line-64"></a>            <span class='hs-layout'>,</span> <span class='hs-varid'>delete</span>
+<a name="line-65"></a>            
+<a name="line-66"></a>            <span class='hs-comment'>-- * Combine</span>
+<a name="line-67"></a>            <span class='hs-layout'>,</span> <span class='hs-varid'>union</span><span class='hs-layout'>,</span> <span class='hs-varid'>unions</span>
+<a name="line-68"></a>            <span class='hs-layout'>,</span> <span class='hs-varid'>difference</span>
+<a name="line-69"></a>            <span class='hs-layout'>,</span> <span class='hs-varid'>intersection</span>
+<a name="line-70"></a>            
+<a name="line-71"></a>            <span class='hs-comment'>-- * Filter</span>
+<a name="line-72"></a>            <span class='hs-layout'>,</span> <span class='hs-varid'>filter</span>
+<a name="line-73"></a>            <span class='hs-layout'>,</span> <span class='hs-varid'>partition</span>
+<a name="line-74"></a>            <span class='hs-layout'>,</span> <span class='hs-varid'>split</span>
+<a name="line-75"></a>            <span class='hs-layout'>,</span> <span class='hs-varid'>splitMember</span>
+<a name="line-76"></a>
+<a name="line-77"></a>            <span class='hs-comment'>-- * Map</span>
+<a name="line-78"></a>            <span class='hs-layout'>,</span> <span class='hs-varid'>map</span>
+<a name="line-79"></a>            <span class='hs-layout'>,</span> <span class='hs-varid'>mapMonotonic</span>
+<a name="line-80"></a>
+<a name="line-81"></a>            <span class='hs-comment'>-- * Fold</span>
+<a name="line-82"></a>            <span class='hs-layout'>,</span> <span class='hs-varid'>fold</span>
+<a name="line-83"></a>
+<a name="line-84"></a>            <span class='hs-comment'>-- * Min\/Max</span>
+<a name="line-85"></a>            <span class='hs-layout'>,</span> <span class='hs-varid'>findMin</span>
+<a name="line-86"></a>            <span class='hs-layout'>,</span> <span class='hs-varid'>findMax</span>
+<a name="line-87"></a>            <span class='hs-layout'>,</span> <span class='hs-varid'>deleteMin</span>
+<a name="line-88"></a>            <span class='hs-layout'>,</span> <span class='hs-varid'>deleteMax</span>
+<a name="line-89"></a>            <span class='hs-layout'>,</span> <span class='hs-varid'>deleteFindMin</span>
+<a name="line-90"></a>            <span class='hs-layout'>,</span> <span class='hs-varid'>deleteFindMax</span>
+<a name="line-91"></a>            <span class='hs-layout'>,</span> <span class='hs-varid'>maxView</span>
+<a name="line-92"></a>            <span class='hs-layout'>,</span> <span class='hs-varid'>minView</span>
+<a name="line-93"></a>
+<a name="line-94"></a>            <span class='hs-comment'>-- * Conversion</span>
+<a name="line-95"></a>
+<a name="line-96"></a>            <span class='hs-comment'>-- ** List</span>
+<a name="line-97"></a>            <span class='hs-layout'>,</span> <span class='hs-varid'>elems</span>
+<a name="line-98"></a>            <span class='hs-layout'>,</span> <span class='hs-varid'>toList</span>
+<a name="line-99"></a>            <span class='hs-layout'>,</span> <span class='hs-varid'>fromList</span>
+<a name="line-100"></a>            
+<a name="line-101"></a>            <span class='hs-comment'>-- ** Ordered list</span>
+<a name="line-102"></a>            <span class='hs-layout'>,</span> <span class='hs-varid'>toAscList</span>
+<a name="line-103"></a>            <span class='hs-layout'>,</span> <span class='hs-varid'>fromAscList</span>
+<a name="line-104"></a>            <span class='hs-layout'>,</span> <span class='hs-varid'>fromDistinctAscList</span>
+<a name="line-105"></a>                        
+<a name="line-106"></a>            <span class='hs-comment'>-- * Debugging</span>
+<a name="line-107"></a>            <span class='hs-layout'>,</span> <span class='hs-varid'>showTree</span>
+<a name="line-108"></a>            <span class='hs-layout'>,</span> <span class='hs-varid'>showTreeWith</span>
+<a name="line-109"></a>            <span class='hs-layout'>,</span> <span class='hs-varid'>valid</span>
+<a name="line-110"></a>            <span class='hs-layout'>)</span> <span class='hs-keyword'>where</span>
+<a name="line-111"></a>
+<a name="line-112"></a><span class='hs-keyword'>import</span> <span class='hs-conid'>Prelude</span> <span class='hs-varid'>hiding</span> <span class='hs-layout'>(</span><span class='hs-varid'>filter</span><span class='hs-layout'>,</span><span class='hs-varid'>foldr</span><span class='hs-layout'>,</span><span class='hs-varid'>null</span><span class='hs-layout'>,</span><span class='hs-varid'>map</span><span class='hs-layout'>)</span>
+<a name="line-113"></a><span class='hs-keyword'>import</span> <span class='hs-keyword'>qualified</span> <span class='hs-conid'>Data</span><span class='hs-varop'>.</span><span class='hs-conid'>List</span> <span class='hs-keyword'>as</span> <span class='hs-conid'>List</span>
+<a name="line-114"></a><span class='hs-keyword'>import</span> <span class='hs-conid'>Data</span><span class='hs-varop'>.</span><span class='hs-conid'>Monoid</span> <span class='hs-layout'>(</span><span class='hs-conid'>Monoid</span><span class='hs-layout'>(</span><span class='hs-keyglyph'>..</span><span class='hs-layout'>)</span><span class='hs-layout'>)</span>
+<a name="line-115"></a><span class='hs-keyword'>import</span> <span class='hs-conid'>Data</span><span class='hs-varop'>.</span><span class='hs-conid'>Word</span>
+<a name="line-116"></a><span class='hs-keyword'>import</span> <span class='hs-conid'>Data</span><span class='hs-varop'>.</span><span class='hs-conid'>Int</span>
+<a name="line-117"></a>
+<a name="line-118"></a><span class='hs-comment'>{-
+<a name="line-119"></a>-- just for testing
+<a name="line-120"></a>import Test.QuickCheck 
+<a name="line-121"></a>import Data.List (nub,sort)
+<a name="line-122"></a>import qualified Data.List as List
+<a name="line-123"></a>-}</span>
+<a name="line-124"></a>
+<a name="line-125"></a><span class='hs-cpp'>#if __GLASGOW_HASKELL__</span>
+<a name="line-126"></a><span class='hs-keyword'>import</span> <span class='hs-conid'>Text</span><span class='hs-varop'>.</span><span class='hs-conid'>Read</span>
+<a name="line-127"></a><span class='hs-cpp'>#endif</span>
+<a name="line-128"></a>
+<a name="line-129"></a><span class='hs-comment'>{--------------------------------------------------------------------
+<a name="line-130"></a>  Operators
+<a name="line-131"></a>--------------------------------------------------------------------}</span>
+<a name="line-132"></a><span class='hs-keyword'>infixl</span> <span class='hs-num'>9</span> <span class='hs-varop'>\\</span> <span class='hs-comment'>--</span>
+<a name="line-133"></a>
+<a name="line-134"></a><a name="\\"></a><span class='hs-comment'>-- | /O(n+m)/. See 'difference'.</span>
+<a name="line-135"></a><span class='hs-layout'>(</span><span class='hs-varop'>\\</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>::</span> <span class='hs-layout'>(</span><span class='hs-conid'>US</span> <span class='hs-varid'>a</span><span class='hs-layout'>,</span> <span class='hs-conid'>Ord</span> <span class='hs-varid'>a</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>USet</span> <span class='hs-varid'>a</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-conid'>USet</span> <span class='hs-varid'>a</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-conid'>USet</span> <span class='hs-varid'>a</span>
+<a name="line-136"></a><a name="m1"></a><span class='hs-definition'>m1</span> <span class='hs-varop'>\\</span> <span class='hs-varid'>m2</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>difference</span> <span class='hs-varid'>m1</span> <span class='hs-varid'>m2</span>
+<a name="line-137"></a>
+<a name="line-138"></a><a name="Size"></a><span class='hs-comment'>{--------------------------------------------------------------------
+<a name="line-139"></a>  Sets are size balanced trees
+<a name="line-140"></a>--------------------------------------------------------------------}</span>
+<a name="line-141"></a><a name="Size"></a><span class='hs-keyword'>type</span> <span class='hs-conid'>Size</span>     <span class='hs-keyglyph'>=</span> <span class='hs-conid'>Int</span>
+<a name="line-142"></a>
+<a name="line-143"></a><a name="Set"></a><span class='hs-comment'>-- | A set of values @a@.</span>
+<a name="line-144"></a><a name="Set"></a><span class='hs-keyword'>data</span> <span class='hs-conid'>Set</span> <span class='hs-varid'>a</span>    <span class='hs-keyglyph'>=</span> <span class='hs-conid'>Tip</span> 
+<a name="line-145"></a>              <span class='hs-keyglyph'>|</span> <span class='hs-conid'>Bin</span> <span class='hs-comment'>{-# UNPACK #-}</span> <span class='hs-varop'>!</span><span class='hs-conid'>Size</span> <span class='hs-varop'>!</span><span class='hs-varid'>a</span> <span class='hs-varop'>!</span><span class='hs-layout'>(</span><span class='hs-conid'>USet</span> <span class='hs-varid'>a</span><span class='hs-layout'>)</span> <span class='hs-varop'>!</span><span class='hs-layout'>(</span><span class='hs-conid'>USet</span> <span class='hs-varid'>a</span><span class='hs-layout'>)</span> 
+<a name="line-146"></a>
+<a name="line-147"></a><a name="US"></a><span class='hs-comment'>-- smart unboxed types</span>
+<a name="line-148"></a><a name="US"></a><span class='hs-keyword'>class</span> <span class='hs-conid'>US</span> <span class='hs-varid'>a</span> <span class='hs-keyword'>where</span>
+<a name="line-149"></a>    <span class='hs-keyword'>data</span> <span class='hs-conid'>USet</span> <span class='hs-varid'>a</span>
+<a name="line-150"></a>
+<a name="line-151"></a>    <span class='hs-comment'>-- | Extract and rebox the specialized node format</span>
+<a name="line-152"></a>    <span class='hs-varid'>view</span> <span class='hs-keyglyph'>::</span> <span class='hs-conid'>USet</span> <span class='hs-varid'>a</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-conid'>Set</span> <span class='hs-varid'>a</span>
+<a name="line-153"></a>
+<a name="line-154"></a>    <span class='hs-comment'>-- | Apply the view to tip and bin continuations</span>
+<a name="line-155"></a>    <span class='hs-varid'>viewk</span> <span class='hs-keyglyph'>::</span> <span class='hs-varid'>b</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-layout'>(</span><span class='hs-conid'>Size</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-varid'>a</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-conid'>USet</span> <span class='hs-varid'>a</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-conid'>USet</span> <span class='hs-varid'>a</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-varid'>b</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-conid'>USet</span> <span class='hs-varid'>a</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-varid'>b</span>
+<a name="line-156"></a>    <span class='hs-varid'>viewk</span> <span class='hs-varid'>f</span> <span class='hs-varid'>k</span> <span class='hs-varid'>x</span> <span class='hs-keyglyph'>=</span> <span class='hs-keyword'>case</span> <span class='hs-varid'>view</span> <span class='hs-varid'>x</span> <span class='hs-keyword'>of</span>
+<a name="line-157"></a>        <span class='hs-conid'>Bin</span> <span class='hs-varid'>s</span> <span class='hs-varid'>i</span> <span class='hs-varid'>l</span> <span class='hs-varid'>r</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-varid'>k</span> <span class='hs-varid'>s</span> <span class='hs-varid'>i</span> <span class='hs-varid'>l</span> <span class='hs-varid'>r</span>
+<a name="line-158"></a>        <span class='hs-conid'>Tip</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-varid'>f</span>
+<a name="line-159"></a>
+<a name="line-160"></a>    <span class='hs-comment'>-- | View just the value and left and right child of a bin</span>
+<a name="line-161"></a>    <span class='hs-varid'>viewBin</span> <span class='hs-keyglyph'>::</span> <span class='hs-conid'>USet</span> <span class='hs-varid'>a</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-layout'>(</span><span class='hs-cpp'>#</span> <span class='hs-varid'>a</span><span class='hs-layout'>,</span> <span class='hs-conid'>USet</span> <span class='hs-varid'>a</span><span class='hs-layout'>,</span> <span class='hs-conid'>USet</span> <span class='hs-varid'>a</span> <span class='hs-cpp'>#</span><span class='hs-layout'>)</span>
+<a name="line-162"></a>    <span class='hs-varid'>viewBin</span> <span class='hs-varid'>x</span> <span class='hs-keyglyph'>=</span> <span class='hs-keyword'>case</span> <span class='hs-varid'>view</span> <span class='hs-varid'>x</span> <span class='hs-keyword'>of</span> 
+<a name="line-163"></a>        <span class='hs-conid'>Bin</span> <span class='hs-keyword'>_</span> <span class='hs-varid'>i</span> <span class='hs-varid'>l</span> <span class='hs-varid'>r</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-layout'>(</span><span class='hs-cpp'>#</span> <span class='hs-varid'>i</span><span class='hs-layout'>,</span> <span class='hs-varid'>l</span><span class='hs-layout'>,</span> <span class='hs-varid'>r</span> <span class='hs-cpp'>#</span><span class='hs-layout'>)</span>
+<a name="line-164"></a>        <span class='hs-conid'>Tip</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-varid'>error</span> <span class='hs-str'>"viewBin"</span>
+<a name="line-165"></a>
+<a name="line-166"></a>    <span class='hs-comment'>-- | /O(1)/. The number of elements in the set.</span>
+<a name="line-167"></a>    <span class='hs-varid'>size</span> <span class='hs-keyglyph'>::</span> <span class='hs-conid'>USet</span> <span class='hs-varid'>a</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-conid'>Size</span>
+<a name="line-168"></a>    <span class='hs-varid'>size</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>viewk</span> <span class='hs-num'>0</span> <span class='hs-varid'>size'</span> <span class='hs-keyword'>where</span> 
+<a name="line-169"></a>        <span class='hs-varid'>size'</span> <span class='hs-varid'>s</span> <span class='hs-keyword'>_</span> <span class='hs-keyword'>_</span> <span class='hs-keyword'>_</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>s</span>
+<a name="line-170"></a>
+<a name="line-171"></a>    <span class='hs-comment'>-- | /O(1)/. Is this the empty set?</span>
+<a name="line-172"></a>    <span class='hs-varid'>null</span> <span class='hs-keyglyph'>::</span> <span class='hs-conid'>USet</span> <span class='hs-varid'>a</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-conid'>Bool</span>
+<a name="line-173"></a>
+<a name="line-174"></a>    <span class='hs-comment'>-- | Smart tip constructor</span>
+<a name="line-175"></a>    <span class='hs-varid'>tip</span> <span class='hs-keyglyph'>::</span> <span class='hs-conid'>USet</span> <span class='hs-varid'>a</span>
+<a name="line-176"></a>
+<a name="line-177"></a>    <span class='hs-comment'>-- | Smart bin constructor</span>
+<a name="line-178"></a>    <span class='hs-varid'>bin</span> <span class='hs-keyglyph'>::</span> <span class='hs-conid'>Size</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-varid'>a</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-conid'>USet</span> <span class='hs-varid'>a</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-conid'>USet</span> <span class='hs-varid'>a</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-conid'>USet</span> <span class='hs-varid'>a</span>
+<a name="line-179"></a>
+<a name="line-180"></a><span class='hs-keyword'>instance</span> <span class='hs-layout'>(</span><span class='hs-conid'>US</span> <span class='hs-varid'>a</span><span class='hs-layout'>,</span> <span class='hs-conid'>Ord</span> <span class='hs-varid'>a</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>Monoid</span> <span class='hs-layout'>(</span><span class='hs-conid'>USet</span> <span class='hs-varid'>a</span><span class='hs-layout'>)</span> <span class='hs-keyword'>where</span>
+<a name="line-181"></a>    <span class='hs-varid'>mempty</span>  <span class='hs-keyglyph'>=</span> <span class='hs-varid'>empty</span>
+<a name="line-182"></a>    <span class='hs-varid'>mappend</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>union</span>
+<a name="line-183"></a>    <span class='hs-varid'>mconcat</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>unions</span>
+<a name="line-184"></a>
+<a name="line-185"></a><span class='hs-comment'>{-
+<a name="line-186"></a>instance US a =&gt; Generator (USet a) where
+<a name="line-187"></a>    type Elem (USet a) = a
+<a name="line-188"></a>    mapReduce _ (null -&gt; True) = mempty
+<a name="line-189"></a>    mapReduce f (view -&gt; Bin _s k l r) = mapReduce f l `mappend` f k `mappend` mapReduce f r
+<a name="line-190"></a>-}</span>
+<a name="line-191"></a>
+<a name="line-192"></a><a name="member"></a><span class='hs-comment'>{--------------------------------------------------------------------
+<a name="line-193"></a>  Query
+<a name="line-194"></a>--------------------------------------------------------------------}</span>
+<a name="line-195"></a><span class='hs-comment'>-- | /O(log n)/. Is the element in the set?</span>
+<a name="line-196"></a><span class='hs-definition'>member</span> <span class='hs-keyglyph'>::</span> <span class='hs-layout'>(</span><span class='hs-conid'>US</span> <span class='hs-varid'>a</span><span class='hs-layout'>,</span> <span class='hs-conid'>Ord</span> <span class='hs-varid'>a</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-varid'>a</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-conid'>USet</span> <span class='hs-varid'>a</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-conid'>Bool</span>
+<a name="line-197"></a><span class='hs-definition'>member</span> <span class='hs-varid'>x</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>go</span> <span class='hs-keyword'>where</span>
+<a name="line-198"></a>    <span class='hs-varid'>go</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>viewk</span> <span class='hs-conid'>False</span> <span class='hs-layout'>(</span><span class='hs-keyglyph'>\</span><span class='hs-keyword'>_</span> <span class='hs-varid'>y</span> <span class='hs-varid'>l</span> <span class='hs-varid'>r</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-keyword'>case</span> <span class='hs-varid'>compare</span> <span class='hs-varid'>x</span> <span class='hs-varid'>y</span> <span class='hs-keyword'>of</span>
+<a name="line-199"></a>            <span class='hs-conid'>LT</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-varid'>go</span> <span class='hs-varid'>l</span>
+<a name="line-200"></a>            <span class='hs-conid'>GT</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-varid'>go</span> <span class='hs-varid'>r</span>
+<a name="line-201"></a>            <span class='hs-conid'>EQ</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-conid'>True</span><span class='hs-layout'>)</span>
+<a name="line-202"></a>
+<a name="line-203"></a><a name="notMember"></a><span class='hs-comment'>-- | /O(log n)/. Is the element not in the set?</span>
+<a name="line-204"></a><span class='hs-definition'>notMember</span> <span class='hs-keyglyph'>::</span> <span class='hs-layout'>(</span><span class='hs-conid'>US</span> <span class='hs-varid'>a</span><span class='hs-layout'>,</span> <span class='hs-conid'>Ord</span> <span class='hs-varid'>a</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-varid'>a</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-conid'>USet</span> <span class='hs-varid'>a</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-conid'>Bool</span>
+<a name="line-205"></a><span class='hs-definition'>notMember</span> <span class='hs-varid'>x</span> <span class='hs-varid'>t</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>not</span> <span class='hs-varop'>$</span> <span class='hs-varid'>member</span> <span class='hs-varid'>x</span> <span class='hs-varid'>t</span>
+<a name="line-206"></a>
+<a name="line-207"></a><a name="empty"></a><span class='hs-comment'>{--------------------------------------------------------------------
+<a name="line-208"></a>  Construction
+<a name="line-209"></a>--------------------------------------------------------------------}</span>
+<a name="line-210"></a><span class='hs-comment'>-- | /O(1)/. The empty set.</span>
+<a name="line-211"></a><span class='hs-definition'>empty</span> <span class='hs-keyglyph'>::</span> <span class='hs-conid'>US</span> <span class='hs-varid'>a</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>USet</span> <span class='hs-varid'>a</span>
+<a name="line-212"></a><span class='hs-definition'>empty</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>tip</span>
+<a name="line-213"></a>
+<a name="line-214"></a><a name="singleton"></a><span class='hs-comment'>-- | /O(1)/. Create a singleton set.</span>
+<a name="line-215"></a><span class='hs-definition'>singleton</span> <span class='hs-keyglyph'>::</span> <span class='hs-conid'>US</span> <span class='hs-varid'>a</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-varid'>a</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-conid'>USet</span> <span class='hs-varid'>a</span>
+<a name="line-216"></a><span class='hs-definition'>singleton</span> <span class='hs-varid'>x</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>bin</span> <span class='hs-num'>1</span> <span class='hs-varid'>x</span> <span class='hs-varid'>tip</span> <span class='hs-varid'>tip</span>
+<a name="line-217"></a>
+<a name="line-218"></a><a name="insert"></a><span class='hs-comment'>{--------------------------------------------------------------------
+<a name="line-219"></a>  Insertion, Deletion
+<a name="line-220"></a>--------------------------------------------------------------------}</span>
+<a name="line-221"></a><span class='hs-comment'>-- | /O(log n)/. Insert an element in a set.</span>
+<a name="line-222"></a><span class='hs-comment'>-- If the set already contains an element equal to the given value,</span>
+<a name="line-223"></a><span class='hs-comment'>-- it is replaced with the new value.</span>
+<a name="line-224"></a><span class='hs-definition'>insert</span> <span class='hs-keyglyph'>::</span> <span class='hs-layout'>(</span><span class='hs-conid'>US</span> <span class='hs-varid'>a</span><span class='hs-layout'>,</span> <span class='hs-conid'>Ord</span> <span class='hs-varid'>a</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-varid'>a</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-conid'>USet</span> <span class='hs-varid'>a</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-conid'>USet</span> <span class='hs-varid'>a</span>
+<a name="line-225"></a><span class='hs-definition'>insert</span> <span class='hs-varid'>x</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>go</span> <span class='hs-keyword'>where</span>
+<a name="line-226"></a>    <span class='hs-varid'>go</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>viewk</span> <span class='hs-layout'>(</span><span class='hs-varid'>singleton</span> <span class='hs-varid'>x</span><span class='hs-layout'>)</span> <span class='hs-layout'>(</span><span class='hs-keyglyph'>\</span><span class='hs-varid'>sz</span> <span class='hs-varid'>y</span> <span class='hs-varid'>l</span> <span class='hs-varid'>r</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-keyword'>case</span> <span class='hs-varid'>compare</span> <span class='hs-varid'>x</span> <span class='hs-varid'>y</span> <span class='hs-keyword'>of</span>
+<a name="line-227"></a>        <span class='hs-conid'>LT</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-varid'>balance</span> <span class='hs-varid'>y</span> <span class='hs-layout'>(</span><span class='hs-varid'>go</span> <span class='hs-varid'>l</span><span class='hs-layout'>)</span> <span class='hs-varid'>r</span>
+<a name="line-228"></a>        <span class='hs-conid'>GT</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-varid'>balance</span> <span class='hs-varid'>y</span> <span class='hs-varid'>l</span> <span class='hs-layout'>(</span><span class='hs-varid'>go</span> <span class='hs-varid'>r</span><span class='hs-layout'>)</span>
+<a name="line-229"></a>        <span class='hs-conid'>EQ</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-varid'>bin</span> <span class='hs-varid'>sz</span> <span class='hs-varid'>x</span> <span class='hs-varid'>l</span> <span class='hs-varid'>r</span><span class='hs-layout'>)</span>
+<a name="line-230"></a><span class='hs-comment'>{-# SPECIALIZE INLINE insert :: Int -&gt; USet Int -&gt; USet Int #-}</span>
+<a name="line-231"></a>
+<a name="line-232"></a><a name="delete"></a><span class='hs-comment'>-- | /O(log n)/. Delete an element from a set.</span>
+<a name="line-233"></a><span class='hs-definition'>delete</span> <span class='hs-keyglyph'>::</span> <span class='hs-layout'>(</span><span class='hs-conid'>US</span> <span class='hs-varid'>a</span><span class='hs-layout'>,</span> <span class='hs-conid'>Ord</span> <span class='hs-varid'>a</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-varid'>a</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-conid'>USet</span> <span class='hs-varid'>a</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-conid'>USet</span> <span class='hs-varid'>a</span>
+<a name="line-234"></a><span class='hs-definition'>delete</span> <span class='hs-varid'>x</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>go</span> <span class='hs-keyword'>where</span>
+<a name="line-235"></a>    <span class='hs-varid'>go</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>viewk</span> <span class='hs-varid'>tip</span> <span class='hs-varop'>$</span> <span class='hs-keyglyph'>\</span> <span class='hs-keyword'>_</span> <span class='hs-varid'>y</span> <span class='hs-varid'>l</span> <span class='hs-varid'>r</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-keyword'>case</span> <span class='hs-varid'>compare</span> <span class='hs-varid'>x</span> <span class='hs-varid'>y</span> <span class='hs-keyword'>of</span>
+<a name="line-236"></a>        <span class='hs-conid'>LT</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-varid'>balance</span> <span class='hs-varid'>y</span> <span class='hs-layout'>(</span><span class='hs-varid'>go</span> <span class='hs-varid'>l</span><span class='hs-layout'>)</span> <span class='hs-varid'>r</span>
+<a name="line-237"></a>        <span class='hs-conid'>GT</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-varid'>balance</span> <span class='hs-varid'>y</span> <span class='hs-varid'>l</span> <span class='hs-layout'>(</span><span class='hs-varid'>go</span> <span class='hs-varid'>r</span><span class='hs-layout'>)</span>
+<a name="line-238"></a>        <span class='hs-conid'>EQ</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-varid'>glue</span> <span class='hs-varid'>l</span> <span class='hs-varid'>r</span>
+<a name="line-239"></a>
+<a name="line-240"></a><a name="isProperSubsetOf"></a><span class='hs-comment'>{--------------------------------------------------------------------
+<a name="line-241"></a>  Subset
+<a name="line-242"></a>--------------------------------------------------------------------}</span>
+<a name="line-243"></a><span class='hs-comment'>-- | /O(n+m)/. Is this a proper subset? (ie. a subset but not equal).</span>
+<a name="line-244"></a><span class='hs-definition'>isProperSubsetOf</span> <span class='hs-keyglyph'>::</span> <span class='hs-layout'>(</span><span class='hs-conid'>US</span> <span class='hs-varid'>a</span><span class='hs-layout'>,</span> <span class='hs-conid'>Ord</span> <span class='hs-varid'>a</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>USet</span> <span class='hs-varid'>a</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-conid'>USet</span> <span class='hs-varid'>a</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-conid'>Bool</span>
+<a name="line-245"></a><span class='hs-definition'>isProperSubsetOf</span> <span class='hs-varid'>s1</span> <span class='hs-varid'>s2</span> <span class='hs-keyglyph'>=</span> <span class='hs-layout'>(</span><span class='hs-varid'>size</span> <span class='hs-varid'>s1</span> <span class='hs-varop'>&lt;</span> <span class='hs-varid'>size</span> <span class='hs-varid'>s2</span><span class='hs-layout'>)</span> <span class='hs-varop'>&amp;&amp;</span> <span class='hs-layout'>(</span><span class='hs-varid'>isSubsetOf</span> <span class='hs-varid'>s1</span> <span class='hs-varid'>s2</span><span class='hs-layout'>)</span>
+<a name="line-246"></a>
+<a name="line-247"></a><a name="isSubsetOf"></a><span class='hs-comment'>-- | /O(n+m)/. Is this a subset?</span>
+<a name="line-248"></a><span class='hs-comment'>-- @(s1 `isSubsetOf` s2)@ tells whether @s1@ is a subset of @s2@.</span>
+<a name="line-249"></a><span class='hs-definition'>isSubsetOf</span> <span class='hs-keyglyph'>::</span> <span class='hs-layout'>(</span><span class='hs-conid'>US</span> <span class='hs-varid'>a</span><span class='hs-layout'>,</span> <span class='hs-conid'>Ord</span> <span class='hs-varid'>a</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>USet</span> <span class='hs-varid'>a</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-conid'>USet</span> <span class='hs-varid'>a</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-conid'>Bool</span>
+<a name="line-250"></a><span class='hs-definition'>isSubsetOf</span> <span class='hs-varid'>t1</span> <span class='hs-varid'>t2</span> <span class='hs-keyglyph'>=</span> <span class='hs-layout'>(</span><span class='hs-varid'>size</span> <span class='hs-varid'>t1</span> <span class='hs-varop'>&lt;=</span> <span class='hs-varid'>size</span> <span class='hs-varid'>t2</span><span class='hs-layout'>)</span> <span class='hs-varop'>&amp;&amp;</span> <span class='hs-layout'>(</span><span class='hs-varid'>isSubsetOfX</span> <span class='hs-varid'>t1</span> <span class='hs-varid'>t2</span><span class='hs-layout'>)</span>
+<a name="line-251"></a>
+<a name="line-252"></a><a name="isSubsetOfX"></a><span class='hs-definition'>isSubsetOfX</span> <span class='hs-keyglyph'>::</span> <span class='hs-layout'>(</span><span class='hs-conid'>US</span> <span class='hs-varid'>a</span><span class='hs-layout'>,</span> <span class='hs-conid'>Ord</span> <span class='hs-varid'>a</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>USet</span> <span class='hs-varid'>a</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-conid'>USet</span> <span class='hs-varid'>a</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-conid'>Bool</span>
+<a name="line-253"></a><span class='hs-definition'>isSubsetOfX</span> <span class='hs-keyword'>_</span> <span class='hs-layout'>(</span><span class='hs-varid'>null</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-conid'>True</span><span class='hs-layout'>)</span>         <span class='hs-keyglyph'>=</span> <span class='hs-conid'>False</span>
+<a name="line-254"></a><span class='hs-definition'>isSubsetOfX</span> <span class='hs-layout'>(</span><span class='hs-varid'>null</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-conid'>True</span><span class='hs-layout'>)</span>  <span class='hs-keyword'>_</span>        <span class='hs-keyglyph'>=</span> <span class='hs-conid'>True</span>
+<a name="line-255"></a><span class='hs-definition'>isSubsetOfX</span> <span class='hs-layout'>(</span><span class='hs-varid'>view</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-conid'>Bin</span> <span class='hs-keyword'>_</span> <span class='hs-varid'>x</span> <span class='hs-varid'>l</span> <span class='hs-varid'>r</span><span class='hs-layout'>)</span> <span class='hs-varid'>t</span>  <span class='hs-keyglyph'>=</span> <span class='hs-varid'>found</span> <span class='hs-varop'>&amp;&amp;</span> <span class='hs-varid'>isSubsetOfX</span> <span class='hs-varid'>l</span> <span class='hs-varid'>lt</span> <span class='hs-varop'>&amp;&amp;</span> <span class='hs-varid'>isSubsetOfX</span> <span class='hs-varid'>r</span> <span class='hs-varid'>gt</span>
+<a name="line-256"></a>  <span class='hs-keyword'>where</span>
+<a name="line-257"></a>    <span class='hs-layout'>(</span><span class='hs-varid'>lt</span><span class='hs-layout'>,</span><span class='hs-varid'>found</span><span class='hs-layout'>,</span><span class='hs-varid'>gt</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>splitMember</span> <span class='hs-varid'>x</span> <span class='hs-varid'>t</span>
+<a name="line-258"></a>
+<a name="line-259"></a>
+<a name="line-260"></a><a name="findMin"></a><span class='hs-comment'>{--------------------------------------------------------------------
+<a name="line-261"></a>  Minimal, Maximal
+<a name="line-262"></a>--------------------------------------------------------------------}</span>
+<a name="line-263"></a><span class='hs-comment'>-- | /O(log n)/. The minimal element of a set.</span>
+<a name="line-264"></a><span class='hs-definition'>findMin</span> <span class='hs-keyglyph'>::</span> <span class='hs-conid'>US</span> <span class='hs-varid'>a</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>USet</span> <span class='hs-varid'>a</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-varid'>a</span>
+<a name="line-265"></a><span class='hs-definition'>findMin</span> <span class='hs-layout'>(</span><span class='hs-varid'>view</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-conid'>Bin</span> <span class='hs-keyword'>_</span> <span class='hs-varid'>x</span> <span class='hs-layout'>(</span><span class='hs-varid'>null</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-conid'>True</span><span class='hs-layout'>)</span> <span class='hs-keyword'>_</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>x</span>
+<a name="line-266"></a><span class='hs-definition'>findMin</span> <span class='hs-layout'>(</span><span class='hs-varid'>view</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-conid'>Bin</span> <span class='hs-keyword'>_</span> <span class='hs-keyword'>_</span> <span class='hs-varid'>l</span> <span class='hs-keyword'>_</span><span class='hs-layout'>)</span>   <span class='hs-keyglyph'>=</span> <span class='hs-varid'>findMin</span> <span class='hs-varid'>l</span>
+<a name="line-267"></a><span class='hs-definition'>findMin</span> <span class='hs-keyword'>_</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>error</span> <span class='hs-str'>"Set.findMin: empty set has no minimal element"</span>
+<a name="line-268"></a>
+<a name="line-269"></a><a name="findMax"></a><span class='hs-comment'>-- | /O(log n)/. The maximal element of a set.</span>
+<a name="line-270"></a><span class='hs-definition'>findMax</span> <span class='hs-keyglyph'>::</span> <span class='hs-conid'>US</span> <span class='hs-varid'>a</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>USet</span> <span class='hs-varid'>a</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-varid'>a</span>
+<a name="line-271"></a><span class='hs-definition'>findMax</span> <span class='hs-layout'>(</span><span class='hs-varid'>view</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-conid'>Bin</span> <span class='hs-keyword'>_</span> <span class='hs-varid'>x</span> <span class='hs-keyword'>_</span> <span class='hs-layout'>(</span><span class='hs-varid'>null</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-conid'>True</span><span class='hs-layout'>)</span><span class='hs-layout'>)</span>  <span class='hs-keyglyph'>=</span> <span class='hs-varid'>x</span>
+<a name="line-272"></a><span class='hs-definition'>findMax</span> <span class='hs-layout'>(</span><span class='hs-varid'>view</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-conid'>Bin</span> <span class='hs-keyword'>_</span> <span class='hs-keyword'>_</span> <span class='hs-keyword'>_</span> <span class='hs-varid'>r</span><span class='hs-layout'>)</span>    <span class='hs-keyglyph'>=</span> <span class='hs-varid'>findMax</span> <span class='hs-varid'>r</span>
+<a name="line-273"></a><span class='hs-definition'>findMax</span> <span class='hs-keyword'>_</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>error</span> <span class='hs-str'>"Set.findMax: empty set has no maximal element"</span>
+<a name="line-274"></a>
+<a name="line-275"></a><a name="deleteMin"></a><span class='hs-comment'>-- | /O(log n)/. Delete the minimal element.</span>
+<a name="line-276"></a><span class='hs-definition'>deleteMin</span> <span class='hs-keyglyph'>::</span> <span class='hs-conid'>US</span> <span class='hs-varid'>a</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>USet</span> <span class='hs-varid'>a</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-conid'>USet</span> <span class='hs-varid'>a</span>
+<a name="line-277"></a><span class='hs-definition'>deleteMin</span> <span class='hs-layout'>(</span><span class='hs-varid'>view</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-conid'>Bin</span> <span class='hs-keyword'>_</span> <span class='hs-keyword'>_</span> <span class='hs-layout'>(</span><span class='hs-varid'>null</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-conid'>True</span><span class='hs-layout'>)</span> <span class='hs-varid'>r</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>r</span>
+<a name="line-278"></a><span class='hs-definition'>deleteMin</span> <span class='hs-layout'>(</span><span class='hs-varid'>view</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-conid'>Bin</span> <span class='hs-keyword'>_</span> <span class='hs-varid'>x</span> <span class='hs-varid'>l</span> <span class='hs-varid'>r</span><span class='hs-layout'>)</span>   <span class='hs-keyglyph'>=</span> <span class='hs-varid'>balance</span> <span class='hs-varid'>x</span> <span class='hs-layout'>(</span><span class='hs-varid'>deleteMin</span> <span class='hs-varid'>l</span><span class='hs-layout'>)</span> <span class='hs-varid'>r</span>
+<a name="line-279"></a><span class='hs-definition'>deleteMin</span> <span class='hs-keyword'>_</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>tip</span>
+<a name="line-280"></a>
+<a name="line-281"></a><a name="deleteMax"></a><span class='hs-comment'>-- | /O(log n)/. Delete the maximal element.</span>
+<a name="line-282"></a><span class='hs-definition'>deleteMax</span> <span class='hs-keyglyph'>::</span> <span class='hs-conid'>US</span> <span class='hs-varid'>a</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>USet</span> <span class='hs-varid'>a</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-conid'>USet</span> <span class='hs-varid'>a</span>
+<a name="line-283"></a><span class='hs-definition'>deleteMax</span> <span class='hs-layout'>(</span><span class='hs-varid'>view</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-conid'>Bin</span> <span class='hs-keyword'>_</span> <span class='hs-keyword'>_</span> <span class='hs-varid'>l</span> <span class='hs-layout'>(</span><span class='hs-varid'>null</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-conid'>True</span><span class='hs-layout'>)</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>l</span>
+<a name="line-284"></a><span class='hs-definition'>deleteMax</span> <span class='hs-layout'>(</span><span class='hs-varid'>view</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-conid'>Bin</span> <span class='hs-keyword'>_</span> <span class='hs-varid'>x</span> <span class='hs-varid'>l</span> <span class='hs-varid'>r</span><span class='hs-layout'>)</span>   <span class='hs-keyglyph'>=</span> <span class='hs-varid'>balance</span> <span class='hs-varid'>x</span> <span class='hs-varid'>l</span> <span class='hs-layout'>(</span><span class='hs-varid'>deleteMax</span> <span class='hs-varid'>r</span><span class='hs-layout'>)</span>
+<a name="line-285"></a><span class='hs-definition'>deleteMax</span> <span class='hs-keyword'>_</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>tip</span>
+<a name="line-286"></a>
+<a name="line-287"></a><a name="unions"></a><span class='hs-comment'>{--------------------------------------------------------------------
+<a name="line-288"></a>  Union. 
+<a name="line-289"></a>--------------------------------------------------------------------}</span>
+<a name="line-290"></a><span class='hs-comment'>-- | The union of a list of sets: (@'unions' == 'foldl' 'union' 'empty'@).</span>
+<a name="line-291"></a><span class='hs-definition'>unions</span> <span class='hs-keyglyph'>::</span> <span class='hs-layout'>(</span><span class='hs-conid'>US</span> <span class='hs-varid'>a</span><span class='hs-layout'>,</span> <span class='hs-conid'>Ord</span> <span class='hs-varid'>a</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-keyglyph'>[</span><span class='hs-conid'>USet</span> <span class='hs-varid'>a</span><span class='hs-keyglyph'>]</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-conid'>USet</span> <span class='hs-varid'>a</span>
+<a name="line-292"></a><span class='hs-definition'>unions</span> <span class='hs-varid'>ts</span>
+<a name="line-293"></a>  <span class='hs-keyglyph'>=</span> <span class='hs-varid'>foldlStrict</span> <span class='hs-varid'>union</span> <span class='hs-varid'>empty</span> <span class='hs-varid'>ts</span>
+<a name="line-294"></a>
+<a name="line-295"></a>
+<a name="line-296"></a><a name="union"></a><span class='hs-comment'>-- | /O(n+m)/. The union of two sets, preferring the first set when</span>
+<a name="line-297"></a><span class='hs-comment'>-- equal elements are encountered.</span>
+<a name="line-298"></a><span class='hs-comment'>-- The implementation uses the efficient /hedge-union/ algorithm.</span>
+<a name="line-299"></a><span class='hs-comment'>-- Hedge-union is more efficient on (bigset `union` smallset).</span>
+<a name="line-300"></a><span class='hs-definition'>union</span> <span class='hs-keyglyph'>::</span> <span class='hs-layout'>(</span><span class='hs-conid'>US</span> <span class='hs-varid'>a</span><span class='hs-layout'>,</span> <span class='hs-conid'>Ord</span> <span class='hs-varid'>a</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>USet</span> <span class='hs-varid'>a</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-conid'>USet</span> <span class='hs-varid'>a</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-conid'>USet</span> <span class='hs-varid'>a</span>
+<a name="line-301"></a><span class='hs-definition'>union</span> <span class='hs-layout'>(</span><span class='hs-varid'>null</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-conid'>True</span><span class='hs-layout'>)</span> <span class='hs-varid'>t2</span>  <span class='hs-keyglyph'>=</span> <span class='hs-varid'>t2</span>
+<a name="line-302"></a><span class='hs-definition'>union</span> <span class='hs-varid'>t1</span> <span class='hs-layout'>(</span><span class='hs-varid'>null</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-conid'>True</span><span class='hs-layout'>)</span>  <span class='hs-keyglyph'>=</span> <span class='hs-varid'>t1</span>
+<a name="line-303"></a><span class='hs-definition'>union</span> <span class='hs-varid'>t1</span> <span class='hs-varid'>t2</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>hedgeUnion</span> <span class='hs-layout'>(</span><span class='hs-varid'>const</span> <span class='hs-conid'>LT</span><span class='hs-layout'>)</span> <span class='hs-layout'>(</span><span class='hs-varid'>const</span> <span class='hs-conid'>GT</span><span class='hs-layout'>)</span> <span class='hs-varid'>t1</span> <span class='hs-varid'>t2</span>
+<a name="line-304"></a>
+<a name="line-305"></a><a name="hedgeUnion"></a><span class='hs-definition'>hedgeUnion</span> <span class='hs-keyglyph'>::</span> <span class='hs-layout'>(</span><span class='hs-conid'>US</span> <span class='hs-varid'>a</span><span class='hs-layout'>,</span> <span class='hs-conid'>Ord</span> <span class='hs-varid'>a</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-layout'>(</span><span class='hs-varid'>a</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-conid'>Ordering</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-layout'>(</span><span class='hs-varid'>a</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-conid'>Ordering</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-conid'>USet</span> <span class='hs-varid'>a</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-conid'>USet</span> <span class='hs-varid'>a</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-conid'>USet</span> <span class='hs-varid'>a</span>
+<a name="line-306"></a><span class='hs-definition'>hedgeUnion</span> <span class='hs-keyword'>_</span>     <span class='hs-keyword'>_</span>     <span class='hs-varid'>t1</span> <span class='hs-layout'>(</span><span class='hs-varid'>null</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-conid'>True</span><span class='hs-layout'>)</span>                    <span class='hs-keyglyph'>=</span> <span class='hs-varid'>t1</span>
+<a name="line-307"></a><span class='hs-definition'>hedgeUnion</span> <span class='hs-varid'>cmplo</span> <span class='hs-varid'>cmphi</span> <span class='hs-layout'>(</span><span class='hs-varid'>null</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-conid'>True</span><span class='hs-layout'>)</span> <span class='hs-layout'>(</span><span class='hs-varid'>view</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-conid'>Bin</span> <span class='hs-keyword'>_</span> <span class='hs-varid'>x</span> <span class='hs-varid'>l</span> <span class='hs-varid'>r</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>join</span> <span class='hs-varid'>x</span> <span class='hs-layout'>(</span><span class='hs-varid'>filterGt</span> <span class='hs-varid'>cmplo</span> <span class='hs-varid'>l</span><span class='hs-layout'>)</span> <span class='hs-layout'>(</span><span class='hs-varid'>filterLt</span> <span class='hs-varid'>cmphi</span> <span class='hs-varid'>r</span><span class='hs-layout'>)</span>
+<a name="line-308"></a><span class='hs-definition'>hedgeUnion</span> <span class='hs-varid'>cmplo</span> <span class='hs-varid'>cmphi</span> <span class='hs-layout'>(</span><span class='hs-varid'>view</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-conid'>Bin</span> <span class='hs-keyword'>_</span> <span class='hs-varid'>x</span> <span class='hs-varid'>l</span> <span class='hs-varid'>r</span><span class='hs-layout'>)</span> <span class='hs-varid'>t2</span>            <span class='hs-keyglyph'>=</span> <span class='hs-varid'>join</span> <span class='hs-varid'>x</span> <span class='hs-layout'>(</span><span class='hs-varid'>hedgeUnion</span> <span class='hs-varid'>cmplo</span> <span class='hs-varid'>cmpx</span> <span class='hs-varid'>l</span> <span class='hs-layout'>(</span><span class='hs-varid'>trim</span> <span class='hs-varid'>cmplo</span> <span class='hs-varid'>cmpx</span> <span class='hs-varid'>t2</span><span class='hs-layout'>)</span><span class='hs-layout'>)</span> <span class='hs-layout'>(</span><span class='hs-varid'>hedgeUnion</span> <span class='hs-varid'>cmpx</span> <span class='hs-varid'>cmphi</span> <span class='hs-varid'>r</span> <span class='hs-layout'>(</span><span class='hs-varid'>trim</span> <span class='hs-varid'>cmpx</span> <span class='hs-varid'>cmphi</span> <span class='hs-varid'>t2</span><span class='hs-layout'>)</span><span class='hs-layout'>)</span>
+<a name="line-309"></a>  <span class='hs-keyword'>where</span>
+<a name="line-310"></a>    <span class='hs-varid'>cmpx</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>compare</span> <span class='hs-varid'>x</span>
+<a name="line-311"></a>
+<a name="line-312"></a><a name="difference"></a><span class='hs-comment'>{--------------------------------------------------------------------
+<a name="line-313"></a>  Difference
+<a name="line-314"></a>--------------------------------------------------------------------}</span>
+<a name="line-315"></a><span class='hs-comment'>-- | /O(n+m)/. Difference of two sets. </span>
+<a name="line-316"></a><span class='hs-comment'>-- The implementation uses an efficient /hedge/ algorithm comparable with /hedge-union/.</span>
+<a name="line-317"></a><span class='hs-definition'>difference</span> <span class='hs-keyglyph'>::</span> <span class='hs-layout'>(</span><span class='hs-conid'>US</span> <span class='hs-varid'>a</span><span class='hs-layout'>,</span> <span class='hs-conid'>Ord</span> <span class='hs-varid'>a</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>USet</span> <span class='hs-varid'>a</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-conid'>USet</span> <span class='hs-varid'>a</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-conid'>USet</span> <span class='hs-varid'>a</span>
+<a name="line-318"></a><span class='hs-definition'>difference</span> <span class='hs-layout'>(</span><span class='hs-varid'>null</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-conid'>True</span><span class='hs-layout'>)</span> <span class='hs-keyword'>_</span>   <span class='hs-keyglyph'>=</span> <span class='hs-varid'>tip</span>
+<a name="line-319"></a><span class='hs-definition'>difference</span> <span class='hs-varid'>t1</span> <span class='hs-layout'>(</span><span class='hs-varid'>null</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-conid'>True</span><span class='hs-layout'>)</span>  <span class='hs-keyglyph'>=</span> <span class='hs-varid'>t1</span>
+<a name="line-320"></a><span class='hs-definition'>difference</span> <span class='hs-varid'>t1</span> <span class='hs-varid'>t2</span>   <span class='hs-keyglyph'>=</span> <span class='hs-varid'>hedgeDiff</span> <span class='hs-layout'>(</span><span class='hs-varid'>const</span> <span class='hs-conid'>LT</span><span class='hs-layout'>)</span> <span class='hs-layout'>(</span><span class='hs-varid'>const</span> <span class='hs-conid'>GT</span><span class='hs-layout'>)</span> <span class='hs-varid'>t1</span> <span class='hs-varid'>t2</span>
+<a name="line-321"></a>
+<a name="line-322"></a><a name="hedgeDiff"></a><span class='hs-definition'>hedgeDiff</span> <span class='hs-keyglyph'>::</span> <span class='hs-layout'>(</span><span class='hs-conid'>US</span> <span class='hs-varid'>a</span><span class='hs-layout'>,</span> <span class='hs-conid'>Ord</span> <span class='hs-varid'>a</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-layout'>(</span><span class='hs-varid'>a</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-conid'>Ordering</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-layout'>(</span><span class='hs-varid'>a</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-conid'>Ordering</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-conid'>USet</span> <span class='hs-varid'>a</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-conid'>USet</span> <span class='hs-varid'>a</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-conid'>USet</span> <span class='hs-varid'>a</span>
+<a name="line-323"></a><span class='hs-definition'>hedgeDiff</span> <span class='hs-keyword'>_</span> <span class='hs-keyword'>_</span> <span class='hs-layout'>(</span><span class='hs-varid'>null</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-conid'>True</span><span class='hs-layout'>)</span> <span class='hs-keyword'>_</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>tip</span>
+<a name="line-324"></a><span class='hs-definition'>hedgeDiff</span> <span class='hs-varid'>cmplo</span> <span class='hs-varid'>cmphi</span> <span class='hs-layout'>(</span><span class='hs-varid'>view</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-conid'>Bin</span> <span class='hs-keyword'>_</span> <span class='hs-varid'>x</span> <span class='hs-varid'>l</span> <span class='hs-varid'>r</span><span class='hs-layout'>)</span> <span class='hs-layout'>(</span><span class='hs-varid'>null</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-conid'>True</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>join</span> <span class='hs-varid'>x</span> <span class='hs-layout'>(</span><span class='hs-varid'>filterGt</span> <span class='hs-varid'>cmplo</span> <span class='hs-varid'>l</span><span class='hs-layout'>)</span> <span class='hs-layout'>(</span><span class='hs-varid'>filterLt</span> <span class='hs-varid'>cmphi</span> <span class='hs-varid'>r</span><span class='hs-layout'>)</span>
+<a name="line-325"></a><span class='hs-definition'>hedgeDiff</span> <span class='hs-varid'>cmplo</span> <span class='hs-varid'>cmphi</span> <span class='hs-varid'>t</span> <span class='hs-layout'>(</span><span class='hs-varid'>view</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-conid'>Bin</span> <span class='hs-keyword'>_</span> <span class='hs-varid'>x</span> <span class='hs-varid'>l</span> <span class='hs-varid'>r</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>merge</span> <span class='hs-layout'>(</span><span class='hs-varid'>hedgeDiff</span> <span class='hs-varid'>cmplo</span> <span class='hs-varid'>cmpx</span> <span class='hs-layout'>(</span><span class='hs-varid'>trim</span> <span class='hs-varid'>cmplo</span> <span class='hs-varid'>cmpx</span> <span class='hs-varid'>t</span><span class='hs-layout'>)</span> <span class='hs-varid'>l</span><span class='hs-layout'>)</span> <span class='hs-layout'>(</span><span class='hs-varid'>hedgeDiff</span> <span class='hs-varid'>cmpx</span> <span class='hs-varid'>cmphi</span> <span class='hs-layout'>(</span><span class='hs-varid'>trim</span> <span class='hs-varid'>cmpx</span> <span class='hs-varid'>cmphi</span> <span class='hs-varid'>t</span><span class='hs-layout'>)</span> <span class='hs-varid'>r</span><span class='hs-layout'>)</span>
+<a name="line-326"></a>  <span class='hs-keyword'>where</span>
+<a name="line-327"></a>    <span class='hs-varid'>cmpx</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>compare</span> <span class='hs-varid'>x</span>
+<a name="line-328"></a>
+<a name="line-329"></a><a name="intersection"></a><span class='hs-comment'>{--------------------------------------------------------------------
+<a name="line-330"></a>  Intersection
+<a name="line-331"></a>--------------------------------------------------------------------}</span>
+<a name="line-332"></a><span class='hs-comment'>-- | /O(n+m)/. The intersection of two sets.</span>
+<a name="line-333"></a><span class='hs-comment'>-- Elements of the result come from the first set, so for example</span>
+<a name="line-334"></a><span class='hs-comment'>--</span>
+<a name="line-335"></a><span class='hs-comment'>-- &gt; import qualified Data.Set as S</span>
+<a name="line-336"></a><span class='hs-comment'>-- &gt; data AB = A | B deriving Show</span>
+<a name="line-337"></a><span class='hs-comment'>-- &gt; instance Ord AB where compare _ _ = EQ</span>
+<a name="line-338"></a><span class='hs-comment'>-- &gt; instance Eq AB where _ == _ = True</span>
+<a name="line-339"></a><span class='hs-comment'>-- &gt; main = print (S.singleton A `S.intersection` S.singleton B,</span>
+<a name="line-340"></a><span class='hs-comment'>-- &gt;               S.singleton B `S.intersection` S.singleton A)</span>
+<a name="line-341"></a><span class='hs-comment'>--</span>
+<a name="line-342"></a><span class='hs-comment'>-- prints @(fromList [A],fromList [B])@.</span>
+<a name="line-343"></a><span class='hs-definition'>intersection</span> <span class='hs-keyglyph'>::</span> <span class='hs-layout'>(</span><span class='hs-conid'>US</span> <span class='hs-varid'>a</span><span class='hs-layout'>,</span> <span class='hs-conid'>Ord</span> <span class='hs-varid'>a</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>USet</span> <span class='hs-varid'>a</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-conid'>USet</span> <span class='hs-varid'>a</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-conid'>USet</span> <span class='hs-varid'>a</span>
+<a name="line-344"></a><span class='hs-definition'>intersection</span> <span class='hs-layout'>(</span><span class='hs-varid'>null</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-conid'>True</span><span class='hs-layout'>)</span> <span class='hs-keyword'>_</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>tip</span>
+<a name="line-345"></a><span class='hs-definition'>intersection</span> <span class='hs-keyword'>_</span> <span class='hs-layout'>(</span><span class='hs-varid'>null</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-conid'>True</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>tip</span>
+<a name="line-346"></a><span class='hs-definition'>intersection</span> <span class='hs-varid'>t1</span><span class='hs-keyglyph'>@</span><span class='hs-layout'>(</span><span class='hs-varid'>view</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-conid'>Bin</span> <span class='hs-varid'>s1</span> <span class='hs-varid'>x1</span> <span class='hs-varid'>l1</span> <span class='hs-varid'>r1</span><span class='hs-layout'>)</span> <span class='hs-varid'>t2</span><span class='hs-keyglyph'>@</span><span class='hs-layout'>(</span><span class='hs-varid'>view</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-conid'>Bin</span> <span class='hs-varid'>s2</span> <span class='hs-varid'>x2</span> <span class='hs-varid'>l2</span> <span class='hs-varid'>r2</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=</span>
+<a name="line-347"></a>   <span class='hs-keyword'>if</span> <span class='hs-varid'>s1</span> <span class='hs-varop'>&gt;=</span> <span class='hs-varid'>s2</span> <span class='hs-keyword'>then</span>
+<a name="line-348"></a>      <span class='hs-keyword'>let</span> <span class='hs-layout'>(</span><span class='hs-varid'>lt</span><span class='hs-layout'>,</span><span class='hs-varid'>found</span><span class='hs-layout'>,</span><span class='hs-varid'>gt</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>splitLookup</span> <span class='hs-varid'>x2</span> <span class='hs-varid'>t1</span>
+<a name="line-349"></a>          <span class='hs-varid'>tl</span>            <span class='hs-keyglyph'>=</span> <span class='hs-varid'>intersection</span> <span class='hs-varid'>lt</span> <span class='hs-varid'>l2</span>
+<a name="line-350"></a>          <span class='hs-varid'>tr</span>            <span class='hs-keyglyph'>=</span> <span class='hs-varid'>intersection</span> <span class='hs-varid'>gt</span> <span class='hs-varid'>r2</span>
+<a name="line-351"></a>      <span class='hs-keyword'>in</span> <span class='hs-keyword'>case</span> <span class='hs-varid'>found</span> <span class='hs-keyword'>of</span>
+<a name="line-352"></a>      <span class='hs-conid'>Just</span> <span class='hs-varid'>x</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-varid'>join</span> <span class='hs-varid'>x</span> <span class='hs-varid'>tl</span> <span class='hs-varid'>tr</span>
+<a name="line-353"></a>      <span class='hs-conid'>Nothing</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-varid'>merge</span> <span class='hs-varid'>tl</span> <span class='hs-varid'>tr</span>
+<a name="line-354"></a>   <span class='hs-keyword'>else</span> <span class='hs-keyword'>let</span> <span class='hs-layout'>(</span><span class='hs-varid'>lt</span><span class='hs-layout'>,</span><span class='hs-varid'>found</span><span class='hs-layout'>,</span><span class='hs-varid'>gt</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>splitMember</span> <span class='hs-varid'>x1</span> <span class='hs-varid'>t2</span>
+<a name="line-355"></a>            <span class='hs-varid'>tl</span>            <span class='hs-keyglyph'>=</span> <span class='hs-varid'>intersection</span> <span class='hs-varid'>l1</span> <span class='hs-varid'>lt</span>
+<a name="line-356"></a>            <span class='hs-varid'>tr</span>            <span class='hs-keyglyph'>=</span> <span class='hs-varid'>intersection</span> <span class='hs-varid'>r1</span> <span class='hs-varid'>gt</span>
+<a name="line-357"></a>        <span class='hs-keyword'>in</span> <span class='hs-keyword'>if</span> <span class='hs-varid'>found</span> <span class='hs-keyword'>then</span> <span class='hs-varid'>join</span> <span class='hs-varid'>x1</span> <span class='hs-varid'>tl</span> <span class='hs-varid'>tr</span>
+<a name="line-358"></a>           <span class='hs-keyword'>else</span> <span class='hs-varid'>merge</span> <span class='hs-varid'>tl</span> <span class='hs-varid'>tr</span>
+<a name="line-359"></a>
+<a name="line-360"></a><a name="filter"></a><span class='hs-comment'>{--------------------------------------------------------------------
+<a name="line-361"></a>  Filter and partition
+<a name="line-362"></a>--------------------------------------------------------------------}</span>
+<a name="line-363"></a><span class='hs-comment'>-- | /O(n)/. Filter all elements that satisfy the predicate.</span>
+<a name="line-364"></a><span class='hs-definition'>filter</span> <span class='hs-keyglyph'>::</span> <span class='hs-layout'>(</span><span class='hs-conid'>US</span> <span class='hs-varid'>a</span><span class='hs-layout'>,</span> <span class='hs-conid'>Ord</span> <span class='hs-varid'>a</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-layout'>(</span><span class='hs-varid'>a</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-conid'>Bool</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-conid'>USet</span> <span class='hs-varid'>a</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-conid'>USet</span> <span class='hs-varid'>a</span>
+<a name="line-365"></a><span class='hs-definition'>filter</span> <span class='hs-varid'>p</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>go</span> <span class='hs-keyword'>where</span>
+<a name="line-366"></a>    <span class='hs-varid'>go</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>viewk</span> <span class='hs-varid'>tip</span> 
+<a name="line-367"></a>        <span class='hs-layout'>(</span><span class='hs-keyglyph'>\</span><span class='hs-keyword'>_</span> <span class='hs-varid'>x</span> <span class='hs-varid'>l</span> <span class='hs-varid'>r</span> <span class='hs-keyglyph'>-&gt;</span> 
+<a name="line-368"></a>            <span class='hs-keyword'>if</span> <span class='hs-varid'>p</span> <span class='hs-varid'>x</span> 
+<a name="line-369"></a>            <span class='hs-keyword'>then</span> <span class='hs-varid'>join</span> <span class='hs-varid'>x</span> <span class='hs-layout'>(</span><span class='hs-varid'>go</span> <span class='hs-varid'>l</span><span class='hs-layout'>)</span> <span class='hs-layout'>(</span><span class='hs-varid'>go</span> <span class='hs-varid'>r</span><span class='hs-layout'>)</span> 
+<a name="line-370"></a>            <span class='hs-keyword'>else</span> <span class='hs-varid'>merge</span> <span class='hs-layout'>(</span><span class='hs-varid'>go</span> <span class='hs-varid'>l</span><span class='hs-layout'>)</span> <span class='hs-layout'>(</span><span class='hs-varid'>go</span> <span class='hs-varid'>r</span><span class='hs-layout'>)</span>
+<a name="line-371"></a>        <span class='hs-layout'>)</span> 
+<a name="line-372"></a>
+<a name="line-373"></a><a name="partition"></a><span class='hs-comment'>-- | /O(n)/. Partition the set into two sets, one with all elements that satisfy</span>
+<a name="line-374"></a><span class='hs-comment'>-- the predicate and one with all elements that don't satisfy the predicate.</span>
+<a name="line-375"></a><span class='hs-comment'>-- See also 'split'.</span>
+<a name="line-376"></a><span class='hs-definition'>partition</span> <span class='hs-keyglyph'>::</span> <span class='hs-layout'>(</span><span class='hs-conid'>US</span> <span class='hs-varid'>a</span><span class='hs-layout'>,</span> <span class='hs-conid'>Ord</span> <span class='hs-varid'>a</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-layout'>(</span><span class='hs-varid'>a</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-conid'>Bool</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-conid'>USet</span> <span class='hs-varid'>a</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-layout'>(</span><span class='hs-conid'>USet</span> <span class='hs-varid'>a</span><span class='hs-layout'>,</span><span class='hs-conid'>USet</span> <span class='hs-varid'>a</span><span class='hs-layout'>)</span>
+<a name="line-377"></a><span class='hs-definition'>partition</span> <span class='hs-varid'>p</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>go</span> <span class='hs-keyword'>where</span>
+<a name="line-378"></a>    <span class='hs-varid'>go</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>viewk</span> <span class='hs-layout'>(</span><span class='hs-varid'>tip</span><span class='hs-layout'>,</span><span class='hs-varid'>tip</span><span class='hs-layout'>)</span> 
+<a name="line-379"></a>        <span class='hs-layout'>(</span><span class='hs-keyglyph'>\</span><span class='hs-keyword'>_</span> <span class='hs-varid'>x</span> <span class='hs-varid'>l</span> <span class='hs-varid'>r</span> <span class='hs-keyglyph'>-&gt;</span> 
+<a name="line-380"></a>            <span class='hs-keyword'>let</span> 
+<a name="line-381"></a>                <span class='hs-layout'>(</span><span class='hs-varid'>l1</span><span class='hs-layout'>,</span><span class='hs-varid'>l2</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>go</span> <span class='hs-varid'>l</span>
+<a name="line-382"></a>                <span class='hs-layout'>(</span><span class='hs-varid'>r1</span><span class='hs-layout'>,</span><span class='hs-varid'>r2</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>go</span> <span class='hs-varid'>r</span>
+<a name="line-383"></a>            <span class='hs-keyword'>in</span> <span class='hs-keyword'>if</span> <span class='hs-varid'>p</span> <span class='hs-varid'>x</span> 
+<a name="line-384"></a>            <span class='hs-keyword'>then</span> <span class='hs-layout'>(</span><span class='hs-varid'>join</span> <span class='hs-varid'>x</span> <span class='hs-varid'>l1</span> <span class='hs-varid'>r1</span><span class='hs-layout'>,</span><span class='hs-varid'>merge</span> <span class='hs-varid'>l2</span> <span class='hs-varid'>r2</span><span class='hs-layout'>)</span>
+<a name="line-385"></a>            <span class='hs-keyword'>else</span> <span class='hs-layout'>(</span><span class='hs-varid'>merge</span> <span class='hs-varid'>l1</span> <span class='hs-varid'>r1</span><span class='hs-layout'>,</span><span class='hs-varid'>join</span> <span class='hs-varid'>x</span> <span class='hs-varid'>l2</span> <span class='hs-varid'>r2</span><span class='hs-layout'>)</span>
+<a name="line-386"></a>        <span class='hs-layout'>)</span>
+<a name="line-387"></a>
+<a name="line-388"></a><span class='hs-comment'>{----------------------------------------------------------------------
+<a name="line-389"></a>  Map
+<a name="line-390"></a>----------------------------------------------------------------------}</span>
+<a name="line-391"></a>
+<a name="line-392"></a><span class='hs-comment'>-- | /O(n*log n)/. </span>
+<a name="line-393"></a><span class='hs-comment'>-- @'map' f s@ is the set obtained by applying @f@ to each element of @s@.</span>
+<a name="line-394"></a><span class='hs-comment'>-- </span>
+<a name="line-395"></a><span class='hs-comment'>-- It's worth noting that the size of the result may be smaller if,</span>
+<a name="line-396"></a><span class='hs-comment'>-- for some @(x,y)@, @x \/= y &amp;&amp; f x == f y@</span>
+<a name="line-397"></a>
+<a name="line-398"></a><a name="map"></a><span class='hs-definition'>map</span> <span class='hs-keyglyph'>::</span> <span class='hs-layout'>(</span><span class='hs-conid'>US</span> <span class='hs-varid'>a</span><span class='hs-layout'>,</span> <span class='hs-conid'>US</span> <span class='hs-varid'>b</span><span class='hs-layout'>,</span> <span class='hs-conid'>Ord</span> <span class='hs-varid'>a</span><span class='hs-layout'>,</span> <span class='hs-conid'>Ord</span> <span class='hs-varid'>b</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-layout'>(</span><span class='hs-varid'>a</span><span class='hs-keyglyph'>-&gt;</span><span class='hs-varid'>b</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-conid'>USet</span> <span class='hs-varid'>a</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-conid'>USet</span> <span class='hs-varid'>b</span>
+<a name="line-399"></a><span class='hs-definition'>map</span> <span class='hs-varid'>f</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>fromList</span> <span class='hs-varop'>.</span> <span class='hs-conid'>List</span><span class='hs-varop'>.</span><span class='hs-varid'>map</span> <span class='hs-varid'>f</span> <span class='hs-varop'>.</span> <span class='hs-varid'>toList</span>
+<a name="line-400"></a>
+<a name="line-401"></a><span class='hs-comment'>-- | /O(n)/. The </span>
+<a name="line-402"></a><span class='hs-comment'>--</span>
+<a name="line-403"></a><span class='hs-comment'>-- @'mapMonotonic' f s == 'map' f s@, but works only when @f@ is monotonic.</span>
+<a name="line-404"></a><span class='hs-comment'>-- /The precondition is not checked./</span>
+<a name="line-405"></a><span class='hs-comment'>-- Semi-formally, we have:</span>
+<a name="line-406"></a><span class='hs-comment'>-- </span>
+<a name="line-407"></a><span class='hs-comment'>-- &gt; and [x &lt; y ==&gt; f x &lt; f y | x &lt;- ls, y &lt;- ls] </span>
+<a name="line-408"></a><span class='hs-comment'>-- &gt;                     ==&gt; mapMonotonic f s == map f s</span>
+<a name="line-409"></a><span class='hs-comment'>-- &gt;     where ls = toList s</span>
+<a name="line-410"></a>
+<a name="line-411"></a><a name="mapMonotonic"></a><span class='hs-definition'>mapMonotonic</span> <span class='hs-keyglyph'>::</span> <span class='hs-layout'>(</span><span class='hs-conid'>US</span> <span class='hs-varid'>a</span><span class='hs-layout'>,</span> <span class='hs-conid'>US</span> <span class='hs-varid'>b</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-layout'>(</span><span class='hs-varid'>a</span><span class='hs-keyglyph'>-&gt;</span><span class='hs-varid'>b</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-conid'>USet</span> <span class='hs-varid'>a</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-conid'>USet</span> <span class='hs-varid'>b</span>
+<a name="line-412"></a><span class='hs-definition'>mapMonotonic</span> <span class='hs-varid'>f</span> <span class='hs-layout'>(</span><span class='hs-varid'>view</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-conid'>Bin</span> <span class='hs-varid'>sz</span> <span class='hs-varid'>x</span> <span class='hs-varid'>l</span> <span class='hs-varid'>r</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>bin</span> <span class='hs-varid'>sz</span> <span class='hs-layout'>(</span><span class='hs-varid'>f</span> <span class='hs-varid'>x</span><span class='hs-layout'>)</span> <span class='hs-layout'>(</span><span class='hs-varid'>mapMonotonic</span> <span class='hs-varid'>f</span> <span class='hs-varid'>l</span><span class='hs-layout'>)</span> <span class='hs-layout'>(</span><span class='hs-varid'>mapMonotonic</span> <span class='hs-varid'>f</span> <span class='hs-varid'>r</span><span class='hs-layout'>)</span>
+<a name="line-413"></a><span class='hs-definition'>mapMonotonic</span> <span class='hs-keyword'>_</span> <span class='hs-keyword'>_</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>tip</span>
+<a name="line-414"></a>
+<a name="line-415"></a>
+<a name="line-416"></a><a name="fold"></a><span class='hs-comment'>{--------------------------------------------------------------------
+<a name="line-417"></a>  Fold
+<a name="line-418"></a>--------------------------------------------------------------------}</span>
+<a name="line-419"></a><span class='hs-comment'>-- | /O(n)/. Fold over the elements of a set in an unspecified order.</span>
+<a name="line-420"></a><span class='hs-definition'>fold</span> <span class='hs-keyglyph'>::</span> <span class='hs-conid'>US</span> <span class='hs-varid'>a</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-layout'>(</span><span class='hs-varid'>a</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-varid'>b</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-varid'>b</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-varid'>b</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-conid'>USet</span> <span class='hs-varid'>a</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-varid'>b</span>
+<a name="line-421"></a><span class='hs-definition'>fold</span> <span class='hs-varid'>f</span> <span class='hs-varid'>z</span> <span class='hs-varid'>s</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>foldr</span> <span class='hs-varid'>f</span> <span class='hs-varid'>z</span> <span class='hs-varid'>s</span>
+<a name="line-422"></a>
+<a name="line-423"></a><a name="foldr"></a><span class='hs-comment'>-- | /O(n)/. Post-order fold.</span>
+<a name="line-424"></a><span class='hs-definition'>foldr</span> <span class='hs-keyglyph'>::</span> <span class='hs-conid'>US</span> <span class='hs-varid'>a</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-layout'>(</span><span class='hs-varid'>a</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-varid'>b</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-varid'>b</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-varid'>b</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-conid'>USet</span> <span class='hs-varid'>a</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-varid'>b</span>
+<a name="line-425"></a><span class='hs-comment'>--foldr f z (view -&gt; Bin _ x l r) = foldr f (f x (foldr f z r)) l</span>
+<a name="line-426"></a><span class='hs-comment'>--foldr _ z _ = z</span>
+<a name="line-427"></a>
+<a name="line-428"></a><span class='hs-definition'>foldr</span> <span class='hs-varid'>f</span> <span class='hs-varid'>z</span> <span class='hs-varid'>x</span> <span class='hs-keyglyph'>|</span> <span class='hs-varid'>null</span> <span class='hs-varid'>x</span>                     <span class='hs-keyglyph'>=</span> <span class='hs-varid'>z</span>
+<a name="line-429"></a>            <span class='hs-keyglyph'>|</span> <span class='hs-layout'>(</span><span class='hs-cpp'>#</span> <span class='hs-varid'>x</span><span class='hs-layout'>,</span> <span class='hs-varid'>l</span><span class='hs-layout'>,</span> <span class='hs-varid'>r</span> <span class='hs-cpp'>#</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>&lt;-</span> <span class='hs-varid'>viewBin</span> <span class='hs-varid'>x</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>foldr</span> <span class='hs-varid'>f</span> <span class='hs-layout'>(</span><span class='hs-varid'>f</span> <span class='hs-varid'>x</span> <span class='hs-layout'>(</span><span class='hs-varid'>foldr</span> <span class='hs-varid'>f</span> <span class='hs-varid'>z</span> <span class='hs-varid'>r</span><span class='hs-layout'>)</span><span class='hs-layout'>)</span> <span class='hs-varid'>l</span> 
+<a name="line-430"></a><span class='hs-comment'>{-# INLINE foldr #-}</span>
+<a name="line-431"></a>
+<a name="line-432"></a><a name="elems"></a><span class='hs-comment'>{--------------------------------------------------------------------
+<a name="line-433"></a>  List variations 
+<a name="line-434"></a>--------------------------------------------------------------------}</span>
+<a name="line-435"></a><span class='hs-comment'>-- | /O(n)/. The elements of a set.</span>
+<a name="line-436"></a><span class='hs-definition'>elems</span> <span class='hs-keyglyph'>::</span> <span class='hs-conid'>US</span> <span class='hs-varid'>a</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>USet</span> <span class='hs-varid'>a</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-keyglyph'>[</span><span class='hs-varid'>a</span><span class='hs-keyglyph'>]</span>
+<a name="line-437"></a><span class='hs-definition'>elems</span> <span class='hs-varid'>x</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>toList</span> <span class='hs-varid'>x</span>
+<a name="line-438"></a>
+<a name="line-439"></a><a name="toList"></a><span class='hs-comment'>{--------------------------------------------------------------------
+<a name="line-440"></a>  Lists 
+<a name="line-441"></a>--------------------------------------------------------------------}</span>
+<a name="line-442"></a><span class='hs-comment'>-- | /O(n)/. Convert the set to a list of elements.</span>
+<a name="line-443"></a><span class='hs-definition'>toList</span> <span class='hs-keyglyph'>::</span> <span class='hs-conid'>US</span> <span class='hs-varid'>a</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>USet</span> <span class='hs-varid'>a</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-keyglyph'>[</span><span class='hs-varid'>a</span><span class='hs-keyglyph'>]</span>
+<a name="line-444"></a><span class='hs-definition'>toList</span> <span class='hs-varid'>x</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>toAscList</span> <span class='hs-varid'>x</span>
+<a name="line-445"></a><span class='hs-comment'>{-# INLINE toList #-}</span>
+<a name="line-446"></a>
+<a name="line-447"></a><a name="toAscList"></a><span class='hs-comment'>-- | /O(n)/. Convert the set to an ascending list of elements.</span>
+<a name="line-448"></a><span class='hs-definition'>toAscList</span> <span class='hs-keyglyph'>::</span> <span class='hs-conid'>US</span> <span class='hs-varid'>a</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>USet</span> <span class='hs-varid'>a</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-keyglyph'>[</span><span class='hs-varid'>a</span><span class='hs-keyglyph'>]</span>
+<a name="line-449"></a><span class='hs-definition'>toAscList</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>foldr</span> <span class='hs-layout'>(</span><span class='hs-conop'>:</span><span class='hs-layout'>)</span> <span class='hs-conid'>[]</span>
+<a name="line-450"></a>
+<a name="line-451"></a>
+<a name="line-452"></a><a name="fromList"></a><span class='hs-comment'>-- | /O(n*log n)/. Create a set from a list of elements.</span>
+<a name="line-453"></a><span class='hs-definition'>fromList</span> <span class='hs-keyglyph'>::</span> <span class='hs-layout'>(</span><span class='hs-conid'>US</span> <span class='hs-varid'>a</span><span class='hs-layout'>,</span> <span class='hs-conid'>Ord</span> <span class='hs-varid'>a</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-keyglyph'>[</span><span class='hs-varid'>a</span><span class='hs-keyglyph'>]</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-conid'>USet</span> <span class='hs-varid'>a</span> 
+<a name="line-454"></a><span class='hs-definition'>fromList</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>foldlStrict</span> <span class='hs-varid'>ins</span> <span class='hs-varid'>empty</span>
+<a name="line-455"></a>  <span class='hs-keyword'>where</span>
+<a name="line-456"></a>    <span class='hs-varid'>ins</span> <span class='hs-varid'>t</span> <span class='hs-varid'>x</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>insert</span> <span class='hs-varid'>x</span> <span class='hs-varid'>t</span>
+<a name="line-457"></a>
+<a name="line-458"></a><a name="fromAscList"></a><span class='hs-comment'>{--------------------------------------------------------------------
+<a name="line-459"></a>  Building trees from ascending/descending lists can be done in linear time.
+<a name="line-460"></a>  
+<a name="line-461"></a>  Note that if [xs] is ascending that: 
+<a name="line-462"></a>    fromAscList xs == fromList xs
+<a name="line-463"></a>--------------------------------------------------------------------}</span>
+<a name="line-464"></a><span class='hs-comment'>-- | /O(n)/. Build a set from an ascending list in linear time.</span>
+<a name="line-465"></a><span class='hs-comment'>-- /The precondition (input list is ascending) is not checked./</span>
+<a name="line-466"></a><span class='hs-definition'>fromAscList</span> <span class='hs-keyglyph'>::</span> <span class='hs-layout'>(</span><span class='hs-conid'>US</span> <span class='hs-varid'>a</span><span class='hs-layout'>,</span> <span class='hs-conid'>Eq</span> <span class='hs-varid'>a</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-keyglyph'>[</span><span class='hs-varid'>a</span><span class='hs-keyglyph'>]</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-conid'>USet</span> <span class='hs-varid'>a</span> 
+<a name="line-467"></a><span class='hs-definition'>fromAscList</span> <span class='hs-varid'>xs</span>
+<a name="line-468"></a>  <span class='hs-keyglyph'>=</span> <span class='hs-varid'>fromDistinctAscList</span> <span class='hs-layout'>(</span><span class='hs-varid'>combineEq</span> <span class='hs-varid'>xs</span><span class='hs-layout'>)</span>
+<a name="line-469"></a>  <span class='hs-keyword'>where</span>
+<a name="line-470"></a>  <span class='hs-comment'>-- [combineEq xs] combines equal elements with [const] in an ordered list [xs]</span>
+<a name="line-471"></a>  <span class='hs-varid'>combineEq</span> <span class='hs-varid'>xs'</span>
+<a name="line-472"></a>    <span class='hs-keyglyph'>=</span> <span class='hs-keyword'>case</span> <span class='hs-varid'>xs'</span> <span class='hs-keyword'>of</span>
+<a name="line-473"></a>        <span class='hs-conid'>[]</span>     <span class='hs-keyglyph'>-&gt;</span> <span class='hs-conid'>[]</span>
+<a name="line-474"></a>        <span class='hs-keyglyph'>[</span><span class='hs-varid'>x</span><span class='hs-keyglyph'>]</span>    <span class='hs-keyglyph'>-&gt;</span> <span class='hs-keyglyph'>[</span><span class='hs-varid'>x</span><span class='hs-keyglyph'>]</span>
+<a name="line-475"></a>        <span class='hs-layout'>(</span><span class='hs-varid'>x</span><span class='hs-conop'>:</span><span class='hs-varid'>xx</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-varid'>combineEq'</span> <span class='hs-varid'>x</span> <span class='hs-varid'>xx</span>
+<a name="line-476"></a>
+<a name="line-477"></a>  <span class='hs-varid'>combineEq'</span> <span class='hs-varid'>z</span> <span class='hs-conid'>[]</span> <span class='hs-keyglyph'>=</span> <span class='hs-keyglyph'>[</span><span class='hs-varid'>z</span><span class='hs-keyglyph'>]</span>
+<a name="line-478"></a>  <span class='hs-varid'>combineEq'</span> <span class='hs-varid'>z</span> <span class='hs-layout'>(</span><span class='hs-varid'>x</span><span class='hs-conop'>:</span><span class='hs-varid'>xs'</span><span class='hs-layout'>)</span>
+<a name="line-479"></a>    <span class='hs-keyglyph'>|</span> <span class='hs-varid'>z</span><span class='hs-varop'>==</span><span class='hs-varid'>x</span>      <span class='hs-keyglyph'>=</span>   <span class='hs-varid'>combineEq'</span> <span class='hs-varid'>z</span> <span class='hs-varid'>xs'</span>
+<a name="line-480"></a>    <span class='hs-keyglyph'>|</span> <span class='hs-varid'>otherwise</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>z</span><span class='hs-conop'>:</span><span class='hs-varid'>combineEq'</span> <span class='hs-varid'>x</span> <span class='hs-varid'>xs'</span>
+<a name="line-481"></a>
+<a name="line-482"></a>
+<a name="line-483"></a><a name="fromDistinctAscList"></a><span class='hs-comment'>-- | /O(n)/. Build a set from an ascending list of distinct elements in linear time.</span>
+<a name="line-484"></a><span class='hs-comment'>-- /The precondition (input list is strictly ascending) is not checked./</span>
+<a name="line-485"></a><span class='hs-definition'>fromDistinctAscList</span> <span class='hs-keyglyph'>::</span> <span class='hs-conid'>US</span> <span class='hs-varid'>a</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-keyglyph'>[</span><span class='hs-varid'>a</span><span class='hs-keyglyph'>]</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-conid'>USet</span> <span class='hs-varid'>a</span> 
+<a name="line-486"></a><span class='hs-definition'>fromDistinctAscList</span> <span class='hs-varid'>xs</span>
+<a name="line-487"></a>  <span class='hs-keyglyph'>=</span> <span class='hs-varid'>build</span> <span class='hs-varid'>const</span> <span class='hs-layout'>(</span><span class='hs-varid'>length</span> <span class='hs-varid'>xs</span><span class='hs-layout'>)</span> <span class='hs-varid'>xs</span>
+<a name="line-488"></a>  <span class='hs-keyword'>where</span>
+<a name="line-489"></a>    <span class='hs-comment'>-- 1) use continutations so that we use heap space instead of stack space.</span>
+<a name="line-490"></a>    <span class='hs-comment'>-- 2) special case for n==5 to build bushier trees. </span>
+<a name="line-491"></a>    <span class='hs-varid'>build</span> <span class='hs-varid'>c</span> <span class='hs-num'>0</span> <span class='hs-varid'>xs'</span>  <span class='hs-keyglyph'>=</span> <span class='hs-varid'>c</span> <span class='hs-varid'>tip</span> <span class='hs-varid'>xs'</span>
+<a name="line-492"></a>    <span class='hs-varid'>build</span> <span class='hs-varid'>c</span> <span class='hs-num'>5</span> <span class='hs-varid'>xs'</span>  <span class='hs-keyglyph'>=</span> <span class='hs-keyword'>case</span> <span class='hs-varid'>xs'</span> <span class='hs-keyword'>of</span>
+<a name="line-493"></a>                       <span class='hs-layout'>(</span><span class='hs-varid'>x1</span><span class='hs-conop'>:</span><span class='hs-varid'>x2</span><span class='hs-conop'>:</span><span class='hs-varid'>x3</span><span class='hs-conop'>:</span><span class='hs-varid'>x4</span><span class='hs-conop'>:</span><span class='hs-varid'>x5</span><span class='hs-conop'>:</span><span class='hs-varid'>xx</span><span class='hs-layout'>)</span> 
+<a name="line-494"></a>                            <span class='hs-keyglyph'>-&gt;</span> <span class='hs-varid'>c</span> <span class='hs-layout'>(</span><span class='hs-varid'>bin_</span> <span class='hs-varid'>x4</span> <span class='hs-layout'>(</span><span class='hs-varid'>bin_</span> <span class='hs-varid'>x2</span> <span class='hs-layout'>(</span><span class='hs-varid'>singleton</span> <span class='hs-varid'>x1</span><span class='hs-layout'>)</span> <span class='hs-layout'>(</span><span class='hs-varid'>singleton</span> <span class='hs-varid'>x3</span><span class='hs-layout'>)</span><span class='hs-layout'>)</span> <span class='hs-layout'>(</span><span class='hs-varid'>singleton</span> <span class='hs-varid'>x5</span><span class='hs-layout'>)</span><span class='hs-layout'>)</span> <span class='hs-varid'>xx</span>
+<a name="line-495"></a>                       <span class='hs-keyword'>_</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-varid'>error</span> <span class='hs-str'>"fromDistinctAscList build 5"</span>
+<a name="line-496"></a>    <span class='hs-varid'>build</span> <span class='hs-varid'>c</span> <span class='hs-varid'>n</span> <span class='hs-varid'>xs'</span>  <span class='hs-keyglyph'>=</span> <span class='hs-varid'>seq</span> <span class='hs-varid'>nr</span> <span class='hs-varop'>$</span> <span class='hs-varid'>build</span> <span class='hs-layout'>(</span><span class='hs-varid'>buildR</span> <span class='hs-varid'>nr</span> <span class='hs-varid'>c</span><span class='hs-layout'>)</span> <span class='hs-varid'>nl</span> <span class='hs-varid'>xs'</span>
+<a name="line-497"></a>                   <span class='hs-keyword'>where</span>
+<a name="line-498"></a>                     <span class='hs-varid'>nl</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>n</span> <span class='hs-varop'>`div`</span> <span class='hs-num'>2</span>
+<a name="line-499"></a>                     <span class='hs-varid'>nr</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>n</span> <span class='hs-comment'>-</span> <span class='hs-varid'>nl</span> <span class='hs-comment'>-</span> <span class='hs-num'>1</span>
+<a name="line-500"></a>
+<a name="line-501"></a>    <span class='hs-varid'>buildR</span> <span class='hs-varid'>n</span> <span class='hs-varid'>c</span> <span class='hs-varid'>l</span> <span class='hs-layout'>(</span><span class='hs-varid'>x</span><span class='hs-conop'>:</span><span class='hs-varid'>ys</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>build</span> <span class='hs-layout'>(</span><span class='hs-varid'>buildB</span> <span class='hs-varid'>l</span> <span class='hs-varid'>x</span> <span class='hs-varid'>c</span><span class='hs-layout'>)</span> <span class='hs-varid'>n</span> <span class='hs-varid'>ys</span>
+<a name="line-502"></a>    <span class='hs-varid'>buildR</span> <span class='hs-keyword'>_</span> <span class='hs-keyword'>_</span> <span class='hs-keyword'>_</span> <span class='hs-conid'>[]</span>     <span class='hs-keyglyph'>=</span> <span class='hs-varid'>error</span> <span class='hs-str'>"fromDistinctAscList buildR []"</span>
+<a name="line-503"></a>    <span class='hs-varid'>buildB</span> <span class='hs-varid'>l</span> <span class='hs-varid'>x</span> <span class='hs-varid'>c</span> <span class='hs-varid'>r</span> <span class='hs-varid'>zs</span>   <span class='hs-keyglyph'>=</span> <span class='hs-varid'>c</span> <span class='hs-layout'>(</span><span class='hs-varid'>bin_</span> <span class='hs-varid'>x</span> <span class='hs-varid'>l</span> <span class='hs-varid'>r</span><span class='hs-layout'>)</span> <span class='hs-varid'>zs</span>
+<a name="line-504"></a>
+<a name="line-505"></a><span class='hs-comment'>{--------------------------------------------------------------------
+<a name="line-506"></a>  Eq converts the set to a list. In a lazy setting, this 
+<a name="line-507"></a>  actually seems one of the faster methods to compare two trees 
+<a name="line-508"></a>  and it is certainly the simplest :-)
+<a name="line-509"></a>--------------------------------------------------------------------}</span>
+<a name="line-510"></a><span class='hs-keyword'>instance</span> <span class='hs-layout'>(</span><span class='hs-conid'>US</span> <span class='hs-varid'>a</span><span class='hs-layout'>,</span> <span class='hs-conid'>Eq</span> <span class='hs-varid'>a</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>Eq</span> <span class='hs-layout'>(</span><span class='hs-conid'>USet</span> <span class='hs-varid'>a</span><span class='hs-layout'>)</span> <span class='hs-keyword'>where</span>
+<a name="line-511"></a>  <span class='hs-varid'>t1</span> <span class='hs-varop'>==</span> <span class='hs-varid'>t2</span>  <span class='hs-keyglyph'>=</span> <span class='hs-layout'>(</span><span class='hs-varid'>size</span> <span class='hs-varid'>t1</span> <span class='hs-varop'>==</span> <span class='hs-varid'>size</span> <span class='hs-varid'>t2</span><span class='hs-layout'>)</span> <span class='hs-varop'>&amp;&amp;</span> <span class='hs-layout'>(</span><span class='hs-varid'>toAscList</span> <span class='hs-varid'>t1</span> <span class='hs-varop'>==</span> <span class='hs-varid'>toAscList</span> <span class='hs-varid'>t2</span><span class='hs-layout'>)</span>
+<a name="line-512"></a>
+<a name="line-513"></a><span class='hs-comment'>{--------------------------------------------------------------------
+<a name="line-514"></a>  Ord 
+<a name="line-515"></a>--------------------------------------------------------------------}</span>
+<a name="line-516"></a>
+<a name="line-517"></a><span class='hs-keyword'>instance</span> <span class='hs-layout'>(</span><span class='hs-conid'>US</span> <span class='hs-varid'>a</span><span class='hs-layout'>,</span> <span class='hs-conid'>Ord</span> <span class='hs-varid'>a</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>Ord</span> <span class='hs-layout'>(</span><span class='hs-conid'>USet</span> <span class='hs-varid'>a</span><span class='hs-layout'>)</span> <span class='hs-keyword'>where</span>
+<a name="line-518"></a>    <span class='hs-varid'>compare</span> <span class='hs-varid'>s1</span> <span class='hs-varid'>s2</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>compare</span> <span class='hs-layout'>(</span><span class='hs-varid'>toAscList</span> <span class='hs-varid'>s1</span><span class='hs-layout'>)</span> <span class='hs-layout'>(</span><span class='hs-varid'>toAscList</span> <span class='hs-varid'>s2</span><span class='hs-layout'>)</span> 
+<a name="line-519"></a>
+<a name="line-520"></a><span class='hs-comment'>{--------------------------------------------------------------------
+<a name="line-521"></a>  Show
+<a name="line-522"></a>--------------------------------------------------------------------}</span>
+<a name="line-523"></a><span class='hs-keyword'>instance</span> <span class='hs-layout'>(</span><span class='hs-conid'>US</span> <span class='hs-varid'>a</span><span class='hs-layout'>,</span> <span class='hs-conid'>Show</span> <span class='hs-varid'>a</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>Show</span> <span class='hs-layout'>(</span><span class='hs-conid'>USet</span> <span class='hs-varid'>a</span><span class='hs-layout'>)</span> <span class='hs-keyword'>where</span>
+<a name="line-524"></a>  <span class='hs-varid'>showsPrec</span> <span class='hs-varid'>p</span> <span class='hs-varid'>xs</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>showParen</span> <span class='hs-layout'>(</span><span class='hs-varid'>p</span> <span class='hs-varop'>&gt;</span> <span class='hs-num'>10</span><span class='hs-layout'>)</span> <span class='hs-varop'>$</span>
+<a name="line-525"></a>    <span class='hs-varid'>showString</span> <span class='hs-str'>"fromList "</span> <span class='hs-varop'>.</span> <span class='hs-varid'>shows</span> <span class='hs-layout'>(</span><span class='hs-varid'>toList</span> <span class='hs-varid'>xs</span><span class='hs-layout'>)</span>
+<a name="line-526"></a>
+<a name="line-527"></a><span class='hs-comment'>{--------------------------------------------------------------------
+<a name="line-528"></a>  Read
+<a name="line-529"></a>--------------------------------------------------------------------}</span>
+<a name="line-530"></a><span class='hs-keyword'>instance</span> <span class='hs-layout'>(</span><span class='hs-conid'>US</span> <span class='hs-varid'>a</span><span class='hs-layout'>,</span> <span class='hs-conid'>Read</span> <span class='hs-varid'>a</span><span class='hs-layout'>,</span> <span class='hs-conid'>Ord</span> <span class='hs-varid'>a</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>Read</span> <span class='hs-layout'>(</span><span class='hs-conid'>USet</span> <span class='hs-varid'>a</span><span class='hs-layout'>)</span> <span class='hs-keyword'>where</span>
+<a name="line-531"></a><span class='hs-cpp'>#ifdef __GLASGOW_HASKELL__</span>
+<a name="line-532"></a>  <span class='hs-varid'>readPrec</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>parens</span> <span class='hs-varop'>$</span> <span class='hs-varid'>prec</span> <span class='hs-num'>10</span> <span class='hs-varop'>$</span> <span class='hs-keyword'>do</span>
+<a name="line-533"></a>    <span class='hs-conid'>Ident</span> <span class='hs-str'>"fromList"</span> <span class='hs-keyglyph'>&lt;-</span> <span class='hs-varid'>lexP</span>
+<a name="line-534"></a>    <span class='hs-varid'>fromList</span> <span class='hs-varop'>`fmap`</span> <span class='hs-varid'>readPrec</span>
+<a name="line-535"></a>
+<a name="line-536"></a>  <span class='hs-varid'>readListPrec</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>readListPrecDefault</span>
+<a name="line-537"></a><span class='hs-cpp'>#else</span>
+<a name="line-538"></a>  <span class='hs-varid'>readsPrec</span> <span class='hs-varid'>p</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>readParen</span> <span class='hs-layout'>(</span><span class='hs-varid'>p</span> <span class='hs-varop'>&gt;</span> <span class='hs-num'>10</span><span class='hs-layout'>)</span> <span class='hs-varop'>$</span> <span class='hs-keyglyph'>\</span> <span class='hs-varid'>r</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-keyword'>do</span>
+<a name="line-539"></a>    <span class='hs-layout'>(</span><span class='hs-str'>"fromList"</span><span class='hs-layout'>,</span><span class='hs-varid'>s</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>&lt;-</span> <span class='hs-varid'>lex</span> <span class='hs-varid'>r</span>
+<a name="line-540"></a>    <span class='hs-layout'>(</span><span class='hs-varid'>xs</span><span class='hs-layout'>,</span><span class='hs-varid'>t</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>&lt;-</span> <span class='hs-varid'>reads</span> <span class='hs-varid'>s</span>
+<a name="line-541"></a>    <span class='hs-varid'>return</span> <span class='hs-layout'>(</span><span class='hs-varid'>fromList</span> <span class='hs-varid'>xs</span><span class='hs-layout'>,</span><span class='hs-varid'>t</span><span class='hs-layout'>)</span>
+<a name="line-542"></a><span class='hs-cpp'>#endif</span>
+<a name="line-543"></a>
+<a name="line-544"></a><span class='hs-comment'>{--------------------------------------------------------------------
+<a name="line-545"></a>  Utility functions that return sub-ranges of the original
+<a name="line-546"></a>  tree. Some functions take a comparison function as argument to
+<a name="line-547"></a>  allow comparisons against infinite values. A function [cmplo x]
+<a name="line-548"></a>  should be read as [compare lo x].
+<a name="line-549"></a>
+<a name="line-550"></a>  [trim cmplo cmphi t]  A tree that is either empty or where [cmplo x == LT]
+<a name="line-551"></a>                        and [cmphi x == GT] for the value [x] of the root.
+<a name="line-552"></a>  [filterGt cmp t]      A tree where for all values [k]. [cmp k == LT]
+<a name="line-553"></a>  [filterLt cmp t]      A tree where for all values [k]. [cmp k == GT]
+<a name="line-554"></a>
+<a name="line-555"></a>  [split k t]           Returns two trees [l] and [r] where all values
+<a name="line-556"></a>                        in [l] are &lt;[k] and all keys in [r] are &gt;[k].
+<a name="line-557"></a>  [splitMember k t]     Just like [split] but also returns whether [k]
+<a name="line-558"></a>                        was found in the tree.
+<a name="line-559"></a>--------------------------------------------------------------------}</span>
+<a name="line-560"></a>
+<a name="line-561"></a><a name="trim"></a><span class='hs-comment'>{--------------------------------------------------------------------
+<a name="line-562"></a>  [trim lo hi t] trims away all subtrees that surely contain no
+<a name="line-563"></a>  values between the range [lo] to [hi]. The returned tree is either
+<a name="line-564"></a>  empty or the key of the root is between @lo@ and @hi@.
+<a name="line-565"></a>--------------------------------------------------------------------}</span>
+<a name="line-566"></a><span class='hs-definition'>trim</span> <span class='hs-keyglyph'>::</span> <span class='hs-conid'>US</span> <span class='hs-varid'>a</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-layout'>(</span><span class='hs-varid'>a</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-conid'>Ordering</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-layout'>(</span><span class='hs-varid'>a</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-conid'>Ordering</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-conid'>USet</span> <span class='hs-varid'>a</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-conid'>USet</span> <span class='hs-varid'>a</span>
+<a name="line-567"></a><span class='hs-definition'>trim</span> <span class='hs-varid'>cmplo</span> <span class='hs-varid'>cmphi</span> <span class='hs-varid'>t</span><span class='hs-keyglyph'>@</span><span class='hs-layout'>(</span><span class='hs-varid'>view</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-conid'>Bin</span> <span class='hs-keyword'>_</span> <span class='hs-varid'>x</span> <span class='hs-varid'>l</span> <span class='hs-varid'>r</span><span class='hs-layout'>)</span>
+<a name="line-568"></a>  <span class='hs-keyglyph'>=</span> <span class='hs-keyword'>case</span> <span class='hs-varid'>cmplo</span> <span class='hs-varid'>x</span> <span class='hs-keyword'>of</span>
+<a name="line-569"></a>      <span class='hs-conid'>LT</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-keyword'>case</span> <span class='hs-varid'>cmphi</span> <span class='hs-varid'>x</span> <span class='hs-keyword'>of</span>
+<a name="line-570"></a>              <span class='hs-conid'>GT</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-varid'>t</span>
+<a name="line-571"></a>              <span class='hs-keyword'>_</span>  <span class='hs-keyglyph'>-&gt;</span> <span class='hs-varid'>trim</span> <span class='hs-varid'>cmplo</span> <span class='hs-varid'>cmphi</span> <span class='hs-varid'>l</span>
+<a name="line-572"></a>      <span class='hs-keyword'>_</span>  <span class='hs-keyglyph'>-&gt;</span> <span class='hs-varid'>trim</span> <span class='hs-varid'>cmplo</span> <span class='hs-varid'>cmphi</span> <span class='hs-varid'>r</span>
+<a name="line-573"></a><span class='hs-definition'>trim</span> <span class='hs-keyword'>_</span>     <span class='hs-keyword'>_</span>     <span class='hs-keyword'>_</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>tip</span>
+<a name="line-574"></a>
+<a name="line-575"></a><a name="filterGt"></a><span class='hs-comment'>{--------------------------------------------------------------------
+<a name="line-576"></a>  [filterGt x t] filter all values &gt;[x] from tree [t]
+<a name="line-577"></a>  [filterLt x t] filter all values &lt;[x] from tree [t]
+<a name="line-578"></a>--------------------------------------------------------------------}</span>
+<a name="line-579"></a><span class='hs-definition'>filterGt</span> <span class='hs-keyglyph'>::</span> <span class='hs-conid'>US</span> <span class='hs-varid'>a</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-layout'>(</span><span class='hs-varid'>a</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-conid'>Ordering</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-conid'>USet</span> <span class='hs-varid'>a</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-conid'>USet</span> <span class='hs-varid'>a</span>
+<a name="line-580"></a><span class='hs-definition'>filterGt</span> <span class='hs-varid'>cmp</span> <span class='hs-layout'>(</span><span class='hs-varid'>view</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-conid'>Bin</span> <span class='hs-keyword'>_</span> <span class='hs-varid'>x</span> <span class='hs-varid'>l</span> <span class='hs-varid'>r</span><span class='hs-layout'>)</span>
+<a name="line-581"></a>  <span class='hs-keyglyph'>=</span> <span class='hs-keyword'>case</span> <span class='hs-varid'>cmp</span> <span class='hs-varid'>x</span> <span class='hs-keyword'>of</span>
+<a name="line-582"></a>      <span class='hs-conid'>LT</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-varid'>join</span> <span class='hs-varid'>x</span> <span class='hs-layout'>(</span><span class='hs-varid'>filterGt</span> <span class='hs-varid'>cmp</span> <span class='hs-varid'>l</span><span class='hs-layout'>)</span> <span class='hs-varid'>r</span>
+<a name="line-583"></a>      <span class='hs-conid'>GT</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-varid'>filterGt</span> <span class='hs-varid'>cmp</span> <span class='hs-varid'>r</span>
+<a name="line-584"></a>      <span class='hs-conid'>EQ</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-varid'>r</span>
+<a name="line-585"></a><span class='hs-definition'>filterGt</span> <span class='hs-keyword'>_</span> <span class='hs-keyword'>_</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>tip</span>
+<a name="line-586"></a>      
+<a name="line-587"></a><a name="filterLt"></a><span class='hs-definition'>filterLt</span> <span class='hs-keyglyph'>::</span> <span class='hs-conid'>US</span> <span class='hs-varid'>a</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-layout'>(</span><span class='hs-varid'>a</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-conid'>Ordering</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-conid'>USet</span> <span class='hs-varid'>a</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-conid'>USet</span> <span class='hs-varid'>a</span>
+<a name="line-588"></a><span class='hs-definition'>filterLt</span> <span class='hs-varid'>cmp</span> <span class='hs-layout'>(</span><span class='hs-varid'>view</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-conid'>Bin</span> <span class='hs-keyword'>_</span> <span class='hs-varid'>x</span> <span class='hs-varid'>l</span> <span class='hs-varid'>r</span><span class='hs-layout'>)</span>
+<a name="line-589"></a>  <span class='hs-keyglyph'>=</span> <span class='hs-keyword'>case</span> <span class='hs-varid'>cmp</span> <span class='hs-varid'>x</span> <span class='hs-keyword'>of</span>
+<a name="line-590"></a>      <span class='hs-conid'>LT</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-varid'>filterLt</span> <span class='hs-varid'>cmp</span> <span class='hs-varid'>l</span>
+<a name="line-591"></a>      <span class='hs-conid'>GT</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-varid'>join</span> <span class='hs-varid'>x</span> <span class='hs-varid'>l</span> <span class='hs-layout'>(</span><span class='hs-varid'>filterLt</span> <span class='hs-varid'>cmp</span> <span class='hs-varid'>r</span><span class='hs-layout'>)</span>
+<a name="line-592"></a>      <span class='hs-conid'>EQ</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-varid'>l</span>
+<a name="line-593"></a><span class='hs-definition'>filterLt</span> <span class='hs-keyword'>_</span> <span class='hs-keyword'>_</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>tip</span>
+<a name="line-594"></a>
+<a name="line-595"></a>
+<a name="line-596"></a><a name="split"></a><span class='hs-comment'>{--------------------------------------------------------------------
+<a name="line-597"></a>  Split
+<a name="line-598"></a>--------------------------------------------------------------------}</span>
+<a name="line-599"></a><span class='hs-comment'>-- | /O(log n)/. The expression (@'split' x set@) is a pair @(set1,set2)@</span>
+<a name="line-600"></a><span class='hs-comment'>-- where @set1@ comprises the elements of @set@ less than @x@ and @set2@</span>
+<a name="line-601"></a><span class='hs-comment'>-- comprises the elements of @set@ greater than @x@.</span>
+<a name="line-602"></a><span class='hs-definition'>split</span> <span class='hs-keyglyph'>::</span> <span class='hs-layout'>(</span><span class='hs-conid'>US</span> <span class='hs-varid'>a</span><span class='hs-layout'>,</span> <span class='hs-conid'>Ord</span> <span class='hs-varid'>a</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-varid'>a</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-conid'>USet</span> <span class='hs-varid'>a</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-layout'>(</span><span class='hs-conid'>USet</span> <span class='hs-varid'>a</span><span class='hs-layout'>,</span><span class='hs-conid'>USet</span> <span class='hs-varid'>a</span><span class='hs-layout'>)</span>
+<a name="line-603"></a><span class='hs-definition'>split</span> <span class='hs-varid'>x</span> <span class='hs-layout'>(</span><span class='hs-varid'>view</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-conid'>Bin</span> <span class='hs-keyword'>_</span> <span class='hs-varid'>y</span> <span class='hs-varid'>l</span> <span class='hs-varid'>r</span><span class='hs-layout'>)</span>
+<a name="line-604"></a>  <span class='hs-keyglyph'>=</span> <span class='hs-keyword'>case</span> <span class='hs-varid'>compare</span> <span class='hs-varid'>x</span> <span class='hs-varid'>y</span> <span class='hs-keyword'>of</span>
+<a name="line-605"></a>      <span class='hs-conid'>LT</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-keyword'>let</span> <span class='hs-layout'>(</span><span class='hs-varid'>lt</span><span class='hs-layout'>,</span><span class='hs-varid'>gt</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>split</span> <span class='hs-varid'>x</span> <span class='hs-varid'>l</span> <span class='hs-keyword'>in</span> <span class='hs-layout'>(</span><span class='hs-varid'>lt</span><span class='hs-layout'>,</span><span class='hs-varid'>join</span> <span class='hs-varid'>y</span> <span class='hs-varid'>gt</span> <span class='hs-varid'>r</span><span class='hs-layout'>)</span>
+<a name="line-606"></a>      <span class='hs-conid'>GT</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-keyword'>let</span> <span class='hs-layout'>(</span><span class='hs-varid'>lt</span><span class='hs-layout'>,</span><span class='hs-varid'>gt</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>split</span> <span class='hs-varid'>x</span> <span class='hs-varid'>r</span> <span class='hs-keyword'>in</span> <span class='hs-layout'>(</span><span class='hs-varid'>join</span> <span class='hs-varid'>y</span> <span class='hs-varid'>l</span> <span class='hs-varid'>lt</span><span class='hs-layout'>,</span><span class='hs-varid'>gt</span><span class='hs-layout'>)</span>
+<a name="line-607"></a>      <span class='hs-conid'>EQ</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-layout'>(</span><span class='hs-varid'>l</span><span class='hs-layout'>,</span><span class='hs-varid'>r</span><span class='hs-layout'>)</span>
+<a name="line-608"></a><span class='hs-definition'>split</span> <span class='hs-keyword'>_</span> <span class='hs-keyword'>_</span> <span class='hs-keyglyph'>=</span> <span class='hs-layout'>(</span><span class='hs-varid'>tip</span><span class='hs-layout'>,</span><span class='hs-varid'>tip</span><span class='hs-layout'>)</span>
+<a name="line-609"></a>
+<a name="line-610"></a><a name="splitMember"></a><span class='hs-comment'>-- | /O(log n)/. Performs a 'split' but also returns whether the pivot</span>
+<a name="line-611"></a><span class='hs-comment'>-- element was found in the original set.</span>
+<a name="line-612"></a><span class='hs-definition'>splitMember</span> <span class='hs-keyglyph'>::</span> <span class='hs-layout'>(</span><span class='hs-conid'>US</span> <span class='hs-varid'>a</span><span class='hs-layout'>,</span> <span class='hs-conid'>Ord</span> <span class='hs-varid'>a</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-varid'>a</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-conid'>USet</span> <span class='hs-varid'>a</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-layout'>(</span><span class='hs-conid'>USet</span> <span class='hs-varid'>a</span><span class='hs-layout'>,</span><span class='hs-conid'>Bool</span><span class='hs-layout'>,</span><span class='hs-conid'>USet</span> <span class='hs-varid'>a</span><span class='hs-layout'>)</span>
+<a name="line-613"></a><span class='hs-definition'>splitMember</span> <span class='hs-varid'>x</span> <span class='hs-varid'>t</span> <span class='hs-keyglyph'>=</span> <span class='hs-keyword'>let</span> <span class='hs-layout'>(</span><span class='hs-varid'>l</span><span class='hs-layout'>,</span><span class='hs-varid'>m</span><span class='hs-layout'>,</span><span class='hs-varid'>r</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>splitLookup</span> <span class='hs-varid'>x</span> <span class='hs-varid'>t</span> <span class='hs-keyword'>in</span>
+<a name="line-614"></a>     <span class='hs-layout'>(</span><span class='hs-varid'>l</span><span class='hs-layout'>,</span><span class='hs-varid'>maybe</span> <span class='hs-conid'>False</span> <span class='hs-layout'>(</span><span class='hs-varid'>const</span> <span class='hs-conid'>True</span><span class='hs-layout'>)</span> <span class='hs-varid'>m</span><span class='hs-layout'>,</span><span class='hs-varid'>r</span><span class='hs-layout'>)</span>
+<a name="line-615"></a>
+<a name="line-616"></a><a name="splitLookup"></a><span class='hs-comment'>-- | /O(log n)/. Performs a 'split' but also returns the pivot</span>
+<a name="line-617"></a><span class='hs-comment'>-- element that was found in the original set.</span>
+<a name="line-618"></a><span class='hs-definition'>splitLookup</span> <span class='hs-keyglyph'>::</span> <span class='hs-layout'>(</span><span class='hs-conid'>US</span> <span class='hs-varid'>a</span><span class='hs-layout'>,</span> <span class='hs-conid'>Ord</span> <span class='hs-varid'>a</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-varid'>a</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-conid'>USet</span> <span class='hs-varid'>a</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-layout'>(</span><span class='hs-conid'>USet</span> <span class='hs-varid'>a</span><span class='hs-layout'>,</span><span class='hs-conid'>Maybe</span> <span class='hs-varid'>a</span><span class='hs-layout'>,</span><span class='hs-conid'>USet</span> <span class='hs-varid'>a</span><span class='hs-layout'>)</span>
+<a name="line-619"></a><span class='hs-definition'>splitLookup</span> <span class='hs-varid'>x</span> <span class='hs-layout'>(</span><span class='hs-varid'>view</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-conid'>Bin</span> <span class='hs-keyword'>_</span> <span class='hs-varid'>y</span> <span class='hs-varid'>l</span> <span class='hs-varid'>r</span><span class='hs-layout'>)</span>
+<a name="line-620"></a>   <span class='hs-keyglyph'>=</span> <span class='hs-keyword'>case</span> <span class='hs-varid'>compare</span> <span class='hs-varid'>x</span> <span class='hs-varid'>y</span> <span class='hs-keyword'>of</span>
+<a name="line-621"></a>       <span class='hs-conid'>LT</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-keyword'>let</span> <span class='hs-layout'>(</span><span class='hs-varid'>lt</span><span class='hs-layout'>,</span><span class='hs-varid'>found</span><span class='hs-layout'>,</span><span class='hs-varid'>gt</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>splitLookup</span> <span class='hs-varid'>x</span> <span class='hs-varid'>l</span> <span class='hs-keyword'>in</span> <span class='hs-layout'>(</span><span class='hs-varid'>lt</span><span class='hs-layout'>,</span><span class='hs-varid'>found</span><span class='hs-layout'>,</span><span class='hs-varid'>join</span> <span class='hs-varid'>y</span> <span class='hs-varid'>gt</span> <span class='hs-varid'>r</span><span class='hs-layout'>)</span>
+<a name="line-622"></a>       <span class='hs-conid'>GT</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-keyword'>let</span> <span class='hs-layout'>(</span><span class='hs-varid'>lt</span><span class='hs-layout'>,</span><span class='hs-varid'>found</span><span class='hs-layout'>,</span><span class='hs-varid'>gt</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>splitLookup</span> <span class='hs-varid'>x</span> <span class='hs-varid'>r</span> <span class='hs-keyword'>in</span> <span class='hs-layout'>(</span><span class='hs-varid'>join</span> <span class='hs-varid'>y</span> <span class='hs-varid'>l</span> <span class='hs-varid'>lt</span><span class='hs-layout'>,</span><span class='hs-varid'>found</span><span class='hs-layout'>,</span><span class='hs-varid'>gt</span><span class='hs-layout'>)</span>
+<a name="line-623"></a>       <span class='hs-conid'>EQ</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-layout'>(</span><span class='hs-varid'>l</span><span class='hs-layout'>,</span><span class='hs-conid'>Just</span> <span class='hs-varid'>y</span><span class='hs-layout'>,</span><span class='hs-varid'>r</span><span class='hs-layout'>)</span>
+<a name="line-624"></a><span class='hs-definition'>splitLookup</span> <span class='hs-keyword'>_</span> <span class='hs-keyword'>_</span> <span class='hs-keyglyph'>=</span> <span class='hs-layout'>(</span><span class='hs-varid'>tip</span><span class='hs-layout'>,</span><span class='hs-conid'>Nothing</span><span class='hs-layout'>,</span><span class='hs-varid'>tip</span><span class='hs-layout'>)</span>
+<a name="line-625"></a>
+<a name="line-626"></a><span class='hs-comment'>{--------------------------------------------------------------------
+<a name="line-627"></a>  Utility functions that maintain the balance properties of the tree.
+<a name="line-628"></a>  All constructors assume that all values in [l] &lt; [x] and all values
+<a name="line-629"></a>  in [r] &gt; [x], and that [l] and [r] are valid trees.
+<a name="line-630"></a>  
+<a name="line-631"></a>  In order of sophistication:
+<a name="line-632"></a>    [Bin sz x l r]    The type constructor.
+<a name="line-633"></a>    [bin_ x l r]      Maintains the correct size, assumes that both [l]
+<a name="line-634"></a>                      and [r] are balanced with respect to each other.
+<a name="line-635"></a>    [balance x l r]   Restores the balance and size.
+<a name="line-636"></a>                      Assumes that the original tree was balanced and
+<a name="line-637"></a>                      that [l] or [r] has changed by at most one element.
+<a name="line-638"></a>    [join x l r]      Restores balance and size. 
+<a name="line-639"></a>
+<a name="line-640"></a>  Furthermore, we can construct a new tree from two trees. Both operations
+<a name="line-641"></a>  assume that all values in [l] &lt; all values in [r] and that [l] and [r]
+<a name="line-642"></a>  are valid:
+<a name="line-643"></a>    [glue l r]        Glues [l] and [r] together. Assumes that [l] and
+<a name="line-644"></a>                      [r] are already balanced with respect to each other.
+<a name="line-645"></a>    [merge l r]       Merges two trees and restores balance.
+<a name="line-646"></a>
+<a name="line-647"></a>  Note: in contrast to Adam's paper, we use (&lt;=) comparisons instead
+<a name="line-648"></a>  of (&lt;) comparisons in [join], [merge] and [balance]. 
+<a name="line-649"></a>  Quickcheck (on [difference]) showed that this was necessary in order 
+<a name="line-650"></a>  to maintain the invariants. It is quite unsatisfactory that I haven't 
+<a name="line-651"></a>  been able to find out why this is actually the case! Fortunately, it 
+<a name="line-652"></a>  doesn't hurt to be a bit more conservative.
+<a name="line-653"></a>--------------------------------------------------------------------}</span>
+<a name="line-654"></a>
+<a name="line-655"></a><a name="join"></a><span class='hs-comment'>{--------------------------------------------------------------------
+<a name="line-656"></a>  Join 
+<a name="line-657"></a>--------------------------------------------------------------------}</span>
+<a name="line-658"></a><span class='hs-definition'>join</span> <span class='hs-keyglyph'>::</span> <span class='hs-conid'>US</span> <span class='hs-varid'>a</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-varid'>a</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-conid'>USet</span> <span class='hs-varid'>a</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-conid'>USet</span> <span class='hs-varid'>a</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-conid'>USet</span> <span class='hs-varid'>a</span>
+<a name="line-659"></a><span class='hs-definition'>join</span> <span class='hs-varid'>x</span> <span class='hs-layout'>(</span><span class='hs-varid'>null</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-conid'>True</span><span class='hs-layout'>)</span> <span class='hs-varid'>r</span>  <span class='hs-keyglyph'>=</span> <span class='hs-varid'>insertMin</span> <span class='hs-varid'>x</span> <span class='hs-varid'>r</span>
+<a name="line-660"></a><span class='hs-definition'>join</span> <span class='hs-varid'>x</span> <span class='hs-varid'>l</span> <span class='hs-layout'>(</span><span class='hs-varid'>null</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-conid'>True</span><span class='hs-layout'>)</span>  <span class='hs-keyglyph'>=</span> <span class='hs-varid'>insertMax</span> <span class='hs-varid'>x</span> <span class='hs-varid'>l</span>
+<a name="line-661"></a><span class='hs-definition'>join</span> <span class='hs-varid'>x</span> <span class='hs-varid'>l</span><span class='hs-keyglyph'>@</span><span class='hs-layout'>(</span><span class='hs-varid'>view</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-conid'>Bin</span> <span class='hs-varid'>sizeL</span> <span class='hs-varid'>y</span> <span class='hs-varid'>ly</span> <span class='hs-varid'>ry</span><span class='hs-layout'>)</span> <span class='hs-varid'>r</span><span class='hs-keyglyph'>@</span><span class='hs-layout'>(</span><span class='hs-varid'>view</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-conid'>Bin</span> <span class='hs-varid'>sizeR</span> <span class='hs-varid'>z</span> <span class='hs-varid'>lz</span> <span class='hs-varid'>rz</span><span class='hs-layout'>)</span>
+<a name="line-662"></a>  <span class='hs-keyglyph'>|</span> <span class='hs-varid'>delta</span><span class='hs-varop'>*</span><span class='hs-varid'>sizeL</span> <span class='hs-varop'>&lt;=</span> <span class='hs-varid'>sizeR</span>  <span class='hs-keyglyph'>=</span> <span class='hs-varid'>balance</span> <span class='hs-varid'>z</span> <span class='hs-layout'>(</span><span class='hs-varid'>join</span> <span class='hs-varid'>x</span> <span class='hs-varid'>l</span> <span class='hs-varid'>lz</span><span class='hs-layout'>)</span> <span class='hs-varid'>rz</span>
+<a name="line-663"></a>  <span class='hs-keyglyph'>|</span> <span class='hs-varid'>delta</span><span class='hs-varop'>*</span><span class='hs-varid'>sizeR</span> <span class='hs-varop'>&lt;=</span> <span class='hs-varid'>sizeL</span>  <span class='hs-keyglyph'>=</span> <span class='hs-varid'>balance</span> <span class='hs-varid'>y</span> <span class='hs-varid'>ly</span> <span class='hs-layout'>(</span><span class='hs-varid'>join</span> <span class='hs-varid'>x</span> <span class='hs-varid'>ry</span> <span class='hs-varid'>r</span><span class='hs-layout'>)</span>
+<a name="line-664"></a>  <span class='hs-keyglyph'>|</span> <span class='hs-varid'>otherwise</span>             <span class='hs-keyglyph'>=</span> <span class='hs-varid'>bin_</span> <span class='hs-varid'>x</span> <span class='hs-varid'>l</span> <span class='hs-varid'>r</span>
+<a name="line-665"></a>
+<a name="line-666"></a>
+<a name="line-667"></a><a name="insertMax"></a><span class='hs-comment'>-- insertMin and insertMax don't perform potentially expensive comparisons.</span>
+<a name="line-668"></a><span class='hs-definition'>insertMax</span><span class='hs-layout'>,</span><span class='hs-varid'>insertMin</span> <span class='hs-keyglyph'>::</span> <span class='hs-conid'>US</span> <span class='hs-varid'>a</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-varid'>a</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-conid'>USet</span> <span class='hs-varid'>a</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-conid'>USet</span> <span class='hs-varid'>a</span> 
+<a name="line-669"></a><span class='hs-definition'>insertMax</span> <span class='hs-varid'>x</span> <span class='hs-varid'>t</span>
+<a name="line-670"></a>  <span class='hs-keyglyph'>=</span> <span class='hs-keyword'>case</span> <span class='hs-varid'>view</span> <span class='hs-varid'>t</span> <span class='hs-keyword'>of</span>
+<a name="line-671"></a>      <span class='hs-conid'>Bin</span> <span class='hs-keyword'>_</span> <span class='hs-varid'>y</span> <span class='hs-varid'>l</span> <span class='hs-varid'>r</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-varid'>balance</span> <span class='hs-varid'>y</span> <span class='hs-varid'>l</span> <span class='hs-layout'>(</span><span class='hs-varid'>insertMax</span> <span class='hs-varid'>x</span> <span class='hs-varid'>r</span><span class='hs-layout'>)</span>
+<a name="line-672"></a>      <span class='hs-keyword'>_</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-varid'>singleton</span> <span class='hs-varid'>x</span>
+<a name="line-673"></a>             
+<a name="line-674"></a><a name="insertMin"></a><span class='hs-definition'>insertMin</span> <span class='hs-varid'>x</span> <span class='hs-varid'>t</span>
+<a name="line-675"></a>  <span class='hs-keyglyph'>=</span> <span class='hs-keyword'>case</span> <span class='hs-varid'>view</span> <span class='hs-varid'>t</span> <span class='hs-keyword'>of</span>
+<a name="line-676"></a>      <span class='hs-conid'>Bin</span> <span class='hs-keyword'>_</span> <span class='hs-varid'>y</span> <span class='hs-varid'>l</span> <span class='hs-varid'>r</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-varid'>balance</span> <span class='hs-varid'>y</span> <span class='hs-layout'>(</span><span class='hs-varid'>insertMin</span> <span class='hs-varid'>x</span> <span class='hs-varid'>l</span><span class='hs-layout'>)</span> <span class='hs-varid'>r</span>
+<a name="line-677"></a>      <span class='hs-keyword'>_</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-varid'>singleton</span> <span class='hs-varid'>x</span>
+<a name="line-678"></a>             
+<a name="line-679"></a><a name="merge"></a><span class='hs-comment'>{--------------------------------------------------------------------
+<a name="line-680"></a>  [merge l r]: merges two trees.
+<a name="line-681"></a>--------------------------------------------------------------------}</span>
+<a name="line-682"></a><span class='hs-definition'>merge</span> <span class='hs-keyglyph'>::</span> <span class='hs-conid'>US</span> <span class='hs-varid'>a</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>USet</span> <span class='hs-varid'>a</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-conid'>USet</span> <span class='hs-varid'>a</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-conid'>USet</span> <span class='hs-varid'>a</span>
+<a name="line-683"></a><span class='hs-definition'>merge</span> <span class='hs-layout'>(</span><span class='hs-varid'>null</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-conid'>True</span><span class='hs-layout'>)</span> <span class='hs-varid'>r</span>   <span class='hs-keyglyph'>=</span> <span class='hs-varid'>r</span>
+<a name="line-684"></a><span class='hs-definition'>merge</span> <span class='hs-varid'>l</span> <span class='hs-layout'>(</span><span class='hs-varid'>null</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-conid'>True</span><span class='hs-layout'>)</span>   <span class='hs-keyglyph'>=</span> <span class='hs-varid'>l</span>
+<a name="line-685"></a><span class='hs-definition'>merge</span> <span class='hs-varid'>l</span><span class='hs-keyglyph'>@</span><span class='hs-layout'>(</span><span class='hs-varid'>view</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-conid'>Bin</span> <span class='hs-varid'>sizeL</span> <span class='hs-varid'>x</span> <span class='hs-varid'>lx</span> <span class='hs-varid'>rx</span><span class='hs-layout'>)</span> <span class='hs-varid'>r</span><span class='hs-keyglyph'>@</span><span class='hs-layout'>(</span><span class='hs-varid'>view</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-conid'>Bin</span> <span class='hs-varid'>sizeR</span> <span class='hs-varid'>y</span> <span class='hs-varid'>ly</span> <span class='hs-varid'>ry</span><span class='hs-layout'>)</span>
+<a name="line-686"></a>  <span class='hs-keyglyph'>|</span> <span class='hs-varid'>delta</span><span class='hs-varop'>*</span><span class='hs-varid'>sizeL</span> <span class='hs-varop'>&lt;=</span> <span class='hs-varid'>sizeR</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>balance</span> <span class='hs-varid'>y</span> <span class='hs-layout'>(</span><span class='hs-varid'>merge</span> <span class='hs-varid'>l</span> <span class='hs-varid'>ly</span><span class='hs-layout'>)</span> <span class='hs-varid'>ry</span>
+<a name="line-687"></a>  <span class='hs-keyglyph'>|</span> <span class='hs-varid'>delta</span><span class='hs-varop'>*</span><span class='hs-varid'>sizeR</span> <span class='hs-varop'>&lt;=</span> <span class='hs-varid'>sizeL</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>balance</span> <span class='hs-varid'>x</span> <span class='hs-varid'>lx</span> <span class='hs-layout'>(</span><span class='hs-varid'>merge</span> <span class='hs-varid'>rx</span> <span class='hs-varid'>r</span><span class='hs-layout'>)</span>
+<a name="line-688"></a>  <span class='hs-keyglyph'>|</span> <span class='hs-varid'>otherwise</span>            <span class='hs-keyglyph'>=</span> <span class='hs-varid'>glue</span> <span class='hs-varid'>l</span> <span class='hs-varid'>r</span>
+<a name="line-689"></a>
+<a name="line-690"></a><a name="glue"></a><span class='hs-comment'>{--------------------------------------------------------------------
+<a name="line-691"></a>  [glue l r]: glues two trees together.
+<a name="line-692"></a>  Assumes that [l] and [r] are already balanced with respect to each other.
+<a name="line-693"></a>--------------------------------------------------------------------}</span>
+<a name="line-694"></a><span class='hs-definition'>glue</span> <span class='hs-keyglyph'>::</span> <span class='hs-conid'>US</span> <span class='hs-varid'>a</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>USet</span> <span class='hs-varid'>a</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-conid'>USet</span> <span class='hs-varid'>a</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-conid'>USet</span> <span class='hs-varid'>a</span>
+<a name="line-695"></a><span class='hs-definition'>glue</span> <span class='hs-layout'>(</span><span class='hs-varid'>null</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-conid'>True</span><span class='hs-layout'>)</span> <span class='hs-varid'>r</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>r</span>
+<a name="line-696"></a><span class='hs-definition'>glue</span> <span class='hs-varid'>l</span> <span class='hs-layout'>(</span><span class='hs-varid'>null</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-conid'>True</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>l</span>
+<a name="line-697"></a><span class='hs-definition'>glue</span> <span class='hs-varid'>l</span> <span class='hs-varid'>r</span>   
+<a name="line-698"></a>  <span class='hs-keyglyph'>|</span> <span class='hs-varid'>size</span> <span class='hs-varid'>l</span> <span class='hs-varop'>&gt;</span> <span class='hs-varid'>size</span> <span class='hs-varid'>r</span> <span class='hs-keyglyph'>=</span> <span class='hs-keyword'>let</span> <span class='hs-layout'>(</span><span class='hs-varid'>m</span><span class='hs-layout'>,</span><span class='hs-varid'>l'</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>deleteFindMax</span> <span class='hs-varid'>l</span> <span class='hs-keyword'>in</span> <span class='hs-varid'>balance</span> <span class='hs-varid'>m</span> <span class='hs-varid'>l'</span> <span class='hs-varid'>r</span>
+<a name="line-699"></a>  <span class='hs-keyglyph'>|</span> <span class='hs-varid'>otherwise</span>       <span class='hs-keyglyph'>=</span> <span class='hs-keyword'>let</span> <span class='hs-layout'>(</span><span class='hs-varid'>m</span><span class='hs-layout'>,</span><span class='hs-varid'>r'</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>deleteFindMin</span> <span class='hs-varid'>r</span> <span class='hs-keyword'>in</span> <span class='hs-varid'>balance</span> <span class='hs-varid'>m</span> <span class='hs-varid'>l</span> <span class='hs-varid'>r'</span>
+<a name="line-700"></a>
+<a name="line-701"></a>
+<a name="line-702"></a><span class='hs-comment'>-- | /O(log n)/. Delete and find the minimal element.</span>
+<a name="line-703"></a><span class='hs-comment'>-- </span>
+<a name="line-704"></a><span class='hs-comment'>-- &gt; deleteFindMin set = (findMin set, deleteMin set)</span>
+<a name="line-705"></a>
+<a name="line-706"></a><a name="deleteFindMin"></a><span class='hs-definition'>deleteFindMin</span> <span class='hs-keyglyph'>::</span> <span class='hs-conid'>US</span> <span class='hs-varid'>a</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>USet</span> <span class='hs-varid'>a</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-layout'>(</span><span class='hs-varid'>a</span><span class='hs-layout'>,</span><span class='hs-conid'>USet</span> <span class='hs-varid'>a</span><span class='hs-layout'>)</span>
+<a name="line-707"></a><span class='hs-definition'>deleteFindMin</span> <span class='hs-varid'>t</span> 
+<a name="line-708"></a>  <span class='hs-keyglyph'>=</span> <span class='hs-keyword'>case</span> <span class='hs-varid'>view</span> <span class='hs-varid'>t</span> <span class='hs-keyword'>of</span>
+<a name="line-709"></a>      <span class='hs-conid'>Bin</span> <span class='hs-keyword'>_</span> <span class='hs-varid'>x</span> <span class='hs-layout'>(</span><span class='hs-varid'>null</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-conid'>True</span><span class='hs-layout'>)</span> <span class='hs-varid'>r</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-layout'>(</span><span class='hs-varid'>x</span><span class='hs-layout'>,</span><span class='hs-varid'>r</span><span class='hs-layout'>)</span>
+<a name="line-710"></a>      <span class='hs-conid'>Bin</span> <span class='hs-keyword'>_</span> <span class='hs-varid'>x</span> <span class='hs-varid'>l</span> <span class='hs-varid'>r</span>   <span class='hs-keyglyph'>-&gt;</span> <span class='hs-keyword'>let</span> <span class='hs-layout'>(</span><span class='hs-varid'>xm</span><span class='hs-layout'>,</span><span class='hs-varid'>l'</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>deleteFindMin</span> <span class='hs-varid'>l</span> <span class='hs-keyword'>in</span> <span class='hs-layout'>(</span><span class='hs-varid'>xm</span><span class='hs-layout'>,</span><span class='hs-varid'>balance</span> <span class='hs-varid'>x</span> <span class='hs-varid'>l'</span> <span class='hs-varid'>r</span><span class='hs-layout'>)</span>
+<a name="line-711"></a>      <span class='hs-conid'>Tip</span>           <span class='hs-keyglyph'>-&gt;</span> <span class='hs-layout'>(</span><span class='hs-varid'>error</span> <span class='hs-str'>"Set.deleteFindMin: can not return the minimal element of an empty set"</span><span class='hs-layout'>,</span> <span class='hs-varid'>tip</span><span class='hs-layout'>)</span>
+<a name="line-712"></a>
+<a name="line-713"></a><a name="deleteFindMax"></a><span class='hs-comment'>-- | /O(log n)/. Delete and find the maximal element.</span>
+<a name="line-714"></a><span class='hs-comment'>-- </span>
+<a name="line-715"></a><span class='hs-comment'>-- &gt; deleteFindMax set = (findMax set, deleteMax set)</span>
+<a name="line-716"></a><span class='hs-definition'>deleteFindMax</span> <span class='hs-keyglyph'>::</span> <span class='hs-conid'>US</span> <span class='hs-varid'>a</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>USet</span> <span class='hs-varid'>a</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-layout'>(</span><span class='hs-varid'>a</span><span class='hs-layout'>,</span><span class='hs-conid'>USet</span> <span class='hs-varid'>a</span><span class='hs-layout'>)</span>
+<a name="line-717"></a><span class='hs-definition'>deleteFindMax</span> <span class='hs-varid'>t</span>
+<a name="line-718"></a>  <span class='hs-keyglyph'>=</span> <span class='hs-keyword'>case</span> <span class='hs-varid'>view</span> <span class='hs-varid'>t</span> <span class='hs-keyword'>of</span>
+<a name="line-719"></a>      <span class='hs-conid'>Bin</span> <span class='hs-keyword'>_</span> <span class='hs-varid'>x</span> <span class='hs-varid'>l</span> <span class='hs-layout'>(</span><span class='hs-varid'>null</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-conid'>True</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-layout'>(</span><span class='hs-varid'>x</span><span class='hs-layout'>,</span><span class='hs-varid'>l</span><span class='hs-layout'>)</span>
+<a name="line-720"></a>      <span class='hs-conid'>Bin</span> <span class='hs-keyword'>_</span> <span class='hs-varid'>x</span> <span class='hs-varid'>l</span> <span class='hs-varid'>r</span>   <span class='hs-keyglyph'>-&gt;</span> <span class='hs-keyword'>let</span> <span class='hs-layout'>(</span><span class='hs-varid'>xm</span><span class='hs-layout'>,</span><span class='hs-varid'>r'</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>deleteFindMax</span> <span class='hs-varid'>r</span> <span class='hs-keyword'>in</span> <span class='hs-layout'>(</span><span class='hs-varid'>xm</span><span class='hs-layout'>,</span><span class='hs-varid'>balance</span> <span class='hs-varid'>x</span> <span class='hs-varid'>l</span> <span class='hs-varid'>r'</span><span class='hs-layout'>)</span>
+<a name="line-721"></a>      <span class='hs-keyword'>_</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-layout'>(</span><span class='hs-varid'>error</span> <span class='hs-str'>"Set.deleteFindMax: can not return the maximal element of an empty set"</span><span class='hs-layout'>,</span> <span class='hs-varid'>tip</span><span class='hs-layout'>)</span>
+<a name="line-722"></a>
+<a name="line-723"></a><a name="minView"></a><span class='hs-comment'>-- | /O(log n)/. Retrieves the minimal key of the set, and the set</span>
+<a name="line-724"></a><span class='hs-comment'>-- stripped of that element, or 'Nothing' if passed an empty set.</span>
+<a name="line-725"></a><span class='hs-definition'>minView</span> <span class='hs-keyglyph'>::</span> <span class='hs-conid'>US</span> <span class='hs-varid'>a</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>USet</span> <span class='hs-varid'>a</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-conid'>Maybe</span> <span class='hs-layout'>(</span><span class='hs-varid'>a</span><span class='hs-layout'>,</span> <span class='hs-conid'>USet</span> <span class='hs-varid'>a</span><span class='hs-layout'>)</span>
+<a name="line-726"></a><span class='hs-definition'>minView</span> <span class='hs-layout'>(</span><span class='hs-varid'>null</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-conid'>True</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>Nothing</span>
+<a name="line-727"></a><span class='hs-definition'>minView</span> <span class='hs-varid'>x</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>Just</span> <span class='hs-layout'>(</span><span class='hs-varid'>deleteFindMin</span> <span class='hs-varid'>x</span><span class='hs-layout'>)</span>
+<a name="line-728"></a>
+<a name="line-729"></a><a name="maxView"></a><span class='hs-comment'>-- | /O(log n)/. Retrieves the maximal key of the set, and the set</span>
+<a name="line-730"></a><span class='hs-comment'>-- stripped of that element, or 'Nothing' if passed an empty set.</span>
+<a name="line-731"></a><span class='hs-definition'>maxView</span> <span class='hs-keyglyph'>::</span> <span class='hs-conid'>US</span> <span class='hs-varid'>a</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>USet</span> <span class='hs-varid'>a</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-conid'>Maybe</span> <span class='hs-layout'>(</span><span class='hs-varid'>a</span><span class='hs-layout'>,</span> <span class='hs-conid'>USet</span> <span class='hs-varid'>a</span><span class='hs-layout'>)</span>
+<a name="line-732"></a><span class='hs-definition'>maxView</span> <span class='hs-layout'>(</span><span class='hs-varid'>null</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-conid'>True</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>Nothing</span>
+<a name="line-733"></a><span class='hs-definition'>maxView</span> <span class='hs-varid'>x</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>Just</span> <span class='hs-layout'>(</span><span class='hs-varid'>deleteFindMax</span> <span class='hs-varid'>x</span><span class='hs-layout'>)</span>
+<a name="line-734"></a>
+<a name="line-735"></a><a name="delta"></a><span class='hs-comment'>{--------------------------------------------------------------------
+<a name="line-736"></a>  [balance x l r] balances two trees with value x.
+<a name="line-737"></a>  The sizes of the trees should balance after decreasing the
+<a name="line-738"></a>  size of one of them. (a rotation).
+<a name="line-739"></a>
+<a name="line-740"></a>  [delta] is the maximal relative difference between the sizes of
+<a name="line-741"></a>          two trees, it corresponds with the [w] in Adams' paper,
+<a name="line-742"></a>          or equivalently, [1/delta] corresponds with the $\alpha$
+<a name="line-743"></a>          in Nievergelt's paper. Adams shows that [delta] should
+<a name="line-744"></a>          be larger than 3.745 in order to garantee that the
+<a name="line-745"></a>          rotations can always restore balance.         
+<a name="line-746"></a>
+<a name="line-747"></a>  [ratio] is the ratio between an outer and inner sibling of the
+<a name="line-748"></a>          heavier subtree in an unbalanced setting. It determines
+<a name="line-749"></a>          whether a double or single rotation should be performed
+<a name="line-750"></a>          to restore balance. It is correspondes with the inverse
+<a name="line-751"></a>          of $\alpha$ in Adam's article.
+<a name="line-752"></a>
+<a name="line-753"></a>  Note that:
+<a name="line-754"></a>  - [delta] should be larger than 4.646 with a [ratio] of 2.
+<a name="line-755"></a>  - [delta] should be larger than 3.745 with a [ratio] of 1.534.
+<a name="line-756"></a>  
+<a name="line-757"></a>  - A lower [delta] leads to a more 'perfectly' balanced tree.
+<a name="line-758"></a>  - A higher [delta] performs less rebalancing.
+<a name="line-759"></a>
+<a name="line-760"></a>  - Balancing is automatic for random data and a balancing
+<a name="line-761"></a>    scheme is only necessary to avoid pathological worst cases.
+<a name="line-762"></a>    Almost any choice will do in practice
+<a name="line-763"></a>    
+<a name="line-764"></a>  - Allthough it seems that a rather large [delta] may perform better 
+<a name="line-765"></a>    than smaller one, measurements have shown that the smallest [delta]
+<a name="line-766"></a>    of 4 is actually the fastest on a wide range of operations. It
+<a name="line-767"></a>    especially improves performance on worst-case scenarios like
+<a name="line-768"></a>    a sequence of ordered insertions.
+<a name="line-769"></a>
+<a name="line-770"></a>  Note: in contrast to Adams' paper, we use a ratio of (at least) 2
+<a name="line-771"></a>  to decide whether a single or double rotation is needed. Allthough
+<a name="line-772"></a>  he actually proves that this ratio is needed to maintain the
+<a name="line-773"></a>  invariants, his implementation uses a (invalid) ratio of 1. 
+<a name="line-774"></a>  He is aware of the problem though since he has put a comment in his 
+<a name="line-775"></a>  original source code that he doesn't care about generating a 
+<a name="line-776"></a>  slightly inbalanced tree since it doesn't seem to matter in practice. 
+<a name="line-777"></a>  However (since we use quickcheck :-) we will stick to strictly balanced 
+<a name="line-778"></a>  trees.
+<a name="line-779"></a>--------------------------------------------------------------------}</span>
+<a name="line-780"></a><span class='hs-definition'>delta</span><span class='hs-layout'>,</span><span class='hs-varid'>ratio</span> <span class='hs-keyglyph'>::</span> <span class='hs-conid'>Int</span>
+<a name="line-781"></a><span class='hs-definition'>delta</span> <span class='hs-keyglyph'>=</span> <span class='hs-num'>4</span>
+<a name="line-782"></a><a name="ratio"></a><span class='hs-definition'>ratio</span> <span class='hs-keyglyph'>=</span> <span class='hs-num'>2</span>
+<a name="line-783"></a>
+<a name="line-784"></a><a name="balance"></a><span class='hs-definition'>balance</span> <span class='hs-keyglyph'>::</span> <span class='hs-conid'>US</span> <span class='hs-varid'>a</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-varid'>a</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-conid'>USet</span> <span class='hs-varid'>a</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-conid'>USet</span> <span class='hs-varid'>a</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-conid'>USet</span> <span class='hs-varid'>a</span>
+<a name="line-785"></a><span class='hs-definition'>balance</span> <span class='hs-varid'>x</span> <span class='hs-varid'>l</span> <span class='hs-varid'>r</span>
+<a name="line-786"></a>  <span class='hs-keyglyph'>|</span> <span class='hs-varid'>sizeL</span> <span class='hs-varop'>+</span> <span class='hs-varid'>sizeR</span> <span class='hs-varop'>&lt;=</span> <span class='hs-num'>1</span>    <span class='hs-keyglyph'>=</span> <span class='hs-varid'>bin</span> <span class='hs-varid'>sizeX</span> <span class='hs-varid'>x</span> <span class='hs-varid'>l</span> <span class='hs-varid'>r</span>
+<a name="line-787"></a>  <span class='hs-keyglyph'>|</span> <span class='hs-varid'>sizeR</span> <span class='hs-varop'>&gt;=</span> <span class='hs-varid'>delta</span><span class='hs-varop'>*</span><span class='hs-varid'>sizeL</span>  <span class='hs-keyglyph'>=</span> <span class='hs-varid'>rotateL</span> <span class='hs-varid'>x</span> <span class='hs-varid'>l</span> <span class='hs-varid'>r</span>
+<a name="line-788"></a>  <span class='hs-keyglyph'>|</span> <span class='hs-varid'>sizeL</span> <span class='hs-varop'>&gt;=</span> <span class='hs-varid'>delta</span><span class='hs-varop'>*</span><span class='hs-varid'>sizeR</span>  <span class='hs-keyglyph'>=</span> <span class='hs-varid'>rotateR</span> <span class='hs-varid'>x</span> <span class='hs-varid'>l</span> <span class='hs-varid'>r</span>
+<a name="line-789"></a>  <span class='hs-keyglyph'>|</span> <span class='hs-varid'>otherwise</span>             <span class='hs-keyglyph'>=</span> <span class='hs-varid'>bin</span> <span class='hs-varid'>sizeX</span> <span class='hs-varid'>x</span> <span class='hs-varid'>l</span> <span class='hs-varid'>r</span>
+<a name="line-790"></a>  <span class='hs-keyword'>where</span>
+<a name="line-791"></a>    <span class='hs-varid'>sizeL</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>size</span> <span class='hs-varid'>l</span>
+<a name="line-792"></a>    <span class='hs-varid'>sizeR</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>size</span> <span class='hs-varid'>r</span>
+<a name="line-793"></a>    <span class='hs-varid'>sizeX</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>sizeL</span> <span class='hs-varop'>+</span> <span class='hs-varid'>sizeR</span> <span class='hs-varop'>+</span> <span class='hs-num'>1</span>
+<a name="line-794"></a><span class='hs-comment'>{-# SPECIALIZE balance :: Int -&gt; USet Int -&gt; USet Int -&gt; USet Int #-}</span>
+<a name="line-795"></a>
+<a name="line-796"></a><a name="rotateL"></a><span class='hs-comment'>-- rotate</span>
+<a name="line-797"></a><span class='hs-definition'>rotateL</span> <span class='hs-keyglyph'>::</span> <span class='hs-conid'>US</span> <span class='hs-varid'>a</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-varid'>a</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-conid'>USet</span> <span class='hs-varid'>a</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-conid'>USet</span> <span class='hs-varid'>a</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-conid'>USet</span> <span class='hs-varid'>a</span>
+<a name="line-798"></a><span class='hs-definition'>rotateL</span> <span class='hs-varid'>x</span> <span class='hs-varid'>l</span> <span class='hs-layout'>(</span><span class='hs-varid'>viewBin</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-layout'>(</span><span class='hs-cpp'>#</span> <span class='hs-varid'>v</span><span class='hs-layout'>,</span> <span class='hs-varid'>ly</span><span class='hs-layout'>,</span> <span class='hs-varid'>ry</span> <span class='hs-cpp'>#</span><span class='hs-layout'>)</span><span class='hs-layout'>)</span>
+<a name="line-799"></a>  <span class='hs-keyglyph'>|</span> <span class='hs-varid'>size</span> <span class='hs-varid'>ly</span> <span class='hs-varop'>&lt;</span> <span class='hs-varid'>ratio</span><span class='hs-varop'>*</span><span class='hs-varid'>size</span> <span class='hs-varid'>ry</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>singleL</span> <span class='hs-varid'>x</span> <span class='hs-varid'>l</span> <span class='hs-varid'>v</span> <span class='hs-varid'>ly</span> <span class='hs-varid'>ry</span>
+<a name="line-800"></a>  <span class='hs-keyglyph'>|</span> <span class='hs-varid'>otherwise</span>               <span class='hs-keyglyph'>=</span> <span class='hs-varid'>doubleL</span> <span class='hs-varid'>x</span> <span class='hs-varid'>l</span> <span class='hs-varid'>v</span> <span class='hs-varid'>ly</span> <span class='hs-varid'>ry</span>
+<a name="line-801"></a>
+<a name="line-802"></a><a name="rotateR"></a><span class='hs-definition'>rotateR</span> <span class='hs-keyglyph'>::</span> <span class='hs-conid'>US</span> <span class='hs-varid'>a</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-varid'>a</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-conid'>USet</span> <span class='hs-varid'>a</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-conid'>USet</span> <span class='hs-varid'>a</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-conid'>USet</span> <span class='hs-varid'>a</span>
+<a name="line-803"></a><span class='hs-definition'>rotateR</span> <span class='hs-varid'>x</span> <span class='hs-layout'>(</span><span class='hs-varid'>viewBin</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-layout'>(</span><span class='hs-cpp'>#</span> <span class='hs-varid'>v</span><span class='hs-layout'>,</span> <span class='hs-varid'>ly</span><span class='hs-layout'>,</span> <span class='hs-varid'>ry</span> <span class='hs-cpp'>#</span><span class='hs-layout'>)</span><span class='hs-layout'>)</span> <span class='hs-varid'>r</span>
+<a name="line-804"></a>  <span class='hs-keyglyph'>|</span> <span class='hs-varid'>size</span> <span class='hs-varid'>ry</span> <span class='hs-varop'>&lt;</span> <span class='hs-varid'>ratio</span><span class='hs-varop'>*</span><span class='hs-varid'>size</span> <span class='hs-varid'>ly</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>singleR</span> <span class='hs-varid'>x</span> <span class='hs-varid'>v</span> <span class='hs-varid'>ly</span> <span class='hs-varid'>ry</span> <span class='hs-varid'>r</span>
+<a name="line-805"></a>  <span class='hs-keyglyph'>|</span> <span class='hs-varid'>otherwise</span>               <span class='hs-keyglyph'>=</span> <span class='hs-varid'>doubleR</span> <span class='hs-varid'>x</span> <span class='hs-varid'>v</span> <span class='hs-varid'>ly</span> <span class='hs-varid'>ry</span> <span class='hs-varid'>r</span>
+<a name="line-806"></a>
+<a name="line-807"></a><a name="singleL"></a><span class='hs-definition'>singleL</span> <span class='hs-keyglyph'>::</span> <span class='hs-conid'>US</span> <span class='hs-varid'>a</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-varid'>a</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-conid'>USet</span> <span class='hs-varid'>a</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-varid'>a</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-conid'>USet</span> <span class='hs-varid'>a</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-conid'>USet</span> <span class='hs-varid'>a</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-conid'>USet</span> <span class='hs-varid'>a</span>
+<a name="line-808"></a><span class='hs-definition'>singleL</span> <span class='hs-varid'>x1</span> <span class='hs-varid'>t1</span> <span class='hs-varid'>x2</span> <span class='hs-varid'>t2</span> <span class='hs-varid'>t3</span> 
+<a name="line-809"></a>    <span class='hs-keyglyph'>=</span> <span class='hs-varid'>bin_</span> <span class='hs-varid'>x2</span> <span class='hs-layout'>(</span><span class='hs-varid'>bin_</span> <span class='hs-varid'>x1</span> <span class='hs-varid'>t1</span> <span class='hs-varid'>t2</span><span class='hs-layout'>)</span> <span class='hs-varid'>t3</span>
+<a name="line-810"></a>
+<a name="line-811"></a><a name="singleR"></a><span class='hs-definition'>singleR</span> <span class='hs-keyglyph'>::</span> <span class='hs-conid'>US</span> <span class='hs-varid'>a</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-varid'>a</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-varid'>a</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-conid'>USet</span> <span class='hs-varid'>a</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-conid'>USet</span> <span class='hs-varid'>a</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-conid'>USet</span> <span class='hs-varid'>a</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-conid'>USet</span> <span class='hs-varid'>a</span>
+<a name="line-812"></a><span class='hs-definition'>singleR</span> <span class='hs-varid'>x1</span> <span class='hs-varid'>x2</span> <span class='hs-varid'>t1</span> <span class='hs-varid'>t2</span> <span class='hs-varid'>t3</span> 
+<a name="line-813"></a>    <span class='hs-keyglyph'>=</span> <span class='hs-varid'>bin_</span> <span class='hs-varid'>x2</span> <span class='hs-varid'>t1</span> <span class='hs-layout'>(</span><span class='hs-varid'>bin_</span> <span class='hs-varid'>x1</span> <span class='hs-varid'>t2</span> <span class='hs-varid'>t3</span><span class='hs-layout'>)</span>
+<a name="line-814"></a>
+<a name="line-815"></a><a name="doubleL"></a><span class='hs-definition'>doubleL</span> <span class='hs-keyglyph'>::</span> <span class='hs-conid'>US</span> <span class='hs-varid'>a</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-varid'>a</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-conid'>USet</span> <span class='hs-varid'>a</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-varid'>a</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-conid'>USet</span> <span class='hs-varid'>a</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-conid'>USet</span> <span class='hs-varid'>a</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-conid'>USet</span> <span class='hs-varid'>a</span>
+<a name="line-816"></a><span class='hs-definition'>doubleL</span> <span class='hs-varid'>x1</span> <span class='hs-varid'>t1</span> <span class='hs-varid'>x2</span> <span class='hs-layout'>(</span><span class='hs-varid'>viewBin</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-layout'>(</span><span class='hs-cpp'>#</span> <span class='hs-varid'>x3</span><span class='hs-layout'>,</span> <span class='hs-varid'>t2</span><span class='hs-layout'>,</span> <span class='hs-varid'>t3</span> <span class='hs-cpp'>#</span><span class='hs-layout'>)</span><span class='hs-layout'>)</span> <span class='hs-varid'>t4</span> 
+<a name="line-817"></a>    <span class='hs-keyglyph'>=</span> <span class='hs-varid'>bin_</span> <span class='hs-varid'>x3</span> <span class='hs-layout'>(</span><span class='hs-varid'>bin_</span> <span class='hs-varid'>x1</span> <span class='hs-varid'>t1</span> <span class='hs-varid'>t2</span><span class='hs-layout'>)</span> <span class='hs-layout'>(</span><span class='hs-varid'>bin_</span> <span class='hs-varid'>x2</span> <span class='hs-varid'>t3</span> <span class='hs-varid'>t4</span><span class='hs-layout'>)</span>
+<a name="line-818"></a>
+<a name="line-819"></a><a name="doubleR"></a><span class='hs-definition'>doubleR</span> <span class='hs-keyglyph'>::</span> <span class='hs-conid'>US</span> <span class='hs-varid'>a</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-varid'>a</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-varid'>a</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-conid'>USet</span> <span class='hs-varid'>a</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-conid'>USet</span> <span class='hs-varid'>a</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-conid'>USet</span> <span class='hs-varid'>a</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-conid'>USet</span> <span class='hs-varid'>a</span>
+<a name="line-820"></a><span class='hs-definition'>doubleR</span> <span class='hs-varid'>x1</span> <span class='hs-varid'>x2</span> <span class='hs-varid'>t1</span> <span class='hs-layout'>(</span><span class='hs-varid'>viewBin</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-layout'>(</span><span class='hs-cpp'>#</span> <span class='hs-varid'>x3</span><span class='hs-layout'>,</span> <span class='hs-varid'>t2</span><span class='hs-layout'>,</span> <span class='hs-varid'>t3</span> <span class='hs-cpp'>#</span><span class='hs-layout'>)</span><span class='hs-layout'>)</span> <span class='hs-varid'>t4</span> 
+<a name="line-821"></a>    <span class='hs-keyglyph'>=</span> <span class='hs-varid'>bin_</span> <span class='hs-varid'>x3</span> <span class='hs-layout'>(</span><span class='hs-varid'>bin_</span> <span class='hs-varid'>x2</span> <span class='hs-varid'>t1</span> <span class='hs-varid'>t2</span><span class='hs-layout'>)</span> <span class='hs-layout'>(</span><span class='hs-varid'>bin_</span> <span class='hs-varid'>x1</span> <span class='hs-varid'>t3</span> <span class='hs-varid'>t4</span><span class='hs-layout'>)</span>
+<a name="line-822"></a>
+<a name="line-823"></a><a name="bin_"></a><span class='hs-comment'>{--------------------------------------------------------------------
+<a name="line-824"></a>  The bin constructor maintains the size of the tree
+<a name="line-825"></a>--------------------------------------------------------------------}</span>
+<a name="line-826"></a><span class='hs-definition'>bin_</span> <span class='hs-keyglyph'>::</span> <span class='hs-conid'>US</span> <span class='hs-varid'>a</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-varid'>a</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-conid'>USet</span> <span class='hs-varid'>a</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-conid'>USet</span> <span class='hs-varid'>a</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-conid'>USet</span> <span class='hs-varid'>a</span>
+<a name="line-827"></a><span class='hs-definition'>bin_</span> <span class='hs-varid'>x</span> <span class='hs-varid'>l</span> <span class='hs-varid'>r</span>
+<a name="line-828"></a>  <span class='hs-keyglyph'>=</span> <span class='hs-varid'>bin</span> <span class='hs-layout'>(</span><span class='hs-varid'>size</span> <span class='hs-varid'>l</span> <span class='hs-varop'>+</span> <span class='hs-varid'>size</span> <span class='hs-varid'>r</span> <span class='hs-varop'>+</span> <span class='hs-num'>1</span><span class='hs-layout'>)</span> <span class='hs-varid'>x</span> <span class='hs-varid'>l</span> <span class='hs-varid'>r</span>
+<a name="line-829"></a><span class='hs-comment'>{-# INLINE bin_ #-}</span>
+<a name="line-830"></a>
+<a name="line-831"></a>
+<a name="line-832"></a><a name="foldlStrict"></a><span class='hs-comment'>{--------------------------------------------------------------------
+<a name="line-833"></a>  Utilities
+<a name="line-834"></a>--------------------------------------------------------------------}</span>
+<a name="line-835"></a><span class='hs-definition'>foldlStrict</span> <span class='hs-keyglyph'>::</span> <span class='hs-layout'>(</span><span class='hs-varid'>a</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-varid'>b</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-varid'>a</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-varid'>a</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-keyglyph'>[</span><span class='hs-varid'>b</span><span class='hs-keyglyph'>]</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-varid'>a</span>
+<a name="line-836"></a><span class='hs-definition'>foldlStrict</span> <span class='hs-varid'>f</span> <span class='hs-varid'>z</span> <span class='hs-varid'>xs</span>
+<a name="line-837"></a>  <span class='hs-keyglyph'>=</span> <span class='hs-keyword'>case</span> <span class='hs-varid'>xs</span> <span class='hs-keyword'>of</span>
+<a name="line-838"></a>      <span class='hs-conid'>[]</span>     <span class='hs-keyglyph'>-&gt;</span> <span class='hs-varid'>z</span>
+<a name="line-839"></a>      <span class='hs-layout'>(</span><span class='hs-varid'>x</span><span class='hs-conop'>:</span><span class='hs-varid'>xx</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-keyword'>let</span> <span class='hs-varid'>z'</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>f</span> <span class='hs-varid'>z</span> <span class='hs-varid'>x</span> <span class='hs-keyword'>in</span> <span class='hs-varid'>seq</span> <span class='hs-varid'>z'</span> <span class='hs-layout'>(</span><span class='hs-varid'>foldlStrict</span> <span class='hs-varid'>f</span> <span class='hs-varid'>z'</span> <span class='hs-varid'>xx</span><span class='hs-layout'>)</span>
+<a name="line-840"></a>
+<a name="line-841"></a>
+<a name="line-842"></a><a name="showTree"></a><span class='hs-comment'>{--------------------------------------------------------------------
+<a name="line-843"></a>  Debugging
+<a name="line-844"></a>--------------------------------------------------------------------}</span>
+<a name="line-845"></a><span class='hs-comment'>-- | /O(n)/. Show the tree that implements the set. The tree is shown</span>
+<a name="line-846"></a><span class='hs-comment'>-- in a compressed, hanging format.</span>
+<a name="line-847"></a><span class='hs-definition'>showTree</span> <span class='hs-keyglyph'>::</span> <span class='hs-layout'>(</span><span class='hs-conid'>US</span> <span class='hs-varid'>a</span><span class='hs-layout'>,</span> <span class='hs-conid'>Show</span> <span class='hs-varid'>a</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>USet</span> <span class='hs-varid'>a</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-conid'>String</span>
+<a name="line-848"></a><span class='hs-definition'>showTree</span> <span class='hs-varid'>s</span>
+<a name="line-849"></a>  <span class='hs-keyglyph'>=</span> <span class='hs-varid'>showTreeWith</span> <span class='hs-conid'>True</span> <span class='hs-conid'>False</span> <span class='hs-varid'>s</span>
+<a name="line-850"></a>
+<a name="line-851"></a>
+<a name="line-852"></a><a name="showTreeWith"></a><span class='hs-comment'>{- | /O(n)/. The expression (@showTreeWith hang wide map@) shows
+<a name="line-853"></a> the tree that implements the set. If @hang@ is
+<a name="line-854"></a> @True@, a /hanging/ tree is shown otherwise a rotated tree is shown. If
+<a name="line-855"></a> @wide@ is 'True', an extra wide version is shown.
+<a name="line-856"></a>
+<a name="line-857"></a>&gt; Set&gt; putStrLn $ showTreeWith True False $ fromDistinctAscList [1..5]
+<a name="line-858"></a>&gt; 4
+<a name="line-859"></a>&gt; +--2
+<a name="line-860"></a>&gt; |  +--1
+<a name="line-861"></a>&gt; |  +--3
+<a name="line-862"></a>&gt; +--5
+<a name="line-863"></a>&gt; 
+<a name="line-864"></a>&gt; Set&gt; putStrLn $ showTreeWith True True $ fromDistinctAscList [1..5]
+<a name="line-865"></a>&gt; 4
+<a name="line-866"></a>&gt; |
+<a name="line-867"></a>&gt; +--2
+<a name="line-868"></a>&gt; |  |
+<a name="line-869"></a>&gt; |  +--1
+<a name="line-870"></a>&gt; |  |
+<a name="line-871"></a>&gt; |  +--3
+<a name="line-872"></a>&gt; |
+<a name="line-873"></a>&gt; +--5
+<a name="line-874"></a>&gt; 
+<a name="line-875"></a>&gt; Set&gt; putStrLn $ showTreeWith False True $ fromDistinctAscList [1..5]
+<a name="line-876"></a>&gt; +--5
+<a name="line-877"></a>&gt; |
+<a name="line-878"></a>&gt; 4
+<a name="line-879"></a>&gt; |
+<a name="line-880"></a>&gt; |  +--3
+<a name="line-881"></a>&gt; |  |
+<a name="line-882"></a>&gt; +--2
+<a name="line-883"></a>&gt;    |
+<a name="line-884"></a>&gt;    +--1
+<a name="line-885"></a>
+<a name="line-886"></a>-}</span>
+<a name="line-887"></a><span class='hs-definition'>showTreeWith</span> <span class='hs-keyglyph'>::</span> <span class='hs-layout'>(</span><span class='hs-conid'>US</span> <span class='hs-varid'>a</span><span class='hs-layout'>,</span> <span class='hs-conid'>Show</span> <span class='hs-varid'>a</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>Bool</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-conid'>Bool</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-conid'>USet</span> <span class='hs-varid'>a</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-conid'>String</span>
+<a name="line-888"></a><span class='hs-definition'>showTreeWith</span> <span class='hs-varid'>hang</span> <span class='hs-varid'>wide</span> <span class='hs-varid'>t</span>
+<a name="line-889"></a>  <span class='hs-keyglyph'>|</span> <span class='hs-varid'>hang</span>      <span class='hs-keyglyph'>=</span> <span class='hs-layout'>(</span><span class='hs-varid'>showsTreeHang</span> <span class='hs-varid'>wide</span> <span class='hs-conid'>[]</span> <span class='hs-varid'>t</span><span class='hs-layout'>)</span> <span class='hs-str'>""</span>
+<a name="line-890"></a>  <span class='hs-keyglyph'>|</span> <span class='hs-varid'>otherwise</span> <span class='hs-keyglyph'>=</span> <span class='hs-layout'>(</span><span class='hs-varid'>showsTree</span> <span class='hs-varid'>wide</span> <span class='hs-conid'>[]</span> <span class='hs-conid'>[]</span> <span class='hs-varid'>t</span><span class='hs-layout'>)</span> <span class='hs-str'>""</span>
+<a name="line-891"></a>
+<a name="line-892"></a><a name="showsTree"></a><span class='hs-definition'>showsTree</span> <span class='hs-keyglyph'>::</span> <span class='hs-layout'>(</span><span class='hs-conid'>US</span> <span class='hs-varid'>a</span><span class='hs-layout'>,</span> <span class='hs-conid'>Show</span> <span class='hs-varid'>a</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>Bool</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-keyglyph'>[</span><span class='hs-conid'>String</span><span class='hs-keyglyph'>]</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-keyglyph'>[</span><span class='hs-conid'>String</span><span class='hs-keyglyph'>]</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-conid'>USet</span> <span class='hs-varid'>a</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-conid'>ShowS</span>
+<a name="line-893"></a><span class='hs-definition'>showsTree</span> <span class='hs-varid'>wide</span> <span class='hs-varid'>lbars</span> <span class='hs-varid'>rbars</span> <span class='hs-varid'>t</span>
+<a name="line-894"></a>  <span class='hs-keyglyph'>=</span> <span class='hs-keyword'>case</span> <span class='hs-varid'>view</span> <span class='hs-varid'>t</span> <span class='hs-keyword'>of</span>
+<a name="line-895"></a>      <span class='hs-conid'>Tip</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-varid'>showsBars</span> <span class='hs-varid'>lbars</span> <span class='hs-varop'>.</span> <span class='hs-varid'>showString</span> <span class='hs-str'>"|\n"</span>
+<a name="line-896"></a>      <span class='hs-conid'>Bin</span> <span class='hs-keyword'>_</span> <span class='hs-varid'>x</span> <span class='hs-layout'>(</span><span class='hs-varid'>null</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-conid'>True</span><span class='hs-layout'>)</span> <span class='hs-layout'>(</span><span class='hs-varid'>null</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-conid'>True</span><span class='hs-layout'>)</span>
+<a name="line-897"></a>          <span class='hs-keyglyph'>-&gt;</span> <span class='hs-varid'>showsBars</span> <span class='hs-varid'>lbars</span> <span class='hs-varop'>.</span> <span class='hs-varid'>shows</span> <span class='hs-varid'>x</span> <span class='hs-varop'>.</span> <span class='hs-varid'>showString</span> <span class='hs-str'>"\n"</span> 
+<a name="line-898"></a>      <span class='hs-conid'>Bin</span> <span class='hs-keyword'>_</span> <span class='hs-varid'>x</span> <span class='hs-varid'>l</span> <span class='hs-varid'>r</span>
+<a name="line-899"></a>          <span class='hs-keyglyph'>-&gt;</span> <span class='hs-varid'>showsTree</span> <span class='hs-varid'>wide</span> <span class='hs-layout'>(</span><span class='hs-varid'>withBar</span> <span class='hs-varid'>rbars</span><span class='hs-layout'>)</span> <span class='hs-layout'>(</span><span class='hs-varid'>withEmpty</span> <span class='hs-varid'>rbars</span><span class='hs-layout'>)</span> <span class='hs-varid'>r</span> <span class='hs-varop'>.</span>
+<a name="line-900"></a>             <span class='hs-varid'>showWide</span> <span class='hs-varid'>wide</span> <span class='hs-varid'>rbars</span> <span class='hs-varop'>.</span>
+<a name="line-901"></a>             <span class='hs-varid'>showsBars</span> <span class='hs-varid'>lbars</span> <span class='hs-varop'>.</span> <span class='hs-varid'>shows</span> <span class='hs-varid'>x</span> <span class='hs-varop'>.</span> <span class='hs-varid'>showString</span> <span class='hs-str'>"\n"</span> <span class='hs-varop'>.</span>
+<a name="line-902"></a>             <span class='hs-varid'>showWide</span> <span class='hs-varid'>wide</span> <span class='hs-varid'>lbars</span> <span class='hs-varop'>.</span>
+<a name="line-903"></a>             <span class='hs-varid'>showsTree</span> <span class='hs-varid'>wide</span> <span class='hs-layout'>(</span><span class='hs-varid'>withEmpty</span> <span class='hs-varid'>lbars</span><span class='hs-layout'>)</span> <span class='hs-layout'>(</span><span class='hs-varid'>withBar</span> <span class='hs-varid'>lbars</span><span class='hs-layout'>)</span> <span class='hs-varid'>l</span>
+<a name="line-904"></a>
+<a name="line-905"></a><a name="showsTreeHang"></a><span class='hs-definition'>showsTreeHang</span> <span class='hs-keyglyph'>::</span> <span class='hs-layout'>(</span><span class='hs-conid'>US</span> <span class='hs-varid'>a</span><span class='hs-layout'>,</span> <span class='hs-conid'>Show</span> <span class='hs-varid'>a</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>Bool</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-keyglyph'>[</span><span class='hs-conid'>String</span><span class='hs-keyglyph'>]</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-conid'>USet</span> <span class='hs-varid'>a</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-conid'>ShowS</span>
+<a name="line-906"></a><span class='hs-definition'>showsTreeHang</span> <span class='hs-varid'>wide</span> <span class='hs-varid'>bars</span> <span class='hs-varid'>t</span>
+<a name="line-907"></a>  <span class='hs-keyglyph'>=</span> <span class='hs-keyword'>case</span> <span class='hs-varid'>view</span> <span class='hs-varid'>t</span> <span class='hs-keyword'>of</span>
+<a name="line-908"></a>      <span class='hs-conid'>Tip</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-varid'>showsBars</span> <span class='hs-varid'>bars</span> <span class='hs-varop'>.</span> <span class='hs-varid'>showString</span> <span class='hs-str'>"|\n"</span> 
+<a name="line-909"></a>      <span class='hs-conid'>Bin</span> <span class='hs-keyword'>_</span> <span class='hs-varid'>x</span> <span class='hs-layout'>(</span><span class='hs-varid'>null</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-conid'>True</span><span class='hs-layout'>)</span> <span class='hs-layout'>(</span><span class='hs-varid'>null</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-conid'>True</span><span class='hs-layout'>)</span> 
+<a name="line-910"></a>          <span class='hs-keyglyph'>-&gt;</span> <span class='hs-varid'>showsBars</span> <span class='hs-varid'>bars</span> <span class='hs-varop'>.</span> <span class='hs-varid'>shows</span> <span class='hs-varid'>x</span> <span class='hs-varop'>.</span> <span class='hs-varid'>showString</span> <span class='hs-str'>"\n"</span> 
+<a name="line-911"></a>      <span class='hs-conid'>Bin</span> <span class='hs-keyword'>_</span> <span class='hs-varid'>x</span> <span class='hs-varid'>l</span> <span class='hs-varid'>r</span>
+<a name="line-912"></a>          <span class='hs-keyglyph'>-&gt;</span> <span class='hs-varid'>showsBars</span> <span class='hs-varid'>bars</span> <span class='hs-varop'>.</span> <span class='hs-varid'>shows</span> <span class='hs-varid'>x</span> <span class='hs-varop'>.</span> <span class='hs-varid'>showString</span> <span class='hs-str'>"\n"</span> <span class='hs-varop'>.</span> 
+<a name="line-913"></a>             <span class='hs-varid'>showWide</span> <span class='hs-varid'>wide</span> <span class='hs-varid'>bars</span> <span class='hs-varop'>.</span>
+<a name="line-914"></a>             <span class='hs-varid'>showsTreeHang</span> <span class='hs-varid'>wide</span> <span class='hs-layout'>(</span><span class='hs-varid'>withBar</span> <span class='hs-varid'>bars</span><span class='hs-layout'>)</span> <span class='hs-varid'>l</span> <span class='hs-varop'>.</span>
+<a name="line-915"></a>             <span class='hs-varid'>showWide</span> <span class='hs-varid'>wide</span> <span class='hs-varid'>bars</span> <span class='hs-varop'>.</span>
+<a name="line-916"></a>             <span class='hs-varid'>showsTreeHang</span> <span class='hs-varid'>wide</span> <span class='hs-layout'>(</span><span class='hs-varid'>withEmpty</span> <span class='hs-varid'>bars</span><span class='hs-layout'>)</span> <span class='hs-varid'>r</span>
+<a name="line-917"></a>
+<a name="line-918"></a><a name="showWide"></a><span class='hs-definition'>showWide</span> <span class='hs-keyglyph'>::</span> <span class='hs-conid'>Bool</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-keyglyph'>[</span><span class='hs-conid'>String</span><span class='hs-keyglyph'>]</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-conid'>String</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-conid'>String</span>
+<a name="line-919"></a><span class='hs-definition'>showWide</span> <span class='hs-varid'>wide</span> <span class='hs-varid'>bars</span> 
+<a name="line-920"></a>  <span class='hs-keyglyph'>|</span> <span class='hs-varid'>wide</span>      <span class='hs-keyglyph'>=</span> <span class='hs-varid'>showString</span> <span class='hs-layout'>(</span><span class='hs-varid'>concat</span> <span class='hs-layout'>(</span><span class='hs-varid'>reverse</span> <span class='hs-varid'>bars</span><span class='hs-layout'>)</span><span class='hs-layout'>)</span> <span class='hs-varop'>.</span> <span class='hs-varid'>showString</span> <span class='hs-str'>"|\n"</span> 
+<a name="line-921"></a>  <span class='hs-keyglyph'>|</span> <span class='hs-varid'>otherwise</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>id</span>
+<a name="line-922"></a>
+<a name="line-923"></a><a name="showsBars"></a><span class='hs-definition'>showsBars</span> <span class='hs-keyglyph'>::</span> <span class='hs-keyglyph'>[</span><span class='hs-conid'>String</span><span class='hs-keyglyph'>]</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-conid'>ShowS</span>
+<a name="line-924"></a><span class='hs-definition'>showsBars</span> <span class='hs-varid'>bars</span>
+<a name="line-925"></a>  <span class='hs-keyglyph'>=</span> <span class='hs-keyword'>case</span> <span class='hs-varid'>bars</span> <span class='hs-keyword'>of</span>
+<a name="line-926"></a>      <span class='hs-conid'>[]</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-varid'>id</span>
+<a name="line-927"></a>      <span class='hs-keyword'>_</span>  <span class='hs-keyglyph'>-&gt;</span> <span class='hs-varid'>showString</span> <span class='hs-layout'>(</span><span class='hs-varid'>concat</span> <span class='hs-layout'>(</span><span class='hs-varid'>reverse</span> <span class='hs-layout'>(</span><span class='hs-varid'>tail</span> <span class='hs-varid'>bars</span><span class='hs-layout'>)</span><span class='hs-layout'>)</span><span class='hs-layout'>)</span> <span class='hs-varop'>.</span> <span class='hs-varid'>showString</span> <span class='hs-varid'>node</span>
+<a name="line-928"></a>
+<a name="line-929"></a><a name="node"></a><span class='hs-definition'>node</span> <span class='hs-keyglyph'>::</span> <span class='hs-conid'>String</span>
+<a name="line-930"></a><span class='hs-definition'>node</span>           <span class='hs-keyglyph'>=</span> <span class='hs-str'>"+--"</span>
+<a name="line-931"></a>
+<a name="line-932"></a><a name="withBar"></a><span class='hs-definition'>withBar</span><span class='hs-layout'>,</span> <span class='hs-varid'>withEmpty</span> <span class='hs-keyglyph'>::</span> <span class='hs-keyglyph'>[</span><span class='hs-conid'>String</span><span class='hs-keyglyph'>]</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-keyglyph'>[</span><span class='hs-conid'>String</span><span class='hs-keyglyph'>]</span>
+<a name="line-933"></a><span class='hs-definition'>withBar</span> <span class='hs-varid'>bars</span>   <span class='hs-keyglyph'>=</span> <span class='hs-str'>"|  "</span><span class='hs-conop'>:</span><span class='hs-varid'>bars</span>
+<a name="line-934"></a><a name="withEmpty"></a><span class='hs-definition'>withEmpty</span> <span class='hs-varid'>bars</span> <span class='hs-keyglyph'>=</span> <span class='hs-str'>"   "</span><span class='hs-conop'>:</span><span class='hs-varid'>bars</span>
+<a name="line-935"></a>
+<a name="line-936"></a><a name="valid"></a><span class='hs-comment'>{--------------------------------------------------------------------
+<a name="line-937"></a>  Assertions
+<a name="line-938"></a>--------------------------------------------------------------------}</span>
+<a name="line-939"></a><span class='hs-comment'>-- | /O(n)/. Test if the internal set structure is valid.</span>
+<a name="line-940"></a><span class='hs-definition'>valid</span> <span class='hs-keyglyph'>::</span> <span class='hs-layout'>(</span><span class='hs-conid'>US</span> <span class='hs-varid'>a</span><span class='hs-layout'>,</span> <span class='hs-conid'>Ord</span> <span class='hs-varid'>a</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>USet</span> <span class='hs-varid'>a</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-conid'>Bool</span>
+<a name="line-941"></a><span class='hs-definition'>valid</span> <span class='hs-varid'>t</span>
+<a name="line-942"></a>  <span class='hs-keyglyph'>=</span> <span class='hs-varid'>balanced</span> <span class='hs-varid'>t</span> <span class='hs-varop'>&amp;&amp;</span> <span class='hs-varid'>ordered</span> <span class='hs-varid'>t</span> <span class='hs-varop'>&amp;&amp;</span> <span class='hs-varid'>validsize</span> <span class='hs-varid'>t</span>
+<a name="line-943"></a>
+<a name="line-944"></a><a name="ordered"></a><span class='hs-definition'>ordered</span> <span class='hs-keyglyph'>::</span> <span class='hs-layout'>(</span><span class='hs-conid'>US</span> <span class='hs-varid'>a</span><span class='hs-layout'>,</span> <span class='hs-conid'>Ord</span> <span class='hs-varid'>a</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>USet</span> <span class='hs-varid'>a</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-conid'>Bool</span>
+<a name="line-945"></a><span class='hs-definition'>ordered</span> <span class='hs-varid'>t</span>
+<a name="line-946"></a>  <span class='hs-keyglyph'>=</span> <span class='hs-varid'>bounded</span> <span class='hs-layout'>(</span><span class='hs-varid'>const</span> <span class='hs-conid'>True</span><span class='hs-layout'>)</span> <span class='hs-layout'>(</span><span class='hs-varid'>const</span> <span class='hs-conid'>True</span><span class='hs-layout'>)</span> <span class='hs-varid'>t</span>
+<a name="line-947"></a>  <span class='hs-keyword'>where</span>
+<a name="line-948"></a>    <span class='hs-varid'>bounded</span> <span class='hs-varid'>lo</span> <span class='hs-varid'>hi</span> <span class='hs-varid'>t'</span>
+<a name="line-949"></a>      <span class='hs-keyglyph'>=</span> <span class='hs-keyword'>case</span> <span class='hs-varid'>view</span> <span class='hs-varid'>t'</span> <span class='hs-keyword'>of</span>
+<a name="line-950"></a>          <span class='hs-conid'>Bin</span> <span class='hs-keyword'>_</span> <span class='hs-varid'>x</span> <span class='hs-varid'>l</span> <span class='hs-varid'>r</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-layout'>(</span><span class='hs-varid'>lo</span> <span class='hs-varid'>x</span><span class='hs-layout'>)</span> <span class='hs-varop'>&amp;&amp;</span> <span class='hs-layout'>(</span><span class='hs-varid'>hi</span> <span class='hs-varid'>x</span><span class='hs-layout'>)</span> <span class='hs-varop'>&amp;&amp;</span> <span class='hs-varid'>bounded</span> <span class='hs-varid'>lo</span> <span class='hs-layout'>(</span><span class='hs-varop'>&lt;</span><span class='hs-varid'>x</span><span class='hs-layout'>)</span> <span class='hs-varid'>l</span> <span class='hs-varop'>&amp;&amp;</span> <span class='hs-varid'>bounded</span> <span class='hs-layout'>(</span><span class='hs-varop'>&gt;</span><span class='hs-varid'>x</span><span class='hs-layout'>)</span> <span class='hs-varid'>hi</span> <span class='hs-varid'>r</span>
+<a name="line-951"></a>          <span class='hs-keyword'>_</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-conid'>True</span>
+<a name="line-952"></a>
+<a name="line-953"></a><a name="balanced"></a><span class='hs-definition'>balanced</span> <span class='hs-keyglyph'>::</span> <span class='hs-conid'>US</span> <span class='hs-varid'>a</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>USet</span> <span class='hs-varid'>a</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-conid'>Bool</span>
+<a name="line-954"></a><span class='hs-definition'>balanced</span> <span class='hs-varid'>t</span>
+<a name="line-955"></a>  <span class='hs-keyglyph'>=</span> <span class='hs-keyword'>case</span> <span class='hs-varid'>view</span> <span class='hs-varid'>t</span> <span class='hs-keyword'>of</span>
+<a name="line-956"></a>      <span class='hs-conid'>Bin</span> <span class='hs-keyword'>_</span> <span class='hs-keyword'>_</span> <span class='hs-varid'>l</span> <span class='hs-varid'>r</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-layout'>(</span><span class='hs-varid'>size</span> <span class='hs-varid'>l</span> <span class='hs-varop'>+</span> <span class='hs-varid'>size</span> <span class='hs-varid'>r</span> <span class='hs-varop'>&lt;=</span> <span class='hs-num'>1</span> <span class='hs-varop'>||</span> <span class='hs-layout'>(</span><span class='hs-varid'>size</span> <span class='hs-varid'>l</span> <span class='hs-varop'>&lt;=</span> <span class='hs-varid'>delta</span><span class='hs-varop'>*</span><span class='hs-varid'>size</span> <span class='hs-varid'>r</span> <span class='hs-varop'>&amp;&amp;</span> <span class='hs-varid'>size</span> <span class='hs-varid'>r</span> <span class='hs-varop'>&lt;=</span> <span class='hs-varid'>delta</span><span class='hs-varop'>*</span><span class='hs-varid'>size</span> <span class='hs-varid'>l</span><span class='hs-layout'>)</span><span class='hs-layout'>)</span> <span class='hs-varop'>&amp;&amp;</span>
+<a name="line-957"></a>                     <span class='hs-varid'>balanced</span> <span class='hs-varid'>l</span> <span class='hs-varop'>&amp;&amp;</span> <span class='hs-varid'>balanced</span> <span class='hs-varid'>r</span>
+<a name="line-958"></a>      <span class='hs-keyword'>_</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-conid'>True</span>
+<a name="line-959"></a>
+<a name="line-960"></a><a name="validsize"></a><span class='hs-definition'>validsize</span> <span class='hs-keyglyph'>::</span> <span class='hs-conid'>US</span> <span class='hs-varid'>a</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>USet</span> <span class='hs-varid'>a</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-conid'>Bool</span>
+<a name="line-961"></a><span class='hs-definition'>validsize</span> <span class='hs-varid'>t</span>
+<a name="line-962"></a>  <span class='hs-keyglyph'>=</span> <span class='hs-layout'>(</span><span class='hs-varid'>realsize</span> <span class='hs-varid'>t</span> <span class='hs-varop'>==</span> <span class='hs-conid'>Just</span> <span class='hs-layout'>(</span><span class='hs-varid'>size</span> <span class='hs-varid'>t</span><span class='hs-layout'>)</span><span class='hs-layout'>)</span>
+<a name="line-963"></a>  <span class='hs-keyword'>where</span>
+<a name="line-964"></a>    <span class='hs-varid'>realsize</span> <span class='hs-varid'>t'</span>
+<a name="line-965"></a>      <span class='hs-keyglyph'>=</span> <span class='hs-keyword'>case</span> <span class='hs-varid'>view</span> <span class='hs-varid'>t'</span> <span class='hs-keyword'>of</span>
+<a name="line-966"></a>          <span class='hs-conid'>Bin</span> <span class='hs-varid'>sz</span> <span class='hs-keyword'>_</span> <span class='hs-varid'>l</span> <span class='hs-varid'>r</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-keyword'>case</span> <span class='hs-layout'>(</span><span class='hs-varid'>realsize</span> <span class='hs-varid'>l</span><span class='hs-layout'>,</span><span class='hs-varid'>realsize</span> <span class='hs-varid'>r</span><span class='hs-layout'>)</span> <span class='hs-keyword'>of</span>
+<a name="line-967"></a>                            <span class='hs-layout'>(</span><span class='hs-conid'>Just</span> <span class='hs-varid'>n</span><span class='hs-layout'>,</span><span class='hs-conid'>Just</span> <span class='hs-varid'>m</span><span class='hs-layout'>)</span>  <span class='hs-keyglyph'>|</span> <span class='hs-varid'>n</span><span class='hs-varop'>+</span><span class='hs-varid'>m</span><span class='hs-varop'>+</span><span class='hs-num'>1</span> <span class='hs-varop'>==</span> <span class='hs-varid'>sz</span>  <span class='hs-keyglyph'>-&gt;</span> <span class='hs-conid'>Just</span> <span class='hs-varid'>sz</span>
+<a name="line-968"></a>                            <span class='hs-keyword'>_</span>                <span class='hs-keyglyph'>-&gt;</span> <span class='hs-conid'>Nothing</span>
+<a name="line-969"></a>          <span class='hs-keyword'>_</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-conid'>Just</span> <span class='hs-num'>0</span>
+<a name="line-970"></a>
+<a name="line-971"></a><span class='hs-comment'>{-
+<a name="line-972"></a>{--------------------------------------------------------------------
+<a name="line-973"></a>  Testing
+<a name="line-974"></a>--------------------------------------------------------------------}
+<a name="line-975"></a>testTree :: [Int] -&gt; USet Int
+<a name="line-976"></a>testTree xs   = fromList xs
+<a name="line-977"></a>test1 = testTree [1..20]
+<a name="line-978"></a>test2 = testTree [30,29..10]
+<a name="line-979"></a>test3 = testTree [1,4,6,89,2323,53,43,234,5,79,12,9,24,9,8,423,8,42,4,8,9,3]
+<a name="line-980"></a>
+<a name="line-981"></a>{--------------------------------------------------------------------
+<a name="line-982"></a>  QuickCheck
+<a name="line-983"></a>--------------------------------------------------------------------}
+<a name="line-984"></a>
+<a name="line-985"></a>{-
+<a name="line-986"></a>qcheck prop
+<a name="line-987"></a>  = check config prop
+<a name="line-988"></a>  where
+<a name="line-989"></a>    config = Config
+<a name="line-990"></a>      { configMaxTest = 500
+<a name="line-991"></a>      , configMaxFail = 5000
+<a name="line-992"></a>      , configSize    = \n -&gt; (div n 2 + 3)
+<a name="line-993"></a>      , configEvery   = \n args -&gt; let s = show n in s ++ [ '\b' | _ &lt;- s ]
+<a name="line-994"></a>      }
+<a name="line-995"></a>-}
+<a name="line-996"></a>
+<a name="line-997"></a>
+<a name="line-998"></a>{--------------------------------------------------------------------
+<a name="line-999"></a>  Arbitrary, reasonably balanced trees
+<a name="line-1000"></a>--------------------------------------------------------------------}
+<a name="line-1001"></a>instance (US a, Enum a) =&gt; Arbitrary (USet a) where
+<a name="line-1002"></a>  arbitrary = sized (arbtree 0 maxkey)
+<a name="line-1003"></a>            where maxkey  = 10000
+<a name="line-1004"></a>
+<a name="line-1005"></a>arbtree :: (US a, Enum a) =&gt; Int -&gt; Int -&gt; Int -&gt; Gen (USet a)
+<a name="line-1006"></a>arbtree lo hi n
+<a name="line-1007"></a>  | n &lt;= 0        = return tip
+<a name="line-1008"></a>  | lo &gt;= hi      = return tip
+<a name="line-1009"></a>  | otherwise     = do{ i  &lt;- choose (lo,hi)
+<a name="line-1010"></a>                      ; m  &lt;- choose (1,30)
+<a name="line-1011"></a>                      ; let (ml,mr)  | m==(1::Int)= (1,2)
+<a name="line-1012"></a>                                     | m==2       = (2,1)
+<a name="line-1013"></a>                                     | m==3       = (1,1)
+<a name="line-1014"></a>                                     | otherwise  = (2,2)
+<a name="line-1015"></a>                      ; l  &lt;- arbtree lo (i-1) (n `div` ml)
+<a name="line-1016"></a>                      ; r  &lt;- arbtree (i+1) hi (n `div` mr)
+<a name="line-1017"></a>                      ; return (bin_ (toEnum i) l r)
+<a name="line-1018"></a>                      }  
+<a name="line-1019"></a>
+<a name="line-1020"></a>
+<a name="line-1021"></a>{--------------------------------------------------------------------
+<a name="line-1022"></a>  Valid tree's
+<a name="line-1023"></a>--------------------------------------------------------------------}
+<a name="line-1024"></a>forValid :: (US a, Enum a,Show a,Testable b) =&gt; (USet a -&gt; b) -&gt; Property
+<a name="line-1025"></a>forValid f
+<a name="line-1026"></a>  = forAll arbitrary $ \t -&gt; 
+<a name="line-1027"></a>--    classify (balanced t) "balanced" $
+<a name="line-1028"></a>    classify (size t == 0) "empty" $
+<a name="line-1029"></a>    classify (size t &gt; 0  &amp;&amp; size t &lt;= 10) "small" $
+<a name="line-1030"></a>    classify (size t &gt; 10 &amp;&amp; size t &lt;= 64) "medium" $
+<a name="line-1031"></a>    classify (size t &gt; 64) "large" $
+<a name="line-1032"></a>    balanced t ==&gt; f t
+<a name="line-1033"></a>
+<a name="line-1034"></a>forValidIntTree :: Testable a =&gt; (USet Int -&gt; a) -&gt; Property
+<a name="line-1035"></a>forValidIntTree f
+<a name="line-1036"></a>  = forValid f
+<a name="line-1037"></a>
+<a name="line-1038"></a>forValidUnitTree :: Testable a =&gt; (USet Int -&gt; a) -&gt; Property
+<a name="line-1039"></a>forValidUnitTree f
+<a name="line-1040"></a>  = forValid f
+<a name="line-1041"></a>
+<a name="line-1042"></a>
+<a name="line-1043"></a>prop_Valid 
+<a name="line-1044"></a>  = forValidUnitTree $ \t -&gt; valid t
+<a name="line-1045"></a>
+<a name="line-1046"></a>{--------------------------------------------------------------------
+<a name="line-1047"></a>  Single, Insert, Delete
+<a name="line-1048"></a>--------------------------------------------------------------------}
+<a name="line-1049"></a>prop_Single :: Int -&gt; Bool
+<a name="line-1050"></a>prop_Single x
+<a name="line-1051"></a>  = (insert x empty == singleton x)
+<a name="line-1052"></a>
+<a name="line-1053"></a>prop_InsertValid :: Int -&gt; Property
+<a name="line-1054"></a>prop_InsertValid k
+<a name="line-1055"></a>  = forValidUnitTree $ \t -&gt; valid (insert k t)
+<a name="line-1056"></a>
+<a name="line-1057"></a>prop_InsertDelete :: Int -&gt; USet Int -&gt; Property
+<a name="line-1058"></a>prop_InsertDelete k t
+<a name="line-1059"></a>  = not (member k t) ==&gt; delete k (insert k t) == t
+<a name="line-1060"></a>
+<a name="line-1061"></a>prop_DeleteValid :: Int -&gt; Property
+<a name="line-1062"></a>prop_DeleteValid k
+<a name="line-1063"></a>  = forValidUnitTree $ \t -&gt; 
+<a name="line-1064"></a>    valid (delete k (insert k t))
+<a name="line-1065"></a>
+<a name="line-1066"></a>{--------------------------------------------------------------------
+<a name="line-1067"></a>  Balance
+<a name="line-1068"></a>--------------------------------------------------------------------}
+<a name="line-1069"></a>prop_Join :: Int -&gt; Property 
+<a name="line-1070"></a>prop_Join x
+<a name="line-1071"></a>  = forValidUnitTree $ \t -&gt;
+<a name="line-1072"></a>    let (l,r) = split x t
+<a name="line-1073"></a>    in valid (join x l r)
+<a name="line-1074"></a>
+<a name="line-1075"></a>prop_Merge :: Int -&gt; Property 
+<a name="line-1076"></a>prop_Merge x
+<a name="line-1077"></a>  = forValidUnitTree $ \t -&gt;
+<a name="line-1078"></a>    let (l,r) = split x t
+<a name="line-1079"></a>    in valid (merge l r)
+<a name="line-1080"></a>
+<a name="line-1081"></a>
+<a name="line-1082"></a>{--------------------------------------------------------------------
+<a name="line-1083"></a>  Union
+<a name="line-1084"></a>--------------------------------------------------------------------}
+<a name="line-1085"></a>prop_UnionValid :: Property
+<a name="line-1086"></a>prop_UnionValid
+<a name="line-1087"></a>  = forValidUnitTree $ \t1 -&gt;
+<a name="line-1088"></a>    forValidUnitTree $ \t2 -&gt;
+<a name="line-1089"></a>    valid (union t1 t2)
+<a name="line-1090"></a>
+<a name="line-1091"></a>prop_UnionInsert :: Int -&gt; USet Int -&gt; Bool
+<a name="line-1092"></a>prop_UnionInsert x t
+<a name="line-1093"></a>  = union t (singleton x) == insert x t
+<a name="line-1094"></a>
+<a name="line-1095"></a>prop_UnionAssoc :: USet Int -&gt; USet Int -&gt; USet Int -&gt; Bool
+<a name="line-1096"></a>prop_UnionAssoc t1 t2 t3
+<a name="line-1097"></a>  = union t1 (union t2 t3) == union (union t1 t2) t3
+<a name="line-1098"></a>
+<a name="line-1099"></a>prop_UnionComm :: USet Int -&gt; USet Int -&gt; Bool
+<a name="line-1100"></a>prop_UnionComm t1 t2
+<a name="line-1101"></a>  = (union t1 t2 == union t2 t1)
+<a name="line-1102"></a>
+<a name="line-1103"></a>
+<a name="line-1104"></a>prop_DiffValid
+<a name="line-1105"></a>  = forValidUnitTree $ \t1 -&gt;
+<a name="line-1106"></a>    forValidUnitTree $ \t2 -&gt;
+<a name="line-1107"></a>    valid (difference t1 t2)
+<a name="line-1108"></a>
+<a name="line-1109"></a>prop_Diff :: [Int] -&gt; [Int] -&gt; Bool
+<a name="line-1110"></a>prop_Diff xs ys
+<a name="line-1111"></a>  =  toAscList (difference (fromList xs) (fromList ys))
+<a name="line-1112"></a>    == List.sort ((List.\\) (nub xs)  (nub ys))
+<a name="line-1113"></a>
+<a name="line-1114"></a>prop_IntValid
+<a name="line-1115"></a>  = forValidUnitTree $ \t1 -&gt;
+<a name="line-1116"></a>    forValidUnitTree $ \t2 -&gt;
+<a name="line-1117"></a>    valid (intersection t1 t2)
+<a name="line-1118"></a>
+<a name="line-1119"></a>prop_Int :: [Int] -&gt; [Int] -&gt; Bool
+<a name="line-1120"></a>prop_Int xs ys
+<a name="line-1121"></a>  =  toAscList (intersection (fromList xs) (fromList ys))
+<a name="line-1122"></a>    == List.sort (nub ((List.intersect) (xs)  (ys)))
+<a name="line-1123"></a>
+<a name="line-1124"></a>{--------------------------------------------------------------------
+<a name="line-1125"></a>  Lists
+<a name="line-1126"></a>--------------------------------------------------------------------}
+<a name="line-1127"></a>prop_Ordered
+<a name="line-1128"></a>  = forAll (choose (5,100)) $ \n -&gt;
+<a name="line-1129"></a>    let xs = [0..n::Int]
+<a name="line-1130"></a>    in fromAscList xs == fromList xs
+<a name="line-1131"></a>
+<a name="line-1132"></a>prop_List :: [Int] -&gt; Bool
+<a name="line-1133"></a>prop_List xs
+<a name="line-1134"></a>  = (sort (nub xs) == toList (fromList xs))
+<a name="line-1135"></a>-}</span>
+<a name="line-1136"></a>
+<a name="line-1137"></a>
+<a name="line-1138"></a><a name="Boxed"></a><span class='hs-keyword'>newtype</span> <span class='hs-conid'>Boxed</span> <span class='hs-varid'>a</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>Boxed</span> <span class='hs-varid'>a</span> <span class='hs-keyword'>deriving</span> <span class='hs-layout'>(</span><span class='hs-conid'>Eq</span><span class='hs-layout'>,</span><span class='hs-conid'>Ord</span><span class='hs-layout'>,</span><span class='hs-conid'>Show</span><span class='hs-layout'>,</span><span class='hs-conid'>Read</span><span class='hs-layout'>,</span><span class='hs-conid'>Bounded</span><span class='hs-layout'>)</span>
+<a name="line-1139"></a><span class='hs-keyword'>instance</span> <span class='hs-conid'>US</span> <span class='hs-layout'>(</span><span class='hs-conid'>Boxed</span> <span class='hs-varid'>a</span><span class='hs-layout'>)</span> <span class='hs-keyword'>where</span>
+<a name="line-1140"></a>    <span class='hs-keyword'>data</span> <span class='hs-conid'>USet</span> <span class='hs-layout'>(</span><span class='hs-conid'>Boxed</span> <span class='hs-varid'>a</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>BoxedTip</span> <span class='hs-keyglyph'>|</span> <span class='hs-conid'>BoxedBin</span> <span class='hs-comment'>{-# UNPACK #-}</span> <span class='hs-varop'>!</span><span class='hs-conid'>Size</span> <span class='hs-layout'>(</span><span class='hs-conid'>Boxed</span> <span class='hs-varid'>a</span><span class='hs-layout'>)</span> <span class='hs-varop'>!</span><span class='hs-layout'>(</span><span class='hs-conid'>USet</span> <span class='hs-layout'>(</span><span class='hs-conid'>Boxed</span> <span class='hs-varid'>a</span><span class='hs-layout'>)</span><span class='hs-layout'>)</span> <span class='hs-varop'>!</span><span class='hs-layout'>(</span><span class='hs-conid'>USet</span> <span class='hs-layout'>(</span><span class='hs-conid'>Boxed</span> <span class='hs-varid'>a</span><span class='hs-layout'>)</span><span class='hs-layout'>)</span>
+<a name="line-1141"></a>    <span class='hs-varid'>view</span> <span class='hs-conid'>BoxedTip</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>Tip</span>
+<a name="line-1142"></a>    <span class='hs-varid'>view</span> <span class='hs-layout'>(</span><span class='hs-conid'>BoxedBin</span> <span class='hs-varid'>s</span> <span class='hs-varid'>i</span> <span class='hs-varid'>l</span> <span class='hs-varid'>r</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>Bin</span> <span class='hs-varid'>s</span> <span class='hs-varid'>i</span> <span class='hs-varid'>l</span> <span class='hs-varid'>r</span>
+<a name="line-1143"></a>    <span class='hs-varid'>viewk</span> <span class='hs-varid'>t</span> <span class='hs-keyword'>_</span> <span class='hs-conid'>BoxedTip</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>t</span> 
+<a name="line-1144"></a>    <span class='hs-varid'>viewk</span> <span class='hs-keyword'>_</span> <span class='hs-varid'>k</span> <span class='hs-layout'>(</span><span class='hs-conid'>BoxedBin</span> <span class='hs-varid'>s</span> <span class='hs-varid'>i</span> <span class='hs-varid'>l</span> <span class='hs-varid'>r</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>k</span> <span class='hs-varid'>s</span> <span class='hs-varid'>i</span> <span class='hs-varid'>l</span> <span class='hs-varid'>r</span>
+<a name="line-1145"></a>    <span class='hs-varid'>viewBin</span> <span class='hs-layout'>(</span><span class='hs-conid'>BoxedBin</span> <span class='hs-keyword'>_</span> <span class='hs-varid'>i</span> <span class='hs-varid'>l</span> <span class='hs-varid'>r</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=</span> <span class='hs-layout'>(</span><span class='hs-cpp'>#</span> <span class='hs-varid'>i</span><span class='hs-layout'>,</span> <span class='hs-varid'>l</span><span class='hs-layout'>,</span> <span class='hs-varid'>r</span> <span class='hs-cpp'>#</span><span class='hs-layout'>)</span>
+<a name="line-1146"></a>    <span class='hs-varid'>tip</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>BoxedTip</span>
+<a name="line-1147"></a>    <span class='hs-varid'>bin</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>BoxedBin</span>
+<a name="line-1148"></a>    <span class='hs-varid'>size</span> <span class='hs-conid'>BoxedTip</span> <span class='hs-keyglyph'>=</span><span class='hs-num'>0</span>
+<a name="line-1149"></a>    <span class='hs-varid'>size</span> <span class='hs-layout'>(</span><span class='hs-conid'>BoxedBin</span> <span class='hs-varid'>s</span> <span class='hs-keyword'>_</span> <span class='hs-keyword'>_</span> <span class='hs-keyword'>_</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>s</span>
+<a name="line-1150"></a>    <span class='hs-varid'>null</span> <span class='hs-conid'>BoxedTip</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>True</span>
+<a name="line-1151"></a>    <span class='hs-varid'>null</span> <span class='hs-keyword'>_</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>False</span>
+<a name="line-1152"></a>
+<a name="line-1153"></a><span class='hs-keyword'>instance</span> <span class='hs-conid'>US</span> <span class='hs-conid'>Char</span> <span class='hs-keyword'>where</span>
+<a name="line-1154"></a>    <span class='hs-keyword'>data</span> <span class='hs-conid'>USet</span> <span class='hs-conid'>Char</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>CharTip</span> <span class='hs-keyglyph'>|</span> <span class='hs-conid'>CharBin</span> <span class='hs-comment'>{-# UNPACK #-}</span> <span class='hs-varop'>!</span><span class='hs-conid'>Size</span> <span class='hs-comment'>{-# UNPACK #-}</span> <span class='hs-varop'>!</span><span class='hs-conid'>Char</span> <span class='hs-varop'>!</span><span class='hs-layout'>(</span><span class='hs-conid'>USet</span> <span class='hs-conid'>Char</span><span class='hs-layout'>)</span> <span class='hs-varop'>!</span><span class='hs-layout'>(</span><span class='hs-conid'>USet</span> <span class='hs-conid'>Char</span><span class='hs-layout'>)</span>
+<a name="line-1155"></a>    <span class='hs-varid'>view</span> <span class='hs-conid'>CharTip</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>Tip</span>
+<a name="line-1156"></a>    <span class='hs-varid'>view</span> <span class='hs-layout'>(</span><span class='hs-conid'>CharBin</span> <span class='hs-varid'>s</span> <span class='hs-varid'>i</span> <span class='hs-varid'>l</span> <span class='hs-varid'>r</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>Bin</span> <span class='hs-varid'>s</span> <span class='hs-varid'>i</span> <span class='hs-varid'>l</span> <span class='hs-varid'>r</span>
+<a name="line-1157"></a>    <span class='hs-varid'>viewk</span> <span class='hs-varid'>t</span> <span class='hs-keyword'>_</span> <span class='hs-conid'>CharTip</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>t</span> 
+<a name="line-1158"></a>    <span class='hs-varid'>viewk</span> <span class='hs-keyword'>_</span> <span class='hs-varid'>k</span> <span class='hs-layout'>(</span><span class='hs-conid'>CharBin</span> <span class='hs-varid'>s</span> <span class='hs-varid'>i</span> <span class='hs-varid'>l</span> <span class='hs-varid'>r</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>k</span> <span class='hs-varid'>s</span> <span class='hs-varid'>i</span> <span class='hs-varid'>l</span> <span class='hs-varid'>r</span>
+<a name="line-1159"></a>    <span class='hs-varid'>viewBin</span> <span class='hs-layout'>(</span><span class='hs-conid'>CharBin</span> <span class='hs-keyword'>_</span> <span class='hs-varid'>i</span> <span class='hs-varid'>l</span> <span class='hs-varid'>r</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=</span> <span class='hs-layout'>(</span><span class='hs-cpp'>#</span> <span class='hs-varid'>i</span><span class='hs-layout'>,</span> <span class='hs-varid'>l</span><span class='hs-layout'>,</span> <span class='hs-varid'>r</span> <span class='hs-cpp'>#</span><span class='hs-layout'>)</span>
+<a name="line-1160"></a>    <span class='hs-varid'>tip</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>CharTip</span>
+<a name="line-1161"></a>    <span class='hs-varid'>bin</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>CharBin</span>
+<a name="line-1162"></a>    <span class='hs-varid'>null</span> <span class='hs-conid'>CharTip</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>True</span>
+<a name="line-1163"></a>    <span class='hs-varid'>null</span> <span class='hs-keyword'>_</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>False</span>
+<a name="line-1164"></a>
+<a name="line-1165"></a><span class='hs-keyword'>instance</span> <span class='hs-conid'>US</span> <span class='hs-conid'>Int</span> <span class='hs-keyword'>where</span>
+<a name="line-1166"></a>    <span class='hs-keyword'>data</span> <span class='hs-conid'>USet</span> <span class='hs-conid'>Int</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>IntTip</span> <span class='hs-keyglyph'>|</span> <span class='hs-conid'>IntBin</span> <span class='hs-comment'>{-# UNPACK #-}</span> <span class='hs-varop'>!</span><span class='hs-conid'>Size</span> <span class='hs-comment'>{-# UNPACK #-}</span> <span class='hs-varop'>!</span><span class='hs-conid'>Int</span> <span class='hs-varop'>!</span><span class='hs-layout'>(</span><span class='hs-conid'>USet</span> <span class='hs-conid'>Int</span><span class='hs-layout'>)</span> <span class='hs-varop'>!</span><span class='hs-layout'>(</span><span class='hs-conid'>USet</span> <span class='hs-conid'>Int</span><span class='hs-layout'>)</span>
+<a name="line-1167"></a>    <span class='hs-varid'>view</span> <span class='hs-conid'>IntTip</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>Tip</span>
+<a name="line-1168"></a>    <span class='hs-varid'>view</span> <span class='hs-layout'>(</span><span class='hs-conid'>IntBin</span> <span class='hs-varid'>s</span> <span class='hs-varid'>i</span> <span class='hs-varid'>l</span> <span class='hs-varid'>r</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>Bin</span> <span class='hs-varid'>s</span> <span class='hs-varid'>i</span> <span class='hs-varid'>l</span> <span class='hs-varid'>r</span>
+<a name="line-1169"></a>    <span class='hs-varid'>viewk</span> <span class='hs-varid'>t</span> <span class='hs-keyword'>_</span> <span class='hs-conid'>IntTip</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>t</span> 
+<a name="line-1170"></a>    <span class='hs-varid'>viewk</span> <span class='hs-keyword'>_</span> <span class='hs-varid'>k</span> <span class='hs-layout'>(</span><span class='hs-conid'>IntBin</span> <span class='hs-varid'>s</span> <span class='hs-varid'>i</span> <span class='hs-varid'>l</span> <span class='hs-varid'>r</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>k</span> <span class='hs-varid'>s</span> <span class='hs-varid'>i</span> <span class='hs-varid'>l</span> <span class='hs-varid'>r</span>
+<a name="line-1171"></a>    <span class='hs-varid'>viewBin</span> <span class='hs-layout'>(</span><span class='hs-conid'>IntBin</span> <span class='hs-keyword'>_</span> <span class='hs-varid'>i</span> <span class='hs-varid'>l</span> <span class='hs-varid'>r</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=</span> <span class='hs-layout'>(</span><span class='hs-cpp'>#</span> <span class='hs-varid'>i</span><span class='hs-layout'>,</span> <span class='hs-varid'>l</span><span class='hs-layout'>,</span> <span class='hs-varid'>r</span> <span class='hs-cpp'>#</span><span class='hs-layout'>)</span>
+<a name="line-1172"></a>    <span class='hs-varid'>size</span> <span class='hs-conid'>IntTip</span> <span class='hs-keyglyph'>=</span> <span class='hs-num'>0</span>
+<a name="line-1173"></a>    <span class='hs-varid'>size</span> <span class='hs-layout'>(</span><span class='hs-conid'>IntBin</span> <span class='hs-varid'>s</span> <span class='hs-keyword'>_</span> <span class='hs-keyword'>_</span> <span class='hs-keyword'>_</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>s</span>
+<a name="line-1174"></a>    <span class='hs-varid'>tip</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>IntTip</span>
+<a name="line-1175"></a>    <span class='hs-varid'>bin</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>IntBin</span>
+<a name="line-1176"></a>    <span class='hs-varid'>null</span> <span class='hs-conid'>IntTip</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>True</span>
+<a name="line-1177"></a>    <span class='hs-varid'>null</span> <span class='hs-keyword'>_</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>False</span>
+<a name="line-1178"></a>
+<a name="line-1179"></a><span class='hs-keyword'>instance</span> <span class='hs-conid'>US</span> <span class='hs-conid'>Integer</span> <span class='hs-keyword'>where</span>
+<a name="line-1180"></a>    <span class='hs-keyword'>data</span> <span class='hs-conid'>USet</span> <span class='hs-conid'>Integer</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>IntegerTip</span> <span class='hs-keyglyph'>|</span> <span class='hs-conid'>IntegerBin</span> <span class='hs-comment'>{-# UNPACK #-}</span> <span class='hs-varop'>!</span><span class='hs-conid'>Size</span> <span class='hs-comment'>{-# UNPACK #-}</span> <span class='hs-varop'>!</span><span class='hs-conid'>Integer</span> <span class='hs-varop'>!</span><span class='hs-layout'>(</span><span class='hs-conid'>USet</span> <span class='hs-conid'>Integer</span><span class='hs-layout'>)</span> <span class='hs-varop'>!</span><span class='hs-layout'>(</span><span class='hs-conid'>USet</span> <span class='hs-conid'>Integer</span><span class='hs-layout'>)</span>
+<a name="line-1181"></a>    <span class='hs-varid'>view</span> <span class='hs-conid'>IntegerTip</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>Tip</span>
+<a name="line-1182"></a>    <span class='hs-varid'>view</span> <span class='hs-layout'>(</span><span class='hs-conid'>IntegerBin</span> <span class='hs-varid'>s</span> <span class='hs-varid'>i</span> <span class='hs-varid'>l</span> <span class='hs-varid'>r</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>Bin</span> <span class='hs-varid'>s</span> <span class='hs-varid'>i</span> <span class='hs-varid'>l</span> <span class='hs-varid'>r</span>
+<a name="line-1183"></a>    <span class='hs-varid'>viewk</span> <span class='hs-varid'>t</span> <span class='hs-keyword'>_</span> <span class='hs-conid'>IntegerTip</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>t</span> 
+<a name="line-1184"></a>    <span class='hs-varid'>viewk</span> <span class='hs-keyword'>_</span> <span class='hs-varid'>k</span> <span class='hs-layout'>(</span><span class='hs-conid'>IntegerBin</span> <span class='hs-varid'>s</span> <span class='hs-varid'>i</span> <span class='hs-varid'>l</span> <span class='hs-varid'>r</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>k</span> <span class='hs-varid'>s</span> <span class='hs-varid'>i</span> <span class='hs-varid'>l</span> <span class='hs-varid'>r</span>
+<a name="line-1185"></a>    <span class='hs-varid'>viewBin</span> <span class='hs-layout'>(</span><span class='hs-conid'>IntegerBin</span> <span class='hs-keyword'>_</span> <span class='hs-varid'>i</span> <span class='hs-varid'>l</span> <span class='hs-varid'>r</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=</span> <span class='hs-layout'>(</span><span class='hs-cpp'>#</span> <span class='hs-varid'>i</span><span class='hs-layout'>,</span> <span class='hs-varid'>l</span><span class='hs-layout'>,</span> <span class='hs-varid'>r</span> <span class='hs-cpp'>#</span><span class='hs-layout'>)</span>
+<a name="line-1186"></a>    <span class='hs-varid'>tip</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>IntegerTip</span>
+<a name="line-1187"></a>    <span class='hs-varid'>bin</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>IntegerBin</span>
+<a name="line-1188"></a>    <span class='hs-varid'>null</span> <span class='hs-conid'>IntegerTip</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>True</span>
+<a name="line-1189"></a>    <span class='hs-varid'>null</span> <span class='hs-keyword'>_</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>False</span>
+<a name="line-1190"></a>
+<a name="line-1191"></a><span class='hs-keyword'>instance</span> <span class='hs-conid'>US</span> <span class='hs-conid'>Int8</span> <span class='hs-keyword'>where</span>
+<a name="line-1192"></a>    <span class='hs-keyword'>data</span> <span class='hs-conid'>USet</span> <span class='hs-conid'>Int8</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>Int8Tip</span> <span class='hs-keyglyph'>|</span> <span class='hs-conid'>Int8Bin</span> <span class='hs-comment'>{-# UNPACK #-}</span> <span class='hs-varop'>!</span><span class='hs-conid'>Size</span> <span class='hs-comment'>{-# UNPACK #-}</span> <span class='hs-varop'>!</span><span class='hs-conid'>Int8</span> <span class='hs-varop'>!</span><span class='hs-layout'>(</span><span class='hs-conid'>USet</span> <span class='hs-conid'>Int8</span><span class='hs-layout'>)</span> <span class='hs-varop'>!</span><span class='hs-layout'>(</span><span class='hs-conid'>USet</span> <span class='hs-conid'>Int8</span><span class='hs-layout'>)</span>
+<a name="line-1193"></a>    <span class='hs-varid'>view</span> <span class='hs-conid'>Int8Tip</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>Tip</span>
+<a name="line-1194"></a>    <span class='hs-varid'>view</span> <span class='hs-layout'>(</span><span class='hs-conid'>Int8Bin</span> <span class='hs-varid'>s</span> <span class='hs-varid'>i</span> <span class='hs-varid'>l</span> <span class='hs-varid'>r</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>Bin</span> <span class='hs-varid'>s</span> <span class='hs-varid'>i</span> <span class='hs-varid'>l</span> <span class='hs-varid'>r</span>
+<a name="line-1195"></a>    <span class='hs-varid'>viewk</span> <span class='hs-varid'>t</span> <span class='hs-keyword'>_</span> <span class='hs-conid'>Int8Tip</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>t</span> 
+<a name="line-1196"></a>    <span class='hs-varid'>viewk</span> <span class='hs-keyword'>_</span> <span class='hs-varid'>k</span> <span class='hs-layout'>(</span><span class='hs-conid'>Int8Bin</span> <span class='hs-varid'>s</span> <span class='hs-varid'>i</span> <span class='hs-varid'>l</span> <span class='hs-varid'>r</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>k</span> <span class='hs-varid'>s</span> <span class='hs-varid'>i</span> <span class='hs-varid'>l</span> <span class='hs-varid'>r</span>
+<a name="line-1197"></a>    <span class='hs-varid'>viewBin</span> <span class='hs-layout'>(</span><span class='hs-conid'>Int8Bin</span> <span class='hs-keyword'>_</span> <span class='hs-varid'>i</span> <span class='hs-varid'>l</span> <span class='hs-varid'>r</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=</span> <span class='hs-layout'>(</span><span class='hs-cpp'>#</span> <span class='hs-varid'>i</span><span class='hs-layout'>,</span> <span class='hs-varid'>l</span><span class='hs-layout'>,</span> <span class='hs-varid'>r</span> <span class='hs-cpp'>#</span><span class='hs-layout'>)</span>
+<a name="line-1198"></a>    <span class='hs-varid'>tip</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>Int8Tip</span>
+<a name="line-1199"></a>    <span class='hs-varid'>bin</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>Int8Bin</span>
+<a name="line-1200"></a>    <span class='hs-varid'>null</span> <span class='hs-conid'>Int8Tip</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>True</span>
+<a name="line-1201"></a>    <span class='hs-varid'>null</span> <span class='hs-keyword'>_</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>False</span>
+<a name="line-1202"></a>
+<a name="line-1203"></a><span class='hs-keyword'>instance</span> <span class='hs-conid'>US</span> <span class='hs-conid'>Int16</span> <span class='hs-keyword'>where</span>
+<a name="line-1204"></a>    <span class='hs-keyword'>data</span> <span class='hs-conid'>USet</span> <span class='hs-conid'>Int16</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>Int16Tip</span> <span class='hs-keyglyph'>|</span> <span class='hs-conid'>Int16Bin</span> <span class='hs-comment'>{-# UNPACK #-}</span> <span class='hs-varop'>!</span><span class='hs-conid'>Size</span> <span class='hs-comment'>{-# UNPACK #-}</span> <span class='hs-varop'>!</span><span class='hs-conid'>Int16</span> <span class='hs-varop'>!</span><span class='hs-layout'>(</span><span class='hs-conid'>USet</span> <span class='hs-conid'>Int16</span><span class='hs-layout'>)</span> <span class='hs-varop'>!</span><span class='hs-layout'>(</span><span class='hs-conid'>USet</span> <span class='hs-conid'>Int16</span><span class='hs-layout'>)</span>
+<a name="line-1205"></a>    <span class='hs-varid'>view</span> <span class='hs-conid'>Int16Tip</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>Tip</span>
+<a name="line-1206"></a>    <span class='hs-varid'>view</span> <span class='hs-layout'>(</span><span class='hs-conid'>Int16Bin</span> <span class='hs-varid'>s</span> <span class='hs-varid'>i</span> <span class='hs-varid'>l</span> <span class='hs-varid'>r</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>Bin</span> <span class='hs-varid'>s</span> <span class='hs-varid'>i</span> <span class='hs-varid'>l</span> <span class='hs-varid'>r</span>
+<a name="line-1207"></a>    <span class='hs-varid'>viewk</span> <span class='hs-varid'>t</span> <span class='hs-keyword'>_</span> <span class='hs-conid'>Int16Tip</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>t</span> 
+<a name="line-1208"></a>    <span class='hs-varid'>viewk</span> <span class='hs-keyword'>_</span> <span class='hs-varid'>k</span> <span class='hs-layout'>(</span><span class='hs-conid'>Int16Bin</span> <span class='hs-varid'>s</span> <span class='hs-varid'>i</span> <span class='hs-varid'>l</span> <span class='hs-varid'>r</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>k</span> <span class='hs-varid'>s</span> <span class='hs-varid'>i</span> <span class='hs-varid'>l</span> <span class='hs-varid'>r</span>
+<a name="line-1209"></a>    <span class='hs-varid'>viewBin</span> <span class='hs-layout'>(</span><span class='hs-conid'>Int16Bin</span> <span class='hs-keyword'>_</span> <span class='hs-varid'>i</span> <span class='hs-varid'>l</span> <span class='hs-varid'>r</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=</span> <span class='hs-layout'>(</span><span class='hs-cpp'>#</span> <span class='hs-varid'>i</span><span class='hs-layout'>,</span> <span class='hs-varid'>l</span><span class='hs-layout'>,</span> <span class='hs-varid'>r</span> <span class='hs-cpp'>#</span><span class='hs-layout'>)</span>
+<a name="line-1210"></a>    <span class='hs-varid'>tip</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>Int16Tip</span>
+<a name="line-1211"></a>    <span class='hs-varid'>bin</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>Int16Bin</span>
+<a name="line-1212"></a>    <span class='hs-varid'>null</span> <span class='hs-conid'>Int16Tip</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>True</span>
+<a name="line-1213"></a>    <span class='hs-varid'>null</span> <span class='hs-keyword'>_</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>False</span>
+<a name="line-1214"></a>
+<a name="line-1215"></a><span class='hs-keyword'>instance</span> <span class='hs-conid'>US</span> <span class='hs-conid'>Int32</span> <span class='hs-keyword'>where</span>
+<a name="line-1216"></a>    <span class='hs-keyword'>data</span> <span class='hs-conid'>USet</span> <span class='hs-conid'>Int32</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>Int32Tip</span> <span class='hs-keyglyph'>|</span> <span class='hs-conid'>Int32Bin</span> <span class='hs-comment'>{-# UNPACK #-}</span> <span class='hs-varop'>!</span><span class='hs-conid'>Size</span> <span class='hs-comment'>{-# UNPACK #-}</span> <span class='hs-varop'>!</span><span class='hs-conid'>Int32</span> <span class='hs-varop'>!</span><span class='hs-layout'>(</span><span class='hs-conid'>USet</span> <span class='hs-conid'>Int32</span><span class='hs-layout'>)</span> <span class='hs-varop'>!</span><span class='hs-layout'>(</span><span class='hs-conid'>USet</span> <span class='hs-conid'>Int32</span><span class='hs-layout'>)</span>
+<a name="line-1217"></a>    <span class='hs-varid'>view</span> <span class='hs-conid'>Int32Tip</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>Tip</span>
+<a name="line-1218"></a>    <span class='hs-varid'>view</span> <span class='hs-layout'>(</span><span class='hs-conid'>Int32Bin</span> <span class='hs-varid'>s</span> <span class='hs-varid'>i</span> <span class='hs-varid'>l</span> <span class='hs-varid'>r</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>Bin</span> <span class='hs-varid'>s</span> <span class='hs-varid'>i</span> <span class='hs-varid'>l</span> <span class='hs-varid'>r</span>
+<a name="line-1219"></a>    <span class='hs-varid'>viewk</span> <span class='hs-varid'>t</span> <span class='hs-keyword'>_</span> <span class='hs-conid'>Int32Tip</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>t</span> 
+<a name="line-1220"></a>    <span class='hs-varid'>viewk</span> <span class='hs-keyword'>_</span> <span class='hs-varid'>k</span> <span class='hs-layout'>(</span><span class='hs-conid'>Int32Bin</span> <span class='hs-varid'>s</span> <span class='hs-varid'>i</span> <span class='hs-varid'>l</span> <span class='hs-varid'>r</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>k</span> <span class='hs-varid'>s</span> <span class='hs-varid'>i</span> <span class='hs-varid'>l</span> <span class='hs-varid'>r</span>
+<a name="line-1221"></a>    <span class='hs-varid'>viewBin</span> <span class='hs-layout'>(</span><span class='hs-conid'>Int32Bin</span> <span class='hs-keyword'>_</span> <span class='hs-varid'>i</span> <span class='hs-varid'>l</span> <span class='hs-varid'>r</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=</span> <span class='hs-layout'>(</span><span class='hs-cpp'>#</span> <span class='hs-varid'>i</span><span class='hs-layout'>,</span> <span class='hs-varid'>l</span><span class='hs-layout'>,</span> <span class='hs-varid'>r</span> <span class='hs-cpp'>#</span><span class='hs-layout'>)</span>
+<a name="line-1222"></a>    <span class='hs-varid'>tip</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>Int32Tip</span>
+<a name="line-1223"></a>    <span class='hs-varid'>bin</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>Int32Bin</span>
+<a name="line-1224"></a>    <span class='hs-varid'>null</span> <span class='hs-conid'>Int32Tip</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>True</span>
+<a name="line-1225"></a>    <span class='hs-varid'>null</span> <span class='hs-keyword'>_</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>False</span>
+<a name="line-1226"></a>
+<a name="line-1227"></a><span class='hs-keyword'>instance</span> <span class='hs-conid'>US</span> <span class='hs-conid'>Int64</span> <span class='hs-keyword'>where</span>
+<a name="line-1228"></a>    <span class='hs-keyword'>data</span> <span class='hs-conid'>USet</span> <span class='hs-conid'>Int64</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>Int64Tip</span> <span class='hs-keyglyph'>|</span> <span class='hs-conid'>Int64Bin</span> <span class='hs-comment'>{-# UNPACK #-}</span> <span class='hs-varop'>!</span><span class='hs-conid'>Size</span> <span class='hs-comment'>{-# UNPACK #-}</span> <span class='hs-varop'>!</span><span class='hs-conid'>Int64</span> <span class='hs-varop'>!</span><span class='hs-layout'>(</span><span class='hs-conid'>USet</span> <span class='hs-conid'>Int64</span><span class='hs-layout'>)</span> <span class='hs-varop'>!</span><span class='hs-layout'>(</span><span class='hs-conid'>USet</span> <span class='hs-conid'>Int64</span><span class='hs-layout'>)</span>
+<a name="line-1229"></a>    <span class='hs-varid'>view</span> <span class='hs-conid'>Int64Tip</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>Tip</span>
+<a name="line-1230"></a>    <span class='hs-varid'>view</span> <span class='hs-layout'>(</span><span class='hs-conid'>Int64Bin</span> <span class='hs-varid'>s</span> <span class='hs-varid'>i</span> <span class='hs-varid'>l</span> <span class='hs-varid'>r</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>Bin</span> <span class='hs-varid'>s</span> <span class='hs-varid'>i</span> <span class='hs-varid'>l</span> <span class='hs-varid'>r</span>
+<a name="line-1231"></a>    <span class='hs-varid'>viewk</span> <span class='hs-varid'>t</span> <span class='hs-keyword'>_</span> <span class='hs-conid'>Int64Tip</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>t</span> 
+<a name="line-1232"></a>    <span class='hs-varid'>viewk</span> <span class='hs-keyword'>_</span> <span class='hs-varid'>k</span> <span class='hs-layout'>(</span><span class='hs-conid'>Int64Bin</span> <span class='hs-varid'>s</span> <span class='hs-varid'>i</span> <span class='hs-varid'>l</span> <span class='hs-varid'>r</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>k</span> <span class='hs-varid'>s</span> <span class='hs-varid'>i</span> <span class='hs-varid'>l</span> <span class='hs-varid'>r</span>
+<a name="line-1233"></a>    <span class='hs-varid'>viewBin</span> <span class='hs-layout'>(</span><span class='hs-conid'>Int64Bin</span> <span class='hs-keyword'>_</span> <span class='hs-varid'>i</span> <span class='hs-varid'>l</span> <span class='hs-varid'>r</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=</span> <span class='hs-layout'>(</span><span class='hs-cpp'>#</span> <span class='hs-varid'>i</span><span class='hs-layout'>,</span> <span class='hs-varid'>l</span><span class='hs-layout'>,</span> <span class='hs-varid'>r</span> <span class='hs-cpp'>#</span><span class='hs-layout'>)</span>
+<a name="line-1234"></a>    <span class='hs-varid'>tip</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>Int64Tip</span>
+<a name="line-1235"></a>    <span class='hs-varid'>bin</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>Int64Bin</span>
+<a name="line-1236"></a>    <span class='hs-varid'>null</span> <span class='hs-conid'>Int64Tip</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>True</span>
+<a name="line-1237"></a>    <span class='hs-varid'>null</span> <span class='hs-keyword'>_</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>False</span>
+<a name="line-1238"></a>
+<a name="line-1239"></a><span class='hs-keyword'>instance</span> <span class='hs-conid'>US</span> <span class='hs-conid'>Word8</span> <span class='hs-keyword'>where</span>
+<a name="line-1240"></a>    <span class='hs-keyword'>data</span> <span class='hs-conid'>USet</span> <span class='hs-conid'>Word8</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>Word8Tip</span> <span class='hs-keyglyph'>|</span> <span class='hs-conid'>Word8Bin</span> <span class='hs-comment'>{-# UNPACK #-}</span> <span class='hs-varop'>!</span><span class='hs-conid'>Size</span> <span class='hs-comment'>{-# UNPACK #-}</span> <span class='hs-varop'>!</span><span class='hs-conid'>Word8</span> <span class='hs-varop'>!</span><span class='hs-layout'>(</span><span class='hs-conid'>USet</span> <span class='hs-conid'>Word8</span><span class='hs-layout'>)</span> <span class='hs-varop'>!</span><span class='hs-layout'>(</span><span class='hs-conid'>USet</span> <span class='hs-conid'>Word8</span><span class='hs-layout'>)</span>
+<a name="line-1241"></a>    <span class='hs-varid'>view</span> <span class='hs-conid'>Word8Tip</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>Tip</span>
+<a name="line-1242"></a>    <span class='hs-varid'>view</span> <span class='hs-layout'>(</span><span class='hs-conid'>Word8Bin</span> <span class='hs-varid'>s</span> <span class='hs-varid'>i</span> <span class='hs-varid'>l</span> <span class='hs-varid'>r</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>Bin</span> <span class='hs-varid'>s</span> <span class='hs-varid'>i</span> <span class='hs-varid'>l</span> <span class='hs-varid'>r</span>
+<a name="line-1243"></a>    <span class='hs-varid'>viewk</span> <span class='hs-varid'>t</span> <span class='hs-keyword'>_</span> <span class='hs-conid'>Word8Tip</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>t</span> 
+<a name="line-1244"></a>    <span class='hs-varid'>viewk</span> <span class='hs-keyword'>_</span> <span class='hs-varid'>k</span> <span class='hs-layout'>(</span><span class='hs-conid'>Word8Bin</span> <span class='hs-varid'>s</span> <span class='hs-varid'>i</span> <span class='hs-varid'>l</span> <span class='hs-varid'>r</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>k</span> <span class='hs-varid'>s</span> <span class='hs-varid'>i</span> <span class='hs-varid'>l</span> <span class='hs-varid'>r</span>
+<a name="line-1245"></a>    <span class='hs-varid'>viewBin</span> <span class='hs-layout'>(</span><span class='hs-conid'>Word8Bin</span> <span class='hs-keyword'>_</span> <span class='hs-varid'>i</span> <span class='hs-varid'>l</span> <span class='hs-varid'>r</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=</span> <span class='hs-layout'>(</span><span class='hs-cpp'>#</span> <span class='hs-varid'>i</span><span class='hs-layout'>,</span> <span class='hs-varid'>l</span><span class='hs-layout'>,</span> <span class='hs-varid'>r</span> <span class='hs-cpp'>#</span><span class='hs-layout'>)</span>
+<a name="line-1246"></a>    <span class='hs-varid'>tip</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>Word8Tip</span>
+<a name="line-1247"></a>    <span class='hs-varid'>bin</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>Word8Bin</span>
+<a name="line-1248"></a>    <span class='hs-varid'>null</span> <span class='hs-conid'>Word8Tip</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>True</span>
+<a name="line-1249"></a>    <span class='hs-varid'>null</span> <span class='hs-keyword'>_</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>False</span>
+<a name="line-1250"></a>
+<a name="line-1251"></a><span class='hs-keyword'>instance</span> <span class='hs-conid'>US</span> <span class='hs-conid'>Word16</span> <span class='hs-keyword'>where</span>
+<a name="line-1252"></a>    <span class='hs-keyword'>data</span> <span class='hs-conid'>USet</span> <span class='hs-conid'>Word16</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>Word16Tip</span> <span class='hs-keyglyph'>|</span> <span class='hs-conid'>Word16Bin</span> <span class='hs-comment'>{-# UNPACK #-}</span> <span class='hs-varop'>!</span><span class='hs-conid'>Size</span> <span class='hs-comment'>{-# UNPACK #-}</span> <span class='hs-varop'>!</span><span class='hs-conid'>Word16</span> <span class='hs-varop'>!</span><span class='hs-layout'>(</span><span class='hs-conid'>USet</span> <span class='hs-conid'>Word16</span><span class='hs-layout'>)</span> <span class='hs-varop'>!</span><span class='hs-layout'>(</span><span class='hs-conid'>USet</span> <span class='hs-conid'>Word16</span><span class='hs-layout'>)</span>
+<a name="line-1253"></a>    <span class='hs-varid'>view</span> <span class='hs-conid'>Word16Tip</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>Tip</span>
+<a name="line-1254"></a>    <span class='hs-varid'>view</span> <span class='hs-layout'>(</span><span class='hs-conid'>Word16Bin</span> <span class='hs-varid'>s</span> <span class='hs-varid'>i</span> <span class='hs-varid'>l</span> <span class='hs-varid'>r</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>Bin</span> <span class='hs-varid'>s</span> <span class='hs-varid'>i</span> <span class='hs-varid'>l</span> <span class='hs-varid'>r</span>
+<a name="line-1255"></a>    <span class='hs-varid'>viewk</span> <span class='hs-varid'>t</span> <span class='hs-keyword'>_</span> <span class='hs-conid'>Word16Tip</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>t</span> 
+<a name="line-1256"></a>    <span class='hs-varid'>viewk</span> <span class='hs-keyword'>_</span> <span class='hs-varid'>k</span> <span class='hs-layout'>(</span><span class='hs-conid'>Word16Bin</span> <span class='hs-varid'>s</span> <span class='hs-varid'>i</span> <span class='hs-varid'>l</span> <span class='hs-varid'>r</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>k</span> <span class='hs-varid'>s</span> <span class='hs-varid'>i</span> <span class='hs-varid'>l</span> <span class='hs-varid'>r</span>
+<a name="line-1257"></a>    <span class='hs-varid'>viewBin</span> <span class='hs-layout'>(</span><span class='hs-conid'>Word16Bin</span> <span class='hs-keyword'>_</span> <span class='hs-varid'>i</span> <span class='hs-varid'>l</span> <span class='hs-varid'>r</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=</span> <span class='hs-layout'>(</span><span class='hs-cpp'>#</span> <span class='hs-varid'>i</span><span class='hs-layout'>,</span> <span class='hs-varid'>l</span><span class='hs-layout'>,</span> <span class='hs-varid'>r</span> <span class='hs-cpp'>#</span><span class='hs-layout'>)</span>
+<a name="line-1258"></a>    <span class='hs-varid'>bin</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>Word16Bin</span>
+<a name="line-1259"></a>    <span class='hs-varid'>tip</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>Word16Tip</span>
+<a name="line-1260"></a>    <span class='hs-varid'>null</span> <span class='hs-conid'>Word16Tip</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>True</span>
+<a name="line-1261"></a>    <span class='hs-varid'>null</span> <span class='hs-keyword'>_</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>False</span>
+<a name="line-1262"></a>
+<a name="line-1263"></a><span class='hs-keyword'>instance</span> <span class='hs-conid'>US</span> <span class='hs-conid'>Word32</span> <span class='hs-keyword'>where</span>
+<a name="line-1264"></a>    <span class='hs-keyword'>data</span> <span class='hs-conid'>USet</span> <span class='hs-conid'>Word32</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>Word32Tip</span> <span class='hs-keyglyph'>|</span> <span class='hs-conid'>Word32Bin</span> <span class='hs-comment'>{-# UNPACK #-}</span> <span class='hs-varop'>!</span><span class='hs-conid'>Size</span> <span class='hs-comment'>{-# UNPACK #-}</span> <span class='hs-varop'>!</span><span class='hs-conid'>Word32</span> <span class='hs-varop'>!</span><span class='hs-layout'>(</span><span class='hs-conid'>USet</span> <span class='hs-conid'>Word32</span><span class='hs-layout'>)</span> <span class='hs-varop'>!</span><span class='hs-layout'>(</span><span class='hs-conid'>USet</span> <span class='hs-conid'>Word32</span><span class='hs-layout'>)</span>
+<a name="line-1265"></a>    <span class='hs-varid'>view</span> <span class='hs-conid'>Word32Tip</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>Tip</span>
+<a name="line-1266"></a>    <span class='hs-varid'>view</span> <span class='hs-layout'>(</span><span class='hs-conid'>Word32Bin</span> <span class='hs-varid'>s</span> <span class='hs-varid'>i</span> <span class='hs-varid'>l</span> <span class='hs-varid'>r</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>Bin</span> <span class='hs-varid'>s</span> <span class='hs-varid'>i</span> <span class='hs-varid'>l</span> <span class='hs-varid'>r</span>
+<a name="line-1267"></a>    <span class='hs-varid'>viewk</span> <span class='hs-varid'>t</span> <span class='hs-keyword'>_</span> <span class='hs-conid'>Word32Tip</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>t</span> 
+<a name="line-1268"></a>    <span class='hs-varid'>viewk</span> <span class='hs-keyword'>_</span> <span class='hs-varid'>k</span> <span class='hs-layout'>(</span><span class='hs-conid'>Word32Bin</span> <span class='hs-varid'>s</span> <span class='hs-varid'>i</span> <span class='hs-varid'>l</span> <span class='hs-varid'>r</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>k</span> <span class='hs-varid'>s</span> <span class='hs-varid'>i</span> <span class='hs-varid'>l</span> <span class='hs-varid'>r</span>
+<a name="line-1269"></a>    <span class='hs-varid'>viewBin</span> <span class='hs-layout'>(</span><span class='hs-conid'>Word32Bin</span> <span class='hs-keyword'>_</span> <span class='hs-varid'>i</span> <span class='hs-varid'>l</span> <span class='hs-varid'>r</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=</span> <span class='hs-layout'>(</span><span class='hs-cpp'>#</span> <span class='hs-varid'>i</span><span class='hs-layout'>,</span> <span class='hs-varid'>l</span><span class='hs-layout'>,</span> <span class='hs-varid'>r</span> <span class='hs-cpp'>#</span><span class='hs-layout'>)</span>
+<a name="line-1270"></a>    <span class='hs-varid'>tip</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>Word32Tip</span>
+<a name="line-1271"></a>    <span class='hs-varid'>bin</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>Word32Bin</span>
+<a name="line-1272"></a>    <span class='hs-varid'>null</span> <span class='hs-conid'>Word32Tip</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>True</span>
+<a name="line-1273"></a>    <span class='hs-varid'>null</span> <span class='hs-keyword'>_</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>False</span>
+<a name="line-1274"></a>
+<a name="line-1275"></a><span class='hs-keyword'>instance</span> <span class='hs-conid'>US</span> <span class='hs-conid'>Word64</span> <span class='hs-keyword'>where</span>
+<a name="line-1276"></a>    <span class='hs-keyword'>data</span> <span class='hs-conid'>USet</span> <span class='hs-conid'>Word64</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>Word64Tip</span> <span class='hs-keyglyph'>|</span> <span class='hs-conid'>Word64Bin</span> <span class='hs-comment'>{-# UNPACK #-}</span> <span class='hs-varop'>!</span><span class='hs-conid'>Size</span> <span class='hs-comment'>{-# UNPACK #-}</span> <span class='hs-varop'>!</span><span class='hs-conid'>Word64</span> <span class='hs-varop'>!</span><span class='hs-layout'>(</span><span class='hs-conid'>USet</span> <span class='hs-conid'>Word64</span><span class='hs-layout'>)</span> <span class='hs-varop'>!</span><span class='hs-layout'>(</span><span class='hs-conid'>USet</span> <span class='hs-conid'>Word64</span><span class='hs-layout'>)</span>
+<a name="line-1277"></a>    <span class='hs-varid'>view</span> <span class='hs-conid'>Word64Tip</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>Tip</span>
+<a name="line-1278"></a>    <span class='hs-varid'>view</span> <span class='hs-layout'>(</span><span class='hs-conid'>Word64Bin</span> <span class='hs-varid'>s</span> <span class='hs-varid'>i</span> <span class='hs-varid'>l</span> <span class='hs-varid'>r</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>Bin</span> <span class='hs-varid'>s</span> <span class='hs-varid'>i</span> <span class='hs-varid'>l</span> <span class='hs-varid'>r</span>
+<a name="line-1279"></a>    <span class='hs-varid'>viewk</span> <span class='hs-varid'>t</span> <span class='hs-keyword'>_</span> <span class='hs-conid'>Word64Tip</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>t</span> 
+<a name="line-1280"></a>    <span class='hs-varid'>viewk</span> <span class='hs-keyword'>_</span> <span class='hs-varid'>k</span> <span class='hs-layout'>(</span><span class='hs-conid'>Word64Bin</span> <span class='hs-varid'>s</span> <span class='hs-varid'>i</span> <span class='hs-varid'>l</span> <span class='hs-varid'>r</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>k</span> <span class='hs-varid'>s</span> <span class='hs-varid'>i</span> <span class='hs-varid'>l</span> <span class='hs-varid'>r</span>
+<a name="line-1281"></a>    <span class='hs-varid'>viewBin</span> <span class='hs-layout'>(</span><span class='hs-conid'>Word64Bin</span> <span class='hs-keyword'>_</span> <span class='hs-varid'>i</span> <span class='hs-varid'>l</span> <span class='hs-varid'>r</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=</span> <span class='hs-layout'>(</span><span class='hs-cpp'>#</span> <span class='hs-varid'>i</span><span class='hs-layout'>,</span> <span class='hs-varid'>l</span><span class='hs-layout'>,</span> <span class='hs-varid'>r</span> <span class='hs-cpp'>#</span><span class='hs-layout'>)</span>
+<a name="line-1282"></a>    <span class='hs-varid'>tip</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>Word64Tip</span>
+<a name="line-1283"></a>    <span class='hs-varid'>bin</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>Word64Bin</span>
+<a name="line-1284"></a>    <span class='hs-varid'>null</span> <span class='hs-conid'>Word64Tip</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>True</span>
+<a name="line-1285"></a>    <span class='hs-varid'>null</span> <span class='hs-keyword'>_</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>False</span>
+<a name="line-1286"></a>
+<a name="line-1287"></a><span class='hs-keyword'>instance</span> <span class='hs-conid'>US</span> <span class='hs-conid'>Double</span> <span class='hs-keyword'>where</span>
+<a name="line-1288"></a>    <span class='hs-keyword'>data</span> <span class='hs-conid'>USet</span> <span class='hs-conid'>Double</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>DoubleTip</span> <span class='hs-keyglyph'>|</span> <span class='hs-conid'>DoubleBin</span> <span class='hs-comment'>{-# UNPACK #-}</span> <span class='hs-varop'>!</span><span class='hs-conid'>Size</span> <span class='hs-comment'>{-# UNPACK #-}</span> <span class='hs-varop'>!</span><span class='hs-conid'>Double</span> <span class='hs-varop'>!</span><span class='hs-layout'>(</span><span class='hs-conid'>USet</span> <span class='hs-conid'>Double</span><span class='hs-layout'>)</span> <span class='hs-varop'>!</span><span class='hs-layout'>(</span><span class='hs-conid'>USet</span> <span class='hs-conid'>Double</span><span class='hs-layout'>)</span>
+<a name="line-1289"></a>    <span class='hs-varid'>view</span> <span class='hs-conid'>DoubleTip</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>Tip</span>
+<a name="line-1290"></a>    <span class='hs-varid'>view</span> <span class='hs-layout'>(</span><span class='hs-conid'>DoubleBin</span> <span class='hs-varid'>s</span> <span class='hs-varid'>i</span> <span class='hs-varid'>l</span> <span class='hs-varid'>r</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>Bin</span> <span class='hs-varid'>s</span> <span class='hs-varid'>i</span> <span class='hs-varid'>l</span> <span class='hs-varid'>r</span>
+<a name="line-1291"></a>    <span class='hs-varid'>viewk</span> <span class='hs-varid'>t</span> <span class='hs-keyword'>_</span> <span class='hs-conid'>DoubleTip</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>t</span> 
+<a name="line-1292"></a>    <span class='hs-varid'>viewk</span> <span class='hs-keyword'>_</span> <span class='hs-varid'>k</span> <span class='hs-layout'>(</span><span class='hs-conid'>DoubleBin</span> <span class='hs-varid'>s</span> <span class='hs-varid'>i</span> <span class='hs-varid'>l</span> <span class='hs-varid'>r</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>k</span> <span class='hs-varid'>s</span> <span class='hs-varid'>i</span> <span class='hs-varid'>l</span> <span class='hs-varid'>r</span>
+<a name="line-1293"></a>    <span class='hs-varid'>viewBin</span> <span class='hs-layout'>(</span><span class='hs-conid'>DoubleBin</span> <span class='hs-keyword'>_</span> <span class='hs-varid'>i</span> <span class='hs-varid'>l</span> <span class='hs-varid'>r</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=</span> <span class='hs-layout'>(</span><span class='hs-cpp'>#</span> <span class='hs-varid'>i</span><span class='hs-layout'>,</span> <span class='hs-varid'>l</span><span class='hs-layout'>,</span> <span class='hs-varid'>r</span> <span class='hs-cpp'>#</span><span class='hs-layout'>)</span>
+<a name="line-1294"></a>    <span class='hs-varid'>tip</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>DoubleTip</span>
+<a name="line-1295"></a>    <span class='hs-varid'>bin</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>DoubleBin</span>
+<a name="line-1296"></a>    <span class='hs-varid'>null</span> <span class='hs-conid'>DoubleTip</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>True</span>
+<a name="line-1297"></a>    <span class='hs-varid'>null</span> <span class='hs-keyword'>_</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>False</span>
+<a name="line-1298"></a>
+<a name="line-1299"></a><span class='hs-keyword'>instance</span> <span class='hs-conid'>US</span> <span class='hs-conid'>Float</span> <span class='hs-keyword'>where</span>
+<a name="line-1300"></a>    <span class='hs-keyword'>data</span> <span class='hs-conid'>USet</span> <span class='hs-conid'>Float</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>FloatTip</span> <span class='hs-keyglyph'>|</span> <span class='hs-conid'>FloatBin</span> <span class='hs-comment'>{-# UNPACK #-}</span> <span class='hs-varop'>!</span><span class='hs-conid'>Size</span> <span class='hs-comment'>{-# UNPACK #-}</span> <span class='hs-varop'>!</span><span class='hs-conid'>Float</span> <span class='hs-varop'>!</span><span class='hs-layout'>(</span><span class='hs-conid'>USet</span> <span class='hs-conid'>Float</span><span class='hs-layout'>)</span> <span class='hs-varop'>!</span><span class='hs-layout'>(</span><span class='hs-conid'>USet</span> <span class='hs-conid'>Float</span><span class='hs-layout'>)</span>
+<a name="line-1301"></a>    <span class='hs-varid'>view</span> <span class='hs-conid'>FloatTip</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>Tip</span>
+<a name="line-1302"></a>    <span class='hs-varid'>view</span> <span class='hs-layout'>(</span><span class='hs-conid'>FloatBin</span> <span class='hs-varid'>s</span> <span class='hs-varid'>i</span> <span class='hs-varid'>l</span> <span class='hs-varid'>r</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>Bin</span> <span class='hs-varid'>s</span> <span class='hs-varid'>i</span> <span class='hs-varid'>l</span> <span class='hs-varid'>r</span>
+<a name="line-1303"></a>    <span class='hs-varid'>viewk</span> <span class='hs-varid'>t</span> <span class='hs-keyword'>_</span> <span class='hs-conid'>FloatTip</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>t</span> 
+<a name="line-1304"></a>    <span class='hs-varid'>viewk</span> <span class='hs-keyword'>_</span> <span class='hs-varid'>k</span> <span class='hs-layout'>(</span><span class='hs-conid'>FloatBin</span> <span class='hs-varid'>s</span> <span class='hs-varid'>i</span> <span class='hs-varid'>l</span> <span class='hs-varid'>r</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>k</span> <span class='hs-varid'>s</span> <span class='hs-varid'>i</span> <span class='hs-varid'>l</span> <span class='hs-varid'>r</span>
+<a name="line-1305"></a>    <span class='hs-varid'>viewBin</span> <span class='hs-layout'>(</span><span class='hs-conid'>FloatBin</span> <span class='hs-keyword'>_</span> <span class='hs-varid'>i</span> <span class='hs-varid'>l</span> <span class='hs-varid'>r</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=</span> <span class='hs-layout'>(</span><span class='hs-cpp'>#</span> <span class='hs-varid'>i</span><span class='hs-layout'>,</span> <span class='hs-varid'>l</span><span class='hs-layout'>,</span> <span class='hs-varid'>r</span> <span class='hs-cpp'>#</span><span class='hs-layout'>)</span>
+<a name="line-1306"></a>    <span class='hs-varid'>tip</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>FloatTip</span>
+<a name="line-1307"></a>    <span class='hs-varid'>bin</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>FloatBin</span>
+<a name="line-1308"></a>    <span class='hs-varid'>null</span> <span class='hs-conid'>FloatTip</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>True</span>
+<a name="line-1309"></a>    <span class='hs-varid'>null</span> <span class='hs-keyword'>_</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>False</span>
+<a name="line-1310"></a>
+</pre></body>
+</html>
addfile ./doc/html/unboxed-containers/src/hscolour.css
hunk ./doc/html/unboxed-containers/src/hscolour.css 1
+.hs-keyglyph, .hs-layout {color: red;}
+.hs-keyword {color: blue;}
+.hs-comment, .hs-comment a {color: green;}
+.hs-str, .hs-chr {color: teal;}
+.hs-keyword, .hs-conid, .hs-varid, .hs-conop, .hs-varop, .hs-num, .hs-cpp, .hs-sel, .hs-definition {}
addfile ./doc/html/unboxed-containers/unboxed-containers.haddock
binary ./doc/html/unboxed-containers/unboxed-containers.haddock
oldhex
*
newhex
*0d0cface0004000000000000561a00000000000050cc2b00000000000000000000000000000000
*000000000000000100000000000000010000000000000000000000000000000100000000000000
*020000000000000000000000000000000100000000000000030000000000000000000000000000
*000100000000000000040000000000000000000000000000000100000000000000050000000000
*000000000000000000000100000000000000060000000000000000000000000000000100000000
*000000070000000000000000000000000000000100000000000000080000000000000000000000
*0000000001000000000000000900000000000000000000000000000001000000000000000a0000
*0000000000000000000000000001000000000000000b0000000000000000000000000000000100
*0000000000000c00000000000000000000000000000001000000000000000d0000000000000000
*0000000000000001000000000000000e0000000000000000000000000000000100000000000000
*0f0000000000000000000000000000000100000000000000100000000000000000000000000000
*000100000000000000110000000000000000000000000000000100000000000000120000000000
*000000000000000000000100000000000000130000000000000000000000000000000100000000
*000000140000000000000000000000000000000100000000000000150000000000000000000000
*000000000100000000000000160000000000000000000000000000000100000000000000170000
*000000000000000000000000000100000000000000180000000000000000000000000000000100
*0000000000001900000000000000000000000000000001000000000000001a0000000000000000
*0000000000000001000000000000001b0000000000000000000000000000000100000000000000
*1c00000000000000000000000000000001000000000000001d0000000000000000000000000000
*0001000000000000001e00000000000000000000000000000001000000000000001f0000000000
*000000000000000000000100000000000000200000000000000000000000000000000100000000
*000000210000000000000000000000000000000100000000000000220000000000000000000000
*000000000100000000000000230000000000000000000000000000000100000000000000240000
*000000000000000000000000000100000000000000250000000000000000000000000000000100
*000000000000260000000000000000000000000000000100000000000000270000000000000000
*000000000000000100000000000000280000000000000000000000000000000100000000000000
*2900000000000000000000000000000001000000000000002a0000000000000000000000000000
*00010100000000000000000000000000000001000000002f000000000000002b03022e00000045
*00000078000000740000007200000061000000630000007400000020000000610000006e000000
*64000000200000007200000065000000620000006f000000780000002000000074000000680000
*0065000000200000007300000070000000650000006300000069000000610000006c0000006900
*00007a0000006500000064000000200000006e0000006f00000064000000650000002000000066
*0000006f000000720000006d00000061000000740000000a000000000000002c03022c00000041
*00000070000000700000006c000000790000002000000074000000680000006500000020000000
*7600000069000000650000007700000020000000740000006f0000002000000074000000690000
*007000000020000000610000006e000000640000002000000062000000690000006e0000002000
*0000630000006f0000006e00000074000000690000006e00000075000000610000007400000069
*0000006f0000006e000000730000000a000000000000002d030236000000560000006900000065
*00000077000000200000006a000000750000007300000074000000200000007400000068000000
*650000002000000076000000610000006c000000750000006500000020000000610000006e0000
*0064000000200000006c00000065000000660000007400000020000000610000006e0000006400
*000020000000720000006900000067000000680000007400000020000000630000006800000069
*0000006c00000064000000200000006f0000006600000020000000610000002000000062000000
*690000006e0000000a000000000000000403010602040000004f00000028000000310000002902
*250000002e00000020000000540000006800000065000000200000006e000000750000006d0000
*00620000006500000072000000200000006f0000006600000020000000650000006c0000006500
*00006d000000650000006e000000740000007300000020000000690000006e0000002000000074
*0000006800000065000000200000007300000065000000740000002e0000000a00000000000000
*0503010602040000004f00000028000000310000002902190000002e0000002000000049000000
*730000002000000074000000680000006900000073000000200000007400000068000000650000
*0020000000650000006d0000007000000074000000790000002000000073000000650000007400
*00003f0000000a000000000000002e030216000000530000006d00000061000000720000007400
*00002000000074000000690000007000000020000000630000006f0000006e0000007300000074
*000000720000007500000063000000740000006f000000720000000a000000000000002f030216
*000000530000006d0000006100000072000000740000002000000062000000690000006e000000
*20000000630000006f0000006e0000007300000074000000720000007500000063000000740000
*006f000000720000000a0000000000000030030102100000004100000020000000730000006500
*000074000000200000006f000000660000002000000076000000610000006c0000007500000065
*0000007300000020010702010000006102020000002e0000000a00000000000000060301060206
*0000004f000000280000006e0000002b0000006d000000290102060000002e0000002000000053
*000000650000006500000020010401000000000000000015000000000000000000000000000000
*0102020000002e0000000a000000000000000703010602080000004f000000280000006c000000
*6f00000067000000200000006e00000029021d0000002e00000020000000490000007300000020
*00000074000000680000006500000020000000650000006c000000650000006d00000065000000
*6e0000007400000020000000690000006e00000020000000740000006800000065000000200000
*007300000065000000740000003f0000000a000000000000000803010602080000004f00000028
*0000006c0000006f00000067000000200000006e0000002902210000002e000000200000004900
*0000730000002000000074000000680000006500000020000000650000006c000000650000006d
*000000650000006e00000074000000200000006e0000006f000000740000002000000069000000
*6e00000020000000740000006800000065000000200000007300000065000000740000003f0000
*000a000000000000000903010602040000004f00000028000000310000002902110000002e0000
*002000000054000000680000006500000020000000650000006d00000070000000740000007900
*0000200000007300000065000000740000002e0000000a000000000000000a0301060204000000
*4f000000280000003100000029021a0000002e0000002000000043000000720000006500000061
*000000740000006500000020000000610000002000000073000000690000006e00000067000000
*6c00000065000000740000006f0000006e000000200000007300000065000000740000002e0000
*000a000000000000000b03010602080000004f000000280000006c0000006f0000006700000020
*0000006e0000002901021e0000002e00000020000000490000006e000000730000006500000072
*0000007400000020000000610000006e00000020000000650000006c000000650000006d000000
*650000006e0000007400000020000000690000006e000000200000006100000020000000730000
*0065000000740000002e0000000a01024200000020000000490000006600000020000000740000
*0068000000650000002000000073000000650000007400000020000000610000006c0000007200
*00006500000061000000640000007900000020000000630000006f0000006e0000007400000061
*000000690000006e0000007300000020000000610000006e00000020000000650000006c000000
*650000006d000000650000006e0000007400000020000000650000007100000075000000610000
*006c00000020000000740000006f00000020000000740000006800000065000000200000006700
*00006900000076000000650000006e0000002000000076000000610000006c0000007500000065
*0000002c0000000a02240000002000000069000000740000002000000069000000730000002000
*00007200000065000000700000006c000000610000006300000065000000640000002000000077
*00000069000000740000006800000020000000740000006800000065000000200000006e000000
*65000000770000002000000076000000610000006c00000075000000650000002e0000000a0000
*00000000000c03010602080000004f000000280000006c0000006f00000067000000200000006e
*0000002902200000002e0000002000000044000000650000006c00000065000000740000006500
*000020000000610000006e00000020000000650000006c000000650000006d000000650000006e
*000000740000002000000066000000720000006f0000006d000000200000006100000020000000
*7300000065000000740000002e0000000a000000000000000d03010602060000004f0000002800
*00006e0000002b0000006d0000002902390000002e000000200000004900000073000000200000
*007400000068000000690000007300000020000000610000002000000070000000720000006f00
*000070000000650000007200000020000000730000007500000062000000730000006500000074
*0000003f000000200000002800000069000000650000002e000000200000006100000020000000
*730000007500000062000000730000006500000074000000200000006200000075000000740000
*00200000006e0000006f0000007400000020000000650000007100000075000000610000006c00
*0000290000002e0000000a000000000000000e03010602060000004f000000280000006e000000
*2b0000006d000000290102140000002e0000002000000049000000730000002000000074000000
*680000006900000073000000200000006100000020000000730000007500000062000000730000
*0065000000740000003f0000000a01020100000020010701020400000028000000730000003100
*00002001040100000000000000000e000000000000000000000000000000010204000000200000
*0073000000320000002901020f0000002000000074000000650000006c0000006c000000730000
*002000000077000000680000006500000074000000680000006500000072000000200107020200
*000073000000310102100000002000000069000000730000002000000061000000200000007300
*00007500000062000000730000006500000074000000200000006f000000660000002001070202
*000000730000003202020000002e0000000a000000000000000f03010602080000004f00000028
*0000006c0000006f00000067000000200000006e0000002902200000002e000000200000005400
*00006800000065000000200000006d000000690000006e000000690000006d000000610000006c
*00000020000000650000006c000000650000006d000000650000006e0000007400000020000000
*6f000000660000002000000061000000200000007300000065000000740000002e0000000a0000
*00000000001003010602080000004f000000280000006c0000006f00000067000000200000006e
*0000002902200000002e00000020000000540000006800000065000000200000006d0000006100
*000078000000690000006d000000610000006c00000020000000650000006c000000650000006d
*000000650000006e00000074000000200000006f00000066000000200000006100000020000000
*7300000065000000740000002e0000000a000000000000001103010602080000004f0000002800
*00006c0000006f00000067000000200000006e00000029021e0000002e00000020000000440000
*00650000006c000000650000007400000065000000200000007400000068000000650000002000
*00006d000000690000006e000000690000006d000000610000006c00000020000000650000006c
*000000650000006d000000650000006e000000740000002e0000000a0000000000000012030106
*02080000004f000000280000006c0000006f00000067000000200000006e00000029021e000000
*2e0000002000000044000000650000006c00000065000000740000006500000020000000740000
*006800000065000000200000006d0000006100000078000000690000006d000000610000006c00
*000020000000650000006c000000650000006d000000650000006e000000740000002e0000000a
*00000000000000130301021e00000054000000680000006500000020000000750000006e000000
*690000006f0000006e000000200000006f000000660000002000000061000000200000006c0000
*00690000007300000074000000200000006f000000660000002000000073000000650000007400
*0000730000003a0000002000000028010701040100000000000000001300000000000000000000
*000000000001010204000000200000003d0000003d000000200104010000000000000000310000
*000000000002000000000000000301020100000020010401000000000000000014000000000000
*000000000000000000010102010000002004010000000000000000090000000000000000000000
*00000000010203000000290000002e0000000a000000000000001403010602060000004f000000
*280000006e0000002b0000006d000000290102370000002e000000200000005400000068000000
*6500000020000000750000006e000000690000006f0000006e000000200000006f000000660000
*002000000074000000770000006f00000020000000730000006500000074000000730000002c00
*00002000000070000000720000006500000066000000650000007200000072000000690000006e
*000000670000002000000074000000680000006500000020000000660000006900000072000000
*730000007400000020000000730000006500000074000000200000007700000068000000650000
*006e0000000a01022100000020000000650000007100000075000000610000006c000000200000
*00650000006c000000650000006d000000650000006e0000007400000073000000200000006100
*0000720000006500000020000000650000006e000000630000006f000000750000006e00000074
*000000650000007200000065000000640000002e0000000a010227000000200000005400000068
*0000006500000020000000690000006d000000700000006c000000650000006d00000065000000
*6e000000740000006100000074000000690000006f0000006e0000002000000075000000730000
*006500000073000000200000007400000068000000650000002000000065000000660000006600
*0000690000006300000069000000650000006e00000074000000200106020b0000006800000065
*0000006400000067000000650000002d000000750000006e000000690000006f0000006e01020c
*00000020000000610000006c000000670000006f00000072000000690000007400000068000000
*6d0000002e0000000a01022a000000200000004800000065000000640000006700000065000000
*2d000000750000006e000000690000006f0000006e000000200000006900000073000000200000
*006d0000006f000000720000006500000020000000650000006600000066000000690000006300
*000069000000650000006e00000074000000200000006f0000006e000000200000002800000062
*000000690000006700000073000000650000007400000020010401000000000000000014000000
*00000000000000000000000001020c00000020000000730000006d000000610000006c0000006c
*000000730000006500000074000000290000002e0000000a000000000000001503010602060000
*004f000000280000006e0000002b0000006d0000002901021b0000002e00000020000000440000
*006900000066000000660000006500000072000000650000006e00000063000000650000002000
*00006f000000660000002000000074000000770000006f00000020000000730000006500000074
*000000730000002e000000200000000a0102260000002000000054000000680000006500000020
*000000690000006d000000700000006c000000650000006d000000650000006e00000074000000
*6100000074000000690000006f0000006e00000020000000750000007300000065000000730000
*0020000000610000006e0000002000000065000000660000006600000069000000630000006900
*0000650000006e0000007400000020010602050000006800000065000000640000006700000065
*01021b00000020000000610000006c000000670000006f00000072000000690000007400000068
*0000006d00000020000000630000006f0000006d00000070000000610000007200000061000000
*620000006c000000650000002000000077000000690000007400000068000000200106020b0000
*0068000000650000006400000067000000650000002d000000750000006e000000690000006f00
*00006e02020000002e0000000a00000000000000160103010602060000004f000000280000006e
*0000002b0000006d000000290102200000002e0000002000000054000000680000006500000020
*000000690000006e00000074000000650000007200000073000000650000006300000074000000
*690000006f0000006e000000200000006f000000660000002000000074000000770000006f0000
*0020000000730000006500000074000000730000002e0000000a02400000002000000045000000
*6c000000650000006d000000650000006e0000007400000073000000200000006f000000660000
*002000000074000000680000006500000020000000720000006500000073000000750000006c00
*00007400000020000000630000006f0000006d000000650000002000000066000000720000006f
*0000006d0000002000000074000000680000006500000020000000660000006900000072000000
*7300000074000000200000007300000065000000740000002c00000020000000730000006f0000
*0020000000660000006f00000072000000200000006500000078000000610000006d0000007000
*00006c000000650000000a010b01022000000020000000690000006d000000700000006f000000
*7200000074000000200000007100000075000000610000006c0000006900000066000000690000
*00650000006400000020000000440000006100000074000000610000002e000000530000006500
*00007400000020000000610000007300000020000000530000000a01021f000000200000006400
*0000610000007400000061000000200000004100000042000000200000003d0000002000000041
*000000200000007c00000020000000420000002000000064000000650000007200000069000000
*76000000690000006e000000670000002000000053000000680000006f000000770000000a0102
*2800000020000000690000006e0000007300000074000000610000006e00000063000000650000
*00200000004f000000720000006400000020000000410000004200000020000000770000006800
*000065000000720000006500000020000000630000006f0000006d000000700000006100000072
*00000065000000200000005f000000200000005f000000200000003d0000002000000045000000
*510000000a01022400000020000000690000006e0000007300000074000000610000006e000000
*630000006500000020000000450000007100000020000000410000004200000020000000770000
*0068000000650000007200000065000000200000005f000000200000003d0000003d0000002000
*00005f000000200000003d00000020000000540000007200000075000000650000000a01023d00
*0000200000006d00000061000000690000006e000000200000003d000000200000007000000072
*000000690000006e000000740000002000000028000000530000002e0000007300000069000000
*6e000000670000006c00000065000000740000006f0000006e0000002000000041000000200000
*0060000000530000002e000000690000006e000000740000006500000072000000730000006500
*00006300000074000000690000006f0000006e0000006000000020000000530000002e00000073
*000000690000006e000000670000006c00000065000000740000006f0000006e00000020000000
*420000002c0000000a023d00000020000000200000002000000020000000200000002000000020
*000000200000002000000020000000200000002000000020000000200000002000000053000000
*2e00000073000000690000006e000000670000006c00000065000000740000006f0000006e0000
*0020000000420000002000000060000000530000002e000000690000006e000000740000006500
*00007200000073000000650000006300000074000000690000006f0000006e0000006000000020
*000000530000002e00000073000000690000006e000000670000006c0000006500000074000000
*6f0000006e0000002000000041000000290000000a030102070000007000000072000000690000
*006e000000740000007300000020010701020c0000002800000066000000720000006f0000006d
*0000004c000000690000007300000074000000200000005b000000410102010000005d01020c00
*00002c00000066000000720000006f0000006d0000004c00000069000000730000007400000020
*0000005b000000420102010000005d02010000002902020000002e0000000a0000000000000017
*03010602040000004f000000280000006e0000002902320000002e000000200000004600000069
*0000006c00000074000000650000007200000020000000610000006c0000006c00000020000000
*650000006c000000650000006d000000650000006e000000740000007300000020000000740000
*006800000061000000740000002000000073000000610000007400000069000000730000006600
*000079000000200000007400000068000000650000002000000070000000720000006500000064
*00000069000000630000006100000074000000650000002e0000000a0000000000000018030106
*02040000004f000000280000006e000000290102460000002e0000002000000050000000610000
*0072000000740000006900000074000000690000006f0000006e00000020000000740000006800
*0000650000002000000073000000650000007400000020000000690000006e000000740000006f
*0000002000000074000000770000006f0000002000000073000000650000007400000073000000
*2c000000200000006f0000006e0000006500000020000000770000006900000074000000680000
*0020000000610000006c0000006c00000020000000650000006c000000650000006d0000006500
*00006e000000740000007300000020000000740000006800000061000000740000002000000073
*0000006100000074000000690000007300000066000000790000000a0102310000002000000074
*000000680000006500000020000000700000007200000065000000640000006900000063000000
*61000000740000006500000020000000610000006e00000064000000200000006f0000006e0000
*0065000000200000007700000069000000740000006800000020000000610000006c0000006c00
*000020000000650000006c000000650000006d000000650000006e000000740000007300000020
*0000007400000068000000610000007400000020000000640000006f0000006e01020100000027
*010219000000740000002000000073000000610000007400000069000000730000006600000079
*000000200000007400000068000000650000002000000070000000720000006500000064000000
*69000000630000006100000074000000650000002e0000000a01020a0000002000000053000000
*650000006500000020000000610000006c000000730000006f0000002001040100000000000000
*00220000000000000000000000000000000102020000002e0000000a0000000000000019010301
*06020a0000004f000000280000006e0000002a0000006c0000006f00000067000000200000006e
*000000290102030000002e000000200000000a0102010000002001070104010000000000000000
*190000000000000000000000000000000102040000002000000066000000200000007301022100
*000020000000690000007300000020000000740000006800000065000000200000007300000065
*00000074000000200000006f000000620000007400000061000000690000006e00000065000000
*64000000200000006200000079000000200000006100000070000000700000006c000000790000
*00690000006e0000006700000020010702010000006601021400000020000000740000006f0000
*00200000006500000061000000630000006800000020000000650000006c000000650000006d00
*0000650000006e00000074000000200000006f0000006600000020010702010000007302020000
*002e0000000a0301020200000049000000740102010000002701023e0000007300000020000000
*770000006f000000720000007400000068000000200000006e0000006f00000074000000690000
*006e00000067000000200000007400000068000000610000007400000020000000740000006800
*0000650000002000000073000000690000007a00000065000000200000006f0000006600000020
*00000074000000680000006500000020000000720000006500000073000000750000006c000000
*74000000200000006d000000610000007900000020000000620000006500000020000000730000
*006d000000610000006c0000006c00000065000000720000002000000069000000660000002c00
*00000a01020a00000020000000660000006f0000007200000020000000730000006f0000006d00
*000065000000200107020500000028000000780000002c00000079000000290102020000002c00
*000020010701020200000078000000200102010000002f0102040000003d000000200000007900
*0000200102010000002601020100000026020b0000002000000066000000200000007800000020
*0000003d0000003d0000002000000066000000200000007902010000000a000000000000001a01
*03010602040000004f000000280000006e0000002902070000002e000000200000005400000068
*00000065000000200000000a0103010701040100000000000000001a0000000000000000000000
*000000000101020800000020000000660000002000000073000000200000003d0000003d000000
*200104010000000000000000190000000000000000000000000000000102040000002000000066
*00000020000000730102160000002c000000200000006200000075000000740000002000000077
*0000006f000000720000006b00000073000000200000006f0000006e0000006c00000079000000
*200000007700000068000000650000006e00000020010702010000006601020f00000020000000
*6900000073000000200000006d0000006f0000006e0000006f000000740000006f0000006e0000
*0069000000630000002e0000000a01020100000020010602200000005400000068000000650000
*0020000000700000007200000065000000630000006f0000006e00000064000000690000007400
*0000690000006f0000006e000000200000006900000073000000200000006e0000006f00000074
*00000020000000630000006800000065000000630000006b00000065000000640000002e010201
*0000000a02190000002000000053000000650000006d000000690000002d000000660000006f00
*0000720000006d000000610000006c0000006c000000790000002c000000200000007700000065
*00000020000000680000006100000076000000650000003a0000000a0b01022f00000020000000
*610000006e00000064000000200000005b00000078000000200000003c00000020000000790000
*00200000003d0000003d0000003e00000020000000660000002000000078000000200000003c00
*000020000000660000002000000079000000200000007c0000002000000078000000200000003c
*0000002d000000200000006c000000730000002c0000002000000079000000200000003c000000
*2d000000200000006c000000730000005d000000200000000a0102350000002000000020000000
*200000002000000020000000200000002000000020000000200000002000000020000000200000
*002000000020000000200000002000000020000000200000002000000020000000200000003d00
*00003d0000003e000000200000006d00000061000000700000004d0000006f0000006e0000006f
*000000740000006f0000006e000000690000006300000020000000660000002000000073000000
*200000003d0000003d000000200000006d00000061000000700000002000000066000000200000
*00730000000a021900000020000000200000002000000020000000200000007700000068000000
*650000007200000065000000200000006c00000073000000200000003d00000020000000740000
*006f0000004c00000069000000730000007400000020000000730000000a000000000000001b03
*010602040000004f000000280000006e00000029023b0000002e00000020000000460000006f00
*00006c00000064000000200000006f000000760000006500000072000000200000007400000068
*0000006500000020000000650000006c000000650000006d000000650000006e00000074000000
*73000000200000006f000000660000002000000061000000200000007300000065000000740000
*0020000000690000006e00000020000000610000006e00000020000000750000006e0000007300
*00007000000065000000630000006900000066000000690000006500000064000000200000006f
*000000720000006400000065000000720000002e0000000a000000000000003203010602040000
*004f000000280000006e0000002902130000002e00000020000000500000006f00000073000000
*740000002d0000006f0000007200000064000000650000007200000020000000660000006f0000
*006c000000640000002e0000000a000000000000001c03010602040000004f000000280000006e
*0000002902190000002e0000002000000054000000680000006500000020000000650000006c00
*0000650000006d000000650000006e0000007400000073000000200000006f0000006600000020
*00000061000000200000007300000065000000740000002e0000000a000000000000001d030106
*02040000004f000000280000006e0000002902290000002e00000020000000430000006f000000
*6e0000007600000065000000720000007400000020000000740000006800000065000000200000
*0073000000650000007400000020000000740000006f0000002000000061000000200000006c00
*0000690000007300000074000000200000006f0000006600000020000000650000006c00000065
*0000006d000000650000006e00000074000000730000002e0000000a000000000000001e030106
*02040000004f000000280000006e0000002902340000002e00000020000000430000006f000000
*6e0000007600000065000000720000007400000020000000740000006800000065000000200000
*0073000000650000007400000020000000740000006f00000020000000610000006e0000002000
*0000610000007300000063000000650000006e00000064000000690000006e0000006700000020
*0000006c000000690000007300000074000000200000006f000000660000002000000065000000
*6c000000650000006d000000650000006e00000074000000730000002e0000000a000000000000
*001f030106020a0000004f000000280000006e0000002a0000006c0000006f0000006700000020
*0000006e0000002902280000002e00000020000000430000007200000065000000610000007400
*000065000000200000006100000020000000730000006500000074000000200000006600000072
*0000006f0000006d0000002000000061000000200000006c000000690000007300000074000000
*200000006f0000006600000020000000650000006c000000650000006d000000650000006e0000
*0074000000730000002e0000000a000000000000002003010602040000004f000000280000006e
*000000290102350000002e000000200000004200000075000000690000006c0000006400000020
*00000061000000200000007300000065000000740000002000000066000000720000006f000000
*6d00000020000000610000006e00000020000000610000007300000063000000650000006e0000
*0064000000690000006e00000067000000200000006c0000006900000073000000740000002000
*0000690000006e000000200000006c000000690000006e00000065000000610000007200000020
*00000074000000690000006d000000650000002e0000000a010201000000200106023a00000054
*000000680000006500000020000000700000007200000065000000630000006f0000006e000000
*640000006900000074000000690000006f0000006e0000002000000028000000690000006e0000
*00700000007500000074000000200000006c000000690000007300000074000000200000006900
*00007300000020000000610000007300000063000000650000006e00000064000000690000006e
*0000006700000029000000200000006900000073000000200000006e0000006f00000074000000
*20000000630000006800000065000000630000006b00000065000000640000002e02010000000a
*000000000000002103010602040000004f000000280000006e0000002901024a0000002e000000
*200000004200000075000000690000006c00000064000000200000006100000020000000730000
*0065000000740000002000000066000000720000006f0000006d00000020000000610000006e00
*000020000000610000007300000063000000650000006e00000064000000690000006e00000067
*000000200000006c000000690000007300000074000000200000006f0000006600000020000000
*64000000690000007300000074000000690000006e000000630000007400000020000000650000
*006c000000650000006d000000650000006e000000740000007300000020000000690000006e00
*0000200000006c000000690000006e000000650000006100000072000000200000007400000069
*0000006d000000650000002e0000000a0102010000002001060243000000540000006800000065
*00000020000000700000007200000065000000630000006f0000006e0000006400000069000000
*74000000690000006f0000006e0000002000000028000000690000006e00000070000000750000
*0074000000200000006c0000006900000073000000740000002000000069000000730000002000
*00007300000074000000720000006900000063000000740000006c000000790000002000000061
*0000007300000063000000650000006e00000064000000690000006e0000006700000029000000
*200000006900000073000000200000006e0000006f000000740000002000000063000000680000
*0065000000630000006b00000065000000640000002e02010000000a0000000000000022030106
*02080000004f000000280000006c0000006f00000067000000200000006e000000290102120000
*002e00000020000000540000006800000065000000200000006500000078000000700000007200
*0000650000007300000073000000690000006f0000006e00000020000000280107010401000000
*000000000022000000000000000000000000000000010206000000200000007800000020000000
*73000000650000007401020c000000290000002000000069000000730000002000000061000000
*2000000070000000610000006900000072000000200107020b0000002800000073000000650000
*0074000000310000002c00000073000000650000007400000032000000290102010000000a0102
*070000002000000077000000680000006500000072000000650000002001070204000000730000
*0065000000740000003101021b00000020000000630000006f0000006d00000070000000720000
*006900000073000000650000007300000020000000740000006800000065000000200000006500
*00006c000000650000006d000000650000006e0000007400000073000000200000006f00000066
*000000200107020300000073000000650000007401020b000000200000006c0000006500000073
*00000073000000200000007400000068000000610000006e000000200107020100000078010205
*00000020000000610000006e000000640000002001070204000000730000006500000074000000
*320102010000000a01021b00000020000000630000006f0000006d000000700000007200000069
*000000730000006500000073000000200000007400000068000000650000002000000065000000
*6c000000650000006d000000650000006e0000007400000073000000200000006f000000660000
*00200107020300000073000000650000007401020e000000200000006700000072000000650000
*0061000000740000006500000072000000200000007400000068000000610000006e0000002001
*0702010000007802020000002e0000000a000000000000002303010602080000004f0000002800
*00006c0000006f00000067000000200000006e0000002901020d0000002e000000200000005000
*00006500000072000000660000006f000000720000006d00000073000000200000006100000020
*010401000000000000000022000000000000000000000000000000010102240000002000000062
*000000750000007400000020000000610000006c000000730000006f0000002000000072000000
*650000007400000075000000720000006e00000073000000200000007700000068000000650000
*007400000068000000650000007200000020000000740000006800000065000000200000007000
*000069000000760000006f000000740000000a022800000020000000650000006c000000650000
*006d000000650000006e0000007400000020000000770000006100000073000000200000006600
*00006f000000750000006e0000006400000020000000690000006e000000200000007400000068
*00000065000000200000006f000000720000006900000067000000690000006e00000061000000
*6c000000200000007300000065000000740000002e0000000a0000000000000033030106020800
*00004f000000280000006c0000006f00000067000000200000006e0000002901020d0000002e00
*000020000000500000006500000072000000660000006f000000720000006d0000007300000020
*00000061000000200104010000000000000000220000000000000000000000000000000101021c
*0000002000000062000000750000007400000020000000610000006c000000730000006f000000
*2000000072000000650000007400000075000000720000006e0000007300000020000000740000
*006800000065000000200000007000000069000000760000006f000000740000000a022d000000
*20000000650000006c000000650000006d000000650000006e0000007400000020000000740000
*006800000061000000740000002000000077000000610000007300000020000000660000006f00
*0000750000006e0000006400000020000000690000006e00000020000000740000006800000065
*000000200000006f000000720000006900000067000000690000006e000000610000006c000000
*200000007300000065000000740000002e0000000a00000000000000240103010602080000004f
*000000280000006c0000006f00000067000000200000006e0000002902270000002e0000002000
*000044000000650000006c00000065000000740000006500000020000000610000006e00000064
*0000002000000066000000690000006e0000006400000020000000740000006800000065000000
*200000006d000000690000006e000000690000006d000000610000006c00000020000000650000
*006c000000650000006d000000650000006e000000740000002e0000000a0b0232000000200000
*0064000000650000006c00000065000000740000006500000046000000690000006e0000006400
*00004d000000690000006e00000020000000730000006500000074000000200000003d00000020
*0000002800000066000000690000006e000000640000004d000000690000006e00000020000000
*7300000065000000740000002c0000002000000064000000650000006c00000065000000740000
*00650000004d000000690000006e00000020000000730000006500000074000000290000000a00
*000000000000250103010602080000004f000000280000006c0000006f00000067000000200000
*006e0000002902270000002e0000002000000044000000650000006c0000006500000074000000
*6500000020000000610000006e000000640000002000000066000000690000006e000000640000
*0020000000740000006800000065000000200000006d0000006100000078000000690000006d00
*0000610000006c00000020000000650000006c000000650000006d000000650000006e00000074
*0000002e0000000a0b02320000002000000064000000650000006c000000650000007400000065
*00000046000000690000006e000000640000004d00000061000000780000002000000073000000
*6500000074000000200000003d000000200000002800000066000000690000006e000000640000
*004d0000006100000078000000200000007300000065000000740000002c000000200000006400
*0000650000006c0000006500000074000000650000004d00000061000000780000002000000073
*0000006500000074000000290000000a000000000000002603010602080000004f000000280000
*006c0000006f00000067000000200000006e000000290102340000002e00000020000000520000
*006500000074000000720000006900000065000000760000006500000073000000200000007400
*00006800000065000000200000006d000000690000006e000000690000006d000000610000006c
*000000200000006b0000006500000079000000200000006f000000660000002000000074000000
*6800000065000000200000007300000065000000740000002c00000020000000610000006e0000
*006400000020000000740000006800000065000000200000007300000065000000740000000a01
*021e00000020000000730000007400000072000000690000007000000070000000650000006400
*0000200000006f0000006600000020000000740000006800000061000000740000002000000065
*0000006c000000650000006d000000650000006e000000740000002c000000200000006f000000
*720000002001040100000000000000003400000000000000020000000000000004021900000020
*000000690000006600000020000000700000006100000073000000730000006500000064000000
*20000000610000006e00000020000000650000006d000000700000007400000079000000200000
*007300000065000000740000002e0000000a000000000000002703010602080000004f00000028
*0000006c0000006f00000067000000200000006e000000290102340000002e0000002000000052
*000000650000007400000072000000690000006500000076000000650000007300000020000000
*740000006800000065000000200000006d0000006100000078000000690000006d000000610000
*006c000000200000006b0000006500000079000000200000006f00000066000000200000007400
*00006800000065000000200000007300000065000000740000002c00000020000000610000006e
*000000640000002000000074000000680000006500000020000000730000006500000074000000
*0a01021e0000002000000073000000740000007200000069000000700000007000000065000000
*64000000200000006f000000660000002000000074000000680000006100000074000000200000
*00650000006c000000650000006d000000650000006e000000740000002c000000200000006f00
*000072000000200104010000000000000000340000000000000002000000000000000402190000
*002000000069000000660000002000000070000000610000007300000073000000650000006400
*000020000000610000006e00000020000000650000006d00000070000000740000007900000020
*0000007300000065000000740000002e0000000a000000000000002803010602040000004f0000
*00280000006e0000002901023b0000002e0000002000000053000000680000006f000000770000
*002000000074000000680000006500000020000000740000007200000065000000650000002000
*00007400000068000000610000007400000020000000690000006d000000700000006c00000065
*0000006d000000650000006e000000740000007300000020000000740000006800000065000000
*200000007300000065000000740000002e00000020000000540000006800000065000000200000
*007400000072000000650000006500000020000000690000007300000020000000730000006800
*00006f000000770000006e0000000a022200000020000000690000006e00000020000000610000
*0020000000630000006f0000006d00000070000000720000006500000073000000730000006500
*0000640000002c0000002000000068000000610000006e00000067000000690000006e00000067
*00000020000000660000006f000000720000006d00000061000000740000002e0000000a000000
*00000000290103010602040000004f000000280000006e000000290102120000002e0000002000
*000054000000680000006500000020000000650000007800000070000000720000006500000073
*00000073000000690000006f0000006e00000020000000280107021a0000007300000068000000
*6f0000007700000054000000720000006500000065000000570000006900000074000000680000
*002000000068000000610000006e00000067000000200000007700000069000000640000006500
*0000200000006d0000006100000070010208000000290000002000000073000000680000006f00
*000077000000730000000a01022600000020000000740000006800000065000000200000007400
*000072000000650000006500000020000000740000006800000061000000740000002000000069
*0000006d000000700000006c000000650000006d000000650000006e0000007400000073000000
*20000000740000006800000065000000200000007300000065000000740000002e000000200000
*004900000066000000200107020400000068000000610000006e00000067010204000000200000
*0069000000730000000a0102010000002001070204000000540000007200000075000000650102
*040000002c0000002000000061000000200106020700000068000000610000006e000000670000
*00690000006e000000670102350000002000000074000000720000006500000065000000200000
*0069000000730000002000000073000000680000006f000000770000006e000000200000006f00
*000074000000680000006500000072000000770000006900000073000000650000002000000061
*00000020000000720000006f000000740000006100000074000000650000006400000020000000
*740000007200000065000000650000002000000069000000730000002000000073000000680000
*006f000000770000006e0000002e0000002000000049000000660000000a010201000000200107
*020400000077000000690000006400000065010204000000200000006900000073000000200104
*010000000000000000350000000000000005000000000000000602220000002c00000020000000
*610000006e00000020000000650000007800000074000000720000006100000020000000770000
*006900000064000000650000002000000076000000650000007200000073000000690000006f00
*00006e0000002000000069000000730000002000000073000000680000006f000000770000006e
*0000002e0000000a0b010246000000200000005300000065000000740000003e00000020000000
*7000000075000000740000005300000074000000720000004c0000006e00000020000000240000
*002000000073000000680000006f00000077000000540000007200000065000000650000005700
*000069000000740000006800000020000000540000007200000075000000650000002000000046
*000000610000006c00000073000000650000002000000024000000200000006600000072000000
*6f0000006d00000044000000690000007300000074000000690000006e00000063000000740000
*004100000073000000630000004c000000690000007300000074000000200000005b0000003100
*00002e0000002e000000350000005d0000000a01020300000020000000340000000a0102060000
*00200000002b0000002d0000002d000000320000000a010209000000200000007c000000200000
*00200000002b0000002d0000002d000000310000000a010209000000200000007c000000200000
*00200000002b0000002d0000002d000000330000000a010206000000200000002b0000002d0000
*002d000000350000000a010202000000200000000a010245000000200000005300000065000000
*740000003e000000200000007000000075000000740000005300000074000000720000004c0000
*006e00000020000000240000002000000073000000680000006f00000077000000540000007200
*000065000000650000005700000069000000740000006800000020000000540000007200000075
*000000650000002000000054000000720000007500000065000000200000002400000020000000
*66000000720000006f0000006d00000044000000690000007300000074000000690000006e0000
*0063000000740000004100000073000000630000004c0000006900000073000000740000002000
*00005b000000310000002e0000002e000000350000005d0000000a010203000000200000003400
*00000a010203000000200000007c0000000a010206000000200000002b0000002d0000002d0000
*00320000000a010206000000200000007c00000020000000200000007c0000000a010209000000
*200000007c00000020000000200000002b0000002d0000002d000000310000000a010206000000
*200000007c00000020000000200000007c0000000a010209000000200000007c00000020000000
*200000002b0000002d0000002d000000330000000a010203000000200000007c0000000a010206
*000000200000002b0000002d0000002d000000350000000a010202000000200000000a01024600
*0000200000005300000065000000740000003e0000002000000070000000750000007400000053
*00000074000000720000004c0000006e0000002000000024000000200000007300000068000000
*6f0000007700000054000000720000006500000065000000570000006900000074000000680000
*002000000046000000610000006c00000073000000650000002000000054000000720000007500
*00006500000020000000240000002000000066000000720000006f0000006d0000004400000069
*0000007300000074000000690000006e0000006300000074000000410000007300000063000000
*4c000000690000007300000074000000200000005b000000310000002e0000002e000000350000
*005d0000000a010206000000200000002b0000002d0000002d000000350000000a010203000000
*200000007c0000000a01020300000020000000340000000a010203000000200000007c0000000a
*010209000000200000007c00000020000000200000002b0000002d0000002d000000330000000a
*010206000000200000007c00000020000000200000007c0000000a010206000000200000002b00
*00002d0000002d000000320000000a010206000000200000002000000020000000200000007c00
*00000a0209000000200000002000000020000000200000002b0000002d0000002d000000310000
*000a000000000000002a03010602040000004f000000280000006e00000029022f0000002e0000
*002000000054000000650000007300000074000000200000006900000066000000200000007400
*0000680000006500000020000000690000006e0000007400000065000000720000006e00000061
*0000006c0000002000000073000000650000007400000020000000730000007400000072000000
*750000006300000074000000750000007200000065000000200000006900000073000000200000
*0076000000610000006c00000069000000640000002e0000000a2b000000000000000000000000
*000000010000000000000002000000000000000300000000000000040000000000000005000000
*0000000006000000000000000700000000000000080000000000000009000000000000000a0000
*00000000000b000000000000000c000000000000000d000000000000000e000000000000000f00
*000000000000100000000000000011000000000000001200000000000000130000000000000014
*000000000000001500000000000000160000000000000017000000000000001800000000000000
*19000000000000001a000000000000001b000000000000001c000000000000001d000000000000
*001e000000000000001f0000000000000020000000000000002100000000000000220000000000
*000023000000000000002400000000000000250000000000000026000000000000002700000000
*000000280000000000000029000000000000002a2b000000000000000300000000000000020000
*000000000000000000000000000100000000000000060000000000000005000000000000000400
*000000000000070000000000000008000000000000000e000000000000000d0000000000000009
*000000000000000a000000000000000b000000000000000c000000000000001400000000000000
*130000000000000015000000000000001600000000000000170000000000000018000000000000
*002200000000000000230000000000000019000000000000001a000000000000001b0000000000
*00000f000000000000001000000000000000110000000000000012000000000000002400000000
*0000002500000000000000270000000000000026000000000000001c000000000000001d000000
*000000001f000000000000001e0000000000000020000000000000002100000000000000280000
*000000000029000000000000002a00000000000000360000000000000000000000000000000103
*000000000000000700000000000000000000000000000001010000000000000007000000000000
*000000000000000000010300000000000000080000000000000000000000000000000103000000
*00000000090000000000000000000000000000000100000000000000000a000000000000000000
*0000000000000100000000000000000b0000000000000000000000000000000100000000000000
*000c0000000000000000000000000000000100000000000000000d000000000000000000000000
*0000000100000000000000000e0000000000000000000000000000000100000000000000000f00
*000000000000000000000000000001000000000000000010000000000000000000000000000000
*010000000000000000110000000000000000000000000000000100000000000000001200000000
*000000000000000000000001000000000000000013000000000000000000000000000000010000
*000000000000140000000000000000000000000000000100000000000000001500000000000000
*000000000000000001000000000000000016000000000000000000000000000000010000000000
*000000170000000000000000000000000000000100000000000000001800000000000000000000
*000000000001000000000000000019000000000000000000000000000000010000000000000000
*1a0000000000000000000000000000000100000000000000001b00000000000000000000000000
*00000100000000000000001c0000000000000000000000000000000100000000000000001d0000
*000000000000000000000000000100000000000000001e00000000000000000000000000000001
*00000000000000001f000000000000000000000000000000010000000000000000200000000000
*000000000000000000000100000000000000002100000000000000000000000000000001000000
*000000000022000000000000000000000000000000010000000000000000230000000000000000
*000000000000000100000000000000002400000000000000000000000000000001000000000000
*000025000000000000000000000000000000010000000000000000260000000000000000000000
*000000000100000000000000002700000000000000000000000000000001000000000000000028
*000000000000000000000000000000010000000000000000290000000000000000000000000000
*000100000000000000002a0000000000000000000000000000000100000000000000002b000000
*0000000000000000000000000100000000000000002c0000000000000000000000000000000100
*000000000000002d0000000000000000000000000000000100000000000000002e000000000000
*0000000000000000000100000000000000002f0000000000000000000000000000000100000000
*000000003000000000000000000000000000000001000000000000000031000000000000000000
*000000000000010000000000000000320000000000000000000000000000000100000000000000
*003300000000000000000000000000000001000000000000000034000000000000000000000000
*000000010000000000000000350000000000000000000000000000000103000000000000003600
*000000000000020000000000000037000000000000000038000000000000000000000000000000
*010000000000000000390000000000000000000000000000000100000000000000003a00000000
*00000002000000000000000401000000000000003b000000000000000500000000000000060100
*0000000000003c000000000000003d0000000000000018756e626f7865642d636f6e7461696e65
*72732d302e302e300000000000000010446174612e5365742e556e626f78656400000000000000
*04626173650000000000000009446174612e4c697374000000000000000a446174612e4d617962
*6500000000000000086768632d7072696d00000000000000084748432e426f6f6c000000000000
*0005426f7865640000000000000002555300000000000000045553657400000000000000047369
*7a6500000000000000046e756c6c00000000000000025c5c00000000000000066d656d62657200
*000000000000096e6f744d656d6265720000000000000005656d70747900000000000000097369
*6e676c65746f6e0000000000000006696e73657274000000000000000664656c65746500000000
*00000010697350726f7065725375627365744f66000000000000000a69735375627365744f6600
*0000000000000766696e644d696e000000000000000766696e644d617800000000000000096465
*6c6574654d696e000000000000000964656c6574654d61780000000000000006756e696f6e7300
*00000000000005756e696f6e000000000000000a646966666572656e6365000000000000000c69
*6e74657273656374696f6e000000000000000666696c7465720000000000000009706172746974
*696f6e00000000000000036d6170000000000000000c6d61704d6f6e6f746f6e69630000000000
*000004666f6c640000000000000005656c656d730000000000000006746f4c6973740000000000
*000009746f4173634c697374000000000000000866726f6d4c697374000000000000000b66726f
*6d4173634c697374000000000000001366726f6d44697374696e63744173634c69737400000000
*0000000573706c6974000000000000000b73706c69744d656d626572000000000000000d64656c
*65746546696e644d696e000000000000000d64656c65746546696e644d61780000000000000007
*6d696e5669657700000000000000076d617856696577000000000000000873686f775472656500
*0000000000000c73686f775472656557697468000000000000000576616c696400000000000000
*04766965770000000000000005766965776b00000000000000077669657742696e000000000000
*0003746970000000000000000362696e000000000000000353657400000000000000084748432e
*4c6973740000000000000005666f6c646c0000000000000005666f6c6472000000000000000b73
*706c69744c6f6f6b757000000000000000074e6f7468696e67000000000000000454727565
addfile ./unboxed-containers-0.0.0.tar.gz
binary ./unboxed-containers-0.0.0.tar.gz
oldhex
*
newhex
*1f8b0800000000000003ed7d7b5fdb48b2e8fe7bf4297a98f91dac8930d84026c389b3187012cf
*12c86298d9bd8443842d401b59f2487230d9ccfdecb7aafaad873119cfdc573cbb41eaaeaeee7a
*74777575756b1a5f25b360b4364ce2dc0fe320cdd6369af0dffa5f96f7db80df0fdbdbf4177ec5
*bff4dc6ab59e3edd6e6d6eb45a7fd9686d6efdf0c35fd8f612db50fb9b66b99f42537e2f9e2271
*ff97fca675f23feceff78e06bd65d481fc78bab55527fff60fdb3f14e4bfb5dd02f9ff294cfcff
*5cfefbc9e43e0d6f6e73d618baacbdb1f123eb8deefc74c4fe360ef2dce94611a3fc8ca54116a4
*1f8351d3714e825198e5697835cdc324667e3c62d32c6061ccb2649a0e034ab90a633fbd67d749
*3ace3c7617e6b72c49e96f32cd9d71320aafc3a18f083ce6a7019b04e938ccf360c42669f2311c
*c1437eebe7f04f0048a228b90be31b068a3a0ab15086851c68e48ee330f87dcfec56652cb996cd
*1926a3808d41d44004aa39e1f4af928f9825184048188b933c1c061e4084198b001fa2312b8d47
*851641a5c3c80fc741daac6b09d4687043b604c81c4da175aa31a209aa498f6f8cc0a09bc404b1
*a364381d07d0c7a5c0d6411609e4a46cece7411afa51a6f82eb090c8a8b0418ca2f12808a93802
*c4fe38c0a6f533df1fb29f9238c8a0ed3a8f6441b52912638e31493368c03dbb0a5083809a8405
*f1085203541668d038c903c639053a3882967e540dbc866cce9b2cb9ceef5089847ab16c120c51
*bfa068885a97a266c55cc7b28cd371faba3f6083e397a7bf744f7a0c9edf9e1cffdc3fe81db0bd
*7fb2d3d73db67ffcf69f27fd57af4fd9ebe3c383dec980758f0e20f5e8f4a4bf77767a7c327056
*ba0328b94219dda37fb2de3fde9ef40603767cc2fa6fde1ef60119603fe91e9df67b038ff58ff6
*0fcf0efa47af3c0608d8d1f1a973d87fd33f05b0d3638f2a2d1763c72fd99bdec9fe6b78edeef5
*0ffba7ffa4fa5ef64f8fb0ae97c7274e97bded9e9cf6f7cf0ebb27ecedd9c9dbe3418f215907fd
*c1fe61b7ffa677d084daa146d6fbb97774ca06afbb87873695cef12f47bd136cba4922dbebb1c3
*7e77efb08715119107fd93defe2952a39ff68171d0bc43cf19bcededf7e10178d1035aba27fff4
*04ce41efef67000499eca0fba6fb0a486b3cc01110c9fed949ef0d3619d83038db1b9cf64fcf4e
*7becd5f1f101f179d03bf91926abc17fb1c3e30131eb6cd0f39c83ee69972a0614c029c886e7bd
*b3419f78d63f3aed9d9c9cbd3ded1f1fb920de5f802bd0c62e143d20e61e1f21a9a023bde3937f
*2252e401f1de63bfbcee41fa09f29338d545160c8063fba72618d4070c3c75348deca8f7eab0ff
*aa77b4dfc3dc63c4f24b7fd0734154fd0102f4a95a103ed4794624a388a0550e3d1a0aeb912059
*ff25eb1efcdcc7660b6010fda02fd48458b6ff5ab0bbe994c6ffdaf97f2f8887b7633ffdd0bccd
*7ee71cf3d0fcbfb1b55998ffb77f686f7d9dffff8c5f389e2469ce06f7591e8c9b2730312463c7
*4e3c8579a49fcbc47d1cb993a8d99b0d83094d268de0a31f4d6112711d09f4ebd48f60f485f1fc
*c0cffde620c8999fb1414d763fce0544bf1e41f38c6b2a829d390ed6c9c66cc63a6c32cd0779ca
*1a63f6e4095b612b2e7bf182e5d468dd3636731d987b87c121cea2632826303471f21ca52c0b7e
*650da02086acf67fb79e39ce180d850ecc9c34db44d0c21b06efe30f837cf40ae692adb6988618
*83496c67879d032117665a87e5fe079801592325c666ecc6a57cdd9215c014a4302b8321c18158
*3c1d5f413f5c010c049c07597e66beec992fe6731f5f1c91aa9b9eb1e76b9cdc15e8e63095c354
*8af521d3e56f857dc7064d9c50a95902a9d14e14c138c09631fb8725c7fe8435aea37002380450
*e6aac6ec2dd49a3d94ae6812e23cd3ad6920feb3264100ae120f65d15203edb635ce2440536273
*cd769e2dd4ce33836d857696b97656c736bb6567155ceb2fd41ad17714cefebcd670e08af6d8ad
*e9dbadf9df3d447dfdfd81bfdaf91f14653af9fd733ffe1e98ff3736b69f16e7ffd6e6d7f9ff4f
*f989f9f6c05ce10d20310ad4fc175cfbd3287f036f5f8782ffe77eb5fdbf9cd11cfa577ef40575
*3cd0ff5b3fb4b6ecfedf469fe0d7feff67fcd03bb3f31fff81464059e2ce47f80746841dca27bd
*70a27018c459c093f606079b3265ed3a8c821d48149e63c79fe6b7492a900ba762b729fc8a38b8
*f05a76aaf2d9f3e003feddbd01c0a8394cc62f1c10d4551885f93d2f11cc26411a924f2b726e93
*7130f16f44b36ef37cb2b3be0ea592d81f61e9f534f04741ea0c61297093a40205ae2d9cec3e4e
*265998f1a441105daf25b0b019879fd0be124c81e5419eb16986491fc3e08e4dfc3c0f52e1821b
*011e76ed8fa17541e68c826c9886b436da59124ae511dce1f65ad157abd87a350da3d15a7e3f09
*38a418caa9e7ae496932f6a2d36ab61d90dc55eaa7f76026f272a36012c4a36c8791e178e56701
*40b22df69fffc99eb3ad66dba374ad1f98bbd16ca35e70988de62629094927c94099c6c9681a05
*d98e23f96daee520f1e67648bc019b7687ad5dc7c91a1014af25d0d6c89f4c80396b922fb0e89b
*05c32968411428650526ae5d495705e043bd5a036132d37f5122702e7d621906392d24a6d9e2f9
*ad26bd2eca030e87cbd030e7303f4a88167188dca14be5cf97f4ffdaf11fdbb2a44d401c0f1fb7
*ffb7b5b9bdf175ffefcff8cd973fe8e21274e0f1f2df6e6d6c7e95ff9ff17b58fe622cfa1d4bc1
*b9f65f6b13045f94ff0f1bdbedaff6df9ff1fbf7dab7ecb07bf4eaacfbaac74ec16e78296c0e8f
*edbf7debb19fc132792b26188fbdf16fc2e16b3fbbf598508bd329d8179023605e4dc11cc9d8b7
*6bbf3988f998f6570697af5eef3f3079511128b3d49fb3b6c63ee33f6f6896e5b6d34ec53c0b20
*7a239c40d0c23237c2c9dc42b8c20fe10e7c3f668741f8af2046b036821d72a358d64886323644
*99bd945c3472116420cd5c5ed2327321fb2d2cd725c00e6e57c76b134a02fa1a68f829abd1b3cd
*4a4f199e39c9cc753883ba310baeafc3610855303217f53e31eea08395da14a083301e066062c5
*f7ec7a1a0f09846fef36aea6b45b4d3bbed40a4c77d9300265a14d592cbff2360da2e92858e1a5
*c4be3637815888c6f0d48fa27bc69d12d0d25db50fb0ebb1a079231bf28231e9b8286e0f34d0e5
*eada400fec26c0bbc07b0aad2fb360152156b18168328e18a4ae67e1a7005e231f38325a97bbfb
*791a2033921491f11728bf7e954c630c6710f0eb2e56cb970957987cbf23ea67b8b13ec883c92d
*a85277e463e0c4bb95f59e920f4a6387f902132e1dfc61befe6ec5a3d23f25d334f623acf3a590
*0fbcbd4d939bd41f8f117ab3b1e5ee6c6f6fae6d3f6d7bec789827e8e76dfdf8e326c7f05c2c9d
*eeeeee9ad95d98654d3f6c8ec3bc198ca6ebffd3c716adefedadbf689a0dfea9c98ec2003af54d
*10e5b47ae935df34d949003526d188630632f63893b2c04f87b79a3d45ee486a06fdee1bf62f4d
*12f48fc9949cdeed46cbc5c108d1b47efc6153b6e608630554cc48419020bef528b886e5428852
*5c672822000b381035c5472cd7619a0119e90d054c50688a1fddf9f7181f115c0769cac314b06c
*16603086873e76e8a83e56c8c21891ac4e63a87415831856431808d27cb5c9d83152314db3c063
*aa2914d402034812471406915cf1301bc472877a1090fa42770f716988afe1473f0ab02b427712
*c4c5590e2b5ceab0b437304df970210b4b16bda1b01ba080622756647f58418a3084c71a41882e
*58c62763a865c8c70f0c3259f2200d03bf1803cabd9939e6680b047c4fdb56d84cc71e89cd7d19
*82449ea042b1deafde713af206b7c99d77025cf2b01a0f273b1c352d3430af0d0a09b44fd4e0bb
*454eb935c713dcbe4bc4668b2ed678f7ae0afcefd38016dc26683c8da242120e2f8524be27532c
*9ae46faad2c36c30053dca8faf4b19301c40932bb3cbcddd577b4d495cc0148c2779911254e628
*c84bb0bc07141247d0f3f2e0c1068c616c2df2823a97f853643ce8377452ec1ea546c03c083db6
*444bb9d697619497787a5d9538f1d33cace04e36815e579526c455aef38d3f294abc2ae54d0232
*4fe2705881e2258cb6c5466352456561fc6efd8d3f2b91188f20ab2ab504cbc5578616e935f02f
*2b6b30f24ae5c6fe0c8dd0626a18536aa5ca0a475739f37b861ba145458609a0a8447952012877
*56e72b0f0c09e928c049222aa3c8936e36ac415d9f83bb33607ae5551073dbc20e82abe9cd8d0e
*0c945833180b4f6102ae49fe050d363b0ba69cd0562e17a7a73450411fc2b863b7e108e7b406ef
*2f1e85577838c679a0be6e4d84076d50835544f499b61dea7b081301ffdb68365dd7caff254947
*56423fce71218193ddbf30ce12e730dc4f472608b853786dfe7d1a0e3fecdf06c30fcc2acf230e
*e2e9959741da42edc519ecdbf09a5d5ebe3aec0e5e1dff72f9ba3bf85beff0f0f2525739cb9b38
*f938df06310c514b5aeb8040f404b40c84bf39617c1dce22f6237bf70e74c8a135145b3f6ec44f
*c6ee7a1366df80adea3176b5e9e04c87e12f607933df43ed67becb3a2ff88cecb3b5f293336e21
*fa711bf717152e06a9e3f6f2383340073b9a6f96b1ce0dcf25318bcca501a2c75f8791f211c7ba
*68aba33d860148604aedfabb4d87bcfa9c17047e1a4e58a1377f666026335c3c9f1dbdedeeff0d
*17c6ec1baae21b9f7dd3e00c748d27aa301bc344a45778d0acccc1c5172e6fa036de53113f3541
*48c111e3c467d69be529ac24c8784f0340c2cd5b0ca205b5ff0428630ca1c6e8659f8f3fb4b604
*a96bd11671762713b068110fc1a2c90ce48ac870f2a087f194ccd74c61fc8028af105b83488687
*4a05c2a72bb7f06e60b9661f28366c883e7eaa7e06b250ac4616672c64114bb1e407f9a2005030
*90716d9083d30d1f518824942a1183863ce71b790f86b7614476b88f64aa26618d16b71adf6267
*e1eff22ffbd6b50a9429601609979a044017c2a2c2833781c42003d62c3008ae08b42b0651d0af
*5bd8ab71e1cbe3ceb012b52412c1e3a0c94d1e858432b1852e0d55caea08f66fd0eb2a573bdd66
*9e9841bbf1bf0ecb2a5ad2cfb857809666686262ed7f25389c43ecdaf7922432700ca813a096a9
*18a92415fb30135db25442e8a355e28a0bec412d9428d56aa3340cca194cf657dd17c79c400c46
*54c634cc91b847056964ddf23468dc1056b51d69f1e2fca62aa40e0ef5884842907445553450f5
*40ae3ab303cd16359e047410e112e73de03190759a4e0304195b2d1370d7ac411a89124035cca0
*07811e12bc0114b1f7829af7d421f59b09953a4bf3fc4133f9fa6a19c87e53335f94dcb058e9a6
*f21818bde3af8e8898ab9a060b0a433a2bc0b183df248698e045f6a1977e043dbff1ee92ddcb4e
*4e6301ba4170529b417a62afdf0e4f110a70d8cbc95732d95ebcf4feae04ed3c482bfaf64c7ad5
*c27361927509985c804ac4f81d538cc897a703d6a2751938b52aa8c1520d4d4d873fd2e8c23ba2
*1812787a07c71ec746b09f061892ecebf532c7a45f0d6ce628a301507370886a21eb6070a34a96
*c5c03e2dd769897d802bb3e5f351ab1955457e2dddab7cce0e00ee5f4b95637e84311cf772eb3d
*33cb90974b3ae56ec28f41cc2768722486397aced26012f968fea9534d318c6004d574b87f6211
*5516821005e6f5df86212c17fa71f669b18ecc3bb1b05621ab81fdd935faeeab02404420a99ef5
*79c746ed803a673432d36e8c3898d3ff1f3dd63f3aec1ff598a61b0c57455ef199b6664a9223cd
*084c29904b51c88eafe81fc15151601e4751cfbf63efd88223e2b2187983961e1a87cb5b9890f3
*6dc95d4aaccfa4fde4e3a1b909067153657f658d3068a274e895c9fd1aea392ef480825f70e105
*1d8deda5d2598b65b8b86b9059086fcfb98198b55d8c816968ff2407754beb4c4d87200001761b
*00fd5e177e8f457761791f4519ea0c1d48dccd5abbcc288916ed6ed6de4522bf943c552e6fb15c
*13066fcf3b9cb2bc44d93f38309e8a31d2beb0e27f948d33f9eb7053c1022e825e6a604cb1612d
*5b4e0c18304503ec356ecd2059267cc4a2bc9896b21b5c16ea6edb88728f4a7b3739da8586ef93
*4ff64beb4c6fc2381cfb11ee07cdf0e18f9aa970d61ff3bad48847cb3c1aef84e7b46c06d0e241
*6597785d10d425f26a56077e09bcbf74498a122252b0b8a0120b3ddc4111c93bda5261b73e9eca
*2d12b15231b613ad9c9d75b4fab3b9b4427689d6a206bb4c135b86c7ff5297696a012455c055d4
*fab32a6a6d32aaa81533595e16b09cc76a256b4d5e95122b08981649697d01d1fb906839310167
*34384d60faf5b2685f561265b340115527429ba82ac94425497640136b0b54121529b250b0ae51
*5a11b5ac21e20c57cd4db6cc91017b082dc679bf9067f3f9fe7c63976fff66abacd361abe8018f
*56d596f02ae9e8ea2eccba1caa724e38e752b8300422a0737497756867271ae46938cc454bb8ee
*43766932b55a9bdf25d44e4fee67a3b79e6e11a08d6fec3bb8efac768fb53b088dac201ec2b09e
*e30647b32664629a0562f1a8e216d66f83d14db0466d580753fe2649c10c1f1386d73a8b513848
*6a96c403a657e10db6ea3dc1bc475f27ccf7412e19f858e7332f54e89830aba3dab5452e4cddc5
*3914725b3a97ac00a2ea8ca3230712189dae7c7c058f04e838065c555b1bd43ada360259905bb3
*22690e45067e3ed3f37f2b8828ff882c03c1108499e0bfb761b17475b7eeb07f25e4ac143b3eaf
*728103c62a9174980b84d0cfebaaaab642da7653654d5548684881fe303693c0fe728be033d918
*0d2e9310dcb26328afa39718cb1b940ef43ef532309616021abfd9e96914acedb47e5ceab3466f
*155ca050335a455bbd1aa6155de3237ba451b26810710d85d9c080a9eb9c3608e98ee8a3c88c05
*ba2881fd713d94d057180572c2d3400ff78c92a7f6f19db054535edbc3c718dc25fa915d6c56d1
*e75caad502961dacdce35cbee2fe33ba5cdf8c005906ce52a7a38e65d462753d04ee19d1663845
*a6413685e514101bc8eb6c8c89d86359620697a9f0c707ee592018dae9ebee012bbbb8abc8efce
*a173ffb7c99d4023f71050d30194efd748cef34d9adedf0bb0bd5f35e8251a389772554970e2d8
*e8047a05e8d3a0a9dd605df67ed034b9f39e99d97b9e88dab47e16c47c045d19d24a75676cb7a1
*cec29f772f3cfdb277e1a237c094d323072cab6c4d6fb6602ab6564a30796bd7ea7f598bcd5a2c
*6ab1b485336121b3cd666d16b559da0664d87142f2a5bce860568e061c67205e5c51b91a3f4c92
*0fd3096281a153333c8fec29d76a22a86ad43681d339c03739344e00e30e1bfaeab8474179e97e
*c2fdd419d224862fa83d971ebaa324bf457d855c3efea8cc00b7466a09936e061ad8cdf6cd270d
*586d87d6cc252e6d719787220fd8cf8943de0b725a163df4a3a69be42c6d74e3416bb415ada3d2
*9681db18e5708c93f544c6ca80826e33b024b26bbee50f4b8b11deee16a0bb80e0eba755747555
*ce9fb2e8e401a7b0e22fee96cda46fd89225480754dd4e3304259dc3dc016c831912b3a0149008
*c1d01c7a2bd9af362f40751263e195c4c282aa65a223a293151f49ae73ca8d6069592b028cdd0f
*308c19a69355ea23ab4d4729c9e34423f68f3db18d6ca09927a606c8c983ffbb8b080b7b7629c8
*ad11b5bc08c7baf2062765a72d2f95d9f64627ef9cd5e26f08f9d328eb7129f341b5ac030d914d
*a0b29c0deb2eed0c0b7a36fdc99242ad8dfd9bf87be522228ffaead89fac32983ac8672ef535b9
*a2532a783681f918c783e3f0eef52eddcfe70f6f4dafe06eb64b1a46fb75f96ac6eec034b9a5bb
*0bc9b120c2f1c94b6e5b3de2e23f5acfe35585d76401a0bd93a13db4db9879f7eeaec77667ecdd
*7a87dda3d7f91ab7883af0e77e17af689a18ca0bff5e0915e67fae8426afbd28c60ad1d31595bf
*465f8a340d9a14d0d7e4e94d19066af76eb4f184a141dc5311b9c446f2f8289e7ab4d1020cf990
*f1007f8ae8474692a7431424f6ad9ff23eabae774410dca219628c62306aaef36e3c0ed7280c2b
*8aee3d7617b05bff63b023f9ff828689f3197b0edcea00f1c8aee7c82d20608677084530fcdcf3
*870b566570f11f96356993a471ce64ba20b70323baec8ab885513d56495b400b88c4acd4b6793e
*e91589d8de6c5cd3ee6aa154544e82f1da4ab9d46ec6e5cdc0186cbd0c5cc51937c190b28fe2b2
*4debc08a985d70e53e8dc5a59778440997a530f56241c3c7cb07f52b1d3d77550ca1a312d7ec13
*4a5bdc8c466fc5192ec9f235aa8480784de9e3aa5a5bd3f8ebd69d1202c50cff28f8d48535a6c2
*70092928cd4f8ea34166d05c32b967d50a0ed0e6fb670ca19ba9103aec216618dedc8630da5e17
*7bea3c6f79c719a195d4ad3efa69c8a32597eac83647b59266351d0a8eafde2638f72f44f64c77
*fe25aed611df1f432b3f2290abd90e2635edc2974c683a82a45ae225c944bd88cd070618ba2020
*ac008ada164027ce86181c0eb3665563640d73da2341a4be36765c767ee154cefe3a082950a11b
*e56ad5cc58b947616e4f300d6b6f4e60ac8e8c22d4b621a672dea9589a258680ede1751f647ed0
*29434e9ee4ee3a1ebd34189dd1f9bb2bbc2439a64bac23307dfc942eefc0b8578719270bc1923c
*9fc1d48901060a0be6885b538c931c6c4653a662cb6c5951e7962a11a996184b8a5424a9d2da68
*84f1046c155ec020ce2ddb21268d5a2f7abfd6ab85e608dfbb2a1f6a41972c1df50234b3ccf408
*426bcfcdbc0b26deb2e2fe142d8dcec9b57b2126c5c4388b438273183391ad3a7c3220e704bc9a
*0144e717f4077b97bed6f37c762113673ab531db99cd689a53c85741a36733c7ac6f15260c40da
*61e79f2e8ae988215be52b89cfec53a73393f3540150b6f933bf41e62ecc30eefad38e5d310039
*8fd613e8f92321152b06fcd1ca9351cf0773f7212d2a2a8131b6556851115a6813ddedc303b861
*9518c437a005a0423c5b8f38d0f0964b875cc5d9835c4ca759c2bbf61ddd41ce6e03b071b3893f
*0cec63b5fef0034f6e4a74b0dc144724a4732b6571a7b38dc3396fd4d534bb0dd16ec361a829ee
*55e2cd651ba46fa87be4c4907295d9db2abb42350bbfc6acb5336befcc3677665b3bb36dd2c5da
*5362427d87b8af1a83adb5251fda56cc22f0ca7cdd74edf76d789fcdea2ab9348e1d54498e13b9
*bd62511c4b8af12ede3865df899c06fd39c1a4a1cbe248b1aaf0d3a22efda05007f0bf1f851fdf
*b3760d4c4a306b080caae2e8b641d5d0bc08fbe87de62a8de3edda63686262c3d87d6696e1212c
*6210e93cc88d130035f821d08231fa29635c4b8498b86dfc295bde6c0923e1901b2459d926c218
*5d7cf43f515c0d2eeac5c50d50d21fe6fcca862c404310e74fb1c4bff63374dd8d83fc36196588
*4e6e2ba01b8c4fcb880096ab3c407708d5fb612c8e0c65b43d8923c29abbb4836df6090d355fc1
*43e9c444dec2a99b0705a858bf4e21d64f1b5c025cbfb797e50982b6a0c1b5241ecc39a6824f15
*0747a4d46444a77c3788cf70a8305edbe8105d5aac2cdfacfafdbfb202206a413c3d96a8c7e3b0
*d95b98e7d079880b624c780bd4c38437612f586bc365dff1d34f9081e62ecca42bcade5b614d8e
*02b92326ac25aa059d265d06ae326710b5ad1d945260d0b7e1f528a83ef5ca1806eb13eb3ab81b
*11c034fb1d990cc0347812b75af747e843541c5b21bf54307bab2c69e2dafbebb13f79af303a02
*3be6891accd7037e5fadf32dfa6c05a81422872c4a90bde33e68d1a8866e8f97b9a249c2a5dc98
*655e4e698496f1013f0df2690a180d4b1fa0967ed2f72ce7d7fec8bb7784e75fd49e4dafd6523f
*be09d4de7292863761eca3af1cc7db261bd02eb32e8d97d3fba2478719cceaea561f3fd317a0e4
*c8161f3f30638042fe0d9ec2c0c5c5751887b9381209464e57a339e751016428434f98a2451410
*ebb08673399610087d58e6dc8e25c0f800983fbbd47eb1fe02ab9f7f788687bbe1c75dc80529eb
*c281f8f0f4a2d6fc210729c74db0af4e2ff8197175aa134d7ce9a84e123afa786e4655509bf027
*dac5eba7bb52a2489ef73dff70d1a47ad807dda2733312e34bd04063894db48703491205fd4e48
*113263823d8f2e38bde98540af51d732080c7e2a07d0cfa17a4280c53e04f7b41a406498f902db
*a61a23365d55936867370a41c378fe0579c269072a15ed9401fb80a7b631777e26b655c5e933d2
*e465cd86cbea995c6d41fbb8c2e21b74903bff9e18073d938b836ff04dd32052c798604d04e585
*b0af82fc2e08389dd4954110c905da4ee7b7e105f7d171e68963ecba370012d51fb03808cbd461
*babc4a60df8d925d12eaee6db8bb2c5612034aeedfc7064c39e5eebf5be91a76d4c248f67ab538
*e2c77e641ef5f2d2c2899ffc295ea47149eba25213e45e634d76ca1b6dc65d2e3d80590f3f33d4
*af6bbd032f34e7058e593c7e08d5e23cb7479b9a52cfcba596d1e0df1cd5dcf91a51b3df2f46d9
*87055f167b55109c79e88b0bdeca9559fcb057aadba077883880a3d8f945541d7e39551682c822
*456e43db417e3a3a815315e936fc11fb5e03baec6819c86acedd0433301de9b36d185bcf031880
*6a588eeebafca8d7c40f533c1e16e42d0ffe69bbbbe2fe3498a8763175978c17b05d82acb48b86
*00bb60e5653444c308391303246222440f95bd21677aaa8a371d3e432f70feb1184fc10b96ce50
*dc1715a5ead02357171918658444918ae06913482695b9a7e82cd7d2a5ea72f409c186288467bf
*30dfd2ae46e4a5b2dd5cbd54b447c5c194b7414a9f8404eaa5246b2d030a63093f26391d461021
*07259340dab9e210b5618d3c82fd18e962cbc03aadce79e38dbdb4143fc7d006e60c4108ff1e4c
*5c71789ffb2479c01f16fd427654b281bb2c17e08568e72378f1866828a8a422b74e31e76a6641
*356b8311b59a72900a652d686b3daab2e62a58894a293099abf74a8f050e439b4530a2d0ea3f78
*4927bf8e40229547a6f879de3cd40b3c6e0bc30202a674e3fe12dcbcc960edc67119f3bdb0ec9f
*d30a479af56a35204c7bdad8f0c4a745a1bcb98640b1d24560c2a1cd37c7fa629b857f70156ca2
*2c171f76e5d7da9f9bb11bb43a3895b7c41aade65ef573ede3144b1b79652eef06c32485a57c4e
*7e384fd029987695e0ee4f54b7963069507741d18e114c2d13c429639b685f4536c738af462d3a
*093268ac9808642ee2c616356beaee9aedb4ba295ff9f9996e12e0aac1a2c401363e5282271c87
*b7b84ee0715aa03709eee2c4813eea4744282341f25411512280e1f2f2e5344516e0492c0a31c2
*ed512529182af0e6046a38b71de572b3c9f65004095d4826ae757a48130b69e945a5e22122a97a
*42a7e4a97cb5007ec5d7cb86b6e6c90d4d234d9bff02a486c95245e475138bab8a880ed44d7a83
*09e6729cdfae65b39edc1eb8bdbcc3c4ad58a99f510578ffef6a06960df0d3939b538de71dd772
*c3882d2a4002bdaff1bc98c9850ffd99374f3047d47d413b5274111e6dcbb106fa6cf4299a0b97
*fc97fa43cc606aa1aec6c1106c25bccb37945d1f7d4c893d6e853185ac601801ebd30af4d729fa
*89a6318f52f5b1d7df73d47d0a63c30856407485ab543a650428f1642fc32ffadedddef316a0bd
*27b71d68488049e71bf63249f3690c461886c5858467940419a2bc9da6c4509cd3d85598f32386
*a8d041fa119af2f1ff3c87c24fd86397d428eafdd517ca542e57e41aaa707099a9508d37949f3a
*7aed513a8c2500fd19e62bc0c20906186f0e7166be67e93d5450ce3d619f58f489a59f70befe8c
*b784e6fef7bc98b876e1c43c53fc4947f34231c0f8a950ec44163b348b510b644950c894d7a677
*d7cd1f051e8a098aefb06b9ed05e96229c07644fb879c726d0c3e33c24a5c52bdde32cfc18987d
*555e4203453d8df241b13926a773bd3ce057ee69fbcbb0d528facebcf4c444a1ac2cdac135f67b
*ede1d23135e14baa6d98088c05fa03d52ecda1a207eb1d1edb6f8cd3cb1a0d781d738ed81b9d4e
*9c2f28f539ba2d4036b67498174fdd8bccaabe059c0589ce6afa96ec79f57dcbec2332f81d0a01
*befbfa9e659df19fc972e96c6ebfeafc01b7ec68136187b09b33b1320d1c56691c7c9919b08c86
*ffe650b317d31a022d290daa8ca0bd74e82c9239a85b240fdad18ed80bfe90cab5eed88b56b180
*7535335f9d49f98e59b44a1db72c5485242d2281f26901094bcd60a5f20553236e0454decfa1e2
*deed2a3082a1833e31f56a5c588dafb086b34b5432bca1d7c03634d91773c7bc8a091411ce3c35
*c21a0e40c6d48a7656c1780cc1a2b52c641a9d6b558fd678d1a7fe6145c6e52816a61db2e63112
*4bec1b56b095e27f637d97ca8ac76a9c3995322a5e375225237f66c988bf1a97877319d9051e21
*227f8159a9c272e1128a1e945049ab7de96db025049a6dcda73552c18b6baaa4527103cf425239
*09f2143fc89159c235b68488d7be905746579151ccde64128c388caf22003dfa8685707facd249
*2a58d4d142d5bc05515cc85e2d24ee506aa88b6e5d055e1aa044450a002384c939d3b03bc46c01
*c205fffe60c2f9fdf40b132ec0eb0917009584a38db644f753d1bd215ecd9992e63bbe2f3ec3d9
*f2541ce5b29c5099dadd97fe846bf4868f8221cc9e99b85fc661ea0c988e131b37710b254d782c
*a6cb8300c8aeb890e7d1a418f9c74ec06a36ae7930774c65ab0c935191414b42f21d6593241e65
*fa16c8f33b0a15a68fedac8ac5b68101cfdecb0faee4b8b43c6fad8be655a2fbee9d1f4d6efdef
*0c14805d7f1e472ee89bbc46111fc44d0f8197b3d240001a14f9505a6c2f6c367fd8dad62b6fb0
*416efc1496d981fef68d5158b29607b98b0fd9082784f24168031bd94fde1bc57e7a538cc690ea
*a93c661cc6f821ab2cbc8a50c45ca046d5b781ff31e43710f2cd6a714c49d952229c90dc032350
*f1748c51dd0606b90fe0c36a6a8a0e013c1a488b034597115722d65a81c9bb3c2913cb9d115a7c
*8121bf903e1e6152016449a14a4559c5e8983c1c46da7bc38f00c0cb5a418e45e96d359f6e3d15
*877815aba18e767381c25cf4e5c2ade6f6e696f0c6aeb12e8b923b8cab10b8220a55a2804ef27c
*ac22a3028ccf5eb56fc56f8ae2b7e1cdad517e22b72868872c0dd4c7a788fa35b6a73e4685ae19
*f5b9208c6411df52a5ab28c8e1acbf5cc5e3e68630045018039d8ed48e256ced47bc367be2e7b7
*090cf0e1108680bb042fc6c0393de34eb76e442e4ffc22d9f0360987783c1a86d55182a29ae095
*f6a1f80e0c272d8a00dbf4e61687031eb2ca3d93a8e54832315b118ee753e5021e3a40cefd5c8c
*cb429e5a85b10c3fcee3635c07df1544571675ecd838fd4ad099eae58e50adad923b8b0267c98d
*0bcdba0b47321404874de55945252614810840e75f4d4b139cfb44936920062cc4b4353284301a
*df4fc324a3c81c428007027e9dca6b82e4718950de009ccdf74faa2153fa277d315ea033124807
*d5cb729722aea104cc07488feed5a22f83a288fead7a359e16088251306a6aa13938a46866096a
*b56b92d7ac4a161d92b4c5215d921e235762d51d48e89b204fb3ab696991a7f43569aa7f870b43
*31fb4123aef05675a156197d21ef3620df3c9e88a0f03a79afb1089ad67b74c9341da217682486
*eedb40392d87b4fabc42cfe70dbfd89dbef686e5b308bf3480128fadee2b6a0f738504559cb381
*94d7e8139c1e1826f0546983171422fc55fb8377d65c4ca53e859b3a1f10993adca12a77d8721d
*27d4453cce7c7e37314f028b68cbe1c91dd029475a1b8f706e5a068f5aff1eb2274cb9315ad82d
*c4016348fb4701f604af5831dd25b8de46b5e50e170bab0579a2214f0cc8397ec642fd3a285b7a
*5af8da5d259dc8a45425fd83750a143e61ade26dd0061fe7dd036d3ecb238d9c1e4732e0119230
*79d690476dd7e84b161f3d86a6164c03dfbaaee1a4b867cf7997fc9e53794fc4e110c2d17ce41e
*ad396c45c6f2a1c62ee148b93c9a8013b9235ed37c431f30c52220d204201ad198b97aa109b04b
*38920ff5043c448fe2640b8f33e0b540f0bf4d3ee349b7775b1e426989cb8d0142d65d66de0335
*96ea3e41bc741f5175dd78ef9baa1e01d08b23a4f9e5742b7d907417c439db848576dbc3f6a03c
*f32dbb599b2596a8e3545022df526dfc3dfc512297fcf9c236b60b6d6ca9362e6b4989ebc3c2f7
*54d42c9c952e02c1696349930611f4989940efe3c8e1b6217ca14fa42ff4099e18e430c6a96e2a
*4903e092e340c2a57d97ca3c7f8d813ffa3206df559a777e45272c7d0b9aae4ec8b4ef6c662ca9
*f581587977823ef78aaeb14fab78b697ee5e202febaf98d228605f653374612cef1e4df589bb65
*202c1caea673415251c501046933aab3723c4651c66393e1cf3706c5e10a0c5d0c466071821d8f
*461cff8a56d3915fdb3342b38c23495a61f9c1220dcea5637eab8f9c4822e82c23de166f763003
*28ad92d828becc18fb935dbee10f153c4c73ff9aed6261bccac661bbd8825d0f1abc2ec85cb739
*62cc67c2df63c4b01304a20444d816ba1e671551ae7ae46ec3cf93f1568a6f3bea528e439f1e7b
*81e63670ea3066dfd5f2e6bbca93e7e7ad6673fb02d06cc1ff9facadb5e1cf67864f2df5b4c9b3
*b6e1cf42f5d13f0b54f7d9aaf273b1e6cf56033e2fde084eef22ad10083f1b0d326a64660b197f
*63a285f8e126abd24a3dc6c04ada78147f6bf5baa08e395941f42eec9e06e92682be56503024c1
*fa7265c5291e88d7c00a50c13a3a6f6e93cf790b2f8acf060978eecf2954155df929ac46e9df39
*bb10e2e36c54780f6179b9a67598f0f3bb7865febe92fd6a38ae6a71e3852d762d50092bd41259
*97a8495c9ac8067aa10035a7d3e5ef3d728b8b949415c2e110c32fe40020af066f511964d106cf
*c51ed5622f90c09b1c19442051e23d325485746e6175a95511adba8fd68f1af5284a6eae7eb03a
*05598e7e2c86aac9e6896eaee434fb94ac84a8e6ebc363907295104acc35801081f0ab442d28b3
*07b442cd343cd12bfd3a264b1ae2eb7e8d3420df33afd9ad91b43dca8523a1a1c47868a0d530ad
*794a2e5adda85da6690725d4177e2f9548eb1ad900833e124d2db4153f15ea38f4c150fc822267
*0abdea5f87adc01c0243b190a2c734e70b64c867c714384701d3d3ca0e9165cb0df398ca5b9aa9
*d9cda457f40fb9810bbdbee1b5d886c8835484f133be8e9aa6642a9167b2e9f028ecf9b716d327
*8444b8b66344bcc12b5e5f207dbdf44260fc7203c791390ba057487805185f0f6fd6c107ebc5fe
*4a9084172727e5ad1ed68058b8f7c4dc93a7d0fd042f00c4db18f0a81f3d19581bcf6738341889
*8d179042c7f634ce4b393c2a97e2a87a3b9748d65c7c28c2e052b5b2b8b02437e3e7cf2ae3b9e9
*28847c68b0863472221729b48731f953ede2f4ca372bb28e13a9855d4fa5a910647ca5019894f4
*8e0791f9ce347f2f7c3241032e2acfec93661541eaca224f3da6ee9c1b70e8d7a056c5fc30c7d8
*c5c1327e327ec22feef844431a65659fe6a2b92c264039b93b5f501a42b741df635d9a03457cab
*7c19e87e73702b491abae7fd38d7c6097ad555ee8c0fa8e6556598d7c2a3821206570ced8d0bca
*685b199b1b5efbc766b3253237ed52de96f7d47bf6a3d7de6c6f7adb9bded6263c6e79dbde0f3f
*7aadb607195bf0cf336f0bb2f15f807f06099b17cbfc2aacfcd6fbf202bd9d5ff91e091ecbe103
*01bdc260771ddec854f31e154aefe0d57ff02014e9df22fd8d3fa3e1bfc3b63736449ea7f35ee2
*5c4b79c54cf9edf10e7bc77d81a3f0238b591b869a4db700db8399fb5ec2fae94d26fd36f26a13
*2888bd913d79c2ced9eabbab55e8409778d945c6e4a99adf9ca5fabdbae955084bfb14dde5819f
*25b17f656e2c2df353eda5eb7fe2e958cc69aa15e52b607c95c5f75160028124f25b6c6064ca87
*e0debe299a1f39e539c8ead6060acd91858cebf274fd6273c5fef30aef28915143b2389f2863b2
*03639c1b3664bd1d15394607963f23e88b0e425767dbdb0bb8a9f06f06b020ece16d92e0181c25
*de6de8d68c94ffc5c61670cbdbdca887e5c1a091374e69501e773a8dd6ce0e10ea76b068bbae64
*e14725e51781a064db6b3da6e4a62ed97a4449835354676d6b814ee28921ac46b8869723c99bc7
*c6517dd9d42adb089fb4c84ed165d33965c50534e4996ee409e956e8aa939915bfdf30d86769fd
*f86775287075792eecf4e78291cbbb8cc797de1e0e98744a48dc296ddc2d4c1e69fe49d2fc5e63
*ba76f887d3523c30a97bf677ec1df53834c7e1378cfc2c0baf6130d0e390cb56e4cb8ab8f24983
*69ab6803e02834b016e805f65869dde5640762210a0f9953a8b561177aba0585c6c1289c8ee794
*22280a699140c60a80df0e9e3b8a3dd01da5a5a058eb6bce8a61c9afe6ad2cac582c39ae20cee2
*f077e057a5cb153838d75ef2572b53959102966ba1e55d7c40db969ef88ab5f85af6b236b4882c
*5e83b1334fc6b99935e3e6b9ba45577c765c6e2cf3ef4f0b26f176aa6e25502a6697603e2cc24f
*59f50796dbf51ca86f4057441254552a0a7c104b0e0c876e8cd5bd422ea9ec48c298d5d2e57ba2
*6e8e643e8d26cc033452b7118456d6bdc4bd531e48b754fdf9491cfe2bb08119b9b3b90c20fac5
*ed07a9792f048f3f0b63c91c7dc8586ac11b79fea9ba729ebda4dad579ae656e2dd2170397290d
*42a854d3d6499d57cf91966449656e5be60a9e18dfaa9422a14afaf3befaaec71713561ea71028
*0b1fb7efd89778ebd2dd2c4b86dcc9f0403c51b9665e56868298b5b71469140382d58b4f7a9a14
*53648a46b79f8cc7f35a52a89dc073f105a98e8559d787f5b75c3903e1a7ee962abfe2e70c5da3
*226b3daf1e34110403abfa7beef135ae2635d19a3716bac6db7de672bb116faec33b6033fcda5c
*a341cfefded1a6c21595e14f042f47f27ca94c287c21cd60030aee012e20483513ec0fb83d8e0d
*48b1e08542e3e2d590c80e2cb3c429813e82b0cc21e8983b6c4d4bb8211771db1eac565dba1133
*36075fbafbf47ca3d98c69d17621c7def977ddf3fae4b5de15d231eff06e68d6221f3bea831296
*6c5cee7d88833bba3d642f99e1711c282e9fd4370e1bbd5f3d2095d60a1e5e5eeaed7107b0ab1d
*01b0a8688882e68db714ac4e4383ce1535e096dc67fe887e4b8c093a3b7adbddff1b8603b16fc8
*19a30b7dd3b0b154a4704d47bfa8c2dfc18d3f9dde50b565b03e179f45315e1524d822ecd24423
*bea1c5f32ed16aa942f5a184080134e8a5066d7ccb42f5811402cfa92259275f61d0d71f65714a
*a2f5886ed8864e345b44d765d3144ff9b46b6932053dd72a03afe5a11007c712e7fead9f564a92
*323af487cb109f6a45584ca4d24276f8ec5a2f5a56127d5184b2b28524a89194055881a8467e12
*7201f1890a0de989c29add06618b880187dd2a29607a07ffe532808785458045bf510b45d77cd6
*8c16988bec17f52cc47d85a2ccfc329a1ade0bc0b9ac27f55795995d425553e8105c58bc88212b
*0eae45a279b0a0a4023c5d54232dcaebc82725357c798ce4088d9618bebac5774b8ab2b60a49ca
*ba1795a6465529d10a74f55295c00b742a5db32d2b81c2929741ed82327b5627b067bc96674a54
*cf1e23a76786509eb9d68b259e6735b279f618c13c9b239522a27a913c5b5c1ecf4ac2785694c4
*b3c789a1f5b44e0e90d3e17f95245a4f1f230a40a0d9df7aeada6f9634781d15e2e0352e2a0f89
*a652202554f512e1a08b8984eab46542c52da128fa1694ca66bb4e2a9b6d5ec7665b4965b3fd18
*a900022d87cdb66bbf5952e175544885d7b8a854249a4aa99450d54b85832e2615aad3960a15b7
*a4a2e85b502a4fb7eaa402391dfe5749e5e9d663a40208b41cd0e76dbd5952e175544885d7b8a8
*54249a4aa99450d54b85832e2615aad3960a15b7a4a2e85b442abf24e9a87a26e1391dfe974b85
*1e17960a4720e4402faefda6b9afea284a45d5b890540c3465a954a1aa918a025d402ab24e432a
*b2b866be49dfa252a999584456473c68c13c626e11380c6118b38b78b585533dbfe86a17164ffd
*0c53896c8e80169863b438f48ca2a5a6271e25a3474d3358a0669e11591df1a085f488a946e030
*a4624c36e2d51652f574a3ab5d5848f5134e25b239425a78ca51d516045798742c32171552cdb4
*23b23ae2410be911338fc06148c5987bc4ab2da4ead94757bbb090eae79f4a647384b4f00ca4aa
*2d08a9300759642e22a4037ef0bf4a4822ab231eb890f8f3c24212388454f89b5b78d5b2d01515
*85a4ab5d484826a2b2902a91d50849c32e202455ad212485408bc222731121bd8c12bfdaa5c373
*3afc2f97103d2e2c208e4008845e5cfb4d0b41d551148eaa7121d91868caa2a94255231905ba80
*60649d865c6471cd7c93be3aa9fce5ebefebefebefeb6f49bfff05ff5e250800da0000
}
