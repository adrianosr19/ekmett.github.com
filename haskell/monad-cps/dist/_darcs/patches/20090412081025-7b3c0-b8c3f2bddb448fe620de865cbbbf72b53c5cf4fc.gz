[documentation initialized
ekmett@gmail.com**20090412081025
 Ignore-this: 9792ccc4cdad14caa022a2977bce22df
] {
adddir ./doc
adddir ./doc/html
adddir ./doc/html/monad-cps
addfile ./doc/html/monad-cps/Control-Monad-CPS-Codensity.html
hunk ./doc/html/monad-cps/Control-Monad-CPS-Codensity.html 1
+<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd">
+<!--Rendered using the Haskell Html Library v0.2-->
+<HTML
+><HEAD
+><META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=UTF-8"
+><TITLE
+>Control.Monad.CPS.Codensity</TITLE
+><LINK HREF="haddock.css" REL="stylesheet" TYPE="text/css"
+><SCRIPT SRC="haddock-util.js" TYPE="text/javascript"
+></SCRIPT
+></HEAD
+><BODY
+><TABLE CLASS="vanilla" CELLSPACING="0" CELLPADDING="0"
+><TR
+><TD CLASS="topbar"
+><TABLE CLASS="vanilla" CELLSPACING="0" CELLPADDING="0"
+><TR
+><TD
+><IMG SRC="haskell_icon.gif" WIDTH="16" HEIGHT="16" ALT=" "
+></TD
+><TD CLASS="title"
+>monad-cps-0.0.2: CPS implementations of common monads.</TD
+><TD CLASS="topbut"
+><A HREF="src/Control-Monad-CPS-Codensity.html"
+>Source code</A
+></TD
+><TD CLASS="topbut"
+><A HREF="index.html"
+>Contents</A
+></TD
+><TD CLASS="topbut"
+><A HREF="doc-index.html"
+>Index</A
+></TD
+></TR
+></TABLE
+></TD
+></TR
+><TR
+><TD CLASS="modulebar"
+><TABLE CLASS="vanilla" CELLSPACING="0" CELLPADDING="0"
+><TR
+><TD
+><FONT SIZE="6"
+>Control.Monad.CPS.Codensity</FONT
+></TD
+></TR
+></TABLE
+></TD
+></TR
+><TR
+><TD CLASS="s15"
+></TD
+></TR
+><TR
+><TD CLASS="s15"
+></TD
+></TR
+><TR
+><TD CLASS="s15"
+></TD
+></TR
+><TR
+><TD CLASS="section1"
+>Documentation</TD
+></TR
+><TR
+><TD CLASS="s15"
+></TD
+></TR
+><TR
+><TD CLASS="topdecl"
+><TABLE CLASS="declbar"
+><TR
+><TD CLASS="declname"
+><SPAN CLASS="keyword"
+>newtype</SPAN
+>  <A NAME="t%3ACodensity"
+></A
+><B
+>Codensity</B
+> f a </TD
+><TD CLASS="declbut"
+><A HREF="src/Control-Monad-CPS-Codensity.html#Codensity"
+>Source</A
+></TD
+></TR
+></TABLE
+></TD
+></TR
+><TR
+><TD CLASS="body"
+><TABLE CLASS="vanilla" CELLSPACING="0" CELLPADDING="0"
+><TR
+><TD CLASS="section4"
+>Constructors</TD
+></TR
+><TR
+><TD CLASS="body"
+><TABLE CLASS="vanilla" CELLSPACING="5" CELLPADDING="0"
+><TR
+><TD CLASS="arg"
+><A NAME="v%3ACodensity"
+></A
+><B
+>Codensity</B
+></TD
+><TD CLASS="rdoc"
+></TD
+></TR
+><TR
+><TD CLASS="body" COLSPAN="2"
+><TABLE CLASS="vanilla" CELLSPACING="1" CELLPADDING="0"
+><TR
+><TD CLASS="arg"
+><A NAME="v%3AunCodensity"
+></A
+><B
+>unCodensity</B
+> :: <SPAN CLASS="keyword"
+>forall</SPAN
+> o.  (a -&gt; f o) -&gt; f o</TD
+><TD CLASS="rdoc"
+></TD
+></TR
+></TABLE
+></TD
+></TR
+></TABLE
+></TD
+></TR
+><TR
+><TD CLASS="section4"
+><IMG SRC="minus.gif" CLASS="coll" ONCLICK="toggle(this,'i:Codensity')" ALT="show/hide"
+> Instances</TD
+></TR
+><TR
+><TD CLASS="body"
+><DIV ID="i:Codensity" STYLE="display:block;"
+><TABLE CLASS="vanilla" CELLSPACING="1" CELLPADDING="0"
+><TR
+><TD CLASS="decl"
+><A HREF="/usr/local/share/doc/ghc/libraries/mtl/Control-Monad-Trans.html#t%3AMonadTrans"
+>MonadTrans</A
+> <A HREF="Control-Monad-CPS-Codensity.html#t%3ACodensity"
+>Codensity</A
+></TD
+></TR
+><TR
+><TD CLASS="decl"
+><A HREF="/usr/local/share/doc/ghc/libraries/base/Control-Monad.html#t%3AMonad"
+>Monad</A
+> (<A HREF="Control-Monad-CPS-Codensity.html#t%3ACodensity"
+>Codensity</A
+> f)</TD
+></TR
+><TR
+><TD CLASS="decl"
+><A HREF="/usr/local/share/doc/ghc/libraries/base/Control-Monad.html#t%3AFunctor"
+>Functor</A
+> (<A HREF="Control-Monad-CPS-Codensity.html#t%3ACodensity"
+>Codensity</A
+> f)</TD
+></TR
+><TR
+><TD CLASS="decl"
+><A HREF="/usr/local/share/doc/ghc/libraries/base/Control-Applicative.html#t%3AApplicative"
+>Applicative</A
+> (<A HREF="Control-Monad-CPS-Codensity.html#t%3ACodensity"
+>Codensity</A
+> f)</TD
+></TR
+></TABLE
+></DIV
+></TD
+></TR
+></TABLE
+></TD
+></TR
+><TR
+><TD CLASS="s15"
+></TD
+></TR
+><TR
+><TD CLASS="topdecl"
+><TABLE CLASS="declbar"
+><TR
+><TD CLASS="declname"
+><A NAME="v%3ArunCodensity"
+></A
+><B
+>runCodensity</B
+> :: <A HREF="/usr/local/share/doc/ghc/libraries/base/Control-Monad.html#t%3AMonad"
+>Monad</A
+> f =&gt; <A HREF="Control-Monad-CPS-Codensity.html#t%3ACodensity"
+>Codensity</A
+> f a -&gt; f a</TD
+><TD CLASS="declbut"
+><A HREF="src/Control-Monad-CPS-Codensity.html#runCodensity"
+>Source</A
+></TD
+></TR
+></TABLE
+></TD
+></TR
+><TR
+><TD CLASS="s15"
+></TD
+></TR
+><TR
+><TD CLASS="topdecl"
+><TABLE CLASS="declbar"
+><TR
+><TD CLASS="declname"
+><A NAME="v%3ArunCodensityApp"
+></A
+><B
+>runCodensityApp</B
+> :: <A HREF="/usr/local/share/doc/ghc/libraries/base/Control-Applicative.html#t%3AApplicative"
+>Applicative</A
+> f =&gt; <A HREF="Control-Monad-CPS-Codensity.html#t%3ACodensity"
+>Codensity</A
+> f a -&gt; f a</TD
+><TD CLASS="declbut"
+><A HREF="src/Control-Monad-CPS-Codensity.html#runCodensityApp"
+>Source</A
+></TD
+></TR
+></TABLE
+></TD
+></TR
+><TR
+><TD CLASS="s15"
+></TD
+></TR
+><TR
+><TD CLASS="botbar"
+>Produced by <A HREF="http://www.haskell.org/haddock/"
+>Haddock</A
+> version 2.3.0</TD
+></TR
+></TABLE
+></BODY
+></HTML
+>
addfile ./doc/html/monad-cps/Control-Monad-CPS-Cont.html
hunk ./doc/html/monad-cps/Control-Monad-CPS-Cont.html 1
+<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd">
+<!--Rendered using the Haskell Html Library v0.2-->
+<HTML
+><HEAD
+><META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=UTF-8"
+><TITLE
+>Control.Monad.CPS.Cont</TITLE
+><LINK HREF="haddock.css" REL="stylesheet" TYPE="text/css"
+><SCRIPT SRC="haddock-util.js" TYPE="text/javascript"
+></SCRIPT
+></HEAD
+><BODY
+><TABLE CLASS="vanilla" CELLSPACING="0" CELLPADDING="0"
+><TR
+><TD CLASS="topbar"
+><TABLE CLASS="vanilla" CELLSPACING="0" CELLPADDING="0"
+><TR
+><TD
+><IMG SRC="haskell_icon.gif" WIDTH="16" HEIGHT="16" ALT=" "
+></TD
+><TD CLASS="title"
+>monad-cps-0.0.2: CPS implementations of common monads.</TD
+><TD CLASS="topbut"
+><A HREF="src/Control-Monad-CPS-Cont.html"
+>Source code</A
+></TD
+><TD CLASS="topbut"
+><A HREF="index.html"
+>Contents</A
+></TD
+><TD CLASS="topbut"
+><A HREF="doc-index.html"
+>Index</A
+></TD
+></TR
+></TABLE
+></TD
+></TR
+><TR
+><TD CLASS="modulebar"
+><TABLE CLASS="vanilla" CELLSPACING="0" CELLPADDING="0"
+><TR
+><TD
+><FONT SIZE="6"
+>Control.Monad.CPS.Cont</FONT
+></TD
+></TR
+></TABLE
+></TD
+></TR
+><TR
+><TD CLASS="s15"
+></TD
+></TR
+><TR
+><TD CLASS="s15"
+></TD
+></TR
+><TR
+><TD CLASS="s15"
+></TD
+></TR
+><TR
+><TD CLASS="section1"
+>Documentation</TD
+></TR
+><TR
+><TD CLASS="s15"
+></TD
+></TR
+><TR
+><TD CLASS="topdecl"
+><TABLE CLASS="declbar"
+><TR
+><TD CLASS="declname"
+><SPAN CLASS="keyword"
+>data</SPAN
+>  <A NAME="t%3ACont"
+></A
+><B
+>Cont</B
+> r a </TD
+><TD CLASS="declbut"
+><A HREF="src/Control-Monad-CPS-Cont.html#Cont"
+>Source</A
+></TD
+></TR
+></TABLE
+></TD
+></TR
+><TR
+><TD CLASS="body"
+><TABLE CLASS="vanilla" CELLSPACING="0" CELLPADDING="0"
+><TR
+><TD CLASS="section4"
+><IMG SRC="minus.gif" CLASS="coll" ONCLICK="toggle(this,'i:Cont')" ALT="show/hide"
+> Instances</TD
+></TR
+><TR
+><TD CLASS="body"
+><DIV ID="i:Cont" STYLE="display:block;"
+><TABLE CLASS="vanilla" CELLSPACING="1" CELLPADDING="0"
+><TR
+><TD CLASS="decl"
+><A HREF="/usr/local/share/doc/ghc/libraries/base/Control-Monad.html#t%3AMonad"
+>Monad</A
+> (<A HREF="Control-Monad-CPS-Cont.html#t%3ACont"
+>Cont</A
+> r)</TD
+></TR
+><TR
+><TD CLASS="decl"
+><A HREF="/usr/local/share/doc/ghc/libraries/base/Control-Monad.html#t%3AFunctor"
+>Functor</A
+> (<A HREF="Control-Monad-CPS-Cont.html#t%3ACont"
+>Cont</A
+> r)</TD
+></TR
+><TR
+><TD CLASS="decl"
+><A HREF="/usr/local/share/doc/ghc/libraries/mtl/Control-Monad-Cont-Class.html#t%3AMonadCont"
+>MonadCont</A
+> (<A HREF="Control-Monad-CPS-Cont.html#t%3ACont"
+>Cont</A
+> r)</TD
+></TR
+></TABLE
+></DIV
+></TD
+></TR
+></TABLE
+></TD
+></TR
+><TR
+><TD CLASS="s15"
+></TD
+></TR
+><TR
+><TD CLASS="topdecl"
+><TABLE CLASS="declbar"
+><TR
+><TD CLASS="declname"
+><A NAME="v%3ArunCont"
+></A
+><B
+>runCont</B
+> ::  <A HREF="Control-Monad-CPS-Cont.html#t%3ACont"
+>Cont</A
+> r a -&gt; (a -&gt; r) -&gt; r</TD
+><TD CLASS="declbut"
+><A HREF="src/Control-Monad-CPS-Cont.html#runCont"
+>Source</A
+></TD
+></TR
+></TABLE
+></TD
+></TR
+><TR
+><TD CLASS="s15"
+></TD
+></TR
+><TR
+><TD CLASS="topdecl"
+><TABLE CLASS="declbar"
+><TR
+><TD CLASS="declname"
+><A NAME="v%3AidCont"
+></A
+><B
+>idCont</B
+> ::  <A HREF="Control-Monad-CPS-Cont.html#t%3ACont"
+>Cont</A
+> a a -&gt; a</TD
+><TD CLASS="declbut"
+><A HREF="src/Control-Monad-CPS-Cont.html#idCont"
+>Source</A
+></TD
+></TR
+></TABLE
+></TD
+></TR
+><TR
+><TD CLASS="s15"
+></TD
+></TR
+><TR
+><TD CLASS="topdecl"
+><TABLE CLASS="declbar"
+><TR
+><TD CLASS="declname"
+><A NAME="v%3AmapCont"
+></A
+><B
+>mapCont</B
+> ::  (r -&gt; r) -&gt; <A HREF="Control-Monad-CPS-Cont.html#t%3ACont"
+>Cont</A
+> r a -&gt; <A HREF="Control-Monad-CPS-Cont.html#t%3ACont"
+>Cont</A
+> r a</TD
+><TD CLASS="declbut"
+><A HREF="src/Control-Monad-CPS-Cont.html#mapCont"
+>Source</A
+></TD
+></TR
+></TABLE
+></TD
+></TR
+><TR
+><TD CLASS="s15"
+></TD
+></TR
+><TR
+><TD CLASS="topdecl"
+><TABLE CLASS="declbar"
+><TR
+><TD CLASS="declname"
+><A NAME="v%3AwithCont"
+></A
+><B
+>withCont</B
+> ::  ((b -&gt; r) -&gt; a -&gt; r) -&gt; <A HREF="Control-Monad-CPS-Cont.html#t%3ACont"
+>Cont</A
+> r a -&gt; <A HREF="Control-Monad-CPS-Cont.html#t%3ACont"
+>Cont</A
+> r b</TD
+><TD CLASS="declbut"
+><A HREF="src/Control-Monad-CPS-Cont.html#withCont"
+>Source</A
+></TD
+></TR
+></TABLE
+></TD
+></TR
+><TR
+><TD CLASS="s15"
+></TD
+></TR
+><TR
+><TD CLASS="topdecl"
+><TABLE CLASS="declbar"
+><TR
+><TD CLASS="declname"
+><A NAME="v%3Ashift"
+></A
+><B
+>shift</B
+> ::  ((a -&gt; <A HREF="Control-Monad-CPS-Cont.html#t%3ACont"
+>Cont</A
+> s r) -&gt; <A HREF="Control-Monad-CPS-Cont.html#t%3ACont"
+>Cont</A
+> r r) -&gt; <A HREF="Control-Monad-CPS-Cont.html#t%3ACont"
+>Cont</A
+> r a</TD
+><TD CLASS="declbut"
+><A HREF="src/Control-Monad-CPS-Cont.html#shift"
+>Source</A
+></TD
+></TR
+></TABLE
+></TD
+></TR
+><TR
+><TD CLASS="s15"
+></TD
+></TR
+><TR
+><TD CLASS="topdecl"
+><TABLE CLASS="declbar"
+><TR
+><TD CLASS="declname"
+><A NAME="v%3Areset"
+></A
+><B
+>reset</B
+> ::  <A HREF="Control-Monad-CPS-Cont.html#t%3ACont"
+>Cont</A
+> a a -&gt; <A HREF="Control-Monad-CPS-Cont.html#t%3ACont"
+>Cont</A
+> r a</TD
+><TD CLASS="declbut"
+><A HREF="src/Control-Monad-CPS-Cont.html#reset"
+>Source</A
+></TD
+></TR
+></TABLE
+></TD
+></TR
+><TR
+><TD CLASS="s15"
+></TD
+></TR
+><TR
+><TD CLASS="botbar"
+>Produced by <A HREF="http://www.haskell.org/haddock/"
+>Haddock</A
+> version 2.3.0</TD
+></TR
+></TABLE
+></BODY
+></HTML
+>
addfile ./doc/html/monad-cps/Control-Monad-CPS-Identity.html
hunk ./doc/html/monad-cps/Control-Monad-CPS-Identity.html 1
+<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd">
+<!--Rendered using the Haskell Html Library v0.2-->
+<HTML
+><HEAD
+><META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=UTF-8"
+><TITLE
+>Control.Monad.CPS.Identity</TITLE
+><LINK HREF="haddock.css" REL="stylesheet" TYPE="text/css"
+><SCRIPT SRC="haddock-util.js" TYPE="text/javascript"
+></SCRIPT
+></HEAD
+><BODY
+><TABLE CLASS="vanilla" CELLSPACING="0" CELLPADDING="0"
+><TR
+><TD CLASS="topbar"
+><TABLE CLASS="vanilla" CELLSPACING="0" CELLPADDING="0"
+><TR
+><TD
+><IMG SRC="haskell_icon.gif" WIDTH="16" HEIGHT="16" ALT=" "
+></TD
+><TD CLASS="title"
+>monad-cps-0.0.2: CPS implementations of common monads.</TD
+><TD CLASS="topbut"
+><A HREF="src/Control-Monad-CPS-Identity.html"
+>Source code</A
+></TD
+><TD CLASS="topbut"
+><A HREF="index.html"
+>Contents</A
+></TD
+><TD CLASS="topbut"
+><A HREF="doc-index.html"
+>Index</A
+></TD
+></TR
+></TABLE
+></TD
+></TR
+><TR
+><TD CLASS="modulebar"
+><TABLE CLASS="vanilla" CELLSPACING="0" CELLPADDING="0"
+><TR
+><TD
+><FONT SIZE="6"
+>Control.Monad.CPS.Identity</FONT
+></TD
+></TR
+></TABLE
+></TD
+></TR
+><TR
+><TD CLASS="s15"
+></TD
+></TR
+><TR
+><TD CLASS="s15"
+></TD
+></TR
+><TR
+><TD CLASS="s15"
+></TD
+></TR
+><TR
+><TD CLASS="section1"
+>Documentation</TD
+></TR
+><TR
+><TD CLASS="s15"
+></TD
+></TR
+><TR
+><TD CLASS="topdecl"
+><TABLE CLASS="declbar"
+><TR
+><TD CLASS="declname"
+><SPAN CLASS="keyword"
+>newtype</SPAN
+>  <A NAME="t%3AIdentity"
+></A
+><B
+>Identity</B
+> a </TD
+><TD CLASS="declbut"
+><A HREF="src/Control-Monad-CPS-Identity.html#Identity"
+>Source</A
+></TD
+></TR
+></TABLE
+></TD
+></TR
+><TR
+><TD CLASS="body"
+><TABLE CLASS="vanilla" CELLSPACING="0" CELLPADDING="0"
+><TR
+><TD CLASS="section4"
+>Constructors</TD
+></TR
+><TR
+><TD CLASS="body"
+><TABLE CLASS="vanilla" CELLSPACING="5" CELLPADDING="0"
+><TR
+><TD CLASS="arg"
+><A NAME="v%3AIdentity"
+></A
+><B
+>Identity</B
+></TD
+><TD CLASS="rdoc"
+></TD
+></TR
+><TR
+><TD CLASS="body" COLSPAN="2"
+><TABLE CLASS="vanilla" CELLSPACING="1" CELLPADDING="0"
+><TR
+><TD CLASS="arg"
+><A NAME="v%3AunIdentity"
+></A
+><B
+>unIdentity</B
+> :: <SPAN CLASS="keyword"
+>forall</SPAN
+> o.  (a -&gt; o) -&gt; o</TD
+><TD CLASS="rdoc"
+></TD
+></TR
+></TABLE
+></TD
+></TR
+></TABLE
+></TD
+></TR
+><TR
+><TD CLASS="section4"
+><IMG SRC="minus.gif" CLASS="coll" ONCLICK="toggle(this,'i:Identity')" ALT="show/hide"
+> Instances</TD
+></TR
+><TR
+><TD CLASS="body"
+><DIV ID="i:Identity" STYLE="display:block;"
+><TABLE CLASS="vanilla" CELLSPACING="1" CELLPADDING="0"
+><TR
+><TD CLASS="decl"
+><A HREF="/usr/local/share/doc/ghc/libraries/base/Control-Monad.html#t%3AMonad"
+>Monad</A
+> <A HREF="Control-Monad-CPS-Identity.html#t%3AIdentity"
+>Identity</A
+></TD
+></TR
+><TR
+><TD CLASS="decl"
+><A HREF="/usr/local/share/doc/ghc/libraries/base/Control-Monad.html#t%3AFunctor"
+>Functor</A
+> <A HREF="Control-Monad-CPS-Identity.html#t%3AIdentity"
+>Identity</A
+></TD
+></TR
+><TR
+><TD CLASS="decl"
+><A HREF="/usr/local/share/doc/ghc/libraries/base/Control-Applicative.html#t%3AApplicative"
+>Applicative</A
+> <A HREF="Control-Monad-CPS-Identity.html#t%3AIdentity"
+>Identity</A
+></TD
+></TR
+></TABLE
+></DIV
+></TD
+></TR
+></TABLE
+></TD
+></TR
+><TR
+><TD CLASS="s15"
+></TD
+></TR
+><TR
+><TD CLASS="topdecl"
+><TABLE CLASS="declbar"
+><TR
+><TD CLASS="declname"
+><A NAME="v%3ArunIdentity"
+></A
+><B
+>runIdentity</B
+> ::  <A HREF="Control-Monad-CPS-Identity.html#t%3AIdentity"
+>Identity</A
+> a -&gt; a</TD
+><TD CLASS="declbut"
+><A HREF="src/Control-Monad-CPS-Identity.html#runIdentity"
+>Source</A
+></TD
+></TR
+></TABLE
+></TD
+></TR
+><TR
+><TD CLASS="s15"
+></TD
+></TR
+><TR
+><TD CLASS="botbar"
+>Produced by <A HREF="http://www.haskell.org/haddock/"
+>Haddock</A
+> version 2.3.0</TD
+></TR
+></TABLE
+></BODY
+></HTML
+>
addfile ./doc/html/monad-cps/Control-Monad-CPS-RWS.html
hunk ./doc/html/monad-cps/Control-Monad-CPS-RWS.html 1
+<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd">
+<!--Rendered using the Haskell Html Library v0.2-->
+<HTML
+><HEAD
+><META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=UTF-8"
+><TITLE
+>Control.Monad.CPS.RWS</TITLE
+><LINK HREF="haddock.css" REL="stylesheet" TYPE="text/css"
+><SCRIPT SRC="haddock-util.js" TYPE="text/javascript"
+></SCRIPT
+></HEAD
+><BODY
+><TABLE CLASS="vanilla" CELLSPACING="0" CELLPADDING="0"
+><TR
+><TD CLASS="topbar"
+><TABLE CLASS="vanilla" CELLSPACING="0" CELLPADDING="0"
+><TR
+><TD
+><IMG SRC="haskell_icon.gif" WIDTH="16" HEIGHT="16" ALT=" "
+></TD
+><TD CLASS="title"
+>monad-cps-0.0.2: CPS implementations of common monads.</TD
+><TD CLASS="topbut"
+><A HREF="src/Control-Monad-CPS-RWS.html"
+>Source code</A
+></TD
+><TD CLASS="topbut"
+><A HREF="index.html"
+>Contents</A
+></TD
+><TD CLASS="topbut"
+><A HREF="doc-index.html"
+>Index</A
+></TD
+></TR
+></TABLE
+></TD
+></TR
+><TR
+><TD CLASS="modulebar"
+><TABLE CLASS="vanilla" CELLSPACING="0" CELLPADDING="0"
+><TR
+><TD
+><FONT SIZE="6"
+>Control.Monad.CPS.RWS</FONT
+></TD
+></TR
+></TABLE
+></TD
+></TR
+><TR
+><TD CLASS="s15"
+></TD
+></TR
+><TR
+><TD CLASS="s15"
+></TD
+></TR
+><TR
+><TD CLASS="s15"
+></TD
+></TR
+><TR
+><TD CLASS="section1"
+>Documentation</TD
+></TR
+><TR
+><TD CLASS="s15"
+></TD
+></TR
+><TR
+><TD CLASS="topdecl"
+><TABLE CLASS="declbar"
+><TR
+><TD CLASS="declname"
+><SPAN CLASS="keyword"
+>newtype</SPAN
+>  <A NAME="t%3ARWS"
+></A
+><B
+>RWS</B
+> r w s a </TD
+><TD CLASS="declbut"
+><A HREF="src/Control-Monad-CPS-RWS.html#RWS"
+>Source</A
+></TD
+></TR
+></TABLE
+></TD
+></TR
+><TR
+><TD CLASS="body"
+><TABLE CLASS="vanilla" CELLSPACING="0" CELLPADDING="0"
+><TR
+><TD CLASS="section4"
+>Constructors</TD
+></TR
+><TR
+><TD CLASS="body"
+><TABLE CLASS="vanilla" CELLSPACING="5" CELLPADDING="0"
+><TR
+><TD CLASS="arg"
+><A NAME="v%3ARWS"
+></A
+><B
+>RWS</B
+></TD
+><TD CLASS="rdoc"
+></TD
+></TR
+><TR
+><TD CLASS="body" COLSPAN="2"
+><TABLE CLASS="vanilla" CELLSPACING="1" CELLPADDING="0"
+><TR
+><TD CLASS="arg"
+><A NAME="v%3AunRWS"
+></A
+><B
+>unRWS</B
+> :: <SPAN CLASS="keyword"
+>forall</SPAN
+> o.  (a -&gt; w -&gt; s -&gt; o) -&gt; r -&gt; s -&gt; o</TD
+><TD CLASS="rdoc"
+></TD
+></TR
+></TABLE
+></TD
+></TR
+></TABLE
+></TD
+></TR
+><TR
+><TD CLASS="section4"
+><IMG SRC="minus.gif" CLASS="coll" ONCLICK="toggle(this,'i:RWS')" ALT="show/hide"
+> Instances</TD
+></TR
+><TR
+><TD CLASS="body"
+><DIV ID="i:RWS" STYLE="display:block;"
+><TABLE CLASS="vanilla" CELLSPACING="1" CELLPADDING="0"
+><TR
+><TD CLASS="decl"
+><A HREF="/usr/local/share/doc/ghc/libraries/base/Data-Monoid.html#t%3AMonoid"
+>Monoid</A
+> w =&gt; <A HREF="/usr/local/share/doc/ghc/libraries/mtl/Control-Monad-Reader-Class.html#t%3AMonadReader"
+>MonadReader</A
+> r (<A HREF="Control-Monad-CPS-RWS.html#t%3ARWS"
+>RWS</A
+> r w s)</TD
+></TR
+><TR
+><TD CLASS="decl"
+><A HREF="/usr/local/share/doc/ghc/libraries/base/Data-Monoid.html#t%3AMonoid"
+>Monoid</A
+> w =&gt; <A HREF="/usr/local/share/doc/ghc/libraries/mtl/Control-Monad-State-Class.html#t%3AMonadState"
+>MonadState</A
+> s (<A HREF="Control-Monad-CPS-RWS.html#t%3ARWS"
+>RWS</A
+> r w s)</TD
+></TR
+><TR
+><TD CLASS="decl"
+><A HREF="/usr/local/share/doc/ghc/libraries/base/Data-Monoid.html#t%3AMonoid"
+>Monoid</A
+> w =&gt; <A HREF="/usr/local/share/doc/ghc/libraries/mtl/Control-Monad-Writer-Class.html#t%3AMonadWriter"
+>MonadWriter</A
+> w (<A HREF="Control-Monad-CPS-RWS.html#t%3ARWS"
+>RWS</A
+> r w s)</TD
+></TR
+><TR
+><TD CLASS="decl"
+><A HREF="/usr/local/share/doc/ghc/libraries/base/Data-Monoid.html#t%3AMonoid"
+>Monoid</A
+> w =&gt; <A HREF="/usr/local/share/doc/ghc/libraries/base/Control-Monad.html#t%3AMonad"
+>Monad</A
+> (<A HREF="Control-Monad-CPS-RWS.html#t%3ARWS"
+>RWS</A
+> r w s)</TD
+></TR
+><TR
+><TD CLASS="decl"
+><A HREF="/usr/local/share/doc/ghc/libraries/base/Data-Monoid.html#t%3AMonoid"
+>Monoid</A
+> w =&gt; <A HREF="/usr/local/share/doc/ghc/libraries/base/Control-Monad.html#t%3AFunctor"
+>Functor</A
+> (<A HREF="Control-Monad-CPS-RWS.html#t%3ARWS"
+>RWS</A
+> r w s)</TD
+></TR
+></TABLE
+></DIV
+></TD
+></TR
+></TABLE
+></TD
+></TR
+><TR
+><TD CLASS="s15"
+></TD
+></TR
+><TR
+><TD CLASS="topdecl"
+><TABLE CLASS="declbar"
+><TR
+><TD CLASS="declname"
+><A NAME="v%3ArunRWS"
+></A
+><B
+>runRWS</B
+> ::  <A HREF="Control-Monad-CPS-RWS.html#t%3ARWS"
+>RWS</A
+> r w s a -&gt; r -&gt; s -&gt; (a, w, s)</TD
+><TD CLASS="declbut"
+><A HREF="src/Control-Monad-CPS-RWS.html#runRWS"
+>Source</A
+></TD
+></TR
+></TABLE
+></TD
+></TR
+><TR
+><TD CLASS="s15"
+></TD
+></TR
+><TR
+><TD CLASS="botbar"
+>Produced by <A HREF="http://www.haskell.org/haddock/"
+>Haddock</A
+> version 2.3.0</TD
+></TR
+></TABLE
+></BODY
+></HTML
+>
addfile ./doc/html/monad-cps/Control-Monad-CPS-Ran.html
hunk ./doc/html/monad-cps/Control-Monad-CPS-Ran.html 1
+<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd">
+<!--Rendered using the Haskell Html Library v0.2-->
+<HTML
+><HEAD
+><META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=UTF-8"
+><TITLE
+>Control.Monad.CPS.Ran</TITLE
+><LINK HREF="haddock.css" REL="stylesheet" TYPE="text/css"
+><SCRIPT SRC="haddock-util.js" TYPE="text/javascript"
+></SCRIPT
+></HEAD
+><BODY
+><TABLE CLASS="vanilla" CELLSPACING="0" CELLPADDING="0"
+><TR
+><TD CLASS="topbar"
+><TABLE CLASS="vanilla" CELLSPACING="0" CELLPADDING="0"
+><TR
+><TD
+><IMG SRC="haskell_icon.gif" WIDTH="16" HEIGHT="16" ALT=" "
+></TD
+><TD CLASS="title"
+>monad-cps-0.0.2: CPS implementations of common monads.</TD
+><TD CLASS="topbut"
+><A HREF="src/Control-Monad-CPS-Ran.html"
+>Source code</A
+></TD
+><TD CLASS="topbut"
+><A HREF="index.html"
+>Contents</A
+></TD
+><TD CLASS="topbut"
+><A HREF="doc-index.html"
+>Index</A
+></TD
+></TR
+></TABLE
+></TD
+></TR
+><TR
+><TD CLASS="modulebar"
+><TABLE CLASS="vanilla" CELLSPACING="0" CELLPADDING="0"
+><TR
+><TD
+><FONT SIZE="6"
+>Control.Monad.CPS.Ran</FONT
+></TD
+></TR
+></TABLE
+></TD
+></TR
+><TR
+><TD CLASS="s15"
+></TD
+></TR
+><TR
+><TD CLASS="s15"
+></TD
+></TR
+><TR
+><TD CLASS="s15"
+></TD
+></TR
+><TR
+><TD CLASS="section1"
+>Documentation</TD
+></TR
+><TR
+><TD CLASS="s15"
+></TD
+></TR
+><TR
+><TD CLASS="topdecl"
+><TABLE CLASS="declbar"
+><TR
+><TD CLASS="declname"
+><SPAN CLASS="keyword"
+>newtype</SPAN
+>  <A NAME="t%3ARan"
+></A
+><B
+>Ran</B
+> g h a </TD
+><TD CLASS="declbut"
+><A HREF="src/Control-Monad-CPS-Ran.html#Ran"
+>Source</A
+></TD
+></TR
+></TABLE
+></TD
+></TR
+><TR
+><TD CLASS="body"
+><TABLE CLASS="vanilla" CELLSPACING="0" CELLPADDING="0"
+><TR
+><TD CLASS="section4"
+>Constructors</TD
+></TR
+><TR
+><TD CLASS="body"
+><TABLE CLASS="vanilla" CELLSPACING="5" CELLPADDING="0"
+><TR
+><TD CLASS="arg"
+><A NAME="v%3ARan"
+></A
+><B
+>Ran</B
+></TD
+><TD CLASS="rdoc"
+></TD
+></TR
+><TR
+><TD CLASS="body" COLSPAN="2"
+><TABLE CLASS="vanilla" CELLSPACING="1" CELLPADDING="0"
+><TR
+><TD CLASS="arg"
+><A NAME="v%3ArunRan"
+></A
+><B
+>runRan</B
+> :: <SPAN CLASS="keyword"
+>forall</SPAN
+> b.  (a -&gt; g b) -&gt; h b</TD
+><TD CLASS="rdoc"
+></TD
+></TR
+></TABLE
+></TD
+></TR
+></TABLE
+></TD
+></TR
+><TR
+><TD CLASS="section4"
+><IMG SRC="minus.gif" CLASS="coll" ONCLICK="toggle(this,'i:Ran')" ALT="show/hide"
+> Instances</TD
+></TR
+><TR
+><TD CLASS="body"
+><DIV ID="i:Ran" STYLE="display:block;"
+><TABLE CLASS="vanilla" CELLSPACING="1" CELLPADDING="0"
+><TR
+><TD CLASS="decl"
+><A HREF="/usr/local/share/doc/ghc/libraries/base/Control-Monad.html#t%3AFunctor"
+>Functor</A
+> (<A HREF="Control-Monad-CPS-Ran.html#t%3ARan"
+>Ran</A
+> g h)</TD
+></TR
+></TABLE
+></DIV
+></TD
+></TR
+></TABLE
+></TD
+></TR
+><TR
+><TD CLASS="s15"
+></TD
+></TR
+><TR
+><TD CLASS="botbar"
+>Produced by <A HREF="http://www.haskell.org/haddock/"
+>Haddock</A
+> version 2.3.0</TD
+></TR
+></TABLE
+></BODY
+></HTML
+>
addfile ./doc/html/monad-cps/Control-Monad-CPS-Reader.html
hunk ./doc/html/monad-cps/Control-Monad-CPS-Reader.html 1
+<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd">
+<!--Rendered using the Haskell Html Library v0.2-->
+<HTML
+><HEAD
+><META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=UTF-8"
+><TITLE
+>Control.Monad.CPS.Reader</TITLE
+><LINK HREF="haddock.css" REL="stylesheet" TYPE="text/css"
+><SCRIPT SRC="haddock-util.js" TYPE="text/javascript"
+></SCRIPT
+></HEAD
+><BODY
+><TABLE CLASS="vanilla" CELLSPACING="0" CELLPADDING="0"
+><TR
+><TD CLASS="topbar"
+><TABLE CLASS="vanilla" CELLSPACING="0" CELLPADDING="0"
+><TR
+><TD
+><IMG SRC="haskell_icon.gif" WIDTH="16" HEIGHT="16" ALT=" "
+></TD
+><TD CLASS="title"
+>monad-cps-0.0.2: CPS implementations of common monads.</TD
+><TD CLASS="topbut"
+><A HREF="src/Control-Monad-CPS-Reader.html"
+>Source code</A
+></TD
+><TD CLASS="topbut"
+><A HREF="index.html"
+>Contents</A
+></TD
+><TD CLASS="topbut"
+><A HREF="doc-index.html"
+>Index</A
+></TD
+></TR
+></TABLE
+></TD
+></TR
+><TR
+><TD CLASS="modulebar"
+><TABLE CLASS="vanilla" CELLSPACING="0" CELLPADDING="0"
+><TR
+><TD
+><FONT SIZE="6"
+>Control.Monad.CPS.Reader</FONT
+></TD
+></TR
+></TABLE
+></TD
+></TR
+><TR
+><TD CLASS="s15"
+></TD
+></TR
+><TR
+><TD CLASS="s15"
+></TD
+></TR
+><TR
+><TD CLASS="s15"
+></TD
+></TR
+><TR
+><TD CLASS="section1"
+>Documentation</TD
+></TR
+><TR
+><TD CLASS="s15"
+></TD
+></TR
+><TR
+><TD CLASS="topdecl"
+><TABLE CLASS="declbar"
+><TR
+><TD CLASS="declname"
+><SPAN CLASS="keyword"
+>newtype</SPAN
+>  <A NAME="t%3AReader"
+></A
+><B
+>Reader</B
+> r a </TD
+><TD CLASS="declbut"
+><A HREF="src/Control-Monad-CPS-Reader.html#Reader"
+>Source</A
+></TD
+></TR
+></TABLE
+></TD
+></TR
+><TR
+><TD CLASS="body"
+><TABLE CLASS="vanilla" CELLSPACING="0" CELLPADDING="0"
+><TR
+><TD CLASS="section4"
+>Constructors</TD
+></TR
+><TR
+><TD CLASS="body"
+><TABLE CLASS="vanilla" CELLSPACING="5" CELLPADDING="0"
+><TR
+><TD CLASS="arg"
+><A NAME="v%3AReader"
+></A
+><B
+>Reader</B
+></TD
+><TD CLASS="rdoc"
+></TD
+></TR
+><TR
+><TD CLASS="body" COLSPAN="2"
+><TABLE CLASS="vanilla" CELLSPACING="1" CELLPADDING="0"
+><TR
+><TD CLASS="arg"
+><A NAME="v%3AunReader"
+></A
+><B
+>unReader</B
+> :: <SPAN CLASS="keyword"
+>forall</SPAN
+> o.  (a -&gt; o) -&gt; r -&gt; o</TD
+><TD CLASS="rdoc"
+></TD
+></TR
+></TABLE
+></TD
+></TR
+></TABLE
+></TD
+></TR
+><TR
+><TD CLASS="section4"
+><IMG SRC="minus.gif" CLASS="coll" ONCLICK="toggle(this,'i:Reader')" ALT="show/hide"
+> Instances</TD
+></TR
+><TR
+><TD CLASS="body"
+><DIV ID="i:Reader" STYLE="display:block;"
+><TABLE CLASS="vanilla" CELLSPACING="1" CELLPADDING="0"
+><TR
+><TD CLASS="decl"
+><A HREF="/usr/local/share/doc/ghc/libraries/mtl/Control-Monad-Reader-Class.html#t%3AMonadReader"
+>MonadReader</A
+> r (<A HREF="Control-Monad-CPS-Reader.html#t%3AReader"
+>Reader</A
+> r)</TD
+></TR
+><TR
+><TD CLASS="decl"
+><A HREF="/usr/local/share/doc/ghc/libraries/base/Control-Monad.html#t%3AMonad"
+>Monad</A
+> (<A HREF="Control-Monad-CPS-Reader.html#t%3AReader"
+>Reader</A
+> r)</TD
+></TR
+><TR
+><TD CLASS="decl"
+><A HREF="/usr/local/share/doc/ghc/libraries/base/Control-Monad.html#t%3AFunctor"
+>Functor</A
+> (<A HREF="Control-Monad-CPS-Reader.html#t%3AReader"
+>Reader</A
+> r)</TD
+></TR
+></TABLE
+></DIV
+></TD
+></TR
+></TABLE
+></TD
+></TR
+><TR
+><TD CLASS="s15"
+></TD
+></TR
+><TR
+><TD CLASS="topdecl"
+><TABLE CLASS="declbar"
+><TR
+><TD CLASS="declname"
+><A NAME="v%3ArunReader"
+></A
+><B
+>runReader</B
+> ::  <A HREF="Control-Monad-CPS-Reader.html#t%3AReader"
+>Reader</A
+> r a -&gt; r -&gt; a</TD
+><TD CLASS="declbut"
+><A HREF="src/Control-Monad-CPS-Reader.html#runReader"
+>Source</A
+></TD
+></TR
+></TABLE
+></TD
+></TR
+><TR
+><TD CLASS="s15"
+></TD
+></TR
+><TR
+><TD CLASS="botbar"
+>Produced by <A HREF="http://www.haskell.org/haddock/"
+>Haddock</A
+> version 2.3.0</TD
+></TR
+></TABLE
+></BODY
+></HTML
+>
addfile ./doc/html/monad-cps/Control-Monad-CPS-State.html
hunk ./doc/html/monad-cps/Control-Monad-CPS-State.html 1
+<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd">
+<!--Rendered using the Haskell Html Library v0.2-->
+<HTML
+><HEAD
+><META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=UTF-8"
+><TITLE
+>Control.Monad.CPS.State</TITLE
+><LINK HREF="haddock.css" REL="stylesheet" TYPE="text/css"
+><SCRIPT SRC="haddock-util.js" TYPE="text/javascript"
+></SCRIPT
+></HEAD
+><BODY
+><TABLE CLASS="vanilla" CELLSPACING="0" CELLPADDING="0"
+><TR
+><TD CLASS="topbar"
+><TABLE CLASS="vanilla" CELLSPACING="0" CELLPADDING="0"
+><TR
+><TD
+><IMG SRC="haskell_icon.gif" WIDTH="16" HEIGHT="16" ALT=" "
+></TD
+><TD CLASS="title"
+>monad-cps-0.0.2: CPS implementations of common monads.</TD
+><TD CLASS="topbut"
+><A HREF="src/Control-Monad-CPS-State.html"
+>Source code</A
+></TD
+><TD CLASS="topbut"
+><A HREF="index.html"
+>Contents</A
+></TD
+><TD CLASS="topbut"
+><A HREF="doc-index.html"
+>Index</A
+></TD
+></TR
+></TABLE
+></TD
+></TR
+><TR
+><TD CLASS="modulebar"
+><TABLE CLASS="vanilla" CELLSPACING="0" CELLPADDING="0"
+><TR
+><TD
+><FONT SIZE="6"
+>Control.Monad.CPS.State</FONT
+></TD
+></TR
+></TABLE
+></TD
+></TR
+><TR
+><TD CLASS="s15"
+></TD
+></TR
+><TR
+><TD CLASS="s15"
+></TD
+></TR
+><TR
+><TD CLASS="s15"
+></TD
+></TR
+><TR
+><TD CLASS="section1"
+>Documentation</TD
+></TR
+><TR
+><TD CLASS="s15"
+></TD
+></TR
+><TR
+><TD CLASS="topdecl"
+><TABLE CLASS="declbar"
+><TR
+><TD CLASS="declname"
+><SPAN CLASS="keyword"
+>data</SPAN
+>  <A NAME="t%3AState"
+></A
+><B
+>State</B
+> s a </TD
+><TD CLASS="declbut"
+><A HREF="src/Control-Monad-CPS-State.html#State"
+>Source</A
+></TD
+></TR
+></TABLE
+></TD
+></TR
+><TR
+><TD CLASS="body"
+><TABLE CLASS="vanilla" CELLSPACING="0" CELLPADDING="0"
+><TR
+><TD CLASS="section4"
+><IMG SRC="minus.gif" CLASS="coll" ONCLICK="toggle(this,'i:State')" ALT="show/hide"
+> Instances</TD
+></TR
+><TR
+><TD CLASS="body"
+><DIV ID="i:State" STYLE="display:block;"
+><TABLE CLASS="vanilla" CELLSPACING="1" CELLPADDING="0"
+><TR
+><TD CLASS="decl"
+><A HREF="/usr/local/share/doc/ghc/libraries/mtl/Control-Monad-State-Class.html#t%3AMonadState"
+>MonadState</A
+> s (<A HREF="Control-Monad-CPS-State.html#t%3AState"
+>State</A
+> s)</TD
+></TR
+><TR
+><TD CLASS="decl"
+><A HREF="/usr/local/share/doc/ghc/libraries/base/Control-Monad.html#t%3AMonad"
+>Monad</A
+> (<A HREF="Control-Monad-CPS-State.html#t%3AState"
+>State</A
+> s)</TD
+></TR
+><TR
+><TD CLASS="decl"
+><A HREF="/usr/local/share/doc/ghc/libraries/base/Control-Monad.html#t%3AFunctor"
+>Functor</A
+> (<A HREF="Control-Monad-CPS-State.html#t%3AState"
+>State</A
+> s)</TD
+></TR
+><TR
+><TD CLASS="decl"
+><A HREF="/usr/local/share/doc/ghc/libraries/base/Control-Applicative.html#t%3AApplicative"
+>Applicative</A
+> (<A HREF="Control-Monad-CPS-State.html#t%3AState"
+>State</A
+> s)</TD
+></TR
+></TABLE
+></DIV
+></TD
+></TR
+></TABLE
+></TD
+></TR
+><TR
+><TD CLASS="s15"
+></TD
+></TR
+><TR
+><TD CLASS="topdecl"
+><TABLE CLASS="declbar"
+><TR
+><TD CLASS="declname"
+><A NAME="v%3ArunState"
+></A
+><B
+>runState</B
+> ::  <A HREF="Control-Monad-CPS-State.html#t%3AState"
+>State</A
+> s a -&gt; s -&gt; (a, s)</TD
+><TD CLASS="declbut"
+><A HREF="src/Control-Monad-CPS-State.html#runState"
+>Source</A
+></TD
+></TR
+></TABLE
+></TD
+></TR
+><TR
+><TD CLASS="s15"
+></TD
+></TR
+><TR
+><TD CLASS="topdecl"
+><TABLE CLASS="declbar"
+><TR
+><TD CLASS="declname"
+><SPAN CLASS="keyword"
+>data</SPAN
+>  <A NAME="t%3AState%27"
+></A
+><B
+>State'</B
+> s a </TD
+><TD CLASS="declbut"
+><A HREF="src/Control-Monad-CPS-State.html#State%27"
+>Source</A
+></TD
+></TR
+></TABLE
+></TD
+></TR
+><TR
+><TD CLASS="body"
+><TABLE CLASS="vanilla" CELLSPACING="0" CELLPADDING="0"
+><TR
+><TD CLASS="section4"
+><IMG SRC="minus.gif" CLASS="coll" ONCLICK="toggle(this,'i:State%27')" ALT="show/hide"
+> Instances</TD
+></TR
+><TR
+><TD CLASS="body"
+><DIV ID="i:State%27" STYLE="display:block;"
+><TABLE CLASS="vanilla" CELLSPACING="1" CELLPADDING="0"
+><TR
+><TD CLASS="decl"
+><A HREF="/usr/local/share/doc/ghc/libraries/mtl/Control-Monad-State-Class.html#t%3AMonadState"
+>MonadState</A
+> s (<A HREF="Control-Monad-CPS-State.html#t%3AState%27"
+>State'</A
+> s)</TD
+></TR
+><TR
+><TD CLASS="decl"
+><A HREF="/usr/local/share/doc/ghc/libraries/base/Control-Monad.html#t%3AMonad"
+>Monad</A
+> (<A HREF="Control-Monad-CPS-State.html#t%3AState%27"
+>State'</A
+> s)</TD
+></TR
+><TR
+><TD CLASS="decl"
+><A HREF="/usr/local/share/doc/ghc/libraries/base/Control-Monad.html#t%3AFunctor"
+>Functor</A
+> (<A HREF="Control-Monad-CPS-State.html#t%3AState%27"
+>State'</A
+> s)</TD
+></TR
+><TR
+><TD CLASS="decl"
+><A HREF="/usr/local/share/doc/ghc/libraries/base/Control-Applicative.html#t%3AApplicative"
+>Applicative</A
+> (<A HREF="Control-Monad-CPS-State.html#t%3AState%27"
+>State'</A
+> s)</TD
+></TR
+></TABLE
+></DIV
+></TD
+></TR
+></TABLE
+></TD
+></TR
+><TR
+><TD CLASS="s15"
+></TD
+></TR
+><TR
+><TD CLASS="topdecl"
+><TABLE CLASS="declbar"
+><TR
+><TD CLASS="declname"
+><A NAME="v%3ArunState%27"
+></A
+><B
+>runState'</B
+> ::  <A HREF="Control-Monad-CPS-State.html#t%3AState%27"
+>State'</A
+> s a -&gt; s -&gt; (a, s)</TD
+><TD CLASS="declbut"
+><A HREF="src/Control-Monad-CPS-State.html#runState%27"
+>Source</A
+></TD
+></TR
+></TABLE
+></TD
+></TR
+><TR
+><TD CLASS="s15"
+></TD
+></TR
+><TR
+><TD CLASS="botbar"
+>Produced by <A HREF="http://www.haskell.org/haddock/"
+>Haddock</A
+> version 2.3.0</TD
+></TR
+></TABLE
+></BODY
+></HTML
+>
addfile ./doc/html/monad-cps/Control-Monad-CPS-Writer.html
hunk ./doc/html/monad-cps/Control-Monad-CPS-Writer.html 1
+<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd">
+<!--Rendered using the Haskell Html Library v0.2-->
+<HTML
+><HEAD
+><META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=UTF-8"
+><TITLE
+>Control.Monad.CPS.Writer</TITLE
+><LINK HREF="haddock.css" REL="stylesheet" TYPE="text/css"
+><SCRIPT SRC="haddock-util.js" TYPE="text/javascript"
+></SCRIPT
+></HEAD
+><BODY
+><TABLE CLASS="vanilla" CELLSPACING="0" CELLPADDING="0"
+><TR
+><TD CLASS="topbar"
+><TABLE CLASS="vanilla" CELLSPACING="0" CELLPADDING="0"
+><TR
+><TD
+><IMG SRC="haskell_icon.gif" WIDTH="16" HEIGHT="16" ALT=" "
+></TD
+><TD CLASS="title"
+>monad-cps-0.0.2: CPS implementations of common monads.</TD
+><TD CLASS="topbut"
+><A HREF="src/Control-Monad-CPS-Writer.html"
+>Source code</A
+></TD
+><TD CLASS="topbut"
+><A HREF="index.html"
+>Contents</A
+></TD
+><TD CLASS="topbut"
+><A HREF="doc-index.html"
+>Index</A
+></TD
+></TR
+></TABLE
+></TD
+></TR
+><TR
+><TD CLASS="modulebar"
+><TABLE CLASS="vanilla" CELLSPACING="0" CELLPADDING="0"
+><TR
+><TD
+><FONT SIZE="6"
+>Control.Monad.CPS.Writer</FONT
+></TD
+></TR
+></TABLE
+></TD
+></TR
+><TR
+><TD CLASS="s15"
+></TD
+></TR
+><TR
+><TD CLASS="s15"
+></TD
+></TR
+><TR
+><TD CLASS="s15"
+></TD
+></TR
+><TR
+><TD CLASS="section1"
+>Documentation</TD
+></TR
+><TR
+><TD CLASS="s15"
+></TD
+></TR
+><TR
+><TD CLASS="topdecl"
+><TABLE CLASS="declbar"
+><TR
+><TD CLASS="declname"
+><SPAN CLASS="keyword"
+>newtype</SPAN
+>  <A NAME="t%3AWriter"
+></A
+><B
+>Writer</B
+> w a </TD
+><TD CLASS="declbut"
+><A HREF="src/Control-Monad-CPS-Writer.html#Writer"
+>Source</A
+></TD
+></TR
+></TABLE
+></TD
+></TR
+><TR
+><TD CLASS="body"
+><TABLE CLASS="vanilla" CELLSPACING="0" CELLPADDING="0"
+><TR
+><TD CLASS="section4"
+>Constructors</TD
+></TR
+><TR
+><TD CLASS="body"
+><TABLE CLASS="vanilla" CELLSPACING="5" CELLPADDING="0"
+><TR
+><TD CLASS="arg"
+><A NAME="v%3AWriter"
+></A
+><B
+>Writer</B
+></TD
+><TD CLASS="rdoc"
+></TD
+></TR
+><TR
+><TD CLASS="body" COLSPAN="2"
+><TABLE CLASS="vanilla" CELLSPACING="1" CELLPADDING="0"
+><TR
+><TD CLASS="arg"
+><A NAME="v%3AunWriter"
+></A
+><B
+>unWriter</B
+> :: <SPAN CLASS="keyword"
+>forall</SPAN
+> o.  (a -&gt; w -&gt; o) -&gt; o</TD
+><TD CLASS="rdoc"
+></TD
+></TR
+></TABLE
+></TD
+></TR
+></TABLE
+></TD
+></TR
+><TR
+><TD CLASS="section4"
+><IMG SRC="minus.gif" CLASS="coll" ONCLICK="toggle(this,'i:Writer')" ALT="show/hide"
+> Instances</TD
+></TR
+><TR
+><TD CLASS="body"
+><DIV ID="i:Writer" STYLE="display:block;"
+><TABLE CLASS="vanilla" CELLSPACING="1" CELLPADDING="0"
+><TR
+><TD CLASS="decl"
+><A HREF="/usr/local/share/doc/ghc/libraries/base/Data-Monoid.html#t%3AMonoid"
+>Monoid</A
+> w =&gt; <A HREF="/usr/local/share/doc/ghc/libraries/mtl/Control-Monad-Writer-Class.html#t%3AMonadWriter"
+>MonadWriter</A
+> w (<A HREF="Control-Monad-CPS-Writer.html#t%3AWriter"
+>Writer</A
+> w)</TD
+></TR
+><TR
+><TD CLASS="decl"
+><A HREF="/usr/local/share/doc/ghc/libraries/base/Data-Monoid.html#t%3AMonoid"
+>Monoid</A
+> w =&gt; <A HREF="/usr/local/share/doc/ghc/libraries/base/Control-Monad.html#t%3AMonad"
+>Monad</A
+> (<A HREF="Control-Monad-CPS-Writer.html#t%3AWriter"
+>Writer</A
+> w)</TD
+></TR
+><TR
+><TD CLASS="decl"
+><A HREF="/usr/local/share/doc/ghc/libraries/base/Control-Monad.html#t%3AFunctor"
+>Functor</A
+> (<A HREF="Control-Monad-CPS-Writer.html#t%3AWriter"
+>Writer</A
+> w)</TD
+></TR
+><TR
+><TD CLASS="decl"
+><A HREF="/usr/local/share/doc/ghc/libraries/base/Data-Monoid.html#t%3AMonoid"
+>Monoid</A
+> w =&gt; <A HREF="/usr/local/share/doc/ghc/libraries/base/Control-Applicative.html#t%3AApplicative"
+>Applicative</A
+> (<A HREF="Control-Monad-CPS-Writer.html#t%3AWriter"
+>Writer</A
+> w)</TD
+></TR
+></TABLE
+></DIV
+></TD
+></TR
+></TABLE
+></TD
+></TR
+><TR
+><TD CLASS="s15"
+></TD
+></TR
+><TR
+><TD CLASS="topdecl"
+><TABLE CLASS="declbar"
+><TR
+><TD CLASS="declname"
+><A NAME="v%3ArunWriter"
+></A
+><B
+>runWriter</B
+> ::  <A HREF="Control-Monad-CPS-Writer.html#t%3AWriter"
+>Writer</A
+> w a -&gt; (a, w)</TD
+><TD CLASS="declbut"
+><A HREF="src/Control-Monad-CPS-Writer.html#runWriter"
+>Source</A
+></TD
+></TR
+></TABLE
+></TD
+></TR
+><TR
+><TD CLASS="s15"
+></TD
+></TR
+><TR
+><TD CLASS="topdecl"
+><TABLE CLASS="declbar"
+><TR
+><TD CLASS="declname"
+><SPAN CLASS="keyword"
+>data</SPAN
+>  <A NAME="t%3AWriter%27"
+></A
+><B
+>Writer'</B
+> w a </TD
+><TD CLASS="declbut"
+><A HREF="src/Control-Monad-CPS-Writer.html#Writer%27"
+>Source</A
+></TD
+></TR
+></TABLE
+></TD
+></TR
+><TR
+><TD CLASS="body"
+><TABLE CLASS="vanilla" CELLSPACING="0" CELLPADDING="0"
+><TR
+><TD CLASS="section4"
+><IMG SRC="minus.gif" CLASS="coll" ONCLICK="toggle(this,'i:Writer%27')" ALT="show/hide"
+> Instances</TD
+></TR
+><TR
+><TD CLASS="body"
+><DIV ID="i:Writer%27" STYLE="display:block;"
+><TABLE CLASS="vanilla" CELLSPACING="1" CELLPADDING="0"
+><TR
+><TD CLASS="decl"
+><A HREF="/usr/local/share/doc/ghc/libraries/base/Data-Monoid.html#t%3AMonoid"
+>Monoid</A
+> w =&gt; <A HREF="/usr/local/share/doc/ghc/libraries/mtl/Control-Monad-Writer-Class.html#t%3AMonadWriter"
+>MonadWriter</A
+> w (<A HREF="Control-Monad-CPS-Writer.html#t%3AWriter%27"
+>Writer'</A
+> w)</TD
+></TR
+><TR
+><TD CLASS="decl"
+><A HREF="/usr/local/share/doc/ghc/libraries/base/Data-Monoid.html#t%3AMonoid"
+>Monoid</A
+> w =&gt; <A HREF="/usr/local/share/doc/ghc/libraries/base/Control-Monad.html#t%3AMonad"
+>Monad</A
+> (<A HREF="Control-Monad-CPS-Writer.html#t%3AWriter%27"
+>Writer'</A
+> w)</TD
+></TR
+><TR
+><TD CLASS="decl"
+><A HREF="/usr/local/share/doc/ghc/libraries/base/Data-Monoid.html#t%3AMonoid"
+>Monoid</A
+> w =&gt; <A HREF="/usr/local/share/doc/ghc/libraries/base/Control-Monad.html#t%3AFunctor"
+>Functor</A
+> (<A HREF="Control-Monad-CPS-Writer.html#t%3AWriter%27"
+>Writer'</A
+> w)</TD
+></TR
+><TR
+><TD CLASS="decl"
+><A HREF="/usr/local/share/doc/ghc/libraries/base/Data-Monoid.html#t%3AMonoid"
+>Monoid</A
+> w =&gt; <A HREF="/usr/local/share/doc/ghc/libraries/base/Control-Applicative.html#t%3AApplicative"
+>Applicative</A
+> (<A HREF="Control-Monad-CPS-Writer.html#t%3AWriter%27"
+>Writer'</A
+> w)</TD
+></TR
+></TABLE
+></DIV
+></TD
+></TR
+></TABLE
+></TD
+></TR
+><TR
+><TD CLASS="s15"
+></TD
+></TR
+><TR
+><TD CLASS="topdecl"
+><TABLE CLASS="declbar"
+><TR
+><TD CLASS="declname"
+><A NAME="v%3ArunWriter%27"
+></A
+><B
+>runWriter'</B
+> :: <A HREF="/usr/local/share/doc/ghc/libraries/base/Data-Monoid.html#t%3AMonoid"
+>Monoid</A
+> w =&gt; <A HREF="Control-Monad-CPS-Writer.html#t%3AWriter%27"
+>Writer'</A
+> w a -&gt; (a, w)</TD
+><TD CLASS="declbut"
+><A HREF="src/Control-Monad-CPS-Writer.html#runWriter%27"
+>Source</A
+></TD
+></TR
+></TABLE
+></TD
+></TR
+><TR
+><TD CLASS="s15"
+></TD
+></TR
+><TR
+><TD CLASS="botbar"
+>Produced by <A HREF="http://www.haskell.org/haddock/"
+>Haddock</A
+> version 2.3.0</TD
+></TR
+></TABLE
+></BODY
+></HTML
+>
addfile ./doc/html/monad-cps/Control-Monad-CPS.html
hunk ./doc/html/monad-cps/Control-Monad-CPS.html 1
+<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd">
+<!--Rendered using the Haskell Html Library v0.2-->
+<HTML
+><HEAD
+><META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=UTF-8"
+><TITLE
+>Control.Monad.CPS</TITLE
+><LINK HREF="haddock.css" REL="stylesheet" TYPE="text/css"
+><SCRIPT SRC="haddock-util.js" TYPE="text/javascript"
+></SCRIPT
+></HEAD
+><BODY
+><TABLE CLASS="vanilla" CELLSPACING="0" CELLPADDING="0"
+><TR
+><TD CLASS="topbar"
+><TABLE CLASS="vanilla" CELLSPACING="0" CELLPADDING="0"
+><TR
+><TD
+><IMG SRC="haskell_icon.gif" WIDTH="16" HEIGHT="16" ALT=" "
+></TD
+><TD CLASS="title"
+>monad-cps-0.0.2: CPS implementations of common monads.</TD
+><TD CLASS="topbut"
+><A HREF="src/Control-Monad-CPS.html"
+>Source code</A
+></TD
+><TD CLASS="topbut"
+><A HREF="index.html"
+>Contents</A
+></TD
+><TD CLASS="topbut"
+><A HREF="doc-index.html"
+>Index</A
+></TD
+></TR
+></TABLE
+></TD
+></TR
+><TR
+><TD CLASS="modulebar"
+><TABLE CLASS="vanilla" CELLSPACING="0" CELLPADDING="0"
+><TR
+><TD
+><FONT SIZE="6"
+>Control.Monad.CPS</FONT
+></TD
+></TR
+></TABLE
+></TD
+></TR
+><TR
+><TD CLASS="s15"
+></TD
+></TR
+><TR
+><TD CLASS="s15"
+></TD
+></TR
+><TR
+><TD CLASS="s15"
+></TD
+></TR
+><TR
+><TD CLASS="section1"
+>Documentation</TD
+></TR
+><TR
+><TD CLASS="s15"
+></TD
+></TR
+><TR
+><TD CLASS="decl"
+>module <A HREF="Control-Monad-CPS-Identity.html"
+>Control.Monad.CPS.Identity</A
+></TD
+></TR
+><TR
+><TD CLASS="s15"
+></TD
+></TR
+><TR
+><TD CLASS="decl"
+>module <A HREF="Control-Monad-CPS-Reader.html"
+>Control.Monad.CPS.Reader</A
+></TD
+></TR
+><TR
+><TD CLASS="s15"
+></TD
+></TR
+><TR
+><TD CLASS="decl"
+>module <A HREF="Control-Monad-CPS-Writer.html"
+>Control.Monad.CPS.Writer</A
+></TD
+></TR
+><TR
+><TD CLASS="s15"
+></TD
+></TR
+><TR
+><TD CLASS="decl"
+>module <A HREF="Control-Monad-CPS-State.html"
+>Control.Monad.CPS.State</A
+></TD
+></TR
+><TR
+><TD CLASS="s15"
+></TD
+></TR
+><TR
+><TD CLASS="decl"
+>module <A HREF="Control-Monad-CPS-Cont.html"
+>Control.Monad.CPS.Cont</A
+></TD
+></TR
+><TR
+><TD CLASS="s15"
+></TD
+></TR
+><TR
+><TD CLASS="decl"
+>module <A HREF="Control-Monad-CPS-Codensity.html"
+>Control.Monad.CPS.Codensity</A
+></TD
+></TR
+><TR
+><TD CLASS="s15"
+></TD
+></TR
+><TR
+><TD CLASS="decl"
+>module <A HREF="Control-Monad-CPS-Ran.html"
+>Control.Monad.CPS.Ran</A
+></TD
+></TR
+><TR
+><TD CLASS="s15"
+></TD
+></TR
+><TR
+><TD CLASS="botbar"
+>Produced by <A HREF="http://www.haskell.org/haddock/"
+>Haddock</A
+> version 2.3.0</TD
+></TR
+></TABLE
+></BODY
+></HTML
+>
addfile ./doc/html/monad-cps/doc-index.html
hunk ./doc/html/monad-cps/doc-index.html 1
+<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd">
+<!--Rendered using the Haskell Html Library v0.2-->
+<HTML
+><HEAD
+><META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=UTF-8"
+><TITLE
+>monad-cps-0.0.2: CPS implementations of common monads. (Index)</TITLE
+><LINK HREF="haddock.css" REL="stylesheet" TYPE="text/css"
+><SCRIPT SRC="haddock-util.js" TYPE="text/javascript"
+></SCRIPT
+></HEAD
+><BODY
+><TABLE CLASS="vanilla" CELLSPACING="0" CELLPADDING="0"
+><TR
+><TD CLASS="topbar"
+><TABLE CLASS="vanilla" CELLSPACING="0" CELLPADDING="0"
+><TR
+><TD
+><IMG SRC="haskell_icon.gif" WIDTH="16" HEIGHT="16" ALT=" "
+></TD
+><TD CLASS="title"
+>monad-cps-0.0.2: CPS implementations of common monads.</TD
+><TD CLASS="topbut"
+><A HREF="index.html"
+>Contents</A
+></TD
+><TD CLASS="topbut"
+><A HREF="doc-index.html"
+>Index</A
+></TD
+></TR
+></TABLE
+></TD
+></TR
+><TR
+><TD COLSPAN="2" STYLE="padding-top:5px;"
+><FORM onsubmit="full_search(); return false;" ACTION=""
+>Search: <INPUT ID="searchbox" onkeyup="quick_search()"
+> <INPUT VALUE="Search" TYPE="submit"
+> <SPAN ID="searchmsg"
+> </SPAN
+></FORM
+></TD
+></TR
+><TR
+><TD
+><TABLE ID="indexlist" CELLPADDING="0" CELLSPACING="5"
+><TR CLASS="indexrow"
+><TD CLASS="indexentry"
+>ask</TD
+><TD CLASS="indexlinks"
+>Control.Monad.CPS.Reader, Control.Monad.CPS</TD
+></TR
+><TR CLASS="indexrow"
+><TD CLASS="indexentry"
+>asks</TD
+><TD CLASS="indexlinks"
+>Control.Monad.CPS.Reader, Control.Monad.CPS</TD
+></TR
+><TR CLASS="indexrow"
+><TD CLASS="indexentry"
+>callCC</TD
+><TD CLASS="indexlinks"
+>Control.Monad.CPS.Cont, Control.Monad.CPS</TD
+></TR
+><TR CLASS="indexrow"
+><TD CLASS="indexentry"
+>censor</TD
+><TD CLASS="indexlinks"
+>Control.Monad.CPS.Writer, Control.Monad.CPS</TD
+></TR
+><TR CLASS="indexrow"
+><TD CLASS="indexentry" COLSPAN="2"
+>Codensity</TD
+></TR
+><TR CLASS="indexrow"
+><TD CLASS="indexannot"
+>1 (Type/Class)</TD
+><TD CLASS="indexlinks"
+><A HREF="Control-Monad-CPS-Codensity.html#t%3ACodensity"
+>Control.Monad.CPS.Codensity</A
+>, Control.Monad.CPS</TD
+></TR
+><TR CLASS="indexrow"
+><TD CLASS="indexannot"
+>2 (Data Constructor)</TD
+><TD CLASS="indexlinks"
+><A HREF="Control-Monad-CPS-Codensity.html#v%3ACodensity"
+>Control.Monad.CPS.Codensity</A
+>, Control.Monad.CPS</TD
+></TR
+><TR CLASS="indexrow"
+><TD CLASS="indexentry"
+>Cont</TD
+><TD CLASS="indexlinks"
+><A HREF="Control-Monad-CPS-Cont.html#t%3ACont"
+>Control.Monad.CPS.Cont</A
+>, Control.Monad.CPS</TD
+></TR
+><TR CLASS="indexrow"
+><TD CLASS="indexentry"
+>get</TD
+><TD CLASS="indexlinks"
+>Control.Monad.CPS.State, Control.Monad.CPS</TD
+></TR
+><TR CLASS="indexrow"
+><TD CLASS="indexentry"
+>gets</TD
+><TD CLASS="indexlinks"
+>Control.Monad.CPS.State, Control.Monad.CPS</TD
+></TR
+><TR CLASS="indexrow"
+><TD CLASS="indexentry"
+>idCont</TD
+><TD CLASS="indexlinks"
+><A HREF="Control-Monad-CPS-Cont.html#v%3AidCont"
+>Control.Monad.CPS.Cont</A
+>, Control.Monad.CPS</TD
+></TR
+><TR CLASS="indexrow"
+><TD CLASS="indexentry" COLSPAN="2"
+>Identity</TD
+></TR
+><TR CLASS="indexrow"
+><TD CLASS="indexannot"
+>1 (Type/Class)</TD
+><TD CLASS="indexlinks"
+><A HREF="Control-Monad-CPS-Identity.html#t%3AIdentity"
+>Control.Monad.CPS.Identity</A
+>, Control.Monad.CPS</TD
+></TR
+><TR CLASS="indexrow"
+><TD CLASS="indexannot"
+>2 (Data Constructor)</TD
+><TD CLASS="indexlinks"
+><A HREF="Control-Monad-CPS-Identity.html#v%3AIdentity"
+>Control.Monad.CPS.Identity</A
+>, Control.Monad.CPS</TD
+></TR
+><TR CLASS="indexrow"
+><TD CLASS="indexentry"
+>listen</TD
+><TD CLASS="indexlinks"
+>Control.Monad.CPS.Writer, Control.Monad.CPS</TD
+></TR
+><TR CLASS="indexrow"
+><TD CLASS="indexentry"
+>listens</TD
+><TD CLASS="indexlinks"
+>Control.Monad.CPS.Writer, Control.Monad.CPS</TD
+></TR
+><TR CLASS="indexrow"
+><TD CLASS="indexentry"
+>local</TD
+><TD CLASS="indexlinks"
+>Control.Monad.CPS.Reader, Control.Monad.CPS</TD
+></TR
+><TR CLASS="indexrow"
+><TD CLASS="indexentry"
+>mapCont</TD
+><TD CLASS="indexlinks"
+><A HREF="Control-Monad-CPS-Cont.html#v%3AmapCont"
+>Control.Monad.CPS.Cont</A
+>, Control.Monad.CPS</TD
+></TR
+><TR CLASS="indexrow"
+><TD CLASS="indexentry"
+>modify</TD
+><TD CLASS="indexlinks"
+>Control.Monad.CPS.State, Control.Monad.CPS</TD
+></TR
+><TR CLASS="indexrow"
+><TD CLASS="indexentry"
+>MonadCont</TD
+><TD CLASS="indexlinks"
+>Control.Monad.CPS.Cont, Control.Monad.CPS</TD
+></TR
+><TR CLASS="indexrow"
+><TD CLASS="indexentry"
+>MonadReader</TD
+><TD CLASS="indexlinks"
+>Control.Monad.CPS.Reader, Control.Monad.CPS</TD
+></TR
+><TR CLASS="indexrow"
+><TD CLASS="indexentry"
+>MonadState</TD
+><TD CLASS="indexlinks"
+>Control.Monad.CPS.State, Control.Monad.CPS</TD
+></TR
+><TR CLASS="indexrow"
+><TD CLASS="indexentry"
+>MonadWriter</TD
+><TD CLASS="indexlinks"
+>Control.Monad.CPS.Writer, Control.Monad.CPS</TD
+></TR
+><TR CLASS="indexrow"
+><TD CLASS="indexentry"
+>pass</TD
+><TD CLASS="indexlinks"
+>Control.Monad.CPS.Writer, Control.Monad.CPS</TD
+></TR
+><TR CLASS="indexrow"
+><TD CLASS="indexentry"
+>put</TD
+><TD CLASS="indexlinks"
+>Control.Monad.CPS.State, Control.Monad.CPS</TD
+></TR
+><TR CLASS="indexrow"
+><TD CLASS="indexentry" COLSPAN="2"
+>Ran</TD
+></TR
+><TR CLASS="indexrow"
+><TD CLASS="indexannot"
+>1 (Type/Class)</TD
+><TD CLASS="indexlinks"
+><A HREF="Control-Monad-CPS-Ran.html#t%3ARan"
+>Control.Monad.CPS.Ran</A
+>, Control.Monad.CPS</TD
+></TR
+><TR CLASS="indexrow"
+><TD CLASS="indexannot"
+>2 (Data Constructor)</TD
+><TD CLASS="indexlinks"
+><A HREF="Control-Monad-CPS-Ran.html#v%3ARan"
+>Control.Monad.CPS.Ran</A
+>, Control.Monad.CPS</TD
+></TR
+><TR CLASS="indexrow"
+><TD CLASS="indexentry" COLSPAN="2"
+>Reader</TD
+></TR
+><TR CLASS="indexrow"
+><TD CLASS="indexannot"
+>1 (Type/Class)</TD
+><TD CLASS="indexlinks"
+><A HREF="Control-Monad-CPS-Reader.html#t%3AReader"
+>Control.Monad.CPS.Reader</A
+>, Control.Monad.CPS</TD
+></TR
+><TR CLASS="indexrow"
+><TD CLASS="indexannot"
+>2 (Data Constructor)</TD
+><TD CLASS="indexlinks"
+><A HREF="Control-Monad-CPS-Reader.html#v%3AReader"
+>Control.Monad.CPS.Reader</A
+>, Control.Monad.CPS</TD
+></TR
+><TR CLASS="indexrow"
+><TD CLASS="indexentry"
+>reset</TD
+><TD CLASS="indexlinks"
+><A HREF="Control-Monad-CPS-Cont.html#v%3Areset"
+>Control.Monad.CPS.Cont</A
+>, Control.Monad.CPS</TD
+></TR
+><TR CLASS="indexrow"
+><TD CLASS="indexentry"
+>runCodensity</TD
+><TD CLASS="indexlinks"
+><A HREF="Control-Monad-CPS-Codensity.html#v%3ArunCodensity"
+>Control.Monad.CPS.Codensity</A
+>, Control.Monad.CPS</TD
+></TR
+><TR CLASS="indexrow"
+><TD CLASS="indexentry"
+>runCodensityApp</TD
+><TD CLASS="indexlinks"
+><A HREF="Control-Monad-CPS-Codensity.html#v%3ArunCodensityApp"
+>Control.Monad.CPS.Codensity</A
+>, Control.Monad.CPS</TD
+></TR
+><TR CLASS="indexrow"
+><TD CLASS="indexentry"
+>runCont</TD
+><TD CLASS="indexlinks"
+><A HREF="Control-Monad-CPS-Cont.html#v%3ArunCont"
+>Control.Monad.CPS.Cont</A
+>, Control.Monad.CPS</TD
+></TR
+><TR CLASS="indexrow"
+><TD CLASS="indexentry"
+>runIdentity</TD
+><TD CLASS="indexlinks"
+><A HREF="Control-Monad-CPS-Identity.html#v%3ArunIdentity"
+>Control.Monad.CPS.Identity</A
+>, Control.Monad.CPS</TD
+></TR
+><TR CLASS="indexrow"
+><TD CLASS="indexentry"
+>runRan</TD
+><TD CLASS="indexlinks"
+><A HREF="Control-Monad-CPS-Ran.html#v%3ArunRan"
+>Control.Monad.CPS.Ran</A
+>, Control.Monad.CPS</TD
+></TR
+><TR CLASS="indexrow"
+><TD CLASS="indexentry"
+>runReader</TD
+><TD CLASS="indexlinks"
+><A HREF="Control-Monad-CPS-Reader.html#v%3ArunReader"
+>Control.Monad.CPS.Reader</A
+>, Control.Monad.CPS</TD
+></TR
+><TR CLASS="indexrow"
+><TD CLASS="indexentry"
+>runRWS</TD
+><TD CLASS="indexlinks"
+><A HREF="Control-Monad-CPS-RWS.html#v%3ArunRWS"
+>Control.Monad.CPS.RWS</A
+></TD
+></TR
+><TR CLASS="indexrow"
+><TD CLASS="indexentry"
+>runState</TD
+><TD CLASS="indexlinks"
+><A HREF="Control-Monad-CPS-State.html#v%3ArunState"
+>Control.Monad.CPS.State</A
+>, Control.Monad.CPS</TD
+></TR
+><TR CLASS="indexrow"
+><TD CLASS="indexentry"
+>runState'</TD
+><TD CLASS="indexlinks"
+><A HREF="Control-Monad-CPS-State.html#v%3ArunState%27"
+>Control.Monad.CPS.State</A
+>, Control.Monad.CPS</TD
+></TR
+><TR CLASS="indexrow"
+><TD CLASS="indexentry"
+>runWriter</TD
+><TD CLASS="indexlinks"
+><A HREF="Control-Monad-CPS-Writer.html#v%3ArunWriter"
+>Control.Monad.CPS.Writer</A
+>, Control.Monad.CPS</TD
+></TR
+><TR CLASS="indexrow"
+><TD CLASS="indexentry"
+>runWriter'</TD
+><TD CLASS="indexlinks"
+><A HREF="Control-Monad-CPS-Writer.html#v%3ArunWriter%27"
+>Control.Monad.CPS.Writer</A
+>, Control.Monad.CPS</TD
+></TR
+><TR CLASS="indexrow"
+><TD CLASS="indexentry" COLSPAN="2"
+>RWS</TD
+></TR
+><TR CLASS="indexrow"
+><TD CLASS="indexannot"
+>1 (Type/Class)</TD
+><TD CLASS="indexlinks"
+><A HREF="Control-Monad-CPS-RWS.html#t%3ARWS"
+>Control.Monad.CPS.RWS</A
+></TD
+></TR
+><TR CLASS="indexrow"
+><TD CLASS="indexannot"
+>2 (Data Constructor)</TD
+><TD CLASS="indexlinks"
+><A HREF="Control-Monad-CPS-RWS.html#v%3ARWS"
+>Control.Monad.CPS.RWS</A
+></TD
+></TR
+><TR CLASS="indexrow"
+><TD CLASS="indexentry"
+>shift</TD
+><TD CLASS="indexlinks"
+><A HREF="Control-Monad-CPS-Cont.html#v%3Ashift"
+>Control.Monad.CPS.Cont</A
+>, Control.Monad.CPS</TD
+></TR
+><TR CLASS="indexrow"
+><TD CLASS="indexentry"
+>State</TD
+><TD CLASS="indexlinks"
+><A HREF="Control-Monad-CPS-State.html#t%3AState"
+>Control.Monad.CPS.State</A
+>, Control.Monad.CPS</TD
+></TR
+><TR CLASS="indexrow"
+><TD CLASS="indexentry"
+>State'</TD
+><TD CLASS="indexlinks"
+><A HREF="Control-Monad-CPS-State.html#t%3AState%27"
+>Control.Monad.CPS.State</A
+>, Control.Monad.CPS</TD
+></TR
+><TR CLASS="indexrow"
+><TD CLASS="indexentry"
+>tell</TD
+><TD CLASS="indexlinks"
+>Control.Monad.CPS.Writer, Control.Monad.CPS</TD
+></TR
+><TR CLASS="indexrow"
+><TD CLASS="indexentry"
+>unCodensity</TD
+><TD CLASS="indexlinks"
+><A HREF="Control-Monad-CPS-Codensity.html#v%3AunCodensity"
+>Control.Monad.CPS.Codensity</A
+>, Control.Monad.CPS</TD
+></TR
+><TR CLASS="indexrow"
+><TD CLASS="indexentry"
+>unIdentity</TD
+><TD CLASS="indexlinks"
+><A HREF="Control-Monad-CPS-Identity.html#v%3AunIdentity"
+>Control.Monad.CPS.Identity</A
+>, Control.Monad.CPS</TD
+></TR
+><TR CLASS="indexrow"
+><TD CLASS="indexentry"
+>unReader</TD
+><TD CLASS="indexlinks"
+><A HREF="Control-Monad-CPS-Reader.html#v%3AunReader"
+>Control.Monad.CPS.Reader</A
+>, Control.Monad.CPS</TD
+></TR
+><TR CLASS="indexrow"
+><TD CLASS="indexentry"
+>unRWS</TD
+><TD CLASS="indexlinks"
+><A HREF="Control-Monad-CPS-RWS.html#v%3AunRWS"
+>Control.Monad.CPS.RWS</A
+></TD
+></TR
+><TR CLASS="indexrow"
+><TD CLASS="indexentry"
+>unWriter</TD
+><TD CLASS="indexlinks"
+><A HREF="Control-Monad-CPS-Writer.html#v%3AunWriter"
+>Control.Monad.CPS.Writer</A
+>, Control.Monad.CPS</TD
+></TR
+><TR CLASS="indexrow"
+><TD CLASS="indexentry"
+>withCont</TD
+><TD CLASS="indexlinks"
+><A HREF="Control-Monad-CPS-Cont.html#v%3AwithCont"
+>Control.Monad.CPS.Cont</A
+>, Control.Monad.CPS</TD
+></TR
+><TR CLASS="indexrow"
+><TD CLASS="indexentry" COLSPAN="2"
+>Writer</TD
+></TR
+><TR CLASS="indexrow"
+><TD CLASS="indexannot"
+>1 (Type/Class)</TD
+><TD CLASS="indexlinks"
+><A HREF="Control-Monad-CPS-Writer.html#t%3AWriter"
+>Control.Monad.CPS.Writer</A
+>, Control.Monad.CPS</TD
+></TR
+><TR CLASS="indexrow"
+><TD CLASS="indexannot"
+>2 (Data Constructor)</TD
+><TD CLASS="indexlinks"
+><A HREF="Control-Monad-CPS-Writer.html#v%3AWriter"
+>Control.Monad.CPS.Writer</A
+>, Control.Monad.CPS</TD
+></TR
+><TR CLASS="indexrow"
+><TD CLASS="indexentry"
+>Writer'</TD
+><TD CLASS="indexlinks"
+><A HREF="Control-Monad-CPS-Writer.html#t%3AWriter%27"
+>Control.Monad.CPS.Writer</A
+>, Control.Monad.CPS</TD
+></TR
+></TABLE
+></TD
+></TR
+></TABLE
+></BODY
+></HTML
+>
addfile ./doc/html/monad-cps/haddock-util.js
hunk ./doc/html/monad-cps/haddock-util.js 1
+// Haddock JavaScript utilities
+function toggle(button,id)
+{
+   var n = document.getElementById(id).style;
+   if (n.display == "none")
+   {
+    button.src = "minus.gif";
+    n.display = "block";
+   }
+   else
+   {
+    button.src = "plus.gif";
+    n.display = "none";
+   }
+}
+
+
+var max_results = 75; // 50 is not enough to search for map in the base libraries
+var shown_range = null;
+var last_search = null;
+
+function quick_search()
+{
+    perform_search(false);
+}
+
+function full_search()
+{
+    perform_search(true);
+}
+
+
+function perform_search(full)
+{
+    var text = document.getElementById("searchbox").value.toLowerCase();
+    if (text == last_search && !full) return;
+    last_search = text;
+    
+    var table = document.getElementById("indexlist");
+    var status = document.getElementById("searchmsg");
+    var children = table.firstChild.childNodes;
+    
+    // first figure out the first node with the prefix
+    var first = bisect(-1);
+    var last = (first == -1 ? -1 : bisect(1));
+
+    if (first == -1)
+    {
+        table.className = "";
+        status.innerHTML = "No results found, displaying all";
+    }
+    else if (first == 0 && last == children.length - 1)
+    {
+        table.className = "";
+        status.innerHTML = "";
+    }
+    else if (last - first >= max_results && !full)
+    {
+        table.className = "";
+        status.innerHTML = "More than " + max_results + ", press Search to display";
+    }
+    else
+    {
+        // decide what you need to clear/show
+        if (shown_range)
+            setclass(shown_range[0], shown_range[1], "indexrow");
+        setclass(first, last, "indexshow");
+        shown_range = [first, last];
+        table.className = "indexsearch";
+        status.innerHTML = "";
+    }
+
+    
+    function setclass(first, last, status)
+    {
+        for (var i = first; i <= last; i++)
+        {
+            children[i].className = status;
+        }
+    }
+    
+    
+    // do a binary search, treating 0 as ...
+    // return either -1 (no 0's found) or location of most far match
+    function bisect(dir)
+    {
+        var first = 0, finish = children.length - 1;
+        var mid, success = false;
+
+        while (finish - first > 3)
+        {
+            mid = Math.floor((finish + first) / 2);
+
+            var i = checkitem(mid);
+            if (i == 0) i = dir;
+            if (i == -1)
+                finish = mid;
+            else
+                first = mid;
+        }
+        var a = (dir == 1 ? first : finish);
+        var b = (dir == 1 ? finish : first);
+        for (var i = b; i != a - dir; i -= dir)
+        {
+            if (checkitem(i) == 0) return i;
+        }
+        return -1;
+    }    
+    
+    
+    // from an index, decide what the result is
+    // 0 = match, -1 is lower, 1 is higher
+    function checkitem(i)
+    {
+        var s = getitem(i).toLowerCase().substr(0, text.length);
+        if (s == text) return 0;
+        else return (s > text ? -1 : 1);
+    }
+    
+    
+    // from an index, get its string
+    // this abstracts over alternates
+    function getitem(i)
+    {
+        for ( ; i >= 0; i--)
+        {
+            var s = children[i].firstChild.firstChild.data;
+            if (s.indexOf(' ') == -1)
+                return s;
+        }
+        return ""; // should never be reached
+    }
+}
addfile ./doc/html/monad-cps/haddock.css
hunk ./doc/html/monad-cps/haddock.css 1
+/* -------- Global things --------- */
+
+BODY { 
+  background-color: #ffffff;
+  color: #000000;
+  font-family: sans-serif;
+  } 
+
+A:link    { color: #0000e0; text-decoration: none }
+A:visited { color: #0000a0; text-decoration: none }
+A:hover   { background-color: #e0e0ff; text-decoration: none }
+
+TABLE.vanilla {
+  width: 100%;
+  border-width: 0px;
+  /* I can't seem to specify cellspacing or cellpadding properly using CSS... */
+}
+
+TABLE.vanilla2 {
+  border-width: 0px;
+}
+
+/* <TT> font is a little too small in MSIE */
+TT  { font-size: 100%; }
+PRE { font-size: 100%; }
+
+LI P { margin: 0pt } 
+
+TD {
+  border-width: 0px;
+}
+
+TABLE.narrow {
+  border-width: 0px;
+}
+
+TD.s8  {  height: 8px;  }
+TD.s15 {  height: 15px; }
+
+SPAN.keyword { text-decoration: underline; }
+
+/* Resize the buttom image to match the text size */
+IMG.coll { width : 0.75em; height: 0.75em; margin-bottom: 0; margin-right: 0.5em }
+
+/* --------- Contents page ---------- */
+
+DIV.node {
+  padding-left: 3em;
+}
+
+DIV.cnode {
+  padding-left: 1.75em;
+}
+
+SPAN.pkg {
+  position: absolute;
+  left: 50em;
+}
+
+/* --------- Documentation elements ---------- */
+
+TD.children {
+  padding-left: 25px;
+  }
+
+TD.synopsis {
+  padding: 2px;
+  background-color: #f0f0f0;
+  font-family: monospace
+ }
+
+TD.decl { 
+  padding: 2px;
+  background-color: #f0f0f0; 
+  font-family: monospace;
+  vertical-align: top;
+  }
+
+TD.topdecl {
+  padding: 2px;
+  background-color: #f0f0f0;
+  font-family: monospace;
+  vertical-align: top;
+}
+
+TABLE.declbar {
+  border-spacing: 0px;
+ }
+
+TD.declname {
+  width: 100%;
+ }
+
+TD.declbut {
+  padding-left: 5px;
+  padding-right: 5px;
+  border-left-width: 1px;
+  border-left-color: #000099;
+  border-left-style: solid;
+  white-space: nowrap;
+  font-size: small;
+ }
+
+/* 
+  arg is just like decl, except that wrapping is not allowed.  It is
+  used for function and constructor arguments which have a text box
+  to the right, where if wrapping is allowed the text box squashes up
+  the declaration by wrapping it.
+*/
+TD.arg { 
+  padding: 2px;
+  background-color: #f0f0f0; 
+  font-family: monospace;
+  vertical-align: top;
+  white-space: nowrap;
+  }
+
+TD.recfield { padding-left: 20px }
+
+TD.doc  { 
+  padding-top: 2px;
+  padding-left: 10px;
+  }
+
+TD.ndoc  { 
+  padding: 2px;
+  }
+
+TD.rdoc  { 
+  padding: 2px;
+  padding-left: 10px;
+  width: 100%;
+  }
+
+TD.body  { 
+  padding-left: 10px
+  }
+
+TD.pkg {
+  width: 100%;
+  padding-left: 10px
+}
+
+TABLE.indexsearch TR.indexrow {
+  display: none;
+}
+TABLE.indexsearch TR.indexshow {
+  display: table-row;
+}
+
+TD.indexentry {
+  vertical-align: top;
+  padding-right: 10px
+  }
+
+TD.indexannot {
+  vertical-align: top;
+  padding-left: 20px;
+  white-space: nowrap
+  }
+
+TD.indexlinks {
+  width: 100%
+  }
+
+/* ------- Section Headings ------- */
+
+TD.section1 {
+  padding-top: 15px;
+  font-weight: bold;
+  font-size: 150%
+  }
+
+TD.section2 {
+  padding-top: 10px;
+  font-weight: bold;
+  font-size: 130%
+  }
+
+TD.section3 {
+  padding-top: 5px;
+  font-weight: bold;
+  font-size: 110%
+  }
+
+TD.section4 {
+  font-weight: bold;
+  font-size: 100%
+  }
+
+/* -------------- The title bar at the top of the page */
+
+TD.infohead {
+  color: #ffffff;
+  font-weight: bold;
+  padding-right: 10px;
+  text-align: left;
+}
+
+TD.infoval {
+  color: #ffffff;
+  padding-right: 10px;
+  text-align: left;
+}
+
+TD.topbar {
+  background-color: #000099;
+  padding: 5px;
+}
+
+TD.title {
+  color: #ffffff;
+  padding-left: 10px;
+  width: 100%
+  }
+
+TD.topbut {
+  padding-left: 5px;
+  padding-right: 5px;
+  border-left-width: 1px;
+  border-left-color: #ffffff;
+  border-left-style: solid;
+  white-space: nowrap;
+  }
+
+TD.topbut A:link {
+  color: #ffffff
+  }
+
+TD.topbut A:visited {
+  color: #ffff00
+  }
+
+TD.topbut A:hover {
+  background-color: #6060ff;
+  }
+
+TD.topbut:hover {
+  background-color: #6060ff
+  }
+
+TD.modulebar { 
+  background-color: #0077dd;
+  padding: 5px;
+  border-top-width: 1px;
+  border-top-color: #ffffff;
+  border-top-style: solid;
+  }
+
+/* --------- The page footer --------- */
+
+TD.botbar {
+  background-color: #000099;
+  color: #ffffff;
+  padding: 5px
+  }
+TD.botbar A:link {
+  color: #ffffff;
+  text-decoration: underline
+  }
+TD.botbar A:visited {
+  color: #ffff00
+  }
+TD.botbar A:hover {
+  background-color: #6060ff
+  }
+
addfile ./doc/html/monad-cps/haskell_icon.gif
binary ./doc/html/monad-cps/haskell_icon.gif
oldhex
*
newhex
*47494638376110001000f70f00000000800000008000808000000080800080008080c0c0c08080
*80ff000000ff00ffff000000ffff00ff00ffffffffff0000000000000000000000000000000000
*000000000000000000000000000000000000000000000000000000000000000000000000000000
*000000000000000000000000000000000000000000000000000000000000000000000000000000
*000000000000000000000000000000000000000000000000000000000000000000000000000000
*000000000000000000000000000000000000000000000000000000000000000000000000000000
*000000000000000000000000000000000000000000000000000000000000000000000000000000
*000000000000000000000000000000000000000000000000000000000000000000000000000000
*000000000000000000000000000000000000000000000000000000000000000000000000000000
*000000000000000000000000000000000000000000000000000000000000000000000000000000
*000000000000000000000000000000000000000000000000000000000000000000000000000000
*000000000000000000000000000000000000000000000000000000000000000000000000000000
*000000000000000000000000000000000000000000000000000000000000000000000000000000
*000000000000000000000000000000000000000000000000000000000000000000000000000000
*000000000000000000000000000000000000000000000000000000000000000000000000000000
*000000000000000000000000000000000000000000000000000000000000000000000000000000
*000000000000000000000000000000000000000000000000000000000000000000000000000000
*000000000000000000000000000000000000000000000000000000000000000000000000000000
*000000000000000000000000000000000000000000000000000000000000000000000000000000
*000000000000000000000000000000000000000000000000000000000000000000000000000000
*0021f90401000000002c000000001000100007086c0001007840b0a0418202073e38b0b021c387
*07143e2440c0a143040e091cd0787021c686151f84347800e343901d4b12646870e44a930d0952
*3ca832a6cc990555b2bc2992e4c79d3847ea2c88b3a7c89a2c8b8aa43874e941a60810003840b5
*aa55aa511346ddca75abc080003b
addfile ./doc/html/monad-cps/index.html
hunk ./doc/html/monad-cps/index.html 1
+<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd">
+<!--Rendered using the Haskell Html Library v0.2-->
+<HTML
+><HEAD
+><META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=UTF-8"
+><TITLE
+>monad-cps-0.0.2: CPS implementations of common monads.</TITLE
+><LINK HREF="haddock.css" REL="stylesheet" TYPE="text/css"
+><SCRIPT SRC="haddock-util.js" TYPE="text/javascript"
+></SCRIPT
+></HEAD
+><BODY
+><TABLE CLASS="vanilla" CELLSPACING="0" CELLPADDING="0"
+><TR
+><TD CLASS="topbar"
+><TABLE CLASS="vanilla" CELLSPACING="0" CELLPADDING="0"
+><TR
+><TD
+><IMG SRC="haskell_icon.gif" WIDTH="16" HEIGHT="16" ALT=" "
+></TD
+><TD CLASS="title"
+>monad-cps-0.0.2: CPS implementations of common monads.</TD
+><TD CLASS="topbut"
+><A HREF="index.html"
+>Contents</A
+></TD
+><TD CLASS="topbut"
+><A HREF="doc-index.html"
+>Index</A
+></TD
+></TR
+></TABLE
+></TD
+></TR
+><TR
+><TD CLASS="section1"
+>monad-cps-0.0.2: CPS implementations of common monads.</TD
+></TR
+><TR
+><TD CLASS="doc"
+>.
+</TD
+></TR
+><TR
+><TD CLASS="section1"
+>Modules</TD
+></TR
+><TR
+><TD
+><TABLE CLASS="vanilla2" CELLSPACING="0" CELLPADDING="0"
+><TR
+><TD STYLE="width: 50em"
+><IMG SRC="minus.gif" CLASS="coll" ONCLICK="toggle(this,'n:0')" ALT="show/hide"
+>Control</TD
+><TD
+></TD
+><TD
+></TD
+></TR
+><TR
+><TD STYLE="padding: 0; padding-left: 2em" COLSPAN="3"
+><TABLE CLASS="vanilla2" CELLSPACING="0" CELLPADDING="0" ID="n:0" STYLE="display:block;"
+><TR
+><TD STYLE="width: 48em"
+><IMG SRC="minus.gif" CLASS="coll" ONCLICK="toggle(this,'n:1')" ALT="show/hide"
+>Monad</TD
+><TD
+></TD
+><TD
+></TD
+></TR
+><TR
+><TD STYLE="padding: 0; padding-left: 2em" COLSPAN="3"
+><TABLE CLASS="vanilla2" CELLSPACING="0" CELLPADDING="0" ID="n:1" STYLE="display:block;"
+><TR
+><TD STYLE="width: 46em"
+><IMG SRC="minus.gif" CLASS="coll" ONCLICK="toggle(this,'n:2')" ALT="show/hide"
+><A HREF="Control-Monad-CPS.html"
+>Control.Monad.CPS</A
+></TD
+><TD
+></TD
+><TD
+></TD
+></TR
+><TR
+><TD STYLE="padding: 0; padding-left: 2em" COLSPAN="3"
+><TABLE CLASS="vanilla2" CELLSPACING="0" CELLPADDING="0" ID="n:2" STYLE="display:block;"
+><TR
+><TD STYLE="padding-left: 1.25em;width: 44em"
+><A HREF="Control-Monad-CPS-Codensity.html"
+>Control.Monad.CPS.Codensity</A
+></TD
+><TD
+></TD
+><TD
+></TD
+></TR
+><TR
+><TD STYLE="padding-left: 1.25em;width: 44em"
+><A HREF="Control-Monad-CPS-Cont.html"
+>Control.Monad.CPS.Cont</A
+></TD
+><TD
+></TD
+><TD
+></TD
+></TR
+><TR
+><TD STYLE="padding-left: 1.25em;width: 44em"
+><A HREF="Control-Monad-CPS-Identity.html"
+>Control.Monad.CPS.Identity</A
+></TD
+><TD
+></TD
+><TD
+></TD
+></TR
+><TR
+><TD STYLE="padding-left: 1.25em;width: 44em"
+><A HREF="Control-Monad-CPS-RWS.html"
+>Control.Monad.CPS.RWS</A
+></TD
+><TD
+></TD
+><TD
+></TD
+></TR
+><TR
+><TD STYLE="padding-left: 1.25em;width: 44em"
+><A HREF="Control-Monad-CPS-Ran.html"
+>Control.Monad.CPS.Ran</A
+></TD
+><TD
+></TD
+><TD
+></TD
+></TR
+><TR
+><TD STYLE="padding-left: 1.25em;width: 44em"
+><A HREF="Control-Monad-CPS-Reader.html"
+>Control.Monad.CPS.Reader</A
+></TD
+><TD
+></TD
+><TD
+></TD
+></TR
+><TR
+><TD STYLE="padding-left: 1.25em;width: 44em"
+><A HREF="Control-Monad-CPS-State.html"
+>Control.Monad.CPS.State</A
+></TD
+><TD
+></TD
+><TD
+></TD
+></TR
+><TR
+><TD STYLE="padding-left: 1.25em;width: 44em"
+><A HREF="Control-Monad-CPS-Writer.html"
+>Control.Monad.CPS.Writer</A
+></TD
+><TD
+></TD
+><TD
+></TD
+></TR
+></TABLE
+></TD
+></TR
+></TABLE
+></TD
+></TR
+></TABLE
+></TD
+></TR
+></TABLE
+></TD
+></TR
+><TR
+><TD CLASS="s15"
+></TD
+></TR
+><TR
+><TD CLASS="botbar"
+>Produced by <A HREF="http://www.haskell.org/haddock/"
+>Haddock</A
+> version 2.3.0</TD
+></TR
+></TABLE
+></BODY
+></HTML
+>
addfile ./doc/html/monad-cps/minus.gif
binary ./doc/html/monad-cps/minus.gif
oldhex
*
newhex
*47494638396109000900910000fefefe8282820202020000002c00000000090009000002118c8f
*a00bc6eb5e0b40583b6596f1a11f14003b
addfile ./doc/html/monad-cps/monad-cps.haddock
binary ./doc/html/monad-cps/monad-cps.haddock
oldhex
*
newhex
*0d0cface00040000000000000e1500000000000008c72500000000000000000000000000000000
*000000000000000100000000000000010000000000000000000000000000000100000000000000
*020000000000000000000000000000000100000000000000030000000000000000000000000000
*000100000000000000040000000000000000000000000000000200000000000000050000000000
*000000000000000000000200000000000000060000000000000000000000000000000200000000
*000000070000000000000000000000000000000300000000000000080000000000000000000000
*0000000003000000000000000900000000000000000000000000000003000000000000000a0000
*0000000000000000000000000003000000000000000b0000000000000000000000000000000300
*0000000000000c00000000000000000000000000000004000000000000000d0000000000000000
*0000000000000004000000000000000e0000000000000000000000000000000400000000000000
*0f0000000000000000000000000000000400000000000000100000000000000000000000000000
*000400000000000000110000000000000000000000000000000400000000000000120000000000
*000000000000000000000400000000000000130000000000000000000000000000000500000000
*000000140000000000000000000000000000000500000000000000150000000000000000000000
*000000000500000000000000160000000000000000000000000000000500000000000000170000
*000000000000000000000000000600000000000000180000000000000000000000000000000600
*0000000000001900000000000000000000000000000006000000000000001a0000000000000000
*0000000000000006000000000000001b0000000000000000000000000000000600000000000000
*1c00000000000000000000000000000006000000000000001d0000000000000000000000000000
*0007000000000000001e00000000000000000000000000000007000000000000001f0000000000
*000000000000000000000700000000000000200000000000000000000000000000000700000000
*000000210000000000000000000000000000000800000000000000220000000000000000000000
*000000000800000000000000230000000000000000000000000000000800000000000000240000
*000000000000000000000000000809000000000000000000000000000000010000000000040000
*000000000000000000000000000100000000000000020000000000000003040000000000000000
*000000000000000100000000000000020000000000000003000000000000000000000000000000
*020000000000030000000000000004000000000000000500000000000000060300000000000000
*040000000000000005000000000000000600000000000000000000000000000003000000000005
*000000000000000700000000000000080000000000000009000000000000000a00000000000000
*0b05000000000000000700000000000000080000000000000009000000000000000a0000000000
*00000b000000000000000000000000000000040000000000090000000000000025000000000000
*0026000000000000000c000000000000000d000000000000000e000000000000000f0000000000
*0000100000000000000011000000000000001207000000000000000c000000000000000d000000
*000000000e000000000000000f0000000000000010000000000000001100000000000000120000
*000000000000000000000000000500000000000900000000000000270000000000000028000000
*0000000029000000000000002a000000000000002b000000000000001300000000000000140000
*000000000015000000000000001604000000000000001400000000000000150000000000000013
*00000000000000160000000000000000000000000000000600000000000c000000000000002c00
*0000000000002d000000000000002e000000000000002f00000000000000300000000000000031
*000000000000001700000000000000180000000000000019000000000000001a00000000000000
*1b000000000000001c0600000000000000180000000000000019000000000000001a0000000000
*00001b0000000000000017000000000000001c0000000000000000000000000000000700000000
*000800000000000000320000000000000033000000000000003400000000000000350000000000
*00001d000000000000001e000000000000001f000000000000002004000000000000001d000000
*000000001e000000000000001f0000000000000020000000000000000000000000000000080000
*000000040000000000000021000000000000002200000000000000230000000000000024040000
*000000000021000000000000002200000000000000230000000000000024000000000000000000
*000000000000090000000000320000000000000025000000000000002600000000000000320000
*000000000033000000000000003400000000000000350000000000000027000000000000002800
*00000000000029000000000000002a000000000000002b000000000000002c000000000000002d
*000000000000002e000000000000002f0000000000000030000000000000003100000000000000
*040000000000000005000000000000000600000000000000070000000000000008000000000000
*0009000000000000000a000000000000000b000000000000000c000000000000000d0000000000
*00000e000000000000000f00000000000000100000000000000011000000000000001200000000
*000000130000000000000014000000000000001500000000000000160000000000000017000000
*00000000180000000000000019000000000000001a000000000000001b000000000000001c0000
*00000000001d000000000000001e000000000000001f0000000000000020000000000000002100
*000000000000220000000000000023000000000000002400000000000000003600000000000000
*00000000000000000103000000000000000a000000000000000000000000000000010100000000
*0000000a0000000000000000000000000000000100000000000000000b00000000000000000000
*00000000000100000000000000000c000000000000000000000000000000020300000000000000
*0d0000000000000000000000000000000201000000000000000d00000000000000000000000000
*00000200000000000000000e0000000000000000000000000000000303000000000000000f0000
*000000000000000000000000000301000000000000000f00000000000000000000000000000003
*000000000000000010000000000000000000000000000000030000000000000000110000000000
*000000000000000000000300000000000000001200000000000000000000000000000004030000
*000000000013000000000000000000000000000000040000000000000000140000000000000000
*000000000000000400000000000000001500000000000000000000000000000004000000000000
*000016000000000000000000000000000000040000000000000000170000000000000000000000
*000000000400000000000000001800000000000000000000000000000004000000000000000019
*0000000000000000000000000000000503000000000000001a0000000000000000000000000000
*000503000000000000001b0000000000000000000000000000000500000000000000001c000000
*0000000000000000000000000500000000000000001d0000000000000000000000000000000603
*000000000000001e0000000000000000000000000000000603000000000000001f000000000000
*0000000000000000000601000000000000001f0000000000000000000000000000000600000000
*000000002000000000000000000000000000000006000000000000000021000000000000000000
*000000000000060000000000000000220000000000000000000000000000000703000000000000
*002300000000000000000000000000000007010000000000000023000000000000000000000000
*000000070000000000000000240000000000000000000000000000000700000000000000002500
*000000000000000000000000000008030000000000000026000000000000000000000000000000
*080100000000000000260000000000000000000000000000000800000000000000002700000000
*0000000000000000000000080000000000000000280000000000000029000000000000002a0000
*0000000000002b0000000000000029000000000000002a03000000000000002c00000000000000
*29000000000000002d00000000000000002e0000000000000029000000000000002d0000000000
*0000002f0000000000000029000000000000002d00000000000000003000000000000000290000
*00000000002d0000000000000000310000000000000029000000000000002d0300000000000000
*320000000000000029000000000000003300000000000000003400000000000000290000000000
*000033000000000000000035000000000000002900000000000000330000000000000000360000
*000000000029000000000000003300000000000000003700000000000000290000000000000033
*000000000000000038000000000000002900000000000000330300000000000000390000000000
*000029000000000000003a00000000000000003b0000000000000029000000000000003a000000
*00000000003c0000000000000029000000000000003a00000000000000003d0000000000000029
*000000000000003a03000000000000003e000000000000003f000000000000000f6d6f6e61642d
*6370732d302e302e320000000000000015436f6e74726f6c2e4d6f6e61642e4350532e52575300
*00000000000015436f6e74726f6c2e4d6f6e61642e4350532e52616e000000000000001b436f6e
*74726f6c2e4d6f6e61642e4350532e436f64656e736974790000000000000016436f6e74726f6c
*2e4d6f6e61642e4350532e436f6e740000000000000017436f6e74726f6c2e4d6f6e61642e4350
*532e53746174650000000000000018436f6e74726f6c2e4d6f6e61642e4350532e577269746572
*0000000000000018436f6e74726f6c2e4d6f6e61642e4350532e52656164657200000000000000
*1a436f6e74726f6c2e4d6f6e61642e4350532e4964656e746974790000000000000011436f6e74
*726f6c2e4d6f6e61642e43505300000000000000035257530000000000000005756e5257530000
*00000000000672756e525753000000000000000352616e000000000000000672756e52616e0000
*000000000009436f64656e73697479000000000000000b756e436f64656e736974790000000000
*00000c72756e436f64656e73697479000000000000000f72756e436f64656e7369747941707000
*00000000000004436f6e74000000000000000772756e436f6e7400000000000000066964436f6e
*7400000000000000076d6170436f6e74000000000000000877697468436f6e7400000000000000
*057368696674000000000000000572657365740000000000000006537461746527000000000000
*00055374617465000000000000000872756e5374617465000000000000000972756e5374617465
*270000000000000007577269746572270000000000000006577269746572000000000000000875
*6e577269746572000000000000000972756e577269746572000000000000000a72756e57726974
*65722700000000000000065265616465720000000000000008756e526561646572000000000000
*000972756e52656164657200000000000000084964656e74697479000000000000000a756e4964
*656e74697479000000000000000b72756e4964656e74697479000000000000000b6d746c2d312e
*312e302e320000000000000018436f6e74726f6c2e4d6f6e61642e436f6e742e436c6173730000
*00000000000663616c6c434300000000000000094d6f6e6164436f6e740000000000000019436f
*6e74726f6c2e4d6f6e61642e53746174652e436c61737300000000000000046765747300000000
*000000066d6f646966790000000000000003707574000000000000000367657400000000000000
*0a4d6f6e61645374617465000000000000001a436f6e74726f6c2e4d6f6e61642e577269746572
*2e436c617373000000000000000663656e736f7200000000000000076c697374656e7300000000
*000000047061737300000000000000066c697374656e000000000000000474656c6c0000000000
*00000b4d6f6e6164577269746572000000000000001a436f6e74726f6c2e4d6f6e61642e526561
*6465722e436c617373000000000000000461736b7300000000000000056c6f63616c0000000000
*00000361736b000000000000000b4d6f6e6164526561646572
addfile ./doc/html/monad-cps/plus.gif
binary ./doc/html/monad-cps/plus.gif
oldhex
*
newhex
*47494638396109000900910000fefefe8282820202020000002c00000000090009000002148c8f
*a00bb6b29c82ca897b5b7871cfce74085200003b
adddir ./doc/html/monad-cps/src
addfile ./doc/html/monad-cps/src/Control-Monad-CPS-Codensity.html
hunk ./doc/html/monad-cps/src/Control-Monad-CPS-Codensity.html 1
+<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
+<html>
+<head>
+<!-- Generated by HsColour, http://www.cs.york.ac.uk/fp/darcs/hscolour/ -->
+<title>src/Control/Monad/CPS/Codensity.hs</title>
+<link type='text/css' rel='stylesheet' href='hscolour.css' />
+</head>
+<body>
+<pre><a name="line-1"></a><span class='hs-keyword'>module</span> <span class='hs-conid'>Control</span><span class='hs-varop'>.</span><span class='hs-conid'>Monad</span><span class='hs-varop'>.</span><span class='hs-conid'>CPS</span><span class='hs-varop'>.</span><span class='hs-conid'>Codensity</span>
+<a name="line-2"></a>    <span class='hs-layout'>(</span> <span class='hs-conid'>Codensity</span><span class='hs-layout'>(</span><span class='hs-conid'>Codensity</span><span class='hs-layout'>,</span> <span class='hs-varid'>unCodensity</span><span class='hs-layout'>)</span>
+<a name="line-3"></a>    <span class='hs-layout'>,</span> <span class='hs-varid'>runCodensity</span><span class='hs-layout'>,</span> <span class='hs-varid'>runCodensityApp</span>
+<a name="line-4"></a>    <span class='hs-layout'>)</span> <span class='hs-keyword'>where</span>
+<a name="line-5"></a>
+<a name="line-6"></a><span class='hs-keyword'>import</span> <span class='hs-conid'>Control</span><span class='hs-varop'>.</span><span class='hs-conid'>Monad</span>
+<a name="line-7"></a><span class='hs-keyword'>import</span> <span class='hs-conid'>Control</span><span class='hs-varop'>.</span><span class='hs-conid'>Monad</span><span class='hs-varop'>.</span><span class='hs-conid'>Trans</span>
+<a name="line-8"></a><span class='hs-keyword'>import</span> <span class='hs-conid'>Control</span><span class='hs-varop'>.</span><span class='hs-conid'>Applicative</span>
+<a name="line-9"></a>
+<a name="line-10"></a><a name="Codensity"></a><span class='hs-keyword'>newtype</span> <span class='hs-conid'>Codensity</span> <span class='hs-varid'>f</span> <span class='hs-varid'>a</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>Codensity</span> <span class='hs-layout'>{</span> <span class='hs-varid'>unCodensity</span> <span class='hs-keyglyph'>::</span> <span class='hs-keyword'>forall</span> <span class='hs-varid'>o</span><span class='hs-varop'>.</span> <span class='hs-layout'>(</span><span class='hs-varid'>a</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-varid'>f</span> <span class='hs-varid'>o</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-varid'>f</span> <span class='hs-varid'>o</span> <span class='hs-layout'>}</span>
+<a name="line-11"></a>
+<a name="line-12"></a><span class='hs-keyword'>instance</span> <span class='hs-conid'>Functor</span> <span class='hs-layout'>(</span><span class='hs-conid'>Codensity</span> <span class='hs-varid'>f</span><span class='hs-layout'>)</span> <span class='hs-keyword'>where</span>
+<a name="line-13"></a>    <span class='hs-varid'>fmap</span> <span class='hs-varid'>f</span> <span class='hs-layout'>(</span><span class='hs-conid'>Codensity</span> <span class='hs-varid'>g</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>Codensity</span> <span class='hs-layout'>(</span><span class='hs-keyglyph'>\</span><span class='hs-varid'>k</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-varid'>g</span> <span class='hs-layout'>(</span><span class='hs-keyglyph'>\</span><span class='hs-varid'>a</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-varid'>k</span> <span class='hs-layout'>(</span><span class='hs-varid'>f</span> <span class='hs-varid'>a</span><span class='hs-layout'>)</span><span class='hs-layout'>)</span><span class='hs-layout'>)</span>
+<a name="line-14"></a>
+<a name="line-15"></a><span class='hs-keyword'>instance</span> <span class='hs-conid'>Applicative</span> <span class='hs-layout'>(</span><span class='hs-conid'>Codensity</span> <span class='hs-varid'>f</span><span class='hs-layout'>)</span> <span class='hs-keyword'>where</span>
+<a name="line-16"></a>    <span class='hs-varid'>pure</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>return</span>
+<a name="line-17"></a>    <span class='hs-layout'>(</span><span class='hs-varop'>&lt;*&gt;</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>ap</span> 
+<a name="line-18"></a>
+<a name="line-19"></a><span class='hs-keyword'>instance</span> <span class='hs-conid'>Monad</span> <span class='hs-layout'>(</span><span class='hs-conid'>Codensity</span> <span class='hs-varid'>f</span><span class='hs-layout'>)</span> <span class='hs-keyword'>where</span>
+<a name="line-20"></a>    <span class='hs-varid'>return</span> <span class='hs-varid'>a</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>Codensity</span> <span class='hs-layout'>(</span><span class='hs-keyglyph'>\</span><span class='hs-varid'>k</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-varid'>k</span> <span class='hs-varid'>a</span><span class='hs-layout'>)</span>
+<a name="line-21"></a>    <span class='hs-conid'>Codensity</span> <span class='hs-varid'>g</span> <span class='hs-varop'>&gt;&gt;=</span> <span class='hs-varid'>f</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>Codensity</span> <span class='hs-layout'>(</span><span class='hs-keyglyph'>\</span><span class='hs-varid'>k</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-varid'>g</span> <span class='hs-layout'>(</span><span class='hs-keyglyph'>\</span><span class='hs-varid'>a</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-varid'>unCodensity</span> <span class='hs-layout'>(</span><span class='hs-varid'>f</span> <span class='hs-varid'>a</span><span class='hs-layout'>)</span> <span class='hs-varid'>k</span><span class='hs-layout'>)</span><span class='hs-layout'>)</span>
+<a name="line-22"></a>
+<a name="line-23"></a><a name="runCodensity"></a><span class='hs-definition'>runCodensity</span> <span class='hs-keyglyph'>::</span> <span class='hs-conid'>Monad</span> <span class='hs-varid'>f</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>Codensity</span> <span class='hs-varid'>f</span> <span class='hs-varid'>a</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-varid'>f</span> <span class='hs-varid'>a</span>
+<a name="line-24"></a><span class='hs-definition'>runCodensity</span> <span class='hs-layout'>(</span><span class='hs-conid'>Codensity</span> <span class='hs-varid'>f</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>f</span> <span class='hs-varid'>return</span>
+<a name="line-25"></a>
+<a name="line-26"></a><a name="runCodensityApp"></a><span class='hs-definition'>runCodensityApp</span> <span class='hs-keyglyph'>::</span> <span class='hs-conid'>Applicative</span> <span class='hs-varid'>f</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>Codensity</span> <span class='hs-varid'>f</span> <span class='hs-varid'>a</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-varid'>f</span> <span class='hs-varid'>a</span>
+<a name="line-27"></a><span class='hs-definition'>runCodensityApp</span> <span class='hs-layout'>(</span><span class='hs-conid'>Codensity</span> <span class='hs-varid'>f</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>f</span> <span class='hs-varid'>pure</span>
+<a name="line-28"></a>
+<a name="line-29"></a><span class='hs-keyword'>instance</span> <span class='hs-conid'>MonadTrans</span> <span class='hs-conid'>Codensity</span> <span class='hs-keyword'>where</span>
+<a name="line-30"></a>    <span class='hs-varid'>lift</span> <span class='hs-varid'>m</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>Codensity</span> <span class='hs-layout'>(</span><span class='hs-varid'>m</span> <span class='hs-varop'>&gt;&gt;=</span><span class='hs-layout'>)</span>
+</pre></body>
+</html>
addfile ./doc/html/monad-cps/src/Control-Monad-CPS-Cont.html
hunk ./doc/html/monad-cps/src/Control-Monad-CPS-Cont.html 1
+<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
+<html>
+<head>
+<!-- Generated by HsColour, http://www.cs.york.ac.uk/fp/darcs/hscolour/ -->
+<title>src/Control/Monad/CPS/Cont.hs</title>
+<link type='text/css' rel='stylesheet' href='hscolour.css' />
+</head>
+<body>
+<pre><a name="line-1"></a><span class='hs-keyword'>module</span> <span class='hs-conid'>Control</span><span class='hs-varop'>.</span><span class='hs-conid'>Monad</span><span class='hs-varop'>.</span><span class='hs-conid'>CPS</span><span class='hs-varop'>.</span><span class='hs-conid'>Cont</span> 
+<a name="line-2"></a>    <span class='hs-layout'>(</span> <span class='hs-conid'>Cont</span>
+<a name="line-3"></a>    <span class='hs-layout'>,</span> <span class='hs-varid'>runCont</span>
+<a name="line-4"></a>    <span class='hs-layout'>,</span> <span class='hs-varid'>idCont</span>
+<a name="line-5"></a>    <span class='hs-layout'>,</span> <span class='hs-varid'>mapCont</span>
+<a name="line-6"></a>    <span class='hs-layout'>,</span> <span class='hs-varid'>withCont</span>
+<a name="line-7"></a>    <span class='hs-layout'>,</span> <span class='hs-varid'>shift</span>
+<a name="line-8"></a>    <span class='hs-layout'>,</span> <span class='hs-varid'>reset</span>
+<a name="line-9"></a>    <span class='hs-layout'>,</span> <span class='hs-keyword'>module</span> <span class='hs-conid'>Control</span><span class='hs-varop'>.</span><span class='hs-conid'>Monad</span><span class='hs-varop'>.</span><span class='hs-conid'>Cont</span><span class='hs-varop'>.</span><span class='hs-conid'>Class</span>
+<a name="line-10"></a>    <span class='hs-layout'>)</span> <span class='hs-keyword'>where</span>
+<a name="line-11"></a>
+<a name="line-12"></a><span class='hs-keyword'>import</span> <span class='hs-conid'>Control</span><span class='hs-varop'>.</span><span class='hs-conid'>Monad</span>
+<a name="line-13"></a><span class='hs-keyword'>import</span> <span class='hs-conid'>Control</span><span class='hs-varop'>.</span><span class='hs-conid'>Monad</span><span class='hs-varop'>.</span><span class='hs-conid'>Cont</span><span class='hs-varop'>.</span><span class='hs-conid'>Class</span>
+<a name="line-14"></a>
+<a name="line-15"></a><a name="Cont"></a><span class='hs-keyword'>newtype</span> <span class='hs-conid'>Cont</span> <span class='hs-varid'>r</span> <span class='hs-varid'>a</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>Cont</span> <span class='hs-layout'>{</span><span class='hs-varid'>unCont</span> <span class='hs-keyglyph'>::</span> <span class='hs-keyword'>forall</span> <span class='hs-varid'>o</span><span class='hs-varop'>.</span> <span class='hs-layout'>(</span><span class='hs-varid'>a</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-varid'>r</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-layout'>(</span><span class='hs-varid'>r</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-varid'>o</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-varid'>o</span><span class='hs-layout'>}</span>
+<a name="line-16"></a>
+<a name="line-17"></a><span class='hs-keyword'>instance</span> <span class='hs-conid'>Functor</span> <span class='hs-layout'>(</span><span class='hs-conid'>Cont</span> <span class='hs-varid'>r</span><span class='hs-layout'>)</span> <span class='hs-keyword'>where</span>
+<a name="line-18"></a>  <span class='hs-varid'>fmap</span> <span class='hs-varid'>f</span> <span class='hs-layout'>(</span><span class='hs-conid'>Cont</span> <span class='hs-varid'>g</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>Cont</span> <span class='hs-layout'>(</span><span class='hs-keyglyph'>\</span><span class='hs-varid'>k</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-varid'>g</span> <span class='hs-layout'>(</span><span class='hs-varid'>k</span> <span class='hs-varop'>.</span> <span class='hs-varid'>f</span><span class='hs-layout'>)</span><span class='hs-layout'>)</span>
+<a name="line-19"></a>
+<a name="line-20"></a><span class='hs-keyword'>instance</span> <span class='hs-conid'>Monad</span> <span class='hs-layout'>(</span><span class='hs-conid'>Cont</span> <span class='hs-varid'>r</span><span class='hs-layout'>)</span> <span class='hs-keyword'>where</span>
+<a name="line-21"></a>  <span class='hs-varid'>return</span> <span class='hs-varid'>a</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>Cont</span> <span class='hs-layout'>(</span><span class='hs-keyglyph'>\</span><span class='hs-varid'>k</span> <span class='hs-varid'>z</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-varid'>z</span> <span class='hs-layout'>(</span><span class='hs-varid'>k</span> <span class='hs-varid'>a</span><span class='hs-layout'>)</span><span class='hs-layout'>)</span>
+<a name="line-22"></a>  <span class='hs-conid'>Cont</span> <span class='hs-varid'>g</span> <span class='hs-varop'>&gt;&gt;=</span> <span class='hs-varid'>f</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>Cont</span> <span class='hs-layout'>(</span><span class='hs-keyglyph'>\</span><span class='hs-varid'>k</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-varid'>g</span> <span class='hs-layout'>(</span><span class='hs-keyglyph'>\</span><span class='hs-varid'>a</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-varid'>unCont</span> <span class='hs-layout'>(</span><span class='hs-varid'>f</span> <span class='hs-varid'>a</span><span class='hs-layout'>)</span> <span class='hs-varid'>k</span> <span class='hs-varid'>id</span><span class='hs-layout'>)</span><span class='hs-layout'>)</span>
+<a name="line-23"></a>
+<a name="line-24"></a><a name="runCont"></a><span class='hs-definition'>runCont</span> <span class='hs-keyglyph'>::</span> <span class='hs-conid'>Cont</span> <span class='hs-varid'>r</span> <span class='hs-varid'>a</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-layout'>(</span><span class='hs-varid'>a</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-varid'>r</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-varid'>r</span>
+<a name="line-25"></a><span class='hs-definition'>runCont</span> <span class='hs-layout'>(</span><span class='hs-conid'>Cont</span> <span class='hs-varid'>g</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>flip</span> <span class='hs-varid'>g</span> <span class='hs-varid'>id</span>
+<a name="line-26"></a>
+<a name="line-27"></a><a name="idCont"></a><span class='hs-definition'>idCont</span> <span class='hs-keyglyph'>::</span> <span class='hs-conid'>Cont</span> <span class='hs-varid'>a</span> <span class='hs-varid'>a</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-varid'>a</span>
+<a name="line-28"></a><span class='hs-definition'>idCont</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>flip</span> <span class='hs-varid'>runCont</span> <span class='hs-varid'>id</span>
+<a name="line-29"></a>
+<a name="line-30"></a><a name="mapCont"></a><span class='hs-definition'>mapCont</span> <span class='hs-keyglyph'>::</span> <span class='hs-layout'>(</span><span class='hs-varid'>r</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-varid'>r</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-conid'>Cont</span> <span class='hs-varid'>r</span> <span class='hs-varid'>a</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-conid'>Cont</span> <span class='hs-varid'>r</span> <span class='hs-varid'>a</span>
+<a name="line-31"></a><span class='hs-definition'>mapCont</span> <span class='hs-varid'>f</span> <span class='hs-layout'>(</span><span class='hs-conid'>Cont</span> <span class='hs-varid'>g</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>Cont</span> <span class='hs-layout'>(</span><span class='hs-keyglyph'>\</span><span class='hs-varid'>k</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-varid'>g</span> <span class='hs-layout'>(</span><span class='hs-varid'>f</span> <span class='hs-varop'>.</span> <span class='hs-varid'>k</span><span class='hs-layout'>)</span><span class='hs-layout'>)</span>
+<a name="line-32"></a><span class='hs-comment'>-- mapCont f (Cont g) = Cont (\k z -&gt; g k (z . f))</span>
+<a name="line-33"></a>
+<a name="line-34"></a><a name="withCont"></a><span class='hs-definition'>withCont</span> <span class='hs-keyglyph'>::</span> <span class='hs-layout'>(</span><span class='hs-layout'>(</span><span class='hs-varid'>b</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-varid'>r</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-layout'>(</span><span class='hs-varid'>a</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-varid'>r</span><span class='hs-layout'>)</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-conid'>Cont</span> <span class='hs-varid'>r</span> <span class='hs-varid'>a</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-conid'>Cont</span> <span class='hs-varid'>r</span> <span class='hs-varid'>b</span>
+<a name="line-35"></a><span class='hs-definition'>withCont</span> <span class='hs-varid'>f</span> <span class='hs-layout'>(</span><span class='hs-conid'>Cont</span> <span class='hs-varid'>g</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>Cont</span> <span class='hs-layout'>(</span><span class='hs-varid'>g</span> <span class='hs-varop'>.</span> <span class='hs-varid'>f</span><span class='hs-layout'>)</span>
+<a name="line-36"></a><span class='hs-comment'>-- withCont f (Cont g) = Cont (\k -&gt; g (f k))</span>
+<a name="line-37"></a>
+<a name="line-38"></a><span class='hs-keyword'>instance</span> <span class='hs-conid'>MonadCont</span> <span class='hs-layout'>(</span><span class='hs-conid'>Cont</span> <span class='hs-varid'>r</span><span class='hs-layout'>)</span> <span class='hs-keyword'>where</span>
+<a name="line-39"></a>    <span class='hs-varid'>callCC</span> <span class='hs-varid'>f</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>Cont</span> <span class='hs-layout'>(</span><span class='hs-keyglyph'>\</span><span class='hs-varid'>k</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-varid'>unCont</span> <span class='hs-layout'>(</span><span class='hs-varid'>f</span> <span class='hs-layout'>(</span><span class='hs-keyglyph'>\</span><span class='hs-varid'>a</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-conid'>Cont</span> <span class='hs-layout'>(</span><span class='hs-keyglyph'>\</span><span class='hs-keyword'>_</span> <span class='hs-varid'>h</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-layout'>(</span><span class='hs-varid'>h</span> <span class='hs-varop'>.</span> <span class='hs-varid'>k</span><span class='hs-layout'>)</span> <span class='hs-varid'>a</span><span class='hs-layout'>)</span><span class='hs-layout'>)</span><span class='hs-layout'>)</span> <span class='hs-varid'>k</span><span class='hs-layout'>)</span>
+<a name="line-40"></a>
+<a name="line-41"></a><a name="shift"></a><span class='hs-definition'>shift</span>  <span class='hs-keyglyph'>::</span> <span class='hs-layout'>(</span><span class='hs-layout'>(</span><span class='hs-varid'>a</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-conid'>Cont</span> <span class='hs-varid'>s</span> <span class='hs-varid'>r</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-conid'>Cont</span> <span class='hs-varid'>r</span> <span class='hs-varid'>r</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-conid'>Cont</span> <span class='hs-varid'>r</span> <span class='hs-varid'>a</span>
+<a name="line-42"></a><span class='hs-definition'>shift</span> <span class='hs-varid'>f</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>Cont</span> <span class='hs-layout'>(</span><span class='hs-keyglyph'>\</span><span class='hs-varid'>k</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-varid'>unCont</span> <span class='hs-layout'>(</span><span class='hs-varid'>f</span> <span class='hs-layout'>(</span><span class='hs-keyglyph'>\</span><span class='hs-varid'>a</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-conid'>Cont</span> <span class='hs-layout'>(</span><span class='hs-keyglyph'>\</span><span class='hs-varid'>e</span> <span class='hs-varid'>h</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-layout'>(</span><span class='hs-varid'>h</span> <span class='hs-varop'>.</span> <span class='hs-varid'>e</span> <span class='hs-varop'>.</span> <span class='hs-varid'>k</span><span class='hs-layout'>)</span> <span class='hs-varid'>a</span><span class='hs-layout'>)</span><span class='hs-layout'>)</span><span class='hs-layout'>)</span> <span class='hs-varid'>id</span><span class='hs-layout'>)</span>
+<a name="line-43"></a>
+<a name="line-44"></a><a name="reset"></a><span class='hs-definition'>reset</span> <span class='hs-keyglyph'>::</span> <span class='hs-conid'>Cont</span> <span class='hs-varid'>a</span> <span class='hs-varid'>a</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-conid'>Cont</span> <span class='hs-varid'>r</span> <span class='hs-varid'>a</span>
+<a name="line-45"></a><span class='hs-definition'>reset</span> <span class='hs-varid'>m</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>Cont</span> <span class='hs-layout'>(</span><span class='hs-keyglyph'>\</span><span class='hs-varid'>k</span> <span class='hs-varid'>z</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-layout'>(</span><span class='hs-varid'>z</span> <span class='hs-varop'>.</span> <span class='hs-varid'>k</span><span class='hs-layout'>)</span> <span class='hs-layout'>(</span><span class='hs-varid'>runCont</span> <span class='hs-varid'>m</span> <span class='hs-varid'>id</span><span class='hs-layout'>)</span><span class='hs-layout'>)</span>
+</pre></body>
+</html>
addfile ./doc/html/monad-cps/src/Control-Monad-CPS-Identity.html
hunk ./doc/html/monad-cps/src/Control-Monad-CPS-Identity.html 1
+<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
+<html>
+<head>
+<!-- Generated by HsColour, http://www.cs.york.ac.uk/fp/darcs/hscolour/ -->
+<title>src/Control/Monad/CPS/Identity.hs</title>
+<link type='text/css' rel='stylesheet' href='hscolour.css' />
+</head>
+<body>
+<pre><a name="line-1"></a><span class='hs-keyword'>module</span> <span class='hs-conid'>Control</span><span class='hs-varop'>.</span><span class='hs-conid'>Monad</span><span class='hs-varop'>.</span><span class='hs-conid'>CPS</span><span class='hs-varop'>.</span><span class='hs-conid'>Identity</span> 
+<a name="line-2"></a>    <span class='hs-layout'>(</span> <span class='hs-conid'>Identity</span><span class='hs-layout'>(</span><span class='hs-conid'>Identity</span><span class='hs-layout'>,</span> <span class='hs-varid'>unIdentity</span><span class='hs-layout'>)</span>
+<a name="line-3"></a>    <span class='hs-layout'>,</span> <span class='hs-varid'>runIdentity</span>
+<a name="line-4"></a>    <span class='hs-layout'>)</span> <span class='hs-keyword'>where</span>
+<a name="line-5"></a>
+<a name="line-6"></a><span class='hs-keyword'>import</span> <span class='hs-conid'>Control</span><span class='hs-varop'>.</span><span class='hs-conid'>Monad</span>
+<a name="line-7"></a><span class='hs-keyword'>import</span> <span class='hs-conid'>Control</span><span class='hs-varop'>.</span><span class='hs-conid'>Applicative</span>
+<a name="line-8"></a>
+<a name="line-9"></a><a name="Identity"></a><span class='hs-keyword'>newtype</span> <span class='hs-conid'>Identity</span> <span class='hs-varid'>a</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>Identity</span> <span class='hs-layout'>{</span><span class='hs-varid'>unIdentity</span> <span class='hs-keyglyph'>::</span> <span class='hs-keyword'>forall</span> <span class='hs-varid'>o</span><span class='hs-varop'>.</span> <span class='hs-layout'>(</span><span class='hs-varid'>a</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-varid'>o</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-varid'>o</span><span class='hs-layout'>}</span>
+<a name="line-10"></a>
+<a name="line-11"></a><span class='hs-keyword'>instance</span> <span class='hs-conid'>Functor</span> <span class='hs-conid'>Identity</span> <span class='hs-keyword'>where</span>
+<a name="line-12"></a><span class='hs-comment'>--  fmap f (Identity g) = Identity (\k -&gt; g (\a -&gt; k (f a)))</span>
+<a name="line-13"></a>    <span class='hs-varid'>fmap</span> <span class='hs-varid'>f</span> <span class='hs-layout'>(</span><span class='hs-conid'>Identity</span> <span class='hs-varid'>g</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>Identity</span> <span class='hs-layout'>(</span><span class='hs-keyglyph'>\</span><span class='hs-varid'>k</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-varid'>g</span> <span class='hs-layout'>(</span><span class='hs-varid'>k</span> <span class='hs-varop'>.</span> <span class='hs-varid'>f</span><span class='hs-layout'>)</span><span class='hs-layout'>)</span>
+<a name="line-14"></a>
+<a name="line-15"></a><span class='hs-keyword'>instance</span> <span class='hs-conid'>Applicative</span> <span class='hs-conid'>Identity</span> <span class='hs-keyword'>where</span>
+<a name="line-16"></a>    <span class='hs-varid'>pure</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>return</span>
+<a name="line-17"></a>    <span class='hs-layout'>(</span><span class='hs-varop'>&lt;*&gt;</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>ap</span>
+<a name="line-18"></a>
+<a name="line-19"></a><span class='hs-keyword'>instance</span> <span class='hs-conid'>Monad</span> <span class='hs-conid'>Identity</span> <span class='hs-keyword'>where</span>
+<a name="line-20"></a>    <span class='hs-varid'>return</span> <span class='hs-varid'>a</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>Identity</span> <span class='hs-layout'>(</span><span class='hs-keyglyph'>\</span><span class='hs-varid'>k</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-varid'>k</span> <span class='hs-varid'>a</span><span class='hs-layout'>)</span>
+<a name="line-21"></a>    <span class='hs-conid'>Identity</span> <span class='hs-varid'>g</span> <span class='hs-varop'>&gt;&gt;=</span> <span class='hs-varid'>f</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>Identity</span> <span class='hs-layout'>(</span><span class='hs-keyglyph'>\</span><span class='hs-varid'>k</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-varid'>g</span> <span class='hs-layout'>(</span><span class='hs-keyglyph'>\</span><span class='hs-varid'>a</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-varid'>unIdentity</span> <span class='hs-layout'>(</span><span class='hs-varid'>f</span> <span class='hs-varid'>a</span><span class='hs-layout'>)</span> <span class='hs-varid'>k</span><span class='hs-layout'>)</span><span class='hs-layout'>)</span>
+<a name="line-22"></a>
+<a name="line-23"></a><a name="runIdentity"></a><span class='hs-definition'>runIdentity</span> <span class='hs-keyglyph'>::</span> <span class='hs-conid'>Identity</span> <span class='hs-varid'>a</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-varid'>a</span>
+<a name="line-24"></a><span class='hs-definition'>runIdentity</span> <span class='hs-layout'>(</span><span class='hs-conid'>Identity</span> <span class='hs-varid'>f</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>f</span> <span class='hs-varid'>id</span>
+</pre></body>
+</html>
addfile ./doc/html/monad-cps/src/Control-Monad-CPS-RWS.html
hunk ./doc/html/monad-cps/src/Control-Monad-CPS-RWS.html 1
+<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
+<html>
+<head>
+<!-- Generated by HsColour, http://www.cs.york.ac.uk/fp/darcs/hscolour/ -->
+<title>src/Control/Monad/CPS/RWS.hs</title>
+<link type='text/css' rel='stylesheet' href='hscolour.css' />
+</head>
+<body>
+<pre><a name="line-1"></a><span class='hs-comment'>{-# LANGUAGE MagicHash, UnboxedTuples #-}</span>
+<a name="line-2"></a><span class='hs-keyword'>module</span> <span class='hs-conid'>Control</span><span class='hs-varop'>.</span><span class='hs-conid'>Monad</span><span class='hs-varop'>.</span><span class='hs-conid'>CPS</span><span class='hs-varop'>.</span><span class='hs-conid'>RWS</span> 
+<a name="line-3"></a>    <span class='hs-layout'>(</span> <span class='hs-conid'>RWS</span><span class='hs-layout'>(</span><span class='hs-conid'>RWS</span><span class='hs-layout'>,</span><span class='hs-varid'>unRWS</span><span class='hs-layout'>)</span>
+<a name="line-4"></a>    <span class='hs-layout'>,</span> <span class='hs-varid'>runRWS</span>
+<a name="line-5"></a>    <span class='hs-layout'>)</span> <span class='hs-keyword'>where</span>
+<a name="line-6"></a>
+<a name="line-7"></a><span class='hs-keyword'>import</span> <span class='hs-conid'>Data</span><span class='hs-varop'>.</span><span class='hs-conid'>Monoid</span> <span class='hs-layout'>(</span><span class='hs-conid'>Monoid</span><span class='hs-layout'>(</span><span class='hs-keyglyph'>..</span><span class='hs-layout'>)</span><span class='hs-layout'>)</span>
+<a name="line-8"></a><span class='hs-keyword'>import</span> <span class='hs-conid'>Control</span><span class='hs-varop'>.</span><span class='hs-conid'>Monad</span><span class='hs-varop'>.</span><span class='hs-conid'>RWS</span><span class='hs-varop'>.</span><span class='hs-conid'>Class</span>
+<a name="line-9"></a>
+<a name="line-10"></a><a name="RWS"></a><span class='hs-keyword'>newtype</span> <span class='hs-conid'>RWS</span> <span class='hs-varid'>r</span> <span class='hs-varid'>w</span> <span class='hs-varid'>s</span> <span class='hs-varid'>a</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>RWS</span> <span class='hs-layout'>{</span> <span class='hs-varid'>unRWS</span> <span class='hs-keyglyph'>::</span> <span class='hs-keyword'>forall</span> <span class='hs-varid'>o</span><span class='hs-varop'>.</span> <span class='hs-layout'>(</span><span class='hs-varid'>a</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-varid'>w</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-varid'>s</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-varid'>o</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-varid'>r</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-varid'>s</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-varid'>o</span> <span class='hs-layout'>}</span>
+<a name="line-11"></a>
+<a name="line-12"></a><span class='hs-keyword'>instance</span> <span class='hs-conid'>Monoid</span> <span class='hs-varid'>w</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>Functor</span> <span class='hs-layout'>(</span><span class='hs-conid'>RWS</span> <span class='hs-varid'>r</span> <span class='hs-varid'>w</span> <span class='hs-varid'>s</span><span class='hs-layout'>)</span> <span class='hs-keyword'>where</span>
+<a name="line-13"></a>    <span class='hs-varid'>fmap</span> <span class='hs-varid'>f</span> <span class='hs-layout'>(</span><span class='hs-conid'>RWS</span> <span class='hs-varid'>g</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>RWS</span> <span class='hs-layout'>(</span><span class='hs-keyglyph'>\</span><span class='hs-varid'>k</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-varid'>g</span> <span class='hs-layout'>(</span><span class='hs-keyglyph'>\</span><span class='hs-varid'>a</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-varid'>k</span> <span class='hs-layout'>(</span><span class='hs-varid'>f</span> <span class='hs-varid'>a</span><span class='hs-layout'>)</span><span class='hs-layout'>)</span><span class='hs-layout'>)</span>
+<a name="line-14"></a>
+<a name="line-15"></a><span class='hs-comment'>--instance Monoid w =&gt; Applicative (RWS r w s) where</span>
+<a name="line-16"></a><span class='hs-comment'>--    pure a = RWS (\k _ -&gt; k a mempty)</span>
+<a name="line-17"></a><span class='hs-comment'>--    RwS f &lt;*&gt; RWS x = RWS (\k r -&gt; f (\f' s' w -&gt; x (\x' s'' w' -&gt; k (f' x') s'' (w `mappend` w')) r s'))</span>
+<a name="line-18"></a>
+<a name="line-19"></a><span class='hs-keyword'>instance</span> <span class='hs-conid'>Monoid</span> <span class='hs-varid'>w</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>Monad</span> <span class='hs-layout'>(</span><span class='hs-conid'>RWS</span> <span class='hs-varid'>r</span> <span class='hs-varid'>w</span> <span class='hs-varid'>s</span><span class='hs-layout'>)</span> <span class='hs-keyword'>where</span>
+<a name="line-20"></a>    <span class='hs-varid'>return</span> <span class='hs-varid'>a</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>RWS</span> <span class='hs-layout'>(</span><span class='hs-keyglyph'>\</span><span class='hs-varid'>k</span> <span class='hs-keyword'>_</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-varid'>k</span> <span class='hs-varid'>a</span> <span class='hs-varid'>mempty</span><span class='hs-layout'>)</span>
+<a name="line-21"></a>    <span class='hs-conid'>RWS</span> <span class='hs-varid'>g</span> <span class='hs-varop'>&gt;&gt;=</span> <span class='hs-varid'>f</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>RWS</span> <span class='hs-layout'>(</span><span class='hs-keyglyph'>\</span><span class='hs-varid'>k</span> <span class='hs-varid'>r</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-varid'>g</span> <span class='hs-layout'>(</span><span class='hs-keyglyph'>\</span><span class='hs-varid'>a</span> <span class='hs-varid'>w</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-varid'>unRWS</span> <span class='hs-layout'>(</span><span class='hs-varid'>f</span> <span class='hs-varid'>a</span><span class='hs-layout'>)</span> <span class='hs-layout'>(</span><span class='hs-keyglyph'>\</span><span class='hs-varid'>b</span> <span class='hs-varid'>w'</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-varid'>k</span> <span class='hs-varid'>b</span> <span class='hs-layout'>(</span><span class='hs-varid'>w</span> <span class='hs-varop'>`mappend`</span> <span class='hs-varid'>w'</span><span class='hs-layout'>)</span><span class='hs-layout'>)</span> <span class='hs-varid'>r</span><span class='hs-layout'>)</span> <span class='hs-varid'>r</span><span class='hs-layout'>)</span>
+<a name="line-22"></a>
+<a name="line-23"></a><a name="runRWS"></a><span class='hs-definition'>runRWS</span> <span class='hs-keyglyph'>::</span> <span class='hs-conid'>RWS</span> <span class='hs-varid'>r</span> <span class='hs-varid'>w</span> <span class='hs-varid'>s</span> <span class='hs-varid'>a</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-varid'>r</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-varid'>s</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-layout'>(</span><span class='hs-varid'>a</span><span class='hs-layout'>,</span> <span class='hs-varid'>w</span><span class='hs-layout'>,</span> <span class='hs-varid'>s</span><span class='hs-layout'>)</span>
+<a name="line-24"></a><span class='hs-definition'>runRWS</span> <span class='hs-layout'>(</span><span class='hs-conid'>RWS</span> <span class='hs-varid'>f</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>f</span> <span class='hs-conid'>(,,)</span>
+<a name="line-25"></a>
+<a name="line-26"></a><span class='hs-keyword'>instance</span> <span class='hs-conid'>Monoid</span> <span class='hs-varid'>w</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>MonadState</span> <span class='hs-varid'>s</span> <span class='hs-layout'>(</span><span class='hs-conid'>RWS</span> <span class='hs-varid'>r</span> <span class='hs-varid'>w</span> <span class='hs-varid'>s</span><span class='hs-layout'>)</span> <span class='hs-keyword'>where</span>
+<a name="line-27"></a>    <span class='hs-varid'>get</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>RWS</span> <span class='hs-layout'>(</span><span class='hs-keyglyph'>\</span> <span class='hs-varid'>k</span> <span class='hs-varid'>r</span> <span class='hs-varid'>s</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-varid'>k</span> <span class='hs-varid'>s</span> <span class='hs-varid'>mempty</span> <span class='hs-varid'>s</span><span class='hs-layout'>)</span>
+<a name="line-28"></a>    <span class='hs-varid'>put</span> <span class='hs-varid'>s</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>RWS</span> <span class='hs-layout'>(</span><span class='hs-keyglyph'>\</span><span class='hs-varid'>k</span> <span class='hs-keyword'>_</span> <span class='hs-keyword'>_</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-varid'>k</span> <span class='hs-conid'>()</span> <span class='hs-varid'>mempty</span> <span class='hs-varid'>s</span><span class='hs-layout'>)</span>
+<a name="line-29"></a>
+<a name="line-30"></a><span class='hs-keyword'>instance</span> <span class='hs-conid'>Monoid</span> <span class='hs-varid'>w</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>MonadWriter</span> <span class='hs-varid'>w</span> <span class='hs-layout'>(</span><span class='hs-conid'>RWS</span> <span class='hs-varid'>r</span> <span class='hs-varid'>w</span> <span class='hs-varid'>s</span><span class='hs-layout'>)</span> <span class='hs-keyword'>where</span>
+<a name="line-31"></a>    <span class='hs-varid'>tell</span> <span class='hs-varid'>w</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>RWS</span> <span class='hs-layout'>(</span><span class='hs-keyglyph'>\</span><span class='hs-varid'>k</span> <span class='hs-keyword'>_</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-varid'>k</span> <span class='hs-conid'>()</span> <span class='hs-varid'>w</span><span class='hs-layout'>)</span>
+<a name="line-32"></a>    <span class='hs-varid'>listen</span> <span class='hs-layout'>(</span><span class='hs-conid'>RWS</span> <span class='hs-varid'>f</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>RWS</span> <span class='hs-layout'>(</span><span class='hs-keyglyph'>\</span><span class='hs-varid'>k</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-varid'>f</span> <span class='hs-layout'>(</span><span class='hs-keyglyph'>\</span><span class='hs-varid'>a</span> <span class='hs-varid'>w</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-varid'>k</span> <span class='hs-layout'>(</span><span class='hs-varid'>a</span><span class='hs-layout'>,</span><span class='hs-varid'>w</span><span class='hs-layout'>)</span> <span class='hs-varid'>w</span><span class='hs-layout'>)</span><span class='hs-layout'>)</span>
+<a name="line-33"></a>    <span class='hs-varid'>pass</span> <span class='hs-layout'>(</span><span class='hs-conid'>RWS</span> <span class='hs-varid'>f</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>RWS</span> <span class='hs-layout'>(</span><span class='hs-keyglyph'>\</span><span class='hs-varid'>k</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-varid'>f</span> <span class='hs-layout'>(</span><span class='hs-keyglyph'>\</span><span class='hs-layout'>(</span><span class='hs-varid'>a</span><span class='hs-layout'>,</span><span class='hs-varid'>p</span><span class='hs-layout'>)</span> <span class='hs-varid'>w</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-varid'>k</span> <span class='hs-varid'>a</span> <span class='hs-layout'>(</span><span class='hs-varid'>p</span> <span class='hs-varid'>w</span><span class='hs-layout'>)</span><span class='hs-layout'>)</span><span class='hs-layout'>)</span>
+<a name="line-34"></a>
+<a name="line-35"></a><span class='hs-keyword'>instance</span> <span class='hs-conid'>Monoid</span> <span class='hs-varid'>w</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>MonadReader</span> <span class='hs-varid'>r</span> <span class='hs-layout'>(</span><span class='hs-conid'>RWS</span> <span class='hs-varid'>r</span> <span class='hs-varid'>w</span> <span class='hs-varid'>s</span><span class='hs-layout'>)</span> <span class='hs-keyword'>where</span>
+<a name="line-36"></a>    <span class='hs-varid'>ask</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>RWS</span> <span class='hs-layout'>(</span><span class='hs-keyglyph'>\</span><span class='hs-varid'>k</span> <span class='hs-varid'>r</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-varid'>k</span> <span class='hs-varid'>r</span> <span class='hs-varid'>mempty</span><span class='hs-layout'>)</span>
+<a name="line-37"></a>    <span class='hs-varid'>local</span> <span class='hs-varid'>f</span> <span class='hs-layout'>(</span><span class='hs-conid'>RWS</span> <span class='hs-varid'>g</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>RWS</span> <span class='hs-layout'>(</span><span class='hs-keyglyph'>\</span><span class='hs-varid'>k</span> <span class='hs-varid'>r</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-varid'>g</span> <span class='hs-varid'>k</span> <span class='hs-layout'>(</span><span class='hs-varid'>f</span> <span class='hs-varid'>r</span><span class='hs-layout'>)</span><span class='hs-layout'>)</span>
+</pre></body>
+</html>
addfile ./doc/html/monad-cps/src/Control-Monad-CPS-Ran.html
hunk ./doc/html/monad-cps/src/Control-Monad-CPS-Ran.html 1
+<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
+<html>
+<head>
+<!-- Generated by HsColour, http://www.cs.york.ac.uk/fp/darcs/hscolour/ -->
+<title>src/Control/Monad/CPS/Ran.hs</title>
+<link type='text/css' rel='stylesheet' href='hscolour.css' />
+</head>
+<body>
+<pre><a name="line-1"></a><span class='hs-keyword'>module</span> <span class='hs-conid'>Control</span><span class='hs-varop'>.</span><span class='hs-conid'>Monad</span><span class='hs-varop'>.</span><span class='hs-conid'>CPS</span><span class='hs-varop'>.</span><span class='hs-conid'>Ran</span>
+<a name="line-2"></a>    <span class='hs-layout'>(</span> <span class='hs-conid'>Ran</span><span class='hs-layout'>(</span><span class='hs-conid'>Ran</span><span class='hs-layout'>,</span><span class='hs-varid'>runRan</span><span class='hs-layout'>)</span>
+<a name="line-3"></a>    <span class='hs-layout'>)</span> <span class='hs-keyword'>where</span>
+<a name="line-4"></a>
+<a name="line-5"></a><a name="Ran"></a><span class='hs-keyword'>newtype</span> <span class='hs-conid'>Ran</span> <span class='hs-varid'>g</span> <span class='hs-varid'>h</span> <span class='hs-varid'>a</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>Ran</span> <span class='hs-layout'>{</span> <span class='hs-varid'>runRan</span> <span class='hs-keyglyph'>::</span> <span class='hs-keyword'>forall</span> <span class='hs-varid'>b</span><span class='hs-varop'>.</span> <span class='hs-layout'>(</span><span class='hs-varid'>a</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-varid'>g</span> <span class='hs-varid'>b</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-varid'>h</span> <span class='hs-varid'>b</span> <span class='hs-layout'>}</span> 
+<a name="line-6"></a>
+<a name="line-7"></a><span class='hs-keyword'>instance</span> <span class='hs-conid'>Functor</span> <span class='hs-layout'>(</span><span class='hs-conid'>Ran</span> <span class='hs-varid'>g</span> <span class='hs-varid'>h</span><span class='hs-layout'>)</span> <span class='hs-keyword'>where</span>
+<a name="line-8"></a>    <span class='hs-varid'>fmap</span> <span class='hs-varid'>f</span> <span class='hs-varid'>m</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>Ran</span> <span class='hs-layout'>(</span><span class='hs-keyglyph'>\</span><span class='hs-varid'>k</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-varid'>runRan</span> <span class='hs-varid'>m</span> <span class='hs-layout'>(</span><span class='hs-varid'>k</span> <span class='hs-varop'>.</span> <span class='hs-varid'>f</span><span class='hs-layout'>)</span><span class='hs-layout'>)</span>
+</pre></body>
+</html>
addfile ./doc/html/monad-cps/src/Control-Monad-CPS-Reader.html
hunk ./doc/html/monad-cps/src/Control-Monad-CPS-Reader.html 1
+<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
+<html>
+<head>
+<!-- Generated by HsColour, http://www.cs.york.ac.uk/fp/darcs/hscolour/ -->
+<title>src/Control/Monad/CPS/Reader.hs</title>
+<link type='text/css' rel='stylesheet' href='hscolour.css' />
+</head>
+<body>
+<pre><a name="line-1"></a><span class='hs-keyword'>module</span> <span class='hs-conid'>Control</span><span class='hs-varop'>.</span><span class='hs-conid'>Monad</span><span class='hs-varop'>.</span><span class='hs-conid'>CPS</span><span class='hs-varop'>.</span><span class='hs-conid'>Reader</span> 
+<a name="line-2"></a>    <span class='hs-layout'>(</span> <span class='hs-keyword'>module</span> <span class='hs-conid'>Control</span><span class='hs-varop'>.</span><span class='hs-conid'>Monad</span><span class='hs-varop'>.</span><span class='hs-conid'>Reader</span><span class='hs-varop'>.</span><span class='hs-conid'>Class</span>
+<a name="line-3"></a>    <span class='hs-layout'>,</span> <span class='hs-conid'>Reader</span><span class='hs-layout'>(</span><span class='hs-conid'>Reader</span><span class='hs-layout'>,</span> <span class='hs-varid'>unReader</span><span class='hs-layout'>)</span>
+<a name="line-4"></a>    <span class='hs-layout'>,</span> <span class='hs-varid'>runReader</span> 
+<a name="line-5"></a>    <span class='hs-layout'>)</span> <span class='hs-keyword'>where</span>
+<a name="line-6"></a>
+<a name="line-7"></a><span class='hs-keyword'>import</span> <span class='hs-conid'>Control</span><span class='hs-varop'>.</span><span class='hs-conid'>Applicative</span>
+<a name="line-8"></a><span class='hs-keyword'>import</span> <span class='hs-conid'>Control</span><span class='hs-varop'>.</span><span class='hs-conid'>Monad</span>
+<a name="line-9"></a><span class='hs-keyword'>import</span> <span class='hs-conid'>Control</span><span class='hs-varop'>.</span><span class='hs-conid'>Monad</span><span class='hs-varop'>.</span><span class='hs-conid'>Reader</span><span class='hs-varop'>.</span><span class='hs-conid'>Class</span>
+<a name="line-10"></a>
+<a name="line-11"></a><a name="Reader"></a><span class='hs-keyword'>newtype</span> <span class='hs-conid'>Reader</span> <span class='hs-varid'>r</span> <span class='hs-varid'>a</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>Reader</span> <span class='hs-layout'>{</span> <span class='hs-varid'>unReader</span> <span class='hs-keyglyph'>::</span> <span class='hs-keyword'>forall</span> <span class='hs-varid'>o</span><span class='hs-varop'>.</span> <span class='hs-layout'>(</span><span class='hs-varid'>a</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-varid'>o</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-varid'>r</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-varid'>o</span> <span class='hs-layout'>}</span>
+<a name="line-12"></a>
+<a name="line-13"></a><span class='hs-keyword'>instance</span> <span class='hs-conid'>Functor</span> <span class='hs-layout'>(</span><span class='hs-conid'>Reader</span> <span class='hs-varid'>r</span><span class='hs-layout'>)</span> <span class='hs-keyword'>where</span>
+<a name="line-14"></a>    <span class='hs-varid'>fmap</span> <span class='hs-varid'>f</span> <span class='hs-layout'>(</span><span class='hs-conid'>Reader</span> <span class='hs-varid'>g</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>Reader</span> <span class='hs-layout'>(</span><span class='hs-keyglyph'>\</span><span class='hs-varid'>k</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-varid'>g</span> <span class='hs-layout'>(</span><span class='hs-keyglyph'>\</span><span class='hs-varid'>a</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-varid'>k</span> <span class='hs-layout'>(</span><span class='hs-varid'>f</span> <span class='hs-varid'>a</span><span class='hs-layout'>)</span><span class='hs-layout'>)</span><span class='hs-layout'>)</span>
+<a name="line-15"></a>
+<a name="line-16"></a><span class='hs-keyword'>instance</span> <span class='hs-conid'>Monad</span> <span class='hs-layout'>(</span><span class='hs-conid'>Reader</span> <span class='hs-varid'>r</span><span class='hs-layout'>)</span> <span class='hs-keyword'>where</span>
+<a name="line-17"></a>    <span class='hs-varid'>return</span> <span class='hs-varid'>a</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>Reader</span> <span class='hs-layout'>(</span><span class='hs-keyglyph'>\</span><span class='hs-varid'>k</span> <span class='hs-keyword'>_</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-varid'>k</span> <span class='hs-varid'>a</span><span class='hs-layout'>)</span>
+<a name="line-18"></a>    <span class='hs-conid'>Reader</span> <span class='hs-varid'>g</span> <span class='hs-varop'>&gt;&gt;=</span> <span class='hs-varid'>f</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>Reader</span> <span class='hs-layout'>(</span><span class='hs-keyglyph'>\</span><span class='hs-varid'>k</span> <span class='hs-varid'>r</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-varid'>g</span> <span class='hs-layout'>(</span><span class='hs-keyglyph'>\</span><span class='hs-varid'>a</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-varid'>unReader</span> <span class='hs-layout'>(</span><span class='hs-varid'>f</span> <span class='hs-varid'>a</span><span class='hs-layout'>)</span> <span class='hs-varid'>k</span> <span class='hs-varid'>r</span><span class='hs-layout'>)</span> <span class='hs-varid'>r</span><span class='hs-layout'>)</span>
+<a name="line-19"></a>
+<a name="line-20"></a><a name="runReader"></a><span class='hs-definition'>runReader</span> <span class='hs-keyglyph'>::</span> <span class='hs-conid'>Reader</span> <span class='hs-varid'>r</span> <span class='hs-varid'>a</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-varid'>r</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-varid'>a</span>
+<a name="line-21"></a><span class='hs-definition'>runReader</span> <span class='hs-layout'>(</span><span class='hs-conid'>Reader</span> <span class='hs-varid'>g</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>g</span> <span class='hs-varid'>id</span>
+<a name="line-22"></a>
+<a name="line-23"></a><span class='hs-keyword'>instance</span> <span class='hs-conid'>MonadReader</span> <span class='hs-varid'>r</span> <span class='hs-layout'>(</span><span class='hs-conid'>Reader</span> <span class='hs-varid'>r</span><span class='hs-layout'>)</span> <span class='hs-keyword'>where</span>
+<a name="line-24"></a>    <span class='hs-varid'>ask</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>Reader</span> <span class='hs-varid'>id</span>
+<a name="line-25"></a>    <span class='hs-varid'>local</span> <span class='hs-varid'>f</span> <span class='hs-layout'>(</span><span class='hs-conid'>Reader</span> <span class='hs-varid'>g</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>Reader</span> <span class='hs-layout'>(</span><span class='hs-keyglyph'>\</span><span class='hs-varid'>k</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-varid'>g</span> <span class='hs-varid'>k</span> <span class='hs-varop'>.</span> <span class='hs-varid'>f</span><span class='hs-layout'>)</span>
+</pre></body>
+</html>
addfile ./doc/html/monad-cps/src/Control-Monad-CPS-State.html
hunk ./doc/html/monad-cps/src/Control-Monad-CPS-State.html 1
+<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
+<html>
+<head>
+<!-- Generated by HsColour, http://www.cs.york.ac.uk/fp/darcs/hscolour/ -->
+<title>src/Control/Monad/CPS/State.hs</title>
+<link type='text/css' rel='stylesheet' href='hscolour.css' />
+</head>
+<body>
+<pre><a name="line-1"></a><span class='hs-comment'>{-# LANGUAGE MagicHash, UnboxedTuples #-}</span>
+<a name="line-2"></a><span class='hs-keyword'>module</span> <span class='hs-conid'>Control</span><span class='hs-varop'>.</span><span class='hs-conid'>Monad</span><span class='hs-varop'>.</span><span class='hs-conid'>CPS</span><span class='hs-varop'>.</span><span class='hs-conid'>State</span> 
+<a name="line-3"></a>    <span class='hs-layout'>(</span> <span class='hs-keyword'>module</span> <span class='hs-conid'>Control</span><span class='hs-varop'>.</span><span class='hs-conid'>Monad</span><span class='hs-varop'>.</span><span class='hs-conid'>State</span><span class='hs-varop'>.</span><span class='hs-conid'>Class</span>
+<a name="line-4"></a>    <span class='hs-layout'>,</span> <span class='hs-conid'>State</span>
+<a name="line-5"></a>    <span class='hs-layout'>,</span> <span class='hs-varid'>runState</span>
+<a name="line-6"></a>    <span class='hs-layout'>,</span> <span class='hs-conid'>State'</span>
+<a name="line-7"></a>    <span class='hs-layout'>,</span> <span class='hs-varid'>runState'</span>
+<a name="line-8"></a>    <span class='hs-layout'>)</span> <span class='hs-keyword'>where</span>
+<a name="line-9"></a>
+<a name="line-10"></a><span class='hs-keyword'>import</span> <span class='hs-conid'>Control</span><span class='hs-varop'>.</span><span class='hs-conid'>Monad</span>
+<a name="line-11"></a><span class='hs-keyword'>import</span> <span class='hs-conid'>Control</span><span class='hs-varop'>.</span><span class='hs-conid'>Monad</span><span class='hs-varop'>.</span><span class='hs-conid'>CPS</span><span class='hs-varop'>.</span><span class='hs-conid'>Codensity</span>
+<a name="line-12"></a><span class='hs-keyword'>import</span> <span class='hs-conid'>Control</span><span class='hs-varop'>.</span><span class='hs-conid'>Monad</span><span class='hs-varop'>.</span><span class='hs-conid'>State</span><span class='hs-varop'>.</span><span class='hs-conid'>Class</span>
+<a name="line-13"></a><span class='hs-keyword'>import</span> <span class='hs-conid'>Control</span><span class='hs-varop'>.</span><span class='hs-conid'>Applicative</span>
+<a name="line-14"></a>
+<a name="line-15"></a><a name="State"></a><span class='hs-keyword'>newtype</span> <span class='hs-conid'>State</span> <span class='hs-varid'>s</span> <span class='hs-varid'>a</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>State</span> <span class='hs-layout'>{</span> <span class='hs-varid'>unState</span> <span class='hs-keyglyph'>::</span> <span class='hs-keyword'>forall</span> <span class='hs-varid'>o</span><span class='hs-varop'>.</span> <span class='hs-layout'>(</span><span class='hs-varid'>a</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-varid'>s</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-varid'>o</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-varid'>s</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-varid'>o</span> <span class='hs-layout'>}</span>
+<a name="line-16"></a>
+<a name="line-17"></a><span class='hs-keyword'>instance</span> <span class='hs-conid'>Functor</span> <span class='hs-layout'>(</span><span class='hs-conid'>State</span> <span class='hs-varid'>s</span><span class='hs-layout'>)</span> <span class='hs-keyword'>where</span>
+<a name="line-18"></a>  <span class='hs-varid'>fmap</span> <span class='hs-varid'>f</span> <span class='hs-layout'>(</span><span class='hs-conid'>State</span> <span class='hs-varid'>g</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>State</span> <span class='hs-layout'>(</span><span class='hs-keyglyph'>\</span><span class='hs-varid'>k</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-varid'>g</span> <span class='hs-layout'>(</span><span class='hs-keyglyph'>\</span><span class='hs-varid'>a</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-varid'>k</span> <span class='hs-layout'>(</span><span class='hs-varid'>f</span> <span class='hs-varid'>a</span><span class='hs-layout'>)</span><span class='hs-layout'>)</span><span class='hs-layout'>)</span>
+<a name="line-19"></a>
+<a name="line-20"></a><span class='hs-keyword'>instance</span> <span class='hs-conid'>Applicative</span> <span class='hs-layout'>(</span><span class='hs-conid'>State</span> <span class='hs-varid'>s</span><span class='hs-layout'>)</span> <span class='hs-keyword'>where</span>
+<a name="line-21"></a>  <span class='hs-varid'>pure</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>return</span>
+<a name="line-22"></a>  <span class='hs-layout'>(</span><span class='hs-varop'>&lt;*&gt;</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>ap</span>
+<a name="line-23"></a>
+<a name="line-24"></a><span class='hs-keyword'>instance</span> <span class='hs-conid'>Monad</span> <span class='hs-layout'>(</span><span class='hs-conid'>State</span> <span class='hs-varid'>s</span><span class='hs-layout'>)</span> <span class='hs-keyword'>where</span>
+<a name="line-25"></a>  <span class='hs-varid'>return</span> <span class='hs-varid'>a</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>State</span> <span class='hs-layout'>(</span><span class='hs-keyglyph'>\</span><span class='hs-varid'>k</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-varid'>k</span> <span class='hs-varid'>a</span><span class='hs-layout'>)</span>
+<a name="line-26"></a>  <span class='hs-conid'>State</span> <span class='hs-varid'>g</span> <span class='hs-varop'>&gt;&gt;=</span> <span class='hs-varid'>f</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>State</span> <span class='hs-layout'>(</span><span class='hs-keyglyph'>\</span><span class='hs-varid'>k</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-varid'>g</span> <span class='hs-layout'>(</span><span class='hs-keyglyph'>\</span><span class='hs-varid'>a</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-varid'>unState</span> <span class='hs-layout'>(</span><span class='hs-varid'>f</span> <span class='hs-varid'>a</span><span class='hs-layout'>)</span> <span class='hs-varid'>k</span><span class='hs-layout'>)</span><span class='hs-layout'>)</span>
+<a name="line-27"></a>
+<a name="line-28"></a><a name="runState"></a><span class='hs-definition'>runState</span> <span class='hs-keyglyph'>::</span> <span class='hs-conid'>State</span> <span class='hs-varid'>s</span> <span class='hs-varid'>a</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-varid'>s</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-layout'>(</span><span class='hs-varid'>a</span><span class='hs-layout'>,</span> <span class='hs-varid'>s</span><span class='hs-layout'>)</span>
+<a name="line-29"></a><span class='hs-definition'>runState</span> <span class='hs-layout'>(</span><span class='hs-conid'>State</span> <span class='hs-varid'>g</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>g</span> <span class='hs-conid'>(,)</span>
+<a name="line-30"></a>
+<a name="line-31"></a><span class='hs-keyword'>instance</span> <span class='hs-conid'>MonadState</span> <span class='hs-varid'>s</span> <span class='hs-layout'>(</span><span class='hs-conid'>State</span> <span class='hs-varid'>s</span><span class='hs-layout'>)</span> <span class='hs-keyword'>where</span>
+<a name="line-32"></a>    <span class='hs-varid'>get</span>   <span class='hs-keyglyph'>=</span> <span class='hs-conid'>State</span> <span class='hs-layout'>(</span><span class='hs-keyglyph'>\</span><span class='hs-varid'>k</span> <span class='hs-varid'>s</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-varid'>k</span> <span class='hs-varid'>s</span> <span class='hs-varid'>s</span><span class='hs-layout'>)</span>
+<a name="line-33"></a>    <span class='hs-varid'>put</span> <span class='hs-varid'>s</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>State</span> <span class='hs-layout'>(</span><span class='hs-keyglyph'>\</span><span class='hs-varid'>k</span> <span class='hs-keyword'>_</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-varid'>k</span> <span class='hs-conid'>()</span> <span class='hs-varid'>s</span><span class='hs-layout'>)</span>
+<a name="line-34"></a>
+<a name="line-35"></a><a name="State'"></a><span class='hs-keyword'>newtype</span> <span class='hs-conid'>State'</span> <span class='hs-varid'>s</span> <span class='hs-varid'>a</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>State'</span> <span class='hs-layout'>{</span> <span class='hs-varid'>unState'</span> <span class='hs-keyglyph'>::</span> <span class='hs-conid'>Codensity</span> <span class='hs-layout'>(</span><span class='hs-layout'>(</span><span class='hs-keyglyph'>-&gt;</span><span class='hs-layout'>)</span><span class='hs-varid'>s</span><span class='hs-layout'>)</span> <span class='hs-varid'>a</span> <span class='hs-layout'>}</span>
+<a name="line-36"></a>    <span class='hs-keyword'>deriving</span> <span class='hs-layout'>(</span><span class='hs-conid'>Functor</span><span class='hs-layout'>,</span><span class='hs-conid'>Applicative</span><span class='hs-layout'>,</span><span class='hs-conid'>Monad</span><span class='hs-layout'>)</span>
+<a name="line-37"></a>
+<a name="line-38"></a><span class='hs-keyword'>instance</span> <span class='hs-conid'>MonadState</span> <span class='hs-varid'>s</span> <span class='hs-layout'>(</span><span class='hs-conid'>State'</span> <span class='hs-varid'>s</span><span class='hs-layout'>)</span> <span class='hs-keyword'>where</span>
+<a name="line-39"></a>    <span class='hs-varid'>get</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>State'</span> <span class='hs-layout'>(</span><span class='hs-conid'>Codensity</span> <span class='hs-layout'>(</span><span class='hs-keyglyph'>\</span><span class='hs-varid'>k</span> <span class='hs-varid'>s</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-varid'>k</span> <span class='hs-varid'>s</span> <span class='hs-varid'>s</span><span class='hs-layout'>)</span><span class='hs-layout'>)</span>
+<a name="line-40"></a>    <span class='hs-varid'>put</span> <span class='hs-varid'>s</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>State'</span> <span class='hs-layout'>(</span><span class='hs-conid'>Codensity</span> <span class='hs-layout'>(</span><span class='hs-keyglyph'>\</span><span class='hs-varid'>k</span> <span class='hs-varid'>s</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-varid'>k</span> <span class='hs-conid'>()</span> <span class='hs-varid'>s</span><span class='hs-layout'>)</span><span class='hs-layout'>)</span>
+<a name="line-41"></a>
+<a name="line-42"></a><a name="runState'"></a><span class='hs-definition'>runState'</span> <span class='hs-keyglyph'>::</span> <span class='hs-conid'>State'</span> <span class='hs-varid'>s</span> <span class='hs-varid'>a</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-varid'>s</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-layout'>(</span><span class='hs-varid'>a</span><span class='hs-layout'>,</span> <span class='hs-varid'>s</span><span class='hs-layout'>)</span>
+<a name="line-43"></a><span class='hs-definition'>runState'</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>flip</span> <span class='hs-varid'>unCodensity</span> <span class='hs-conid'>(,)</span> <span class='hs-varop'>.</span> <span class='hs-varid'>unState'</span>
+</pre></body>
+</html>
addfile ./doc/html/monad-cps/src/Control-Monad-CPS-Writer.html
hunk ./doc/html/monad-cps/src/Control-Monad-CPS-Writer.html 1
+<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
+<html>
+<head>
+<!-- Generated by HsColour, http://www.cs.york.ac.uk/fp/darcs/hscolour/ -->
+<title>src/Control/Monad/CPS/Writer.hs</title>
+<link type='text/css' rel='stylesheet' href='hscolour.css' />
+</head>
+<body>
+<pre><a name="line-1"></a><span class='hs-comment'>{-# LANGUAGE MagicHash, UnboxedTuples #-}</span>
+<a name="line-2"></a><span class='hs-keyword'>module</span> <span class='hs-conid'>Control</span><span class='hs-varop'>.</span><span class='hs-conid'>Monad</span><span class='hs-varop'>.</span><span class='hs-conid'>CPS</span><span class='hs-varop'>.</span><span class='hs-conid'>Writer</span> 
+<a name="line-3"></a>    <span class='hs-layout'>(</span> <span class='hs-keyword'>module</span> <span class='hs-conid'>Control</span><span class='hs-varop'>.</span><span class='hs-conid'>Monad</span><span class='hs-varop'>.</span><span class='hs-conid'>Writer</span><span class='hs-varop'>.</span><span class='hs-conid'>Class</span>
+<a name="line-4"></a>    <span class='hs-layout'>,</span> <span class='hs-conid'>Writer</span><span class='hs-layout'>(</span><span class='hs-conid'>Writer</span><span class='hs-layout'>,</span> <span class='hs-varid'>unWriter</span><span class='hs-layout'>)</span>
+<a name="line-5"></a>    <span class='hs-layout'>,</span> <span class='hs-varid'>runWriter</span>
+<a name="line-6"></a>    <span class='hs-layout'>,</span> <span class='hs-conid'>Writer'</span>
+<a name="line-7"></a>    <span class='hs-layout'>,</span> <span class='hs-varid'>runWriter'</span>
+<a name="line-8"></a>    <span class='hs-layout'>)</span> <span class='hs-keyword'>where</span>
+<a name="line-9"></a>
+<a name="line-10"></a><span class='hs-keyword'>import</span> <span class='hs-conid'>Control</span><span class='hs-varop'>.</span><span class='hs-conid'>Applicative</span>
+<a name="line-11"></a><span class='hs-keyword'>import</span> <span class='hs-conid'>Control</span><span class='hs-varop'>.</span><span class='hs-conid'>Monad</span>
+<a name="line-12"></a><span class='hs-keyword'>import</span> <span class='hs-conid'>Control</span><span class='hs-varop'>.</span><span class='hs-conid'>Monad</span><span class='hs-varop'>.</span><span class='hs-conid'>Writer</span><span class='hs-varop'>.</span><span class='hs-conid'>Class</span>
+<a name="line-13"></a><span class='hs-keyword'>import</span> <span class='hs-conid'>Data</span><span class='hs-varop'>.</span><span class='hs-conid'>Monoid</span> <span class='hs-layout'>(</span><span class='hs-conid'>Monoid</span><span class='hs-layout'>(</span><span class='hs-keyglyph'>..</span><span class='hs-layout'>)</span><span class='hs-layout'>)</span>
+<a name="line-14"></a>
+<a name="line-15"></a><a name="Writer"></a><span class='hs-comment'>-- CPS transformed writer, with all of the traditional mempty mappend baggage</span>
+<a name="line-16"></a><a name="Writer"></a><span class='hs-keyword'>newtype</span> <span class='hs-conid'>Writer</span> <span class='hs-varid'>w</span> <span class='hs-varid'>a</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>Writer</span> <span class='hs-layout'>{</span> <span class='hs-varid'>unWriter</span> <span class='hs-keyglyph'>::</span> <span class='hs-keyword'>forall</span> <span class='hs-varid'>o</span><span class='hs-varop'>.</span> <span class='hs-layout'>(</span><span class='hs-varid'>a</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-varid'>w</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-varid'>o</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-varid'>o</span> <span class='hs-layout'>}</span>
+<a name="line-17"></a>
+<a name="line-18"></a><span class='hs-keyword'>instance</span> <span class='hs-conid'>Functor</span> <span class='hs-layout'>(</span><span class='hs-conid'>Writer</span> <span class='hs-varid'>w</span><span class='hs-layout'>)</span> <span class='hs-keyword'>where</span>
+<a name="line-19"></a>    <span class='hs-varid'>fmap</span> <span class='hs-varid'>f</span> <span class='hs-layout'>(</span><span class='hs-conid'>Writer</span> <span class='hs-varid'>g</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>Writer</span> <span class='hs-layout'>(</span><span class='hs-keyglyph'>\</span><span class='hs-varid'>k</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-varid'>g</span> <span class='hs-layout'>(</span><span class='hs-keyglyph'>\</span><span class='hs-varid'>a</span> <span class='hs-varid'>w</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-varid'>k</span> <span class='hs-layout'>(</span><span class='hs-varid'>f</span> <span class='hs-varid'>a</span><span class='hs-layout'>)</span> <span class='hs-varid'>w</span><span class='hs-layout'>)</span><span class='hs-layout'>)</span>
+<a name="line-20"></a>
+<a name="line-21"></a><span class='hs-keyword'>instance</span> <span class='hs-conid'>Monoid</span> <span class='hs-varid'>w</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>Applicative</span> <span class='hs-layout'>(</span><span class='hs-conid'>Writer</span> <span class='hs-varid'>w</span><span class='hs-layout'>)</span> <span class='hs-keyword'>where</span>
+<a name="line-22"></a>    <span class='hs-varid'>pure</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>return</span>
+<a name="line-23"></a>    <span class='hs-layout'>(</span><span class='hs-varop'>&lt;*&gt;</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>ap</span> 
+<a name="line-24"></a>
+<a name="line-25"></a><span class='hs-keyword'>instance</span> <span class='hs-conid'>Monoid</span> <span class='hs-varid'>w</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>Monad</span> <span class='hs-layout'>(</span><span class='hs-conid'>Writer</span> <span class='hs-varid'>w</span><span class='hs-layout'>)</span> <span class='hs-keyword'>where</span>
+<a name="line-26"></a>    <span class='hs-varid'>return</span> <span class='hs-varid'>a</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>Writer</span> <span class='hs-layout'>(</span><span class='hs-keyglyph'>\</span><span class='hs-varid'>k</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-varid'>k</span> <span class='hs-varid'>a</span> <span class='hs-varid'>mempty</span><span class='hs-layout'>)</span>
+<a name="line-27"></a>    <span class='hs-conid'>Writer</span> <span class='hs-varid'>g</span> <span class='hs-varop'>&gt;&gt;=</span> <span class='hs-varid'>f</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>Writer</span> <span class='hs-layout'>(</span><span class='hs-keyglyph'>\</span><span class='hs-varid'>k</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-varid'>g</span> <span class='hs-layout'>(</span><span class='hs-keyglyph'>\</span><span class='hs-varid'>a</span> <span class='hs-varid'>w</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-varid'>unWriter</span> <span class='hs-layout'>(</span><span class='hs-varid'>f</span> <span class='hs-varid'>a</span><span class='hs-layout'>)</span> <span class='hs-layout'>(</span><span class='hs-keyglyph'>\</span><span class='hs-varid'>a</span> <span class='hs-varid'>w'</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-varid'>k</span> <span class='hs-varid'>a</span> <span class='hs-layout'>(</span><span class='hs-varid'>w</span> <span class='hs-varop'>`mappend`</span> <span class='hs-varid'>w'</span><span class='hs-layout'>)</span><span class='hs-layout'>)</span><span class='hs-layout'>)</span><span class='hs-layout'>)</span>
+<a name="line-28"></a>
+<a name="line-29"></a><a name="runWriter"></a><span class='hs-definition'>runWriter</span> <span class='hs-keyglyph'>::</span> <span class='hs-conid'>Writer</span> <span class='hs-varid'>w</span> <span class='hs-varid'>a</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-layout'>(</span><span class='hs-varid'>a</span><span class='hs-layout'>,</span> <span class='hs-varid'>w</span><span class='hs-layout'>)</span>
+<a name="line-30"></a><span class='hs-definition'>runWriter</span> <span class='hs-layout'>(</span><span class='hs-conid'>Writer</span> <span class='hs-varid'>g</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>g</span> <span class='hs-conid'>(,)</span>
+<a name="line-31"></a>
+<a name="line-32"></a><span class='hs-keyword'>instance</span> <span class='hs-conid'>Monoid</span> <span class='hs-varid'>w</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>MonadWriter</span> <span class='hs-varid'>w</span> <span class='hs-layout'>(</span><span class='hs-conid'>Writer</span> <span class='hs-varid'>w</span><span class='hs-layout'>)</span> <span class='hs-keyword'>where</span>
+<a name="line-33"></a>    <span class='hs-varid'>tell</span> <span class='hs-varid'>w</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>Writer</span> <span class='hs-layout'>(</span><span class='hs-keyglyph'>\</span><span class='hs-varid'>k</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-varid'>k</span> <span class='hs-conid'>()</span> <span class='hs-varid'>w</span><span class='hs-layout'>)</span>
+<a name="line-34"></a>    <span class='hs-varid'>listen</span> <span class='hs-layout'>(</span><span class='hs-conid'>Writer</span> <span class='hs-varid'>f</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>Writer</span> <span class='hs-layout'>(</span><span class='hs-keyglyph'>\</span><span class='hs-varid'>g</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-varid'>f</span> <span class='hs-layout'>(</span><span class='hs-keyglyph'>\</span><span class='hs-varid'>a</span> <span class='hs-varid'>w</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-varid'>g</span> <span class='hs-layout'>(</span><span class='hs-varid'>a</span><span class='hs-layout'>,</span><span class='hs-varid'>w</span><span class='hs-layout'>)</span> <span class='hs-varid'>w</span><span class='hs-layout'>)</span><span class='hs-layout'>)</span>
+<a name="line-35"></a>    <span class='hs-varid'>pass</span> <span class='hs-layout'>(</span><span class='hs-conid'>Writer</span> <span class='hs-varid'>f</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>Writer</span> <span class='hs-layout'>(</span><span class='hs-keyglyph'>\</span><span class='hs-varid'>g</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-varid'>f</span> <span class='hs-layout'>(</span><span class='hs-keyglyph'>\</span><span class='hs-layout'>(</span><span class='hs-varid'>a</span><span class='hs-layout'>,</span><span class='hs-varid'>p</span><span class='hs-layout'>)</span> <span class='hs-varid'>w</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-varid'>g</span> <span class='hs-varid'>a</span> <span class='hs-layout'>(</span><span class='hs-varid'>p</span> <span class='hs-varid'>w</span><span class='hs-layout'>)</span><span class='hs-layout'>)</span><span class='hs-layout'>)</span>
+<a name="line-36"></a>
+<a name="line-37"></a><a name="Writer'"></a><span class='hs-comment'>-- writer as CPS transformed state, only pays for mappend when actually writing</span>
+<a name="line-38"></a><a name="Writer'"></a><span class='hs-keyword'>newtype</span> <span class='hs-conid'>Writer'</span> <span class='hs-varid'>w</span> <span class='hs-varid'>a</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>Writer'</span> <span class='hs-layout'>{</span> <span class='hs-varid'>unWriter'</span> <span class='hs-keyglyph'>::</span> <span class='hs-keyword'>forall</span> <span class='hs-varid'>o</span><span class='hs-varop'>.</span> <span class='hs-layout'>(</span><span class='hs-varid'>a</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-varid'>w</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-varid'>o</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-varid'>w</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-varid'>o</span> <span class='hs-layout'>}</span>
+<a name="line-39"></a>
+<a name="line-40"></a><span class='hs-keyword'>instance</span> <span class='hs-conid'>Monoid</span> <span class='hs-varid'>w</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>Functor</span> <span class='hs-layout'>(</span><span class='hs-conid'>Writer'</span> <span class='hs-varid'>w</span><span class='hs-layout'>)</span> <span class='hs-keyword'>where</span>
+<a name="line-41"></a>  <span class='hs-varid'>fmap</span> <span class='hs-varid'>f</span> <span class='hs-layout'>(</span><span class='hs-conid'>Writer'</span> <span class='hs-varid'>g</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>Writer'</span> <span class='hs-layout'>(</span><span class='hs-keyglyph'>\</span><span class='hs-varid'>k</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-varid'>g</span> <span class='hs-layout'>(</span><span class='hs-keyglyph'>\</span><span class='hs-varid'>a</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-varid'>k</span> <span class='hs-layout'>(</span><span class='hs-varid'>f</span> <span class='hs-varid'>a</span><span class='hs-layout'>)</span><span class='hs-layout'>)</span><span class='hs-layout'>)</span>
+<a name="line-42"></a>
+<a name="line-43"></a><span class='hs-keyword'>instance</span> <span class='hs-conid'>Monoid</span> <span class='hs-varid'>w</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>Applicative</span> <span class='hs-layout'>(</span><span class='hs-conid'>Writer'</span> <span class='hs-varid'>w</span><span class='hs-layout'>)</span> <span class='hs-keyword'>where</span>
+<a name="line-44"></a>    <span class='hs-varid'>pure</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>return</span>
+<a name="line-45"></a>    <span class='hs-layout'>(</span><span class='hs-varop'>&lt;*&gt;</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>ap</span> 
+<a name="line-46"></a>
+<a name="line-47"></a><span class='hs-keyword'>instance</span> <span class='hs-conid'>Monoid</span> <span class='hs-varid'>w</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>Monad</span> <span class='hs-layout'>(</span><span class='hs-conid'>Writer'</span> <span class='hs-varid'>w</span><span class='hs-layout'>)</span> <span class='hs-keyword'>where</span>
+<a name="line-48"></a>  <span class='hs-varid'>return</span> <span class='hs-varid'>a</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>Writer'</span> <span class='hs-layout'>(</span><span class='hs-keyglyph'>\</span><span class='hs-varid'>k</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-varid'>k</span> <span class='hs-varid'>a</span><span class='hs-layout'>)</span>
+<a name="line-49"></a>  <span class='hs-conid'>Writer'</span> <span class='hs-varid'>g</span> <span class='hs-varop'>&gt;&gt;=</span> <span class='hs-varid'>f</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>Writer'</span> <span class='hs-layout'>(</span><span class='hs-keyglyph'>\</span><span class='hs-varid'>k</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-varid'>g</span> <span class='hs-layout'>(</span><span class='hs-keyglyph'>\</span><span class='hs-varid'>a</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-varid'>unWriter'</span> <span class='hs-layout'>(</span><span class='hs-varid'>f</span> <span class='hs-varid'>a</span><span class='hs-layout'>)</span> <span class='hs-varid'>k</span><span class='hs-layout'>)</span><span class='hs-layout'>)</span>
+<a name="line-50"></a>
+<a name="line-51"></a><a name="runWriter'"></a><span class='hs-definition'>runWriter'</span> <span class='hs-keyglyph'>::</span> <span class='hs-conid'>Monoid</span> <span class='hs-varid'>w</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>Writer'</span> <span class='hs-varid'>w</span> <span class='hs-varid'>a</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-layout'>(</span><span class='hs-varid'>a</span><span class='hs-layout'>,</span> <span class='hs-varid'>w</span><span class='hs-layout'>)</span>
+<a name="line-52"></a><span class='hs-definition'>runWriter'</span> <span class='hs-layout'>(</span><span class='hs-conid'>Writer'</span> <span class='hs-varid'>g</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>g</span> <span class='hs-conid'>(,)</span> <span class='hs-varid'>mempty</span>
+<a name="line-53"></a>
+<a name="line-54"></a><span class='hs-keyword'>instance</span> <span class='hs-conid'>Monoid</span> <span class='hs-varid'>w</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>MonadWriter</span> <span class='hs-varid'>w</span> <span class='hs-layout'>(</span><span class='hs-conid'>Writer'</span> <span class='hs-varid'>w</span><span class='hs-layout'>)</span> <span class='hs-keyword'>where</span>
+<a name="line-55"></a>    <span class='hs-varid'>tell</span> <span class='hs-varid'>w'</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>Writer'</span> <span class='hs-layout'>(</span><span class='hs-keyglyph'>\</span><span class='hs-varid'>k</span> <span class='hs-varid'>w</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-varid'>k</span> <span class='hs-conid'>()</span> <span class='hs-layout'>(</span><span class='hs-varid'>w</span> <span class='hs-varop'>`mappend`</span> <span class='hs-varid'>w'</span><span class='hs-layout'>)</span><span class='hs-layout'>)</span> 
+<a name="line-56"></a>    <span class='hs-varid'>listen</span> <span class='hs-layout'>(</span><span class='hs-conid'>Writer'</span> <span class='hs-varid'>f</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>Writer'</span> <span class='hs-layout'>(</span><span class='hs-keyglyph'>\</span><span class='hs-varid'>k</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-varid'>f</span> <span class='hs-layout'>(</span><span class='hs-keyglyph'>\</span><span class='hs-varid'>a</span> <span class='hs-varid'>w</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-varid'>k</span> <span class='hs-layout'>(</span><span class='hs-varid'>a</span><span class='hs-layout'>,</span><span class='hs-varid'>w</span><span class='hs-layout'>)</span> <span class='hs-varid'>w</span><span class='hs-layout'>)</span><span class='hs-layout'>)</span>
+<a name="line-57"></a>    <span class='hs-varid'>pass</span> <span class='hs-layout'>(</span><span class='hs-conid'>Writer'</span> <span class='hs-varid'>f</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>Writer'</span> <span class='hs-layout'>(</span><span class='hs-keyglyph'>\</span><span class='hs-varid'>k</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-varid'>f</span> <span class='hs-layout'>(</span><span class='hs-keyglyph'>\</span><span class='hs-layout'>(</span><span class='hs-varid'>a</span><span class='hs-layout'>,</span><span class='hs-varid'>p</span><span class='hs-layout'>)</span> <span class='hs-varid'>w</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-varid'>k</span> <span class='hs-varid'>a</span> <span class='hs-layout'>(</span><span class='hs-varid'>p</span> <span class='hs-varid'>w</span><span class='hs-layout'>)</span><span class='hs-layout'>)</span><span class='hs-layout'>)</span>
+</pre></body>
+</html>
addfile ./doc/html/monad-cps/src/Control-Monad-CPS.html
hunk ./doc/html/monad-cps/src/Control-Monad-CPS.html 1
+<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
+<html>
+<head>
+<!-- Generated by HsColour, http://www.cs.york.ac.uk/fp/darcs/hscolour/ -->
+<title>src/Control/Monad/CPS.hs</title>
+<link type='text/css' rel='stylesheet' href='hscolour.css' />
+</head>
+<body>
+<pre><a name="line-1"></a><span class='hs-keyword'>module</span> <span class='hs-conid'>Control</span><span class='hs-varop'>.</span><span class='hs-conid'>Monad</span><span class='hs-varop'>.</span><span class='hs-conid'>CPS</span> 
+<a name="line-2"></a>    <span class='hs-layout'>(</span> <span class='hs-keyword'>module</span> <span class='hs-conid'>Control</span><span class='hs-varop'>.</span><span class='hs-conid'>Monad</span><span class='hs-varop'>.</span><span class='hs-conid'>CPS</span><span class='hs-varop'>.</span><span class='hs-conid'>Identity</span>
+<a name="line-3"></a>    <span class='hs-layout'>,</span> <span class='hs-keyword'>module</span> <span class='hs-conid'>Control</span><span class='hs-varop'>.</span><span class='hs-conid'>Monad</span><span class='hs-varop'>.</span><span class='hs-conid'>CPS</span><span class='hs-varop'>.</span><span class='hs-conid'>Reader</span>
+<a name="line-4"></a>    <span class='hs-layout'>,</span> <span class='hs-keyword'>module</span> <span class='hs-conid'>Control</span><span class='hs-varop'>.</span><span class='hs-conid'>Monad</span><span class='hs-varop'>.</span><span class='hs-conid'>CPS</span><span class='hs-varop'>.</span><span class='hs-conid'>Writer</span>
+<a name="line-5"></a>    <span class='hs-layout'>,</span> <span class='hs-keyword'>module</span> <span class='hs-conid'>Control</span><span class='hs-varop'>.</span><span class='hs-conid'>Monad</span><span class='hs-varop'>.</span><span class='hs-conid'>CPS</span><span class='hs-varop'>.</span><span class='hs-conid'>State</span>
+<a name="line-6"></a>    <span class='hs-layout'>,</span> <span class='hs-keyword'>module</span> <span class='hs-conid'>Control</span><span class='hs-varop'>.</span><span class='hs-conid'>Monad</span><span class='hs-varop'>.</span><span class='hs-conid'>CPS</span><span class='hs-varop'>.</span><span class='hs-conid'>Cont</span>
+<a name="line-7"></a>    <span class='hs-layout'>,</span> <span class='hs-keyword'>module</span> <span class='hs-conid'>Control</span><span class='hs-varop'>.</span><span class='hs-conid'>Monad</span><span class='hs-varop'>.</span><span class='hs-conid'>CPS</span><span class='hs-varop'>.</span><span class='hs-conid'>Codensity</span>
+<a name="line-8"></a>    <span class='hs-layout'>,</span> <span class='hs-keyword'>module</span> <span class='hs-conid'>Control</span><span class='hs-varop'>.</span><span class='hs-conid'>Monad</span><span class='hs-varop'>.</span><span class='hs-conid'>CPS</span><span class='hs-varop'>.</span><span class='hs-conid'>Ran</span>
+<a name="line-9"></a>    <span class='hs-layout'>)</span> <span class='hs-keyword'>where</span>
+<a name="line-10"></a>
+<a name="line-11"></a><span class='hs-keyword'>import</span> <span class='hs-conid'>Control</span><span class='hs-varop'>.</span><span class='hs-conid'>Monad</span><span class='hs-varop'>.</span><span class='hs-conid'>CPS</span><span class='hs-varop'>.</span><span class='hs-conid'>Identity</span>
+<a name="line-12"></a><span class='hs-keyword'>import</span> <span class='hs-conid'>Control</span><span class='hs-varop'>.</span><span class='hs-conid'>Monad</span><span class='hs-varop'>.</span><span class='hs-conid'>CPS</span><span class='hs-varop'>.</span><span class='hs-conid'>Reader</span>
+<a name="line-13"></a><span class='hs-keyword'>import</span> <span class='hs-conid'>Control</span><span class='hs-varop'>.</span><span class='hs-conid'>Monad</span><span class='hs-varop'>.</span><span class='hs-conid'>CPS</span><span class='hs-varop'>.</span><span class='hs-conid'>Writer</span>
+<a name="line-14"></a><span class='hs-keyword'>import</span> <span class='hs-conid'>Control</span><span class='hs-varop'>.</span><span class='hs-conid'>Monad</span><span class='hs-varop'>.</span><span class='hs-conid'>CPS</span><span class='hs-varop'>.</span><span class='hs-conid'>State</span>
+<a name="line-15"></a><span class='hs-keyword'>import</span> <span class='hs-conid'>Control</span><span class='hs-varop'>.</span><span class='hs-conid'>Monad</span><span class='hs-varop'>.</span><span class='hs-conid'>CPS</span><span class='hs-varop'>.</span><span class='hs-conid'>Cont</span>
+<a name="line-16"></a><span class='hs-keyword'>import</span> <span class='hs-conid'>Control</span><span class='hs-varop'>.</span><span class='hs-conid'>Monad</span><span class='hs-varop'>.</span><span class='hs-conid'>CPS</span><span class='hs-varop'>.</span><span class='hs-conid'>Codensity</span>
+<a name="line-17"></a><span class='hs-keyword'>import</span> <span class='hs-conid'>Control</span><span class='hs-varop'>.</span><span class='hs-conid'>Monad</span><span class='hs-varop'>.</span><span class='hs-conid'>CPS</span><span class='hs-varop'>.</span><span class='hs-conid'>Ran</span>
+</pre></body>
+</html>
addfile ./doc/html/monad-cps/src/hscolour.css
hunk ./doc/html/monad-cps/src/hscolour.css 1
+.hs-keyglyph, .hs-layout {color: red;}
+.hs-keyword {color: blue;}
+.hs-comment, .hs-comment a {color: green;}
+.hs-str, .hs-chr {color: teal;}
+.hs-keyword, .hs-conid, .hs-varid, .hs-conop, .hs-varop, .hs-num, .hs-cpp, .hs-sel, .hs-definition {}
}
